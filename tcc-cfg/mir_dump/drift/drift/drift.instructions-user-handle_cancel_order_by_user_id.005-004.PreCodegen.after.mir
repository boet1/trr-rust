// MIR for `instructions::user::handle_cancel_order_by_user_id` after PreCodegen

fn instructions::user::handle_cancel_order_by_user_id(_1: anchor_lang::context::Context<'_, '_, '_, '_, instructions::user::CancelOrder<'_>>, _2: u8) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug user_order_id => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _5: std::result::Result<(), anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _7: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _12: ();
    let _13: &anchor_lang::prelude::Clock;
    let _14: anchor_lang::prelude::Clock;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _16: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _17: isize;
    let _18: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _21: anchor_lang::prelude::Clock;
    let mut _26: instructions::optional_accounts::AccountMaps<'_>;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, instructions::optional_accounts::AccountMaps<'_>>;
    let mut _28: std::result::Result<instructions::optional_accounts::AccountMaps<'_>, error::ErrorCode>;
    let mut _29: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _30: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _31: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _32: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _33: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _34: &std::collections::BTreeSet<u16>;
    let _35: &std::collections::BTreeSet<u16>;
    let _36: std::collections::BTreeSet<u16>;
    let mut _37: &std::collections::BTreeSet<u16>;
    let _38: &std::collections::BTreeSet<u16>;
    let _39: std::collections::BTreeSet<u16>;
    let mut _40: u64;
    let mut _41: std::option::Option<state::state::OracleGuardRails>;
    let mut _42: state::state::OracleGuardRails;
    let mut _43: &state::state::State;
    let mut _44: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _45: isize;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _50: ();
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _52: std::result::Result<(), error::ErrorCode>;
    let mut _53: u8;
    let mut _54: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _55: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _56: &state::perp_market_map::PerpMarketMap<'_>;
    let _57: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _58: &state::spot_market_map::SpotMarketMap<'_>;
    let _59: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _60: &mut state::oracle_map::OracleMap<'_>;
    let mut _61: &mut state::oracle_map::OracleMap<'_>;
    let mut _62: &anchor_lang::prelude::Clock;
    let mut _63: isize;
    let mut _65: !;
    let mut _66: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _68: ();
    let mut _69: &mut instructions::user::CancelOrder<'_>;
    let mut _70: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _71: &mut instructions::user::CancelOrder<'_>;
    let mut _72: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _73: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _74: &mut instructions::user::CancelOrder<'_>;
    let mut _75: isize;
    let mut _76: isize;
    let mut _77: isize;
    let mut _78: isize;
    let mut _79: isize;
    let mut _80: isize;
    let mut _81: isize;
    let mut _82: isize;
    let mut _83: isize;
    let mut _84: isize;
    let mut _85: isize;
    let mut _86: isize;
    let mut _87: isize;
    let mut _88: isize;
    let mut _89: isize;
    let mut _90: isize;
    let mut _91: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _92: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug residual => _9;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _12;
        scope 4 {
        }
    }
    scope 5 {
        debug clock => _13;
        let _22: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
        scope 10 {
            debug state => _22;
            let _23: state::perp_market_map::PerpMarketMap<'_>;
            let _24: state::spot_market_map::SpotMarketMap<'_>;
            let mut _25: state::oracle_map::OracleMap<'_>;
            let _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _49: instructions::optional_accounts::AccountMaps<'_>;
            scope 11 {
                debug perp_market_map => _23;
                debug spot_market_map => _24;
                debug oracle_map => _25;
                let _64: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _67: ();
                scope 16 {
                    debug residual => _64;
                    scope 17 {
                    }
                }
                scope 18 {
                    debug val => _67;
                    scope 19 {
                    }
                }
            }
            scope 12 {
                debug residual => _46;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _49;
                scope 15 {
                }
            }
        }
    }
    scope 6 {
        debug residual => _18;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _21;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _69 = deref_copy (_1.1: &mut instructions::user::CancelOrder<'_>);
        _7 = &((*_69).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _70 = deref_copy (*_7);
        _91 = (((_70.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _6 = &(*_91);
        _5 = constraints::exchange_not_paused(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb46];
    }

    bb2: {
        StorageDead(_5);
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_4 as Continue).0: ());
        _3 = _12;
        StorageDead(_12);
        _75 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _11) -> [return: bb6, unwind: bb49];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _85 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb39;
    }

    bb7: {
        _15 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _16) -> [return: bb8, unwind: bb46];
    }

    bb8: {
        StorageDead(_16);
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_21);
        _21 = move ((_15 as Continue).0: anchor_lang::prelude::Clock);
        _14 = move _21;
        StorageDead(_21);
        _13 = &_14;
        _77 = discriminant(_15);
        StorageDead(_15);
        StorageLive(_22);
        _71 = deref_copy (_1.1: &mut instructions::user::CancelOrder<'_>);
        _22 = &((*_71).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _72 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _33 = &(*_72);
        _32 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _33) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_18);
        _18 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_20);
        _20 = move _18;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _20) -> [return: bb11, unwind: bb48];
    }

    bb11: {
        StorageDead(_20);
        StorageDead(_18);
        _83 = discriminant(_15);
        StorageDead(_15);
        goto -> bb38;
    }

    bb12: {
        StorageDead(_33);
        _31 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::peekable(move _32) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_32);
        _30 = &mut _31;
        _29 = &mut (*_30);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = BTreeSet::<u16>::new() -> [return: bb14, unwind continue];
    }

    bb14: {
        _35 = &_36;
        _34 = &(*_35);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = BTreeSet::<u16>::new() -> [return: bb15, unwind: bb45];
    }

    bb15: {
        _38 = &_39;
        _37 = &(*_38);
        StorageLive(_40);
        _40 = ((*_13).0: u64);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _73 = deref_copy (*_22);
        _92 = (((_73.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _44 = &(*_92);
        _43 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _44) -> [return: bb16, unwind: bb44];
    }

    bb16: {
        StorageDead(_44);
        _42 = ((*_43).7: state::state::OracleGuardRails);
        _41 = Option::<state::state::OracleGuardRails>::Some(move _42);
        StorageDead(_42);
        _28 = load_maps(move _29, move _34, move _37, move _40, move _41) -> [return: bb17, unwind: bb44];
    }

    bb17: {
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_37);
        StorageDead(_34);
        StorageDead(_29);
        _27 = <std::result::Result<AccountMaps<'_>, error::ErrorCode> as Try>::branch(move _28) -> [return: bb18, unwind: bb44];
    }

    bb18: {
        StorageDead(_28);
        _45 = discriminant(_27);
        switchInt(move _45) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_49);
        _49 = move ((_27 as Continue).0: instructions::optional_accounts::AccountMaps<'_>);
        _26 = move _49;
        StorageDead(_49);
        StorageLive(_23);
        _23 = move (_26.0: state::perp_market_map::PerpMarketMap<'_>);
        StorageLive(_24);
        _24 = move (_26.1: state::spot_market_map::SpotMarketMap<'_>);
        StorageLive(_25);
        _25 = move (_26.2: state::oracle_map::OracleMap<'_>);
        _81 = discriminant(_27);
        StorageDead(_43);
        drop(_39) -> [return: bb22, unwind: bb40];
    }

    bb20: {
        StorageLive(_46);
        _46 = ((_27 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_48);
        _48 = _46;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _48) -> [return: bb21, unwind: bb47];
    }

    bb21: {
        StorageDead(_48);
        StorageDead(_46);
        _79 = discriminant(_27);
        StorageDead(_43);
        drop(_39) -> [return: bb35, unwind: bb45];
    }

    bb22: {
        StorageDead(_39);
        StorageDead(_38);
        drop(_36) -> [return: bb23, unwind: bb41];
    }

    bb23: {
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_26);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = _2;
        StorageLive(_54);
        StorageLive(_55);
        _74 = deref_copy (_1.1: &mut instructions::user::CancelOrder<'_>);
        _55 = &((*_74).1: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _54 = &(*_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = &_23;
        _56 = &(*_57);
        StorageLive(_58);
        StorageLive(_59);
        _59 = &_24;
        _58 = &(*_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = &mut _25;
        _60 = &mut (*_61);
        StorageLive(_62);
        _62 = &(*_13);
        _52 = cancel_order_by_user_order_id(move _53, move _54, move _56, move _58, move _60, move _62) -> [return: bb24, unwind: bb41];
    }

    bb24: {
        StorageDead(_62);
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_54);
        StorageDead(_53);
        _51 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _52) -> [return: bb25, unwind: bb41];
    }

    bb25: {
        StorageDead(_52);
        _63 = discriminant(_51);
        switchInt(move _63) -> [0: bb26, 1: bb27, otherwise: bb4];
    }

    bb26: {
        StorageLive(_67);
        _67 = ((_51 as Continue).0: ());
        _50 = _67;
        StorageDead(_67);
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_51);
        StorageDead(_50);
        StorageLive(_68);
        _68 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _68);
        StorageDead(_68);
        drop(_25) -> [return: bb29, unwind: bb42];
    }

    bb27: {
        StorageLive(_64);
        _64 = ((_51 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_66);
        _66 = _64;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _66) -> [return: bb28, unwind: bb41];
    }

    bb28: {
        StorageDead(_66);
        StorageDead(_64);
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_51);
        StorageDead(_50);
        drop(_25) -> [return: bb32, unwind: bb42];
    }

    bb29: {
        StorageDead(_25);
        drop(_24) -> [return: bb30, unwind: bb43];
    }

    bb30: {
        StorageDead(_24);
        drop(_23) -> [return: bb31, unwind: bb46];
    }

    bb31: {
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb39;
    }

    bb32: {
        StorageDead(_25);
        drop(_24) -> [return: bb33, unwind: bb43];
    }

    bb33: {
        StorageDead(_24);
        drop(_23) -> [return: bb34, unwind: bb46];
    }

    bb34: {
        StorageDead(_23);
        goto -> bb37;
    }

    bb35: {
        StorageDead(_39);
        StorageDead(_38);
        drop(_36) -> [return: bb36, unwind: bb46];
    }

    bb36: {
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_26);
        goto -> bb37;
    }

    bb37: {
        StorageDead(_22);
        goto -> bb38;
    }

    bb38: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb39;
    }

    bb39: {
        return;
    }

    bb40 (cleanup): {
        drop(_36) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_25) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_24) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop(_23) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        drop(_39) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_36) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        resume;
    }

    bb47 (cleanup): {
        _88 = discriminant(_27);
        goto -> bb44;
    }

    bb48 (cleanup): {
        _89 = discriminant(_15);
        goto -> bb46;
    }

    bb49 (cleanup): {
        _90 = discriminant(_4);
        goto -> bb46;
    }
}
