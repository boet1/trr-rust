// MIR for `instruction::<impl at programs/drift/src/lib.rs:69:1: 69:11>::deserialize_reader` after PreCodegen

fn instruction::<impl at programs/drift/src/lib.rs:69:1: 69:11>::deserialize_reader(_1: &mut R) -> std::result::Result<instruction::InitializeSpotMarket, std::io::Error> {
    debug reader => _1;
    let mut _0: std::result::Result<instruction::InitializeSpotMarket, std::io::Error>;
    let mut _2: instruction::InitializeSpotMarket;
    let mut _3: u32;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u32>;
    let mut _5: std::result::Result<u32, std::io::Error>;
    let mut _6: &mut R;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _11: u32;
    let mut _12: u32;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u32>;
    let mut _14: std::result::Result<u32, std::io::Error>;
    let mut _15: &mut R;
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _20: u32;
    let mut _21: u32;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u32>;
    let mut _23: std::result::Result<u32, std::io::Error>;
    let mut _24: &mut R;
    let mut _25: isize;
    let _26: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _27: !;
    let mut _28: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _29: u32;
    let mut _30: state::oracle::OracleSource;
    let mut _31: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, state::oracle::OracleSource>;
    let mut _32: std::result::Result<state::oracle::OracleSource, std::io::Error>;
    let mut _33: &mut R;
    let mut _34: isize;
    let _35: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _36: !;
    let mut _37: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _38: state::oracle::OracleSource;
    let mut _39: u32;
    let mut _40: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u32>;
    let mut _41: std::result::Result<u32, std::io::Error>;
    let mut _42: &mut R;
    let mut _43: isize;
    let _44: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _47: u32;
    let mut _48: u32;
    let mut _49: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u32>;
    let mut _50: std::result::Result<u32, std::io::Error>;
    let mut _51: &mut R;
    let mut _52: isize;
    let _53: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _54: !;
    let mut _55: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _56: u32;
    let mut _57: u32;
    let mut _58: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u32>;
    let mut _59: std::result::Result<u32, std::io::Error>;
    let mut _60: &mut R;
    let mut _61: isize;
    let _62: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _65: u32;
    let mut _66: u32;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u32>;
    let mut _68: std::result::Result<u32, std::io::Error>;
    let mut _69: &mut R;
    let mut _70: isize;
    let _71: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _72: !;
    let mut _73: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _74: u32;
    let mut _75: u32;
    let mut _76: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u32>;
    let mut _77: std::result::Result<u32, std::io::Error>;
    let mut _78: &mut R;
    let mut _79: isize;
    let _80: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _81: !;
    let mut _82: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _83: u32;
    let mut _84: u32;
    let mut _85: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u32>;
    let mut _86: std::result::Result<u32, std::io::Error>;
    let mut _87: &mut R;
    let mut _88: isize;
    let _89: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _90: !;
    let mut _91: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _92: u32;
    let mut _93: u32;
    let mut _94: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u32>;
    let mut _95: std::result::Result<u32, std::io::Error>;
    let mut _96: &mut R;
    let mut _97: isize;
    let _98: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _99: !;
    let mut _100: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _101: u32;
    let mut _102: bool;
    let mut _103: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, bool>;
    let mut _104: std::result::Result<bool, std::io::Error>;
    let mut _105: &mut R;
    let mut _106: isize;
    let _107: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _108: !;
    let mut _109: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _110: bool;
    let mut _111: state::spot_market::AssetTier;
    let mut _112: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, state::spot_market::AssetTier>;
    let mut _113: std::result::Result<state::spot_market::AssetTier, std::io::Error>;
    let mut _114: &mut R;
    let mut _115: isize;
    let _116: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _117: !;
    let mut _118: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _119: state::spot_market::AssetTier;
    let mut _120: u64;
    let mut _121: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _122: std::result::Result<u64, std::io::Error>;
    let mut _123: &mut R;
    let mut _124: isize;
    let _125: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _126: !;
    let mut _127: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _128: u64;
    let mut _129: u64;
    let mut _130: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _131: std::result::Result<u64, std::io::Error>;
    let mut _132: &mut R;
    let mut _133: isize;
    let _134: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _135: !;
    let mut _136: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _137: u64;
    let mut _138: u64;
    let mut _139: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _140: std::result::Result<u64, std::io::Error>;
    let mut _141: &mut R;
    let mut _142: isize;
    let _143: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _144: !;
    let mut _145: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _146: u64;
    let mut _147: u64;
    let mut _148: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _149: std::result::Result<u64, std::io::Error>;
    let mut _150: &mut R;
    let mut _151: isize;
    let _152: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _153: !;
    let mut _154: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _155: u64;
    let mut _156: u32;
    let mut _157: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u32>;
    let mut _158: std::result::Result<u32, std::io::Error>;
    let mut _159: &mut R;
    let mut _160: isize;
    let _161: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _162: !;
    let mut _163: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _164: u32;
    let mut _165: [u8; 32];
    let mut _166: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, [u8; 32]>;
    let mut _167: std::result::Result<[u8; 32], std::io::Error>;
    let mut _168: &mut R;
    let mut _169: isize;
    let _170: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _171: !;
    let mut _172: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _173: [u8; 32];
    let mut _174: bool;
    let mut _175: bool;
    let mut _176: bool;
    let mut _177: bool;
    let mut _178: bool;
    let mut _179: bool;
    let mut _180: bool;
    let mut _181: bool;
    let mut _182: bool;
    let mut _183: bool;
    let mut _184: bool;
    let mut _185: bool;
    let mut _186: bool;
    let mut _187: bool;
    let mut _188: bool;
    let mut _189: bool;
    let mut _190: bool;
    let mut _191: bool;
    let mut _192: isize;
    let mut _193: isize;
    let mut _194: isize;
    let mut _195: isize;
    let mut _196: isize;
    let mut _197: isize;
    let mut _198: isize;
    let mut _199: isize;
    let mut _200: isize;
    let mut _201: isize;
    let mut _202: isize;
    let mut _203: isize;
    let mut _204: isize;
    let mut _205: isize;
    let mut _206: isize;
    let mut _207: isize;
    let mut _208: isize;
    let mut _209: isize;
    let mut _210: isize;
    let mut _211: isize;
    let mut _212: isize;
    let mut _213: isize;
    let mut _214: isize;
    let mut _215: isize;
    let mut _216: isize;
    let mut _217: isize;
    let mut _218: isize;
    let mut _219: isize;
    let mut _220: isize;
    let mut _221: isize;
    let mut _222: isize;
    let mut _223: isize;
    let mut _224: isize;
    let mut _225: isize;
    let mut _226: isize;
    let mut _227: isize;
    let mut _228: isize;
    let mut _229: isize;
    let mut _230: isize;
    let mut _231: isize;
    let mut _232: isize;
    let mut _233: isize;
    let mut _234: isize;
    let mut _235: isize;
    let mut _236: isize;
    let mut _237: isize;
    let mut _238: isize;
    let mut _239: isize;
    let mut _240: isize;
    let mut _241: isize;
    let mut _242: isize;
    let mut _243: isize;
    let mut _244: isize;
    let mut _245: isize;
    let mut _246: isize;
    let mut _247: isize;
    let mut _248: isize;
    let mut _249: isize;
    let mut _250: isize;
    let mut _251: isize;
    let mut _252: isize;
    let mut _253: isize;
    let mut _254: isize;
    let mut _255: isize;
    let mut _256: isize;
    let mut _257: isize;
    let mut _258: isize;
    let mut _259: isize;
    let mut _260: isize;
    let mut _261: isize;
    let mut _262: isize;
    let mut _263: isize;
    let mut _264: isize;
    let mut _265: isize;
    let mut _266: isize;
    let mut _267: isize;
    let mut _268: isize;
    let mut _269: isize;
    let mut _270: isize;
    let mut _271: isize;
    let mut _272: isize;
    let mut _273: isize;
    let mut _274: isize;
    let mut _275: isize;
    let mut _276: isize;
    let mut _277: isize;
    let mut _278: isize;
    let mut _279: isize;
    let mut _280: isize;
    let mut _281: isize;
    let mut _282: isize;
    let mut _283: isize;
    let mut _284: isize;
    let mut _285: isize;
    let mut _286: isize;
    scope 1 {
        debug residual => _8;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _11;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _17;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _20;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _26;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _29;
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _35;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _38;
        scope 16 {
        }
    }
    scope 17 {
        debug residual => _44;
        scope 18 {
        }
    }
    scope 19 {
        debug val => _47;
        scope 20 {
        }
    }
    scope 21 {
        debug residual => _53;
        scope 22 {
        }
    }
    scope 23 {
        debug val => _56;
        scope 24 {
        }
    }
    scope 25 {
        debug residual => _62;
        scope 26 {
        }
    }
    scope 27 {
        debug val => _65;
        scope 28 {
        }
    }
    scope 29 {
        debug residual => _71;
        scope 30 {
        }
    }
    scope 31 {
        debug val => _74;
        scope 32 {
        }
    }
    scope 33 {
        debug residual => _80;
        scope 34 {
        }
    }
    scope 35 {
        debug val => _83;
        scope 36 {
        }
    }
    scope 37 {
        debug residual => _89;
        scope 38 {
        }
    }
    scope 39 {
        debug val => _92;
        scope 40 {
        }
    }
    scope 41 {
        debug residual => _98;
        scope 42 {
        }
    }
    scope 43 {
        debug val => _101;
        scope 44 {
        }
    }
    scope 45 {
        debug residual => _107;
        scope 46 {
        }
    }
    scope 47 {
        debug val => _110;
        scope 48 {
        }
    }
    scope 49 {
        debug residual => _116;
        scope 50 {
        }
    }
    scope 51 {
        debug val => _119;
        scope 52 {
        }
    }
    scope 53 {
        debug residual => _125;
        scope 54 {
        }
    }
    scope 55 {
        debug val => _128;
        scope 56 {
        }
    }
    scope 57 {
        debug residual => _134;
        scope 58 {
        }
    }
    scope 59 {
        debug val => _137;
        scope 60 {
        }
    }
    scope 61 {
        debug residual => _143;
        scope 62 {
        }
    }
    scope 63 {
        debug val => _146;
        scope 64 {
        }
    }
    scope 65 {
        debug residual => _152;
        scope 66 {
        }
    }
    scope 67 {
        debug val => _155;
        scope 68 {
        }
    }
    scope 69 {
        debug residual => _161;
        scope 70 {
        }
    }
    scope 71 {
        debug val => _164;
        scope 72 {
        }
    }
    scope 73 {
        debug residual => _170;
        scope 74 {
        }
    }
    scope 75 {
        debug val => _173;
        scope 76 {
        }
    }

    bb0: {
        _191 = const false;
        _190 = const false;
        _189 = const false;
        _188 = const false;
        _187 = const false;
        _186 = const false;
        _185 = const false;
        _184 = const false;
        _183 = const false;
        _182 = const false;
        _181 = const false;
        _180 = const false;
        _179 = const false;
        _178 = const false;
        _177 = const false;
        _176 = const false;
        _175 = const false;
        _174 = const false;
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &mut (*_1);
        _5 = <u32 as BorshDeserialize>::deserialize_reader::<R>(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<u32, std::io::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb98];
    }

    bb2: {
        _191 = const true;
        StorageDead(_5);
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = ((_4 as Continue).0: u32);
        _3 = _11;
        StorageDead(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &mut (*_1);
        _14 = <u32 as BorshDeserialize>::deserialize_reader::<R>(move _15) -> [return: bb7, unwind: bb135];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_10);
        _10 = move _8;
        _0 = <std::result::Result<instruction::InitializeSpotMarket, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _10) -> [return: bb6, unwind: bb135];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb116;
    }

    bb7: {
        StorageDead(_15);
        _13 = <std::result::Result<u32, std::io::Error> as Try>::branch(move _14) -> [return: bb8, unwind: bb135];
    }

    bb8: {
        _190 = const true;
        StorageDead(_14);
        _16 = discriminant(_13);
        switchInt(move _16) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_20);
        _20 = ((_13 as Continue).0: u32);
        _12 = _20;
        StorageDead(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &mut (*_1);
        _23 = <u32 as BorshDeserialize>::deserialize_reader::<R>(move _24) -> [return: bb12, unwind: bb134];
    }

    bb10: {
        StorageLive(_17);
        _17 = move ((_13 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<instruction::InitializeSpotMarket, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _19) -> [return: bb11, unwind: bb134];
    }

    bb11: {
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb115;
    }

    bb12: {
        StorageDead(_24);
        _22 = <std::result::Result<u32, std::io::Error> as Try>::branch(move _23) -> [return: bb13, unwind: bb134];
    }

    bb13: {
        _189 = const true;
        StorageDead(_23);
        _25 = discriminant(_22);
        switchInt(move _25) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_29);
        _29 = ((_22 as Continue).0: u32);
        _21 = _29;
        StorageDead(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &mut (*_1);
        _32 = <state::oracle::OracleSource as BorshDeserialize>::deserialize_reader::<R>(move _33) -> [return: bb17, unwind: bb133];
    }

    bb15: {
        StorageLive(_26);
        _26 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_28);
        _28 = move _26;
        _0 = <std::result::Result<instruction::InitializeSpotMarket, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _28) -> [return: bb16, unwind: bb133];
    }

    bb16: {
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb114;
    }

    bb17: {
        StorageDead(_33);
        _31 = <std::result::Result<state::oracle::OracleSource, std::io::Error> as Try>::branch(move _32) -> [return: bb18, unwind: bb133];
    }

    bb18: {
        _188 = const true;
        StorageDead(_32);
        _34 = discriminant(_31);
        switchInt(move _34) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_38);
        _38 = ((_31 as Continue).0: state::oracle::OracleSource);
        _30 = _38;
        StorageDead(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = &mut (*_1);
        _41 = <u32 as BorshDeserialize>::deserialize_reader::<R>(move _42) -> [return: bb22, unwind: bb132];
    }

    bb20: {
        StorageLive(_35);
        _35 = move ((_31 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_37);
        _37 = move _35;
        _0 = <std::result::Result<instruction::InitializeSpotMarket, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _37) -> [return: bb21, unwind: bb132];
    }

    bb21: {
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb113;
    }

    bb22: {
        StorageDead(_42);
        _40 = <std::result::Result<u32, std::io::Error> as Try>::branch(move _41) -> [return: bb23, unwind: bb132];
    }

    bb23: {
        _187 = const true;
        StorageDead(_41);
        _43 = discriminant(_40);
        switchInt(move _43) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_47);
        _47 = ((_40 as Continue).0: u32);
        _39 = _47;
        StorageDead(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = &mut (*_1);
        _50 = <u32 as BorshDeserialize>::deserialize_reader::<R>(move _51) -> [return: bb27, unwind: bb131];
    }

    bb25: {
        StorageLive(_44);
        _44 = move ((_40 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_46);
        _46 = move _44;
        _0 = <std::result::Result<instruction::InitializeSpotMarket, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _46) -> [return: bb26, unwind: bb131];
    }

    bb26: {
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb112;
    }

    bb27: {
        StorageDead(_51);
        _49 = <std::result::Result<u32, std::io::Error> as Try>::branch(move _50) -> [return: bb28, unwind: bb131];
    }

    bb28: {
        _186 = const true;
        StorageDead(_50);
        _52 = discriminant(_49);
        switchInt(move _52) -> [0: bb29, 1: bb30, otherwise: bb4];
    }

    bb29: {
        StorageLive(_56);
        _56 = ((_49 as Continue).0: u32);
        _48 = _56;
        StorageDead(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = &mut (*_1);
        _59 = <u32 as BorshDeserialize>::deserialize_reader::<R>(move _60) -> [return: bb32, unwind: bb130];
    }

    bb30: {
        StorageLive(_53);
        _53 = move ((_49 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_55);
        _55 = move _53;
        _0 = <std::result::Result<instruction::InitializeSpotMarket, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _55) -> [return: bb31, unwind: bb130];
    }

    bb31: {
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb111;
    }

    bb32: {
        StorageDead(_60);
        _58 = <std::result::Result<u32, std::io::Error> as Try>::branch(move _59) -> [return: bb33, unwind: bb130];
    }

    bb33: {
        _185 = const true;
        StorageDead(_59);
        _61 = discriminant(_58);
        switchInt(move _61) -> [0: bb34, 1: bb35, otherwise: bb4];
    }

    bb34: {
        StorageLive(_65);
        _65 = ((_58 as Continue).0: u32);
        _57 = _65;
        StorageDead(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &mut (*_1);
        _68 = <u32 as BorshDeserialize>::deserialize_reader::<R>(move _69) -> [return: bb37, unwind: bb129];
    }

    bb35: {
        StorageLive(_62);
        _62 = move ((_58 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_64);
        _64 = move _62;
        _0 = <std::result::Result<instruction::InitializeSpotMarket, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _64) -> [return: bb36, unwind: bb129];
    }

    bb36: {
        StorageDead(_64);
        StorageDead(_62);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb110;
    }

    bb37: {
        StorageDead(_69);
        _67 = <std::result::Result<u32, std::io::Error> as Try>::branch(move _68) -> [return: bb38, unwind: bb129];
    }

    bb38: {
        _184 = const true;
        StorageDead(_68);
        _70 = discriminant(_67);
        switchInt(move _70) -> [0: bb39, 1: bb40, otherwise: bb4];
    }

    bb39: {
        StorageLive(_74);
        _74 = ((_67 as Continue).0: u32);
        _66 = _74;
        StorageDead(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = &mut (*_1);
        _77 = <u32 as BorshDeserialize>::deserialize_reader::<R>(move _78) -> [return: bb42, unwind: bb128];
    }

    bb40: {
        StorageLive(_71);
        _71 = move ((_67 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_73);
        _73 = move _71;
        _0 = <std::result::Result<instruction::InitializeSpotMarket, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _73) -> [return: bb41, unwind: bb128];
    }

    bb41: {
        StorageDead(_73);
        StorageDead(_71);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb109;
    }

    bb42: {
        StorageDead(_78);
        _76 = <std::result::Result<u32, std::io::Error> as Try>::branch(move _77) -> [return: bb43, unwind: bb128];
    }

    bb43: {
        _183 = const true;
        StorageDead(_77);
        _79 = discriminant(_76);
        switchInt(move _79) -> [0: bb44, 1: bb45, otherwise: bb4];
    }

    bb44: {
        StorageLive(_83);
        _83 = ((_76 as Continue).0: u32);
        _75 = _83;
        StorageDead(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _87 = &mut (*_1);
        _86 = <u32 as BorshDeserialize>::deserialize_reader::<R>(move _87) -> [return: bb47, unwind: bb127];
    }

    bb45: {
        StorageLive(_80);
        _80 = move ((_76 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_82);
        _82 = move _80;
        _0 = <std::result::Result<instruction::InitializeSpotMarket, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _82) -> [return: bb46, unwind: bb127];
    }

    bb46: {
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb108;
    }

    bb47: {
        StorageDead(_87);
        _85 = <std::result::Result<u32, std::io::Error> as Try>::branch(move _86) -> [return: bb48, unwind: bb127];
    }

    bb48: {
        _182 = const true;
        StorageDead(_86);
        _88 = discriminant(_85);
        switchInt(move _88) -> [0: bb49, 1: bb50, otherwise: bb4];
    }

    bb49: {
        StorageLive(_92);
        _92 = ((_85 as Continue).0: u32);
        _84 = _92;
        StorageDead(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = &mut (*_1);
        _95 = <u32 as BorshDeserialize>::deserialize_reader::<R>(move _96) -> [return: bb52, unwind: bb126];
    }

    bb50: {
        StorageLive(_89);
        _89 = move ((_85 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_91);
        _91 = move _89;
        _0 = <std::result::Result<instruction::InitializeSpotMarket, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _91) -> [return: bb51, unwind: bb126];
    }

    bb51: {
        StorageDead(_91);
        StorageDead(_89);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb107;
    }

    bb52: {
        StorageDead(_96);
        _94 = <std::result::Result<u32, std::io::Error> as Try>::branch(move _95) -> [return: bb53, unwind: bb126];
    }

    bb53: {
        _181 = const true;
        StorageDead(_95);
        _97 = discriminant(_94);
        switchInt(move _97) -> [0: bb54, 1: bb55, otherwise: bb4];
    }

    bb54: {
        StorageLive(_101);
        _101 = ((_94 as Continue).0: u32);
        _93 = _101;
        StorageDead(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _105 = &mut (*_1);
        _104 = <bool as BorshDeserialize>::deserialize_reader::<R>(move _105) -> [return: bb57, unwind: bb125];
    }

    bb55: {
        StorageLive(_98);
        _98 = move ((_94 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_100);
        _100 = move _98;
        _0 = <std::result::Result<instruction::InitializeSpotMarket, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _100) -> [return: bb56, unwind: bb125];
    }

    bb56: {
        StorageDead(_100);
        StorageDead(_98);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb106;
    }

    bb57: {
        StorageDead(_105);
        _103 = <std::result::Result<bool, std::io::Error> as Try>::branch(move _104) -> [return: bb58, unwind: bb125];
    }

    bb58: {
        _180 = const true;
        StorageDead(_104);
        _106 = discriminant(_103);
        switchInt(move _106) -> [0: bb59, 1: bb60, otherwise: bb4];
    }

    bb59: {
        StorageLive(_110);
        _110 = ((_103 as Continue).0: bool);
        _102 = _110;
        StorageDead(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        _114 = &mut (*_1);
        _113 = <state::spot_market::AssetTier as BorshDeserialize>::deserialize_reader::<R>(move _114) -> [return: bb62, unwind: bb124];
    }

    bb60: {
        StorageLive(_107);
        _107 = move ((_103 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_109);
        _109 = move _107;
        _0 = <std::result::Result<instruction::InitializeSpotMarket, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _109) -> [return: bb61, unwind: bb124];
    }

    bb61: {
        StorageDead(_109);
        StorageDead(_107);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb105;
    }

    bb62: {
        StorageDead(_114);
        _112 = <std::result::Result<state::spot_market::AssetTier, std::io::Error> as Try>::branch(move _113) -> [return: bb63, unwind: bb124];
    }

    bb63: {
        _179 = const true;
        StorageDead(_113);
        _115 = discriminant(_112);
        switchInt(move _115) -> [0: bb64, 1: bb65, otherwise: bb4];
    }

    bb64: {
        StorageLive(_119);
        _119 = ((_112 as Continue).0: state::spot_market::AssetTier);
        _111 = _119;
        StorageDead(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _123 = &mut (*_1);
        _122 = <u64 as BorshDeserialize>::deserialize_reader::<R>(move _123) -> [return: bb67, unwind: bb123];
    }

    bb65: {
        StorageLive(_116);
        _116 = move ((_112 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_118);
        _118 = move _116;
        _0 = <std::result::Result<instruction::InitializeSpotMarket, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _118) -> [return: bb66, unwind: bb123];
    }

    bb66: {
        StorageDead(_118);
        StorageDead(_116);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb104;
    }

    bb67: {
        StorageDead(_123);
        _121 = <std::result::Result<u64, std::io::Error> as Try>::branch(move _122) -> [return: bb68, unwind: bb123];
    }

    bb68: {
        _178 = const true;
        StorageDead(_122);
        _124 = discriminant(_121);
        switchInt(move _124) -> [0: bb69, 1: bb70, otherwise: bb4];
    }

    bb69: {
        StorageLive(_128);
        _128 = ((_121 as Continue).0: u64);
        _120 = _128;
        StorageDead(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        _132 = &mut (*_1);
        _131 = <u64 as BorshDeserialize>::deserialize_reader::<R>(move _132) -> [return: bb72, unwind: bb122];
    }

    bb70: {
        StorageLive(_125);
        _125 = move ((_121 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_127);
        _127 = move _125;
        _0 = <std::result::Result<instruction::InitializeSpotMarket, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _127) -> [return: bb71, unwind: bb122];
    }

    bb71: {
        StorageDead(_127);
        StorageDead(_125);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb103;
    }

    bb72: {
        StorageDead(_132);
        _130 = <std::result::Result<u64, std::io::Error> as Try>::branch(move _131) -> [return: bb73, unwind: bb122];
    }

    bb73: {
        _177 = const true;
        StorageDead(_131);
        _133 = discriminant(_130);
        switchInt(move _133) -> [0: bb74, 1: bb75, otherwise: bb4];
    }

    bb74: {
        StorageLive(_137);
        _137 = ((_130 as Continue).0: u64);
        _129 = _137;
        StorageDead(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        _141 = &mut (*_1);
        _140 = <u64 as BorshDeserialize>::deserialize_reader::<R>(move _141) -> [return: bb77, unwind: bb121];
    }

    bb75: {
        StorageLive(_134);
        _134 = move ((_130 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_136);
        _136 = move _134;
        _0 = <std::result::Result<instruction::InitializeSpotMarket, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _136) -> [return: bb76, unwind: bb121];
    }

    bb76: {
        StorageDead(_136);
        StorageDead(_134);
        StorageDead(_129);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb102;
    }

    bb77: {
        StorageDead(_141);
        _139 = <std::result::Result<u64, std::io::Error> as Try>::branch(move _140) -> [return: bb78, unwind: bb121];
    }

    bb78: {
        _176 = const true;
        StorageDead(_140);
        _142 = discriminant(_139);
        switchInt(move _142) -> [0: bb79, 1: bb80, otherwise: bb4];
    }

    bb79: {
        StorageLive(_146);
        _146 = ((_139 as Continue).0: u64);
        _138 = _146;
        StorageDead(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        _150 = &mut (*_1);
        _149 = <u64 as BorshDeserialize>::deserialize_reader::<R>(move _150) -> [return: bb82, unwind: bb120];
    }

    bb80: {
        StorageLive(_143);
        _143 = move ((_139 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_145);
        _145 = move _143;
        _0 = <std::result::Result<instruction::InitializeSpotMarket, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _145) -> [return: bb81, unwind: bb120];
    }

    bb81: {
        StorageDead(_145);
        StorageDead(_143);
        StorageDead(_138);
        StorageDead(_129);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb101;
    }

    bb82: {
        StorageDead(_150);
        _148 = <std::result::Result<u64, std::io::Error> as Try>::branch(move _149) -> [return: bb83, unwind: bb120];
    }

    bb83: {
        _175 = const true;
        StorageDead(_149);
        _151 = discriminant(_148);
        switchInt(move _151) -> [0: bb84, 1: bb85, otherwise: bb4];
    }

    bb84: {
        StorageLive(_155);
        _155 = ((_148 as Continue).0: u64);
        _147 = _155;
        StorageDead(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        _159 = &mut (*_1);
        _158 = <u32 as BorshDeserialize>::deserialize_reader::<R>(move _159) -> [return: bb87, unwind: bb119];
    }

    bb85: {
        StorageLive(_152);
        _152 = move ((_148 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_154);
        _154 = move _152;
        _0 = <std::result::Result<instruction::InitializeSpotMarket, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _154) -> [return: bb86, unwind: bb119];
    }

    bb86: {
        StorageDead(_154);
        StorageDead(_152);
        StorageDead(_147);
        StorageDead(_138);
        StorageDead(_129);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb100;
    }

    bb87: {
        StorageDead(_159);
        _157 = <std::result::Result<u32, std::io::Error> as Try>::branch(move _158) -> [return: bb88, unwind: bb119];
    }

    bb88: {
        _174 = const true;
        StorageDead(_158);
        _160 = discriminant(_157);
        switchInt(move _160) -> [0: bb89, 1: bb90, otherwise: bb4];
    }

    bb89: {
        StorageLive(_164);
        _164 = ((_157 as Continue).0: u32);
        _156 = _164;
        StorageDead(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        _168 = &mut (*_1);
        _167 = <[u8; 32] as BorshDeserialize>::deserialize_reader::<R>(move _168) -> [return: bb92, unwind: bb118];
    }

    bb90: {
        StorageLive(_161);
        _161 = move ((_157 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_163);
        _163 = move _161;
        _0 = <std::result::Result<instruction::InitializeSpotMarket, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _163) -> [return: bb91, unwind: bb118];
    }

    bb91: {
        StorageDead(_163);
        StorageDead(_161);
        StorageDead(_156);
        StorageDead(_147);
        StorageDead(_138);
        StorageDead(_129);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb99;
    }

    bb92: {
        StorageDead(_168);
        _166 = <std::result::Result<[u8; 32], std::io::Error> as Try>::branch(move _167) -> [return: bb93, unwind: bb118];
    }

    bb93: {
        StorageDead(_167);
        _169 = discriminant(_166);
        switchInt(move _169) -> [0: bb94, 1: bb95, otherwise: bb4];
    }

    bb94: {
        StorageLive(_173);
        _173 = ((_166 as Continue).0: [u8; 32]);
        _165 = _173;
        StorageDead(_173);
        _2 = instruction::InitializeSpotMarket { optimal_utilization: move _3, optimal_borrow_rate: move _12, max_borrow_rate: move _21, oracle_source: move _30, initial_asset_weight: move _39, maintenance_asset_weight: move _48, initial_liability_weight: move _57, maintenance_liability_weight: move _66, imf_factor: move _75, liquidator_fee: move _84, if_liquidation_fee: move _93, active_status: move _102, asset_tier: move _111, scale_initial_asset_weight_start: move _120, withdraw_guard_threshold: move _129, order_tick_size: move _138, order_step_size: move _147, if_total_factor: move _156, name: move _165 };
        StorageDead(_165);
        StorageDead(_156);
        StorageDead(_147);
        StorageDead(_138);
        StorageDead(_129);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        _0 = std::result::Result::<instruction::InitializeSpotMarket, std::io::Error>::Ok(move _2);
        StorageDead(_2);
        _192 = discriminant(_166);
        StorageDead(_166);
        _194 = discriminant(_157);
        _174 = const false;
        StorageDead(_157);
        _196 = discriminant(_148);
        _175 = const false;
        StorageDead(_148);
        _198 = discriminant(_139);
        _176 = const false;
        StorageDead(_139);
        _200 = discriminant(_130);
        _177 = const false;
        StorageDead(_130);
        _202 = discriminant(_121);
        _178 = const false;
        StorageDead(_121);
        _204 = discriminant(_112);
        _179 = const false;
        StorageDead(_112);
        _206 = discriminant(_103);
        _180 = const false;
        StorageDead(_103);
        _208 = discriminant(_94);
        _181 = const false;
        StorageDead(_94);
        _210 = discriminant(_85);
        _182 = const false;
        StorageDead(_85);
        _212 = discriminant(_76);
        _183 = const false;
        StorageDead(_76);
        _214 = discriminant(_67);
        _184 = const false;
        StorageDead(_67);
        _216 = discriminant(_58);
        _185 = const false;
        StorageDead(_58);
        _218 = discriminant(_49);
        _186 = const false;
        StorageDead(_49);
        _220 = discriminant(_40);
        _187 = const false;
        StorageDead(_40);
        _222 = discriminant(_31);
        _188 = const false;
        StorageDead(_31);
        _224 = discriminant(_22);
        _189 = const false;
        StorageDead(_22);
        _226 = discriminant(_13);
        _190 = const false;
        StorageDead(_13);
        _228 = discriminant(_4);
        _191 = const false;
        StorageDead(_4);
        goto -> bb97;
    }

    bb95: {
        StorageLive(_170);
        _170 = move ((_166 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_172);
        _172 = move _170;
        _0 = <std::result::Result<instruction::InitializeSpotMarket, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _172) -> [return: bb96, unwind: bb117];
    }

    bb96: {
        StorageDead(_172);
        StorageDead(_170);
        StorageDead(_165);
        StorageDead(_156);
        StorageDead(_147);
        StorageDead(_138);
        StorageDead(_129);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        _230 = discriminant(_166);
        StorageDead(_166);
        goto -> bb99;
    }

    bb97: {
        return;
    }

    bb98 (cleanup): {
        resume;
    }

    bb99: {
        _232 = discriminant(_157);
        _174 = const false;
        StorageDead(_157);
        goto -> bb100;
    }

    bb100: {
        _234 = discriminant(_148);
        _175 = const false;
        StorageDead(_148);
        goto -> bb101;
    }

    bb101: {
        _236 = discriminant(_139);
        _176 = const false;
        StorageDead(_139);
        goto -> bb102;
    }

    bb102: {
        _238 = discriminant(_130);
        _177 = const false;
        StorageDead(_130);
        goto -> bb103;
    }

    bb103: {
        _240 = discriminant(_121);
        _178 = const false;
        StorageDead(_121);
        goto -> bb104;
    }

    bb104: {
        _242 = discriminant(_112);
        _179 = const false;
        StorageDead(_112);
        goto -> bb105;
    }

    bb105: {
        _244 = discriminant(_103);
        _180 = const false;
        StorageDead(_103);
        goto -> bb106;
    }

    bb106: {
        _246 = discriminant(_94);
        _181 = const false;
        StorageDead(_94);
        goto -> bb107;
    }

    bb107: {
        _248 = discriminant(_85);
        _182 = const false;
        StorageDead(_85);
        goto -> bb108;
    }

    bb108: {
        _250 = discriminant(_76);
        _183 = const false;
        StorageDead(_76);
        goto -> bb109;
    }

    bb109: {
        _252 = discriminant(_67);
        _184 = const false;
        StorageDead(_67);
        goto -> bb110;
    }

    bb110: {
        _254 = discriminant(_58);
        _185 = const false;
        StorageDead(_58);
        goto -> bb111;
    }

    bb111: {
        _256 = discriminant(_49);
        _186 = const false;
        StorageDead(_49);
        goto -> bb112;
    }

    bb112: {
        _258 = discriminant(_40);
        _187 = const false;
        StorageDead(_40);
        goto -> bb113;
    }

    bb113: {
        _260 = discriminant(_31);
        _188 = const false;
        StorageDead(_31);
        goto -> bb114;
    }

    bb114: {
        _262 = discriminant(_22);
        _189 = const false;
        StorageDead(_22);
        goto -> bb115;
    }

    bb115: {
        _264 = discriminant(_13);
        _190 = const false;
        StorageDead(_13);
        goto -> bb116;
    }

    bb116: {
        _266 = discriminant(_4);
        _191 = const false;
        StorageDead(_4);
        goto -> bb97;
    }

    bb117 (cleanup): {
        _268 = discriminant(_166);
        goto -> bb118;
    }

    bb118 (cleanup): {
        _269 = discriminant(_157);
        goto -> bb119;
    }

    bb119 (cleanup): {
        _270 = discriminant(_148);
        goto -> bb120;
    }

    bb120 (cleanup): {
        _271 = discriminant(_139);
        goto -> bb121;
    }

    bb121 (cleanup): {
        _272 = discriminant(_130);
        goto -> bb122;
    }

    bb122 (cleanup): {
        _273 = discriminant(_121);
        goto -> bb123;
    }

    bb123 (cleanup): {
        _274 = discriminant(_112);
        goto -> bb124;
    }

    bb124 (cleanup): {
        _275 = discriminant(_103);
        goto -> bb125;
    }

    bb125 (cleanup): {
        _276 = discriminant(_94);
        goto -> bb126;
    }

    bb126 (cleanup): {
        _277 = discriminant(_85);
        goto -> bb127;
    }

    bb127 (cleanup): {
        _278 = discriminant(_76);
        goto -> bb128;
    }

    bb128 (cleanup): {
        _279 = discriminant(_67);
        goto -> bb129;
    }

    bb129 (cleanup): {
        _280 = discriminant(_58);
        goto -> bb130;
    }

    bb130 (cleanup): {
        _281 = discriminant(_49);
        goto -> bb131;
    }

    bb131 (cleanup): {
        _282 = discriminant(_40);
        goto -> bb132;
    }

    bb132 (cleanup): {
        _283 = discriminant(_31);
        goto -> bb133;
    }

    bb133 (cleanup): {
        _284 = discriminant(_22);
        goto -> bb134;
    }

    bb134 (cleanup): {
        _285 = discriminant(_13);
        goto -> bb135;
    }

    bb135 (cleanup): {
        _286 = discriminant(_4);
        goto -> bb98;
    }
}
