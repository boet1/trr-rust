// MIR for `admin::handle_initialize_protected_maker_mode_config` after PreCodegen

fn admin::handle_initialize_protected_maker_mode_config(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::InitializeProtectedMakerModeConfig<'_>>, _2: u32) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug max_users => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let mut _3: std::cell::RefMut<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>>;
    let mut _5: std::result::Result<std::cell::RefMut<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>, anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::AccountLoader<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _11: std::cell::RefMut<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>;
    let mut _12: u32;
    let mut _13: &mut state::protected_maker_mode_config::ProtectedMakerModeConfig;
    let mut _14: &mut std::cell::RefMut<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>;
    let mut _15: ();
    let mut _16: &mut instructions::admin::InitializeProtectedMakerModeConfig<'_>;
    let mut _17: isize;
    let mut _18: isize;
    let mut _19: isize;
    let mut _20: isize;
    let mut _21: isize;
    scope 1 {
        debug config => _3;
    }
    scope 2 {
        debug residual => _8;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _11;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _16 = deref_copy (_1.1: &mut instructions::admin::InitializeProtectedMakerModeConfig<'_>);
        _6 = &((*_16).1: anchor_lang::prelude::AccountLoader<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>);
        _5 = anchor_lang::prelude::AccountLoader::<'_, ProtectedMakerModeConfig>::load_init(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<RefMut<'_, ProtectedMakerModeConfig>, anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb11];
    }

    bb2: {
        StorageDead(_5);
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = move ((_4 as Continue).0: std::cell::RefMut<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>);
        _3 = move _11;
        StorageDead(_11);
        _17 = discriminant(_4);
        StorageDead(_4);
        StorageLive(_12);
        _12 = _2;
        StorageLive(_13);
        StorageLive(_14);
        _14 = &mut _3;
        _13 = <RefMut<'_, ProtectedMakerModeConfig> as DerefMut>::deref_mut(move _14) -> [return: bb7, unwind: bb10];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_10);
        _10 = move _8;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _10) -> [return: bb6, unwind: bb12];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        _19 = discriminant(_4);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb9;
    }

    bb7: {
        StorageDead(_14);
        ((*_13).0: u32) = move _12;
        StorageDead(_12);
        StorageDead(_13);
        StorageLive(_15);
        _15 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _15);
        StorageDead(_15);
        drop(_3) -> [return: bb8, unwind: bb11];
    }

    bb8: {
        StorageDead(_3);
        goto -> bb9;
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_3) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }

    bb12 (cleanup): {
        _21 = discriminant(_4);
        goto -> bb11;
    }
}
