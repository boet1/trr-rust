// MIR for `admin::handle_update_mm_oracle_native` before PreCodegen

fn admin::handle_update_mm_oracle_native(_1: &[anchor_lang::prelude::AccountInfo<'_>], _2: &[u8]) -> std::result::Result<(), anchor_lang::error::Error> {
    debug accounts => _1;
    debug data => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: &std::cell::Ref<'_, &mut [u8]>;
    let _4: std::cell::Ref<'_, &mut [u8]>;
    let mut _5: &std::cell::RefCell<&mut [u8]>;
    let _6: &std::cell::RefCell<&mut [u8]>;
    let mut _7: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let _8: usize;
    let mut _9: usize;
    let mut _10: bool;
    let _11: ();
    let mut _12: bool;
    let mut _13: u8;
    let mut _14: u8;
    let mut _15: &&mut [u8];
    let mut _16: &std::cell::Ref<'_, &mut [u8]>;
    let _17: usize;
    let mut _18: usize;
    let mut _19: bool;
    let mut _20: !;
    let _21: !;
    let _23: usize;
    let mut _24: usize;
    let mut _25: bool;
    let _26: ();
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: &anchor_lang::prelude::Pubkey;
    let mut _30: &anchor_lang::prelude::Pubkey;
    let _31: anchor_lang::prelude::Pubkey;
    let mut _32: !;
    let _33: !;
    let mut _34: std::fmt::Arguments<'_>;
    let mut _35: &[&str];
    let mut _36: &[&str; 2];
    let _37: &[&str; 2];
    let _38: [&str; 2];
    let mut _39: &[core::fmt::rt::Argument<'_>];
    let mut _40: &[core::fmt::rt::Argument<'_>; 2];
    let _41: &[core::fmt::rt::Argument<'_>; 2];
    let _42: [core::fmt::rt::Argument<'_>; 2];
    let mut _43: core::fmt::rt::Argument<'_>;
    let mut _44: &&anchor_lang::prelude::Pubkey;
    let _45: &&anchor_lang::prelude::Pubkey;
    let mut _46: core::fmt::rt::Argument<'_>;
    let mut _47: &anchor_lang::prelude::Pubkey;
    let _48: &anchor_lang::prelude::Pubkey;
    let _49: anchor_lang::prelude::Pubkey;
    let mut _51: &std::cell::RefCell<&mut [u8]>;
    let _52: &std::cell::RefCell<&mut [u8]>;
    let mut _53: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let _54: usize;
    let mut _55: usize;
    let mut _56: bool;
    let mut _58: [u8; 8];
    let mut _59: std::result::Result<[u8; 8], std::array::TryFromSliceError>;
    let mut _60: &[u8];
    let _61: &[u8];
    let mut _62: &[u8];
    let _63: &&mut [u8];
    let mut _64: &std::cell::RefMut<'_, &mut [u8]>;
    let mut _65: std::ops::Range<usize>;
    let mut _67: [u8; 8];
    let mut _68: std::result::Result<[u8; 8], std::array::TryFromSliceError>;
    let mut _69: &[u8];
    let _70: &[u8];
    let mut _71: &[u8];
    let mut _72: std::ops::Range<usize>;
    let _73: ();
    let mut _74: bool;
    let mut _75: u64;
    let mut _76: u64;
    let _78: usize;
    let mut _79: usize;
    let mut _80: bool;
    let mut _82: &std::cell::RefCell<&mut [u8]>;
    let _83: &std::cell::RefCell<&mut [u8]>;
    let mut _84: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let _85: ();
    let mut _86: &mut [u8];
    let mut _87: &mut [u8];
    let mut _88: &mut [u8];
    let mut _89: &mut &mut [u8];
    let mut _90: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _91: std::ops::Range<usize>;
    let mut _92: &[u8];
    let _93: &[u8];
    let _94: &[u8];
    let mut _95: &[u8];
    let _96: &&mut [u8];
    let mut _97: &std::cell::Ref<'_, &mut [u8]>;
    let mut _98: std::ops::Range<usize>;
    let _99: ();
    let mut _100: &mut [u8];
    let mut _101: &mut [u8];
    let mut _102: &mut [u8];
    let mut _103: &mut &mut [u8];
    let mut _104: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _105: std::ops::Range<usize>;
    let mut _106: &[u8];
    let _107: &[u8];
    let _108: &[u8];
    let mut _109: &[u8];
    let mut _110: std::ops::Range<usize>;
    let _111: ();
    let mut _112: &mut [u8];
    let mut _113: &mut [u8];
    let mut _114: &mut [u8];
    let mut _115: &mut &mut [u8];
    let mut _116: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _117: std::ops::Range<usize>;
    let mut _118: &[u8];
    let _119: &[u8];
    let _120: &[u8];
    let mut _121: &[u8];
    let mut _122: std::ops::Range<usize>;
    let mut _123: ();
    let mut _125: &mut [u8];
    let mut _126: &mut [u8];
    let mut _127: &anchor_lang::prelude::Pubkey;
    let mut _128: &mut [u8];
    let mut _129: &mut [u8];
    let mut _130: &mut [u8];
    let mut _131: &mut [u8];
    let mut _132: &mut [u8];
    scope 1 {
        debug state => _3;
        let _22: &anchor_lang::prelude::AccountInfo<'_>;
        scope 2 {
            debug signer_account => _22;
            let mut _50: std::cell::RefMut<'_, &mut [u8]>;
            let mut _124: &[&str; 2];
            scope 3 {
                debug perp_market => _50;
                let _57: u64;
                scope 4 {
                    debug perp_market_sequence_id => _57;
                    let _66: u64;
                    scope 5 {
                        debug incoming_sequence_id => _66;
                        let _77: &anchor_lang::prelude::AccountInfo<'_>;
                        scope 6 {
                            debug clock_account => _77;
                            let _81: std::cell::Ref<'_, &mut [u8]>;
                            scope 7 {
                                debug clock_data => _81;
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = const 3_usize;
        _9 = Len((*_1));
        _10 = Lt(_8, _9);
        assert(move _10, "index out of bounds: the length is {} but the index is {}", move _9, _8) -> [success: bb1, unwind continue];
    }

    bb1: {
        _7 = &((*_1)[_8].2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _6 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = &(*_6);
        StorageDead(_7);
        _4 = RefCell::<&mut [u8]>::borrow(move _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_5);
        _3 = &_4;
        StorageDead(_8);
        StorageDead(_6);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &(*_3);
        _15 = <Ref<'_, &mut [u8]> as Deref>::deref(move _16) -> [return: bb4, unwind: bb55];
    }

    bb4: {
        StorageDead(_16);
        StorageLive(_17);
        _17 = const 982_usize;
        _125 = deref_copy (*_15);
        _18 = Len((*_125));
        _19 = Lt(_17, _18);
        assert(move _19, "index out of bounds: the length is {} but the index is {}", move _18, _17) -> [success: bb5, unwind: bb55];
    }

    bb5: {
        _126 = deref_copy (*_15);
        _14 = (*_126)[_17];
        _13 = BitAnd(move _14, const 1_u8);
        StorageDead(_14);
        _12 = Gt(move _13, const 0_u8);
        switchInt(move _12) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_17);
        StorageDead(_15);
        _11 = const ();
        StorageDead(_12);
        StorageDead(_11);
        StorageLive(_22);
        StorageLive(_23);
        _23 = const 1_usize;
        _24 = Len((*_1));
        _25 = Lt(_23, _24);
        assert(move _25, "index out of bounds: the length is {} but the index is {}", move _24, _23) -> [success: bb8, unwind: bb55];
    }

    bb7: {
        StorageDead(_13);
        StorageDead(_17);
        StorageDead(_15);
        StorageLive(_21);
        _21 = begin_panic::<&str>(const "ix disabled by admin state") -> bb55;
    }

    bb8: {
        _22 = &(*_1)[_23];
        StorageLive(_26);
        StorageLive(_27);
        _27 = ((*_22).5: bool);
        switchInt(move _27) -> [0: bb14, otherwise: bb9];
    }

    bb9: {
        StorageLive(_28);
        StorageLive(_29);
        _127 = deref_copy ((*_22).0: &anchor_lang::prelude::Pubkey);
        _29 = &(*_127);
        StorageLive(_30);
        StorageLive(_31);
        _31 = mm_oracle_crank_wallet::id() -> [return: bb10, unwind: bb55];
    }

    bb10: {
        _30 = &_31;
        _28 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _29, move _30) -> [return: bb11, unwind: bb55];
    }

    bb11: {
        switchInt(move _28) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_29);
        _26 = const ();
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = const 0_usize;
        _55 = Len((*_1));
        _56 = Lt(_54, _55);
        assert(move _56, "index out of bounds: the length is {} but the index is {}", move _55, _54) -> [success: bb19, unwind: bb55];
    }

    bb13: {
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_29);
        goto -> bb14;
    }

    bb14: {
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _124 = const _;
        _37 = &(*_124);
        _36 = &(*_37);
        _35 = move _36 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_36);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = &((*_22).0: &anchor_lang::prelude::Pubkey);
        _44 = &(*_45);
        _43 = core::fmt::rt::Argument::<'_>::new_display::<&anchor_lang::prelude::Pubkey>(move _44) -> [return: bb15, unwind: bb55];
    }

    bb15: {
        StorageDead(_44);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = mm_oracle_crank_wallet::id() -> [return: bb16, unwind: bb55];
    }

    bb16: {
        _48 = &_49;
        _47 = &(*_48);
        _46 = core::fmt::rt::Argument::<'_>::new_display::<anchor_lang::prelude::Pubkey>(move _47) -> [return: bb17, unwind: bb55];
    }

    bb17: {
        StorageDead(_47);
        _42 = [move _43, move _46];
        StorageDead(_46);
        StorageDead(_43);
        _41 = &_42;
        _40 = &(*_41);
        _39 = move _40 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_40);
        _34 = Arguments::<'_>::new_v1(move _35, move _39) -> [return: bb18, unwind: bb55];
    }

    bb18: {
        StorageDead(_39);
        StorageDead(_35);
        _33 = panic_fmt(move _34) -> bb55;
    }

    bb19: {
        _53 = &((*_1)[_54].2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _52 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _53) -> [return: bb20, unwind: bb55];
    }

    bb20: {
        _51 = &(*_52);
        StorageDead(_53);
        _50 = RefCell::<&mut [u8]>::borrow_mut(move _51) -> [return: bb21, unwind: bb55];
    }

    bb21: {
        StorageDead(_51);
        StorageDead(_54);
        StorageDead(_52);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = &_50;
        _63 = <RefMut<'_, &mut [u8]> as Deref>::deref(move _64) -> [return: bb22, unwind: bb54];
    }

    bb22: {
        _128 = deref_copy (*_63);
        _62 = &(*_128);
        StorageDead(_64);
        StorageLive(_65);
        _65 = std::ops::Range::<usize> { start: const 936_usize, end: const 944_usize };
        _61 = <[u8] as Index<std::ops::Range<usize>>>::index(move _62, move _65) -> [return: bb23, unwind: bb54];
    }

    bb23: {
        _60 = &(*_61);
        StorageDead(_65);
        StorageDead(_62);
        _59 = <&[u8] as TryInto<[u8; 8]>>::try_into(move _60) -> [return: bb24, unwind: bb54];
    }

    bb24: {
        StorageDead(_60);
        _58 = std::result::Result::<[u8; 8], TryFromSliceError>::unwrap(move _59) -> [return: bb25, unwind: bb54];
    }

    bb25: {
        StorageDead(_59);
        _57 = core::num::<impl u64>::from_le_bytes(move _58) -> [return: bb26, unwind: bb54];
    }

    bb26: {
        StorageDead(_58);
        StorageDead(_63);
        StorageDead(_61);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = &(*_2);
        StorageLive(_72);
        _72 = std::ops::Range::<usize> { start: const 8_usize, end: const 16_usize };
        _70 = <[u8] as Index<std::ops::Range<usize>>>::index(move _71, move _72) -> [return: bb27, unwind: bb54];
    }

    bb27: {
        _69 = &(*_70);
        StorageDead(_72);
        StorageDead(_71);
        _68 = <&[u8] as TryInto<[u8; 8]>>::try_into(move _69) -> [return: bb28, unwind: bb54];
    }

    bb28: {
        StorageDead(_69);
        _67 = std::result::Result::<[u8; 8], TryFromSliceError>::unwrap(move _68) -> [return: bb29, unwind: bb54];
    }

    bb29: {
        StorageDead(_68);
        _66 = core::num::<impl u64>::from_le_bytes(move _67) -> [return: bb30, unwind: bb54];
    }

    bb30: {
        StorageDead(_67);
        StorageDead(_70);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = _66;
        StorageLive(_76);
        _76 = _57;
        _74 = Gt(move _75, move _76);
        switchInt(move _74) -> [0: bb49, otherwise: bb31];
    }

    bb31: {
        StorageDead(_76);
        StorageDead(_75);
        StorageLive(_77);
        StorageLive(_78);
        _78 = const 2_usize;
        _79 = Len((*_1));
        _80 = Lt(_78, _79);
        assert(move _80, "index out of bounds: the length is {} but the index is {}", move _79, _78) -> [success: bb32, unwind: bb54];
    }

    bb32: {
        _77 = &(*_1)[_78];
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = &((*_77).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _83 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _84) -> [return: bb33, unwind: bb54];
    }

    bb33: {
        _82 = &(*_83);
        StorageDead(_84);
        _81 = RefCell::<&mut [u8]>::borrow(move _82) -> [return: bb34, unwind: bb54];
    }

    bb34: {
        StorageDead(_82);
        StorageDead(_83);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        _90 = &mut _50;
        _89 = <RefMut<'_, &mut [u8]> as DerefMut>::deref_mut(move _90) -> [return: bb35, unwind: bb53];
    }

    bb35: {
        _129 = deref_copy (*_89);
        _88 = &mut (*_129);
        StorageDead(_90);
        StorageLive(_91);
        _91 = std::ops::Range::<usize> { start: const 832_usize, end: const 840_usize };
        _87 = <[u8] as IndexMut<std::ops::Range<usize>>>::index_mut(move _88, move _91) -> [return: bb36, unwind: bb53];
    }

    bb36: {
        _86 = &mut (*_87);
        StorageDead(_91);
        StorageDead(_88);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = &_81;
        _96 = <Ref<'_, &mut [u8]> as Deref>::deref(move _97) -> [return: bb37, unwind: bb53];
    }

    bb37: {
        _130 = deref_copy (*_96);
        _95 = &(*_130);
        StorageDead(_97);
        StorageLive(_98);
        _98 = std::ops::Range::<usize> { start: const 0_usize, end: const 8_usize };
        _94 = <[u8] as Index<std::ops::Range<usize>>>::index(move _95, move _98) -> [return: bb38, unwind: bb53];
    }

    bb38: {
        StorageDead(_98);
        StorageDead(_95);
        _93 = &(*_94);
        _92 = &(*_93);
        _85 = core::slice::<impl [u8]>::copy_from_slice(move _86, move _92) -> [return: bb39, unwind: bb53];
    }

    bb39: {
        StorageDead(_92);
        StorageDead(_86);
        StorageDead(_96);
        StorageDead(_94);
        StorageDead(_93);
        StorageDead(_89);
        StorageDead(_87);
        StorageDead(_85);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _104 = &mut _50;
        _103 = <RefMut<'_, &mut [u8]> as DerefMut>::deref_mut(move _104) -> [return: bb40, unwind: bb53];
    }

    bb40: {
        _131 = deref_copy (*_103);
        _102 = &mut (*_131);
        StorageDead(_104);
        StorageLive(_105);
        _105 = std::ops::Range::<usize> { start: const 912_usize, end: const 920_usize };
        _101 = <[u8] as IndexMut<std::ops::Range<usize>>>::index_mut(move _102, move _105) -> [return: bb41, unwind: bb53];
    }

    bb41: {
        _100 = &mut (*_101);
        StorageDead(_105);
        StorageDead(_102);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        _109 = &(*_2);
        StorageLive(_110);
        _110 = std::ops::Range::<usize> { start: const 0_usize, end: const 8_usize };
        _108 = <[u8] as Index<std::ops::Range<usize>>>::index(move _109, move _110) -> [return: bb42, unwind: bb53];
    }

    bb42: {
        StorageDead(_110);
        StorageDead(_109);
        _107 = &(*_108);
        _106 = &(*_107);
        _99 = core::slice::<impl [u8]>::copy_from_slice(move _100, move _106) -> [return: bb43, unwind: bb53];
    }

    bb43: {
        StorageDead(_106);
        StorageDead(_100);
        StorageDead(_108);
        StorageDead(_107);
        StorageDead(_103);
        StorageDead(_101);
        StorageDead(_99);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        _116 = &mut _50;
        _115 = <RefMut<'_, &mut [u8]> as DerefMut>::deref_mut(move _116) -> [return: bb44, unwind: bb53];
    }

    bb44: {
        _132 = deref_copy (*_115);
        _114 = &mut (*_132);
        StorageDead(_116);
        StorageLive(_117);
        _117 = std::ops::Range::<usize> { start: const 936_usize, end: const 944_usize };
        _113 = <[u8] as IndexMut<std::ops::Range<usize>>>::index_mut(move _114, move _117) -> [return: bb45, unwind: bb53];
    }

    bb45: {
        _112 = &mut (*_113);
        StorageDead(_117);
        StorageDead(_114);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        _121 = &(*_2);
        StorageLive(_122);
        _122 = std::ops::Range::<usize> { start: const 8_usize, end: const 16_usize };
        _120 = <[u8] as Index<std::ops::Range<usize>>>::index(move _121, move _122) -> [return: bb46, unwind: bb53];
    }

    bb46: {
        StorageDead(_122);
        StorageDead(_121);
        _119 = &(*_120);
        _118 = &(*_119);
        _111 = core::slice::<impl [u8]>::copy_from_slice(move _112, move _118) -> [return: bb47, unwind: bb53];
    }

    bb47: {
        StorageDead(_118);
        StorageDead(_112);
        StorageDead(_120);
        StorageDead(_119);
        StorageDead(_115);
        StorageDead(_113);
        StorageDead(_111);
        _73 = const ();
        drop(_81) -> [return: bb48, unwind: bb54];
    }

    bb48: {
        StorageDead(_81);
        StorageDead(_78);
        StorageDead(_77);
        goto -> bb50;
    }

    bb49: {
        StorageDead(_76);
        StorageDead(_75);
        _73 = const ();
        goto -> bb50;
    }

    bb50: {
        StorageDead(_74);
        StorageDead(_73);
        StorageLive(_123);
        _123 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _123);
        StorageDead(_123);
        StorageDead(_66);
        StorageDead(_57);
        drop(_50) -> [return: bb51, unwind: bb55];
    }

    bb51: {
        StorageDead(_50);
        StorageDead(_23);
        StorageDead(_22);
        drop(_4) -> [return: bb52, unwind: bb56];
    }

    bb52: {
        StorageDead(_4);
        StorageDead(_3);
        return;
    }

    bb53 (cleanup): {
        drop(_81) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_50) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_4) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        resume;
    }
}
