// MIR for `get_proportion_u128` after PreCodegen

fn get_proportion_u128(_1: u128, _2: u128, _3: u128) -> std::result::Result<u128, error::ErrorCode> {
    debug value => _1;
    debug numerator => _2;
    debug denominator => _3;
    let mut _0: std::result::Result<u128, error::ErrorCode>;
    let _4: u128;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _6: std::result::Result<u128, error::ErrorCode>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _11: u128;
    let mut _13: bool;
    let mut _14: u128;
    let mut _15: u128;
    let mut _16: bool;
    let mut _17: u128;
    let mut _18: u128;
    let mut _19: bool;
    let mut _20: u128;
    let mut _21: u128;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _24: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _25: math::bn::U192;
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _27: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _28: math::bn::U192;
    let mut _29: u128;
    let mut _30: math::bn::U192;
    let mut _31: u128;
    let mut _32: isize;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _37: math::bn::U192;
    let mut _38: u128;
    let mut _39: isize;
    let mut _41: !;
    let mut _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _44: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _45: std::result::Result<u128, error::ErrorCode>;
    let mut _46: math::bn::U192;
    let mut _47: isize;
    let mut _49: !;
    let mut _50: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _52: bool;
    let mut _53: u128;
    let mut _54: u128;
    let mut _55: u128;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: u128;
    let mut _59: u128;
    let mut _62: (i128, i128);
    let mut _63: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (i128, i128)>;
    let mut _64: std::result::Result<(i128, i128), error::ErrorCode>;
    let mut _65: i128;
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _67: std::result::Result<i128, error::ErrorCode>;
    let mut _68: u128;
    let mut _69: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _70: std::result::Result<u128, error::ErrorCode>;
    let mut _71: u128;
    let mut _72: u128;
    let mut _73: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _74: std::result::Result<u128, error::ErrorCode>;
    let mut _75: u128;
    let mut _76: u128;
    let mut _77: isize;
    let mut _79: !;
    let mut _80: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _82: isize;
    let mut _84: !;
    let mut _85: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _87: isize;
    let mut _89: !;
    let mut _90: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _92: u128;
    let mut _93: isize;
    let mut _95: !;
    let mut _96: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _98: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _99: std::result::Result<u128, error::ErrorCode>;
    let mut _100: u128;
    let mut _101: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _102: std::result::Result<u128, error::ErrorCode>;
    let mut _103: u128;
    let mut _104: u128;
    let mut _105: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _106: std::result::Result<u128, error::ErrorCode>;
    let mut _107: u128;
    let mut _108: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _109: std::result::Result<u128, error::ErrorCode>;
    let mut _110: i128;
    let mut _111: isize;
    let mut _113: !;
    let mut _114: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _116: u128;
    let mut _117: isize;
    let mut _119: !;
    let mut _120: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _122: isize;
    let mut _124: !;
    let mut _125: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _127: u128;
    let mut _128: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _129: std::result::Result<u128, error::ErrorCode>;
    let mut _130: i128;
    let mut _131: i128;
    let mut _132: isize;
    let mut _134: !;
    let mut _135: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _137: isize;
    let mut _139: !;
    let mut _140: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _142: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _143: std::result::Result<u128, error::ErrorCode>;
    let mut _144: u128;
    let mut _145: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _146: std::result::Result<u128, error::ErrorCode>;
    let mut _147: u128;
    let mut _148: u128;
    let mut _149: isize;
    let mut _151: !;
    let mut _152: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _154: u128;
    let mut _155: isize;
    let mut _157: !;
    let mut _158: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _160: u128;
    scope 1 {
        debug large_constant => _4;
        let _12: u128;
        let _22: math::bn::U192;
        let _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _36: math::bn::U192;
        let _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _43: math::bn::U192;
        let _60: i128;
        let _61: i128;
        let _78: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _81: u128;
        let _83: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _86: u128;
        let _88: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _91: i128;
        let _94: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _97: (i128, i128);
        let _150: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _153: u128;
        let _156: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _159: u128;
        scope 6 {
            debug proportional_value => _12;
        }
        scope 7 {
            debug value => _22;
            let _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _51: u128;
            scope 16 {
                debug residual => _48;
                scope 17 {
                }
            }
            scope 18 {
                debug val => _51;
                scope 19 {
                }
            }
        }
        scope 8 {
            debug residual => _33;
            scope 9 {
            }
        }
        scope 10 {
            debug val => _36;
            scope 11 {
            }
        }
        scope 12 {
            debug residual => _40;
            scope 13 {
            }
        }
        scope 14 {
            debug val => _43;
            scope 15 {
            }
        }
        scope 20 {
            debug std_value => _60;
            debug r => _61;
            let _112: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _115: u128;
            let _118: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _121: u128;
            let _123: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _126: u128;
            let _133: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _136: u128;
            let _138: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _141: u128;
            scope 37 {
                debug residual => _112;
                scope 38 {
                }
            }
            scope 39 {
                debug val => _115;
                scope 40 {
                }
            }
            scope 41 {
                debug residual => _118;
                scope 42 {
                }
            }
            scope 43 {
                debug val => _121;
                scope 44 {
                }
            }
            scope 45 {
                debug residual => _123;
                scope 46 {
                }
            }
            scope 47 {
                debug val => _126;
                scope 48 {
                }
            }
            scope 49 {
                debug residual => _133;
                scope 50 {
                }
            }
            scope 51 {
                debug val => _136;
                scope 52 {
                }
            }
            scope 53 {
                debug residual => _138;
                scope 54 {
                }
            }
            scope 55 {
                debug val => _141;
                scope 56 {
                }
            }
        }
        scope 21 {
            debug residual => _78;
            scope 22 {
            }
        }
        scope 23 {
            debug val => _81;
            scope 24 {
            }
        }
        scope 25 {
            debug residual => _83;
            scope 26 {
            }
        }
        scope 27 {
            debug val => _86;
            scope 28 {
            }
        }
        scope 29 {
            debug residual => _88;
            scope 30 {
            }
        }
        scope 31 {
            debug val => _91;
            scope 32 {
            }
        }
        scope 33 {
            debug residual => _94;
            scope 34 {
            }
        }
        scope 35 {
            debug val => _97;
            scope 36 {
            }
        }
        scope 57 {
            debug residual => _150;
            scope 58 {
            }
        }
        scope 59 {
            debug val => _153;
            scope 60 {
            }
        }
        scope 61 {
            debug residual => _156;
            scope 62 {
            }
        }
        scope 63 {
            debug val => _159;
            scope 64 {
            }
        }
    }
    scope 2 {
        debug residual => _8;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _11;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = <u64 as Cast>::cast::<u128>(const _) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = ((_5 as Continue).0: u128);
        _4 = _11;
        StorageDead(_11);
        StorageDead(_5);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = _2;
        StorageLive(_15);
        _15 = _3;
        _13 = Eq(move _14, move _15);
        switchInt(move _13) -> [0: bb8, otherwise: bb7];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_10);
        _10 = _8;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _10) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_5);
        goto -> bb107;
    }

    bb7: {
        StorageDead(_15);
        StorageDead(_14);
        _12 = _1;
        goto -> bb95;
    }

    bb8: {
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_16);
        StorageLive(_17);
        _17 = _1;
        StorageLive(_18);
        _18 = _4;
        _16 = Ge(move _17, move _18);
        switchInt(move _16) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        StorageDead(_18);
        StorageDead(_17);
        goto -> bb11;
    }

    bb10: {
        StorageDead(_18);
        StorageDead(_17);
        StorageLive(_19);
        StorageLive(_20);
        _20 = _2;
        StorageLive(_21);
        _21 = _4;
        _19 = Ge(move _20, move _21);
        switchInt(move _19) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        StorageDead(_21);
        StorageDead(_20);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = _1;
        _28 = <U192 as From<u128>>::from(move _29) -> [return: bb13, unwind continue];
    }

    bb12: {
        StorageDead(_21);
        StorageDead(_20);
        StorageLive(_52);
        StorageLive(_53);
        _53 = _2;
        StorageLive(_54);
        StorageLive(_55);
        _55 = _3;
        _56 = Eq(const 2_u128, const 0_u128);
        assert(!move _56, "attempt to divide `{}` by zero", _55) -> [success: bb31, unwind continue];
    }

    bb13: {
        StorageDead(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = _2;
        _30 = <U192 as From<u128>>::from(move _31) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_31);
        _27 = <U192 as SafeMath>::safe_mul(move _28, move _30) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_30);
        StorageDead(_28);
        _26 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _27) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_27);
        _32 = discriminant(_26);
        switchInt(move _32) -> [0: bb17, 1: bb18, otherwise: bb4];
    }

    bb17: {
        StorageLive(_36);
        _36 = ((_26 as Continue).0: math::bn::U192);
        _25 = _36;
        StorageDead(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = _3;
        _37 = <U192 as From<u128>>::from(move _38) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_33);
        _33 = ((_26 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_35);
        _35 = _33;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _35) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_25);
        StorageDead(_24);
        goto -> bb105;
    }

    bb20: {
        StorageDead(_38);
        _24 = <U192 as SafeMath>::safe_div(move _25, move _37) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_37);
        StorageDead(_25);
        _23 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _24) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_24);
        _39 = discriminant(_23);
        switchInt(move _39) -> [0: bb23, 1: bb24, otherwise: bb4];
    }

    bb23: {
        StorageLive(_43);
        _43 = ((_23 as Continue).0: math::bn::U192);
        _22 = _43;
        StorageDead(_43);
        StorageDead(_26);
        StorageDead(_23);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = _22;
        _45 = <U192 as Cast>::cast::<u128>(move _46) -> [return: bb26, unwind continue];
    }

    bb24: {
        StorageLive(_40);
        _40 = ((_23 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_42);
        _42 = _40;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _42) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_42);
        StorageDead(_40);
        goto -> bb105;
    }

    bb26: {
        StorageDead(_46);
        _44 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _45) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_45);
        _47 = discriminant(_44);
        switchInt(move _47) -> [0: bb28, 1: bb29, otherwise: bb4];
    }

    bb28: {
        StorageLive(_51);
        _51 = ((_44 as Continue).0: u128);
        _12 = _51;
        StorageDead(_51);
        StorageDead(_22);
        StorageDead(_44);
        goto -> bb94;
    }

    bb29: {
        StorageLive(_48);
        _48 = ((_44 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_50);
        _50 = _48;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _50) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_50);
        StorageDead(_48);
        StorageDead(_22);
        StorageDead(_44);
        goto -> bb106;
    }

    bb31: {
        _54 = Div(move _55, const 2_u128);
        StorageDead(_55);
        _52 = Gt(move _53, move _54);
        switchInt(move _52) -> [0: bb81, otherwise: bb32];
    }

    bb32: {
        StorageDead(_54);
        StorageDead(_53);
        StorageLive(_57);
        StorageLive(_58);
        _58 = _3;
        StorageLive(_59);
        _59 = _2;
        _57 = Gt(move _58, move _59);
        switchInt(move _57) -> [0: bb80, otherwise: bb33];
    }

    bb33: {
        StorageDead(_59);
        StorageDead(_58);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = _1;
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = _3;
        StorageLive(_76);
        _76 = _2;
        _74 = <u128 as SafeMath>::safe_sub(move _75, move _76) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_76);
        StorageDead(_75);
        _73 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _74) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_74);
        _77 = discriminant(_73);
        switchInt(move _77) -> [0: bb36, 1: bb37, otherwise: bb4];
    }

    bb36: {
        StorageLive(_81);
        _81 = ((_73 as Continue).0: u128);
        _72 = _81;
        StorageDead(_81);
        _70 = <u128 as SafeMath>::safe_mul(move _71, move _72) -> [return: bb39, unwind continue];
    }

    bb37: {
        StorageLive(_78);
        _78 = ((_73 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_80);
        _80 = _78;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _80) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        goto -> bb101;
    }

    bb39: {
        StorageDead(_72);
        StorageDead(_71);
        _69 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _70) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_70);
        _82 = discriminant(_69);
        switchInt(move _82) -> [0: bb41, 1: bb42, otherwise: bb4];
    }

    bb41: {
        StorageLive(_86);
        _86 = ((_69 as Continue).0: u128);
        _68 = _86;
        StorageDead(_86);
        _67 = <u128 as Cast>::cast::<i128>(move _68) -> [return: bb44, unwind continue];
    }

    bb42: {
        StorageLive(_83);
        _83 = ((_69 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_85);
        _85 = _83;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _85) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_85);
        StorageDead(_83);
        goto -> bb101;
    }

    bb44: {
        StorageDead(_68);
        _66 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _67) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_67);
        _87 = discriminant(_66);
        switchInt(move _87) -> [0: bb46, 1: bb47, otherwise: bb4];
    }

    bb46: {
        StorageLive(_91);
        _91 = ((_66 as Continue).0: i128);
        _65 = _91;
        StorageDead(_91);
        StorageLive(_92);
        _92 = _3;
        _64 = standardize_value_with_remainder_i128(move _65, move _92) -> [return: bb49, unwind continue];
    }

    bb47: {
        StorageLive(_88);
        _88 = ((_66 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_90);
        _90 = _88;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _90) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_90);
        StorageDead(_88);
        goto -> bb102;
    }

    bb49: {
        StorageDead(_92);
        StorageDead(_65);
        _63 = <std::result::Result<(i128, i128), error::ErrorCode> as Try>::branch(move _64) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_64);
        _93 = discriminant(_63);
        switchInt(move _93) -> [0: bb51, 1: bb52, otherwise: bb4];
    }

    bb51: {
        StorageLive(_97);
        _97 = ((_63 as Continue).0: (i128, i128));
        _62 = _97;
        StorageDead(_97);
        StorageLive(_60);
        _60 = (_62.0: i128);
        StorageLive(_61);
        _61 = (_62.1: i128);
        StorageDead(_73);
        StorageDead(_69);
        StorageDead(_66);
        StorageDead(_63);
        StorageDead(_62);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        _103 = _1;
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _110 = _60;
        _109 = <i128 as Cast>::cast::<u128>(move _110) -> [return: bb54, unwind continue];
    }

    bb52: {
        StorageLive(_94);
        _94 = ((_63 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_96);
        _96 = _94;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _96) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_96);
        StorageDead(_94);
        goto -> bb103;
    }

    bb54: {
        StorageDead(_110);
        _108 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _109) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_109);
        _111 = discriminant(_108);
        switchInt(move _111) -> [0: bb56, 1: bb57, otherwise: bb4];
    }

    bb56: {
        StorageLive(_115);
        _115 = ((_108 as Continue).0: u128);
        _107 = _115;
        StorageDead(_115);
        StorageLive(_116);
        _116 = _3;
        _106 = <u128 as SafeMath>::safe_div(move _107, move _116) -> [return: bb59, unwind continue];
    }

    bb57: {
        StorageLive(_112);
        _112 = ((_108 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_114);
        _114 = _112;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _114) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_114);
        StorageDead(_112);
        StorageDead(_107);
        StorageDead(_106);
        goto -> bb98;
    }

    bb59: {
        StorageDead(_116);
        StorageDead(_107);
        _105 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _106) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_106);
        _117 = discriminant(_105);
        switchInt(move _117) -> [0: bb61, 1: bb62, otherwise: bb4];
    }

    bb61: {
        StorageLive(_121);
        _121 = ((_105 as Continue).0: u128);
        _104 = _121;
        StorageDead(_121);
        _102 = <u128 as SafeMath>::safe_sub(move _103, move _104) -> [return: bb64, unwind continue];
    }

    bb62: {
        StorageLive(_118);
        _118 = ((_105 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_120);
        _120 = _118;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _120) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_120);
        StorageDead(_118);
        goto -> bb98;
    }

    bb64: {
        StorageDead(_104);
        StorageDead(_103);
        _101 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _102) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_102);
        _122 = discriminant(_101);
        switchInt(move _122) -> [0: bb66, 1: bb67, otherwise: bb4];
    }

    bb66: {
        StorageLive(_126);
        _126 = ((_101 as Continue).0: u128);
        _100 = _126;
        StorageDead(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        _131 = _61;
        _130 = core::num::<impl i128>::signum(move _131) -> [return: bb69, unwind continue];
    }

    bb67: {
        StorageLive(_123);
        _123 = ((_101 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_125);
        _125 = _123;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _125) -> [return: bb68, unwind continue];
    }

    bb68: {
        StorageDead(_125);
        StorageDead(_123);
        goto -> bb99;
    }

    bb69: {
        StorageDead(_131);
        _129 = <i128 as Cast>::cast::<u128>(move _130) -> [return: bb70, unwind continue];
    }

    bb70: {
        StorageDead(_130);
        _128 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _129) -> [return: bb71, unwind continue];
    }

    bb71: {
        StorageDead(_129);
        _132 = discriminant(_128);
        switchInt(move _132) -> [0: bb72, 1: bb73, otherwise: bb4];
    }

    bb72: {
        StorageLive(_136);
        _136 = ((_128 as Continue).0: u128);
        _127 = _136;
        StorageDead(_136);
        _99 = <u128 as SafeMath>::safe_sub(move _100, move _127) -> [return: bb75, unwind continue];
    }

    bb73: {
        StorageLive(_133);
        _133 = ((_128 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_135);
        _135 = _133;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _135) -> [return: bb74, unwind continue];
    }

    bb74: {
        StorageDead(_135);
        StorageDead(_133);
        StorageDead(_127);
        StorageDead(_100);
        StorageDead(_99);
        goto -> bb97;
    }

    bb75: {
        StorageDead(_127);
        StorageDead(_100);
        _98 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _99) -> [return: bb76, unwind continue];
    }

    bb76: {
        StorageDead(_99);
        _137 = discriminant(_98);
        switchInt(move _137) -> [0: bb77, 1: bb78, otherwise: bb4];
    }

    bb77: {
        StorageLive(_141);
        _141 = ((_98 as Continue).0: u128);
        _12 = _141;
        StorageDead(_141);
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_128);
        StorageDead(_108);
        StorageDead(_105);
        StorageDead(_101);
        StorageDead(_98);
        goto -> bb93;
    }

    bb78: {
        StorageLive(_138);
        _138 = ((_98 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_140);
        _140 = _138;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _140) -> [return: bb79, unwind continue];
    }

    bb79: {
        StorageDead(_140);
        StorageDead(_138);
        goto -> bb97;
    }

    bb80: {
        StorageDead(_59);
        StorageDead(_58);
        goto -> bb82;
    }

    bb81: {
        StorageDead(_54);
        StorageDead(_53);
        goto -> bb82;
    }

    bb82: {
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        _147 = _1;
        StorageLive(_148);
        _148 = _2;
        _146 = <u128 as SafeMath>::safe_mul(move _147, move _148) -> [return: bb83, unwind continue];
    }

    bb83: {
        StorageDead(_148);
        StorageDead(_147);
        _145 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _146) -> [return: bb84, unwind continue];
    }

    bb84: {
        StorageDead(_146);
        _149 = discriminant(_145);
        switchInt(move _149) -> [0: bb85, 1: bb86, otherwise: bb4];
    }

    bb85: {
        StorageLive(_153);
        _153 = ((_145 as Continue).0: u128);
        _144 = _153;
        StorageDead(_153);
        StorageLive(_154);
        _154 = _3;
        _143 = <u128 as SafeMath>::safe_div(move _144, move _154) -> [return: bb88, unwind continue];
    }

    bb86: {
        StorageLive(_150);
        _150 = ((_145 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_152);
        _152 = _150;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _152) -> [return: bb87, unwind continue];
    }

    bb87: {
        StorageDead(_152);
        StorageDead(_150);
        StorageDead(_144);
        StorageDead(_143);
        goto -> bb96;
    }

    bb88: {
        StorageDead(_154);
        StorageDead(_144);
        _142 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _143) -> [return: bb89, unwind continue];
    }

    bb89: {
        StorageDead(_143);
        _155 = discriminant(_142);
        switchInt(move _155) -> [0: bb90, 1: bb91, otherwise: bb4];
    }

    bb90: {
        StorageLive(_159);
        _159 = ((_142 as Continue).0: u128);
        _12 = _159;
        StorageDead(_159);
        StorageDead(_145);
        StorageDead(_142);
        goto -> bb93;
    }

    bb91: {
        StorageLive(_156);
        _156 = ((_142 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_158);
        _158 = _156;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _158) -> [return: bb92, unwind continue];
    }

    bb92: {
        StorageDead(_158);
        StorageDead(_156);
        goto -> bb96;
    }

    bb93: {
        StorageDead(_57);
        StorageDead(_52);
        goto -> bb94;
    }

    bb94: {
        StorageDead(_19);
        StorageDead(_16);
        goto -> bb95;
    }

    bb95: {
        StorageDead(_13);
        StorageLive(_160);
        _160 = _12;
        _0 = std::result::Result::<u128, error::ErrorCode>::Ok(move _160);
        StorageDead(_160);
        StorageDead(_12);
        StorageDead(_4);
        goto -> bb108;
    }

    bb96: {
        StorageDead(_145);
        StorageDead(_142);
        goto -> bb104;
    }

    bb97: {
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_128);
        goto -> bb100;
    }

    bb98: {
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_102);
        goto -> bb99;
    }

    bb99: {
        StorageDead(_100);
        StorageDead(_99);
        StorageDead(_61);
        StorageDead(_60);
        goto -> bb100;
    }

    bb100: {
        StorageDead(_108);
        StorageDead(_105);
        StorageDead(_101);
        StorageDead(_98);
        goto -> bb104;
    }

    bb101: {
        StorageDead(_68);
        StorageDead(_67);
        goto -> bb102;
    }

    bb102: {
        StorageDead(_65);
        StorageDead(_64);
        goto -> bb103;
    }

    bb103: {
        StorageDead(_73);
        StorageDead(_69);
        StorageDead(_66);
        StorageDead(_63);
        StorageDead(_62);
        goto -> bb104;
    }

    bb104: {
        StorageDead(_57);
        StorageDead(_52);
        goto -> bb106;
    }

    bb105: {
        StorageDead(_26);
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb106;
    }

    bb106: {
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb107;
    }

    bb107: {
        StorageDead(_4);
        goto -> bb108;
    }

    bb108: {
        return;
    }
}
