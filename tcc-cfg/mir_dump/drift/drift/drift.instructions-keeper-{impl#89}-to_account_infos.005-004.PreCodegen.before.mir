// MIR for `keeper::<impl at programs/drift/src/instructions/keeper.rs:3251:10: 3251:18>::to_account_infos` before PreCodegen

fn keeper::<impl at programs/drift/src/instructions/keeper.rs:3251:10: 3251:18>::to_account_infos(_1: &keeper::SettleLP<'_>) -> Vec<anchor_lang::prelude::AccountInfo<'_>> {
    debug self => _1;
    let mut _0: std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _2: std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>;
    let _3: ();
    let mut _4: &mut std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _5: std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _6: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let _7: ();
    let mut _8: &mut std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _9: std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _10: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    scope 1 {
        debug account_infos => _2;
    }

    bb0: {
        StorageLive(_2);
        _2 = Vec::<anchor_lang::prelude::AccountInfo<'_>>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = &mut _2;
        StorageLive(_5);
        StorageLive(_6);
        _6 = &((*_1).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _5 = <Box<anchor_lang::prelude::Account<'_, state::state::State>> as anchor_lang::ToAccountInfos<'_>>::to_account_infos(move _6) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        StorageDead(_6);
        _3 = <Vec<anchor_lang::prelude::AccountInfo<'_>> as Extend<anchor_lang::prelude::AccountInfo<'_>>>::extend::<Vec<anchor_lang::prelude::AccountInfo<'_>>>(move _4, move _5) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &mut _2;
        StorageLive(_9);
        StorageLive(_10);
        _10 = &((*_1).1: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _9 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::ToAccountInfos<'_>>::to_account_infos(move _10) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        StorageDead(_10);
        _7 = <Vec<anchor_lang::prelude::AccountInfo<'_>> as Extend<anchor_lang::prelude::AccountInfo<'_>>>::extend::<Vec<anchor_lang::prelude::AccountInfo<'_>>>(move _8, move _9) -> [return: bb5, unwind: bb6];
    }

    bb5: {
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        _0 = move _2;
        StorageDead(_2);
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }
}
