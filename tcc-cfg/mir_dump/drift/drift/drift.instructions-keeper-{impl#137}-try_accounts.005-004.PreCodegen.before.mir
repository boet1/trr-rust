// MIR for `keeper::<impl at programs/drift/src/instructions/keeper.rs:3416:10: 3416:18>::try_accounts` before PreCodegen

fn keeper::<impl at programs/drift/src/instructions/keeper.rs:3416:10: 3416:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut ResolveBankruptcyBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<keeper::ResolveBankruptcy<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<instructions::keeper::ResolveBankruptcy<'_>, anchor_lang::error::Error>;
    let mut _6: &[u8];
    let mut _8: <instructions::keeper::ResolveBankruptcy<'info> as anchor_lang::Accounts<'info, instructions::keeper::ResolveBankruptcyBumps>>::try_accounts::__Args;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>, <instructions::keeper::ResolveBankruptcy<'info> as anchor_lang::Accounts<'info, instructions::keeper::ResolveBankruptcyBumps>>::try_accounts::__Args>;
    let mut _10: std::result::Result<<instructions::keeper::ResolveBankruptcy<'info> as anchor_lang::Accounts<'info, instructions::keeper::ResolveBankruptcyBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode>;
    let mut _11: std::result::Result<<instructions::keeper::ResolveBankruptcy<'info> as anchor_lang::Accounts<'info, instructions::keeper::ResolveBankruptcyBumps>>::try_accounts::__Args, std::io::Error>;
    let mut _12: &mut &[u8];
    let mut _13: &mut &[u8];
    let mut _14: {closure@programs/drift/src/instructions/keeper.rs:3416:10: 3416:18};
    let mut _15: isize;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>>;
    let mut _22: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _23: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _24: &anchor_lang::prelude::Pubkey;
    let mut _25: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _26: &[u8];
    let mut _27: &mut instructions::keeper::ResolveBankruptcyBumps;
    let mut _28: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _29: {closure@programs/drift/src/instructions/keeper.rs:3416:10: 3416:18};
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _37: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _38: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _39: &anchor_lang::prelude::Pubkey;
    let mut _40: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _41: &[u8];
    let mut _42: &mut instructions::keeper::ResolveBankruptcyBumps;
    let mut _43: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _44: {closure@programs/drift/src/instructions/keeper.rs:3416:10: 3416:18};
    let mut _45: isize;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _52: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _53: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _54: &anchor_lang::prelude::Pubkey;
    let mut _55: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _56: &[u8];
    let mut _57: &mut instructions::keeper::ResolveBankruptcyBumps;
    let mut _58: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _59: {closure@programs/drift/src/instructions/keeper.rs:3416:10: 3416:18};
    let mut _60: isize;
    let mut _62: !;
    let mut _63: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>;
    let mut _67: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _68: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _69: &anchor_lang::prelude::Pubkey;
    let mut _70: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _71: &[u8];
    let mut _72: &mut instructions::keeper::ResolveBankruptcyBumps;
    let mut _73: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _74: {closure@programs/drift/src/instructions/keeper.rs:3416:10: 3416:18};
    let mut _75: isize;
    let mut _77: !;
    let mut _78: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _81: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _82: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _83: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _84: &anchor_lang::prelude::Pubkey;
    let mut _85: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _86: &[u8];
    let mut _87: &mut instructions::keeper::ResolveBankruptcyBumps;
    let mut _88: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _89: {closure@programs/drift/src/instructions/keeper.rs:3416:10: 3416:18};
    let mut _90: isize;
    let mut _92: !;
    let mut _93: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _96: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>;
    let mut _97: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _98: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _99: &anchor_lang::prelude::Pubkey;
    let mut _100: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _101: &[u8];
    let mut _102: &mut instructions::keeper::ResolveBankruptcyBumps;
    let mut _103: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _104: {closure@programs/drift/src/instructions/keeper.rs:3416:10: 3416:18};
    let mut _105: isize;
    let mut _107: !;
    let mut _108: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _111: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _112: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _113: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _114: &anchor_lang::prelude::Pubkey;
    let mut _115: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _116: &[u8];
    let mut _117: &mut instructions::keeper::ResolveBankruptcyBumps;
    let mut _118: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _119: {closure@programs/drift/src/instructions/keeper.rs:3416:10: 3416:18};
    let mut _120: isize;
    let mut _122: !;
    let mut _123: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _126: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _127: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _128: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _129: &anchor_lang::prelude::Pubkey;
    let mut _130: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _131: &[u8];
    let mut _132: &mut instructions::keeper::ResolveBankruptcyBumps;
    let mut _133: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _134: {closure@programs/drift/src/instructions/keeper.rs:3416:10: 3416:18};
    let mut _135: isize;
    let mut _137: !;
    let mut _138: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _141: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _142: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _143: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _144: &anchor_lang::prelude::Pubkey;
    let mut _145: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _146: &[u8];
    let mut _147: &mut instructions::keeper::ResolveBankruptcyBumps;
    let mut _148: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _149: {closure@programs/drift/src/instructions/keeper.rs:3416:10: 3416:18};
    let mut _150: isize;
    let mut _152: !;
    let mut _153: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _156: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>>;
    let mut _157: std::result::Result<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>, anchor_lang::error::Error>;
    let mut _158: std::result::Result<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>, anchor_lang::error::Error>;
    let mut _159: &anchor_lang::prelude::Pubkey;
    let mut _160: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _161: &[u8];
    let mut _162: &mut instructions::keeper::ResolveBankruptcyBumps;
    let mut _163: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _164: {closure@programs/drift/src/instructions/keeper.rs:3416:10: 3416:18};
    let mut _165: isize;
    let mut _167: !;
    let mut _168: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _170: ();
    let mut _171: bool;
    let mut _172: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _173: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _174: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _175: !;
    let mut _176: anchor_lang::error::Error;
    let mut _177: anchor_lang::error::Error;
    let mut _178: anchor_lang::error::ErrorCode;
    let _179: ();
    let mut _180: bool;
    let mut _181: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, bool>;
    let mut _182: std::result::Result<bool, anchor_lang::error::Error>;
    let mut _183: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _184: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _185: &anchor_lang::prelude::Signer<'_>;
    let _186: &anchor_lang::prelude::Signer<'_>;
    let mut _187: isize;
    let mut _189: !;
    let mut _190: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _192: !;
    let mut _193: anchor_lang::error::Error;
    let mut _194: anchor_lang::error::Error;
    let mut _195: anchor_lang::error::ErrorCode;
    let _196: ();
    let mut _197: bool;
    let mut _198: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _199: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let _200: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _201: !;
    let mut _202: anchor_lang::error::Error;
    let mut _203: anchor_lang::error::Error;
    let mut _204: anchor_lang::error::ErrorCode;
    let _205: ();
    let mut _206: bool;
    let mut _207: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, bool>;
    let mut _208: std::result::Result<bool, anchor_lang::error::Error>;
    let mut _209: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _210: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _211: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let _212: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _213: isize;
    let mut _215: !;
    let mut _216: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _218: !;
    let mut _219: anchor_lang::error::Error;
    let mut _220: anchor_lang::error::Error;
    let mut _221: anchor_lang::error::ErrorCode;
    let _222: ();
    let mut _223: bool;
    let mut _224: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _225: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _226: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _227: !;
    let mut _228: anchor_lang::error::Error;
    let mut _229: anchor_lang::error::Error;
    let mut _230: anchor_lang::error::ErrorCode;
    let _231: ();
    let mut _232: bool;
    let mut _233: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _234: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let _235: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _236: !;
    let mut _237: anchor_lang::error::Error;
    let mut _238: anchor_lang::error::Error;
    let mut _239: anchor_lang::error::ErrorCode;
    let _240: ();
    let mut _241: bool;
    let mut _242: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, bool>;
    let mut _243: std::result::Result<bool, anchor_lang::error::Error>;
    let mut _244: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _245: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _246: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let _247: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _248: isize;
    let mut _250: !;
    let mut _251: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _253: !;
    let mut _254: anchor_lang::error::Error;
    let mut _255: anchor_lang::error::Error;
    let mut _256: anchor_lang::error::ErrorCode;
    let mut _259: (anchor_lang::prelude::Pubkey, u8);
    let mut _260: &[&[u8]];
    let mut _261: &[&[u8]; 2];
    let _262: &[&[u8]; 2];
    let _263: [&[u8]; 2];
    let mut _264: &[u8];
    let _265: &[u8];
    let mut _266: &[u8; 17];
    let _267: &[u8; 17];
    let mut _268: &[u8];
    let _269: &[u8];
    let mut _270: &[u8; 2];
    let _271: [u8; 2];
    let mut _272: u16;
    let mut _273: &anchor_lang::prelude::Pubkey;
    let _274: &&anchor_lang::prelude::Pubkey;
    let mut _275: u8;
    let _276: ();
    let mut _277: bool;
    let mut _278: &anchor_lang::prelude::Pubkey;
    let _279: anchor_lang::prelude::Pubkey;
    let mut _280: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _281: &anchor_lang::prelude::Pubkey;
    let mut _282: !;
    let mut _283: anchor_lang::error::Error;
    let mut _284: anchor_lang::error::Error;
    let mut _285: anchor_lang::error::Error;
    let mut _286: anchor_lang::error::ErrorCode;
    let mut _287: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _288: anchor_lang::prelude::Pubkey;
    let mut _289: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _290: anchor_lang::prelude::Pubkey;
    let _291: ();
    let mut _292: bool;
    let mut _293: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _294: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _295: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _296: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _297: !;
    let mut _298: anchor_lang::error::Error;
    let mut _299: anchor_lang::error::Error;
    let mut _300: anchor_lang::error::ErrorCode;
    let mut _303: (anchor_lang::prelude::Pubkey, u8);
    let mut _304: &[&[u8]];
    let mut _305: &[&[u8]; 2];
    let _306: &[&[u8]; 2];
    let _307: [&[u8]; 2];
    let mut _308: &[u8];
    let _309: &[u8];
    let mut _310: &[u8; 20];
    let _311: &[u8; 20];
    let mut _312: &[u8];
    let _313: &[u8];
    let mut _314: &[u8; 2];
    let _315: [u8; 2];
    let mut _316: u16;
    let mut _317: &anchor_lang::prelude::Pubkey;
    let _318: &&anchor_lang::prelude::Pubkey;
    let mut _319: u8;
    let _320: ();
    let mut _321: bool;
    let mut _322: &anchor_lang::prelude::Pubkey;
    let _323: anchor_lang::prelude::Pubkey;
    let mut _324: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _325: &anchor_lang::prelude::Pubkey;
    let mut _326: !;
    let mut _327: anchor_lang::error::Error;
    let mut _328: anchor_lang::error::Error;
    let mut _329: anchor_lang::error::Error;
    let mut _330: anchor_lang::error::ErrorCode;
    let mut _331: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _332: anchor_lang::prelude::Pubkey;
    let mut _333: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _334: anchor_lang::prelude::Pubkey;
    let _335: ();
    let mut _336: bool;
    let mut _337: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _338: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _339: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _340: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _341: !;
    let mut _342: anchor_lang::error::Error;
    let mut _343: anchor_lang::error::Error;
    let mut _344: anchor_lang::error::ErrorCode;
    let _345: ();
    let mut _346: bool;
    let mut _347: &anchor_lang::prelude::Pubkey;
    let _348: &state::state::State;
    let mut _349: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _350: &anchor_lang::prelude::Pubkey;
    let _351: &anchor_lang::prelude::Pubkey;
    let _352: anchor_lang::prelude::Pubkey;
    let mut _353: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _354: !;
    let mut _355: anchor_lang::error::Error;
    let mut _356: anchor_lang::error::Error;
    let mut _357: anchor_lang::error::ErrorCode;
    let mut _358: instructions::keeper::ResolveBankruptcy<'_>;
    let mut _359: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _360: anchor_lang::prelude::Signer<'_>;
    let mut _361: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _362: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _363: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _364: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _365: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _366: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _367: anchor_lang::prelude::AccountInfo<'_>;
    let mut _368: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _369: &anchor_lang::prelude::Pubkey;
    let mut _370: &anchor_lang::prelude::Pubkey;
    let mut _371: bool;
    let mut _372: bool;
    let mut _373: isize;
    let mut _374: isize;
    let mut _375: isize;
    let mut _376: isize;
    let mut _377: isize;
    let mut _378: isize;
    let mut _379: isize;
    let mut _380: isize;
    let mut _381: isize;
    let mut _382: isize;
    let mut _383: isize;
    let mut _384: isize;
    let mut _385: isize;
    let mut _386: isize;
    let mut _387: isize;
    let mut _388: isize;
    let mut _389: isize;
    let mut _390: isize;
    let mut _391: isize;
    let mut _392: isize;
    let mut _393: isize;
    let mut _394: isize;
    let mut _395: isize;
    let mut _396: isize;
    let mut _397: isize;
    let mut _398: isize;
    let mut _399: isize;
    let mut _400: isize;
    let mut _401: isize;
    let mut _402: isize;
    let mut _403: isize;
    let mut _404: isize;
    let mut _405: isize;
    let mut _406: isize;
    let mut _407: isize;
    let mut _408: isize;
    let mut _409: isize;
    let mut _410: isize;
    let mut _411: isize;
    let mut _412: isize;
    let mut _413: isize;
    let mut _414: isize;
    let mut _415: isize;
    let mut _416: isize;
    let mut _417: isize;
    let mut _418: isize;
    let mut _419: isize;
    let mut _420: isize;
    let mut _421: isize;
    let mut _422: isize;
    let mut _423: isize;
    let mut _424: isize;
    let mut _425: isize;
    let mut _426: isize;
    let mut _427: isize;
    let mut _428: isize;
    let mut _429: isize;
    let mut _430: isize;
    let mut _431: isize;
    let mut _432: isize;
    let mut _433: isize;
    let mut _434: isize;
    let mut _435: isize;
    let mut _436: isize;
    let mut _437: isize;
    let mut _438: isize;
    let mut _439: isize;
    let mut _440: isize;
    let mut _441: isize;
    let mut _442: isize;
    let mut _443: isize;
    let mut _444: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _445: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _446: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _447: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _448: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug __ix_data => _6;
        let _7: u16;
        let _16: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
        let _19: <instructions::keeper::ResolveBankruptcy<'info> as anchor_lang::Accounts<'info, instructions::keeper::ResolveBankruptcyBumps>>::try_accounts::__Args;
        scope 2 {
            debug spot_market_index => _7;
            let _20: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
            let _31: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _34: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
            scope 7 {
                debug state => _20;
                let _35: anchor_lang::prelude::Signer<'_>;
                let _46: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _49: anchor_lang::prelude::Signer<'_>;
                scope 12 {
                    debug authority => _35;
                    let _50: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
                    let _61: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _64: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
                    scope 17 {
                        debug liquidator => _50;
                        let _65: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
                        let _76: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _79: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
                        scope 22 {
                            debug liquidator_stats => _65;
                            let _80: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
                            let _91: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _94: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
                            scope 27 {
                                debug user => _80;
                                let _95: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
                                let _106: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _109: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
                                scope 32 {
                                    debug user_stats => _95;
                                    let _110: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                    let _121: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                    let _124: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                    scope 37 {
                                        debug spot_market_vault => _110;
                                        let _125: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                        let _136: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                        let _139: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                        scope 42 {
                                            debug insurance_fund_vault => _125;
                                            let _140: anchor_lang::prelude::AccountInfo<'_>;
                                            let _151: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                            let _154: anchor_lang::prelude::AccountInfo<'_>;
                                            scope 47 {
                                                debug drift_signer => _140;
                                                let _155: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
                                                let _166: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                let _169: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
                                                scope 52 {
                                                    debug token_program => _155;
                                                    let _188: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                    let _191: bool;
                                                    let _214: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                    let _217: bool;
                                                    let _249: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                    let _252: bool;
                                                    let _257: anchor_lang::prelude::Pubkey;
                                                    let _258: u8;
                                                    scope 57 {
                                                        debug residual => _188;
                                                        scope 58 {
                                                        }
                                                    }
                                                    scope 59 {
                                                        debug val => _191;
                                                        scope 60 {
                                                        }
                                                    }
                                                    scope 61 {
                                                        debug residual => _214;
                                                        scope 62 {
                                                        }
                                                    }
                                                    scope 63 {
                                                        debug val => _217;
                                                        scope 64 {
                                                        }
                                                    }
                                                    scope 65 {
                                                        debug residual => _249;
                                                        scope 66 {
                                                        }
                                                    }
                                                    scope 67 {
                                                        debug val => _252;
                                                        scope 68 {
                                                        }
                                                    }
                                                    scope 69 {
                                                        debug __pda_address => _257;
                                                        debug __bump => _258;
                                                        let _301: anchor_lang::prelude::Pubkey;
                                                        let _302: u8;
                                                        scope 70 {
                                                            debug __pda_address => _301;
                                                            debug __bump => _302;
                                                        }
                                                    }
                                                }
                                                scope 53 {
                                                    debug residual => _166;
                                                    scope 54 {
                                                    }
                                                }
                                                scope 55 {
                                                    debug val => _169;
                                                    scope 56 {
                                                    }
                                                }
                                            }
                                            scope 48 {
                                                debug residual => _151;
                                                scope 49 {
                                                }
                                            }
                                            scope 50 {
                                                debug val => _154;
                                                scope 51 {
                                                }
                                            }
                                        }
                                        scope 43 {
                                            debug residual => _136;
                                            scope 44 {
                                            }
                                        }
                                        scope 45 {
                                            debug val => _139;
                                            scope 46 {
                                            }
                                        }
                                    }
                                    scope 38 {
                                        debug residual => _121;
                                        scope 39 {
                                        }
                                    }
                                    scope 40 {
                                        debug val => _124;
                                        scope 41 {
                                        }
                                    }
                                }
                                scope 33 {
                                    debug residual => _106;
                                    scope 34 {
                                    }
                                }
                                scope 35 {
                                    debug val => _109;
                                    scope 36 {
                                    }
                                }
                            }
                            scope 28 {
                                debug residual => _91;
                                scope 29 {
                                }
                            }
                            scope 30 {
                                debug val => _94;
                                scope 31 {
                                }
                            }
                        }
                        scope 23 {
                            debug residual => _76;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _79;
                            scope 26 {
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _61;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _64;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _46;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _49;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _31;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _34;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _16;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _19;
            scope 6 {
            }
        }
    }

    bb0: {
        _372 = const false;
        _371 = const false;
        StorageLive(_6);
        _6 = _3;
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &mut _6;
        _12 = &mut (*_13);
        _11 = <<keeper::ResolveBankruptcy<'info> as anchor_lang::Accounts<'info, ResolveBankruptcyBumps>>::try_accounts::__Args as BorshDeserialize>::deserialize(move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_12);
        StorageLive(_14);
        _14 = {closure@programs/drift/src/instructions/keeper.rs:3416:10: 3416:18};
        _10 = std::result::Result::<<keeper::ResolveBankruptcy<'info> as anchor_lang::Accounts<'info, ResolveBankruptcyBumps>>::try_accounts::__Args, std::io::Error>::map_err::<anchor_lang::error::ErrorCode, {closure@programs/drift/src/instructions/keeper.rs:3416:10: 3416:18}>(move _11, move _14) -> [return: bb2, unwind: bb173];
    }

    bb2: {
        StorageDead(_14);
        StorageDead(_11);
        _9 = <std::result::Result<<keeper::ResolveBankruptcy<'info> as anchor_lang::Accounts<'info, ResolveBankruptcyBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode> as Try>::branch(move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_10);
        _15 = discriminant(_9);
        switchInt(move _15) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_19);
        _19 = move ((_9 as Continue).0: <instructions::keeper::ResolveBankruptcy<'info> as anchor_lang::Accounts<'info, instructions::keeper::ResolveBankruptcyBumps>>::try_accounts::__Args);
        _8 = move _19;
        StorageDead(_19);
        StorageLive(_7);
        _7 = (_8.0: u16);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &(*_1);
        StorageLive(_25);
        _25 = &mut (*_2);
        StorageLive(_26);
        _26 = &(*_6);
        StorageLive(_27);
        _27 = &mut (*_4);
        StorageLive(_28);
        _28 = &mut (*_5);
        _23 = <Box<anchor_lang::prelude::Account<'_, state::state::State>> as anchor_lang::Accounts<'_, ResolveBankruptcyBumps>>::try_accounts(move _24, move _25, move _26, move _27, move _28) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_16);
        _16 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>);
        StorageLive(_18);
        _18 = _16;
        _0 = <std::result::Result<keeper::ResolveBankruptcy<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::ErrorCode>>>::from_residual(move _18) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb167;
    }

    bb8: {
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageLive(_29);
        _29 = {closure@programs/drift/src/instructions/keeper.rs:3416:10: 3416:18};
        _22 = std::result::Result::<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/keeper.rs:3416:10: 3416:18}>(move _23, move _29) -> [return: bb9, unwind: bb173];
    }

    bb9: {
        StorageDead(_29);
        StorageDead(_23);
        _21 = <std::result::Result<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error> as Try>::branch(move _22) -> [return: bb10, unwind: bb173];
    }

    bb10: {
        StorageDead(_22);
        _30 = discriminant(_21);
        switchInt(move _30) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_34);
        _34 = move ((_21 as Continue).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _20 = move _34;
        StorageDead(_34);
        _373 = discriminant(_21);
        StorageDead(_21);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &(*_1);
        StorageLive(_40);
        _40 = &mut (*_2);
        StorageLive(_41);
        _41 = &(*_6);
        StorageLive(_42);
        _42 = &mut (*_4);
        StorageLive(_43);
        _43 = &mut (*_5);
        _38 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, ResolveBankruptcyBumps>>::try_accounts(move _39, move _40, move _41, move _42, move _43) -> [return: bb14, unwind: bb172];
    }

    bb12: {
        StorageLive(_31);
        _31 = move ((_21 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_33);
        _33 = move _31;
        _0 = <std::result::Result<keeper::ResolveBankruptcy<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _33) -> [return: bb13, unwind: bb196];
    }

    bb13: {
        StorageDead(_33);
        StorageDead(_31);
        _429 = discriminant(_21);
        StorageDead(_21);
        goto -> bb166;
    }

    bb14: {
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        StorageLive(_44);
        _44 = {closure@programs/drift/src/instructions/keeper.rs:3416:10: 3416:18};
        _37 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/keeper.rs:3416:10: 3416:18}>(move _38, move _44) -> [return: bb15, unwind: bb172];
    }

    bb15: {
        StorageDead(_44);
        StorageDead(_38);
        _36 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _37) -> [return: bb16, unwind: bb172];
    }

    bb16: {
        StorageDead(_37);
        _45 = discriminant(_36);
        switchInt(move _45) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_49);
        _49 = move ((_36 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _35 = move _49;
        StorageDead(_49);
        _375 = discriminant(_36);
        StorageDead(_36);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &(*_1);
        StorageLive(_55);
        _55 = &mut (*_2);
        StorageLive(_56);
        _56 = &(*_6);
        StorageLive(_57);
        _57 = &mut (*_4);
        StorageLive(_58);
        _58 = &mut (*_5);
        _53 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Accounts<'_, ResolveBankruptcyBumps>>::try_accounts(move _54, move _55, move _56, move _57, move _58) -> [return: bb20, unwind: bb172];
    }

    bb18: {
        StorageLive(_46);
        _46 = move ((_36 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_48);
        _48 = move _46;
        _0 = <std::result::Result<keeper::ResolveBankruptcy<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _48) -> [return: bb19, unwind: bb195];
    }

    bb19: {
        StorageDead(_48);
        StorageDead(_46);
        _427 = discriminant(_36);
        StorageDead(_36);
        goto -> bb165;
    }

    bb20: {
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_54);
        StorageLive(_59);
        _59 = {closure@programs/drift/src/instructions/keeper.rs:3416:10: 3416:18};
        _52 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, User>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/keeper.rs:3416:10: 3416:18}>(move _53, move _59) -> [return: bb21, unwind: bb172];
    }

    bb21: {
        StorageDead(_59);
        StorageDead(_53);
        _51 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, User>, anchor_lang::error::Error> as Try>::branch(move _52) -> [return: bb22, unwind: bb172];
    }

    bb22: {
        StorageDead(_52);
        _60 = discriminant(_51);
        switchInt(move _60) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_64);
        _64 = move ((_51 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _50 = move _64;
        StorageDead(_64);
        _377 = discriminant(_51);
        StorageDead(_51);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &(*_1);
        StorageLive(_70);
        _70 = &mut (*_2);
        StorageLive(_71);
        _71 = &(*_6);
        StorageLive(_72);
        _72 = &mut (*_4);
        StorageLive(_73);
        _73 = &mut (*_5);
        _68 = <anchor_lang::prelude::AccountLoader<'_, UserStats> as anchor_lang::Accounts<'_, ResolveBankruptcyBumps>>::try_accounts(move _69, move _70, move _71, move _72, move _73) -> [return: bb26, unwind: bb172];
    }

    bb24: {
        StorageLive(_61);
        _61 = move ((_51 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_63);
        _63 = move _61;
        _0 = <std::result::Result<keeper::ResolveBankruptcy<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _63) -> [return: bb25, unwind: bb194];
    }

    bb25: {
        StorageDead(_63);
        StorageDead(_61);
        _425 = discriminant(_51);
        StorageDead(_51);
        goto -> bb164;
    }

    bb26: {
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_74);
        _74 = {closure@programs/drift/src/instructions/keeper.rs:3416:10: 3416:18};
        _67 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, UserStats>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/keeper.rs:3416:10: 3416:18}>(move _68, move _74) -> [return: bb27, unwind: bb172];
    }

    bb27: {
        StorageDead(_74);
        StorageDead(_68);
        _66 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, UserStats>, anchor_lang::error::Error> as Try>::branch(move _67) -> [return: bb28, unwind: bb172];
    }

    bb28: {
        StorageDead(_67);
        _75 = discriminant(_66);
        switchInt(move _75) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_79);
        _79 = move ((_66 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _65 = move _79;
        StorageDead(_79);
        _379 = discriminant(_66);
        StorageDead(_66);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = &(*_1);
        StorageLive(_85);
        _85 = &mut (*_2);
        StorageLive(_86);
        _86 = &(*_6);
        StorageLive(_87);
        _87 = &mut (*_4);
        StorageLive(_88);
        _88 = &mut (*_5);
        _83 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Accounts<'_, ResolveBankruptcyBumps>>::try_accounts(move _84, move _85, move _86, move _87, move _88) -> [return: bb32, unwind: bb172];
    }

    bb30: {
        StorageLive(_76);
        _76 = move ((_66 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_78);
        _78 = move _76;
        _0 = <std::result::Result<keeper::ResolveBankruptcy<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _78) -> [return: bb31, unwind: bb193];
    }

    bb31: {
        StorageDead(_78);
        StorageDead(_76);
        _423 = discriminant(_66);
        StorageDead(_66);
        goto -> bb163;
    }

    bb32: {
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_84);
        StorageLive(_89);
        _89 = {closure@programs/drift/src/instructions/keeper.rs:3416:10: 3416:18};
        _82 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, User>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/keeper.rs:3416:10: 3416:18}>(move _83, move _89) -> [return: bb33, unwind: bb172];
    }

    bb33: {
        StorageDead(_89);
        StorageDead(_83);
        _81 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, User>, anchor_lang::error::Error> as Try>::branch(move _82) -> [return: bb34, unwind: bb172];
    }

    bb34: {
        StorageDead(_82);
        _90 = discriminant(_81);
        switchInt(move _90) -> [0: bb35, 1: bb36, otherwise: bb5];
    }

    bb35: {
        StorageLive(_94);
        _94 = move ((_81 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _80 = move _94;
        StorageDead(_94);
        _381 = discriminant(_81);
        StorageDead(_81);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = &(*_1);
        StorageLive(_100);
        _100 = &mut (*_2);
        StorageLive(_101);
        _101 = &(*_6);
        StorageLive(_102);
        _102 = &mut (*_4);
        StorageLive(_103);
        _103 = &mut (*_5);
        _98 = <anchor_lang::prelude::AccountLoader<'_, UserStats> as anchor_lang::Accounts<'_, ResolveBankruptcyBumps>>::try_accounts(move _99, move _100, move _101, move _102, move _103) -> [return: bb38, unwind: bb172];
    }

    bb36: {
        StorageLive(_91);
        _91 = move ((_81 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_93);
        _93 = move _91;
        _0 = <std::result::Result<keeper::ResolveBankruptcy<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _93) -> [return: bb37, unwind: bb192];
    }

    bb37: {
        StorageDead(_93);
        StorageDead(_91);
        _421 = discriminant(_81);
        StorageDead(_81);
        goto -> bb162;
    }

    bb38: {
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_99);
        StorageLive(_104);
        _104 = {closure@programs/drift/src/instructions/keeper.rs:3416:10: 3416:18};
        _97 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, UserStats>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/keeper.rs:3416:10: 3416:18}>(move _98, move _104) -> [return: bb39, unwind: bb172];
    }

    bb39: {
        StorageDead(_104);
        StorageDead(_98);
        _96 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, UserStats>, anchor_lang::error::Error> as Try>::branch(move _97) -> [return: bb40, unwind: bb172];
    }

    bb40: {
        StorageDead(_97);
        _105 = discriminant(_96);
        switchInt(move _105) -> [0: bb41, 1: bb42, otherwise: bb5];
    }

    bb41: {
        StorageLive(_109);
        _109 = move ((_96 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _95 = move _109;
        StorageDead(_109);
        _383 = discriminant(_96);
        StorageDead(_96);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        _114 = &(*_1);
        StorageLive(_115);
        _115 = &mut (*_2);
        StorageLive(_116);
        _116 = &(*_6);
        StorageLive(_117);
        _117 = &mut (*_4);
        StorageLive(_118);
        _118 = &mut (*_5);
        _113 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, ResolveBankruptcyBumps>>::try_accounts(move _114, move _115, move _116, move _117, move _118) -> [return: bb44, unwind: bb172];
    }

    bb42: {
        StorageLive(_106);
        _106 = move ((_96 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_108);
        _108 = move _106;
        _0 = <std::result::Result<keeper::ResolveBankruptcy<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _108) -> [return: bb43, unwind: bb191];
    }

    bb43: {
        StorageDead(_108);
        StorageDead(_106);
        _419 = discriminant(_96);
        StorageDead(_96);
        goto -> bb161;
    }

    bb44: {
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_115);
        StorageDead(_114);
        StorageLive(_119);
        _119 = {closure@programs/drift/src/instructions/keeper.rs:3416:10: 3416:18};
        _112 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/keeper.rs:3416:10: 3416:18}>(move _113, move _119) -> [return: bb45, unwind: bb172];
    }

    bb45: {
        StorageDead(_119);
        StorageDead(_113);
        _111 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _112) -> [return: bb46, unwind: bb172];
    }

    bb46: {
        StorageDead(_112);
        _120 = discriminant(_111);
        switchInt(move _120) -> [0: bb47, 1: bb48, otherwise: bb5];
    }

    bb47: {
        StorageLive(_124);
        _124 = move ((_111 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _110 = move _124;
        StorageDead(_124);
        _385 = discriminant(_111);
        StorageDead(_111);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _129 = &(*_1);
        StorageLive(_130);
        _130 = &mut (*_2);
        StorageLive(_131);
        _131 = &(*_6);
        StorageLive(_132);
        _132 = &mut (*_4);
        StorageLive(_133);
        _133 = &mut (*_5);
        _128 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, ResolveBankruptcyBumps>>::try_accounts(move _129, move _130, move _131, move _132, move _133) -> [return: bb50, unwind: bb171];
    }

    bb48: {
        StorageLive(_121);
        _121 = move ((_111 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_123);
        _123 = move _121;
        _0 = <std::result::Result<keeper::ResolveBankruptcy<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _123) -> [return: bb49, unwind: bb190];
    }

    bb49: {
        StorageDead(_123);
        StorageDead(_121);
        _417 = discriminant(_111);
        StorageDead(_111);
        goto -> bb160;
    }

    bb50: {
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_131);
        StorageDead(_130);
        StorageDead(_129);
        StorageLive(_134);
        _134 = {closure@programs/drift/src/instructions/keeper.rs:3416:10: 3416:18};
        _127 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/keeper.rs:3416:10: 3416:18}>(move _128, move _134) -> [return: bb51, unwind: bb171];
    }

    bb51: {
        StorageDead(_134);
        StorageDead(_128);
        _126 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _127) -> [return: bb52, unwind: bb171];
    }

    bb52: {
        StorageDead(_127);
        _135 = discriminant(_126);
        switchInt(move _135) -> [0: bb53, 1: bb54, otherwise: bb5];
    }

    bb53: {
        StorageLive(_139);
        _139 = move ((_126 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _125 = move _139;
        StorageDead(_139);
        _387 = discriminant(_126);
        StorageDead(_126);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        _144 = &(*_1);
        StorageLive(_145);
        _145 = &mut (*_2);
        StorageLive(_146);
        _146 = &(*_6);
        StorageLive(_147);
        _147 = &mut (*_4);
        StorageLive(_148);
        _148 = &mut (*_5);
        _143 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, ResolveBankruptcyBumps>>::try_accounts(move _144, move _145, move _146, move _147, move _148) -> [return: bb56, unwind: bb170];
    }

    bb54: {
        StorageLive(_136);
        _136 = move ((_126 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_138);
        _138 = move _136;
        _0 = <std::result::Result<keeper::ResolveBankruptcy<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _138) -> [return: bb55, unwind: bb189];
    }

    bb55: {
        StorageDead(_138);
        StorageDead(_136);
        _415 = discriminant(_126);
        StorageDead(_126);
        goto -> bb159;
    }

    bb56: {
        StorageDead(_148);
        StorageDead(_147);
        StorageDead(_146);
        StorageDead(_145);
        StorageDead(_144);
        StorageLive(_149);
        _149 = {closure@programs/drift/src/instructions/keeper.rs:3416:10: 3416:18};
        _142 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/keeper.rs:3416:10: 3416:18}>(move _143, move _149) -> [return: bb57, unwind: bb170];
    }

    bb57: {
        StorageDead(_149);
        StorageDead(_143);
        _141 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _142) -> [return: bb58, unwind: bb170];
    }

    bb58: {
        StorageDead(_142);
        _150 = discriminant(_141);
        switchInt(move _150) -> [0: bb59, 1: bb60, otherwise: bb5];
    }

    bb59: {
        StorageLive(_154);
        _154 = move ((_141 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _140 = move _154;
        StorageDead(_154);
        _389 = discriminant(_141);
        StorageDead(_141);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        _159 = &(*_1);
        StorageLive(_160);
        _160 = &mut (*_2);
        StorageLive(_161);
        _161 = &(*_6);
        StorageLive(_162);
        _162 = &mut (*_4);
        StorageLive(_163);
        _163 = &mut (*_5);
        _158 = <anchor_lang::prelude::Interface<'_, TokenInterface> as anchor_lang::Accounts<'_, ResolveBankruptcyBumps>>::try_accounts(move _159, move _160, move _161, move _162, move _163) -> [return: bb62, unwind: bb169];
    }

    bb60: {
        StorageLive(_151);
        _151 = move ((_141 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_153);
        _153 = move _151;
        _0 = <std::result::Result<keeper::ResolveBankruptcy<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _153) -> [return: bb61, unwind: bb188];
    }

    bb61: {
        StorageDead(_153);
        StorageDead(_151);
        _413 = discriminant(_141);
        StorageDead(_141);
        goto -> bb158;
    }

    bb62: {
        StorageDead(_163);
        StorageDead(_162);
        StorageDead(_161);
        StorageDead(_160);
        StorageDead(_159);
        StorageLive(_164);
        _164 = {closure@programs/drift/src/instructions/keeper.rs:3416:10: 3416:18};
        _157 = std::result::Result::<anchor_lang::prelude::Interface<'_, TokenInterface>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/keeper.rs:3416:10: 3416:18}>(move _158, move _164) -> [return: bb63, unwind: bb169];
    }

    bb63: {
        StorageDead(_164);
        StorageDead(_158);
        _156 = <std::result::Result<anchor_lang::prelude::Interface<'_, TokenInterface>, anchor_lang::error::Error> as Try>::branch(move _157) -> [return: bb64, unwind: bb169];
    }

    bb64: {
        StorageDead(_157);
        _165 = discriminant(_156);
        switchInt(move _165) -> [0: bb65, 1: bb66, otherwise: bb5];
    }

    bb65: {
        StorageLive(_169);
        _169 = move ((_156 as Continue).0: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _155 = move _169;
        StorageDead(_169);
        _391 = discriminant(_156);
        StorageDead(_156);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        _174 = &_50;
        _173 = &(*_174);
        _172 = <anchor_lang::prelude::AccountLoader<'_, User> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _173) -> [return: bb68, unwind: bb169];
    }

    bb66: {
        StorageLive(_166);
        _166 = move ((_156 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_168);
        _168 = move _166;
        _0 = <std::result::Result<keeper::ResolveBankruptcy<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _168) -> [return: bb67, unwind: bb187];
    }

    bb67: {
        StorageDead(_168);
        StorageDead(_166);
        _411 = discriminant(_156);
        StorageDead(_156);
        goto -> bb157;
    }

    bb68: {
        StorageDead(_173);
        _171 = ((*_172).6: bool);
        switchInt(move _171) -> [0: bb69, otherwise: bb72];
    }

    bb69: {
        StorageDead(_174);
        StorageDead(_172);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        _178 = ConstraintMut;
        _177 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _178) -> [return: bb70, unwind: bb169];
    }

    bb70: {
        StorageDead(_178);
        _176 = anchor_lang::error::Error::with_account_name::<&str>(move _177, const "liquidator") -> [return: bb71, unwind: bb169];
    }

    bb71: {
        StorageDead(_177);
        _0 = std::result::Result::<keeper::ResolveBankruptcy<'_>, anchor_lang::error::Error>::Err(move _176);
        StorageDead(_176);
        StorageDead(_171);
        StorageDead(_170);
        goto -> bb157;
    }

    bb72: {
        StorageDead(_174);
        StorageDead(_172);
        _170 = const ();
        StorageDead(_171);
        StorageDead(_170);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        _184 = &_50;
        _183 = &(*_184);
        StorageLive(_185);
        StorageLive(_186);
        _186 = &_35;
        _185 = &(*_186);
        _182 = constraints::can_sign_for_user(move _183, move _185) -> [return: bb73, unwind: bb169];
    }

    bb73: {
        StorageDead(_185);
        StorageDead(_183);
        _181 = <std::result::Result<bool, anchor_lang::error::Error> as Try>::branch(move _182) -> [return: bb74, unwind: bb169];
    }

    bb74: {
        StorageDead(_182);
        _187 = discriminant(_181);
        switchInt(move _187) -> [0: bb75, 1: bb76, otherwise: bb5];
    }

    bb75: {
        StorageLive(_191);
        _191 = ((_181 as Continue).0: bool);
        _180 = _191;
        StorageDead(_191);
        switchInt(move _180) -> [0: bb175, otherwise: bb174];
    }

    bb76: {
        StorageLive(_188);
        _188 = move ((_181 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_190);
        _190 = move _188;
        _0 = <std::result::Result<keeper::ResolveBankruptcy<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _190) -> [return: bb77, unwind: bb186];
    }

    bb77: {
        StorageDead(_190);
        StorageDead(_188);
        _409 = discriminant(_181);
        StorageDead(_186);
        StorageDead(_184);
        StorageDead(_181);
        goto -> bb156;
    }

    bb78: {
        StorageDead(_195);
        _193 = anchor_lang::error::Error::with_account_name::<&str>(move _194, const "liquidator") -> [return: bb79, unwind: bb169];
    }

    bb79: {
        StorageDead(_194);
        _0 = std::result::Result::<keeper::ResolveBankruptcy<'_>, anchor_lang::error::Error>::Err(move _193);
        StorageDead(_193);
        goto -> bb156;
    }

    bb80: {
        StorageDead(_199);
        _197 = ((*_198).6: bool);
        switchInt(move _197) -> [0: bb81, otherwise: bb84];
    }

    bb81: {
        StorageDead(_200);
        StorageDead(_198);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        _204 = ConstraintMut;
        _203 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _204) -> [return: bb82, unwind: bb169];
    }

    bb82: {
        StorageDead(_204);
        _202 = anchor_lang::error::Error::with_account_name::<&str>(move _203, const "liquidator_stats") -> [return: bb83, unwind: bb169];
    }

    bb83: {
        StorageDead(_203);
        _0 = std::result::Result::<keeper::ResolveBankruptcy<'_>, anchor_lang::error::Error>::Err(move _202);
        StorageDead(_202);
        StorageDead(_197);
        StorageDead(_196);
        goto -> bb157;
    }

    bb84: {
        StorageDead(_200);
        StorageDead(_198);
        _196 = const ();
        StorageDead(_197);
        StorageDead(_196);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        _210 = &_50;
        _209 = &(*_210);
        StorageLive(_211);
        StorageLive(_212);
        _212 = &_65;
        _211 = &(*_212);
        _208 = constraints::is_stats_for_user(move _209, move _211) -> [return: bb85, unwind: bb169];
    }

    bb85: {
        StorageDead(_211);
        StorageDead(_209);
        _207 = <std::result::Result<bool, anchor_lang::error::Error> as Try>::branch(move _208) -> [return: bb86, unwind: bb169];
    }

    bb86: {
        StorageDead(_208);
        _213 = discriminant(_207);
        switchInt(move _213) -> [0: bb87, 1: bb88, otherwise: bb5];
    }

    bb87: {
        StorageLive(_217);
        _217 = ((_207 as Continue).0: bool);
        _206 = _217;
        StorageDead(_217);
        switchInt(move _206) -> [0: bb177, otherwise: bb176];
    }

    bb88: {
        StorageLive(_214);
        _214 = move ((_207 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_216);
        _216 = move _214;
        _0 = <std::result::Result<keeper::ResolveBankruptcy<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _216) -> [return: bb89, unwind: bb185];
    }

    bb89: {
        StorageDead(_216);
        StorageDead(_214);
        _407 = discriminant(_207);
        StorageDead(_212);
        StorageDead(_210);
        StorageDead(_207);
        goto -> bb155;
    }

    bb90: {
        StorageDead(_221);
        _219 = anchor_lang::error::Error::with_account_name::<&str>(move _220, const "liquidator_stats") -> [return: bb91, unwind: bb169];
    }

    bb91: {
        StorageDead(_220);
        _0 = std::result::Result::<keeper::ResolveBankruptcy<'_>, anchor_lang::error::Error>::Err(move _219);
        StorageDead(_219);
        goto -> bb155;
    }

    bb92: {
        StorageDead(_225);
        _223 = ((*_224).6: bool);
        switchInt(move _223) -> [0: bb93, otherwise: bb96];
    }

    bb93: {
        StorageDead(_226);
        StorageDead(_224);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        _230 = ConstraintMut;
        _229 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _230) -> [return: bb94, unwind: bb169];
    }

    bb94: {
        StorageDead(_230);
        _228 = anchor_lang::error::Error::with_account_name::<&str>(move _229, const "user") -> [return: bb95, unwind: bb169];
    }

    bb95: {
        StorageDead(_229);
        _0 = std::result::Result::<keeper::ResolveBankruptcy<'_>, anchor_lang::error::Error>::Err(move _228);
        StorageDead(_228);
        StorageDead(_223);
        StorageDead(_222);
        goto -> bb157;
    }

    bb96: {
        StorageDead(_226);
        StorageDead(_224);
        _222 = const ();
        StorageDead(_223);
        StorageDead(_222);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        _235 = &_95;
        _234 = &(*_235);
        _233 = <anchor_lang::prelude::AccountLoader<'_, UserStats> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _234) -> [return: bb97, unwind: bb169];
    }

    bb97: {
        StorageDead(_234);
        _232 = ((*_233).6: bool);
        switchInt(move _232) -> [0: bb98, otherwise: bb101];
    }

    bb98: {
        StorageDead(_235);
        StorageDead(_233);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        _239 = ConstraintMut;
        _238 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _239) -> [return: bb99, unwind: bb169];
    }

    bb99: {
        StorageDead(_239);
        _237 = anchor_lang::error::Error::with_account_name::<&str>(move _238, const "user_stats") -> [return: bb100, unwind: bb169];
    }

    bb100: {
        StorageDead(_238);
        _0 = std::result::Result::<keeper::ResolveBankruptcy<'_>, anchor_lang::error::Error>::Err(move _237);
        StorageDead(_237);
        StorageDead(_232);
        StorageDead(_231);
        goto -> bb157;
    }

    bb101: {
        StorageDead(_235);
        StorageDead(_233);
        _231 = const ();
        StorageDead(_232);
        StorageDead(_231);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        _245 = &_80;
        _244 = &(*_245);
        StorageLive(_246);
        StorageLive(_247);
        _247 = &_95;
        _246 = &(*_247);
        _243 = constraints::is_stats_for_user(move _244, move _246) -> [return: bb102, unwind: bb169];
    }

    bb102: {
        StorageDead(_246);
        StorageDead(_244);
        _242 = <std::result::Result<bool, anchor_lang::error::Error> as Try>::branch(move _243) -> [return: bb103, unwind: bb169];
    }

    bb103: {
        StorageDead(_243);
        _248 = discriminant(_242);
        switchInt(move _248) -> [0: bb104, 1: bb105, otherwise: bb5];
    }

    bb104: {
        StorageLive(_252);
        _252 = ((_242 as Continue).0: bool);
        _241 = _252;
        StorageDead(_252);
        switchInt(move _241) -> [0: bb179, otherwise: bb178];
    }

    bb105: {
        StorageLive(_249);
        _249 = move ((_242 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_251);
        _251 = move _249;
        _0 = <std::result::Result<keeper::ResolveBankruptcy<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _251) -> [return: bb106, unwind: bb184];
    }

    bb106: {
        StorageDead(_251);
        StorageDead(_249);
        _405 = discriminant(_242);
        StorageDead(_247);
        StorageDead(_245);
        StorageDead(_242);
        goto -> bb154;
    }

    bb107: {
        StorageDead(_256);
        _254 = anchor_lang::error::Error::with_account_name::<&str>(move _255, const "user_stats") -> [return: bb108, unwind: bb169];
    }

    bb108: {
        StorageDead(_255);
        _0 = std::result::Result::<keeper::ResolveBankruptcy<'_>, anchor_lang::error::Error>::Err(move _254);
        StorageDead(_254);
        goto -> bb154;
    }

    bb109: {
        _264 = &(*_265);
        StorageDead(_266);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        _272 = _7;
        _271 = core::num::<impl u16>::to_le_bytes(move _272) -> [return: bb110, unwind: bb169];
    }

    bb110: {
        _270 = &_271;
        StorageDead(_272);
        _269 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _270) -> [return: bb111, unwind: bb169];
    }

    bb111: {
        _268 = &(*_269);
        StorageDead(_270);
        _263 = [move _264, move _268];
        StorageDead(_268);
        StorageDead(_264);
        _262 = &_263;
        _261 = &(*_262);
        _260 = move _261 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_261);
        StorageLive(_273);
        StorageLive(_274);
        _274 = &_1;
        _369 = deref_copy (*_274);
        _273 = &(*_369);
        _259 = anchor_lang::prelude::Pubkey::find_program_address(move _260, move _273) -> [return: bb112, unwind: bb169];
    }

    bb112: {
        StorageDead(_273);
        StorageDead(_260);
        StorageLive(_257);
        _257 = (_259.0: anchor_lang::prelude::Pubkey);
        StorageLive(_258);
        _258 = (_259.1: u8);
        StorageDead(_274);
        StorageDead(_271);
        StorageDead(_269);
        StorageDead(_267);
        StorageDead(_265);
        StorageDead(_263);
        StorageDead(_262);
        StorageDead(_259);
        StorageLive(_275);
        _275 = _258;
        ((*_4).0: u8) = move _275;
        StorageDead(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        _444 = (((_110.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _280 = &(*_444);
        _279 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _280) -> [return: bb113, unwind: bb169];
    }

    bb113: {
        _278 = &_279;
        StorageDead(_280);
        StorageLive(_281);
        _281 = &_257;
        _277 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _278, move _281) -> [return: bb114, unwind: bb169];
    }

    bb114: {
        switchInt(move _277) -> [0: bb120, otherwise: bb115];
    }

    bb115: {
        StorageDead(_281);
        StorageDead(_279);
        StorageDead(_278);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        _286 = ConstraintSeeds;
        _285 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _286) -> [return: bb116, unwind: bb169];
    }

    bb116: {
        StorageDead(_286);
        _284 = anchor_lang::error::Error::with_account_name::<&str>(move _285, const "spot_market_vault") -> [return: bb117, unwind: bb169];
    }

    bb117: {
        _372 = const true;
        StorageDead(_285);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        _445 = (((_110.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _289 = &(*_445);
        _288 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _289) -> [return: bb118, unwind: bb183];
    }

    bb118: {
        StorageDead(_289);
        StorageLive(_290);
        _290 = _257;
        _287 = (move _288, move _290);
        StorageDead(_290);
        StorageDead(_288);
        _372 = const false;
        _283 = anchor_lang::error::Error::with_pubkeys(move _284, move _287) -> [return: bb119, unwind: bb183];
    }

    bb119: {
        StorageDead(_287);
        _372 = const false;
        StorageDead(_284);
        _0 = std::result::Result::<keeper::ResolveBankruptcy<'_>, anchor_lang::error::Error>::Err(move _283);
        StorageDead(_283);
        StorageDead(_277);
        StorageDead(_276);
        goto -> bb153;
    }

    bb120: {
        StorageDead(_281);
        StorageDead(_279);
        StorageDead(_278);
        _276 = const ();
        StorageDead(_277);
        StorageDead(_276);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        _296 = &_110;
        _295 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _296) -> [return: bb121, unwind: bb169];
    }

    bb121: {
        _294 = &(*_295);
        StorageDead(_296);
        _293 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _294) -> [return: bb122, unwind: bb169];
    }

    bb122: {
        StorageDead(_294);
        _292 = ((*_293).6: bool);
        switchInt(move _292) -> [0: bb123, otherwise: bb126];
    }

    bb123: {
        StorageDead(_295);
        StorageDead(_293);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        _300 = ConstraintMut;
        _299 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _300) -> [return: bb124, unwind: bb169];
    }

    bb124: {
        StorageDead(_300);
        _298 = anchor_lang::error::Error::with_account_name::<&str>(move _299, const "spot_market_vault") -> [return: bb125, unwind: bb169];
    }

    bb125: {
        StorageDead(_299);
        _0 = std::result::Result::<keeper::ResolveBankruptcy<'_>, anchor_lang::error::Error>::Err(move _298);
        StorageDead(_298);
        StorageDead(_292);
        StorageDead(_291);
        goto -> bb153;
    }

    bb126: {
        StorageDead(_295);
        StorageDead(_293);
        _291 = const ();
        StorageDead(_292);
        StorageDead(_291);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        StorageLive(_311);
        _311 = const b"insurance_fund_vault";
        _310 = &(*_311);
        _309 = <[u8; 20] as AsRef<[u8]>>::as_ref(move _310) -> [return: bb127, unwind: bb169];
    }

    bb127: {
        _308 = &(*_309);
        StorageDead(_310);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        _316 = _7;
        _315 = core::num::<impl u16>::to_le_bytes(move _316) -> [return: bb128, unwind: bb169];
    }

    bb128: {
        _314 = &_315;
        StorageDead(_316);
        _313 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _314) -> [return: bb129, unwind: bb169];
    }

    bb129: {
        _312 = &(*_313);
        StorageDead(_314);
        _307 = [move _308, move _312];
        StorageDead(_312);
        StorageDead(_308);
        _306 = &_307;
        _305 = &(*_306);
        _304 = move _305 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_305);
        StorageLive(_317);
        StorageLive(_318);
        _318 = &_1;
        _370 = deref_copy (*_318);
        _317 = &(*_370);
        _303 = anchor_lang::prelude::Pubkey::find_program_address(move _304, move _317) -> [return: bb130, unwind: bb169];
    }

    bb130: {
        StorageDead(_317);
        StorageDead(_304);
        StorageLive(_301);
        _301 = (_303.0: anchor_lang::prelude::Pubkey);
        StorageLive(_302);
        _302 = (_303.1: u8);
        StorageDead(_318);
        StorageDead(_315);
        StorageDead(_313);
        StorageDead(_311);
        StorageDead(_309);
        StorageDead(_307);
        StorageDead(_306);
        StorageDead(_303);
        StorageLive(_319);
        _319 = _302;
        ((*_4).1: u8) = move _319;
        StorageDead(_319);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        _446 = (((_125.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _324 = &(*_446);
        _323 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _324) -> [return: bb131, unwind: bb169];
    }

    bb131: {
        _322 = &_323;
        StorageDead(_324);
        StorageLive(_325);
        _325 = &_301;
        _321 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _322, move _325) -> [return: bb132, unwind: bb169];
    }

    bb132: {
        switchInt(move _321) -> [0: bb138, otherwise: bb133];
    }

    bb133: {
        StorageDead(_325);
        StorageDead(_323);
        StorageDead(_322);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        _330 = ConstraintSeeds;
        _329 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _330) -> [return: bb134, unwind: bb169];
    }

    bb134: {
        StorageDead(_330);
        _328 = anchor_lang::error::Error::with_account_name::<&str>(move _329, const "insurance_fund_vault") -> [return: bb135, unwind: bb169];
    }

    bb135: {
        _371 = const true;
        StorageDead(_329);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        _447 = (((_125.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _333 = &(*_447);
        _332 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _333) -> [return: bb136, unwind: bb181];
    }

    bb136: {
        StorageDead(_333);
        StorageLive(_334);
        _334 = _301;
        _331 = (move _332, move _334);
        StorageDead(_334);
        StorageDead(_332);
        _371 = const false;
        _327 = anchor_lang::error::Error::with_pubkeys(move _328, move _331) -> [return: bb137, unwind: bb181];
    }

    bb137: {
        StorageDead(_331);
        _371 = const false;
        StorageDead(_328);
        _0 = std::result::Result::<keeper::ResolveBankruptcy<'_>, anchor_lang::error::Error>::Err(move _327);
        StorageDead(_327);
        StorageDead(_321);
        StorageDead(_320);
        goto -> bb152;
    }

    bb138: {
        StorageDead(_325);
        StorageDead(_323);
        StorageDead(_322);
        _320 = const ();
        StorageDead(_321);
        StorageDead(_320);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        StorageLive(_338);
        StorageLive(_339);
        StorageLive(_340);
        _340 = &_125;
        _339 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _340) -> [return: bb139, unwind: bb169];
    }

    bb139: {
        _338 = &(*_339);
        StorageDead(_340);
        _337 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _338) -> [return: bb140, unwind: bb169];
    }

    bb140: {
        StorageDead(_338);
        _336 = ((*_337).6: bool);
        switchInt(move _336) -> [0: bb141, otherwise: bb144];
    }

    bb141: {
        StorageDead(_339);
        StorageDead(_337);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        _344 = ConstraintMut;
        _343 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _344) -> [return: bb142, unwind: bb169];
    }

    bb142: {
        StorageDead(_344);
        _342 = anchor_lang::error::Error::with_account_name::<&str>(move _343, const "insurance_fund_vault") -> [return: bb143, unwind: bb169];
    }

    bb143: {
        StorageDead(_343);
        _0 = std::result::Result::<keeper::ResolveBankruptcy<'_>, anchor_lang::error::Error>::Err(move _342);
        StorageDead(_342);
        StorageDead(_336);
        StorageDead(_335);
        goto -> bb152;
    }

    bb144: {
        StorageDead(_339);
        StorageDead(_337);
        _335 = const ();
        StorageDead(_336);
        StorageDead(_335);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        StorageLive(_349);
        _448 = (((_20.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _349 = &(*_448);
        _348 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _349) -> [return: bb145, unwind: bb169];
    }

    bb145: {
        StorageDead(_349);
        _347 = &((*_348).3: anchor_lang::prelude::Pubkey);
        StorageLive(_350);
        StorageLive(_351);
        StorageLive(_352);
        StorageLive(_353);
        _353 = &_140;
        _352 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _353) -> [return: bb146, unwind: bb169];
    }

    bb146: {
        StorageDead(_353);
        _351 = &_352;
        _350 = &(*_351);
        _346 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _347, move _350) -> [return: bb147, unwind: bb169];
    }

    bb147: {
        switchInt(move _346) -> [0: bb149, otherwise: bb148];
    }

    bb148: {
        StorageDead(_350);
        StorageDead(_347);
        StorageDead(_352);
        StorageDead(_351);
        StorageDead(_348);
        _345 = const ();
        StorageDead(_346);
        StorageDead(_345);
        StorageLive(_358);
        StorageLive(_359);
        _359 = move _20;
        StorageLive(_360);
        _360 = move _35;
        StorageLive(_361);
        _361 = move _50;
        StorageLive(_362);
        _362 = move _65;
        StorageLive(_363);
        _363 = move _80;
        StorageLive(_364);
        _364 = move _95;
        StorageLive(_365);
        _365 = move _110;
        StorageLive(_366);
        _366 = move _125;
        StorageLive(_367);
        _367 = move _140;
        StorageLive(_368);
        _368 = move _155;
        _358 = keeper::ResolveBankruptcy::<'_> { state: move _359, authority: move _360, liquidator: move _361, liquidator_stats: move _362, user: move _363, user_stats: move _364, spot_market_vault: move _365, insurance_fund_vault: move _366, drift_signer: move _367, token_program: move _368 };
        StorageDead(_368);
        StorageDead(_367);
        StorageDead(_366);
        StorageDead(_365);
        StorageDead(_364);
        StorageDead(_363);
        StorageDead(_362);
        StorageDead(_361);
        StorageDead(_360);
        StorageDead(_359);
        _0 = std::result::Result::<keeper::ResolveBankruptcy<'_>, anchor_lang::error::Error>::Ok(move _358);
        StorageDead(_358);
        StorageDead(_302);
        StorageDead(_301);
        StorageDead(_258);
        StorageDead(_257);
        StorageDead(_155);
        StorageDead(_140);
        StorageDead(_125);
        StorageDead(_110);
        StorageDead(_95);
        StorageDead(_80);
        StorageDead(_65);
        StorageDead(_50);
        StorageDead(_35);
        StorageDead(_20);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb168;
    }

    bb149: {
        StorageDead(_350);
        StorageDead(_347);
        StorageDead(_352);
        StorageDead(_351);
        StorageDead(_348);
        StorageLive(_355);
        StorageLive(_356);
        StorageLive(_357);
        _357 = ConstraintRaw;
        _356 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _357) -> [return: bb150, unwind: bb169];
    }

    bb150: {
        StorageDead(_357);
        _355 = anchor_lang::error::Error::with_account_name::<&str>(move _356, const "drift_signer") -> [return: bb151, unwind: bb169];
    }

    bb151: {
        StorageDead(_356);
        _0 = std::result::Result::<keeper::ResolveBankruptcy<'_>, anchor_lang::error::Error>::Err(move _355);
        StorageDead(_355);
        StorageDead(_346);
        StorageDead(_345);
        goto -> bb152;
    }

    bb152: {
        StorageDead(_302);
        StorageDead(_301);
        goto -> bb153;
    }

    bb153: {
        StorageDead(_258);
        StorageDead(_257);
        goto -> bb157;
    }

    bb154: {
        StorageDead(_241);
        StorageDead(_240);
        goto -> bb157;
    }

    bb155: {
        StorageDead(_206);
        StorageDead(_205);
        goto -> bb157;
    }

    bb156: {
        StorageDead(_180);
        StorageDead(_179);
        goto -> bb157;
    }

    bb157: {
        StorageDead(_155);
        drop(_140) -> [return: bb158, unwind: bb170];
    }

    bb158: {
        StorageDead(_140);
        drop(_125) -> [return: bb159, unwind: bb171];
    }

    bb159: {
        StorageDead(_125);
        drop(_110) -> [return: bb160, unwind: bb172];
    }

    bb160: {
        StorageDead(_110);
        goto -> bb161;
    }

    bb161: {
        StorageDead(_95);
        goto -> bb162;
    }

    bb162: {
        StorageDead(_80);
        goto -> bb163;
    }

    bb163: {
        StorageDead(_65);
        goto -> bb164;
    }

    bb164: {
        StorageDead(_50);
        goto -> bb165;
    }

    bb165: {
        StorageDead(_35);
        drop(_20) -> [return: bb166, unwind: bb173];
    }

    bb166: {
        StorageDead(_20);
        StorageDead(_7);
        goto -> bb167;
    }

    bb167: {
        StorageDead(_6);
        goto -> bb168;
    }

    bb168: {
        return;
    }

    bb169 (cleanup): {
        drop(_140) -> [return: bb170, unwind terminate(cleanup)];
    }

    bb170 (cleanup): {
        drop(_125) -> [return: bb171, unwind terminate(cleanup)];
    }

    bb171 (cleanup): {
        drop(_110) -> [return: bb172, unwind terminate(cleanup)];
    }

    bb172 (cleanup): {
        drop(_20) -> [return: bb173, unwind terminate(cleanup)];
    }

    bb173 (cleanup): {
        resume;
    }

    bb174: {
        _393 = discriminant(_181);
        StorageDead(_186);
        StorageDead(_184);
        StorageDead(_181);
        _179 = const ();
        StorageDead(_180);
        StorageDead(_179);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        _200 = &_65;
        _199 = &(*_200);
        _198 = <anchor_lang::prelude::AccountLoader<'_, UserStats> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _199) -> [return: bb80, unwind: bb169];
    }

    bb175: {
        _395 = discriminant(_181);
        StorageDead(_186);
        StorageDead(_184);
        StorageDead(_181);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        _195 = ConstraintRaw;
        _194 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _195) -> [return: bb78, unwind: bb169];
    }

    bb176: {
        _397 = discriminant(_207);
        StorageDead(_212);
        StorageDead(_210);
        StorageDead(_207);
        _205 = const ();
        StorageDead(_206);
        StorageDead(_205);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        _226 = &_80;
        _225 = &(*_226);
        _224 = <anchor_lang::prelude::AccountLoader<'_, User> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _225) -> [return: bb92, unwind: bb169];
    }

    bb177: {
        _399 = discriminant(_207);
        StorageDead(_212);
        StorageDead(_210);
        StorageDead(_207);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        _221 = ConstraintRaw;
        _220 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _221) -> [return: bb90, unwind: bb169];
    }

    bb178: {
        _401 = discriminant(_242);
        StorageDead(_247);
        StorageDead(_245);
        StorageDead(_242);
        _240 = const ();
        StorageDead(_241);
        StorageDead(_240);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        _267 = const b"spot_market_vault";
        _266 = &(*_267);
        _265 = <[u8; 17] as AsRef<[u8]>>::as_ref(move _266) -> [return: bb109, unwind: bb169];
    }

    bb179: {
        _403 = discriminant(_242);
        StorageDead(_247);
        StorageDead(_245);
        StorageDead(_242);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        _256 = ConstraintRaw;
        _255 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _256) -> [return: bb107, unwind: bb169];
    }

    bb180 (cleanup): {
        drop(_328) -> [return: bb169, unwind terminate(cleanup)];
    }

    bb181 (cleanup): {
        switchInt(_371) -> [0: bb169, otherwise: bb180];
    }

    bb182 (cleanup): {
        drop(_284) -> [return: bb169, unwind terminate(cleanup)];
    }

    bb183 (cleanup): {
        switchInt(_372) -> [0: bb169, otherwise: bb182];
    }

    bb184 (cleanup): {
        _431 = discriminant(_242);
        goto -> bb169;
    }

    bb185 (cleanup): {
        _432 = discriminant(_207);
        goto -> bb169;
    }

    bb186 (cleanup): {
        _433 = discriminant(_181);
        goto -> bb169;
    }

    bb187 (cleanup): {
        _434 = discriminant(_156);
        goto -> bb169;
    }

    bb188 (cleanup): {
        _435 = discriminant(_141);
        goto -> bb170;
    }

    bb189 (cleanup): {
        _436 = discriminant(_126);
        goto -> bb171;
    }

    bb190 (cleanup): {
        _437 = discriminant(_111);
        goto -> bb172;
    }

    bb191 (cleanup): {
        _438 = discriminant(_96);
        goto -> bb172;
    }

    bb192 (cleanup): {
        _439 = discriminant(_81);
        goto -> bb172;
    }

    bb193 (cleanup): {
        _440 = discriminant(_66);
        goto -> bb172;
    }

    bb194 (cleanup): {
        _441 = discriminant(_51);
        goto -> bb172;
    }

    bb195 (cleanup): {
        _442 = discriminant(_36);
        goto -> bb172;
    }

    bb196 (cleanup): {
        _443 = discriminant(_21);
        goto -> bb173;
    }
}

alloc271 (size: 20, align: 1) {
    0x00 │ 69 6e 73 75 72 61 6e 63 65 5f 66 75 6e 64 5f 76 │ insurance_fund_v
    0x10 │ 61 75 6c 74                                     │ ault
}

alloc270 (size: 17, align: 1) {
    0x00 │ 73 70 6f 74 5f 6d 61 72 6b 65 74 5f 76 61 75 6c │ spot_market_vaul
    0x10 │ 74                                              │ t
}
