digraph Mir_0_1814 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn calculate_amm_available_liquidity(_1: &amp;ReErased state::perp_market::AMM, _2: &amp;ReErased controller::position::PositionDirection) -&gt; std::result::Result&lt;u64, error::ErrorCode&gt;<br align="left"/>let _3: u64;<br align="left"/>let mut _4: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _5: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _6: u128;<br align="left"/>let mut _7: u128;<br align="left"/>let mut _8: u128;<br align="left"/>let mut _9: u128;<br align="left"/>let mut _10: u16;<br align="left"/>let mut _11: bool;<br align="left"/>let mut _12: u128;<br align="left"/>let mut _13: isize;<br align="left"/>let _14: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _15: !;<br align="left"/>let mut _16: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _17: u64;<br align="left"/>let _18: u64;<br align="left"/>let mut _19: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _20: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _21: u128;<br align="left"/>let mut _22: isize;<br align="left"/>let mut _23: u128;<br align="left"/>let mut _24: u128;<br align="left"/>let mut _25: u128;<br align="left"/>let mut _26: bool;<br align="left"/>let mut _27: u128;<br align="left"/>let mut _28: u128;<br align="left"/>let mut _29: u128;<br align="left"/>let mut _30: bool;<br align="left"/>let mut _31: isize;<br align="left"/>let _32: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _33: !;<br align="left"/>let mut _34: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _35: u64;<br align="left"/>let mut _36: u64;<br align="left"/>let mut _37: u64;<br align="left"/>let mut _38: u64;<br align="left"/>let mut _39: u64;<br align="left"/>debug amm =&gt; _1;<br align="left"/>debug order_direction =&gt; _2;<br align="left"/>debug max_fill_size =&gt; _3;<br align="left"/>debug residual =&gt; _14;<br align="left"/>debug val =&gt; _17;<br align="left"/>debug max_base_asset_amount_on_side =&gt; _18;<br align="left"/>debug residual =&gt; _32;<br align="left"/>debug val =&gt; _35;<br align="left"/>>;
    bb0__0_1814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = ((*_1).5: u128)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>_10 = ((*_1).68: u16)<br/>_9 = move _10 as u128 (IntToInt)<br/>StorageDead(_10)<br/>_11 = Eq(_9, const 0_u128)<br/></td></tr><tr><td align="left">assert(!move _11, &quot;attempt to divide `{}` by zero&quot;, _8)</td></tr></table>>];
    bb1__0_1814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_7 = Div(move _8, move _9)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/>StorageLive(_12)<br/>_12 = const _ as u128 (IntToInt)<br/></td></tr><tr><td align="left">_6 = &lt;u128 as Ord&gt;::min(move _7, move _12)</td></tr></table>>];
    bb2__0_1814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">_5 = &lt;u128 as Cast&gt;::cast::&lt;u64&gt;(move _6)</td></tr></table>>];
    bb3__0_1814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/></td></tr><tr><td align="left">_4 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _5)</td></tr></table>>];
    bb4__0_1814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>_13 = discriminant(_4)<br/></td></tr><tr><td align="left">switchInt(move _13)</td></tr></table>>];
    bb5__0_1814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_17)<br/>_17 = ((_4 as Continue).0: u64)<br/>_3 = _17<br/>StorageDead(_17)<br/>StorageDead(_4)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>_22 = discriminant((*_2))<br/></td></tr><tr><td align="left">switchInt(move _22)</td></tr></table>>];
    bb6__0_1814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb7__0_1814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageLive(_14)<br/>_14 = ((_4 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_16)<br/>_16 = _14<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _16)</td></tr></table>>];
    bb8__0_1814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageDead(_14)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_1814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_27)<br/>StorageLive(_28)<br/>_28 = ((*_1).9: u128)<br/>StorageLive(_29)<br/>_29 = ((*_1).5: u128)<br/></td></tr><tr><td align="left">_27 = core::num::&lt;impl u128&gt;::saturating_sub(move _28, move _29)</td></tr></table>>];
    bb10__0_1814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_23)<br/>StorageLive(_24)<br/>_24 = ((*_1).5: u128)<br/>StorageLive(_25)<br/>_25 = ((*_1).8: u128)<br/></td></tr><tr><td align="left">_23 = core::num::&lt;impl u128&gt;::saturating_sub(move _24, move _25)</td></tr></table>>];
    bb11__0_1814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_24)<br/>_26 = Eq(const 2_u128, const 0_u128)<br/></td></tr><tr><td align="left">assert(!move _26, &quot;attempt to divide `{}` by zero&quot;, _23)</td></tr></table>>];
    bb12__0_1814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">_21 = Div(move _23, const 2_u128)<br/>StorageDead(_23)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_1814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>StorageDead(_28)<br/>_30 = Eq(const 2_u128, const 0_u128)<br/></td></tr><tr><td align="left">assert(!move _30, &quot;attempt to divide `{}` by zero&quot;, _27)</td></tr></table>>];
    bb14__0_1814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">_21 = Div(move _27, const 2_u128)<br/>StorageDead(_27)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_1814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left">_20 = &lt;u128 as Cast&gt;::cast::&lt;u64&gt;(move _21)</td></tr></table>>];
    bb16__0_1814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/></td></tr><tr><td align="left">_19 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _20)</td></tr></table>>];
    bb17__0_1814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>_31 = discriminant(_19)<br/></td></tr><tr><td align="left">switchInt(move _31)</td></tr></table>>];
    bb18__0_1814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageLive(_35)<br/>_35 = ((_19 as Continue).0: u64)<br/>_18 = _35<br/>StorageDead(_35)<br/>StorageDead(_19)<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>_37 = _3<br/>StorageLive(_38)<br/>_38 = _18<br/></td></tr><tr><td align="left">_36 = &lt;u64 as Ord&gt;::min(move _37, move _38)</td></tr></table>>];
    bb19__0_1814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageLive(_32)<br/>_32 = ((_19 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_34)<br/>_34 = _32<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _34)</td></tr></table>>];
    bb20__0_1814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>StorageDead(_32)<br/>StorageDead(_19)<br/>StorageDead(_18)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb21__0_1814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_38)<br/>StorageDead(_37)<br/>StorageLive(_39)<br/>_39 = ((*_1).52: u64)<br/></td></tr><tr><td align="left">_0 = math::orders::standardize_base_asset_amount(move _36, move _39)</td></tr></table>>];
    bb22__0_1814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_39)<br/>StorageDead(_36)<br/>StorageDead(_18)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb23__0_1814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb24__0_1814 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_1814 -> bb1__0_1814 [label="success"];
    bb1__0_1814 -> bb2__0_1814 [label="return"];
    bb2__0_1814 -> bb3__0_1814 [label="return"];
    bb3__0_1814 -> bb4__0_1814 [label="return"];
    bb4__0_1814 -> bb5__0_1814 [label="0"];
    bb4__0_1814 -> bb7__0_1814 [label="1"];
    bb4__0_1814 -> bb6__0_1814 [label="otherwise"];
    bb5__0_1814 -> bb10__0_1814 [label="0"];
    bb5__0_1814 -> bb9__0_1814 [label="1"];
    bb5__0_1814 -> bb6__0_1814 [label="otherwise"];
    bb7__0_1814 -> bb8__0_1814 [label="return"];
    bb8__0_1814 -> bb23__0_1814 [label=""];
    bb9__0_1814 -> bb13__0_1814 [label="return"];
    bb10__0_1814 -> bb11__0_1814 [label="return"];
    bb11__0_1814 -> bb12__0_1814 [label="success"];
    bb12__0_1814 -> bb15__0_1814 [label=""];
    bb13__0_1814 -> bb14__0_1814 [label="success"];
    bb14__0_1814 -> bb15__0_1814 [label=""];
    bb15__0_1814 -> bb16__0_1814 [label="return"];
    bb16__0_1814 -> bb17__0_1814 [label="return"];
    bb17__0_1814 -> bb18__0_1814 [label="0"];
    bb17__0_1814 -> bb19__0_1814 [label="1"];
    bb17__0_1814 -> bb6__0_1814 [label="otherwise"];
    bb18__0_1814 -> bb21__0_1814 [label="return"];
    bb19__0_1814 -> bb20__0_1814 [label="return"];
    bb20__0_1814 -> bb23__0_1814 [label=""];
    bb21__0_1814 -> bb22__0_1814 [label="return"];
    bb22__0_1814 -> bb24__0_1814 [label=""];
    bb23__0_1814 -> bb24__0_1814 [label=""];
}
