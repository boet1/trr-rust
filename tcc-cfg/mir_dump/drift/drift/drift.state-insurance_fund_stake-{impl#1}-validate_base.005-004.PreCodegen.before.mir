// MIR for `insurance_fund_stake::<impl at programs/drift/src/state/insurance_fund_stake.rs:36:1: 36:24>::validate_base` before PreCodegen

fn insurance_fund_stake::<impl at programs/drift/src/state/insurance_fund_stake.rs:36:1: 36:24>::validate_base(_1: &InsuranceFundStake, _2: &SpotMarket) -> std::result::Result<(), error::ErrorCode> {
    debug self => _1;
    debug spot_market => _2;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _5: std::result::Result<(), error::ErrorCode>;
    let mut _6: bool;
    let mut _7: u128;
    let mut _8: u128;
    let mut _9: ();
    let _10: error::ErrorCode;
    let _11: ();
    let mut _12: &str;
    let _13: &str;
    let mut _14: &std::string::String;
    let _15: &std::string::String;
    let _16: std::string::String;
    let mut _18: std::fmt::Arguments<'_>;
    let mut _19: &[&str];
    let mut _20: &[&str; 2];
    let _21: &[&str; 2];
    let _22: [&str; 2];
    let mut _23: &[core::fmt::rt::Argument<'_>];
    let mut _24: &[core::fmt::rt::Argument<'_>; 1];
    let _25: &[core::fmt::rt::Argument<'_>; 1];
    let _26: [core::fmt::rt::Argument<'_>; 1];
    let mut _27: core::fmt::rt::Argument<'_>;
    let mut _28: &error::ErrorCode;
    let _29: &error::ErrorCode;
    let _30: ();
    let mut _31: &str;
    let _32: &str;
    let mut _33: &std::string::String;
    let _34: &std::string::String;
    let _35: std::string::String;
    let mut _37: std::fmt::Arguments<'_>;
    let mut _38: &[&str];
    let mut _39: &[&str; 2];
    let _40: &[&str; 2];
    let _41: [&str; 2];
    let mut _42: &[core::fmt::rt::Argument<'_>];
    let mut _43: &[core::fmt::rt::Argument<'_>; 2];
    let _44: &[core::fmt::rt::Argument<'_>; 2];
    let _45: [core::fmt::rt::Argument<'_>; 2];
    let mut _46: core::fmt::rt::Argument<'_>;
    let mut _47: &u128;
    let _48: &u128;
    let mut _49: core::fmt::rt::Argument<'_>;
    let mut _50: &u128;
    let _51: &u128;
    let mut _52: error::ErrorCode;
    let mut _53: isize;
    let _54: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _55: !;
    let mut _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _57: ();
    let mut _58: ();
    scope 1 {
        debug error_code => _10;
        let _17: std::string::String;
        let _36: std::string::String;
        let mut _59: &[&str; 2];
        let mut _60: &[&str; 2];
        scope 2 {
            debug res => _17;
        }
        scope 3 {
            debug res => _36;
        }
    }
    scope 4 {
        debug residual => _54;
        scope 5 {
        }
    }
    scope 6 {
        debug val => _57;
        scope 7 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = ((*_1).3: u128);
        StorageLive(_8);
        _8 = (((*_2).9: state::spot_market::InsuranceFund).3: u128);
        _6 = Eq(move _7, move _8);
        switchInt(move _6) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_9);
        _9 = ();
        _5 = std::result::Result::<(), error::ErrorCode>::Ok(move _9);
        StorageDead(_9);
        goto -> bb16;
    }

    bb2: {
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_10);
        _10 = error::ErrorCode::InvalidIFRebase;
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _60 = const _;
        _21 = &(*_60);
        _20 = &(*_21);
        _19 = move _20 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_20);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = &_10;
        _28 = &(*_29);
        _27 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _28) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_28);
        _26 = [move _27];
        StorageDead(_27);
        _25 = &_26;
        _24 = &(*_25);
        _23 = move _24 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_24);
        _18 = Arguments::<'_>::new_v1(move _19, move _23) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_23);
        StorageDead(_19);
        _17 = format(move _18) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_18);
        StorageDead(_29);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_21);
        _16 = move _17;
        StorageDead(_17);
        _15 = &_16;
        _14 = &(*_15);
        _13 = <String as Deref>::deref(move _14) -> [return: bb6, unwind: bb24];
    }

    bb6: {
        _12 = &(*_13);
        StorageDead(_14);
        _11 = solana_program::log::sol_log(move _12) -> [return: bb7, unwind: bb24];
    }

    bb7: {
        StorageDead(_12);
        drop(_16) -> [return: bb8, unwind: bb25];
    }

    bb8: {
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_11);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _59 = const _;
        _40 = &(*_59);
        _39 = &(*_40);
        _38 = move _39 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_39);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = &((*_1).3: u128);
        _47 = &(*_48);
        _46 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _47) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_47);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = &(((*_2).9: state::spot_market::InsuranceFund).3: u128);
        _50 = &(*_51);
        _49 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _50) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_50);
        _45 = [move _46, move _49];
        StorageDead(_49);
        StorageDead(_46);
        _44 = &_45;
        _43 = &(*_44);
        _42 = move _43 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_43);
        _37 = Arguments::<'_>::new_v1(move _38, move _42) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_42);
        StorageDead(_38);
        _36 = format(move _37) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_37);
        StorageDead(_51);
        StorageDead(_48);
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_40);
        _35 = move _36;
        StorageDead(_36);
        _34 = &_35;
        _33 = &(*_34);
        _32 = <String as Deref>::deref(move _33) -> [return: bb13, unwind: bb23];
    }

    bb13: {
        _31 = &(*_32);
        StorageDead(_33);
        _30 = solana_program::log::sol_log(move _31) -> [return: bb14, unwind: bb23];
    }

    bb14: {
        StorageDead(_31);
        drop(_35) -> [return: bb15, unwind: bb25];
    }

    bb15: {
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_32);
        StorageDead(_30);
        StorageLive(_52);
        _52 = _10;
        _5 = std::result::Result::<(), error::ErrorCode>::Err(move _52);
        StorageDead(_52);
        StorageDead(_10);
        goto -> bb16;
    }

    bb16: {
        StorageDead(_6);
        _4 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _5) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_5);
        _53 = discriminant(_4);
        switchInt(move _53) -> [0: bb18, 1: bb20, otherwise: bb19];
    }

    bb18: {
        StorageLive(_57);
        _57 = ((_4 as Continue).0: ());
        _3 = _57;
        StorageDead(_57);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_58);
        _58 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _58);
        StorageDead(_58);
        goto -> bb22;
    }

    bb19: {
        unreachable;
    }

    bb20: {
        StorageLive(_54);
        _54 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_56);
        _56 = _54;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _56) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_56);
        StorageDead(_54);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb22;
    }

    bb22: {
        return;
    }

    bb23 (cleanup): {
        drop(_35) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_16) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        resume;
    }
}
