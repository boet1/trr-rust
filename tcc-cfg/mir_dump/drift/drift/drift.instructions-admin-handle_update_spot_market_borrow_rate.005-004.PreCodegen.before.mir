// MIR for `admin::handle_update_spot_market_borrow_rate` before PreCodegen

fn admin::handle_update_spot_market_borrow_rate(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::AdminUpdateSpotMarket<'_>>, _2: u32, _3: u32, _4: u32, _5: Option<u8>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug optimal_utilization => _2;
    debug optimal_borrow_rate => _3;
    debug max_borrow_rate => _4;
    debug min_borrow_rate => _5;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _6: ();
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _8: std::result::Result<(), anchor_lang::error::Error>;
    let mut _9: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let _10: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _15: ();
    let _16: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _17: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _19: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _20: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _21: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _22: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _23: isize;
    let _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _25: !;
    let mut _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _27: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _28: ();
    let mut _29: &str;
    let _30: &str;
    let mut _31: &std::string::String;
    let _32: &std::string::String;
    let _33: std::string::String;
    let mut _35: std::fmt::Arguments<'_>;
    let mut _36: &[&str];
    let mut _37: &[&str; 1];
    let _38: &[&str; 1];
    let _39: [&str; 1];
    let mut _40: &[core::fmt::rt::Argument<'_>];
    let mut _41: &[core::fmt::rt::Argument<'_>; 1];
    let _42: &[core::fmt::rt::Argument<'_>; 1];
    let _43: [core::fmt::rt::Argument<'_>; 1];
    let mut _44: core::fmt::rt::Argument<'_>;
    let mut _45: &u16;
    let _46: &u16;
    let _47: &state::spot_market::SpotMarket;
    let mut _48: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _49: ();
    let mut _50: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _51: std::result::Result<(), error::ErrorCode>;
    let mut _52: u32;
    let mut _53: u32;
    let mut _54: u32;
    let mut _55: u32;
    let mut _56: u32;
    let mut _57: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _58: std::result::Result<u32, error::ErrorCode>;
    let mut _59: u8;
    let mut _60: std::option::Option<u8>;
    let mut _61: u8;
    let mut _62: &state::spot_market::SpotMarket;
    let mut _63: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _64: isize;
    let mut _66: !;
    let mut _67: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _69: u32;
    let mut _70: u128;
    let mut _71: bool;
    let mut _72: (u32, bool);
    let mut _73: isize;
    let mut _75: !;
    let mut _76: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _78: ();
    let mut _79: &str;
    let _80: &str;
    let mut _81: &std::string::String;
    let _82: &std::string::String;
    let _83: std::string::String;
    let mut _85: std::fmt::Arguments<'_>;
    let mut _86: &[&str];
    let mut _87: &[&str; 2];
    let _88: &[&str; 2];
    let _89: [&str; 2];
    let mut _90: &[core::fmt::rt::Argument<'_>];
    let mut _91: &[core::fmt::rt::Argument<'_>; 2];
    let _92: &[core::fmt::rt::Argument<'_>; 2];
    let _93: [core::fmt::rt::Argument<'_>; 2];
    let mut _94: core::fmt::rt::Argument<'_>;
    let mut _95: &u32;
    let _96: &u32;
    let _97: &state::spot_market::SpotMarket;
    let mut _98: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _99: core::fmt::rt::Argument<'_>;
    let mut _100: &u32;
    let _101: &u32;
    let _102: ();
    let mut _103: &str;
    let _104: &str;
    let mut _105: &std::string::String;
    let _106: &std::string::String;
    let _107: std::string::String;
    let mut _109: std::fmt::Arguments<'_>;
    let mut _110: &[&str];
    let mut _111: &[&str; 2];
    let _112: &[&str; 2];
    let _113: [&str; 2];
    let mut _114: &[core::fmt::rt::Argument<'_>];
    let mut _115: &[core::fmt::rt::Argument<'_>; 2];
    let _116: &[core::fmt::rt::Argument<'_>; 2];
    let _117: [core::fmt::rt::Argument<'_>; 2];
    let mut _118: core::fmt::rt::Argument<'_>;
    let mut _119: &u32;
    let _120: &u32;
    let _121: &state::spot_market::SpotMarket;
    let mut _122: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _123: core::fmt::rt::Argument<'_>;
    let mut _124: &u32;
    let _125: &u32;
    let _126: ();
    let mut _127: &str;
    let _128: &str;
    let mut _129: &std::string::String;
    let _130: &std::string::String;
    let _131: std::string::String;
    let mut _133: std::fmt::Arguments<'_>;
    let mut _134: &[&str];
    let mut _135: &[&str; 2];
    let _136: &[&str; 2];
    let _137: [&str; 2];
    let mut _138: &[core::fmt::rt::Argument<'_>];
    let mut _139: &[core::fmt::rt::Argument<'_>; 2];
    let _140: &[core::fmt::rt::Argument<'_>; 2];
    let _141: [core::fmt::rt::Argument<'_>; 2];
    let mut _142: core::fmt::rt::Argument<'_>;
    let mut _143: &u32;
    let _144: &u32;
    let _145: &state::spot_market::SpotMarket;
    let mut _146: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _147: core::fmt::rt::Argument<'_>;
    let mut _148: &u32;
    let _149: &u32;
    let mut _150: u32;
    let mut _151: &mut state::spot_market::SpotMarket;
    let mut _152: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _153: u32;
    let mut _154: &mut state::spot_market::SpotMarket;
    let mut _155: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _156: u32;
    let mut _157: &mut state::spot_market::SpotMarket;
    let mut _158: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _159: ();
    let mut _160: isize;
    let _162: ();
    let mut _163: &str;
    let _164: &str;
    let mut _165: &std::string::String;
    let _166: &std::string::String;
    let _167: std::string::String;
    let mut _169: std::fmt::Arguments<'_>;
    let mut _170: &[&str];
    let mut _171: &[&str; 2];
    let _172: &[&str; 2];
    let _173: [&str; 2];
    let mut _174: &[core::fmt::rt::Argument<'_>];
    let mut _175: &[core::fmt::rt::Argument<'_>; 2];
    let _176: &[core::fmt::rt::Argument<'_>; 2];
    let _177: [core::fmt::rt::Argument<'_>; 2];
    let mut _178: core::fmt::rt::Argument<'_>;
    let mut _179: &u8;
    let _180: &u8;
    let _181: &state::spot_market::SpotMarket;
    let mut _182: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _183: core::fmt::rt::Argument<'_>;
    let mut _184: &u8;
    let _185: &u8;
    let mut _186: u8;
    let mut _187: &mut state::spot_market::SpotMarket;
    let mut _188: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _189: ();
    let mut _195: &mut instructions::admin::AdminUpdateSpotMarket<'_>;
    let mut _196: &mut instructions::admin::AdminUpdateSpotMarket<'_>;
    let mut _197: isize;
    let mut _198: isize;
    let mut _199: isize;
    let mut _200: isize;
    let mut _201: isize;
    let mut _202: isize;
    let mut _203: isize;
    let mut _204: isize;
    let mut _205: isize;
    let mut _206: isize;
    scope 1 {
        debug residual => _12;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _15;
        scope 4 {
        }
    }
    scope 5 {
        debug spot_market => _16;
        let _34: std::string::String;
        let _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _68: u32;
        let _74: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _77: ();
        let _84: std::string::String;
        let _108: std::string::String;
        let _132: std::string::String;
        let mut _191: &[&str; 2];
        let mut _192: &[&str; 2];
        let mut _193: &[&str; 2];
        let mut _194: &[&str; 1];
        scope 10 {
            debug res => _34;
        }
        scope 11 {
            debug residual => _65;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _68;
            scope 14 {
            }
        }
        scope 15 {
            debug residual => _74;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _77;
            scope 18 {
            }
        }
        scope 19 {
            debug res => _84;
        }
        scope 20 {
            debug res => _108;
        }
        scope 21 {
            debug res => _132;
        }
        scope 22 {
            debug min_borrow_rate => _161;
            let _161: u8;
            let _168: std::string::String;
            let mut _190: &[&str; 2];
            scope 23 {
                debug res => _168;
            }
        }
    }
    scope 6 {
        debug residual => _24;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _27;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _195 = deref_copy (_1.1: &mut instructions::admin::AdminUpdateSpotMarket<'_>);
        _10 = &((*_195).2: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _9 = &(*_10);
        _8 = constraints::spot_market_valid(move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        _7 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _8) -> [return: bb2, unwind: bb83];
    }

    bb2: {
        StorageDead(_8);
        _11 = discriminant(_7);
        switchInt(move _11) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_15);
        _15 = ((_7 as Continue).0: ());
        _6 = _15;
        StorageDead(_15);
        _197 = discriminant(_7);
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _196 = deref_copy (_1.1: &mut instructions::admin::AdminUpdateSpotMarket<'_>);
        _21 = &((*_196).2: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _20 = anchor_lang::prelude::AccountLoader::<'_, SpotMarket>::load_mut(move _21) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_12);
        _12 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_14);
        _14 = move _12;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _14) -> [return: bb6, unwind: bb85];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_12);
        _203 = discriminant(_7);
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb76;
    }

    bb7: {
        StorageDead(_21);
        StorageLive(_22);
        _22 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _19 = std::result::Result::<RefMut<'_, SpotMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _20, move _22) -> [return: bb8, unwind: bb83];
    }

    bb8: {
        StorageDead(_22);
        StorageDead(_20);
        _18 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _19) -> [return: bb9, unwind: bb83];
    }

    bb9: {
        StorageDead(_19);
        _23 = discriminant(_18);
        switchInt(move _23) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_27);
        _27 = move ((_18 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _17 = move _27;
        StorageDead(_27);
        _16 = &mut _17;
        _201 = discriminant(_18);
        StorageDead(_18);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _194 = const _;
        _38 = &(*_194);
        _37 = &(*_38);
        _36 = move _37 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_37);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = &(*_16);
        _47 = <RefMut<'_, SpotMarket> as Deref>::deref(move _48) -> [return: bb13, unwind: bb82];
    }

    bb11: {
        StorageLive(_24);
        _24 = ((_18 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_26);
        _26 = _24;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _26) -> [return: bb12, unwind: bb84];
    }

    bb12: {
        StorageDead(_26);
        StorageDead(_24);
        _199 = discriminant(_18);
        StorageDead(_18);
        goto -> bb75;
    }

    bb13: {
        StorageDead(_48);
        _46 = &((*_47).42: u16);
        _45 = &(*_46);
        _44 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _45) -> [return: bb14, unwind: bb82];
    }

    bb14: {
        StorageDead(_45);
        _43 = [move _44];
        StorageDead(_44);
        _42 = &_43;
        _41 = &(*_42);
        _40 = move _41 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_41);
        _35 = Arguments::<'_>::new_v1(move _36, move _40) -> [return: bb15, unwind: bb82];
    }

    bb15: {
        StorageDead(_40);
        StorageDead(_36);
        _34 = format(move _35) -> [return: bb16, unwind: bb82];
    }

    bb16: {
        StorageDead(_35);
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_38);
        _33 = move _34;
        StorageDead(_34);
        _32 = &_33;
        _31 = &(*_32);
        _30 = <String as Deref>::deref(move _31) -> [return: bb17, unwind: bb81];
    }

    bb17: {
        _29 = &(*_30);
        StorageDead(_31);
        _28 = solana_program::log::sol_log(move _29) -> [return: bb18, unwind: bb81];
    }

    bb18: {
        StorageDead(_29);
        drop(_33) -> [return: bb19, unwind: bb82];
    }

    bb19: {
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_30);
        StorageDead(_28);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = _2;
        StorageLive(_53);
        _53 = _3;
        StorageLive(_54);
        _54 = _4;
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = _5;
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = &(*_16);
        _62 = <RefMut<'_, SpotMarket> as Deref>::deref(move _63) -> [return: bb20, unwind: bb82];
    }

    bb20: {
        StorageDead(_63);
        _61 = ((*_62).55: u8);
        _59 = Option::<u8>::unwrap_or(move _60, move _61) -> [return: bb21, unwind: bb82];
    }

    bb21: {
        StorageDead(_61);
        StorageDead(_60);
        _58 = <u8 as Cast>::cast::<u32>(move _59) -> [return: bb22, unwind: bb82];
    }

    bb22: {
        StorageDead(_59);
        _57 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _58) -> [return: bb23, unwind: bb82];
    }

    bb23: {
        StorageDead(_58);
        _64 = discriminant(_57);
        switchInt(move _64) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_68);
        _68 = ((_57 as Continue).0: u32);
        _56 = _68;
        StorageDead(_68);
        StorageLive(_69);
        StorageLive(_70);
        _71 = Eq(const 200_u128, const 0_u128);
        assert(!move _71, "attempt to divide `{}` by zero", const _) -> [success: bb27, unwind: bb82];
    }

    bb25: {
        StorageLive(_65);
        _65 = ((_57 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_67);
        _67 = _65;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _67) -> [return: bb26, unwind: bb82];
    }

    bb26: {
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_51);
        goto -> bb74;
    }

    bb27: {
        _70 = Div(const _, const 200_u128);
        _69 = move _70 as u32 (IntToInt);
        StorageDead(_70);
        _72 = CheckedMul(_56, _69);
        assert(!move (_72.1: bool), "attempt to compute `{} * {}`, which would overflow", move _56, move _69) -> [success: bb28, unwind: bb82];
    }

    bb28: {
        _55 = move (_72.0: u32);
        StorageDead(_69);
        StorageDead(_56);
        _51 = validate_borrow_rate(move _52, move _53, move _54, move _55) -> [return: bb29, unwind: bb82];
    }

    bb29: {
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_53);
        StorageDead(_52);
        _50 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _51) -> [return: bb30, unwind: bb82];
    }

    bb30: {
        StorageDead(_51);
        _73 = discriminant(_50);
        switchInt(move _73) -> [0: bb31, 1: bb32, otherwise: bb4];
    }

    bb31: {
        StorageLive(_77);
        _77 = ((_50 as Continue).0: ());
        _49 = _77;
        StorageDead(_77);
        StorageDead(_62);
        StorageDead(_57);
        StorageDead(_50);
        StorageDead(_49);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _193 = const _;
        _88 = &(*_193);
        _87 = &(*_88);
        _86 = move _87 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_87);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        _98 = &(*_16);
        _97 = <RefMut<'_, SpotMarket> as Deref>::deref(move _98) -> [return: bb34, unwind: bb82];
    }

    bb32: {
        StorageLive(_74);
        _74 = ((_50 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_76);
        _76 = _74;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _76) -> [return: bb33, unwind: bb82];
    }

    bb33: {
        StorageDead(_76);
        StorageDead(_74);
        goto -> bb74;
    }

    bb34: {
        StorageDead(_98);
        _96 = &((*_97).38: u32);
        _95 = &(*_96);
        _94 = core::fmt::rt::Argument::<'_>::new_debug::<u32>(move _95) -> [return: bb35, unwind: bb82];
    }

    bb35: {
        StorageDead(_95);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _101 = &_2;
        _100 = &(*_101);
        _99 = core::fmt::rt::Argument::<'_>::new_debug::<u32>(move _100) -> [return: bb36, unwind: bb82];
    }

    bb36: {
        StorageDead(_100);
        _93 = [move _94, move _99];
        StorageDead(_99);
        StorageDead(_94);
        _92 = &_93;
        _91 = &(*_92);
        _90 = move _91 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_91);
        _85 = Arguments::<'_>::new_v1(move _86, move _90) -> [return: bb37, unwind: bb82];
    }

    bb37: {
        StorageDead(_90);
        StorageDead(_86);
        _84 = format(move _85) -> [return: bb38, unwind: bb82];
    }

    bb38: {
        StorageDead(_85);
        StorageDead(_101);
        StorageDead(_97);
        StorageDead(_96);
        StorageDead(_93);
        StorageDead(_92);
        StorageDead(_88);
        _83 = move _84;
        StorageDead(_84);
        _82 = &_83;
        _81 = &(*_82);
        _80 = <String as Deref>::deref(move _81) -> [return: bb39, unwind: bb80];
    }

    bb39: {
        _79 = &(*_80);
        StorageDead(_81);
        _78 = solana_program::log::sol_log(move _79) -> [return: bb40, unwind: bb80];
    }

    bb40: {
        StorageDead(_79);
        drop(_83) -> [return: bb41, unwind: bb82];
    }

    bb41: {
        StorageDead(_83);
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_78);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _192 = const _;
        _112 = &(*_192);
        _111 = &(*_112);
        _110 = move _111 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_111);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        _122 = &(*_16);
        _121 = <RefMut<'_, SpotMarket> as Deref>::deref(move _122) -> [return: bb42, unwind: bb82];
    }

    bb42: {
        StorageDead(_122);
        _120 = &((*_121).39: u32);
        _119 = &(*_120);
        _118 = core::fmt::rt::Argument::<'_>::new_debug::<u32>(move _119) -> [return: bb43, unwind: bb82];
    }

    bb43: {
        StorageDead(_119);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _125 = &_3;
        _124 = &(*_125);
        _123 = core::fmt::rt::Argument::<'_>::new_debug::<u32>(move _124) -> [return: bb44, unwind: bb82];
    }

    bb44: {
        StorageDead(_124);
        _117 = [move _118, move _123];
        StorageDead(_123);
        StorageDead(_118);
        _116 = &_117;
        _115 = &(*_116);
        _114 = move _115 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_115);
        _109 = Arguments::<'_>::new_v1(move _110, move _114) -> [return: bb45, unwind: bb82];
    }

    bb45: {
        StorageDead(_114);
        StorageDead(_110);
        _108 = format(move _109) -> [return: bb46, unwind: bb82];
    }

    bb46: {
        StorageDead(_109);
        StorageDead(_125);
        StorageDead(_121);
        StorageDead(_120);
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_112);
        _107 = move _108;
        StorageDead(_108);
        _106 = &_107;
        _105 = &(*_106);
        _104 = <String as Deref>::deref(move _105) -> [return: bb47, unwind: bb79];
    }

    bb47: {
        _103 = &(*_104);
        StorageDead(_105);
        _102 = solana_program::log::sol_log(move _103) -> [return: bb48, unwind: bb79];
    }

    bb48: {
        StorageDead(_103);
        drop(_107) -> [return: bb49, unwind: bb82];
    }

    bb49: {
        StorageDead(_107);
        StorageDead(_106);
        StorageDead(_104);
        StorageDead(_102);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        _191 = const _;
        _136 = &(*_191);
        _135 = &(*_136);
        _134 = move _135 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_135);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        _146 = &(*_16);
        _145 = <RefMut<'_, SpotMarket> as Deref>::deref(move _146) -> [return: bb50, unwind: bb82];
    }

    bb50: {
        StorageDead(_146);
        _144 = &((*_145).40: u32);
        _143 = &(*_144);
        _142 = core::fmt::rt::Argument::<'_>::new_debug::<u32>(move _143) -> [return: bb51, unwind: bb82];
    }

    bb51: {
        StorageDead(_143);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        _149 = &_4;
        _148 = &(*_149);
        _147 = core::fmt::rt::Argument::<'_>::new_debug::<u32>(move _148) -> [return: bb52, unwind: bb82];
    }

    bb52: {
        StorageDead(_148);
        _141 = [move _142, move _147];
        StorageDead(_147);
        StorageDead(_142);
        _140 = &_141;
        _139 = &(*_140);
        _138 = move _139 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_139);
        _133 = Arguments::<'_>::new_v1(move _134, move _138) -> [return: bb53, unwind: bb82];
    }

    bb53: {
        StorageDead(_138);
        StorageDead(_134);
        _132 = format(move _133) -> [return: bb54, unwind: bb82];
    }

    bb54: {
        StorageDead(_133);
        StorageDead(_149);
        StorageDead(_145);
        StorageDead(_144);
        StorageDead(_141);
        StorageDead(_140);
        StorageDead(_136);
        _131 = move _132;
        StorageDead(_132);
        _130 = &_131;
        _129 = &(*_130);
        _128 = <String as Deref>::deref(move _129) -> [return: bb55, unwind: bb78];
    }

    bb55: {
        _127 = &(*_128);
        StorageDead(_129);
        _126 = solana_program::log::sol_log(move _127) -> [return: bb56, unwind: bb78];
    }

    bb56: {
        StorageDead(_127);
        drop(_131) -> [return: bb57, unwind: bb82];
    }

    bb57: {
        StorageDead(_131);
        StorageDead(_130);
        StorageDead(_128);
        StorageDead(_126);
        StorageLive(_150);
        _150 = _2;
        StorageLive(_151);
        StorageLive(_152);
        _152 = &mut (*_16);
        _151 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _152) -> [return: bb58, unwind: bb82];
    }

    bb58: {
        StorageDead(_152);
        ((*_151).38: u32) = move _150;
        StorageDead(_150);
        StorageDead(_151);
        StorageLive(_153);
        _153 = _3;
        StorageLive(_154);
        StorageLive(_155);
        _155 = &mut (*_16);
        _154 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _155) -> [return: bb59, unwind: bb82];
    }

    bb59: {
        StorageDead(_155);
        ((*_154).39: u32) = move _153;
        StorageDead(_153);
        StorageDead(_154);
        StorageLive(_156);
        _156 = _4;
        StorageLive(_157);
        StorageLive(_158);
        _158 = &mut (*_16);
        _157 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _158) -> [return: bb60, unwind: bb82];
    }

    bb60: {
        StorageDead(_158);
        ((*_157).40: u32) = move _156;
        StorageDead(_156);
        StorageDead(_157);
        StorageLive(_159);
        _160 = discriminant(_5);
        switchInt(move _160) -> [1: bb61, otherwise: bb71];
    }

    bb61: {
        StorageLive(_161);
        _161 = ((_5 as Some).0: u8);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        _190 = const _;
        _172 = &(*_190);
        _171 = &(*_172);
        _170 = move _171 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_171);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        _182 = &(*_16);
        _181 = <RefMut<'_, SpotMarket> as Deref>::deref(move _182) -> [return: bb62, unwind: bb82];
    }

    bb62: {
        StorageDead(_182);
        _180 = &((*_181).55: u8);
        _179 = &(*_180);
        _178 = core::fmt::rt::Argument::<'_>::new_debug::<u8>(move _179) -> [return: bb63, unwind: bb82];
    }

    bb63: {
        StorageDead(_179);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        _185 = &_161;
        _184 = &(*_185);
        _183 = core::fmt::rt::Argument::<'_>::new_debug::<u8>(move _184) -> [return: bb64, unwind: bb82];
    }

    bb64: {
        StorageDead(_184);
        _177 = [move _178, move _183];
        StorageDead(_183);
        StorageDead(_178);
        _176 = &_177;
        _175 = &(*_176);
        _174 = move _175 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_175);
        _169 = Arguments::<'_>::new_v1(move _170, move _174) -> [return: bb65, unwind: bb82];
    }

    bb65: {
        StorageDead(_174);
        StorageDead(_170);
        _168 = format(move _169) -> [return: bb66, unwind: bb82];
    }

    bb66: {
        StorageDead(_169);
        StorageDead(_185);
        StorageDead(_181);
        StorageDead(_180);
        StorageDead(_177);
        StorageDead(_176);
        StorageDead(_172);
        _167 = move _168;
        StorageDead(_168);
        _166 = &_167;
        _165 = &(*_166);
        _164 = <String as Deref>::deref(move _165) -> [return: bb67, unwind: bb77];
    }

    bb67: {
        _163 = &(*_164);
        StorageDead(_165);
        _162 = solana_program::log::sol_log(move _163) -> [return: bb68, unwind: bb77];
    }

    bb68: {
        StorageDead(_163);
        drop(_167) -> [return: bb69, unwind: bb82];
    }

    bb69: {
        StorageDead(_167);
        StorageDead(_166);
        StorageDead(_164);
        StorageDead(_162);
        StorageLive(_186);
        _186 = _161;
        StorageLive(_187);
        StorageLive(_188);
        _188 = &mut (*_16);
        _187 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _188) -> [return: bb70, unwind: bb82];
    }

    bb70: {
        StorageDead(_188);
        ((*_187).55: u8) = move _186;
        _159 = const ();
        StorageDead(_186);
        StorageDead(_187);
        StorageDead(_161);
        goto -> bb72;
    }

    bb71: {
        _159 = const ();
        goto -> bb72;
    }

    bb72: {
        StorageDead(_159);
        StorageLive(_189);
        _189 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _189);
        StorageDead(_189);
        drop(_17) -> [return: bb73, unwind: bb83];
    }

    bb73: {
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb76;
    }

    bb74: {
        StorageDead(_62);
        StorageDead(_57);
        StorageDead(_50);
        StorageDead(_49);
        drop(_17) -> [return: bb75, unwind: bb83];
    }

    bb75: {
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb76;
    }

    bb76: {
        return;
    }

    bb77 (cleanup): {
        drop(_167) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        drop(_131) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        drop(_107) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        drop(_83) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        drop(_33) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        drop(_17) -> [return: bb83, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        resume;
    }

    bb84 (cleanup): {
        _205 = discriminant(_18);
        goto -> bb83;
    }

    bb85 (cleanup): {
        _206 = discriminant(_7);
        goto -> bb83;
    }
}
