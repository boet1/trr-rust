// MIR for `controller::spot_balance::update_spot_market_cumulative_interest` after PreCodegen

fn controller::spot_balance::update_spot_market_cumulative_interest(_1: &mut SpotMarket, _2: Option<&OraclePriceData>, _3: i64) -> std::result::Result<(), error::ErrorCode> {
    debug spot_market => _1;
    debug oracle_price_data => _2;
    debug now => _3;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _4: ();
    let mut _5: bool;
    let mut _6: &state::spot_market::SpotMarket;
    let mut _7: state::paused_operations::SpotOperation;
    let mut _8: !;
    let _9: ();
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _11: std::result::Result<(), error::ErrorCode>;
    let mut _12: &mut state::spot_market::SpotMarket;
    let mut _13: std::option::Option<&state::oracle::OraclePriceData>;
    let mut _14: i64;
    let mut _15: isize;
    let _16: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _19: ();
    let mut _20: ();
    let _21: u128;
    let _22: u128;
    let mut _23: math::spot_balance::InterestAccumulated;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::spot_balance::InterestAccumulated>;
    let mut _25: std::result::Result<math::spot_balance::InterestAccumulated, error::ErrorCode>;
    let mut _26: &state::spot_market::SpotMarket;
    let mut _27: i64;
    let mut _28: isize;
    let _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _30: !;
    let mut _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _32: math::spot_balance::InterestAccumulated;
    let _33: ();
    let mut _34: bool;
    let mut _35: u128;
    let mut _36: bool;
    let mut _37: u128;
    let mut _39: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _40: std::result::Result<u128, error::ErrorCode>;
    let mut _41: u128;
    let mut _42: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _43: std::result::Result<u128, error::ErrorCode>;
    let mut _44: u128;
    let mut _45: u128;
    let mut _46: u32;
    let mut _47: isize;
    let mut _49: !;
    let mut _50: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _52: isize;
    let mut _54: !;
    let mut _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _58: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _59: std::result::Result<u128, error::ErrorCode>;
    let mut _60: u128;
    let mut _61: u128;
    let mut _62: isize;
    let mut _64: !;
    let mut _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _67: bool;
    let mut _68: u128;
    let mut _69: u128;
    let mut _70: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _71: std::result::Result<u128, error::ErrorCode>;
    let mut _72: u128;
    let mut _73: u128;
    let mut _74: isize;
    let mut _76: !;
    let mut _77: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _79: u128;
    let mut _80: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _81: std::result::Result<u128, error::ErrorCode>;
    let mut _82: u128;
    let mut _83: u128;
    let mut _84: isize;
    let mut _86: !;
    let mut _87: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _89: u64;
    let mut _90: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _91: std::result::Result<u64, error::ErrorCode>;
    let mut _92: i64;
    let mut _93: isize;
    let mut _95: !;
    let mut _96: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _99: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _100: std::result::Result<u128, error::ErrorCode>;
    let mut _101: u128;
    let mut _102: &state::spot_market::SpotMarket;
    let mut _103: u128;
    let mut _104: isize;
    let mut _106: !;
    let mut _107: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _109: ();
    let mut _110: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _111: std::result::Result<(), error::ErrorCode>;
    let mut _112: u128;
    let mut _113: &state::spot_market::SpotBalanceType;
    let _114: &state::spot_market::SpotBalanceType;
    let _115: state::spot_market::SpotBalanceType;
    let mut _116: &mut state::spot_market::SpotMarket;
    let mut _117: isize;
    let mut _119: !;
    let mut _120: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _122: ();
    let _123: ();
    let mut _124: &[&[u8]];
    let mut _125: &[&[u8]; 1];
    let _126: &[&[u8]; 1];
    let _127: [&[u8]; 1];
    let mut _128: &[u8];
    let _129: &[u8];
    let mut _130: &std::vec::Vec<u8>;
    let _131: &std::vec::Vec<u8>;
    let _132: std::vec::Vec<u8>;
    let mut _133: &state::events::SpotInterestRecord;
    let _134: &state::events::SpotInterestRecord;
    let _135: state::events::SpotInterestRecord;
    let mut _136: i64;
    let mut _137: u16;
    let mut _138: u128;
    let mut _139: u128;
    let mut _140: u128;
    let mut _141: u128;
    let mut _142: u32;
    let mut _143: u32;
    let mut _144: u32;
    let _145: ();
    let mut _146: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _147: std::result::Result<(), error::ErrorCode>;
    let mut _148: &mut state::spot_market::SpotMarket;
    let mut _149: std::option::Option<&state::oracle::OraclePriceData>;
    let mut _150: i64;
    let mut _151: isize;
    let mut _153: !;
    let mut _154: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _156: ();
    scope 1 {
        debug residual => _16;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _19;
        scope 4 {
        }
    }
    scope 5 {
        debug deposit_interest => _21;
        debug borrow_interest => _22;
        let _38: u128;
        let _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _51: u128;
        let _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _56: u128;
        let _152: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _155: ();
        scope 10 {
            debug deposit_interest_for_stakers => _38;
            let _57: u128;
            let _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _66: u128;
            scope 19 {
                debug deposit_interest_for_lenders => _57;
                let _75: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _78: u128;
                let _85: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _88: u128;
                let _94: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _97: u64;
                let _98: u128;
                let _105: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _108: u128;
                scope 24 {
                    debug residual => _75;
                    scope 25 {
                    }
                }
                scope 26 {
                    debug val => _78;
                    scope 27 {
                    }
                }
                scope 28 {
                    debug residual => _85;
                    scope 29 {
                    }
                }
                scope 30 {
                    debug val => _88;
                    scope 31 {
                    }
                }
                scope 32 {
                    debug residual => _94;
                    scope 33 {
                    }
                }
                scope 34 {
                    debug val => _97;
                    scope 35 {
                    }
                }
                scope 36 {
                    debug token_amount => _98;
                    let _118: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _121: ();
                    let mut _157: &state::spot_market::SpotBalanceType;
                    scope 41 {
                        debug residual => _118;
                        scope 42 {
                        }
                    }
                    scope 43 {
                        debug val => _121;
                        scope 44 {
                        }
                    }
                }
                scope 37 {
                    debug residual => _105;
                    scope 38 {
                    }
                }
                scope 39 {
                    debug val => _108;
                    scope 40 {
                    }
                }
            }
            scope 20 {
                debug residual => _63;
                scope 21 {
                }
            }
            scope 22 {
                debug val => _66;
                scope 23 {
                }
            }
        }
        scope 11 {
            debug residual => _48;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _51;
            scope 14 {
            }
        }
        scope 15 {
            debug residual => _53;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _56;
            scope 18 {
            }
        }
        scope 45 {
            debug residual => _152;
            scope 46 {
            }
        }
        scope 47 {
            debug val => _155;
            scope 48 {
            }
        }
    }
    scope 6 {
        debug residual => _29;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _32;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &(*_1);
        StorageLive(_7);
        _7 = SpotOperation::UpdateCumulativeInterest;
        _5 = SpotMarket::is_operation_paused(move _6, move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _5) -> [0: bb9, otherwise: bb2];
    }

    bb2: {
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &mut (*_1);
        StorageLive(_13);
        _13 = _2;
        StorageLive(_14);
        _14 = _3;
        _11 = update_spot_market_twap_stats(move _12, move _13, move _14) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        _10 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _11) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_11);
        _15 = discriminant(_10);
        switchInt(move _15) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_19);
        _19 = ((_10 as Continue).0: ());
        _9 = _19;
        StorageDead(_19);
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_20);
        _20 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _20);
        StorageDead(_20);
        goto -> bb79;
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_16);
        _16 = ((_10 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_18);
        _18 = _16;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _18) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb79;
    }

    bb9: {
        StorageDead(_7);
        StorageDead(_6);
        _4 = const ();
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = &(*_1);
        StorageLive(_27);
        _27 = _3;
        _25 = calculate_accumulated_interest(move _26, move _27) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_27);
        StorageDead(_26);
        _24 = <std::result::Result<InterestAccumulated, error::ErrorCode> as Try>::branch(move _25) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_25);
        _28 = discriminant(_24);
        switchInt(move _28) -> [0: bb12, 1: bb13, otherwise: bb6];
    }

    bb12: {
        StorageLive(_32);
        _32 = move ((_24 as Continue).0: math::spot_balance::InterestAccumulated);
        _23 = move _32;
        StorageDead(_32);
        StorageLive(_21);
        _21 = (_23.1: u128);
        StorageLive(_22);
        _22 = (_23.0: u128);
        StorageDead(_24);
        StorageDead(_23);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = _21;
        _34 = Gt(move _35, const 0_u128);
        switchInt(move _34) -> [0: bb16, otherwise: bb15];
    }

    bb13: {
        StorageLive(_29);
        _29 = ((_24 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_31);
        _31 = _29;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _31) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb80;
    }

    bb15: {
        StorageDead(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = _22;
        _36 = Gt(move _37, const 1_u128);
        switchInt(move _36) -> [0: bb65, otherwise: bb17];
    }

    bb16: {
        StorageDead(_35);
        goto -> bb66;
    }

    bb17: {
        StorageDead(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = _21;
        StorageLive(_45);
        StorageLive(_46);
        _46 = (((*_1).9: state::spot_market::InsuranceFund).7: u32);
        _45 = move _46 as u128 (IntToInt);
        StorageDead(_46);
        _43 = <u128 as SafeMath>::safe_mul(move _44, move _45) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_45);
        StorageDead(_44);
        _42 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _43) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_43);
        _47 = discriminant(_42);
        switchInt(move _47) -> [0: bb20, 1: bb21, otherwise: bb6];
    }

    bb20: {
        StorageLive(_51);
        _51 = ((_42 as Continue).0: u128);
        _41 = _51;
        StorageDead(_51);
        _40 = <u128 as SafeMath>::safe_div(move _41, const _) -> [return: bb23, unwind continue];
    }

    bb21: {
        StorageLive(_48);
        _48 = ((_42 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_50);
        _50 = _48;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _50) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_50);
        StorageDead(_48);
        StorageDead(_41);
        StorageDead(_40);
        goto -> bb76;
    }

    bb23: {
        StorageDead(_41);
        _39 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _40) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_40);
        _52 = discriminant(_39);
        switchInt(move _52) -> [0: bb25, 1: bb26, otherwise: bb6];
    }

    bb25: {
        StorageLive(_56);
        _56 = ((_39 as Continue).0: u128);
        _38 = _56;
        StorageDead(_56);
        StorageDead(_42);
        StorageDead(_39);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = _21;
        StorageLive(_61);
        _61 = _38;
        _59 = <u128 as SafeMath>::safe_sub(move _60, move _61) -> [return: bb28, unwind continue];
    }

    bb26: {
        StorageLive(_53);
        _53 = ((_39 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_55);
        _55 = _53;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _55) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_55);
        StorageDead(_53);
        goto -> bb76;
    }

    bb28: {
        StorageDead(_61);
        StorageDead(_60);
        _58 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _59) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_59);
        _62 = discriminant(_58);
        switchInt(move _62) -> [0: bb30, 1: bb31, otherwise: bb6];
    }

    bb30: {
        StorageLive(_66);
        _66 = ((_58 as Continue).0: u128);
        _57 = _66;
        StorageDead(_66);
        StorageDead(_58);
        StorageLive(_67);
        StorageLive(_68);
        _68 = _57;
        _67 = Gt(move _68, const 0_u128);
        switchInt(move _67) -> [0: bb34, otherwise: bb33];
    }

    bb31: {
        StorageLive(_63);
        _63 = ((_58 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_65);
        _65 = _63;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _65) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_58);
        goto -> bb75;
    }

    bb33: {
        StorageDead(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        _72 = ((*_1).13: u128);
        StorageLive(_73);
        _73 = _57;
        _71 = <u128 as SafeMath>::safe_add(move _72, move _73) -> [return: bb35, unwind continue];
    }

    bb34: {
        StorageDead(_68);
        _33 = const ();
        goto -> bb64;
    }

    bb35: {
        StorageDead(_73);
        StorageDead(_72);
        _70 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _71) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_71);
        _74 = discriminant(_70);
        switchInt(move _74) -> [0: bb37, 1: bb38, otherwise: bb6];
    }

    bb37: {
        StorageLive(_78);
        _78 = ((_70 as Continue).0: u128);
        _69 = _78;
        StorageDead(_78);
        ((*_1).13: u128) = move _69;
        StorageDead(_69);
        StorageDead(_70);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = ((*_1).14: u128);
        StorageLive(_83);
        _83 = _22;
        _81 = <u128 as SafeMath>::safe_add(move _82, move _83) -> [return: bb40, unwind continue];
    }

    bb38: {
        StorageLive(_75);
        _75 = ((_70 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_77);
        _77 = _75;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _77) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_77);
        StorageDead(_75);
        StorageDead(_69);
        StorageDead(_70);
        goto -> bb74;
    }

    bb40: {
        StorageDead(_83);
        StorageDead(_82);
        _80 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _81) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_81);
        _84 = discriminant(_80);
        switchInt(move _84) -> [0: bb42, 1: bb43, otherwise: bb6];
    }

    bb42: {
        StorageLive(_88);
        _88 = ((_80 as Continue).0: u128);
        _79 = _88;
        StorageDead(_88);
        ((*_1).14: u128) = move _79;
        StorageDead(_79);
        StorageDead(_80);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _92 = _3;
        _91 = <i64 as Cast>::cast::<u64>(move _92) -> [return: bb45, unwind continue];
    }

    bb43: {
        StorageLive(_85);
        _85 = ((_80 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_87);
        _87 = _85;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _87) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_87);
        StorageDead(_85);
        StorageDead(_79);
        StorageDead(_80);
        goto -> bb74;
    }

    bb45: {
        StorageDead(_92);
        _90 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _91) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_91);
        _93 = discriminant(_90);
        switchInt(move _93) -> [0: bb47, 1: bb48, otherwise: bb6];
    }

    bb47: {
        StorageLive(_97);
        _97 = ((_90 as Continue).0: u64);
        _89 = _97;
        StorageDead(_97);
        ((*_1).22: u64) = move _89;
        StorageDead(_89);
        StorageDead(_90);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _101 = ((*_1).11: u128);
        StorageLive(_102);
        _102 = &(*_1);
        StorageLive(_103);
        _103 = _38;
        _100 = get_interest_token_amount(move _101, move _102, move _103) -> [return: bb50, unwind continue];
    }

    bb48: {
        StorageLive(_94);
        _94 = ((_90 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_96);
        _96 = _94;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _96) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_96);
        StorageDead(_94);
        StorageDead(_89);
        StorageDead(_90);
        goto -> bb74;
    }

    bb50: {
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_101);
        _99 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _100) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_100);
        _104 = discriminant(_99);
        switchInt(move _104) -> [0: bb52, 1: bb53, otherwise: bb6];
    }

    bb52: {
        StorageLive(_108);
        _108 = ((_99 as Continue).0: u128);
        _98 = _108;
        StorageDead(_108);
        StorageDead(_99);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _112 = _98;
        StorageLive(_113);
        StorageLive(_114);
        _157 = const _;
        _114 = &(*_157);
        _113 = &(*_114);
        StorageLive(_116);
        _116 = &mut (*_1);
        _111 = update_revenue_pool_balances(move _112, move _113, move _116) -> [return: bb55, unwind continue];
    }

    bb53: {
        StorageLive(_105);
        _105 = ((_99 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_107);
        _107 = _105;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _107) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_107);
        StorageDead(_105);
        StorageDead(_99);
        goto -> bb73;
    }

    bb55: {
        StorageDead(_116);
        StorageDead(_113);
        StorageDead(_112);
        _110 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _111) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_111);
        _117 = discriminant(_110);
        switchInt(move _117) -> [0: bb57, 1: bb58, otherwise: bb6];
    }

    bb57: {
        StorageLive(_121);
        _121 = ((_110 as Continue).0: ());
        _109 = _121;
        StorageDead(_121);
        StorageDead(_114);
        StorageDead(_110);
        StorageDead(_109);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        _136 = _3;
        StorageLive(_137);
        _137 = ((*_1).42: u16);
        StorageLive(_138);
        _138 = ((*_1).11: u128);
        StorageLive(_139);
        _139 = ((*_1).13: u128);
        StorageLive(_140);
        _140 = ((*_1).12: u128);
        StorageLive(_141);
        _141 = ((*_1).14: u128);
        StorageLive(_142);
        _142 = ((*_1).38: u32);
        StorageLive(_143);
        _143 = ((*_1).39: u32);
        StorageLive(_144);
        _144 = ((*_1).40: u32);
        _135 = SpotInterestRecord { ts: move _136, market_index: move _137, deposit_balance: move _138, cumulative_deposit_interest: move _139, borrow_balance: move _140, cumulative_borrow_interest: move _141, optimal_utilization: move _142, optimal_borrow_rate: move _143, max_borrow_rate: move _144 };
        StorageDead(_144);
        StorageDead(_143);
        StorageDead(_142);
        StorageDead(_141);
        StorageDead(_140);
        StorageDead(_139);
        StorageDead(_138);
        StorageDead(_137);
        StorageDead(_136);
        _134 = &_135;
        _133 = &(*_134);
        _132 = <SpotInterestRecord as anchor_lang::Event>::data(move _133) -> [return: bb60, unwind continue];
    }

    bb58: {
        StorageLive(_118);
        _118 = ((_110 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_120);
        _120 = _118;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _120) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_120);
        StorageDead(_118);
        StorageDead(_114);
        StorageDead(_110);
        StorageDead(_109);
        goto -> bb73;
    }

    bb60: {
        StorageDead(_133);
        _131 = &_132;
        _130 = &(*_131);
        _129 = <Vec<u8> as Deref>::deref(move _130) -> [return: bb61, unwind: bb81];
    }

    bb61: {
        _128 = &(*_129);
        StorageDead(_130);
        _127 = [move _128];
        StorageDead(_128);
        _126 = &_127;
        _125 = &(*_126);
        _124 = move _125 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_125);
        _123 = solana_program::log::sol_log_data(move _124) -> [return: bb62, unwind: bb81];
    }

    bb62: {
        StorageDead(_124);
        drop(_132) -> [return: bb63, unwind: bb82];
    }

    bb63: {
        StorageDead(_135);
        StorageDead(_134);
        StorageDead(_132);
        StorageDead(_131);
        StorageDead(_129);
        StorageDead(_127);
        StorageDead(_126);
        StorageDead(_123);
        _122 = const ();
        StorageDead(_122);
        _33 = const ();
        StorageDead(_98);
        goto -> bb64;
    }

    bb64: {
        StorageDead(_67);
        StorageDead(_57);
        StorageDead(_38);
        goto -> bb67;
    }

    bb65: {
        StorageDead(_37);
        goto -> bb66;
    }

    bb66: {
        _33 = const ();
        goto -> bb67;
    }

    bb67: {
        StorageDead(_36);
        StorageDead(_34);
        StorageDead(_33);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        _148 = &mut (*_1);
        StorageLive(_149);
        _149 = _2;
        StorageLive(_150);
        _150 = _3;
        _147 = update_spot_market_twap_stats(move _148, move _149, move _150) -> [return: bb68, unwind continue];
    }

    bb68: {
        StorageDead(_150);
        StorageDead(_149);
        StorageDead(_148);
        _146 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _147) -> [return: bb69, unwind continue];
    }

    bb69: {
        StorageDead(_147);
        _151 = discriminant(_146);
        switchInt(move _151) -> [0: bb70, 1: bb71, otherwise: bb6];
    }

    bb70: {
        StorageLive(_155);
        _155 = ((_146 as Continue).0: ());
        _145 = _155;
        StorageDead(_155);
        StorageDead(_146);
        StorageDead(_145);
        StorageLive(_156);
        _156 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _156);
        StorageDead(_156);
        StorageDead(_22);
        StorageDead(_21);
        goto -> bb80;
    }

    bb71: {
        StorageLive(_152);
        _152 = ((_146 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_154);
        _154 = _152;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _154) -> [return: bb72, unwind continue];
    }

    bb72: {
        StorageDead(_154);
        StorageDead(_152);
        StorageDead(_146);
        StorageDead(_145);
        goto -> bb78;
    }

    bb73: {
        StorageDead(_98);
        goto -> bb74;
    }

    bb74: {
        StorageDead(_67);
        goto -> bb75;
    }

    bb75: {
        StorageDead(_57);
        goto -> bb77;
    }

    bb76: {
        StorageDead(_42);
        StorageDead(_39);
        goto -> bb77;
    }

    bb77: {
        StorageDead(_38);
        StorageDead(_36);
        StorageDead(_34);
        StorageDead(_33);
        goto -> bb78;
    }

    bb78: {
        StorageDead(_22);
        StorageDead(_21);
        goto -> bb80;
    }

    bb79: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb80;
    }

    bb80: {
        return;
    }

    bb81 (cleanup): {
        drop(_132) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        resume;
    }
}
