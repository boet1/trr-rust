// MIR for `update_spot_market_twap_stats` before PreCodegen

fn update_spot_market_twap_stats(_1: &mut SpotMarket, _2: Option<&OraclePriceData>, _3: i64) -> std::result::Result<(), error::ErrorCode> {
    debug spot_market => _1;
    debug oracle_price_data => _2;
    debug now => _3;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _4: i64;
    let mut _5: i64;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _7: std::result::Result<i64, error::ErrorCode>;
    let mut _8: i64;
    let mut _9: i64;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _11: std::result::Result<i64, error::ErrorCode>;
    let mut _12: u64;
    let mut _13: isize;
    let _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _15: !;
    let mut _16: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _17: i64;
    let mut _18: isize;
    let _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _20: !;
    let mut _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _22: i64;
    let mut _24: i64;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _26: std::result::Result<i64, error::ErrorCode>;
    let mut _27: i64;
    let mut _28: isize;
    let mut _30: !;
    let mut _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _35: std::result::Result<u128, error::ErrorCode>;
    let mut _36: u128;
    let mut _37: &state::spot_market::SpotMarket;
    let mut _38: &state::spot_market::SpotBalanceType;
    let _39: &state::spot_market::SpotBalanceType;
    let _40: state::spot_market::SpotBalanceType;
    let mut _41: isize;
    let mut _43: !;
    let mut _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _47: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _48: std::result::Result<u128, error::ErrorCode>;
    let mut _49: u128;
    let mut _50: &state::spot_market::SpotMarket;
    let mut _51: &state::spot_market::SpotBalanceType;
    let _52: &state::spot_market::SpotBalanceType;
    let _53: state::spot_market::SpotBalanceType;
    let mut _54: isize;
    let mut _56: !;
    let mut _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _59: u64;
    let mut _60: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _61: std::result::Result<u64, error::ErrorCode>;
    let mut _62: i64;
    let mut _63: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _64: std::result::Result<i64, error::ErrorCode>;
    let mut _65: i64;
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _67: std::result::Result<i64, error::ErrorCode>;
    let mut _68: u128;
    let mut _69: isize;
    let mut _71: !;
    let mut _72: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _74: i64;
    let mut _75: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _76: std::result::Result<i64, error::ErrorCode>;
    let mut _77: u64;
    let mut _78: isize;
    let mut _80: !;
    let mut _81: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _83: i64;
    let mut _84: i64;
    let mut _85: std::option::Option<i64>;
    let mut _86: isize;
    let mut _88: !;
    let mut _89: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _91: isize;
    let mut _93: !;
    let mut _94: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _96: u64;
    let mut _97: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _98: std::result::Result<u64, error::ErrorCode>;
    let mut _99: i64;
    let mut _100: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _101: std::result::Result<i64, error::ErrorCode>;
    let mut _102: i64;
    let mut _103: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _104: std::result::Result<i64, error::ErrorCode>;
    let mut _105: u128;
    let mut _106: isize;
    let mut _108: !;
    let mut _109: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _111: i64;
    let mut _112: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _113: std::result::Result<i64, error::ErrorCode>;
    let mut _114: u64;
    let mut _115: isize;
    let mut _117: !;
    let mut _118: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _120: i64;
    let mut _121: i64;
    let mut _122: std::option::Option<i64>;
    let mut _123: isize;
    let mut _125: !;
    let mut _126: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _128: isize;
    let mut _130: !;
    let mut _131: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _134: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _135: std::result::Result<u128, error::ErrorCode>;
    let mut _136: u128;
    let mut _137: u128;
    let mut _138: isize;
    let mut _140: !;
    let mut _141: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _143: u64;
    let mut _144: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _145: std::result::Result<u64, error::ErrorCode>;
    let mut _146: i64;
    let mut _147: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _148: std::result::Result<i64, error::ErrorCode>;
    let mut _149: i64;
    let mut _150: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _151: std::result::Result<i64, error::ErrorCode>;
    let mut _152: u128;
    let mut _153: isize;
    let mut _155: !;
    let mut _156: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _158: i64;
    let mut _159: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _160: std::result::Result<i64, error::ErrorCode>;
    let mut _161: u64;
    let mut _162: isize;
    let mut _164: !;
    let mut _165: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _167: i64;
    let mut _168: i64;
    let mut _169: std::option::Option<i64>;
    let mut _170: isize;
    let mut _172: !;
    let mut _173: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _175: isize;
    let mut _177: !;
    let mut _178: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _180: ();
    let mut _181: isize;
    let mut _184: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::option::Option<i64>>;
    let mut _185: std::result::Result<std::option::Option<i64>, error::ErrorCode>;
    let mut _186: &state::spot_market::SpotMarket;
    let mut _187: isize;
    let mut _189: !;
    let mut _190: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _193: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _194: std::result::Result<i64, error::ErrorCode>;
    let mut _195: i64;
    let mut _196: i64;
    let mut _197: std::option::Option<i64>;
    let mut _198: isize;
    let mut _200: !;
    let mut _201: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _204: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _205: std::result::Result<i64, error::ErrorCode>;
    let mut _206: i64;
    let mut _207: i64;
    let mut _208: i64;
    let mut _209: i64;
    let mut _210: isize;
    let mut _212: !;
    let mut _213: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _216: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _217: std::result::Result<i64, error::ErrorCode>;
    let mut _218: i64;
    let mut _219: i64;
    let mut _220: i64;
    let mut _221: i64;
    let mut _222: i64;
    let mut _223: isize;
    let mut _225: !;
    let mut _226: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _228: i64;
    let mut _229: u64;
    let mut _230: i64;
    let mut _231: bool;
    let mut _232: i64;
    let mut _233: i64;
    let mut _234: bool;
    let mut _235: i64;
    let mut _236: i64;
    let mut _237: i64;
    let mut _238: i64;
    let mut _239: i64;
    let mut _240: u64;
    let mut _241: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _242: std::result::Result<u64, error::ErrorCode>;
    let mut _243: i64;
    let mut _244: isize;
    let mut _246: !;
    let mut _247: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _249: ();
    scope 1 {
        debug since_last => _4;
        let _23: i64;
        let _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _32: i64;
        scope 10 {
            debug from_start => _23;
            let _33: u128;
            let _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _45: u128;
            let mut _251: &state::spot_market::SpotBalanceType;
            scope 15 {
                debug deposit_token_amount => _33;
                let _46: u128;
                let _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _58: u128;
                let mut _250: &state::spot_market::SpotBalanceType;
                scope 20 {
                    debug borrow_token_amount => _46;
                    let _70: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _73: i64;
                    let _79: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _82: i64;
                    let _87: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _90: i64;
                    let _92: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _95: u64;
                    let _107: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _110: i64;
                    let _116: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _119: i64;
                    let _124: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _127: i64;
                    let _129: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _132: u64;
                    let _133: u128;
                    let _139: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _142: u128;
                    scope 25 {
                        debug residual => _70;
                        scope 26 {
                        }
                    }
                    scope 27 {
                        debug val => _73;
                        scope 28 {
                        }
                    }
                    scope 29 {
                        debug residual => _79;
                        scope 30 {
                        }
                    }
                    scope 31 {
                        debug val => _82;
                        scope 32 {
                        }
                    }
                    scope 33 {
                        debug residual => _87;
                        scope 34 {
                        }
                    }
                    scope 35 {
                        debug val => _90;
                        scope 36 {
                        }
                    }
                    scope 37 {
                        debug residual => _92;
                        scope 38 {
                        }
                    }
                    scope 39 {
                        debug val => _95;
                        scope 40 {
                        }
                    }
                    scope 41 {
                        debug residual => _107;
                        scope 42 {
                        }
                    }
                    scope 43 {
                        debug val => _110;
                        scope 44 {
                        }
                    }
                    scope 45 {
                        debug residual => _116;
                        scope 46 {
                        }
                    }
                    scope 47 {
                        debug val => _119;
                        scope 48 {
                        }
                    }
                    scope 49 {
                        debug residual => _124;
                        scope 50 {
                        }
                    }
                    scope 51 {
                        debug val => _127;
                        scope 52 {
                        }
                    }
                    scope 53 {
                        debug residual => _129;
                        scope 54 {
                        }
                    }
                    scope 55 {
                        debug val => _132;
                        scope 56 {
                        }
                    }
                    scope 57 {
                        debug utilization => _133;
                        let _154: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _157: i64;
                        let _163: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _166: i64;
                        let _171: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _174: i64;
                        let _176: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _179: u64;
                        let _245: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _248: u64;
                        scope 62 {
                            debug residual => _154;
                            scope 63 {
                            }
                        }
                        scope 64 {
                            debug val => _157;
                            scope 65 {
                            }
                        }
                        scope 66 {
                            debug residual => _163;
                            scope 67 {
                            }
                        }
                        scope 68 {
                            debug val => _166;
                            scope 69 {
                            }
                        }
                        scope 70 {
                            debug residual => _171;
                            scope 71 {
                            }
                        }
                        scope 72 {
                            debug val => _174;
                            scope 73 {
                            }
                        }
                        scope 74 {
                            debug residual => _176;
                            scope 75 {
                            }
                        }
                        scope 76 {
                            debug val => _179;
                            scope 77 {
                            }
                        }
                        scope 78 {
                            debug oracle_price_data => _182;
                            let _182: &state::oracle::OraclePriceData;
                            let _183: std::option::Option<i64>;
                            let _188: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _191: std::option::Option<i64>;
                            scope 79 {
                                debug sanitize_clamp_denominator => _183;
                                let _192: i64;
                                let _199: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _202: i64;
                                scope 84 {
                                    debug capped_oracle_update_price => _192;
                                    let _203: i64;
                                    let _211: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _214: i64;
                                    scope 89 {
                                        debug oracle_price_twap => _203;
                                        let _215: i64;
                                        let _224: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _227: i64;
                                        scope 94 {
                                            debug oracle_price_twap_5min => _215;
                                        }
                                        scope 95 {
                                            debug residual => _224;
                                            scope 96 {
                                            }
                                        }
                                        scope 97 {
                                            debug val => _227;
                                            scope 98 {
                                            }
                                        }
                                    }
                                    scope 90 {
                                        debug residual => _211;
                                        scope 91 {
                                        }
                                    }
                                    scope 92 {
                                        debug val => _214;
                                        scope 93 {
                                        }
                                    }
                                }
                                scope 85 {
                                    debug residual => _199;
                                    scope 86 {
                                    }
                                }
                                scope 87 {
                                    debug val => _202;
                                    scope 88 {
                                    }
                                }
                            }
                            scope 80 {
                                debug residual => _188;
                                scope 81 {
                                }
                            }
                            scope 82 {
                                debug val => _191;
                                scope 83 {
                                }
                            }
                        }
                        scope 99 {
                            debug residual => _245;
                            scope 100 {
                            }
                        }
                        scope 101 {
                            debug val => _248;
                            scope 102 {
                            }
                        }
                    }
                    scope 58 {
                        debug residual => _139;
                        scope 59 {
                        }
                    }
                    scope 60 {
                        debug val => _142;
                        scope 61 {
                        }
                    }
                }
                scope 21 {
                    debug residual => _55;
                    scope 22 {
                    }
                }
                scope 23 {
                    debug val => _58;
                    scope 24 {
                    }
                }
            }
            scope 16 {
                debug residual => _42;
                scope 17 {
                }
            }
            scope 18 {
                debug val => _45;
                scope 19 {
                }
            }
        }
        scope 11 {
            debug residual => _29;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _32;
            scope 14 {
            }
        }
    }
    scope 2 {
        debug residual => _14;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _17;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _19;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _22;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _3;
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = ((*_1).23: u64);
        _11 = <u64 as Cast>::cast::<i64>(move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_12);
        _10 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _11) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_11);
        _13 = discriminant(_10);
        switchInt(move _13) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_17);
        _17 = ((_10 as Continue).0: i64);
        _9 = _17;
        StorageDead(_17);
        _7 = <i64 as SafeMath>::safe_sub(move _8, move _9) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_14);
        _14 = ((_10 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_16);
        _16 = _14;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _16) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb143;
    }

    bb7: {
        StorageDead(_9);
        StorageDead(_8);
        _6 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _7) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_7);
        _18 = discriminant(_6);
        switchInt(move _18) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_22);
        _22 = ((_6 as Continue).0: i64);
        _5 = _22;
        StorageDead(_22);
        _4 = std::cmp::max::<i64>(const 0_i64, move _5) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_19);
        _19 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_21);
        _21 = _19;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _21) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_21);
        StorageDead(_19);
        goto -> bb143;
    }

    bb12: {
        StorageDead(_5);
        StorageDead(_10);
        StorageDead(_6);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = _4;
        _26 = <i64 as SafeMath>::safe_sub(const _, move _27) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_27);
        _25 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _26) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_26);
        _28 = discriminant(_25);
        switchInt(move _28) -> [0: bb15, 1: bb16, otherwise: bb4];
    }

    bb15: {
        StorageLive(_32);
        _32 = ((_25 as Continue).0: i64);
        _24 = _32;
        StorageDead(_32);
        _23 = std::cmp::max::<i64>(const 1_i64, move _24) -> [return: bb18, unwind continue];
    }

    bb16: {
        StorageLive(_29);
        _29 = ((_25 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_31);
        _31 = _29;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _31) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_24);
        StorageDead(_25);
        goto -> bb142;
    }

    bb18: {
        StorageDead(_24);
        StorageDead(_25);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = ((*_1).11: u128);
        StorageLive(_37);
        _37 = &(*_1);
        StorageLive(_38);
        StorageLive(_39);
        _251 = const _;
        _39 = &(*_251);
        _38 = &(*_39);
        _35 = get_token_amount(move _36, move _37, move _38) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_36);
        _34 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _35) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_35);
        _41 = discriminant(_34);
        switchInt(move _41) -> [0: bb21, 1: bb22, otherwise: bb4];
    }

    bb21: {
        StorageLive(_45);
        _45 = ((_34 as Continue).0: u128);
        _33 = _45;
        StorageDead(_45);
        StorageDead(_39);
        StorageDead(_34);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = ((*_1).12: u128);
        StorageLive(_50);
        _50 = &(*_1);
        StorageLive(_51);
        StorageLive(_52);
        _250 = const _;
        _52 = &(*_250);
        _51 = &(*_52);
        _48 = get_token_amount(move _49, move _50, move _51) -> [return: bb24, unwind continue];
    }

    bb22: {
        StorageLive(_42);
        _42 = ((_34 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_44);
        _44 = _42;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _44) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_44);
        StorageDead(_42);
        StorageDead(_39);
        StorageDead(_34);
        goto -> bb141;
    }

    bb24: {
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_49);
        _47 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _48) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_48);
        _54 = discriminant(_47);
        switchInt(move _54) -> [0: bb26, 1: bb27, otherwise: bb4];
    }

    bb26: {
        StorageLive(_58);
        _58 = ((_47 as Continue).0: u128);
        _46 = _58;
        StorageDead(_58);
        StorageDead(_52);
        StorageDead(_47);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = _33;
        _67 = <u128 as Cast>::cast::<i64>(move _68) -> [return: bb29, unwind continue];
    }

    bb27: {
        StorageLive(_55);
        _55 = ((_47 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_57);
        _57 = _55;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _57) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_52);
        StorageDead(_47);
        goto -> bb140;
    }

    bb29: {
        StorageDead(_68);
        _66 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _67) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_67);
        _69 = discriminant(_66);
        switchInt(move _69) -> [0: bb31, 1: bb32, otherwise: bb4];
    }

    bb31: {
        StorageLive(_73);
        _73 = ((_66 as Continue).0: i64);
        _65 = _73;
        StorageDead(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _77 = ((*_1).19: u64);
        _76 = <u64 as Cast>::cast::<i64>(move _77) -> [return: bb34, unwind continue];
    }

    bb32: {
        StorageLive(_70);
        _70 = ((_66 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_72);
        _72 = _70;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _72) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_72);
        StorageDead(_70);
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_59);
        goto -> bb139;
    }

    bb34: {
        StorageDead(_77);
        _75 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _76) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_76);
        _78 = discriminant(_75);
        switchInt(move _78) -> [0: bb36, 1: bb37, otherwise: bb4];
    }

    bb36: {
        StorageLive(_82);
        _82 = ((_75 as Continue).0: i64);
        _74 = _82;
        StorageDead(_82);
        StorageLive(_83);
        _83 = _4;
        StorageLive(_84);
        _84 = _23;
        StorageLive(_85);
        _85 = Option::<i64>::None;
        _64 = calculate_weighted_average(move _65, move _74, move _83, move _84, move _85) -> [return: bb39, unwind continue];
    }

    bb37: {
        StorageLive(_79);
        _79 = ((_75 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_81);
        _81 = _79;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _81) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_81);
        StorageDead(_79);
        StorageDead(_74);
        StorageDead(_65);
        StorageDead(_64);
        goto -> bb137;
    }

    bb39: {
        StorageDead(_85);
        StorageDead(_84);
        StorageDead(_83);
        StorageDead(_74);
        StorageDead(_65);
        _63 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _64) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_64);
        _86 = discriminant(_63);
        switchInt(move _86) -> [0: bb41, 1: bb42, otherwise: bb4];
    }

    bb41: {
        StorageLive(_90);
        _90 = ((_63 as Continue).0: i64);
        _62 = _90;
        StorageDead(_90);
        _61 = <i64 as Cast>::cast::<u64>(move _62) -> [return: bb44, unwind continue];
    }

    bb42: {
        StorageLive(_87);
        _87 = ((_63 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_89);
        _89 = _87;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _89) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_89);
        StorageDead(_87);
        goto -> bb137;
    }

    bb44: {
        StorageDead(_62);
        _60 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _61) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_61);
        _91 = discriminant(_60);
        switchInt(move _91) -> [0: bb46, 1: bb47, otherwise: bb4];
    }

    bb46: {
        StorageLive(_95);
        _95 = ((_60 as Continue).0: u64);
        _59 = _95;
        StorageDead(_95);
        ((*_1).19: u64) = move _59;
        StorageDead(_59);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_63);
        StorageDead(_60);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _105 = _46;
        _104 = <u128 as Cast>::cast::<i64>(move _105) -> [return: bb49, unwind continue];
    }

    bb47: {
        StorageLive(_92);
        _92 = ((_60 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_94);
        _94 = _92;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _94) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_94);
        StorageDead(_92);
        goto -> bb138;
    }

    bb49: {
        StorageDead(_105);
        _103 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _104) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_104);
        _106 = discriminant(_103);
        switchInt(move _106) -> [0: bb51, 1: bb52, otherwise: bb4];
    }

    bb51: {
        StorageLive(_110);
        _110 = ((_103 as Continue).0: i64);
        _102 = _110;
        StorageDead(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        _114 = ((*_1).20: u64);
        _113 = <u64 as Cast>::cast::<i64>(move _114) -> [return: bb54, unwind continue];
    }

    bb52: {
        StorageLive(_107);
        _107 = ((_103 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_109);
        _109 = _107;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _109) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_109);
        StorageDead(_107);
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_99);
        StorageDead(_98);
        StorageDead(_96);
        goto -> bb136;
    }

    bb54: {
        StorageDead(_114);
        _112 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _113) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_113);
        _115 = discriminant(_112);
        switchInt(move _115) -> [0: bb56, 1: bb57, otherwise: bb4];
    }

    bb56: {
        StorageLive(_119);
        _119 = ((_112 as Continue).0: i64);
        _111 = _119;
        StorageDead(_119);
        StorageLive(_120);
        _120 = _4;
        StorageLive(_121);
        _121 = _23;
        StorageLive(_122);
        _122 = Option::<i64>::None;
        _101 = calculate_weighted_average(move _102, move _111, move _120, move _121, move _122) -> [return: bb59, unwind continue];
    }

    bb57: {
        StorageLive(_116);
        _116 = ((_112 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_118);
        _118 = _116;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _118) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_118);
        StorageDead(_116);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_101);
        goto -> bb134;
    }

    bb59: {
        StorageDead(_122);
        StorageDead(_121);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        _100 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _101) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_101);
        _123 = discriminant(_100);
        switchInt(move _123) -> [0: bb61, 1: bb62, otherwise: bb4];
    }

    bb61: {
        StorageLive(_127);
        _127 = ((_100 as Continue).0: i64);
        _99 = _127;
        StorageDead(_127);
        _98 = <i64 as Cast>::cast::<u64>(move _99) -> [return: bb64, unwind continue];
    }

    bb62: {
        StorageLive(_124);
        _124 = ((_100 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_126);
        _126 = _124;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _126) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_126);
        StorageDead(_124);
        goto -> bb134;
    }

    bb64: {
        StorageDead(_99);
        _97 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _98) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_98);
        _128 = discriminant(_97);
        switchInt(move _128) -> [0: bb66, 1: bb67, otherwise: bb4];
    }

    bb66: {
        StorageLive(_132);
        _132 = ((_97 as Continue).0: u64);
        _96 = _132;
        StorageDead(_132);
        ((*_1).20: u64) = move _96;
        StorageDead(_96);
        StorageDead(_112);
        StorageDead(_103);
        StorageDead(_100);
        StorageDead(_97);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        _136 = _33;
        StorageLive(_137);
        _137 = _46;
        _135 = calculate_utilization(move _136, move _137) -> [return: bb69, unwind continue];
    }

    bb67: {
        StorageLive(_129);
        _129 = ((_97 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_131);
        _131 = _129;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _131) -> [return: bb68, unwind continue];
    }

    bb68: {
        StorageDead(_131);
        StorageDead(_129);
        goto -> bb135;
    }

    bb69: {
        StorageDead(_137);
        StorageDead(_136);
        _134 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _135) -> [return: bb70, unwind continue];
    }

    bb70: {
        StorageDead(_135);
        _138 = discriminant(_134);
        switchInt(move _138) -> [0: bb71, 1: bb72, otherwise: bb4];
    }

    bb71: {
        StorageLive(_142);
        _142 = ((_134 as Continue).0: u128);
        _133 = _142;
        StorageDead(_142);
        StorageDead(_134);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        _152 = _133;
        _151 = <u128 as Cast>::cast::<i64>(move _152) -> [return: bb74, unwind continue];
    }

    bb72: {
        StorageLive(_139);
        _139 = ((_134 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_141);
        _141 = _139;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _141) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_141);
        StorageDead(_139);
        StorageDead(_134);
        goto -> bb133;
    }

    bb74: {
        StorageDead(_152);
        _150 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _151) -> [return: bb75, unwind continue];
    }

    bb75: {
        StorageDead(_151);
        _153 = discriminant(_150);
        switchInt(move _153) -> [0: bb76, 1: bb77, otherwise: bb4];
    }

    bb76: {
        StorageLive(_157);
        _157 = ((_150 as Continue).0: i64);
        _149 = _157;
        StorageDead(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        _161 = ((*_1).21: u64);
        _160 = <u64 as Cast>::cast::<i64>(move _161) -> [return: bb79, unwind continue];
    }

    bb77: {
        StorageLive(_154);
        _154 = ((_150 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_156);
        _156 = _154;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _156) -> [return: bb78, unwind continue];
    }

    bb78: {
        StorageDead(_156);
        StorageDead(_154);
        StorageDead(_149);
        StorageDead(_148);
        StorageDead(_146);
        StorageDead(_145);
        StorageDead(_143);
        goto -> bb132;
    }

    bb79: {
        StorageDead(_161);
        _159 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _160) -> [return: bb80, unwind continue];
    }

    bb80: {
        StorageDead(_160);
        _162 = discriminant(_159);
        switchInt(move _162) -> [0: bb81, 1: bb82, otherwise: bb4];
    }

    bb81: {
        StorageLive(_166);
        _166 = ((_159 as Continue).0: i64);
        _158 = _166;
        StorageDead(_166);
        StorageLive(_167);
        _167 = _4;
        StorageLive(_168);
        _168 = _23;
        StorageLive(_169);
        _169 = Option::<i64>::None;
        _148 = calculate_weighted_average(move _149, move _158, move _167, move _168, move _169) -> [return: bb84, unwind continue];
    }

    bb82: {
        StorageLive(_163);
        _163 = ((_159 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_165);
        _165 = _163;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _165) -> [return: bb83, unwind continue];
    }

    bb83: {
        StorageDead(_165);
        StorageDead(_163);
        StorageDead(_158);
        StorageDead(_149);
        StorageDead(_148);
        goto -> bb130;
    }

    bb84: {
        StorageDead(_169);
        StorageDead(_168);
        StorageDead(_167);
        StorageDead(_158);
        StorageDead(_149);
        _147 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _148) -> [return: bb85, unwind continue];
    }

    bb85: {
        StorageDead(_148);
        _170 = discriminant(_147);
        switchInt(move _170) -> [0: bb86, 1: bb87, otherwise: bb4];
    }

    bb86: {
        StorageLive(_174);
        _174 = ((_147 as Continue).0: i64);
        _146 = _174;
        StorageDead(_174);
        _145 = <i64 as Cast>::cast::<u64>(move _146) -> [return: bb89, unwind continue];
    }

    bb87: {
        StorageLive(_171);
        _171 = ((_147 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_173);
        _173 = _171;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _173) -> [return: bb88, unwind continue];
    }

    bb88: {
        StorageDead(_173);
        StorageDead(_171);
        goto -> bb130;
    }

    bb89: {
        StorageDead(_146);
        _144 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _145) -> [return: bb90, unwind continue];
    }

    bb90: {
        StorageDead(_145);
        _175 = discriminant(_144);
        switchInt(move _175) -> [0: bb91, 1: bb92, otherwise: bb4];
    }

    bb91: {
        StorageLive(_179);
        _179 = ((_144 as Continue).0: u64);
        _143 = _179;
        StorageDead(_179);
        ((*_1).21: u64) = move _143;
        StorageDead(_143);
        StorageDead(_159);
        StorageDead(_150);
        StorageDead(_147);
        StorageDead(_144);
        StorageLive(_180);
        _181 = discriminant(_2);
        switchInt(move _181) -> [1: bb95, otherwise: bb94];
    }

    bb92: {
        StorageLive(_176);
        _176 = ((_144 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_178);
        _178 = _176;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _178) -> [return: bb93, unwind continue];
    }

    bb93: {
        StorageDead(_178);
        StorageDead(_176);
        goto -> bb131;
    }

    bb94: {
        _180 = const ();
        goto -> bb121;
    }

    bb95: {
        StorageLive(_182);
        _182 = ((_2 as Some).0: &state::oracle::OraclePriceData);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        _186 = &(*_1);
        _185 = SpotMarket::get_sanitize_clamp_denominator(move _186) -> [return: bb96, unwind continue];
    }

    bb96: {
        StorageDead(_186);
        _184 = <std::result::Result<Option<i64>, error::ErrorCode> as Try>::branch(move _185) -> [return: bb97, unwind continue];
    }

    bb97: {
        StorageDead(_185);
        _187 = discriminant(_184);
        switchInt(move _187) -> [0: bb98, 1: bb99, otherwise: bb4];
    }

    bb98: {
        StorageLive(_191);
        _191 = ((_184 as Continue).0: std::option::Option<i64>);
        _183 = _191;
        StorageDead(_191);
        StorageDead(_184);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        _195 = ((*_182).0: i64);
        StorageLive(_196);
        _196 = (((*_1).5: state::oracle::HistoricalOracleData).3: i64);
        StorageLive(_197);
        _197 = _183;
        _194 = sanitize_new_price(move _195, move _196, move _197) -> [return: bb101, unwind continue];
    }

    bb99: {
        StorageLive(_188);
        _188 = ((_184 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_190);
        _190 = _188;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _190) -> [return: bb100, unwind continue];
    }

    bb100: {
        StorageDead(_190);
        StorageDead(_188);
        StorageDead(_184);
        goto -> bb129;
    }

    bb101: {
        StorageDead(_197);
        StorageDead(_196);
        StorageDead(_195);
        _193 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _194) -> [return: bb102, unwind continue];
    }

    bb102: {
        StorageDead(_194);
        _198 = discriminant(_193);
        switchInt(move _198) -> [0: bb103, 1: bb104, otherwise: bb4];
    }

    bb103: {
        StorageLive(_202);
        _202 = ((_193 as Continue).0: i64);
        _192 = _202;
        StorageDead(_202);
        StorageDead(_193);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        _206 = _192;
        StorageLive(_207);
        _207 = _3;
        StorageLive(_208);
        _208 = (((*_1).5: state::oracle::HistoricalOracleData).3: i64);
        StorageLive(_209);
        _209 = (((*_1).5: state::oracle::HistoricalOracleData).5: i64);
        _205 = calculate_new_twap(move _206, move _207, move _208, move _209, const _) -> [return: bb106, unwind continue];
    }

    bb104: {
        StorageLive(_199);
        _199 = ((_193 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_201);
        _201 = _199;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _201) -> [return: bb105, unwind continue];
    }

    bb105: {
        StorageDead(_201);
        StorageDead(_199);
        StorageDead(_193);
        goto -> bb128;
    }

    bb106: {
        StorageDead(_209);
        StorageDead(_208);
        StorageDead(_207);
        StorageDead(_206);
        _204 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _205) -> [return: bb107, unwind continue];
    }

    bb107: {
        StorageDead(_205);
        _210 = discriminant(_204);
        switchInt(move _210) -> [0: bb108, 1: bb109, otherwise: bb4];
    }

    bb108: {
        StorageLive(_214);
        _214 = ((_204 as Continue).0: i64);
        _203 = _214;
        StorageDead(_214);
        StorageDead(_204);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        _218 = _192;
        StorageLive(_219);
        _219 = _3;
        StorageLive(_220);
        _220 = (((*_1).5: state::oracle::HistoricalOracleData).4: i64);
        StorageLive(_221);
        _221 = (((*_1).5: state::oracle::HistoricalOracleData).5: i64);
        StorageLive(_222);
        _222 = const _ as i64 (IntToInt);
        _217 = calculate_new_twap(move _218, move _219, move _220, move _221, move _222) -> [return: bb111, unwind continue];
    }

    bb109: {
        StorageLive(_211);
        _211 = ((_204 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_213);
        _213 = _211;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _213) -> [return: bb110, unwind continue];
    }

    bb110: {
        StorageDead(_213);
        StorageDead(_211);
        StorageDead(_204);
        goto -> bb127;
    }

    bb111: {
        StorageDead(_222);
        StorageDead(_221);
        StorageDead(_220);
        StorageDead(_219);
        StorageDead(_218);
        _216 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _217) -> [return: bb112, unwind continue];
    }

    bb112: {
        StorageDead(_217);
        _223 = discriminant(_216);
        switchInt(move _223) -> [0: bb113, 1: bb114, otherwise: bb4];
    }

    bb113: {
        StorageLive(_227);
        _227 = ((_216 as Continue).0: i64);
        _215 = _227;
        StorageDead(_227);
        StorageDead(_216);
        StorageLive(_228);
        _228 = ((*_182).0: i64);
        (((*_1).5: state::oracle::HistoricalOracleData).0: i64) = move _228;
        StorageDead(_228);
        StorageLive(_229);
        _229 = ((*_182).1: u64);
        (((*_1).5: state::oracle::HistoricalOracleData).1: u64) = move _229;
        StorageDead(_229);
        StorageLive(_230);
        _230 = ((*_182).2: i64);
        (((*_1).5: state::oracle::HistoricalOracleData).2: i64) = move _230;
        StorageDead(_230);
        StorageLive(_231);
        StorageLive(_232);
        _232 = _203;
        StorageLive(_233);
        _233 = (((*_1).5: state::oracle::HistoricalOracleData).3: i64);
        _231 = Ne(move _232, move _233);
        switchInt(move _231) -> [0: bb117, otherwise: bb116];
    }

    bb114: {
        StorageLive(_224);
        _224 = ((_216 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_226);
        _226 = _224;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _226) -> [return: bb115, unwind continue];
    }

    bb115: {
        StorageDead(_226);
        StorageDead(_224);
        StorageDead(_216);
        StorageDead(_215);
        goto -> bb127;
    }

    bb116: {
        StorageDead(_233);
        StorageDead(_232);
        goto -> bb118;
    }

    bb117: {
        StorageDead(_233);
        StorageDead(_232);
        StorageLive(_234);
        StorageLive(_235);
        _235 = _4;
        StorageLive(_236);
        _236 = const _ as i64 (IntToInt);
        _234 = Ge(move _235, move _236);
        switchInt(move _234) -> [0: bb119, otherwise: bb118];
    }

    bb118: {
        StorageDead(_236);
        StorageDead(_235);
        StorageLive(_237);
        _237 = _203;
        (((*_1).5: state::oracle::HistoricalOracleData).3: i64) = move _237;
        StorageDead(_237);
        StorageLive(_238);
        _238 = _215;
        (((*_1).5: state::oracle::HistoricalOracleData).4: i64) = move _238;
        StorageDead(_238);
        StorageLive(_239);
        _239 = _3;
        (((*_1).5: state::oracle::HistoricalOracleData).5: i64) = move _239;
        StorageDead(_239);
        _180 = const ();
        goto -> bb120;
    }

    bb119: {
        StorageDead(_236);
        StorageDead(_235);
        _180 = const ();
        goto -> bb120;
    }

    bb120: {
        StorageDead(_234);
        StorageDead(_231);
        StorageDead(_215);
        StorageDead(_203);
        StorageDead(_192);
        StorageDead(_183);
        StorageDead(_182);
        goto -> bb121;
    }

    bb121: {
        StorageDead(_180);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        _243 = _3;
        _242 = <i64 as Cast>::cast::<u64>(move _243) -> [return: bb122, unwind continue];
    }

    bb122: {
        StorageDead(_243);
        _241 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _242) -> [return: bb123, unwind continue];
    }

    bb123: {
        StorageDead(_242);
        _244 = discriminant(_241);
        switchInt(move _244) -> [0: bb124, 1: bb125, otherwise: bb4];
    }

    bb124: {
        StorageLive(_248);
        _248 = ((_241 as Continue).0: u64);
        _240 = _248;
        StorageDead(_248);
        ((*_1).23: u64) = move _240;
        StorageDead(_240);
        StorageDead(_241);
        StorageLive(_249);
        _249 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _249);
        StorageDead(_249);
        StorageDead(_133);
        StorageDead(_46);
        StorageDead(_33);
        StorageDead(_23);
        StorageDead(_4);
        goto -> bb145;
    }

    bb125: {
        StorageLive(_245);
        _245 = ((_241 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_247);
        _247 = _245;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _247) -> [return: bb126, unwind continue];
    }

    bb126: {
        StorageDead(_247);
        StorageDead(_245);
        StorageDead(_240);
        StorageDead(_241);
        goto -> bb133;
    }

    bb127: {
        StorageDead(_203);
        goto -> bb128;
    }

    bb128: {
        StorageDead(_192);
        goto -> bb129;
    }

    bb129: {
        StorageDead(_183);
        StorageDead(_182);
        StorageDead(_180);
        goto -> bb133;
    }

    bb130: {
        StorageDead(_146);
        StorageDead(_145);
        goto -> bb131;
    }

    bb131: {
        StorageDead(_143);
        StorageDead(_159);
        goto -> bb132;
    }

    bb132: {
        StorageDead(_150);
        StorageDead(_147);
        StorageDead(_144);
        goto -> bb133;
    }

    bb133: {
        StorageDead(_133);
        goto -> bb140;
    }

    bb134: {
        StorageDead(_99);
        StorageDead(_98);
        goto -> bb135;
    }

    bb135: {
        StorageDead(_96);
        StorageDead(_112);
        goto -> bb136;
    }

    bb136: {
        StorageDead(_103);
        StorageDead(_100);
        StorageDead(_97);
        goto -> bb140;
    }

    bb137: {
        StorageDead(_62);
        StorageDead(_61);
        goto -> bb138;
    }

    bb138: {
        StorageDead(_59);
        StorageDead(_75);
        goto -> bb139;
    }

    bb139: {
        StorageDead(_66);
        StorageDead(_63);
        StorageDead(_60);
        goto -> bb140;
    }

    bb140: {
        StorageDead(_46);
        goto -> bb141;
    }

    bb141: {
        StorageDead(_33);
        goto -> bb142;
    }

    bb142: {
        StorageDead(_23);
        goto -> bb144;
    }

    bb143: {
        StorageDead(_5);
        StorageDead(_10);
        StorageDead(_6);
        goto -> bb144;
    }

    bb144: {
        StorageDead(_4);
        goto -> bb145;
    }

    bb145: {
        return;
    }
}
