// MIR for `calculate_inventory_liquidity_ratio` before PreCodegen

fn calculate_inventory_liquidity_ratio(_1: i128, _2: u128, _3: u128, _4: u128) -> std::result::Result<i128, error::ErrorCode> {
    debug base_asset_amount_with_amm => _1;
    debug base_asset_reserve => _2;
    debug min_base_asset_reserve => _3;
    debug max_base_asset_reserve => _4;
    let mut _0: std::result::Result<i128, error::ErrorCode>;
    let _5: i128;
    let _6: i128;
    let mut _7: (i128, i128);
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (i128, i128)>;
    let mut _9: std::result::Result<(i128, i128), error::ErrorCode>;
    let mut _10: u128;
    let mut _11: u128;
    let mut _12: u128;
    let mut _13: isize;
    let _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _15: !;
    let mut _16: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _17: (i128, i128);
    let mut _19: i128;
    let mut _20: i128;
    let mut _21: i128;
    let mut _23: bool;
    let mut _24: i128;
    let mut _25: i128;
    let mut _26: i128;
    let mut _27: i128;
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _29: std::result::Result<i128, error::ErrorCode>;
    let mut _30: i128;
    let mut _31: std::result::Result<i128, error::ErrorCode>;
    let mut _32: i128;
    let mut _33: i128;
    let mut _34: i128;
    let mut _35: i128;
    let mut _36: isize;
    let mut _38: !;
    let mut _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _41: i128;
    scope 1 {
        debug max_bids => _5;
        debug max_asks => _6;
        let _18: i128;
        scope 6 {
            debug min_side_liquidity => _18;
            let _22: i128;
            let _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _40: i128;
            scope 7 {
                debug amm_inventory_pct => _22;
            }
            scope 8 {
                debug residual => _37;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _40;
                scope 11 {
                }
            }
        }
    }
    scope 2 {
        debug residual => _14;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _17;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = _2;
        StorageLive(_11);
        _11 = _3;
        StorageLive(_12);
        _12 = _4;
        _9 = _calculate_market_open_bids_asks(move _10, move _11, move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        _8 = <std::result::Result<(i128, i128), error::ErrorCode> as Try>::branch(move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_9);
        _13 = discriminant(_8);
        switchInt(move _13) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_17);
        _17 = ((_8 as Continue).0: (i128, i128));
        _7 = _17;
        StorageDead(_17);
        StorageLive(_5);
        _5 = (_7.0: i128);
        StorageLive(_6);
        _6 = (_7.1: i128);
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_18);
        StorageLive(_19);
        _19 = _5;
        StorageLive(_20);
        StorageLive(_21);
        _21 = _6;
        _20 = core::num::<impl i128>::abs(move _21) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_14);
        _14 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_16);
        _16 = _14;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _16) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb23;
    }

    bb7: {
        StorageDead(_21);
        _18 = <i128 as Ord>::min(move _19, move _20) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_20);
        StorageDead(_19);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = _1;
        _24 = core::num::<impl i128>::abs(move _25) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_25);
        StorageLive(_26);
        _26 = _18;
        _23 = Lt(move _24, move _26);
        switchInt(move _23) -> [0: bb21, otherwise: bb10];
    }

    bb10: {
        StorageDead(_26);
        StorageDead(_24);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = _1;
        _32 = core::num::<impl i128>::abs(move _33) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_33);
        _31 = <i128 as SafeMath>::safe_mul(move _32, const _) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_32);
        _30 = std::result::Result::<i128, error::ErrorCode>::unwrap_or(move _31, const _) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_31);
        StorageLive(_34);
        StorageLive(_35);
        _35 = _18;
        _34 = <i128 as Ord>::max(move _35, const 1_i128) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_35);
        _29 = <i128 as SafeMath>::safe_div(move _30, move _34) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_34);
        StorageDead(_30);
        _28 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _29) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_29);
        _36 = discriminant(_28);
        switchInt(move _36) -> [0: bb17, 1: bb18, otherwise: bb4];
    }

    bb17: {
        StorageLive(_40);
        _40 = ((_28 as Continue).0: i128);
        _27 = _40;
        StorageDead(_40);
        _22 = <i128 as Ord>::min(move _27, const _) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_37);
        _37 = ((_28 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_39);
        _39 = _37;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _39) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_27);
        StorageDead(_28);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_18);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb23;
    }

    bb20: {
        StorageDead(_27);
        StorageDead(_28);
        goto -> bb22;
    }

    bb21: {
        StorageDead(_26);
        StorageDead(_24);
        _22 = const _;
        goto -> bb22;
    }

    bb22: {
        StorageDead(_23);
        StorageLive(_41);
        _41 = _22;
        _0 = std::result::Result::<i128, error::ErrorCode>::Ok(move _41);
        StorageDead(_41);
        StorageDead(_22);
        StorageDead(_18);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb23;
    }

    bb23: {
        return;
    }
}
