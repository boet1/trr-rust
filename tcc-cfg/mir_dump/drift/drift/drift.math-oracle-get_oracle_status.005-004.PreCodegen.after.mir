// MIR for `get_oracle_status` after PreCodegen

fn get_oracle_status(_1: &PerpMarket, _2: &OraclePriceData, _3: &state::state::OracleGuardRails, _4: u64) -> std::result::Result<OracleStatus, error::ErrorCode> {
    debug market => _1;
    debug oracle_price_data => _2;
    debug guard_rails => _3;
    debug reserve_price => _4;
    let mut _0: std::result::Result<math::oracle::OracleStatus, error::ErrorCode>;
    let _5: math::oracle::OracleValidity;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::oracle::OracleValidity>;
    let mut _7: std::result::Result<math::oracle::OracleValidity, error::ErrorCode>;
    let mut _8: state::user::MarketType;
    let mut _9: u16;
    let mut _10: i64;
    let mut _11: &state::oracle::OraclePriceData;
    let mut _12: &state::state::ValidityGuardRails;
    let _13: &state::state::ValidityGuardRails;
    let mut _14: u64;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _16: std::result::Result<u64, error::ErrorCode>;
    let mut _17: state::perp_market::PerpMarket;
    let mut _18: isize;
    let _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _20: !;
    let mut _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _22: u64;
    let mut _23: &state::oracle::OracleSource;
    let _24: &state::oracle::OracleSource;
    let mut _25: math::oracle::LogMode;
    let mut _26: isize;
    let _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _28: !;
    let mut _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _30: math::oracle::OracleValidity;
    let mut _32: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _33: std::result::Result<i64, error::ErrorCode>;
    let mut _34: &state::perp_market::AMM;
    let _35: &state::perp_market::AMM;
    let mut _36: u64;
    let mut _37: isize;
    let mut _39: !;
    let mut _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _43: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _44: std::result::Result<bool, error::ErrorCode>;
    let mut _45: i64;
    let mut _46: &state::state::PriceDivergenceGuardRails;
    let _47: &state::state::PriceDivergenceGuardRails;
    let mut _48: isize;
    let mut _50: !;
    let mut _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _53: math::oracle::OracleStatus;
    let mut _54: state::oracle::OraclePriceData;
    let mut _55: i64;
    let mut _56: bool;
    let mut _57: math::oracle::OracleValidity;
    scope 1 {
        debug oracle_validity => _5;
        let _31: i64;
        let _38: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _41: i64;
        scope 10 {
            debug oracle_reserve_price_spread_pct => _31;
            let _42: bool;
            let _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _52: bool;
            scope 15 {
                debug is_oracle_mark_too_divergent => _42;
            }
            scope 16 {
                debug residual => _49;
                scope 17 {
                }
            }
            scope 18 {
                debug val => _52;
                scope 19 {
                }
            }
        }
        scope 11 {
            debug residual => _38;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _41;
            scope 14 {
            }
        }
    }
    scope 2 {
        debug residual => _19;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _22;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _27;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _30;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = state::user::MarketType::Perp;
        StorageLive(_9);
        _9 = ((*_1).21: u16);
        StorageLive(_10);
        _10 = ((((*_1).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).3: i64);
        StorageLive(_11);
        _11 = &(*_2);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &((*_3).1: state::state::ValidityGuardRails);
        _12 = &(*_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = (*_1);
        _16 = PerpMarket::get_max_confidence_interval_multiplier(move _17) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_17);
        _15 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _16) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_16);
        _18 = discriminant(_15);
        switchInt(move _18) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_22);
        _22 = ((_15 as Continue).0: u64);
        _14 = _22;
        StorageDead(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &(((*_1).1: state::perp_market::AMM).72: state::oracle::OracleSource);
        _23 = &(*_24);
        StorageLive(_25);
        _25 = LogMode::None;
        _7 = oracle_validity(move _8, move _9, move _10, move _11, move _12, move _14, move _23, move _25, const 0_i8) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_19);
        _19 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_21);
        _21 = _19;
        _0 = <std::result::Result<OracleStatus, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _21) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb23;
    }

    bb7: {
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        _6 = <std::result::Result<OracleValidity, error::ErrorCode> as Try>::branch(move _7) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_7);
        _26 = discriminant(_6);
        switchInt(move _26) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_30);
        _30 = ((_6 as Continue).0: math::oracle::OracleValidity);
        _5 = _30;
        StorageDead(_30);
        StorageDead(_24);
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_6);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = &((*_1).1: state::perp_market::AMM);
        _34 = &(*_35);
        StorageLive(_36);
        _36 = _4;
        _33 = calculate_oracle_twap_5min_price_spread_pct(move _34, move _36) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_27);
        _27 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_29);
        _29 = _27;
        _0 = <std::result::Result<OracleStatus, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _29) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_24);
        goto -> bb23;
    }

    bb12: {
        StorageDead(_36);
        StorageDead(_34);
        _32 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _33) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_33);
        _37 = discriminant(_32);
        switchInt(move _37) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_41);
        _41 = ((_32 as Continue).0: i64);
        _31 = _41;
        StorageDead(_41);
        StorageDead(_35);
        StorageDead(_32);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = _31;
        StorageLive(_46);
        StorageLive(_47);
        _47 = &((*_3).0: state::state::PriceDivergenceGuardRails);
        _46 = &(*_47);
        _44 = is_oracle_mark_too_divergent(move _45, move _46) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_38);
        _38 = ((_32 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_40);
        _40 = _38;
        _0 = <std::result::Result<OracleStatus, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _40) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_35);
        StorageDead(_32);
        goto -> bb22;
    }

    bb17: {
        StorageDead(_46);
        StorageDead(_45);
        _43 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _44) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_44);
        _48 = discriminant(_43);
        switchInt(move _48) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_52);
        _52 = ((_43 as Continue).0: bool);
        _42 = _52;
        StorageDead(_52);
        StorageDead(_47);
        StorageDead(_43);
        StorageLive(_53);
        StorageLive(_54);
        _54 = (*_2);
        StorageLive(_55);
        _55 = _31;
        StorageLive(_56);
        _56 = _42;
        StorageLive(_57);
        _57 = _5;
        _53 = OracleStatus { price_data: move _54, oracle_reserve_price_spread_pct: move _55, mark_too_divergent: move _56, oracle_validity: move _57 };
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_54);
        _0 = std::result::Result::<OracleStatus, error::ErrorCode>::Ok(move _53);
        StorageDead(_53);
        StorageDead(_42);
        StorageDead(_31);
        StorageDead(_5);
        goto -> bb25;
    }

    bb20: {
        StorageLive(_49);
        _49 = ((_43 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_51);
        _51 = _49;
        _0 = <std::result::Result<OracleStatus, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _51) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_51);
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_43);
        StorageDead(_42);
        goto -> bb22;
    }

    bb22: {
        StorageDead(_31);
        goto -> bb24;
    }

    bb23: {
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_6);
        goto -> bb24;
    }

    bb24: {
        StorageDead(_5);
        goto -> bb25;
    }

    bb25: {
        return;
    }
}
