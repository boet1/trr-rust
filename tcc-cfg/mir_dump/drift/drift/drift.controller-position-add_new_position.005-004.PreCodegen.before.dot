digraph Mir_0_679 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn add_new_position(_1: &amp;ReErased mut [state::user::PerpPosition; 8_usize], _2: u16) -&gt; std::result::Result&lt;usize, error::ErrorCode&gt;<br align="left"/>let _3: usize;<br align="left"/>let mut _4: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, usize&gt;;<br align="left"/>let mut _5: std::result::Result&lt;usize, error::ErrorCode&gt;;<br align="left"/>let mut _6: std::option::Option&lt;usize&gt;;<br align="left"/>let mut _7: &amp;ReErased mut std::slice::Iter&lt;ReErased, state::user::PerpPosition&gt;;<br align="left"/>let mut _8: std::slice::Iter&lt;ReErased, state::user::PerpPosition&gt;;<br align="left"/>let mut _9: &amp;ReErased [state::user::PerpPosition];<br align="left"/>let mut _10: &amp;ReErased [state::user::PerpPosition; 8_usize];<br align="left"/>let mut _11: Closure(DefId(0:680 ~ drift[d311]::controller::position::add_new_position::{closure#0}), [i16, Binder(extern &quot;RustCall&quot; fn((&amp;ReErased state::user::PerpPosition,)) -&gt; bool, []), ()]);<br align="left"/>let mut _12: error::ErrorCode;<br align="left"/>let mut _13: isize;<br align="left"/>let _14: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _15: !;<br align="left"/>let mut _16: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _17: usize;<br align="left"/>let _18: u16;<br align="left"/>let _19: &amp;ReErased state::user::PerpPosition;<br align="left"/>let _20: usize;<br align="left"/>let mut _21: usize;<br align="left"/>let mut _22: bool;<br align="left"/>let mut _23: bool;<br align="left"/>let mut _24: u16;<br align="left"/>let mut _25: u16;<br align="left"/>let _26: state::user::PerpPosition;<br align="left"/>let mut _27: u16;<br align="left"/>let mut _28: u16;<br align="left"/>let mut _29: state::user::PerpPosition;<br align="left"/>let mut _30: state::user::PerpPosition;<br align="left"/>let _31: usize;<br align="left"/>let mut _32: usize;<br align="left"/>let mut _33: bool;<br align="left"/>let mut _34: usize;<br align="left"/>debug user_positions =&gt; _1;<br align="left"/>debug market_index =&gt; _2;<br align="left"/>debug new_position_index =&gt; _3;<br align="left"/>debug residual =&gt; _14;<br align="left"/>debug val =&gt; _17;<br align="left"/>debug max_margin_ratio =&gt; _18;<br align="left"/>debug old_position =&gt; _19;<br align="left"/>debug new_market_position =&gt; _26;<br align="left"/>>;
    bb0__0_679 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>_10 = &amp;(*_1)<br/>_9 = move _10 as &amp;[state::user::PerpPosition] (PointerCoercion(Unsize))<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">_8 = core::slice::&lt;impl [PerpPosition]&gt;::iter(move _9)</td></tr></table>>];
    bb1__0_679 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_7 = &amp;mut _8<br/>StorageDead(_9)<br/>StorageLive(_11)<br/>_11 = {closure@programs/drift/src/controller/position.rs:49:19: 49:36}<br/></td></tr><tr><td align="left">_6 = &lt;std::slice::Iter&lt;'_, PerpPosition&gt; as Iterator&gt;::position::&lt;{closure@programs/drift/src/controller/position.rs:49:19: 49:36}&gt;(move _7, move _11)</td></tr></table>>];
    bb2__0_679 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_7)<br/>StorageLive(_12)<br/>_12 = error::ErrorCode::MaxNumberOfPositions<br/></td></tr><tr><td align="left">_5 = Option::&lt;usize&gt;::ok_or::&lt;error::ErrorCode&gt;(move _6, move _12)</td></tr></table>>];
    bb3__0_679 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">_4 = &lt;std::result::Result&lt;usize, error::ErrorCode&gt; as Try&gt;::branch(move _5)</td></tr></table>>];
    bb4__0_679 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>_13 = discriminant(_4)<br/></td></tr><tr><td align="left">switchInt(move _13)</td></tr></table>>];
    bb5__0_679 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_17)<br/>_17 = ((_4 as Continue).0: usize)<br/>_3 = _17<br/>StorageDead(_17)<br/>StorageDead(_8)<br/>StorageDead(_4)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>_20 = _3<br/>_21 = Len((*_1))<br/>_22 = Lt(_20, _21)<br/></td></tr><tr><td align="left">assert(move _22, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _21, _20)</td></tr></table>>];
    bb6__0_679 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb7__0_679 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageLive(_14)<br/>_14 = ((_4 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_16)<br/>_16 = _14<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;usize, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _16)</td></tr></table>>];
    bb8__0_679 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageDead(_14)<br/>StorageDead(_8)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_679 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">_19 = &amp;(*_1)[_20]<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>_24 = ((*_19).13: u16)<br/>StorageLive(_25)<br/>_25 = _2<br/>_23 = Eq(move _24, move _25)<br/></td></tr><tr><td align="left">switchInt(move _23)</td></tr></table>>];
    bb10__0_679 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_24)<br/>_18 = ((*_19).12: u16)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb11__0_679 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_24)<br/>_18 = const 0_u16<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_679 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageDead(_20)<br/>StorageDead(_19)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>_27 = _2<br/>StorageLive(_28)<br/>_28 = _18<br/>StorageLive(_29)<br/></td></tr><tr><td align="left">_29 = &lt;PerpPosition as Default&gt;::default()</td></tr></table>>];
    bb13__0_679 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">_26 = PerpPosition { last_cumulative_funding_rate: (_29.0: i64), base_asset_amount: (_29.1: i64), quote_asset_amount: (_29.2: i64), quote_break_even_amount: (_29.3: i64), quote_entry_amount: (_29.4: i64), open_bids: (_29.5: i64), open_asks: (_29.6: i64), settled_pnl: (_29.7: i64), lp_shares: (_29.8: u64), last_base_asset_amount_per_lp: (_29.9: i64), last_quote_asset_amount_per_lp: (_29.10: i64), padding: (_29.11: [u8; 2]), max_margin_ratio: move _28, market_index: move _27, open_orders: (_29.14: u8), per_lp_base: (_29.15: i8) }<br/>StorageDead(_28)<br/>StorageDead(_27)<br/>StorageDead(_29)<br/>StorageLive(_30)<br/>_30 = _26<br/>StorageLive(_31)<br/>_31 = _3<br/>_32 = Len((*_1))<br/>_33 = Lt(_31, _32)<br/></td></tr><tr><td align="left">assert(move _33, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _32, _31)</td></tr></table>>];
    bb14__0_679 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">(*_1)[_31] = move _30<br/>StorageDead(_30)<br/>StorageDead(_31)<br/>StorageLive(_34)<br/>_34 = _3<br/>_0 = std::result::Result::&lt;usize, error::ErrorCode&gt;::Ok(move _34)<br/>StorageDead(_34)<br/>StorageDead(_26)<br/>StorageDead(_18)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_679 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_679 -> bb1__0_679 [label="return"];
    bb1__0_679 -> bb2__0_679 [label="return"];
    bb2__0_679 -> bb3__0_679 [label="return"];
    bb3__0_679 -> bb4__0_679 [label="return"];
    bb4__0_679 -> bb5__0_679 [label="0"];
    bb4__0_679 -> bb7__0_679 [label="1"];
    bb4__0_679 -> bb6__0_679 [label="otherwise"];
    bb5__0_679 -> bb9__0_679 [label="success"];
    bb7__0_679 -> bb8__0_679 [label="return"];
    bb8__0_679 -> bb15__0_679 [label=""];
    bb9__0_679 -> bb11__0_679 [label="0"];
    bb9__0_679 -> bb10__0_679 [label="otherwise"];
    bb10__0_679 -> bb12__0_679 [label=""];
    bb11__0_679 -> bb12__0_679 [label=""];
    bb12__0_679 -> bb13__0_679 [label="return"];
    bb13__0_679 -> bb14__0_679 [label="success"];
    bb14__0_679 -> bb15__0_679 [label=""];
}
