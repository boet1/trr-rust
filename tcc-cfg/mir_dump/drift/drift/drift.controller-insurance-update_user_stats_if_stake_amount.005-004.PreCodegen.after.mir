// MIR for `update_user_stats_if_stake_amount` after PreCodegen

fn update_user_stats_if_stake_amount(_1: i64, _2: u64, _3: &mut InsuranceFundStake, _4: &mut UserStats, _5: &mut SpotMarket, _6: i64) -> std::result::Result<(), error::ErrorCode> {
    debug if_stake_amount_delta => _1;
    debug insurance_vault_amount => _2;
    debug insurance_fund_stake => _3;
    debug user_stats => _4;
    debug spot_market => _5;
    debug now => _6;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _7: ();
    let mut _8: bool;
    let mut _9: u16;
    let mut _10: bool;
    let mut _11: u16;
    let mut _12: bool;
    let mut _13: u8;
    let mut _14: !;
    let mut _15: ();
    let _16: u64;
    let mut _17: bool;
    let mut _18: i64;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _20: std::result::Result<u64, error::ErrorCode>;
    let mut _21: u128;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _23: std::result::Result<u128, error::ErrorCode>;
    let mut _24: &state::insurance_fund_stake::InsuranceFundStake;
    let mut _25: &state::spot_market::SpotMarket;
    let mut _26: isize;
    let _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _28: !;
    let mut _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _30: u128;
    let mut _31: u128;
    let mut _32: u64;
    let mut _33: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _34: std::result::Result<u64, error::ErrorCode>;
    let mut _35: u64;
    let mut _36: u64;
    let mut _37: i64;
    let mut _38: isize;
    let _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _40: !;
    let mut _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _42: u64;
    let mut _43: isize;
    let _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _47: u64;
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _49: std::result::Result<u64, error::ErrorCode>;
    let mut _50: u128;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _52: std::result::Result<u128, error::ErrorCode>;
    let mut _53: &state::insurance_fund_stake::InsuranceFundStake;
    let mut _54: &state::spot_market::SpotMarket;
    let mut _55: isize;
    let _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _57: !;
    let mut _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _59: u128;
    let mut _60: u128;
    let mut _61: u64;
    let mut _62: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _63: std::result::Result<u64, error::ErrorCode>;
    let mut _64: u64;
    let mut _65: u64;
    let mut _66: i64;
    let mut _67: isize;
    let _68: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _69: !;
    let mut _70: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _71: u64;
    let mut _72: isize;
    let _73: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _74: !;
    let mut _75: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _76: u64;
    let _77: ();
    let mut _78: bool;
    let mut _79: u16;
    let mut _80: u64;
    let mut _81: bool;
    let mut _82: u16;
    let mut _83: u64;
    let _84: ();
    let mut _85: bool;
    let mut _86: u8;
    let mut _87: bool;
    let mut _88: i64;
    let mut _90: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _91: std::result::Result<u32, error::ErrorCode>;
    let mut _92: i64;
    let mut _93: isize;
    let mut _95: !;
    let mut _96: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _99: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _100: std::result::Result<u32, error::ErrorCode>;
    let mut _101: u32;
    let mut _102: u32;
    let mut _103: u32;
    let mut _104: u32;
    let mut _105: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _106: std::result::Result<u32, error::ErrorCode>;
    let mut _107: isize;
    let mut _109: !;
    let mut _110: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _112: isize;
    let mut _114: !;
    let mut _115: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _118: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _119: std::result::Result<u64, error::ErrorCode>;
    let mut _120: &state::spot_market::SpotMarket;
    let mut _121: u64;
    let mut _122: i64;
    let mut _123: u32;
    let mut _124: isize;
    let mut _126: !;
    let mut _127: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _129: u32;
    let mut _130: u32;
    let mut _131: u32;
    let mut _132: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _133: std::result::Result<u32, error::ErrorCode>;
    let mut _134: u64;
    let mut _135: isize;
    let mut _137: !;
    let mut _138: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _140: u32;
    let mut _141: ();
    scope 1 {
        debug if_stake_amount => _16;
        let _89: u32;
        let _94: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _97: u32;
        scope 26 {
            debug now_u32 => _89;
            let _98: u32;
            let _108: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _111: u32;
            let _113: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _116: u32;
            scope 31 {
                debug since_last => _98;
                let _117: u64;
                let _125: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _128: u64;
                scope 40 {
                    debug fuel_bonus_insurance => _117;
                    let _136: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _139: u32;
                    scope 45 {
                        debug residual => _136;
                        scope 46 {
                        }
                    }
                    scope 47 {
                        debug val => _139;
                        scope 48 {
                        }
                    }
                }
                scope 41 {
                    debug residual => _125;
                    scope 42 {
                    }
                }
                scope 43 {
                    debug val => _128;
                    scope 44 {
                    }
                }
            }
            scope 32 {
                debug residual => _108;
                scope 33 {
                }
            }
            scope 34 {
                debug val => _111;
                scope 35 {
                }
            }
            scope 36 {
                debug residual => _113;
                scope 37 {
                }
            }
            scope 38 {
                debug val => _116;
                scope 39 {
                }
            }
        }
        scope 27 {
            debug residual => _94;
            scope 28 {
            }
        }
        scope 29 {
            debug val => _97;
            scope 30 {
            }
        }
    }
    scope 2 {
        debug residual => _27;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _30;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _39;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _42;
        scope 9 {
        }
    }
    scope 10 {
        debug residual => _44;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _47;
        scope 13 {
        }
    }
    scope 14 {
        debug residual => _56;
        scope 15 {
        }
    }
    scope 16 {
        debug val => _59;
        scope 17 {
        }
    }
    scope 18 {
        debug residual => _68;
        scope 19 {
        }
    }
    scope 20 {
        debug val => _71;
        scope 21 {
        }
    }
    scope 22 {
        debug residual => _73;
        scope 23 {
        }
    }
    scope 24 {
        debug val => _76;
        scope 25 {
        }
    }

    bb0: {
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = ((*_5).42: u16);
        _8 = Ne(move _9, const _);
        switchInt(move _8) -> [0: bb6, otherwise: bb1];
    }

    bb1: {
        StorageDead(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = ((*_5).42: u16);
        _10 = Ne(move _11, const _);
        switchInt(move _10) -> [0: bb5, otherwise: bb2];
    }

    bb2: {
        StorageDead(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = ((*_5).60: u8);
        _12 = Eq(move _13, const 0_u8);
        switchInt(move _12) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageDead(_13);
        StorageLive(_15);
        _15 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _15);
        StorageDead(_15);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb93;
    }

    bb4: {
        StorageDead(_13);
        goto -> bb7;
    }

    bb5: {
        StorageDead(_11);
        goto -> bb7;
    }

    bb6: {
        StorageDead(_9);
        goto -> bb7;
    }

    bb7: {
        _7 = const ();
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = _1;
        _17 = Ge(move _18, const 0_i64);
        switchInt(move _17) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        StorageDead(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &(*_3);
        StorageLive(_25);
        _25 = &(*_5);
        _23 = InsuranceFundStake::checked_if_shares(move _24, move _25) -> [return: bb10, unwind continue];
    }

    bb9: {
        StorageDead(_18);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = &(*_3);
        StorageLive(_54);
        _54 = &(*_5);
        _52 = InsuranceFundStake::checked_if_shares(move _53, move _54) -> [return: bb27, unwind continue];
    }

    bb10: {
        StorageDead(_25);
        StorageDead(_24);
        _22 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _23) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_23);
        _26 = discriminant(_22);
        switchInt(move _26) -> [0: bb12, 1: bb14, otherwise: bb13];
    }

    bb12: {
        StorageLive(_30);
        _30 = ((_22 as Continue).0: u128);
        _21 = _30;
        StorageDead(_30);
        StorageLive(_31);
        _31 = (((*_5).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = _2;
        StorageLive(_36);
        StorageLive(_37);
        _37 = _1;
        _36 = core::num::<impl i64>::unsigned_abs(move _37) -> [return: bb16, unwind continue];
    }

    bb13: {
        unreachable;
    }

    bb14: {
        StorageLive(_27);
        _27 = ((_22 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_29);
        _29 = _27;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _29) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_21);
        StorageDead(_20);
        goto -> bb90;
    }

    bb16: {
        StorageDead(_37);
        _34 = <u64 as SafeMath>::safe_add(move _35, move _36) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_36);
        StorageDead(_35);
        _33 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _34) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_34);
        _38 = discriminant(_33);
        switchInt(move _38) -> [0: bb19, 1: bb20, otherwise: bb13];
    }

    bb19: {
        StorageLive(_42);
        _42 = ((_33 as Continue).0: u64);
        _32 = _42;
        StorageDead(_42);
        _20 = if_shares_to_vault_amount(move _21, move _31, move _32) -> [return: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_39);
        _39 = ((_33 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_41);
        _41 = _39;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _41) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_41);
        StorageDead(_39);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_21);
        StorageDead(_20);
        goto -> bb89;
    }

    bb22: {
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_21);
        _19 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _20) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_20);
        _43 = discriminant(_19);
        switchInt(move _43) -> [0: bb24, 1: bb25, otherwise: bb13];
    }

    bb24: {
        StorageLive(_47);
        _47 = ((_19 as Continue).0: u64);
        _16 = _47;
        StorageDead(_47);
        StorageDead(_33);
        StorageDead(_22);
        StorageDead(_19);
        goto -> bb43;
    }

    bb25: {
        StorageLive(_44);
        _44 = ((_19 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_46);
        _46 = _44;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _46) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_46);
        StorageDead(_44);
        goto -> bb89;
    }

    bb27: {
        StorageDead(_54);
        StorageDead(_53);
        _51 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _52) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_52);
        _55 = discriminant(_51);
        switchInt(move _55) -> [0: bb29, 1: bb30, otherwise: bb13];
    }

    bb29: {
        StorageLive(_59);
        _59 = ((_51 as Continue).0: u128);
        _50 = _59;
        StorageDead(_59);
        StorageLive(_60);
        _60 = (((*_5).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = _2;
        StorageLive(_65);
        StorageLive(_66);
        _66 = _1;
        _65 = core::num::<impl i64>::unsigned_abs(move _66) -> [return: bb32, unwind continue];
    }

    bb30: {
        StorageLive(_56);
        _56 = ((_51 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_58);
        _58 = _56;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _58) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_50);
        StorageDead(_49);
        goto -> bb88;
    }

    bb32: {
        StorageDead(_66);
        _63 = <u64 as SafeMath>::safe_sub(move _64, move _65) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_65);
        StorageDead(_64);
        _62 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _63) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_63);
        _67 = discriminant(_62);
        switchInt(move _67) -> [0: bb35, 1: bb36, otherwise: bb13];
    }

    bb35: {
        StorageLive(_71);
        _71 = ((_62 as Continue).0: u64);
        _61 = _71;
        StorageDead(_71);
        _49 = if_shares_to_vault_amount(move _50, move _60, move _61) -> [return: bb38, unwind continue];
    }

    bb36: {
        StorageLive(_68);
        _68 = ((_62 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_70);
        _70 = _68;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _70) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_50);
        StorageDead(_49);
        goto -> bb87;
    }

    bb38: {
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_50);
        _48 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _49) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_49);
        _72 = discriminant(_48);
        switchInt(move _72) -> [0: bb40, 1: bb41, otherwise: bb13];
    }

    bb40: {
        StorageLive(_76);
        _76 = ((_48 as Continue).0: u64);
        _16 = _76;
        StorageDead(_76);
        StorageDead(_62);
        StorageDead(_51);
        StorageDead(_48);
        goto -> bb43;
    }

    bb41: {
        StorageLive(_73);
        _73 = ((_48 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_75);
        _75 = _73;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _75) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_75);
        StorageDead(_73);
        goto -> bb87;
    }

    bb43: {
        StorageDead(_17);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = ((*_5).42: u16);
        _78 = Eq(move _79, const _);
        switchInt(move _78) -> [0: bb45, otherwise: bb44];
    }

    bb44: {
        StorageDead(_79);
        StorageLive(_80);
        _80 = _16;
        ((*_4).10: u64) = move _80;
        StorageDead(_80);
        _77 = const ();
        goto -> bb49;
    }

    bb45: {
        StorageDead(_79);
        StorageLive(_81);
        StorageLive(_82);
        _82 = ((*_5).42: u16);
        _81 = Eq(move _82, const _);
        switchInt(move _81) -> [0: bb47, otherwise: bb46];
    }

    bb46: {
        StorageDead(_82);
        StorageLive(_83);
        _83 = _16;
        ((*_4).23: u64) = move _83;
        StorageDead(_83);
        _77 = const ();
        goto -> bb48;
    }

    bb47: {
        StorageDead(_82);
        _77 = const ();
        goto -> bb48;
    }

    bb48: {
        StorageDead(_81);
        goto -> bb49;
    }

    bb49: {
        StorageDead(_78);
        StorageDead(_77);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = ((*_5).60: u8);
        _85 = Ne(move _86, const 0_u8);
        switchInt(move _85) -> [0: bb80, otherwise: bb50];
    }

    bb50: {
        StorageDead(_86);
        StorageLive(_87);
        StorageLive(_88);
        _88 = _6;
        _87 = Ge(move _88, const _);
        switchInt(move _87) -> [0: bb79, otherwise: bb51];
    }

    bb51: {
        StorageDead(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _92 = _6;
        _91 = <i64 as Cast>::cast::<u32>(move _92) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_92);
        _90 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _91) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_91);
        _93 = discriminant(_90);
        switchInt(move _93) -> [0: bb54, 1: bb55, otherwise: bb13];
    }

    bb54: {
        StorageLive(_97);
        _97 = ((_90 as Continue).0: u32);
        _89 = _97;
        StorageDead(_97);
        StorageDead(_90);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _101 = _89;
        StorageLive(_102);
        StorageLive(_103);
        _103 = ((*_4).24: u32);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        _106 = <i64 as Cast>::cast::<u32>(const _) -> [return: bb57, unwind continue];
    }

    bb55: {
        StorageLive(_94);
        _94 = ((_90 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_96);
        _96 = _94;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _96) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_96);
        StorageDead(_94);
        StorageDead(_90);
        goto -> bb86;
    }

    bb57: {
        _105 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _106) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_106);
        _107 = discriminant(_105);
        switchInt(move _107) -> [0: bb59, 1: bb60, otherwise: bb13];
    }

    bb59: {
        StorageLive(_111);
        _111 = ((_105 as Continue).0: u32);
        _104 = _111;
        StorageDead(_111);
        _102 = <u32 as Ord>::max(move _103, move _104) -> [return: bb62, unwind continue];
    }

    bb60: {
        StorageLive(_108);
        _108 = ((_105 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_110);
        _110 = _108;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _110) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_110);
        StorageDead(_108);
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_100);
        goto -> bb84;
    }

    bb62: {
        StorageDead(_104);
        StorageDead(_103);
        _100 = <u32 as SafeMath>::safe_sub(move _101, move _102) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_102);
        StorageDead(_101);
        _99 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _100) -> [return: bb64, unwind continue];
    }

    bb64: {
        StorageDead(_100);
        _112 = discriminant(_99);
        switchInt(move _112) -> [0: bb65, 1: bb66, otherwise: bb13];
    }

    bb65: {
        StorageLive(_116);
        _116 = ((_99 as Continue).0: u32);
        _98 = _116;
        StorageDead(_116);
        StorageDead(_105);
        StorageDead(_99);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        _120 = &(*_5);
        StorageLive(_121);
        _121 = _16;
        StorageLive(_122);
        _122 = _1;
        StorageLive(_123);
        _123 = _98;
        _119 = calculate_insurance_fuel_bonus(move _120, move _121, move _122, move _123) -> [return: bb68, unwind continue];
    }

    bb66: {
        StorageLive(_113);
        _113 = ((_99 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_115);
        _115 = _113;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _115) -> [return: bb67, unwind continue];
    }

    bb67: {
        StorageDead(_115);
        StorageDead(_113);
        goto -> bb84;
    }

    bb68: {
        StorageDead(_123);
        StorageDead(_122);
        StorageDead(_121);
        StorageDead(_120);
        _118 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _119) -> [return: bb69, unwind continue];
    }

    bb69: {
        StorageDead(_119);
        _124 = discriminant(_118);
        switchInt(move _124) -> [0: bb70, 1: bb71, otherwise: bb13];
    }

    bb70: {
        StorageLive(_128);
        _128 = ((_118 as Continue).0: u64);
        _117 = _128;
        StorageDead(_128);
        StorageDead(_118);
        StorageLive(_129);
        StorageLive(_130);
        _130 = ((*_4).17: u32);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        _134 = _117;
        _133 = <u64 as Cast>::cast::<u32>(move _134) -> [return: bb73, unwind continue];
    }

    bb71: {
        StorageLive(_125);
        _125 = ((_118 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_127);
        _127 = _125;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _127) -> [return: bb72, unwind continue];
    }

    bb72: {
        StorageDead(_127);
        StorageDead(_125);
        StorageDead(_118);
        goto -> bb83;
    }

    bb73: {
        StorageDead(_134);
        _132 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _133) -> [return: bb74, unwind continue];
    }

    bb74: {
        StorageDead(_133);
        _135 = discriminant(_132);
        switchInt(move _135) -> [0: bb75, 1: bb76, otherwise: bb13];
    }

    bb75: {
        StorageLive(_139);
        _139 = ((_132 as Continue).0: u32);
        _131 = _139;
        StorageDead(_139);
        _129 = core::num::<impl u32>::saturating_add(move _130, move _131) -> [return: bb78, unwind continue];
    }

    bb76: {
        StorageLive(_136);
        _136 = ((_132 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_138);
        _138 = _136;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _138) -> [return: bb77, unwind continue];
    }

    bb77: {
        StorageDead(_138);
        StorageDead(_136);
        StorageDead(_131);
        StorageDead(_130);
        StorageDead(_129);
        StorageDead(_132);
        goto -> bb83;
    }

    bb78: {
        StorageDead(_131);
        StorageDead(_130);
        ((*_4).17: u32) = move _129;
        StorageDead(_129);
        StorageDead(_132);
        StorageLive(_140);
        _140 = _89;
        ((*_4).24: u32) = move _140;
        StorageDead(_140);
        _84 = const ();
        StorageDead(_117);
        StorageDead(_98);
        StorageDead(_89);
        goto -> bb82;
    }

    bb79: {
        StorageDead(_88);
        goto -> bb81;
    }

    bb80: {
        StorageDead(_86);
        goto -> bb81;
    }

    bb81: {
        _84 = const ();
        goto -> bb82;
    }

    bb82: {
        StorageDead(_87);
        StorageDead(_85);
        StorageDead(_84);
        StorageLive(_141);
        _141 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _141);
        StorageDead(_141);
        StorageDead(_16);
        goto -> bb93;
    }

    bb83: {
        StorageDead(_117);
        goto -> bb85;
    }

    bb84: {
        StorageDead(_105);
        StorageDead(_99);
        goto -> bb85;
    }

    bb85: {
        StorageDead(_98);
        goto -> bb86;
    }

    bb86: {
        StorageDead(_89);
        StorageDead(_87);
        StorageDead(_85);
        StorageDead(_84);
        goto -> bb92;
    }

    bb87: {
        StorageDead(_62);
        goto -> bb88;
    }

    bb88: {
        StorageDead(_51);
        StorageDead(_48);
        goto -> bb91;
    }

    bb89: {
        StorageDead(_33);
        goto -> bb90;
    }

    bb90: {
        StorageDead(_22);
        StorageDead(_19);
        goto -> bb91;
    }

    bb91: {
        StorageDead(_17);
        goto -> bb92;
    }

    bb92: {
        StorageDead(_16);
        goto -> bb93;
    }

    bb93: {
        return;
    }
}
