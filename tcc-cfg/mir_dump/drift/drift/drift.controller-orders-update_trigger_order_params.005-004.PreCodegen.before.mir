// MIR for `update_trigger_order_params` before PreCodegen

fn update_trigger_order_params(_1: &mut Order, _2: &OraclePriceData, _3: u64, _4: u8, _5: Option<&PerpMarket>) -> std::result::Result<(), error::ErrorCode> {
    debug order => _1;
    debug oracle_price_data => _2;
    debug slot => _3;
    debug min_auction_duration => _4;
    debug perp_market => _5;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let mut _6: state::user::OrderTriggerCondition;
    let mut _7: isize;
    let mut _8: !;
    let mut _9: error::ErrorCode;
    let mut _10: &{closure@programs/drift/src/error.rs:647:9: 647:11};
    let _11: {closure@programs/drift/src/error.rs:647:9: 647:11};
    let mut _12: ();
    let _13: ();
    let mut _14: bool;
    let mut _15: u64;
    let mut _16: u64;
    let mut _17: u64;
    let mut _18: bool;
    let _19: ();
    let mut _20: &mut state::user::Order;
    let mut _21: state::user::OrderBitFlag;
    let mut _22: u64;
    let _23: u8;
    let _24: i64;
    let _25: i64;
    let mut _26: (u8, i64, i64);
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u8, i64, i64)>;
    let mut _28: std::result::Result<(u8, i64, i64), error::ErrorCode>;
    let mut _29: &state::user::Order;
    let mut _30: &state::oracle::OraclePriceData;
    let mut _31: u8;
    let mut _32: std::option::Option<&state::perp_market::PerpMarket>;
    let mut _33: isize;
    let _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _35: !;
    let mut _36: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _37: (u8, i64, i64);
    let _38: ();
    let mut _39: &str;
    let _40: &str;
    let mut _41: &std::string::String;
    let _42: &std::string::String;
    let _43: std::string::String;
    let mut _45: std::fmt::Arguments<'_>;
    let mut _46: &[&str];
    let mut _47: &[&str; 3];
    let _48: &[&str; 3];
    let _49: [&str; 3];
    let mut _50: &[core::fmt::rt::Argument<'_>];
    let mut _51: &[core::fmt::rt::Argument<'_>; 3];
    let _52: &[core::fmt::rt::Argument<'_>; 3];
    let _53: [core::fmt::rt::Argument<'_>; 3];
    let mut _54: core::fmt::rt::Argument<'_>;
    let mut _55: &u8;
    let _56: &u8;
    let mut _57: core::fmt::rt::Argument<'_>;
    let mut _58: &i64;
    let _59: &i64;
    let mut _60: core::fmt::rt::Argument<'_>;
    let mut _61: &i64;
    let _62: &i64;
    let mut _63: u8;
    let mut _64: i64;
    let mut _65: i64;
    let _66: ();
    let mut _67: bool;
    let mut _68: isize;
    let _69: ();
    let mut _70: &mut state::user::Order;
    let mut _71: state::user::OrderBitFlag;
    let mut _72: ();
    let mut _73: &{closure@programs/drift/src/error.rs:647:9: 647:11};
    scope 1 {
        debug auction_duration => _23;
        debug auction_start_price => _24;
        debug auction_end_price => _25;
        let _44: std::string::String;
        let mut _74: &[&str; 3];
        scope 6 {
            debug res => _44;
        }
    }
    scope 2 {
        debug residual => _34;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _37;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_6);
        _7 = discriminant(((*_1).21: state::user::OrderTriggerCondition));
        switchInt(move _7) -> [0: bb2, 1: bb3, otherwise: bb1];
    }

    bb1: {
        StorageLive(_9);
        StorageLive(_10);
        _73 = const _;
        _10 = &(*_73);
        StorageLive(_12);
        _12 = ();
        _9 = <{closure@programs/drift/src/error.rs:647:9: 647:11} as Fn<()>>::call(move _10, move _12) -> [return: bb4, unwind continue];
    }

    bb2: {
        _6 = OrderTriggerCondition::TriggeredAbove;
        goto -> bb5;
    }

    bb3: {
        _6 = OrderTriggerCondition::TriggeredBelow;
        goto -> bb5;
    }

    bb4: {
        StorageDead(_12);
        StorageDead(_10);
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _9);
        StorageDead(_9);
        StorageDead(_6);
        goto -> bb34;
    }

    bb5: {
        ((*_1).21: state::user::OrderTriggerCondition) = move _6;
        StorageDead(_6);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = _3;
        StorageLive(_17);
        _17 = ((*_1).0: u64);
        _15 = core::num::<impl u64>::saturating_sub(move _16, move _17) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_17);
        StorageDead(_16);
        _14 = Gt(move _15, const 150_u64);
        switchInt(move _14) -> [0: bb10, otherwise: bb7];
    }

    bb7: {
        StorageDead(_15);
        StorageLive(_18);
        _18 = ((*_1).18: bool);
        switchInt(move _18) -> [0: bb11, otherwise: bb8];
    }

    bb8: {
        StorageLive(_19);
        StorageLive(_20);
        _20 = &mut (*_1);
        StorageLive(_21);
        _21 = OrderBitFlag::SafeTriggerOrder;
        _19 = Order::add_bit_flag(move _20, move _21) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        _13 = const ();
        goto -> bb12;
    }

    bb10: {
        StorageDead(_15);
        goto -> bb11;
    }

    bb11: {
        _13 = const ();
        goto -> bb12;
    }

    bb12: {
        StorageDead(_18);
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_22);
        _22 = _3;
        ((*_1).0: u64) = move _22;
        StorageDead(_22);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = &(*_1);
        StorageLive(_30);
        _30 = &(*_2);
        StorageLive(_31);
        _31 = _4;
        StorageLive(_32);
        _32 = _5;
        _28 = calculate_auction_params_for_trigger_order(move _29, move _30, move _31, move _32) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_29);
        _27 = <std::result::Result<(u8, i64, i64), error::ErrorCode> as Try>::branch(move _28) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_28);
        _33 = discriminant(_27);
        switchInt(move _33) -> [0: bb15, 1: bb17, otherwise: bb16];
    }

    bb15: {
        StorageLive(_37);
        _37 = ((_27 as Continue).0: (u8, i64, i64));
        _26 = _37;
        StorageDead(_37);
        StorageLive(_23);
        _23 = (_26.0: u8);
        StorageLive(_24);
        _24 = (_26.1: i64);
        StorageLive(_25);
        _25 = (_26.2: i64);
        StorageDead(_27);
        StorageDead(_26);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _74 = const _;
        _48 = &(*_74);
        _47 = &(*_48);
        _46 = move _47 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_47);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = &_23;
        _55 = &(*_56);
        _54 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _55) -> [return: bb19, unwind continue];
    }

    bb16: {
        unreachable;
    }

    bb17: {
        StorageLive(_34);
        _34 = ((_27 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_36);
        _36 = _34;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _36) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_36);
        StorageDead(_34);
        StorageDead(_27);
        StorageDead(_26);
        goto -> bb34;
    }

    bb19: {
        StorageDead(_55);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _59 = &_24;
        _58 = &(*_59);
        _57 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _58) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_58);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = &_25;
        _61 = &(*_62);
        _60 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _61) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_61);
        _53 = [move _54, move _57, move _60];
        StorageDead(_60);
        StorageDead(_57);
        StorageDead(_54);
        _52 = &_53;
        _51 = &(*_52);
        _50 = move _51 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_51);
        _45 = Arguments::<'_>::new_v1(move _46, move _50) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_50);
        StorageDead(_46);
        _44 = format(move _45) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_45);
        StorageDead(_62);
        StorageDead(_59);
        StorageDead(_56);
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_48);
        _43 = move _44;
        StorageDead(_44);
        _42 = &_43;
        _41 = &(*_42);
        _40 = <String as Deref>::deref(move _41) -> [return: bb24, unwind: bb35];
    }

    bb24: {
        _39 = &(*_40);
        StorageDead(_41);
        _38 = solana_program::log::sol_log(move _39) -> [return: bb25, unwind: bb35];
    }

    bb25: {
        StorageDead(_39);
        drop(_43) -> [return: bb26, unwind: bb36];
    }

    bb26: {
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_38);
        StorageLive(_63);
        _63 = _23;
        ((*_1).22: u8) = move _63;
        StorageDead(_63);
        StorageLive(_64);
        _64 = _24;
        ((*_1).6: i64) = move _64;
        StorageDead(_64);
        StorageLive(_65);
        _65 = _25;
        ((*_1).7: i64) = move _65;
        StorageDead(_65);
        StorageLive(_66);
        StorageLive(_67);
        _68 = discriminant(((*_1).13: state::user::OrderType));
        switchInt(move _68) -> [2: bb28, otherwise: bb27];
    }

    bb27: {
        _67 = const false;
        goto -> bb29;
    }

    bb28: {
        _67 = const true;
        goto -> bb29;
    }

    bb29: {
        switchInt(move _67) -> [0: bb32, otherwise: bb30];
    }

    bb30: {
        StorageLive(_69);
        StorageLive(_70);
        _70 = &mut (*_1);
        StorageLive(_71);
        _71 = OrderBitFlag::OracleTriggerMarket;
        _69 = Order::add_bit_flag(move _70, move _71) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_69);
        _66 = const ();
        goto -> bb33;
    }

    bb32: {
        _66 = const ();
        goto -> bb33;
    }

    bb33: {
        StorageDead(_67);
        StorageDead(_66);
        StorageLive(_72);
        _72 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _72);
        StorageDead(_72);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb34;
    }

    bb34: {
        return;
    }

    bb35 (cleanup): {
        drop(_43) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        resume;
    }
}
