// MIR for `constraints::spot_market_valid` after PreCodegen

fn constraints::spot_market_valid(_1: &anchor_lang::prelude::AccountLoader<'_, SpotMarket>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug market => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: ();
    let mut _3: bool;
    let mut _4: &state::perp_market::MarketStatus;
    let _5: &state::spot_market::SpotMarket;
    let mut _6: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _7: std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _9: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _10: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _15: std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _16: &state::perp_market::MarketStatus;
    let _17: state::perp_market::MarketStatus;
    let mut _18: !;
    let mut _19: anchor_lang::error::Error;
    let mut _20: error::ErrorCode;
    let mut _21: ();
    let mut _22: &state::perp_market::MarketStatus;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: isize;
    let mut _26: isize;
    let mut _27: isize;
    let mut _28: isize;
    let mut _29: isize;
    let mut _30: isize;
    let mut _31: isize;
    scope 1 {
        debug residual => _12;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _15;
        scope 4 {
        }
    }

    bb0: {
        _24 = const false;
        _23 = const false;
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_1);
        _9 = anchor_lang::prelude::AccountLoader::<'_, SpotMarket>::load(move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_10);
        _8 = <std::result::Result<Ref<'_, SpotMarket>, anchor_lang::error::Error> as Try>::branch(move _9) -> [return: bb2, unwind: bb15];
    }

    bb2: {
        _23 = const true;
        _24 = const true;
        StorageDead(_9);
        _11 = discriminant(_8);
        switchInt(move _11) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_15);
        _15 = move ((_8 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _7 = move _15;
        StorageDead(_15);
        _6 = &_7;
        _5 = <Ref<'_, SpotMarket> as Deref>::deref(move _6) -> [return: bb7, unwind: bb14];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_12);
        _12 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_14);
        _14 = move _12;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _14) -> [return: bb6, unwind: bb18];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_6);
        _29 = discriminant(_8);
        _23 = const false;
        _24 = const false;
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb12;
    }

    bb7: {
        StorageDead(_6);
        _4 = &((*_5).45: state::perp_market::MarketStatus);
        StorageLive(_16);
        _22 = const _;
        _16 = &(*_22);
        _3 = <state::perp_market::MarketStatus as PartialEq>::eq(move _4, move _16) -> [return: bb8, unwind: bb14];
    }

    bb8: {
        switchInt(move _3) -> [0: bb11, otherwise: bb9];
    }

    bb9: {
        StorageDead(_16);
        drop(_7) -> [return: bb16, unwind: bb18];
    }

    bb10: {
        StorageDead(_20);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _19);
        StorageDead(_19);
        goto -> bb12;
    }

    bb11: {
        StorageDead(_16);
        drop(_7) -> [return: bb17, unwind: bb18];
    }

    bb12: {
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb13;
    }

    bb13: {
        return;
    }

    bb14 (cleanup): {
        drop(_7) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        resume;
    }

    bb16: {
        _25 = discriminant(_8);
        _23 = const false;
        _24 = const false;
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_19);
        StorageLive(_20);
        _20 = error::ErrorCode::MarketDelisted;
        _19 = <error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _20) -> [return: bb10, unwind continue];
    }

    bb17: {
        _27 = discriminant(_8);
        _23 = const false;
        _24 = const false;
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_4);
        _2 = const ();
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_21);
        _21 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _21);
        StorageDead(_21);
        goto -> bb13;
    }

    bb18 (cleanup): {
        _31 = discriminant(_8);
        goto -> bb15;
    }
}
