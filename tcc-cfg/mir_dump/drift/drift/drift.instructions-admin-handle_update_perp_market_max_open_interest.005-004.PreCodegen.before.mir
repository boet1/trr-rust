// MIR for `admin::handle_update_perp_market_max_open_interest` before PreCodegen

fn admin::handle_update_perp_market_max_open_interest(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::AdminUpdatePerpMarket<'_>>, _2: u128) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug max_open_interest => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _5: std::result::Result<(), anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let _7: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _12: ();
    let _13: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _14: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _16: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _17: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _18: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _19: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _20: isize;
    let _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _24: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _25: ();
    let mut _26: &str;
    let _27: &str;
    let mut _28: &std::string::String;
    let _29: &std::string::String;
    let _30: std::string::String;
    let mut _32: std::fmt::Arguments<'_>;
    let mut _33: &[&str];
    let mut _34: &[&str; 1];
    let _35: &[&str; 1];
    let _36: [&str; 1];
    let mut _37: &[core::fmt::rt::Argument<'_>];
    let mut _38: &[core::fmt::rt::Argument<'_>; 1];
    let _39: &[core::fmt::rt::Argument<'_>; 1];
    let _40: [core::fmt::rt::Argument<'_>; 1];
    let mut _41: core::fmt::rt::Argument<'_>;
    let mut _42: &u16;
    let _43: &u16;
    let _44: &state::perp_market::PerpMarket;
    let mut _45: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _46: ();
    let mut _47: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _48: std::result::Result<(), error::ErrorCode>;
    let mut _49: bool;
    let mut _50: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _51: std::result::Result<bool, error::ErrorCode>;
    let mut _52: u64;
    let mut _53: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _54: std::result::Result<u64, error::ErrorCode>;
    let mut _55: u128;
    let mut _56: isize;
    let mut _58: !;
    let mut _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _61: u64;
    let mut _62: &state::perp_market::PerpMarket;
    let mut _63: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _64: isize;
    let mut _66: !;
    let mut _67: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _69: ();
    let _71: ();
    let mut _72: &str;
    let _73: &str;
    let mut _74: &std::string::String;
    let _75: &std::string::String;
    let _76: std::string::String;
    let mut _78: std::fmt::Arguments<'_>;
    let mut _79: &[&str];
    let mut _80: &[&str; 2];
    let _81: &[&str; 2];
    let _82: [&str; 2];
    let mut _83: &[core::fmt::rt::Argument<'_>];
    let mut _84: &[core::fmt::rt::Argument<'_>; 1];
    let _85: &[core::fmt::rt::Argument<'_>; 1];
    let _86: [core::fmt::rt::Argument<'_>; 1];
    let mut _87: core::fmt::rt::Argument<'_>;
    let mut _88: &error::ErrorCode;
    let _89: &error::ErrorCode;
    let _90: ();
    let mut _91: &str;
    let _92: &str;
    let mut _93: error::ErrorCode;
    let mut _94: isize;
    let mut _96: !;
    let mut _97: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _99: ();
    let mut _100: &str;
    let _101: &str;
    let mut _102: &std::string::String;
    let _103: &std::string::String;
    let _104: std::string::String;
    let mut _106: std::fmt::Arguments<'_>;
    let mut _107: &[&str];
    let mut _108: &[&str; 2];
    let _109: &[&str; 2];
    let _110: [&str; 2];
    let mut _111: &[core::fmt::rt::Argument<'_>];
    let mut _112: &[core::fmt::rt::Argument<'_>; 2];
    let _113: &[core::fmt::rt::Argument<'_>; 2];
    let _114: [core::fmt::rt::Argument<'_>; 2];
    let mut _115: core::fmt::rt::Argument<'_>;
    let mut _116: &u128;
    let _117: &u128;
    let _118: &state::perp_market::PerpMarket;
    let mut _119: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _120: core::fmt::rt::Argument<'_>;
    let mut _121: &u128;
    let _122: &u128;
    let mut _123: u128;
    let mut _124: &mut state::perp_market::PerpMarket;
    let mut _125: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _126: ();
    let mut _130: &mut instructions::admin::AdminUpdatePerpMarket<'_>;
    let mut _131: &mut instructions::admin::AdminUpdatePerpMarket<'_>;
    let mut _132: isize;
    let mut _133: isize;
    let mut _134: isize;
    let mut _135: isize;
    let mut _136: isize;
    let mut _137: isize;
    let mut _138: isize;
    let mut _139: isize;
    let mut _140: isize;
    let mut _141: isize;
    scope 1 {
        debug residual => _9;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _12;
        scope 4 {
        }
    }
    scope 5 {
        debug perp_market => _13;
        let _31: std::string::String;
        let _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _60: u64;
        let _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _68: bool;
        let _70: error::ErrorCode;
        let _95: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _98: ();
        let _105: std::string::String;
        let mut _127: &[&str; 2];
        let mut _129: &[&str; 1];
        scope 10 {
            debug res => _31;
        }
        scope 11 {
            debug residual => _57;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _60;
            scope 14 {
            }
        }
        scope 15 {
            debug residual => _65;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _68;
            scope 18 {
            }
        }
        scope 19 {
            debug error_code => _70;
            let _77: std::string::String;
            let mut _128: &[&str; 2];
            scope 20 {
                debug res => _77;
            }
        }
        scope 21 {
            debug residual => _95;
            scope 22 {
            }
        }
        scope 23 {
            debug val => _98;
            scope 24 {
            }
        }
        scope 25 {
            debug res => _105;
        }
    }
    scope 6 {
        debug residual => _21;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _24;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _130 = deref_copy (_1.1: &mut instructions::admin::AdminUpdatePerpMarket<'_>);
        _7 = &((*_130).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _6 = &(*_7);
        _5 = constraints::perp_market_valid(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb63];
    }

    bb2: {
        StorageDead(_5);
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_4 as Continue).0: ());
        _3 = _12;
        StorageDead(_12);
        _132 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _131 = deref_copy (_1.1: &mut instructions::admin::AdminUpdatePerpMarket<'_>);
        _18 = &((*_131).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _17 = anchor_lang::prelude::AccountLoader::<'_, PerpMarket>::load_mut(move _18) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _11) -> [return: bb6, unwind: bb65];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _138 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb58;
    }

    bb7: {
        StorageDead(_18);
        StorageLive(_19);
        _19 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _16 = std::result::Result::<RefMut<'_, PerpMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _17, move _19) -> [return: bb8, unwind: bb63];
    }

    bb8: {
        StorageDead(_19);
        StorageDead(_17);
        _15 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _16) -> [return: bb9, unwind: bb63];
    }

    bb9: {
        StorageDead(_16);
        _20 = discriminant(_15);
        switchInt(move _20) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_24);
        _24 = move ((_15 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _14 = move _24;
        StorageDead(_24);
        _13 = &mut _14;
        _136 = discriminant(_15);
        StorageDead(_15);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _129 = const _;
        _35 = &(*_129);
        _34 = &(*_35);
        _33 = move _34 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_34);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = &(*_13);
        _44 = <RefMut<'_, PerpMarket> as Deref>::deref(move _45) -> [return: bb13, unwind: bb62];
    }

    bb11: {
        StorageLive(_21);
        _21 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_23);
        _23 = _21;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _23) -> [return: bb12, unwind: bb64];
    }

    bb12: {
        StorageDead(_23);
        StorageDead(_21);
        _134 = discriminant(_15);
        StorageDead(_15);
        goto -> bb57;
    }

    bb13: {
        StorageDead(_45);
        _43 = &((*_44).21: u16);
        _42 = &(*_43);
        _41 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _42) -> [return: bb14, unwind: bb62];
    }

    bb14: {
        StorageDead(_42);
        _40 = [move _41];
        StorageDead(_41);
        _39 = &_40;
        _38 = &(*_39);
        _37 = move _38 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_38);
        _32 = Arguments::<'_>::new_v1(move _33, move _37) -> [return: bb15, unwind: bb62];
    }

    bb15: {
        StorageDead(_37);
        StorageDead(_33);
        _31 = format(move _32) -> [return: bb16, unwind: bb62];
    }

    bb16: {
        StorageDead(_32);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_35);
        _30 = move _31;
        StorageDead(_31);
        _29 = &_30;
        _28 = &(*_29);
        _27 = <String as Deref>::deref(move _28) -> [return: bb17, unwind: bb61];
    }

    bb17: {
        _26 = &(*_27);
        StorageDead(_28);
        _25 = solana_program::log::sol_log(move _26) -> [return: bb18, unwind: bb61];
    }

    bb18: {
        StorageDead(_26);
        drop(_30) -> [return: bb19, unwind: bb62];
    }

    bb19: {
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_25);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = _2;
        _54 = <u128 as Cast>::cast::<u64>(move _55) -> [return: bb20, unwind: bb62];
    }

    bb20: {
        StorageDead(_55);
        _53 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _54) -> [return: bb21, unwind: bb62];
    }

    bb21: {
        StorageDead(_54);
        _56 = discriminant(_53);
        switchInt(move _56) -> [0: bb22, 1: bb23, otherwise: bb4];
    }

    bb22: {
        StorageLive(_60);
        _60 = ((_53 as Continue).0: u64);
        _52 = _60;
        StorageDead(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = &(*_13);
        _62 = <RefMut<'_, PerpMarket> as Deref>::deref(move _63) -> [return: bb25, unwind: bb62];
    }

    bb23: {
        StorageLive(_57);
        _57 = ((_53 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_59);
        _59 = _57;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _59) -> [return: bb24, unwind: bb62];
    }

    bb24: {
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_52);
        StorageDead(_51);
        goto -> bb55;
    }

    bb25: {
        StorageDead(_63);
        _61 = (((*_62).1: state::perp_market::AMM).52: u64);
        _51 = math::orders::is_multiple_of_step_size(move _52, move _61) -> [return: bb26, unwind: bb62];
    }

    bb26: {
        StorageDead(_61);
        StorageDead(_52);
        _50 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _51) -> [return: bb27, unwind: bb62];
    }

    bb27: {
        StorageDead(_51);
        _64 = discriminant(_50);
        switchInt(move _64) -> [0: bb28, 1: bb29, otherwise: bb4];
    }

    bb28: {
        StorageLive(_68);
        _68 = ((_50 as Continue).0: bool);
        _49 = _68;
        StorageDead(_68);
        switchInt(move _49) -> [0: bb32, otherwise: bb31];
    }

    bb29: {
        StorageLive(_65);
        _65 = ((_50 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_67);
        _67 = _65;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _67) -> [return: bb30, unwind: bb62];
    }

    bb30: {
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_62);
        goto -> bb55;
    }

    bb31: {
        StorageDead(_62);
        StorageDead(_53);
        StorageDead(_50);
        StorageLive(_69);
        _69 = ();
        _48 = std::result::Result::<(), error::ErrorCode>::Ok(move _69);
        StorageDead(_69);
        goto -> bb40;
    }

    bb32: {
        StorageDead(_62);
        StorageDead(_53);
        StorageDead(_50);
        StorageLive(_70);
        _70 = error::ErrorCode::DefaultError;
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        _128 = const _;
        _81 = &(*_128);
        _80 = &(*_81);
        _79 = move _80 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_80);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = &_70;
        _88 = &(*_89);
        _87 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _88) -> [return: bb33, unwind: bb62];
    }

    bb33: {
        StorageDead(_88);
        _86 = [move _87];
        StorageDead(_87);
        _85 = &_86;
        _84 = &(*_85);
        _83 = move _84 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_84);
        _78 = Arguments::<'_>::new_v1(move _79, move _83) -> [return: bb34, unwind: bb62];
    }

    bb34: {
        StorageDead(_83);
        StorageDead(_79);
        _77 = format(move _78) -> [return: bb35, unwind: bb62];
    }

    bb35: {
        StorageDead(_78);
        StorageDead(_89);
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_81);
        _76 = move _77;
        StorageDead(_77);
        _75 = &_76;
        _74 = &(*_75);
        _73 = <String as Deref>::deref(move _74) -> [return: bb36, unwind: bb60];
    }

    bb36: {
        _72 = &(*_73);
        StorageDead(_74);
        _71 = solana_program::log::sol_log(move _72) -> [return: bb37, unwind: bb60];
    }

    bb37: {
        StorageDead(_72);
        drop(_76) -> [return: bb38, unwind: bb62];
    }

    bb38: {
        StorageDead(_76);
        StorageDead(_75);
        StorageDead(_73);
        StorageDead(_71);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _92 = const "max oi not a multiple of the step size";
        _91 = &(*_92);
        _90 = solana_program::log::sol_log(move _91) -> [return: bb39, unwind: bb62];
    }

    bb39: {
        StorageDead(_91);
        StorageDead(_92);
        StorageDead(_90);
        StorageLive(_93);
        _93 = _70;
        _48 = std::result::Result::<(), error::ErrorCode>::Err(move _93);
        StorageDead(_93);
        StorageDead(_70);
        goto -> bb40;
    }

    bb40: {
        StorageDead(_49);
        _47 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _48) -> [return: bb41, unwind: bb62];
    }

    bb41: {
        StorageDead(_48);
        _94 = discriminant(_47);
        switchInt(move _94) -> [0: bb42, 1: bb43, otherwise: bb4];
    }

    bb42: {
        StorageLive(_98);
        _98 = ((_47 as Continue).0: ());
        _46 = _98;
        StorageDead(_98);
        StorageDead(_47);
        StorageDead(_46);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        _127 = const _;
        _109 = &(*_127);
        _108 = &(*_109);
        _107 = move _108 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_108);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        _119 = &(*_13);
        _118 = <RefMut<'_, PerpMarket> as Deref>::deref(move _119) -> [return: bb45, unwind: bb62];
    }

    bb43: {
        StorageLive(_95);
        _95 = ((_47 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_97);
        _97 = _95;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _97) -> [return: bb44, unwind: bb62];
    }

    bb44: {
        StorageDead(_97);
        StorageDead(_95);
        goto -> bb56;
    }

    bb45: {
        StorageDead(_119);
        _117 = &(((*_118).1: state::perp_market::AMM).17: u128);
        _116 = &(*_117);
        _115 = core::fmt::rt::Argument::<'_>::new_debug::<u128>(move _116) -> [return: bb46, unwind: bb62];
    }

    bb46: {
        StorageDead(_116);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        _122 = &_2;
        _121 = &(*_122);
        _120 = core::fmt::rt::Argument::<'_>::new_debug::<u128>(move _121) -> [return: bb47, unwind: bb62];
    }

    bb47: {
        StorageDead(_121);
        _114 = [move _115, move _120];
        StorageDead(_120);
        StorageDead(_115);
        _113 = &_114;
        _112 = &(*_113);
        _111 = move _112 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_112);
        _106 = Arguments::<'_>::new_v1(move _107, move _111) -> [return: bb48, unwind: bb62];
    }

    bb48: {
        StorageDead(_111);
        StorageDead(_107);
        _105 = format(move _106) -> [return: bb49, unwind: bb62];
    }

    bb49: {
        StorageDead(_106);
        StorageDead(_122);
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_114);
        StorageDead(_113);
        StorageDead(_109);
        _104 = move _105;
        StorageDead(_105);
        _103 = &_104;
        _102 = &(*_103);
        _101 = <String as Deref>::deref(move _102) -> [return: bb50, unwind: bb59];
    }

    bb50: {
        _100 = &(*_101);
        StorageDead(_102);
        _99 = solana_program::log::sol_log(move _100) -> [return: bb51, unwind: bb59];
    }

    bb51: {
        StorageDead(_100);
        drop(_104) -> [return: bb52, unwind: bb62];
    }

    bb52: {
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_101);
        StorageDead(_99);
        StorageLive(_123);
        _123 = _2;
        StorageLive(_124);
        StorageLive(_125);
        _125 = &mut (*_13);
        _124 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _125) -> [return: bb53, unwind: bb62];
    }

    bb53: {
        StorageDead(_125);
        (((*_124).1: state::perp_market::AMM).17: u128) = move _123;
        StorageDead(_123);
        StorageDead(_124);
        StorageLive(_126);
        _126 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _126);
        StorageDead(_126);
        drop(_14) -> [return: bb54, unwind: bb63];
    }

    bb54: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb58;
    }

    bb55: {
        StorageDead(_53);
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_48);
        goto -> bb56;
    }

    bb56: {
        StorageDead(_47);
        StorageDead(_46);
        drop(_14) -> [return: bb57, unwind: bb63];
    }

    bb57: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb58;
    }

    bb58: {
        return;
    }

    bb59 (cleanup): {
        drop(_104) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_76) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_30) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_14) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        resume;
    }

    bb64 (cleanup): {
        _140 = discriminant(_15);
        goto -> bb63;
    }

    bb65 (cleanup): {
        _141 = discriminant(_4);
        goto -> bb63;
    }
}
