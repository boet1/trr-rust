// MIR for `instructions::user::handle_reclaim_rent` before PreCodegen

fn instructions::user::handle_reclaim_rent(_1: anchor_lang::context::Context<'_, '_, '_, '_, instructions::user::ReclaimRent<'_>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: usize;
    let mut _3: &anchor_lang::prelude::AccountInfo<'_>;
    let _4: anchor_lang::prelude::AccountInfo<'_>;
    let mut _5: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _7: &anchor_lang::prelude::Rent;
    let _8: &anchor_lang::prelude::Rent;
    let mut _9: &anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
    let mut _10: usize;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, u64>;
    let mut _13: std::result::Result<u64, anchor_lang::prelude::ProgramError>;
    let mut _14: &anchor_lang::prelude::AccountInfo<'_>;
    let _15: anchor_lang::prelude::AccountInfo<'_>;
    let mut _16: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _17: isize;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _23: u64;
    let mut _24: u64;
    let _25: ();
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _27: std::result::Result<(), error::ErrorCode>;
    let mut _28: bool;
    let mut _29: u64;
    let mut _30: ();
    let _32: ();
    let mut _33: &str;
    let _34: &str;
    let mut _35: &std::string::String;
    let _36: &std::string::String;
    let _37: std::string::String;
    let mut _39: std::fmt::Arguments<'_>;
    let mut _40: &[&str];
    let mut _41: &[&str; 2];
    let _42: &[&str; 2];
    let _43: [&str; 2];
    let mut _44: &[core::fmt::rt::Argument<'_>];
    let mut _45: &[core::fmt::rt::Argument<'_>; 1];
    let _46: &[core::fmt::rt::Argument<'_>; 1];
    let _47: [core::fmt::rt::Argument<'_>; 1];
    let mut _48: core::fmt::rt::Argument<'_>;
    let mut _49: &error::ErrorCode;
    let _50: &error::ErrorCode;
    let _51: ();
    let mut _52: &str;
    let _53: &str;
    let mut _54: error::ErrorCode;
    let mut _55: isize;
    let mut _57: !;
    let mut _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _60: u64;
    let mut _61: &mut &mut u64;
    let mut _62: &mut std::cell::RefMut<'_, &mut u64>;
    let mut _63: std::cell::RefMut<'_, &mut u64>;
    let mut _64: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::cell::RefMut<'_, &mut u64>>;
    let mut _65: std::result::Result<std::cell::RefMut<'_, &mut u64>, anchor_lang::prelude::ProgramError>;
    let mut _66: &anchor_lang::prelude::AccountInfo<'_>;
    let _67: anchor_lang::prelude::AccountInfo<'_>;
    let mut _68: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _69: isize;
    let mut _71: !;
    let mut _72: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _74: u64;
    let mut _75: &mut &mut u64;
    let mut _76: &mut std::cell::RefMut<'_, &mut u64>;
    let mut _77: std::cell::RefMut<'_, &mut u64>;
    let mut _78: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::cell::RefMut<'_, &mut u64>>;
    let mut _79: std::result::Result<std::cell::RefMut<'_, &mut u64>, anchor_lang::prelude::ProgramError>;
    let mut _80: &anchor_lang::prelude::AccountInfo<'_>;
    let _81: anchor_lang::prelude::AccountInfo<'_>;
    let mut _82: &anchor_lang::prelude::Signer<'_>;
    let mut _83: isize;
    let mut _85: !;
    let mut _86: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _88: (u64, bool);
    let mut _90: std::cell::Ref<'_, state::user::UserStats>;
    let mut _91: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::user::UserStats>>;
    let mut _92: std::result::Result<std::cell::Ref<'_, state::user::UserStats>, error::ErrorCode>;
    let mut _93: std::result::Result<std::cell::Ref<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _94: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _95: {closure@programs/drift/src/macros.rs:70:40: 70:43};
    let mut _96: isize;
    let mut _98: !;
    let mut _99: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _102: &state::state::State;
    let _103: &state::state::State;
    let mut _104: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _106: &state::user::UserStats;
    let _107: &state::user::UserStats;
    let mut _108: &std::cell::Ref<'_, state::user::UserStats>;
    let mut _109: i64;
    let mut _110: anchor_lang::prelude::Clock;
    let mut _111: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _112: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _113: isize;
    let mut _115: !;
    let mut _116: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _118: ();
    let mut _119: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _120: std::result::Result<(), error::ErrorCode>;
    let mut _121: bool;
    let mut _122: u64;
    let mut _123: bool;
    let mut _124: i64;
    let mut _125: ();
    let _127: ();
    let mut _128: &str;
    let _129: &str;
    let mut _130: &std::string::String;
    let _131: &std::string::String;
    let _132: std::string::String;
    let mut _134: std::fmt::Arguments<'_>;
    let mut _135: &[&str];
    let mut _136: &[&str; 2];
    let _137: &[&str; 2];
    let _138: [&str; 2];
    let mut _139: &[core::fmt::rt::Argument<'_>];
    let mut _140: &[core::fmt::rt::Argument<'_>; 1];
    let _141: &[core::fmt::rt::Argument<'_>; 1];
    let _142: [core::fmt::rt::Argument<'_>; 1];
    let mut _143: core::fmt::rt::Argument<'_>;
    let mut _144: &error::ErrorCode;
    let _145: &error::ErrorCode;
    let _146: ();
    let mut _147: &str;
    let _148: &str;
    let mut _149: &std::string::String;
    let _150: &std::string::String;
    let _151: std::string::String;
    let mut _153: std::fmt::Arguments<'_>;
    let mut _154: &[&str];
    let mut _155: &[&str; 2];
    let _156: &[&str; 2];
    let _157: [&str; 2];
    let mut _158: &[core::fmt::rt::Argument<'_>];
    let mut _159: &[core::fmt::rt::Argument<'_>; 2];
    let _160: &[core::fmt::rt::Argument<'_>; 2];
    let _161: [core::fmt::rt::Argument<'_>; 2];
    let mut _162: core::fmt::rt::Argument<'_>;
    let mut _163: &i64;
    let _164: &i64;
    let mut _165: core::fmt::rt::Argument<'_>;
    let mut _166: &i64;
    let _167: &i64;
    let _168: i64;
    let mut _169: error::ErrorCode;
    let mut _170: isize;
    let mut _172: !;
    let mut _173: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _175: ();
    let mut _180: &mut instructions::user::ReclaimRent<'_>;
    let mut _181: &mut instructions::user::ReclaimRent<'_>;
    let mut _182: &mut instructions::user::ReclaimRent<'_>;
    let mut _183: &mut instructions::user::ReclaimRent<'_>;
    let mut _184: &mut u64;
    let mut _185: &mut instructions::user::ReclaimRent<'_>;
    let mut _186: &mut u64;
    let mut _187: &mut u64;
    let mut _188: &mut u64;
    let mut _189: &mut instructions::user::ReclaimRent<'_>;
    let mut _190: &mut instructions::user::ReclaimRent<'_>;
    let mut _191: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _192: bool;
    let mut _193: bool;
    let mut _194: bool;
    let mut _195: bool;
    let mut _196: bool;
    let mut _197: bool;
    let mut _198: isize;
    let mut _199: isize;
    let mut _200: isize;
    let mut _201: isize;
    let mut _202: isize;
    let mut _203: isize;
    let mut _204: isize;
    let mut _205: isize;
    let mut _206: isize;
    let mut _207: isize;
    let mut _208: isize;
    let mut _209: isize;
    let mut _210: isize;
    let mut _211: isize;
    let mut _212: isize;
    let mut _213: isize;
    let mut _214: isize;
    let mut _215: isize;
    let mut _216: isize;
    let mut _217: isize;
    let mut _218: isize;
    let mut _219: isize;
    let mut _220: isize;
    let mut _221: isize;
    let mut _222: isize;
    let mut _223: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug user_size => _2;
        let _6: u64;
        scope 2 {
            debug minimum_lamports => _6;
            let _11: u64;
            let _18: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
            let _21: u64;
            scope 3 {
                debug current_lamports => _11;
                let _22: u64;
                scope 8 {
                    debug reclaim_amount => _22;
                    let _31: error::ErrorCode;
                    let _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _59: ();
                    let _70: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                    let _73: std::cell::RefMut<'_, &mut u64>;
                    let _84: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                    let _87: std::cell::RefMut<'_, &mut u64>;
                    let _89: &mut std::cell::Ref<'_, state::user::UserStats>;
                    let _97: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _100: std::cell::Ref<'_, state::user::UserStats>;
                    scope 9 {
                        debug error_code => _31;
                        let _38: std::string::String;
                        let mut _179: &[&str; 2];
                        scope 10 {
                            debug res => _38;
                        }
                    }
                    scope 11 {
                        debug residual => _56;
                        scope 12 {
                        }
                    }
                    scope 13 {
                        debug val => _59;
                        scope 14 {
                        }
                    }
                    scope 15 {
                        debug residual => _70;
                        scope 16 {
                        }
                    }
                    scope 17 {
                        debug val => _73;
                        scope 18 {
                        }
                    }
                    scope 19 {
                        debug residual => _84;
                        scope 20 {
                        }
                    }
                    scope 21 {
                        debug val => _87;
                        scope 22 {
                        }
                    }
                    scope 23 {
                        debug user_stats => _89;
                        let _101: u64;
                        scope 28 {
                            debug max_sub_accounts => _101;
                            let _105: i64;
                            let _114: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                            let _117: anchor_lang::prelude::Clock;
                            scope 29 {
                                debug estimated_user_stats_age => _105;
                                let _126: error::ErrorCode;
                                let _171: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _174: ();
                                scope 34 {
                                    debug error_code => _126;
                                    let _133: std::string::String;
                                    let _152: std::string::String;
                                    let mut _176: &i64;
                                    let mut _177: &[&str; 2];
                                    let mut _178: &[&str; 2];
                                    scope 35 {
                                        debug res => _133;
                                    }
                                    scope 36 {
                                        debug res => _152;
                                    }
                                }
                                scope 37 {
                                    debug residual => _171;
                                    scope 38 {
                                    }
                                }
                                scope 39 {
                                    debug val => _174;
                                    scope 40 {
                                    }
                                }
                            }
                            scope 30 {
                                debug residual => _114;
                                scope 31 {
                                }
                            }
                            scope 32 {
                                debug val => _117;
                                scope 33 {
                                }
                            }
                        }
                    }
                    scope 24 {
                        debug residual => _97;
                        scope 25 {
                        }
                    }
                    scope 26 {
                        debug val => _100;
                        scope 27 {
                        }
                    }
                }
            }
            scope 4 {
                debug residual => _18;
                scope 5 {
                }
            }
            scope 6 {
                debug val => _21;
                scope 7 {
                }
            }
        }
    }

    bb0: {
        _197 = const false;
        _196 = const false;
        _195 = const false;
        _194 = const false;
        _193 = const false;
        _192 = const false;
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _180 = deref_copy (_1.1: &mut instructions::user::ReclaimRent<'_>);
        _5 = &((*_180).0: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _4 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &_4;
        StorageDead(_5);
        _2 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _3) -> [return: bb2, unwind: bb101];
    }

    bb2: {
        StorageDead(_3);
        drop(_4) -> [return: bb3, unwind: bb102];
    }

    bb3: {
        StorageDead(_4);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _181 = deref_copy (_1.1: &mut instructions::user::ReclaimRent<'_>);
        _9 = &((*_181).4: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>);
        _8 = <anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent> as Deref>::deref(move _9) -> [return: bb4, unwind continue];
    }

    bb4: {
        _7 = &(*_8);
        StorageDead(_9);
        StorageLive(_10);
        _10 = _2;
        _6 = anchor_lang::prelude::Rent::minimum_balance(move _7, move _10) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_8);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _182 = deref_copy (_1.1: &mut instructions::user::ReclaimRent<'_>);
        _16 = &((*_182).0: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _15 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _16) -> [return: bb6, unwind continue];
    }

    bb6: {
        _14 = &_15;
        StorageDead(_16);
        _13 = anchor_lang::prelude::AccountInfo::<'_>::try_lamports(move _14) -> [return: bb7, unwind: bb100];
    }

    bb7: {
        StorageDead(_14);
        _12 = <std::result::Result<u64, anchor_lang::prelude::ProgramError> as Try>::branch(move _13) -> [return: bb8, unwind: bb100];
    }

    bb8: {
        StorageDead(_13);
        _17 = discriminant(_12);
        switchInt(move _17) -> [0: bb9, 1: bb11, otherwise: bb10];
    }

    bb9: {
        StorageLive(_21);
        _21 = ((_12 as Continue).0: u64);
        _11 = _21;
        StorageDead(_21);
        _198 = discriminant(_12);
        drop(_15) -> [return: bb13, unwind: bb102];
    }

    bb10: {
        unreachable;
    }

    bb11: {
        StorageLive(_18);
        _18 = move ((_12 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_20);
        _20 = move _18;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _20) -> [return: bb12, unwind: bb109];
    }

    bb12: {
        StorageDead(_20);
        StorageDead(_18);
        _216 = discriminant(_12);
        drop(_15) -> [return: bb89, unwind: bb102];
    }

    bb13: {
        StorageDead(_15);
        StorageDead(_12);
        StorageLive(_22);
        StorageLive(_23);
        _23 = _11;
        StorageLive(_24);
        _24 = _6;
        _22 = core::num::<impl u64>::saturating_sub(move _23, move _24) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_24);
        StorageDead(_23);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = _22;
        _28 = Gt(move _29, const 0_u64);
        switchInt(move _28) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        StorageDead(_29);
        StorageLive(_30);
        _30 = ();
        _27 = std::result::Result::<(), error::ErrorCode>::Ok(move _30);
        StorageDead(_30);
        goto -> bb24;
    }

    bb16: {
        StorageDead(_29);
        StorageLive(_31);
        _31 = error::ErrorCode::CantReclaimRent;
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _179 = const _;
        _42 = &(*_179);
        _41 = &(*_42);
        _40 = move _41 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_41);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = &_31;
        _49 = &(*_50);
        _48 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _49) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_49);
        _47 = [move _48];
        StorageDead(_48);
        _46 = &_47;
        _45 = &(*_46);
        _44 = move _45 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_45);
        _39 = Arguments::<'_>::new_v1(move _40, move _44) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_44);
        StorageDead(_40);
        _38 = format(move _39) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_39);
        StorageDead(_50);
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_42);
        _37 = move _38;
        StorageDead(_38);
        _36 = &_37;
        _35 = &(*_36);
        _34 = <String as Deref>::deref(move _35) -> [return: bb20, unwind: bb99];
    }

    bb20: {
        _33 = &(*_34);
        StorageDead(_35);
        _32 = solana_program::log::sol_log(move _33) -> [return: bb21, unwind: bb99];
    }

    bb21: {
        StorageDead(_33);
        drop(_37) -> [return: bb22, unwind: bb102];
    }

    bb22: {
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_34);
        StorageDead(_32);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = const "user account has no excess lamports to reclaim";
        _52 = &(*_53);
        _51 = solana_program::log::sol_log(move _52) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_52);
        StorageDead(_53);
        StorageDead(_51);
        StorageLive(_54);
        _54 = _31;
        _27 = std::result::Result::<(), error::ErrorCode>::Err(move _54);
        StorageDead(_54);
        StorageDead(_31);
        goto -> bb24;
    }

    bb24: {
        StorageDead(_28);
        _26 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _27) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_27);
        _55 = discriminant(_26);
        switchInt(move _55) -> [0: bb26, 1: bb27, otherwise: bb10];
    }

    bb26: {
        StorageLive(_59);
        _59 = ((_26 as Continue).0: ());
        _25 = _59;
        StorageDead(_59);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_60);
        _60 = _6;
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _183 = deref_copy (_1.1: &mut instructions::user::ReclaimRent<'_>);
        _68 = &((*_183).0: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _67 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _68) -> [return: bb29, unwind continue];
    }

    bb27: {
        StorageLive(_56);
        _56 = ((_26 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_58);
        _58 = _56;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _58) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb88;
    }

    bb29: {
        _66 = &_67;
        StorageDead(_68);
        _65 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_mut_lamports(move _66) -> [return: bb30, unwind: bb98];
    }

    bb30: {
        StorageDead(_66);
        _64 = <std::result::Result<RefMut<'_, &mut u64>, anchor_lang::prelude::ProgramError> as Try>::branch(move _65) -> [return: bb31, unwind: bb98];
    }

    bb31: {
        _196 = const true;
        _197 = const true;
        StorageDead(_65);
        _69 = discriminant(_64);
        switchInt(move _69) -> [0: bb32, 1: bb33, otherwise: bb10];
    }

    bb32: {
        StorageLive(_73);
        _73 = move ((_64 as Continue).0: std::cell::RefMut<'_, &mut u64>);
        _63 = move _73;
        StorageDead(_73);
        _62 = &mut _63;
        _61 = <RefMut<'_, &mut u64> as DerefMut>::deref_mut(move _62) -> [return: bb35, unwind: bb97];
    }

    bb33: {
        StorageLive(_70);
        _70 = move ((_64 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_72);
        _72 = move _70;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _72) -> [return: bb34, unwind: bb108];
    }

    bb34: {
        StorageDead(_72);
        StorageDead(_70);
        StorageDead(_62);
        StorageDead(_60);
        _214 = discriminant(_64);
        drop(_67) -> [return: bb87, unwind: bb102];
    }

    bb35: {
        StorageDead(_62);
        _184 = deref_copy (*_61);
        (*_184) = move _60;
        StorageDead(_60);
        drop(_63) -> [return: bb103, unwind: bb108];
    }

    bb36: {
        StorageDead(_67);
        _196 = const false;
        _197 = const false;
        StorageDead(_64);
        StorageDead(_63);
        StorageDead(_61);
        StorageLive(_74);
        _74 = _22;
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _185 = deref_copy (_1.1: &mut instructions::user::ReclaimRent<'_>);
        _82 = &((*_185).3: anchor_lang::prelude::Signer<'_>);
        _81 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _82) -> [return: bb37, unwind continue];
    }

    bb37: {
        _80 = &_81;
        StorageDead(_82);
        _79 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_mut_lamports(move _80) -> [return: bb38, unwind: bb96];
    }

    bb38: {
        StorageDead(_80);
        _78 = <std::result::Result<RefMut<'_, &mut u64>, anchor_lang::prelude::ProgramError> as Try>::branch(move _79) -> [return: bb39, unwind: bb96];
    }

    bb39: {
        _194 = const true;
        _195 = const true;
        StorageDead(_79);
        _83 = discriminant(_78);
        switchInt(move _83) -> [0: bb40, 1: bb41, otherwise: bb10];
    }

    bb40: {
        StorageLive(_87);
        _87 = move ((_78 as Continue).0: std::cell::RefMut<'_, &mut u64>);
        _77 = move _87;
        StorageDead(_87);
        _76 = &mut _77;
        _75 = <RefMut<'_, &mut u64> as DerefMut>::deref_mut(move _76) -> [return: bb43, unwind: bb95];
    }

    bb41: {
        StorageLive(_84);
        _84 = move ((_78 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_86);
        _86 = move _84;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _86) -> [return: bb42, unwind: bb107];
    }

    bb42: {
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_76);
        StorageDead(_74);
        _212 = discriminant(_78);
        drop(_81) -> [return: bb86, unwind: bb102];
    }

    bb43: {
        StorageDead(_76);
        _186 = deref_copy (*_75);
        _88 = CheckedAdd((*_186), _74);
        _187 = deref_copy (*_75);
        assert(!move (_88.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_187), move _74) -> [success: bb44, unwind: bb95];
    }

    bb44: {
        _188 = deref_copy (*_75);
        (*_188) = move (_88.0: u64);
        StorageDead(_74);
        drop(_77) -> [return: bb104, unwind: bb107];
    }

    bb45: {
        StorageDead(_81);
        _194 = const false;
        _195 = const false;
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_75);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _189 = deref_copy (_1.1: &mut instructions::user::ReclaimRent<'_>);
        _94 = &((*_189).1: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _93 = anchor_lang::prelude::AccountLoader::<'_, UserStats>::load(move _94) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_94);
        StorageLive(_95);
        _95 = {closure@programs/drift/src/macros.rs:70:40: 70:43};
        _92 = std::result::Result::<Ref<'_, UserStats>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:70:40: 70:43}>(move _93, move _95) -> [return: bb47, unwind: bb102];
    }

    bb47: {
        StorageDead(_95);
        StorageDead(_93);
        _91 = <std::result::Result<Ref<'_, UserStats>, error::ErrorCode> as Try>::branch(move _92) -> [return: bb48, unwind: bb102];
    }

    bb48: {
        StorageDead(_92);
        _96 = discriminant(_91);
        switchInt(move _96) -> [0: bb49, 1: bb50, otherwise: bb10];
    }

    bb49: {
        StorageLive(_100);
        _100 = move ((_91 as Continue).0: std::cell::Ref<'_, state::user::UserStats>);
        _90 = move _100;
        StorageDead(_100);
        _89 = &mut _90;
        _206 = discriminant(_91);
        StorageDead(_91);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _190 = deref_copy (_1.1: &mut instructions::user::ReclaimRent<'_>);
        _191 = deref_copy ((*_190).2: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _223 = (((_191.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _104 = &(*_223);
        _103 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _104) -> [return: bb52, unwind: bb94];
    }

    bb50: {
        StorageLive(_97);
        _97 = ((_91 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_99);
        _99 = _97;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _99) -> [return: bb51, unwind: bb106];
    }

    bb51: {
        StorageDead(_99);
        StorageDead(_97);
        _204 = discriminant(_91);
        StorageDead(_91);
        goto -> bb85;
    }

    bb52: {
        _102 = &(*_103);
        StorageDead(_104);
        _101 = state::state::State::max_number_of_sub_accounts(move _102) -> [return: bb53, unwind: bb94];
    }

    bb53: {
        StorageDead(_102);
        StorageDead(_103);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        _108 = &(*_89);
        _107 = <Ref<'_, UserStats> as Deref>::deref(move _108) -> [return: bb54, unwind: bb94];
    }

    bb54: {
        _106 = &(*_107);
        StorageDead(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _112 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb55, unwind: bb94];
    }

    bb55: {
        _111 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _112) -> [return: bb56, unwind: bb94];
    }

    bb56: {
        _192 = const true;
        _193 = const true;
        StorageDead(_112);
        _113 = discriminant(_111);
        switchInt(move _113) -> [0: bb57, 1: bb58, otherwise: bb10];
    }

    bb57: {
        StorageLive(_117);
        _117 = move ((_111 as Continue).0: anchor_lang::prelude::Clock);
        _110 = move _117;
        StorageDead(_117);
        _109 = (_110.4: i64);
        _105 = UserStats::get_age_ts(move _106, move _109) -> [return: bb60, unwind: bb105];
    }

    bb58: {
        StorageLive(_114);
        _114 = move ((_111 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_116);
        _116 = move _114;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _116) -> [return: bb59, unwind: bb105];
    }

    bb59: {
        StorageDead(_116);
        StorageDead(_114);
        StorageDead(_109);
        StorageDead(_106);
        _210 = discriminant(_111);
        _192 = const false;
        _193 = const false;
        StorageDead(_111);
        StorageDead(_110);
        StorageDead(_107);
        goto -> bb84;
    }

    bb60: {
        StorageDead(_109);
        StorageDead(_106);
        _208 = discriminant(_111);
        _192 = const false;
        _193 = const false;
        StorageDead(_111);
        StorageDead(_110);
        StorageDead(_107);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        _122 = _101;
        _121 = Eq(move _122, const 0_u64);
        switchInt(move _121) -> [0: bb62, otherwise: bb61];
    }

    bb61: {
        StorageDead(_122);
        goto -> bb63;
    }

    bb62: {
        StorageDead(_122);
        StorageLive(_123);
        StorageLive(_124);
        _124 = _105;
        _123 = Ge(move _124, const _);
        switchInt(move _123) -> [0: bb64, otherwise: bb63];
    }

    bb63: {
        StorageDead(_124);
        StorageLive(_125);
        _125 = ();
        _120 = std::result::Result::<(), error::ErrorCode>::Ok(move _125);
        StorageDead(_125);
        goto -> bb78;
    }

    bb64: {
        StorageDead(_124);
        StorageLive(_126);
        _126 = error::ErrorCode::CantReclaimRent;
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        _178 = const _;
        _137 = &(*_178);
        _136 = &(*_137);
        _135 = move _136 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_136);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        _145 = &_126;
        _144 = &(*_145);
        _143 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _144) -> [return: bb65, unwind: bb94];
    }

    bb65: {
        StorageDead(_144);
        _142 = [move _143];
        StorageDead(_143);
        _141 = &_142;
        _140 = &(*_141);
        _139 = move _140 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_140);
        _134 = Arguments::<'_>::new_v1(move _135, move _139) -> [return: bb66, unwind: bb94];
    }

    bb66: {
        StorageDead(_139);
        StorageDead(_135);
        _133 = format(move _134) -> [return: bb67, unwind: bb94];
    }

    bb67: {
        StorageDead(_134);
        StorageDead(_145);
        StorageDead(_142);
        StorageDead(_141);
        StorageDead(_137);
        _132 = move _133;
        StorageDead(_133);
        _131 = &_132;
        _130 = &(*_131);
        _129 = <String as Deref>::deref(move _130) -> [return: bb68, unwind: bb93];
    }

    bb68: {
        _128 = &(*_129);
        StorageDead(_130);
        _127 = solana_program::log::sol_log(move _128) -> [return: bb69, unwind: bb93];
    }

    bb69: {
        StorageDead(_128);
        drop(_132) -> [return: bb70, unwind: bb94];
    }

    bb70: {
        StorageDead(_132);
        StorageDead(_131);
        StorageDead(_129);
        StorageDead(_127);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        _177 = const _;
        _156 = &(*_177);
        _155 = &(*_156);
        _154 = move _155 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_155);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        _164 = &_105;
        _163 = &(*_164);
        _162 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _163) -> [return: bb71, unwind: bb94];
    }

    bb71: {
        StorageDead(_163);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        _176 = const _;
        _167 = &(*_176);
        _166 = &(*_167);
        _165 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _166) -> [return: bb72, unwind: bb94];
    }

    bb72: {
        StorageDead(_166);
        _161 = [move _162, move _165];
        StorageDead(_165);
        StorageDead(_162);
        _160 = &_161;
        _159 = &(*_160);
        _158 = move _159 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_159);
        _153 = Arguments::<'_>::new_v1(move _154, move _158) -> [return: bb73, unwind: bb94];
    }

    bb73: {
        StorageDead(_158);
        StorageDead(_154);
        _152 = format(move _153) -> [return: bb74, unwind: bb94];
    }

    bb74: {
        StorageDead(_153);
        StorageDead(_167);
        StorageDead(_164);
        StorageDead(_161);
        StorageDead(_160);
        StorageDead(_156);
        _151 = move _152;
        StorageDead(_152);
        _150 = &_151;
        _149 = &(*_150);
        _148 = <String as Deref>::deref(move _149) -> [return: bb75, unwind: bb92];
    }

    bb75: {
        _147 = &(*_148);
        StorageDead(_149);
        _146 = solana_program::log::sol_log(move _147) -> [return: bb76, unwind: bb92];
    }

    bb76: {
        StorageDead(_147);
        drop(_151) -> [return: bb77, unwind: bb94];
    }

    bb77: {
        StorageDead(_151);
        StorageDead(_150);
        StorageDead(_148);
        StorageDead(_146);
        StorageLive(_169);
        _169 = _126;
        _120 = std::result::Result::<(), error::ErrorCode>::Err(move _169);
        StorageDead(_169);
        StorageDead(_126);
        goto -> bb78;
    }

    bb78: {
        StorageDead(_123);
        StorageDead(_121);
        _119 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _120) -> [return: bb79, unwind: bb94];
    }

    bb79: {
        StorageDead(_120);
        _170 = discriminant(_119);
        switchInt(move _170) -> [0: bb80, 1: bb81, otherwise: bb10];
    }

    bb80: {
        StorageLive(_174);
        _174 = ((_119 as Continue).0: ());
        _118 = _174;
        StorageDead(_174);
        StorageDead(_119);
        StorageDead(_118);
        StorageLive(_175);
        _175 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _175);
        StorageDead(_175);
        StorageDead(_105);
        StorageDead(_101);
        drop(_90) -> [return: bb83, unwind: bb102];
    }

    bb81: {
        StorageLive(_171);
        _171 = ((_119 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_173);
        _173 = _171;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _173) -> [return: bb82, unwind: bb94];
    }

    bb82: {
        StorageDead(_173);
        StorageDead(_171);
        StorageDead(_119);
        StorageDead(_118);
        goto -> bb84;
    }

    bb83: {
        StorageDead(_90);
        StorageDead(_89);
        StorageDead(_22);
        StorageDead(_11);
        StorageDead(_6);
        StorageDead(_2);
        goto -> bb91;
    }

    bb84: {
        StorageDead(_105);
        StorageDead(_101);
        drop(_90) -> [return: bb85, unwind: bb102];
    }

    bb85: {
        StorageDead(_90);
        StorageDead(_89);
        goto -> bb88;
    }

    bb86: {
        StorageDead(_81);
        _194 = const false;
        _195 = const false;
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_75);
        goto -> bb88;
    }

    bb87: {
        StorageDead(_67);
        _196 = const false;
        _197 = const false;
        StorageDead(_64);
        StorageDead(_63);
        StorageDead(_61);
        goto -> bb88;
    }

    bb88: {
        StorageDead(_22);
        goto -> bb90;
    }

    bb89: {
        StorageDead(_15);
        StorageDead(_12);
        goto -> bb90;
    }

    bb90: {
        StorageDead(_11);
        StorageDead(_6);
        StorageDead(_2);
        goto -> bb91;
    }

    bb91: {
        return;
    }

    bb92 (cleanup): {
        drop(_151) -> [return: bb94, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        drop(_132) -> [return: bb94, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        drop(_90) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        drop(_77) -> [return: bb107, unwind terminate(cleanup)];
    }

    bb96 (cleanup): {
        drop(_81) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        drop(_63) -> [return: bb108, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        drop(_67) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        drop(_37) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb100 (cleanup): {
        drop(_15) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb101 (cleanup): {
        drop(_4) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb102 (cleanup): {
        resume;
    }

    bb103: {
        _200 = discriminant(_64);
        drop(_67) -> [return: bb36, unwind: bb102];
    }

    bb104: {
        _202 = discriminant(_78);
        drop(_81) -> [return: bb45, unwind: bb102];
    }

    bb105 (cleanup): {
        _218 = discriminant(_111);
        goto -> bb94;
    }

    bb106 (cleanup): {
        _219 = discriminant(_91);
        goto -> bb102;
    }

    bb107 (cleanup): {
        _220 = discriminant(_78);
        goto -> bb96;
    }

    bb108 (cleanup): {
        _221 = discriminant(_64);
        goto -> bb98;
    }

    bb109 (cleanup): {
        _222 = discriminant(_12);
        goto -> bb100;
    }
}
