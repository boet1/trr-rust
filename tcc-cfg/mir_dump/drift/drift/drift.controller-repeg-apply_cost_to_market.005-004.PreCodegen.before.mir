// MIR for `apply_cost_to_market` before PreCodegen

fn apply_cost_to_market(_1: &mut PerpMarket, _2: i128, _3: bool) -> std::result::Result<bool, error::ErrorCode> {
    debug market => _1;
    debug cost => _2;
    debug check_lower_bound => _3;
    let mut _0: std::result::Result<bool, error::ErrorCode>;
    let _4: ();
    let mut _5: bool;
    let mut _6: i128;
    let _7: i128;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _9: std::result::Result<i128, error::ErrorCode>;
    let mut _10: i128;
    let mut _11: i128;
    let mut _12: isize;
    let _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _14: !;
    let mut _15: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _16: i128;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _19: std::result::Result<i128, error::ErrorCode>;
    let mut _20: u128;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _22: std::result::Result<u128, error::ErrorCode>;
    let mut _23: u128;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _25: std::result::Result<u128, error::ErrorCode>;
    let mut _26: u128;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _28: std::result::Result<u128, error::ErrorCode>;
    let mut _29: &state::perp_market::PerpMarket;
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _35: u128;
    let mut _36: isize;
    let mut _38: !;
    let mut _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _41: u128;
    let mut _42: isize;
    let mut _44: !;
    let mut _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _47: isize;
    let mut _49: !;
    let mut _50: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: i128;
    let mut _55: i128;
    let mut _56: i128;
    let mut _57: !;
    let mut _58: i128;
    let mut _59: i128;
    let mut _60: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _61: std::result::Result<i128, error::ErrorCode>;
    let mut _62: i128;
    let mut _63: i128;
    let mut _64: i128;
    let mut _65: isize;
    let _66: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _67: !;
    let mut _68: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _69: i128;
    let mut _70: i64;
    let mut _71: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _72: std::result::Result<i64, error::ErrorCode>;
    let mut _73: i64;
    let mut _74: i64;
    let mut _75: i128;
    let mut _76: isize;
    let _77: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _78: !;
    let mut _79: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _80: i64;
    scope 1 {
        debug new_total_fee_minus_distributions => _7;
        let _17: i128;
        let _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _34: u128;
        let _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _40: u128;
        let _43: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _46: u128;
        let _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _51: i128;
        scope 6 {
            debug fee_reserved_for_protocol => _17;
        }
        scope 7 {
            debug residual => _31;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _34;
            scope 10 {
            }
        }
        scope 11 {
            debug residual => _37;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _40;
            scope 14 {
            }
        }
        scope 15 {
            debug residual => _43;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _46;
            scope 18 {
            }
        }
        scope 19 {
            debug residual => _48;
            scope 20 {
            }
        }
        scope 21 {
            debug val => _51;
            scope 22 {
            }
        }
    }
    scope 2 {
        debug residual => _13;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _16;
        scope 5 {
        }
    }
    scope 23 {
        debug residual => _66;
        scope 24 {
        }
    }
    scope 25 {
        debug val => _69;
        scope 26 {
        }
    }
    scope 27 {
        debug residual => _77;
        scope 28 {
        }
    }
    scope 29 {
        debug val => _80;
        scope 30 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = _2;
        _5 = Gt(move _6, const 0_i128);
        switchInt(move _5) -> [0: bb33, otherwise: bb1];
    }

    bb1: {
        StorageDead(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = (((*_1).1: state::perp_market::AMM).31: i128);
        StorageLive(_11);
        _11 = _2;
        _9 = <i128 as SafeMath>::safe_sub(move _10, move _11) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_11);
        StorageDead(_10);
        _8 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _9) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_9);
        _12 = discriminant(_8);
        switchInt(move _12) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_16);
        _16 = ((_8 as Continue).0: i128);
        _7 = _16;
        StorageDead(_16);
        StorageDead(_8);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = &(*_1);
        _28 = get_total_fee_lower_bound(move _29) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_13);
        _13 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_15);
        _15 = _13;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _15) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_8);
        goto -> bb50;
    }

    bb8: {
        StorageDead(_29);
        _27 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _28) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_28);
        _30 = discriminant(_27);
        switchInt(move _30) -> [0: bb10, 1: bb11, otherwise: bb5];
    }

    bb10: {
        StorageLive(_34);
        _34 = ((_27 as Continue).0: u128);
        _26 = _34;
        StorageDead(_34);
        StorageLive(_35);
        _35 = (((*_1).1: state::perp_market::AMM).33: u128);
        _25 = <u128 as SafeMath>::safe_add(move _26, move _35) -> [return: bb13, unwind continue];
    }

    bb11: {
        StorageLive(_31);
        _31 = ((_27 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_33);
        _33 = _31;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _33) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb46;
    }

    bb13: {
        StorageDead(_35);
        StorageDead(_26);
        _24 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _25) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_25);
        _36 = discriminant(_24);
        switchInt(move _36) -> [0: bb15, 1: bb16, otherwise: bb5];
    }

    bb15: {
        StorageLive(_40);
        _40 = ((_24 as Continue).0: u128);
        _23 = _40;
        StorageDead(_40);
        StorageLive(_41);
        _41 = (((*_1).1: state::perp_market::AMM).32: u128);
        _22 = <u128 as SafeMath>::safe_sub(move _23, move _41) -> [return: bb18, unwind continue];
    }

    bb16: {
        StorageLive(_37);
        _37 = ((_24 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_39);
        _39 = _37;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _39) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_39);
        StorageDead(_37);
        goto -> bb46;
    }

    bb18: {
        StorageDead(_41);
        StorageDead(_23);
        _21 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _22) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_22);
        _42 = discriminant(_21);
        switchInt(move _42) -> [0: bb20, 1: bb21, otherwise: bb5];
    }

    bb20: {
        StorageLive(_46);
        _46 = ((_21 as Continue).0: u128);
        _20 = _46;
        StorageDead(_46);
        _19 = <u128 as Cast>::cast::<i128>(move _20) -> [return: bb23, unwind continue];
    }

    bb21: {
        StorageLive(_43);
        _43 = ((_21 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_45);
        _45 = _43;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _45) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_45);
        StorageDead(_43);
        goto -> bb47;
    }

    bb23: {
        StorageDead(_20);
        _18 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _19) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_19);
        _47 = discriminant(_18);
        switchInt(move _47) -> [0: bb25, 1: bb26, otherwise: bb5];
    }

    bb25: {
        StorageLive(_51);
        _51 = ((_18 as Continue).0: i128);
        _17 = _51;
        StorageDead(_51);
        StorageDead(_27);
        StorageDead(_24);
        StorageDead(_21);
        StorageDead(_18);
        StorageLive(_52);
        _52 = _3;
        switchInt(move _52) -> [0: bb29, otherwise: bb28];
    }

    bb26: {
        StorageLive(_48);
        _48 = ((_18 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_50);
        _50 = _48;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _50) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_50);
        StorageDead(_48);
        goto -> bb48;
    }

    bb28: {
        StorageLive(_53);
        StorageLive(_54);
        _54 = _7;
        StorageLive(_55);
        _55 = _17;
        _53 = Ge(move _54, move _55);
        switchInt(move _53) -> [0: bb31, otherwise: bb30];
    }

    bb29: {
        StorageLive(_58);
        _58 = _7;
        (((*_1).1: state::perp_market::AMM).31: i128) = move _58;
        StorageDead(_58);
        _4 = const ();
        goto -> bb32;
    }

    bb30: {
        StorageDead(_55);
        StorageDead(_54);
        StorageLive(_56);
        _56 = _7;
        (((*_1).1: state::perp_market::AMM).31: i128) = move _56;
        StorageDead(_56);
        _4 = const ();
        StorageDead(_53);
        goto -> bb32;
    }

    bb31: {
        StorageDead(_55);
        StorageDead(_54);
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(const false);
        StorageDead(_53);
        StorageDead(_52);
        goto -> bb49;
    }

    bb32: {
        StorageDead(_52);
        StorageDead(_17);
        StorageDead(_7);
        goto -> bb40;
    }

    bb33: {
        StorageDead(_6);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = (((*_1).1: state::perp_market::AMM).31: i128);
        StorageLive(_63);
        StorageLive(_64);
        _64 = _2;
        _63 = core::num::<impl i128>::abs(move _64) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_64);
        _61 = <i128 as SafeMath>::safe_add(move _62, move _63) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_63);
        StorageDead(_62);
        _60 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _61) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_61);
        _65 = discriminant(_60);
        switchInt(move _65) -> [0: bb37, 1: bb38, otherwise: bb5];
    }

    bb37: {
        StorageLive(_69);
        _69 = ((_60 as Continue).0: i128);
        _59 = _69;
        StorageDead(_69);
        (((*_1).1: state::perp_market::AMM).31: i128) = move _59;
        StorageDead(_59);
        StorageDead(_60);
        _4 = const ();
        goto -> bb40;
    }

    bb38: {
        StorageLive(_66);
        _66 = ((_60 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_68);
        _68 = _66;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _68) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_68);
        StorageDead(_66);
        StorageDead(_59);
        StorageDead(_60);
        goto -> bb51;
    }

    bb40: {
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _73 = (((*_1).1: state::perp_market::AMM).49: i64);
        StorageLive(_74);
        StorageLive(_75);
        _75 = _2;
        _74 = move _75 as i64 (IntToInt);
        StorageDead(_75);
        _72 = <i64 as SafeMath>::safe_sub(move _73, move _74) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_74);
        StorageDead(_73);
        _71 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _72) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_72);
        _76 = discriminant(_71);
        switchInt(move _76) -> [0: bb43, 1: bb44, otherwise: bb5];
    }

    bb43: {
        StorageLive(_80);
        _80 = ((_71 as Continue).0: i64);
        _70 = _80;
        StorageDead(_80);
        (((*_1).1: state::perp_market::AMM).49: i64) = move _70;
        StorageDead(_70);
        StorageDead(_71);
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(const true);
        goto -> bb52;
    }

    bb44: {
        StorageLive(_77);
        _77 = ((_71 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_79);
        _79 = _77;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _79) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_79);
        StorageDead(_77);
        StorageDead(_70);
        StorageDead(_71);
        goto -> bb52;
    }

    bb46: {
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb47;
    }

    bb47: {
        StorageDead(_20);
        StorageDead(_19);
        goto -> bb48;
    }

    bb48: {
        StorageDead(_27);
        StorageDead(_24);
        StorageDead(_21);
        StorageDead(_18);
        goto -> bb49;
    }

    bb49: {
        StorageDead(_17);
        goto -> bb50;
    }

    bb50: {
        StorageDead(_7);
        goto -> bb51;
    }

    bb51: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb52;
    }

    bb52: {
        return;
    }
}
