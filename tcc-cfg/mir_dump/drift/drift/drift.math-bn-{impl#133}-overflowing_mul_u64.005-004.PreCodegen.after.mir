// MIR for `bn::<impl at /home/bitnami/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uint-0.9.1/src/uint.rs:587:3: 587:13>::overflowing_mul_u64` after PreCodegen

fn bn::<impl at /home/bitnami/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uint-0.9.1/src/uint.rs:587:3: 587:13>::overflowing_mul_u64(_1: U192, _2: u64) -> (U192, u64) {
    debug self => _1;
    debug other => _2;
    let mut _0: (math::bn::U192, u64);
    let mut _3: u64;
    let _4: ();
    let mut _5: std::slice::IterMut<'_, u64>;
    let mut _6: std::slice::IterMut<'_, u64>;
    let mut _7: &mut [u64];
    let mut _8: &mut [u64; 3];
    let mut _10: ();
    let _11: ();
    let mut _12: std::option::Option<&mut u64>;
    let mut _13: &mut std::slice::IterMut<'_, u64>;
    let mut _14: &mut std::slice::IterMut<'_, u64>;
    let mut _15: isize;
    let mut _16: !;
    let mut _20: (u64, u64);
    let mut _21: u64;
    let mut _22: u64;
    let mut _23: u64;
    let mut _24: u64;
    let mut _25: u64;
    let mut _26: math::bn::U192;
    let mut _27: u64;
    scope 1 {
        debug carry => _3;
        let mut _9: std::slice::IterMut<'_, u64>;
        scope 2 {
            debug iter => _9;
            let _17: &mut u64;
            scope 3 {
                debug d => _17;
                let _18: u64;
                let _19: u64;
                scope 4 {
                    debug res => _18;
                    debug c => _19;
                }
            }
        }
    }

    bb0: {
        StorageLive(_3);
        _3 = const 0_u64;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &mut (_1.0: [u64; 3]);
        _7 = move _8 as &mut [u64] (PointerCoercion(Unsize));
        StorageDead(_8);
        _6 = core::slice::<impl [u64]>::iter_mut(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = <std::slice::IterMut<'_, u64> as IntoIterator>::into_iter(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        StorageLive(_9);
        _9 = move _5;
        goto -> bb3;
    }

    bb3: {
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = &mut _9;
        _13 = &mut (*_14);
        _12 = <std::slice::IterMut<'_, u64> as Iterator>::next(move _13) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_13);
        _15 = discriminant(_12);
        switchInt(move _15) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        StorageLive(_17);
        _17 = move ((_12 as Some).0: &mut u64);
        StorageLive(_20);
        StorageLive(_21);
        _21 = (*_17);
        StorageLive(_22);
        _22 = _2;
        StorageLive(_23);
        _23 = _3;
        _20 = U192::mul_u64(move _21, move _22, move _23) -> [return: bb8, unwind continue];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _4 = const ();
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_26);
        _26 = _1;
        StorageLive(_27);
        _27 = _3;
        _0 = (move _26, move _27);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_3);
        return;
    }

    bb8: {
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        StorageLive(_18);
        _18 = (_20.0: u64);
        StorageLive(_19);
        _19 = (_20.1: u64);
        StorageDead(_20);
        StorageLive(_24);
        _24 = _18;
        (*_17) = move _24;
        StorageDead(_24);
        StorageLive(_25);
        _25 = _19;
        _3 = move _25;
        StorageDead(_25);
        _11 = const ();
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_11);
        _10 = const ();
        goto -> bb3;
    }
}
