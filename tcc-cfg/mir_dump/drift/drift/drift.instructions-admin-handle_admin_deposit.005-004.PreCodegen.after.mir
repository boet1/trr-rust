// MIR for `admin::handle_admin_deposit` after PreCodegen

fn admin::handle_admin_deposit(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::AdminDeposit<'_>>, _2: u16, _3: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug market_index => _2;
    debug amount => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: ();
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _6: std::result::Result<(), anchor_lang::error::Error>;
    let mut _7: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _8: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _13: ();
    let _14: anchor_lang::prelude::Pubkey;
    let mut _15: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _17: std::cell::RefMut<'_, state::user::User>;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _19: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _20: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _21: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _22: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _23: isize;
    let mut _25: !;
    let mut _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _30: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _31: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _32: isize;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _40: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _41: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _42: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _45: instructions::optional_accounts::AccountMaps<'_>;
    let mut _46: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, instructions::optional_accounts::AccountMaps<'_>>;
    let mut _47: std::result::Result<instructions::optional_accounts::AccountMaps<'_>, error::ErrorCode>;
    let mut _48: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _49: &std::collections::BTreeSet<u16>;
    let _50: &std::collections::BTreeSet<u16>;
    let _51: std::collections::BTreeSet<u16>;
    let mut _52: &std::collections::BTreeSet<u16>;
    let _53: &std::collections::BTreeSet<u16>;
    let _54: std::collections::BTreeSet<u16>;
    let mut _55: u16;
    let mut _56: u64;
    let mut _57: std::option::Option<state::state::OracleGuardRails>;
    let mut _58: state::state::OracleGuardRails;
    let mut _59: &state::state::State;
    let mut _60: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _61: isize;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>;
    let mut _68: std::result::Result<std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, error::ErrorCode>;
    let mut _69: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _70: isize;
    let mut _72: !;
    let mut _73: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _75: ();
    let mut _76: bool;
    let mut _77: u64;
    let mut _78: !;
    let mut _79: anchor_lang::error::Error;
    let mut _80: error::ErrorCode;
    let _81: ();
    let mut _82: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _83: std::result::Result<(), error::ErrorCode>;
    let mut _84: bool;
    let mut _85: &state::user::User;
    let _86: &state::user::User;
    let mut _87: &std::cell::RefMut<'_, state::user::User>;
    let mut _88: ();
    let _90: ();
    let mut _91: &str;
    let _92: &str;
    let mut _93: &std::string::String;
    let _94: &std::string::String;
    let _95: std::string::String;
    let mut _97: std::fmt::Arguments<'_>;
    let mut _98: &[&str];
    let mut _99: &[&str; 2];
    let _100: &[&str; 2];
    let _101: [&str; 2];
    let mut _102: &[core::fmt::rt::Argument<'_>];
    let mut _103: &[core::fmt::rt::Argument<'_>; 1];
    let _104: &[core::fmt::rt::Argument<'_>; 1];
    let _105: [core::fmt::rt::Argument<'_>; 1];
    let mut _106: core::fmt::rt::Argument<'_>;
    let mut _107: &error::ErrorCode;
    let _108: &error::ErrorCode;
    let mut _109: error::ErrorCode;
    let mut _110: isize;
    let mut _112: !;
    let mut _113: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _116: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _117: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _118: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _119: &u16;
    let _120: &u16;
    let mut _121: isize;
    let mut _123: !;
    let mut _124: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _127: &state::oracle::OraclePriceData;
    let mut _128: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _129: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _130: &mut state::oracle_map::OracleMap<'_>;
    let mut _131: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _132: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _133: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _134: &state::spot_market::SpotMarket;
    let _135: &state::spot_market::SpotMarket;
    let mut _136: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _137: isize;
    let mut _139: !;
    let mut _140: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _142: ();
    let mut _143: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _144: std::result::Result<(), error::ErrorCode>;
    let mut _145: bool;
    let mut _146: u8;
    let mut _147: &state::user::User;
    let mut _148: &std::cell::RefMut<'_, state::user::User>;
    let mut _149: u8;
    let mut _150: &state::spot_market::SpotMarket;
    let mut _151: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _152: ();
    let _154: ();
    let mut _155: &str;
    let _156: &str;
    let mut _157: &std::string::String;
    let _158: &std::string::String;
    let _159: std::string::String;
    let mut _161: std::fmt::Arguments<'_>;
    let mut _162: &[&str];
    let mut _163: &[&str; 2];
    let _164: &[&str; 2];
    let _165: [&str; 2];
    let mut _166: &[core::fmt::rt::Argument<'_>];
    let mut _167: &[core::fmt::rt::Argument<'_>; 1];
    let _168: &[core::fmt::rt::Argument<'_>; 1];
    let _169: [core::fmt::rt::Argument<'_>; 1];
    let mut _170: core::fmt::rt::Argument<'_>;
    let mut _171: &error::ErrorCode;
    let _172: &error::ErrorCode;
    let _173: ();
    let mut _174: &str;
    let _175: &str;
    let mut _176: &std::string::String;
    let _177: &std::string::String;
    let _178: std::string::String;
    let mut _180: std::fmt::Arguments<'_>;
    let mut _181: &[&str];
    let mut _182: &[&str; 3];
    let _183: &[&str; 3];
    let _184: [&str; 3];
    let mut _185: &[core::fmt::rt::Argument<'_>];
    let mut _186: &[core::fmt::rt::Argument<'_>; 2];
    let _187: &[core::fmt::rt::Argument<'_>; 2];
    let _188: [core::fmt::rt::Argument<'_>; 2];
    let mut _189: core::fmt::rt::Argument<'_>;
    let mut _190: &u8;
    let _191: &u8;
    let _192: &state::user::User;
    let mut _193: &std::cell::RefMut<'_, state::user::User>;
    let mut _194: core::fmt::rt::Argument<'_>;
    let mut _195: &u8;
    let _196: &u8;
    let _197: &state::spot_market::SpotMarket;
    let mut _198: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _199: error::ErrorCode;
    let mut _200: isize;
    let mut _202: !;
    let mut _203: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _205: ();
    let mut _206: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _207: std::result::Result<(), error::ErrorCode>;
    let mut _208: bool;
    let mut _209: &state::spot_market::SpotMarket;
    let mut _210: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _211: isize;
    let mut _212: ();
    let _214: ();
    let mut _215: &str;
    let _216: &str;
    let mut _217: &std::string::String;
    let _218: &std::string::String;
    let _219: std::string::String;
    let mut _221: std::fmt::Arguments<'_>;
    let mut _222: &[&str];
    let mut _223: &[&str; 2];
    let _224: &[&str; 2];
    let _225: [&str; 2];
    let mut _226: &[core::fmt::rt::Argument<'_>];
    let mut _227: &[core::fmt::rt::Argument<'_>; 1];
    let _228: &[core::fmt::rt::Argument<'_>; 1];
    let _229: [core::fmt::rt::Argument<'_>; 1];
    let mut _230: core::fmt::rt::Argument<'_>;
    let mut _231: &error::ErrorCode;
    let _232: &error::ErrorCode;
    let _233: ();
    let mut _234: &str;
    let _235: &str;
    let mut _236: error::ErrorCode;
    let mut _237: isize;
    let mut _239: !;
    let mut _240: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _242: ();
    let mut _243: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _244: std::result::Result<(), error::ErrorCode>;
    let mut _245: &mut state::spot_market::SpotMarket;
    let mut _246: &mut state::spot_market::SpotMarket;
    let mut _247: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _248: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _249: std::option::Option<&state::oracle::OraclePriceData>;
    let mut _250: &state::oracle::OraclePriceData;
    let _251: &state::oracle::OraclePriceData;
    let mut _252: i64;
    let mut _253: isize;
    let mut _255: !;
    let mut _256: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _259: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, usize>;
    let mut _260: std::result::Result<usize, error::ErrorCode>;
    let mut _261: &mut state::user::User;
    let mut _262: &mut state::user::User;
    let mut _263: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _264: u16;
    let mut _265: &state::spot_market::SpotMarket;
    let mut _266: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _267: isize;
    let mut _269: !;
    let mut _270: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _273: bool;
    let mut _274: &state::spot_market::SpotMarket;
    let _275: &state::spot_market::SpotMarket;
    let mut _276: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _277: bool;
    let mut _278: &state::spot_market::SpotBalanceType;
    let _279: &state::user::User;
    let mut _280: &std::cell::RefMut<'_, state::user::User>;
    let _281: usize;
    let mut _282: usize;
    let mut _283: bool;
    let mut _284: &state::spot_market::SpotBalanceType;
    let _285: state::spot_market::SpotBalanceType;
    let mut _286: u64;
    let mut _287: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _288: std::result::Result<u64, error::ErrorCode>;
    let mut _289: u128;
    let mut _290: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _291: std::result::Result<u128, error::ErrorCode>;
    let mut _292: &state::user::SpotPosition;
    let _293: &state::user::User;
    let mut _294: &std::cell::RefMut<'_, state::user::User>;
    let _295: usize;
    let mut _296: usize;
    let mut _297: bool;
    let mut _298: &state::spot_market::SpotMarket;
    let _299: &state::spot_market::SpotMarket;
    let mut _300: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _301: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _302: isize;
    let mut _304: !;
    let mut _305: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _307: isize;
    let mut _309: !;
    let mut _310: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _312: u64;
    let mut _314: &state::user::User;
    let mut _315: &std::cell::RefMut<'_, state::user::User>;
    let mut _317: &state::user::User;
    let mut _318: &std::cell::RefMut<'_, state::user::User>;
    let mut _320: &mut state::user::User;
    let mut _321: &mut std::cell::RefMut<'_, state::user::User>;
    let _322: usize;
    let mut _323: usize;
    let mut _324: bool;
    let _325: ();
    let mut _326: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _327: std::result::Result<(), error::ErrorCode>;
    let mut _328: u128;
    let mut _329: u64;
    let mut _330: &state::spot_market::SpotBalanceType;
    let _331: &state::spot_market::SpotBalanceType;
    let _332: state::spot_market::SpotBalanceType;
    let mut _333: &mut state::spot_market::SpotMarket;
    let mut _334: &mut state::spot_market::SpotMarket;
    let mut _335: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _336: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _337: &mut state::user::SpotPosition;
    let mut _338: std::option::Option<u128>;
    let mut _339: isize;
    let mut _341: !;
    let mut _342: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _345: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _346: std::result::Result<u128, error::ErrorCode>;
    let mut _347: &state::user::SpotPosition;
    let mut _348: &state::spot_market::SpotMarket;
    let _349: &state::spot_market::SpotMarket;
    let mut _350: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _351: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _352: isize;
    let mut _354: !;
    let mut _355: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _357: ();
    let mut _358: bool;
    let mut _359: u128;
    let _360: ();
    let mut _361: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _362: std::result::Result<(), error::ErrorCode>;
    let mut _363: bool;
    let mut _364: u64;
    let mut _365: ();
    let _367: ();
    let mut _368: &str;
    let _369: &str;
    let mut _370: &std::string::String;
    let _371: &std::string::String;
    let _372: std::string::String;
    let mut _374: std::fmt::Arguments<'_>;
    let mut _375: &[&str];
    let mut _376: &[&str; 2];
    let _377: &[&str; 2];
    let _378: [&str; 2];
    let mut _379: &[core::fmt::rt::Argument<'_>];
    let mut _380: &[core::fmt::rt::Argument<'_>; 1];
    let _381: &[core::fmt::rt::Argument<'_>; 1];
    let _382: [core::fmt::rt::Argument<'_>; 1];
    let mut _383: core::fmt::rt::Argument<'_>;
    let mut _384: &error::ErrorCode;
    let _385: &error::ErrorCode;
    let _386: ();
    let mut _387: &str;
    let _388: &str;
    let mut _389: &std::string::String;
    let _390: &std::string::String;
    let _391: std::string::String;
    let mut _393: std::fmt::Arguments<'_>;
    let mut _394: &[&str];
    let mut _395: &[&str; 2];
    let _396: &[&str; 2];
    let _397: [&str; 2];
    let mut _398: &[core::fmt::rt::Argument<'_>];
    let mut _399: &[core::fmt::rt::Argument<'_>; 2];
    let _400: &[core::fmt::rt::Argument<'_>; 2];
    let _401: [core::fmt::rt::Argument<'_>; 2];
    let mut _402: core::fmt::rt::Argument<'_>;
    let mut _403: &u64;
    let _404: &u64;
    let mut _405: core::fmt::rt::Argument<'_>;
    let mut _406: &u128;
    let _407: &u128;
    let mut _408: error::ErrorCode;
    let mut _409: isize;
    let mut _411: !;
    let mut _412: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _414: ();
    let mut _415: bool;
    let mut _416: &state::spot_market::SpotBalanceType;
    let mut _417: &state::spot_market::SpotBalanceType;
    let _418: state::spot_market::SpotBalanceType;
    let mut _419: bool;
    let mut _420: u64;
    let _421: ();
    let mut _422: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _423: std::result::Result<(), error::ErrorCode>;
    let mut _424: bool;
    let mut _425: &state::spot_market::SpotMarket;
    let mut _426: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _427: isize;
    let mut _428: ();
    let _430: ();
    let mut _431: &str;
    let _432: &str;
    let mut _433: &std::string::String;
    let _434: &std::string::String;
    let _435: std::string::String;
    let mut _437: std::fmt::Arguments<'_>;
    let mut _438: &[&str];
    let mut _439: &[&str; 2];
    let _440: &[&str; 2];
    let _441: [&str; 2];
    let mut _442: &[core::fmt::rt::Argument<'_>];
    let mut _443: &[core::fmt::rt::Argument<'_>; 1];
    let _444: &[core::fmt::rt::Argument<'_>; 1];
    let _445: [core::fmt::rt::Argument<'_>; 1];
    let mut _446: core::fmt::rt::Argument<'_>;
    let mut _447: &error::ErrorCode;
    let _448: &error::ErrorCode;
    let _449: ();
    let mut _450: &str;
    let _451: &str;
    let mut _452: &std::string::String;
    let _453: &std::string::String;
    let _454: std::string::String;
    let mut _456: std::fmt::Arguments<'_>;
    let mut _457: &[&str];
    let mut _458: &[&str; 1];
    let _459: &[&str; 1];
    let _460: [&str; 1];
    let mut _461: error::ErrorCode;
    let mut _462: isize;
    let mut _464: !;
    let mut _465: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _467: ();
    let mut _468: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _469: ();
    let mut _470: &mut state::user::User;
    let mut _471: &mut state::user::User;
    let mut _472: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _473: u64;
    let mut _475: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _476: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _477: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _478: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _479: &u16;
    let _480: &u16;
    let mut _481: isize;
    let mut _483: !;
    let mut _484: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _486: ();
    let mut _487: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _488: std::result::Result<(), anchor_lang::error::Error>;
    let mut _489: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let _490: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _491: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _492: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _493: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _494: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _495: &anchor_lang::prelude::AccountInfo<'_>;
    let _496: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _497: &anchor_lang::prelude::Signer<'_>;
    let _498: &anchor_lang::prelude::Signer<'_>;
    let mut _499: u64;
    let mut _500: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let _501: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _502: std::option::Option<&mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>;
    let mut _503: bool;
    let mut _504: &state::spot_market::SpotMarket;
    let _505: &state::spot_market::SpotMarket;
    let mut _506: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _507: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _508: isize;
    let mut _510: !;
    let mut _511: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _513: ();
    let mut _514: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _515: std::result::Result<(), anchor_lang::error::Error>;
    let mut _516: &mut anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _517: isize;
    let mut _519: !;
    let mut _520: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _522: i64;
    let mut _523: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _524: std::result::Result<i64, error::ErrorCode>;
    let mut _525: &state::spot_market::SpotMarket;
    let _526: &state::spot_market::SpotMarket;
    let mut _527: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _528: u64;
    let mut _529: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _530: &anchor_spl::token_interface::TokenAccount;
    let _531: &anchor_spl::token_interface::TokenAccount;
    let mut _532: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _533: isize;
    let mut _535: !;
    let mut _536: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _540: &state::spot_market::SpotMarket;
    let mut _541: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _542: u64;
    let mut _543: std::option::Option<u64>;
    let mut _544: std::option::Option<u64>;
    let mut _545: u64;
    let mut _546: std::option::Option<u64>;
    let mut _547: &mut state::spot_market::SpotMarket;
    let mut _548: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _551: i64;
    let mut _552: u64;
    let mut _553: anchor_lang::prelude::Pubkey;
    let mut _554: &state::user::User;
    let mut _555: &std::cell::RefMut<'_, state::user::User>;
    let mut _556: anchor_lang::prelude::Pubkey;
    let mut _557: state::events::DepositDirection;
    let mut _558: u64;
    let mut _559: i64;
    let mut _560: u128;
    let mut _561: &state::spot_market::SpotMarket;
    let mut _562: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _563: u128;
    let mut _564: &state::spot_market::SpotMarket;
    let mut _565: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _566: u128;
    let mut _567: &state::spot_market::SpotMarket;
    let mut _568: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _569: u128;
    let mut _570: &state::spot_market::SpotMarket;
    let mut _571: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _572: u64;
    let mut _573: u64;
    let mut _574: u16;
    let mut _575: state::events::DepositExplanation;
    let mut _576: std::option::Option<anchor_lang::prelude::Pubkey>;
    let _577: ();
    let _578: ();
    let mut _579: &[&[u8]];
    let mut _580: &[&[u8]; 1];
    let _581: &[&[u8]; 1];
    let _582: [&[u8]; 1];
    let mut _583: &[u8];
    let _584: &[u8];
    let mut _585: &std::vec::Vec<u8>;
    let _586: &std::vec::Vec<u8>;
    let _587: std::vec::Vec<u8>;
    let mut _588: &state::events::DepositRecord;
    let _589: &state::events::DepositRecord;
    let _590: ();
    let mut _591: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _592: std::result::Result<(), error::ErrorCode>;
    let mut _593: &state::spot_market::SpotMarket;
    let _594: &state::spot_market::SpotMarket;
    let mut _595: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _596: isize;
    let mut _598: !;
    let mut _599: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _601: ();
    let mut _613: &mut instructions::admin::AdminDeposit<'_>;
    let mut _614: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _615: &mut instructions::admin::AdminDeposit<'_>;
    let mut _616: &mut instructions::admin::AdminDeposit<'_>;
    let mut _617: &mut instructions::admin::AdminDeposit<'_>;
    let mut _618: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _619: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _620: &mut instructions::admin::AdminDeposit<'_>;
    let mut _621: &mut instructions::admin::AdminDeposit<'_>;
    let mut _622: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _623: &mut instructions::admin::AdminDeposit<'_>;
    let mut _624: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _625: &mut instructions::admin::AdminDeposit<'_>;
    let mut _626: &mut instructions::admin::AdminDeposit<'_>;
    let mut _627: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _628: &mut instructions::admin::AdminDeposit<'_>;
    let mut _629: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _630: bool;
    let mut _631: isize;
    let mut _632: isize;
    let mut _633: isize;
    let mut _634: isize;
    let mut _635: isize;
    let mut _636: isize;
    let mut _637: isize;
    let mut _638: isize;
    let mut _639: isize;
    let mut _640: isize;
    let mut _641: isize;
    let mut _642: isize;
    let mut _643: isize;
    let mut _644: isize;
    let mut _645: isize;
    let mut _646: isize;
    let mut _647: isize;
    let mut _648: isize;
    let mut _649: isize;
    let mut _650: isize;
    let mut _651: isize;
    let mut _652: isize;
    let mut _653: isize;
    let mut _654: isize;
    let mut _655: isize;
    let mut _656: isize;
    let mut _657: isize;
    let mut _658: isize;
    let mut _659: isize;
    let mut _660: isize;
    let mut _661: isize;
    let mut _662: isize;
    let mut _663: isize;
    let mut _664: isize;
    let mut _665: isize;
    let mut _666: isize;
    let mut _667: isize;
    let mut _668: isize;
    let mut _669: isize;
    let mut _670: isize;
    let mut _671: isize;
    let mut _672: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _673: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _674: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _675: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _676: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _677: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug residual => _10;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _13;
        scope 4 {
        }
    }
    scope 5 {
        debug user_key => _14;
        let _16: &mut std::cell::RefMut<'_, state::user::User>;
        let _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _27: std::cell::RefMut<'_, state::user::User>;
        scope 6 {
            debug user => _16;
            let _28: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
            scope 11 {
                debug state => _28;
                let _29: anchor_lang::prelude::Clock;
                let _33: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                let _36: anchor_lang::prelude::Clock;
                scope 12 {
                    debug clock => _29;
                    let _37: i64;
                    scope 17 {
                        debug now => _37;
                        let _38: u64;
                        scope 18 {
                            debug slot => _38;
                            let _39: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
                            scope 19 {
                                debug remaining_accounts_iter => _39;
                                let _43: state::spot_market_map::SpotMarketMap<'_>;
                                let mut _44: state::oracle_map::OracleMap<'_>;
                                let _62: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _65: instructions::optional_accounts::AccountMaps<'_>;
                                scope 20 {
                                    debug spot_market_map => _43;
                                    debug oracle_map => _44;
                                    let _66: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                                    let _71: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _74: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                                    scope 25 {
                                        debug mint => _66;
                                        let _89: error::ErrorCode;
                                        let _111: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _114: ();
                                        let mut _115: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                        let _122: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _125: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                        scope 30 {
                                            debug error_code => _89;
                                            let _96: std::string::String;
                                            let mut _612: &[&str; 2];
                                            scope 31 {
                                                debug res => _96;
                                            }
                                        }
                                        scope 32 {
                                            debug residual => _111;
                                            scope 33 {
                                            }
                                        }
                                        scope 34 {
                                            debug val => _114;
                                            scope 35 {
                                            }
                                        }
                                        scope 36 {
                                            debug spot_market => _115;
                                            let _126: state::oracle::OraclePriceData;
                                            let _138: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _141: &state::oracle::OraclePriceData;
                                            scope 41 {
                                                debug oracle_price_data => _126;
                                                let _153: error::ErrorCode;
                                                let _201: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _204: ();
                                                let _213: error::ErrorCode;
                                                let _238: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _241: ();
                                                let _254: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _257: ();
                                                let _258: usize;
                                                let _268: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _271: usize;
                                                scope 46 {
                                                    debug error_code => _153;
                                                    let _160: std::string::String;
                                                    let _179: std::string::String;
                                                    let mut _610: &[&str; 3];
                                                    let mut _611: &[&str; 2];
                                                    scope 47 {
                                                        debug res => _160;
                                                    }
                                                    scope 48 {
                                                        debug res => _179;
                                                    }
                                                }
                                                scope 49 {
                                                    debug residual => _201;
                                                    scope 50 {
                                                    }
                                                }
                                                scope 51 {
                                                    debug val => _204;
                                                    scope 52 {
                                                    }
                                                }
                                                scope 53 {
                                                    debug error_code => _213;
                                                    let _220: std::string::String;
                                                    let mut _609: &[&str; 2];
                                                    scope 54 {
                                                        debug res => _220;
                                                    }
                                                }
                                                scope 55 {
                                                    debug residual => _238;
                                                    scope 56 {
                                                    }
                                                }
                                                scope 57 {
                                                    debug val => _241;
                                                    scope 58 {
                                                    }
                                                }
                                                scope 59 {
                                                    debug residual => _254;
                                                    scope 60 {
                                                    }
                                                }
                                                scope 61 {
                                                    debug val => _257;
                                                    scope 62 {
                                                    }
                                                }
                                                scope 63 {
                                                    debug position_index => _258;
                                                    let _272: u64;
                                                    let _303: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _306: u128;
                                                    let _308: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _311: u64;
                                                    let mut _608: &state::spot_market::SpotBalanceType;
                                                    scope 68 {
                                                        debug amount => _272;
                                                        let _313: u64;
                                                        scope 77 {
                                                            debug total_deposits_after => _313;
                                                            let _316: u64;
                                                            scope 78 {
                                                                debug total_withdraws_after => _316;
                                                                let _319: &mut state::user::SpotPosition;
                                                                scope 79 {
                                                                    debug spot_position => _319;
                                                                    let _340: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _343: ();
                                                                    let _344: u128;
                                                                    let _353: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _356: u128;
                                                                    let mut _607: &state::spot_market::SpotBalanceType;
                                                                    scope 80 {
                                                                        debug residual => _340;
                                                                        scope 81 {
                                                                        }
                                                                    }
                                                                    scope 82 {
                                                                        debug val => _343;
                                                                        scope 83 {
                                                                        }
                                                                    }
                                                                    scope 84 {
                                                                        debug token_amount => _344;
                                                                        let _366: error::ErrorCode;
                                                                        let _410: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _413: ();
                                                                        let _429: error::ErrorCode;
                                                                        let _463: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _466: ();
                                                                        let _474: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                                        let _482: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _485: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                                        let mut _604: &state::spot_market::SpotBalanceType;
                                                                        scope 89 {
                                                                            debug error_code => _366;
                                                                            let _373: std::string::String;
                                                                            let _392: std::string::String;
                                                                            let mut _605: &[&str; 2];
                                                                            let mut _606: &[&str; 2];
                                                                            scope 90 {
                                                                                debug res => _373;
                                                                            }
                                                                            scope 91 {
                                                                                debug res => _392;
                                                                            }
                                                                        }
                                                                        scope 92 {
                                                                            debug residual => _410;
                                                                            scope 93 {
                                                                            }
                                                                        }
                                                                        scope 94 {
                                                                            debug val => _413;
                                                                            scope 95 {
                                                                            }
                                                                        }
                                                                        scope 96 {
                                                                            debug error_code => _429;
                                                                            let _436: std::string::String;
                                                                            let _455: std::string::String;
                                                                            let mut _602: &[&str; 1];
                                                                            let mut _603: &[&str; 2];
                                                                            scope 97 {
                                                                                debug res => _436;
                                                                            }
                                                                            scope 98 {
                                                                                debug res => _455;
                                                                            }
                                                                        }
                                                                        scope 99 {
                                                                            debug residual => _463;
                                                                            scope 100 {
                                                                            }
                                                                        }
                                                                        scope 101 {
                                                                            debug val => _466;
                                                                            scope 102 {
                                                                            }
                                                                        }
                                                                        scope 103 {
                                                                            debug spot_market => _474;
                                                                            let _509: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                            let _512: ();
                                                                            let _518: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                            let _521: ();
                                                                            let _534: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _537: i64;
                                                                            let _538: u64;
                                                                            let _539: u64;
                                                                            scope 108 {
                                                                                debug residual => _509;
                                                                                scope 109 {
                                                                                }
                                                                            }
                                                                            scope 110 {
                                                                                debug val => _512;
                                                                                scope 111 {
                                                                                }
                                                                            }
                                                                            scope 112 {
                                                                                debug residual => _518;
                                                                                scope 113 {
                                                                                }
                                                                            }
                                                                            scope 114 {
                                                                                debug val => _521;
                                                                                scope 115 {
                                                                                }
                                                                            }
                                                                            scope 116 {
                                                                                debug residual => _534;
                                                                                scope 117 {
                                                                                }
                                                                            }
                                                                            scope 118 {
                                                                                debug val => _537;
                                                                                scope 119 {
                                                                                }
                                                                            }
                                                                            scope 120 {
                                                                                debug deposit_record_id => _538;
                                                                                let _549: i64;
                                                                                scope 122 {
                                                                                    debug oracle_price => _549;
                                                                                    let _550: state::events::DepositRecord;
                                                                                    scope 123 {
                                                                                        debug deposit_record => _550;
                                                                                        let _597: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _600: ();
                                                                                        scope 124 {
                                                                                            debug residual => _597;
                                                                                            scope 125 {
                                                                                            }
                                                                                        }
                                                                                        scope 126 {
                                                                                            debug val => _600;
                                                                                            scope 127 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 121 {
                                                                                debug current_id => _539;
                                                                            }
                                                                        }
                                                                        scope 104 {
                                                                            debug residual => _482;
                                                                            scope 105 {
                                                                            }
                                                                        }
                                                                        scope 106 {
                                                                            debug val => _485;
                                                                            scope 107 {
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 85 {
                                                                        debug residual => _353;
                                                                        scope 86 {
                                                                        }
                                                                    }
                                                                    scope 87 {
                                                                        debug val => _356;
                                                                        scope 88 {
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    scope 69 {
                                                        debug residual => _303;
                                                        scope 70 {
                                                        }
                                                    }
                                                    scope 71 {
                                                        debug val => _306;
                                                        scope 72 {
                                                        }
                                                    }
                                                    scope 73 {
                                                        debug residual => _308;
                                                        scope 74 {
                                                        }
                                                    }
                                                    scope 75 {
                                                        debug val => _311;
                                                        scope 76 {
                                                        }
                                                    }
                                                }
                                                scope 64 {
                                                    debug residual => _268;
                                                    scope 65 {
                                                    }
                                                }
                                                scope 66 {
                                                    debug val => _271;
                                                    scope 67 {
                                                    }
                                                }
                                            }
                                            scope 42 {
                                                debug residual => _138;
                                                scope 43 {
                                                }
                                            }
                                            scope 44 {
                                                debug val => _141;
                                                scope 45 {
                                                }
                                            }
                                        }
                                        scope 37 {
                                            debug residual => _122;
                                            scope 38 {
                                            }
                                        }
                                        scope 39 {
                                            debug val => _125;
                                            scope 40 {
                                            }
                                        }
                                    }
                                    scope 26 {
                                        debug residual => _71;
                                        scope 27 {
                                        }
                                    }
                                    scope 28 {
                                        debug val => _74;
                                        scope 29 {
                                        }
                                    }
                                }
                                scope 21 {
                                    debug residual => _62;
                                    scope 22 {
                                    }
                                }
                                scope 23 {
                                    debug val => _65;
                                    scope 24 {
                                    }
                                }
                            }
                        }
                    }
                }
                scope 13 {
                    debug residual => _33;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _36;
                    scope 16 {
                    }
                }
            }
        }
        scope 7 {
            debug residual => _24;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _27;
            scope 10 {
            }
        }
    }

    bb0: {
        _630 = const false;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _613 = deref_copy (_1.1: &mut instructions::admin::AdminDeposit<'_>);
        _8 = &((*_613).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _614 = deref_copy (*_8);
        _672 = (((_614.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _7 = &(*_672);
        _6 = constraints::deposit_not_paused(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _6) -> [return: bb2, unwind: bb304];
    }

    bb2: {
        StorageDead(_6);
        _9 = discriminant(_5);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_5 as Continue).0: ());
        _4 = _13;
        StorageDead(_13);
        _631 = discriminant(_5);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_14);
        StorageLive(_15);
        _615 = deref_copy (_1.1: &mut instructions::admin::AdminDeposit<'_>);
        _15 = &((*_615).1: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _14 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _15) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_12);
        _12 = move _10;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _12) -> [return: bb6, unwind: bb317];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        _661 = discriminant(_5);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb287;
    }

    bb7: {
        StorageDead(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _616 = deref_copy (_1.1: &mut instructions::admin::AdminDeposit<'_>);
        _21 = &((*_616).1: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _20 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _21) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_21);
        StorageLive(_22);
        _22 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _19 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _20, move _22) -> [return: bb9, unwind: bb304];
    }

    bb9: {
        StorageDead(_22);
        StorageDead(_20);
        _18 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _19) -> [return: bb10, unwind: bb304];
    }

    bb10: {
        StorageDead(_19);
        _23 = discriminant(_18);
        switchInt(move _23) -> [0: bb11, 1: bb12, otherwise: bb4];
    }

    bb11: {
        StorageLive(_27);
        _27 = move ((_18 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _17 = move _27;
        StorageDead(_27);
        _16 = &mut _17;
        _635 = discriminant(_18);
        StorageDead(_18);
        StorageLive(_28);
        _617 = deref_copy (_1.1: &mut instructions::admin::AdminDeposit<'_>);
        _28 = &((*_617).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb14, unwind: bb303];
    }

    bb12: {
        StorageLive(_24);
        _24 = ((_18 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_26);
        _26 = _24;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _26) -> [return: bb13, unwind: bb316];
    }

    bb13: {
        StorageDead(_26);
        StorageDead(_24);
        _633 = discriminant(_18);
        StorageDead(_18);
        goto -> bb286;
    }

    bb14: {
        _30 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _31) -> [return: bb15, unwind: bb303];
    }

    bb15: {
        StorageDead(_31);
        _32 = discriminant(_30);
        switchInt(move _32) -> [0: bb16, 1: bb17, otherwise: bb4];
    }

    bb16: {
        StorageLive(_36);
        _36 = move ((_30 as Continue).0: anchor_lang::prelude::Clock);
        _29 = move _36;
        StorageDead(_36);
        _637 = discriminant(_30);
        StorageDead(_30);
        StorageLive(_37);
        _37 = (_29.4: i64);
        StorageLive(_38);
        _38 = (_29.0: u64);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _618 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _42 = &(*_618);
        _41 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _42) -> [return: bb19, unwind: bb303];
    }

    bb17: {
        StorageLive(_33);
        _33 = move ((_30 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_35);
        _35 = move _33;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _35) -> [return: bb18, unwind: bb315];
    }

    bb18: {
        StorageDead(_35);
        StorageDead(_33);
        _659 = discriminant(_30);
        StorageDead(_30);
        goto -> bb285;
    }

    bb19: {
        StorageDead(_42);
        _40 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::peekable(move _41) -> [return: bb20, unwind: bb303];
    }

    bb20: {
        StorageDead(_41);
        _39 = &mut _40;
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = &mut (*_39);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = BTreeSet::<u16>::new() -> [return: bb21, unwind: bb303];
    }

    bb21: {
        _50 = &_51;
        _49 = &(*_50);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = _2;
        _54 = get_writable_spot_market_set(move _55) -> [return: bb22, unwind: bb302];
    }

    bb22: {
        StorageDead(_55);
        _53 = &_54;
        _52 = &(*_53);
        StorageLive(_56);
        _56 = (_29.0: u64);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _619 = deref_copy (*_28);
        _673 = (((_619.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _60 = &(*_673);
        _59 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _60) -> [return: bb23, unwind: bb301];
    }

    bb23: {
        StorageDead(_60);
        _58 = ((*_59).7: state::state::OracleGuardRails);
        _57 = Option::<state::state::OracleGuardRails>::Some(move _58);
        StorageDead(_58);
        _47 = load_maps(move _48, move _49, move _52, move _56, move _57) -> [return: bb24, unwind: bb301];
    }

    bb24: {
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_52);
        StorageDead(_49);
        StorageDead(_48);
        _46 = <std::result::Result<AccountMaps<'_>, error::ErrorCode> as Try>::branch(move _47) -> [return: bb25, unwind: bb301];
    }

    bb25: {
        StorageDead(_47);
        _61 = discriminant(_46);
        switchInt(move _61) -> [0: bb26, 1: bb27, otherwise: bb4];
    }

    bb26: {
        StorageLive(_65);
        _65 = move ((_46 as Continue).0: instructions::optional_accounts::AccountMaps<'_>);
        _45 = move _65;
        StorageDead(_65);
        StorageLive(_43);
        _43 = move (_45.1: state::spot_market_map::SpotMarketMap<'_>);
        StorageLive(_44);
        _44 = move (_45.2: state::oracle_map::OracleMap<'_>);
        drop((_45.0: state::perp_market_map::PerpMarketMap<'_>)) -> [return: bb306, unwind: bb305];
    }

    bb27: {
        StorageLive(_62);
        _62 = ((_46 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_64);
        _64 = _62;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _64) -> [return: bb28, unwind: bb314];
    }

    bb28: {
        StorageDead(_64);
        StorageDead(_62);
        _639 = discriminant(_46);
        StorageDead(_59);
        drop(_54) -> [return: bb282, unwind: bb302];
    }

    bb29: {
        StorageDead(_54);
        StorageDead(_53);
        drop(_51) -> [return: bb30, unwind: bb299];
    }

    bb30: {
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_46);
        StorageDead(_45);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &mut (*_39);
        _68 = get_token_mint(move _69) -> [return: bb31, unwind: bb299];
    }

    bb31: {
        StorageDead(_69);
        _67 = <std::result::Result<Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, error::ErrorCode> as Try>::branch(move _68) -> [return: bb32, unwind: bb299];
    }

    bb32: {
        StorageDead(_68);
        _70 = discriminant(_67);
        switchInt(move _70) -> [0: bb33, 1: bb34, otherwise: bb4];
    }

    bb33: {
        StorageLive(_74);
        _74 = move ((_67 as Continue).0: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _66 = move _74;
        StorageDead(_74);
        StorageDead(_67);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _77 = _3;
        _76 = Eq(move _77, const 0_u64);
        switchInt(move _76) -> [0: bb37, otherwise: bb36];
    }

    bb34: {
        StorageLive(_71);
        _71 = ((_67 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_73);
        _73 = _71;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _73) -> [return: bb35, unwind: bb299];
    }

    bb35: {
        StorageDead(_73);
        StorageDead(_71);
        StorageDead(_67);
        goto -> bb279;
    }

    bb36: {
        StorageDead(_77);
        StorageLive(_79);
        StorageLive(_80);
        _80 = error::ErrorCode::InsufficientDeposit;
        _79 = <error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _80) -> [return: bb38, unwind: bb299];
    }

    bb37: {
        StorageDead(_77);
        _75 = const ();
        StorageDead(_76);
        StorageDead(_75);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _87 = &(*_16);
        _86 = <RefMut<'_, User> as Deref>::deref(move _87) -> [return: bb39, unwind: bb299];
    }

    bb38: {
        StorageDead(_80);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _79);
        StorageDead(_79);
        StorageDead(_76);
        StorageDead(_75);
        goto -> bb279;
    }

    bb39: {
        _85 = &(*_86);
        StorageDead(_87);
        _84 = User::is_bankrupt(move _85) -> [return: bb40, unwind: bb299];
    }

    bb40: {
        switchInt(move _84) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        StorageDead(_85);
        StorageDead(_86);
        StorageLive(_89);
        _89 = error::ErrorCode::UserBankrupt;
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _612 = const _;
        _100 = &(*_612);
        _99 = &(*_100);
        _98 = move _99 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_99);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        _108 = &_89;
        _107 = &(*_108);
        _106 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _107) -> [return: bb43, unwind: bb299];
    }

    bb42: {
        StorageDead(_85);
        StorageDead(_86);
        StorageLive(_88);
        _88 = ();
        _83 = std::result::Result::<(), error::ErrorCode>::Ok(move _88);
        StorageDead(_88);
        goto -> bb49;
    }

    bb43: {
        StorageDead(_107);
        _105 = [move _106];
        StorageDead(_106);
        _104 = &_105;
        _103 = &(*_104);
        _102 = move _103 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_103);
        _97 = Arguments::<'_>::new_v1(move _98, move _102) -> [return: bb44, unwind: bb299];
    }

    bb44: {
        StorageDead(_102);
        StorageDead(_98);
        _96 = format(move _97) -> [return: bb45, unwind: bb299];
    }

    bb45: {
        StorageDead(_97);
        StorageDead(_108);
        StorageDead(_105);
        StorageDead(_104);
        StorageDead(_100);
        _95 = move _96;
        StorageDead(_96);
        _94 = &_95;
        _93 = &(*_94);
        _92 = <String as Deref>::deref(move _93) -> [return: bb46, unwind: bb297];
    }

    bb46: {
        _91 = &(*_92);
        StorageDead(_93);
        _90 = solana_program::log::sol_log(move _91) -> [return: bb47, unwind: bb297];
    }

    bb47: {
        StorageDead(_91);
        drop(_95) -> [return: bb48, unwind: bb299];
    }

    bb48: {
        StorageDead(_95);
        StorageDead(_94);
        StorageDead(_92);
        StorageDead(_90);
        StorageLive(_109);
        _109 = _89;
        _83 = std::result::Result::<(), error::ErrorCode>::Err(move _109);
        StorageDead(_109);
        StorageDead(_89);
        goto -> bb49;
    }

    bb49: {
        StorageDead(_84);
        _82 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _83) -> [return: bb50, unwind: bb299];
    }

    bb50: {
        StorageDead(_83);
        _110 = discriminant(_82);
        switchInt(move _110) -> [0: bb51, 1: bb52, otherwise: bb4];
    }

    bb51: {
        StorageLive(_114);
        _114 = ((_82 as Continue).0: ());
        _81 = _114;
        StorageDead(_114);
        StorageDead(_82);
        StorageDead(_81);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        _118 = &_43;
        StorageLive(_119);
        StorageLive(_120);
        _120 = &_2;
        _119 = &(*_120);
        _117 = SpotMarketMap::<'_>::get_ref_mut(move _118, move _119) -> [return: bb54, unwind: bb299];
    }

    bb52: {
        StorageLive(_111);
        _111 = ((_82 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_113);
        _113 = _111;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _113) -> [return: bb53, unwind: bb299];
    }

    bb53: {
        StorageDead(_113);
        StorageDead(_111);
        StorageDead(_82);
        StorageDead(_81);
        goto -> bb279;
    }

    bb54: {
        StorageDead(_119);
        StorageDead(_118);
        _116 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _117) -> [return: bb55, unwind: bb299];
    }

    bb55: {
        StorageDead(_117);
        _121 = discriminant(_116);
        switchInt(move _121) -> [0: bb56, 1: bb57, otherwise: bb4];
    }

    bb56: {
        StorageLive(_125);
        _125 = move ((_116 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _630 = const true;
        _115 = move _125;
        StorageDead(_125);
        _645 = discriminant(_116);
        StorageDead(_120);
        StorageDead(_116);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _130 = &mut _44;
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        _136 = &_115;
        _135 = <RefMut<'_, SpotMarket> as Deref>::deref(move _136) -> [return: bb59, unwind: bb312];
    }

    bb57: {
        StorageLive(_122);
        _122 = ((_116 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_124);
        _124 = _122;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _124) -> [return: bb58, unwind: bb313];
    }

    bb58: {
        StorageDead(_124);
        StorageDead(_122);
        _643 = discriminant(_116);
        StorageDead(_120);
        StorageDead(_116);
        goto -> bb278;
    }

    bb59: {
        _134 = &(*_135);
        StorageDead(_136);
        _133 = SpotMarket::oracle_id(move _134) -> [return: bb60, unwind: bb312];
    }

    bb60: {
        StorageDead(_134);
        _132 = &_133;
        _131 = &(*_132);
        _129 = OracleMap::<'_>::get_price_data(move _130, move _131) -> [return: bb61, unwind: bb312];
    }

    bb61: {
        StorageDead(_131);
        StorageDead(_130);
        _128 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _129) -> [return: bb62, unwind: bb312];
    }

    bb62: {
        StorageDead(_129);
        _137 = discriminant(_128);
        switchInt(move _137) -> [0: bb63, 1: bb64, otherwise: bb4];
    }

    bb63: {
        StorageLive(_141);
        _141 = ((_128 as Continue).0: &state::oracle::OraclePriceData);
        _127 = _141;
        StorageDead(_141);
        _126 = (*_127);
        StorageDead(_135);
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_128);
        StorageDead(_127);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        _148 = &(*_16);
        _147 = <RefMut<'_, User> as Deref>::deref(move _148) -> [return: bb66, unwind: bb312];
    }

    bb64: {
        StorageLive(_138);
        _138 = ((_128 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_140);
        _140 = _138;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _140) -> [return: bb65, unwind: bb312];
    }

    bb65: {
        StorageDead(_140);
        StorageDead(_138);
        StorageDead(_135);
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_128);
        StorageDead(_127);
        goto -> bb277;
    }

    bb66: {
        StorageDead(_148);
        _146 = ((*_147).27: u8);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        _151 = &_115;
        _150 = <RefMut<'_, SpotMarket> as Deref>::deref(move _151) -> [return: bb67, unwind: bb312];
    }

    bb67: {
        StorageDead(_151);
        _149 = ((*_150).62: u8);
        _145 = Eq(move _146, move _149);
        switchInt(move _145) -> [0: bb69, otherwise: bb68];
    }

    bb68: {
        StorageDead(_150);
        StorageDead(_149);
        StorageDead(_147);
        StorageDead(_146);
        StorageLive(_152);
        _152 = ();
        _144 = std::result::Result::<(), error::ErrorCode>::Ok(move _152);
        StorageDead(_152);
        goto -> bb85;
    }

    bb69: {
        StorageDead(_150);
        StorageDead(_149);
        StorageDead(_147);
        StorageDead(_146);
        StorageLive(_153);
        _153 = error::ErrorCode::InvalidPoolId;
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        _611 = const _;
        _164 = &(*_611);
        _163 = &(*_164);
        _162 = move _163 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_163);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        _172 = &_153;
        _171 = &(*_172);
        _170 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _171) -> [return: bb70, unwind: bb312];
    }

    bb70: {
        StorageDead(_171);
        _169 = [move _170];
        StorageDead(_170);
        _168 = &_169;
        _167 = &(*_168);
        _166 = move _167 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_167);
        _161 = Arguments::<'_>::new_v1(move _162, move _166) -> [return: bb71, unwind: bb312];
    }

    bb71: {
        StorageDead(_166);
        StorageDead(_162);
        _160 = format(move _161) -> [return: bb72, unwind: bb312];
    }

    bb72: {
        StorageDead(_161);
        StorageDead(_172);
        StorageDead(_169);
        StorageDead(_168);
        StorageDead(_164);
        _159 = move _160;
        StorageDead(_160);
        _158 = &_159;
        _157 = &(*_158);
        _156 = <String as Deref>::deref(move _157) -> [return: bb73, unwind: bb296];
    }

    bb73: {
        _155 = &(*_156);
        StorageDead(_157);
        _154 = solana_program::log::sol_log(move _155) -> [return: bb74, unwind: bb296];
    }

    bb74: {
        StorageDead(_155);
        drop(_159) -> [return: bb75, unwind: bb312];
    }

    bb75: {
        StorageDead(_159);
        StorageDead(_158);
        StorageDead(_156);
        StorageDead(_154);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        _610 = const _;
        _183 = &(*_610);
        _182 = &(*_183);
        _181 = move _182 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_182);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        _193 = &(*_16);
        _192 = <RefMut<'_, User> as Deref>::deref(move _193) -> [return: bb76, unwind: bb312];
    }

    bb76: {
        StorageDead(_193);
        _191 = &((*_192).27: u8);
        _190 = &(*_191);
        _189 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _190) -> [return: bb77, unwind: bb312];
    }

    bb77: {
        StorageDead(_190);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        _198 = &_115;
        _197 = <RefMut<'_, SpotMarket> as Deref>::deref(move _198) -> [return: bb78, unwind: bb312];
    }

    bb78: {
        StorageDead(_198);
        _196 = &((*_197).62: u8);
        _195 = &(*_196);
        _194 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _195) -> [return: bb79, unwind: bb312];
    }

    bb79: {
        StorageDead(_195);
        _188 = [move _189, move _194];
        StorageDead(_194);
        StorageDead(_189);
        _187 = &_188;
        _186 = &(*_187);
        _185 = move _186 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_186);
        _180 = Arguments::<'_>::new_v1(move _181, move _185) -> [return: bb80, unwind: bb312];
    }

    bb80: {
        StorageDead(_185);
        StorageDead(_181);
        _179 = format(move _180) -> [return: bb81, unwind: bb312];
    }

    bb81: {
        StorageDead(_180);
        StorageDead(_197);
        StorageDead(_196);
        StorageDead(_192);
        StorageDead(_191);
        StorageDead(_188);
        StorageDead(_187);
        StorageDead(_183);
        _178 = move _179;
        StorageDead(_179);
        _177 = &_178;
        _176 = &(*_177);
        _175 = <String as Deref>::deref(move _176) -> [return: bb82, unwind: bb295];
    }

    bb82: {
        _174 = &(*_175);
        StorageDead(_176);
        _173 = solana_program::log::sol_log(move _174) -> [return: bb83, unwind: bb295];
    }

    bb83: {
        StorageDead(_174);
        drop(_178) -> [return: bb84, unwind: bb312];
    }

    bb84: {
        StorageDead(_178);
        StorageDead(_177);
        StorageDead(_175);
        StorageDead(_173);
        StorageLive(_199);
        _199 = _153;
        _144 = std::result::Result::<(), error::ErrorCode>::Err(move _199);
        StorageDead(_199);
        StorageDead(_153);
        goto -> bb85;
    }

    bb85: {
        StorageDead(_145);
        _143 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _144) -> [return: bb86, unwind: bb312];
    }

    bb86: {
        StorageDead(_144);
        _200 = discriminant(_143);
        switchInt(move _200) -> [0: bb87, 1: bb88, otherwise: bb4];
    }

    bb87: {
        StorageLive(_204);
        _204 = ((_143 as Continue).0: ());
        _142 = _204;
        StorageDead(_204);
        StorageDead(_143);
        StorageDead(_142);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        _210 = &_115;
        _209 = <RefMut<'_, SpotMarket> as Deref>::deref(move _210) -> [return: bb90, unwind: bb312];
    }

    bb88: {
        StorageLive(_201);
        _201 = ((_143 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_203);
        _203 = _201;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _203) -> [return: bb89, unwind: bb312];
    }

    bb89: {
        StorageDead(_203);
        StorageDead(_201);
        StorageDead(_143);
        StorageDead(_142);
        goto -> bb277;
    }

    bb90: {
        StorageDead(_210);
        _211 = discriminant(((*_209).45: state::perp_market::MarketStatus));
        switchInt(move _211) -> [0: bb92, otherwise: bb91];
    }

    bb91: {
        _208 = const false;
        goto -> bb93;
    }

    bb92: {
        _208 = const true;
        goto -> bb93;
    }

    bb93: {
        switchInt(move _208) -> [0: bb94, otherwise: bb95];
    }

    bb94: {
        StorageDead(_209);
        StorageLive(_212);
        _212 = ();
        _207 = std::result::Result::<(), error::ErrorCode>::Ok(move _212);
        StorageDead(_212);
        goto -> bb103;
    }

    bb95: {
        StorageDead(_209);
        StorageLive(_213);
        _213 = error::ErrorCode::MarketBeingInitialized;
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        _609 = const _;
        _224 = &(*_609);
        _223 = &(*_224);
        _222 = move _223 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_223);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        _232 = &_213;
        _231 = &(*_232);
        _230 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _231) -> [return: bb96, unwind: bb312];
    }

    bb96: {
        StorageDead(_231);
        _229 = [move _230];
        StorageDead(_230);
        _228 = &_229;
        _227 = &(*_228);
        _226 = move _227 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_227);
        _221 = Arguments::<'_>::new_v1(move _222, move _226) -> [return: bb97, unwind: bb312];
    }

    bb97: {
        StorageDead(_226);
        StorageDead(_222);
        _220 = format(move _221) -> [return: bb98, unwind: bb312];
    }

    bb98: {
        StorageDead(_221);
        StorageDead(_232);
        StorageDead(_229);
        StorageDead(_228);
        StorageDead(_224);
        _219 = move _220;
        StorageDead(_220);
        _218 = &_219;
        _217 = &(*_218);
        _216 = <String as Deref>::deref(move _217) -> [return: bb99, unwind: bb294];
    }

    bb99: {
        _215 = &(*_216);
        StorageDead(_217);
        _214 = solana_program::log::sol_log(move _215) -> [return: bb100, unwind: bb294];
    }

    bb100: {
        StorageDead(_215);
        drop(_219) -> [return: bb101, unwind: bb312];
    }

    bb101: {
        StorageDead(_219);
        StorageDead(_218);
        StorageDead(_216);
        StorageDead(_214);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        _235 = const "Market is being initialized";
        _234 = &(*_235);
        _233 = solana_program::log::sol_log(move _234) -> [return: bb102, unwind: bb312];
    }

    bb102: {
        StorageDead(_234);
        StorageDead(_235);
        StorageDead(_233);
        StorageLive(_236);
        _236 = _213;
        _207 = std::result::Result::<(), error::ErrorCode>::Err(move _236);
        StorageDead(_236);
        StorageDead(_213);
        goto -> bb103;
    }

    bb103: {
        StorageDead(_208);
        _206 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _207) -> [return: bb104, unwind: bb312];
    }

    bb104: {
        StorageDead(_207);
        _237 = discriminant(_206);
        switchInt(move _237) -> [0: bb105, 1: bb106, otherwise: bb4];
    }

    bb105: {
        StorageLive(_241);
        _241 = ((_206 as Continue).0: ());
        _205 = _241;
        StorageDead(_241);
        StorageDead(_206);
        StorageDead(_205);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        _248 = &mut _115;
        _247 = &mut (*_248);
        _246 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _247) -> [return: bb108, unwind: bb312];
    }

    bb106: {
        StorageLive(_238);
        _238 = ((_206 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_240);
        _240 = _238;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _240) -> [return: bb107, unwind: bb312];
    }

    bb107: {
        StorageDead(_240);
        StorageDead(_238);
        StorageDead(_206);
        StorageDead(_205);
        goto -> bb277;
    }

    bb108: {
        _245 = &mut (*_246);
        StorageDead(_247);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        _251 = &_126;
        _250 = &(*_251);
        _249 = Option::<&OraclePriceData>::Some(move _250);
        StorageDead(_250);
        StorageLive(_252);
        _252 = _37;
        _244 = controller::spot_balance::update_spot_market_cumulative_interest(move _245, move _249, move _252) -> [return: bb109, unwind: bb312];
    }

    bb109: {
        StorageDead(_252);
        StorageDead(_249);
        StorageDead(_245);
        _243 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _244) -> [return: bb110, unwind: bb312];
    }

    bb110: {
        StorageDead(_244);
        _253 = discriminant(_243);
        switchInt(move _253) -> [0: bb111, 1: bb112, otherwise: bb4];
    }

    bb111: {
        StorageLive(_257);
        _257 = ((_243 as Continue).0: ());
        _242 = _257;
        StorageDead(_257);
        StorageDead(_251);
        StorageDead(_248);
        StorageDead(_246);
        StorageDead(_243);
        StorageDead(_242);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        _263 = &mut (*_16);
        _262 = <RefMut<'_, User> as DerefMut>::deref_mut(move _263) -> [return: bb114, unwind: bb312];
    }

    bb112: {
        StorageLive(_254);
        _254 = ((_243 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_256);
        _256 = _254;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _256) -> [return: bb113, unwind: bb312];
    }

    bb113: {
        StorageDead(_256);
        StorageDead(_254);
        StorageDead(_251);
        StorageDead(_248);
        StorageDead(_246);
        StorageDead(_243);
        StorageDead(_242);
        goto -> bb277;
    }

    bb114: {
        _261 = &mut (*_262);
        StorageDead(_263);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        _266 = &_115;
        _265 = <RefMut<'_, SpotMarket> as Deref>::deref(move _266) -> [return: bb115, unwind: bb312];
    }

    bb115: {
        StorageDead(_266);
        _264 = ((*_265).42: u16);
        _260 = User::force_get_spot_position_index(move _261, move _264) -> [return: bb116, unwind: bb312];
    }

    bb116: {
        StorageDead(_264);
        StorageDead(_261);
        _259 = <std::result::Result<usize, error::ErrorCode> as Try>::branch(move _260) -> [return: bb117, unwind: bb312];
    }

    bb117: {
        StorageDead(_260);
        _267 = discriminant(_259);
        switchInt(move _267) -> [0: bb118, 1: bb119, otherwise: bb4];
    }

    bb118: {
        StorageLive(_271);
        _271 = ((_259 as Continue).0: usize);
        _258 = _271;
        StorageDead(_271);
        StorageDead(_265);
        StorageDead(_262);
        StorageDead(_259);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        _276 = &_115;
        _275 = <RefMut<'_, SpotMarket> as Deref>::deref(move _276) -> [return: bb121, unwind: bb312];
    }

    bb119: {
        StorageLive(_268);
        _268 = ((_259 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_270);
        _270 = _268;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _270) -> [return: bb120, unwind: bb312];
    }

    bb120: {
        StorageDead(_270);
        StorageDead(_268);
        StorageDead(_265);
        StorageDead(_262);
        StorageDead(_259);
        goto -> bb276;
    }

    bb121: {
        _274 = &(*_275);
        StorageDead(_276);
        _273 = SpotMarket::is_reduce_only(move _274) -> [return: bb122, unwind: bb312];
    }

    bb122: {
        switchInt(move _273) -> [0: bb143, otherwise: bb123];
    }

    bb123: {
        StorageDead(_275);
        StorageDead(_274);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        _280 = &(*_16);
        _279 = <RefMut<'_, User> as Deref>::deref(move _280) -> [return: bb124, unwind: bb312];
    }

    bb124: {
        StorageDead(_280);
        StorageLive(_281);
        _281 = _258;
        _282 = Len(((*_279).3: [state::user::SpotPosition; 8]));
        _283 = Lt(_281, _282);
        assert(move _283, "index out of bounds: the length is {} but the index is {}", move _282, _281) -> [success: bb125, unwind: bb312];
    }

    bb125: {
        _278 = &(((*_279).3: [state::user::SpotPosition; 8])[_281].5: state::spot_market::SpotBalanceType);
        StorageLive(_284);
        _608 = const _;
        _284 = &(*_608);
        _277 = <SpotBalanceType as PartialEq>::eq(move _278, move _284) -> [return: bb126, unwind: bb312];
    }

    bb126: {
        switchInt(move _277) -> [0: bb142, otherwise: bb127];
    }

    bb127: {
        StorageDead(_284);
        StorageDead(_281);
        StorageDead(_279);
        StorageDead(_278);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        _294 = &(*_16);
        _293 = <RefMut<'_, User> as Deref>::deref(move _294) -> [return: bb128, unwind: bb312];
    }

    bb128: {
        StorageDead(_294);
        StorageLive(_295);
        _295 = _258;
        _296 = Len(((*_293).3: [state::user::SpotPosition; 8]));
        _297 = Lt(_295, _296);
        assert(move _297, "index out of bounds: the length is {} but the index is {}", move _296, _295) -> [success: bb129, unwind: bb312];
    }

    bb129: {
        _292 = &((*_293).3: [state::user::SpotPosition; 8])[_295];
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        _301 = &_115;
        _300 = &(*_301);
        _299 = <RefMut<'_, SpotMarket> as Deref>::deref(move _300) -> [return: bb130, unwind: bb312];
    }

    bb130: {
        _298 = &(*_299);
        StorageDead(_300);
        _291 = SpotPosition::get_token_amount(move _292, move _298) -> [return: bb131, unwind: bb312];
    }

    bb131: {
        StorageDead(_298);
        StorageDead(_292);
        _290 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _291) -> [return: bb132, unwind: bb312];
    }

    bb132: {
        StorageDead(_291);
        _302 = discriminant(_290);
        switchInt(move _302) -> [0: bb133, 1: bb134, otherwise: bb4];
    }

    bb133: {
        StorageLive(_306);
        _306 = ((_290 as Continue).0: u128);
        _289 = _306;
        StorageDead(_306);
        _288 = <u128 as Cast>::cast::<u64>(move _289) -> [return: bb136, unwind: bb312];
    }

    bb134: {
        StorageLive(_303);
        _303 = ((_290 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_305);
        _305 = _303;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _305) -> [return: bb135, unwind: bb312];
    }

    bb135: {
        StorageDead(_305);
        StorageDead(_303);
        StorageDead(_289);
        StorageDead(_288);
        goto -> bb274;
    }

    bb136: {
        StorageDead(_289);
        _287 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _288) -> [return: bb137, unwind: bb312];
    }

    bb137: {
        StorageDead(_288);
        _307 = discriminant(_287);
        switchInt(move _307) -> [0: bb138, 1: bb139, otherwise: bb4];
    }

    bb138: {
        StorageLive(_311);
        _311 = ((_287 as Continue).0: u64);
        _286 = _311;
        StorageDead(_311);
        StorageLive(_312);
        _312 = _3;
        _272 = <u64 as Ord>::min(move _286, move _312) -> [return: bb141, unwind: bb312];
    }

    bb139: {
        StorageLive(_308);
        _308 = ((_287 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_310);
        _310 = _308;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _310) -> [return: bb140, unwind: bb312];
    }

    bb140: {
        StorageDead(_310);
        StorageDead(_308);
        goto -> bb274;
    }

    bb141: {
        StorageDead(_312);
        StorageDead(_286);
        StorageDead(_301);
        StorageDead(_299);
        StorageDead(_295);
        StorageDead(_293);
        StorageDead(_290);
        StorageDead(_287);
        goto -> bb145;
    }

    bb142: {
        StorageDead(_284);
        StorageDead(_281);
        StorageDead(_279);
        StorageDead(_278);
        goto -> bb144;
    }

    bb143: {
        StorageDead(_275);
        StorageDead(_274);
        goto -> bb144;
    }

    bb144: {
        _272 = _3;
        goto -> bb145;
    }

    bb145: {
        StorageDead(_277);
        StorageDead(_273);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        _315 = &(*_16);
        _314 = <RefMut<'_, User> as Deref>::deref(move _315) -> [return: bb146, unwind: bb312];
    }

    bb146: {
        StorageDead(_315);
        _313 = ((*_314).7: u64);
        StorageDead(_314);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        _318 = &(*_16);
        _317 = <RefMut<'_, User> as Deref>::deref(move _318) -> [return: bb147, unwind: bb312];
    }

    bb147: {
        StorageDead(_318);
        _316 = ((*_317).8: u64);
        StorageDead(_317);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        _321 = &mut (*_16);
        _320 = <RefMut<'_, User> as DerefMut>::deref_mut(move _321) -> [return: bb148, unwind: bb312];
    }

    bb148: {
        StorageDead(_321);
        StorageLive(_322);
        _322 = _258;
        _323 = Len(((*_320).3: [state::user::SpotPosition; 8]));
        _324 = Lt(_322, _323);
        assert(move _324, "index out of bounds: the length is {} but the index is {}", move _323, _322) -> [success: bb149, unwind: bb312];
    }

    bb149: {
        _319 = &mut ((*_320).3: [state::user::SpotPosition; 8])[_322];
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        _329 = _272;
        _328 = move _329 as u128 (IntToInt);
        StorageDead(_329);
        StorageLive(_330);
        StorageLive(_331);
        _607 = const _;
        _331 = &(*_607);
        _330 = &(*_331);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        _336 = &mut _115;
        _335 = &mut (*_336);
        _334 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _335) -> [return: bb150, unwind: bb312];
    }

    bb150: {
        _333 = &mut (*_334);
        StorageDead(_335);
        StorageLive(_337);
        _337 = &mut (*_319);
        StorageLive(_338);
        _338 = Option::<u128>::None;
        _327 = update_spot_balances_and_cumulative_deposits(move _328, move _330, move _333, move _337, const false, move _338) -> [return: bb151, unwind: bb312];
    }

    bb151: {
        StorageDead(_338);
        StorageDead(_337);
        StorageDead(_333);
        StorageDead(_330);
        StorageDead(_328);
        _326 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _327) -> [return: bb152, unwind: bb312];
    }

    bb152: {
        StorageDead(_327);
        _339 = discriminant(_326);
        switchInt(move _339) -> [0: bb153, 1: bb154, otherwise: bb4];
    }

    bb153: {
        StorageLive(_343);
        _343 = ((_326 as Continue).0: ());
        _325 = _343;
        StorageDead(_343);
        StorageDead(_336);
        StorageDead(_334);
        StorageDead(_331);
        StorageDead(_326);
        StorageDead(_325);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        _347 = &(*_319);
        StorageLive(_348);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        _351 = &_115;
        _350 = &(*_351);
        _349 = <RefMut<'_, SpotMarket> as Deref>::deref(move _350) -> [return: bb156, unwind: bb312];
    }

    bb154: {
        StorageLive(_340);
        _340 = ((_326 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_342);
        _342 = _340;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _342) -> [return: bb155, unwind: bb312];
    }

    bb155: {
        StorageDead(_342);
        StorageDead(_340);
        StorageDead(_336);
        StorageDead(_334);
        StorageDead(_331);
        StorageDead(_326);
        StorageDead(_325);
        goto -> bb273;
    }

    bb156: {
        _348 = &(*_349);
        StorageDead(_350);
        _346 = SpotPosition::get_token_amount(move _347, move _348) -> [return: bb157, unwind: bb312];
    }

    bb157: {
        StorageDead(_348);
        StorageDead(_347);
        _345 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _346) -> [return: bb158, unwind: bb312];
    }

    bb158: {
        StorageDead(_346);
        _352 = discriminant(_345);
        switchInt(move _352) -> [0: bb159, 1: bb160, otherwise: bb4];
    }

    bb159: {
        StorageLive(_356);
        _356 = ((_345 as Continue).0: u128);
        _344 = _356;
        StorageDead(_356);
        StorageDead(_351);
        StorageDead(_349);
        StorageDead(_345);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        _359 = _344;
        _358 = Eq(move _359, const 0_u128);
        switchInt(move _358) -> [0: bb163, otherwise: bb162];
    }

    bb160: {
        StorageLive(_353);
        _353 = ((_345 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_355);
        _355 = _353;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _355) -> [return: bb161, unwind: bb312];
    }

    bb161: {
        StorageDead(_355);
        StorageDead(_353);
        StorageDead(_351);
        StorageDead(_349);
        StorageDead(_345);
        goto -> bb272;
    }

    bb162: {
        StorageDead(_359);
        StorageLive(_360);
        StorageLive(_361);
        StorageLive(_362);
        StorageLive(_363);
        StorageLive(_364);
        _364 = ((*_319).0: u64);
        _363 = Eq(move _364, const 0_u64);
        switchInt(move _363) -> [0: bb165, otherwise: bb164];
    }

    bb163: {
        StorageDead(_359);
        _357 = const ();
        goto -> bb184;
    }

    bb164: {
        StorageDead(_364);
        StorageLive(_365);
        _365 = ();
        _362 = std::result::Result::<(), error::ErrorCode>::Ok(move _365);
        StorageDead(_365);
        goto -> bb179;
    }

    bb165: {
        StorageDead(_364);
        StorageLive(_366);
        _366 = error::ErrorCode::InvalidSpotPosition;
        StorageLive(_367);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        StorageLive(_371);
        StorageLive(_372);
        StorageLive(_373);
        StorageLive(_374);
        StorageLive(_375);
        StorageLive(_376);
        StorageLive(_377);
        _606 = const _;
        _377 = &(*_606);
        _376 = &(*_377);
        _375 = move _376 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_376);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        StorageLive(_382);
        StorageLive(_383);
        StorageLive(_384);
        StorageLive(_385);
        _385 = &_366;
        _384 = &(*_385);
        _383 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _384) -> [return: bb166, unwind: bb312];
    }

    bb166: {
        StorageDead(_384);
        _382 = [move _383];
        StorageDead(_383);
        _381 = &_382;
        _380 = &(*_381);
        _379 = move _380 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_380);
        _374 = Arguments::<'_>::new_v1(move _375, move _379) -> [return: bb167, unwind: bb312];
    }

    bb167: {
        StorageDead(_379);
        StorageDead(_375);
        _373 = format(move _374) -> [return: bb168, unwind: bb312];
    }

    bb168: {
        StorageDead(_374);
        StorageDead(_385);
        StorageDead(_382);
        StorageDead(_381);
        StorageDead(_377);
        _372 = move _373;
        StorageDead(_373);
        _371 = &_372;
        _370 = &(*_371);
        _369 = <String as Deref>::deref(move _370) -> [return: bb169, unwind: bb293];
    }

    bb169: {
        _368 = &(*_369);
        StorageDead(_370);
        _367 = solana_program::log::sol_log(move _368) -> [return: bb170, unwind: bb293];
    }

    bb170: {
        StorageDead(_368);
        drop(_372) -> [return: bb171, unwind: bb312];
    }

    bb171: {
        StorageDead(_372);
        StorageDead(_371);
        StorageDead(_369);
        StorageDead(_367);
        StorageLive(_386);
        StorageLive(_387);
        StorageLive(_388);
        StorageLive(_389);
        StorageLive(_390);
        StorageLive(_391);
        StorageLive(_392);
        StorageLive(_393);
        StorageLive(_394);
        StorageLive(_395);
        StorageLive(_396);
        _605 = const _;
        _396 = &(*_605);
        _395 = &(*_396);
        _394 = move _395 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_395);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        StorageLive(_401);
        StorageLive(_402);
        StorageLive(_403);
        StorageLive(_404);
        _404 = &((*_319).0: u64);
        _403 = &(*_404);
        _402 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _403) -> [return: bb172, unwind: bb312];
    }

    bb172: {
        StorageDead(_403);
        StorageLive(_405);
        StorageLive(_406);
        StorageLive(_407);
        _407 = &_344;
        _406 = &(*_407);
        _405 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _406) -> [return: bb173, unwind: bb312];
    }

    bb173: {
        StorageDead(_406);
        _401 = [move _402, move _405];
        StorageDead(_405);
        StorageDead(_402);
        _400 = &_401;
        _399 = &(*_400);
        _398 = move _399 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_399);
        _393 = Arguments::<'_>::new_v1(move _394, move _398) -> [return: bb174, unwind: bb312];
    }

    bb174: {
        StorageDead(_398);
        StorageDead(_394);
        _392 = format(move _393) -> [return: bb175, unwind: bb312];
    }

    bb175: {
        StorageDead(_393);
        StorageDead(_407);
        StorageDead(_404);
        StorageDead(_401);
        StorageDead(_400);
        StorageDead(_396);
        _391 = move _392;
        StorageDead(_392);
        _390 = &_391;
        _389 = &(*_390);
        _388 = <String as Deref>::deref(move _389) -> [return: bb176, unwind: bb292];
    }

    bb176: {
        _387 = &(*_388);
        StorageDead(_389);
        _386 = solana_program::log::sol_log(move _387) -> [return: bb177, unwind: bb292];
    }

    bb177: {
        StorageDead(_387);
        drop(_391) -> [return: bb178, unwind: bb312];
    }

    bb178: {
        StorageDead(_391);
        StorageDead(_390);
        StorageDead(_388);
        StorageDead(_386);
        StorageLive(_408);
        _408 = _366;
        _362 = std::result::Result::<(), error::ErrorCode>::Err(move _408);
        StorageDead(_408);
        StorageDead(_366);
        goto -> bb179;
    }

    bb179: {
        StorageDead(_363);
        _361 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _362) -> [return: bb180, unwind: bb312];
    }

    bb180: {
        StorageDead(_362);
        _409 = discriminant(_361);
        switchInt(move _409) -> [0: bb181, 1: bb182, otherwise: bb4];
    }

    bb181: {
        StorageLive(_413);
        _413 = ((_361 as Continue).0: ());
        _360 = _413;
        StorageDead(_413);
        StorageDead(_361);
        StorageDead(_360);
        _357 = const ();
        goto -> bb184;
    }

    bb182: {
        StorageLive(_410);
        _410 = ((_361 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_412);
        _412 = _410;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _412) -> [return: bb183, unwind: bb312];
    }

    bb183: {
        StorageDead(_412);
        StorageDead(_410);
        StorageDead(_361);
        StorageDead(_360);
        StorageDead(_358);
        StorageDead(_357);
        goto -> bb272;
    }

    bb184: {
        StorageDead(_358);
        StorageDead(_357);
        StorageLive(_414);
        StorageLive(_415);
        StorageLive(_416);
        _416 = &((*_319).5: state::spot_market::SpotBalanceType);
        StorageLive(_417);
        _604 = const _;
        _417 = &(*_604);
        _415 = <SpotBalanceType as PartialEq>::eq(move _416, move _417) -> [return: bb185, unwind: bb312];
    }

    bb185: {
        switchInt(move _415) -> [0: bb211, otherwise: bb186];
    }

    bb186: {
        StorageDead(_417);
        StorageDead(_416);
        StorageLive(_419);
        StorageLive(_420);
        _420 = ((*_319).0: u64);
        _419 = Gt(move _420, const 0_u64);
        switchInt(move _419) -> [0: bb210, otherwise: bb187];
    }

    bb187: {
        StorageDead(_420);
        StorageLive(_421);
        StorageLive(_422);
        StorageLive(_423);
        StorageLive(_424);
        StorageLive(_425);
        StorageLive(_426);
        _426 = &_115;
        _425 = <RefMut<'_, SpotMarket> as Deref>::deref(move _426) -> [return: bb188, unwind: bb312];
    }

    bb188: {
        StorageDead(_426);
        _427 = discriminant(((*_425).45: state::perp_market::MarketStatus));
        switchInt(move _427) -> [1: bb190, otherwise: bb189];
    }

    bb189: {
        _424 = const false;
        goto -> bb191;
    }

    bb190: {
        _424 = const true;
        goto -> bb191;
    }

    bb191: {
        switchInt(move _424) -> [0: bb193, otherwise: bb192];
    }

    bb192: {
        StorageDead(_425);
        StorageLive(_428);
        _428 = ();
        _423 = std::result::Result::<(), error::ErrorCode>::Ok(move _428);
        StorageDead(_428);
        goto -> bb205;
    }

    bb193: {
        StorageDead(_425);
        StorageLive(_429);
        _429 = error::ErrorCode::MarketActionPaused;
        StorageLive(_430);
        StorageLive(_431);
        StorageLive(_432);
        StorageLive(_433);
        StorageLive(_434);
        StorageLive(_435);
        StorageLive(_436);
        StorageLive(_437);
        StorageLive(_438);
        StorageLive(_439);
        StorageLive(_440);
        _603 = const _;
        _440 = &(*_603);
        _439 = &(*_440);
        _438 = move _439 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_439);
        StorageLive(_442);
        StorageLive(_443);
        StorageLive(_444);
        StorageLive(_445);
        StorageLive(_446);
        StorageLive(_447);
        StorageLive(_448);
        _448 = &_429;
        _447 = &(*_448);
        _446 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _447) -> [return: bb194, unwind: bb312];
    }

    bb194: {
        StorageDead(_447);
        _445 = [move _446];
        StorageDead(_446);
        _444 = &_445;
        _443 = &(*_444);
        _442 = move _443 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_443);
        _437 = Arguments::<'_>::new_v1(move _438, move _442) -> [return: bb195, unwind: bb312];
    }

    bb195: {
        StorageDead(_442);
        StorageDead(_438);
        _436 = format(move _437) -> [return: bb196, unwind: bb312];
    }

    bb196: {
        StorageDead(_437);
        StorageDead(_448);
        StorageDead(_445);
        StorageDead(_444);
        StorageDead(_440);
        _435 = move _436;
        StorageDead(_436);
        _434 = &_435;
        _433 = &(*_434);
        _432 = <String as Deref>::deref(move _433) -> [return: bb197, unwind: bb291];
    }

    bb197: {
        _431 = &(*_432);
        StorageDead(_433);
        _430 = solana_program::log::sol_log(move _431) -> [return: bb198, unwind: bb291];
    }

    bb198: {
        StorageDead(_431);
        drop(_435) -> [return: bb199, unwind: bb312];
    }

    bb199: {
        StorageDead(_435);
        StorageDead(_434);
        StorageDead(_432);
        StorageDead(_430);
        StorageLive(_449);
        StorageLive(_450);
        StorageLive(_451);
        StorageLive(_452);
        StorageLive(_453);
        StorageLive(_454);
        StorageLive(_455);
        StorageLive(_456);
        StorageLive(_457);
        StorageLive(_458);
        StorageLive(_459);
        _602 = const _;
        _459 = &(*_602);
        _458 = &(*_459);
        _457 = move _458 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_458);
        _456 = Arguments::<'_>::new_const(move _457) -> [return: bb200, unwind: bb312];
    }

    bb200: {
        StorageDead(_457);
        _455 = format(move _456) -> [return: bb201, unwind: bb312];
    }

    bb201: {
        StorageDead(_456);
        StorageDead(_459);
        _454 = move _455;
        StorageDead(_455);
        _453 = &_454;
        _452 = &(*_453);
        _451 = <String as Deref>::deref(move _452) -> [return: bb202, unwind: bb290];
    }

    bb202: {
        _450 = &(*_451);
        StorageDead(_452);
        _449 = solana_program::log::sol_log(move _450) -> [return: bb203, unwind: bb290];
    }

    bb203: {
        StorageDead(_450);
        drop(_454) -> [return: bb204, unwind: bb312];
    }

    bb204: {
        StorageDead(_454);
        StorageDead(_453);
        StorageDead(_451);
        StorageDead(_449);
        StorageLive(_461);
        _461 = _429;
        _423 = std::result::Result::<(), error::ErrorCode>::Err(move _461);
        StorageDead(_461);
        StorageDead(_429);
        goto -> bb205;
    }

    bb205: {
        StorageDead(_424);
        _422 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _423) -> [return: bb206, unwind: bb312];
    }

    bb206: {
        StorageDead(_423);
        _462 = discriminant(_422);
        switchInt(move _462) -> [0: bb207, 1: bb208, otherwise: bb4];
    }

    bb207: {
        StorageLive(_466);
        _466 = ((_422 as Continue).0: ());
        _421 = _466;
        StorageDead(_466);
        StorageDead(_422);
        StorageDead(_421);
        _414 = const ();
        goto -> bb213;
    }

    bb208: {
        StorageLive(_463);
        _463 = ((_422 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_465);
        _465 = _463;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _465) -> [return: bb209, unwind: bb312];
    }

    bb209: {
        StorageDead(_465);
        StorageDead(_463);
        StorageDead(_422);
        StorageDead(_421);
        StorageDead(_419);
        StorageDead(_415);
        StorageDead(_414);
        goto -> bb272;
    }

    bb210: {
        StorageDead(_420);
        goto -> bb212;
    }

    bb211: {
        StorageDead(_417);
        StorageDead(_416);
        goto -> bb212;
    }

    bb212: {
        _414 = const ();
        goto -> bb213;
    }

    bb213: {
        StorageDead(_419);
        StorageDead(_415);
        StorageDead(_414);
        StorageLive(_467);
        StorageLive(_468);
        _630 = const false;
        _468 = move _115;
        _467 = std::mem::drop::<RefMut<'_, SpotMarket>>(move _468) -> [return: bb214, unwind: bb312];
    }

    bb214: {
        StorageDead(_468);
        StorageDead(_467);
        StorageLive(_469);
        StorageLive(_470);
        StorageLive(_471);
        StorageLive(_472);
        _472 = &mut (*_16);
        _471 = <RefMut<'_, User> as DerefMut>::deref_mut(move _472) -> [return: bb215, unwind: bb312];
    }

    bb215: {
        _470 = &mut (*_471);
        StorageDead(_472);
        StorageLive(_473);
        _473 = _38;
        _469 = User::update_last_active_slot(move _470, move _473) -> [return: bb216, unwind: bb312];
    }

    bb216: {
        StorageDead(_473);
        StorageDead(_470);
        StorageDead(_471);
        StorageDead(_469);
        StorageLive(_474);
        StorageLive(_475);
        StorageLive(_476);
        StorageLive(_477);
        StorageLive(_478);
        _478 = &_43;
        StorageLive(_479);
        StorageLive(_480);
        _480 = &_2;
        _479 = &(*_480);
        _477 = SpotMarketMap::<'_>::get_ref_mut(move _478, move _479) -> [return: bb217, unwind: bb312];
    }

    bb217: {
        StorageDead(_479);
        StorageDead(_478);
        _476 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _477) -> [return: bb218, unwind: bb312];
    }

    bb218: {
        StorageDead(_477);
        _481 = discriminant(_476);
        switchInt(move _481) -> [0: bb219, 1: bb220, otherwise: bb4];
    }

    bb219: {
        StorageLive(_485);
        _485 = move ((_476 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _475 = move _485;
        StorageDead(_485);
        _474 = &mut _475;
        _649 = discriminant(_476);
        StorageDead(_480);
        StorageDead(_476);
        StorageLive(_486);
        StorageLive(_487);
        StorageLive(_488);
        StorageLive(_489);
        StorageLive(_490);
        _620 = deref_copy (_1.1: &mut instructions::admin::AdminDeposit<'_>);
        _490 = &((*_620).5: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _489 = &(*_490);
        StorageLive(_491);
        StorageLive(_492);
        _621 = deref_copy (_1.1: &mut instructions::admin::AdminDeposit<'_>);
        _492 = &((*_621).4: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _622 = deref_copy (*_492);
        _674 = (((_622.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _491 = &(*_674);
        StorageLive(_493);
        StorageLive(_494);
        _623 = deref_copy (_1.1: &mut instructions::admin::AdminDeposit<'_>);
        _494 = &((*_623).3: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _624 = deref_copy (*_494);
        _675 = (((_624.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _493 = &(*_675);
        StorageLive(_495);
        StorageLive(_496);
        StorageLive(_497);
        StorageLive(_498);
        _625 = deref_copy (_1.1: &mut instructions::admin::AdminDeposit<'_>);
        _498 = &((*_625).2: anchor_lang::prelude::Signer<'_>);
        _497 = &(*_498);
        _496 = <anchor_lang::prelude::Signer<'_> as Deref>::deref(move _497) -> [return: bb222, unwind: bb289];
    }

    bb220: {
        StorageLive(_482);
        _482 = ((_476 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_484);
        _484 = _482;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _484) -> [return: bb221, unwind: bb310];
    }

    bb221: {
        StorageDead(_484);
        StorageDead(_482);
        _647 = discriminant(_476);
        StorageDead(_480);
        StorageDead(_476);
        goto -> bb271;
    }

    bb222: {
        _495 = &(*_496);
        StorageDead(_497);
        StorageLive(_499);
        _499 = _272;
        StorageLive(_500);
        StorageLive(_501);
        _501 = &_66;
        _500 = &(*_501);
        StorageLive(_502);
        StorageLive(_503);
        StorageLive(_504);
        StorageLive(_505);
        StorageLive(_506);
        _506 = &(*_474);
        _505 = <RefMut<'_, SpotMarket> as Deref>::deref(move _506) -> [return: bb223, unwind: bb289];
    }

    bb223: {
        _504 = &(*_505);
        StorageDead(_506);
        _503 = SpotMarket::has_transfer_hook(move _504) -> [return: bb224, unwind: bb289];
    }

    bb224: {
        switchInt(move _503) -> [0: bb226, otherwise: bb225];
    }

    bb225: {
        StorageDead(_505);
        StorageDead(_504);
        StorageLive(_507);
        _507 = &mut (*_39);
        _502 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::Some(move _507);
        StorageDead(_507);
        goto -> bb227;
    }

    bb226: {
        StorageDead(_505);
        StorageDead(_504);
        _502 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::None;
        goto -> bb227;
    }

    bb227: {
        StorageDead(_503);
        _488 = receive(move _489, move _491, move _493, move _495, move _499, move _500, move _502) -> [return: bb228, unwind: bb289];
    }

    bb228: {
        StorageDead(_502);
        StorageDead(_500);
        StorageDead(_499);
        StorageDead(_495);
        StorageDead(_493);
        StorageDead(_491);
        StorageDead(_489);
        _487 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _488) -> [return: bb229, unwind: bb289];
    }

    bb229: {
        StorageDead(_488);
        _508 = discriminant(_487);
        switchInt(move _508) -> [0: bb230, 1: bb231, otherwise: bb4];
    }

    bb230: {
        StorageLive(_512);
        _512 = ((_487 as Continue).0: ());
        _486 = _512;
        StorageDead(_512);
        _651 = discriminant(_487);
        StorageDead(_501);
        StorageDead(_498);
        StorageDead(_496);
        StorageDead(_494);
        StorageDead(_492);
        StorageDead(_490);
        StorageDead(_487);
        StorageDead(_486);
        StorageLive(_513);
        StorageLive(_514);
        StorageLive(_515);
        StorageLive(_516);
        _626 = deref_copy (_1.1: &mut instructions::admin::AdminDeposit<'_>);
        _627 = deref_copy ((*_626).3: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _676 = (((_627.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _516 = &mut (*_676);
        _515 = anchor_lang::prelude::InterfaceAccount::<'_, anchor_spl::token_interface::TokenAccount>::reload(move _516) -> [return: bb233, unwind: bb289];
    }

    bb231: {
        StorageLive(_509);
        _509 = move ((_487 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_511);
        _511 = move _509;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _511) -> [return: bb232, unwind: bb309];
    }

    bb232: {
        StorageDead(_511);
        StorageDead(_509);
        _657 = discriminant(_487);
        StorageDead(_501);
        StorageDead(_498);
        StorageDead(_496);
        StorageDead(_494);
        StorageDead(_492);
        StorageDead(_490);
        StorageDead(_487);
        StorageDead(_486);
        goto -> bb270;
    }

    bb233: {
        StorageDead(_516);
        _514 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _515) -> [return: bb234, unwind: bb289];
    }

    bb234: {
        StorageDead(_515);
        _517 = discriminant(_514);
        switchInt(move _517) -> [0: bb235, 1: bb236, otherwise: bb4];
    }

    bb235: {
        StorageLive(_521);
        _521 = ((_514 as Continue).0: ());
        _513 = _521;
        StorageDead(_521);
        _653 = discriminant(_514);
        StorageDead(_514);
        StorageDead(_513);
        StorageLive(_522);
        StorageLive(_523);
        StorageLive(_524);
        StorageLive(_525);
        StorageLive(_526);
        StorageLive(_527);
        _527 = &(*_474);
        _526 = <RefMut<'_, SpotMarket> as Deref>::deref(move _527) -> [return: bb238, unwind: bb289];
    }

    bb236: {
        StorageLive(_518);
        _518 = move ((_514 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_520);
        _520 = move _518;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _520) -> [return: bb237, unwind: bb308];
    }

    bb237: {
        StorageDead(_520);
        StorageDead(_518);
        _655 = discriminant(_514);
        StorageDead(_514);
        StorageDead(_513);
        goto -> bb270;
    }

    bb238: {
        _525 = &(*_526);
        StorageDead(_527);
        StorageLive(_528);
        StorageLive(_529);
        StorageLive(_530);
        StorageLive(_531);
        StorageLive(_532);
        _628 = deref_copy (_1.1: &mut instructions::admin::AdminDeposit<'_>);
        _629 = deref_copy ((*_628).3: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _677 = (((_629.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _532 = &(*_677);
        _531 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _532) -> [return: bb239, unwind: bb289];
    }

    bb239: {
        _530 = &(*_531);
        _529 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _530) -> [return: bb240, unwind: bb289];
    }

    bb240: {
        StorageDead(_532);
        StorageDead(_530);
        _528 = ((*_529).2: u64);
        _524 = validate_spot_market_vault_amount(move _525, move _528) -> [return: bb241, unwind: bb289];
    }

    bb241: {
        StorageDead(_528);
        StorageDead(_525);
        _523 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _524) -> [return: bb242, unwind: bb289];
    }

    bb242: {
        StorageDead(_524);
        _533 = discriminant(_523);
        switchInt(move _533) -> [0: bb243, 1: bb244, otherwise: bb4];
    }

    bb243: {
        StorageLive(_537);
        _537 = ((_523 as Continue).0: i64);
        _522 = _537;
        StorageDead(_537);
        StorageDead(_531);
        StorageDead(_529);
        StorageDead(_526);
        StorageDead(_523);
        StorageDead(_522);
        StorageLive(_538);
        StorageLive(_539);
        StorageLive(_540);
        StorageLive(_541);
        _541 = &(*_474);
        _540 = <RefMut<'_, SpotMarket> as Deref>::deref(move _541) -> [return: bb246, unwind: bb289];
    }

    bb244: {
        StorageLive(_534);
        _534 = ((_523 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_536);
        _536 = _534;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _536) -> [return: bb245, unwind: bb289];
    }

    bb245: {
        StorageDead(_536);
        StorageDead(_534);
        StorageDead(_531);
        StorageDead(_529);
        StorageDead(_526);
        StorageDead(_523);
        StorageDead(_522);
        goto -> bb270;
    }

    bb246: {
        StorageDead(_541);
        _539 = ((*_540).30: u64);
        StorageDead(_540);
        StorageLive(_542);
        StorageLive(_543);
        StorageLive(_544);
        StorageLive(_545);
        _545 = _539;
        _544 = core::num::<impl u64>::checked_add(move _545, const 1_u64) -> [return: bb247, unwind: bb289];
    }

    bb247: {
        StorageDead(_545);
        StorageLive(_546);
        _546 = Option::<u64>::Some(const 1_u64);
        _543 = Option::<u64>::or(move _544, move _546) -> [return: bb248, unwind: bb289];
    }

    bb248: {
        StorageDead(_546);
        StorageDead(_544);
        _542 = Option::<u64>::unwrap(move _543) -> [return: bb249, unwind: bb289];
    }

    bb249: {
        StorageDead(_543);
        StorageLive(_547);
        StorageLive(_548);
        _548 = &mut (*_474);
        _547 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _548) -> [return: bb250, unwind: bb289];
    }

    bb250: {
        StorageDead(_548);
        ((*_547).30: u64) = move _542;
        StorageDead(_542);
        StorageDead(_547);
        _538 = _539;
        StorageDead(_539);
        StorageLive(_549);
        _549 = (_126.0: i64);
        StorageLive(_550);
        StorageLive(_551);
        _551 = _37;
        StorageLive(_552);
        _552 = _538;
        StorageLive(_553);
        StorageLive(_554);
        StorageLive(_555);
        _555 = &(*_16);
        _554 = <RefMut<'_, User> as Deref>::deref(move _555) -> [return: bb251, unwind: bb289];
    }

    bb251: {
        StorageDead(_555);
        _553 = ((*_554).0: anchor_lang::prelude::Pubkey);
        StorageLive(_556);
        _556 = _14;
        StorageLive(_557);
        _557 = DepositDirection::Deposit;
        StorageLive(_558);
        _558 = _272;
        StorageLive(_559);
        _559 = _549;
        StorageLive(_560);
        StorageLive(_561);
        StorageLive(_562);
        _562 = &(*_474);
        _561 = <RefMut<'_, SpotMarket> as Deref>::deref(move _562) -> [return: bb252, unwind: bb289];
    }

    bb252: {
        StorageDead(_562);
        _560 = ((*_561).11: u128);
        StorageLive(_563);
        StorageLive(_564);
        StorageLive(_565);
        _565 = &(*_474);
        _564 = <RefMut<'_, SpotMarket> as Deref>::deref(move _565) -> [return: bb253, unwind: bb289];
    }

    bb253: {
        StorageDead(_565);
        _563 = ((*_564).12: u128);
        StorageLive(_566);
        StorageLive(_567);
        StorageLive(_568);
        _568 = &(*_474);
        _567 = <RefMut<'_, SpotMarket> as Deref>::deref(move _568) -> [return: bb254, unwind: bb289];
    }

    bb254: {
        StorageDead(_568);
        _566 = ((*_567).13: u128);
        StorageLive(_569);
        StorageLive(_570);
        StorageLive(_571);
        _571 = &(*_474);
        _570 = <RefMut<'_, SpotMarket> as Deref>::deref(move _571) -> [return: bb255, unwind: bb289];
    }

    bb255: {
        StorageDead(_571);
        _569 = ((*_570).14: u128);
        StorageLive(_572);
        _572 = _313;
        StorageLive(_573);
        _573 = _316;
        StorageLive(_574);
        _574 = _2;
        StorageLive(_575);
        _575 = DepositExplanation::Reward;
        StorageLive(_576);
        _576 = Option::<anchor_lang::prelude::Pubkey>::None;
        _550 = DepositRecord { ts: move _551, user_authority: move _553, user: move _556, direction: move _557, deposit_record_id: move _552, amount: move _558, market_index: move _574, oracle_price: move _559, market_deposit_balance: move _560, market_withdraw_balance: move _563, market_cumulative_deposit_interest: move _566, market_cumulative_borrow_interest: move _569, total_deposits_after: move _572, total_withdraws_after: move _573, explanation: move _575, transfer_user: move _576 };
        StorageDead(_576);
        StorageDead(_575);
        StorageDead(_574);
        StorageDead(_573);
        StorageDead(_572);
        StorageDead(_569);
        StorageDead(_566);
        StorageDead(_563);
        StorageDead(_560);
        StorageDead(_559);
        StorageDead(_558);
        StorageDead(_557);
        StorageDead(_556);
        StorageDead(_553);
        StorageDead(_552);
        StorageDead(_551);
        StorageDead(_570);
        StorageDead(_567);
        StorageDead(_564);
        StorageDead(_561);
        StorageDead(_554);
        StorageLive(_577);
        StorageLive(_578);
        StorageLive(_579);
        StorageLive(_580);
        StorageLive(_581);
        StorageLive(_582);
        StorageLive(_583);
        StorageLive(_584);
        StorageLive(_585);
        StorageLive(_586);
        StorageLive(_587);
        StorageLive(_588);
        StorageLive(_589);
        _589 = &_550;
        _588 = &(*_589);
        _587 = <DepositRecord as anchor_lang::Event>::data(move _588) -> [return: bb256, unwind: bb289];
    }

    bb256: {
        StorageDead(_588);
        _586 = &_587;
        _585 = &(*_586);
        _584 = <Vec<u8> as Deref>::deref(move _585) -> [return: bb257, unwind: bb288];
    }

    bb257: {
        _583 = &(*_584);
        StorageDead(_585);
        _582 = [move _583];
        StorageDead(_583);
        _581 = &_582;
        _580 = &(*_581);
        _579 = move _580 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_580);
        _578 = solana_program::log::sol_log_data(move _579) -> [return: bb258, unwind: bb288];
    }

    bb258: {
        StorageDead(_579);
        drop(_587) -> [return: bb259, unwind: bb289];
    }

    bb259: {
        StorageDead(_589);
        StorageDead(_587);
        StorageDead(_586);
        StorageDead(_584);
        StorageDead(_582);
        StorageDead(_581);
        StorageDead(_578);
        _577 = const ();
        StorageDead(_577);
        StorageLive(_590);
        StorageLive(_591);
        StorageLive(_592);
        StorageLive(_593);
        StorageLive(_594);
        StorageLive(_595);
        _595 = &(*_474);
        _594 = <RefMut<'_, SpotMarket> as Deref>::deref(move _595) -> [return: bb260, unwind: bb289];
    }

    bb260: {
        _593 = &(*_594);
        StorageDead(_595);
        _592 = SpotMarket::validate_max_token_deposits_and_borrows(move _593, const false) -> [return: bb261, unwind: bb289];
    }

    bb261: {
        StorageDead(_593);
        _591 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _592) -> [return: bb262, unwind: bb289];
    }

    bb262: {
        StorageDead(_592);
        _596 = discriminant(_591);
        switchInt(move _596) -> [0: bb263, 1: bb264, otherwise: bb4];
    }

    bb263: {
        StorageLive(_600);
        _600 = ((_591 as Continue).0: ());
        _590 = _600;
        StorageDead(_600);
        StorageDead(_594);
        StorageDead(_591);
        StorageDead(_590);
        StorageLive(_601);
        _601 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _601);
        StorageDead(_601);
        StorageDead(_550);
        StorageDead(_549);
        StorageDead(_538);
        drop(_475) -> [return: bb266, unwind: bb312];
    }

    bb264: {
        StorageLive(_597);
        _597 = ((_591 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_599);
        _599 = _597;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _599) -> [return: bb265, unwind: bb289];
    }

    bb265: {
        StorageDead(_599);
        StorageDead(_597);
        StorageDead(_594);
        StorageDead(_591);
        StorageDead(_590);
        StorageDead(_550);
        StorageDead(_549);
        StorageDead(_538);
        goto -> bb270;
    }

    bb266: {
        StorageDead(_475);
        StorageDead(_474);
        StorageDead(_344);
        StorageDead(_322);
        StorageDead(_320);
        StorageDead(_319);
        StorageDead(_316);
        StorageDead(_313);
        StorageDead(_272);
        StorageDead(_258);
        StorageDead(_126);
        _630 = const false;
        StorageDead(_115);
        StorageDead(_66);
        drop(_44) -> [return: bb267, unwind: bb300];
    }

    bb267: {
        StorageDead(_44);
        drop(_43) -> [return: bb268, unwind: bb303];
    }

    bb268: {
        StorageDead(_43);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_29);
        StorageDead(_28);
        drop(_17) -> [return: bb269, unwind: bb304];
    }

    bb269: {
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_14);
        goto -> bb287;
    }

    bb270: {
        drop(_475) -> [return: bb271, unwind: bb312];
    }

    bb271: {
        StorageDead(_475);
        StorageDead(_474);
        goto -> bb272;
    }

    bb272: {
        StorageDead(_344);
        goto -> bb273;
    }

    bb273: {
        StorageDead(_322);
        StorageDead(_320);
        StorageDead(_319);
        StorageDead(_316);
        StorageDead(_313);
        goto -> bb275;
    }

    bb274: {
        StorageDead(_286);
        StorageDead(_301);
        StorageDead(_299);
        StorageDead(_295);
        StorageDead(_293);
        StorageDead(_290);
        StorageDead(_287);
        StorageDead(_277);
        StorageDead(_273);
        goto -> bb275;
    }

    bb275: {
        StorageDead(_272);
        goto -> bb276;
    }

    bb276: {
        StorageDead(_258);
        goto -> bb277;
    }

    bb277: {
        StorageDead(_126);
        switchInt(_630) -> [0: bb278, otherwise: bb307];
    }

    bb278: {
        _630 = const false;
        StorageDead(_115);
        goto -> bb279;
    }

    bb279: {
        StorageDead(_66);
        drop(_44) -> [return: bb280, unwind: bb300];
    }

    bb280: {
        StorageDead(_44);
        drop(_43) -> [return: bb281, unwind: bb303];
    }

    bb281: {
        StorageDead(_43);
        goto -> bb284;
    }

    bb282: {
        StorageDead(_54);
        StorageDead(_53);
        drop(_51) -> [return: bb283, unwind: bb303];
    }

    bb283: {
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_46);
        StorageDead(_45);
        goto -> bb284;
    }

    bb284: {
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_37);
        goto -> bb285;
    }

    bb285: {
        StorageDead(_29);
        StorageDead(_28);
        drop(_17) -> [return: bb286, unwind: bb304];
    }

    bb286: {
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_14);
        goto -> bb287;
    }

    bb287: {
        return;
    }

    bb288 (cleanup): {
        drop(_587) -> [return: bb289, unwind terminate(cleanup)];
    }

    bb289 (cleanup): {
        drop(_475) -> [return: bb312, unwind terminate(cleanup)];
    }

    bb290 (cleanup): {
        drop(_454) -> [return: bb312, unwind terminate(cleanup)];
    }

    bb291 (cleanup): {
        drop(_435) -> [return: bb312, unwind terminate(cleanup)];
    }

    bb292 (cleanup): {
        drop(_391) -> [return: bb312, unwind terminate(cleanup)];
    }

    bb293 (cleanup): {
        drop(_372) -> [return: bb312, unwind terminate(cleanup)];
    }

    bb294 (cleanup): {
        drop(_219) -> [return: bb312, unwind terminate(cleanup)];
    }

    bb295 (cleanup): {
        drop(_178) -> [return: bb312, unwind terminate(cleanup)];
    }

    bb296 (cleanup): {
        drop(_159) -> [return: bb312, unwind terminate(cleanup)];
    }

    bb297 (cleanup): {
        drop(_95) -> [return: bb299, unwind terminate(cleanup)];
    }

    bb298 (cleanup): {
        drop(_51) -> [return: bb299, unwind terminate(cleanup)];
    }

    bb299 (cleanup): {
        drop(_44) -> [return: bb300, unwind terminate(cleanup)];
    }

    bb300 (cleanup): {
        drop(_43) -> [return: bb303, unwind terminate(cleanup)];
    }

    bb301 (cleanup): {
        drop(_54) -> [return: bb302, unwind terminate(cleanup)];
    }

    bb302 (cleanup): {
        drop(_51) -> [return: bb303, unwind terminate(cleanup)];
    }

    bb303 (cleanup): {
        drop(_17) -> [return: bb304, unwind terminate(cleanup)];
    }

    bb304 (cleanup): {
        resume;
    }

    bb305 (cleanup): {
        _667 = discriminant(_46);
        drop(_54) -> [return: bb298, unwind terminate(cleanup)];
    }

    bb306: {
        _641 = discriminant(_46);
        StorageDead(_59);
        drop(_54) -> [return: bb29, unwind: bb298];
    }

    bb307: {
        drop(_115) -> [return: bb278, unwind: bb299];
    }

    bb308 (cleanup): {
        _663 = discriminant(_514);
        goto -> bb289;
    }

    bb309 (cleanup): {
        _664 = discriminant(_487);
        goto -> bb289;
    }

    bb310 (cleanup): {
        _665 = discriminant(_476);
        goto -> bb312;
    }

    bb311 (cleanup): {
        drop(_115) -> [return: bb299, unwind terminate(cleanup)];
    }

    bb312 (cleanup): {
        switchInt(_630) -> [0: bb299, otherwise: bb311];
    }

    bb313 (cleanup): {
        _666 = discriminant(_116);
        goto -> bb299;
    }

    bb314 (cleanup): {
        _668 = discriminant(_46);
        goto -> bb301;
    }

    bb315 (cleanup): {
        _669 = discriminant(_30);
        goto -> bb303;
    }

    bb316 (cleanup): {
        _670 = discriminant(_18);
        goto -> bb304;
    }

    bb317 (cleanup): {
        _671 = discriminant(_5);
        goto -> bb304;
    }
}
