digraph Mir_0_4449 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn FuelOverflow::total_fuel(_1: &amp;ReErased state::user::FuelOverflow) -&gt; std::result::Result&lt;u128, error::ErrorCode&gt;<br align="left"/>let mut _2: u128;<br align="left"/>let mut _3: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _4: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _5: u128;<br align="left"/>let mut _6: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _7: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _8: u128;<br align="left"/>let mut _9: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _10: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _11: u128;<br align="left"/>let mut _12: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _13: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _14: u128;<br align="left"/>let mut _15: u128;<br align="left"/>let mut _16: isize;<br align="left"/>let _17: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _18: !;<br align="left"/>let mut _19: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _20: u128;<br align="left"/>let mut _21: u128;<br align="left"/>let mut _22: isize;<br align="left"/>let _23: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _24: !;<br align="left"/>let mut _25: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _26: u128;<br align="left"/>let mut _27: u128;<br align="left"/>let mut _28: isize;<br align="left"/>let _29: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _30: !;<br align="left"/>let mut _31: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _32: u128;<br align="left"/>let mut _33: u128;<br align="left"/>let mut _34: isize;<br align="left"/>let _35: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _36: !;<br align="left"/>let mut _37: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _38: u128;<br align="left"/>let mut _39: u128;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug residual =&gt; _17;<br align="left"/>debug val =&gt; _20;<br align="left"/>debug residual =&gt; _23;<br align="left"/>debug val =&gt; _26;<br align="left"/>debug residual =&gt; _29;<br align="left"/>debug val =&gt; _32;<br align="left"/>debug residual =&gt; _35;<br align="left"/>debug val =&gt; _38;<br align="left"/>>;
    bb0__0_4449 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>_14 = ((*_1).1: u128)<br/>StorageLive(_15)<br/>_15 = ((*_1).2: u128)<br/></td></tr><tr><td align="left">_13 = &lt;u128 as SafeMath&gt;::safe_add(move _14, move _15)</td></tr></table>>];
    bb1__0_4449 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageDead(_14)<br/></td></tr><tr><td align="left">_12 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _13)</td></tr></table>>];
    bb2__0_4449 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>_16 = discriminant(_12)<br/></td></tr><tr><td align="left">switchInt(move _16)</td></tr></table>>];
    bb3__0_4449 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_20)<br/>_20 = ((_12 as Continue).0: u128)<br/>_11 = _20<br/>StorageDead(_20)<br/>StorageLive(_21)<br/>_21 = ((*_1).3: u128)<br/></td></tr><tr><td align="left">_10 = &lt;u128 as SafeMath&gt;::safe_add(move _11, move _21)</td></tr></table>>];
    bb4__0_4449 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_4449 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_17)<br/>_17 = ((_12 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_19)<br/>_19 = _17<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _19)</td></tr></table>>];
    bb6__0_4449 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageDead(_17)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_4449 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>StorageDead(_11)<br/></td></tr><tr><td align="left">_9 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _10)</td></tr></table>>];
    bb8__0_4449 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>_22 = discriminant(_9)<br/></td></tr><tr><td align="left">switchInt(move _22)</td></tr></table>>];
    bb9__0_4449 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_26)<br/>_26 = ((_9 as Continue).0: u128)<br/>_8 = _26<br/>StorageDead(_26)<br/>StorageLive(_27)<br/>_27 = ((*_1).4: u128)<br/></td></tr><tr><td align="left">_7 = &lt;u128 as SafeMath&gt;::safe_add(move _8, move _27)</td></tr></table>>];
    bb10__0_4449 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_23)<br/>_23 = ((_9 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_25)<br/>_25 = _23<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _25)</td></tr></table>>];
    bb11__0_4449 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_23)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_4449 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">_6 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _7)</td></tr></table>>];
    bb13__0_4449 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>_28 = discriminant(_6)<br/></td></tr><tr><td align="left">switchInt(move _28)</td></tr></table>>];
    bb14__0_4449 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageLive(_32)<br/>_32 = ((_6 as Continue).0: u128)<br/>_5 = _32<br/>StorageDead(_32)<br/>StorageLive(_33)<br/>_33 = ((*_1).5: u128)<br/></td></tr><tr><td align="left">_4 = &lt;u128 as SafeMath&gt;::safe_add(move _5, move _33)</td></tr></table>>];
    bb15__0_4449 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_29)<br/>_29 = ((_6 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_31)<br/>_31 = _29<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _31)</td></tr></table>>];
    bb16__0_4449 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/>StorageDead(_29)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_4449 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">_3 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _4)</td></tr></table>>];
    bb18__0_4449 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>_34 = discriminant(_3)<br/></td></tr><tr><td align="left">switchInt(move _34)</td></tr></table>>];
    bb19__0_4449 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageLive(_38)<br/>_38 = ((_3 as Continue).0: u128)<br/>_2 = _38<br/>StorageDead(_38)<br/>StorageLive(_39)<br/>_39 = ((*_1).6: u128)<br/></td></tr><tr><td align="left">_0 = &lt;u128 as SafeMath&gt;::safe_add(move _2, move _39)</td></tr></table>>];
    bb20__0_4449 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageLive(_35)<br/>_35 = ((_3 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_37)<br/>_37 = _35<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _37)</td></tr></table>>];
    bb21__0_4449 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/>StorageDead(_35)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb22__0_4449 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_39)<br/>StorageDead(_2)<br/>StorageDead(_12)<br/>StorageDead(_9)<br/>StorageDead(_6)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb23__0_4449 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb24__0_4449 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb25__0_4449 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_2)<br/>StorageDead(_12)<br/>StorageDead(_9)<br/>StorageDead(_6)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb26__0_4449 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_4449 -> bb1__0_4449 [label="return"];
    bb1__0_4449 -> bb2__0_4449 [label="return"];
    bb2__0_4449 -> bb3__0_4449 [label="0"];
    bb2__0_4449 -> bb5__0_4449 [label="1"];
    bb2__0_4449 -> bb4__0_4449 [label="otherwise"];
    bb3__0_4449 -> bb7__0_4449 [label="return"];
    bb5__0_4449 -> bb6__0_4449 [label="return"];
    bb6__0_4449 -> bb23__0_4449 [label=""];
    bb7__0_4449 -> bb8__0_4449 [label="return"];
    bb8__0_4449 -> bb9__0_4449 [label="0"];
    bb8__0_4449 -> bb10__0_4449 [label="1"];
    bb8__0_4449 -> bb4__0_4449 [label="otherwise"];
    bb9__0_4449 -> bb12__0_4449 [label="return"];
    bb10__0_4449 -> bb11__0_4449 [label="return"];
    bb11__0_4449 -> bb23__0_4449 [label=""];
    bb12__0_4449 -> bb13__0_4449 [label="return"];
    bb13__0_4449 -> bb14__0_4449 [label="0"];
    bb13__0_4449 -> bb15__0_4449 [label="1"];
    bb13__0_4449 -> bb4__0_4449 [label="otherwise"];
    bb14__0_4449 -> bb17__0_4449 [label="return"];
    bb15__0_4449 -> bb16__0_4449 [label="return"];
    bb16__0_4449 -> bb24__0_4449 [label=""];
    bb17__0_4449 -> bb18__0_4449 [label="return"];
    bb18__0_4449 -> bb19__0_4449 [label="0"];
    bb18__0_4449 -> bb20__0_4449 [label="1"];
    bb18__0_4449 -> bb4__0_4449 [label="otherwise"];
    bb19__0_4449 -> bb22__0_4449 [label="return"];
    bb20__0_4449 -> bb21__0_4449 [label="return"];
    bb21__0_4449 -> bb25__0_4449 [label=""];
    bb22__0_4449 -> bb26__0_4449 [label=""];
    bb23__0_4449 -> bb24__0_4449 [label=""];
    bb24__0_4449 -> bb25__0_4449 [label=""];
    bb25__0_4449 -> bb26__0_4449 [label=""];
}
