// MIR for `openbook_v2::<impl at programs/drift/src/state/fulfillment_params/openbook_v2.rs:63:1: 63:39>::load_openbook_v2_market` after PreCodegen

fn openbook_v2::<impl at programs/drift/src/state/fulfillment_params/openbook_v2.rs:63:1: 63:39>::load_openbook_v2_market(_1: &OpenbookV2Context<'_, '_>) -> std::result::Result<openbook_v2_light::Market, error::ErrorCode> {
    debug self => _1;
    let mut _0: std::result::Result<openbook_v2_light::Market, error::ErrorCode>;
    let _2: std::cell::Ref<'_, openbook_v2_light::Market>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, openbook_v2_light::Market>>;
    let mut _4: std::result::Result<std::cell::Ref<'_, openbook_v2_light::Market>, error::ErrorCode>;
    let mut _5: std::result::Result<std::cell::Ref<'_, openbook_v2_light::Market>, anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _7: {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:66:55: 66:58};
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _12: std::cell::Ref<'_, openbook_v2_light::Market>;
    let mut _13: openbook_v2_light::Market;
    let mut _14: &openbook_v2_light::Market;
    let mut _15: &std::cell::Ref<'_, openbook_v2_light::Market>;
    let mut _16: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _17: isize;
    let mut _18: isize;
    let mut _19: isize;
    let mut _20: isize;
    let mut _21: isize;
    scope 1 {
        debug market => _2;
    }
    scope 2 {
        debug residual => _9;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _12;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _16 = deref_copy ((*_1).1: &anchor_lang::prelude::AccountInfo<'_>);
        _6 = &(*_16);
        _5 = load_ref::<openbook_v2_light::Market>(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        StorageLive(_7);
        _7 = {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:66:55: 66:58};
        _4 = std::result::Result::<Ref<'_, openbook_v2_light::Market>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:66:55: 66:58}>(move _5, move _7) -> [return: bb2, unwind: bb12];
    }

    bb2: {
        StorageDead(_7);
        StorageDead(_5);
        _3 = <std::result::Result<Ref<'_, openbook_v2_light::Market>, error::ErrorCode> as Try>::branch(move _4) -> [return: bb3, unwind: bb12];
    }

    bb3: {
        StorageDead(_4);
        _8 = discriminant(_3);
        switchInt(move _8) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_12);
        _12 = move ((_3 as Continue).0: std::cell::Ref<'_, openbook_v2_light::Market>);
        _2 = move _12;
        StorageDead(_12);
        _19 = discriminant(_3);
        StorageDead(_3);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &_2;
        _14 = <Ref<'_, openbook_v2_light::Market> as Deref>::deref(move _15) -> [return: bb8, unwind: bb11];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_9);
        _9 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_11);
        _11 = _9;
        _0 = <std::result::Result<openbook_v2_light::Market, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _11) -> [return: bb7, unwind: bb13];
    }

    bb7: {
        StorageDead(_11);
        StorageDead(_9);
        _17 = discriminant(_3);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb10;
    }

    bb8: {
        _13 = (*_14);
        StorageDead(_15);
        _0 = std::result::Result::<openbook_v2_light::Market, error::ErrorCode>::Ok(move _13);
        StorageDead(_13);
        drop(_2) -> [return: bb9, unwind: bb12];
    }

    bb9: {
        StorageDead(_2);
        StorageDead(_14);
        goto -> bb10;
    }

    bb10: {
        return;
    }

    bb11 (cleanup): {
        drop(_2) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        resume;
    }

    bb13 (cleanup): {
        _21 = discriminant(_3);
        goto -> bb12;
    }
}
