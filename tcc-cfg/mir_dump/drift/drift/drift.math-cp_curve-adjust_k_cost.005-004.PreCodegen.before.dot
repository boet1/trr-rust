digraph Mir_0_2170 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn adjust_k_cost(_1: &amp;ReErased mut state::perp_market::PerpMarket, _2: &amp;ReErased math::cp_curve::UpdateKResult) -&gt; std::result::Result&lt;i128, error::ErrorCode&gt;<br align="left"/>let mut _3: state::perp_market::PerpMarket;<br align="left"/>let _4: u128;<br align="left"/>let mut _5: (u128, i128);<br align="left"/>let mut _6: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (u128, i128)&gt;;<br align="left"/>let mut _7: std::result::Result&lt;(u128, i128), error::ErrorCode&gt;;<br align="left"/>let mut _8: i128;<br align="left"/>let mut _9: &amp;ReErased state::perp_market::AMM;<br align="left"/>let _10: &amp;ReErased state::perp_market::AMM;<br align="left"/>let mut _11: isize;<br align="left"/>let _12: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _13: !;<br align="left"/>let mut _14: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _15: (u128, i128);<br align="left"/>let _16: ();<br align="left"/>let mut _17: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _18: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _19: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _20: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _21: &amp;ReErased math::cp_curve::UpdateKResult;<br align="left"/>let mut _22: isize;<br align="left"/>let _23: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _24: !;<br align="left"/>let mut _25: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _26: ();<br align="left"/>let _27: u128;<br align="left"/>let _28: i128;<br align="left"/>let mut _29: (u128, i128);<br align="left"/>let mut _30: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (u128, i128)&gt;;<br align="left"/>let mut _31: std::result::Result&lt;(u128, i128), error::ErrorCode&gt;;<br align="left"/>let mut _32: i128;<br align="left"/>let mut _33: u128;<br align="left"/>let mut _34: &amp;ReErased state::perp_market::AMM;<br align="left"/>let _35: &amp;ReErased state::perp_market::AMM;<br align="left"/>let mut _36: isize;<br align="left"/>let _37: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _38: !;<br align="left"/>let mut _39: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _40: (u128, i128);<br align="left"/>let mut _41: i128;<br align="left"/>debug market =&gt; _1;<br align="left"/>debug update_k_result =&gt; _2;<br align="left"/>debug market_clone =&gt; _3;<br align="left"/>debug current_net_market_value =&gt; _4;<br align="left"/>debug residual =&gt; _12;<br align="left"/>debug val =&gt; _15;<br align="left"/>debug residual =&gt; _23;<br align="left"/>debug val =&gt; _26;<br align="left"/>debug _new_net_market_value =&gt; _27;<br align="left"/>debug cost =&gt; _28;<br align="left"/>debug residual =&gt; _37;<br align="left"/>debug val =&gt; _40;<br align="left"/>>;
    bb0__0_2170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>_3 = (*_1)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = ((_3.1: state::perp_market::AMM).15: i128)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>_10 = &amp;(_3.1: state::perp_market::AMM)<br/>_9 = &amp;(*_10)<br/></td></tr><tr><td align="left">_7 = calculate_base_asset_value_and_pnl(move _8, const 0_u128, move _9)</td></tr></table>>];
    bb1__0_2170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">_6 = &lt;std::result::Result&lt;(u128, i128), error::ErrorCode&gt; as Try&gt;::branch(move _7)</td></tr></table>>];
    bb2__0_2170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>_11 = discriminant(_6)<br/></td></tr><tr><td align="left">switchInt(move _11)</td></tr></table>>];
    bb3__0_2170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_15)<br/>_15 = ((_6 as Continue).0: (u128, i128))<br/>_5 = _15<br/>StorageDead(_15)<br/>StorageLive(_4)<br/>_4 = (_5.0: u128)<br/>StorageDead(_10)<br/>StorageDead(_6)<br/>StorageDead(_5)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>_20 = &amp;mut _3<br/>_19 = &amp;mut (*_20)<br/>StorageLive(_21)<br/>_21 = &amp;(*_2)<br/></td></tr><tr><td align="left">_18 = cp_curve::update_k(move _19, move _21)</td></tr></table>>];
    bb4__0_2170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_2170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_12)<br/>_12 = ((_6 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_14)<br/>_14 = _12<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _14)</td></tr></table>>];
    bb6__0_2170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageDead(_12)<br/>StorageDead(_10)<br/>StorageDead(_6)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_2170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">_17 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _18)</td></tr></table>>];
    bb8__0_2170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>_22 = discriminant(_17)<br/></td></tr><tr><td align="left">switchInt(move _22)</td></tr></table>>];
    bb9__0_2170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_26)<br/>_26 = ((_17 as Continue).0: ())<br/>_16 = _26<br/>StorageDead(_26)<br/>StorageDead(_20)<br/>StorageDead(_17)<br/>StorageDead(_16)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>_32 = ((_3.1: state::perp_market::AMM).15: i128)<br/>StorageLive(_33)<br/>_33 = _4<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>_35 = &amp;(_3.1: state::perp_market::AMM)<br/>_34 = &amp;(*_35)<br/></td></tr><tr><td align="left">_31 = calculate_base_asset_value_and_pnl(move _32, move _33, move _34)</td></tr></table>>];
    bb10__0_2170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_23)<br/>_23 = ((_17 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_25)<br/>_25 = _23<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _25)</td></tr></table>>];
    bb11__0_2170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_23)<br/>StorageDead(_20)<br/>StorageDead(_17)<br/>StorageDead(_16)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_2170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>StorageDead(_33)<br/>StorageDead(_32)<br/></td></tr><tr><td align="left">_30 = &lt;std::result::Result&lt;(u128, i128), error::ErrorCode&gt; as Try&gt;::branch(move _31)</td></tr></table>>];
    bb13__0_2170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/>_36 = discriminant(_30)<br/></td></tr><tr><td align="left">switchInt(move _36)</td></tr></table>>];
    bb14__0_2170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageLive(_40)<br/>_40 = ((_30 as Continue).0: (u128, i128))<br/>_29 = _40<br/>StorageDead(_40)<br/>StorageLive(_27)<br/>_27 = (_29.0: u128)<br/>StorageLive(_28)<br/>_28 = (_29.1: i128)<br/>StorageDead(_35)<br/>StorageDead(_30)<br/>StorageDead(_29)<br/>StorageLive(_41)<br/>_41 = _28<br/>_0 = std::result::Result::&lt;i128, error::ErrorCode&gt;::Ok(move _41)<br/>StorageDead(_41)<br/>StorageDead(_28)<br/>StorageDead(_27)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_2170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_37)<br/>_37 = ((_30 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_39)<br/>_39 = _37<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _39)</td></tr></table>>];
    bb16__0_2170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_39)<br/>StorageDead(_37)<br/>StorageDead(_35)<br/>StorageDead(_30)<br/>StorageDead(_29)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_2170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_2170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb19__0_2170 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2170 -> bb1__0_2170 [label="return"];
    bb1__0_2170 -> bb2__0_2170 [label="return"];
    bb2__0_2170 -> bb3__0_2170 [label="0"];
    bb2__0_2170 -> bb5__0_2170 [label="1"];
    bb2__0_2170 -> bb4__0_2170 [label="otherwise"];
    bb3__0_2170 -> bb7__0_2170 [label="return"];
    bb5__0_2170 -> bb6__0_2170 [label="return"];
    bb6__0_2170 -> bb18__0_2170 [label=""];
    bb7__0_2170 -> bb8__0_2170 [label="return"];
    bb8__0_2170 -> bb9__0_2170 [label="0"];
    bb8__0_2170 -> bb10__0_2170 [label="1"];
    bb8__0_2170 -> bb4__0_2170 [label="otherwise"];
    bb9__0_2170 -> bb12__0_2170 [label="return"];
    bb10__0_2170 -> bb11__0_2170 [label="return"];
    bb11__0_2170 -> bb17__0_2170 [label=""];
    bb12__0_2170 -> bb13__0_2170 [label="return"];
    bb13__0_2170 -> bb14__0_2170 [label="0"];
    bb13__0_2170 -> bb15__0_2170 [label="1"];
    bb13__0_2170 -> bb4__0_2170 [label="otherwise"];
    bb14__0_2170 -> bb19__0_2170 [label=""];
    bb15__0_2170 -> bb16__0_2170 [label="return"];
    bb16__0_2170 -> bb17__0_2170 [label=""];
    bb17__0_2170 -> bb18__0_2170 [label=""];
    bb18__0_2170 -> bb19__0_2170 [label=""];
}
