digraph Mir_0_3801 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn PerpMarket::get_max_liquidation_fee(_1: &amp;ReErased state::perp_market::PerpMarket) -&gt; std::result::Result&lt;u32, error::ErrorCode&gt;<br align="left"/>let _2: u32;<br align="left"/>let mut _3: u32;<br align="left"/>let mut _4: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u32&gt;;<br align="left"/>let mut _5: std::result::Result&lt;u32, error::ErrorCode&gt;;<br align="left"/>let mut _6: u32;<br align="left"/>let mut _7: isize;<br align="left"/>let _8: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _9: !;<br align="left"/>let mut _10: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _11: u32;<br align="left"/>let mut _12: u32;<br align="left"/>let mut _13: std::result::Result&lt;u32, error::ErrorCode&gt;;<br align="left"/>let mut _14: u32;<br align="left"/>let mut _15: u32;<br align="left"/>let mut _16: bool;<br align="left"/>let mut _17: u32;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug max_liquidation_fee =&gt; _2;<br align="left"/>debug residual =&gt; _8;<br align="left"/>debug val =&gt; _11;<br align="left"/>>;
    bb0__0_3801 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = ((*_1).13: u32)<br/></td></tr><tr><td align="left">_5 = &lt;u32 as SafeMath&gt;::safe_mul(move _6, const _)</td></tr></table>>];
    bb1__0_3801 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/></td></tr><tr><td align="left">_4 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as Try&gt;::branch(move _5)</td></tr></table>>];
    bb2__0_3801 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>_7 = discriminant(_4)<br/></td></tr><tr><td align="left">switchInt(move _7)</td></tr></table>>];
    bb3__0_3801 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_11)<br/>_11 = ((_4 as Continue).0: u32)<br/>_3 = _11<br/>StorageDead(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>_14 = ((*_1).16: u32)<br/>StorageLive(_15)<br/>_16 = Eq(const _, const 0_u32)<br/></td></tr><tr><td align="left">assert(!move _16, &quot;attempt to divide `{}` by zero&quot;, const _)</td></tr></table>>];
    bb4__0_3801 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_3801 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_8)<br/>_8 = ((_4 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_10)<br/>_10 = _8<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _10)</td></tr></table>>];
    bb6__0_3801 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_8)<br/>StorageDead(_3)<br/>StorageDead(_4)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_3801 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_15 = Div(const _, const _)<br/></td></tr><tr><td align="left">_13 = &lt;u32 as SafeMath&gt;::safe_mul(move _14, move _15)</td></tr></table>>];
    bb8__0_3801 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageDead(_14)<br/></td></tr><tr><td align="left">_12 = std::result::Result::&lt;u32, error::ErrorCode&gt;::unwrap_or(move _13, const _)</td></tr></table>>];
    bb9__0_3801 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/></td></tr><tr><td align="left">_2 = &lt;u32 as Ord&gt;::min(move _3, move _12)</td></tr></table>>];
    bb10__0_3801 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_3)<br/>StorageDead(_4)<br/>StorageLive(_17)<br/>_17 = _2<br/>_0 = std::result::Result::&lt;u32, error::ErrorCode&gt;::Ok(move _17)<br/>StorageDead(_17)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb11__0_3801 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_3801 -> bb1__0_3801 [label="return"];
    bb1__0_3801 -> bb2__0_3801 [label="return"];
    bb2__0_3801 -> bb3__0_3801 [label="0"];
    bb2__0_3801 -> bb5__0_3801 [label="1"];
    bb2__0_3801 -> bb4__0_3801 [label="otherwise"];
    bb3__0_3801 -> bb7__0_3801 [label="success"];
    bb5__0_3801 -> bb6__0_3801 [label="return"];
    bb6__0_3801 -> bb11__0_3801 [label=""];
    bb7__0_3801 -> bb8__0_3801 [label="return"];
    bb8__0_3801 -> bb9__0_3801 [label="return"];
    bb9__0_3801 -> bb10__0_3801 [label="return"];
    bb10__0_3801 -> bb11__0_3801 [label=""];
}
