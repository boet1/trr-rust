digraph Mir_0_2710 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn adjust_peg_cost(_1: &amp;ReErased state::perp_market::PerpMarket, _2: u128) -&gt; std::result::Result&lt;(state::perp_market::PerpMarket, i128), error::ErrorCode&gt;<br align="left"/>let mut _3: state::perp_market::PerpMarket;<br align="left"/>let _4: i128;<br align="left"/>let mut _5: bool;<br align="left"/>let mut _6: u128;<br align="left"/>let mut _7: u128;<br align="left"/>let _8: u128;<br align="left"/>let mut _9: (u128, i128);<br align="left"/>let mut _10: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (u128, i128)&gt;;<br align="left"/>let mut _11: std::result::Result&lt;(u128, i128), error::ErrorCode&gt;;<br align="left"/>let mut _12: i128;<br align="left"/>let mut _13: &amp;ReErased state::perp_market::AMM;<br align="left"/>let _14: &amp;ReErased state::perp_market::AMM;<br align="left"/>let mut _15: isize;<br align="left"/>let _16: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _17: !;<br align="left"/>let mut _18: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _19: (u128, i128);<br align="left"/>let mut _20: u128;<br align="left"/>let _21: u128;<br align="left"/>let _22: i128;<br align="left"/>let mut _23: (u128, i128);<br align="left"/>let mut _24: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (u128, i128)&gt;;<br align="left"/>let mut _25: std::result::Result&lt;(u128, i128), error::ErrorCode&gt;;<br align="left"/>let mut _26: i128;<br align="left"/>let mut _27: u128;<br align="left"/>let mut _28: &amp;ReErased state::perp_market::AMM;<br align="left"/>let _29: &amp;ReErased state::perp_market::AMM;<br align="left"/>let mut _30: isize;<br align="left"/>let _31: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _32: !;<br align="left"/>let mut _33: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _34: (u128, i128);<br align="left"/>let mut _35: (state::perp_market::PerpMarket, i128);<br align="left"/>let mut _36: state::perp_market::PerpMarket;<br align="left"/>let mut _37: i128;<br align="left"/>debug market =&gt; _1;<br align="left"/>debug new_peg_candidate =&gt; _2;<br align="left"/>debug market_clone =&gt; _3;<br align="left"/>debug cost =&gt; _4;<br align="left"/>debug current_net_market_value =&gt; _8;<br align="left"/>debug residual =&gt; _16;<br align="left"/>debug val =&gt; _19;<br align="left"/>debug _new_net_market_value =&gt; _21;<br align="left"/>debug cost =&gt; _22;<br align="left"/>debug residual =&gt; _31;<br align="left"/>debug val =&gt; _34;<br align="left"/>>;
    bb0__0_2710 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>_3 = (*_1)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = _2<br/>StorageLive(_7)<br/>_7 = ((_3.1: state::perp_market::AMM).11: u128)<br/>_5 = Ne(move _6, move _7)<br/></td></tr><tr><td align="left">switchInt(move _5)</td></tr></table>>];
    bb1__0_2710 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>StorageDead(_6)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>_12 = ((_3.1: state::perp_market::AMM).15: i128)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>_14 = &amp;(_3.1: state::perp_market::AMM)<br/>_13 = &amp;(*_14)<br/></td></tr><tr><td align="left">_11 = calculate_base_asset_value_and_pnl(move _12, const 0_u128, move _13)</td></tr></table>>];
    bb2__0_2710 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">_10 = &lt;std::result::Result&lt;(u128, i128), error::ErrorCode&gt; as Try&gt;::branch(move _11)</td></tr></table>>];
    bb3__0_2710 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>_15 = discriminant(_10)<br/></td></tr><tr><td align="left">switchInt(move _15)</td></tr></table>>];
    bb4__0_2710 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_19)<br/>_19 = ((_10 as Continue).0: (u128, i128))<br/>_9 = _19<br/>StorageDead(_19)<br/>StorageLive(_8)<br/>_8 = (_9.0: u128)<br/>StorageDead(_14)<br/>StorageDead(_10)<br/>StorageDead(_9)<br/>StorageLive(_20)<br/>_20 = _2<br/>((_3.1: state::perp_market::AMM).11: u128) = move _20<br/>StorageDead(_20)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>_26 = ((_3.1: state::perp_market::AMM).15: i128)<br/>StorageLive(_27)<br/>_27 = _8<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>_29 = &amp;(_3.1: state::perp_market::AMM)<br/>_28 = &amp;(*_29)<br/></td></tr><tr><td align="left">_25 = calculate_base_asset_value_and_pnl(move _26, move _27, move _28)</td></tr></table>>];
    bb5__0_2710 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb6__0_2710 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_16)<br/>_16 = ((_10 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_18)<br/>_18 = _16<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(PerpMarket, i128), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _18)</td></tr></table>>];
    bb7__0_2710 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageDead(_16)<br/>StorageDead(_14)<br/>StorageDead(_10)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_2710 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>StorageDead(_27)<br/>StorageDead(_26)<br/></td></tr><tr><td align="left">_24 = &lt;std::result::Result&lt;(u128, i128), error::ErrorCode&gt; as Try&gt;::branch(move _25)</td></tr></table>>];
    bb9__0_2710 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>_30 = discriminant(_24)<br/></td></tr><tr><td align="left">switchInt(move _30)</td></tr></table>>];
    bb10__0_2710 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_34)<br/>_34 = ((_24 as Continue).0: (u128, i128))<br/>_23 = _34<br/>StorageDead(_34)<br/>StorageLive(_21)<br/>_21 = (_23.0: u128)<br/>StorageLive(_22)<br/>_22 = (_23.1: i128)<br/>StorageDead(_29)<br/>StorageDead(_24)<br/>StorageDead(_23)<br/>_4 = _22<br/>StorageDead(_22)<br/>StorageDead(_21)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb11__0_2710 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_31)<br/>_31 = ((_24 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_33)<br/>_33 = _31<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(PerpMarket, i128), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _33)</td></tr></table>>];
    bb12__0_2710 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>StorageDead(_31)<br/>StorageDead(_29)<br/>StorageDead(_24)<br/>StorageDead(_23)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_2710 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>StorageDead(_6)<br/>_4 = const 0_i128<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_2710 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageLive(_35)<br/>StorageLive(_36)<br/>_36 = _3<br/>StorageLive(_37)<br/>_37 = _4<br/>_35 = (move _36, move _37)<br/>StorageDead(_37)<br/>StorageDead(_36)<br/>_0 = std::result::Result::&lt;(PerpMarket, i128), error::ErrorCode&gt;::Ok(move _35)<br/>StorageDead(_35)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_2710 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb16__0_2710 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2710 -> bb13__0_2710 [label="0"];
    bb0__0_2710 -> bb1__0_2710 [label="otherwise"];
    bb1__0_2710 -> bb2__0_2710 [label="return"];
    bb2__0_2710 -> bb3__0_2710 [label="return"];
    bb3__0_2710 -> bb4__0_2710 [label="0"];
    bb3__0_2710 -> bb6__0_2710 [label="1"];
    bb3__0_2710 -> bb5__0_2710 [label="otherwise"];
    bb4__0_2710 -> bb8__0_2710 [label="return"];
    bb6__0_2710 -> bb7__0_2710 [label="return"];
    bb7__0_2710 -> bb15__0_2710 [label=""];
    bb8__0_2710 -> bb9__0_2710 [label="return"];
    bb9__0_2710 -> bb10__0_2710 [label="0"];
    bb9__0_2710 -> bb11__0_2710 [label="1"];
    bb9__0_2710 -> bb5__0_2710 [label="otherwise"];
    bb10__0_2710 -> bb14__0_2710 [label=""];
    bb11__0_2710 -> bb12__0_2710 [label="return"];
    bb12__0_2710 -> bb15__0_2710 [label=""];
    bb13__0_2710 -> bb14__0_2710 [label=""];
    bb14__0_2710 -> bb16__0_2710 [label=""];
    bb15__0_2710 -> bb16__0_2710 [label=""];
}
