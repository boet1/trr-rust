digraph Mir_0_1910 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn calculate_auction_params_for_trigger_order(_1: &amp;ReErased state::user::Order, _2: &amp;ReErased state::oracle::OraclePriceData, _3: u8, _4: std::option::Option&lt;&amp;ReErased state::perp_market::PerpMarket&gt;) -&gt; std::result::Result&lt;(u8, i64, i64), error::ErrorCode&gt;<br align="left"/>let _5: u8;<br align="left"/>let mut _6: isize;<br align="left"/>let _7: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let _8: i64;<br align="left"/>let mut _9: bool;<br align="left"/>let mut _10: &amp;ReErased state::perp_market::ContractTier;<br align="left"/>let mut _11: &amp;ReErased state::perp_market::ContractTier;<br align="left"/>let _12: &amp;ReErased state::perp_market::ContractTier;<br align="left"/>let _13: state::perp_market::ContractTier;<br align="left"/>let _14: i64;<br align="left"/>let _15: i64;<br align="left"/>let _16: u8;<br align="left"/>let mut _17: (i64, i64, u8);<br align="left"/>let mut _18: bool;<br align="left"/>let mut _19: isize;<br align="left"/>let mut _20: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (i64, i64, u8)&gt;;<br align="left"/>let mut _21: std::result::Result&lt;(i64, i64, u8), error::ErrorCode&gt;;<br align="left"/>let mut _22: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _23: controller::position::PositionDirection;<br align="left"/>let mut _24: i64;<br align="left"/>let mut _25: std::option::Option&lt;i32&gt;;<br align="left"/>let mut _26: i64;<br align="left"/>let mut _27: isize;<br align="left"/>let _28: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _29: !;<br align="left"/>let mut _30: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _31: (i64, i64, u8);<br align="left"/>let mut _32: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (i64, i64, u8)&gt;;<br align="left"/>let mut _33: std::result::Result&lt;(i64, i64, u8), error::ErrorCode&gt;;<br align="left"/>let mut _34: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _35: controller::position::PositionDirection;<br align="left"/>let mut _36: i64;<br align="left"/>let mut _37: u64;<br align="left"/>let mut _38: i64;<br align="left"/>let mut _39: isize;<br align="left"/>let _40: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _41: !;<br align="left"/>let mut _42: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _43: (i64, i64, u8);<br align="left"/>let _44: u8;<br align="left"/>let mut _45: u8;<br align="left"/>let mut _46: u8;<br align="left"/>let mut _47: (u8, i64, i64);<br align="left"/>let mut _48: u8;<br align="left"/>let mut _49: i64;<br align="left"/>let mut _50: i64;<br align="left"/>let _51: i64;<br align="left"/>let _52: i64;<br align="left"/>let mut _53: (i64, i64);<br align="left"/>let mut _54: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (i64, i64)&gt;;<br align="left"/>let mut _55: std::result::Result&lt;(i64, i64), error::ErrorCode&gt;;<br align="left"/>let mut _56: &amp;ReErased state::oracle::OraclePriceData;<br align="left"/>let mut _57: controller::position::PositionDirection;<br align="left"/>let mut _58: u64;<br align="left"/>let mut _59: isize;<br align="left"/>let _60: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _61: !;<br align="left"/>let mut _62: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _63: (i64, i64);<br align="left"/>let mut _64: (u8, i64, i64);<br align="left"/>let mut _65: u8;<br align="left"/>let mut _66: i64;<br align="left"/>let mut _67: i64;<br align="left"/>let mut _68: &amp;ReErased state::perp_market::ContractTier;<br align="left"/>debug order =&gt; _1;<br align="left"/>debug oracle_price_data =&gt; _2;<br align="left"/>debug min_auction_duration =&gt; _3;<br align="left"/>debug perp_market =&gt; _4;<br align="left"/>debug auction_duration =&gt; _5;<br align="left"/>debug perp_market =&gt; _7;<br align="left"/>debug auction_start_buffer =&gt; _8;<br align="left"/>debug auction_start_price =&gt; _14;<br align="left"/>debug auction_end_price =&gt; _15;<br align="left"/>debug derived_auction_duration =&gt; _16;<br align="left"/>debug residual =&gt; _28;<br align="left"/>debug val =&gt; _31;<br align="left"/>debug residual =&gt; _40;<br align="left"/>debug val =&gt; _43;<br align="left"/>debug auction_duration =&gt; _44;<br align="left"/>debug auction_start_price =&gt; _51;<br align="left"/>debug auction_end_price =&gt; _52;<br align="left"/>debug residual =&gt; _60;<br align="left"/>debug val =&gt; _63;<br align="left"/>>;
    bb0__0_1910 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_5)<br/>_5 = _3<br/>_6 = discriminant(_4)<br/></td></tr><tr><td align="left">switchInt(move _6)</td></tr></table>>];
    bb1__0_1910 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageLive(_7)<br/>_7 = ((_4 as Some).0: &amp;state::perp_market::PerpMarket)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>_10 = &amp;((*_7).24: state::perp_market::ContractTier)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>_68 = const _<br/>_12 = &amp;(*_68)<br/>_11 = &amp;(*_12)<br/></td></tr><tr><td align="left">_9 = state::perp_market::ContractTier::is_as_safe_as_contract(move _10, move _11)</td></tr></table>>];
    bb2__0_1910 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left">switchInt(move _9)</td></tr></table>>];
    bb3__0_1910 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/>_8 = const -500_i64<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb4__0_1910 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/>_8 = const -3500_i64<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb5__0_1910 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>_19 = discriminant(((*_1).13: state::user::OrderType))<br/></td></tr><tr><td align="left">switchInt(move _19)</td></tr></table>>];
    bb6__0_1910 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">_18 = const false<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_1910 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_18 = const true<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_1910 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">switchInt(move _18)</td></tr></table>>];
    bb9__0_1910 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>_22 = &amp;(*_7)<br/>StorageLive(_23)<br/>_23 = ((*_1).17: controller::position::PositionDirection)<br/>StorageLive(_24)<br/>_24 = ((*_2).0: i64)<br/>StorageLive(_25)<br/>_25 = Option::&lt;i32&gt;::None<br/>StorageLive(_26)<br/>_26 = _8<br/></td></tr><tr><td align="left">_21 = order_params::OrderParams::derive_oracle_order_auction_params(move _22, move _23, move _24, move _25, move _26)</td></tr></table>>];
    bb10__0_1910 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>StorageDead(_25)<br/>StorageDead(_24)<br/>StorageDead(_23)<br/>StorageDead(_22)<br/></td></tr><tr><td align="left">_20 = &lt;std::result::Result&lt;(i64, i64, u8), error::ErrorCode&gt; as Try&gt;::branch(move _21)</td></tr></table>>];
    bb11__0_1910 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>_27 = discriminant(_20)<br/></td></tr><tr><td align="left">switchInt(move _27)</td></tr></table>>];
    bb12__0_1910 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageLive(_31)<br/>_31 = ((_20 as Continue).0: (i64, i64, u8))<br/>_17 = _31<br/>StorageDead(_31)<br/>StorageDead(_20)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_1910 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb14__0_1910 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageLive(_28)<br/>_28 = ((_20 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_30)<br/>_30 = _28<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u8, i64, i64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _30)</td></tr></table>>];
    bb15__0_1910 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>StorageDead(_28)<br/>StorageDead(_20)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb16__0_1910 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageLive(_32)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>_34 = &amp;(*_7)<br/>StorageLive(_35)<br/>_35 = ((*_1).17: controller::position::PositionDirection)<br/>StorageLive(_36)<br/>_36 = ((*_2).0: i64)<br/>StorageLive(_37)<br/>_37 = ((*_1).1: u64)<br/>StorageLive(_38)<br/>_38 = _8<br/></td></tr><tr><td align="left">_33 = order_params::OrderParams::derive_market_order_auction_params(move _34, move _35, move _36, move _37, move _38)</td></tr></table>>];
    bb17__0_1910 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_38)<br/>StorageDead(_37)<br/>StorageDead(_36)<br/>StorageDead(_35)<br/>StorageDead(_34)<br/></td></tr><tr><td align="left">_32 = &lt;std::result::Result&lt;(i64, i64, u8), error::ErrorCode&gt; as Try&gt;::branch(move _33)</td></tr></table>>];
    bb18__0_1910 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>_39 = discriminant(_32)<br/></td></tr><tr><td align="left">switchInt(move _39)</td></tr></table>>];
    bb19__0_1910 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageLive(_43)<br/>_43 = ((_32 as Continue).0: (i64, i64, u8))<br/>_17 = _43<br/>StorageDead(_43)<br/>StorageDead(_32)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_1910 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageLive(_40)<br/>_40 = ((_32 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_42)<br/>_42 = _40<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u8, i64, i64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _42)</td></tr></table>>];
    bb21__0_1910 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_42)<br/>StorageDead(_40)<br/>StorageDead(_32)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb22__0_1910 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageLive(_14)<br/>_14 = (_17.0: i64)<br/>StorageLive(_15)<br/>_15 = (_17.1: i64)<br/>StorageLive(_16)<br/>_16 = (_17.2: u8)<br/>StorageDead(_17)<br/>StorageLive(_44)<br/>StorageLive(_45)<br/>_45 = _5<br/>StorageLive(_46)<br/>_46 = _16<br/></td></tr><tr><td align="left">_44 = &lt;u8 as Ord&gt;::max(move _45, move _46)</td></tr></table>>];
    bb23__0_1910 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_46)<br/>StorageDead(_45)<br/>StorageLive(_47)<br/>StorageLive(_48)<br/>_48 = _44<br/>StorageLive(_49)<br/>_49 = _14<br/>StorageLive(_50)<br/>_50 = _15<br/>_47 = (move _48, move _49, move _50)<br/>StorageDead(_50)<br/>StorageDead(_49)<br/>StorageDead(_48)<br/>_0 = std::result::Result::&lt;(u8, i64, i64), error::ErrorCode&gt;::Ok(move _47)<br/>StorageDead(_47)<br/>StorageDead(_44)<br/>StorageDead(_16)<br/>StorageDead(_15)<br/>StorageDead(_14)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb24__0_1910 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageLive(_53)<br/>StorageLive(_54)<br/>StorageLive(_55)<br/>StorageLive(_56)<br/>_56 = &amp;(*_2)<br/>StorageLive(_57)<br/>_57 = ((*_1).17: controller::position::PositionDirection)<br/>StorageLive(_58)<br/>_58 = ((*_1).1: u64)<br/></td></tr><tr><td align="left">_55 = calculate_auction_prices(move _56, move _57, move _58)</td></tr></table>>];
    bb25__0_1910 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_58)<br/>StorageDead(_57)<br/>StorageDead(_56)<br/></td></tr><tr><td align="left">_54 = &lt;std::result::Result&lt;(i64, i64), error::ErrorCode&gt; as Try&gt;::branch(move _55)</td></tr></table>>];
    bb26__0_1910 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_55)<br/>_59 = discriminant(_54)<br/></td></tr><tr><td align="left">switchInt(move _59)</td></tr></table>>];
    bb27__0_1910 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageLive(_63)<br/>_63 = ((_54 as Continue).0: (i64, i64))<br/>_53 = _63<br/>StorageDead(_63)<br/>StorageLive(_51)<br/>_51 = (_53.0: i64)<br/>StorageLive(_52)<br/>_52 = (_53.1: i64)<br/>StorageDead(_54)<br/>StorageDead(_53)<br/>StorageLive(_64)<br/>StorageLive(_65)<br/>_65 = _5<br/>StorageLive(_66)<br/>_66 = _51<br/>StorageLive(_67)<br/>_67 = _52<br/>_64 = (move _65, move _66, move _67)<br/>StorageDead(_67)<br/>StorageDead(_66)<br/>StorageDead(_65)<br/>_0 = std::result::Result::&lt;(u8, i64, i64), error::ErrorCode&gt;::Ok(move _64)<br/>StorageDead(_64)<br/>StorageDead(_52)<br/>StorageDead(_51)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb28__0_1910 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageLive(_60)<br/>_60 = ((_54 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_62)<br/>_62 = _60<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u8, i64, i64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _62)</td></tr></table>>];
    bb29__0_1910 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_62)<br/>StorageDead(_60)<br/>StorageDead(_54)<br/>StorageDead(_53)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb30__0_1910 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb31__0_1910 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageDead(_17)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb32__0_1910 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb33__0_1910 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_1910 -> bb1__0_1910 [label="1"];
    bb0__0_1910 -> bb24__0_1910 [label="otherwise"];
    bb1__0_1910 -> bb2__0_1910 [label="return"];
    bb2__0_1910 -> bb4__0_1910 [label="0"];
    bb2__0_1910 -> bb3__0_1910 [label="otherwise"];
    bb3__0_1910 -> bb5__0_1910 [label=""];
    bb4__0_1910 -> bb5__0_1910 [label=""];
    bb5__0_1910 -> bb7__0_1910 [label="2"];
    bb5__0_1910 -> bb6__0_1910 [label="otherwise"];
    bb6__0_1910 -> bb8__0_1910 [label=""];
    bb7__0_1910 -> bb8__0_1910 [label=""];
    bb8__0_1910 -> bb16__0_1910 [label="0"];
    bb8__0_1910 -> bb9__0_1910 [label="otherwise"];
    bb9__0_1910 -> bb10__0_1910 [label="return"];
    bb10__0_1910 -> bb11__0_1910 [label="return"];
    bb11__0_1910 -> bb12__0_1910 [label="0"];
    bb11__0_1910 -> bb14__0_1910 [label="1"];
    bb11__0_1910 -> bb13__0_1910 [label="otherwise"];
    bb12__0_1910 -> bb22__0_1910 [label=""];
    bb14__0_1910 -> bb15__0_1910 [label="return"];
    bb15__0_1910 -> bb31__0_1910 [label=""];
    bb16__0_1910 -> bb17__0_1910 [label="return"];
    bb17__0_1910 -> bb18__0_1910 [label="return"];
    bb18__0_1910 -> bb19__0_1910 [label="0"];
    bb18__0_1910 -> bb20__0_1910 [label="1"];
    bb18__0_1910 -> bb13__0_1910 [label="otherwise"];
    bb19__0_1910 -> bb22__0_1910 [label=""];
    bb20__0_1910 -> bb21__0_1910 [label="return"];
    bb21__0_1910 -> bb31__0_1910 [label=""];
    bb22__0_1910 -> bb23__0_1910 [label="return"];
    bb23__0_1910 -> bb30__0_1910 [label=""];
    bb24__0_1910 -> bb25__0_1910 [label="return"];
    bb25__0_1910 -> bb26__0_1910 [label="return"];
    bb26__0_1910 -> bb27__0_1910 [label="0"];
    bb26__0_1910 -> bb28__0_1910 [label="1"];
    bb26__0_1910 -> bb13__0_1910 [label="otherwise"];
    bb27__0_1910 -> bb30__0_1910 [label=""];
    bb28__0_1910 -> bb29__0_1910 [label="return"];
    bb29__0_1910 -> bb32__0_1910 [label=""];
    bb30__0_1910 -> bb33__0_1910 [label=""];
    bb31__0_1910 -> bb32__0_1910 [label=""];
    bb32__0_1910 -> bb33__0_1910 [label=""];
}
