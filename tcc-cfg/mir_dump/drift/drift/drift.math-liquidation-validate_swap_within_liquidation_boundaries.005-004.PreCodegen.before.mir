// MIR for `validate_swap_within_liquidation_boundaries` before PreCodegen

fn validate_swap_within_liquidation_boundaries(_1: u128, _2: u128, _3: u32, _4: u32, _5: i64, _6: i64, _7: u32, _8: u32) -> std::result::Result<(), error::ErrorCode> {
    debug asset_transfer => _1;
    debug liability_transfer => _2;
    debug asset_decimals => _3;
    debug liability_decimals => _4;
    debug asset_price => _5;
    debug liability_price => _6;
    debug asset_liquidation_multiplier => _7;
    debug liability_liquidation_multiplier => _8;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _9: u128;
    let mut _10: u32;
    let mut _12: u32;
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _15: std::result::Result<u128, error::ErrorCode>;
    let mut _16: u128;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _18: std::result::Result<u128, error::ErrorCode>;
    let mut _19: u128;
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _21: std::result::Result<u128, error::ErrorCode>;
    let mut _22: u128;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _24: std::result::Result<u128, error::ErrorCode>;
    let mut _25: u128;
    let mut _26: isize;
    let mut _28: !;
    let mut _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _31: u128;
    let mut _32: isize;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _37: u128;
    let mut _38: isize;
    let mut _40: !;
    let mut _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _43: u128;
    let mut _44: isize;
    let mut _46: !;
    let mut _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _50: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _51: std::result::Result<u128, error::ErrorCode>;
    let mut _52: u128;
    let mut _53: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _54: std::result::Result<u128, error::ErrorCode>;
    let mut _55: u128;
    let mut _56: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _57: std::result::Result<u128, error::ErrorCode>;
    let mut _58: u128;
    let mut _59: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _60: std::result::Result<u128, error::ErrorCode>;
    let mut _61: u128;
    let mut _62: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _63: std::result::Result<u128, error::ErrorCode>;
    let mut _64: i64;
    let mut _65: isize;
    let mut _67: !;
    let mut _68: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _70: isize;
    let mut _72: !;
    let mut _73: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _75: u128;
    let mut _76: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _77: std::result::Result<u128, error::ErrorCode>;
    let mut _78: u32;
    let mut _79: isize;
    let mut _81: !;
    let mut _82: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _84: isize;
    let mut _86: !;
    let mut _87: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _89: u128;
    let mut _90: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _91: std::result::Result<u128, error::ErrorCode>;
    let mut _92: i64;
    let mut _93: isize;
    let mut _95: !;
    let mut _96: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _98: isize;
    let mut _100: !;
    let mut _101: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _103: u128;
    let mut _104: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _105: std::result::Result<u128, error::ErrorCode>;
    let mut _106: u32;
    let mut _107: isize;
    let mut _109: !;
    let mut _110: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _112: isize;
    let mut _114: !;
    let mut _115: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _117: ();
    let mut _118: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _119: std::result::Result<(), error::ErrorCode>;
    let mut _120: bool;
    let mut _121: u128;
    let mut _122: u128;
    let mut _123: ();
    let _125: ();
    let mut _126: &str;
    let _127: &str;
    let mut _128: &std::string::String;
    let _129: &std::string::String;
    let _130: std::string::String;
    let mut _132: std::fmt::Arguments<'_>;
    let mut _133: &[&str];
    let mut _134: &[&str; 2];
    let _135: &[&str; 2];
    let _136: [&str; 2];
    let mut _137: &[core::fmt::rt::Argument<'_>];
    let mut _138: &[core::fmt::rt::Argument<'_>; 1];
    let _139: &[core::fmt::rt::Argument<'_>; 1];
    let _140: [core::fmt::rt::Argument<'_>; 1];
    let mut _141: core::fmt::rt::Argument<'_>;
    let mut _142: &error::ErrorCode;
    let _143: &error::ErrorCode;
    let _144: ();
    let mut _145: &str;
    let _146: &str;
    let mut _147: &std::string::String;
    let _148: &std::string::String;
    let _149: std::string::String;
    let mut _151: std::fmt::Arguments<'_>;
    let mut _152: &[&str];
    let mut _153: &[&str; 3];
    let _154: &[&str; 3];
    let _155: [&str; 3];
    let mut _156: &[core::fmt::rt::Argument<'_>];
    let mut _157: &[core::fmt::rt::Argument<'_>; 2];
    let _158: &[core::fmt::rt::Argument<'_>; 2];
    let _159: [core::fmt::rt::Argument<'_>; 2];
    let mut _160: core::fmt::rt::Argument<'_>;
    let mut _161: &u128;
    let _162: &u128;
    let mut _163: core::fmt::rt::Argument<'_>;
    let mut _164: &u128;
    let _165: &u128;
    let mut _166: error::ErrorCode;
    let mut _167: isize;
    let mut _169: !;
    let mut _170: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _172: ();
    scope 1 {
        debug asset_precision => _9;
        let _11: u128;
        scope 2 {
            debug liability_precision => _11;
            let _13: u128;
            let _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _30: u128;
            let _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _36: u128;
            let _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _42: u128;
            let _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _48: u128;
            scope 3 {
                debug swap_price => _13;
                let _49: u128;
                let _66: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _69: u128;
                let _71: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _74: u128;
                let _80: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _83: u128;
                let _85: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _88: u128;
                let _94: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _97: u128;
                let _99: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _102: u128;
                let _108: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _111: u128;
                let _113: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _116: u128;
                scope 20 {
                    debug worst_case_price => _49;
                    let _124: error::ErrorCode;
                    let _168: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _171: ();
                    scope 53 {
                        debug error_code => _124;
                        let _131: std::string::String;
                        let _150: std::string::String;
                        let mut _173: &[&str; 3];
                        let mut _174: &[&str; 2];
                        scope 54 {
                            debug res => _131;
                        }
                        scope 55 {
                            debug res => _150;
                        }
                    }
                    scope 56 {
                        debug residual => _168;
                        scope 57 {
                        }
                    }
                    scope 58 {
                        debug val => _171;
                        scope 59 {
                        }
                    }
                }
                scope 21 {
                    debug residual => _66;
                    scope 22 {
                    }
                }
                scope 23 {
                    debug val => _69;
                    scope 24 {
                    }
                }
                scope 25 {
                    debug residual => _71;
                    scope 26 {
                    }
                }
                scope 27 {
                    debug val => _74;
                    scope 28 {
                    }
                }
                scope 29 {
                    debug residual => _80;
                    scope 30 {
                    }
                }
                scope 31 {
                    debug val => _83;
                    scope 32 {
                    }
                }
                scope 33 {
                    debug residual => _85;
                    scope 34 {
                    }
                }
                scope 35 {
                    debug val => _88;
                    scope 36 {
                    }
                }
                scope 37 {
                    debug residual => _94;
                    scope 38 {
                    }
                }
                scope 39 {
                    debug val => _97;
                    scope 40 {
                    }
                }
                scope 41 {
                    debug residual => _99;
                    scope 42 {
                    }
                }
                scope 43 {
                    debug val => _102;
                    scope 44 {
                    }
                }
                scope 45 {
                    debug residual => _108;
                    scope 46 {
                    }
                }
                scope 47 {
                    debug val => _111;
                    scope 48 {
                    }
                }
                scope 49 {
                    debug residual => _113;
                    scope 50 {
                    }
                }
                scope 51 {
                    debug val => _116;
                    scope 52 {
                    }
                }
            }
            scope 4 {
                debug residual => _27;
                scope 5 {
                }
            }
            scope 6 {
                debug val => _30;
                scope 7 {
                }
            }
            scope 8 {
                debug residual => _33;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _36;
                scope 11 {
                }
            }
            scope 12 {
                debug residual => _39;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _42;
                scope 15 {
                }
            }
            scope 16 {
                debug residual => _45;
                scope 17 {
                }
            }
            scope 18 {
                debug val => _48;
                scope 19 {
                }
            }
        }
    }

    bb0: {
        StorageLive(_9);
        StorageLive(_10);
        _10 = _3;
        _9 = core::num::<impl u128>::pow(const 10_u128, move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = _4;
        _11 = core::num::<impl u128>::pow(const 10_u128, move _12) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = _2;
        _24 = <u128 as SafeMath>::safe_mul(move _25, const _) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_25);
        _23 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _24) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_24);
        _26 = discriminant(_23);
        switchInt(move _26) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_30);
        _30 = ((_23 as Continue).0: u128);
        _22 = _30;
        StorageDead(_30);
        StorageLive(_31);
        _31 = _11;
        _21 = <u128 as SafeMath>::safe_div(move _22, move _31) -> [return: bb9, unwind continue];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_27);
        _27 = ((_23 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_29);
        _29 = _27;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _29) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_22);
        StorageDead(_21);
        goto -> bb92;
    }

    bb9: {
        StorageDead(_31);
        StorageDead(_22);
        _20 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _21) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_21);
        _32 = discriminant(_20);
        switchInt(move _32) -> [0: bb11, 1: bb12, otherwise: bb6];
    }

    bb11: {
        StorageLive(_36);
        _36 = ((_20 as Continue).0: u128);
        _19 = _36;
        StorageDead(_36);
        StorageLive(_37);
        _37 = _9;
        _18 = <u128 as SafeMath>::safe_mul(move _19, move _37) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_33);
        _33 = ((_20 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_35);
        _35 = _33;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _35) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_35);
        StorageDead(_33);
        goto -> bb92;
    }

    bb14: {
        StorageDead(_37);
        StorageDead(_19);
        _17 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _18) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_18);
        _38 = discriminant(_17);
        switchInt(move _38) -> [0: bb16, 1: bb17, otherwise: bb6];
    }

    bb16: {
        StorageLive(_42);
        _42 = ((_17 as Continue).0: u128);
        _16 = _42;
        StorageDead(_42);
        StorageLive(_43);
        _43 = _1;
        _15 = <u128 as SafeMath>::safe_div(move _16, move _43) -> [return: bb19, unwind continue];
    }

    bb17: {
        StorageLive(_39);
        _39 = ((_17 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_41);
        _41 = _39;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _41) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_41);
        StorageDead(_39);
        goto -> bb93;
    }

    bb19: {
        StorageDead(_43);
        StorageDead(_16);
        _14 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _15) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_15);
        _44 = discriminant(_14);
        switchInt(move _44) -> [0: bb21, 1: bb22, otherwise: bb6];
    }

    bb21: {
        StorageLive(_48);
        _48 = ((_14 as Continue).0: u128);
        _13 = _48;
        StorageDead(_48);
        StorageDead(_23);
        StorageDead(_20);
        StorageDead(_17);
        StorageDead(_14);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = _5;
        _63 = <i64 as Cast>::cast::<u128>(move _64) -> [return: bb24, unwind continue];
    }

    bb22: {
        StorageLive(_45);
        _45 = ((_14 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_47);
        _47 = _45;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _47) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_47);
        StorageDead(_45);
        goto -> bb94;
    }

    bb24: {
        StorageDead(_64);
        _62 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _63) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_63);
        _65 = discriminant(_62);
        switchInt(move _65) -> [0: bb26, 1: bb27, otherwise: bb6];
    }

    bb26: {
        StorageLive(_69);
        _69 = ((_62 as Continue).0: u128);
        _61 = _69;
        StorageDead(_69);
        _60 = <u128 as SafeMath>::safe_mul(move _61, const _) -> [return: bb29, unwind continue];
    }

    bb27: {
        StorageLive(_66);
        _66 = ((_62 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_68);
        _68 = _66;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _68) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_68);
        StorageDead(_66);
        StorageDead(_61);
        StorageDead(_60);
        goto -> bb89;
    }

    bb29: {
        StorageDead(_61);
        _59 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _60) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_60);
        _70 = discriminant(_59);
        switchInt(move _70) -> [0: bb31, 1: bb32, otherwise: bb6];
    }

    bb31: {
        StorageLive(_74);
        _74 = ((_59 as Continue).0: u128);
        _58 = _74;
        StorageDead(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = _8;
        _77 = <u32 as Cast>::cast::<u128>(move _78) -> [return: bb34, unwind continue];
    }

    bb32: {
        StorageLive(_71);
        _71 = ((_59 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_73);
        _73 = _71;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _73) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_73);
        StorageDead(_71);
        goto -> bb89;
    }

    bb34: {
        StorageDead(_78);
        _76 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _77) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_77);
        _79 = discriminant(_76);
        switchInt(move _79) -> [0: bb36, 1: bb37, otherwise: bb6];
    }

    bb36: {
        StorageLive(_83);
        _83 = ((_76 as Continue).0: u128);
        _75 = _83;
        StorageDead(_83);
        _57 = <u128 as SafeMath>::safe_mul(move _58, move _75) -> [return: bb39, unwind continue];
    }

    bb37: {
        StorageLive(_80);
        _80 = ((_76 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_82);
        _82 = _80;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _82) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_75);
        StorageDead(_58);
        StorageDead(_57);
        goto -> bb87;
    }

    bb39: {
        StorageDead(_75);
        StorageDead(_58);
        _56 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _57) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_57);
        _84 = discriminant(_56);
        switchInt(move _84) -> [0: bb41, 1: bb42, otherwise: bb6];
    }

    bb41: {
        StorageLive(_88);
        _88 = ((_56 as Continue).0: u128);
        _55 = _88;
        StorageDead(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _92 = _6;
        _91 = <i64 as Cast>::cast::<u128>(move _92) -> [return: bb44, unwind continue];
    }

    bb42: {
        StorageLive(_85);
        _85 = ((_56 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_87);
        _87 = _85;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _87) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_87);
        StorageDead(_85);
        goto -> bb87;
    }

    bb44: {
        StorageDead(_92);
        _90 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _91) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_91);
        _93 = discriminant(_90);
        switchInt(move _93) -> [0: bb46, 1: bb47, otherwise: bb6];
    }

    bb46: {
        StorageLive(_97);
        _97 = ((_90 as Continue).0: u128);
        _89 = _97;
        StorageDead(_97);
        _54 = <u128 as SafeMath>::safe_div(move _55, move _89) -> [return: bb49, unwind continue];
    }

    bb47: {
        StorageLive(_94);
        _94 = ((_90 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_96);
        _96 = _94;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _96) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_96);
        StorageDead(_94);
        StorageDead(_89);
        StorageDead(_55);
        StorageDead(_54);
        goto -> bb85;
    }

    bb49: {
        StorageDead(_89);
        StorageDead(_55);
        _53 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _54) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_54);
        _98 = discriminant(_53);
        switchInt(move _98) -> [0: bb51, 1: bb52, otherwise: bb6];
    }

    bb51: {
        StorageLive(_102);
        _102 = ((_53 as Continue).0: u128);
        _52 = _102;
        StorageDead(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        _106 = _7;
        _105 = <u32 as Cast>::cast::<u128>(move _106) -> [return: bb54, unwind continue];
    }

    bb52: {
        StorageLive(_99);
        _99 = ((_53 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_101);
        _101 = _99;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _101) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_101);
        StorageDead(_99);
        goto -> bb85;
    }

    bb54: {
        StorageDead(_106);
        _104 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _105) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_105);
        _107 = discriminant(_104);
        switchInt(move _107) -> [0: bb56, 1: bb57, otherwise: bb6];
    }

    bb56: {
        StorageLive(_111);
        _111 = ((_104 as Continue).0: u128);
        _103 = _111;
        StorageDead(_111);
        _51 = <u128 as SafeMath>::safe_div(move _52, move _103) -> [return: bb59, unwind continue];
    }

    bb57: {
        StorageLive(_108);
        _108 = ((_104 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_110);
        _110 = _108;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _110) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_110);
        StorageDead(_108);
        StorageDead(_103);
        StorageDead(_52);
        StorageDead(_51);
        goto -> bb84;
    }

    bb59: {
        StorageDead(_103);
        StorageDead(_52);
        _50 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _51) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_51);
        _112 = discriminant(_50);
        switchInt(move _112) -> [0: bb61, 1: bb62, otherwise: bb6];
    }

    bb61: {
        StorageLive(_116);
        _116 = ((_50 as Continue).0: u128);
        _49 = _116;
        StorageDead(_116);
        StorageDead(_104);
        StorageDead(_90);
        StorageDead(_76);
        StorageDead(_62);
        StorageDead(_59);
        StorageDead(_56);
        StorageDead(_53);
        StorageDead(_50);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        _121 = _13;
        StorageLive(_122);
        _122 = _49;
        _120 = Ge(move _121, move _122);
        switchInt(move _120) -> [0: bb65, otherwise: bb64];
    }

    bb62: {
        StorageLive(_113);
        _113 = ((_50 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_115);
        _115 = _113;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _115) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_115);
        StorageDead(_113);
        goto -> bb84;
    }

    bb64: {
        StorageDead(_122);
        StorageDead(_121);
        StorageLive(_123);
        _123 = ();
        _119 = std::result::Result::<(), error::ErrorCode>::Ok(move _123);
        StorageDead(_123);
        goto -> bb79;
    }

    bb65: {
        StorageDead(_122);
        StorageDead(_121);
        StorageLive(_124);
        _124 = error::ErrorCode::InvalidLiquidation;
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        _174 = const _;
        _135 = &(*_174);
        _134 = &(*_135);
        _133 = move _134 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_134);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        _143 = &_124;
        _142 = &(*_143);
        _141 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _142) -> [return: bb66, unwind continue];
    }

    bb66: {
        StorageDead(_142);
        _140 = [move _141];
        StorageDead(_141);
        _139 = &_140;
        _138 = &(*_139);
        _137 = move _138 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_138);
        _132 = Arguments::<'_>::new_v1(move _133, move _137) -> [return: bb67, unwind continue];
    }

    bb67: {
        StorageDead(_137);
        StorageDead(_133);
        _131 = format(move _132) -> [return: bb68, unwind continue];
    }

    bb68: {
        StorageDead(_132);
        StorageDead(_143);
        StorageDead(_140);
        StorageDead(_139);
        StorageDead(_135);
        _130 = move _131;
        StorageDead(_131);
        _129 = &_130;
        _128 = &(*_129);
        _127 = <String as Deref>::deref(move _128) -> [return: bb69, unwind: bb98];
    }

    bb69: {
        _126 = &(*_127);
        StorageDead(_128);
        _125 = solana_program::log::sol_log(move _126) -> [return: bb70, unwind: bb98];
    }

    bb70: {
        StorageDead(_126);
        drop(_130) -> [return: bb71, unwind: bb99];
    }

    bb71: {
        StorageDead(_130);
        StorageDead(_129);
        StorageDead(_127);
        StorageDead(_125);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        _173 = const _;
        _154 = &(*_173);
        _153 = &(*_154);
        _152 = move _153 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_153);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        _162 = &_13;
        _161 = &(*_162);
        _160 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _161) -> [return: bb72, unwind continue];
    }

    bb72: {
        StorageDead(_161);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        _165 = &_49;
        _164 = &(*_165);
        _163 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _164) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_164);
        _159 = [move _160, move _163];
        StorageDead(_163);
        StorageDead(_160);
        _158 = &_159;
        _157 = &(*_158);
        _156 = move _157 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_157);
        _151 = Arguments::<'_>::new_v1(move _152, move _156) -> [return: bb74, unwind continue];
    }

    bb74: {
        StorageDead(_156);
        StorageDead(_152);
        _150 = format(move _151) -> [return: bb75, unwind continue];
    }

    bb75: {
        StorageDead(_151);
        StorageDead(_165);
        StorageDead(_162);
        StorageDead(_159);
        StorageDead(_158);
        StorageDead(_154);
        _149 = move _150;
        StorageDead(_150);
        _148 = &_149;
        _147 = &(*_148);
        _146 = <String as Deref>::deref(move _147) -> [return: bb76, unwind: bb97];
    }

    bb76: {
        _145 = &(*_146);
        StorageDead(_147);
        _144 = solana_program::log::sol_log(move _145) -> [return: bb77, unwind: bb97];
    }

    bb77: {
        StorageDead(_145);
        drop(_149) -> [return: bb78, unwind: bb99];
    }

    bb78: {
        StorageDead(_149);
        StorageDead(_148);
        StorageDead(_146);
        StorageDead(_144);
        StorageLive(_166);
        _166 = _124;
        _119 = std::result::Result::<(), error::ErrorCode>::Err(move _166);
        StorageDead(_166);
        StorageDead(_124);
        goto -> bb79;
    }

    bb79: {
        StorageDead(_120);
        _118 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _119) -> [return: bb80, unwind continue];
    }

    bb80: {
        StorageDead(_119);
        _167 = discriminant(_118);
        switchInt(move _167) -> [0: bb81, 1: bb82, otherwise: bb6];
    }

    bb81: {
        StorageLive(_171);
        _171 = ((_118 as Continue).0: ());
        _117 = _171;
        StorageDead(_171);
        StorageDead(_118);
        StorageDead(_117);
        StorageLive(_172);
        _172 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _172);
        StorageDead(_172);
        StorageDead(_49);
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_9);
        goto -> bb96;
    }

    bb82: {
        StorageLive(_168);
        _168 = ((_118 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_170);
        _170 = _168;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _170) -> [return: bb83, unwind continue];
    }

    bb83: {
        StorageDead(_170);
        StorageDead(_168);
        StorageDead(_118);
        StorageDead(_117);
        goto -> bb91;
    }

    bb84: {
        StorageDead(_104);
        goto -> bb86;
    }

    bb85: {
        StorageDead(_52);
        StorageDead(_51);
        goto -> bb86;
    }

    bb86: {
        StorageDead(_90);
        goto -> bb88;
    }

    bb87: {
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_52);
        StorageDead(_51);
        goto -> bb88;
    }

    bb88: {
        StorageDead(_76);
        goto -> bb90;
    }

    bb89: {
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_52);
        StorageDead(_51);
        goto -> bb90;
    }

    bb90: {
        StorageDead(_62);
        StorageDead(_59);
        StorageDead(_56);
        StorageDead(_53);
        StorageDead(_50);
        goto -> bb91;
    }

    bb91: {
        StorageDead(_49);
        goto -> bb95;
    }

    bb92: {
        StorageDead(_19);
        StorageDead(_18);
        goto -> bb93;
    }

    bb93: {
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb94;
    }

    bb94: {
        StorageDead(_23);
        StorageDead(_20);
        StorageDead(_17);
        StorageDead(_14);
        goto -> bb95;
    }

    bb95: {
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_9);
        goto -> bb96;
    }

    bb96: {
        return;
    }

    bb97 (cleanup): {
        drop(_149) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        drop(_130) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        resume;
    }
}
