// MIR for `calculate_base_asset_amount_to_cover_margin_shortage` after PreCodegen

fn calculate_base_asset_amount_to_cover_margin_shortage(_1: u128, _2: u32, _3: u32, _4: u32, _5: i64, _6: i64) -> std::result::Result<u64, error::ErrorCode> {
    debug margin_shortage => _1;
    debug margin_ratio => _2;
    debug liquidation_fee => _3;
    debug if_liquidation_fee => _4;
    debug oracle_price => _5;
    debug quote_oracle_price => _6;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let _7: u32;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _9: std::result::Result<u32, error::ErrorCode>;
    let mut _10: u32;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _15: u32;
    let _16: ();
    let mut _17: bool;
    let mut _18: i64;
    let mut _19: bool;
    let mut _20: u32;
    let mut _21: u32;
    let mut _22: !;
    let mut _23: u128;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _25: std::result::Result<u128, error::ErrorCode>;
    let mut _26: u128;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _28: std::result::Result<u128, error::ErrorCode>;
    let mut _29: u128;
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _35: u128;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _37: std::result::Result<u128, error::ErrorCode>;
    let mut _38: u128;
    let mut _39: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _40: std::result::Result<u128, error::ErrorCode>;
    let mut _41: u128;
    let mut _42: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _43: std::result::Result<u128, error::ErrorCode>;
    let mut _44: u128;
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _46: std::result::Result<u128, error::ErrorCode>;
    let mut _47: u128;
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _49: std::result::Result<u128, error::ErrorCode>;
    let mut _50: u128;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _52: std::result::Result<u128, error::ErrorCode>;
    let mut _53: i64;
    let mut _54: isize;
    let mut _56: !;
    let mut _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _59: u128;
    let mut _60: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _61: std::result::Result<u128, error::ErrorCode>;
    let mut _62: i64;
    let mut _63: isize;
    let mut _65: !;
    let mut _66: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _68: isize;
    let mut _70: !;
    let mut _71: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _73: isize;
    let mut _75: !;
    let mut _76: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _78: u128;
    let mut _79: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _80: std::result::Result<u128, error::ErrorCode>;
    let mut _81: u32;
    let mut _82: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _83: std::result::Result<u32, error::ErrorCode>;
    let mut _84: u32;
    let mut _85: u32;
    let mut _86: isize;
    let mut _88: !;
    let mut _89: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _91: isize;
    let mut _93: !;
    let mut _94: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _96: isize;
    let mut _98: !;
    let mut _99: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _101: isize;
    let mut _103: !;
    let mut _104: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _106: u128;
    let mut _107: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _108: std::result::Result<u128, error::ErrorCode>;
    let mut _109: u128;
    let mut _110: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _111: std::result::Result<u128, error::ErrorCode>;
    let mut _112: u128;
    let mut _113: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _114: std::result::Result<u128, error::ErrorCode>;
    let mut _115: i64;
    let mut _116: isize;
    let mut _118: !;
    let mut _119: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _121: u128;
    let mut _122: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _123: std::result::Result<u128, error::ErrorCode>;
    let mut _124: u32;
    let mut _125: isize;
    let mut _127: !;
    let mut _128: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _130: isize;
    let mut _132: !;
    let mut _133: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _135: isize;
    let mut _137: !;
    let mut _138: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _140: isize;
    let mut _142: !;
    let mut _143: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _145: isize;
    let mut _147: !;
    let mut _148: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    scope 1 {
        debug margin_ratio => _7;
        let _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _34: u128;
        let _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _58: u128;
        let _64: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _67: u128;
        let _69: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _72: u128;
        let _74: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _77: u128;
        let _87: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _90: u32;
        let _92: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _95: u128;
        let _97: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _100: u128;
        let _102: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _105: u128;
        let _117: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _120: u128;
        let _126: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _129: u128;
        let _131: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _134: u128;
        let _136: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _139: u128;
        let _141: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _144: u128;
        let _146: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _149: u128;
        scope 6 {
            debug residual => _31;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _34;
            scope 9 {
            }
        }
        scope 10 {
            debug residual => _55;
            scope 11 {
            }
        }
        scope 12 {
            debug val => _58;
            scope 13 {
            }
        }
        scope 14 {
            debug residual => _64;
            scope 15 {
            }
        }
        scope 16 {
            debug val => _67;
            scope 17 {
            }
        }
        scope 18 {
            debug residual => _69;
            scope 19 {
            }
        }
        scope 20 {
            debug val => _72;
            scope 21 {
            }
        }
        scope 22 {
            debug residual => _74;
            scope 23 {
            }
        }
        scope 24 {
            debug val => _77;
            scope 25 {
            }
        }
        scope 26 {
            debug residual => _87;
            scope 27 {
            }
        }
        scope 28 {
            debug val => _90;
            scope 29 {
            }
        }
        scope 30 {
            debug residual => _92;
            scope 31 {
            }
        }
        scope 32 {
            debug val => _95;
            scope 33 {
            }
        }
        scope 34 {
            debug residual => _97;
            scope 35 {
            }
        }
        scope 36 {
            debug val => _100;
            scope 37 {
            }
        }
        scope 38 {
            debug residual => _102;
            scope 39 {
            }
        }
        scope 40 {
            debug val => _105;
            scope 41 {
            }
        }
        scope 42 {
            debug residual => _117;
            scope 43 {
            }
        }
        scope 44 {
            debug val => _120;
            scope 45 {
            }
        }
        scope 46 {
            debug residual => _126;
            scope 47 {
            }
        }
        scope 48 {
            debug val => _129;
            scope 49 {
            }
        }
        scope 50 {
            debug residual => _131;
            scope 51 {
            }
        }
        scope 52 {
            debug val => _134;
            scope 53 {
            }
        }
        scope 54 {
            debug residual => _136;
            scope 55 {
            }
        }
        scope 56 {
            debug val => _139;
            scope 57 {
            }
        }
        scope 58 {
            debug residual => _141;
            scope 59 {
            }
        }
        scope 60 {
            debug val => _144;
            scope 61 {
            }
        }
        scope 62 {
            debug residual => _146;
            scope 63 {
            }
        }
        scope 64 {
            debug val => _149;
            scope 65 {
            }
        }
    }
    scope 2 {
        debug residual => _12;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _15;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = _2;
        _9 = <u32 as SafeMath>::safe_mul(move _10, const _) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_10);
        _8 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_9);
        _11 = discriminant(_8);
        switchInt(move _11) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_15);
        _15 = ((_8 as Continue).0: u32);
        _7 = _15;
        StorageDead(_15);
        StorageDead(_8);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = _5;
        _17 = Eq(move _18, const 0_i64);
        switchInt(move _17) -> [0: bb8, otherwise: bb7];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_12);
        _12 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_8);
        goto -> bb101;
    }

    bb7: {
        StorageDead(_18);
        goto -> bb9;
    }

    bb8: {
        StorageDead(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = _7;
        StorageLive(_21);
        _21 = _3;
        _19 = Le(move _20, move _21);
        switchInt(move _19) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        StorageDead(_21);
        StorageDead(_20);
        _0 = std::result::Result::<u64, error::ErrorCode>::Ok(const _);
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb101;
    }

    bb10: {
        StorageDead(_21);
        StorageDead(_20);
        _16 = const ();
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = _1;
        _28 = <u128 as SafeMath>::safe_mul(move _29, const _) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_29);
        _27 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _28) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_28);
        _30 = discriminant(_27);
        switchInt(move _30) -> [0: bb13, 1: bb14, otherwise: bb4];
    }

    bb13: {
        StorageLive(_34);
        _34 = ((_27 as Continue).0: u128);
        _26 = _34;
        StorageDead(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = _5;
        _52 = <i64 as Cast>::cast::<u128>(move _53) -> [return: bb16, unwind continue];
    }

    bb14: {
        StorageLive(_31);
        _31 = ((_27 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_33);
        _33 = _31;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _33) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_7);
        goto -> bb100;
    }

    bb16: {
        StorageDead(_53);
        _51 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _52) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_52);
        _54 = discriminant(_51);
        switchInt(move _54) -> [0: bb18, 1: bb19, otherwise: bb4];
    }

    bb18: {
        StorageLive(_58);
        _58 = ((_51 as Continue).0: u128);
        _50 = _58;
        StorageDead(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = _6;
        _61 = <i64 as Cast>::cast::<u128>(move _62) -> [return: bb21, unwind continue];
    }

    bb19: {
        StorageLive(_55);
        _55 = ((_51 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_57);
        _57 = _55;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _57) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_7);
        goto -> bb99;
    }

    bb21: {
        StorageDead(_62);
        _60 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _61) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_61);
        _63 = discriminant(_60);
        switchInt(move _63) -> [0: bb23, 1: bb24, otherwise: bb4];
    }

    bb23: {
        StorageLive(_67);
        _67 = ((_60 as Continue).0: u128);
        _59 = _67;
        StorageDead(_67);
        _49 = <u128 as SafeMath>::safe_mul(move _50, move _59) -> [return: bb26, unwind continue];
    }

    bb24: {
        StorageLive(_64);
        _64 = ((_60 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_66);
        _66 = _64;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _66) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_66);
        StorageDead(_64);
        StorageDead(_59);
        StorageDead(_50);
        StorageDead(_49);
        goto -> bb96;
    }

    bb26: {
        StorageDead(_59);
        StorageDead(_50);
        _48 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _49) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_49);
        _68 = discriminant(_48);
        switchInt(move _68) -> [0: bb28, 1: bb29, otherwise: bb4];
    }

    bb28: {
        StorageLive(_72);
        _72 = ((_48 as Continue).0: u128);
        _47 = _72;
        StorageDead(_72);
        _46 = <u128 as SafeMath>::safe_div(move _47, const _) -> [return: bb31, unwind continue];
    }

    bb29: {
        StorageLive(_69);
        _69 = ((_48 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_71);
        _71 = _69;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _71) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_71);
        StorageDead(_69);
        goto -> bb96;
    }

    bb31: {
        StorageDead(_47);
        _45 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _46) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_46);
        _73 = discriminant(_45);
        switchInt(move _73) -> [0: bb33, 1: bb34, otherwise: bb4];
    }

    bb33: {
        StorageLive(_77);
        _77 = ((_45 as Continue).0: u128);
        _44 = _77;
        StorageDead(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = _7;
        StorageLive(_85);
        _85 = _3;
        _83 = <u32 as SafeMath>::safe_sub(move _84, move _85) -> [return: bb36, unwind continue];
    }

    bb34: {
        StorageLive(_74);
        _74 = ((_45 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_76);
        _76 = _74;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _76) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_76);
        StorageDead(_74);
        goto -> bb97;
    }

    bb36: {
        StorageDead(_85);
        StorageDead(_84);
        _82 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _83) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_83);
        _86 = discriminant(_82);
        switchInt(move _86) -> [0: bb38, 1: bb39, otherwise: bb4];
    }

    bb38: {
        StorageLive(_90);
        _90 = ((_82 as Continue).0: u32);
        _81 = _90;
        StorageDead(_90);
        _80 = <u32 as Cast>::cast::<u128>(move _81) -> [return: bb41, unwind continue];
    }

    bb39: {
        StorageLive(_87);
        _87 = ((_82 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_89);
        _89 = _87;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _89) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_89);
        StorageDead(_87);
        StorageDead(_81);
        StorageDead(_80);
        goto -> bb92;
    }

    bb41: {
        StorageDead(_81);
        _79 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _80) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_80);
        _91 = discriminant(_79);
        switchInt(move _91) -> [0: bb43, 1: bb44, otherwise: bb4];
    }

    bb43: {
        StorageLive(_95);
        _95 = ((_79 as Continue).0: u128);
        _78 = _95;
        StorageDead(_95);
        _43 = <u128 as SafeMath>::safe_mul(move _44, move _78) -> [return: bb46, unwind continue];
    }

    bb44: {
        StorageLive(_92);
        _92 = ((_79 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_94);
        _94 = _92;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _94) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_94);
        StorageDead(_92);
        goto -> bb92;
    }

    bb46: {
        StorageDead(_78);
        StorageDead(_44);
        _42 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _43) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_43);
        _96 = discriminant(_42);
        switchInt(move _96) -> [0: bb48, 1: bb49, otherwise: bb4];
    }

    bb48: {
        StorageLive(_100);
        _100 = ((_42 as Continue).0: u128);
        _41 = _100;
        StorageDead(_100);
        _40 = <u128 as SafeMath>::safe_div(move _41, const _) -> [return: bb51, unwind continue];
    }

    bb49: {
        StorageLive(_97);
        _97 = ((_42 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_99);
        _99 = _97;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _99) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_99);
        StorageDead(_97);
        goto -> bb93;
    }

    bb51: {
        StorageDead(_41);
        _39 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _40) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_40);
        _101 = discriminant(_39);
        switchInt(move _101) -> [0: bb53, 1: bb54, otherwise: bb4];
    }

    bb53: {
        StorageLive(_105);
        _105 = ((_39 as Continue).0: u128);
        _38 = _105;
        StorageDead(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        _115 = _5;
        _114 = <i64 as Cast>::cast::<u128>(move _115) -> [return: bb56, unwind continue];
    }

    bb54: {
        StorageLive(_102);
        _102 = ((_39 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_104);
        _104 = _102;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _104) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_104);
        StorageDead(_102);
        goto -> bb94;
    }

    bb56: {
        StorageDead(_115);
        _113 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _114) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_114);
        _116 = discriminant(_113);
        switchInt(move _116) -> [0: bb58, 1: bb59, otherwise: bb4];
    }

    bb58: {
        StorageLive(_120);
        _120 = ((_113 as Continue).0: u128);
        _112 = _120;
        StorageDead(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        _124 = _4;
        _123 = <u32 as Cast>::cast::<u128>(move _124) -> [return: bb61, unwind continue];
    }

    bb59: {
        StorageLive(_117);
        _117 = ((_113 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_119);
        _119 = _117;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _119) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_119);
        StorageDead(_117);
        StorageDead(_112);
        StorageDead(_111);
        StorageDead(_109);
        StorageDead(_108);
        StorageDead(_106);
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_7);
        goto -> bb91;
    }

    bb61: {
        StorageDead(_124);
        _122 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _123) -> [return: bb62, unwind continue];
    }

    bb62: {
        StorageDead(_123);
        _125 = discriminant(_122);
        switchInt(move _125) -> [0: bb63, 1: bb64, otherwise: bb4];
    }

    bb63: {
        StorageLive(_129);
        _129 = ((_122 as Continue).0: u128);
        _121 = _129;
        StorageDead(_129);
        _111 = <u128 as SafeMath>::safe_mul(move _112, move _121) -> [return: bb66, unwind continue];
    }

    bb64: {
        StorageLive(_126);
        _126 = ((_122 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_128);
        _128 = _126;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _128) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_128);
        StorageDead(_126);
        StorageDead(_121);
        StorageDead(_112);
        StorageDead(_111);
        goto -> bb87;
    }

    bb66: {
        StorageDead(_121);
        StorageDead(_112);
        _110 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _111) -> [return: bb67, unwind continue];
    }

    bb67: {
        StorageDead(_111);
        _130 = discriminant(_110);
        switchInt(move _130) -> [0: bb68, 1: bb69, otherwise: bb4];
    }

    bb68: {
        StorageLive(_134);
        _134 = ((_110 as Continue).0: u128);
        _109 = _134;
        StorageDead(_134);
        _108 = <u128 as SafeMath>::safe_div(move _109, const _) -> [return: bb71, unwind continue];
    }

    bb69: {
        StorageLive(_131);
        _131 = ((_110 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_133);
        _133 = _131;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _133) -> [return: bb70, unwind continue];
    }

    bb70: {
        StorageDead(_133);
        StorageDead(_131);
        goto -> bb87;
    }

    bb71: {
        StorageDead(_109);
        _107 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _108) -> [return: bb72, unwind continue];
    }

    bb72: {
        StorageDead(_108);
        _135 = discriminant(_107);
        switchInt(move _135) -> [0: bb73, 1: bb74, otherwise: bb4];
    }

    bb73: {
        StorageLive(_139);
        _139 = ((_107 as Continue).0: u128);
        _106 = _139;
        StorageDead(_139);
        _37 = <u128 as SafeMath>::safe_sub(move _38, move _106) -> [return: bb76, unwind continue];
    }

    bb74: {
        StorageLive(_136);
        _136 = ((_107 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_138);
        _138 = _136;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _138) -> [return: bb75, unwind continue];
    }

    bb75: {
        StorageDead(_138);
        StorageDead(_136);
        goto -> bb88;
    }

    bb76: {
        StorageDead(_106);
        StorageDead(_38);
        _36 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _37) -> [return: bb77, unwind continue];
    }

    bb77: {
        StorageDead(_37);
        _140 = discriminant(_36);
        switchInt(move _140) -> [0: bb78, 1: bb79, otherwise: bb4];
    }

    bb78: {
        StorageLive(_144);
        _144 = ((_36 as Continue).0: u128);
        _35 = _144;
        StorageDead(_144);
        _25 = <u128 as SafeMath>::safe_div(move _26, move _35) -> [return: bb81, unwind continue];
    }

    bb79: {
        StorageLive(_141);
        _141 = ((_36 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_143);
        _143 = _141;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _143) -> [return: bb80, unwind continue];
    }

    bb80: {
        StorageDead(_143);
        StorageDead(_141);
        goto -> bb89;
    }

    bb81: {
        StorageDead(_35);
        StorageDead(_26);
        _24 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _25) -> [return: bb82, unwind continue];
    }

    bb82: {
        StorageDead(_25);
        _145 = discriminant(_24);
        switchInt(move _145) -> [0: bb83, 1: bb84, otherwise: bb4];
    }

    bb83: {
        StorageLive(_149);
        _149 = ((_24 as Continue).0: u128);
        _23 = _149;
        StorageDead(_149);
        _0 = <u128 as Cast>::cast::<u64>(move _23) -> [return: bb86, unwind continue];
    }

    bb84: {
        StorageLive(_146);
        _146 = ((_24 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_148);
        _148 = _146;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _148) -> [return: bb85, unwind continue];
    }

    bb85: {
        StorageDead(_148);
        StorageDead(_146);
        goto -> bb90;
    }

    bb86: {
        StorageDead(_23);
        StorageDead(_7);
        StorageDead(_122);
        StorageDead(_113);
        StorageDead(_110);
        StorageDead(_107);
        StorageDead(_82);
        StorageDead(_79);
        StorageDead(_60);
        StorageDead(_51);
        StorageDead(_48);
        StorageDead(_45);
        StorageDead(_42);
        StorageDead(_39);
        StorageDead(_36);
        StorageDead(_27);
        StorageDead(_24);
        goto -> bb102;
    }

    bb87: {
        StorageDead(_109);
        StorageDead(_108);
        goto -> bb88;
    }

    bb88: {
        StorageDead(_106);
        StorageDead(_38);
        StorageDead(_37);
        goto -> bb89;
    }

    bb89: {
        StorageDead(_35);
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb90;
    }

    bb90: {
        StorageDead(_23);
        StorageDead(_7);
        StorageDead(_122);
        goto -> bb91;
    }

    bb91: {
        StorageDead(_113);
        StorageDead(_110);
        StorageDead(_107);
        goto -> bb95;
    }

    bb92: {
        StorageDead(_78);
        StorageDead(_44);
        StorageDead(_43);
        goto -> bb93;
    }

    bb93: {
        StorageDead(_41);
        StorageDead(_40);
        goto -> bb94;
    }

    bb94: {
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_7);
        goto -> bb95;
    }

    bb95: {
        StorageDead(_82);
        StorageDead(_79);
        goto -> bb98;
    }

    bb96: {
        StorageDead(_47);
        StorageDead(_46);
        goto -> bb97;
    }

    bb97: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_7);
        goto -> bb98;
    }

    bb98: {
        StorageDead(_60);
        goto -> bb99;
    }

    bb99: {
        StorageDead(_51);
        StorageDead(_48);
        StorageDead(_45);
        StorageDead(_42);
        StorageDead(_39);
        StorageDead(_36);
        goto -> bb100;
    }

    bb100: {
        StorageDead(_27);
        StorageDead(_24);
        goto -> bb102;
    }

    bb101: {
        StorageDead(_7);
        goto -> bb102;
    }

    bb102: {
        return;
    }
}
