// MIR for `controller::orders::force_cancel_orders` before PreCodegen

fn controller::orders::force_cancel_orders(_1: &state::state::State, _2: &anchor_lang::prelude::AccountLoader<'_, User>, _3: &SpotMarketMap<'_>, _4: &PerpMarketMap<'_>, _5: &mut OracleMap<'_>, _6: &anchor_lang::prelude::AccountLoader<'_, User>, _7: &anchor_lang::prelude::Clock) -> std::result::Result<(), error::ErrorCode> {
    debug state => _1;
    debug user_account_loader => _2;
    debug spot_market_map => _3;
    debug perp_market_map => _4;
    debug oracle_map => _5;
    debug filler => _6;
    debug clock => _7;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _8: i64;
    let mut _11: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _13: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _15: std::cell::RefMut<'_, state::user::User>;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _17: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _18: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _19: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _20: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _21: isize;
    let mut _23: !;
    let mut _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _27: std::cell::RefMut<'_, state::user::User>;
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _29: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _30: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _31: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _32: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _33: isize;
    let mut _35: !;
    let mut _36: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _38: ();
    let mut _39: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _40: std::result::Result<(), error::ErrorCode>;
    let mut _41: bool;
    let mut _42: &state::user::User;
    let _43: &state::user::User;
    let mut _44: &std::cell::RefMut<'_, state::user::User>;
    let mut _45: ();
    let _47: ();
    let mut _48: &str;
    let _49: &str;
    let mut _50: &std::string::String;
    let _51: &std::string::String;
    let _52: std::string::String;
    let mut _54: std::fmt::Arguments<'_>;
    let mut _55: &[&str];
    let mut _56: &[&str; 2];
    let _57: &[&str; 2];
    let _58: [&str; 2];
    let mut _59: &[core::fmt::rt::Argument<'_>];
    let mut _60: &[core::fmt::rt::Argument<'_>; 1];
    let _61: &[core::fmt::rt::Argument<'_>; 1];
    let _62: [core::fmt::rt::Argument<'_>; 1];
    let mut _63: core::fmt::rt::Argument<'_>;
    let mut _64: &error::ErrorCode;
    let _65: &error::ErrorCode;
    let mut _66: error::ErrorCode;
    let mut _67: isize;
    let mut _69: !;
    let mut _70: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _72: ();
    let mut _73: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _74: std::result::Result<(), error::ErrorCode>;
    let mut _75: bool;
    let mut _76: &state::user::User;
    let _77: &state::user::User;
    let mut _78: &std::cell::RefMut<'_, state::user::User>;
    let mut _79: ();
    let _81: ();
    let mut _82: &str;
    let _83: &str;
    let mut _84: &std::string::String;
    let _85: &std::string::String;
    let _86: std::string::String;
    let mut _88: std::fmt::Arguments<'_>;
    let mut _89: &[&str];
    let mut _90: &[&str; 2];
    let _91: &[&str; 2];
    let _92: [&str; 2];
    let mut _93: &[core::fmt::rt::Argument<'_>];
    let mut _94: &[core::fmt::rt::Argument<'_>; 1];
    let _95: &[core::fmt::rt::Argument<'_>; 1];
    let _96: [core::fmt::rt::Argument<'_>; 1];
    let mut _97: core::fmt::rt::Argument<'_>;
    let mut _98: &error::ErrorCode;
    let _99: &error::ErrorCode;
    let mut _100: error::ErrorCode;
    let mut _101: isize;
    let mut _103: !;
    let mut _104: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _107: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::margin_calculation::MarginCalculation>;
    let mut _108: std::result::Result<state::margin_calculation::MarginCalculation, error::ErrorCode>;
    let mut _109: &state::user::User;
    let _110: &state::user::User;
    let mut _111: &std::cell::RefMut<'_, state::user::User>;
    let mut _112: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _113: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _114: &mut state::oracle_map::OracleMap<'_>;
    let mut _115: state::margin_calculation::MarginContext;
    let mut _116: math::margin::MarginRequirementType;
    let mut _117: isize;
    let mut _119: !;
    let mut _120: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _123: &state::margin_calculation::MarginCalculation;
    let _124: ();
    let mut _125: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _126: std::result::Result<(), error::ErrorCode>;
    let mut _127: bool;
    let mut _128: ();
    let _130: ();
    let mut _131: &str;
    let _132: &str;
    let mut _133: &std::string::String;
    let _134: &std::string::String;
    let _135: std::string::String;
    let mut _137: std::fmt::Arguments<'_>;
    let mut _138: &[&str];
    let mut _139: &[&str; 2];
    let _140: &[&str; 2];
    let _141: [&str; 2];
    let mut _142: &[core::fmt::rt::Argument<'_>];
    let mut _143: &[core::fmt::rt::Argument<'_>; 1];
    let _144: &[core::fmt::rt::Argument<'_>; 1];
    let _145: [core::fmt::rt::Argument<'_>; 1];
    let mut _146: core::fmt::rt::Argument<'_>;
    let mut _147: &error::ErrorCode;
    let _148: &error::ErrorCode;
    let mut _149: error::ErrorCode;
    let mut _150: isize;
    let mut _152: !;
    let mut _153: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _156: ();
    let mut _157: std::ops::Range<usize>;
    let mut _158: std::ops::Range<usize>;
    let mut _159: usize;
    let mut _160: &[state::user::Order];
    let mut _161: &[state::user::Order; 32];
    let _162: &state::user::User;
    let mut _163: &std::cell::RefMut<'_, state::user::User>;
    let mut _165: ();
    let _166: ();
    let mut _167: std::option::Option<usize>;
    let mut _168: &mut std::ops::Range<usize>;
    let mut _169: &mut std::ops::Range<usize>;
    let mut _170: isize;
    let mut _171: !;
    let _173: ();
    let mut _174: bool;
    let mut _175: &state::user::OrderStatus;
    let _176: &state::user::User;
    let mut _177: &std::cell::RefMut<'_, state::user::User>;
    let _178: usize;
    let mut _179: usize;
    let mut _180: bool;
    let mut _181: &state::user::OrderStatus;
    let _182: state::user::OrderStatus;
    let mut _183: !;
    let mut _185: &state::user::User;
    let mut _186: &std::cell::RefMut<'_, state::user::User>;
    let _187: usize;
    let mut _188: usize;
    let mut _189: bool;
    let mut _191: &state::user::User;
    let mut _192: &std::cell::RefMut<'_, state::user::User>;
    let _193: usize;
    let mut _194: usize;
    let mut _195: bool;
    let mut _197: isize;
    let mut _199: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _200: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _201: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _202: &u16;
    let _203: &u16;
    let mut _204: isize;
    let mut _206: !;
    let mut _207: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _210: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _211: std::result::Result<i64, error::ErrorCode>;
    let mut _212: i128;
    let mut _213: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _214: std::result::Result<i128, error::ErrorCode>;
    let mut _215: &state::user::SpotPosition;
    let _216: &state::user::SpotPosition;
    let mut _217: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::user::SpotPosition>;
    let mut _218: std::result::Result<&state::user::SpotPosition, error::ErrorCode>;
    let mut _219: &state::user::User;
    let _220: &state::user::User;
    let mut _221: &std::cell::RefMut<'_, state::user::User>;
    let mut _222: u16;
    let mut _223: isize;
    let mut _225: !;
    let mut _226: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _228: &state::spot_market::SpotMarket;
    let _229: &state::spot_market::SpotMarket;
    let mut _230: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _231: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _232: isize;
    let mut _234: !;
    let mut _235: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _237: isize;
    let mut _239: !;
    let mut _240: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _243: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _244: std::result::Result<bool, error::ErrorCode>;
    let mut _245: &controller::position::PositionDirection;
    let _246: &controller::position::PositionDirection;
    let _247: &state::user::User;
    let mut _248: &std::cell::RefMut<'_, state::user::User>;
    let _249: usize;
    let mut _250: usize;
    let mut _251: bool;
    let mut _252: u64;
    let mut _253: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _254: std::result::Result<u64, error::ErrorCode>;
    let mut _255: &state::user::Order;
    let _256: &state::user::User;
    let mut _257: &std::cell::RefMut<'_, state::user::User>;
    let _258: usize;
    let mut _259: usize;
    let mut _260: bool;
    let mut _261: std::option::Option<i64>;
    let mut _262: i64;
    let mut _263: isize;
    let mut _265: !;
    let mut _266: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _268: i64;
    let mut _269: isize;
    let mut _271: !;
    let mut _272: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _274: ();
    let mut _275: bool;
    let mut _276: !;
    let mut _278: &state::user::PerpPosition;
    let mut _279: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::user::PerpPosition>;
    let mut _280: std::result::Result<&state::user::PerpPosition, error::ErrorCode>;
    let mut _281: &state::user::User;
    let _282: &state::user::User;
    let mut _283: &std::cell::RefMut<'_, state::user::User>;
    let mut _284: u16;
    let mut _285: isize;
    let mut _287: !;
    let mut _288: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _291: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _292: std::result::Result<bool, error::ErrorCode>;
    let mut _293: &controller::position::PositionDirection;
    let _294: &controller::position::PositionDirection;
    let _295: &state::user::User;
    let mut _296: &std::cell::RefMut<'_, state::user::User>;
    let _297: usize;
    let mut _298: usize;
    let mut _299: bool;
    let mut _300: u64;
    let mut _301: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _302: std::result::Result<u64, error::ErrorCode>;
    let mut _303: &state::user::Order;
    let _304: &state::user::User;
    let mut _305: &std::cell::RefMut<'_, state::user::User>;
    let _306: usize;
    let mut _307: usize;
    let mut _308: bool;
    let mut _309: std::option::Option<i64>;
    let mut _310: i64;
    let mut _311: isize;
    let mut _313: !;
    let mut _314: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _316: i64;
    let mut _317: isize;
    let mut _319: !;
    let mut _320: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _322: ();
    let mut _323: bool;
    let mut _324: !;
    let mut _325: u64;
    let mut _326: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _327: std::result::Result<u64, error::ErrorCode>;
    let mut _328: u64;
    let mut _329: u64;
    let mut _330: isize;
    let mut _332: !;
    let mut _333: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _335: ();
    let mut _336: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _337: std::result::Result<(), error::ErrorCode>;
    let mut _338: usize;
    let mut _339: &mut state::user::User;
    let mut _340: &mut state::user::User;
    let mut _341: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _342: &anchor_lang::prelude::Pubkey;
    let _343: &anchor_lang::prelude::Pubkey;
    let mut _344: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _345: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _346: &mut state::oracle_map::OracleMap<'_>;
    let mut _347: i64;
    let mut _348: u64;
    let mut _349: state::events::OrderActionExplanation;
    let mut _350: std::option::Option<&anchor_lang::prelude::Pubkey>;
    let mut _351: &anchor_lang::prelude::Pubkey;
    let _352: &anchor_lang::prelude::Pubkey;
    let mut _353: u64;
    let mut _354: isize;
    let mut _356: !;
    let mut _357: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _359: u64;
    let mut _360: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _361: std::result::Result<u64, error::ErrorCode>;
    let mut _362: &mut state::user::User;
    let mut _363: &mut state::user::User;
    let mut _364: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _365: std::option::Option<&mut state::user::User>;
    let mut _366: &mut state::user::User;
    let mut _367: &mut state::user::User;
    let mut _368: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _369: &mut state::spot_market::SpotMarket;
    let mut _370: &mut state::spot_market::SpotMarket;
    let mut _371: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _372: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _373: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _374: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _375: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _376: isize;
    let mut _378: !;
    let mut _379: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _381: u64;
    let mut _382: u64;
    let mut _383: isize;
    let mut _385: !;
    let mut _386: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _388: ();
    let mut _389: &mut state::user::User;
    let mut _390: &mut state::user::User;
    let mut _391: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _392: u64;
    let mut _393: ();
    let mut _398: bool;
    let mut _399: isize;
    let mut _400: isize;
    let mut _401: isize;
    let mut _402: isize;
    let mut _403: isize;
    let mut _404: isize;
    let mut _405: isize;
    let mut _406: isize;
    let mut _407: isize;
    let mut _408: isize;
    let mut _409: isize;
    let mut _410: isize;
    let mut _411: isize;
    let mut _412: isize;
    let mut _413: isize;
    let mut _414: isize;
    let mut _415: isize;
    let mut _416: isize;
    let mut _417: isize;
    let mut _418: isize;
    scope 1 {
        debug now => _8;
        let _9: u64;
        scope 2 {
            debug slot => _9;
            let _10: anchor_lang::prelude::Pubkey;
            scope 3 {
                debug filler_key => _10;
                let _12: anchor_lang::prelude::Pubkey;
                scope 4 {
                    debug user_key => _12;
                    let _14: &mut std::cell::RefMut<'_, state::user::User>;
                    let _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _25: std::cell::RefMut<'_, state::user::User>;
                    scope 5 {
                        debug user => _14;
                        let _26: &mut std::cell::RefMut<'_, state::user::User>;
                        let _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _37: std::cell::RefMut<'_, state::user::User>;
                        scope 10 {
                            debug filler => _26;
                            let _46: error::ErrorCode;
                            let _68: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _71: ();
                            let _80: error::ErrorCode;
                            let _102: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _105: ();
                            let _106: state::margin_calculation::MarginCalculation;
                            let _118: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _121: state::margin_calculation::MarginCalculation;
                            scope 15 {
                                debug error_code => _46;
                                let _53: std::string::String;
                                let mut _397: &[&str; 2];
                                scope 16 {
                                    debug res => _53;
                                }
                            }
                            scope 17 {
                                debug residual => _68;
                                scope 18 {
                                }
                            }
                            scope 19 {
                                debug val => _71;
                                scope 20 {
                                }
                            }
                            scope 21 {
                                debug error_code => _80;
                                let _87: std::string::String;
                                let mut _396: &[&str; 2];
                                scope 22 {
                                    debug res => _87;
                                }
                            }
                            scope 23 {
                                debug residual => _102;
                                scope 24 {
                                }
                            }
                            scope 25 {
                                debug val => _105;
                                scope 26 {
                                }
                            }
                            scope 27 {
                                debug margin_calc => _106;
                                let _122: bool;
                                scope 32 {
                                    debug meets_initial_margin_requirement => _122;
                                    let _129: error::ErrorCode;
                                    let _151: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _154: ();
                                    let mut _155: u64;
                                    scope 33 {
                                        debug error_code => _129;
                                        let _136: std::string::String;
                                        let mut _395: &[&str; 2];
                                        scope 34 {
                                            debug res => _136;
                                        }
                                    }
                                    scope 35 {
                                        debug residual => _151;
                                        scope 36 {
                                        }
                                    }
                                    scope 37 {
                                        debug val => _154;
                                        scope 38 {
                                        }
                                    }
                                    scope 39 {
                                        debug total_fee => _155;
                                        let mut _164: std::ops::Range<usize>;
                                        let _377: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _380: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                        let _384: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _387: u64;
                                        scope 40 {
                                            debug iter => _164;
                                            let _172: usize;
                                            scope 41 {
                                                debug order_index => _172;
                                                let _184: u16;
                                                let mut _394: &state::user::OrderStatus;
                                                scope 42 {
                                                    debug market_index => _184;
                                                    let _190: state::user::MarketType;
                                                    scope 43 {
                                                        debug market_type => _190;
                                                        let _196: u64;
                                                        let _198: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                                        let _205: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _208: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                                        let _277: i64;
                                                        let _286: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _289: &state::user::PerpPosition;
                                                        scope 44 {
                                                            debug fee => _196;
                                                            let _331: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _334: u64;
                                                            let _355: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _358: ();
                                                            scope 86 {
                                                                debug residual => _331;
                                                                scope 87 {
                                                                }
                                                            }
                                                            scope 88 {
                                                                debug val => _334;
                                                                scope 89 {
                                                                }
                                                            }
                                                            scope 90 {
                                                                debug residual => _355;
                                                                scope 91 {
                                                                }
                                                            }
                                                            scope 92 {
                                                                debug val => _358;
                                                                scope 93 {
                                                                }
                                                            }
                                                        }
                                                        scope 45 {
                                                            debug spot_market => _198;
                                                            let _209: i64;
                                                            let _224: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _227: &state::user::SpotPosition;
                                                            let _233: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _236: i128;
                                                            let _238: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _241: i64;
                                                            scope 50 {
                                                                debug token_amount => _209;
                                                                let _242: bool;
                                                                let _264: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _267: u64;
                                                                let _270: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _273: bool;
                                                                scope 63 {
                                                                    debug is_position_reducing => _242;
                                                                }
                                                                scope 64 {
                                                                    debug residual => _264;
                                                                    scope 65 {
                                                                    }
                                                                }
                                                                scope 66 {
                                                                    debug val => _267;
                                                                    scope 67 {
                                                                    }
                                                                }
                                                                scope 68 {
                                                                    debug residual => _270;
                                                                    scope 69 {
                                                                    }
                                                                }
                                                                scope 70 {
                                                                    debug val => _273;
                                                                    scope 71 {
                                                                    }
                                                                }
                                                            }
                                                            scope 51 {
                                                                debug residual => _224;
                                                                scope 52 {
                                                                }
                                                            }
                                                            scope 53 {
                                                                debug val => _227;
                                                                scope 54 {
                                                                }
                                                            }
                                                            scope 55 {
                                                                debug residual => _233;
                                                                scope 56 {
                                                                }
                                                            }
                                                            scope 57 {
                                                                debug val => _236;
                                                                scope 58 {
                                                                }
                                                            }
                                                            scope 59 {
                                                                debug residual => _238;
                                                                scope 60 {
                                                                }
                                                            }
                                                            scope 61 {
                                                                debug val => _241;
                                                                scope 62 {
                                                                }
                                                            }
                                                        }
                                                        scope 46 {
                                                            debug residual => _205;
                                                            scope 47 {
                                                            }
                                                        }
                                                        scope 48 {
                                                            debug val => _208;
                                                            scope 49 {
                                                            }
                                                        }
                                                        scope 72 {
                                                            debug base_asset_amount => _277;
                                                            let _290: bool;
                                                            let _312: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _315: u64;
                                                            let _318: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _321: bool;
                                                            scope 77 {
                                                                debug is_position_reducing => _290;
                                                            }
                                                            scope 78 {
                                                                debug residual => _312;
                                                                scope 79 {
                                                                }
                                                            }
                                                            scope 80 {
                                                                debug val => _315;
                                                                scope 81 {
                                                                }
                                                            }
                                                            scope 82 {
                                                                debug residual => _318;
                                                                scope 83 {
                                                                }
                                                            }
                                                            scope 84 {
                                                                debug val => _321;
                                                                scope 85 {
                                                                }
                                                            }
                                                        }
                                                        scope 73 {
                                                            debug residual => _286;
                                                            scope 74 {
                                                            }
                                                        }
                                                        scope 75 {
                                                            debug val => _289;
                                                            scope 76 {
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        scope 94 {
                                            debug residual => _377;
                                            scope 95 {
                                            }
                                        }
                                        scope 96 {
                                            debug val => _380;
                                            scope 97 {
                                            }
                                        }
                                        scope 98 {
                                            debug residual => _384;
                                            scope 99 {
                                            }
                                        }
                                        scope 100 {
                                            debug val => _387;
                                            scope 101 {
                                            }
                                        }
                                    }
                                }
                            }
                            scope 28 {
                                debug residual => _118;
                                scope 29 {
                                }
                            }
                            scope 30 {
                                debug val => _121;
                                scope 31 {
                                }
                            }
                        }
                        scope 11 {
                            debug residual => _34;
                            scope 12 {
                            }
                        }
                        scope 13 {
                            debug val => _37;
                            scope 14 {
                            }
                        }
                    }
                    scope 6 {
                        debug residual => _22;
                        scope 7 {
                        }
                    }
                    scope 8 {
                        debug val => _25;
                        scope 9 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _398 = const false;
        StorageLive(_8);
        _8 = ((*_7).4: i64);
        StorageLive(_9);
        _9 = ((*_7).0: u64);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &(*_6);
        _10 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &(*_2);
        _12 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _13) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &(*_2);
        _18 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _19) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_19);
        StorageLive(_20);
        _20 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _17 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _18, move _20) -> [return: bb4, unwind: bb200];
    }

    bb4: {
        StorageDead(_20);
        StorageDead(_18);
        _16 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _17) -> [return: bb5, unwind: bb200];
    }

    bb5: {
        StorageDead(_17);
        _21 = discriminant(_16);
        switchInt(move _21) -> [0: bb6, 1: bb8, otherwise: bb7];
    }

    bb6: {
        StorageLive(_25);
        _25 = move ((_16 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _15 = move _25;
        StorageDead(_25);
        _14 = &mut _15;
        _401 = discriminant(_16);
        StorageDead(_16);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = &(*_6);
        _30 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _31) -> [return: bb10, unwind: bb199];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        StorageLive(_22);
        _22 = ((_16 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_24);
        _24 = _22;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _24) -> [return: bb9, unwind: bb206];
    }

    bb9: {
        StorageDead(_24);
        StorageDead(_22);
        _399 = discriminant(_16);
        StorageDead(_16);
        goto -> bb191;
    }

    bb10: {
        StorageDead(_31);
        StorageLive(_32);
        _32 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _29 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _30, move _32) -> [return: bb11, unwind: bb199];
    }

    bb11: {
        StorageDead(_32);
        StorageDead(_30);
        _28 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _29) -> [return: bb12, unwind: bb199];
    }

    bb12: {
        StorageDead(_29);
        _33 = discriminant(_28);
        switchInt(move _33) -> [0: bb13, 1: bb14, otherwise: bb7];
    }

    bb13: {
        StorageLive(_37);
        _37 = move ((_28 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _27 = move _37;
        StorageDead(_37);
        _26 = &mut _27;
        _405 = discriminant(_28);
        StorageDead(_28);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = &(*_14);
        _43 = <RefMut<'_, User> as Deref>::deref(move _44) -> [return: bb16, unwind: bb198];
    }

    bb14: {
        StorageLive(_34);
        _34 = ((_28 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_36);
        _36 = _34;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _36) -> [return: bb15, unwind: bb205];
    }

    bb15: {
        StorageDead(_36);
        StorageDead(_34);
        _403 = discriminant(_28);
        StorageDead(_28);
        goto -> bb190;
    }

    bb16: {
        _42 = &(*_43);
        StorageDead(_44);
        _41 = User::is_being_liquidated(move _42) -> [return: bb17, unwind: bb198];
    }

    bb17: {
        switchInt(move _41) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        StorageDead(_42);
        StorageDead(_43);
        StorageLive(_46);
        _46 = error::ErrorCode::UserIsBeingLiquidated;
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _397 = const _;
        _57 = &(*_397);
        _56 = &(*_57);
        _55 = move _56 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_56);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = &_46;
        _64 = &(*_65);
        _63 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _64) -> [return: bb20, unwind: bb198];
    }

    bb19: {
        StorageDead(_42);
        StorageDead(_43);
        StorageLive(_45);
        _45 = ();
        _40 = std::result::Result::<(), error::ErrorCode>::Ok(move _45);
        StorageDead(_45);
        goto -> bb26;
    }

    bb20: {
        StorageDead(_64);
        _62 = [move _63];
        StorageDead(_63);
        _61 = &_62;
        _60 = &(*_61);
        _59 = move _60 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_60);
        _54 = Arguments::<'_>::new_v1(move _55, move _59) -> [return: bb21, unwind: bb198];
    }

    bb21: {
        StorageDead(_59);
        StorageDead(_55);
        _53 = format(move _54) -> [return: bb22, unwind: bb198];
    }

    bb22: {
        StorageDead(_54);
        StorageDead(_65);
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_57);
        _52 = move _53;
        StorageDead(_53);
        _51 = &_52;
        _50 = &(*_51);
        _49 = <String as Deref>::deref(move _50) -> [return: bb23, unwind: bb197];
    }

    bb23: {
        _48 = &(*_49);
        StorageDead(_50);
        _47 = solana_program::log::sol_log(move _48) -> [return: bb24, unwind: bb197];
    }

    bb24: {
        StorageDead(_48);
        drop(_52) -> [return: bb25, unwind: bb198];
    }

    bb25: {
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_49);
        StorageDead(_47);
        StorageLive(_66);
        _66 = _46;
        _40 = std::result::Result::<(), error::ErrorCode>::Err(move _66);
        StorageDead(_66);
        StorageDead(_46);
        goto -> bb26;
    }

    bb26: {
        StorageDead(_41);
        _39 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _40) -> [return: bb27, unwind: bb198];
    }

    bb27: {
        StorageDead(_40);
        _67 = discriminant(_39);
        switchInt(move _67) -> [0: bb28, 1: bb29, otherwise: bb7];
    }

    bb28: {
        StorageLive(_71);
        _71 = ((_39 as Continue).0: ());
        _38 = _71;
        StorageDead(_71);
        StorageDead(_39);
        StorageDead(_38);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = &(*_14);
        _77 = <RefMut<'_, User> as Deref>::deref(move _78) -> [return: bb31, unwind: bb198];
    }

    bb29: {
        StorageLive(_68);
        _68 = ((_39 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_70);
        _70 = _68;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _70) -> [return: bb30, unwind: bb198];
    }

    bb30: {
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_39);
        StorageDead(_38);
        goto -> bb189;
    }

    bb31: {
        _76 = &(*_77);
        StorageDead(_78);
        _75 = User::is_bankrupt(move _76) -> [return: bb32, unwind: bb198];
    }

    bb32: {
        switchInt(move _75) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        StorageDead(_76);
        StorageDead(_77);
        StorageLive(_80);
        _80 = error::ErrorCode::UserBankrupt;
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _396 = const _;
        _91 = &(*_396);
        _90 = &(*_91);
        _89 = move _90 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_90);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = &_80;
        _98 = &(*_99);
        _97 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _98) -> [return: bb35, unwind: bb198];
    }

    bb34: {
        StorageDead(_76);
        StorageDead(_77);
        StorageLive(_79);
        _79 = ();
        _74 = std::result::Result::<(), error::ErrorCode>::Ok(move _79);
        StorageDead(_79);
        goto -> bb41;
    }

    bb35: {
        StorageDead(_98);
        _96 = [move _97];
        StorageDead(_97);
        _95 = &_96;
        _94 = &(*_95);
        _93 = move _94 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_94);
        _88 = Arguments::<'_>::new_v1(move _89, move _93) -> [return: bb36, unwind: bb198];
    }

    bb36: {
        StorageDead(_93);
        StorageDead(_89);
        _87 = format(move _88) -> [return: bb37, unwind: bb198];
    }

    bb37: {
        StorageDead(_88);
        StorageDead(_99);
        StorageDead(_96);
        StorageDead(_95);
        StorageDead(_91);
        _86 = move _87;
        StorageDead(_87);
        _85 = &_86;
        _84 = &(*_85);
        _83 = <String as Deref>::deref(move _84) -> [return: bb38, unwind: bb196];
    }

    bb38: {
        _82 = &(*_83);
        StorageDead(_84);
        _81 = solana_program::log::sol_log(move _82) -> [return: bb39, unwind: bb196];
    }

    bb39: {
        StorageDead(_82);
        drop(_86) -> [return: bb40, unwind: bb198];
    }

    bb40: {
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_83);
        StorageDead(_81);
        StorageLive(_100);
        _100 = _80;
        _74 = std::result::Result::<(), error::ErrorCode>::Err(move _100);
        StorageDead(_100);
        StorageDead(_80);
        goto -> bb41;
    }

    bb41: {
        StorageDead(_75);
        _73 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _74) -> [return: bb42, unwind: bb198];
    }

    bb42: {
        StorageDead(_74);
        _101 = discriminant(_73);
        switchInt(move _101) -> [0: bb43, 1: bb44, otherwise: bb7];
    }

    bb43: {
        StorageLive(_105);
        _105 = ((_73 as Continue).0: ());
        _72 = _105;
        StorageDead(_105);
        StorageDead(_73);
        StorageDead(_72);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        _111 = &(*_14);
        _110 = <RefMut<'_, User> as Deref>::deref(move _111) -> [return: bb46, unwind: bb198];
    }

    bb44: {
        StorageLive(_102);
        _102 = ((_73 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_104);
        _104 = _102;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _104) -> [return: bb45, unwind: bb198];
    }

    bb45: {
        StorageDead(_104);
        StorageDead(_102);
        StorageDead(_73);
        StorageDead(_72);
        goto -> bb189;
    }

    bb46: {
        _109 = &(*_110);
        StorageDead(_111);
        StorageLive(_112);
        _112 = &(*_4);
        StorageLive(_113);
        _113 = &(*_3);
        StorageLive(_114);
        _114 = &mut (*_5);
        StorageLive(_115);
        StorageLive(_116);
        _116 = math::margin::MarginRequirementType::Initial;
        _115 = MarginContext::standard(move _116) -> [return: bb47, unwind: bb198];
    }

    bb47: {
        StorageDead(_116);
        _108 = math::margin::calculate_margin_requirement_and_total_collateral_and_liability_info(move _109, move _112, move _113, move _114, move _115) -> [return: bb48, unwind: bb198];
    }

    bb48: {
        StorageDead(_115);
        StorageDead(_114);
        StorageDead(_113);
        StorageDead(_112);
        StorageDead(_109);
        _107 = <std::result::Result<MarginCalculation, error::ErrorCode> as Try>::branch(move _108) -> [return: bb49, unwind: bb198];
    }

    bb49: {
        StorageDead(_108);
        _117 = discriminant(_107);
        switchInt(move _117) -> [0: bb50, 1: bb51, otherwise: bb7];
    }

    bb50: {
        StorageLive(_121);
        _121 = ((_107 as Continue).0: state::margin_calculation::MarginCalculation);
        _106 = _121;
        StorageDead(_121);
        StorageDead(_110);
        StorageDead(_107);
        StorageLive(_122);
        StorageLive(_123);
        _123 = &_106;
        _122 = MarginCalculation::meets_margin_requirement(move _123) -> [return: bb53, unwind: bb198];
    }

    bb51: {
        StorageLive(_118);
        _118 = ((_107 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_120);
        _120 = _118;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _120) -> [return: bb52, unwind: bb198];
    }

    bb52: {
        StorageDead(_120);
        StorageDead(_118);
        StorageDead(_110);
        StorageDead(_107);
        goto -> bb188;
    }

    bb53: {
        StorageDead(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        _127 = _122;
        switchInt(move _127) -> [0: bb54, otherwise: bb55];
    }

    bb54: {
        StorageLive(_128);
        _128 = ();
        _126 = std::result::Result::<(), error::ErrorCode>::Ok(move _128);
        StorageDead(_128);
        goto -> bb62;
    }

    bb55: {
        StorageLive(_129);
        _129 = error::ErrorCode::SufficientCollateral;
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        _395 = const _;
        _140 = &(*_395);
        _139 = &(*_140);
        _138 = move _139 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_139);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        _148 = &_129;
        _147 = &(*_148);
        _146 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _147) -> [return: bb56, unwind: bb198];
    }

    bb56: {
        StorageDead(_147);
        _145 = [move _146];
        StorageDead(_146);
        _144 = &_145;
        _143 = &(*_144);
        _142 = move _143 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_143);
        _137 = Arguments::<'_>::new_v1(move _138, move _142) -> [return: bb57, unwind: bb198];
    }

    bb57: {
        StorageDead(_142);
        StorageDead(_138);
        _136 = format(move _137) -> [return: bb58, unwind: bb198];
    }

    bb58: {
        StorageDead(_137);
        StorageDead(_148);
        StorageDead(_145);
        StorageDead(_144);
        StorageDead(_140);
        _135 = move _136;
        StorageDead(_136);
        _134 = &_135;
        _133 = &(*_134);
        _132 = <String as Deref>::deref(move _133) -> [return: bb59, unwind: bb195];
    }

    bb59: {
        _131 = &(*_132);
        StorageDead(_133);
        _130 = solana_program::log::sol_log(move _131) -> [return: bb60, unwind: bb195];
    }

    bb60: {
        StorageDead(_131);
        drop(_135) -> [return: bb61, unwind: bb198];
    }

    bb61: {
        StorageDead(_135);
        StorageDead(_134);
        StorageDead(_132);
        StorageDead(_130);
        StorageLive(_149);
        _149 = _129;
        _126 = std::result::Result::<(), error::ErrorCode>::Err(move _149);
        StorageDead(_149);
        StorageDead(_129);
        goto -> bb62;
    }

    bb62: {
        StorageDead(_127);
        _125 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _126) -> [return: bb63, unwind: bb198];
    }

    bb63: {
        StorageDead(_126);
        _150 = discriminant(_125);
        switchInt(move _150) -> [0: bb64, 1: bb65, otherwise: bb7];
    }

    bb64: {
        StorageLive(_154);
        _154 = ((_125 as Continue).0: ());
        _124 = _154;
        StorageDead(_154);
        StorageDead(_125);
        StorageDead(_124);
        StorageLive(_155);
        _155 = const 0_u64;
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        _163 = &(*_14);
        _162 = <RefMut<'_, User> as Deref>::deref(move _163) -> [return: bb67, unwind: bb198];
    }

    bb65: {
        StorageLive(_151);
        _151 = ((_125 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_153);
        _153 = _151;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _153) -> [return: bb66, unwind: bb198];
    }

    bb66: {
        StorageDead(_153);
        StorageDead(_151);
        StorageDead(_125);
        StorageDead(_124);
        goto -> bb187;
    }

    bb67: {
        StorageDead(_163);
        _161 = &((*_162).5: [state::user::Order; 32]);
        _160 = move _161 as &[state::user::Order] (PointerCoercion(Unsize));
        StorageDead(_161);
        _159 = core::slice::<impl [Order]>::len(move _160) -> [return: bb68, unwind: bb198];
    }

    bb68: {
        StorageDead(_160);
        _158 = std::ops::Range::<usize> { start: const 0_usize, end: move _159 };
        StorageDead(_159);
        _157 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _158) -> [return: bb69, unwind: bb198];
    }

    bb69: {
        StorageDead(_158);
        StorageLive(_164);
        _164 = move _157;
        goto -> bb70;
    }

    bb70: {
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        _169 = &mut _164;
        _168 = &mut (*_169);
        _167 = <std::ops::Range<usize> as Iterator>::next(move _168) -> [return: bb71, unwind: bb198];
    }

    bb71: {
        StorageDead(_168);
        _170 = discriminant(_167);
        switchInt(move _170) -> [0: bb73, 1: bb72, otherwise: bb7];
    }

    bb72: {
        StorageLive(_172);
        _172 = ((_167 as Some).0: usize);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        _177 = &(*_14);
        _176 = <RefMut<'_, User> as Deref>::deref(move _177) -> [return: bb74, unwind: bb198];
    }

    bb73: {
        _156 = const ();
        StorageDead(_169);
        StorageDead(_167);
        StorageDead(_166);
        StorageDead(_164);
        StorageDead(_162);
        StorageDead(_157);
        StorageDead(_156);
        StorageLive(_359);
        StorageLive(_360);
        StorageLive(_361);
        StorageLive(_362);
        StorageLive(_363);
        StorageLive(_364);
        _364 = &mut (*_14);
        _363 = <RefMut<'_, User> as DerefMut>::deref_mut(move _364) -> [return: bb161, unwind: bb198];
    }

    bb74: {
        StorageDead(_177);
        StorageLive(_178);
        _178 = _172;
        _179 = Len(((*_176).5: [state::user::Order; 32]));
        _180 = Lt(_178, _179);
        assert(move _180, "index out of bounds: the length is {} but the index is {}", move _179, _178) -> [success: bb75, unwind: bb198];
    }

    bb75: {
        _175 = &(((*_176).5: [state::user::Order; 32])[_178].12: state::user::OrderStatus);
        StorageLive(_181);
        _394 = const _;
        _181 = &(*_394);
        _174 = <OrderStatus as PartialEq>::ne(move _175, move _181) -> [return: bb76, unwind: bb198];
    }

    bb76: {
        switchInt(move _174) -> [0: bb78, otherwise: bb77];
    }

    bb77: {
        StorageDead(_181);
        StorageDead(_178);
        StorageDead(_176);
        StorageDead(_175);
        StorageDead(_174);
        StorageDead(_173);
        goto -> bb160;
    }

    bb78: {
        StorageDead(_181);
        StorageDead(_178);
        StorageDead(_176);
        StorageDead(_175);
        _173 = const ();
        StorageDead(_174);
        StorageDead(_173);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        _186 = &(*_14);
        _185 = <RefMut<'_, User> as Deref>::deref(move _186) -> [return: bb79, unwind: bb198];
    }

    bb79: {
        StorageDead(_186);
        StorageLive(_187);
        _187 = _172;
        _188 = Len(((*_185).5: [state::user::Order; 32]));
        _189 = Lt(_187, _188);
        assert(move _189, "index out of bounds: the length is {} but the index is {}", move _188, _187) -> [success: bb80, unwind: bb198];
    }

    bb80: {
        _184 = (((*_185).5: [state::user::Order; 32])[_187].11: u16);
        StorageDead(_187);
        StorageDead(_185);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        _192 = &(*_14);
        _191 = <RefMut<'_, User> as Deref>::deref(move _192) -> [return: bb81, unwind: bb198];
    }

    bb81: {
        StorageDead(_192);
        StorageLive(_193);
        _193 = _172;
        _194 = Len(((*_191).5: [state::user::Order; 32]));
        _195 = Lt(_193, _194);
        assert(move _195, "index out of bounds: the length is {} but the index is {}", move _194, _193) -> [success: bb82, unwind: bb198];
    }

    bb82: {
        _190 = (((*_191).5: [state::user::Order; 32])[_193].14: state::user::MarketType);
        StorageDead(_193);
        StorageDead(_191);
        StorageLive(_196);
        _197 = discriminant(_190);
        switchInt(move _197) -> [0: bb84, 1: bb83, otherwise: bb7];
    }

    bb83: {
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        _283 = &(*_14);
        _282 = <RefMut<'_, User> as Deref>::deref(move _283) -> [return: bb124, unwind: bb198];
    }

    bb84: {
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        _201 = &(*_3);
        StorageLive(_202);
        StorageLive(_203);
        _203 = &_184;
        _202 = &(*_203);
        _200 = SpotMarketMap::<'_>::get_ref(move _201, move _202) -> [return: bb85, unwind: bb198];
    }

    bb85: {
        StorageDead(_202);
        StorageDead(_201);
        _199 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _200) -> [return: bb86, unwind: bb198];
    }

    bb86: {
        StorageDead(_200);
        _204 = discriminant(_199);
        switchInt(move _204) -> [0: bb87, 1: bb88, otherwise: bb7];
    }

    bb87: {
        StorageLive(_208);
        _208 = move ((_199 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _198 = move _208;
        StorageDead(_208);
        _409 = discriminant(_199);
        StorageDead(_203);
        StorageDead(_199);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        _221 = &(*_14);
        _220 = <RefMut<'_, User> as Deref>::deref(move _221) -> [return: bb90, unwind: bb194];
    }

    bb88: {
        StorageLive(_205);
        _205 = ((_199 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_207);
        _207 = _205;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _207) -> [return: bb89, unwind: bb204];
    }

    bb89: {
        StorageDead(_207);
        StorageDead(_205);
        _407 = discriminant(_199);
        StorageDead(_203);
        StorageDead(_199);
        goto -> bb184;
    }

    bb90: {
        _219 = &(*_220);
        StorageDead(_221);
        StorageLive(_222);
        _222 = _184;
        _218 = User::get_spot_position(move _219, move _222) -> [return: bb91, unwind: bb194];
    }

    bb91: {
        StorageDead(_222);
        StorageDead(_219);
        _217 = <std::result::Result<&SpotPosition, error::ErrorCode> as Try>::branch(move _218) -> [return: bb92, unwind: bb194];
    }

    bb92: {
        StorageDead(_218);
        _223 = discriminant(_217);
        switchInt(move _223) -> [0: bb93, 1: bb94, otherwise: bb7];
    }

    bb93: {
        StorageLive(_227);
        _227 = ((_217 as Continue).0: &state::user::SpotPosition);
        _216 = _227;
        StorageDead(_227);
        _215 = &(*_216);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        _231 = &_198;
        _230 = &(*_231);
        _229 = <Ref<'_, SpotMarket> as Deref>::deref(move _230) -> [return: bb96, unwind: bb194];
    }

    bb94: {
        StorageLive(_224);
        _224 = ((_217 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_226);
        _226 = _224;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _226) -> [return: bb95, unwind: bb194];
    }

    bb95: {
        StorageDead(_226);
        StorageDead(_224);
        StorageDead(_215);
        StorageDead(_214);
        StorageDead(_212);
        StorageDead(_211);
        goto -> bb182;
    }

    bb96: {
        _228 = &(*_229);
        StorageDead(_230);
        _214 = SpotPosition::get_signed_token_amount(move _215, move _228) -> [return: bb97, unwind: bb194];
    }

    bb97: {
        StorageDead(_228);
        StorageDead(_215);
        _213 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _214) -> [return: bb98, unwind: bb194];
    }

    bb98: {
        StorageDead(_214);
        _232 = discriminant(_213);
        switchInt(move _232) -> [0: bb99, 1: bb100, otherwise: bb7];
    }

    bb99: {
        StorageLive(_236);
        _236 = ((_213 as Continue).0: i128);
        _212 = _236;
        StorageDead(_236);
        _211 = <i128 as Cast>::cast::<i64>(move _212) -> [return: bb102, unwind: bb194];
    }

    bb100: {
        StorageLive(_233);
        _233 = ((_213 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_235);
        _235 = _233;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _235) -> [return: bb101, unwind: bb194];
    }

    bb101: {
        StorageDead(_235);
        StorageDead(_233);
        StorageDead(_212);
        StorageDead(_211);
        goto -> bb181;
    }

    bb102: {
        StorageDead(_212);
        _210 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _211) -> [return: bb103, unwind: bb194];
    }

    bb103: {
        StorageDead(_211);
        _237 = discriminant(_210);
        switchInt(move _237) -> [0: bb104, 1: bb105, otherwise: bb7];
    }

    bb104: {
        StorageLive(_241);
        _241 = ((_210 as Continue).0: i64);
        _209 = _241;
        StorageDead(_241);
        StorageDead(_231);
        StorageDead(_229);
        StorageDead(_220);
        StorageDead(_217);
        StorageDead(_216);
        StorageDead(_213);
        StorageDead(_210);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        _248 = &(*_14);
        _247 = <RefMut<'_, User> as Deref>::deref(move _248) -> [return: bb107, unwind: bb194];
    }

    bb105: {
        StorageLive(_238);
        _238 = ((_210 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_240);
        _240 = _238;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _240) -> [return: bb106, unwind: bb194];
    }

    bb106: {
        StorageDead(_240);
        StorageDead(_238);
        goto -> bb181;
    }

    bb107: {
        StorageDead(_248);
        StorageLive(_249);
        _249 = _172;
        _250 = Len(((*_247).5: [state::user::Order; 32]));
        _251 = Lt(_249, _250);
        assert(move _251, "index out of bounds: the length is {} but the index is {}", move _250, _249) -> [success: bb108, unwind: bb194];
    }

    bb108: {
        _246 = &(((*_247).5: [state::user::Order; 32])[_249].17: controller::position::PositionDirection);
        _245 = &(*_246);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        _257 = &(*_14);
        _256 = <RefMut<'_, User> as Deref>::deref(move _257) -> [return: bb109, unwind: bb194];
    }

    bb109: {
        StorageDead(_257);
        StorageLive(_258);
        _258 = _172;
        _259 = Len(((*_256).5: [state::user::Order; 32]));
        _260 = Lt(_258, _259);
        assert(move _260, "index out of bounds: the length is {} but the index is {}", move _259, _258) -> [success: bb110, unwind: bb194];
    }

    bb110: {
        _255 = &((*_256).5: [state::user::Order; 32])[_258];
        StorageLive(_261);
        StorageLive(_262);
        _262 = _209;
        _261 = Option::<i64>::Some(move _262);
        StorageDead(_262);
        _254 = Order::get_base_asset_amount_unfilled(move _255, move _261) -> [return: bb111, unwind: bb194];
    }

    bb111: {
        StorageDead(_261);
        StorageDead(_255);
        _253 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _254) -> [return: bb112, unwind: bb194];
    }

    bb112: {
        StorageDead(_254);
        _263 = discriminant(_253);
        switchInt(move _263) -> [0: bb113, 1: bb114, otherwise: bb7];
    }

    bb113: {
        StorageLive(_267);
        _267 = ((_253 as Continue).0: u64);
        _252 = _267;
        StorageDead(_267);
        StorageLive(_268);
        _268 = _209;
        _244 = math::orders::is_order_position_reducing(move _245, move _252, move _268) -> [return: bb116, unwind: bb194];
    }

    bb114: {
        StorageLive(_264);
        _264 = ((_253 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_266);
        _266 = _264;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _266) -> [return: bb115, unwind: bb194];
    }

    bb115: {
        StorageDead(_266);
        StorageDead(_264);
        StorageDead(_252);
        StorageDead(_245);
        StorageDead(_244);
        goto -> bb180;
    }

    bb116: {
        StorageDead(_268);
        StorageDead(_252);
        StorageDead(_245);
        _243 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _244) -> [return: bb117, unwind: bb194];
    }

    bb117: {
        StorageDead(_244);
        _269 = discriminant(_243);
        switchInt(move _269) -> [0: bb118, 1: bb119, otherwise: bb7];
    }

    bb118: {
        StorageLive(_273);
        _273 = ((_243 as Continue).0: bool);
        _242 = _273;
        StorageDead(_273);
        StorageDead(_258);
        StorageDead(_256);
        StorageDead(_253);
        StorageDead(_249);
        StorageDead(_247);
        StorageDead(_246);
        StorageDead(_243);
        StorageLive(_274);
        StorageLive(_275);
        _275 = _242;
        switchInt(move _275) -> [0: bb122, otherwise: bb121];
    }

    bb119: {
        StorageLive(_270);
        _270 = ((_243 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_272);
        _272 = _270;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _272) -> [return: bb120, unwind: bb194];
    }

    bb120: {
        StorageDead(_272);
        StorageDead(_270);
        goto -> bb180;
    }

    bb121: {
        StorageDead(_275);
        StorageDead(_274);
        StorageDead(_242);
        StorageDead(_209);
        drop(_198) -> [return: bb158, unwind: bb198];
    }

    bb122: {
        _274 = const ();
        StorageDead(_275);
        StorageDead(_274);
        _196 = (((*_1).6: state::state::FeeStructure).3: u64);
        StorageDead(_242);
        StorageDead(_209);
        drop(_198) -> [return: bb123, unwind: bb198];
    }

    bb123: {
        StorageDead(_198);
        goto -> bb146;
    }

    bb124: {
        _281 = &(*_282);
        StorageDead(_283);
        StorageLive(_284);
        _284 = _184;
        _280 = User::get_perp_position(move _281, move _284) -> [return: bb125, unwind: bb198];
    }

    bb125: {
        StorageDead(_284);
        StorageDead(_281);
        _279 = <std::result::Result<&PerpPosition, error::ErrorCode> as Try>::branch(move _280) -> [return: bb126, unwind: bb198];
    }

    bb126: {
        StorageDead(_280);
        _285 = discriminant(_279);
        switchInt(move _285) -> [0: bb127, 1: bb128, otherwise: bb7];
    }

    bb127: {
        StorageLive(_289);
        _289 = ((_279 as Continue).0: &state::user::PerpPosition);
        _278 = _289;
        StorageDead(_289);
        _277 = ((*_278).1: i64);
        StorageDead(_282);
        StorageDead(_279);
        StorageDead(_278);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        _296 = &(*_14);
        _295 = <RefMut<'_, User> as Deref>::deref(move _296) -> [return: bb130, unwind: bb198];
    }

    bb128: {
        StorageLive(_286);
        _286 = ((_279 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_288);
        _288 = _286;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _288) -> [return: bb129, unwind: bb198];
    }

    bb129: {
        StorageDead(_288);
        StorageDead(_286);
        StorageDead(_282);
        StorageDead(_279);
        StorageDead(_278);
        goto -> bb179;
    }

    bb130: {
        StorageDead(_296);
        StorageLive(_297);
        _297 = _172;
        _298 = Len(((*_295).5: [state::user::Order; 32]));
        _299 = Lt(_297, _298);
        assert(move _299, "index out of bounds: the length is {} but the index is {}", move _298, _297) -> [success: bb131, unwind: bb198];
    }

    bb131: {
        _294 = &(((*_295).5: [state::user::Order; 32])[_297].17: controller::position::PositionDirection);
        _293 = &(*_294);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        _305 = &(*_14);
        _304 = <RefMut<'_, User> as Deref>::deref(move _305) -> [return: bb132, unwind: bb198];
    }

    bb132: {
        StorageDead(_305);
        StorageLive(_306);
        _306 = _172;
        _307 = Len(((*_304).5: [state::user::Order; 32]));
        _308 = Lt(_306, _307);
        assert(move _308, "index out of bounds: the length is {} but the index is {}", move _307, _306) -> [success: bb133, unwind: bb198];
    }

    bb133: {
        _303 = &((*_304).5: [state::user::Order; 32])[_306];
        StorageLive(_309);
        StorageLive(_310);
        _310 = _277;
        _309 = Option::<i64>::Some(move _310);
        StorageDead(_310);
        _302 = Order::get_base_asset_amount_unfilled(move _303, move _309) -> [return: bb134, unwind: bb198];
    }

    bb134: {
        StorageDead(_309);
        StorageDead(_303);
        _301 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _302) -> [return: bb135, unwind: bb198];
    }

    bb135: {
        StorageDead(_302);
        _311 = discriminant(_301);
        switchInt(move _311) -> [0: bb136, 1: bb137, otherwise: bb7];
    }

    bb136: {
        StorageLive(_315);
        _315 = ((_301 as Continue).0: u64);
        _300 = _315;
        StorageDead(_315);
        StorageLive(_316);
        _316 = _277;
        _292 = math::orders::is_order_position_reducing(move _293, move _300, move _316) -> [return: bb139, unwind: bb198];
    }

    bb137: {
        StorageLive(_312);
        _312 = ((_301 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_314);
        _314 = _312;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _314) -> [return: bb138, unwind: bb198];
    }

    bb138: {
        StorageDead(_314);
        StorageDead(_312);
        StorageDead(_300);
        StorageDead(_293);
        StorageDead(_292);
        goto -> bb178;
    }

    bb139: {
        StorageDead(_316);
        StorageDead(_300);
        StorageDead(_293);
        _291 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _292) -> [return: bb140, unwind: bb198];
    }

    bb140: {
        StorageDead(_292);
        _317 = discriminant(_291);
        switchInt(move _317) -> [0: bb141, 1: bb142, otherwise: bb7];
    }

    bb141: {
        StorageLive(_321);
        _321 = ((_291 as Continue).0: bool);
        _290 = _321;
        StorageDead(_321);
        StorageDead(_306);
        StorageDead(_304);
        StorageDead(_301);
        StorageDead(_297);
        StorageDead(_295);
        StorageDead(_294);
        StorageDead(_291);
        StorageLive(_322);
        StorageLive(_323);
        _323 = _290;
        switchInt(move _323) -> [0: bb145, otherwise: bb144];
    }

    bb142: {
        StorageLive(_318);
        _318 = ((_291 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_320);
        _320 = _318;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _320) -> [return: bb143, unwind: bb198];
    }

    bb143: {
        StorageDead(_320);
        StorageDead(_318);
        goto -> bb178;
    }

    bb144: {
        StorageDead(_323);
        StorageDead(_322);
        StorageDead(_290);
        StorageDead(_277);
        goto -> bb159;
    }

    bb145: {
        _322 = const ();
        StorageDead(_323);
        StorageDead(_322);
        _196 = (((*_1).5: state::state::FeeStructure).3: u64);
        StorageDead(_290);
        StorageDead(_277);
        goto -> bb146;
    }

    bb146: {
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        StorageLive(_328);
        _328 = _155;
        StorageLive(_329);
        _329 = _196;
        _327 = <u64 as SafeMath>::safe_add(move _328, move _329) -> [return: bb147, unwind: bb198];
    }

    bb147: {
        StorageDead(_329);
        StorageDead(_328);
        _326 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _327) -> [return: bb148, unwind: bb198];
    }

    bb148: {
        StorageDead(_327);
        _330 = discriminant(_326);
        switchInt(move _330) -> [0: bb149, 1: bb150, otherwise: bb7];
    }

    bb149: {
        StorageLive(_334);
        _334 = ((_326 as Continue).0: u64);
        _325 = _334;
        StorageDead(_334);
        _155 = move _325;
        StorageDead(_325);
        StorageDead(_326);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        StorageLive(_338);
        _338 = _172;
        StorageLive(_339);
        StorageLive(_340);
        StorageLive(_341);
        _341 = &mut (*_14);
        _340 = <RefMut<'_, User> as DerefMut>::deref_mut(move _341) -> [return: bb152, unwind: bb198];
    }

    bb150: {
        StorageLive(_331);
        _331 = ((_326 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_333);
        _333 = _331;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _333) -> [return: bb151, unwind: bb198];
    }

    bb151: {
        StorageDead(_333);
        StorageDead(_331);
        StorageDead(_325);
        StorageDead(_326);
        goto -> bb185;
    }

    bb152: {
        _339 = &mut (*_340);
        StorageDead(_341);
        StorageLive(_342);
        StorageLive(_343);
        _343 = &_12;
        _342 = &(*_343);
        StorageLive(_344);
        _344 = &(*_4);
        StorageLive(_345);
        _345 = &(*_3);
        StorageLive(_346);
        _346 = &mut (*_5);
        StorageLive(_347);
        _347 = _8;
        StorageLive(_348);
        _348 = _9;
        StorageLive(_349);
        _349 = OrderActionExplanation::InsufficientFreeCollateral;
        StorageLive(_350);
        StorageLive(_351);
        StorageLive(_352);
        _352 = &_10;
        _351 = &(*_352);
        _350 = Option::<&anchor_lang::prelude::Pubkey>::Some(move _351);
        StorageDead(_351);
        StorageLive(_353);
        _353 = _196;
        _337 = controller::orders::cancel_order(move _338, move _339, move _342, move _344, move _345, move _346, move _347, move _348, move _349, move _350, move _353, const false) -> [return: bb153, unwind: bb198];
    }

    bb153: {
        StorageDead(_353);
        StorageDead(_350);
        StorageDead(_349);
        StorageDead(_348);
        StorageDead(_347);
        StorageDead(_346);
        StorageDead(_345);
        StorageDead(_344);
        StorageDead(_342);
        StorageDead(_339);
        StorageDead(_338);
        _336 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _337) -> [return: bb154, unwind: bb198];
    }

    bb154: {
        StorageDead(_337);
        _354 = discriminant(_336);
        switchInt(move _354) -> [0: bb155, 1: bb156, otherwise: bb7];
    }

    bb155: {
        StorageLive(_358);
        _358 = ((_336 as Continue).0: ());
        _335 = _358;
        StorageDead(_358);
        StorageDead(_352);
        StorageDead(_343);
        StorageDead(_340);
        StorageDead(_336);
        StorageDead(_335);
        _166 = const ();
        StorageDead(_196);
        StorageDead(_190);
        StorageDead(_184);
        StorageDead(_172);
        StorageDead(_169);
        StorageDead(_167);
        StorageDead(_166);
        _165 = const ();
        goto -> bb70;
    }

    bb156: {
        StorageLive(_355);
        _355 = ((_336 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_357);
        _357 = _355;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _357) -> [return: bb157, unwind: bb198];
    }

    bb157: {
        StorageDead(_357);
        StorageDead(_355);
        StorageDead(_352);
        StorageDead(_343);
        StorageDead(_340);
        StorageDead(_336);
        StorageDead(_335);
        goto -> bb185;
    }

    bb158: {
        StorageDead(_198);
        goto -> bb159;
    }

    bb159: {
        StorageDead(_196);
        StorageDead(_190);
        StorageDead(_184);
        goto -> bb160;
    }

    bb160: {
        StorageDead(_172);
        StorageDead(_169);
        StorageDead(_167);
        StorageDead(_166);
        goto -> bb70;
    }

    bb161: {
        _362 = &mut (*_363);
        StorageDead(_364);
        StorageLive(_365);
        StorageLive(_366);
        StorageLive(_367);
        StorageLive(_368);
        _368 = &mut (*_26);
        _367 = <RefMut<'_, User> as DerefMut>::deref_mut(move _368) -> [return: bb162, unwind: bb198];
    }

    bb162: {
        _366 = &mut (*_367);
        StorageDead(_368);
        _365 = Option::<&mut User>::Some(move _366);
        StorageDead(_366);
        StorageLive(_369);
        StorageLive(_370);
        StorageLive(_371);
        StorageLive(_372);
        StorageLive(_373);
        StorageLive(_374);
        StorageLive(_375);
        _375 = &(*_3);
        _374 = SpotMarketMap::<'_>::get_quote_spot_market_mut(move _375) -> [return: bb163, unwind: bb198];
    }

    bb163: {
        StorageDead(_375);
        _373 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _374) -> [return: bb164, unwind: bb198];
    }

    bb164: {
        _398 = const true;
        StorageDead(_374);
        _376 = discriminant(_373);
        switchInt(move _376) -> [0: bb165, 1: bb166, otherwise: bb7];
    }

    bb165: {
        StorageLive(_380);
        _380 = move ((_373 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _372 = move _380;
        StorageDead(_380);
        _371 = &mut _372;
        _370 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _371) -> [return: bb168, unwind: bb193];
    }

    bb166: {
        StorageLive(_377);
        _377 = ((_373 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_379);
        _379 = _377;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _379) -> [return: bb167, unwind: bb203];
    }

    bb167: {
        StorageDead(_379);
        StorageDead(_377);
        StorageDead(_371);
        StorageDead(_369);
        StorageDead(_365);
        StorageDead(_362);
        StorageDead(_361);
        goto -> bb202;
    }

    bb168: {
        _369 = &mut (*_370);
        StorageDead(_371);
        StorageLive(_381);
        _381 = _155;
        StorageLive(_382);
        _382 = _9;
        _361 = pay_keeper_flat_reward_for_spot(move _362, move _365, move _369, move _381, move _382) -> [return: bb169, unwind: bb193];
    }

    bb169: {
        StorageDead(_382);
        StorageDead(_381);
        StorageDead(_369);
        StorageDead(_365);
        StorageDead(_362);
        _360 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _361) -> [return: bb170, unwind: bb193];
    }

    bb170: {
        StorageDead(_361);
        _383 = discriminant(_360);
        switchInt(move _383) -> [0: bb171, 1: bb172, otherwise: bb7];
    }

    bb171: {
        StorageLive(_387);
        _387 = ((_360 as Continue).0: u64);
        _359 = _387;
        StorageDead(_387);
        drop(_372) -> [return: bb201, unwind: bb203];
    }

    bb172: {
        StorageLive(_384);
        _384 = ((_360 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_386);
        _386 = _384;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _386) -> [return: bb173, unwind: bb193];
    }

    bb173: {
        StorageDead(_386);
        StorageDead(_384);
        drop(_372) -> [return: bb202, unwind: bb203];
    }

    bb174: {
        _389 = &mut (*_390);
        StorageDead(_391);
        StorageLive(_392);
        _392 = _9;
        _388 = User::update_last_active_slot(move _389, move _392) -> [return: bb175, unwind: bb198];
    }

    bb175: {
        StorageDead(_392);
        StorageDead(_389);
        StorageDead(_390);
        StorageDead(_388);
        StorageLive(_393);
        _393 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _393);
        StorageDead(_393);
        StorageDead(_155);
        StorageDead(_122);
        StorageDead(_106);
        drop(_27) -> [return: bb176, unwind: bb199];
    }

    bb176: {
        StorageDead(_27);
        StorageDead(_26);
        drop(_15) -> [return: bb177, unwind: bb200];
    }

    bb177: {
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb192;
    }

    bb178: {
        StorageDead(_306);
        StorageDead(_304);
        StorageDead(_301);
        StorageDead(_297);
        StorageDead(_295);
        StorageDead(_294);
        StorageDead(_291);
        StorageDead(_290);
        goto -> bb179;
    }

    bb179: {
        StorageDead(_277);
        goto -> bb185;
    }

    bb180: {
        StorageDead(_258);
        StorageDead(_256);
        StorageDead(_253);
        StorageDead(_249);
        StorageDead(_247);
        StorageDead(_246);
        StorageDead(_243);
        StorageDead(_242);
        goto -> bb183;
    }

    bb181: {
        StorageDead(_231);
        StorageDead(_229);
        goto -> bb182;
    }

    bb182: {
        StorageDead(_220);
        StorageDead(_217);
        StorageDead(_216);
        StorageDead(_213);
        StorageDead(_210);
        goto -> bb183;
    }

    bb183: {
        StorageDead(_209);
        drop(_198) -> [return: bb184, unwind: bb198];
    }

    bb184: {
        StorageDead(_198);
        goto -> bb185;
    }

    bb185: {
        StorageDead(_196);
        StorageDead(_190);
        StorageDead(_184);
        StorageDead(_172);
        StorageDead(_169);
        StorageDead(_167);
        StorageDead(_166);
        StorageDead(_164);
        StorageDead(_162);
        StorageDead(_157);
        StorageDead(_156);
        goto -> bb186;
    }

    bb186: {
        StorageDead(_155);
        goto -> bb187;
    }

    bb187: {
        StorageDead(_122);
        goto -> bb188;
    }

    bb188: {
        StorageDead(_106);
        goto -> bb189;
    }

    bb189: {
        drop(_27) -> [return: bb190, unwind: bb199];
    }

    bb190: {
        StorageDead(_27);
        StorageDead(_26);
        drop(_15) -> [return: bb191, unwind: bb200];
    }

    bb191: {
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb192;
    }

    bb192: {
        return;
    }

    bb193 (cleanup): {
        drop(_372) -> [return: bb203, unwind terminate(cleanup)];
    }

    bb194 (cleanup): {
        drop(_198) -> [return: bb198, unwind terminate(cleanup)];
    }

    bb195 (cleanup): {
        drop(_135) -> [return: bb198, unwind terminate(cleanup)];
    }

    bb196 (cleanup): {
        drop(_86) -> [return: bb198, unwind terminate(cleanup)];
    }

    bb197 (cleanup): {
        drop(_52) -> [return: bb198, unwind terminate(cleanup)];
    }

    bb198 (cleanup): {
        drop(_27) -> [return: bb199, unwind terminate(cleanup)];
    }

    bb199 (cleanup): {
        drop(_15) -> [return: bb200, unwind terminate(cleanup)];
    }

    bb200 (cleanup): {
        resume;
    }

    bb201: {
        _411 = discriminant(_373);
        _398 = const false;
        StorageDead(_373);
        StorageDead(_372);
        StorageDead(_370);
        StorageDead(_367);
        StorageDead(_363);
        StorageDead(_360);
        StorageDead(_359);
        StorageLive(_388);
        StorageLive(_389);
        StorageLive(_390);
        StorageLive(_391);
        _391 = &mut (*_14);
        _390 = <RefMut<'_, User> as DerefMut>::deref_mut(move _391) -> [return: bb174, unwind: bb198];
    }

    bb202: {
        _413 = discriminant(_373);
        _398 = const false;
        StorageDead(_373);
        StorageDead(_372);
        StorageDead(_370);
        StorageDead(_367);
        StorageDead(_363);
        StorageDead(_360);
        StorageDead(_359);
        goto -> bb186;
    }

    bb203 (cleanup): {
        _415 = discriminant(_373);
        goto -> bb198;
    }

    bb204 (cleanup): {
        _416 = discriminant(_199);
        goto -> bb198;
    }

    bb205 (cleanup): {
        _417 = discriminant(_28);
        goto -> bb199;
    }

    bb206 (cleanup): {
        _418 = discriminant(_16);
        goto -> bb200;
    }
}
