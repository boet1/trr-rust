// MIR for `calculate_per_peg_cost` before PreCodegen

fn calculate_per_peg_cost(_1: u128, _2: u128) -> std::result::Result<i128, error::ErrorCode> {
    debug quote_asset_reserve => _1;
    debug terminal_quote_asset_reserve => _2;
    let mut _0: std::result::Result<i128, error::ErrorCode>;
    let _3: i128;
    let mut _4: bool;
    let mut _5: u128;
    let mut _6: u128;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _8: std::result::Result<i128, error::ErrorCode>;
    let mut _9: i128;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _11: std::result::Result<i128, error::ErrorCode>;
    let mut _12: i128;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _14: std::result::Result<i128, error::ErrorCode>;
    let mut _15: u128;
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _20: i128;
    let mut _21: i128;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _23: std::result::Result<i128, error::ErrorCode>;
    let mut _24: u128;
    let mut _25: isize;
    let _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _27: !;
    let mut _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _29: i128;
    let mut _30: isize;
    let _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _34: i128;
    let mut _35: i128;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: isize;
    let _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _42: !;
    let mut _43: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _44: i128;
    let mut _45: i128;
    let mut _46: bool;
    let mut _47: i128;
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _49: std::result::Result<i128, error::ErrorCode>;
    let mut _50: i128;
    let mut _51: isize;
    let mut _53: !;
    let mut _54: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _56: bool;
    let mut _57: i128;
    let mut _58: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _59: std::result::Result<i128, error::ErrorCode>;
    let mut _60: i128;
    let mut _61: isize;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    scope 1 {
        debug per_peg_cost => _3;
        let _52: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _55: i128;
        let _62: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _65: i128;
        scope 18 {
            debug residual => _52;
            scope 19 {
            }
        }
        scope 20 {
            debug val => _55;
            scope 21 {
            }
        }
        scope 22 {
            debug residual => _62;
            scope 23 {
            }
        }
        scope 24 {
            debug val => _65;
            scope 25 {
            }
        }
    }
    scope 2 {
        debug residual => _17;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _20;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _26;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _29;
        scope 9 {
        }
    }
    scope 10 {
        debug residual => _31;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _34;
        scope 13 {
        }
    }
    scope 14 {
        debug residual => _41;
        scope 15 {
        }
    }
    scope 16 {
        debug val => _44;
        scope 17 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = _1;
        StorageLive(_6);
        _6 = _2;
        _4 = Ne(move _5, move _6);
        switchInt(move _4) -> [0: bb25, otherwise: bb1];
    }

    bb1: {
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = _1;
        _14 = <u128 as Cast>::cast::<i128>(move _15) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_15);
        _13 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _14) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_14);
        _16 = discriminant(_13);
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_20);
        _20 = ((_13 as Continue).0: i128);
        _12 = _20;
        StorageDead(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = _2;
        _23 = <u128 as Cast>::cast::<i128>(move _24) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_17);
        _17 = ((_13 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_19);
        _19 = _17;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _19) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb46;
    }

    bb8: {
        StorageDead(_24);
        _22 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _23) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_23);
        _25 = discriminant(_22);
        switchInt(move _25) -> [0: bb10, 1: bb11, otherwise: bb5];
    }

    bb10: {
        StorageLive(_29);
        _29 = ((_22 as Continue).0: i128);
        _21 = _29;
        StorageDead(_29);
        _11 = <i128 as SafeMath>::safe_sub(move _12, move _21) -> [return: bb13, unwind continue];
    }

    bb11: {
        StorageLive(_26);
        _26 = ((_22 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_28);
        _28 = _26;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _28) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb44;
    }

    bb13: {
        StorageDead(_21);
        StorageDead(_12);
        _10 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _11) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_11);
        _30 = discriminant(_10);
        switchInt(move _30) -> [0: bb15, 1: bb16, otherwise: bb5];
    }

    bb15: {
        StorageLive(_34);
        _34 = ((_10 as Continue).0: i128);
        _9 = _34;
        StorageDead(_34);
        StorageLive(_35);
        _36 = Eq(const _, const 0_i128);
        assert(!move _36, "attempt to divide `{}` by zero", const _) -> [success: bb18, unwind continue];
    }

    bb16: {
        StorageLive(_31);
        _31 = ((_10 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_33);
        _33 = _31;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _33) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_33);
        StorageDead(_31);
        goto -> bb44;
    }

    bb18: {
        _37 = Eq(const _, const -1_i128);
        _38 = Eq(const _, const i128::MIN);
        _39 = BitAnd(move _37, move _38);
        assert(!move _39, "attempt to compute `{} / {}`, which would overflow", const _, const _) -> [success: bb19, unwind continue];
    }

    bb19: {
        _35 = Div(const _, const _);
        _8 = <i128 as SafeMath>::safe_div_ceil(move _9, move _35) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_35);
        StorageDead(_9);
        _7 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _8) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_8);
        _40 = discriminant(_7);
        switchInt(move _40) -> [0: bb22, 1: bb23, otherwise: bb5];
    }

    bb22: {
        StorageLive(_44);
        _44 = ((_7 as Continue).0: i128);
        _3 = _44;
        StorageDead(_44);
        StorageDead(_22);
        StorageDead(_13);
        StorageDead(_10);
        StorageDead(_7);
        goto -> bb26;
    }

    bb23: {
        StorageLive(_41);
        _41 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_43);
        _43 = _41;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _43) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_43);
        StorageDead(_41);
        goto -> bb45;
    }

    bb25: {
        StorageDead(_6);
        StorageDead(_5);
        _3 = const 0_i128;
        goto -> bb26;
    }

    bb26: {
        StorageDead(_4);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = _3;
        _46 = Gt(move _47, const 0_i128);
        switchInt(move _46) -> [0: bb33, otherwise: bb27];
    }

    bb27: {
        StorageDead(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = _3;
        _49 = <i128 as SafeMath>::safe_add(move _50, const 1_i128) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_50);
        _48 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _49) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_49);
        _51 = discriminant(_48);
        switchInt(move _51) -> [0: bb30, 1: bb31, otherwise: bb5];
    }

    bb30: {
        StorageLive(_55);
        _55 = ((_48 as Continue).0: i128);
        _45 = _55;
        StorageDead(_55);
        StorageDead(_48);
        goto -> bb42;
    }

    bb31: {
        StorageLive(_52);
        _52 = ((_48 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_54);
        _54 = _52;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _54) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_54);
        StorageDead(_52);
        StorageDead(_48);
        goto -> bb43;
    }

    bb33: {
        StorageDead(_47);
        StorageLive(_56);
        StorageLive(_57);
        _57 = _3;
        _56 = Lt(move _57, const 0_i128);
        switchInt(move _56) -> [0: bb40, otherwise: bb34];
    }

    bb34: {
        StorageDead(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = _3;
        _59 = <i128 as SafeMath>::safe_sub(move _60, const 1_i128) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_60);
        _58 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _59) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_59);
        _61 = discriminant(_58);
        switchInt(move _61) -> [0: bb37, 1: bb38, otherwise: bb5];
    }

    bb37: {
        StorageLive(_65);
        _65 = ((_58 as Continue).0: i128);
        _45 = _65;
        StorageDead(_65);
        StorageDead(_58);
        goto -> bb41;
    }

    bb38: {
        StorageLive(_62);
        _62 = ((_58 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_64);
        _64 = _62;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _64) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_64);
        StorageDead(_62);
        StorageDead(_58);
        StorageDead(_56);
        goto -> bb43;
    }

    bb40: {
        StorageDead(_57);
        _45 = _3;
        goto -> bb41;
    }

    bb41: {
        StorageDead(_56);
        goto -> bb42;
    }

    bb42: {
        StorageDead(_46);
        _0 = std::result::Result::<i128, error::ErrorCode>::Ok(move _45);
        StorageDead(_45);
        StorageDead(_3);
        goto -> bb48;
    }

    bb43: {
        StorageDead(_46);
        StorageDead(_45);
        goto -> bb47;
    }

    bb44: {
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb45;
    }

    bb45: {
        StorageDead(_22);
        goto -> bb46;
    }

    bb46: {
        StorageDead(_13);
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_4);
        goto -> bb47;
    }

    bb47: {
        StorageDead(_3);
        goto -> bb48;
    }

    bb48: {
        return;
    }
}
