// MIR for `calculate_quote_asset_amount_swapped` before PreCodegen

fn calculate_quote_asset_amount_swapped(_1: u128, _2: u128, _3: SwapDirection, _4: u128) -> std::result::Result<u128, error::ErrorCode> {
    debug quote_asset_reserve_before => _1;
    debug quote_asset_reserve_after => _2;
    debug swap_direction => _3;
    debug peg_multiplier => _4;
    let mut _0: std::result::Result<u128, error::ErrorCode>;
    let mut _5: u128;
    let mut _6: isize;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _8: std::result::Result<u128, error::ErrorCode>;
    let mut _9: u128;
    let mut _10: u128;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _15: u128;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _17: std::result::Result<u128, error::ErrorCode>;
    let mut _18: u128;
    let mut _19: u128;
    let mut _20: isize;
    let _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _24: u128;
    let _25: ();
    let mut _26: bool;
    let mut _27: &controller::amm::SwapDirection;
    let mut _28: &controller::amm::SwapDirection;
    let _29: controller::amm::SwapDirection;
    let mut _30: u128;
    let mut _31: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _32: std::result::Result<u128, error::ErrorCode>;
    let mut _33: u128;
    let mut _34: isize;
    let mut _36: !;
    let mut _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _40: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _41: std::result::Result<u128, error::ErrorCode>;
    let mut _42: u128;
    let mut _43: u128;
    let mut _44: isize;
    let mut _46: !;
    let mut _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _49: ();
    let mut _50: bool;
    let mut _51: &controller::amm::SwapDirection;
    let mut _52: &controller::amm::SwapDirection;
    let _53: controller::amm::SwapDirection;
    let mut _54: u128;
    let mut _55: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _56: std::result::Result<u128, error::ErrorCode>;
    let mut _57: u128;
    let mut _58: isize;
    let mut _60: !;
    let mut _61: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _63: u128;
    scope 1 {
        debug quote_asset_reserve_change => _5;
        let _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _38: u128;
        let mut _39: u128;
        let _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _48: u128;
        let mut _65: &controller::amm::SwapDirection;
        scope 10 {
            debug residual => _35;
            scope 11 {
            }
        }
        scope 12 {
            debug val => _38;
            scope 13 {
            }
        }
        scope 14 {
            debug quote_asset_amount => _39;
            let _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _62: u128;
            let mut _64: &controller::amm::SwapDirection;
            scope 19 {
                debug residual => _59;
                scope 20 {
                }
            }
            scope 21 {
                debug val => _62;
                scope 22 {
                }
            }
        }
        scope 15 {
            debug residual => _45;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _48;
            scope 18 {
            }
        }
    }
    scope 2 {
        debug residual => _12;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _15;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _21;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _24;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_5);
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = _2;
        StorageLive(_19);
        _19 = _1;
        _17 = <u128 as SafeMath>::safe_sub(move _18, move _19) -> [return: bb9, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = _1;
        StorageLive(_10);
        _10 = _2;
        _8 = <u128 as SafeMath>::safe_sub(move _9, move _10) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_10);
        StorageDead(_9);
        _7 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _8) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_8);
        _11 = discriminant(_7);
        switchInt(move _11) -> [0: bb6, 1: bb7, otherwise: bb2];
    }

    bb6: {
        StorageLive(_15);
        _15 = ((_7 as Continue).0: u128);
        _5 = _15;
        StorageDead(_15);
        StorageDead(_7);
        goto -> bb14;
    }

    bb7: {
        StorageLive(_12);
        _12 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _14) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_7);
        goto -> bb39;
    }

    bb9: {
        StorageDead(_19);
        StorageDead(_18);
        _16 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _17) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_17);
        _20 = discriminant(_16);
        switchInt(move _20) -> [0: bb11, 1: bb12, otherwise: bb2];
    }

    bb11: {
        StorageLive(_24);
        _24 = ((_16 as Continue).0: u128);
        _5 = _24;
        StorageDead(_24);
        StorageDead(_16);
        goto -> bb14;
    }

    bb12: {
        StorageLive(_21);
        _21 = ((_16 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_23);
        _23 = _21;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _23) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_16);
        goto -> bb39;
    }

    bb14: {
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &_3;
        StorageLive(_28);
        _65 = const _;
        _28 = &(*_65);
        _26 = <SwapDirection as PartialEq>::eq(move _27, move _28) -> [return: bb15, unwind continue];
    }

    bb15: {
        switchInt(move _26) -> [0: bb22, otherwise: bb16];
    }

    bb16: {
        StorageDead(_28);
        StorageDead(_27);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = _5;
        _32 = <u128 as SafeMath>::safe_add(move _33, const 1_u128) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_33);
        _31 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _32) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_32);
        _34 = discriminant(_31);
        switchInt(move _34) -> [0: bb19, 1: bb20, otherwise: bb2];
    }

    bb19: {
        StorageLive(_38);
        _38 = ((_31 as Continue).0: u128);
        _30 = _38;
        StorageDead(_38);
        _5 = move _30;
        StorageDead(_30);
        StorageDead(_31);
        _25 = const ();
        goto -> bb23;
    }

    bb20: {
        StorageLive(_35);
        _35 = ((_31 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_37);
        _37 = _35;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _37) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_30);
        StorageDead(_31);
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb39;
    }

    bb22: {
        StorageDead(_28);
        StorageDead(_27);
        _25 = const ();
        goto -> bb23;
    }

    bb23: {
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = _5;
        StorageLive(_43);
        _43 = _4;
        _41 = quote_asset::reserve_to_asset_amount(move _42, move _43) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_43);
        StorageDead(_42);
        _40 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _41) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_41);
        _44 = discriminant(_40);
        switchInt(move _44) -> [0: bb26, 1: bb27, otherwise: bb2];
    }

    bb26: {
        StorageLive(_48);
        _48 = ((_40 as Continue).0: u128);
        _39 = _48;
        StorageDead(_48);
        StorageDead(_40);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = &_3;
        StorageLive(_52);
        _64 = const _;
        _52 = &(*_64);
        _50 = <SwapDirection as PartialEq>::eq(move _51, move _52) -> [return: bb29, unwind continue];
    }

    bb27: {
        StorageLive(_45);
        _45 = ((_40 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_47);
        _47 = _45;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _47) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_47);
        StorageDead(_45);
        StorageDead(_40);
        goto -> bb38;
    }

    bb29: {
        switchInt(move _50) -> [0: bb36, otherwise: bb30];
    }

    bb30: {
        StorageDead(_52);
        StorageDead(_51);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = _39;
        _56 = <u128 as SafeMath>::safe_add(move _57, const 1_u128) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_57);
        _55 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _56) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_56);
        _58 = discriminant(_55);
        switchInt(move _58) -> [0: bb33, 1: bb34, otherwise: bb2];
    }

    bb33: {
        StorageLive(_62);
        _62 = ((_55 as Continue).0: u128);
        _54 = _62;
        StorageDead(_62);
        _39 = move _54;
        StorageDead(_54);
        StorageDead(_55);
        _49 = const ();
        goto -> bb37;
    }

    bb34: {
        StorageLive(_59);
        _59 = ((_55 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_61);
        _61 = _59;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _61) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_54);
        StorageDead(_55);
        StorageDead(_50);
        StorageDead(_49);
        goto -> bb38;
    }

    bb36: {
        StorageDead(_52);
        StorageDead(_51);
        _49 = const ();
        goto -> bb37;
    }

    bb37: {
        StorageDead(_50);
        StorageDead(_49);
        StorageLive(_63);
        _63 = _39;
        _0 = std::result::Result::<u128, error::ErrorCode>::Ok(move _63);
        StorageDead(_63);
        StorageDead(_39);
        StorageDead(_5);
        goto -> bb40;
    }

    bb38: {
        StorageDead(_39);
        goto -> bb39;
    }

    bb39: {
        StorageDead(_5);
        goto -> bb40;
    }

    bb40: {
        return;
    }
}
