// MIR for `load_user_map` after PreCodegen

fn load_user_map(_1: &mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>, _2: bool) -> std::result::Result<UserMap<'_>, error::ErrorCode> {
    debug account_info_iter => _1;
    debug must_be_writable => _2;
    let mut _0: std::result::Result<state::user_map::UserMap<'_>, error::ErrorCode>;
    let mut _3: state::user_map::UserMap<'_>;
    let _6: ();
    let mut _7: ();
    let mut _8: std::option::Option<&&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _9: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _10: isize;
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _15: std::result::Result<std::cell::Ref<'_, &mut [u8]>, error::ErrorCode>;
    let mut _16: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _17: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _18: std::result::Result<std::cell::Ref<'_, &mut [u8]>, error::ErrorCode>;
    let mut _19: error::ErrorCode;
    let mut _20: isize;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _27: ();
    let mut _28: bool;
    let mut _29: usize;
    let mut _30: &[u8];
    let _31: &&mut [u8];
    let mut _32: &std::cell::Ref<'_, &mut [u8]>;
    let mut _33: usize;
    let mut _34: bool;
    let mut _35: usize;
    let mut _36: &[u8];
    let _37: &&mut [u8];
    let mut _38: &std::cell::Ref<'_, &mut [u8]>;
    let mut _39: usize;
    let mut _40: !;
    let _44: &[u8];
    let mut _45: &[u8];
    let _46: &&mut [u8];
    let mut _47: &std::cell::Ref<'_, &mut [u8]>;
    let mut _48: std::ops::Range<usize>;
    let mut _49: usize;
    let mut _50: usize;
    let mut _51: usize;
    let mut _52: (usize, bool);
    let mut _53: &[u8];
    let _54: ();
    let mut _55: bool;
    let mut _56: &&[u8; 8];
    let mut _57: &&[u8; 8];
    let _58: &[u8; 8];
    let mut _59: !;
    let _60: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _61: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &anchor_lang::prelude::AccountInfo<'_>>;
    let mut _62: std::result::Result<&anchor_lang::prelude::AccountInfo<'_>, error::ErrorCode>;
    let mut _63: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _64: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _65: isize;
    let mut _67: !;
    let mut _68: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _70: ();
    let mut _71: bool;
    let mut _72: &&[u8; 8];
    let mut _73: &&[u8; 8];
    let _74: &[u8; 8];
    let mut _75: !;
    let mut _77: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &anchor_lang::prelude::AccountInfo<'_>>;
    let mut _78: std::result::Result<&anchor_lang::prelude::AccountInfo<'_>, error::ErrorCode>;
    let mut _79: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _80: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _81: isize;
    let mut _83: !;
    let mut _84: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _87: ();
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: !;
    let mut _91: error::ErrorCode;
    let mut _93: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _94: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::User>, error::ErrorCode>;
    let mut _95: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _96: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _97: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::User>, error::ErrorCode>;
    let mut _98: error::ErrorCode;
    let mut _99: isize;
    let mut _101: !;
    let mut _102: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _104: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _105: &mut std::collections::BTreeMap<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _106: anchor_lang::prelude::Pubkey;
    let mut _107: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _108: !;
    let _109: ();
    let mut _110: !;
    let mut _111: state::user_map::UserMap<'_>;
    let mut _112: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _113: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _114: &mut [u8];
    let mut _115: &mut [u8];
    let mut _116: &mut [u8];
    let mut _117: isize;
    let mut _118: isize;
    let mut _119: isize;
    let mut _120: isize;
    let mut _121: isize;
    scope 1 {
        debug user_map => _3;
        let _4: [u8; 8];
        scope 2 {
            debug user_discriminator => _4;
            let _5: [u8; 8];
            scope 3 {
                debug user_stats_discriminator => _5;
                scope 4 {
                    debug user_account_info => _11;
                    let _11: &&anchor_lang::prelude::AccountInfo<'_>;
                    let _12: &anchor_lang::prelude::Pubkey;
                    scope 5 {
                        debug user_key => _12;
                        let _13: std::cell::Ref<'_, &mut [u8]>;
                        let _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _24: std::cell::Ref<'_, &mut [u8]>;
                        scope 6 {
                            debug data => _13;
                            let _25: usize;
                            scope 11 {
                                debug expected_user_data_len => _25;
                                let _26: usize;
                                scope 12 {
                                    debug expected_user_stats_len => _26;
                                    let _41: &[u8; 8];
                                    let _42: usize;
                                    scope 13 {
                                        debug account_discriminator => _41;
                                        let _66: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _69: &anchor_lang::prelude::AccountInfo<'_>;
                                        let _76: &anchor_lang::prelude::AccountInfo<'_>;
                                        let _82: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _85: &anchor_lang::prelude::AccountInfo<'_>;
                                        scope 18 {
                                            debug residual => _66;
                                            scope 19 {
                                            }
                                        }
                                        scope 20 {
                                            debug val => _69;
                                            scope 21 {
                                            }
                                        }
                                        scope 22 {
                                            debug user_account_info => _76;
                                            let _86: bool;
                                            scope 27 {
                                                debug is_writable => _86;
                                                let _92: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
                                                let _100: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _103: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
                                                scope 28 {
                                                    debug user_account_loader => _92;
                                                }
                                                scope 29 {
                                                    debug residual => _100;
                                                    scope 30 {
                                                    }
                                                }
                                                scope 31 {
                                                    debug val => _103;
                                                    scope 32 {
                                                    }
                                                }
                                            }
                                        }
                                        scope 23 {
                                            debug residual => _82;
                                            scope 24 {
                                            }
                                        }
                                        scope 25 {
                                            debug val => _85;
                                            scope 26 {
                                            }
                                        }
                                    }
                                    scope 14 {
                                        debug offset => _42;
                                        let _43: &[u8];
                                        scope 15 {
                                            debug slice => _43;
                                            scope 16 {
                                                scope 17 {
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        scope 7 {
                            debug residual => _21;
                            scope 8 {
                            }
                        }
                        scope 9 {
                            debug val => _24;
                            scope 10 {
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_3);
        _3 = UserMap::<'_>::empty() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_4);
        _4 = <User as anchor_lang::Discriminator>::discriminator() -> [return: bb2, unwind: bb68];
    }

    bb2: {
        StorageLive(_5);
        _5 = <UserStats as anchor_lang::Discriminator>::discriminator() -> [return: bb3, unwind: bb68];
    }

    bb3: {
        StorageLive(_6);
        goto -> bb4;
    }

    bb4: {
        StorageLive(_8);
        StorageLive(_9);
        _9 = &mut (*_1);
        _8 = Peekable::<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>::peek(move _9) -> [return: bb5, unwind: bb68];
    }

    bb5: {
        StorageDead(_9);
        _10 = discriminant(_8);
        switchInt(move _10) -> [1: bb6, otherwise: bb56];
    }

    bb6: {
        StorageLive(_11);
        _11 = ((_8 as Some).0: &&anchor_lang::prelude::AccountInfo<'_>);
        StorageLive(_12);
        _112 = deref_copy (*_11);
        _12 = ((*_112).0: &anchor_lang::prelude::Pubkey);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _113 = deref_copy (*_11);
        _17 = &(*_113);
        _16 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _17) -> [return: bb7, unwind: bb68];
    }

    bb7: {
        StorageDead(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = error::ErrorCode::CouldNotLoadUserData;
        _18 = std::result::Result::<Ref<'_, &mut [u8]>, error::ErrorCode>::Err(move _19);
        StorageDead(_19);
        _15 = std::result::Result::<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>::or::<error::ErrorCode>(move _16, move _18) -> [return: bb8, unwind: bb68];
    }

    bb8: {
        StorageDead(_18);
        StorageDead(_16);
        _14 = <std::result::Result<Ref<'_, &mut [u8]>, error::ErrorCode> as Try>::branch(move _15) -> [return: bb9, unwind: bb68];
    }

    bb9: {
        StorageDead(_15);
        _20 = discriminant(_14);
        switchInt(move _20) -> [0: bb10, 1: bb12, otherwise: bb11];
    }

    bb10: {
        StorageLive(_24);
        _24 = move ((_14 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _13 = move _24;
        StorageDead(_24);
        _119 = discriminant(_14);
        StorageDead(_14);
        StorageLive(_25);
        _25 = const _;
        StorageLive(_26);
        _26 = const _;
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = &_13;
        _31 = <Ref<'_, &mut [u8]> as Deref>::deref(move _32) -> [return: bb14, unwind: bb67];
    }

    bb11: {
        unreachable;
    }

    bb12: {
        StorageLive(_21);
        _21 = ((_14 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_23);
        _23 = _21;
        _0 = <std::result::Result<UserMap<'_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _23) -> [return: bb13, unwind: bb70];
    }

    bb13: {
        StorageDead(_23);
        StorageDead(_21);
        _117 = discriminant(_14);
        StorageDead(_14);
        goto -> bb64;
    }

    bb14: {
        _114 = deref_copy (*_31);
        _30 = &(*_114);
        StorageDead(_32);
        _29 = core::slice::<impl [u8]>::len(move _30) -> [return: bb15, unwind: bb67];
    }

    bb15: {
        StorageDead(_30);
        StorageLive(_33);
        _33 = _25;
        _28 = Lt(move _29, move _33);
        switchInt(move _28) -> [0: bb21, otherwise: bb16];
    }

    bb16: {
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_29);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = &_13;
        _37 = <Ref<'_, &mut [u8]> as Deref>::deref(move _38) -> [return: bb17, unwind: bb67];
    }

    bb17: {
        _115 = deref_copy (*_37);
        _36 = &(*_115);
        StorageDead(_38);
        _35 = core::slice::<impl [u8]>::len(move _36) -> [return: bb18, unwind: bb67];
    }

    bb18: {
        StorageDead(_36);
        StorageLive(_39);
        _39 = _26;
        _34 = Lt(move _35, move _39);
        switchInt(move _34) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_35);
        _6 = const ();
        StorageDead(_34);
        StorageDead(_28);
        StorageDead(_27);
        goto -> bb57;
    }

    bb20: {
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_35);
        goto -> bb22;
    }

    bb21: {
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_29);
        goto -> bb22;
    }

    bb22: {
        _27 = const ();
        StorageDead(_34);
        StorageDead(_28);
        StorageDead(_27);
        StorageLive(_41);
        StorageLive(_42);
        _42 = const 0_usize;
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = &_13;
        _46 = <Ref<'_, &mut [u8]> as Deref>::deref(move _47) -> [return: bb23, unwind: bb67];
    }

    bb23: {
        _116 = deref_copy (*_46);
        _45 = &(*_116);
        StorageDead(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = _42;
        StorageLive(_50);
        StorageLive(_51);
        _51 = _42;
        _52 = CheckedAdd(_51, const 8_usize);
        assert(!move (_52.1: bool), "attempt to compute `{} + {}`, which would overflow", move _51, const 8_usize) -> [success: bb24, unwind: bb67];
    }

    bb24: {
        _50 = move (_52.0: usize);
        StorageDead(_51);
        _48 = std::ops::Range::<usize> { start: move _49, end: move _50 };
        StorageDead(_50);
        StorageDead(_49);
        _44 = <[u8] as Index<std::ops::Range<usize>>>::index(move _45, move _48) -> [return: bb25, unwind: bb67];
    }

    bb25: {
        StorageDead(_48);
        StorageDead(_45);
        _43 = &(*_44);
        StorageLive(_53);
        _53 = &(*_43);
        _41 = load_user_map::as_array::<u8>(move _53) -> [return: bb26, unwind: bb67];
    }

    bb26: {
        StorageDead(_53);
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = &_41;
        StorageLive(_57);
        StorageLive(_58);
        _58 = &_5;
        _57 = &_58;
        _55 = <&[u8; 8] as PartialEq>::eq(move _56, move _57) -> [return: bb27, unwind: bb67];
    }

    bb27: {
        switchInt(move _55) -> [0: bb35, otherwise: bb28];
    }

    bb28: {
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = &mut (*_1);
        _63 = <Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>> as Iterator>::next(move _64) -> [return: bb29, unwind: bb67];
    }

    bb29: {
        StorageDead(_64);
        _62 = <Option<&anchor_lang::prelude::AccountInfo<'_>> as SafeUnwrap>::safe_unwrap(move _63) -> [return: bb30, unwind: bb67];
    }

    bb30: {
        StorageDead(_63);
        _61 = <std::result::Result<&anchor_lang::prelude::AccountInfo<'_>, error::ErrorCode> as Try>::branch(move _62) -> [return: bb31, unwind: bb67];
    }

    bb31: {
        StorageDead(_62);
        _65 = discriminant(_61);
        switchInt(move _65) -> [0: bb32, 1: bb33, otherwise: bb11];
    }

    bb32: {
        StorageLive(_69);
        _69 = ((_61 as Continue).0: &anchor_lang::prelude::AccountInfo<'_>);
        _60 = _69;
        StorageDead(_69);
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_41);
        StorageDead(_26);
        StorageDead(_25);
        drop(_13) -> [return: bb60, unwind: bb68];
    }

    bb33: {
        StorageLive(_66);
        _66 = ((_61 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_68);
        _68 = _66;
        _0 = <std::result::Result<UserMap<'_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _68) -> [return: bb34, unwind: bb67];
    }

    bb34: {
        StorageDead(_68);
        StorageDead(_66);
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_55);
        StorageDead(_54);
        goto -> bb63;
    }

    bb35: {
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        _54 = const ();
        StorageDead(_55);
        StorageDead(_54);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        _72 = &_41;
        StorageLive(_73);
        StorageLive(_74);
        _74 = &_4;
        _73 = &_74;
        _71 = <&[u8; 8] as PartialEq>::ne(move _72, move _73) -> [return: bb36, unwind: bb67];
    }

    bb36: {
        switchInt(move _71) -> [0: bb38, otherwise: bb37];
    }

    bb37: {
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_72);
        _6 = const ();
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_41);
        goto -> bb57;
    }

    bb38: {
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_72);
        _70 = const ();
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _80 = &mut (*_1);
        _79 = <Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>> as Iterator>::next(move _80) -> [return: bb39, unwind: bb67];
    }

    bb39: {
        StorageDead(_80);
        _78 = <Option<&anchor_lang::prelude::AccountInfo<'_>> as SafeUnwrap>::safe_unwrap(move _79) -> [return: bb40, unwind: bb67];
    }

    bb40: {
        StorageDead(_79);
        _77 = <std::result::Result<&anchor_lang::prelude::AccountInfo<'_>, error::ErrorCode> as Try>::branch(move _78) -> [return: bb41, unwind: bb67];
    }

    bb41: {
        StorageDead(_78);
        _81 = discriminant(_77);
        switchInt(move _81) -> [0: bb42, 1: bb43, otherwise: bb11];
    }

    bb42: {
        StorageLive(_85);
        _85 = ((_77 as Continue).0: &anchor_lang::prelude::AccountInfo<'_>);
        _76 = _85;
        StorageDead(_85);
        StorageDead(_77);
        StorageLive(_86);
        _86 = ((*_76).6: bool);
        StorageLive(_87);
        StorageLive(_88);
        _88 = _86;
        switchInt(move _88) -> [0: bb45, otherwise: bb47];
    }

    bb43: {
        StorageLive(_82);
        _82 = ((_77 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_84);
        _84 = _82;
        _0 = <std::result::Result<UserMap<'_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _84) -> [return: bb44, unwind: bb67];
    }

    bb44: {
        StorageDead(_84);
        StorageDead(_82);
        StorageDead(_77);
        goto -> bb62;
    }

    bb45: {
        StorageLive(_89);
        _89 = _2;
        switchInt(move _89) -> [0: bb47, otherwise: bb46];
    }

    bb46: {
        StorageLive(_91);
        _91 = error::ErrorCode::UserWrongMutability;
        _0 = std::result::Result::<UserMap<'_>, error::ErrorCode>::Err(move _91);
        StorageDead(_91);
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_87);
        goto -> bb61;
    }

    bb47: {
        _87 = const ();
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_87);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = &(*_76);
        _95 = anchor_lang::prelude::AccountLoader::<'_, User>::try_from(move _96) -> [return: bb48, unwind: bb67];
    }

    bb48: {
        StorageDead(_96);
        StorageLive(_97);
        StorageLive(_98);
        _98 = error::ErrorCode::InvalidUserAccount;
        _97 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, User>, error::ErrorCode>::Err(move _98);
        StorageDead(_98);
        _94 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, User>, anchor_lang::error::Error>::or::<error::ErrorCode>(move _95, move _97) -> [return: bb49, unwind: bb67];
    }

    bb49: {
        StorageDead(_97);
        StorageDead(_95);
        _93 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, User>, error::ErrorCode> as Try>::branch(move _94) -> [return: bb50, unwind: bb67];
    }

    bb50: {
        StorageDead(_94);
        _99 = discriminant(_93);
        switchInt(move _99) -> [0: bb51, 1: bb52, otherwise: bb11];
    }

    bb51: {
        StorageLive(_103);
        _103 = move ((_93 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _92 = move _103;
        StorageDead(_103);
        StorageDead(_93);
        StorageLive(_104);
        StorageLive(_105);
        _105 = &mut (_3.0: std::collections::BTreeMap<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, state::user::User>>);
        StorageLive(_106);
        _106 = (*_12);
        StorageLive(_107);
        _107 = move _92;
        _104 = BTreeMap::<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, User>>::insert(move _105, move _106, move _107) -> [return: bb54, unwind: bb67];
    }

    bb52: {
        StorageLive(_100);
        _100 = ((_93 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_102);
        _102 = _100;
        _0 = <std::result::Result<UserMap<'_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _102) -> [return: bb53, unwind: bb67];
    }

    bb53: {
        StorageDead(_102);
        StorageDead(_100);
        StorageDead(_93);
        StorageDead(_92);
        goto -> bb61;
    }

    bb54: {
        StorageDead(_107);
        StorageDead(_106);
        StorageDead(_105);
        StorageDead(_104);
        _7 = const ();
        StorageDead(_92);
        StorageDead(_86);
        StorageDead(_76);
        StorageDead(_41);
        StorageDead(_26);
        StorageDead(_25);
        drop(_13) -> [return: bb55, unwind: bb68];
    }

    bb55: {
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_8);
        goto -> bb4;
    }

    bb56: {
        StorageLive(_109);
        _6 = const ();
        StorageDead(_109);
        goto -> bb59;
    }

    bb57: {
        StorageDead(_26);
        StorageDead(_25);
        drop(_13) -> [return: bb58, unwind: bb68];
    }

    bb58: {
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb59;
    }

    bb59: {
        StorageDead(_8);
        StorageDead(_6);
        StorageLive(_111);
        _111 = move _3;
        _0 = std::result::Result::<UserMap<'_>, error::ErrorCode>::Ok(move _111);
        StorageDead(_111);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb66;
    }

    bb60: {
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_8);
        goto -> bb4;
    }

    bb61: {
        StorageDead(_86);
        goto -> bb62;
    }

    bb62: {
        StorageDead(_76);
        goto -> bb63;
    }

    bb63: {
        StorageDead(_41);
        StorageDead(_26);
        StorageDead(_25);
        drop(_13) -> [return: bb64, unwind: bb68];
    }

    bb64: {
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        drop(_3) -> [return: bb65, unwind: bb69];
    }

    bb65: {
        StorageDead(_3);
        goto -> bb66;
    }

    bb66: {
        return;
    }

    bb67 (cleanup): {
        drop(_13) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        drop(_3) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        resume;
    }

    bb70 (cleanup): {
        _121 = discriminant(_14);
        goto -> bb68;
    }
}
