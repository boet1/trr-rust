// MIR for `margin_calculation::<impl at programs/drift/src/state/margin_calculation.rs:208:1: 208:23>::update_fuel_perp_bonus` before PreCodegen

fn margin_calculation::<impl at programs/drift/src/state/margin_calculation.rs:208:1: 208:23>::update_fuel_perp_bonus(_1: &mut MarginCalculation, _2: &PerpMarket, _3: &PerpPosition, _4: u128, _5: i64) -> std::result::Result<(), error::ErrorCode> {
    debug self => _1;
    debug perp_market => _2;
    debug perp_position => _3;
    debug base_asset_value => _4;
    debug oracle_price => _5;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _6: ();
    let mut _7: bool;
    let mut _8: u8;
    let mut _9: !;
    let mut _10: ();
    let _11: u128;
    let mut _12: isize;
    let mut _15: bool;
    let mut _16: u16;
    let mut _17: u16;
    let mut _18: i128;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _20: std::result::Result<i128, error::ErrorCode>;
    let mut _21: i128;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _23: std::result::Result<i128, error::ErrorCode>;
    let mut _24: i128;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _26: std::result::Result<i128, error::ErrorCode>;
    let mut _27: i64;
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _29: std::result::Result<i64, error::ErrorCode>;
    let mut _30: i64;
    let mut _31: i64;
    let mut _32: isize;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _37: isize;
    let mut _39: !;
    let mut _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _42: i128;
    let mut _43: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _44: std::result::Result<i128, error::ErrorCode>;
    let mut _45: i64;
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _51: isize;
    let mut _53: !;
    let mut _54: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _56: isize;
    let mut _58: !;
    let mut _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _62: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _63: std::result::Result<u64, error::ErrorCode>;
    let mut _64: &state::perp_market::PerpMarket;
    let mut _65: i128;
    let mut _66: u128;
    let mut _67: i64;
    let mut _68: isize;
    let mut _70: !;
    let mut _71: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _73: u32;
    let mut _74: u32;
    let mut _75: u32;
    let mut _76: std::result::Result<u32, error::ErrorCode>;
    let mut _77: u64;
    let mut _78: ();
    scope 1 {
        debug fuel_base_asset_value => _11;
        let _61: u64;
        let _69: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _72: u64;
        scope 23 {
            debug perp_fuel_oi_bonus => _61;
        }
        scope 24 {
            debug residual => _69;
            scope 25 {
            }
        }
        scope 26 {
            debug val => _72;
            scope 27 {
            }
        }
    }
    scope 2 {
        debug market_index => _13;
        debug perp_delta => _14;
        let _13: u16;
        let _14: i64;
        let _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _36: i64;
        let _38: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _41: i128;
        let _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _50: i128;
        let _52: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _55: i128;
        let _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _60: i128;
        scope 3 {
            debug residual => _33;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _36;
            scope 6 {
            }
        }
        scope 7 {
            debug residual => _38;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _41;
            scope 10 {
            }
        }
        scope 11 {
            debug residual => _47;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _50;
            scope 14 {
            }
        }
        scope 15 {
            debug residual => _52;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _55;
            scope 18 {
            }
        }
        scope 19 {
            debug residual => _57;
            scope 20 {
            }
        }
        scope 21 {
            debug val => _60;
            scope 22 {
            }
        }
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = ((*_2).28: u8);
        _7 = Eq(move _8, const 0_u8);
        switchInt(move _7) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_8);
        StorageLive(_10);
        _10 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _10);
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb49;
    }

    bb2: {
        StorageDead(_8);
        _6 = const ();
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_11);
        _12 = discriminant((((*_1).0: state::margin_calculation::MarginContext).7: std::option::Option<(u16, i64)>));
        switchInt(move _12) -> [1: bb4, otherwise: bb3];
    }

    bb3: {
        _11 = _4;
        goto -> bb35;
    }

    bb4: {
        StorageLive(_13);
        _13 = ((((((*_1).0: state::margin_calculation::MarginContext).7: std::option::Option<(u16, i64)>) as Some).0: (u16, i64)).0: u16);
        StorageLive(_14);
        _14 = ((((((*_1).0: state::margin_calculation::MarginContext).7: std::option::Option<(u16, i64)>) as Some).0: (u16, i64)).1: i64);
        StorageLive(_15);
        StorageLive(_16);
        _16 = _13;
        StorageLive(_17);
        _17 = ((*_2).21: u16);
        _15 = Eq(move _16, move _17);
        switchInt(move _15) -> [0: bb33, otherwise: bb5];
    }

    bb5: {
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = ((*_3).1: i64);
        StorageLive(_31);
        _31 = _14;
        _29 = <i64 as SafeMath>::safe_add(move _30, move _31) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_31);
        StorageDead(_30);
        _28 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _29) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_29);
        _32 = discriminant(_28);
        switchInt(move _32) -> [0: bb8, 1: bb10, otherwise: bb9];
    }

    bb8: {
        StorageLive(_36);
        _36 = ((_28 as Continue).0: i64);
        _27 = _36;
        StorageDead(_36);
        _26 = <i64 as Cast>::cast::<i128>(move _27) -> [return: bb12, unwind continue];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        StorageLive(_33);
        _33 = ((_28 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_35);
        _35 = _33;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _35) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_27);
        StorageDead(_26);
        goto -> bb46;
    }

    bb12: {
        StorageDead(_27);
        _25 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _26) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_26);
        _37 = discriminant(_25);
        switchInt(move _37) -> [0: bb14, 1: bb15, otherwise: bb9];
    }

    bb14: {
        StorageLive(_41);
        _41 = ((_25 as Continue).0: i128);
        _24 = _41;
        StorageDead(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = _5;
        _44 = <i64 as Cast>::cast::<i128>(move _45) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_38);
        _38 = ((_25 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_40);
        _40 = _38;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _40) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_40);
        StorageDead(_38);
        goto -> bb46;
    }

    bb17: {
        StorageDead(_45);
        _43 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _44) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_44);
        _46 = discriminant(_43);
        switchInt(move _46) -> [0: bb19, 1: bb20, otherwise: bb9];
    }

    bb19: {
        StorageLive(_50);
        _50 = ((_43 as Continue).0: i128);
        _42 = _50;
        StorageDead(_50);
        _23 = <i128 as SafeMath>::safe_mul(move _24, move _42) -> [return: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_47);
        _47 = ((_43 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_49);
        _49 = _47;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _49) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_42);
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb44;
    }

    bb22: {
        StorageDead(_42);
        StorageDead(_24);
        _22 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _23) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_23);
        _51 = discriminant(_22);
        switchInt(move _51) -> [0: bb24, 1: bb25, otherwise: bb9];
    }

    bb24: {
        StorageLive(_55);
        _55 = ((_22 as Continue).0: i128);
        _21 = _55;
        StorageDead(_55);
        _20 = <i128 as SafeMath>::safe_div(move _21, const _) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_52);
        _52 = ((_22 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_54);
        _54 = _52;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _54) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_54);
        StorageDead(_52);
        goto -> bb44;
    }

    bb27: {
        StorageDead(_21);
        _19 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _20) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_20);
        _56 = discriminant(_19);
        switchInt(move _56) -> [0: bb29, 1: bb30, otherwise: bb9];
    }

    bb29: {
        StorageLive(_60);
        _60 = ((_19 as Continue).0: i128);
        _18 = _60;
        StorageDead(_60);
        _11 = core::num::<impl i128>::unsigned_abs(move _18) -> [return: bb32, unwind continue];
    }

    bb30: {
        StorageLive(_57);
        _57 = ((_19 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_59);
        _59 = _57;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _59) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_59);
        StorageDead(_57);
        goto -> bb45;
    }

    bb32: {
        StorageDead(_18);
        StorageDead(_43);
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_22);
        StorageDead(_19);
        goto -> bb34;
    }

    bb33: {
        StorageDead(_17);
        StorageDead(_16);
        _11 = _4;
        goto -> bb34;
    }

    bb34: {
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb35;
    }

    bb35: {
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = &(*_2);
        StorageLive(_65);
        StorageLive(_66);
        _66 = _11;
        _65 = move _66 as i128 (IntToInt);
        StorageDead(_66);
        StorageLive(_67);
        _67 = (((*_1).0: state::margin_calculation::MarginContext).5: i64);
        _63 = calculate_perp_fuel_bonus(move _64, move _65, move _67) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_64);
        _62 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _63) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_63);
        _68 = discriminant(_62);
        switchInt(move _68) -> [0: bb38, 1: bb39, otherwise: bb9];
    }

    bb38: {
        StorageLive(_72);
        _72 = ((_62 as Continue).0: u64);
        _61 = _72;
        StorageDead(_72);
        StorageDead(_62);
        StorageLive(_73);
        StorageLive(_74);
        _74 = ((*_1).19: u32);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _77 = _61;
        _76 = <u64 as Cast>::cast::<u32>(move _77) -> [return: bb41, unwind continue];
    }

    bb39: {
        StorageLive(_69);
        _69 = ((_62 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_71);
        _71 = _69;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _71) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_71);
        StorageDead(_69);
        StorageDead(_62);
        StorageDead(_61);
        goto -> bb48;
    }

    bb41: {
        StorageDead(_77);
        _75 = std::result::Result::<u32, error::ErrorCode>::unwrap_or(move _76, const _) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_76);
        _73 = core::num::<impl u32>::saturating_add(move _74, move _75) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_75);
        StorageDead(_74);
        ((*_1).19: u32) = move _73;
        StorageDead(_73);
        StorageLive(_78);
        _78 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _78);
        StorageDead(_78);
        StorageDead(_61);
        StorageDead(_11);
        goto -> bb49;
    }

    bb44: {
        StorageDead(_21);
        StorageDead(_20);
        goto -> bb45;
    }

    bb45: {
        StorageDead(_18);
        StorageDead(_43);
        goto -> bb47;
    }

    bb46: {
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_18);
        goto -> bb47;
    }

    bb47: {
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_22);
        StorageDead(_19);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb48;
    }

    bb48: {
        StorageDead(_11);
        goto -> bb49;
    }

    bb49: {
        return;
    }
}
