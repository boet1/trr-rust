// MIR for `math::orders::calculate_existing_position_fields_for_order_action` after PreCodegen

fn math::orders::calculate_existing_position_fields_for_order_action(_1: u64, _2: Option<(u64, u64)>) -> std::result::Result<(Option<u64>, Option<u64>), error::ErrorCode> {
    debug base_asset_amount_filled => _1;
    debug existing_position_params => _2;
    let mut _0: std::result::Result<(std::option::Option<u64>, std::option::Option<u64>), error::ErrorCode>;
    let mut _3: isize;
    let _6: ();
    let mut _7: bool;
    let mut _8: u64;
    let mut _9: !;
    let mut _10: (std::option::Option<u64>, std::option::Option<u64>);
    let mut _11: std::option::Option<u64>;
    let mut _12: std::option::Option<u64>;
    let mut _13: bool;
    let mut _14: u64;
    let mut _15: u64;
    let mut _16: !;
    let mut _17: (std::option::Option<u64>, std::option::Option<u64>);
    let mut _18: std::option::Option<u64>;
    let mut _19: u64;
    let mut _20: std::option::Option<u64>;
    let mut _21: u64;
    let mut _22: !;
    let mut _23: (std::option::Option<u64>, std::option::Option<u64>);
    let mut _24: std::option::Option<u64>;
    let mut _25: u64;
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _27: std::result::Result<u64, error::ErrorCode>;
    let mut _28: u128;
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _30: std::result::Result<u128, error::ErrorCode>;
    let mut _31: u128;
    let mut _32: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _33: std::result::Result<u128, error::ErrorCode>;
    let mut _34: u128;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _36: std::result::Result<u128, error::ErrorCode>;
    let mut _37: u64;
    let mut _38: isize;
    let mut _40: !;
    let mut _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _43: u128;
    let mut _44: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _45: std::result::Result<u128, error::ErrorCode>;
    let mut _46: u64;
    let mut _47: isize;
    let mut _49: !;
    let mut _50: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _52: isize;
    let mut _54: !;
    let mut _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _57: u128;
    let mut _58: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _59: std::result::Result<u128, error::ErrorCode>;
    let mut _60: u64;
    let mut _61: isize;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _66: isize;
    let mut _68: !;
    let mut _69: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _71: isize;
    let mut _73: !;
    let mut _74: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _76: std::option::Option<u64>;
    let mut _77: (std::option::Option<u64>, std::option::Option<u64>);
    let mut _78: std::option::Option<u64>;
    let mut _79: std::option::Option<u64>;
    scope 1 {
        debug quote_entry_amount => _4;
        debug base_asset_amount => _5;
        let _4: u64;
        let _5: u64;
        let _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _42: u128;
        let _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _51: u128;
        let _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _56: u128;
        let _62: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _65: u128;
        let _67: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _70: u128;
        let _72: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _75: u64;
        scope 2 {
            debug residual => _39;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _42;
            scope 5 {
            }
        }
        scope 6 {
            debug residual => _48;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _51;
            scope 9 {
            }
        }
        scope 10 {
            debug residual => _53;
            scope 11 {
            }
        }
        scope 12 {
            debug val => _56;
            scope 13 {
            }
        }
        scope 14 {
            debug residual => _62;
            scope 15 {
            }
        }
        scope 16 {
            debug val => _65;
            scope 17 {
            }
        }
        scope 18 {
            debug residual => _67;
            scope 19 {
            }
        }
        scope 20 {
            debug val => _70;
            scope 21 {
            }
        }
        scope 22 {
            debug residual => _72;
            scope 23 {
            }
        }
        scope 24 {
            debug val => _75;
            scope 25 {
            }
        }
    }

    bb0: {
        _3 = discriminant(_2);
        switchInt(move _3) -> [1: bb1, otherwise: bb37];
    }

    bb1: {
        StorageLive(_4);
        _4 = (((_2 as Some).0: (u64, u64)).0: u64);
        StorageLive(_5);
        _5 = (((_2 as Some).0: (u64, u64)).1: u64);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _5;
        _7 = Eq(move _8, const 0_u64);
        switchInt(move _7) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_8);
        StorageLive(_10);
        StorageLive(_11);
        _11 = Option::<u64>::None;
        StorageLive(_12);
        _12 = Option::<u64>::None;
        _10 = (move _11, move _12);
        StorageDead(_12);
        StorageDead(_11);
        _0 = std::result::Result::<(Option<u64>, Option<u64>), error::ErrorCode>::Ok(move _10);
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb45;
    }

    bb3: {
        StorageDead(_8);
        _6 = const ();
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_13);
        StorageLive(_14);
        _14 = _1;
        StorageLive(_15);
        _15 = _5;
        _13 = Gt(move _14, move _15);
        switchInt(move _13) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = _4;
        _18 = Option::<u64>::Some(move _19);
        StorageDead(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = _5;
        _20 = Option::<u64>::Some(move _21);
        StorageDead(_21);
        _17 = (move _18, move _20);
        StorageDead(_20);
        StorageDead(_18);
        _0 = std::result::Result::<(Option<u64>, Option<u64>), error::ErrorCode>::Ok(move _17);
        StorageDead(_17);
        goto -> bb44;
    }

    bb5: {
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = _4;
        _36 = <u64 as Cast>::cast::<u128>(move _37) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_37);
        _35 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _36) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_36);
        _38 = discriminant(_35);
        switchInt(move _38) -> [0: bb8, 1: bb10, otherwise: bb9];
    }

    bb8: {
        StorageLive(_42);
        _42 = ((_35 as Continue).0: u128);
        _34 = _42;
        StorageDead(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = _1;
        _45 = <u64 as Cast>::cast::<u128>(move _46) -> [return: bb12, unwind continue];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        StorageLive(_39);
        _39 = ((_35 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_41);
        _41 = _39;
        _0 = <std::result::Result<(Option<u64>, Option<u64>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _41) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_41);
        StorageDead(_39);
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb43;
    }

    bb12: {
        StorageDead(_46);
        _44 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _45) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_45);
        _47 = discriminant(_44);
        switchInt(move _47) -> [0: bb14, 1: bb15, otherwise: bb9];
    }

    bb14: {
        StorageLive(_51);
        _51 = ((_44 as Continue).0: u128);
        _43 = _51;
        StorageDead(_51);
        _33 = <u128 as SafeMath>::safe_mul(move _34, move _43) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_48);
        _48 = ((_44 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_50);
        _50 = _48;
        _0 = <std::result::Result<(Option<u64>, Option<u64>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _50) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_50);
        StorageDead(_48);
        StorageDead(_43);
        StorageDead(_34);
        StorageDead(_33);
        goto -> bb41;
    }

    bb17: {
        StorageDead(_43);
        StorageDead(_34);
        _32 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _33) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_33);
        _52 = discriminant(_32);
        switchInt(move _52) -> [0: bb19, 1: bb20, otherwise: bb9];
    }

    bb19: {
        StorageLive(_56);
        _56 = ((_32 as Continue).0: u128);
        _31 = _56;
        StorageDead(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = _5;
        _59 = <u64 as Cast>::cast::<u128>(move _60) -> [return: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_53);
        _53 = ((_32 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_55);
        _55 = _53;
        _0 = <std::result::Result<(Option<u64>, Option<u64>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _55) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_55);
        StorageDead(_53);
        goto -> bb41;
    }

    bb22: {
        StorageDead(_60);
        _58 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _59) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_59);
        _61 = discriminant(_58);
        switchInt(move _61) -> [0: bb24, 1: bb25, otherwise: bb9];
    }

    bb24: {
        StorageLive(_65);
        _65 = ((_58 as Continue).0: u128);
        _57 = _65;
        StorageDead(_65);
        _30 = <u128 as SafeMath>::safe_div(move _31, move _57) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_62);
        _62 = ((_58 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_64);
        _64 = _62;
        _0 = <std::result::Result<(Option<u64>, Option<u64>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _64) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_64);
        StorageDead(_62);
        StorageDead(_57);
        StorageDead(_31);
        StorageDead(_30);
        goto -> bb38;
    }

    bb27: {
        StorageDead(_57);
        StorageDead(_31);
        _29 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _30) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_30);
        _66 = discriminant(_29);
        switchInt(move _66) -> [0: bb29, 1: bb30, otherwise: bb9];
    }

    bb29: {
        StorageLive(_70);
        _70 = ((_29 as Continue).0: u128);
        _28 = _70;
        StorageDead(_70);
        _27 = <u128 as Cast>::cast::<u64>(move _28) -> [return: bb32, unwind continue];
    }

    bb30: {
        StorageLive(_67);
        _67 = ((_29 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_69);
        _69 = _67;
        _0 = <std::result::Result<(Option<u64>, Option<u64>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _69) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_69);
        StorageDead(_67);
        goto -> bb38;
    }

    bb32: {
        StorageDead(_28);
        _26 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _27) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_27);
        _71 = discriminant(_26);
        switchInt(move _71) -> [0: bb34, 1: bb35, otherwise: bb9];
    }

    bb34: {
        StorageLive(_75);
        _75 = ((_26 as Continue).0: u64);
        _25 = _75;
        StorageDead(_75);
        _24 = Option::<u64>::Some(move _25);
        StorageDead(_25);
        StorageLive(_76);
        _76 = Option::<u64>::None;
        _23 = (move _24, move _76);
        StorageDead(_76);
        StorageDead(_24);
        _0 = std::result::Result::<(Option<u64>, Option<u64>), error::ErrorCode>::Ok(move _23);
        StorageDead(_23);
        goto -> bb40;
    }

    bb35: {
        StorageLive(_72);
        _72 = ((_26 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_74);
        _74 = _72;
        _0 = <std::result::Result<(Option<u64>, Option<u64>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _74) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_74);
        StorageDead(_72);
        goto -> bb39;
    }

    bb37: {
        StorageLive(_77);
        StorageLive(_78);
        _78 = Option::<u64>::None;
        StorageLive(_79);
        _79 = Option::<u64>::None;
        _77 = (move _78, move _79);
        StorageDead(_79);
        StorageDead(_78);
        _0 = std::result::Result::<(Option<u64>, Option<u64>), error::ErrorCode>::Ok(move _77);
        StorageDead(_77);
        goto -> bb46;
    }

    bb38: {
        StorageDead(_28);
        StorageDead(_27);
        goto -> bb39;
    }

    bb39: {
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb40;
    }

    bb40: {
        StorageDead(_58);
        goto -> bb42;
    }

    bb41: {
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb42;
    }

    bb42: {
        StorageDead(_44);
        goto -> bb43;
    }

    bb43: {
        StorageDead(_35);
        StorageDead(_32);
        StorageDead(_29);
        StorageDead(_26);
        goto -> bb44;
    }

    bb44: {
        StorageDead(_13);
        goto -> bb45;
    }

    bb45: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb46;
    }

    bb46: {
        return;
    }
}
