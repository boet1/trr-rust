digraph Mir_0_1809 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn calculate_oracle_reserve_price_spread(_1: &amp;ReErased state::perp_market::AMM, _2: &amp;ReErased state::oracle::MMOraclePriceData, _3: std::option::Option&lt;u64&gt;) -&gt; std::result::Result&lt;(i64, i64), error::ErrorCode&gt;<br align="left"/>let _4: i64;<br align="left"/>let mut _5: isize;<br align="left"/>let _6: u64;<br align="left"/>let mut _7: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _8: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _9: u64;<br align="left"/>let mut _10: isize;<br align="left"/>let _11: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _12: !;<br align="left"/>let mut _13: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _14: i64;<br align="left"/>let mut _15: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _16: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _17: u64;<br align="left"/>let mut _18: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _19: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _20: &amp;ReErased state::perp_market::AMM;<br align="left"/>let mut _21: isize;<br align="left"/>let _22: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _23: !;<br align="left"/>let mut _24: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _25: u64;<br align="left"/>let mut _26: isize;<br align="left"/>let _27: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _28: !;<br align="left"/>let mut _29: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _30: i64;<br align="left"/>let _31: i64;<br align="left"/>let mut _32: &amp;ReErased state::oracle::MMOraclePriceData;<br align="left"/>let _33: i64;<br align="left"/>let mut _34: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _35: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _36: i64;<br align="left"/>let mut _37: i64;<br align="left"/>let mut _38: isize;<br align="left"/>let _39: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _40: !;<br align="left"/>let mut _41: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _42: i64;<br align="left"/>let mut _43: (i64, i64);<br align="left"/>let mut _44: i64;<br align="left"/>let mut _45: i64;<br align="left"/>debug amm =&gt; _1;<br align="left"/>debug mm_oracle_price_data =&gt; _2;<br align="left"/>debug precomputed_reserve_price =&gt; _3;<br align="left"/>debug reserve_price =&gt; _4;<br align="left"/>debug reserve_price =&gt; _6;<br align="left"/>debug residual =&gt; _11;<br align="left"/>debug val =&gt; _14;<br align="left"/>debug residual =&gt; _22;<br align="left"/>debug val =&gt; _25;<br align="left"/>debug residual =&gt; _27;<br align="left"/>debug val =&gt; _30;<br align="left"/>debug oracle_price =&gt; _31;<br align="left"/>debug price_spread =&gt; _33;<br align="left"/>debug residual =&gt; _39;<br align="left"/>debug val =&gt; _42;<br align="left"/>>;
    bb0__0_1809 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>_5 = discriminant(_3)<br/></td></tr><tr><td align="left">switchInt(move _5)</td></tr></table>>];
    bb1__0_1809 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>_20 = &amp;(*_1)<br/></td></tr><tr><td align="left">_19 = AMM::reserve_price(move _20)</td></tr></table>>];
    bb2__0_1809 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb3__0_1809 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_6)<br/>_6 = ((_3 as Some).0: u64)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = _6<br/></td></tr><tr><td align="left">_8 = &lt;u64 as Cast&gt;::cast::&lt;i64&gt;(move _9)</td></tr></table>>];
    bb4__0_1809 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/></td></tr><tr><td align="left">_7 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _8)</td></tr></table>>];
    bb5__0_1809 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>_10 = discriminant(_7)<br/></td></tr><tr><td align="left">switchInt(move _10)</td></tr></table>>];
    bb6__0_1809 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_14)<br/>_14 = ((_7 as Continue).0: i64)<br/>_4 = _14<br/>StorageDead(_14)<br/>StorageDead(_7)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_1809 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageLive(_11)<br/>_11 = ((_7 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_13)<br/>_13 = _11<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(i64, i64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _13)</td></tr></table>>];
    bb8__0_1809 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>StorageDead(_11)<br/>StorageDead(_7)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_1809 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/></td></tr><tr><td align="left">_18 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _19)</td></tr></table>>];
    bb10__0_1809 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>_21 = discriminant(_18)<br/></td></tr><tr><td align="left">switchInt(move _21)</td></tr></table>>];
    bb11__0_1809 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_25)<br/>_25 = ((_18 as Continue).0: u64)<br/>_17 = _25<br/>StorageDead(_25)<br/></td></tr><tr><td align="left">_16 = &lt;u64 as Cast&gt;::cast::&lt;i64&gt;(move _17)</td></tr></table>>];
    bb12__0_1809 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageLive(_22)<br/>_22 = ((_18 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_24)<br/>_24 = _22<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(i64, i64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _24)</td></tr></table>>];
    bb13__0_1809 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/>StorageDead(_22)<br/>StorageDead(_17)<br/>StorageDead(_16)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_1809 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/></td></tr><tr><td align="left">_15 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _16)</td></tr></table>>];
    bb15__0_1809 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>_26 = discriminant(_15)<br/></td></tr><tr><td align="left">switchInt(move _26)</td></tr></table>>];
    bb16__0_1809 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageLive(_30)<br/>_30 = ((_15 as Continue).0: i64)<br/>_4 = _30<br/>StorageDead(_30)<br/>StorageDead(_18)<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_1809 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageLive(_27)<br/>_27 = ((_15 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_29)<br/>_29 = _27<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(i64, i64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _29)</td></tr></table>>];
    bb18__0_1809 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>StorageDead(_27)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb19__0_1809 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageLive(_31)<br/>StorageLive(_32)<br/>_32 = &amp;(*_2)<br/></td></tr><tr><td align="left">_31 = MMOraclePriceData::get_price(move _32)</td></tr></table>>];
    bb20__0_1809 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_32)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>StorageLive(_36)<br/>_36 = _4<br/>StorageLive(_37)<br/>_37 = _31<br/></td></tr><tr><td align="left">_35 = &lt;i64 as SafeMath&gt;::safe_sub(move _36, move _37)</td></tr></table>>];
    bb21__0_1809 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/>StorageDead(_36)<br/></td></tr><tr><td align="left">_34 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _35)</td></tr></table>>];
    bb22__0_1809 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_35)<br/>_38 = discriminant(_34)<br/></td></tr><tr><td align="left">switchInt(move _38)</td></tr></table>>];
    bb23__0_1809 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageLive(_42)<br/>_42 = ((_34 as Continue).0: i64)<br/>_33 = _42<br/>StorageDead(_42)<br/>StorageDead(_34)<br/>StorageLive(_43)<br/>StorageLive(_44)<br/>_44 = _31<br/>StorageLive(_45)<br/>_45 = _33<br/>_43 = (move _44, move _45)<br/>StorageDead(_45)<br/>StorageDead(_44)<br/>_0 = std::result::Result::&lt;(i64, i64), error::ErrorCode&gt;::Ok(move _43)<br/>StorageDead(_43)<br/>StorageDead(_33)<br/>StorageDead(_31)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb24__0_1809 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageLive(_39)<br/>_39 = ((_34 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_41)<br/>_41 = _39<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(i64, i64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _41)</td></tr></table>>];
    bb25__0_1809 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_41)<br/>StorageDead(_39)<br/>StorageDead(_34)<br/>StorageDead(_33)<br/>StorageDead(_31)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb26__0_1809 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb27__0_1809 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb28__0_1809 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_1809 -> bb1__0_1809 [label="0"];
    bb0__0_1809 -> bb3__0_1809 [label="1"];
    bb0__0_1809 -> bb2__0_1809 [label="otherwise"];
    bb1__0_1809 -> bb9__0_1809 [label="return"];
    bb3__0_1809 -> bb4__0_1809 [label="return"];
    bb4__0_1809 -> bb5__0_1809 [label="return"];
    bb5__0_1809 -> bb6__0_1809 [label="0"];
    bb5__0_1809 -> bb7__0_1809 [label="1"];
    bb5__0_1809 -> bb2__0_1809 [label="otherwise"];
    bb6__0_1809 -> bb19__0_1809 [label=""];
    bb7__0_1809 -> bb8__0_1809 [label="return"];
    bb8__0_1809 -> bb27__0_1809 [label=""];
    bb9__0_1809 -> bb10__0_1809 [label="return"];
    bb10__0_1809 -> bb11__0_1809 [label="0"];
    bb10__0_1809 -> bb12__0_1809 [label="1"];
    bb10__0_1809 -> bb2__0_1809 [label="otherwise"];
    bb11__0_1809 -> bb14__0_1809 [label="return"];
    bb12__0_1809 -> bb13__0_1809 [label="return"];
    bb13__0_1809 -> bb26__0_1809 [label=""];
    bb14__0_1809 -> bb15__0_1809 [label="return"];
    bb15__0_1809 -> bb16__0_1809 [label="0"];
    bb15__0_1809 -> bb17__0_1809 [label="1"];
    bb15__0_1809 -> bb2__0_1809 [label="otherwise"];
    bb16__0_1809 -> bb19__0_1809 [label=""];
    bb17__0_1809 -> bb18__0_1809 [label="return"];
    bb18__0_1809 -> bb26__0_1809 [label=""];
    bb19__0_1809 -> bb20__0_1809 [label="return"];
    bb20__0_1809 -> bb21__0_1809 [label="return"];
    bb21__0_1809 -> bb22__0_1809 [label="return"];
    bb22__0_1809 -> bb23__0_1809 [label="0"];
    bb22__0_1809 -> bb24__0_1809 [label="1"];
    bb22__0_1809 -> bb2__0_1809 [label="otherwise"];
    bb23__0_1809 -> bb28__0_1809 [label=""];
    bb24__0_1809 -> bb25__0_1809 [label="return"];
    bb25__0_1809 -> bb27__0_1809 [label=""];
    bb26__0_1809 -> bb27__0_1809 [label=""];
    bb27__0_1809 -> bb28__0_1809 [label=""];
}
