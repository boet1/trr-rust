// MIR for `__global::initialize_spot_market` before PreCodegen

fn __global::initialize_spot_market(_1: &anchor_lang::prelude::Pubkey, _2: &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8]) -> std::result::Result<(), anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: ();
    let mut _5: &str;
    let _6: &str;
    let _7: instruction::InitializeSpotMarket;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>, instruction::InitializeSpotMarket>;
    let mut _9: std::result::Result<instruction::InitializeSpotMarket, anchor_lang::error::ErrorCode>;
    let mut _10: std::result::Result<instruction::InitializeSpotMarket, std::io::Error>;
    let mut _11: &mut &[u8];
    let mut _12: &mut &[u8];
    let mut _13: &[u8];
    let _14: &[u8];
    let mut _15: &[u8];
    let mut _16: std::ops::RangeFull;
    let mut _17: {closure@programs/drift/src/lib.rs:69:1: 69:11};
    let mut _18: isize;
    let _19: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
    let mut _20: !;
    let mut _21: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
    let _22: instruction::InitializeSpotMarket;
    let mut _46: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, instructions::admin::InitializeSpotMarket<'_>>;
    let mut _47: std::result::Result<instructions::admin::InitializeSpotMarket<'_>, anchor_lang::error::Error>;
    let mut _48: &anchor_lang::prelude::Pubkey;
    let mut _49: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _50: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _51: &[u8];
    let mut _52: &mut instructions::admin::InitializeSpotMarketBumps;
    let mut _53: &mut instructions::admin::InitializeSpotMarketBumps;
    let mut _54: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _55: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _56: isize;
    let mut _58: !;
    let mut _59: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _62: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _63: std::result::Result<(), anchor_lang::error::Error>;
    let mut _64: anchor_lang::context::Context<'_, '_, '_, '_, instructions::admin::InitializeSpotMarket<'_>>;
    let mut _65: &anchor_lang::prelude::Pubkey;
    let mut _66: &mut instructions::admin::InitializeSpotMarket<'_>;
    let mut _67: &mut instructions::admin::InitializeSpotMarket<'_>;
    let mut _68: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _69: instructions::admin::InitializeSpotMarketBumps;
    let mut _70: u32;
    let mut _71: u32;
    let mut _72: u32;
    let mut _73: state::oracle::OracleSource;
    let mut _74: u32;
    let mut _75: u32;
    let mut _76: u32;
    let mut _77: u32;
    let mut _78: u32;
    let mut _79: u32;
    let mut _80: u32;
    let mut _81: bool;
    let mut _82: state::spot_market::AssetTier;
    let mut _83: u64;
    let mut _84: u64;
    let mut _85: u64;
    let mut _86: u64;
    let mut _87: u32;
    let mut _88: [u8; 32];
    let mut _89: isize;
    let mut _91: !;
    let mut _92: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _94: &instructions::admin::InitializeSpotMarket<'_>;
    let mut _95: &anchor_lang::prelude::Pubkey;
    let mut _96: isize;
    let mut _97: isize;
    let mut _98: isize;
    let mut _99: isize;
    let mut _100: isize;
    let mut _101: isize;
    let mut _102: isize;
    let mut _103: isize;
    let mut _104: isize;
    let mut _105: isize;
    scope 1 {
        debug ix => _7;
        let _23: u32;
        let _24: u32;
        let _25: u32;
        let _26: state::oracle::OracleSource;
        let _27: u32;
        let _28: u32;
        let _29: u32;
        let _30: u32;
        let _31: u32;
        let _32: u32;
        let _33: u32;
        let _34: bool;
        let _35: state::spot_market::AssetTier;
        let _36: u64;
        let _37: u64;
        let _38: u64;
        let _39: u64;
        let _40: u32;
        let _41: [u8; 32];
        scope 6 {
            debug optimal_utilization => _23;
            debug optimal_borrow_rate => _24;
            debug max_borrow_rate => _25;
            debug oracle_source => _26;
            debug initial_asset_weight => _27;
            debug maintenance_asset_weight => _28;
            debug initial_liability_weight => _29;
            debug maintenance_liability_weight => _30;
            debug imf_factor => _31;
            debug liquidator_fee => _32;
            debug if_liquidation_fee => _33;
            debug active_status => _34;
            debug asset_tier => _35;
            debug scale_initial_asset_weight_start => _36;
            debug withdraw_guard_threshold => _37;
            debug order_tick_size => _38;
            debug order_step_size => _39;
            debug if_total_factor => _40;
            debug name => _41;
            let mut _42: instructions::admin::InitializeSpotMarketBumps;
            scope 7 {
                debug __bumps => _42;
                let mut _43: std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
                scope 8 {
                    debug __reallocs => _43;
                    let mut _44: &[anchor_lang::prelude::AccountInfo<'_>];
                    scope 9 {
                        debug __remaining_accounts => _44;
                        let mut _45: instructions::admin::InitializeSpotMarket<'_>;
                        let _57: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _60: instructions::admin::InitializeSpotMarket<'_>;
                        scope 10 {
                            debug __accounts => _45;
                            let _61: ();
                            let _90: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _93: ();
                            scope 15 {
                                debug result => _61;
                            }
                            scope 16 {
                                debug residual => _90;
                                scope 17 {
                                }
                            }
                            scope 18 {
                                debug val => _93;
                                scope 19 {
                                }
                            }
                        }
                        scope 11 {
                            debug residual => _57;
                            scope 12 {
                            }
                        }
                        scope 13 {
                            debug val => _60;
                            scope 14 {
                            }
                        }
                    }
                }
            }
        }
    }
    scope 2 {
        debug residual => _19;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _22;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = const "Instruction: InitializeSpotMarket";
        _5 = &(*_6);
        _4 = solana_program::log::sol_log(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        StorageDead(_6);
        StorageDead(_4);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &(*_3);
        StorageLive(_16);
        _16 = RangeFull;
        _14 = <[u8] as Index<RangeFull>>::index(move _15, move _16) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_16);
        StorageDead(_15);
        _13 = &(*_14);
        _12 = &mut _13;
        _11 = &mut (*_12);
        _10 = <instruction::InitializeSpotMarket as BorshDeserialize>::deserialize(move _11) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_11);
        StorageLive(_17);
        _17 = {closure@programs/drift/src/lib.rs:69:1: 69:11};
        _9 = std::result::Result::<instruction::InitializeSpotMarket, std::io::Error>::map_err::<anchor_lang::error::ErrorCode, {closure@programs/drift/src/lib.rs:69:1: 69:11}>(move _10, move _17) -> [return: bb4, unwind: bb32];
    }

    bb4: {
        StorageDead(_17);
        StorageDead(_10);
        _8 = <std::result::Result<instruction::InitializeSpotMarket, anchor_lang::error::ErrorCode> as Try>::branch(move _9) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_9);
        _18 = discriminant(_8);
        switchInt(move _18) -> [0: bb6, 1: bb8, otherwise: bb7];
    }

    bb6: {
        StorageLive(_22);
        _22 = move ((_8 as Continue).0: instruction::InitializeSpotMarket);
        _7 = move _22;
        StorageDead(_22);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_8);
        StorageLive(_23);
        _23 = (_7.0: u32);
        StorageLive(_24);
        _24 = (_7.1: u32);
        StorageLive(_25);
        _25 = (_7.2: u32);
        StorageLive(_26);
        _26 = (_7.3: state::oracle::OracleSource);
        StorageLive(_27);
        _27 = (_7.4: u32);
        StorageLive(_28);
        _28 = (_7.5: u32);
        StorageLive(_29);
        _29 = (_7.6: u32);
        StorageLive(_30);
        _30 = (_7.7: u32);
        StorageLive(_31);
        _31 = (_7.8: u32);
        StorageLive(_32);
        _32 = (_7.9: u32);
        StorageLive(_33);
        _33 = (_7.10: u32);
        StorageLive(_34);
        _34 = (_7.11: bool);
        StorageLive(_35);
        _35 = (_7.12: state::spot_market::AssetTier);
        StorageLive(_36);
        _36 = (_7.13: u64);
        StorageLive(_37);
        _37 = (_7.14: u64);
        StorageLive(_38);
        _38 = (_7.15: u64);
        StorageLive(_39);
        _39 = (_7.16: u64);
        StorageLive(_40);
        _40 = (_7.17: u32);
        StorageLive(_41);
        _41 = (_7.18: [u8; 32]);
        StorageLive(_42);
        _42 = <InitializeSpotMarketBumps as Default>::default() -> [return: bb10, unwind continue];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        StorageLive(_19);
        _19 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>);
        StorageLive(_21);
        _21 = _19;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::ErrorCode>>>::from_residual(move _21) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_8);
        goto -> bb28;
    }

    bb10: {
        StorageLive(_43);
        _43 = BTreeSet::<anchor_lang::prelude::Pubkey>::new() -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageLive(_44);
        _44 = &(*_2);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = &(*_1);
        StorageLive(_49);
        StorageLive(_50);
        _50 = &mut _44;
        _49 = &mut (*_50);
        StorageLive(_51);
        _51 = &(*_3);
        StorageLive(_52);
        StorageLive(_53);
        _53 = &mut _42;
        _52 = &mut (*_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &mut _43;
        _54 = &mut (*_55);
        _47 = <admin::InitializeSpotMarket<'_> as anchor_lang::Accounts<'_, InitializeSpotMarketBumps>>::try_accounts(move _48, move _49, move _51, move _52, move _54) -> [return: bb12, unwind: bb31];
    }

    bb12: {
        StorageDead(_54);
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_49);
        StorageDead(_48);
        _46 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as Try>::branch(move _47) -> [return: bb13, unwind: bb31];
    }

    bb13: {
        StorageDead(_47);
        _56 = discriminant(_46);
        switchInt(move _56) -> [0: bb14, 1: bb15, otherwise: bb7];
    }

    bb14: {
        StorageLive(_60);
        _60 = move ((_46 as Continue).0: instructions::admin::InitializeSpotMarket<'_>);
        _45 = move _60;
        StorageDead(_60);
        _96 = discriminant(_46);
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_50);
        StorageDead(_46);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = &(*_1);
        StorageLive(_66);
        StorageLive(_67);
        _67 = &mut _45;
        _66 = &mut (*_67);
        StorageLive(_68);
        _68 = &(*_44);
        StorageLive(_69);
        _69 = move _42;
        _64 = anchor_lang::context::Context::<'_, '_, '_, '_, admin::InitializeSpotMarket<'_>>::new(move _65, move _66, move _68, move _69) -> [return: bb17, unwind: bb30];
    }

    bb15: {
        StorageLive(_57);
        _57 = move ((_46 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_59);
        _59 = move _57;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _59) -> [return: bb16, unwind: bb34];
    }

    bb16: {
        StorageDead(_59);
        StorageDead(_57);
        _102 = discriminant(_46);
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_50);
        StorageDead(_46);
        goto -> bb26;
    }

    bb17: {
        StorageDead(_69);
        StorageDead(_68);
        StorageDead(_66);
        StorageDead(_65);
        StorageLive(_70);
        _70 = _23;
        StorageLive(_71);
        _71 = _24;
        StorageLive(_72);
        _72 = _25;
        StorageLive(_73);
        _73 = _26;
        StorageLive(_74);
        _74 = _27;
        StorageLive(_75);
        _75 = _28;
        StorageLive(_76);
        _76 = _29;
        StorageLive(_77);
        _77 = _30;
        StorageLive(_78);
        _78 = _31;
        StorageLive(_79);
        _79 = _32;
        StorageLive(_80);
        _80 = _33;
        StorageLive(_81);
        _81 = _34;
        StorageLive(_82);
        _82 = _35;
        StorageLive(_83);
        _83 = _36;
        StorageLive(_84);
        _84 = _37;
        StorageLive(_85);
        _85 = _38;
        StorageLive(_86);
        _86 = _39;
        StorageLive(_87);
        _87 = _40;
        StorageLive(_88);
        _88 = _41;
        _63 = drift::initialize_spot_market(move _64, move _70, move _71, move _72, move _73, move _74, move _75, move _76, move _77, move _78, move _79, move _80, move _81, move _82, move _83, move _84, move _85, move _86, move _87, move _88) -> [return: bb18, unwind: bb30];
    }

    bb18: {
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_84);
        StorageDead(_83);
        StorageDead(_82);
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_79);
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_75);
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_64);
        _62 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _63) -> [return: bb19, unwind: bb30];
    }

    bb19: {
        StorageDead(_63);
        _89 = discriminant(_62);
        switchInt(move _89) -> [0: bb20, 1: bb21, otherwise: bb7];
    }

    bb20: {
        StorageLive(_93);
        _93 = ((_62 as Continue).0: ());
        _61 = _93;
        StorageDead(_93);
        _98 = discriminant(_62);
        StorageDead(_67);
        StorageDead(_62);
        StorageLive(_94);
        _94 = &_45;
        StorageLive(_95);
        _95 = &(*_1);
        _0 = <admin::InitializeSpotMarket<'_> as anchor_lang::AccountsExit<'_>>::exit(move _94, move _95) -> [return: bb23, unwind: bb30];
    }

    bb21: {
        StorageLive(_90);
        _90 = move ((_62 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_92);
        _92 = move _90;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _92) -> [return: bb22, unwind: bb33];
    }

    bb22: {
        StorageDead(_92);
        StorageDead(_90);
        _100 = discriminant(_62);
        StorageDead(_67);
        StorageDead(_62);
        StorageDead(_61);
        drop(_45) -> [return: bb26, unwind: bb31];
    }

    bb23: {
        StorageDead(_95);
        StorageDead(_94);
        StorageDead(_61);
        drop(_45) -> [return: bb24, unwind: bb31];
    }

    bb24: {
        StorageDead(_45);
        StorageDead(_44);
        drop(_43) -> [return: bb25, unwind: bb32];
    }

    bb25: {
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_7);
        goto -> bb29;
    }

    bb26: {
        StorageDead(_45);
        StorageDead(_44);
        drop(_43) -> [return: bb27, unwind: bb32];
    }

    bb27: {
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb28;
    }

    bb28: {
        StorageDead(_7);
        goto -> bb29;
    }

    bb29: {
        return;
    }

    bb30 (cleanup): {
        drop(_45) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_43) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        resume;
    }

    bb33 (cleanup): {
        _104 = discriminant(_62);
        goto -> bb30;
    }

    bb34 (cleanup): {
        _105 = discriminant(_46);
        goto -> bb31;
    }
}
