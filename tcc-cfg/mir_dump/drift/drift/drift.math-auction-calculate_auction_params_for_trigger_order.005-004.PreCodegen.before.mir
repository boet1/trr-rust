// MIR for `calculate_auction_params_for_trigger_order` before PreCodegen

fn calculate_auction_params_for_trigger_order(_1: &Order, _2: &OraclePriceData, _3: u8, _4: Option<&PerpMarket>) -> std::result::Result<(u8, i64, i64), error::ErrorCode> {
    debug order => _1;
    debug oracle_price_data => _2;
    debug min_auction_duration => _3;
    debug perp_market => _4;
    let mut _0: std::result::Result<(u8, i64, i64), error::ErrorCode>;
    let _5: u8;
    let mut _6: isize;
    let mut _9: bool;
    let mut _10: &state::perp_market::ContractTier;
    let mut _11: &state::perp_market::ContractTier;
    let _12: &state::perp_market::ContractTier;
    let _13: state::perp_market::ContractTier;
    let mut _17: (i64, i64, u8);
    let mut _18: bool;
    let mut _19: isize;
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (i64, i64, u8)>;
    let mut _21: std::result::Result<(i64, i64, u8), error::ErrorCode>;
    let mut _22: &state::perp_market::PerpMarket;
    let mut _23: controller::position::PositionDirection;
    let mut _24: i64;
    let mut _25: std::option::Option<i32>;
    let mut _26: i64;
    let mut _27: isize;
    let mut _29: !;
    let mut _30: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _32: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (i64, i64, u8)>;
    let mut _33: std::result::Result<(i64, i64, u8), error::ErrorCode>;
    let mut _34: &state::perp_market::PerpMarket;
    let mut _35: controller::position::PositionDirection;
    let mut _36: i64;
    let mut _37: u64;
    let mut _38: i64;
    let mut _39: isize;
    let mut _41: !;
    let mut _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _45: u8;
    let mut _46: u8;
    let mut _47: (u8, i64, i64);
    let mut _48: u8;
    let mut _49: i64;
    let mut _50: i64;
    let mut _53: (i64, i64);
    let mut _54: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (i64, i64)>;
    let mut _55: std::result::Result<(i64, i64), error::ErrorCode>;
    let mut _56: &state::oracle::OraclePriceData;
    let mut _57: controller::position::PositionDirection;
    let mut _58: u64;
    let mut _59: isize;
    let mut _61: !;
    let mut _62: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _64: (u8, i64, i64);
    let mut _65: u8;
    let mut _66: i64;
    let mut _67: i64;
    scope 1 {
        debug auction_duration => _5;
        let _51: i64;
        let _52: i64;
        let _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _63: (i64, i64);
        scope 2 {
            debug perp_market => _7;
            let _7: &state::perp_market::PerpMarket;
            let _8: i64;
            let mut _68: &state::perp_market::ContractTier;
            scope 3 {
                debug auction_start_buffer => _8;
                let _14: i64;
                let _15: i64;
                let _16: u8;
                let _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _31: (i64, i64, u8);
                let _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _43: (i64, i64, u8);
                scope 4 {
                    debug auction_start_price => _14;
                    debug auction_end_price => _15;
                    debug derived_auction_duration => _16;
                    let _44: u8;
                    scope 13 {
                        debug auction_duration => _44;
                    }
                }
                scope 5 {
                    debug residual => _28;
                    scope 6 {
                    }
                }
                scope 7 {
                    debug val => _31;
                    scope 8 {
                    }
                }
                scope 9 {
                    debug residual => _40;
                    scope 10 {
                    }
                }
                scope 11 {
                    debug val => _43;
                    scope 12 {
                    }
                }
            }
        }
        scope 14 {
            debug auction_start_price => _51;
            debug auction_end_price => _52;
        }
        scope 15 {
            debug residual => _60;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _63;
            scope 18 {
            }
        }
    }

    bb0: {
        StorageLive(_5);
        _5 = _3;
        _6 = discriminant(_4);
        switchInt(move _6) -> [1: bb1, otherwise: bb24];
    }

    bb1: {
        StorageLive(_7);
        _7 = ((_4 as Some).0: &state::perp_market::PerpMarket);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &((*_7).24: state::perp_market::ContractTier);
        StorageLive(_11);
        StorageLive(_12);
        _68 = const _;
        _12 = &(*_68);
        _11 = &(*_12);
        _9 = state::perp_market::ContractTier::is_as_safe_as_contract(move _10, move _11) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _9) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        _8 = const -500_i64;
        goto -> bb5;
    }

    bb4: {
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        _8 = const -3500_i64;
        goto -> bb5;
    }

    bb5: {
        StorageDead(_9);
        StorageLive(_17);
        StorageLive(_18);
        _19 = discriminant(((*_1).13: state::user::OrderType));
        switchInt(move _19) -> [2: bb7, otherwise: bb6];
    }

    bb6: {
        _18 = const false;
        goto -> bb8;
    }

    bb7: {
        _18 = const true;
        goto -> bb8;
    }

    bb8: {
        switchInt(move _18) -> [0: bb16, otherwise: bb9];
    }

    bb9: {
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = &(*_7);
        StorageLive(_23);
        _23 = ((*_1).17: controller::position::PositionDirection);
        StorageLive(_24);
        _24 = ((*_2).0: i64);
        StorageLive(_25);
        _25 = Option::<i32>::None;
        StorageLive(_26);
        _26 = _8;
        _21 = order_params::OrderParams::derive_oracle_order_auction_params(move _22, move _23, move _24, move _25, move _26) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        _20 = <std::result::Result<(i64, i64, u8), error::ErrorCode> as Try>::branch(move _21) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_21);
        _27 = discriminant(_20);
        switchInt(move _27) -> [0: bb12, 1: bb14, otherwise: bb13];
    }

    bb12: {
        StorageLive(_31);
        _31 = ((_20 as Continue).0: (i64, i64, u8));
        _17 = _31;
        StorageDead(_31);
        StorageDead(_20);
        goto -> bb22;
    }

    bb13: {
        unreachable;
    }

    bb14: {
        StorageLive(_28);
        _28 = ((_20 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_30);
        _30 = _28;
        _0 = <std::result::Result<(u8, i64, i64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _30) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_30);
        StorageDead(_28);
        StorageDead(_20);
        goto -> bb31;
    }

    bb16: {
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &(*_7);
        StorageLive(_35);
        _35 = ((*_1).17: controller::position::PositionDirection);
        StorageLive(_36);
        _36 = ((*_2).0: i64);
        StorageLive(_37);
        _37 = ((*_1).1: u64);
        StorageLive(_38);
        _38 = _8;
        _33 = order_params::OrderParams::derive_market_order_auction_params(move _34, move _35, move _36, move _37, move _38) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_34);
        _32 = <std::result::Result<(i64, i64, u8), error::ErrorCode> as Try>::branch(move _33) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_33);
        _39 = discriminant(_32);
        switchInt(move _39) -> [0: bb19, 1: bb20, otherwise: bb13];
    }

    bb19: {
        StorageLive(_43);
        _43 = ((_32 as Continue).0: (i64, i64, u8));
        _17 = _43;
        StorageDead(_43);
        StorageDead(_32);
        goto -> bb22;
    }

    bb20: {
        StorageLive(_40);
        _40 = ((_32 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_42);
        _42 = _40;
        _0 = <std::result::Result<(u8, i64, i64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _42) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_32);
        goto -> bb31;
    }

    bb22: {
        StorageDead(_18);
        StorageLive(_14);
        _14 = (_17.0: i64);
        StorageLive(_15);
        _15 = (_17.1: i64);
        StorageLive(_16);
        _16 = (_17.2: u8);
        StorageDead(_17);
        StorageLive(_44);
        StorageLive(_45);
        _45 = _5;
        StorageLive(_46);
        _46 = _16;
        _44 = <u8 as Ord>::max(move _45, move _46) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_46);
        StorageDead(_45);
        StorageLive(_47);
        StorageLive(_48);
        _48 = _44;
        StorageLive(_49);
        _49 = _14;
        StorageLive(_50);
        _50 = _15;
        _47 = (move _48, move _49, move _50);
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_48);
        _0 = std::result::Result::<(u8, i64, i64), error::ErrorCode>::Ok(move _47);
        StorageDead(_47);
        StorageDead(_44);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb30;
    }

    bb24: {
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = &(*_2);
        StorageLive(_57);
        _57 = ((*_1).17: controller::position::PositionDirection);
        StorageLive(_58);
        _58 = ((*_1).1: u64);
        _55 = calculate_auction_prices(move _56, move _57, move _58) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        _54 = <std::result::Result<(i64, i64), error::ErrorCode> as Try>::branch(move _55) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_55);
        _59 = discriminant(_54);
        switchInt(move _59) -> [0: bb27, 1: bb28, otherwise: bb13];
    }

    bb27: {
        StorageLive(_63);
        _63 = ((_54 as Continue).0: (i64, i64));
        _53 = _63;
        StorageDead(_63);
        StorageLive(_51);
        _51 = (_53.0: i64);
        StorageLive(_52);
        _52 = (_53.1: i64);
        StorageDead(_54);
        StorageDead(_53);
        StorageLive(_64);
        StorageLive(_65);
        _65 = _5;
        StorageLive(_66);
        _66 = _51;
        StorageLive(_67);
        _67 = _52;
        _64 = (move _65, move _66, move _67);
        StorageDead(_67);
        StorageDead(_66);
        StorageDead(_65);
        _0 = std::result::Result::<(u8, i64, i64), error::ErrorCode>::Ok(move _64);
        StorageDead(_64);
        StorageDead(_52);
        StorageDead(_51);
        goto -> bb30;
    }

    bb28: {
        StorageLive(_60);
        _60 = ((_54 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_62);
        _62 = _60;
        _0 = <std::result::Result<(u8, i64, i64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _62) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_62);
        StorageDead(_60);
        StorageDead(_54);
        StorageDead(_53);
        goto -> bb32;
    }

    bb30: {
        StorageDead(_5);
        goto -> bb33;
    }

    bb31: {
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb32;
    }

    bb32: {
        StorageDead(_5);
        goto -> bb33;
    }

    bb33: {
        return;
    }
}
