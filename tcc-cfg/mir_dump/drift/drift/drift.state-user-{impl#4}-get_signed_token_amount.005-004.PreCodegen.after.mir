// MIR for `state::user::<impl at programs/drift/src/state/user.rs:801:1: 801:18>::get_signed_token_amount` after PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:801:1: 801:18>::get_signed_token_amount(_1: &SpotPosition, _2: &SpotMarket) -> std::result::Result<i128, error::ErrorCode> {
    debug self => _1;
    debug spot_market => _2;
    let mut _0: std::result::Result<i128, error::ErrorCode>;
    let mut _3: u128;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _5: std::result::Result<u128, error::ErrorCode>;
    let mut _6: u128;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _8: std::result::Result<u128, error::ErrorCode>;
    let mut _9: u64;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _14: u128;
    let mut _15: &state::spot_market::SpotMarket;
    let mut _16: &state::spot_market::SpotBalanceType;
    let _17: &state::spot_market::SpotBalanceType;
    let mut _18: isize;
    let _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _20: !;
    let mut _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _22: u128;
    let mut _23: &state::spot_market::SpotBalanceType;
    let _24: &state::spot_market::SpotBalanceType;
    scope 1 {
        debug residual => _11;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _14;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _19;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _22;
        scope 8 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = ((*_1).0: u64);
        _8 = <u64 as Cast>::cast::<u128>(move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        _7 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_8);
        _10 = discriminant(_7);
        switchInt(move _10) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_14);
        _14 = ((_7 as Continue).0: u128);
        _6 = _14;
        StorageDead(_14);
        StorageLive(_15);
        _15 = &(*_2);
        StorageLive(_16);
        StorageLive(_17);
        _17 = &((*_1).5: state::spot_market::SpotBalanceType);
        _16 = &(*_17);
        _5 = get_token_amount(move _6, move _15, move _16) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_11);
        _11 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_13);
        _13 = _11;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _13) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_3);
        goto -> bb13;
    }

    bb7: {
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_6);
        _4 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _5) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_5);
        _18 = discriminant(_4);
        switchInt(move _18) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_22);
        _22 = ((_4 as Continue).0: u128);
        _3 = _22;
        StorageDead(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &((*_1).5: state::spot_market::SpotBalanceType);
        _23 = &(*_24);
        _0 = get_signed_token_amount(move _3, move _23) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_19);
        _19 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_21);
        _21 = _19;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _21) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_3);
        StorageDead(_17);
        goto -> bb13;
    }

    bb12: {
        StorageDead(_23);
        StorageDead(_3);
        StorageDead(_24);
        StorageDead(_17);
        StorageDead(_7);
        StorageDead(_4);
        goto -> bb14;
    }

    bb13: {
        StorageDead(_7);
        StorageDead(_4);
        goto -> bb14;
    }

    bb14: {
        return;
    }
}
