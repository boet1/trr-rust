// MIR for `fulfillment_params::serum::<impl at programs/drift/src/state/fulfillment_params/serum.rs:213:1: 213:44>::new` after PreCodegen

fn fulfillment_params::serum::<impl at programs/drift/src/state/fulfillment_params/serum.rs:213:1: 213:44>::new(_1: &mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>, _2: &state::state::State, _3: &SpotMarket, _4: &SpotMarket, _5: i64) -> std::result::Result<SerumFulfillmentParams<'_, '_>, error::ErrorCode> {
    debug account_info_iter => _1;
    debug state => _2;
    debug base_market => _3;
    debug quote_market => _4;
    debug now => _5;
    let mut _0: std::result::Result<state::fulfillment_params::serum::SerumFulfillmentParams<'_, '_>, error::ErrorCode>;
    let _6: std::vec::Vec<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _7: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let _11: &[&anchor_lang::prelude::AccountInfo<'_>];
    let mut _12: &std::vec::Vec<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _13: std::ops::Range<usize>;
    let mut _14: usize;
    let mut _15: usize;
    let mut _16: usize;
    let mut _17: (usize, bool);
    let mut _18: &[&anchor_lang::prelude::AccountInfo<'_>];
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::serum::SerumV3FulfillmentConfig>>;
    let mut _37: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::serum::SerumV3FulfillmentConfig>, error::ErrorCode>;
    let mut _38: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::serum::SerumV3FulfillmentConfig>, anchor_lang::error::Error>;
    let mut _39: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _40: {closure@programs/drift/src/state/fulfillment_params/serum.rs:228:71: 228:74};
    let mut _41: isize;
    let mut _43: !;
    let mut _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _47: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::fulfillment_params::serum::SerumV3FulfillmentConfig>>;
    let mut _48: std::result::Result<std::cell::Ref<'_, state::fulfillment_params::serum::SerumV3FulfillmentConfig>, error::ErrorCode>;
    let mut _49: std::result::Result<std::cell::Ref<'_, state::fulfillment_params::serum::SerumV3FulfillmentConfig>, anchor_lang::error::Error>;
    let mut _50: &anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::serum::SerumV3FulfillmentConfig>;
    let mut _51: {closure@programs/drift/src/macros.rs:70:40: 70:43};
    let mut _52: isize;
    let mut _54: !;
    let mut _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _57: ();
    let mut _58: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _59: std::result::Result<(), error::ErrorCode>;
    let mut _60: bool;
    let mut _61: &state::spot_market::SpotFulfillmentConfigStatus;
    let _62: &state::fulfillment_params::serum::SerumV3FulfillmentConfig;
    let mut _63: &std::cell::Ref<'_, state::fulfillment_params::serum::SerumV3FulfillmentConfig>;
    let mut _64: &state::spot_market::SpotFulfillmentConfigStatus;
    let _65: state::spot_market::SpotFulfillmentConfigStatus;
    let mut _66: ();
    let _68: ();
    let mut _69: &str;
    let _70: &str;
    let mut _71: &std::string::String;
    let _72: &std::string::String;
    let _73: std::string::String;
    let mut _75: std::fmt::Arguments<'_>;
    let mut _76: &[&str];
    let mut _77: &[&str; 2];
    let _78: &[&str; 2];
    let _79: [&str; 2];
    let mut _80: &[core::fmt::rt::Argument<'_>];
    let mut _81: &[core::fmt::rt::Argument<'_>; 1];
    let _82: &[core::fmt::rt::Argument<'_>; 1];
    let _83: [core::fmt::rt::Argument<'_>; 1];
    let mut _84: core::fmt::rt::Argument<'_>;
    let mut _85: &error::ErrorCode;
    let _86: &error::ErrorCode;
    let mut _87: error::ErrorCode;
    let mut _88: isize;
    let mut _90: !;
    let mut _91: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _93: ();
    let mut _94: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _95: std::result::Result<(), error::ErrorCode>;
    let mut _96: bool;
    let mut _97: &&anchor_lang::prelude::Pubkey;
    let _98: &anchor_lang::prelude::Pubkey;
    let mut _99: &&anchor_lang::prelude::Pubkey;
    let mut _100: ();
    let _102: ();
    let mut _103: &str;
    let _104: &str;
    let mut _105: &std::string::String;
    let _106: &std::string::String;
    let _107: std::string::String;
    let mut _109: std::fmt::Arguments<'_>;
    let mut _110: &[&str];
    let mut _111: &[&str; 2];
    let _112: &[&str; 2];
    let _113: [&str; 2];
    let mut _114: &[core::fmt::rt::Argument<'_>];
    let mut _115: &[core::fmt::rt::Argument<'_>; 1];
    let _116: &[core::fmt::rt::Argument<'_>; 1];
    let _117: [core::fmt::rt::Argument<'_>; 1];
    let mut _118: core::fmt::rt::Argument<'_>;
    let mut _119: &error::ErrorCode;
    let _120: &error::ErrorCode;
    let mut _121: error::ErrorCode;
    let mut _122: isize;
    let mut _124: !;
    let mut _125: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _127: ();
    let mut _128: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _129: std::result::Result<(), error::ErrorCode>;
    let mut _130: bool;
    let mut _131: u16;
    let mut _132: &state::fulfillment_params::serum::SerumV3FulfillmentConfig;
    let mut _133: &std::cell::Ref<'_, state::fulfillment_params::serum::SerumV3FulfillmentConfig>;
    let mut _134: u16;
    let mut _135: ();
    let _137: ();
    let mut _138: &str;
    let _139: &str;
    let mut _140: &std::string::String;
    let _141: &std::string::String;
    let _142: std::string::String;
    let mut _144: std::fmt::Arguments<'_>;
    let mut _145: &[&str];
    let mut _146: &[&str; 2];
    let _147: &[&str; 2];
    let _148: [&str; 2];
    let mut _149: &[core::fmt::rt::Argument<'_>];
    let mut _150: &[core::fmt::rt::Argument<'_>; 1];
    let _151: &[core::fmt::rt::Argument<'_>; 1];
    let _152: [core::fmt::rt::Argument<'_>; 1];
    let mut _153: core::fmt::rt::Argument<'_>;
    let mut _154: &error::ErrorCode;
    let _155: &error::ErrorCode;
    let _156: ();
    let mut _157: &str;
    let _158: &str;
    let mut _159: &std::string::String;
    let _160: &std::string::String;
    let _161: std::string::String;
    let mut _163: std::fmt::Arguments<'_>;
    let mut _164: &[&str];
    let mut _165: &[&str; 2];
    let _166: &[&str; 2];
    let _167: [&str; 2];
    let mut _168: &[core::fmt::rt::Argument<'_>];
    let mut _169: &[core::fmt::rt::Argument<'_>; 2];
    let _170: &[core::fmt::rt::Argument<'_>; 2];
    let _171: [core::fmt::rt::Argument<'_>; 2];
    let mut _172: core::fmt::rt::Argument<'_>;
    let mut _173: &u16;
    let _174: &u16;
    let _175: &state::fulfillment_params::serum::SerumV3FulfillmentConfig;
    let mut _176: &std::cell::Ref<'_, state::fulfillment_params::serum::SerumV3FulfillmentConfig>;
    let mut _177: core::fmt::rt::Argument<'_>;
    let mut _178: &u16;
    let _179: &u16;
    let mut _180: error::ErrorCode;
    let mut _181: isize;
    let mut _183: !;
    let mut _184: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _186: ();
    let mut _187: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _188: std::result::Result<(), error::ErrorCode>;
    let mut _189: bool;
    let mut _190: &&anchor_lang::prelude::Pubkey;
    let _191: &anchor_lang::prelude::Pubkey;
    let mut _192: &&anchor_lang::prelude::Pubkey;
    let mut _193: ();
    let _195: ();
    let mut _196: &str;
    let _197: &str;
    let mut _198: &std::string::String;
    let _199: &std::string::String;
    let _200: std::string::String;
    let mut _202: std::fmt::Arguments<'_>;
    let mut _203: &[&str];
    let mut _204: &[&str; 2];
    let _205: &[&str; 2];
    let _206: [&str; 2];
    let mut _207: &[core::fmt::rt::Argument<'_>];
    let mut _208: &[core::fmt::rt::Argument<'_>; 1];
    let _209: &[core::fmt::rt::Argument<'_>; 1];
    let _210: [core::fmt::rt::Argument<'_>; 1];
    let mut _211: core::fmt::rt::Argument<'_>;
    let mut _212: &error::ErrorCode;
    let _213: &error::ErrorCode;
    let mut _214: error::ErrorCode;
    let mut _215: isize;
    let mut _217: !;
    let mut _218: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _220: ();
    let mut _221: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _222: std::result::Result<(), error::ErrorCode>;
    let mut _223: bool;
    let mut _224: &&anchor_lang::prelude::Pubkey;
    let _225: &anchor_lang::prelude::Pubkey;
    let mut _226: &&anchor_lang::prelude::Pubkey;
    let mut _227: ();
    let _229: ();
    let mut _230: &str;
    let _231: &str;
    let mut _232: &std::string::String;
    let _233: &std::string::String;
    let _234: std::string::String;
    let mut _236: std::fmt::Arguments<'_>;
    let mut _237: &[&str];
    let mut _238: &[&str; 2];
    let _239: &[&str; 2];
    let _240: [&str; 2];
    let mut _241: &[core::fmt::rt::Argument<'_>];
    let mut _242: &[core::fmt::rt::Argument<'_>; 1];
    let _243: &[core::fmt::rt::Argument<'_>; 1];
    let _244: [core::fmt::rt::Argument<'_>; 1];
    let mut _245: core::fmt::rt::Argument<'_>;
    let mut _246: &error::ErrorCode;
    let _247: &error::ErrorCode;
    let mut _248: error::ErrorCode;
    let mut _249: isize;
    let mut _251: !;
    let mut _252: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _254: ();
    let mut _255: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _256: std::result::Result<(), error::ErrorCode>;
    let mut _257: bool;
    let mut _258: &&anchor_lang::prelude::Pubkey;
    let _259: &anchor_lang::prelude::Pubkey;
    let _260: &state::fulfillment_params::serum::SerumV3FulfillmentConfig;
    let mut _261: &std::cell::Ref<'_, state::fulfillment_params::serum::SerumV3FulfillmentConfig>;
    let mut _262: &&anchor_lang::prelude::Pubkey;
    let mut _263: ();
    let _265: ();
    let mut _266: &str;
    let _267: &str;
    let mut _268: &std::string::String;
    let _269: &std::string::String;
    let _270: std::string::String;
    let mut _272: std::fmt::Arguments<'_>;
    let mut _273: &[&str];
    let mut _274: &[&str; 2];
    let _275: &[&str; 2];
    let _276: [&str; 2];
    let mut _277: &[core::fmt::rt::Argument<'_>];
    let mut _278: &[core::fmt::rt::Argument<'_>; 1];
    let _279: &[core::fmt::rt::Argument<'_>; 1];
    let _280: [core::fmt::rt::Argument<'_>; 1];
    let mut _281: core::fmt::rt::Argument<'_>;
    let mut _282: &error::ErrorCode;
    let _283: &error::ErrorCode;
    let mut _284: error::ErrorCode;
    let mut _285: isize;
    let mut _287: !;
    let mut _288: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _290: ();
    let mut _291: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _292: std::result::Result<(), error::ErrorCode>;
    let mut _293: bool;
    let mut _294: &&anchor_lang::prelude::Pubkey;
    let _295: &anchor_lang::prelude::Pubkey;
    let _296: &state::fulfillment_params::serum::SerumV3FulfillmentConfig;
    let mut _297: &std::cell::Ref<'_, state::fulfillment_params::serum::SerumV3FulfillmentConfig>;
    let mut _298: &&anchor_lang::prelude::Pubkey;
    let mut _299: ();
    let _301: ();
    let mut _302: &str;
    let _303: &str;
    let mut _304: &std::string::String;
    let _305: &std::string::String;
    let _306: std::string::String;
    let mut _308: std::fmt::Arguments<'_>;
    let mut _309: &[&str];
    let mut _310: &[&str; 2];
    let _311: &[&str; 2];
    let _312: [&str; 2];
    let mut _313: &[core::fmt::rt::Argument<'_>];
    let mut _314: &[core::fmt::rt::Argument<'_>; 1];
    let _315: &[core::fmt::rt::Argument<'_>; 1];
    let _316: [core::fmt::rt::Argument<'_>; 1];
    let mut _317: core::fmt::rt::Argument<'_>;
    let mut _318: &error::ErrorCode;
    let _319: &error::ErrorCode;
    let mut _320: error::ErrorCode;
    let mut _321: isize;
    let mut _323: !;
    let mut _324: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _326: ();
    let mut _327: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _328: std::result::Result<(), error::ErrorCode>;
    let mut _329: bool;
    let mut _330: &&anchor_lang::prelude::Pubkey;
    let _331: &anchor_lang::prelude::Pubkey;
    let _332: &state::fulfillment_params::serum::SerumV3FulfillmentConfig;
    let mut _333: &std::cell::Ref<'_, state::fulfillment_params::serum::SerumV3FulfillmentConfig>;
    let mut _334: &&anchor_lang::prelude::Pubkey;
    let mut _335: ();
    let _337: ();
    let mut _338: &str;
    let _339: &str;
    let mut _340: &std::string::String;
    let _341: &std::string::String;
    let _342: std::string::String;
    let mut _344: std::fmt::Arguments<'_>;
    let mut _345: &[&str];
    let mut _346: &[&str; 2];
    let _347: &[&str; 2];
    let _348: [&str; 2];
    let mut _349: &[core::fmt::rt::Argument<'_>];
    let mut _350: &[core::fmt::rt::Argument<'_>; 1];
    let _351: &[core::fmt::rt::Argument<'_>; 1];
    let _352: [core::fmt::rt::Argument<'_>; 1];
    let mut _353: core::fmt::rt::Argument<'_>;
    let mut _354: &error::ErrorCode;
    let _355: &error::ErrorCode;
    let mut _356: error::ErrorCode;
    let mut _357: isize;
    let mut _359: !;
    let mut _360: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _363: anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _364: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _365: std::result::Result<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>, error::ErrorCode>;
    let mut _366: std::result::Result<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>, anchor_lang::error::Error>;
    let mut _367: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _368: {closure@programs/drift/src/state/fulfillment_params/serum.rs:278:67: 278:70};
    let mut _369: isize;
    let mut _371: !;
    let mut _372: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _375: anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _376: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _377: std::result::Result<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>, error::ErrorCode>;
    let mut _378: std::result::Result<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>, anchor_lang::error::Error>;
    let mut _379: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _380: {closure@programs/drift/src/state/fulfillment_params/serum.rs:283:68: 283:71};
    let mut _381: isize;
    let mut _383: !;
    let mut _384: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _387: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, anchor_lang::prelude::Program<'_, anchor_spl::token::Token>>;
    let mut _388: std::result::Result<anchor_lang::prelude::Program<'_, anchor_spl::token::Token>, error::ErrorCode>;
    let mut _389: std::result::Result<anchor_lang::prelude::Program<'_, anchor_spl::token::Token>, anchor_lang::error::Error>;
    let mut _390: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _391: {closure@programs/drift/src/state/fulfillment_params/serum.rs:288:87: 288:90};
    let mut _392: isize;
    let mut _394: !;
    let mut _395: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _397: ();
    let mut _398: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _399: std::result::Result<(), error::ErrorCode>;
    let mut _400: bool;
    let mut _401: &&anchor_lang::prelude::Pubkey;
    let _402: &anchor_lang::prelude::Pubkey;
    let mut _403: &&anchor_lang::prelude::Pubkey;
    let mut _404: ();
    let _406: ();
    let mut _407: &str;
    let _408: &str;
    let mut _409: &std::string::String;
    let _410: &std::string::String;
    let _411: std::string::String;
    let mut _413: std::fmt::Arguments<'_>;
    let mut _414: &[&str];
    let mut _415: &[&str; 2];
    let _416: &[&str; 2];
    let _417: [&str; 2];
    let mut _418: &[core::fmt::rt::Argument<'_>];
    let mut _419: &[core::fmt::rt::Argument<'_>; 1];
    let _420: &[core::fmt::rt::Argument<'_>; 1];
    let _421: [core::fmt::rt::Argument<'_>; 1];
    let mut _422: core::fmt::rt::Argument<'_>;
    let mut _423: &error::ErrorCode;
    let _424: &error::ErrorCode;
    let mut _425: error::ErrorCode;
    let mut _426: isize;
    let mut _428: !;
    let mut _429: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _431: state::fulfillment_params::serum::SerumFulfillmentParams<'_, '_>;
    let mut _432: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _433: state::fulfillment_params::serum::SerumContext<'_, '_>;
    let mut _434: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _435: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _436: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _437: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _438: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _439: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _440: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _441: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _442: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _443: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _444: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _445: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _446: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _447: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _448: u8;
    let mut _449: u32;
    let mut _450: i64;
    let mut _462: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _463: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _464: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _465: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _466: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _467: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _468: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _469: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _470: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _471: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _472: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _473: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _474: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _475: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _476: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _477: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _478: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _479: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _480: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _481: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _482: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _483: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _484: isize;
    let mut _485: isize;
    let mut _486: isize;
    let mut _487: isize;
    let mut _488: isize;
    scope 1 {
        debug account_info_vec => _6;
        let _8: &[&anchor_lang::prelude::AccountInfo<'_>; 16];
        let _9: usize;
        scope 2 {
            debug account_infos => _8;
            let _19: &&anchor_lang::prelude::AccountInfo<'_>;
            let _20: &&anchor_lang::prelude::AccountInfo<'_>;
            let _21: &&anchor_lang::prelude::AccountInfo<'_>;
            let _22: &&anchor_lang::prelude::AccountInfo<'_>;
            let _23: &&anchor_lang::prelude::AccountInfo<'_>;
            let _24: &&anchor_lang::prelude::AccountInfo<'_>;
            let _25: &&anchor_lang::prelude::AccountInfo<'_>;
            let _26: &&anchor_lang::prelude::AccountInfo<'_>;
            let _27: &&anchor_lang::prelude::AccountInfo<'_>;
            let _28: &&anchor_lang::prelude::AccountInfo<'_>;
            let _29: &&anchor_lang::prelude::AccountInfo<'_>;
            let _30: &&anchor_lang::prelude::AccountInfo<'_>;
            let _31: &&anchor_lang::prelude::AccountInfo<'_>;
            let _32: &&anchor_lang::prelude::AccountInfo<'_>;
            let _33: &&anchor_lang::prelude::AccountInfo<'_>;
            let _34: &&anchor_lang::prelude::AccountInfo<'_>;
            scope 7 {
                debug serum_fulfillment_config => _19;
                debug serum_program => _20;
                debug serum_market => _21;
                debug serum_request_queue => _22;
                debug serum_event_queue => _23;
                debug serum_bids => _24;
                debug serum_asks => _25;
                debug serum_base_vault => _26;
                debug serum_quote_vault => _27;
                debug serum_open_orders => _28;
                debug serum_signer => _29;
                debug drift_signer => _30;
                debug token_program => _31;
                debug base_market_vault => _32;
                debug quote_market_vault => _33;
                debug srm_vault => _34;
                let _35: anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::serum::SerumV3FulfillmentConfig>;
                let _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _45: anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::serum::SerumV3FulfillmentConfig>;
                scope 8 {
                    debug serum_fulfillment_config_loader => _35;
                    let _46: std::cell::Ref<'_, state::fulfillment_params::serum::SerumV3FulfillmentConfig>;
                    let _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _56: std::cell::Ref<'_, state::fulfillment_params::serum::SerumV3FulfillmentConfig>;
                    scope 13 {
                        debug serum_fulfillment_config => _46;
                        let _67: error::ErrorCode;
                        let _89: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _92: ();
                        let _101: error::ErrorCode;
                        let _123: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _126: ();
                        let _136: error::ErrorCode;
                        let _182: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _185: ();
                        let _194: error::ErrorCode;
                        let _216: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _219: ();
                        let _228: error::ErrorCode;
                        let _250: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _253: ();
                        let _264: error::ErrorCode;
                        let _286: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _289: ();
                        let _300: error::ErrorCode;
                        let _322: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _325: ();
                        let _336: error::ErrorCode;
                        let _358: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _361: ();
                        let _362: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
                        let _370: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _373: anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
                        let mut _461: &state::spot_market::SpotFulfillmentConfigStatus;
                        scope 18 {
                            debug error_code => _67;
                            let _74: std::string::String;
                            let mut _460: &[&str; 2];
                            scope 19 {
                                debug res => _74;
                            }
                        }
                        scope 20 {
                            debug residual => _89;
                            scope 21 {
                            }
                        }
                        scope 22 {
                            debug val => _92;
                            scope 23 {
                            }
                        }
                        scope 24 {
                            debug error_code => _101;
                            let _108: std::string::String;
                            let mut _459: &[&str; 2];
                            scope 25 {
                                debug res => _108;
                            }
                        }
                        scope 26 {
                            debug residual => _123;
                            scope 27 {
                            }
                        }
                        scope 28 {
                            debug val => _126;
                            scope 29 {
                            }
                        }
                        scope 30 {
                            debug error_code => _136;
                            let _143: std::string::String;
                            let _162: std::string::String;
                            let mut _457: &[&str; 2];
                            let mut _458: &[&str; 2];
                            scope 31 {
                                debug res => _143;
                            }
                            scope 32 {
                                debug res => _162;
                            }
                        }
                        scope 33 {
                            debug residual => _182;
                            scope 34 {
                            }
                        }
                        scope 35 {
                            debug val => _185;
                            scope 36 {
                            }
                        }
                        scope 37 {
                            debug error_code => _194;
                            let _201: std::string::String;
                            let mut _456: &[&str; 2];
                            scope 38 {
                                debug res => _201;
                            }
                        }
                        scope 39 {
                            debug residual => _216;
                            scope 40 {
                            }
                        }
                        scope 41 {
                            debug val => _219;
                            scope 42 {
                            }
                        }
                        scope 43 {
                            debug error_code => _228;
                            let _235: std::string::String;
                            let mut _455: &[&str; 2];
                            scope 44 {
                                debug res => _235;
                            }
                        }
                        scope 45 {
                            debug residual => _250;
                            scope 46 {
                            }
                        }
                        scope 47 {
                            debug val => _253;
                            scope 48 {
                            }
                        }
                        scope 49 {
                            debug error_code => _264;
                            let _271: std::string::String;
                            let mut _454: &[&str; 2];
                            scope 50 {
                                debug res => _271;
                            }
                        }
                        scope 51 {
                            debug residual => _286;
                            scope 52 {
                            }
                        }
                        scope 53 {
                            debug val => _289;
                            scope 54 {
                            }
                        }
                        scope 55 {
                            debug error_code => _300;
                            let _307: std::string::String;
                            let mut _453: &[&str; 2];
                            scope 56 {
                                debug res => _307;
                            }
                        }
                        scope 57 {
                            debug residual => _322;
                            scope 58 {
                            }
                        }
                        scope 59 {
                            debug val => _325;
                            scope 60 {
                            }
                        }
                        scope 61 {
                            debug error_code => _336;
                            let _343: std::string::String;
                            let mut _452: &[&str; 2];
                            scope 62 {
                                debug res => _343;
                            }
                        }
                        scope 63 {
                            debug residual => _358;
                            scope 64 {
                            }
                        }
                        scope 65 {
                            debug val => _361;
                            scope 66 {
                            }
                        }
                        scope 67 {
                            debug base_market_vault => _362;
                            let _374: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
                            let _382: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _385: anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
                            scope 72 {
                                debug quote_market_vault => _374;
                                let _386: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
                                let _393: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _396: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
                                scope 77 {
                                    debug token_program => _386;
                                    let _405: error::ErrorCode;
                                    let _427: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _430: ();
                                    scope 82 {
                                        debug error_code => _405;
                                        let _412: std::string::String;
                                        let mut _451: &[&str; 2];
                                        scope 83 {
                                            debug res => _412;
                                        }
                                    }
                                    scope 84 {
                                        debug residual => _427;
                                        scope 85 {
                                        }
                                    }
                                    scope 86 {
                                        debug val => _430;
                                        scope 87 {
                                        }
                                    }
                                }
                                scope 78 {
                                    debug residual => _393;
                                    scope 79 {
                                    }
                                }
                                scope 80 {
                                    debug val => _396;
                                    scope 81 {
                                    }
                                }
                            }
                            scope 73 {
                                debug residual => _382;
                                scope 74 {
                                }
                            }
                            scope 75 {
                                debug val => _385;
                                scope 76 {
                                }
                            }
                        }
                        scope 68 {
                            debug residual => _370;
                            scope 69 {
                            }
                        }
                        scope 70 {
                            debug val => _373;
                            scope 71 {
                            }
                        }
                    }
                    scope 14 {
                        debug residual => _53;
                        scope 15 {
                        }
                    }
                    scope 16 {
                        debug val => _56;
                        scope 17 {
                        }
                    }
                }
                scope 9 {
                    debug residual => _42;
                    scope 10 {
                    }
                }
                scope 11 {
                    debug val => _45;
                    scope 12 {
                    }
                }
            }
        }
        scope 3 {
            debug offset => _9;
            let _10: &[&anchor_lang::prelude::AccountInfo<'_>];
            scope 4 {
                debug slice => _10;
                scope 5 {
                    scope 6 {
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        _7 = &mut (*_1);
        _6 = <&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>> as Iterator>::collect::<Vec<&anchor_lang::prelude::AccountInfo<'_>>>(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = const 0_usize;
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &_6;
        StorageLive(_13);
        StorageLive(_14);
        _14 = _9;
        StorageLive(_15);
        StorageLive(_16);
        _16 = _9;
        _17 = CheckedAdd(_16, const 16_usize);
        assert(!move (_17.1: bool), "attempt to compute `{} + {}`, which would overflow", move _16, const 16_usize) -> [success: bb2, unwind: bb199];
    }

    bb2: {
        _15 = move (_17.0: usize);
        StorageDead(_16);
        _13 = std::ops::Range::<usize> { start: move _14, end: move _15 };
        StorageDead(_15);
        StorageDead(_14);
        _11 = <Vec<&anchor_lang::prelude::AccountInfo<'_>> as Index<std::ops::Range<usize>>>::index(move _12, move _13) -> [return: bb3, unwind: bb199];
    }

    bb3: {
        StorageDead(_13);
        StorageDead(_12);
        _10 = &(*_11);
        StorageLive(_18);
        _18 = &(*_10);
        _8 = SerumFulfillmentParams::<'a, 'b>::new::as_array::<&anchor_lang::prelude::AccountInfo<'_>>(move _18) -> [return: bb4, unwind: bb199];
    }

    bb4: {
        StorageDead(_18);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_19);
        _19 = &(*_8)[0 of 16];
        StorageLive(_20);
        _20 = &(*_8)[1 of 16];
        StorageLive(_21);
        _21 = &(*_8)[2 of 16];
        StorageLive(_22);
        _22 = &(*_8)[3 of 16];
        StorageLive(_23);
        _23 = &(*_8)[4 of 16];
        StorageLive(_24);
        _24 = &(*_8)[5 of 16];
        StorageLive(_25);
        _25 = &(*_8)[6 of 16];
        StorageLive(_26);
        _26 = &(*_8)[7 of 16];
        StorageLive(_27);
        _27 = &(*_8)[8 of 16];
        StorageLive(_28);
        _28 = &(*_8)[9 of 16];
        StorageLive(_29);
        _29 = &(*_8)[10 of 16];
        StorageLive(_30);
        _30 = &(*_8)[11 of 16];
        StorageLive(_31);
        _31 = &(*_8)[12 of 16];
        StorageLive(_32);
        _32 = &(*_8)[13 of 16];
        StorageLive(_33);
        _33 = &(*_8)[14 of 16];
        StorageLive(_34);
        _34 = &(*_8)[15 of 16];
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _462 = deref_copy (*_19);
        _39 = &(*_462);
        _38 = anchor_lang::prelude::AccountLoader::<'_, SerumV3FulfillmentConfig>::try_from(move _39) -> [return: bb5, unwind: bb199];
    }

    bb5: {
        StorageDead(_39);
        StorageLive(_40);
        _40 = {closure@programs/drift/src/state/fulfillment_params/serum.rs:228:71: 228:74};
        _37 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, SerumV3FulfillmentConfig>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/serum.rs:228:71: 228:74}>(move _38, move _40) -> [return: bb6, unwind: bb199];
    }

    bb6: {
        StorageDead(_40);
        StorageDead(_38);
        _36 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, SerumV3FulfillmentConfig>, error::ErrorCode> as Try>::branch(move _37) -> [return: bb7, unwind: bb199];
    }

    bb7: {
        StorageDead(_37);
        _41 = discriminant(_36);
        switchInt(move _41) -> [0: bb8, 1: bb10, otherwise: bb9];
    }

    bb8: {
        StorageLive(_45);
        _45 = move ((_36 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::serum::SerumV3FulfillmentConfig>);
        _35 = move _45;
        StorageDead(_45);
        StorageDead(_36);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = &_35;
        _49 = anchor_lang::prelude::AccountLoader::<'_, SerumV3FulfillmentConfig>::load(move _50) -> [return: bb12, unwind: bb199];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        StorageLive(_42);
        _42 = ((_36 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_44);
        _44 = _42;
        _0 = <std::result::Result<SerumFulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _44) -> [return: bb11, unwind: bb199];
    }

    bb11: {
        StorageDead(_44);
        StorageDead(_42);
        StorageDead(_36);
        goto -> bb183;
    }

    bb12: {
        StorageDead(_50);
        StorageLive(_51);
        _51 = {closure@programs/drift/src/macros.rs:70:40: 70:43};
        _48 = std::result::Result::<Ref<'_, SerumV3FulfillmentConfig>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:70:40: 70:43}>(move _49, move _51) -> [return: bb13, unwind: bb199];
    }

    bb13: {
        StorageDead(_51);
        StorageDead(_49);
        _47 = <std::result::Result<Ref<'_, SerumV3FulfillmentConfig>, error::ErrorCode> as Try>::branch(move _48) -> [return: bb14, unwind: bb199];
    }

    bb14: {
        StorageDead(_48);
        _52 = discriminant(_47);
        switchInt(move _52) -> [0: bb15, 1: bb16, otherwise: bb9];
    }

    bb15: {
        StorageLive(_56);
        _56 = move ((_47 as Continue).0: std::cell::Ref<'_, state::fulfillment_params::serum::SerumV3FulfillmentConfig>);
        _46 = move _56;
        StorageDead(_56);
        _486 = discriminant(_47);
        StorageDead(_47);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = &_46;
        _62 = <Ref<'_, SerumV3FulfillmentConfig> as Deref>::deref(move _63) -> [return: bb18, unwind: bb198];
    }

    bb16: {
        StorageLive(_53);
        _53 = ((_47 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_55);
        _55 = _53;
        _0 = <std::result::Result<SerumFulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _55) -> [return: bb17, unwind: bb201];
    }

    bb17: {
        StorageDead(_55);
        StorageDead(_53);
        _484 = discriminant(_47);
        StorageDead(_47);
        goto -> bb182;
    }

    bb18: {
        StorageDead(_63);
        _61 = &((*_62).13: state::spot_market::SpotFulfillmentConfigStatus);
        StorageLive(_64);
        _461 = const _;
        _64 = &(*_461);
        _60 = <state::spot_market::SpotFulfillmentConfigStatus as PartialEq>::eq(move _61, move _64) -> [return: bb19, unwind: bb198];
    }

    bb19: {
        switchInt(move _60) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        StorageDead(_64);
        StorageDead(_62);
        StorageDead(_61);
        StorageLive(_66);
        _66 = ();
        _59 = std::result::Result::<(), error::ErrorCode>::Ok(move _66);
        StorageDead(_66);
        goto -> bb28;
    }

    bb21: {
        StorageDead(_64);
        StorageDead(_62);
        StorageDead(_61);
        StorageLive(_67);
        _67 = error::ErrorCode::SpotFulfillmentConfigDisabled;
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _460 = const _;
        _78 = &(*_460);
        _77 = &(*_78);
        _76 = move _77 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_77);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = &_67;
        _85 = &(*_86);
        _84 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _85) -> [return: bb22, unwind: bb198];
    }

    bb22: {
        StorageDead(_85);
        _83 = [move _84];
        StorageDead(_84);
        _82 = &_83;
        _81 = &(*_82);
        _80 = move _81 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_81);
        _75 = Arguments::<'_>::new_v1(move _76, move _80) -> [return: bb23, unwind: bb198];
    }

    bb23: {
        StorageDead(_80);
        StorageDead(_76);
        _74 = format(move _75) -> [return: bb24, unwind: bb198];
    }

    bb24: {
        StorageDead(_75);
        StorageDead(_86);
        StorageDead(_83);
        StorageDead(_82);
        StorageDead(_78);
        _73 = move _74;
        StorageDead(_74);
        _72 = &_73;
        _71 = &(*_72);
        _70 = <String as Deref>::deref(move _71) -> [return: bb25, unwind: bb197];
    }

    bb25: {
        _69 = &(*_70);
        StorageDead(_71);
        _68 = solana_program::log::sol_log(move _69) -> [return: bb26, unwind: bb197];
    }

    bb26: {
        StorageDead(_69);
        drop(_73) -> [return: bb27, unwind: bb198];
    }

    bb27: {
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_70);
        StorageDead(_68);
        StorageLive(_87);
        _87 = _67;
        _59 = std::result::Result::<(), error::ErrorCode>::Err(move _87);
        StorageDead(_87);
        StorageDead(_67);
        goto -> bb28;
    }

    bb28: {
        StorageDead(_60);
        _58 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _59) -> [return: bb29, unwind: bb198];
    }

    bb29: {
        StorageDead(_59);
        _88 = discriminant(_58);
        switchInt(move _88) -> [0: bb30, 1: bb31, otherwise: bb9];
    }

    bb30: {
        StorageLive(_92);
        _92 = ((_58 as Continue).0: ());
        _57 = _92;
        StorageDead(_92);
        StorageDead(_58);
        StorageDead(_57);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        _98 = &((*_2).3: anchor_lang::prelude::Pubkey);
        _97 = &_98;
        StorageLive(_99);
        _463 = deref_copy (*_30);
        _99 = &((*_463).0: &anchor_lang::prelude::Pubkey);
        _96 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _97, move _99) -> [return: bb33, unwind: bb198];
    }

    bb31: {
        StorageLive(_89);
        _89 = ((_58 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_91);
        _91 = _89;
        _0 = <std::result::Result<SerumFulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _91) -> [return: bb32, unwind: bb198];
    }

    bb32: {
        StorageDead(_91);
        StorageDead(_89);
        StorageDead(_58);
        StorageDead(_57);
        goto -> bb181;
    }

    bb33: {
        switchInt(move _96) -> [0: bb35, otherwise: bb34];
    }

    bb34: {
        StorageDead(_99);
        StorageDead(_98);
        StorageDead(_97);
        StorageLive(_100);
        _100 = ();
        _95 = std::result::Result::<(), error::ErrorCode>::Ok(move _100);
        StorageDead(_100);
        goto -> bb42;
    }

    bb35: {
        StorageDead(_99);
        StorageDead(_98);
        StorageDead(_97);
        StorageLive(_101);
        _101 = error::ErrorCode::InvalidFulfillmentConfig;
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _459 = const _;
        _112 = &(*_459);
        _111 = &(*_112);
        _110 = move _111 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_111);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        _120 = &_101;
        _119 = &(*_120);
        _118 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _119) -> [return: bb36, unwind: bb198];
    }

    bb36: {
        StorageDead(_119);
        _117 = [move _118];
        StorageDead(_118);
        _116 = &_117;
        _115 = &(*_116);
        _114 = move _115 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_115);
        _109 = Arguments::<'_>::new_v1(move _110, move _114) -> [return: bb37, unwind: bb198];
    }

    bb37: {
        StorageDead(_114);
        StorageDead(_110);
        _108 = format(move _109) -> [return: bb38, unwind: bb198];
    }

    bb38: {
        StorageDead(_109);
        StorageDead(_120);
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_112);
        _107 = move _108;
        StorageDead(_108);
        _106 = &_107;
        _105 = &(*_106);
        _104 = <String as Deref>::deref(move _105) -> [return: bb39, unwind: bb196];
    }

    bb39: {
        _103 = &(*_104);
        StorageDead(_105);
        _102 = solana_program::log::sol_log(move _103) -> [return: bb40, unwind: bb196];
    }

    bb40: {
        StorageDead(_103);
        drop(_107) -> [return: bb41, unwind: bb198];
    }

    bb41: {
        StorageDead(_107);
        StorageDead(_106);
        StorageDead(_104);
        StorageDead(_102);
        StorageLive(_121);
        _121 = _101;
        _95 = std::result::Result::<(), error::ErrorCode>::Err(move _121);
        StorageDead(_121);
        StorageDead(_101);
        goto -> bb42;
    }

    bb42: {
        StorageDead(_96);
        _94 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _95) -> [return: bb43, unwind: bb198];
    }

    bb43: {
        StorageDead(_95);
        _122 = discriminant(_94);
        switchInt(move _122) -> [0: bb44, 1: bb45, otherwise: bb9];
    }

    bb44: {
        StorageLive(_126);
        _126 = ((_94 as Continue).0: ());
        _93 = _126;
        StorageDead(_126);
        StorageDead(_94);
        StorageDead(_93);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        _133 = &_46;
        _132 = <Ref<'_, SerumV3FulfillmentConfig> as Deref>::deref(move _133) -> [return: bb47, unwind: bb198];
    }

    bb45: {
        StorageLive(_123);
        _123 = ((_94 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_125);
        _125 = _123;
        _0 = <std::result::Result<SerumFulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _125) -> [return: bb46, unwind: bb198];
    }

    bb46: {
        StorageDead(_125);
        StorageDead(_123);
        StorageDead(_94);
        StorageDead(_93);
        goto -> bb181;
    }

    bb47: {
        StorageDead(_133);
        _131 = ((*_132).11: u16);
        StorageLive(_134);
        _134 = ((*_3).42: u16);
        _130 = Eq(move _131, move _134);
        switchInt(move _130) -> [0: bb49, otherwise: bb48];
    }

    bb48: {
        StorageDead(_134);
        StorageDead(_132);
        StorageDead(_131);
        StorageLive(_135);
        _135 = ();
        _129 = std::result::Result::<(), error::ErrorCode>::Ok(move _135);
        StorageDead(_135);
        goto -> bb64;
    }

    bb49: {
        StorageDead(_134);
        StorageDead(_132);
        StorageDead(_131);
        StorageLive(_136);
        _136 = error::ErrorCode::InvalidFulfillmentConfig;
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        _458 = const _;
        _147 = &(*_458);
        _146 = &(*_147);
        _145 = move _146 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_146);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        _155 = &_136;
        _154 = &(*_155);
        _153 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _154) -> [return: bb50, unwind: bb198];
    }

    bb50: {
        StorageDead(_154);
        _152 = [move _153];
        StorageDead(_153);
        _151 = &_152;
        _150 = &(*_151);
        _149 = move _150 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_150);
        _144 = Arguments::<'_>::new_v1(move _145, move _149) -> [return: bb51, unwind: bb198];
    }

    bb51: {
        StorageDead(_149);
        StorageDead(_145);
        _143 = format(move _144) -> [return: bb52, unwind: bb198];
    }

    bb52: {
        StorageDead(_144);
        StorageDead(_155);
        StorageDead(_152);
        StorageDead(_151);
        StorageDead(_147);
        _142 = move _143;
        StorageDead(_143);
        _141 = &_142;
        _140 = &(*_141);
        _139 = <String as Deref>::deref(move _140) -> [return: bb53, unwind: bb195];
    }

    bb53: {
        _138 = &(*_139);
        StorageDead(_140);
        _137 = solana_program::log::sol_log(move _138) -> [return: bb54, unwind: bb195];
    }

    bb54: {
        StorageDead(_138);
        drop(_142) -> [return: bb55, unwind: bb198];
    }

    bb55: {
        StorageDead(_142);
        StorageDead(_141);
        StorageDead(_139);
        StorageDead(_137);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        _457 = const _;
        _166 = &(*_457);
        _165 = &(*_166);
        _164 = move _165 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_165);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        _176 = &_46;
        _175 = <Ref<'_, SerumV3FulfillmentConfig> as Deref>::deref(move _176) -> [return: bb56, unwind: bb198];
    }

    bb56: {
        StorageDead(_176);
        _174 = &((*_175).11: u16);
        _173 = &(*_174);
        _172 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _173) -> [return: bb57, unwind: bb198];
    }

    bb57: {
        StorageDead(_173);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        _179 = &((*_3).42: u16);
        _178 = &(*_179);
        _177 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _178) -> [return: bb58, unwind: bb198];
    }

    bb58: {
        StorageDead(_178);
        _171 = [move _172, move _177];
        StorageDead(_177);
        StorageDead(_172);
        _170 = &_171;
        _169 = &(*_170);
        _168 = move _169 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_169);
        _163 = Arguments::<'_>::new_v1(move _164, move _168) -> [return: bb59, unwind: bb198];
    }

    bb59: {
        StorageDead(_168);
        StorageDead(_164);
        _162 = format(move _163) -> [return: bb60, unwind: bb198];
    }

    bb60: {
        StorageDead(_163);
        StorageDead(_179);
        StorageDead(_175);
        StorageDead(_174);
        StorageDead(_171);
        StorageDead(_170);
        StorageDead(_166);
        _161 = move _162;
        StorageDead(_162);
        _160 = &_161;
        _159 = &(*_160);
        _158 = <String as Deref>::deref(move _159) -> [return: bb61, unwind: bb194];
    }

    bb61: {
        _157 = &(*_158);
        StorageDead(_159);
        _156 = solana_program::log::sol_log(move _157) -> [return: bb62, unwind: bb194];
    }

    bb62: {
        StorageDead(_157);
        drop(_161) -> [return: bb63, unwind: bb198];
    }

    bb63: {
        StorageDead(_161);
        StorageDead(_160);
        StorageDead(_158);
        StorageDead(_156);
        StorageLive(_180);
        _180 = _136;
        _129 = std::result::Result::<(), error::ErrorCode>::Err(move _180);
        StorageDead(_180);
        StorageDead(_136);
        goto -> bb64;
    }

    bb64: {
        StorageDead(_130);
        _128 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _129) -> [return: bb65, unwind: bb198];
    }

    bb65: {
        StorageDead(_129);
        _181 = discriminant(_128);
        switchInt(move _181) -> [0: bb66, 1: bb67, otherwise: bb9];
    }

    bb66: {
        StorageLive(_185);
        _185 = ((_128 as Continue).0: ());
        _127 = _185;
        StorageDead(_185);
        StorageDead(_128);
        StorageDead(_127);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        _191 = &((*_3).3: anchor_lang::prelude::Pubkey);
        _190 = &_191;
        StorageLive(_192);
        _464 = deref_copy (*_32);
        _192 = &((*_464).0: &anchor_lang::prelude::Pubkey);
        _189 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _190, move _192) -> [return: bb69, unwind: bb198];
    }

    bb67: {
        StorageLive(_182);
        _182 = ((_128 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_184);
        _184 = _182;
        _0 = <std::result::Result<SerumFulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _184) -> [return: bb68, unwind: bb198];
    }

    bb68: {
        StorageDead(_184);
        StorageDead(_182);
        StorageDead(_128);
        StorageDead(_127);
        goto -> bb181;
    }

    bb69: {
        switchInt(move _189) -> [0: bb71, otherwise: bb70];
    }

    bb70: {
        StorageDead(_192);
        StorageDead(_191);
        StorageDead(_190);
        StorageLive(_193);
        _193 = ();
        _188 = std::result::Result::<(), error::ErrorCode>::Ok(move _193);
        StorageDead(_193);
        goto -> bb78;
    }

    bb71: {
        StorageDead(_192);
        StorageDead(_191);
        StorageDead(_190);
        StorageLive(_194);
        _194 = error::ErrorCode::InvalidFulfillmentConfig;
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        _456 = const _;
        _205 = &(*_456);
        _204 = &(*_205);
        _203 = move _204 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_204);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        _213 = &_194;
        _212 = &(*_213);
        _211 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _212) -> [return: bb72, unwind: bb198];
    }

    bb72: {
        StorageDead(_212);
        _210 = [move _211];
        StorageDead(_211);
        _209 = &_210;
        _208 = &(*_209);
        _207 = move _208 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_208);
        _202 = Arguments::<'_>::new_v1(move _203, move _207) -> [return: bb73, unwind: bb198];
    }

    bb73: {
        StorageDead(_207);
        StorageDead(_203);
        _201 = format(move _202) -> [return: bb74, unwind: bb198];
    }

    bb74: {
        StorageDead(_202);
        StorageDead(_213);
        StorageDead(_210);
        StorageDead(_209);
        StorageDead(_205);
        _200 = move _201;
        StorageDead(_201);
        _199 = &_200;
        _198 = &(*_199);
        _197 = <String as Deref>::deref(move _198) -> [return: bb75, unwind: bb193];
    }

    bb75: {
        _196 = &(*_197);
        StorageDead(_198);
        _195 = solana_program::log::sol_log(move _196) -> [return: bb76, unwind: bb193];
    }

    bb76: {
        StorageDead(_196);
        drop(_200) -> [return: bb77, unwind: bb198];
    }

    bb77: {
        StorageDead(_200);
        StorageDead(_199);
        StorageDead(_197);
        StorageDead(_195);
        StorageLive(_214);
        _214 = _194;
        _188 = std::result::Result::<(), error::ErrorCode>::Err(move _214);
        StorageDead(_214);
        StorageDead(_194);
        goto -> bb78;
    }

    bb78: {
        StorageDead(_189);
        _187 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _188) -> [return: bb79, unwind: bb198];
    }

    bb79: {
        StorageDead(_188);
        _215 = discriminant(_187);
        switchInt(move _215) -> [0: bb80, 1: bb81, otherwise: bb9];
    }

    bb80: {
        StorageLive(_219);
        _219 = ((_187 as Continue).0: ());
        _186 = _219;
        StorageDead(_219);
        StorageDead(_187);
        StorageDead(_186);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        _225 = &((*_4).3: anchor_lang::prelude::Pubkey);
        _224 = &_225;
        StorageLive(_226);
        _465 = deref_copy (*_33);
        _226 = &((*_465).0: &anchor_lang::prelude::Pubkey);
        _223 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _224, move _226) -> [return: bb83, unwind: bb198];
    }

    bb81: {
        StorageLive(_216);
        _216 = ((_187 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_218);
        _218 = _216;
        _0 = <std::result::Result<SerumFulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _218) -> [return: bb82, unwind: bb198];
    }

    bb82: {
        StorageDead(_218);
        StorageDead(_216);
        StorageDead(_187);
        StorageDead(_186);
        goto -> bb181;
    }

    bb83: {
        switchInt(move _223) -> [0: bb85, otherwise: bb84];
    }

    bb84: {
        StorageDead(_226);
        StorageDead(_225);
        StorageDead(_224);
        StorageLive(_227);
        _227 = ();
        _222 = std::result::Result::<(), error::ErrorCode>::Ok(move _227);
        StorageDead(_227);
        goto -> bb92;
    }

    bb85: {
        StorageDead(_226);
        StorageDead(_225);
        StorageDead(_224);
        StorageLive(_228);
        _228 = error::ErrorCode::InvalidFulfillmentConfig;
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        _455 = const _;
        _239 = &(*_455);
        _238 = &(*_239);
        _237 = move _238 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_238);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        _247 = &_228;
        _246 = &(*_247);
        _245 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _246) -> [return: bb86, unwind: bb198];
    }

    bb86: {
        StorageDead(_246);
        _244 = [move _245];
        StorageDead(_245);
        _243 = &_244;
        _242 = &(*_243);
        _241 = move _242 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_242);
        _236 = Arguments::<'_>::new_v1(move _237, move _241) -> [return: bb87, unwind: bb198];
    }

    bb87: {
        StorageDead(_241);
        StorageDead(_237);
        _235 = format(move _236) -> [return: bb88, unwind: bb198];
    }

    bb88: {
        StorageDead(_236);
        StorageDead(_247);
        StorageDead(_244);
        StorageDead(_243);
        StorageDead(_239);
        _234 = move _235;
        StorageDead(_235);
        _233 = &_234;
        _232 = &(*_233);
        _231 = <String as Deref>::deref(move _232) -> [return: bb89, unwind: bb192];
    }

    bb89: {
        _230 = &(*_231);
        StorageDead(_232);
        _229 = solana_program::log::sol_log(move _230) -> [return: bb90, unwind: bb192];
    }

    bb90: {
        StorageDead(_230);
        drop(_234) -> [return: bb91, unwind: bb198];
    }

    bb91: {
        StorageDead(_234);
        StorageDead(_233);
        StorageDead(_231);
        StorageDead(_229);
        StorageLive(_248);
        _248 = _228;
        _222 = std::result::Result::<(), error::ErrorCode>::Err(move _248);
        StorageDead(_248);
        StorageDead(_228);
        goto -> bb92;
    }

    bb92: {
        StorageDead(_223);
        _221 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _222) -> [return: bb93, unwind: bb198];
    }

    bb93: {
        StorageDead(_222);
        _249 = discriminant(_221);
        switchInt(move _249) -> [0: bb94, 1: bb95, otherwise: bb9];
    }

    bb94: {
        StorageLive(_253);
        _253 = ((_221 as Continue).0: ());
        _220 = _253;
        StorageDead(_253);
        StorageDead(_221);
        StorageDead(_220);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        _261 = &_46;
        _260 = <Ref<'_, SerumV3FulfillmentConfig> as Deref>::deref(move _261) -> [return: bb97, unwind: bb198];
    }

    bb95: {
        StorageLive(_250);
        _250 = ((_221 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_252);
        _252 = _250;
        _0 = <std::result::Result<SerumFulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _252) -> [return: bb96, unwind: bb198];
    }

    bb96: {
        StorageDead(_252);
        StorageDead(_250);
        StorageDead(_221);
        StorageDead(_220);
        goto -> bb181;
    }

    bb97: {
        StorageDead(_261);
        _259 = &((*_260).1: anchor_lang::prelude::Pubkey);
        _258 = &_259;
        StorageLive(_262);
        _466 = deref_copy (*_20);
        _262 = &((*_466).0: &anchor_lang::prelude::Pubkey);
        _257 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _258, move _262) -> [return: bb98, unwind: bb198];
    }

    bb98: {
        switchInt(move _257) -> [0: bb100, otherwise: bb99];
    }

    bb99: {
        StorageDead(_262);
        StorageDead(_260);
        StorageDead(_259);
        StorageDead(_258);
        StorageLive(_263);
        _263 = ();
        _256 = std::result::Result::<(), error::ErrorCode>::Ok(move _263);
        StorageDead(_263);
        goto -> bb107;
    }

    bb100: {
        StorageDead(_262);
        StorageDead(_260);
        StorageDead(_259);
        StorageDead(_258);
        StorageLive(_264);
        _264 = error::ErrorCode::InvalidFulfillmentConfig;
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        _454 = const _;
        _275 = &(*_454);
        _274 = &(*_275);
        _273 = move _274 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_274);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        _283 = &_264;
        _282 = &(*_283);
        _281 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _282) -> [return: bb101, unwind: bb198];
    }

    bb101: {
        StorageDead(_282);
        _280 = [move _281];
        StorageDead(_281);
        _279 = &_280;
        _278 = &(*_279);
        _277 = move _278 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_278);
        _272 = Arguments::<'_>::new_v1(move _273, move _277) -> [return: bb102, unwind: bb198];
    }

    bb102: {
        StorageDead(_277);
        StorageDead(_273);
        _271 = format(move _272) -> [return: bb103, unwind: bb198];
    }

    bb103: {
        StorageDead(_272);
        StorageDead(_283);
        StorageDead(_280);
        StorageDead(_279);
        StorageDead(_275);
        _270 = move _271;
        StorageDead(_271);
        _269 = &_270;
        _268 = &(*_269);
        _267 = <String as Deref>::deref(move _268) -> [return: bb104, unwind: bb191];
    }

    bb104: {
        _266 = &(*_267);
        StorageDead(_268);
        _265 = solana_program::log::sol_log(move _266) -> [return: bb105, unwind: bb191];
    }

    bb105: {
        StorageDead(_266);
        drop(_270) -> [return: bb106, unwind: bb198];
    }

    bb106: {
        StorageDead(_270);
        StorageDead(_269);
        StorageDead(_267);
        StorageDead(_265);
        StorageLive(_284);
        _284 = _264;
        _256 = std::result::Result::<(), error::ErrorCode>::Err(move _284);
        StorageDead(_284);
        StorageDead(_264);
        goto -> bb107;
    }

    bb107: {
        StorageDead(_257);
        _255 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _256) -> [return: bb108, unwind: bb198];
    }

    bb108: {
        StorageDead(_256);
        _285 = discriminant(_255);
        switchInt(move _285) -> [0: bb109, 1: bb110, otherwise: bb9];
    }

    bb109: {
        StorageLive(_289);
        _289 = ((_255 as Continue).0: ());
        _254 = _289;
        StorageDead(_289);
        StorageDead(_255);
        StorageDead(_254);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        _297 = &_46;
        _296 = <Ref<'_, SerumV3FulfillmentConfig> as Deref>::deref(move _297) -> [return: bb112, unwind: bb198];
    }

    bb110: {
        StorageLive(_286);
        _286 = ((_255 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_288);
        _288 = _286;
        _0 = <std::result::Result<SerumFulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _288) -> [return: bb111, unwind: bb198];
    }

    bb111: {
        StorageDead(_288);
        StorageDead(_286);
        StorageDead(_255);
        StorageDead(_254);
        goto -> bb181;
    }

    bb112: {
        StorageDead(_297);
        _295 = &((*_296).2: anchor_lang::prelude::Pubkey);
        _294 = &_295;
        StorageLive(_298);
        _467 = deref_copy (*_21);
        _298 = &((*_467).0: &anchor_lang::prelude::Pubkey);
        _293 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _294, move _298) -> [return: bb113, unwind: bb198];
    }

    bb113: {
        switchInt(move _293) -> [0: bb115, otherwise: bb114];
    }

    bb114: {
        StorageDead(_298);
        StorageDead(_296);
        StorageDead(_295);
        StorageDead(_294);
        StorageLive(_299);
        _299 = ();
        _292 = std::result::Result::<(), error::ErrorCode>::Ok(move _299);
        StorageDead(_299);
        goto -> bb122;
    }

    bb115: {
        StorageDead(_298);
        StorageDead(_296);
        StorageDead(_295);
        StorageDead(_294);
        StorageLive(_300);
        _300 = error::ErrorCode::InvalidFulfillmentConfig;
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        StorageLive(_311);
        _453 = const _;
        _311 = &(*_453);
        _310 = &(*_311);
        _309 = move _310 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_310);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        _319 = &_300;
        _318 = &(*_319);
        _317 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _318) -> [return: bb116, unwind: bb198];
    }

    bb116: {
        StorageDead(_318);
        _316 = [move _317];
        StorageDead(_317);
        _315 = &_316;
        _314 = &(*_315);
        _313 = move _314 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_314);
        _308 = Arguments::<'_>::new_v1(move _309, move _313) -> [return: bb117, unwind: bb198];
    }

    bb117: {
        StorageDead(_313);
        StorageDead(_309);
        _307 = format(move _308) -> [return: bb118, unwind: bb198];
    }

    bb118: {
        StorageDead(_308);
        StorageDead(_319);
        StorageDead(_316);
        StorageDead(_315);
        StorageDead(_311);
        _306 = move _307;
        StorageDead(_307);
        _305 = &_306;
        _304 = &(*_305);
        _303 = <String as Deref>::deref(move _304) -> [return: bb119, unwind: bb190];
    }

    bb119: {
        _302 = &(*_303);
        StorageDead(_304);
        _301 = solana_program::log::sol_log(move _302) -> [return: bb120, unwind: bb190];
    }

    bb120: {
        StorageDead(_302);
        drop(_306) -> [return: bb121, unwind: bb198];
    }

    bb121: {
        StorageDead(_306);
        StorageDead(_305);
        StorageDead(_303);
        StorageDead(_301);
        StorageLive(_320);
        _320 = _300;
        _292 = std::result::Result::<(), error::ErrorCode>::Err(move _320);
        StorageDead(_320);
        StorageDead(_300);
        goto -> bb122;
    }

    bb122: {
        StorageDead(_293);
        _291 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _292) -> [return: bb123, unwind: bb198];
    }

    bb123: {
        StorageDead(_292);
        _321 = discriminant(_291);
        switchInt(move _321) -> [0: bb124, 1: bb125, otherwise: bb9];
    }

    bb124: {
        StorageLive(_325);
        _325 = ((_291 as Continue).0: ());
        _290 = _325;
        StorageDead(_325);
        StorageDead(_291);
        StorageDead(_290);
        StorageLive(_326);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        _333 = &_46;
        _332 = <Ref<'_, SerumV3FulfillmentConfig> as Deref>::deref(move _333) -> [return: bb127, unwind: bb198];
    }

    bb125: {
        StorageLive(_322);
        _322 = ((_291 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_324);
        _324 = _322;
        _0 = <std::result::Result<SerumFulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _324) -> [return: bb126, unwind: bb198];
    }

    bb126: {
        StorageDead(_324);
        StorageDead(_322);
        StorageDead(_291);
        StorageDead(_290);
        goto -> bb181;
    }

    bb127: {
        StorageDead(_333);
        _331 = &((*_332).9: anchor_lang::prelude::Pubkey);
        _330 = &_331;
        StorageLive(_334);
        _468 = deref_copy (*_28);
        _334 = &((*_468).0: &anchor_lang::prelude::Pubkey);
        _329 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _330, move _334) -> [return: bb128, unwind: bb198];
    }

    bb128: {
        switchInt(move _329) -> [0: bb130, otherwise: bb129];
    }

    bb129: {
        StorageDead(_334);
        StorageDead(_332);
        StorageDead(_331);
        StorageDead(_330);
        StorageLive(_335);
        _335 = ();
        _328 = std::result::Result::<(), error::ErrorCode>::Ok(move _335);
        StorageDead(_335);
        goto -> bb137;
    }

    bb130: {
        StorageDead(_334);
        StorageDead(_332);
        StorageDead(_331);
        StorageDead(_330);
        StorageLive(_336);
        _336 = error::ErrorCode::InvalidFulfillmentConfig;
        StorageLive(_337);
        StorageLive(_338);
        StorageLive(_339);
        StorageLive(_340);
        StorageLive(_341);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        _452 = const _;
        _347 = &(*_452);
        _346 = &(*_347);
        _345 = move _346 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_346);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        StorageLive(_355);
        _355 = &_336;
        _354 = &(*_355);
        _353 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _354) -> [return: bb131, unwind: bb198];
    }

    bb131: {
        StorageDead(_354);
        _352 = [move _353];
        StorageDead(_353);
        _351 = &_352;
        _350 = &(*_351);
        _349 = move _350 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_350);
        _344 = Arguments::<'_>::new_v1(move _345, move _349) -> [return: bb132, unwind: bb198];
    }

    bb132: {
        StorageDead(_349);
        StorageDead(_345);
        _343 = format(move _344) -> [return: bb133, unwind: bb198];
    }

    bb133: {
        StorageDead(_344);
        StorageDead(_355);
        StorageDead(_352);
        StorageDead(_351);
        StorageDead(_347);
        _342 = move _343;
        StorageDead(_343);
        _341 = &_342;
        _340 = &(*_341);
        _339 = <String as Deref>::deref(move _340) -> [return: bb134, unwind: bb189];
    }

    bb134: {
        _338 = &(*_339);
        StorageDead(_340);
        _337 = solana_program::log::sol_log(move _338) -> [return: bb135, unwind: bb189];
    }

    bb135: {
        StorageDead(_338);
        drop(_342) -> [return: bb136, unwind: bb198];
    }

    bb136: {
        StorageDead(_342);
        StorageDead(_341);
        StorageDead(_339);
        StorageDead(_337);
        StorageLive(_356);
        _356 = _336;
        _328 = std::result::Result::<(), error::ErrorCode>::Err(move _356);
        StorageDead(_356);
        StorageDead(_336);
        goto -> bb137;
    }

    bb137: {
        StorageDead(_329);
        _327 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _328) -> [return: bb138, unwind: bb198];
    }

    bb138: {
        StorageDead(_328);
        _357 = discriminant(_327);
        switchInt(move _357) -> [0: bb139, 1: bb140, otherwise: bb9];
    }

    bb139: {
        StorageLive(_361);
        _361 = ((_327 as Continue).0: ());
        _326 = _361;
        StorageDead(_361);
        StorageDead(_327);
        StorageDead(_326);
        StorageLive(_362);
        StorageLive(_363);
        StorageLive(_364);
        StorageLive(_365);
        StorageLive(_366);
        StorageLive(_367);
        _469 = deref_copy (*_32);
        _367 = &(*_469);
        _366 = anchor_lang::prelude::Account::<'_, anchor_spl::token::TokenAccount>::try_from(move _367) -> [return: bb142, unwind: bb198];
    }

    bb140: {
        StorageLive(_358);
        _358 = ((_327 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_360);
        _360 = _358;
        _0 = <std::result::Result<SerumFulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _360) -> [return: bb141, unwind: bb198];
    }

    bb141: {
        StorageDead(_360);
        StorageDead(_358);
        StorageDead(_327);
        StorageDead(_326);
        goto -> bb181;
    }

    bb142: {
        StorageDead(_367);
        StorageLive(_368);
        _368 = {closure@programs/drift/src/state/fulfillment_params/serum.rs:278:67: 278:70};
        _365 = std::result::Result::<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/serum.rs:278:67: 278:70}>(move _366, move _368) -> [return: bb143, unwind: bb198];
    }

    bb143: {
        StorageDead(_368);
        StorageDead(_366);
        _364 = <std::result::Result<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>, error::ErrorCode> as Try>::branch(move _365) -> [return: bb144, unwind: bb198];
    }

    bb144: {
        StorageDead(_365);
        _369 = discriminant(_364);
        switchInt(move _369) -> [0: bb145, 1: bb146, otherwise: bb9];
    }

    bb145: {
        StorageLive(_373);
        _373 = move ((_364 as Continue).0: anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>);
        _363 = move _373;
        StorageDead(_373);
        _362 = Box::<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>::new(move _363) -> [return: bb148, unwind: bb198];
    }

    bb146: {
        StorageLive(_370);
        _370 = ((_364 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_372);
        _372 = _370;
        _0 = <std::result::Result<SerumFulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _372) -> [return: bb147, unwind: bb198];
    }

    bb147: {
        StorageDead(_372);
        StorageDead(_370);
        StorageDead(_363);
        StorageDead(_364);
        goto -> bb180;
    }

    bb148: {
        StorageDead(_363);
        StorageDead(_364);
        StorageLive(_374);
        StorageLive(_375);
        StorageLive(_376);
        StorageLive(_377);
        StorageLive(_378);
        StorageLive(_379);
        _470 = deref_copy (*_33);
        _379 = &(*_470);
        _378 = anchor_lang::prelude::Account::<'_, anchor_spl::token::TokenAccount>::try_from(move _379) -> [return: bb149, unwind: bb188];
    }

    bb149: {
        StorageDead(_379);
        StorageLive(_380);
        _380 = {closure@programs/drift/src/state/fulfillment_params/serum.rs:283:68: 283:71};
        _377 = std::result::Result::<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/serum.rs:283:68: 283:71}>(move _378, move _380) -> [return: bb150, unwind: bb188];
    }

    bb150: {
        StorageDead(_380);
        StorageDead(_378);
        _376 = <std::result::Result<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>, error::ErrorCode> as Try>::branch(move _377) -> [return: bb151, unwind: bb188];
    }

    bb151: {
        StorageDead(_377);
        _381 = discriminant(_376);
        switchInt(move _381) -> [0: bb152, 1: bb153, otherwise: bb9];
    }

    bb152: {
        StorageLive(_385);
        _385 = move ((_376 as Continue).0: anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>);
        _375 = move _385;
        StorageDead(_385);
        _374 = Box::<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>::new(move _375) -> [return: bb155, unwind: bb188];
    }

    bb153: {
        StorageLive(_382);
        _382 = ((_376 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_384);
        _384 = _382;
        _0 = <std::result::Result<SerumFulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _384) -> [return: bb154, unwind: bb188];
    }

    bb154: {
        StorageDead(_384);
        StorageDead(_382);
        StorageDead(_375);
        StorageDead(_376);
        goto -> bb179;
    }

    bb155: {
        StorageDead(_375);
        StorageDead(_376);
        StorageLive(_386);
        StorageLive(_387);
        StorageLive(_388);
        StorageLive(_389);
        StorageLive(_390);
        _390 = (*_31);
        _389 = <anchor_lang::prelude::Program<'_, Token> as TryFrom<&anchor_lang::prelude::AccountInfo<'_>>>::try_from(move _390) -> [return: bb156, unwind: bb187];
    }

    bb156: {
        StorageDead(_390);
        StorageLive(_391);
        _391 = {closure@programs/drift/src/state/fulfillment_params/serum.rs:288:87: 288:90};
        _388 = std::result::Result::<anchor_lang::prelude::Program<'_, Token>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/serum.rs:288:87: 288:90}>(move _389, move _391) -> [return: bb157, unwind: bb187];
    }

    bb157: {
        StorageDead(_391);
        StorageDead(_389);
        _387 = <std::result::Result<anchor_lang::prelude::Program<'_, Token>, error::ErrorCode> as Try>::branch(move _388) -> [return: bb158, unwind: bb187];
    }

    bb158: {
        StorageDead(_388);
        _392 = discriminant(_387);
        switchInt(move _392) -> [0: bb159, 1: bb160, otherwise: bb9];
    }

    bb159: {
        StorageLive(_396);
        _396 = move ((_387 as Continue).0: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>);
        _386 = move _396;
        StorageDead(_396);
        StorageDead(_387);
        StorageLive(_397);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        StorageLive(_401);
        StorageLive(_402);
        _402 = &((*_2).4: anchor_lang::prelude::Pubkey);
        _401 = &_402;
        StorageLive(_403);
        _471 = deref_copy (*_34);
        _403 = &((*_471).0: &anchor_lang::prelude::Pubkey);
        _400 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _401, move _403) -> [return: bb162, unwind: bb187];
    }

    bb160: {
        StorageLive(_393);
        _393 = ((_387 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_395);
        _395 = _393;
        _0 = <std::result::Result<SerumFulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _395) -> [return: bb161, unwind: bb187];
    }

    bb161: {
        StorageDead(_395);
        StorageDead(_393);
        StorageDead(_387);
        goto -> bb178;
    }

    bb162: {
        switchInt(move _400) -> [0: bb164, otherwise: bb163];
    }

    bb163: {
        StorageDead(_403);
        StorageDead(_402);
        StorageDead(_401);
        StorageLive(_404);
        _404 = ();
        _399 = std::result::Result::<(), error::ErrorCode>::Ok(move _404);
        StorageDead(_404);
        goto -> bb171;
    }

    bb164: {
        StorageDead(_403);
        StorageDead(_402);
        StorageDead(_401);
        StorageLive(_405);
        _405 = error::ErrorCode::InvalidFulfillmentConfig;
        StorageLive(_406);
        StorageLive(_407);
        StorageLive(_408);
        StorageLive(_409);
        StorageLive(_410);
        StorageLive(_411);
        StorageLive(_412);
        StorageLive(_413);
        StorageLive(_414);
        StorageLive(_415);
        StorageLive(_416);
        _451 = const _;
        _416 = &(*_451);
        _415 = &(*_416);
        _414 = move _415 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_415);
        StorageLive(_418);
        StorageLive(_419);
        StorageLive(_420);
        StorageLive(_421);
        StorageLive(_422);
        StorageLive(_423);
        StorageLive(_424);
        _424 = &_405;
        _423 = &(*_424);
        _422 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _423) -> [return: bb165, unwind: bb187];
    }

    bb165: {
        StorageDead(_423);
        _421 = [move _422];
        StorageDead(_422);
        _420 = &_421;
        _419 = &(*_420);
        _418 = move _419 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_419);
        _413 = Arguments::<'_>::new_v1(move _414, move _418) -> [return: bb166, unwind: bb187];
    }

    bb166: {
        StorageDead(_418);
        StorageDead(_414);
        _412 = format(move _413) -> [return: bb167, unwind: bb187];
    }

    bb167: {
        StorageDead(_413);
        StorageDead(_424);
        StorageDead(_421);
        StorageDead(_420);
        StorageDead(_416);
        _411 = move _412;
        StorageDead(_412);
        _410 = &_411;
        _409 = &(*_410);
        _408 = <String as Deref>::deref(move _409) -> [return: bb168, unwind: bb186];
    }

    bb168: {
        _407 = &(*_408);
        StorageDead(_409);
        _406 = solana_program::log::sol_log(move _407) -> [return: bb169, unwind: bb186];
    }

    bb169: {
        StorageDead(_407);
        drop(_411) -> [return: bb170, unwind: bb187];
    }

    bb170: {
        StorageDead(_411);
        StorageDead(_410);
        StorageDead(_408);
        StorageDead(_406);
        StorageLive(_425);
        _425 = _405;
        _399 = std::result::Result::<(), error::ErrorCode>::Err(move _425);
        StorageDead(_425);
        StorageDead(_405);
        goto -> bb171;
    }

    bb171: {
        StorageDead(_400);
        _398 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _399) -> [return: bb172, unwind: bb187];
    }

    bb172: {
        StorageDead(_399);
        _426 = discriminant(_398);
        switchInt(move _426) -> [0: bb173, 1: bb174, otherwise: bb9];
    }

    bb173: {
        StorageLive(_430);
        _430 = ((_398 as Continue).0: ());
        _397 = _430;
        StorageDead(_430);
        StorageDead(_398);
        StorageDead(_397);
        StorageLive(_431);
        StorageLive(_432);
        _472 = deref_copy (*_30);
        _432 = &(*_472);
        StorageLive(_433);
        StorageLive(_434);
        _473 = deref_copy (*_20);
        _434 = &(*_473);
        StorageLive(_435);
        _474 = deref_copy (*_21);
        _435 = &(*_474);
        StorageLive(_436);
        _475 = deref_copy (*_28);
        _436 = &(*_475);
        _433 = SerumContext::<'_, '_> { serum_program: move _434, serum_market: move _435, serum_open_orders: move _436 };
        StorageDead(_436);
        StorageDead(_435);
        StorageDead(_434);
        StorageLive(_437);
        _476 = deref_copy (*_22);
        _437 = &(*_476);
        StorageLive(_438);
        _477 = deref_copy (*_23);
        _438 = &(*_477);
        StorageLive(_439);
        _478 = deref_copy (*_24);
        _439 = &(*_478);
        StorageLive(_440);
        _479 = deref_copy (*_25);
        _440 = &(*_479);
        StorageLive(_441);
        _480 = deref_copy (*_26);
        _441 = &(*_480);
        StorageLive(_442);
        _481 = deref_copy (*_27);
        _442 = &(*_481);
        StorageLive(_443);
        _443 = move _386;
        StorageLive(_444);
        _444 = move _362;
        StorageLive(_445);
        _445 = move _374;
        StorageLive(_446);
        _482 = deref_copy (*_29);
        _446 = &(*_482);
        StorageLive(_447);
        _483 = deref_copy (*_34);
        _447 = &(*_483);
        StorageLive(_448);
        _448 = ((*_2).15: u8);
        StorageLive(_449);
        _449 = ((*_3).41: u32);
        StorageLive(_450);
        _450 = _5;
        _431 = SerumFulfillmentParams::<'_, '_> { drift_signer: move _432, serum_context: move _433, serum_request_queue: move _437, serum_event_queue: move _438, serum_bids: move _439, serum_asks: move _440, serum_base_vault: move _441, serum_quote_vault: move _442, token_program: move _443, base_market_vault: move _444, quote_market_vault: move _445, srm_vault: move _447, serum_signer: move _446, signer_nonce: move _448, base_mint_decimals: move _449, now: move _450 };
        StorageDead(_450);
        StorageDead(_449);
        StorageDead(_448);
        StorageDead(_447);
        StorageDead(_446);
        StorageDead(_445);
        StorageDead(_444);
        StorageDead(_443);
        StorageDead(_442);
        StorageDead(_441);
        StorageDead(_440);
        StorageDead(_439);
        StorageDead(_438);
        StorageDead(_437);
        StorageDead(_433);
        StorageDead(_432);
        _0 = std::result::Result::<SerumFulfillmentParams<'_, '_>, error::ErrorCode>::Ok(move _431);
        StorageDead(_431);
        StorageDead(_386);
        StorageDead(_374);
        StorageDead(_362);
        drop(_46) -> [return: bb176, unwind: bb199];
    }

    bb174: {
        StorageLive(_427);
        _427 = ((_398 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_429);
        _429 = _427;
        _0 = <std::result::Result<SerumFulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _429) -> [return: bb175, unwind: bb187];
    }

    bb175: {
        StorageDead(_429);
        StorageDead(_427);
        StorageDead(_398);
        StorageDead(_397);
        goto -> bb178;
    }

    bb176: {
        StorageDead(_46);
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_8);
        drop(_6) -> [return: bb177, unwind: bb200];
    }

    bb177: {
        StorageDead(_6);
        goto -> bb185;
    }

    bb178: {
        StorageDead(_386);
        drop(_374) -> [return: bb179, unwind: bb188];
    }

    bb179: {
        StorageDead(_374);
        drop(_362) -> [return: bb180, unwind: bb198];
    }

    bb180: {
        StorageDead(_362);
        goto -> bb181;
    }

    bb181: {
        drop(_46) -> [return: bb182, unwind: bb199];
    }

    bb182: {
        StorageDead(_46);
        goto -> bb183;
    }

    bb183: {
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_8);
        drop(_6) -> [return: bb184, unwind: bb200];
    }

    bb184: {
        StorageDead(_6);
        goto -> bb185;
    }

    bb185: {
        return;
    }

    bb186 (cleanup): {
        drop(_411) -> [return: bb187, unwind terminate(cleanup)];
    }

    bb187 (cleanup): {
        drop(_374) -> [return: bb188, unwind terminate(cleanup)];
    }

    bb188 (cleanup): {
        drop(_362) -> [return: bb198, unwind terminate(cleanup)];
    }

    bb189 (cleanup): {
        drop(_342) -> [return: bb198, unwind terminate(cleanup)];
    }

    bb190 (cleanup): {
        drop(_306) -> [return: bb198, unwind terminate(cleanup)];
    }

    bb191 (cleanup): {
        drop(_270) -> [return: bb198, unwind terminate(cleanup)];
    }

    bb192 (cleanup): {
        drop(_234) -> [return: bb198, unwind terminate(cleanup)];
    }

    bb193 (cleanup): {
        drop(_200) -> [return: bb198, unwind terminate(cleanup)];
    }

    bb194 (cleanup): {
        drop(_161) -> [return: bb198, unwind terminate(cleanup)];
    }

    bb195 (cleanup): {
        drop(_142) -> [return: bb198, unwind terminate(cleanup)];
    }

    bb196 (cleanup): {
        drop(_107) -> [return: bb198, unwind terminate(cleanup)];
    }

    bb197 (cleanup): {
        drop(_73) -> [return: bb198, unwind terminate(cleanup)];
    }

    bb198 (cleanup): {
        drop(_46) -> [return: bb199, unwind terminate(cleanup)];
    }

    bb199 (cleanup): {
        drop(_6) -> [return: bb200, unwind terminate(cleanup)];
    }

    bb200 (cleanup): {
        resume;
    }

    bb201 (cleanup): {
        _488 = discriminant(_47);
        goto -> bb199;
    }
}
