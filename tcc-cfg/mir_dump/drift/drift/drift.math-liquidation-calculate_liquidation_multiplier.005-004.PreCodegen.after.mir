// MIR for `calculate_liquidation_multiplier` after PreCodegen

fn calculate_liquidation_multiplier(_1: u32, _2: LiquidationMultiplierType) -> std::result::Result<u32, error::ErrorCode> {
    debug liquidation_fee => _1;
    debug multiplier_type => _2;
    let mut _0: std::result::Result<u32, error::ErrorCode>;
    let mut _3: isize;
    let mut _4: u32;
    let mut _5: u32;

    bb0: {
        _3 = discriminant(_2);
        switchInt(move _3) -> [0: bb1, 1: bb3, otherwise: bb2];
    }

    bb1: {
        StorageLive(_5);
        _5 = _1;
        _0 = <u32 as SafeMath>::safe_sub(const _, move _5) -> [return: bb5, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        StorageLive(_4);
        _4 = _1;
        _0 = <u32 as SafeMath>::safe_add(const _, move _4) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_4);
        goto -> bb6;
    }

    bb5: {
        StorageDead(_5);
        goto -> bb6;
    }

    bb6: {
        return;
    }
}
