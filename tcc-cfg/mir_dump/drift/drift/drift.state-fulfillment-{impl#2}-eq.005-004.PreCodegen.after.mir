// MIR for `state::fulfillment::<impl at programs/drift/src/state/fulfillment.rs:3:17: 3:26>::eq` after PreCodegen

fn state::fulfillment::<impl at programs/drift/src/state/fulfillment.rs:3:17: 3:26>::eq(_1: &PerpFulfillmentMethod, _2: &PerpFulfillmentMethod) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    let mut _4: &state::fulfillment::PerpFulfillmentMethod;
    let mut _6: &state::fulfillment::PerpFulfillmentMethod;
    let mut _7: bool;
    let mut _8: isize;
    let mut _9: isize;
    let mut _10: (&state::fulfillment::PerpFulfillmentMethod, &state::fulfillment::PerpFulfillmentMethod);
    let mut _11: &state::fulfillment::PerpFulfillmentMethod;
    let mut _12: &state::fulfillment::PerpFulfillmentMethod;
    let mut _13: isize;
    let mut _14: isize;
    let mut _15: isize;
    let mut _18: &std::option::Option<u64>;
    let mut _19: &std::option::Option<u64>;
    let mut _26: bool;
    let mut _27: &anchor_lang::prelude::Pubkey;
    let mut _28: &anchor_lang::prelude::Pubkey;
    let mut _29: bool;
    let mut _30: u16;
    let mut _31: u16;
    let mut _32: u64;
    let mut _33: u64;
    let mut _34: !;
    let mut _35: &state::fulfillment::PerpFulfillmentMethod;
    let mut _36: &state::fulfillment::PerpFulfillmentMethod;
    let mut _37: &state::fulfillment::PerpFulfillmentMethod;
    let mut _38: &state::fulfillment::PerpFulfillmentMethod;
    let mut _39: &state::fulfillment::PerpFulfillmentMethod;
    let mut _40: &state::fulfillment::PerpFulfillmentMethod;
    let mut _41: &state::fulfillment::PerpFulfillmentMethod;
    let mut _42: &state::fulfillment::PerpFulfillmentMethod;
    let mut _43: &state::fulfillment::PerpFulfillmentMethod;
    let mut _44: &state::fulfillment::PerpFulfillmentMethod;
    let mut _45: &state::fulfillment::PerpFulfillmentMethod;
    scope 1 {
        debug __self_tag => _3;
        let _5: isize;
        scope 2 {
            debug __arg1_tag => _5;
            let _16: &std::option::Option<u64>;
            let _17: &std::option::Option<u64>;
            let _20: &anchor_lang::prelude::Pubkey;
            let _21: &u16;
            let _22: &u64;
            let _23: &anchor_lang::prelude::Pubkey;
            let _24: &u16;
            let _25: &u64;
            scope 3 {
                debug __self_0 => _16;
                debug __arg1_0 => _17;
            }
            scope 4 {
                debug __self_0 => _20;
                debug __self_1 => _21;
                debug __self_2 => _22;
                debug __arg1_0 => _23;
                debug __arg1_1 => _24;
                debug __arg1_2 => _25;
            }
            scope 5 {
            }
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = &(*_1);
        _3 = discriminant((*_4));
        StorageDead(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &(*_2);
        _5 = discriminant((*_6));
        StorageDead(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _3;
        StorageLive(_9);
        _9 = _5;
        _7 = Eq(move _8, move _9);
        switchInt(move _7) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_10);
        StorageLive(_11);
        _11 = _1;
        StorageLive(_12);
        _12 = _2;
        _10 = (move _11, move _12);
        StorageDead(_12);
        StorageDead(_11);
        _35 = deref_copy (_10.0: &state::fulfillment::PerpFulfillmentMethod);
        _15 = discriminant((*_35));
        switchInt(move _15) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb2: {
        StorageDead(_9);
        StorageDead(_8);
        _0 = const false;
        goto -> bb17;
    }

    bb3: {
        _36 = deref_copy (_10.1: &state::fulfillment::PerpFulfillmentMethod);
        _13 = discriminant((*_36));
        switchInt(move _13) -> [0: bb6, otherwise: bb4];
    }

    bb4: {
        StorageLive(_34);
        unreachable;
    }

    bb5: {
        _37 = deref_copy (_10.1: &state::fulfillment::PerpFulfillmentMethod);
        _14 = discriminant((*_37));
        switchInt(move _14) -> [1: bb8, otherwise: bb4];
    }

    bb6: {
        StorageLive(_16);
        _38 = deref_copy (_10.0: &state::fulfillment::PerpFulfillmentMethod);
        _16 = &(((*_38) as AMM).0: std::option::Option<u64>);
        StorageLive(_17);
        _39 = deref_copy (_10.1: &state::fulfillment::PerpFulfillmentMethod);
        _17 = &(((*_39) as AMM).0: std::option::Option<u64>);
        StorageLive(_18);
        _18 = &(*_16);
        StorageLive(_19);
        _19 = &(*_17);
        _0 = <Option<u64> as PartialEq>::eq(move _18, move _19) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb16;
    }

    bb8: {
        StorageLive(_20);
        _40 = deref_copy (_10.0: &state::fulfillment::PerpFulfillmentMethod);
        _20 = &(((*_40) as Match).0: anchor_lang::prelude::Pubkey);
        StorageLive(_21);
        _41 = deref_copy (_10.0: &state::fulfillment::PerpFulfillmentMethod);
        _21 = &(((*_41) as Match).1: u16);
        StorageLive(_22);
        _42 = deref_copy (_10.0: &state::fulfillment::PerpFulfillmentMethod);
        _22 = &(((*_42) as Match).2: u64);
        StorageLive(_23);
        _43 = deref_copy (_10.1: &state::fulfillment::PerpFulfillmentMethod);
        _23 = &(((*_43) as Match).0: anchor_lang::prelude::Pubkey);
        StorageLive(_24);
        _44 = deref_copy (_10.1: &state::fulfillment::PerpFulfillmentMethod);
        _24 = &(((*_44) as Match).1: u16);
        StorageLive(_25);
        _45 = deref_copy (_10.1: &state::fulfillment::PerpFulfillmentMethod);
        _25 = &(((*_45) as Match).2: u64);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &(*_20);
        StorageLive(_28);
        _28 = &(*_23);
        _26 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _27, move _28) -> [return: bb9, unwind continue];
    }

    bb9: {
        switchInt(move _26) -> [0: bb13, otherwise: bb10];
    }

    bb10: {
        StorageDead(_28);
        StorageDead(_27);
        StorageLive(_29);
        StorageLive(_30);
        _30 = (*_21);
        StorageLive(_31);
        _31 = (*_24);
        _29 = Eq(move _30, move _31);
        switchInt(move _29) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        StorageDead(_31);
        StorageDead(_30);
        StorageLive(_32);
        _32 = (*_22);
        StorageLive(_33);
        _33 = (*_25);
        _0 = Eq(move _32, move _33);
        StorageDead(_33);
        StorageDead(_32);
        goto -> bb15;
    }

    bb12: {
        StorageDead(_31);
        StorageDead(_30);
        goto -> bb14;
    }

    bb13: {
        StorageDead(_28);
        StorageDead(_27);
        goto -> bb14;
    }

    bb14: {
        _0 = const false;
        goto -> bb15;
    }

    bb15: {
        StorageDead(_29);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        goto -> bb16;
    }

    bb16: {
        StorageDead(_10);
        goto -> bb17;
    }

    bb17: {
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_3);
        return;
    }
}
