// MIR for `if_staker::handle_add_insurance_fund_stake` after PreCodegen

fn if_staker::handle_add_insurance_fund_stake(_1: anchor_lang::context::Context<'_, '_, '_, '_, if_staker::AddInsuranceFundStake<'_>>, _2: u16, _3: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug market_index => _2;
    debug amount => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: ();
    let mut _5: bool;
    let mut _6: u64;
    let mut _7: !;
    let mut _8: anchor_lang::error::Error;
    let mut _9: error::ErrorCode;
    let _10: anchor_lang::prelude::Clock;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _12: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _13: isize;
    let _14: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _15: !;
    let mut _16: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _17: anchor_lang::prelude::Clock;
    let mut _20: std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>>;
    let mut _22: std::result::Result<std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>, error::ErrorCode>;
    let mut _23: std::result::Result<std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>, anchor_lang::error::Error>;
    let mut _24: &anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _25: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _26: isize;
    let mut _28: !;
    let mut _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _32: std::cell::RefMut<'_, state::user::UserStats>;
    let mut _33: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _34: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, error::ErrorCode>;
    let mut _35: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _36: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _37: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _38: isize;
    let mut _40: !;
    let mut _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _44: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _46: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _47: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _48: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _49: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _50: isize;
    let mut _52: !;
    let mut _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _57: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _58: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _59: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _61: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>;
    let mut _62: std::result::Result<std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, error::ErrorCode>;
    let mut _63: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _64: isize;
    let mut _66: !;
    let mut _67: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _69: ();
    let mut _70: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _71: std::result::Result<(), error::ErrorCode>;
    let mut _72: bool;
    let mut _73: &state::spot_market::SpotMarket;
    let _74: &state::spot_market::SpotMarket;
    let mut _75: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _76: state::paused_operations::InsuranceFundOperation;
    let mut _77: ();
    let _79: ();
    let mut _80: &str;
    let _81: &str;
    let mut _82: &std::string::String;
    let _83: &std::string::String;
    let _84: std::string::String;
    let mut _86: std::fmt::Arguments<'_>;
    let mut _87: &[&str];
    let mut _88: &[&str; 2];
    let _89: &[&str; 2];
    let _90: [&str; 2];
    let mut _91: &[core::fmt::rt::Argument<'_>];
    let mut _92: &[core::fmt::rt::Argument<'_>; 1];
    let _93: &[core::fmt::rt::Argument<'_>; 1];
    let _94: [core::fmt::rt::Argument<'_>; 1];
    let mut _95: core::fmt::rt::Argument<'_>;
    let mut _96: &error::ErrorCode;
    let _97: &error::ErrorCode;
    let _98: ();
    let mut _99: &str;
    let _100: &str;
    let mut _101: &std::string::String;
    let _102: &std::string::String;
    let _103: std::string::String;
    let mut _105: std::fmt::Arguments<'_>;
    let mut _106: &[&str];
    let mut _107: &[&str; 1];
    let _108: &[&str; 1];
    let _109: [&str; 1];
    let mut _110: error::ErrorCode;
    let mut _111: isize;
    let mut _113: !;
    let mut _114: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _116: ();
    let mut _117: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _118: std::result::Result<(), error::ErrorCode>;
    let mut _119: bool;
    let mut _120: u16;
    let mut _121: &state::insurance_fund_stake::InsuranceFundStake;
    let mut _122: &std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _123: u16;
    let mut _124: ();
    let _126: ();
    let mut _127: &str;
    let _128: &str;
    let mut _129: &std::string::String;
    let _130: &std::string::String;
    let _131: std::string::String;
    let mut _133: std::fmt::Arguments<'_>;
    let mut _134: &[&str];
    let mut _135: &[&str; 2];
    let _136: &[&str; 2];
    let _137: [&str; 2];
    let mut _138: &[core::fmt::rt::Argument<'_>];
    let mut _139: &[core::fmt::rt::Argument<'_>; 1];
    let _140: &[core::fmt::rt::Argument<'_>; 1];
    let _141: [core::fmt::rt::Argument<'_>; 1];
    let mut _142: core::fmt::rt::Argument<'_>;
    let mut _143: &error::ErrorCode;
    let _144: &error::ErrorCode;
    let _145: ();
    let mut _146: &str;
    let _147: &str;
    let mut _148: error::ErrorCode;
    let mut _149: isize;
    let mut _151: !;
    let mut _152: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _154: ();
    let mut _155: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _156: std::result::Result<(), error::ErrorCode>;
    let mut _157: bool;
    let mut _158: &state::perp_market::MarketStatus;
    let _159: &state::spot_market::SpotMarket;
    let mut _160: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _161: &state::perp_market::MarketStatus;
    let _162: state::perp_market::MarketStatus;
    let mut _163: ();
    let _165: ();
    let mut _166: &str;
    let _167: &str;
    let mut _168: &std::string::String;
    let _169: &std::string::String;
    let _170: std::string::String;
    let mut _172: std::fmt::Arguments<'_>;
    let mut _173: &[&str];
    let mut _174: &[&str; 2];
    let _175: &[&str; 2];
    let _176: [&str; 2];
    let mut _177: &[core::fmt::rt::Argument<'_>];
    let mut _178: &[core::fmt::rt::Argument<'_>; 1];
    let _179: &[core::fmt::rt::Argument<'_>; 1];
    let _180: [core::fmt::rt::Argument<'_>; 1];
    let mut _181: core::fmt::rt::Argument<'_>;
    let mut _182: &error::ErrorCode;
    let _183: &error::ErrorCode;
    let _184: ();
    let mut _185: &str;
    let _186: &str;
    let mut _187: &std::string::String;
    let _188: &std::string::String;
    let _189: std::string::String;
    let mut _191: std::fmt::Arguments<'_>;
    let mut _192: &[&str];
    let mut _193: &[&str; 2];
    let _194: &[&str; 2];
    let _195: [&str; 2];
    let mut _196: &[core::fmt::rt::Argument<'_>];
    let mut _197: &[core::fmt::rt::Argument<'_>; 1];
    let _198: &[core::fmt::rt::Argument<'_>; 1];
    let _199: [core::fmt::rt::Argument<'_>; 1];
    let mut _200: core::fmt::rt::Argument<'_>;
    let mut _201: &u16;
    let _202: &u16;
    let _203: &state::spot_market::SpotMarket;
    let mut _204: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _205: error::ErrorCode;
    let mut _206: isize;
    let mut _208: !;
    let mut _209: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _211: ();
    let mut _212: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _213: std::result::Result<(), error::ErrorCode>;
    let mut _214: bool;
    let mut _215: u128;
    let mut _216: &state::insurance_fund_stake::InsuranceFundStake;
    let mut _217: &std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _218: bool;
    let mut _219: u64;
    let mut _220: &state::insurance_fund_stake::InsuranceFundStake;
    let mut _221: &std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _222: ();
    let _224: ();
    let mut _225: &str;
    let _226: &str;
    let mut _227: &std::string::String;
    let _228: &std::string::String;
    let _229: std::string::String;
    let mut _231: std::fmt::Arguments<'_>;
    let mut _232: &[&str];
    let mut _233: &[&str; 2];
    let _234: &[&str; 2];
    let _235: [&str; 2];
    let mut _236: &[core::fmt::rt::Argument<'_>];
    let mut _237: &[core::fmt::rt::Argument<'_>; 1];
    let _238: &[core::fmt::rt::Argument<'_>; 1];
    let _239: [core::fmt::rt::Argument<'_>; 1];
    let mut _240: core::fmt::rt::Argument<'_>;
    let mut _241: &error::ErrorCode;
    let _242: &error::ErrorCode;
    let _243: ();
    let mut _244: &str;
    let _245: &str;
    let mut _246: error::ErrorCode;
    let mut _247: isize;
    let mut _249: !;
    let mut _250: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _252: ();
    let _253: ();
    let mut _254: bool;
    let mut _255: &state::spot_market::SpotMarket;
    let _256: &state::spot_market::SpotMarket;
    let mut _257: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _258: ();
    let mut _259: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _260: std::result::Result<(), anchor_lang::error::Error>;
    let mut _261: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _262: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _263: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _264: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _265: &mut state::spot_market::SpotMarket;
    let mut _266: &mut state::spot_market::SpotMarket;
    let mut _267: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _268: i64;
    let mut _269: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let _270: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _271: &anchor_lang::prelude::AccountInfo<'_>;
    let _272: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _273: &state::state::State;
    let _274: &state::state::State;
    let mut _275: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _276: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let _277: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _278: std::option::Option<&mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>;
    let mut _279: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _280: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _281: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _282: &std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _283: isize;
    let mut _285: !;
    let mut _286: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _288: ();
    let mut _289: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _290: std::result::Result<(), anchor_lang::error::Error>;
    let mut _291: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _292: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _293: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _294: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _295: &mut state::spot_market::SpotMarket;
    let mut _296: &mut state::spot_market::SpotMarket;
    let mut _297: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _298: i64;
    let mut _299: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let _300: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _301: &anchor_lang::prelude::AccountInfo<'_>;
    let _302: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _303: &state::state::State;
    let _304: &state::state::State;
    let mut _305: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _306: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let _307: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _308: std::option::Option<&mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>;
    let mut _309: isize;
    let mut _311: !;
    let mut _312: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _314: ();
    let mut _315: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _316: std::result::Result<(), anchor_lang::error::Error>;
    let mut _317: &mut anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _318: isize;
    let mut _320: !;
    let mut _321: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _323: ();
    let mut _324: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _325: std::result::Result<(), anchor_lang::error::Error>;
    let mut _326: &mut anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _327: isize;
    let mut _329: !;
    let mut _330: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _332: i64;
    let mut _333: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _334: std::result::Result<i64, error::ErrorCode>;
    let mut _335: &state::spot_market::SpotMarket;
    let _336: &state::spot_market::SpotMarket;
    let mut _337: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _338: u64;
    let mut _339: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _340: &anchor_spl::token_interface::TokenAccount;
    let _341: &anchor_spl::token_interface::TokenAccount;
    let mut _342: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _343: isize;
    let mut _345: !;
    let mut _346: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _348: ();
    let mut _349: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _350: std::result::Result<(), error::ErrorCode>;
    let mut _351: u64;
    let mut _352: u64;
    let mut _353: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _354: &anchor_spl::token_interface::TokenAccount;
    let _355: &anchor_spl::token_interface::TokenAccount;
    let mut _356: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _357: &mut state::insurance_fund_stake::InsuranceFundStake;
    let mut _358: &mut state::insurance_fund_stake::InsuranceFundStake;
    let mut _359: &mut std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _360: &mut state::user::UserStats;
    let mut _361: &mut state::user::UserStats;
    let mut _362: &mut std::cell::RefMut<'_, state::user::UserStats>;
    let mut _363: &mut state::spot_market::SpotMarket;
    let mut _364: &mut state::spot_market::SpotMarket;
    let mut _365: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _366: i64;
    let mut _367: isize;
    let mut _369: !;
    let mut _370: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _372: ();
    let mut _373: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _374: std::result::Result<(), anchor_lang::error::Error>;
    let mut _375: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let _376: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _377: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _378: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _379: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _380: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _381: &anchor_lang::prelude::AccountInfo<'_>;
    let _382: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _383: &anchor_lang::prelude::Signer<'_>;
    let _384: &anchor_lang::prelude::Signer<'_>;
    let mut _385: u64;
    let mut _386: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let _387: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _388: std::option::Option<&mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>;
    let mut _389: bool;
    let mut _390: &state::spot_market::SpotMarket;
    let _391: &state::spot_market::SpotMarket;
    let mut _392: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _393: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _394: isize;
    let mut _396: !;
    let mut _397: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _399: ();
    let mut _407: &mut instructions::if_staker::AddInsuranceFundStake<'_>;
    let mut _408: &mut instructions::if_staker::AddInsuranceFundStake<'_>;
    let mut _409: &mut instructions::if_staker::AddInsuranceFundStake<'_>;
    let mut _410: &mut instructions::if_staker::AddInsuranceFundStake<'_>;
    let mut _411: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _412: &mut instructions::if_staker::AddInsuranceFundStake<'_>;
    let mut _413: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _414: &mut instructions::if_staker::AddInsuranceFundStake<'_>;
    let mut _415: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _416: &mut instructions::if_staker::AddInsuranceFundStake<'_>;
    let mut _417: &mut instructions::if_staker::AddInsuranceFundStake<'_>;
    let mut _418: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _419: &mut instructions::if_staker::AddInsuranceFundStake<'_>;
    let mut _420: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _421: &mut instructions::if_staker::AddInsuranceFundStake<'_>;
    let mut _422: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _423: &mut instructions::if_staker::AddInsuranceFundStake<'_>;
    let mut _424: &mut instructions::if_staker::AddInsuranceFundStake<'_>;
    let mut _425: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _426: &mut instructions::if_staker::AddInsuranceFundStake<'_>;
    let mut _427: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _428: &mut instructions::if_staker::AddInsuranceFundStake<'_>;
    let mut _429: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _430: &mut instructions::if_staker::AddInsuranceFundStake<'_>;
    let mut _431: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _432: &mut instructions::if_staker::AddInsuranceFundStake<'_>;
    let mut _433: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _434: &mut instructions::if_staker::AddInsuranceFundStake<'_>;
    let mut _435: &mut instructions::if_staker::AddInsuranceFundStake<'_>;
    let mut _436: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _437: &mut instructions::if_staker::AddInsuranceFundStake<'_>;
    let mut _438: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _439: &mut instructions::if_staker::AddInsuranceFundStake<'_>;
    let mut _440: isize;
    let mut _441: isize;
    let mut _442: isize;
    let mut _443: isize;
    let mut _444: isize;
    let mut _445: isize;
    let mut _446: isize;
    let mut _447: isize;
    let mut _448: isize;
    let mut _449: isize;
    let mut _450: isize;
    let mut _451: isize;
    let mut _452: isize;
    let mut _453: isize;
    let mut _454: isize;
    let mut _455: isize;
    let mut _456: isize;
    let mut _457: isize;
    let mut _458: isize;
    let mut _459: isize;
    let mut _460: isize;
    let mut _461: isize;
    let mut _462: isize;
    let mut _463: isize;
    let mut _464: isize;
    let mut _465: isize;
    let mut _466: isize;
    let mut _467: isize;
    let mut _468: isize;
    let mut _469: isize;
    let mut _470: isize;
    let mut _471: isize;
    let mut _472: isize;
    let mut _473: isize;
    let mut _474: isize;
    let mut _475: isize;
    let mut _476: isize;
    let mut _477: isize;
    let mut _478: isize;
    let mut _479: isize;
    let mut _480: isize;
    let mut _481: isize;
    let mut _482: isize;
    let mut _483: isize;
    let mut _484: isize;
    let mut _485: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _486: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _487: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _488: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _489: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _490: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _491: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _492: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _493: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _494: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _495: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _496: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug clock => _10;
        let _18: i64;
        scope 6 {
            debug now => _18;
            let _19: &mut std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>;
            let _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _30: std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>;
            scope 7 {
                debug insurance_fund_stake => _19;
                let _31: &mut std::cell::RefMut<'_, state::user::UserStats>;
                let _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _42: std::cell::RefMut<'_, state::user::UserStats>;
                scope 12 {
                    debug user_stats => _31;
                    let _43: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                    let _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _54: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                    scope 17 {
                        debug spot_market => _43;
                        let _55: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
                        scope 22 {
                            debug state => _55;
                            let _56: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
                            scope 23 {
                                debug remaining_accounts_iter => _56;
                                let _60: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                                let _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _68: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                                scope 24 {
                                    debug mint => _60;
                                    let _78: error::ErrorCode;
                                    let _112: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _115: ();
                                    let _125: error::ErrorCode;
                                    let _150: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _153: ();
                                    let _164: error::ErrorCode;
                                    let _207: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _210: ();
                                    let _223: error::ErrorCode;
                                    let _248: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _251: ();
                                    let _284: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                    let _287: ();
                                    let _310: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                    let _313: ();
                                    let _319: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                    let _322: ();
                                    let _328: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                    let _331: ();
                                    let _344: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _347: i64;
                                    let _368: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _371: ();
                                    let _395: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                    let _398: ();
                                    let mut _403: &state::perp_market::MarketStatus;
                                    scope 29 {
                                        debug error_code => _78;
                                        let _85: std::string::String;
                                        let _104: std::string::String;
                                        let mut _405: &[&str; 1];
                                        let mut _406: &[&str; 2];
                                        scope 30 {
                                            debug res => _85;
                                        }
                                        scope 31 {
                                            debug res => _104;
                                        }
                                    }
                                    scope 32 {
                                        debug residual => _112;
                                        scope 33 {
                                        }
                                    }
                                    scope 34 {
                                        debug val => _115;
                                        scope 35 {
                                        }
                                    }
                                    scope 36 {
                                        debug error_code => _125;
                                        let _132: std::string::String;
                                        let mut _404: &[&str; 2];
                                        scope 37 {
                                            debug res => _132;
                                        }
                                    }
                                    scope 38 {
                                        debug residual => _150;
                                        scope 39 {
                                        }
                                    }
                                    scope 40 {
                                        debug val => _153;
                                        scope 41 {
                                        }
                                    }
                                    scope 42 {
                                        debug error_code => _164;
                                        let _171: std::string::String;
                                        let _190: std::string::String;
                                        let mut _401: &[&str; 2];
                                        let mut _402: &[&str; 2];
                                        scope 43 {
                                            debug res => _171;
                                        }
                                        scope 44 {
                                            debug res => _190;
                                        }
                                    }
                                    scope 45 {
                                        debug residual => _207;
                                        scope 46 {
                                        }
                                    }
                                    scope 47 {
                                        debug val => _210;
                                        scope 48 {
                                        }
                                    }
                                    scope 49 {
                                        debug error_code => _223;
                                        let _230: std::string::String;
                                        let mut _400: &[&str; 2];
                                        scope 50 {
                                            debug res => _230;
                                        }
                                    }
                                    scope 51 {
                                        debug residual => _248;
                                        scope 52 {
                                        }
                                    }
                                    scope 53 {
                                        debug val => _251;
                                        scope 54 {
                                        }
                                    }
                                    scope 55 {
                                        debug residual => _284;
                                        scope 56 {
                                        }
                                    }
                                    scope 57 {
                                        debug val => _287;
                                        scope 58 {
                                        }
                                    }
                                    scope 59 {
                                        debug residual => _310;
                                        scope 60 {
                                        }
                                    }
                                    scope 61 {
                                        debug val => _313;
                                        scope 62 {
                                        }
                                    }
                                    scope 63 {
                                        debug residual => _319;
                                        scope 64 {
                                        }
                                    }
                                    scope 65 {
                                        debug val => _322;
                                        scope 66 {
                                        }
                                    }
                                    scope 67 {
                                        debug residual => _328;
                                        scope 68 {
                                        }
                                    }
                                    scope 69 {
                                        debug val => _331;
                                        scope 70 {
                                        }
                                    }
                                    scope 71 {
                                        debug residual => _344;
                                        scope 72 {
                                        }
                                    }
                                    scope 73 {
                                        debug val => _347;
                                        scope 74 {
                                        }
                                    }
                                    scope 75 {
                                        debug residual => _368;
                                        scope 76 {
                                        }
                                    }
                                    scope 77 {
                                        debug val => _371;
                                        scope 78 {
                                        }
                                    }
                                    scope 79 {
                                        debug residual => _395;
                                        scope 80 {
                                        }
                                    }
                                    scope 81 {
                                        debug val => _398;
                                        scope 82 {
                                        }
                                    }
                                }
                                scope 25 {
                                    debug residual => _65;
                                    scope 26 {
                                    }
                                }
                                scope 27 {
                                    debug val => _68;
                                    scope 28 {
                                    }
                                }
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _51;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _54;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _39;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _42;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _27;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _30;
                scope 11 {
                }
            }
        }
    }
    scope 2 {
        debug residual => _14;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _17;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = _3;
        _5 = Eq(move _6, const 0_u64);
        switchInt(move _5) -> [0: bb3, otherwise: bb1];
    }

    bb1: {
        StorageDead(_6);
        StorageLive(_8);
        StorageLive(_9);
        _9 = error::ErrorCode::InsufficientDeposit;
        _8 = <error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_9);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _8);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb180;
    }

    bb3: {
        StorageDead(_6);
        _4 = const ();
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb4, unwind continue];
    }

    bb4: {
        _11 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _12) -> [return: bb5, unwind: bb190];
    }

    bb5: {
        StorageDead(_12);
        _13 = discriminant(_11);
        switchInt(move _13) -> [0: bb6, 1: bb8, otherwise: bb7];
    }

    bb6: {
        StorageLive(_17);
        _17 = move ((_11 as Continue).0: anchor_lang::prelude::Clock);
        _10 = move _17;
        StorageDead(_17);
        _440 = discriminant(_11);
        StorageDead(_11);
        StorageLive(_18);
        _18 = (_10.4: i64);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _407 = deref_copy (_1.1: &mut instructions::if_staker::AddInsuranceFundStake<'_>);
        _24 = &((*_407).2: anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>);
        _23 = anchor_lang::prelude::AccountLoader::<'_, InsuranceFundStake>::load_mut(move _24) -> [return: bb10, unwind continue];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        StorageLive(_14);
        _14 = move ((_11 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_16);
        _16 = move _14;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _16) -> [return: bb9, unwind: bb199];
    }

    bb9: {
        StorageDead(_16);
        StorageDead(_14);
        _474 = discriminant(_11);
        StorageDead(_11);
        goto -> bb179;
    }

    bb10: {
        StorageDead(_24);
        StorageLive(_25);
        _25 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _22 = std::result::Result::<RefMut<'_, InsuranceFundStake>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _23, move _25) -> [return: bb11, unwind: bb190];
    }

    bb11: {
        StorageDead(_25);
        StorageDead(_23);
        _21 = <std::result::Result<RefMut<'_, InsuranceFundStake>, error::ErrorCode> as Try>::branch(move _22) -> [return: bb12, unwind: bb190];
    }

    bb12: {
        StorageDead(_22);
        _26 = discriminant(_21);
        switchInt(move _26) -> [0: bb13, 1: bb14, otherwise: bb7];
    }

    bb13: {
        StorageLive(_30);
        _30 = move ((_21 as Continue).0: std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>);
        _20 = move _30;
        StorageDead(_30);
        _19 = &mut _20;
        _444 = discriminant(_21);
        StorageDead(_21);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _408 = deref_copy (_1.1: &mut instructions::if_staker::AddInsuranceFundStake<'_>);
        _36 = &((*_408).3: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _35 = anchor_lang::prelude::AccountLoader::<'_, UserStats>::load_mut(move _36) -> [return: bb16, unwind: bb189];
    }

    bb14: {
        StorageLive(_27);
        _27 = ((_21 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_29);
        _29 = _27;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _29) -> [return: bb15, unwind: bb198];
    }

    bb15: {
        StorageDead(_29);
        StorageDead(_27);
        _442 = discriminant(_21);
        StorageDead(_21);
        goto -> bb178;
    }

    bb16: {
        StorageDead(_36);
        StorageLive(_37);
        _37 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _34 = std::result::Result::<RefMut<'_, UserStats>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _35, move _37) -> [return: bb17, unwind: bb189];
    }

    bb17: {
        StorageDead(_37);
        StorageDead(_35);
        _33 = <std::result::Result<RefMut<'_, UserStats>, error::ErrorCode> as Try>::branch(move _34) -> [return: bb18, unwind: bb189];
    }

    bb18: {
        StorageDead(_34);
        _38 = discriminant(_33);
        switchInt(move _38) -> [0: bb19, 1: bb20, otherwise: bb7];
    }

    bb19: {
        StorageLive(_42);
        _42 = move ((_33 as Continue).0: std::cell::RefMut<'_, state::user::UserStats>);
        _32 = move _42;
        StorageDead(_42);
        _31 = &mut _32;
        _448 = discriminant(_33);
        StorageDead(_33);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _409 = deref_copy (_1.1: &mut instructions::if_staker::AddInsuranceFundStake<'_>);
        _48 = &((*_409).1: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _47 = anchor_lang::prelude::AccountLoader::<'_, SpotMarket>::load_mut(move _48) -> [return: bb22, unwind: bb188];
    }

    bb20: {
        StorageLive(_39);
        _39 = ((_33 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_41);
        _41 = _39;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _41) -> [return: bb21, unwind: bb197];
    }

    bb21: {
        StorageDead(_41);
        StorageDead(_39);
        _446 = discriminant(_33);
        StorageDead(_33);
        goto -> bb177;
    }

    bb22: {
        StorageDead(_48);
        StorageLive(_49);
        _49 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _46 = std::result::Result::<RefMut<'_, SpotMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _47, move _49) -> [return: bb23, unwind: bb188];
    }

    bb23: {
        StorageDead(_49);
        StorageDead(_47);
        _45 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _46) -> [return: bb24, unwind: bb188];
    }

    bb24: {
        StorageDead(_46);
        _50 = discriminant(_45);
        switchInt(move _50) -> [0: bb25, 1: bb26, otherwise: bb7];
    }

    bb25: {
        StorageLive(_54);
        _54 = move ((_45 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _44 = move _54;
        StorageDead(_54);
        _43 = &mut _44;
        _452 = discriminant(_45);
        StorageDead(_45);
        StorageLive(_55);
        _410 = deref_copy (_1.1: &mut instructions::if_staker::AddInsuranceFundStake<'_>);
        _55 = &((*_410).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _411 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _59 = &(*_411);
        _58 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _59) -> [return: bb28, unwind: bb187];
    }

    bb26: {
        StorageLive(_51);
        _51 = ((_45 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_53);
        _53 = _51;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _53) -> [return: bb27, unwind: bb196];
    }

    bb27: {
        StorageDead(_53);
        StorageDead(_51);
        _450 = discriminant(_45);
        StorageDead(_45);
        goto -> bb176;
    }

    bb28: {
        StorageDead(_59);
        _57 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::peekable(move _58) -> [return: bb29, unwind: bb187];
    }

    bb29: {
        StorageDead(_58);
        _56 = &mut _57;
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = &mut (*_56);
        _62 = get_token_mint(move _63) -> [return: bb30, unwind: bb187];
    }

    bb30: {
        StorageDead(_63);
        _61 = <std::result::Result<Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, error::ErrorCode> as Try>::branch(move _62) -> [return: bb31, unwind: bb187];
    }

    bb31: {
        StorageDead(_62);
        _64 = discriminant(_61);
        switchInt(move _64) -> [0: bb32, 1: bb33, otherwise: bb7];
    }

    bb32: {
        StorageLive(_68);
        _68 = move ((_61 as Continue).0: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _60 = move _68;
        StorageDead(_68);
        StorageDead(_61);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = &(*_43);
        _74 = <RefMut<'_, SpotMarket> as Deref>::deref(move _75) -> [return: bb35, unwind: bb187];
    }

    bb33: {
        StorageLive(_65);
        _65 = ((_61 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_67);
        _67 = _65;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _67) -> [return: bb34, unwind: bb187];
    }

    bb34: {
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_61);
        goto -> bb175;
    }

    bb35: {
        _73 = &(*_74);
        StorageDead(_75);
        StorageLive(_76);
        _76 = InsuranceFundOperation::Add;
        _72 = SpotMarket::is_insurance_fund_operation_paused(move _73, move _76) -> [return: bb36, unwind: bb187];
    }

    bb36: {
        switchInt(move _72) -> [0: bb38, otherwise: bb37];
    }

    bb37: {
        StorageDead(_76);
        StorageDead(_73);
        StorageDead(_74);
        StorageLive(_78);
        _78 = error::ErrorCode::InsuranceFundOperationPaused;
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _406 = const _;
        _89 = &(*_406);
        _88 = &(*_89);
        _87 = move _88 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_88);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = &_78;
        _96 = &(*_97);
        _95 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _96) -> [return: bb39, unwind: bb187];
    }

    bb38: {
        StorageDead(_76);
        StorageDead(_73);
        StorageDead(_74);
        StorageLive(_77);
        _77 = ();
        _71 = std::result::Result::<(), error::ErrorCode>::Ok(move _77);
        StorageDead(_77);
        goto -> bb50;
    }

    bb39: {
        StorageDead(_96);
        _94 = [move _95];
        StorageDead(_95);
        _93 = &_94;
        _92 = &(*_93);
        _91 = move _92 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_92);
        _86 = Arguments::<'_>::new_v1(move _87, move _91) -> [return: bb40, unwind: bb187];
    }

    bb40: {
        StorageDead(_91);
        StorageDead(_87);
        _85 = format(move _86) -> [return: bb41, unwind: bb187];
    }

    bb41: {
        StorageDead(_86);
        StorageDead(_97);
        StorageDead(_94);
        StorageDead(_93);
        StorageDead(_89);
        _84 = move _85;
        StorageDead(_85);
        _83 = &_84;
        _82 = &(*_83);
        _81 = <String as Deref>::deref(move _82) -> [return: bb42, unwind: bb186];
    }

    bb42: {
        _80 = &(*_81);
        StorageDead(_82);
        _79 = solana_program::log::sol_log(move _80) -> [return: bb43, unwind: bb186];
    }

    bb43: {
        StorageDead(_80);
        drop(_84) -> [return: bb44, unwind: bb187];
    }

    bb44: {
        StorageDead(_84);
        StorageDead(_83);
        StorageDead(_81);
        StorageDead(_79);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        _405 = const _;
        _108 = &(*_405);
        _107 = &(*_108);
        _106 = move _107 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_107);
        _105 = Arguments::<'_>::new_const(move _106) -> [return: bb45, unwind: bb187];
    }

    bb45: {
        StorageDead(_106);
        _104 = format(move _105) -> [return: bb46, unwind: bb187];
    }

    bb46: {
        StorageDead(_105);
        StorageDead(_108);
        _103 = move _104;
        StorageDead(_104);
        _102 = &_103;
        _101 = &(*_102);
        _100 = <String as Deref>::deref(move _101) -> [return: bb47, unwind: bb185];
    }

    bb47: {
        _99 = &(*_100);
        StorageDead(_101);
        _98 = solana_program::log::sol_log(move _99) -> [return: bb48, unwind: bb185];
    }

    bb48: {
        StorageDead(_99);
        drop(_103) -> [return: bb49, unwind: bb187];
    }

    bb49: {
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_100);
        StorageDead(_98);
        StorageLive(_110);
        _110 = _78;
        _71 = std::result::Result::<(), error::ErrorCode>::Err(move _110);
        StorageDead(_110);
        StorageDead(_78);
        goto -> bb50;
    }

    bb50: {
        StorageDead(_72);
        _70 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _71) -> [return: bb51, unwind: bb187];
    }

    bb51: {
        StorageDead(_71);
        _111 = discriminant(_70);
        switchInt(move _111) -> [0: bb52, 1: bb53, otherwise: bb7];
    }

    bb52: {
        StorageLive(_115);
        _115 = ((_70 as Continue).0: ());
        _69 = _115;
        StorageDead(_115);
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        _122 = &(*_19);
        _121 = <RefMut<'_, InsuranceFundStake> as Deref>::deref(move _122) -> [return: bb55, unwind: bb187];
    }

    bb53: {
        StorageLive(_112);
        _112 = ((_70 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_114);
        _114 = _112;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _114) -> [return: bb54, unwind: bb187];
    }

    bb54: {
        StorageDead(_114);
        StorageDead(_112);
        StorageDead(_70);
        StorageDead(_69);
        goto -> bb175;
    }

    bb55: {
        StorageDead(_122);
        _120 = ((*_121).8: u16);
        StorageLive(_123);
        _123 = _2;
        _119 = Eq(move _120, move _123);
        switchInt(move _119) -> [0: bb57, otherwise: bb56];
    }

    bb56: {
        StorageDead(_123);
        StorageDead(_121);
        StorageDead(_120);
        StorageLive(_124);
        _124 = ();
        _118 = std::result::Result::<(), error::ErrorCode>::Ok(move _124);
        StorageDead(_124);
        goto -> bb65;
    }

    bb57: {
        StorageDead(_123);
        StorageDead(_121);
        StorageDead(_120);
        StorageLive(_125);
        _125 = error::ErrorCode::IncorrectSpotMarketAccountPassed;
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        _404 = const _;
        _136 = &(*_404);
        _135 = &(*_136);
        _134 = move _135 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_135);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        _144 = &_125;
        _143 = &(*_144);
        _142 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _143) -> [return: bb58, unwind: bb187];
    }

    bb58: {
        StorageDead(_143);
        _141 = [move _142];
        StorageDead(_142);
        _140 = &_141;
        _139 = &(*_140);
        _138 = move _139 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_139);
        _133 = Arguments::<'_>::new_v1(move _134, move _138) -> [return: bb59, unwind: bb187];
    }

    bb59: {
        StorageDead(_138);
        StorageDead(_134);
        _132 = format(move _133) -> [return: bb60, unwind: bb187];
    }

    bb60: {
        StorageDead(_133);
        StorageDead(_144);
        StorageDead(_141);
        StorageDead(_140);
        StorageDead(_136);
        _131 = move _132;
        StorageDead(_132);
        _130 = &_131;
        _129 = &(*_130);
        _128 = <String as Deref>::deref(move _129) -> [return: bb61, unwind: bb184];
    }

    bb61: {
        _127 = &(*_128);
        StorageDead(_129);
        _126 = solana_program::log::sol_log(move _127) -> [return: bb62, unwind: bb184];
    }

    bb62: {
        StorageDead(_127);
        drop(_131) -> [return: bb63, unwind: bb187];
    }

    bb63: {
        StorageDead(_131);
        StorageDead(_130);
        StorageDead(_128);
        StorageDead(_126);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        _147 = const "insurance_fund_stake does not match market_index";
        _146 = &(*_147);
        _145 = solana_program::log::sol_log(move _146) -> [return: bb64, unwind: bb187];
    }

    bb64: {
        StorageDead(_146);
        StorageDead(_147);
        StorageDead(_145);
        StorageLive(_148);
        _148 = _125;
        _118 = std::result::Result::<(), error::ErrorCode>::Err(move _148);
        StorageDead(_148);
        StorageDead(_125);
        goto -> bb65;
    }

    bb65: {
        StorageDead(_119);
        _117 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _118) -> [return: bb66, unwind: bb187];
    }

    bb66: {
        StorageDead(_118);
        _149 = discriminant(_117);
        switchInt(move _149) -> [0: bb67, 1: bb68, otherwise: bb7];
    }

    bb67: {
        StorageLive(_153);
        _153 = ((_117 as Continue).0: ());
        _116 = _153;
        StorageDead(_153);
        StorageDead(_117);
        StorageDead(_116);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        _160 = &(*_43);
        _159 = <RefMut<'_, SpotMarket> as Deref>::deref(move _160) -> [return: bb70, unwind: bb187];
    }

    bb68: {
        StorageLive(_150);
        _150 = ((_117 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_152);
        _152 = _150;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _152) -> [return: bb69, unwind: bb187];
    }

    bb69: {
        StorageDead(_152);
        StorageDead(_150);
        StorageDead(_117);
        StorageDead(_116);
        goto -> bb175;
    }

    bb70: {
        StorageDead(_160);
        _158 = &((*_159).45: state::perp_market::MarketStatus);
        StorageLive(_161);
        _403 = const _;
        _161 = &(*_403);
        _157 = <state::perp_market::MarketStatus as PartialEq>::ne(move _158, move _161) -> [return: bb71, unwind: bb187];
    }

    bb71: {
        switchInt(move _157) -> [0: bb73, otherwise: bb72];
    }

    bb72: {
        StorageDead(_161);
        StorageDead(_159);
        StorageDead(_158);
        StorageLive(_163);
        _163 = ();
        _156 = std::result::Result::<(), error::ErrorCode>::Ok(move _163);
        StorageDead(_163);
        goto -> bb87;
    }

    bb73: {
        StorageDead(_161);
        StorageDead(_159);
        StorageDead(_158);
        StorageLive(_164);
        _164 = error::ErrorCode::InvalidSpotMarketState;
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        _402 = const _;
        _175 = &(*_402);
        _174 = &(*_175);
        _173 = move _174 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_174);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        _183 = &_164;
        _182 = &(*_183);
        _181 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _182) -> [return: bb74, unwind: bb187];
    }

    bb74: {
        StorageDead(_182);
        _180 = [move _181];
        StorageDead(_181);
        _179 = &_180;
        _178 = &(*_179);
        _177 = move _178 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_178);
        _172 = Arguments::<'_>::new_v1(move _173, move _177) -> [return: bb75, unwind: bb187];
    }

    bb75: {
        StorageDead(_177);
        StorageDead(_173);
        _171 = format(move _172) -> [return: bb76, unwind: bb187];
    }

    bb76: {
        StorageDead(_172);
        StorageDead(_183);
        StorageDead(_180);
        StorageDead(_179);
        StorageDead(_175);
        _170 = move _171;
        StorageDead(_171);
        _169 = &_170;
        _168 = &(*_169);
        _167 = <String as Deref>::deref(move _168) -> [return: bb77, unwind: bb183];
    }

    bb77: {
        _166 = &(*_167);
        StorageDead(_168);
        _165 = solana_program::log::sol_log(move _166) -> [return: bb78, unwind: bb183];
    }

    bb78: {
        StorageDead(_166);
        drop(_170) -> [return: bb79, unwind: bb187];
    }

    bb79: {
        StorageDead(_170);
        StorageDead(_169);
        StorageDead(_167);
        StorageDead(_165);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        _401 = const _;
        _194 = &(*_401);
        _193 = &(*_194);
        _192 = move _193 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_193);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        _204 = &(*_43);
        _203 = <RefMut<'_, SpotMarket> as Deref>::deref(move _204) -> [return: bb80, unwind: bb187];
    }

    bb80: {
        StorageDead(_204);
        _202 = &((*_203).42: u16);
        _201 = &(*_202);
        _200 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _201) -> [return: bb81, unwind: bb187];
    }

    bb81: {
        StorageDead(_201);
        _199 = [move _200];
        StorageDead(_200);
        _198 = &_199;
        _197 = &(*_198);
        _196 = move _197 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_197);
        _191 = Arguments::<'_>::new_v1(move _192, move _196) -> [return: bb82, unwind: bb187];
    }

    bb82: {
        StorageDead(_196);
        StorageDead(_192);
        _190 = format(move _191) -> [return: bb83, unwind: bb187];
    }

    bb83: {
        StorageDead(_191);
        StorageDead(_203);
        StorageDead(_202);
        StorageDead(_199);
        StorageDead(_198);
        StorageDead(_194);
        _189 = move _190;
        StorageDead(_190);
        _188 = &_189;
        _187 = &(*_188);
        _186 = <String as Deref>::deref(move _187) -> [return: bb84, unwind: bb182];
    }

    bb84: {
        _185 = &(*_186);
        StorageDead(_187);
        _184 = solana_program::log::sol_log(move _185) -> [return: bb85, unwind: bb182];
    }

    bb85: {
        StorageDead(_185);
        drop(_189) -> [return: bb86, unwind: bb187];
    }

    bb86: {
        StorageDead(_189);
        StorageDead(_188);
        StorageDead(_186);
        StorageDead(_184);
        StorageLive(_205);
        _205 = _164;
        _156 = std::result::Result::<(), error::ErrorCode>::Err(move _205);
        StorageDead(_205);
        StorageDead(_164);
        goto -> bb87;
    }

    bb87: {
        StorageDead(_157);
        _155 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _156) -> [return: bb88, unwind: bb187];
    }

    bb88: {
        StorageDead(_156);
        _206 = discriminant(_155);
        switchInt(move _206) -> [0: bb89, 1: bb90, otherwise: bb7];
    }

    bb89: {
        StorageLive(_210);
        _210 = ((_155 as Continue).0: ());
        _154 = _210;
        StorageDead(_210);
        StorageDead(_155);
        StorageDead(_154);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        _217 = &(*_19);
        _216 = <RefMut<'_, InsuranceFundStake> as Deref>::deref(move _217) -> [return: bb92, unwind: bb187];
    }

    bb90: {
        StorageLive(_207);
        _207 = ((_155 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_209);
        _209 = _207;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _209) -> [return: bb91, unwind: bb187];
    }

    bb91: {
        StorageDead(_209);
        StorageDead(_207);
        StorageDead(_155);
        StorageDead(_154);
        goto -> bb175;
    }

    bb92: {
        StorageDead(_217);
        _215 = ((*_216).2: u128);
        _214 = Eq(move _215, const 0_u128);
        switchInt(move _214) -> [0: bb97, otherwise: bb93];
    }

    bb93: {
        StorageDead(_216);
        StorageDead(_215);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        _221 = &(*_19);
        _220 = <RefMut<'_, InsuranceFundStake> as Deref>::deref(move _221) -> [return: bb94, unwind: bb187];
    }

    bb94: {
        StorageDead(_221);
        _219 = ((*_220).5: u64);
        _218 = Eq(move _219, const 0_u64);
        switchInt(move _218) -> [0: bb96, otherwise: bb95];
    }

    bb95: {
        StorageDead(_220);
        StorageDead(_219);
        StorageLive(_222);
        _222 = ();
        _213 = std::result::Result::<(), error::ErrorCode>::Ok(move _222);
        StorageDead(_222);
        goto -> bb106;
    }

    bb96: {
        StorageDead(_220);
        StorageDead(_219);
        goto -> bb98;
    }

    bb97: {
        StorageDead(_216);
        StorageDead(_215);
        goto -> bb98;
    }

    bb98: {
        StorageLive(_223);
        _223 = error::ErrorCode::IFWithdrawRequestInProgress;
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        _400 = const _;
        _234 = &(*_400);
        _233 = &(*_234);
        _232 = move _233 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_233);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        _242 = &_223;
        _241 = &(*_242);
        _240 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _241) -> [return: bb99, unwind: bb187];
    }

    bb99: {
        StorageDead(_241);
        _239 = [move _240];
        StorageDead(_240);
        _238 = &_239;
        _237 = &(*_238);
        _236 = move _237 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_237);
        _231 = Arguments::<'_>::new_v1(move _232, move _236) -> [return: bb100, unwind: bb187];
    }

    bb100: {
        StorageDead(_236);
        StorageDead(_232);
        _230 = format(move _231) -> [return: bb101, unwind: bb187];
    }

    bb101: {
        StorageDead(_231);
        StorageDead(_242);
        StorageDead(_239);
        StorageDead(_238);
        StorageDead(_234);
        _229 = move _230;
        StorageDead(_230);
        _228 = &_229;
        _227 = &(*_228);
        _226 = <String as Deref>::deref(move _227) -> [return: bb102, unwind: bb181];
    }

    bb102: {
        _225 = &(*_226);
        StorageDead(_227);
        _224 = solana_program::log::sol_log(move _225) -> [return: bb103, unwind: bb181];
    }

    bb103: {
        StorageDead(_225);
        drop(_229) -> [return: bb104, unwind: bb187];
    }

    bb104: {
        StorageDead(_229);
        StorageDead(_228);
        StorageDead(_226);
        StorageDead(_224);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        _245 = const "withdraw request in progress";
        _244 = &(*_245);
        _243 = solana_program::log::sol_log(move _244) -> [return: bb105, unwind: bb187];
    }

    bb105: {
        StorageDead(_244);
        StorageDead(_245);
        StorageDead(_243);
        StorageLive(_246);
        _246 = _223;
        _213 = std::result::Result::<(), error::ErrorCode>::Err(move _246);
        StorageDead(_246);
        StorageDead(_223);
        goto -> bb106;
    }

    bb106: {
        StorageDead(_218);
        StorageDead(_214);
        _212 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _213) -> [return: bb107, unwind: bb187];
    }

    bb107: {
        StorageDead(_213);
        _247 = discriminant(_212);
        switchInt(move _247) -> [0: bb108, 1: bb109, otherwise: bb7];
    }

    bb108: {
        StorageLive(_251);
        _251 = ((_212 as Continue).0: ());
        _211 = _251;
        StorageDead(_251);
        StorageDead(_212);
        StorageDead(_211);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        _257 = &(*_43);
        _256 = <RefMut<'_, SpotMarket> as Deref>::deref(move _257) -> [return: bb111, unwind: bb187];
    }

    bb109: {
        StorageLive(_248);
        _248 = ((_212 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_250);
        _250 = _248;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _250) -> [return: bb110, unwind: bb187];
    }

    bb110: {
        StorageDead(_250);
        StorageDead(_248);
        StorageDead(_212);
        StorageDead(_211);
        goto -> bb175;
    }

    bb111: {
        _255 = &(*_256);
        StorageDead(_257);
        _254 = SpotMarket::has_transfer_hook(move _255) -> [return: bb112, unwind: bb187];
    }

    bb112: {
        switchInt(move _254) -> [0: bb122, otherwise: bb113];
    }

    bb113: {
        StorageDead(_256);
        StorageDead(_255);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        _412 = deref_copy (_1.1: &mut instructions::if_staker::AddInsuranceFundStake<'_>);
        _262 = &((*_412).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _413 = deref_copy (*_262);
        _485 = (((_413.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _261 = &(*_485);
        StorageLive(_263);
        StorageLive(_264);
        _414 = deref_copy (_1.1: &mut instructions::if_staker::AddInsuranceFundStake<'_>);
        _264 = &((*_414).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _415 = deref_copy (*_264);
        _486 = (((_415.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _263 = &(*_486);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        _267 = &mut (*_43);
        _266 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _267) -> [return: bb114, unwind: bb187];
    }

    bb114: {
        _265 = &mut (*_266);
        StorageDead(_267);
        StorageLive(_268);
        _268 = _18;
        StorageLive(_269);
        StorageLive(_270);
        _416 = deref_copy (_1.1: &mut instructions::if_staker::AddInsuranceFundStake<'_>);
        _270 = &((*_416).9: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _269 = &(*_270);
        StorageLive(_271);
        StorageLive(_272);
        _417 = deref_copy (_1.1: &mut instructions::if_staker::AddInsuranceFundStake<'_>);
        _272 = &((*_417).7: anchor_lang::prelude::AccountInfo<'_>);
        _271 = &(*_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        _418 = deref_copy (*_55);
        _487 = (((_418.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _275 = &(*_487);
        _274 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _275) -> [return: bb115, unwind: bb187];
    }

    bb115: {
        _273 = &(*_274);
        StorageDead(_275);
        StorageLive(_276);
        StorageLive(_277);
        _277 = &_60;
        _276 = &(*_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        _282 = &(*_56);
        _281 = <Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>> as Clone>::clone(move _282) -> [return: bb116, unwind: bb187];
    }

    bb116: {
        StorageDead(_282);
        _280 = &mut _281;
        _279 = &mut (*_280);
        _278 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::Some(move _279);
        StorageDead(_279);
        _260 = attempt_settle_revenue_to_insurance_fund(move _261, move _263, move _265, move _268, move _269, move _271, move _273, move _276, move _278) -> [return: bb117, unwind: bb187];
    }

    bb117: {
        StorageDead(_278);
        StorageDead(_276);
        StorageDead(_273);
        StorageDead(_271);
        StorageDead(_269);
        StorageDead(_268);
        StorageDead(_265);
        StorageDead(_263);
        StorageDead(_261);
        _259 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _260) -> [return: bb118, unwind: bb187];
    }

    bb118: {
        StorageDead(_260);
        _283 = discriminant(_259);
        switchInt(move _283) -> [0: bb119, 1: bb120, otherwise: bb7];
    }

    bb119: {
        StorageLive(_287);
        _287 = ((_259 as Continue).0: ());
        _258 = _287;
        StorageDead(_287);
        _454 = discriminant(_259);
        StorageDead(_281);
        StorageDead(_280);
        StorageDead(_277);
        StorageDead(_274);
        StorageDead(_272);
        StorageDead(_270);
        StorageDead(_266);
        StorageDead(_264);
        StorageDead(_262);
        StorageDead(_259);
        StorageDead(_258);
        _253 = const ();
        goto -> bb130;
    }

    bb120: {
        StorageLive(_284);
        _284 = move ((_259 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_286);
        _286 = move _284;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _286) -> [return: bb121, unwind: bb195];
    }

    bb121: {
        StorageDead(_286);
        StorageDead(_284);
        _472 = discriminant(_259);
        StorageDead(_281);
        StorageDead(_280);
        StorageDead(_277);
        StorageDead(_274);
        StorageDead(_272);
        StorageDead(_270);
        StorageDead(_266);
        StorageDead(_264);
        StorageDead(_262);
        StorageDead(_259);
        StorageDead(_258);
        goto -> bb173;
    }

    bb122: {
        StorageDead(_256);
        StorageDead(_255);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        _419 = deref_copy (_1.1: &mut instructions::if_staker::AddInsuranceFundStake<'_>);
        _292 = &((*_419).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _420 = deref_copy (*_292);
        _488 = (((_420.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _291 = &(*_488);
        StorageLive(_293);
        StorageLive(_294);
        _421 = deref_copy (_1.1: &mut instructions::if_staker::AddInsuranceFundStake<'_>);
        _294 = &((*_421).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _422 = deref_copy (*_294);
        _489 = (((_422.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _293 = &(*_489);
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        _297 = &mut (*_43);
        _296 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _297) -> [return: bb123, unwind: bb187];
    }

    bb123: {
        _295 = &mut (*_296);
        StorageDead(_297);
        StorageLive(_298);
        _298 = _18;
        StorageLive(_299);
        StorageLive(_300);
        _423 = deref_copy (_1.1: &mut instructions::if_staker::AddInsuranceFundStake<'_>);
        _300 = &((*_423).9: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _299 = &(*_300);
        StorageLive(_301);
        StorageLive(_302);
        _424 = deref_copy (_1.1: &mut instructions::if_staker::AddInsuranceFundStake<'_>);
        _302 = &((*_424).7: anchor_lang::prelude::AccountInfo<'_>);
        _301 = &(*_302);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        _425 = deref_copy (*_55);
        _490 = (((_425.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _305 = &(*_490);
        _304 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _305) -> [return: bb124, unwind: bb187];
    }

    bb124: {
        _303 = &(*_304);
        StorageDead(_305);
        StorageLive(_306);
        StorageLive(_307);
        _307 = &_60;
        _306 = &(*_307);
        StorageLive(_308);
        _308 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::None;
        _290 = attempt_settle_revenue_to_insurance_fund(move _291, move _293, move _295, move _298, move _299, move _301, move _303, move _306, move _308) -> [return: bb125, unwind: bb187];
    }

    bb125: {
        StorageDead(_308);
        StorageDead(_306);
        StorageDead(_303);
        StorageDead(_301);
        StorageDead(_299);
        StorageDead(_298);
        StorageDead(_295);
        StorageDead(_293);
        StorageDead(_291);
        _289 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _290) -> [return: bb126, unwind: bb187];
    }

    bb126: {
        StorageDead(_290);
        _309 = discriminant(_289);
        switchInt(move _309) -> [0: bb127, 1: bb128, otherwise: bb7];
    }

    bb127: {
        StorageLive(_313);
        _313 = ((_289 as Continue).0: ());
        _288 = _313;
        StorageDead(_313);
        _456 = discriminant(_289);
        StorageDead(_307);
        StorageDead(_304);
        StorageDead(_302);
        StorageDead(_300);
        StorageDead(_296);
        StorageDead(_294);
        StorageDead(_292);
        StorageDead(_289);
        StorageDead(_288);
        _253 = const ();
        goto -> bb130;
    }

    bb128: {
        StorageLive(_310);
        _310 = move ((_289 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_312);
        _312 = move _310;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _312) -> [return: bb129, unwind: bb194];
    }

    bb129: {
        StorageDead(_312);
        StorageDead(_310);
        _470 = discriminant(_289);
        StorageDead(_307);
        StorageDead(_304);
        StorageDead(_302);
        StorageDead(_300);
        StorageDead(_296);
        StorageDead(_294);
        StorageDead(_292);
        StorageDead(_289);
        StorageDead(_288);
        goto -> bb173;
    }

    bb130: {
        StorageDead(_254);
        StorageDead(_253);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        _426 = deref_copy (_1.1: &mut instructions::if_staker::AddInsuranceFundStake<'_>);
        _427 = deref_copy ((*_426).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _491 = (((_427.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _317 = &mut (*_491);
        _316 = anchor_lang::prelude::InterfaceAccount::<'_, anchor_spl::token_interface::TokenAccount>::reload(move _317) -> [return: bb131, unwind: bb187];
    }

    bb131: {
        StorageDead(_317);
        _315 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _316) -> [return: bb132, unwind: bb187];
    }

    bb132: {
        StorageDead(_316);
        _318 = discriminant(_315);
        switchInt(move _318) -> [0: bb133, 1: bb134, otherwise: bb7];
    }

    bb133: {
        StorageLive(_322);
        _322 = ((_315 as Continue).0: ());
        _314 = _322;
        StorageDead(_322);
        _458 = discriminant(_315);
        StorageDead(_315);
        StorageDead(_314);
        StorageLive(_323);
        StorageLive(_324);
        StorageLive(_325);
        StorageLive(_326);
        _428 = deref_copy (_1.1: &mut instructions::if_staker::AddInsuranceFundStake<'_>);
        _429 = deref_copy ((*_428).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _492 = (((_429.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _326 = &mut (*_492);
        _325 = anchor_lang::prelude::InterfaceAccount::<'_, anchor_spl::token_interface::TokenAccount>::reload(move _326) -> [return: bb136, unwind: bb187];
    }

    bb134: {
        StorageLive(_319);
        _319 = move ((_315 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_321);
        _321 = move _319;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _321) -> [return: bb135, unwind: bb193];
    }

    bb135: {
        StorageDead(_321);
        StorageDead(_319);
        _468 = discriminant(_315);
        StorageDead(_315);
        StorageDead(_314);
        goto -> bb174;
    }

    bb136: {
        StorageDead(_326);
        _324 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _325) -> [return: bb137, unwind: bb187];
    }

    bb137: {
        StorageDead(_325);
        _327 = discriminant(_324);
        switchInt(move _327) -> [0: bb138, 1: bb139, otherwise: bb7];
    }

    bb138: {
        StorageLive(_331);
        _331 = ((_324 as Continue).0: ());
        _323 = _331;
        StorageDead(_331);
        _460 = discriminant(_324);
        StorageDead(_324);
        StorageDead(_323);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        _337 = &(*_43);
        _336 = <RefMut<'_, SpotMarket> as Deref>::deref(move _337) -> [return: bb141, unwind: bb187];
    }

    bb139: {
        StorageLive(_328);
        _328 = move ((_324 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_330);
        _330 = move _328;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _330) -> [return: bb140, unwind: bb192];
    }

    bb140: {
        StorageDead(_330);
        StorageDead(_328);
        _466 = discriminant(_324);
        StorageDead(_324);
        StorageDead(_323);
        goto -> bb174;
    }

    bb141: {
        _335 = &(*_336);
        StorageDead(_337);
        StorageLive(_338);
        StorageLive(_339);
        StorageLive(_340);
        StorageLive(_341);
        StorageLive(_342);
        _430 = deref_copy (_1.1: &mut instructions::if_staker::AddInsuranceFundStake<'_>);
        _431 = deref_copy ((*_430).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _493 = (((_431.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _342 = &(*_493);
        _341 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _342) -> [return: bb142, unwind: bb187];
    }

    bb142: {
        _340 = &(*_341);
        _339 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _340) -> [return: bb143, unwind: bb187];
    }

    bb143: {
        StorageDead(_342);
        StorageDead(_340);
        _338 = ((*_339).2: u64);
        _334 = validate_spot_market_vault_amount(move _335, move _338) -> [return: bb144, unwind: bb187];
    }

    bb144: {
        StorageDead(_338);
        StorageDead(_335);
        _333 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _334) -> [return: bb145, unwind: bb187];
    }

    bb145: {
        StorageDead(_334);
        _343 = discriminant(_333);
        switchInt(move _343) -> [0: bb146, 1: bb147, otherwise: bb7];
    }

    bb146: {
        StorageLive(_347);
        _347 = ((_333 as Continue).0: i64);
        _332 = _347;
        StorageDead(_347);
        StorageDead(_341);
        StorageDead(_339);
        StorageDead(_336);
        StorageDead(_333);
        StorageDead(_332);
        _252 = const ();
        StorageDead(_252);
        StorageLive(_348);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        _351 = _3;
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        StorageLive(_355);
        StorageLive(_356);
        _432 = deref_copy (_1.1: &mut instructions::if_staker::AddInsuranceFundStake<'_>);
        _433 = deref_copy ((*_432).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _494 = (((_433.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _356 = &(*_494);
        _355 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _356) -> [return: bb149, unwind: bb187];
    }

    bb147: {
        StorageLive(_344);
        _344 = ((_333 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_346);
        _346 = _344;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _346) -> [return: bb148, unwind: bb187];
    }

    bb148: {
        StorageDead(_346);
        StorageDead(_344);
        StorageDead(_341);
        StorageDead(_339);
        StorageDead(_336);
        StorageDead(_333);
        StorageDead(_332);
        goto -> bb174;
    }

    bb149: {
        _354 = &(*_355);
        _353 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _354) -> [return: bb150, unwind: bb187];
    }

    bb150: {
        StorageDead(_356);
        StorageDead(_354);
        _352 = ((*_353).2: u64);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        _359 = &mut (*_19);
        _358 = <RefMut<'_, InsuranceFundStake> as DerefMut>::deref_mut(move _359) -> [return: bb151, unwind: bb187];
    }

    bb151: {
        _357 = &mut (*_358);
        StorageDead(_359);
        StorageLive(_360);
        StorageLive(_361);
        StorageLive(_362);
        _362 = &mut (*_31);
        _361 = <RefMut<'_, UserStats> as DerefMut>::deref_mut(move _362) -> [return: bb152, unwind: bb187];
    }

    bb152: {
        _360 = &mut (*_361);
        StorageDead(_362);
        StorageLive(_363);
        StorageLive(_364);
        StorageLive(_365);
        _365 = &mut (*_43);
        _364 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _365) -> [return: bb153, unwind: bb187];
    }

    bb153: {
        _363 = &mut (*_364);
        StorageDead(_365);
        StorageLive(_366);
        _366 = (_10.4: i64);
        _350 = controller::insurance::add_insurance_fund_stake(move _351, move _352, move _357, move _360, move _363, move _366) -> [return: bb154, unwind: bb187];
    }

    bb154: {
        StorageDead(_366);
        StorageDead(_363);
        StorageDead(_360);
        StorageDead(_357);
        StorageDead(_352);
        StorageDead(_351);
        _349 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _350) -> [return: bb155, unwind: bb187];
    }

    bb155: {
        StorageDead(_350);
        _367 = discriminant(_349);
        switchInt(move _367) -> [0: bb156, 1: bb157, otherwise: bb7];
    }

    bb156: {
        StorageLive(_371);
        _371 = ((_349 as Continue).0: ());
        _348 = _371;
        StorageDead(_371);
        StorageDead(_364);
        StorageDead(_361);
        StorageDead(_358);
        StorageDead(_355);
        StorageDead(_353);
        StorageDead(_349);
        StorageDead(_348);
        StorageLive(_372);
        StorageLive(_373);
        StorageLive(_374);
        StorageLive(_375);
        StorageLive(_376);
        _434 = deref_copy (_1.1: &mut instructions::if_staker::AddInsuranceFundStake<'_>);
        _376 = &((*_434).9: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _375 = &(*_376);
        StorageLive(_377);
        StorageLive(_378);
        _435 = deref_copy (_1.1: &mut instructions::if_staker::AddInsuranceFundStake<'_>);
        _378 = &((*_435).8: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _436 = deref_copy (*_378);
        _495 = (((_436.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _377 = &(*_495);
        StorageLive(_379);
        StorageLive(_380);
        _437 = deref_copy (_1.1: &mut instructions::if_staker::AddInsuranceFundStake<'_>);
        _380 = &((*_437).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _438 = deref_copy (*_380);
        _496 = (((_438.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _379 = &(*_496);
        StorageLive(_381);
        StorageLive(_382);
        StorageLive(_383);
        StorageLive(_384);
        _439 = deref_copy (_1.1: &mut instructions::if_staker::AddInsuranceFundStake<'_>);
        _384 = &((*_439).4: anchor_lang::prelude::Signer<'_>);
        _383 = &(*_384);
        _382 = <anchor_lang::prelude::Signer<'_> as Deref>::deref(move _383) -> [return: bb159, unwind: bb187];
    }

    bb157: {
        StorageLive(_368);
        _368 = ((_349 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_370);
        _370 = _368;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _370) -> [return: bb158, unwind: bb187];
    }

    bb158: {
        StorageDead(_370);
        StorageDead(_368);
        StorageDead(_364);
        StorageDead(_361);
        StorageDead(_358);
        StorageDead(_355);
        StorageDead(_353);
        StorageDead(_349);
        StorageDead(_348);
        goto -> bb175;
    }

    bb159: {
        _381 = &(*_382);
        StorageDead(_383);
        StorageLive(_385);
        _385 = _3;
        StorageLive(_386);
        StorageLive(_387);
        _387 = &_60;
        _386 = &(*_387);
        StorageLive(_388);
        StorageLive(_389);
        StorageLive(_390);
        StorageLive(_391);
        StorageLive(_392);
        _392 = &(*_43);
        _391 = <RefMut<'_, SpotMarket> as Deref>::deref(move _392) -> [return: bb160, unwind: bb187];
    }

    bb160: {
        _390 = &(*_391);
        StorageDead(_392);
        _389 = SpotMarket::has_transfer_hook(move _390) -> [return: bb161, unwind: bb187];
    }

    bb161: {
        switchInt(move _389) -> [0: bb163, otherwise: bb162];
    }

    bb162: {
        StorageDead(_391);
        StorageDead(_390);
        StorageLive(_393);
        _393 = &mut (*_56);
        _388 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::Some(move _393);
        StorageDead(_393);
        goto -> bb164;
    }

    bb163: {
        StorageDead(_391);
        StorageDead(_390);
        _388 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::None;
        goto -> bb164;
    }

    bb164: {
        StorageDead(_389);
        _374 = receive(move _375, move _377, move _379, move _381, move _385, move _386, move _388) -> [return: bb165, unwind: bb187];
    }

    bb165: {
        StorageDead(_388);
        StorageDead(_386);
        StorageDead(_385);
        StorageDead(_381);
        StorageDead(_379);
        StorageDead(_377);
        StorageDead(_375);
        _373 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _374) -> [return: bb166, unwind: bb187];
    }

    bb166: {
        StorageDead(_374);
        _394 = discriminant(_373);
        switchInt(move _394) -> [0: bb167, 1: bb168, otherwise: bb7];
    }

    bb167: {
        StorageLive(_398);
        _398 = ((_373 as Continue).0: ());
        _372 = _398;
        StorageDead(_398);
        _462 = discriminant(_373);
        StorageDead(_387);
        StorageDead(_384);
        StorageDead(_382);
        StorageDead(_380);
        StorageDead(_378);
        StorageDead(_376);
        StorageDead(_373);
        StorageDead(_372);
        StorageLive(_399);
        _399 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _399);
        StorageDead(_399);
        StorageDead(_60);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        drop(_44) -> [return: bb170, unwind: bb188];
    }

    bb168: {
        StorageLive(_395);
        _395 = move ((_373 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_397);
        _397 = move _395;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _397) -> [return: bb169, unwind: bb191];
    }

    bb169: {
        StorageDead(_397);
        StorageDead(_395);
        _464 = discriminant(_373);
        StorageDead(_387);
        StorageDead(_384);
        StorageDead(_382);
        StorageDead(_380);
        StorageDead(_378);
        StorageDead(_376);
        StorageDead(_373);
        StorageDead(_372);
        goto -> bb175;
    }

    bb170: {
        StorageDead(_44);
        StorageDead(_43);
        drop(_32) -> [return: bb171, unwind: bb189];
    }

    bb171: {
        StorageDead(_32);
        StorageDead(_31);
        drop(_20) -> [return: bb172, unwind: bb190];
    }

    bb172: {
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_10);
        goto -> bb180;
    }

    bb173: {
        StorageDead(_254);
        StorageDead(_253);
        goto -> bb174;
    }

    bb174: {
        StorageDead(_252);
        goto -> bb175;
    }

    bb175: {
        StorageDead(_60);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        drop(_44) -> [return: bb176, unwind: bb188];
    }

    bb176: {
        StorageDead(_44);
        StorageDead(_43);
        drop(_32) -> [return: bb177, unwind: bb189];
    }

    bb177: {
        StorageDead(_32);
        StorageDead(_31);
        drop(_20) -> [return: bb178, unwind: bb190];
    }

    bb178: {
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        goto -> bb179;
    }

    bb179: {
        StorageDead(_10);
        goto -> bb180;
    }

    bb180: {
        return;
    }

    bb181 (cleanup): {
        drop(_229) -> [return: bb187, unwind terminate(cleanup)];
    }

    bb182 (cleanup): {
        drop(_189) -> [return: bb187, unwind terminate(cleanup)];
    }

    bb183 (cleanup): {
        drop(_170) -> [return: bb187, unwind terminate(cleanup)];
    }

    bb184 (cleanup): {
        drop(_131) -> [return: bb187, unwind terminate(cleanup)];
    }

    bb185 (cleanup): {
        drop(_103) -> [return: bb187, unwind terminate(cleanup)];
    }

    bb186 (cleanup): {
        drop(_84) -> [return: bb187, unwind terminate(cleanup)];
    }

    bb187 (cleanup): {
        drop(_44) -> [return: bb188, unwind terminate(cleanup)];
    }

    bb188 (cleanup): {
        drop(_32) -> [return: bb189, unwind terminate(cleanup)];
    }

    bb189 (cleanup): {
        drop(_20) -> [return: bb190, unwind terminate(cleanup)];
    }

    bb190 (cleanup): {
        resume;
    }

    bb191 (cleanup): {
        _476 = discriminant(_373);
        goto -> bb187;
    }

    bb192 (cleanup): {
        _477 = discriminant(_324);
        goto -> bb187;
    }

    bb193 (cleanup): {
        _478 = discriminant(_315);
        goto -> bb187;
    }

    bb194 (cleanup): {
        _479 = discriminant(_289);
        goto -> bb187;
    }

    bb195 (cleanup): {
        _480 = discriminant(_259);
        goto -> bb187;
    }

    bb196 (cleanup): {
        _481 = discriminant(_45);
        goto -> bb188;
    }

    bb197 (cleanup): {
        _482 = discriminant(_33);
        goto -> bb189;
    }

    bb198 (cleanup): {
        _483 = discriminant(_21);
        goto -> bb190;
    }

    bb199 (cleanup): {
        _484 = discriminant(_11);
        goto -> bb190;
    }
}
