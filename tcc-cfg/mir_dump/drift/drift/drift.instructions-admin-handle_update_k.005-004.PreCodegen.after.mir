// MIR for `admin::handle_update_k` after PreCodegen

fn admin::handle_update_k(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::AdminUpdateK<'_>>, _2: u128) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug sqrt_k => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _5: std::result::Result<(), anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let _7: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _12: ();
    let _13: ();
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _15: std::result::Result<(), anchor_lang::error::Error>;
    let mut _16: &anchor_lang::prelude::AccountInfo<'_>;
    let _17: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _18: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let _19: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _20: isize;
    let _21: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _24: ();
    let _25: anchor_lang::prelude::Clock;
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _27: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _28: isize;
    let _29: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _30: !;
    let mut _31: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _32: anchor_lang::prelude::Clock;
    let mut _35: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _37: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _38: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _39: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _40: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _41: isize;
    let mut _43: !;
    let mut _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _46: ();
    let mut _47: &str;
    let _48: &str;
    let mut _49: &std::string::String;
    let _50: &std::string::String;
    let _51: std::string::String;
    let mut _53: std::fmt::Arguments<'_>;
    let mut _54: &[&str];
    let mut _55: &[&str; 1];
    let _56: &[&str; 1];
    let _57: [&str; 1];
    let mut _58: &[core::fmt::rt::Argument<'_>];
    let mut _59: &[core::fmt::rt::Argument<'_>; 1];
    let _60: &[core::fmt::rt::Argument<'_>; 1];
    let _61: [core::fmt::rt::Argument<'_>; 1];
    let mut _62: core::fmt::rt::Argument<'_>;
    let mut _63: &u16;
    let _64: &u16;
    let _65: &state::perp_market::PerpMarket;
    let mut _66: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _68: i128;
    let mut _69: &state::perp_market::PerpMarket;
    let mut _70: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _72: i128;
    let mut _73: &state::perp_market::PerpMarket;
    let mut _74: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _76: &state::perp_market::PerpMarket;
    let mut _77: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _79: &state::perp_market::PerpMarket;
    let mut _80: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _82: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _83: std::result::Result<u64, error::ErrorCode>;
    let mut _84: u128;
    let mut _85: &state::perp_market::PerpMarket;
    let mut _86: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _87: u128;
    let mut _88: &state::perp_market::PerpMarket;
    let mut _89: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _90: u128;
    let mut _91: &state::perp_market::PerpMarket;
    let mut _92: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _93: isize;
    let mut _95: !;
    let mut _96: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _99: &state::perp_market::PerpMarket;
    let mut _100: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _102: &state::perp_market::PerpMarket;
    let mut _103: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _105: &state::perp_market::PerpMarket;
    let mut _106: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _108: &state::perp_market::PerpMarket;
    let mut _109: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _111: u128;
    let mut _112: u128;
    let mut _113: &state::perp_market::PerpMarket;
    let mut _114: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _116: u128;
    let mut _118: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::cp_curve::UpdateKResult>;
    let mut _119: std::result::Result<math::cp_curve::UpdateKResult, error::ErrorCode>;
    let mut _120: &state::perp_market::PerpMarket;
    let _121: &state::perp_market::PerpMarket;
    let mut _122: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _123: math::bn::U192;
    let mut _124: isize;
    let mut _126: !;
    let mut _127: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _130: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _131: std::result::Result<i128, error::ErrorCode>;
    let mut _132: &mut state::perp_market::PerpMarket;
    let mut _133: &mut state::perp_market::PerpMarket;
    let mut _134: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _135: &math::cp_curve::UpdateKResult;
    let _136: &math::cp_curve::UpdateKResult;
    let mut _137: isize;
    let mut _139: !;
    let mut _140: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _142: ();
    let mut _143: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _144: std::result::Result<(), error::ErrorCode>;
    let mut _145: &mut state::perp_market::PerpMarket;
    let mut _146: &mut state::perp_market::PerpMarket;
    let mut _147: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _148: &math::cp_curve::UpdateKResult;
    let _149: &math::cp_curve::UpdateKResult;
    let mut _150: isize;
    let mut _152: !;
    let mut _153: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _155: ();
    let mut _156: bool;
    let _157: ();
    let mut _158: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _159: std::result::Result<(), error::ErrorCode>;
    let mut _160: bool;
    let mut _161: i128;
    let mut _162: ();
    let _164: ();
    let mut _165: &str;
    let _166: &str;
    let mut _167: &std::string::String;
    let _168: &std::string::String;
    let _169: std::string::String;
    let mut _171: std::fmt::Arguments<'_>;
    let mut _172: &[&str];
    let mut _173: &[&str; 2];
    let _174: &[&str; 2];
    let _175: [&str; 2];
    let mut _176: &[core::fmt::rt::Argument<'_>];
    let mut _177: &[core::fmt::rt::Argument<'_>; 1];
    let _178: &[core::fmt::rt::Argument<'_>; 1];
    let _179: [core::fmt::rt::Argument<'_>; 1];
    let mut _180: core::fmt::rt::Argument<'_>;
    let mut _181: &error::ErrorCode;
    let _182: &error::ErrorCode;
    let _183: ();
    let mut _184: &str;
    let _185: &str;
    let mut _186: &std::string::String;
    let _187: &std::string::String;
    let _188: std::string::String;
    let mut _190: std::fmt::Arguments<'_>;
    let mut _191: &[&str];
    let mut _192: &[&str; 1];
    let _193: &[&str; 1];
    let _194: [&str; 1];
    let mut _195: error::ErrorCode;
    let mut _196: isize;
    let mut _198: !;
    let mut _199: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _201: ();
    let mut _202: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _203: std::result::Result<(), error::ErrorCode>;
    let mut _204: bool;
    let mut _205: i128;
    let mut _206: ();
    let _208: ();
    let mut _209: &str;
    let _210: &str;
    let mut _211: &std::string::String;
    let _212: &std::string::String;
    let _213: std::string::String;
    let mut _215: std::fmt::Arguments<'_>;
    let mut _216: &[&str];
    let mut _217: &[&str; 2];
    let _218: &[&str; 2];
    let _219: [&str; 2];
    let mut _220: &[core::fmt::rt::Argument<'_>];
    let mut _221: &[core::fmt::rt::Argument<'_>; 1];
    let _222: &[core::fmt::rt::Argument<'_>; 1];
    let _223: [core::fmt::rt::Argument<'_>; 1];
    let mut _224: core::fmt::rt::Argument<'_>;
    let mut _225: &error::ErrorCode;
    let _226: &error::ErrorCode;
    let _227: ();
    let mut _228: &str;
    let _229: &str;
    let mut _230: &std::string::String;
    let _231: &std::string::String;
    let _232: std::string::String;
    let mut _234: std::fmt::Arguments<'_>;
    let mut _235: &[&str];
    let mut _236: &[&str; 1];
    let _237: &[&str; 1];
    let _238: [&str; 1];
    let mut _239: error::ErrorCode;
    let mut _240: isize;
    let mut _242: !;
    let mut _243: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _245: ();
    let mut _246: bool;
    let mut _247: i128;
    let mut _249: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _250: std::result::Result<i128, error::ErrorCode>;
    let mut _251: i128;
    let mut _252: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _253: std::result::Result<i128, error::ErrorCode>;
    let mut _254: i128;
    let mut _255: &state::perp_market::PerpMarket;
    let mut _256: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _257: i128;
    let mut _258: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _259: std::result::Result<i128, error::ErrorCode>;
    let mut _260: u128;
    let mut _261: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _262: std::result::Result<u128, error::ErrorCode>;
    let mut _263: &state::perp_market::PerpMarket;
    let _264: &state::perp_market::PerpMarket;
    let mut _265: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _266: isize;
    let mut _268: !;
    let mut _269: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _271: isize;
    let mut _273: !;
    let mut _274: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _276: isize;
    let mut _278: !;
    let mut _279: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _281: i128;
    let mut _282: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _283: std::result::Result<i128, error::ErrorCode>;
    let mut _284: u128;
    let mut _285: &state::perp_market::PerpMarket;
    let mut _286: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _287: isize;
    let mut _289: !;
    let mut _290: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _292: isize;
    let mut _294: !;
    let mut _295: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _297: ();
    let mut _298: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _299: std::result::Result<(), error::ErrorCode>;
    let mut _300: bool;
    let mut _301: i128;
    let mut _302: i128;
    let mut _303: ();
    let _305: ();
    let mut _306: &str;
    let _307: &str;
    let mut _308: &std::string::String;
    let _309: &std::string::String;
    let _310: std::string::String;
    let mut _312: std::fmt::Arguments<'_>;
    let mut _313: &[&str];
    let mut _314: &[&str; 2];
    let _315: &[&str; 2];
    let _316: [&str; 2];
    let mut _317: &[core::fmt::rt::Argument<'_>];
    let mut _318: &[core::fmt::rt::Argument<'_>; 1];
    let _319: &[core::fmt::rt::Argument<'_>; 1];
    let _320: [core::fmt::rt::Argument<'_>; 1];
    let mut _321: core::fmt::rt::Argument<'_>;
    let mut _322: &error::ErrorCode;
    let _323: &error::ErrorCode;
    let _324: ();
    let mut _325: &str;
    let _326: &str;
    let mut _327: &std::string::String;
    let _328: &std::string::String;
    let _329: std::string::String;
    let mut _331: std::fmt::Arguments<'_>;
    let mut _332: &[&str];
    let mut _333: &[&str; 3];
    let _334: &[&str; 3];
    let _335: [&str; 3];
    let mut _336: &[core::fmt::rt::Argument<'_>];
    let mut _337: &[core::fmt::rt::Argument<'_>; 2];
    let _338: &[core::fmt::rt::Argument<'_>; 2];
    let _339: [core::fmt::rt::Argument<'_>; 2];
    let mut _340: core::fmt::rt::Argument<'_>;
    let mut _341: &i128;
    let _342: &i128;
    let mut _343: core::fmt::rt::Argument<'_>;
    let mut _344: &i128;
    let _345: &i128;
    let mut _346: error::ErrorCode;
    let mut _347: isize;
    let mut _349: !;
    let mut _350: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _352: ();
    let mut _353: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _354: std::result::Result<(), error::ErrorCode>;
    let mut _355: bool;
    let mut _356: bool;
    let mut _357: u128;
    let mut _358: &state::perp_market::PerpMarket;
    let mut _359: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _360: ();
    let _362: ();
    let mut _363: &str;
    let _364: &str;
    let mut _365: &std::string::String;
    let _366: &std::string::String;
    let _367: std::string::String;
    let mut _369: std::fmt::Arguments<'_>;
    let mut _370: &[&str];
    let mut _371: &[&str; 2];
    let _372: &[&str; 2];
    let _373: [&str; 2];
    let mut _374: &[core::fmt::rt::Argument<'_>];
    let mut _375: &[core::fmt::rt::Argument<'_>; 1];
    let _376: &[core::fmt::rt::Argument<'_>; 1];
    let _377: [core::fmt::rt::Argument<'_>; 1];
    let mut _378: core::fmt::rt::Argument<'_>;
    let mut _379: &error::ErrorCode;
    let _380: &error::ErrorCode;
    let _381: ();
    let mut _382: &str;
    let _383: &str;
    let mut _384: &std::string::String;
    let _385: &std::string::String;
    let _386: std::string::String;
    let mut _388: std::fmt::Arguments<'_>;
    let mut _389: &[&str];
    let mut _390: &[&str; 2];
    let _391: &[&str; 2];
    let _392: [&str; 2];
    let mut _393: &[core::fmt::rt::Argument<'_>];
    let mut _394: &[core::fmt::rt::Argument<'_>; 1];
    let _395: &[core::fmt::rt::Argument<'_>; 1];
    let _396: [core::fmt::rt::Argument<'_>; 1];
    let mut _397: core::fmt::rt::Argument<'_>;
    let mut _398: &u128;
    let _399: &u128;
    let _400: &state::perp_market::PerpMarket;
    let mut _401: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _402: error::ErrorCode;
    let mut _403: isize;
    let mut _405: !;
    let mut _406: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _408: i128;
    let mut _409: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _410: std::result::Result<i128, error::ErrorCode>;
    let mut _411: i128;
    let mut _412: &state::perp_market::PerpMarket;
    let mut _413: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _414: i128;
    let mut _415: isize;
    let mut _417: !;
    let mut _418: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _420: &mut state::perp_market::PerpMarket;
    let mut _421: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _422: i64;
    let mut _423: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _424: std::result::Result<i64, error::ErrorCode>;
    let mut _425: i64;
    let mut _426: &state::perp_market::PerpMarket;
    let mut _427: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _428: i64;
    let mut _429: i128;
    let mut _430: isize;
    let mut _432: !;
    let mut _433: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _435: &mut state::perp_market::PerpMarket;
    let mut _436: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _438: &state::perp_market::PerpMarket;
    let mut _439: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _441: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _442: std::result::Result<u64, error::ErrorCode>;
    let mut _443: u128;
    let mut _444: u128;
    let mut _445: u128;
    let mut _446: isize;
    let mut _448: !;
    let mut _449: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _452: &u128;
    let _453: u128;
    let mut _454: i128;
    let mut _455: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _456: std::result::Result<i128, error::ErrorCode>;
    let mut _457: i128;
    let mut _458: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _459: std::result::Result<i128, error::ErrorCode>;
    let mut _460: u64;
    let mut _461: isize;
    let mut _463: !;
    let mut _464: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _466: i128;
    let mut _467: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _468: std::result::Result<i128, error::ErrorCode>;
    let mut _469: u64;
    let mut _470: isize;
    let mut _472: !;
    let mut _473: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _475: isize;
    let mut _477: !;
    let mut _478: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _480: &u128;
    let _481: &u128;
    let _482: u128;
    let _483: ();
    let mut _484: bool;
    let mut _485: !;
    let _486: ();
    let mut _487: &str;
    let _488: &str;
    let mut _489: &std::string::String;
    let _490: &std::string::String;
    let _491: std::string::String;
    let mut _493: std::fmt::Arguments<'_>;
    let mut _494: &[&str];
    let mut _495: &[&str; 4];
    let _496: &[&str; 4];
    let _497: [&str; 4];
    let mut _498: &[core::fmt::rt::Argument<'_>];
    let mut _499: &[core::fmt::rt::Argument<'_>; 3];
    let _500: &[core::fmt::rt::Argument<'_>; 3];
    let _501: [core::fmt::rt::Argument<'_>; 3];
    let mut _502: core::fmt::rt::Argument<'_>;
    let mut _503: &u64;
    let _504: &u64;
    let mut _505: core::fmt::rt::Argument<'_>;
    let mut _506: &u64;
    let _507: &u64;
    let mut _508: core::fmt::rt::Argument<'_>;
    let mut _509: &u128;
    let _510: &u128;
    let _511: u128;
    let mut _512: anchor_lang::error::Error;
    let mut _513: error::ErrorCode;
    let mut _515: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _516: std::result::Result<u128, error::ErrorCode>;
    let mut _517: math::bn::U192;
    let mut _518: &math::bn::U192;
    let _519: math::bn::U192;
    let mut _520: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _521: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _522: math::bn::U192;
    let mut _523: u128;
    let mut _524: math::bn::U192;
    let mut _525: u128;
    let mut _526: isize;
    let mut _528: !;
    let mut _529: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _531: isize;
    let mut _533: !;
    let mut _534: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _537: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _538: std::result::Result<i128, error::ErrorCode>;
    let mut _539: i128;
    let mut _540: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _541: std::result::Result<i128, error::ErrorCode>;
    let mut _542: u128;
    let mut _543: isize;
    let mut _545: !;
    let mut _546: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _548: i128;
    let mut _549: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _550: std::result::Result<i128, error::ErrorCode>;
    let mut _551: u128;
    let mut _552: isize;
    let mut _554: !;
    let mut _555: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _557: isize;
    let mut _559: !;
    let mut _560: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _562: ();
    let mut _563: bool;
    let mut _564: u128;
    let mut _565: i128;
    let mut _566: !;
    let _567: ();
    let mut _568: &str;
    let _569: &str;
    let mut _570: &std::string::String;
    let _571: &std::string::String;
    let _572: std::string::String;
    let mut _574: std::fmt::Arguments<'_>;
    let mut _575: &[&str];
    let mut _576: &[&str; 3];
    let _577: &[&str; 3];
    let _578: [&str; 3];
    let mut _579: &[core::fmt::rt::Argument<'_>];
    let mut _580: &[core::fmt::rt::Argument<'_>; 3];
    let _581: &[core::fmt::rt::Argument<'_>; 3];
    let _582: [core::fmt::rt::Argument<'_>; 3];
    let mut _583: core::fmt::rt::Argument<'_>;
    let mut _584: &i128;
    let _585: &i128;
    let mut _586: core::fmt::rt::Argument<'_>;
    let mut _587: &u128;
    let _588: &u128;
    let mut _589: core::fmt::rt::Argument<'_>;
    let mut _590: &u128;
    let _591: &u128;
    let mut _592: anchor_lang::error::Error;
    let mut _593: error::ErrorCode;
    let _598: ();
    let mut _599: &str;
    let _600: &str;
    let mut _601: &std::string::String;
    let _602: &std::string::String;
    let _603: std::string::String;
    let mut _605: std::fmt::Arguments<'_>;
    let mut _606: &[&str];
    let mut _607: &[&str; 2];
    let _608: &[&str; 2];
    let _609: [&str; 2];
    let mut _610: &[core::fmt::rt::Argument<'_>];
    let mut _611: &[core::fmt::rt::Argument<'_>; 2];
    let _612: &[core::fmt::rt::Argument<'_>; 2];
    let _613: [core::fmt::rt::Argument<'_>; 2];
    let mut _614: core::fmt::rt::Argument<'_>;
    let mut _615: &u128;
    let _616: &u128;
    let mut _617: core::fmt::rt::Argument<'_>;
    let mut _618: &u128;
    let _619: &u128;
    let _620: ();
    let mut _621: &str;
    let _622: &str;
    let mut _623: &std::string::String;
    let _624: &std::string::String;
    let _625: std::string::String;
    let mut _627: std::fmt::Arguments<'_>;
    let mut _628: &[&str];
    let mut _629: &[&str; 2];
    let _630: &[&str; 2];
    let _631: [&str; 2];
    let mut _632: &[core::fmt::rt::Argument<'_>];
    let mut _633: &[core::fmt::rt::Argument<'_>; 2];
    let _634: &[core::fmt::rt::Argument<'_>; 2];
    let _635: [core::fmt::rt::Argument<'_>; 2];
    let mut _636: core::fmt::rt::Argument<'_>;
    let mut _637: &u128;
    let _638: &u128;
    let mut _639: core::fmt::rt::Argument<'_>;
    let mut _640: &u128;
    let _641: &u128;
    let _642: ();
    let mut _643: &str;
    let _644: &str;
    let mut _645: &std::string::String;
    let _646: &std::string::String;
    let _647: std::string::String;
    let mut _649: std::fmt::Arguments<'_>;
    let mut _650: &[&str];
    let mut _651: &[&str; 2];
    let _652: &[&str; 2];
    let _653: [&str; 2];
    let mut _654: &[core::fmt::rt::Argument<'_>];
    let mut _655: &[core::fmt::rt::Argument<'_>; 2];
    let _656: &[core::fmt::rt::Argument<'_>; 2];
    let _657: [core::fmt::rt::Argument<'_>; 2];
    let mut _658: core::fmt::rt::Argument<'_>;
    let mut _659: &u128;
    let _660: &u128;
    let mut _661: core::fmt::rt::Argument<'_>;
    let mut _662: &u128;
    let _663: &u128;
    let _664: ();
    let mut _665: &str;
    let _666: &str;
    let mut _667: &std::string::String;
    let _668: &std::string::String;
    let _669: std::string::String;
    let mut _671: std::fmt::Arguments<'_>;
    let mut _672: &[&str];
    let mut _673: &[&str; 2];
    let _674: &[&str; 2];
    let _675: [&str; 2];
    let mut _676: &[core::fmt::rt::Argument<'_>];
    let mut _677: &[core::fmt::rt::Argument<'_>; 2];
    let _678: &[core::fmt::rt::Argument<'_>; 2];
    let _679: [core::fmt::rt::Argument<'_>; 2];
    let mut _680: core::fmt::rt::Argument<'_>;
    let mut _681: &u128;
    let _682: &u128;
    let mut _683: core::fmt::rt::Argument<'_>;
    let mut _684: &u128;
    let _685: &u128;
    let mut _689: state::oracle::OraclePriceData;
    let mut _690: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::oracle::OraclePriceData>;
    let mut _691: std::result::Result<state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _692: &state::oracle::OracleSource;
    let _693: &state::oracle::OracleSource;
    let _694: &state::perp_market::PerpMarket;
    let mut _695: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _696: &anchor_lang::prelude::AccountInfo<'_>;
    let _697: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _698: u64;
    let mut _699: isize;
    let mut _701: !;
    let mut _702: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _704: ();
    let _705: ();
    let mut _706: &[&[u8]];
    let mut _707: &[&[u8]; 1];
    let _708: &[&[u8]; 1];
    let _709: [&[u8]; 1];
    let mut _710: &[u8];
    let _711: &[u8];
    let mut _712: &std::vec::Vec<u8>;
    let _713: &std::vec::Vec<u8>;
    let _714: std::vec::Vec<u8>;
    let mut _715: &state::events::CurveRecord;
    let _716: &state::events::CurveRecord;
    let _717: state::events::CurveRecord;
    let mut _718: i64;
    let mut _719: u64;
    let mut _721: &state::perp_market::PerpMarket;
    let mut _722: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _723: u64;
    let mut _724: std::option::Option<u64>;
    let mut _725: std::option::Option<u64>;
    let mut _726: u64;
    let mut _727: std::option::Option<u64>;
    let mut _728: &mut state::perp_market::PerpMarket;
    let mut _729: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _730: u16;
    let mut _731: &state::perp_market::PerpMarket;
    let mut _732: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _733: u128;
    let mut _734: u128;
    let mut _735: u128;
    let mut _736: u128;
    let mut _737: u128;
    let mut _738: u128;
    let mut _739: u128;
    let mut _740: u128;
    let mut _741: u128;
    let mut _742: u128;
    let mut _743: i128;
    let mut _744: u32;
    let mut _745: i128;
    let mut _746: i128;
    let mut _747: i128;
    let mut _748: i64;
    let mut _749: ();
    let mut _767: &mut instructions::admin::AdminUpdateK<'_>;
    let mut _768: &mut instructions::admin::AdminUpdateK<'_>;
    let mut _769: &mut instructions::admin::AdminUpdateK<'_>;
    let mut _770: &mut instructions::admin::AdminUpdateK<'_>;
    let mut _771: &mut instructions::admin::AdminUpdateK<'_>;
    let mut _772: isize;
    let mut _773: isize;
    let mut _774: isize;
    let mut _775: isize;
    let mut _776: isize;
    let mut _777: isize;
    let mut _778: isize;
    let mut _779: isize;
    let mut _780: isize;
    let mut _781: isize;
    let mut _782: isize;
    let mut _783: isize;
    let mut _784: isize;
    let mut _785: isize;
    let mut _786: isize;
    let mut _787: isize;
    let mut _788: isize;
    let mut _789: isize;
    let mut _790: isize;
    let mut _791: isize;
    scope 1 {
        debug residual => _9;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _12;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _21;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _24;
        scope 8 {
        }
    }
    scope 9 {
        debug clock => _25;
        let _33: i64;
        scope 14 {
            debug now => _33;
            let _34: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
            let _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _45: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
            scope 15 {
                debug perp_market => _34;
                let _52: std::string::String;
                let _67: u128;
                let mut _766: &[&str; 1];
                scope 20 {
                    debug res => _52;
                }
                scope 21 {
                    debug base_asset_amount_long => _67;
                    let _71: u128;
                    scope 22 {
                        debug base_asset_amount_short => _71;
                        let _75: i128;
                        scope 23 {
                            debug base_asset_amount_with_amm => _75;
                            let _78: u32;
                            scope 24 {
                                debug number_of_users => _78;
                                let _81: u64;
                                let _94: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _97: u64;
                                scope 25 {
                                    debug price_before => _81;
                                    let _98: u128;
                                    scope 30 {
                                        debug peg_multiplier_before => _98;
                                        let _101: u128;
                                        scope 31 {
                                            debug base_asset_reserve_before => _101;
                                            let _104: u128;
                                            scope 32 {
                                                debug quote_asset_reserve_before => _104;
                                                let _107: u128;
                                                scope 33 {
                                                    debug sqrt_k_before => _107;
                                                    let _110: bool;
                                                    scope 34 {
                                                        debug k_increasing => _110;
                                                        let _115: math::bn::U192;
                                                        scope 35 {
                                                            debug new_sqrt_k_u192 => _115;
                                                            let _117: math::cp_curve::UpdateKResult;
                                                            let _125: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _128: math::cp_curve::UpdateKResult;
                                                            scope 36 {
                                                                debug update_k_result => _117;
                                                                let _129: i128;
                                                                let _138: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _141: i128;
                                                                scope 41 {
                                                                    debug adjustment_cost => _129;
                                                                    let _151: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _154: ();
                                                                    let _163: error::ErrorCode;
                                                                    let _197: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _200: ();
                                                                    let _207: error::ErrorCode;
                                                                    let _241: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _244: ();
                                                                    let _248: i128;
                                                                    let _267: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _270: u128;
                                                                    let _272: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _275: i128;
                                                                    let _277: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _280: i128;
                                                                    let _288: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _291: i128;
                                                                    let _293: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _296: i128;
                                                                    let _361: error::ErrorCode;
                                                                    let _404: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _407: ();
                                                                    let _416: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _419: i128;
                                                                    let _431: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _434: i64;
                                                                    let _437: &state::perp_market::AMM;
                                                                    scope 46 {
                                                                        debug residual => _151;
                                                                        scope 47 {
                                                                        }
                                                                    }
                                                                    scope 48 {
                                                                        debug val => _154;
                                                                        scope 49 {
                                                                        }
                                                                    }
                                                                    scope 50 {
                                                                        debug error_code => _163;
                                                                        let _170: std::string::String;
                                                                        let _189: std::string::String;
                                                                        let mut _762: &[&str; 1];
                                                                        let mut _763: &[&str; 2];
                                                                        scope 51 {
                                                                            debug res => _170;
                                                                        }
                                                                        scope 52 {
                                                                            debug res => _189;
                                                                        }
                                                                    }
                                                                    scope 53 {
                                                                        debug residual => _197;
                                                                        scope 54 {
                                                                        }
                                                                    }
                                                                    scope 55 {
                                                                        debug val => _200;
                                                                        scope 56 {
                                                                        }
                                                                    }
                                                                    scope 57 {
                                                                        debug error_code => _207;
                                                                        let _214: std::string::String;
                                                                        let _233: std::string::String;
                                                                        let mut _764: &[&str; 1];
                                                                        let mut _765: &[&str; 2];
                                                                        scope 58 {
                                                                            debug res => _214;
                                                                        }
                                                                        scope 59 {
                                                                            debug res => _233;
                                                                        }
                                                                    }
                                                                    scope 60 {
                                                                        debug residual => _241;
                                                                        scope 61 {
                                                                        }
                                                                    }
                                                                    scope 62 {
                                                                        debug val => _244;
                                                                        scope 63 {
                                                                        }
                                                                    }
                                                                    scope 64 {
                                                                        debug max_cost => _248;
                                                                        let _304: error::ErrorCode;
                                                                        let _348: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _351: ();
                                                                        scope 85 {
                                                                            debug error_code => _304;
                                                                            let _311: std::string::String;
                                                                            let _330: std::string::String;
                                                                            let mut _760: &[&str; 3];
                                                                            let mut _761: &[&str; 2];
                                                                            scope 86 {
                                                                                debug res => _311;
                                                                            }
                                                                            scope 87 {
                                                                                debug res => _330;
                                                                            }
                                                                        }
                                                                        scope 88 {
                                                                            debug residual => _348;
                                                                            scope 89 {
                                                                            }
                                                                        }
                                                                        scope 90 {
                                                                            debug val => _351;
                                                                            scope 91 {
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 65 {
                                                                        debug residual => _267;
                                                                        scope 66 {
                                                                        }
                                                                    }
                                                                    scope 67 {
                                                                        debug val => _270;
                                                                        scope 68 {
                                                                        }
                                                                    }
                                                                    scope 69 {
                                                                        debug residual => _272;
                                                                        scope 70 {
                                                                        }
                                                                    }
                                                                    scope 71 {
                                                                        debug val => _275;
                                                                        scope 72 {
                                                                        }
                                                                    }
                                                                    scope 73 {
                                                                        debug residual => _277;
                                                                        scope 74 {
                                                                        }
                                                                    }
                                                                    scope 75 {
                                                                        debug val => _280;
                                                                        scope 76 {
                                                                        }
                                                                    }
                                                                    scope 77 {
                                                                        debug residual => _288;
                                                                        scope 78 {
                                                                        }
                                                                    }
                                                                    scope 79 {
                                                                        debug val => _291;
                                                                        scope 80 {
                                                                        }
                                                                    }
                                                                    scope 81 {
                                                                        debug residual => _293;
                                                                        scope 82 {
                                                                        }
                                                                    }
                                                                    scope 83 {
                                                                        debug val => _296;
                                                                        scope 84 {
                                                                        }
                                                                    }
                                                                    scope 92 {
                                                                        debug error_code => _361;
                                                                        let _368: std::string::String;
                                                                        let _387: std::string::String;
                                                                        let mut _758: &[&str; 2];
                                                                        let mut _759: &[&str; 2];
                                                                        scope 93 {
                                                                            debug res => _368;
                                                                        }
                                                                        scope 94 {
                                                                            debug res => _387;
                                                                        }
                                                                    }
                                                                    scope 95 {
                                                                        debug residual => _404;
                                                                        scope 96 {
                                                                        }
                                                                    }
                                                                    scope 97 {
                                                                        debug val => _407;
                                                                        scope 98 {
                                                                        }
                                                                    }
                                                                    scope 99 {
                                                                        debug residual => _416;
                                                                        scope 100 {
                                                                        }
                                                                    }
                                                                    scope 101 {
                                                                        debug val => _419;
                                                                        scope 102 {
                                                                        }
                                                                    }
                                                                    scope 103 {
                                                                        debug residual => _431;
                                                                        scope 104 {
                                                                        }
                                                                    }
                                                                    scope 105 {
                                                                        debug val => _434;
                                                                        scope 106 {
                                                                        }
                                                                    }
                                                                    scope 107 {
                                                                        debug amm => _437;
                                                                        let _440: u64;
                                                                        let _447: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _450: u64;
                                                                        scope 108 {
                                                                            debug price_after => _440;
                                                                            let _451: bool;
                                                                            let _462: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _465: i128;
                                                                            let _471: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _474: i128;
                                                                            let _476: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _479: i128;
                                                                            let mut _757: &u128;
                                                                            scope 113 {
                                                                                debug price_change_too_large => _451;
                                                                                let _492: std::string::String;
                                                                                let _514: u128;
                                                                                let _527: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _530: math::bn::U192;
                                                                                let _532: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _535: u128;
                                                                                let mut _750: &u128;
                                                                                let mut _751: &[&str; 4];
                                                                                scope 126 {
                                                                                    debug res => _492;
                                                                                }
                                                                                scope 127 {
                                                                                    debug k_sqrt_check => _514;
                                                                                    let _536: i128;
                                                                                    let _544: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _547: i128;
                                                                                    let _553: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _556: i128;
                                                                                    let _558: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _561: i128;
                                                                                    scope 136 {
                                                                                        debug k_err => _536;
                                                                                        let _573: std::string::String;
                                                                                        let _594: u128;
                                                                                        let mut _752: &[&str; 3];
                                                                                        scope 149 {
                                                                                            debug res => _573;
                                                                                        }
                                                                                        scope 150 {
                                                                                            debug peg_multiplier_after => _594;
                                                                                            let _595: u128;
                                                                                            scope 151 {
                                                                                                debug base_asset_reserve_after => _595;
                                                                                                let _596: u128;
                                                                                                scope 152 {
                                                                                                    debug quote_asset_reserve_after => _596;
                                                                                                    let _597: u128;
                                                                                                    scope 153 {
                                                                                                        debug sqrt_k_after => _597;
                                                                                                        let _604: std::string::String;
                                                                                                        let _626: std::string::String;
                                                                                                        let _648: std::string::String;
                                                                                                        let _670: std::string::String;
                                                                                                        let _686: i128;
                                                                                                        let mut _753: &[&str; 2];
                                                                                                        let mut _754: &[&str; 2];
                                                                                                        let mut _755: &[&str; 2];
                                                                                                        let mut _756: &[&str; 2];
                                                                                                        scope 154 {
                                                                                                            debug res => _604;
                                                                                                        }
                                                                                                        scope 155 {
                                                                                                            debug res => _626;
                                                                                                        }
                                                                                                        scope 156 {
                                                                                                            debug res => _648;
                                                                                                        }
                                                                                                        scope 157 {
                                                                                                            debug res => _670;
                                                                                                        }
                                                                                                        scope 158 {
                                                                                                            debug total_fee => _686;
                                                                                                            let _687: i128;
                                                                                                            scope 159 {
                                                                                                                debug total_fee_minus_distributions => _687;
                                                                                                                let _688: i64;
                                                                                                                let _700: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                let _703: state::oracle::OraclePriceData;
                                                                                                                scope 160 {
                                                                                                                    debug oracle_price => _688;
                                                                                                                    let _720: u64;
                                                                                                                    scope 165 {
                                                                                                                        debug current_id => _720;
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 161 {
                                                                                                                    debug residual => _700;
                                                                                                                    scope 162 {
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 163 {
                                                                                                                    debug val => _703;
                                                                                                                    scope 164 {
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    scope 137 {
                                                                                        debug residual => _544;
                                                                                        scope 138 {
                                                                                        }
                                                                                    }
                                                                                    scope 139 {
                                                                                        debug val => _547;
                                                                                        scope 140 {
                                                                                        }
                                                                                    }
                                                                                    scope 141 {
                                                                                        debug residual => _553;
                                                                                        scope 142 {
                                                                                        }
                                                                                    }
                                                                                    scope 143 {
                                                                                        debug val => _556;
                                                                                        scope 144 {
                                                                                        }
                                                                                    }
                                                                                    scope 145 {
                                                                                        debug residual => _558;
                                                                                        scope 146 {
                                                                                        }
                                                                                    }
                                                                                    scope 147 {
                                                                                        debug val => _561;
                                                                                        scope 148 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                                scope 128 {
                                                                                    debug residual => _527;
                                                                                    scope 129 {
                                                                                    }
                                                                                }
                                                                                scope 130 {
                                                                                    debug val => _530;
                                                                                    scope 131 {
                                                                                    }
                                                                                }
                                                                                scope 132 {
                                                                                    debug residual => _532;
                                                                                    scope 133 {
                                                                                    }
                                                                                }
                                                                                scope 134 {
                                                                                    debug val => _535;
                                                                                    scope 135 {
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 114 {
                                                                                debug residual => _462;
                                                                                scope 115 {
                                                                                }
                                                                            }
                                                                            scope 116 {
                                                                                debug val => _465;
                                                                                scope 117 {
                                                                                }
                                                                            }
                                                                            scope 118 {
                                                                                debug residual => _471;
                                                                                scope 119 {
                                                                                }
                                                                            }
                                                                            scope 120 {
                                                                                debug val => _474;
                                                                                scope 121 {
                                                                                }
                                                                            }
                                                                            scope 122 {
                                                                                debug residual => _476;
                                                                                scope 123 {
                                                                                }
                                                                            }
                                                                            scope 124 {
                                                                                debug val => _479;
                                                                                scope 125 {
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 109 {
                                                                            debug residual => _447;
                                                                            scope 110 {
                                                                            }
                                                                        }
                                                                        scope 111 {
                                                                            debug val => _450;
                                                                            scope 112 {
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                scope 42 {
                                                                    debug residual => _138;
                                                                    scope 43 {
                                                                    }
                                                                }
                                                                scope 44 {
                                                                    debug val => _141;
                                                                    scope 45 {
                                                                    }
                                                                }
                                                            }
                                                            scope 37 {
                                                                debug residual => _125;
                                                                scope 38 {
                                                                }
                                                            }
                                                            scope 39 {
                                                                debug val => _128;
                                                                scope 40 {
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                scope 26 {
                                    debug residual => _94;
                                    scope 27 {
                                    }
                                }
                                scope 28 {
                                    debug val => _97;
                                    scope 29 {
                                    }
                                }
                            }
                        }
                    }
                }
            }
            scope 16 {
                debug residual => _42;
                scope 17 {
                }
            }
            scope 18 {
                debug val => _45;
                scope 19 {
                }
            }
        }
    }
    scope 10 {
        debug residual => _29;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _32;
        scope 13 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _767 = deref_copy (_1.1: &mut instructions::admin::AdminUpdateK<'_>);
        _7 = &((*_767).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _6 = &(*_7);
        _5 = constraints::perp_market_valid(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb351];
    }

    bb2: {
        StorageDead(_5);
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_4 as Continue).0: ());
        _3 = _12;
        StorageDead(_12);
        _772 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _768 = deref_copy (_1.1: &mut instructions::admin::AdminUpdateK<'_>);
        _17 = &((*_768).3: anchor_lang::prelude::AccountInfo<'_>);
        _16 = &(*_17);
        StorageLive(_18);
        StorageLive(_19);
        _769 = deref_copy (_1.1: &mut instructions::admin::AdminUpdateK<'_>);
        _19 = &((*_769).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _18 = &(*_19);
        _15 = constraints::valid_oracle_for_perp_market(move _16, move _18) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _11) -> [return: bb6, unwind: bb355];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _786 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb333;
    }

    bb7: {
        StorageDead(_18);
        StorageDead(_16);
        _14 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _15) -> [return: bb8, unwind: bb351];
    }

    bb8: {
        StorageDead(_15);
        _20 = discriminant(_14);
        switchInt(move _20) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_24);
        _24 = ((_14 as Continue).0: ());
        _13 = _24;
        StorageDead(_24);
        _774 = discriminant(_14);
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_21);
        _21 = move ((_14 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_23);
        _23 = move _21;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _23) -> [return: bb11, unwind: bb354];
    }

    bb11: {
        StorageDead(_23);
        StorageDead(_21);
        _784 = discriminant(_14);
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb333;
    }

    bb12: {
        _26 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _27) -> [return: bb13, unwind: bb351];
    }

    bb13: {
        StorageDead(_27);
        _28 = discriminant(_26);
        switchInt(move _28) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_32);
        _32 = move ((_26 as Continue).0: anchor_lang::prelude::Clock);
        _25 = move _32;
        StorageDead(_32);
        _776 = discriminant(_26);
        StorageDead(_26);
        StorageLive(_33);
        _33 = (_25.4: i64);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _770 = deref_copy (_1.1: &mut instructions::admin::AdminUpdateK<'_>);
        _39 = &((*_770).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _38 = anchor_lang::prelude::AccountLoader::<'_, PerpMarket>::load_mut(move _39) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_29);
        _29 = move ((_26 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_31);
        _31 = move _29;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _31) -> [return: bb16, unwind: bb353];
    }

    bb16: {
        StorageDead(_31);
        StorageDead(_29);
        _782 = discriminant(_26);
        StorageDead(_26);
        goto -> bb332;
    }

    bb17: {
        StorageDead(_39);
        StorageLive(_40);
        _40 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _37 = std::result::Result::<RefMut<'_, PerpMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _38, move _40) -> [return: bb18, unwind: bb351];
    }

    bb18: {
        StorageDead(_40);
        StorageDead(_38);
        _36 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _37) -> [return: bb19, unwind: bb351];
    }

    bb19: {
        StorageDead(_37);
        _41 = discriminant(_36);
        switchInt(move _41) -> [0: bb20, 1: bb21, otherwise: bb4];
    }

    bb20: {
        StorageLive(_45);
        _45 = move ((_36 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _35 = move _45;
        StorageDead(_45);
        _34 = &mut _35;
        _780 = discriminant(_36);
        StorageDead(_36);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _766 = const _;
        _56 = &(*_766);
        _55 = &(*_56);
        _54 = move _55 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_55);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _66 = &(*_34);
        _65 = <RefMut<'_, PerpMarket> as Deref>::deref(move _66) -> [return: bb23, unwind: bb350];
    }

    bb21: {
        StorageLive(_42);
        _42 = ((_36 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_44);
        _44 = _42;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _44) -> [return: bb22, unwind: bb352];
    }

    bb22: {
        StorageDead(_44);
        StorageDead(_42);
        _778 = discriminant(_36);
        StorageDead(_36);
        goto -> bb331;
    }

    bb23: {
        StorageDead(_66);
        _64 = &((*_65).21: u16);
        _63 = &(*_64);
        _62 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _63) -> [return: bb24, unwind: bb350];
    }

    bb24: {
        StorageDead(_63);
        _61 = [move _62];
        StorageDead(_62);
        _60 = &_61;
        _59 = &(*_60);
        _58 = move _59 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_59);
        _53 = Arguments::<'_>::new_v1(move _54, move _58) -> [return: bb25, unwind: bb350];
    }

    bb25: {
        StorageDead(_58);
        StorageDead(_54);
        _52 = format(move _53) -> [return: bb26, unwind: bb350];
    }

    bb26: {
        StorageDead(_53);
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_56);
        _51 = move _52;
        StorageDead(_52);
        _50 = &_51;
        _49 = &(*_50);
        _48 = <String as Deref>::deref(move _49) -> [return: bb27, unwind: bb349];
    }

    bb27: {
        _47 = &(*_48);
        StorageDead(_49);
        _46 = solana_program::log::sol_log(move _47) -> [return: bb28, unwind: bb349];
    }

    bb28: {
        StorageDead(_47);
        drop(_51) -> [return: bb29, unwind: bb350];
    }

    bb29: {
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_48);
        StorageDead(_46);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &(*_34);
        _69 = <RefMut<'_, PerpMarket> as Deref>::deref(move _70) -> [return: bb30, unwind: bb350];
    }

    bb30: {
        StorageDead(_70);
        _68 = (((*_69).1: state::perp_market::AMM).13: i128);
        _67 = core::num::<impl i128>::unsigned_abs(move _68) -> [return: bb31, unwind: bb350];
    }

    bb31: {
        StorageDead(_68);
        StorageDead(_69);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = &(*_34);
        _73 = <RefMut<'_, PerpMarket> as Deref>::deref(move _74) -> [return: bb32, unwind: bb350];
    }

    bb32: {
        StorageDead(_74);
        _72 = (((*_73).1: state::perp_market::AMM).14: i128);
        _71 = core::num::<impl i128>::unsigned_abs(move _72) -> [return: bb33, unwind: bb350];
    }

    bb33: {
        StorageDead(_72);
        StorageDead(_73);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _77 = &(*_34);
        _76 = <RefMut<'_, PerpMarket> as Deref>::deref(move _77) -> [return: bb34, unwind: bb350];
    }

    bb34: {
        StorageDead(_77);
        _75 = (((*_76).1: state::perp_market::AMM).15: i128);
        StorageDead(_76);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _80 = &(*_34);
        _79 = <RefMut<'_, PerpMarket> as Deref>::deref(move _80) -> [return: bb35, unwind: bb350];
    }

    bb35: {
        StorageDead(_80);
        _78 = ((*_79).19: u32);
        StorageDead(_79);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = &(*_34);
        _85 = <RefMut<'_, PerpMarket> as Deref>::deref(move _86) -> [return: bb36, unwind: bb350];
    }

    bb36: {
        StorageDead(_86);
        _84 = (((*_85).1: state::perp_market::AMM).6: u128);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = &(*_34);
        _88 = <RefMut<'_, PerpMarket> as Deref>::deref(move _89) -> [return: bb37, unwind: bb350];
    }

    bb37: {
        StorageDead(_89);
        _87 = (((*_88).1: state::perp_market::AMM).5: u128);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _92 = &(*_34);
        _91 = <RefMut<'_, PerpMarket> as Deref>::deref(move _92) -> [return: bb38, unwind: bb350];
    }

    bb38: {
        StorageDead(_92);
        _90 = (((*_91).1: state::perp_market::AMM).11: u128);
        _83 = calculate_price(move _84, move _87, move _90) -> [return: bb39, unwind: bb350];
    }

    bb39: {
        StorageDead(_90);
        StorageDead(_87);
        StorageDead(_84);
        _82 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _83) -> [return: bb40, unwind: bb350];
    }

    bb40: {
        StorageDead(_83);
        _93 = discriminant(_82);
        switchInt(move _93) -> [0: bb41, 1: bb42, otherwise: bb4];
    }

    bb41: {
        StorageLive(_97);
        _97 = ((_82 as Continue).0: u64);
        _81 = _97;
        StorageDead(_97);
        StorageDead(_91);
        StorageDead(_88);
        StorageDead(_85);
        StorageDead(_82);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = &(*_34);
        _99 = <RefMut<'_, PerpMarket> as Deref>::deref(move _100) -> [return: bb44, unwind: bb350];
    }

    bb42: {
        StorageLive(_94);
        _94 = ((_82 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_96);
        _96 = _94;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _96) -> [return: bb43, unwind: bb350];
    }

    bb43: {
        StorageDead(_96);
        StorageDead(_94);
        StorageDead(_91);
        StorageDead(_88);
        StorageDead(_85);
        StorageDead(_82);
        goto -> bb330;
    }

    bb44: {
        StorageDead(_100);
        _98 = (((*_99).1: state::perp_market::AMM).11: u128);
        StorageDead(_99);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        _103 = &(*_34);
        _102 = <RefMut<'_, PerpMarket> as Deref>::deref(move _103) -> [return: bb45, unwind: bb350];
    }

    bb45: {
        StorageDead(_103);
        _101 = (((*_102).1: state::perp_market::AMM).5: u128);
        StorageDead(_102);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        _106 = &(*_34);
        _105 = <RefMut<'_, PerpMarket> as Deref>::deref(move _106) -> [return: bb46, unwind: bb350];
    }

    bb46: {
        StorageDead(_106);
        _104 = (((*_105).1: state::perp_market::AMM).6: u128);
        StorageDead(_105);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        _109 = &(*_34);
        _108 = <RefMut<'_, PerpMarket> as Deref>::deref(move _109) -> [return: bb47, unwind: bb350];
    }

    bb47: {
        StorageDead(_109);
        _107 = (((*_108).1: state::perp_market::AMM).10: u128);
        StorageDead(_108);
        StorageLive(_110);
        StorageLive(_111);
        _111 = _2;
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        _114 = &(*_34);
        _113 = <RefMut<'_, PerpMarket> as Deref>::deref(move _114) -> [return: bb48, unwind: bb350];
    }

    bb48: {
        StorageDead(_114);
        _112 = (((*_113).1: state::perp_market::AMM).10: u128);
        _110 = Gt(move _111, move _112);
        StorageDead(_112);
        StorageDead(_111);
        StorageDead(_113);
        StorageLive(_115);
        StorageLive(_116);
        _116 = _2;
        _115 = <U192 as From<u128>>::from(move _116) -> [return: bb49, unwind: bb350];
    }

    bb49: {
        StorageDead(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        _122 = &(*_34);
        _121 = <RefMut<'_, PerpMarket> as Deref>::deref(move _122) -> [return: bb50, unwind: bb350];
    }

    bb50: {
        _120 = &(*_121);
        StorageDead(_122);
        StorageLive(_123);
        _123 = _115;
        _119 = get_update_k_result(move _120, move _123, const true) -> [return: bb51, unwind: bb350];
    }

    bb51: {
        StorageDead(_123);
        StorageDead(_120);
        _118 = <std::result::Result<UpdateKResult, error::ErrorCode> as Try>::branch(move _119) -> [return: bb52, unwind: bb350];
    }

    bb52: {
        StorageDead(_119);
        _124 = discriminant(_118);
        switchInt(move _124) -> [0: bb53, 1: bb54, otherwise: bb4];
    }

    bb53: {
        StorageLive(_128);
        _128 = move ((_118 as Continue).0: math::cp_curve::UpdateKResult);
        _117 = move _128;
        StorageDead(_128);
        StorageDead(_121);
        StorageDead(_118);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        _134 = &mut (*_34);
        _133 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _134) -> [return: bb56, unwind: bb350];
    }

    bb54: {
        StorageLive(_125);
        _125 = ((_118 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_127);
        _127 = _125;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _127) -> [return: bb55, unwind: bb350];
    }

    bb55: {
        StorageDead(_127);
        StorageDead(_125);
        StorageDead(_121);
        StorageDead(_118);
        goto -> bb329;
    }

    bb56: {
        _132 = &mut (*_133);
        StorageDead(_134);
        StorageLive(_135);
        StorageLive(_136);
        _136 = &_117;
        _135 = &(*_136);
        _131 = adjust_k_cost(move _132, move _135) -> [return: bb57, unwind: bb350];
    }

    bb57: {
        StorageDead(_135);
        StorageDead(_132);
        _130 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _131) -> [return: bb58, unwind: bb350];
    }

    bb58: {
        StorageDead(_131);
        _137 = discriminant(_130);
        switchInt(move _137) -> [0: bb59, 1: bb60, otherwise: bb4];
    }

    bb59: {
        StorageLive(_141);
        _141 = ((_130 as Continue).0: i128);
        _129 = _141;
        StorageDead(_141);
        StorageDead(_136);
        StorageDead(_133);
        StorageDead(_130);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        _147 = &mut (*_34);
        _146 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _147) -> [return: bb62, unwind: bb350];
    }

    bb60: {
        StorageLive(_138);
        _138 = ((_130 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_140);
        _140 = _138;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _140) -> [return: bb61, unwind: bb350];
    }

    bb61: {
        StorageDead(_140);
        StorageDead(_138);
        StorageDead(_136);
        StorageDead(_133);
        StorageDead(_130);
        goto -> bb328;
    }

    bb62: {
        _145 = &mut (*_146);
        StorageDead(_147);
        StorageLive(_148);
        StorageLive(_149);
        _149 = &_117;
        _148 = &(*_149);
        _144 = cp_curve::update_k(move _145, move _148) -> [return: bb63, unwind: bb350];
    }

    bb63: {
        StorageDead(_148);
        StorageDead(_145);
        _143 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _144) -> [return: bb64, unwind: bb350];
    }

    bb64: {
        StorageDead(_144);
        _150 = discriminant(_143);
        switchInt(move _150) -> [0: bb65, 1: bb66, otherwise: bb4];
    }

    bb65: {
        StorageLive(_154);
        _154 = ((_143 as Continue).0: ());
        _142 = _154;
        StorageDead(_154);
        StorageDead(_149);
        StorageDead(_146);
        StorageDead(_143);
        StorageDead(_142);
        StorageLive(_155);
        StorageLive(_156);
        _156 = _110;
        switchInt(move _156) -> [0: bb69, otherwise: bb68];
    }

    bb66: {
        StorageLive(_151);
        _151 = ((_143 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_153);
        _153 = _151;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _153) -> [return: bb67, unwind: bb350];
    }

    bb67: {
        StorageDead(_153);
        StorageDead(_151);
        StorageDead(_149);
        StorageDead(_146);
        StorageDead(_143);
        StorageDead(_142);
        goto -> bb328;
    }

    bb68: {
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        _161 = _129;
        _160 = Ge(move _161, const 0_i128);
        switchInt(move _160) -> [0: bb71, otherwise: bb70];
    }

    bb69: {
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        _205 = _129;
        _204 = Le(move _205, const 0_i128);
        switchInt(move _204) -> [0: bb89, otherwise: bb88];
    }

    bb70: {
        StorageDead(_161);
        StorageLive(_162);
        _162 = ();
        _159 = std::result::Result::<(), error::ErrorCode>::Ok(move _162);
        StorageDead(_162);
        goto -> bb83;
    }

    bb71: {
        StorageDead(_161);
        StorageLive(_163);
        _163 = error::ErrorCode::InvalidUpdateK;
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        _763 = const _;
        _174 = &(*_763);
        _173 = &(*_174);
        _172 = move _173 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_173);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        _182 = &_163;
        _181 = &(*_182);
        _180 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _181) -> [return: bb72, unwind: bb350];
    }

    bb72: {
        StorageDead(_181);
        _179 = [move _180];
        StorageDead(_180);
        _178 = &_179;
        _177 = &(*_178);
        _176 = move _177 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_177);
        _171 = Arguments::<'_>::new_v1(move _172, move _176) -> [return: bb73, unwind: bb350];
    }

    bb73: {
        StorageDead(_176);
        StorageDead(_172);
        _170 = format(move _171) -> [return: bb74, unwind: bb350];
    }

    bb74: {
        StorageDead(_171);
        StorageDead(_182);
        StorageDead(_179);
        StorageDead(_178);
        StorageDead(_174);
        _169 = move _170;
        StorageDead(_170);
        _168 = &_169;
        _167 = &(*_168);
        _166 = <String as Deref>::deref(move _167) -> [return: bb75, unwind: bb348];
    }

    bb75: {
        _165 = &(*_166);
        StorageDead(_167);
        _164 = solana_program::log::sol_log(move _165) -> [return: bb76, unwind: bb348];
    }

    bb76: {
        StorageDead(_165);
        drop(_169) -> [return: bb77, unwind: bb350];
    }

    bb77: {
        StorageDead(_169);
        StorageDead(_168);
        StorageDead(_166);
        StorageDead(_164);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        _762 = const _;
        _193 = &(*_762);
        _192 = &(*_193);
        _191 = move _192 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_192);
        _190 = Arguments::<'_>::new_const(move _191) -> [return: bb78, unwind: bb350];
    }

    bb78: {
        StorageDead(_191);
        _189 = format(move _190) -> [return: bb79, unwind: bb350];
    }

    bb79: {
        StorageDead(_190);
        StorageDead(_193);
        _188 = move _189;
        StorageDead(_189);
        _187 = &_188;
        _186 = &(*_187);
        _185 = <String as Deref>::deref(move _186) -> [return: bb80, unwind: bb347];
    }

    bb80: {
        _184 = &(*_185);
        StorageDead(_186);
        _183 = solana_program::log::sol_log(move _184) -> [return: bb81, unwind: bb347];
    }

    bb81: {
        StorageDead(_184);
        drop(_188) -> [return: bb82, unwind: bb350];
    }

    bb82: {
        StorageDead(_188);
        StorageDead(_187);
        StorageDead(_185);
        StorageDead(_183);
        StorageLive(_195);
        _195 = _163;
        _159 = std::result::Result::<(), error::ErrorCode>::Err(move _195);
        StorageDead(_195);
        StorageDead(_163);
        goto -> bb83;
    }

    bb83: {
        StorageDead(_160);
        _158 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _159) -> [return: bb84, unwind: bb350];
    }

    bb84: {
        StorageDead(_159);
        _196 = discriminant(_158);
        switchInt(move _196) -> [0: bb85, 1: bb86, otherwise: bb4];
    }

    bb85: {
        StorageLive(_200);
        _200 = ((_158 as Continue).0: ());
        _157 = _200;
        StorageDead(_200);
        StorageDead(_158);
        StorageDead(_157);
        _155 = const ();
        goto -> bb106;
    }

    bb86: {
        StorageLive(_197);
        _197 = ((_158 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_199);
        _199 = _197;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _199) -> [return: bb87, unwind: bb350];
    }

    bb87: {
        StorageDead(_199);
        StorageDead(_197);
        StorageDead(_158);
        StorageDead(_157);
        goto -> bb327;
    }

    bb88: {
        StorageDead(_205);
        StorageLive(_206);
        _206 = ();
        _203 = std::result::Result::<(), error::ErrorCode>::Ok(move _206);
        StorageDead(_206);
        goto -> bb101;
    }

    bb89: {
        StorageDead(_205);
        StorageLive(_207);
        _207 = error::ErrorCode::InvalidUpdateK;
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        _765 = const _;
        _218 = &(*_765);
        _217 = &(*_218);
        _216 = move _217 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_217);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        _226 = &_207;
        _225 = &(*_226);
        _224 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _225) -> [return: bb90, unwind: bb350];
    }

    bb90: {
        StorageDead(_225);
        _223 = [move _224];
        StorageDead(_224);
        _222 = &_223;
        _221 = &(*_222);
        _220 = move _221 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_221);
        _215 = Arguments::<'_>::new_v1(move _216, move _220) -> [return: bb91, unwind: bb350];
    }

    bb91: {
        StorageDead(_220);
        StorageDead(_216);
        _214 = format(move _215) -> [return: bb92, unwind: bb350];
    }

    bb92: {
        StorageDead(_215);
        StorageDead(_226);
        StorageDead(_223);
        StorageDead(_222);
        StorageDead(_218);
        _213 = move _214;
        StorageDead(_214);
        _212 = &_213;
        _211 = &(*_212);
        _210 = <String as Deref>::deref(move _211) -> [return: bb93, unwind: bb346];
    }

    bb93: {
        _209 = &(*_210);
        StorageDead(_211);
        _208 = solana_program::log::sol_log(move _209) -> [return: bb94, unwind: bb346];
    }

    bb94: {
        StorageDead(_209);
        drop(_213) -> [return: bb95, unwind: bb350];
    }

    bb95: {
        StorageDead(_213);
        StorageDead(_212);
        StorageDead(_210);
        StorageDead(_208);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        _764 = const _;
        _237 = &(*_764);
        _236 = &(*_237);
        _235 = move _236 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_236);
        _234 = Arguments::<'_>::new_const(move _235) -> [return: bb96, unwind: bb350];
    }

    bb96: {
        StorageDead(_235);
        _233 = format(move _234) -> [return: bb97, unwind: bb350];
    }

    bb97: {
        StorageDead(_234);
        StorageDead(_237);
        _232 = move _233;
        StorageDead(_233);
        _231 = &_232;
        _230 = &(*_231);
        _229 = <String as Deref>::deref(move _230) -> [return: bb98, unwind: bb345];
    }

    bb98: {
        _228 = &(*_229);
        StorageDead(_230);
        _227 = solana_program::log::sol_log(move _228) -> [return: bb99, unwind: bb345];
    }

    bb99: {
        StorageDead(_228);
        drop(_232) -> [return: bb100, unwind: bb350];
    }

    bb100: {
        StorageDead(_232);
        StorageDead(_231);
        StorageDead(_229);
        StorageDead(_227);
        StorageLive(_239);
        _239 = _207;
        _203 = std::result::Result::<(), error::ErrorCode>::Err(move _239);
        StorageDead(_239);
        StorageDead(_207);
        goto -> bb101;
    }

    bb101: {
        StorageDead(_204);
        _202 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _203) -> [return: bb102, unwind: bb350];
    }

    bb102: {
        StorageDead(_203);
        _240 = discriminant(_202);
        switchInt(move _240) -> [0: bb103, 1: bb104, otherwise: bb4];
    }

    bb103: {
        StorageLive(_244);
        _244 = ((_202 as Continue).0: ());
        _201 = _244;
        StorageDead(_244);
        StorageDead(_202);
        StorageDead(_201);
        _155 = const ();
        goto -> bb106;
    }

    bb104: {
        StorageLive(_241);
        _241 = ((_202 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_243);
        _243 = _241;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _243) -> [return: bb105, unwind: bb350];
    }

    bb105: {
        StorageDead(_243);
        StorageDead(_241);
        StorageDead(_202);
        StorageDead(_201);
        goto -> bb327;
    }

    bb106: {
        StorageDead(_156);
        StorageDead(_155);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        _247 = _129;
        _246 = Gt(move _247, const 0_i128);
        switchInt(move _246) -> [0: bb156, otherwise: bb107];
    }

    bb107: {
        StorageDead(_247);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        _256 = &(*_34);
        _255 = <RefMut<'_, PerpMarket> as Deref>::deref(move _256) -> [return: bb108, unwind: bb350];
    }

    bb108: {
        StorageDead(_256);
        _254 = (((*_255).1: state::perp_market::AMM).31: i128);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        _265 = &(*_34);
        _264 = <RefMut<'_, PerpMarket> as Deref>::deref(move _265) -> [return: bb109, unwind: bb350];
    }

    bb109: {
        _263 = &(*_264);
        StorageDead(_265);
        _262 = get_total_fee_lower_bound(move _263) -> [return: bb110, unwind: bb350];
    }

    bb110: {
        StorageDead(_263);
        _261 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _262) -> [return: bb111, unwind: bb350];
    }

    bb111: {
        StorageDead(_262);
        _266 = discriminant(_261);
        switchInt(move _266) -> [0: bb112, 1: bb113, otherwise: bb4];
    }

    bb112: {
        StorageLive(_270);
        _270 = ((_261 as Continue).0: u128);
        _260 = _270;
        StorageDead(_270);
        _259 = <u128 as Cast>::cast::<i128>(move _260) -> [return: bb115, unwind: bb350];
    }

    bb113: {
        StorageLive(_267);
        _267 = ((_261 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_269);
        _269 = _267;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _269) -> [return: bb114, unwind: bb350];
    }

    bb114: {
        StorageDead(_269);
        StorageDead(_267);
        StorageDead(_260);
        StorageDead(_259);
        goto -> bb323;
    }

    bb115: {
        StorageDead(_260);
        _258 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _259) -> [return: bb116, unwind: bb350];
    }

    bb116: {
        StorageDead(_259);
        _271 = discriminant(_258);
        switchInt(move _271) -> [0: bb117, 1: bb118, otherwise: bb4];
    }

    bb117: {
        StorageLive(_275);
        _275 = ((_258 as Continue).0: i128);
        _257 = _275;
        StorageDead(_275);
        _253 = <i128 as SafeMath>::safe_sub(move _254, move _257) -> [return: bb120, unwind: bb350];
    }

    bb118: {
        StorageLive(_272);
        _272 = ((_258 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_274);
        _274 = _272;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _274) -> [return: bb119, unwind: bb350];
    }

    bb119: {
        StorageDead(_274);
        StorageDead(_272);
        goto -> bb323;
    }

    bb120: {
        StorageDead(_257);
        StorageDead(_254);
        _252 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _253) -> [return: bb121, unwind: bb350];
    }

    bb121: {
        StorageDead(_253);
        _276 = discriminant(_252);
        switchInt(move _276) -> [0: bb122, 1: bb123, otherwise: bb4];
    }

    bb122: {
        StorageLive(_280);
        _280 = ((_252 as Continue).0: i128);
        _251 = _280;
        StorageDead(_280);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        _286 = &(*_34);
        _285 = <RefMut<'_, PerpMarket> as Deref>::deref(move _286) -> [return: bb125, unwind: bb350];
    }

    bb123: {
        StorageLive(_277);
        _277 = ((_252 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_279);
        _279 = _277;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _279) -> [return: bb124, unwind: bb350];
    }

    bb124: {
        StorageDead(_279);
        StorageDead(_277);
        goto -> bb324;
    }

    bb125: {
        StorageDead(_286);
        _284 = (((*_285).1: state::perp_market::AMM).32: u128);
        _283 = <u128 as Cast>::cast::<i128>(move _284) -> [return: bb126, unwind: bb350];
    }

    bb126: {
        StorageDead(_284);
        _282 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _283) -> [return: bb127, unwind: bb350];
    }

    bb127: {
        StorageDead(_283);
        _287 = discriminant(_282);
        switchInt(move _287) -> [0: bb128, 1: bb129, otherwise: bb4];
    }

    bb128: {
        StorageLive(_291);
        _291 = ((_282 as Continue).0: i128);
        _281 = _291;
        StorageDead(_291);
        _250 = <i128 as SafeMath>::safe_sub(move _251, move _281) -> [return: bb131, unwind: bb350];
    }

    bb129: {
        StorageLive(_288);
        _288 = ((_282 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_290);
        _290 = _288;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _290) -> [return: bb130, unwind: bb350];
    }

    bb130: {
        StorageDead(_290);
        StorageDead(_288);
        StorageDead(_281);
        StorageDead(_251);
        StorageDead(_250);
        goto -> bb322;
    }

    bb131: {
        StorageDead(_281);
        StorageDead(_251);
        _249 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _250) -> [return: bb132, unwind: bb350];
    }

    bb132: {
        StorageDead(_250);
        _292 = discriminant(_249);
        switchInt(move _292) -> [0: bb133, 1: bb134, otherwise: bb4];
    }

    bb133: {
        StorageLive(_296);
        _296 = ((_249 as Continue).0: i128);
        _248 = _296;
        StorageDead(_296);
        StorageDead(_285);
        StorageDead(_282);
        StorageDead(_264);
        StorageDead(_261);
        StorageDead(_258);
        StorageDead(_255);
        StorageDead(_252);
        StorageDead(_249);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        _301 = _129;
        StorageLive(_302);
        _302 = _248;
        _300 = Le(move _301, move _302);
        switchInt(move _300) -> [0: bb137, otherwise: bb136];
    }

    bb134: {
        StorageLive(_293);
        _293 = ((_249 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_295);
        _295 = _293;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _295) -> [return: bb135, unwind: bb350];
    }

    bb135: {
        StorageDead(_295);
        StorageDead(_293);
        goto -> bb322;
    }

    bb136: {
        StorageDead(_302);
        StorageDead(_301);
        StorageLive(_303);
        _303 = ();
        _299 = std::result::Result::<(), error::ErrorCode>::Ok(move _303);
        StorageDead(_303);
        goto -> bb151;
    }

    bb137: {
        StorageDead(_302);
        StorageDead(_301);
        StorageLive(_304);
        _304 = error::ErrorCode::InvalidUpdateK;
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        StorageLive(_311);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        _761 = const _;
        _315 = &(*_761);
        _314 = &(*_315);
        _313 = move _314 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_314);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        StorageLive(_323);
        _323 = &_304;
        _322 = &(*_323);
        _321 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _322) -> [return: bb138, unwind: bb350];
    }

    bb138: {
        StorageDead(_322);
        _320 = [move _321];
        StorageDead(_321);
        _319 = &_320;
        _318 = &(*_319);
        _317 = move _318 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_318);
        _312 = Arguments::<'_>::new_v1(move _313, move _317) -> [return: bb139, unwind: bb350];
    }

    bb139: {
        StorageDead(_317);
        StorageDead(_313);
        _311 = format(move _312) -> [return: bb140, unwind: bb350];
    }

    bb140: {
        StorageDead(_312);
        StorageDead(_323);
        StorageDead(_320);
        StorageDead(_319);
        StorageDead(_315);
        _310 = move _311;
        StorageDead(_311);
        _309 = &_310;
        _308 = &(*_309);
        _307 = <String as Deref>::deref(move _308) -> [return: bb141, unwind: bb344];
    }

    bb141: {
        _306 = &(*_307);
        StorageDead(_308);
        _305 = solana_program::log::sol_log(move _306) -> [return: bb142, unwind: bb344];
    }

    bb142: {
        StorageDead(_306);
        drop(_310) -> [return: bb143, unwind: bb350];
    }

    bb143: {
        StorageDead(_310);
        StorageDead(_309);
        StorageDead(_307);
        StorageDead(_305);
        StorageLive(_324);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        _760 = const _;
        _334 = &(*_760);
        _333 = &(*_334);
        _332 = move _333 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_333);
        StorageLive(_336);
        StorageLive(_337);
        StorageLive(_338);
        StorageLive(_339);
        StorageLive(_340);
        StorageLive(_341);
        StorageLive(_342);
        _342 = &_129;
        _341 = &(*_342);
        _340 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _341) -> [return: bb144, unwind: bb350];
    }

    bb144: {
        StorageDead(_341);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        _345 = &_248;
        _344 = &(*_345);
        _343 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _344) -> [return: bb145, unwind: bb350];
    }

    bb145: {
        StorageDead(_344);
        _339 = [move _340, move _343];
        StorageDead(_343);
        StorageDead(_340);
        _338 = &_339;
        _337 = &(*_338);
        _336 = move _337 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_337);
        _331 = Arguments::<'_>::new_v1(move _332, move _336) -> [return: bb146, unwind: bb350];
    }

    bb146: {
        StorageDead(_336);
        StorageDead(_332);
        _330 = format(move _331) -> [return: bb147, unwind: bb350];
    }

    bb147: {
        StorageDead(_331);
        StorageDead(_345);
        StorageDead(_342);
        StorageDead(_339);
        StorageDead(_338);
        StorageDead(_334);
        _329 = move _330;
        StorageDead(_330);
        _328 = &_329;
        _327 = &(*_328);
        _326 = <String as Deref>::deref(move _327) -> [return: bb148, unwind: bb343];
    }

    bb148: {
        _325 = &(*_326);
        StorageDead(_327);
        _324 = solana_program::log::sol_log(move _325) -> [return: bb149, unwind: bb343];
    }

    bb149: {
        StorageDead(_325);
        drop(_329) -> [return: bb150, unwind: bb350];
    }

    bb150: {
        StorageDead(_329);
        StorageDead(_328);
        StorageDead(_326);
        StorageDead(_324);
        StorageLive(_346);
        _346 = _304;
        _299 = std::result::Result::<(), error::ErrorCode>::Err(move _346);
        StorageDead(_346);
        StorageDead(_304);
        goto -> bb151;
    }

    bb151: {
        StorageDead(_300);
        _298 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _299) -> [return: bb152, unwind: bb350];
    }

    bb152: {
        StorageDead(_299);
        _347 = discriminant(_298);
        switchInt(move _347) -> [0: bb153, 1: bb154, otherwise: bb4];
    }

    bb153: {
        StorageLive(_351);
        _351 = ((_298 as Continue).0: ());
        _297 = _351;
        StorageDead(_351);
        StorageDead(_298);
        StorageDead(_297);
        _245 = const ();
        StorageDead(_248);
        goto -> bb157;
    }

    bb154: {
        StorageLive(_348);
        _348 = ((_298 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_350);
        _350 = _348;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _350) -> [return: bb155, unwind: bb350];
    }

    bb155: {
        StorageDead(_350);
        StorageDead(_348);
        StorageDead(_298);
        StorageDead(_297);
        goto -> bb326;
    }

    bb156: {
        StorageDead(_247);
        _245 = const ();
        goto -> bb157;
    }

    bb157: {
        StorageDead(_246);
        StorageDead(_245);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        StorageLive(_355);
        _355 = _110;
        switchInt(move _355) -> [0: bb160, otherwise: bb158];
    }

    bb158: {
        StorageLive(_356);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        _359 = &(*_34);
        _358 = <RefMut<'_, PerpMarket> as Deref>::deref(move _359) -> [return: bb159, unwind: bb350];
    }

    bb159: {
        StorageDead(_359);
        _357 = (((*_358).1: state::perp_market::AMM).10: u128);
        _356 = Lt(move _357, const _);
        switchInt(move _356) -> [0: bb161, otherwise: bb160];
    }

    bb160: {
        StorageDead(_358);
        StorageDead(_357);
        StorageLive(_360);
        _360 = ();
        _354 = std::result::Result::<(), error::ErrorCode>::Ok(move _360);
        StorageDead(_360);
        goto -> bb175;
    }

    bb161: {
        StorageDead(_358);
        StorageDead(_357);
        StorageLive(_361);
        _361 = error::ErrorCode::InvalidUpdateK;
        StorageLive(_362);
        StorageLive(_363);
        StorageLive(_364);
        StorageLive(_365);
        StorageLive(_366);
        StorageLive(_367);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        StorageLive(_371);
        StorageLive(_372);
        _759 = const _;
        _372 = &(*_759);
        _371 = &(*_372);
        _370 = move _371 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_371);
        StorageLive(_374);
        StorageLive(_375);
        StorageLive(_376);
        StorageLive(_377);
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        _380 = &_361;
        _379 = &(*_380);
        _378 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _379) -> [return: bb162, unwind: bb350];
    }

    bb162: {
        StorageDead(_379);
        _377 = [move _378];
        StorageDead(_378);
        _376 = &_377;
        _375 = &(*_376);
        _374 = move _375 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_375);
        _369 = Arguments::<'_>::new_v1(move _370, move _374) -> [return: bb163, unwind: bb350];
    }

    bb163: {
        StorageDead(_374);
        StorageDead(_370);
        _368 = format(move _369) -> [return: bb164, unwind: bb350];
    }

    bb164: {
        StorageDead(_369);
        StorageDead(_380);
        StorageDead(_377);
        StorageDead(_376);
        StorageDead(_372);
        _367 = move _368;
        StorageDead(_368);
        _366 = &_367;
        _365 = &(*_366);
        _364 = <String as Deref>::deref(move _365) -> [return: bb165, unwind: bb342];
    }

    bb165: {
        _363 = &(*_364);
        StorageDead(_365);
        _362 = solana_program::log::sol_log(move _363) -> [return: bb166, unwind: bb342];
    }

    bb166: {
        StorageDead(_363);
        drop(_367) -> [return: bb167, unwind: bb350];
    }

    bb167: {
        StorageDead(_367);
        StorageDead(_366);
        StorageDead(_364);
        StorageDead(_362);
        StorageLive(_381);
        StorageLive(_382);
        StorageLive(_383);
        StorageLive(_384);
        StorageLive(_385);
        StorageLive(_386);
        StorageLive(_387);
        StorageLive(_388);
        StorageLive(_389);
        StorageLive(_390);
        StorageLive(_391);
        _758 = const _;
        _391 = &(*_758);
        _390 = &(*_391);
        _389 = move _390 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_390);
        StorageLive(_393);
        StorageLive(_394);
        StorageLive(_395);
        StorageLive(_396);
        StorageLive(_397);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        StorageLive(_401);
        _401 = &(*_34);
        _400 = <RefMut<'_, PerpMarket> as Deref>::deref(move _401) -> [return: bb168, unwind: bb350];
    }

    bb168: {
        StorageDead(_401);
        _399 = &(((*_400).1: state::perp_market::AMM).10: u128);
        _398 = &(*_399);
        _397 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _398) -> [return: bb169, unwind: bb350];
    }

    bb169: {
        StorageDead(_398);
        _396 = [move _397];
        StorageDead(_397);
        _395 = &_396;
        _394 = &(*_395);
        _393 = move _394 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_394);
        _388 = Arguments::<'_>::new_v1(move _389, move _393) -> [return: bb170, unwind: bb350];
    }

    bb170: {
        StorageDead(_393);
        StorageDead(_389);
        _387 = format(move _388) -> [return: bb171, unwind: bb350];
    }

    bb171: {
        StorageDead(_388);
        StorageDead(_400);
        StorageDead(_399);
        StorageDead(_396);
        StorageDead(_395);
        StorageDead(_391);
        _386 = move _387;
        StorageDead(_387);
        _385 = &_386;
        _384 = &(*_385);
        _383 = <String as Deref>::deref(move _384) -> [return: bb172, unwind: bb341];
    }

    bb172: {
        _382 = &(*_383);
        StorageDead(_384);
        _381 = solana_program::log::sol_log(move _382) -> [return: bb173, unwind: bb341];
    }

    bb173: {
        StorageDead(_382);
        drop(_386) -> [return: bb174, unwind: bb350];
    }

    bb174: {
        StorageDead(_386);
        StorageDead(_385);
        StorageDead(_383);
        StorageDead(_381);
        StorageLive(_402);
        _402 = _361;
        _354 = std::result::Result::<(), error::ErrorCode>::Err(move _402);
        StorageDead(_402);
        StorageDead(_361);
        goto -> bb175;
    }

    bb175: {
        StorageDead(_356);
        StorageDead(_355);
        _353 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _354) -> [return: bb176, unwind: bb350];
    }

    bb176: {
        StorageDead(_354);
        _403 = discriminant(_353);
        switchInt(move _403) -> [0: bb177, 1: bb178, otherwise: bb4];
    }

    bb177: {
        StorageLive(_407);
        _407 = ((_353 as Continue).0: ());
        _352 = _407;
        StorageDead(_407);
        StorageDead(_353);
        StorageDead(_352);
        StorageLive(_408);
        StorageLive(_409);
        StorageLive(_410);
        StorageLive(_411);
        StorageLive(_412);
        StorageLive(_413);
        _413 = &(*_34);
        _412 = <RefMut<'_, PerpMarket> as Deref>::deref(move _413) -> [return: bb180, unwind: bb350];
    }

    bb178: {
        StorageLive(_404);
        _404 = ((_353 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_406);
        _406 = _404;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _406) -> [return: bb179, unwind: bb350];
    }

    bb179: {
        StorageDead(_406);
        StorageDead(_404);
        StorageDead(_353);
        StorageDead(_352);
        goto -> bb328;
    }

    bb180: {
        StorageDead(_413);
        _411 = (((*_412).1: state::perp_market::AMM).31: i128);
        StorageLive(_414);
        _414 = _129;
        _410 = <i128 as SafeMath>::safe_sub(move _411, move _414) -> [return: bb181, unwind: bb350];
    }

    bb181: {
        StorageDead(_414);
        StorageDead(_411);
        _409 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _410) -> [return: bb182, unwind: bb350];
    }

    bb182: {
        StorageDead(_410);
        _415 = discriminant(_409);
        switchInt(move _415) -> [0: bb183, 1: bb184, otherwise: bb4];
    }

    bb183: {
        StorageLive(_419);
        _419 = ((_409 as Continue).0: i128);
        _408 = _419;
        StorageDead(_419);
        StorageLive(_420);
        StorageLive(_421);
        _421 = &mut (*_34);
        _420 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _421) -> [return: bb186, unwind: bb350];
    }

    bb184: {
        StorageLive(_416);
        _416 = ((_409 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_418);
        _418 = _416;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _418) -> [return: bb185, unwind: bb350];
    }

    bb185: {
        StorageDead(_418);
        StorageDead(_416);
        StorageDead(_408);
        StorageDead(_412);
        StorageDead(_409);
        goto -> bb328;
    }

    bb186: {
        StorageDead(_421);
        (((*_420).1: state::perp_market::AMM).31: i128) = move _408;
        StorageDead(_408);
        StorageDead(_420);
        StorageDead(_412);
        StorageDead(_409);
        StorageLive(_422);
        StorageLive(_423);
        StorageLive(_424);
        StorageLive(_425);
        StorageLive(_426);
        StorageLive(_427);
        _427 = &(*_34);
        _426 = <RefMut<'_, PerpMarket> as Deref>::deref(move _427) -> [return: bb187, unwind: bb350];
    }

    bb187: {
        StorageDead(_427);
        _425 = (((*_426).1: state::perp_market::AMM).49: i64);
        StorageLive(_428);
        StorageLive(_429);
        _429 = _129;
        _428 = move _429 as i64 (IntToInt);
        StorageDead(_429);
        _424 = <i64 as SafeMath>::safe_sub(move _425, move _428) -> [return: bb188, unwind: bb350];
    }

    bb188: {
        StorageDead(_428);
        StorageDead(_425);
        _423 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _424) -> [return: bb189, unwind: bb350];
    }

    bb189: {
        StorageDead(_424);
        _430 = discriminant(_423);
        switchInt(move _430) -> [0: bb190, 1: bb191, otherwise: bb4];
    }

    bb190: {
        StorageLive(_434);
        _434 = ((_423 as Continue).0: i64);
        _422 = _434;
        StorageDead(_434);
        StorageLive(_435);
        StorageLive(_436);
        _436 = &mut (*_34);
        _435 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _436) -> [return: bb193, unwind: bb350];
    }

    bb191: {
        StorageLive(_431);
        _431 = ((_423 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_433);
        _433 = _431;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _433) -> [return: bb192, unwind: bb350];
    }

    bb192: {
        StorageDead(_433);
        StorageDead(_431);
        StorageDead(_422);
        StorageDead(_426);
        StorageDead(_423);
        goto -> bb328;
    }

    bb193: {
        StorageDead(_436);
        (((*_435).1: state::perp_market::AMM).49: i64) = move _422;
        StorageDead(_422);
        StorageDead(_435);
        StorageDead(_426);
        StorageDead(_423);
        StorageLive(_437);
        StorageLive(_438);
        StorageLive(_439);
        _439 = &(*_34);
        _438 = <RefMut<'_, PerpMarket> as Deref>::deref(move _439) -> [return: bb194, unwind: bb350];
    }

    bb194: {
        StorageDead(_439);
        _437 = &((*_438).1: state::perp_market::AMM);
        StorageLive(_440);
        StorageLive(_441);
        StorageLive(_442);
        StorageLive(_443);
        _443 = ((*_437).6: u128);
        StorageLive(_444);
        _444 = ((*_437).5: u128);
        StorageLive(_445);
        _445 = ((*_437).11: u128);
        _442 = calculate_price(move _443, move _444, move _445) -> [return: bb195, unwind: bb350];
    }

    bb195: {
        StorageDead(_445);
        StorageDead(_444);
        StorageDead(_443);
        _441 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _442) -> [return: bb196, unwind: bb350];
    }

    bb196: {
        StorageDead(_442);
        _446 = discriminant(_441);
        switchInt(move _446) -> [0: bb197, 1: bb198, otherwise: bb4];
    }

    bb197: {
        StorageLive(_450);
        _450 = ((_441 as Continue).0: u64);
        _440 = _450;
        StorageDead(_450);
        StorageDead(_441);
        StorageLive(_451);
        StorageLive(_452);
        StorageLive(_453);
        StorageLive(_454);
        StorageLive(_455);
        StorageLive(_456);
        StorageLive(_457);
        StorageLive(_458);
        StorageLive(_459);
        StorageLive(_460);
        _460 = _81;
        _459 = <u64 as Cast>::cast::<i128>(move _460) -> [return: bb200, unwind: bb350];
    }

    bb198: {
        StorageLive(_447);
        _447 = ((_441 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_449);
        _449 = _447;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _449) -> [return: bb199, unwind: bb350];
    }

    bb199: {
        StorageDead(_449);
        StorageDead(_447);
        StorageDead(_441);
        goto -> bb321;
    }

    bb200: {
        StorageDead(_460);
        _458 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _459) -> [return: bb201, unwind: bb350];
    }

    bb201: {
        StorageDead(_459);
        _461 = discriminant(_458);
        switchInt(move _461) -> [0: bb202, 1: bb203, otherwise: bb4];
    }

    bb202: {
        StorageLive(_465);
        _465 = ((_458 as Continue).0: i128);
        _457 = _465;
        StorageDead(_465);
        StorageLive(_466);
        StorageLive(_467);
        StorageLive(_468);
        StorageLive(_469);
        _469 = _440;
        _468 = <u64 as Cast>::cast::<i128>(move _469) -> [return: bb205, unwind: bb350];
    }

    bb203: {
        StorageLive(_462);
        _462 = ((_458 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_464);
        _464 = _462;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _464) -> [return: bb204, unwind: bb350];
    }

    bb204: {
        StorageDead(_464);
        StorageDead(_462);
        StorageDead(_457);
        StorageDead(_456);
        StorageDead(_454);
        StorageDead(_452);
        goto -> bb319;
    }

    bb205: {
        StorageDead(_469);
        _467 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _468) -> [return: bb206, unwind: bb350];
    }

    bb206: {
        StorageDead(_468);
        _470 = discriminant(_467);
        switchInt(move _470) -> [0: bb207, 1: bb208, otherwise: bb4];
    }

    bb207: {
        StorageLive(_474);
        _474 = ((_467 as Continue).0: i128);
        _466 = _474;
        StorageDead(_474);
        _456 = <i128 as SafeMath>::safe_sub(move _457, move _466) -> [return: bb210, unwind: bb350];
    }

    bb208: {
        StorageLive(_471);
        _471 = ((_467 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_473);
        _473 = _471;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _473) -> [return: bb209, unwind: bb350];
    }

    bb209: {
        StorageDead(_473);
        StorageDead(_471);
        StorageDead(_466);
        StorageDead(_457);
        StorageDead(_456);
        goto -> bb318;
    }

    bb210: {
        StorageDead(_466);
        StorageDead(_457);
        _455 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _456) -> [return: bb211, unwind: bb350];
    }

    bb211: {
        StorageDead(_456);
        _475 = discriminant(_455);
        switchInt(move _475) -> [0: bb212, 1: bb213, otherwise: bb4];
    }

    bb212: {
        StorageLive(_479);
        _479 = ((_455 as Continue).0: i128);
        _454 = _479;
        StorageDead(_479);
        _453 = core::num::<impl i128>::unsigned_abs(move _454) -> [return: bb215, unwind: bb350];
    }

    bb213: {
        StorageLive(_476);
        _476 = ((_455 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_478);
        _478 = _476;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _478) -> [return: bb214, unwind: bb350];
    }

    bb214: {
        StorageDead(_478);
        StorageDead(_476);
        goto -> bb318;
    }

    bb215: {
        _452 = &_453;
        StorageDead(_454);
        StorageLive(_480);
        StorageLive(_481);
        _757 = const _;
        _481 = &(*_757);
        _480 = &(*_481);
        _451 = <u128 as PartialOrd>::gt(move _452, move _480) -> [return: bb216, unwind: bb350];
    }

    bb216: {
        StorageDead(_480);
        StorageDead(_452);
        StorageDead(_481);
        StorageDead(_467);
        StorageDead(_458);
        StorageDead(_455);
        StorageDead(_453);
        StorageLive(_483);
        StorageLive(_484);
        _484 = _451;
        switchInt(move _484) -> [0: bb227, otherwise: bb217];
    }

    bb217: {
        StorageLive(_486);
        StorageLive(_487);
        StorageLive(_488);
        StorageLive(_489);
        StorageLive(_490);
        StorageLive(_491);
        StorageLive(_492);
        StorageLive(_493);
        StorageLive(_494);
        StorageLive(_495);
        StorageLive(_496);
        _751 = const _;
        _496 = &(*_751);
        _495 = &(*_496);
        _494 = move _495 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_495);
        StorageLive(_498);
        StorageLive(_499);
        StorageLive(_500);
        StorageLive(_501);
        StorageLive(_502);
        StorageLive(_503);
        StorageLive(_504);
        _504 = &_81;
        _503 = &(*_504);
        _502 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _503) -> [return: bb218, unwind: bb350];
    }

    bb218: {
        StorageDead(_503);
        StorageLive(_505);
        StorageLive(_506);
        StorageLive(_507);
        _507 = &_440;
        _506 = &(*_507);
        _505 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _506) -> [return: bb219, unwind: bb350];
    }

    bb219: {
        StorageDead(_506);
        StorageLive(_508);
        StorageLive(_509);
        StorageLive(_510);
        _750 = const _;
        _510 = &(*_750);
        _509 = &(*_510);
        _508 = core::fmt::rt::Argument::<'_>::new_debug::<u128>(move _509) -> [return: bb220, unwind: bb350];
    }

    bb220: {
        StorageDead(_509);
        _501 = [move _502, move _505, move _508];
        StorageDead(_508);
        StorageDead(_505);
        StorageDead(_502);
        _500 = &_501;
        _499 = &(*_500);
        _498 = move _499 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_499);
        _493 = Arguments::<'_>::new_v1(move _494, move _498) -> [return: bb221, unwind: bb350];
    }

    bb221: {
        StorageDead(_498);
        StorageDead(_494);
        _492 = format(move _493) -> [return: bb222, unwind: bb350];
    }

    bb222: {
        StorageDead(_493);
        StorageDead(_510);
        StorageDead(_507);
        StorageDead(_504);
        StorageDead(_501);
        StorageDead(_500);
        StorageDead(_496);
        _491 = move _492;
        StorageDead(_492);
        _490 = &_491;
        _489 = &(*_490);
        _488 = <String as Deref>::deref(move _489) -> [return: bb223, unwind: bb340];
    }

    bb223: {
        _487 = &(*_488);
        StorageDead(_489);
        _486 = solana_program::log::sol_log(move _487) -> [return: bb224, unwind: bb340];
    }

    bb224: {
        StorageDead(_487);
        drop(_491) -> [return: bb225, unwind: bb350];
    }

    bb225: {
        StorageDead(_491);
        StorageDead(_490);
        StorageDead(_488);
        StorageDead(_486);
        StorageLive(_512);
        StorageLive(_513);
        _513 = error::ErrorCode::InvalidUpdateK;
        _512 = <error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _513) -> [return: bb226, unwind: bb350];
    }

    bb226: {
        StorageDead(_513);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _512);
        StorageDead(_512);
        StorageDead(_484);
        StorageDead(_483);
        goto -> bb320;
    }

    bb227: {
        _483 = const ();
        StorageDead(_484);
        StorageDead(_483);
        StorageLive(_514);
        StorageLive(_515);
        StorageLive(_516);
        StorageLive(_517);
        StorageLive(_518);
        StorageLive(_519);
        StorageLive(_520);
        StorageLive(_521);
        StorageLive(_522);
        StorageLive(_523);
        _523 = ((*_437).5: u128);
        _522 = <U192 as From<u128>>::from(move _523) -> [return: bb228, unwind: bb350];
    }

    bb228: {
        StorageDead(_523);
        StorageLive(_524);
        StorageLive(_525);
        _525 = ((*_437).6: u128);
        _524 = <U192 as From<u128>>::from(move _525) -> [return: bb229, unwind: bb350];
    }

    bb229: {
        StorageDead(_525);
        _521 = <U192 as SafeMath>::safe_mul(move _522, move _524) -> [return: bb230, unwind: bb350];
    }

    bb230: {
        StorageDead(_524);
        StorageDead(_522);
        _520 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _521) -> [return: bb231, unwind: bb350];
    }

    bb231: {
        StorageDead(_521);
        _526 = discriminant(_520);
        switchInt(move _526) -> [0: bb232, 1: bb233, otherwise: bb4];
    }

    bb232: {
        StorageLive(_530);
        _530 = ((_520 as Continue).0: math::bn::U192);
        _519 = _530;
        StorageDead(_530);
        _518 = &_519;
        _517 = U192::integer_sqrt(move _518) -> [return: bb235, unwind: bb350];
    }

    bb233: {
        StorageLive(_527);
        _527 = ((_520 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_529);
        _529 = _527;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _529) -> [return: bb234, unwind: bb350];
    }

    bb234: {
        StorageDead(_529);
        StorageDead(_527);
        StorageDead(_518);
        StorageDead(_517);
        StorageDead(_516);
        goto -> bb316;
    }

    bb235: {
        StorageDead(_518);
        _516 = U192::try_to_u128(move _517) -> [return: bb236, unwind: bb350];
    }

    bb236: {
        StorageDead(_517);
        _515 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _516) -> [return: bb237, unwind: bb350];
    }

    bb237: {
        StorageDead(_516);
        _531 = discriminant(_515);
        switchInt(move _531) -> [0: bb238, 1: bb239, otherwise: bb4];
    }

    bb238: {
        StorageLive(_535);
        _535 = ((_515 as Continue).0: u128);
        _514 = _535;
        StorageDead(_535);
        StorageDead(_520);
        StorageDead(_519);
        StorageDead(_515);
        StorageLive(_536);
        StorageLive(_537);
        StorageLive(_538);
        StorageLive(_539);
        StorageLive(_540);
        StorageLive(_541);
        StorageLive(_542);
        _542 = _514;
        _541 = <u128 as Cast>::cast::<i128>(move _542) -> [return: bb241, unwind: bb350];
    }

    bb239: {
        StorageLive(_532);
        _532 = ((_515 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_534);
        _534 = _532;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _534) -> [return: bb240, unwind: bb350];
    }

    bb240: {
        StorageDead(_534);
        StorageDead(_532);
        goto -> bb316;
    }

    bb241: {
        StorageDead(_542);
        _540 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _541) -> [return: bb242, unwind: bb350];
    }

    bb242: {
        StorageDead(_541);
        _543 = discriminant(_540);
        switchInt(move _543) -> [0: bb243, 1: bb244, otherwise: bb4];
    }

    bb243: {
        StorageLive(_547);
        _547 = ((_540 as Continue).0: i128);
        _539 = _547;
        StorageDead(_547);
        StorageLive(_548);
        StorageLive(_549);
        StorageLive(_550);
        StorageLive(_551);
        _551 = ((*_437).10: u128);
        _550 = <u128 as Cast>::cast::<i128>(move _551) -> [return: bb246, unwind: bb350];
    }

    bb244: {
        StorageLive(_544);
        _544 = ((_540 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_546);
        _546 = _544;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _546) -> [return: bb245, unwind: bb350];
    }

    bb245: {
        StorageDead(_546);
        StorageDead(_544);
        StorageDead(_539);
        StorageDead(_538);
        goto -> bb314;
    }

    bb246: {
        StorageDead(_551);
        _549 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _550) -> [return: bb247, unwind: bb350];
    }

    bb247: {
        StorageDead(_550);
        _552 = discriminant(_549);
        switchInt(move _552) -> [0: bb248, 1: bb249, otherwise: bb4];
    }

    bb248: {
        StorageLive(_556);
        _556 = ((_549 as Continue).0: i128);
        _548 = _556;
        StorageDead(_556);
        _538 = <i128 as SafeMath>::safe_sub(move _539, move _548) -> [return: bb251, unwind: bb350];
    }

    bb249: {
        StorageLive(_553);
        _553 = ((_549 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_555);
        _555 = _553;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _555) -> [return: bb250, unwind: bb350];
    }

    bb250: {
        StorageDead(_555);
        StorageDead(_553);
        StorageDead(_548);
        StorageDead(_539);
        StorageDead(_538);
        goto -> bb313;
    }

    bb251: {
        StorageDead(_548);
        StorageDead(_539);
        _537 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _538) -> [return: bb252, unwind: bb350];
    }

    bb252: {
        StorageDead(_538);
        _557 = discriminant(_537);
        switchInt(move _557) -> [0: bb253, 1: bb254, otherwise: bb4];
    }

    bb253: {
        StorageLive(_561);
        _561 = ((_537 as Continue).0: i128);
        _536 = _561;
        StorageDead(_561);
        StorageDead(_549);
        StorageDead(_540);
        StorageDead(_537);
        StorageLive(_562);
        StorageLive(_563);
        StorageLive(_564);
        StorageLive(_565);
        _565 = _536;
        _564 = core::num::<impl i128>::unsigned_abs(move _565) -> [return: bb256, unwind: bb350];
    }

    bb254: {
        StorageLive(_558);
        _558 = ((_537 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_560);
        _560 = _558;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _560) -> [return: bb255, unwind: bb350];
    }

    bb255: {
        StorageDead(_560);
        StorageDead(_558);
        goto -> bb313;
    }

    bb256: {
        StorageDead(_565);
        _563 = Gt(move _564, const 100_u128);
        switchInt(move _563) -> [0: bb267, otherwise: bb257];
    }

    bb257: {
        StorageDead(_564);
        StorageLive(_567);
        StorageLive(_568);
        StorageLive(_569);
        StorageLive(_570);
        StorageLive(_571);
        StorageLive(_572);
        StorageLive(_573);
        StorageLive(_574);
        StorageLive(_575);
        StorageLive(_576);
        StorageLive(_577);
        _752 = const _;
        _577 = &(*_752);
        _576 = &(*_577);
        _575 = move _576 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_576);
        StorageLive(_579);
        StorageLive(_580);
        StorageLive(_581);
        StorageLive(_582);
        StorageLive(_583);
        StorageLive(_584);
        StorageLive(_585);
        _585 = &_536;
        _584 = &(*_585);
        _583 = core::fmt::rt::Argument::<'_>::new_debug::<i128>(move _584) -> [return: bb258, unwind: bb350];
    }

    bb258: {
        StorageDead(_584);
        StorageLive(_586);
        StorageLive(_587);
        StorageLive(_588);
        _588 = &_514;
        _587 = &(*_588);
        _586 = core::fmt::rt::Argument::<'_>::new_debug::<u128>(move _587) -> [return: bb259, unwind: bb350];
    }

    bb259: {
        StorageDead(_587);
        StorageLive(_589);
        StorageLive(_590);
        StorageLive(_591);
        _591 = &((*_437).10: u128);
        _590 = &(*_591);
        _589 = core::fmt::rt::Argument::<'_>::new_debug::<u128>(move _590) -> [return: bb260, unwind: bb350];
    }

    bb260: {
        StorageDead(_590);
        _582 = [move _583, move _586, move _589];
        StorageDead(_589);
        StorageDead(_586);
        StorageDead(_583);
        _581 = &_582;
        _580 = &(*_581);
        _579 = move _580 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_580);
        _574 = Arguments::<'_>::new_v1(move _575, move _579) -> [return: bb261, unwind: bb350];
    }

    bb261: {
        StorageDead(_579);
        StorageDead(_575);
        _573 = format(move _574) -> [return: bb262, unwind: bb350];
    }

    bb262: {
        StorageDead(_574);
        StorageDead(_591);
        StorageDead(_588);
        StorageDead(_585);
        StorageDead(_582);
        StorageDead(_581);
        StorageDead(_577);
        _572 = move _573;
        StorageDead(_573);
        _571 = &_572;
        _570 = &(*_571);
        _569 = <String as Deref>::deref(move _570) -> [return: bb263, unwind: bb339];
    }

    bb263: {
        _568 = &(*_569);
        StorageDead(_570);
        _567 = solana_program::log::sol_log(move _568) -> [return: bb264, unwind: bb339];
    }

    bb264: {
        StorageDead(_568);
        drop(_572) -> [return: bb265, unwind: bb350];
    }

    bb265: {
        StorageDead(_572);
        StorageDead(_571);
        StorageDead(_569);
        StorageDead(_567);
        StorageLive(_592);
        StorageLive(_593);
        _593 = error::ErrorCode::InvalidUpdateK;
        _592 = <error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _593) -> [return: bb266, unwind: bb350];
    }

    bb266: {
        StorageDead(_593);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _592);
        StorageDead(_592);
        StorageDead(_563);
        StorageDead(_562);
        goto -> bb315;
    }

    bb267: {
        StorageDead(_564);
        _562 = const ();
        StorageDead(_563);
        StorageDead(_562);
        StorageLive(_594);
        _594 = ((*_437).11: u128);
        StorageLive(_595);
        _595 = ((*_437).5: u128);
        StorageLive(_596);
        _596 = ((*_437).6: u128);
        StorageLive(_597);
        _597 = ((*_437).10: u128);
        StorageLive(_598);
        StorageLive(_599);
        StorageLive(_600);
        StorageLive(_601);
        StorageLive(_602);
        StorageLive(_603);
        StorageLive(_604);
        StorageLive(_605);
        StorageLive(_606);
        StorageLive(_607);
        StorageLive(_608);
        _756 = const _;
        _608 = &(*_756);
        _607 = &(*_608);
        _606 = move _607 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_607);
        StorageLive(_610);
        StorageLive(_611);
        StorageLive(_612);
        StorageLive(_613);
        StorageLive(_614);
        StorageLive(_615);
        StorageLive(_616);
        _616 = &_98;
        _615 = &(*_616);
        _614 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _615) -> [return: bb268, unwind: bb350];
    }

    bb268: {
        StorageDead(_615);
        StorageLive(_617);
        StorageLive(_618);
        StorageLive(_619);
        _619 = &_594;
        _618 = &(*_619);
        _617 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _618) -> [return: bb269, unwind: bb350];
    }

    bb269: {
        StorageDead(_618);
        _613 = [move _614, move _617];
        StorageDead(_617);
        StorageDead(_614);
        _612 = &_613;
        _611 = &(*_612);
        _610 = move _611 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_611);
        _605 = Arguments::<'_>::new_v1(move _606, move _610) -> [return: bb270, unwind: bb350];
    }

    bb270: {
        StorageDead(_610);
        StorageDead(_606);
        _604 = format(move _605) -> [return: bb271, unwind: bb350];
    }

    bb271: {
        StorageDead(_605);
        StorageDead(_619);
        StorageDead(_616);
        StorageDead(_613);
        StorageDead(_612);
        StorageDead(_608);
        _603 = move _604;
        StorageDead(_604);
        _602 = &_603;
        _601 = &(*_602);
        _600 = <String as Deref>::deref(move _601) -> [return: bb272, unwind: bb338];
    }

    bb272: {
        _599 = &(*_600);
        StorageDead(_601);
        _598 = solana_program::log::sol_log(move _599) -> [return: bb273, unwind: bb338];
    }

    bb273: {
        StorageDead(_599);
        drop(_603) -> [return: bb274, unwind: bb350];
    }

    bb274: {
        StorageDead(_603);
        StorageDead(_602);
        StorageDead(_600);
        StorageDead(_598);
        StorageLive(_620);
        StorageLive(_621);
        StorageLive(_622);
        StorageLive(_623);
        StorageLive(_624);
        StorageLive(_625);
        StorageLive(_626);
        StorageLive(_627);
        StorageLive(_628);
        StorageLive(_629);
        StorageLive(_630);
        _755 = const _;
        _630 = &(*_755);
        _629 = &(*_630);
        _628 = move _629 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_629);
        StorageLive(_632);
        StorageLive(_633);
        StorageLive(_634);
        StorageLive(_635);
        StorageLive(_636);
        StorageLive(_637);
        StorageLive(_638);
        _638 = &_101;
        _637 = &(*_638);
        _636 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _637) -> [return: bb275, unwind: bb350];
    }

    bb275: {
        StorageDead(_637);
        StorageLive(_639);
        StorageLive(_640);
        StorageLive(_641);
        _641 = &_595;
        _640 = &(*_641);
        _639 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _640) -> [return: bb276, unwind: bb350];
    }

    bb276: {
        StorageDead(_640);
        _635 = [move _636, move _639];
        StorageDead(_639);
        StorageDead(_636);
        _634 = &_635;
        _633 = &(*_634);
        _632 = move _633 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_633);
        _627 = Arguments::<'_>::new_v1(move _628, move _632) -> [return: bb277, unwind: bb350];
    }

    bb277: {
        StorageDead(_632);
        StorageDead(_628);
        _626 = format(move _627) -> [return: bb278, unwind: bb350];
    }

    bb278: {
        StorageDead(_627);
        StorageDead(_641);
        StorageDead(_638);
        StorageDead(_635);
        StorageDead(_634);
        StorageDead(_630);
        _625 = move _626;
        StorageDead(_626);
        _624 = &_625;
        _623 = &(*_624);
        _622 = <String as Deref>::deref(move _623) -> [return: bb279, unwind: bb337];
    }

    bb279: {
        _621 = &(*_622);
        StorageDead(_623);
        _620 = solana_program::log::sol_log(move _621) -> [return: bb280, unwind: bb337];
    }

    bb280: {
        StorageDead(_621);
        drop(_625) -> [return: bb281, unwind: bb350];
    }

    bb281: {
        StorageDead(_625);
        StorageDead(_624);
        StorageDead(_622);
        StorageDead(_620);
        StorageLive(_642);
        StorageLive(_643);
        StorageLive(_644);
        StorageLive(_645);
        StorageLive(_646);
        StorageLive(_647);
        StorageLive(_648);
        StorageLive(_649);
        StorageLive(_650);
        StorageLive(_651);
        StorageLive(_652);
        _754 = const _;
        _652 = &(*_754);
        _651 = &(*_652);
        _650 = move _651 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_651);
        StorageLive(_654);
        StorageLive(_655);
        StorageLive(_656);
        StorageLive(_657);
        StorageLive(_658);
        StorageLive(_659);
        StorageLive(_660);
        _660 = &_104;
        _659 = &(*_660);
        _658 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _659) -> [return: bb282, unwind: bb350];
    }

    bb282: {
        StorageDead(_659);
        StorageLive(_661);
        StorageLive(_662);
        StorageLive(_663);
        _663 = &_596;
        _662 = &(*_663);
        _661 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _662) -> [return: bb283, unwind: bb350];
    }

    bb283: {
        StorageDead(_662);
        _657 = [move _658, move _661];
        StorageDead(_661);
        StorageDead(_658);
        _656 = &_657;
        _655 = &(*_656);
        _654 = move _655 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_655);
        _649 = Arguments::<'_>::new_v1(move _650, move _654) -> [return: bb284, unwind: bb350];
    }

    bb284: {
        StorageDead(_654);
        StorageDead(_650);
        _648 = format(move _649) -> [return: bb285, unwind: bb350];
    }

    bb285: {
        StorageDead(_649);
        StorageDead(_663);
        StorageDead(_660);
        StorageDead(_657);
        StorageDead(_656);
        StorageDead(_652);
        _647 = move _648;
        StorageDead(_648);
        _646 = &_647;
        _645 = &(*_646);
        _644 = <String as Deref>::deref(move _645) -> [return: bb286, unwind: bb336];
    }

    bb286: {
        _643 = &(*_644);
        StorageDead(_645);
        _642 = solana_program::log::sol_log(move _643) -> [return: bb287, unwind: bb336];
    }

    bb287: {
        StorageDead(_643);
        drop(_647) -> [return: bb288, unwind: bb350];
    }

    bb288: {
        StorageDead(_647);
        StorageDead(_646);
        StorageDead(_644);
        StorageDead(_642);
        StorageLive(_664);
        StorageLive(_665);
        StorageLive(_666);
        StorageLive(_667);
        StorageLive(_668);
        StorageLive(_669);
        StorageLive(_670);
        StorageLive(_671);
        StorageLive(_672);
        StorageLive(_673);
        StorageLive(_674);
        _753 = const _;
        _674 = &(*_753);
        _673 = &(*_674);
        _672 = move _673 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_673);
        StorageLive(_676);
        StorageLive(_677);
        StorageLive(_678);
        StorageLive(_679);
        StorageLive(_680);
        StorageLive(_681);
        StorageLive(_682);
        _682 = &_107;
        _681 = &(*_682);
        _680 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _681) -> [return: bb289, unwind: bb350];
    }

    bb289: {
        StorageDead(_681);
        StorageLive(_683);
        StorageLive(_684);
        StorageLive(_685);
        _685 = &_597;
        _684 = &(*_685);
        _683 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _684) -> [return: bb290, unwind: bb350];
    }

    bb290: {
        StorageDead(_684);
        _679 = [move _680, move _683];
        StorageDead(_683);
        StorageDead(_680);
        _678 = &_679;
        _677 = &(*_678);
        _676 = move _677 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_677);
        _671 = Arguments::<'_>::new_v1(move _672, move _676) -> [return: bb291, unwind: bb350];
    }

    bb291: {
        StorageDead(_676);
        StorageDead(_672);
        _670 = format(move _671) -> [return: bb292, unwind: bb350];
    }

    bb292: {
        StorageDead(_671);
        StorageDead(_685);
        StorageDead(_682);
        StorageDead(_679);
        StorageDead(_678);
        StorageDead(_674);
        _669 = move _670;
        StorageDead(_670);
        _668 = &_669;
        _667 = &(*_668);
        _666 = <String as Deref>::deref(move _667) -> [return: bb293, unwind: bb335];
    }

    bb293: {
        _665 = &(*_666);
        StorageDead(_667);
        _664 = solana_program::log::sol_log(move _665) -> [return: bb294, unwind: bb335];
    }

    bb294: {
        StorageDead(_665);
        drop(_669) -> [return: bb295, unwind: bb350];
    }

    bb295: {
        StorageDead(_669);
        StorageDead(_668);
        StorageDead(_666);
        StorageDead(_664);
        StorageLive(_686);
        _686 = ((*_437).28: i128);
        StorageLive(_687);
        _687 = ((*_437).31: i128);
        StorageLive(_689);
        StorageLive(_690);
        StorageLive(_691);
        StorageLive(_692);
        StorageLive(_693);
        StorageLive(_694);
        StorageLive(_695);
        _695 = &(*_34);
        _694 = <RefMut<'_, PerpMarket> as Deref>::deref(move _695) -> [return: bb296, unwind: bb350];
    }

    bb296: {
        StorageDead(_695);
        _693 = &(((*_694).1: state::perp_market::AMM).72: state::oracle::OracleSource);
        _692 = &(*_693);
        StorageLive(_696);
        StorageLive(_697);
        _771 = deref_copy (_1.1: &mut instructions::admin::AdminUpdateK<'_>);
        _697 = &((*_771).3: anchor_lang::prelude::AccountInfo<'_>);
        _696 = &(*_697);
        StorageLive(_698);
        _698 = (_25.0: u64);
        _691 = get_oracle_price(move _692, move _696, move _698) -> [return: bb297, unwind: bb350];
    }

    bb297: {
        StorageDead(_698);
        StorageDead(_696);
        StorageDead(_692);
        _690 = <std::result::Result<OraclePriceData, error::ErrorCode> as Try>::branch(move _691) -> [return: bb298, unwind: bb350];
    }

    bb298: {
        StorageDead(_691);
        _699 = discriminant(_690);
        switchInt(move _699) -> [0: bb299, 1: bb300, otherwise: bb4];
    }

    bb299: {
        StorageLive(_703);
        _703 = ((_690 as Continue).0: state::oracle::OraclePriceData);
        _689 = _703;
        StorageDead(_703);
        StorageLive(_688);
        _688 = (_689.0: i64);
        StorageDead(_697);
        StorageDead(_694);
        StorageDead(_693);
        StorageDead(_690);
        StorageDead(_689);
        StorageLive(_704);
        StorageLive(_705);
        StorageLive(_706);
        StorageLive(_707);
        StorageLive(_708);
        StorageLive(_709);
        StorageLive(_710);
        StorageLive(_711);
        StorageLive(_712);
        StorageLive(_713);
        StorageLive(_714);
        StorageLive(_715);
        StorageLive(_716);
        StorageLive(_717);
        StorageLive(_718);
        _718 = _33;
        StorageLive(_719);
        StorageLive(_720);
        StorageLive(_721);
        StorageLive(_722);
        _722 = &(*_34);
        _721 = <RefMut<'_, PerpMarket> as Deref>::deref(move _722) -> [return: bb302, unwind: bb350];
    }

    bb300: {
        StorageLive(_700);
        _700 = ((_690 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_702);
        _702 = _700;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _702) -> [return: bb301, unwind: bb350];
    }

    bb301: {
        StorageDead(_702);
        StorageDead(_700);
        StorageDead(_697);
        StorageDead(_694);
        StorageDead(_693);
        StorageDead(_690);
        StorageDead(_689);
        StorageDead(_687);
        StorageDead(_686);
        StorageDead(_597);
        StorageDead(_596);
        StorageDead(_595);
        StorageDead(_594);
        goto -> bb315;
    }

    bb302: {
        StorageDead(_722);
        _720 = ((*_721).10: u64);
        StorageDead(_721);
        StorageLive(_723);
        StorageLive(_724);
        StorageLive(_725);
        StorageLive(_726);
        _726 = _720;
        _725 = core::num::<impl u64>::checked_add(move _726, const 1_u64) -> [return: bb303, unwind: bb350];
    }

    bb303: {
        StorageDead(_726);
        StorageLive(_727);
        _727 = Option::<u64>::Some(const 1_u64);
        _724 = Option::<u64>::or(move _725, move _727) -> [return: bb304, unwind: bb350];
    }

    bb304: {
        StorageDead(_727);
        StorageDead(_725);
        _723 = Option::<u64>::unwrap(move _724) -> [return: bb305, unwind: bb350];
    }

    bb305: {
        StorageDead(_724);
        StorageLive(_728);
        StorageLive(_729);
        _729 = &mut (*_34);
        _728 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _729) -> [return: bb306, unwind: bb350];
    }

    bb306: {
        StorageDead(_729);
        ((*_728).10: u64) = move _723;
        StorageDead(_723);
        StorageDead(_728);
        _719 = _720;
        StorageDead(_720);
        StorageLive(_730);
        StorageLive(_731);
        StorageLive(_732);
        _732 = &(*_34);
        _731 = <RefMut<'_, PerpMarket> as Deref>::deref(move _732) -> [return: bb307, unwind: bb350];
    }

    bb307: {
        StorageDead(_732);
        _730 = ((*_731).21: u16);
        StorageLive(_733);
        _733 = _98;
        StorageLive(_734);
        _734 = _101;
        StorageLive(_735);
        _735 = _104;
        StorageLive(_736);
        _736 = _107;
        StorageLive(_737);
        _737 = _594;
        StorageLive(_738);
        _738 = _595;
        StorageLive(_739);
        _739 = _596;
        StorageLive(_740);
        _740 = _597;
        StorageLive(_741);
        _741 = _67;
        StorageLive(_742);
        _742 = _71;
        StorageLive(_743);
        _743 = _75;
        StorageLive(_744);
        _744 = _78;
        StorageLive(_745);
        _745 = _129;
        StorageLive(_746);
        _746 = _686;
        StorageLive(_747);
        _747 = _687;
        StorageLive(_748);
        _748 = _688;
        _717 = CurveRecord { ts: move _718, record_id: move _719, peg_multiplier_before: move _733, base_asset_reserve_before: move _734, quote_asset_reserve_before: move _735, sqrt_k_before: move _736, peg_multiplier_after: move _737, base_asset_reserve_after: move _738, quote_asset_reserve_after: move _739, sqrt_k_after: move _740, base_asset_amount_long: move _741, base_asset_amount_short: move _742, base_asset_amount_with_amm: move _743, total_fee: move _746, total_fee_minus_distributions: move _747, adjustment_cost: move _745, oracle_price: move _748, fill_record: const 0_u128, number_of_users: move _744, market_index: move _730 };
        StorageDead(_748);
        StorageDead(_747);
        StorageDead(_746);
        StorageDead(_745);
        StorageDead(_744);
        StorageDead(_743);
        StorageDead(_742);
        StorageDead(_741);
        StorageDead(_740);
        StorageDead(_739);
        StorageDead(_738);
        StorageDead(_737);
        StorageDead(_736);
        StorageDead(_735);
        StorageDead(_734);
        StorageDead(_733);
        StorageDead(_730);
        StorageDead(_719);
        StorageDead(_718);
        _716 = &_717;
        _715 = &(*_716);
        _714 = <CurveRecord as anchor_lang::Event>::data(move _715) -> [return: bb308, unwind: bb350];
    }

    bb308: {
        StorageDead(_715);
        _713 = &_714;
        _712 = &(*_713);
        _711 = <Vec<u8> as Deref>::deref(move _712) -> [return: bb309, unwind: bb334];
    }

    bb309: {
        _710 = &(*_711);
        StorageDead(_712);
        _709 = [move _710];
        StorageDead(_710);
        _708 = &_709;
        _707 = &(*_708);
        _706 = move _707 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_707);
        _705 = solana_program::log::sol_log_data(move _706) -> [return: bb310, unwind: bb334];
    }

    bb310: {
        StorageDead(_706);
        drop(_714) -> [return: bb311, unwind: bb350];
    }

    bb311: {
        StorageDead(_731);
        StorageDead(_717);
        StorageDead(_716);
        StorageDead(_714);
        StorageDead(_713);
        StorageDead(_711);
        StorageDead(_709);
        StorageDead(_708);
        StorageDead(_705);
        _704 = const ();
        StorageDead(_704);
        StorageLive(_749);
        _749 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _749);
        StorageDead(_749);
        StorageDead(_688);
        StorageDead(_687);
        StorageDead(_686);
        StorageDead(_597);
        StorageDead(_596);
        StorageDead(_595);
        StorageDead(_594);
        StorageDead(_536);
        StorageDead(_514);
        StorageDead(_451);
        StorageDead(_440);
        StorageDead(_438);
        StorageDead(_437);
        StorageDead(_129);
        StorageDead(_117);
        StorageDead(_115);
        StorageDead(_110);
        StorageDead(_107);
        StorageDead(_104);
        StorageDead(_101);
        StorageDead(_98);
        StorageDead(_81);
        StorageDead(_78);
        StorageDead(_75);
        StorageDead(_71);
        StorageDead(_67);
        drop(_35) -> [return: bb312, unwind: bb351];
    }

    bb312: {
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_25);
        goto -> bb333;
    }

    bb313: {
        StorageDead(_549);
        goto -> bb314;
    }

    bb314: {
        StorageDead(_540);
        StorageDead(_537);
        goto -> bb315;
    }

    bb315: {
        StorageDead(_536);
        goto -> bb317;
    }

    bb316: {
        StorageDead(_520);
        StorageDead(_519);
        StorageDead(_515);
        goto -> bb317;
    }

    bb317: {
        StorageDead(_514);
        goto -> bb320;
    }

    bb318: {
        StorageDead(_454);
        StorageDead(_452);
        StorageDead(_467);
        goto -> bb319;
    }

    bb319: {
        StorageDead(_458);
        StorageDead(_455);
        StorageDead(_453);
        goto -> bb320;
    }

    bb320: {
        StorageDead(_451);
        goto -> bb321;
    }

    bb321: {
        StorageDead(_440);
        StorageDead(_438);
        StorageDead(_437);
        goto -> bb328;
    }

    bb322: {
        StorageDead(_285);
        StorageDead(_282);
        goto -> bb325;
    }

    bb323: {
        StorageDead(_257);
        StorageDead(_254);
        StorageDead(_253);
        goto -> bb324;
    }

    bb324: {
        StorageDead(_251);
        StorageDead(_250);
        goto -> bb325;
    }

    bb325: {
        StorageDead(_264);
        StorageDead(_261);
        StorageDead(_258);
        StorageDead(_255);
        StorageDead(_252);
        StorageDead(_249);
        goto -> bb326;
    }

    bb326: {
        StorageDead(_248);
        StorageDead(_246);
        StorageDead(_245);
        goto -> bb328;
    }

    bb327: {
        StorageDead(_156);
        StorageDead(_155);
        goto -> bb328;
    }

    bb328: {
        StorageDead(_129);
        goto -> bb329;
    }

    bb329: {
        StorageDead(_117);
        StorageDead(_115);
        StorageDead(_110);
        StorageDead(_107);
        StorageDead(_104);
        StorageDead(_101);
        StorageDead(_98);
        goto -> bb330;
    }

    bb330: {
        StorageDead(_81);
        StorageDead(_78);
        StorageDead(_75);
        StorageDead(_71);
        StorageDead(_67);
        drop(_35) -> [return: bb331, unwind: bb351];
    }

    bb331: {
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_33);
        goto -> bb332;
    }

    bb332: {
        StorageDead(_25);
        goto -> bb333;
    }

    bb333: {
        return;
    }

    bb334 (cleanup): {
        drop(_714) -> [return: bb350, unwind terminate(cleanup)];
    }

    bb335 (cleanup): {
        drop(_669) -> [return: bb350, unwind terminate(cleanup)];
    }

    bb336 (cleanup): {
        drop(_647) -> [return: bb350, unwind terminate(cleanup)];
    }

    bb337 (cleanup): {
        drop(_625) -> [return: bb350, unwind terminate(cleanup)];
    }

    bb338 (cleanup): {
        drop(_603) -> [return: bb350, unwind terminate(cleanup)];
    }

    bb339 (cleanup): {
        drop(_572) -> [return: bb350, unwind terminate(cleanup)];
    }

    bb340 (cleanup): {
        drop(_491) -> [return: bb350, unwind terminate(cleanup)];
    }

    bb341 (cleanup): {
        drop(_386) -> [return: bb350, unwind terminate(cleanup)];
    }

    bb342 (cleanup): {
        drop(_367) -> [return: bb350, unwind terminate(cleanup)];
    }

    bb343 (cleanup): {
        drop(_329) -> [return: bb350, unwind terminate(cleanup)];
    }

    bb344 (cleanup): {
        drop(_310) -> [return: bb350, unwind terminate(cleanup)];
    }

    bb345 (cleanup): {
        drop(_232) -> [return: bb350, unwind terminate(cleanup)];
    }

    bb346 (cleanup): {
        drop(_213) -> [return: bb350, unwind terminate(cleanup)];
    }

    bb347 (cleanup): {
        drop(_188) -> [return: bb350, unwind terminate(cleanup)];
    }

    bb348 (cleanup): {
        drop(_169) -> [return: bb350, unwind terminate(cleanup)];
    }

    bb349 (cleanup): {
        drop(_51) -> [return: bb350, unwind terminate(cleanup)];
    }

    bb350 (cleanup): {
        drop(_35) -> [return: bb351, unwind terminate(cleanup)];
    }

    bb351 (cleanup): {
        resume;
    }

    bb352 (cleanup): {
        _788 = discriminant(_36);
        goto -> bb351;
    }

    bb353 (cleanup): {
        _789 = discriminant(_26);
        goto -> bb351;
    }

    bb354 (cleanup): {
        _790 = discriminant(_14);
        goto -> bb351;
    }

    bb355 (cleanup): {
        _791 = discriminant(_4);
        goto -> bb351;
    }
}
