// MIR for `calculate_jit_base_asset_amount` after PreCodegen

fn calculate_jit_base_asset_amount(_1: &PerpMarket, _2: u64, _3: u64, _4: Option<i64>, _5: controller::position::PositionDirection) -> std::result::Result<u64, error::ErrorCode> {
    debug market => _1;
    debug maker_base_asset_amount => _2;
    debug auction_price => _3;
    debug valid_oracle_price => _4;
    debug taker_direction => _5;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let mut _6: u64;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _8: std::result::Result<u64, error::ErrorCode>;
    let mut _9: u64;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _14: u64;
    let _15: ();
    let mut _16: isize;
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _21: std::result::Result<u64, error::ErrorCode>;
    let mut _22: i64;
    let mut _23: isize;
    let mut _25: !;
    let mut _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _29: u64;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: &controller::position::PositionDirection;
    let mut _33: &controller::position::PositionDirection;
    let _34: controller::position::PositionDirection;
    let mut _35: bool;
    let mut _36: u64;
    let mut _37: u64;
    let mut _38: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _39: std::result::Result<u64, error::ErrorCode>;
    let mut _40: u64;
    let mut _41: u64;
    let mut _42: isize;
    let mut _44: !;
    let mut _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _47: bool;
    let mut _48: &controller::position::PositionDirection;
    let mut _49: &controller::position::PositionDirection;
    let _50: controller::position::PositionDirection;
    let mut _51: bool;
    let mut _52: u64;
    let mut _53: u64;
    let mut _54: u64;
    let mut _55: u64;
    let mut _57: bool;
    let mut _58: &controller::position::PositionDirection;
    let mut _59: &controller::position::PositionDirection;
    let _60: controller::position::PositionDirection;
    let mut _61: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _62: std::result::Result<u64, error::ErrorCode>;
    let mut _63: u64;
    let mut _64: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _65: std::result::Result<u64, error::ErrorCode>;
    let mut _66: u64;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _68: std::result::Result<u64, error::ErrorCode>;
    let mut _69: u32;
    let mut _70: isize;
    let mut _72: !;
    let mut _73: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _75: u64;
    let mut _76: isize;
    let mut _78: !;
    let mut _79: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _81: isize;
    let mut _83: !;
    let mut _84: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _86: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _87: std::result::Result<u64, error::ErrorCode>;
    let mut _88: u64;
    let mut _89: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _90: std::result::Result<u64, error::ErrorCode>;
    let mut _91: u64;
    let mut _92: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _93: std::result::Result<u64, error::ErrorCode>;
    let mut _94: u32;
    let mut _95: isize;
    let mut _97: !;
    let mut _98: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _100: u64;
    let mut _101: isize;
    let mut _103: !;
    let mut _104: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _106: isize;
    let mut _108: !;
    let mut _109: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _112: i64;
    let mut _113: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _114: std::result::Result<i64, error::ErrorCode>;
    let mut _115: i64;
    let mut _116: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _117: std::result::Result<i64, error::ErrorCode>;
    let mut _118: u64;
    let mut _119: isize;
    let mut _121: !;
    let mut _122: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _124: i64;
    let mut _125: isize;
    let mut _127: !;
    let mut _128: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _131: u64;
    let mut _132: u64;
    let mut _133: u64;
    let mut _134: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _135: std::result::Result<u64, error::ErrorCode>;
    let mut _136: u64;
    let mut _137: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _138: std::result::Result<u64, error::ErrorCode>;
    let mut _139: u64;
    let mut _140: u64;
    let mut _141: isize;
    let mut _143: !;
    let mut _144: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _146: u64;
    let mut _147: u64;
    let mut _148: isize;
    let mut _150: !;
    let mut _151: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _153: ();
    let mut _154: bool;
    let mut _155: u64;
    let mut _156: !;
    let mut _159: (i128, i128);
    let mut _160: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (i128, i128)>;
    let mut _161: std::result::Result<(i128, i128), error::ErrorCode>;
    let mut _162: &state::perp_market::AMM;
    let _163: &state::perp_market::AMM;
    let mut _164: isize;
    let mut _166: !;
    let mut _167: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _171: (u128, u128);
    let mut _172: u128;
    let mut _173: i128;
    let mut _174: u128;
    let mut _175: i128;
    let mut _177: u128;
    let mut _178: u128;
    let mut _180: u128;
    let mut _181: u128;
    let mut _183: std::result::Result<u128, error::ErrorCode>;
    let mut _184: u128;
    let mut _185: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _186: std::result::Result<u128, error::ErrorCode>;
    let mut _187: u128;
    let mut _188: isize;
    let mut _190: !;
    let mut _191: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _193: u128;
    let mut _195: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _196: std::result::Result<u128, error::ErrorCode>;
    let mut _197: u128;
    let mut _198: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _199: std::result::Result<u128, error::ErrorCode>;
    let mut _200: isize;
    let mut _202: !;
    let mut _203: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _205: isize;
    let mut _207: !;
    let mut _208: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _211: u128;
    let mut _212: u128;
    let mut _214: bool;
    let mut _215: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _216: std::result::Result<u64, error::ErrorCode>;
    let mut _217: u64;
    let mut _218: isize;
    let mut _220: !;
    let mut _221: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _223: ();
    let mut _224: bool;
    let mut _225: u64;
    let mut _226: !;
    let mut _227: u64;
    let mut _228: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _229: std::result::Result<u64, error::ErrorCode>;
    let mut _230: &state::perp_market::PerpMarket;
    let mut _231: u64;
    let mut _232: isize;
    let mut _234: !;
    let mut _235: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _237: u64;
    let mut _238: u64;
    let mut _239: u64;
    let mut _240: u64;
    let mut _241: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _242: std::result::Result<u64, error::ErrorCode>;
    let mut _243: u64;
    let mut _244: u64;
    let mut _245: isize;
    let mut _247: !;
    let mut _248: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _250: u64;
    scope 1 {
        debug max_jit_amount => _6;
        let _157: i128;
        let _158: i128;
        let _165: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _168: (i128, i128);
        scope 6 {
            debug oracle_price => _17;
            let _17: i64;
            let _18: i64;
            scope 7 {
                debug baseline_price => _18;
                let _19: u64;
                let _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _27: u64;
                scope 8 {
                    debug baseline_price_u64 => _19;
                    let _28: u64;
                    scope 13 {
                        debug five_bps_of_baseline => _28;
                        let _43: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _46: u64;
                        let _56: u64;
                        let _71: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _74: u64;
                        let _77: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _80: u64;
                        let _82: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _85: u64;
                        let _96: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _99: u64;
                        let _102: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _105: u64;
                        let _107: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _110: u64;
                        let mut _251: &controller::position::PositionDirection;
                        let mut _252: &controller::position::PositionDirection;
                        let mut _253: &controller::position::PositionDirection;
                        scope 14 {
                            debug residual => _43;
                            scope 15 {
                            }
                        }
                        scope 16 {
                            debug val => _46;
                            scope 17 {
                            }
                        }
                        scope 18 {
                            debug opposite_spread_price => _56;
                            let _111: u64;
                            let _120: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _123: i64;
                            let _126: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _129: i64;
                            scope 43 {
                                debug price_difference_from_baseline => _111;
                                let _130: u64;
                                scope 52 {
                                    debug max_jit_amount_scale_numerator => _130;
                                    let _142: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _145: u64;
                                    let _149: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _152: u64;
                                    scope 53 {
                                        debug residual => _142;
                                        scope 54 {
                                        }
                                    }
                                    scope 55 {
                                        debug val => _145;
                                        scope 56 {
                                        }
                                    }
                                    scope 57 {
                                        debug residual => _149;
                                        scope 58 {
                                        }
                                    }
                                    scope 59 {
                                        debug val => _152;
                                        scope 60 {
                                        }
                                    }
                                }
                            }
                            scope 44 {
                                debug residual => _120;
                                scope 45 {
                                }
                            }
                            scope 46 {
                                debug val => _123;
                                scope 47 {
                                }
                            }
                            scope 48 {
                                debug residual => _126;
                                scope 49 {
                                }
                            }
                            scope 50 {
                                debug val => _129;
                                scope 51 {
                                }
                            }
                        }
                        scope 19 {
                            debug residual => _71;
                            scope 20 {
                            }
                        }
                        scope 21 {
                            debug val => _74;
                            scope 22 {
                            }
                        }
                        scope 23 {
                            debug residual => _77;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _80;
                            scope 26 {
                            }
                        }
                        scope 27 {
                            debug residual => _82;
                            scope 28 {
                            }
                        }
                        scope 29 {
                            debug val => _85;
                            scope 30 {
                            }
                        }
                        scope 31 {
                            debug residual => _96;
                            scope 32 {
                            }
                        }
                        scope 33 {
                            debug val => _99;
                            scope 34 {
                            }
                        }
                        scope 35 {
                            debug residual => _102;
                            scope 36 {
                            }
                        }
                        scope 37 {
                            debug val => _105;
                            scope 38 {
                            }
                        }
                        scope 39 {
                            debug residual => _107;
                            scope 40 {
                            }
                        }
                        scope 41 {
                            debug val => _110;
                            scope 42 {
                            }
                        }
                    }
                }
                scope 9 {
                    debug residual => _24;
                    scope 10 {
                    }
                }
                scope 11 {
                    debug val => _27;
                    scope 12 {
                    }
                }
            }
        }
        scope 61 {
            debug max_bids => _157;
            debug max_asks => _158;
            let _169: u128;
            let _170: u128;
            scope 66 {
                debug max_bids => _169;
                debug max_asks => _170;
                let _176: u128;
                scope 67 {
                    debug numerator => _176;
                    let _179: u128;
                    scope 68 {
                        debug denominator => _179;
                        let _182: u128;
                        let _189: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _192: u128;
                        scope 69 {
                            debug ratio => _182;
                            let _194: u128;
                            let _201: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _204: u128;
                            let _206: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _209: u128;
                            scope 74 {
                                debug imbalanced_bound => _194;
                                let _210: bool;
                                scope 83 {
                                    debug amm_is_imbalanced => _210;
                                    let mut _213: u64;
                                    let _219: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _222: u64;
                                    scope 84 {
                                        debug jit_base_asset_amount => _213;
                                        let _233: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _236: u64;
                                        let _246: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _249: u64;
                                        scope 89 {
                                            debug residual => _233;
                                            scope 90 {
                                            }
                                        }
                                        scope 91 {
                                            debug val => _236;
                                            scope 92 {
                                            }
                                        }
                                        scope 93 {
                                            debug residual => _246;
                                            scope 94 {
                                            }
                                        }
                                        scope 95 {
                                            debug val => _249;
                                            scope 96 {
                                            }
                                        }
                                    }
                                    scope 85 {
                                        debug residual => _219;
                                        scope 86 {
                                        }
                                    }
                                    scope 87 {
                                        debug val => _222;
                                        scope 88 {
                                        }
                                    }
                                }
                            }
                            scope 75 {
                                debug residual => _201;
                                scope 76 {
                                }
                            }
                            scope 77 {
                                debug val => _204;
                                scope 78 {
                                }
                            }
                            scope 79 {
                                debug residual => _206;
                                scope 80 {
                                }
                            }
                            scope 81 {
                                debug val => _209;
                                scope 82 {
                                }
                            }
                        }
                        scope 70 {
                            debug residual => _189;
                            scope 71 {
                            }
                        }
                        scope 72 {
                            debug val => _192;
                            scope 73 {
                            }
                        }
                    }
                }
            }
        }
        scope 62 {
            debug residual => _165;
            scope 63 {
            }
        }
        scope 64 {
            debug val => _168;
            scope 65 {
            }
        }
    }
    scope 2 {
        debug residual => _11;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _14;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = _2;
        _8 = <u64 as SafeMath>::safe_div(move _9, const 2_u64) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        _7 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_8);
        _10 = discriminant(_7);
        switchInt(move _10) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_14);
        _14 = ((_7 as Continue).0: u64);
        _6 = _14;
        StorageDead(_14);
        StorageDead(_7);
        StorageLive(_15);
        _16 = discriminant(_4);
        switchInt(move _16) -> [1: bb8, otherwise: bb7];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_11);
        _11 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_13);
        _13 = _11;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _13) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_7);
        goto -> bb156;
    }

    bb7: {
        _6 = const 0_u64;
        _15 = const ();
        goto -> bb91;
    }

    bb8: {
        StorageLive(_17);
        _17 = ((_4 as Some).0: i64);
        StorageLive(_18);
        _18 = _17;
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = _17;
        _21 = <i64 as Cast>::cast::<u64>(move _22) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_22);
        _20 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _21) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_21);
        _23 = discriminant(_20);
        switchInt(move _23) -> [0: bb11, 1: bb12, otherwise: bb4];
    }

    bb11: {
        StorageLive(_27);
        _27 = ((_20 as Continue).0: u64);
        _19 = _27;
        StorageDead(_27);
        StorageDead(_20);
        StorageLive(_28);
        StorageLive(_29);
        _29 = _19;
        _30 = Eq(const 2000_u64, const 0_u64);
        assert(!move _30, "attempt to divide `{}` by zero", _29) -> [success: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_24);
        _24 = ((_20 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_26);
        _26 = _24;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _26) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_20);
        goto -> bb155;
    }

    bb14: {
        _28 = Div(move _29, const 2000_u64);
        StorageDead(_29);
        StorageLive(_31);
        StorageLive(_32);
        _32 = &_5;
        StorageLive(_33);
        _253 = const _;
        _33 = &(*_253);
        _31 = <controller::position::PositionDirection as PartialEq>::eq(move _32, move _33) -> [return: bb15, unwind continue];
    }

    bb15: {
        switchInt(move _31) -> [0: bb24, otherwise: bb16];
    }

    bb16: {
        StorageDead(_33);
        StorageDead(_32);
        StorageLive(_35);
        StorageLive(_36);
        _36 = _3;
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = _19;
        StorageLive(_41);
        _41 = _28;
        _39 = <u64 as SafeMath>::safe_sub(move _40, move _41) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_41);
        StorageDead(_40);
        _38 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _39) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_39);
        _42 = discriminant(_38);
        switchInt(move _42) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_46);
        _46 = ((_38 as Continue).0: u64);
        _37 = _46;
        StorageDead(_46);
        _35 = Lt(move _36, move _37);
        switchInt(move _35) -> [0: bb23, otherwise: bb22];
    }

    bb20: {
        StorageLive(_43);
        _43 = ((_38 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_45);
        _45 = _43;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _45) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_45);
        StorageDead(_43);
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_36);
        goto -> bb154;
    }

    bb22: {
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_36);
        goto -> bb29;
    }

    bb23: {
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_36);
        goto -> bb25;
    }

    bb24: {
        StorageDead(_33);
        StorageDead(_32);
        goto -> bb25;
    }

    bb25: {
        StorageLive(_47);
        StorageLive(_48);
        _48 = &_5;
        StorageLive(_49);
        _252 = const _;
        _49 = &(*_252);
        _47 = <controller::position::PositionDirection as PartialEq>::eq(move _48, move _49) -> [return: bb26, unwind continue];
    }

    bb26: {
        switchInt(move _47) -> [0: bb88, otherwise: bb27];
    }

    bb27: {
        StorageDead(_49);
        StorageDead(_48);
        StorageLive(_51);
        StorageLive(_52);
        _52 = _3;
        StorageLive(_53);
        StorageLive(_54);
        _54 = _19;
        StorageLive(_55);
        _55 = _28;
        _53 = core::num::<impl u64>::saturating_add(move _54, move _55) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_55);
        StorageDead(_54);
        _51 = Gt(move _52, move _53);
        switchInt(move _51) -> [0: bb87, otherwise: bb29];
    }

    bb29: {
        StorageDead(_53);
        StorageDead(_52);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _58 = &_5;
        StorageLive(_59);
        _251 = const _;
        _59 = &(*_251);
        _57 = <controller::position::PositionDirection as PartialEq>::eq(move _58, move _59) -> [return: bb30, unwind continue];
    }

    bb30: {
        switchInt(move _57) -> [0: bb47, otherwise: bb31];
    }

    bb31: {
        StorageDead(_59);
        StorageDead(_58);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = (((*_1).1: state::perp_market::AMM).66: u32);
        _68 = <u32 as Cast>::cast::<u64>(move _69) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_69);
        _67 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _68) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_68);
        _70 = discriminant(_67);
        switchInt(move _70) -> [0: bb34, 1: bb35, otherwise: bb4];
    }

    bb34: {
        StorageLive(_74);
        _74 = ((_67 as Continue).0: u64);
        _66 = _74;
        StorageDead(_74);
        StorageLive(_75);
        _75 = _19;
        _65 = <u64 as SafeMath>::safe_mul(move _66, move _75) -> [return: bb37, unwind continue];
    }

    bb35: {
        StorageLive(_71);
        _71 = ((_67 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_73);
        _73 = _71;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _73) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_73);
        StorageDead(_71);
        StorageDead(_66);
        StorageDead(_65);
        goto -> bb150;
    }

    bb37: {
        StorageDead(_75);
        StorageDead(_66);
        _64 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _65) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_65);
        _76 = discriminant(_64);
        switchInt(move _76) -> [0: bb39, 1: bb40, otherwise: bb4];
    }

    bb39: {
        StorageLive(_80);
        _80 = ((_64 as Continue).0: u64);
        _63 = _80;
        StorageDead(_80);
        _62 = <u64 as SafeMath>::safe_div(move _63, const _) -> [return: bb42, unwind continue];
    }

    bb40: {
        StorageLive(_77);
        _77 = ((_64 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_79);
        _79 = _77;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _79) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_79);
        StorageDead(_77);
        goto -> bb150;
    }

    bb42: {
        StorageDead(_63);
        _61 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _62) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_62);
        _81 = discriminant(_61);
        switchInt(move _81) -> [0: bb44, 1: bb45, otherwise: bb4];
    }

    bb44: {
        StorageLive(_85);
        _85 = ((_61 as Continue).0: u64);
        _56 = _85;
        StorageDead(_85);
        StorageDead(_67);
        StorageDead(_64);
        StorageDead(_61);
        goto -> bb63;
    }

    bb45: {
        StorageLive(_82);
        _82 = ((_61 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_84);
        _84 = _82;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _84) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_84);
        StorageDead(_82);
        goto -> bb151;
    }

    bb47: {
        StorageDead(_59);
        StorageDead(_58);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _94 = (((*_1).1: state::perp_market::AMM).65: u32);
        _93 = <u32 as Cast>::cast::<u64>(move _94) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_94);
        _92 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _93) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_93);
        _95 = discriminant(_92);
        switchInt(move _95) -> [0: bb50, 1: bb51, otherwise: bb4];
    }

    bb50: {
        StorageLive(_99);
        _99 = ((_92 as Continue).0: u64);
        _91 = _99;
        StorageDead(_99);
        StorageLive(_100);
        _100 = _19;
        _90 = <u64 as SafeMath>::safe_mul(move _91, move _100) -> [return: bb53, unwind continue];
    }

    bb51: {
        StorageLive(_96);
        _96 = ((_92 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_98);
        _98 = _96;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _98) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_98);
        StorageDead(_96);
        StorageDead(_91);
        StorageDead(_90);
        goto -> bb148;
    }

    bb53: {
        StorageDead(_100);
        StorageDead(_91);
        _89 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _90) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_90);
        _101 = discriminant(_89);
        switchInt(move _101) -> [0: bb55, 1: bb56, otherwise: bb4];
    }

    bb55: {
        StorageLive(_105);
        _105 = ((_89 as Continue).0: u64);
        _88 = _105;
        StorageDead(_105);
        _87 = <u64 as SafeMath>::safe_div(move _88, const _) -> [return: bb58, unwind continue];
    }

    bb56: {
        StorageLive(_102);
        _102 = ((_89 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_104);
        _104 = _102;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _104) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_104);
        StorageDead(_102);
        goto -> bb148;
    }

    bb58: {
        StorageDead(_88);
        _86 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _87) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_87);
        _106 = discriminant(_86);
        switchInt(move _106) -> [0: bb60, 1: bb61, otherwise: bb4];
    }

    bb60: {
        StorageLive(_110);
        _110 = ((_86 as Continue).0: u64);
        _56 = _110;
        StorageDead(_110);
        StorageDead(_92);
        StorageDead(_89);
        StorageDead(_86);
        goto -> bb63;
    }

    bb61: {
        StorageLive(_107);
        _107 = ((_86 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_109);
        _109 = _107;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _109) -> [return: bb62, unwind continue];
    }

    bb62: {
        StorageDead(_109);
        StorageDead(_107);
        goto -> bb149;
    }

    bb63: {
        StorageDead(_57);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        _118 = _3;
        _117 = <u64 as Cast>::cast::<i64>(move _118) -> [return: bb64, unwind continue];
    }

    bb64: {
        StorageDead(_118);
        _116 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _117) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_117);
        _119 = discriminant(_116);
        switchInt(move _119) -> [0: bb66, 1: bb67, otherwise: bb4];
    }

    bb66: {
        StorageLive(_123);
        _123 = ((_116 as Continue).0: i64);
        _115 = _123;
        StorageDead(_123);
        StorageLive(_124);
        _124 = _18;
        _114 = <i64 as SafeMath>::safe_sub(move _115, move _124) -> [return: bb69, unwind continue];
    }

    bb67: {
        StorageLive(_120);
        _120 = ((_116 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_122);
        _122 = _120;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _122) -> [return: bb68, unwind continue];
    }

    bb68: {
        StorageDead(_122);
        StorageDead(_120);
        StorageDead(_115);
        StorageDead(_114);
        goto -> bb146;
    }

    bb69: {
        StorageDead(_124);
        StorageDead(_115);
        _113 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _114) -> [return: bb70, unwind continue];
    }

    bb70: {
        StorageDead(_114);
        _125 = discriminant(_113);
        switchInt(move _125) -> [0: bb71, 1: bb72, otherwise: bb4];
    }

    bb71: {
        StorageLive(_129);
        _129 = ((_113 as Continue).0: i64);
        _112 = _129;
        StorageDead(_129);
        _111 = core::num::<impl i64>::unsigned_abs(move _112) -> [return: bb74, unwind continue];
    }

    bb72: {
        StorageLive(_126);
        _126 = ((_113 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_128);
        _128 = _126;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _128) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_128);
        StorageDead(_126);
        goto -> bb146;
    }

    bb74: {
        StorageDead(_112);
        StorageDead(_116);
        StorageDead(_113);
        StorageLive(_130);
        StorageLive(_131);
        _131 = _56;
        StorageLive(_132);
        _132 = _111;
        _130 = core::num::<impl u64>::saturating_sub(move _131, move _132) -> [return: bb75, unwind continue];
    }

    bb75: {
        StorageDead(_132);
        StorageDead(_131);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _139 = _6;
        StorageLive(_140);
        _140 = _130;
        _138 = <u64 as SafeMath>::safe_mul(move _139, move _140) -> [return: bb76, unwind continue];
    }

    bb76: {
        StorageDead(_140);
        StorageDead(_139);
        _137 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _138) -> [return: bb77, unwind continue];
    }

    bb77: {
        StorageDead(_138);
        _141 = discriminant(_137);
        switchInt(move _141) -> [0: bb78, 1: bb79, otherwise: bb4];
    }

    bb78: {
        StorageLive(_145);
        _145 = ((_137 as Continue).0: u64);
        _136 = _145;
        StorageDead(_145);
        StorageLive(_146);
        StorageLive(_147);
        _147 = _56;
        _146 = <u64 as Ord>::max(move _147, const 1_u64) -> [return: bb81, unwind continue];
    }

    bb79: {
        StorageLive(_142);
        _142 = ((_137 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_144);
        _144 = _142;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _144) -> [return: bb80, unwind continue];
    }

    bb80: {
        StorageDead(_144);
        StorageDead(_142);
        StorageDead(_136);
        StorageDead(_135);
        goto -> bb145;
    }

    bb81: {
        StorageDead(_147);
        _135 = <u64 as SafeMath>::safe_div(move _136, move _146) -> [return: bb82, unwind continue];
    }

    bb82: {
        StorageDead(_146);
        StorageDead(_136);
        _134 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _135) -> [return: bb83, unwind continue];
    }

    bb83: {
        StorageDead(_135);
        _148 = discriminant(_134);
        switchInt(move _148) -> [0: bb84, 1: bb85, otherwise: bb4];
    }

    bb84: {
        StorageLive(_152);
        _152 = ((_134 as Continue).0: u64);
        _133 = _152;
        StorageDead(_152);
        _6 = move _133;
        StorageDead(_133);
        StorageDead(_137);
        StorageDead(_134);
        _15 = const ();
        StorageDead(_130);
        StorageDead(_111);
        StorageDead(_56);
        goto -> bb90;
    }

    bb85: {
        StorageLive(_149);
        _149 = ((_134 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_151);
        _151 = _149;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _151) -> [return: bb86, unwind continue];
    }

    bb86: {
        StorageDead(_151);
        StorageDead(_149);
        goto -> bb145;
    }

    bb87: {
        StorageDead(_53);
        StorageDead(_52);
        goto -> bb89;
    }

    bb88: {
        StorageDead(_49);
        StorageDead(_48);
        goto -> bb89;
    }

    bb89: {
        _15 = const ();
        goto -> bb90;
    }

    bb90: {
        StorageDead(_51);
        StorageDead(_47);
        StorageDead(_35);
        StorageDead(_31);
        StorageDead(_28);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        goto -> bb91;
    }

    bb91: {
        StorageDead(_15);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        _155 = _6;
        _154 = Eq(move _155, const 0_u64);
        switchInt(move _154) -> [0: bb93, otherwise: bb92];
    }

    bb92: {
        StorageDead(_155);
        _0 = std::result::Result::<u64, error::ErrorCode>::Ok(const 0_u64);
        StorageDead(_154);
        StorageDead(_153);
        goto -> bb156;
    }

    bb93: {
        StorageDead(_155);
        _153 = const ();
        StorageDead(_154);
        StorageDead(_153);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        _163 = &((*_1).1: state::perp_market::AMM);
        _162 = &(*_163);
        _161 = calculate_market_open_bids_asks(move _162) -> [return: bb94, unwind continue];
    }

    bb94: {
        StorageDead(_162);
        _160 = <std::result::Result<(i128, i128), error::ErrorCode> as Try>::branch(move _161) -> [return: bb95, unwind continue];
    }

    bb95: {
        StorageDead(_161);
        _164 = discriminant(_160);
        switchInt(move _164) -> [0: bb96, 1: bb97, otherwise: bb4];
    }

    bb96: {
        StorageLive(_168);
        _168 = ((_160 as Continue).0: (i128, i128));
        _159 = _168;
        StorageDead(_168);
        StorageLive(_157);
        _157 = (_159.0: i128);
        StorageLive(_158);
        _158 = (_159.1: i128);
        StorageDead(_163);
        StorageDead(_160);
        StorageDead(_159);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        _173 = _157;
        _172 = core::num::<impl i128>::unsigned_abs(move _173) -> [return: bb99, unwind continue];
    }

    bb97: {
        StorageLive(_165);
        _165 = ((_160 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_167);
        _167 = _165;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _167) -> [return: bb98, unwind continue];
    }

    bb98: {
        StorageDead(_167);
        StorageDead(_165);
        StorageDead(_163);
        StorageDead(_160);
        StorageDead(_159);
        goto -> bb156;
    }

    bb99: {
        StorageDead(_173);
        StorageLive(_174);
        StorageLive(_175);
        _175 = _158;
        _174 = core::num::<impl i128>::unsigned_abs(move _175) -> [return: bb100, unwind continue];
    }

    bb100: {
        StorageDead(_175);
        _171 = (move _172, move _174);
        StorageDead(_174);
        StorageDead(_172);
        StorageLive(_169);
        _169 = (_171.0: u128);
        StorageLive(_170);
        _170 = (_171.1: u128);
        StorageDead(_171);
        StorageLive(_176);
        StorageLive(_177);
        _177 = _169;
        StorageLive(_178);
        _178 = _170;
        _176 = <u128 as Ord>::max(move _177, move _178) -> [return: bb101, unwind continue];
    }

    bb101: {
        StorageDead(_178);
        StorageDead(_177);
        StorageLive(_179);
        StorageLive(_180);
        _180 = _169;
        StorageLive(_181);
        _181 = _170;
        _179 = <u128 as Ord>::min(move _180, move _181) -> [return: bb102, unwind continue];
    }

    bb102: {
        StorageDead(_181);
        StorageDead(_180);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        _187 = _176;
        _186 = <u128 as SafeMath>::safe_mul(move _187, const _) -> [return: bb103, unwind continue];
    }

    bb103: {
        StorageDead(_187);
        _185 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _186) -> [return: bb104, unwind continue];
    }

    bb104: {
        StorageDead(_186);
        _188 = discriminant(_185);
        switchInt(move _188) -> [0: bb105, 1: bb106, otherwise: bb4];
    }

    bb105: {
        StorageLive(_192);
        _192 = ((_185 as Continue).0: u128);
        _184 = _192;
        StorageDead(_192);
        StorageLive(_193);
        _193 = _179;
        _183 = <u128 as SafeMath>::safe_div(move _184, move _193) -> [return: bb108, unwind continue];
    }

    bb106: {
        StorageLive(_189);
        _189 = ((_185 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_191);
        _191 = _189;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _191) -> [return: bb107, unwind continue];
    }

    bb107: {
        StorageDead(_191);
        StorageDead(_189);
        StorageDead(_184);
        StorageDead(_183);
        StorageDead(_185);
        goto -> bb144;
    }

    bb108: {
        StorageDead(_193);
        StorageDead(_184);
        _182 = std::result::Result::<u128, error::ErrorCode>::unwrap_or(move _183, const _) -> [return: bb109, unwind continue];
    }

    bb109: {
        StorageDead(_183);
        StorageDead(_185);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        _199 = <u128 as SafeMath>::safe_div(const _, const 10_u128) -> [return: bb110, unwind continue];
    }

    bb110: {
        _198 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _199) -> [return: bb111, unwind continue];
    }

    bb111: {
        StorageDead(_199);
        _200 = discriminant(_198);
        switchInt(move _200) -> [0: bb112, 1: bb113, otherwise: bb4];
    }

    bb112: {
        StorageLive(_204);
        _204 = ((_198 as Continue).0: u128);
        _197 = _204;
        StorageDead(_204);
        _196 = <u128 as SafeMath>::safe_mul(const 15_u128, move _197) -> [return: bb115, unwind continue];
    }

    bb113: {
        StorageLive(_201);
        _201 = ((_198 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_203);
        _203 = _201;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _203) -> [return: bb114, unwind continue];
    }

    bb114: {
        StorageDead(_203);
        StorageDead(_201);
        StorageDead(_197);
        StorageDead(_196);
        goto -> bb142;
    }

    bb115: {
        StorageDead(_197);
        _195 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _196) -> [return: bb116, unwind continue];
    }

    bb116: {
        StorageDead(_196);
        _205 = discriminant(_195);
        switchInt(move _205) -> [0: bb117, 1: bb118, otherwise: bb4];
    }

    bb117: {
        StorageLive(_209);
        _209 = ((_195 as Continue).0: u128);
        _194 = _209;
        StorageDead(_209);
        StorageDead(_198);
        StorageDead(_195);
        StorageLive(_210);
        StorageLive(_211);
        _211 = _182;
        StorageLive(_212);
        _212 = _194;
        _210 = Ge(move _211, move _212);
        StorageDead(_212);
        StorageDead(_211);
        StorageLive(_213);
        StorageLive(_214);
        _214 = _210;
        switchInt(move _214) -> [0: bb121, otherwise: bb120];
    }

    bb118: {
        StorageLive(_206);
        _206 = ((_195 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_208);
        _208 = _206;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _208) -> [return: bb119, unwind continue];
    }

    bb119: {
        StorageDead(_208);
        StorageDead(_206);
        goto -> bb142;
    }

    bb120: {
        _213 = _2;
        goto -> bb127;
    }

    bb121: {
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        _217 = _2;
        _216 = <u64 as SafeMath>::safe_div(move _217, const 4_u64) -> [return: bb122, unwind continue];
    }

    bb122: {
        StorageDead(_217);
        _215 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _216) -> [return: bb123, unwind continue];
    }

    bb123: {
        StorageDead(_216);
        _218 = discriminant(_215);
        switchInt(move _218) -> [0: bb124, 1: bb125, otherwise: bb4];
    }

    bb124: {
        StorageLive(_222);
        _222 = ((_215 as Continue).0: u64);
        _213 = _222;
        StorageDead(_222);
        StorageDead(_215);
        goto -> bb127;
    }

    bb125: {
        StorageLive(_219);
        _219 = ((_215 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_221);
        _221 = _219;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _221) -> [return: bb126, unwind continue];
    }

    bb126: {
        StorageDead(_221);
        StorageDead(_219);
        StorageDead(_215);
        StorageDead(_214);
        goto -> bb141;
    }

    bb127: {
        StorageDead(_214);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        _225 = _213;
        _224 = Eq(move _225, const 0_u64);
        switchInt(move _224) -> [0: bb129, otherwise: bb128];
    }

    bb128: {
        StorageDead(_225);
        _0 = std::result::Result::<u64, error::ErrorCode>::Ok(const 0_u64);
        StorageDead(_224);
        StorageDead(_223);
        goto -> bb141;
    }

    bb129: {
        StorageDead(_225);
        _223 = const ();
        StorageDead(_224);
        StorageDead(_223);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        _230 = &(*_1);
        StorageLive(_231);
        _231 = _213;
        _229 = calculate_clamped_jit_base_asset_amount(move _230, move _231) -> [return: bb130, unwind continue];
    }

    bb130: {
        StorageDead(_231);
        StorageDead(_230);
        _228 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _229) -> [return: bb131, unwind continue];
    }

    bb131: {
        StorageDead(_229);
        _232 = discriminant(_228);
        switchInt(move _232) -> [0: bb132, 1: bb133, otherwise: bb4];
    }

    bb132: {
        StorageLive(_236);
        _236 = ((_228 as Continue).0: u64);
        _227 = _236;
        StorageDead(_236);
        _213 = move _227;
        StorageDead(_227);
        StorageDead(_228);
        StorageLive(_237);
        StorageLive(_238);
        _238 = _213;
        StorageLive(_239);
        _239 = _6;
        _237 = <u64 as Ord>::min(move _238, move _239) -> [return: bb135, unwind continue];
    }

    bb133: {
        StorageLive(_233);
        _233 = ((_228 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_235);
        _235 = _233;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _235) -> [return: bb134, unwind continue];
    }

    bb134: {
        StorageDead(_235);
        StorageDead(_233);
        StorageDead(_227);
        StorageDead(_228);
        goto -> bb141;
    }

    bb135: {
        StorageDead(_239);
        StorageDead(_238);
        _213 = move _237;
        StorageDead(_237);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        _243 = _213;
        StorageLive(_244);
        _244 = (((*_1).1: state::perp_market::AMM).52: u64);
        _242 = math::orders::standardize_base_asset_amount(move _243, move _244) -> [return: bb136, unwind continue];
    }

    bb136: {
        StorageDead(_244);
        StorageDead(_243);
        _241 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _242) -> [return: bb137, unwind continue];
    }

    bb137: {
        StorageDead(_242);
        _245 = discriminant(_241);
        switchInt(move _245) -> [0: bb138, 1: bb139, otherwise: bb4];
    }

    bb138: {
        StorageLive(_249);
        _249 = ((_241 as Continue).0: u64);
        _240 = _249;
        StorageDead(_249);
        _213 = move _240;
        StorageDead(_240);
        StorageDead(_241);
        StorageLive(_250);
        _250 = _213;
        _0 = std::result::Result::<u64, error::ErrorCode>::Ok(move _250);
        StorageDead(_250);
        StorageDead(_213);
        StorageDead(_210);
        StorageDead(_194);
        StorageDead(_182);
        StorageDead(_179);
        StorageDead(_176);
        StorageDead(_170);
        StorageDead(_169);
        StorageDead(_158);
        StorageDead(_157);
        StorageDead(_6);
        goto -> bb157;
    }

    bb139: {
        StorageLive(_246);
        _246 = ((_241 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_248);
        _248 = _246;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _248) -> [return: bb140, unwind continue];
    }

    bb140: {
        StorageDead(_248);
        StorageDead(_246);
        StorageDead(_240);
        StorageDead(_241);
        goto -> bb141;
    }

    bb141: {
        StorageDead(_213);
        StorageDead(_210);
        goto -> bb143;
    }

    bb142: {
        StorageDead(_198);
        StorageDead(_195);
        goto -> bb143;
    }

    bb143: {
        StorageDead(_194);
        goto -> bb144;
    }

    bb144: {
        StorageDead(_182);
        StorageDead(_179);
        StorageDead(_176);
        StorageDead(_170);
        StorageDead(_169);
        StorageDead(_158);
        StorageDead(_157);
        goto -> bb156;
    }

    bb145: {
        StorageDead(_133);
        StorageDead(_137);
        StorageDead(_134);
        StorageDead(_130);
        goto -> bb147;
    }

    bb146: {
        StorageDead(_112);
        StorageDead(_116);
        StorageDead(_113);
        goto -> bb147;
    }

    bb147: {
        StorageDead(_111);
        goto -> bb153;
    }

    bb148: {
        StorageDead(_88);
        StorageDead(_87);
        goto -> bb149;
    }

    bb149: {
        StorageDead(_92);
        StorageDead(_89);
        StorageDead(_86);
        goto -> bb152;
    }

    bb150: {
        StorageDead(_63);
        StorageDead(_62);
        goto -> bb151;
    }

    bb151: {
        StorageDead(_67);
        StorageDead(_64);
        StorageDead(_61);
        goto -> bb152;
    }

    bb152: {
        StorageDead(_57);
        goto -> bb153;
    }

    bb153: {
        StorageDead(_56);
        StorageDead(_51);
        StorageDead(_47);
        goto -> bb154;
    }

    bb154: {
        StorageDead(_35);
        StorageDead(_31);
        StorageDead(_28);
        goto -> bb155;
    }

    bb155: {
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_15);
        goto -> bb156;
    }

    bb156: {
        StorageDead(_6);
        goto -> bb157;
    }

    bb157: {
        return;
    }
}
