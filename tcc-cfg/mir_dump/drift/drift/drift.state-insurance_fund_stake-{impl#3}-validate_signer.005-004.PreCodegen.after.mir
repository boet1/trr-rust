// MIR for `insurance_fund_stake::<impl at programs/drift/src/state/insurance_fund_stake.rs:109:1: 109:36>::validate_signer` after PreCodegen

fn insurance_fund_stake::<impl at programs/drift/src/state/insurance_fund_stake.rs:109:1: 109:36>::validate_signer(_1: &ProtocolIfSharesTransferConfig, _2: &anchor_lang::prelude::Pubkey) -> std::result::Result<(), error::ErrorCode> {
    debug self => _1;
    debug signer => _2;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _5: std::result::Result<(), error::ErrorCode>;
    let mut _6: bool;
    let mut _7: &[anchor_lang::prelude::Pubkey];
    let mut _8: &[anchor_lang::prelude::Pubkey; 4];
    let mut _9: &anchor_lang::prelude::Pubkey;
    let mut _10: bool;
    let mut _11: &anchor_lang::prelude::Pubkey;
    let mut _12: &anchor_lang::prelude::Pubkey;
    let _13: anchor_lang::prelude::Pubkey;
    let mut _14: ();
    let _15: error::ErrorCode;
    let _16: ();
    let mut _17: &str;
    let _18: &str;
    let mut _19: &std::string::String;
    let _20: &std::string::String;
    let _21: std::string::String;
    let mut _23: std::fmt::Arguments<'_>;
    let mut _24: &[&str];
    let mut _25: &[&str; 2];
    let _26: &[&str; 2];
    let _27: [&str; 2];
    let mut _28: &[core::fmt::rt::Argument<'_>];
    let mut _29: &[core::fmt::rt::Argument<'_>; 1];
    let _30: &[core::fmt::rt::Argument<'_>; 1];
    let _31: [core::fmt::rt::Argument<'_>; 1];
    let mut _32: core::fmt::rt::Argument<'_>;
    let mut _33: &error::ErrorCode;
    let _34: &error::ErrorCode;
    let _35: ();
    let mut _36: &str;
    let _37: &str;
    let mut _38: &std::string::String;
    let _39: &std::string::String;
    let _40: std::string::String;
    let mut _42: std::fmt::Arguments<'_>;
    let mut _43: &[&str];
    let mut _44: &[&str; 2];
    let _45: &[&str; 2];
    let _46: [&str; 2];
    let mut _47: &[core::fmt::rt::Argument<'_>];
    let mut _48: &[core::fmt::rt::Argument<'_>; 1];
    let _49: &[core::fmt::rt::Argument<'_>; 1];
    let _50: [core::fmt::rt::Argument<'_>; 1];
    let mut _51: core::fmt::rt::Argument<'_>;
    let mut _52: &&anchor_lang::prelude::Pubkey;
    let _53: &&anchor_lang::prelude::Pubkey;
    let mut _54: error::ErrorCode;
    let mut _55: isize;
    let _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _57: !;
    let mut _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _59: ();
    let mut _60: ();
    scope 1 {
        debug error_code => _15;
        let _22: std::string::String;
        let _41: std::string::String;
        let mut _61: &[&str; 2];
        let mut _62: &[&str; 2];
        scope 2 {
            debug res => _22;
        }
        scope 3 {
            debug res => _41;
        }
    }
    scope 4 {
        debug residual => _56;
        scope 5 {
        }
    }
    scope 6 {
        debug val => _59;
        scope 7 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &((*_1).0: [anchor_lang::prelude::Pubkey; 4]);
        _7 = move _8 as &[anchor_lang::prelude::Pubkey] (PointerCoercion(Unsize));
        StorageDead(_8);
        StorageLive(_9);
        _9 = &(*_2);
        _6 = core::slice::<impl [anchor_lang::prelude::Pubkey]>::contains(move _7, move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _6) -> [0: bb7, otherwise: bb2];
    }

    bb2: {
        StorageDead(_9);
        StorageDead(_7);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &(*_2);
        StorageLive(_12);
        StorageLive(_13);
        _13 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb3, unwind continue];
    }

    bb3: {
        _12 = &_13;
        _10 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _11, move _12) -> [return: bb4, unwind continue];
    }

    bb4: {
        switchInt(move _10) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageLive(_14);
        _14 = ();
        _5 = std::result::Result::<(), error::ErrorCode>::Ok(move _14);
        StorageDead(_14);
        goto -> bb21;
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb8;
    }

    bb7: {
        StorageDead(_9);
        StorageDead(_7);
        goto -> bb8;
    }

    bb8: {
        StorageLive(_15);
        _15 = error::ErrorCode::DefaultError;
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _62 = const _;
        _26 = &(*_62);
        _25 = &(*_26);
        _24 = move _25 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_25);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &_15;
        _33 = &(*_34);
        _32 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _33) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_33);
        _31 = [move _32];
        StorageDead(_32);
        _30 = &_31;
        _29 = &(*_30);
        _28 = move _29 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_29);
        _23 = Arguments::<'_>::new_v1(move _24, move _28) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_28);
        StorageDead(_24);
        _22 = format(move _23) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_23);
        StorageDead(_34);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_26);
        _21 = move _22;
        StorageDead(_22);
        _20 = &_21;
        _19 = &(*_20);
        _18 = <String as Deref>::deref(move _19) -> [return: bb12, unwind: bb29];
    }

    bb12: {
        _17 = &(*_18);
        StorageDead(_19);
        _16 = solana_program::log::sol_log(move _17) -> [return: bb13, unwind: bb29];
    }

    bb13: {
        StorageDead(_17);
        drop(_21) -> [return: bb14, unwind: bb30];
    }

    bb14: {
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_16);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _61 = const _;
        _45 = &(*_61);
        _44 = &(*_45);
        _43 = move _44 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_44);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = &_2;
        _52 = &(*_53);
        _51 = core::fmt::rt::Argument::<'_>::new_display::<&anchor_lang::prelude::Pubkey>(move _52) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_52);
        _50 = [move _51];
        StorageDead(_51);
        _49 = &_50;
        _48 = &(*_49);
        _47 = move _48 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_48);
        _42 = Arguments::<'_>::new_v1(move _43, move _47) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_47);
        StorageDead(_43);
        _41 = format(move _42) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_42);
        StorageDead(_53);
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_45);
        _40 = move _41;
        StorageDead(_41);
        _39 = &_40;
        _38 = &(*_39);
        _37 = <String as Deref>::deref(move _38) -> [return: bb18, unwind: bb28];
    }

    bb18: {
        _36 = &(*_37);
        StorageDead(_38);
        _35 = solana_program::log::sol_log(move _36) -> [return: bb19, unwind: bb28];
    }

    bb19: {
        StorageDead(_36);
        drop(_40) -> [return: bb20, unwind: bb30];
    }

    bb20: {
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_35);
        StorageLive(_54);
        _54 = _15;
        _5 = std::result::Result::<(), error::ErrorCode>::Err(move _54);
        StorageDead(_54);
        StorageDead(_15);
        goto -> bb21;
    }

    bb21: {
        StorageDead(_10);
        StorageDead(_6);
        _4 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _5) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_5);
        _55 = discriminant(_4);
        switchInt(move _55) -> [0: bb23, 1: bb25, otherwise: bb24];
    }

    bb23: {
        StorageLive(_59);
        _59 = ((_4 as Continue).0: ());
        _3 = _59;
        StorageDead(_59);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_60);
        _60 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _60);
        StorageDead(_60);
        goto -> bb27;
    }

    bb24: {
        unreachable;
    }

    bb25: {
        StorageLive(_56);
        _56 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_58);
        _58 = _56;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _58) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb27;
    }

    bb27: {
        return;
    }

    bb28 (cleanup): {
        drop(_40) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_21) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        resume;
    }
}
