// MIR for `calculate_revenue_pool_transfer` before PreCodegen

fn calculate_revenue_pool_transfer(_1: &PerpMarket, _2: &SpotMarket, _3: u128, _4: i128) -> std::result::Result<i128, error::ErrorCode> {
    debug market => _1;
    debug spot_market => _2;
    debug amm_fee_pool_token_amount_after => _3;
    debug terminal_state_surplus => _4;
    let mut _0: std::result::Result<i128, error::ErrorCode>;
    let _5: i128;
    let mut _6: i128;
    let mut _7: i128;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _9: std::result::Result<i128, error::ErrorCode>;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _14: i128;
    let mut _15: bool;
    let mut _16: i128;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _19: std::result::Result<i128, error::ErrorCode>;
    let mut _20: u128;
    let mut _21: u128;
    let mut _22: u128;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _24: std::result::Result<u128, error::ErrorCode>;
    let mut _25: u128;
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _27: std::result::Result<u128, error::ErrorCode>;
    let mut _28: u128;
    let mut _29: isize;
    let mut _31: !;
    let mut _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _34: isize;
    let mut _36: !;
    let mut _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _39: isize;
    let mut _41: !;
    let mut _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _46: std::result::Result<i128, error::ErrorCode>;
    let mut _47: u128;
    let mut _48: u128;
    let mut _49: u128;
    let mut _50: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _51: std::result::Result<u128, error::ErrorCode>;
    let mut _52: u64;
    let mut _53: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _54: std::result::Result<u64, error::ErrorCode>;
    let mut _55: u64;
    let mut _56: u64;
    let mut _57: isize;
    let mut _59: !;
    let mut _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _62: isize;
    let mut _64: !;
    let mut _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _67: isize;
    let mut _69: !;
    let mut _70: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _73: i64;
    let mut _74: i64;
    let mut _75: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _76: std::result::Result<i64, error::ErrorCode>;
    let mut _77: i64;
    let mut _78: i64;
    let mut _79: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _80: std::result::Result<i64, error::ErrorCode>;
    let mut _81: u64;
    let mut _82: isize;
    let mut _84: !;
    let mut _85: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _87: isize;
    let mut _89: !;
    let mut _90: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _92: i64;
    let mut _94: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _95: std::result::Result<i128, error::ErrorCode>;
    let mut _96: u128;
    let mut _97: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _98: std::result::Result<u128, error::ErrorCode>;
    let mut _99: &state::perp_market::PerpMarket;
    let mut _100: isize;
    let mut _102: !;
    let mut _103: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _105: isize;
    let mut _107: !;
    let mut _108: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _111: i128;
    let mut _112: i128;
    let mut _113: i128;
    let mut _114: i128;
    let mut _115: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _116: std::result::Result<i128, error::ErrorCode>;
    let mut _117: i128;
    let mut _118: i128;
    let mut _119: isize;
    let mut _121: !;
    let mut _122: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _124: i128;
    let mut _125: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _126: std::result::Result<i128, error::ErrorCode>;
    let mut _127: u128;
    let mut _128: isize;
    let mut _130: !;
    let mut _131: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _133: i128;
    let mut _134: i128;
    let mut _135: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _136: std::result::Result<i128, error::ErrorCode>;
    let mut _137: i64;
    let mut _138: isize;
    let mut _140: !;
    let mut _141: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _143: ();
    let mut _144: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _145: std::result::Result<(), error::ErrorCode>;
    let mut _146: bool;
    let mut _147: i128;
    let mut _148: ();
    let _150: ();
    let mut _151: &str;
    let _152: &str;
    let mut _153: &std::string::String;
    let _154: &std::string::String;
    let _155: std::string::String;
    let mut _157: std::fmt::Arguments<'_>;
    let mut _158: &[&str];
    let mut _159: &[&str; 2];
    let _160: &[&str; 2];
    let _161: [&str; 2];
    let mut _162: &[core::fmt::rt::Argument<'_>];
    let mut _163: &[core::fmt::rt::Argument<'_>; 1];
    let _164: &[core::fmt::rt::Argument<'_>; 1];
    let _165: [core::fmt::rt::Argument<'_>; 1];
    let mut _166: core::fmt::rt::Argument<'_>;
    let mut _167: &error::ErrorCode;
    let _168: &error::ErrorCode;
    let _169: ();
    let mut _170: &str;
    let _171: &str;
    let mut _172: &std::string::String;
    let _173: &std::string::String;
    let _174: std::string::String;
    let mut _176: std::fmt::Arguments<'_>;
    let mut _177: &[&str];
    let mut _178: &[&str; 2];
    let _179: &[&str; 2];
    let _180: [&str; 2];
    let mut _181: &[core::fmt::rt::Argument<'_>];
    let mut _182: &[core::fmt::rt::Argument<'_>; 1];
    let _183: &[core::fmt::rt::Argument<'_>; 1];
    let _184: [core::fmt::rt::Argument<'_>; 1];
    let mut _185: core::fmt::rt::Argument<'_>;
    let mut _186: &i128;
    let _187: &i128;
    let mut _188: error::ErrorCode;
    let mut _189: isize;
    let mut _191: !;
    let mut _192: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _194: i128;
    let mut _195: bool;
    let mut _196: i128;
    let mut _198: u128;
    let mut _199: u128;
    let mut _200: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _201: std::result::Result<u128, error::ErrorCode>;
    let mut _202: i64;
    let mut _203: i64;
    let mut _204: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _205: std::result::Result<i64, error::ErrorCode>;
    let mut _206: u64;
    let mut _207: isize;
    let mut _209: !;
    let mut _210: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _212: i64;
    let mut _213: isize;
    let mut _215: !;
    let mut _216: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _218: u128;
    let mut _219: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _220: std::result::Result<u128, error::ErrorCode>;
    let mut _221: u128;
    let mut _222: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _223: std::result::Result<u128, error::ErrorCode>;
    let mut _224: u128;
    let mut _225: &state::spot_market::SpotMarket;
    let mut _226: &state::spot_market::SpotBalanceType;
    let _227: &state::spot_market::SpotBalanceType;
    let _228: state::spot_market::SpotBalanceType;
    let mut _229: isize;
    let mut _231: !;
    let mut _232: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _234: isize;
    let mut _236: !;
    let mut _237: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _239: u128;
    let mut _240: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _241: std::result::Result<u128, error::ErrorCode>;
    let mut _242: u64;
    let mut _243: isize;
    let mut _245: !;
    let mut _246: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _248: bool;
    let mut _249: u128;
    let mut _251: i128;
    let mut _252: i128;
    let mut _253: i128;
    let mut _254: i128;
    let mut _255: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _256: std::result::Result<i128, error::ErrorCode>;
    let mut _257: u128;
    let mut _258: isize;
    let mut _260: !;
    let mut _261: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _263: bool;
    let mut _264: i128;
    scope 1 {
        debug amm_budget_surplus => _5;
        let _17: i128;
        let _30: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _33: u128;
        let _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _38: u128;
        let _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _43: i128;
        let _197: u128;
        let _208: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _211: i64;
        let _214: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _217: u128;
        let _230: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _233: u128;
        let _235: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _238: u128;
        let _244: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _247: u128;
        let mut _267: &state::spot_market::SpotBalanceType;
        scope 6 {
            debug fee_pool_threshold => _17;
            let _44: i128;
            let _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _61: u64;
            let _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _66: u128;
            let _68: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _71: i128;
            scope 19 {
                debug total_liq_fees_for_revenue_pool => _44;
                let _72: i64;
                let _83: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _86: i64;
                let _88: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _91: i64;
                scope 32 {
                    debug max_revenue_to_settle => _72;
                    let _93: i128;
                    let _101: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _104: u128;
                    let _106: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _109: i128;
                    scope 41 {
                        debug total_fee_for_if => _93;
                        let _110: i128;
                        let _120: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _123: i128;
                        let _129: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _132: i128;
                        let _139: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _142: i128;
                        scope 50 {
                            debug revenue_pool_transfer => _110;
                            let _149: error::ErrorCode;
                            let _190: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _193: ();
                            scope 63 {
                                debug error_code => _149;
                                let _156: std::string::String;
                                let _175: std::string::String;
                                let mut _265: &[&str; 2];
                                let mut _266: &[&str; 2];
                                scope 64 {
                                    debug res => _156;
                                }
                                scope 65 {
                                    debug res => _175;
                                }
                            }
                            scope 66 {
                                debug residual => _190;
                                scope 67 {
                                }
                            }
                            scope 68 {
                                debug val => _193;
                                scope 69 {
                                }
                            }
                        }
                        scope 51 {
                            debug residual => _120;
                            scope 52 {
                            }
                        }
                        scope 53 {
                            debug val => _123;
                            scope 54 {
                            }
                        }
                        scope 55 {
                            debug residual => _129;
                            scope 56 {
                            }
                        }
                        scope 57 {
                            debug val => _132;
                            scope 58 {
                            }
                        }
                        scope 59 {
                            debug residual => _139;
                            scope 60 {
                            }
                        }
                        scope 61 {
                            debug val => _142;
                            scope 62 {
                            }
                        }
                    }
                    scope 42 {
                        debug residual => _101;
                        scope 43 {
                        }
                    }
                    scope 44 {
                        debug val => _104;
                        scope 45 {
                        }
                    }
                    scope 46 {
                        debug residual => _106;
                        scope 47 {
                        }
                    }
                    scope 48 {
                        debug val => _109;
                        scope 49 {
                        }
                    }
                }
                scope 33 {
                    debug residual => _83;
                    scope 34 {
                    }
                }
                scope 35 {
                    debug val => _86;
                    scope 36 {
                    }
                }
                scope 37 {
                    debug residual => _88;
                    scope 38 {
                    }
                }
                scope 39 {
                    debug val => _91;
                    scope 40 {
                    }
                }
            }
            scope 20 {
                debug residual => _58;
                scope 21 {
                }
            }
            scope 22 {
                debug val => _61;
                scope 23 {
                }
            }
            scope 24 {
                debug residual => _63;
                scope 25 {
                }
            }
            scope 26 {
                debug val => _66;
                scope 27 {
                }
            }
            scope 28 {
                debug residual => _68;
                scope 29 {
                }
            }
            scope 30 {
                debug val => _71;
                scope 31 {
                }
            }
        }
        scope 7 {
            debug residual => _30;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _33;
            scope 10 {
            }
        }
        scope 11 {
            debug residual => _35;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _38;
            scope 14 {
            }
        }
        scope 15 {
            debug residual => _40;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _43;
            scope 18 {
            }
        }
        scope 70 {
            debug max_revenue_withdraw_allowed => _197;
            let _250: i128;
            let _259: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _262: i128;
            scope 91 {
                debug revenue_pool_transfer => _250;
            }
            scope 92 {
                debug residual => _259;
                scope 93 {
                }
            }
            scope 94 {
                debug val => _262;
                scope 95 {
                }
            }
        }
        scope 71 {
            debug residual => _208;
            scope 72 {
            }
        }
        scope 73 {
            debug val => _211;
            scope 74 {
            }
        }
        scope 75 {
            debug residual => _214;
            scope 76 {
            }
        }
        scope 77 {
            debug val => _217;
            scope 78 {
            }
        }
        scope 79 {
            debug residual => _230;
            scope 80 {
            }
        }
        scope 81 {
            debug val => _233;
            scope 82 {
            }
        }
        scope 83 {
            debug residual => _235;
            scope 84 {
            }
        }
        scope 85 {
            debug val => _238;
            scope 86 {
            }
        }
        scope 87 {
            debug residual => _244;
            scope 88 {
            }
        }
        scope 89 {
            debug val => _247;
            scope 90 {
            }
        }
    }
    scope 2 {
        debug residual => _11;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _14;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        _6 = _4;
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = <u128 as Cast>::cast::<i128>(const _) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_9);
        _10 = discriminant(_8);
        switchInt(move _10) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_14);
        _14 = ((_8 as Continue).0: i128);
        _7 = _14;
        StorageDead(_14);
        _5 = core::num::<impl i128>::saturating_sub(move _6, move _7) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_11);
        _11 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_13);
        _13 = _11;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _13) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_8);
        goto -> bb164;
    }

    bb7: {
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_8);
        StorageLive(_15);
        StorageLive(_16);
        _16 = _5;
        _15 = Gt(move _16, const 0_i128);
        switchInt(move _15) -> [0: bb101, otherwise: bb8];
    }

    bb8: {
        StorageDead(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = _3;
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = (((*_1).1: state::perp_market::AMM).36: u128);
        _27 = <u128 as SafeMath>::safe_add(const _, move _28) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_28);
        _26 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _27) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_27);
        _29 = discriminant(_26);
        switchInt(move _29) -> [0: bb11, 1: bb12, otherwise: bb4];
    }

    bb11: {
        StorageLive(_33);
        _33 = ((_26 as Continue).0: u128);
        _25 = _33;
        StorageDead(_33);
        _24 = <u128 as Cast>::cast::<u128>(move _25) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_30);
        _30 = ((_26 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_32);
        _32 = _30;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _32) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_32);
        StorageDead(_30);
        StorageDead(_25);
        StorageDead(_24);
        goto -> bb160;
    }

    bb14: {
        StorageDead(_25);
        _23 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _24) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_24);
        _34 = discriminant(_23);
        switchInt(move _34) -> [0: bb16, 1: bb17, otherwise: bb4];
    }

    bb16: {
        StorageLive(_38);
        _38 = ((_23 as Continue).0: u128);
        _22 = _38;
        StorageDead(_38);
        _20 = core::num::<impl u128>::saturating_sub(move _21, move _22) -> [return: bb19, unwind continue];
    }

    bb17: {
        StorageLive(_35);
        _35 = ((_23 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_37);
        _37 = _35;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _37) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_37);
        StorageDead(_35);
        goto -> bb160;
    }

    bb19: {
        StorageDead(_22);
        StorageDead(_21);
        _19 = <u128 as Cast>::cast::<i128>(move _20) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_20);
        _18 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _19) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_19);
        _39 = discriminant(_18);
        switchInt(move _39) -> [0: bb22, 1: bb23, otherwise: bb4];
    }

    bb22: {
        StorageLive(_43);
        _43 = ((_18 as Continue).0: i128);
        _17 = _43;
        StorageDead(_43);
        StorageDead(_26);
        StorageDead(_23);
        StorageDead(_18);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = (((*_1).1: state::perp_market::AMM).33: u128);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = (((*_1).4: state::perp_market::InsuranceClaim).3: u64);
        StorageLive(_56);
        _56 = (((*_1).4: state::perp_market::InsuranceClaim).2: u64);
        _54 = <u64 as SafeMath>::safe_add(move _55, move _56) -> [return: bb25, unwind continue];
    }

    bb23: {
        StorageLive(_40);
        _40 = ((_18 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_42);
        _42 = _40;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _42) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_42);
        StorageDead(_40);
        goto -> bb161;
    }

    bb25: {
        StorageDead(_56);
        StorageDead(_55);
        _53 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _54) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_54);
        _57 = discriminant(_53);
        switchInt(move _57) -> [0: bb27, 1: bb28, otherwise: bb4];
    }

    bb27: {
        StorageLive(_61);
        _61 = ((_53 as Continue).0: u64);
        _52 = _61;
        StorageDead(_61);
        _51 = <u64 as Cast>::cast::<u128>(move _52) -> [return: bb30, unwind continue];
    }

    bb28: {
        StorageLive(_58);
        _58 = ((_53 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_60);
        _60 = _58;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _60) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_52);
        StorageDead(_51);
        goto -> bb157;
    }

    bb30: {
        StorageDead(_52);
        _50 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _51) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_51);
        _62 = discriminant(_50);
        switchInt(move _62) -> [0: bb32, 1: bb33, otherwise: bb4];
    }

    bb32: {
        StorageLive(_66);
        _66 = ((_50 as Continue).0: u128);
        _49 = _66;
        StorageDead(_66);
        _47 = <u128 as Ord>::min(move _48, move _49) -> [return: bb35, unwind continue];
    }

    bb33: {
        StorageLive(_63);
        _63 = ((_50 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_65);
        _65 = _63;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _65) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_65);
        StorageDead(_63);
        goto -> bb157;
    }

    bb35: {
        StorageDead(_49);
        StorageDead(_48);
        _46 = <u128 as Cast>::cast::<i128>(move _47) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_47);
        _45 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _46) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_46);
        _67 = discriminant(_45);
        switchInt(move _67) -> [0: bb38, 1: bb39, otherwise: bb4];
    }

    bb38: {
        StorageLive(_71);
        _71 = ((_45 as Continue).0: i128);
        _44 = _71;
        StorageDead(_71);
        StorageDead(_53);
        StorageDead(_50);
        StorageDead(_45);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _77 = (((*_1).4: state::perp_market::InsuranceClaim).0: i64);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        _81 = (((*_1).4: state::perp_market::InsuranceClaim).1: u64);
        _80 = <u64 as Cast>::cast::<i64>(move _81) -> [return: bb41, unwind continue];
    }

    bb39: {
        StorageLive(_68);
        _68 = ((_45 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_70);
        _70 = _68;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _70) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_70);
        StorageDead(_68);
        goto -> bb158;
    }

    bb41: {
        StorageDead(_81);
        _79 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _80) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_80);
        _82 = discriminant(_79);
        switchInt(move _82) -> [0: bb43, 1: bb44, otherwise: bb4];
    }

    bb43: {
        StorageLive(_86);
        _86 = ((_79 as Continue).0: i64);
        _78 = _86;
        StorageDead(_86);
        _76 = <i64 as SafeMath>::safe_add(move _77, move _78) -> [return: bb46, unwind continue];
    }

    bb44: {
        StorageLive(_83);
        _83 = ((_79 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_85);
        _85 = _83;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _85) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_85);
        StorageDead(_83);
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_76);
        goto -> bb155;
    }

    bb46: {
        StorageDead(_78);
        StorageDead(_77);
        _75 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _76) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_76);
        _87 = discriminant(_75);
        switchInt(move _87) -> [0: bb48, 1: bb49, otherwise: bb4];
    }

    bb48: {
        StorageLive(_91);
        _91 = ((_75 as Continue).0: i64);
        _74 = _91;
        StorageDead(_91);
        StorageLive(_92);
        _92 = (((*_1).1: state::perp_market::AMM).49: i64);
        _73 = <i64 as Ord>::min(move _74, move _92) -> [return: bb51, unwind continue];
    }

    bb49: {
        StorageLive(_88);
        _88 = ((_75 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_90);
        _90 = _88;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _90) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_90);
        StorageDead(_88);
        goto -> bb155;
    }

    bb51: {
        StorageDead(_92);
        StorageDead(_74);
        _72 = <i64 as Ord>::max(move _73, const 0_i64) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_73);
        StorageDead(_79);
        StorageDead(_75);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = &(*_1);
        _98 = get_total_fee_lower_bound(move _99) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_99);
        _97 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _98) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_98);
        _100 = discriminant(_97);
        switchInt(move _100) -> [0: bb55, 1: bb56, otherwise: bb4];
    }

    bb55: {
        StorageLive(_104);
        _104 = ((_97 as Continue).0: u128);
        _96 = _104;
        StorageDead(_104);
        _95 = <u128 as Cast>::cast::<i128>(move _96) -> [return: bb58, unwind continue];
    }

    bb56: {
        StorageLive(_101);
        _101 = ((_97 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_103);
        _103 = _101;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _103) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_103);
        StorageDead(_101);
        StorageDead(_96);
        StorageDead(_95);
        goto -> bb153;
    }

    bb58: {
        StorageDead(_96);
        _94 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _95) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_95);
        _105 = discriminant(_94);
        switchInt(move _105) -> [0: bb60, 1: bb61, otherwise: bb4];
    }

    bb60: {
        StorageLive(_109);
        _109 = ((_94 as Continue).0: i128);
        _93 = _109;
        StorageDead(_109);
        StorageDead(_97);
        StorageDead(_94);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _117 = _93;
        StorageLive(_118);
        _118 = _44;
        _116 = <i128 as SafeMath>::safe_add(move _117, move _118) -> [return: bb63, unwind continue];
    }

    bb61: {
        StorageLive(_106);
        _106 = ((_94 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_108);
        _108 = _106;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _108) -> [return: bb62, unwind continue];
    }

    bb62: {
        StorageDead(_108);
        StorageDead(_106);
        goto -> bb153;
    }

    bb63: {
        StorageDead(_118);
        StorageDead(_117);
        _115 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _116) -> [return: bb64, unwind continue];
    }

    bb64: {
        StorageDead(_116);
        _119 = discriminant(_115);
        switchInt(move _119) -> [0: bb65, 1: bb66, otherwise: bb4];
    }

    bb65: {
        StorageLive(_123);
        _123 = ((_115 as Continue).0: i128);
        _114 = _123;
        StorageDead(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        _127 = (((*_1).1: state::perp_market::AMM).32: u128);
        _126 = <u128 as Cast>::cast::<i128>(move _127) -> [return: bb68, unwind continue];
    }

    bb66: {
        StorageLive(_120);
        _120 = ((_115 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_122);
        _122 = _120;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _122) -> [return: bb67, unwind continue];
    }

    bb67: {
        StorageDead(_122);
        StorageDead(_120);
        StorageDead(_114);
        StorageDead(_113);
        StorageDead(_112);
        StorageDead(_111);
        goto -> bb151;
    }

    bb68: {
        StorageDead(_127);
        _125 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _126) -> [return: bb69, unwind continue];
    }

    bb69: {
        StorageDead(_126);
        _128 = discriminant(_125);
        switchInt(move _128) -> [0: bb70, 1: bb71, otherwise: bb4];
    }

    bb70: {
        StorageLive(_132);
        _132 = ((_125 as Continue).0: i128);
        _124 = _132;
        StorageDead(_132);
        _113 = core::num::<impl i128>::saturating_sub(move _114, move _124) -> [return: bb73, unwind continue];
    }

    bb71: {
        StorageLive(_129);
        _129 = ((_125 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_131);
        _131 = _129;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _131) -> [return: bb72, unwind continue];
    }

    bb72: {
        StorageDead(_131);
        StorageDead(_129);
        StorageDead(_124);
        StorageDead(_114);
        StorageDead(_113);
        StorageDead(_112);
        StorageDead(_111);
        goto -> bb150;
    }

    bb73: {
        StorageDead(_124);
        StorageDead(_114);
        _112 = <i128 as Ord>::max(move _113, const 0_i128) -> [return: bb74, unwind continue];
    }

    bb74: {
        StorageDead(_113);
        StorageLive(_133);
        _133 = _17;
        _111 = <i128 as Ord>::min(move _112, move _133) -> [return: bb75, unwind continue];
    }

    bb75: {
        StorageDead(_133);
        StorageDead(_112);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        _137 = _72;
        _136 = <i64 as Cast>::cast::<i128>(move _137) -> [return: bb76, unwind continue];
    }

    bb76: {
        StorageDead(_137);
        _135 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _136) -> [return: bb77, unwind continue];
    }

    bb77: {
        StorageDead(_136);
        _138 = discriminant(_135);
        switchInt(move _138) -> [0: bb78, 1: bb79, otherwise: bb4];
    }

    bb78: {
        StorageLive(_142);
        _142 = ((_135 as Continue).0: i128);
        _134 = _142;
        StorageDead(_142);
        _110 = <i128 as Ord>::min(move _111, move _134) -> [return: bb81, unwind continue];
    }

    bb79: {
        StorageLive(_139);
        _139 = ((_135 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_141);
        _141 = _139;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _141) -> [return: bb80, unwind continue];
    }

    bb80: {
        StorageDead(_141);
        StorageDead(_139);
        StorageDead(_134);
        StorageDead(_111);
        StorageDead(_135);
        goto -> bb150;
    }

    bb81: {
        StorageDead(_134);
        StorageDead(_111);
        StorageDead(_135);
        StorageDead(_125);
        StorageDead(_115);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        _147 = _110;
        _146 = Ge(move _147, const 0_i128);
        switchInt(move _146) -> [0: bb83, otherwise: bb82];
    }

    bb82: {
        StorageDead(_147);
        StorageLive(_148);
        _148 = ();
        _145 = std::result::Result::<(), error::ErrorCode>::Ok(move _148);
        StorageDead(_148);
        goto -> bb96;
    }

    bb83: {
        StorageDead(_147);
        StorageLive(_149);
        _149 = error::ErrorCode::InsufficientPerpPnlPool;
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        _266 = const _;
        _160 = &(*_266);
        _159 = &(*_160);
        _158 = move _159 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_159);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        _168 = &_149;
        _167 = &(*_168);
        _166 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _167) -> [return: bb84, unwind continue];
    }

    bb84: {
        StorageDead(_167);
        _165 = [move _166];
        StorageDead(_166);
        _164 = &_165;
        _163 = &(*_164);
        _162 = move _163 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_163);
        _157 = Arguments::<'_>::new_v1(move _158, move _162) -> [return: bb85, unwind continue];
    }

    bb85: {
        StorageDead(_162);
        StorageDead(_158);
        _156 = format(move _157) -> [return: bb86, unwind continue];
    }

    bb86: {
        StorageDead(_157);
        StorageDead(_168);
        StorageDead(_165);
        StorageDead(_164);
        StorageDead(_160);
        _155 = move _156;
        StorageDead(_156);
        _154 = &_155;
        _153 = &(*_154);
        _152 = <String as Deref>::deref(move _153) -> [return: bb87, unwind: bb167];
    }

    bb87: {
        _151 = &(*_152);
        StorageDead(_153);
        _150 = solana_program::log::sol_log(move _151) -> [return: bb88, unwind: bb167];
    }

    bb88: {
        StorageDead(_151);
        drop(_155) -> [return: bb89, unwind: bb168];
    }

    bb89: {
        StorageDead(_155);
        StorageDead(_154);
        StorageDead(_152);
        StorageDead(_150);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        _265 = const _;
        _179 = &(*_265);
        _178 = &(*_179);
        _177 = move _178 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_178);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        _187 = &_110;
        _186 = &(*_187);
        _185 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _186) -> [return: bb90, unwind continue];
    }

    bb90: {
        StorageDead(_186);
        _184 = [move _185];
        StorageDead(_185);
        _183 = &_184;
        _182 = &(*_183);
        _181 = move _182 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_182);
        _176 = Arguments::<'_>::new_v1(move _177, move _181) -> [return: bb91, unwind continue];
    }

    bb91: {
        StorageDead(_181);
        StorageDead(_177);
        _175 = format(move _176) -> [return: bb92, unwind continue];
    }

    bb92: {
        StorageDead(_176);
        StorageDead(_187);
        StorageDead(_184);
        StorageDead(_183);
        StorageDead(_179);
        _174 = move _175;
        StorageDead(_175);
        _173 = &_174;
        _172 = &(*_173);
        _171 = <String as Deref>::deref(move _172) -> [return: bb93, unwind: bb166];
    }

    bb93: {
        _170 = &(*_171);
        StorageDead(_172);
        _169 = solana_program::log::sol_log(move _170) -> [return: bb94, unwind: bb166];
    }

    bb94: {
        StorageDead(_170);
        drop(_174) -> [return: bb95, unwind: bb168];
    }

    bb95: {
        StorageDead(_174);
        StorageDead(_173);
        StorageDead(_171);
        StorageDead(_169);
        StorageLive(_188);
        _188 = _149;
        _145 = std::result::Result::<(), error::ErrorCode>::Err(move _188);
        StorageDead(_188);
        StorageDead(_149);
        goto -> bb96;
    }

    bb96: {
        StorageDead(_146);
        _144 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _145) -> [return: bb97, unwind continue];
    }

    bb97: {
        StorageDead(_145);
        _189 = discriminant(_144);
        switchInt(move _189) -> [0: bb98, 1: bb99, otherwise: bb4];
    }

    bb98: {
        StorageLive(_193);
        _193 = ((_144 as Continue).0: ());
        _143 = _193;
        StorageDead(_193);
        StorageDead(_144);
        StorageDead(_143);
        StorageLive(_194);
        _194 = _110;
        _0 = std::result::Result::<i128, error::ErrorCode>::Ok(move _194);
        StorageDead(_194);
        StorageDead(_110);
        StorageDead(_93);
        StorageDead(_72);
        StorageDead(_44);
        StorageDead(_17);
        goto -> bb144;
    }

    bb99: {
        StorageLive(_190);
        _190 = ((_144 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_192);
        _192 = _190;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _192) -> [return: bb100, unwind continue];
    }

    bb100: {
        StorageDead(_192);
        StorageDead(_190);
        StorageDead(_144);
        StorageDead(_143);
        goto -> bb152;
    }

    bb101: {
        StorageDead(_16);
        StorageLive(_195);
        StorageLive(_196);
        _196 = _5;
        _195 = Lt(move _196, const 0_i128);
        switchInt(move _195) -> [0: bb142, otherwise: bb102];
    }

    bb102: {
        StorageDead(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        _206 = (((*_1).4: state::perp_market::InsuranceClaim).1: u64);
        _205 = <u64 as Cast>::cast::<i64>(move _206) -> [return: bb103, unwind continue];
    }

    bb103: {
        StorageDead(_206);
        _204 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _205) -> [return: bb104, unwind continue];
    }

    bb104: {
        StorageDead(_205);
        _207 = discriminant(_204);
        switchInt(move _207) -> [0: bb105, 1: bb106, otherwise: bb4];
    }

    bb105: {
        StorageLive(_211);
        _211 = ((_204 as Continue).0: i64);
        _203 = _211;
        StorageDead(_211);
        StorageLive(_212);
        _212 = (((*_1).4: state::perp_market::InsuranceClaim).0: i64);
        _202 = core::num::<impl i64>::saturating_sub(move _203, move _212) -> [return: bb108, unwind continue];
    }

    bb106: {
        StorageLive(_208);
        _208 = ((_204 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_210);
        _210 = _208;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _210) -> [return: bb107, unwind continue];
    }

    bb107: {
        StorageDead(_210);
        StorageDead(_208);
        StorageDead(_203);
        StorageDead(_202);
        StorageDead(_201);
        goto -> bb147;
    }

    bb108: {
        StorageDead(_212);
        StorageDead(_203);
        _201 = <i64 as Cast>::cast::<u128>(move _202) -> [return: bb109, unwind continue];
    }

    bb109: {
        StorageDead(_202);
        _200 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _201) -> [return: bb110, unwind continue];
    }

    bb110: {
        StorageDead(_201);
        _213 = discriminant(_200);
        switchInt(move _213) -> [0: bb111, 1: bb112, otherwise: bb4];
    }

    bb111: {
        StorageLive(_217);
        _217 = ((_200 as Continue).0: u128);
        _199 = _217;
        StorageDead(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        _224 = (((*_2).7: state::perp_market::PoolBalance).0: u128);
        StorageLive(_225);
        _225 = &(*_2);
        StorageLive(_226);
        StorageLive(_227);
        _267 = const _;
        _227 = &(*_267);
        _226 = &(*_227);
        _223 = get_token_amount(move _224, move _225, move _226) -> [return: bb114, unwind continue];
    }

    bb112: {
        StorageLive(_214);
        _214 = ((_200 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_216);
        _216 = _214;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _216) -> [return: bb113, unwind continue];
    }

    bb113: {
        StorageDead(_216);
        StorageDead(_214);
        goto -> bb147;
    }

    bb114: {
        StorageDead(_226);
        StorageDead(_225);
        StorageDead(_224);
        _222 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _223) -> [return: bb115, unwind continue];
    }

    bb115: {
        StorageDead(_223);
        _229 = discriminant(_222);
        switchInt(move _229) -> [0: bb116, 1: bb117, otherwise: bb4];
    }

    bb116: {
        StorageLive(_233);
        _233 = ((_222 as Continue).0: u128);
        _221 = _233;
        StorageDead(_233);
        _220 = <u128 as Cast>::cast::<u128>(move _221) -> [return: bb119, unwind continue];
    }

    bb117: {
        StorageLive(_230);
        _230 = ((_222 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_232);
        _232 = _230;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _232) -> [return: bb118, unwind continue];
    }

    bb118: {
        StorageDead(_232);
        StorageDead(_230);
        StorageDead(_221);
        StorageDead(_220);
        goto -> bb145;
    }

    bb119: {
        StorageDead(_221);
        _219 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _220) -> [return: bb120, unwind continue];
    }

    bb120: {
        StorageDead(_220);
        _234 = discriminant(_219);
        switchInt(move _234) -> [0: bb121, 1: bb122, otherwise: bb4];
    }

    bb121: {
        StorageLive(_238);
        _238 = ((_219 as Continue).0: u128);
        _218 = _238;
        StorageDead(_238);
        _198 = <u128 as Ord>::min(move _199, move _218) -> [return: bb124, unwind continue];
    }

    bb122: {
        StorageLive(_235);
        _235 = ((_219 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_237);
        _237 = _235;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _237) -> [return: bb123, unwind continue];
    }

    bb123: {
        StorageDead(_237);
        StorageDead(_235);
        goto -> bb145;
    }

    bb124: {
        StorageDead(_218);
        StorageDead(_199);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        _242 = (((*_1).4: state::perp_market::InsuranceClaim).1: u64);
        _241 = <u64 as Cast>::cast::<u128>(move _242) -> [return: bb125, unwind continue];
    }

    bb125: {
        StorageDead(_242);
        _240 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _241) -> [return: bb126, unwind continue];
    }

    bb126: {
        StorageDead(_241);
        _243 = discriminant(_240);
        switchInt(move _243) -> [0: bb127, 1: bb128, otherwise: bb4];
    }

    bb127: {
        StorageLive(_247);
        _247 = ((_240 as Continue).0: u128);
        _239 = _247;
        StorageDead(_247);
        _197 = <u128 as Ord>::min(move _198, move _239) -> [return: bb130, unwind continue];
    }

    bb128: {
        StorageLive(_244);
        _244 = ((_240 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_246);
        _246 = _244;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _246) -> [return: bb129, unwind continue];
    }

    bb129: {
        StorageDead(_246);
        StorageDead(_244);
        StorageDead(_239);
        StorageDead(_198);
        StorageDead(_240);
        goto -> bb146;
    }

    bb130: {
        StorageDead(_239);
        StorageDead(_198);
        StorageDead(_240);
        StorageDead(_227);
        StorageDead(_222);
        StorageDead(_219);
        StorageDead(_204);
        StorageDead(_200);
        StorageLive(_248);
        StorageLive(_249);
        _249 = _197;
        _248 = Gt(move _249, const 0_u128);
        switchInt(move _248) -> [0: bb140, otherwise: bb131];
    }

    bb131: {
        StorageDead(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        _253 = _5;
        _252 = core::num::<impl i128>::abs(move _253) -> [return: bb132, unwind continue];
    }

    bb132: {
        StorageDead(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        _257 = _197;
        _256 = <u128 as Cast>::cast::<i128>(move _257) -> [return: bb133, unwind continue];
    }

    bb133: {
        StorageDead(_257);
        _255 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _256) -> [return: bb134, unwind continue];
    }

    bb134: {
        StorageDead(_256);
        _258 = discriminant(_255);
        switchInt(move _258) -> [0: bb135, 1: bb136, otherwise: bb4];
    }

    bb135: {
        StorageLive(_262);
        _262 = ((_255 as Continue).0: i128);
        _254 = _262;
        StorageDead(_262);
        _251 = <i128 as Ord>::min(move _252, move _254) -> [return: bb138, unwind continue];
    }

    bb136: {
        StorageLive(_259);
        _259 = ((_255 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_261);
        _261 = _259;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _261) -> [return: bb137, unwind continue];
    }

    bb137: {
        StorageDead(_261);
        StorageDead(_259);
        StorageDead(_254);
        StorageDead(_252);
        StorageDead(_251);
        StorageDead(_255);
        StorageDead(_250);
        StorageDead(_248);
        goto -> bb149;
    }

    bb138: {
        StorageDead(_254);
        StorageDead(_252);
        _263 = Eq(_251, const i128::MIN);
        assert(!move _263, "attempt to negate `{}`, which would overflow", _251) -> [success: bb139, unwind continue];
    }

    bb139: {
        _250 = Neg(move _251);
        StorageDead(_251);
        StorageDead(_255);
        StorageLive(_264);
        _264 = _250;
        _0 = std::result::Result::<i128, error::ErrorCode>::Ok(move _264);
        StorageDead(_264);
        StorageDead(_250);
        goto -> bb141;
    }

    bb140: {
        StorageDead(_249);
        _0 = std::result::Result::<i128, error::ErrorCode>::Ok(const 0_i128);
        goto -> bb141;
    }

    bb141: {
        StorageDead(_248);
        StorageDead(_197);
        goto -> bb143;
    }

    bb142: {
        StorageDead(_196);
        _0 = std::result::Result::<i128, error::ErrorCode>::Ok(const 0_i128);
        goto -> bb143;
    }

    bb143: {
        StorageDead(_195);
        goto -> bb144;
    }

    bb144: {
        StorageDead(_15);
        StorageDead(_5);
        goto -> bb165;
    }

    bb145: {
        StorageDead(_218);
        StorageDead(_199);
        StorageDead(_198);
        goto -> bb146;
    }

    bb146: {
        StorageDead(_227);
        StorageDead(_222);
        StorageDead(_219);
        goto -> bb148;
    }

    bb147: {
        StorageDead(_199);
        StorageDead(_198);
        goto -> bb148;
    }

    bb148: {
        StorageDead(_204);
        StorageDead(_200);
        goto -> bb149;
    }

    bb149: {
        StorageDead(_197);
        StorageDead(_195);
        goto -> bb163;
    }

    bb150: {
        StorageDead(_125);
        goto -> bb151;
    }

    bb151: {
        StorageDead(_115);
        goto -> bb152;
    }

    bb152: {
        StorageDead(_110);
        goto -> bb154;
    }

    bb153: {
        StorageDead(_97);
        StorageDead(_94);
        goto -> bb154;
    }

    bb154: {
        StorageDead(_93);
        goto -> bb156;
    }

    bb155: {
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_79);
        StorageDead(_75);
        goto -> bb156;
    }

    bb156: {
        StorageDead(_72);
        goto -> bb159;
    }

    bb157: {
        StorageDead(_49);
        StorageDead(_48);
        StorageDead(_47);
        StorageDead(_46);
        goto -> bb158;
    }

    bb158: {
        StorageDead(_53);
        StorageDead(_50);
        StorageDead(_45);
        goto -> bb159;
    }

    bb159: {
        StorageDead(_44);
        goto -> bb162;
    }

    bb160: {
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        goto -> bb161;
    }

    bb161: {
        StorageDead(_26);
        StorageDead(_23);
        StorageDead(_18);
        goto -> bb162;
    }

    bb162: {
        StorageDead(_17);
        goto -> bb163;
    }

    bb163: {
        StorageDead(_15);
        goto -> bb164;
    }

    bb164: {
        StorageDead(_5);
        goto -> bb165;
    }

    bb165: {
        return;
    }

    bb166 (cleanup): {
        drop(_174) -> [return: bb168, unwind terminate(cleanup)];
    }

    bb167 (cleanup): {
        drop(_155) -> [return: bb168, unwind terminate(cleanup)];
    }

    bb168 (cleanup): {
        resume;
    }
}
