digraph Mir_0_536 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn fulfill_perp_order_with_amm(_1: &amp;ReErased mut state::user::User, _2: &amp;ReErased mut state::user::UserStats, _3: usize, _4: &amp;ReErased mut state::perp_market::PerpMarket, _5: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;, _6: u64, _7: i64, _8: u64, _9: &amp;ReErased anchor_lang::prelude::Pubkey, _10: &amp;ReErased anchor_lang::prelude::Pubkey, _11: &amp;ReErased mut std::option::Option&lt;&amp;ReErased mut state::user::User&gt;, _12: &amp;ReErased mut std::option::Option&lt;&amp;ReErased mut state::user::UserStats&gt;, _13: &amp;ReErased mut std::option::Option&lt;&amp;ReErased mut state::user::User&gt;, _14: &amp;ReErased mut std::option::Option&lt;&amp;ReErased mut state::user::UserStats&gt;, _15: &amp;ReErased mut std::option::Option&lt;&amp;ReErased mut state::user::User&gt;, _16: &amp;ReErased mut std::option::Option&lt;&amp;ReErased mut state::user::UserStats&gt;, _17: &amp;ReErased state::state::FeeStructure, _18: std::option::Option&lt;u64&gt;, _19: std::option::Option&lt;u64&gt;, _20: std::option::Option&lt;u64&gt;, _21: bool) -&gt; std::result::Result&lt;(u64, u64), error::ErrorCode&gt;<br align="left"/>let _22: usize;<br align="left"/>let mut _23: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, usize&gt;;<br align="left"/>let mut _24: std::result::Result&lt;usize, error::ErrorCode&gt;;<br align="left"/>let mut _25: &amp;ReErased [state::user::PerpPosition; 8_usize];<br align="left"/>let _26: &amp;ReErased [state::user::PerpPosition; 8_usize];<br align="left"/>let mut _27: u16;<br align="left"/>let mut _28: isize;<br align="left"/>let _29: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _30: !;<br align="left"/>let mut _31: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _32: usize;<br align="left"/>let _33: i64;<br align="left"/>let _34: usize;<br align="left"/>let mut _35: usize;<br align="left"/>let mut _36: bool;<br align="left"/>let _37: u64;<br align="left"/>let _38: std::option::Option&lt;u64&gt;;<br align="left"/>let _39: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _40: (u64, std::option::Option&lt;u64&gt;, std::option::Option&lt;u64&gt;);<br align="left"/>let mut _41: isize;<br align="left"/>let _42: u64;<br align="left"/>let mut _43: u64;<br align="left"/>let mut _44: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _45: std::option::Option&lt;u64&gt;;<br align="left"/>let _46: state::state::FeeTier;<br align="left"/>let mut _47: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, state::state::FeeTier&gt;;<br align="left"/>let mut _48: std::result::Result&lt;state::state::FeeTier, error::ErrorCode&gt;;<br align="left"/>let mut _49: &amp;ReErased state::user::UserStats;<br align="left"/>let mut _50: &amp;ReErased state::state::FeeStructure;<br align="left"/>let mut _51: &amp;ReErased state::user::MarketType;<br align="left"/>let _52: &amp;ReErased state::user::MarketType;<br align="left"/>let _53: state::user::MarketType;<br align="left"/>let mut _54: bool;<br align="left"/>let mut _55: &amp;ReErased state::user::User;<br align="left"/>let mut _56: math::margin::MarginRequirementType;<br align="left"/>let mut _57: isize;<br align="left"/>let _58: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _59: !;<br align="left"/>let mut _60: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _61: state::state::FeeTier;<br align="left"/>let _62: u64;<br align="left"/>let _63: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _64: (u64, std::option::Option&lt;u64&gt;);<br align="left"/>let mut _65: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (u64, std::option::Option&lt;u64&gt;)&gt;;<br align="left"/>let mut _66: std::result::Result&lt;(u64, std::option::Option&lt;u64&gt;), error::ErrorCode&gt;;<br align="left"/>let mut _67: &amp;ReErased state::user::Order;<br align="left"/>let _68: &amp;ReErased state::user::Order;<br align="left"/>let _69: usize;<br align="left"/>let mut _70: usize;<br align="left"/>let mut _71: bool;<br align="left"/>let mut _72: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _73: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _74: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _75: i64;<br align="left"/>let mut _76: &amp;ReErased state::state::FeeTier;<br align="left"/>let _77: &amp;ReErased state::state::FeeTier;<br align="left"/>let mut _78: isize;<br align="left"/>let _79: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _80: !;<br align="left"/>let mut _81: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _82: (u64, std::option::Option&lt;u64&gt;);<br align="left"/>let _83: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _84: bool;<br align="left"/>let _85: usize;<br align="left"/>let mut _86: usize;<br align="left"/>let mut _87: bool;<br align="left"/>let mut _88: u64;<br align="left"/>let mut _89: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _90: std::option::Option&lt;u64&gt;;<br align="left"/>let _91: u64;<br align="left"/>let mut _92: bool;<br align="left"/>let _93: usize;<br align="left"/>let mut _94: usize;<br align="left"/>let mut _95: bool;<br align="left"/>let mut _96: bool;<br align="left"/>let mut _97: u64;<br align="left"/>let mut _98: i64;<br align="left"/>let mut _99: u64;<br align="left"/>let _100: ();<br align="left"/>let mut _101: bool;<br align="left"/>let mut _102: u64;<br align="left"/>let mut _103: u64;<br align="left"/>let mut _104: !;<br align="left"/>let _105: ();<br align="left"/>let mut _106: bool;<br align="left"/>let mut _107: &amp;ReErased std::option::Option&lt;u64&gt;;<br align="left"/>let _108: ();<br align="left"/>let mut _109: &amp;ReErased str;<br align="left"/>let _110: &amp;ReErased str;<br align="left"/>let mut _111: &amp;ReErased std::string::String;<br align="left"/>let _112: &amp;ReErased std::string::String;<br align="left"/>let _113: std::string::String;<br align="left"/>let _114: std::string::String;<br align="left"/>let mut _115: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _116: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _117: &amp;ReErased [&amp;ReErased str; 3_usize];<br align="left"/>let _118: &amp;ReErased [&amp;ReErased str; 3_usize];<br align="left"/>let _119: [&amp;ReErased str; 3_usize];<br align="left"/>let mut _120: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _121: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 3_usize];<br align="left"/>let _122: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 3_usize];<br align="left"/>let _123: [core::fmt::rt::Argument&lt;ReErased&gt;; 3_usize];<br align="left"/>let mut _124: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _125: &amp;ReErased u16;<br align="left"/>let _126: &amp;ReErased u16;<br align="left"/>let mut _127: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _128: &amp;ReErased u64;<br align="left"/>let _129: &amp;ReErased u64;<br align="left"/>let mut _130: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _131: &amp;ReErased u64;<br align="left"/>let _132: &amp;ReErased u64;<br align="left"/>let mut _133: (u64, u64);<br align="left"/>let _134: bool;<br align="left"/>let _135: u64;<br align="left"/>let _136: controller::position::PositionDirection;<br align="left"/>let mut _137: (bool, u64, controller::position::PositionDirection);<br align="left"/>let mut _138: bool;<br align="left"/>let _139: usize;<br align="left"/>let mut _140: usize;<br align="left"/>let mut _141: bool;<br align="left"/>let mut _142: u64;<br align="left"/>let _143: usize;<br align="left"/>let mut _144: usize;<br align="left"/>let mut _145: bool;<br align="left"/>let mut _146: controller::position::PositionDirection;<br align="left"/>let _147: usize;<br align="left"/>let mut _148: usize;<br align="left"/>let mut _149: bool;<br align="left"/>let _150: ();<br align="left"/>let mut _151: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _152: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _153: &amp;ReErased state::perp_market::AMM;<br align="left"/>let _154: &amp;ReErased state::perp_market::AMM;<br align="left"/>let mut _155: controller::position::PositionDirection;<br align="left"/>let mut _156: isize;<br align="left"/>let _157: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _158: !;<br align="left"/>let mut _159: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _160: ();<br align="left"/>let _161: std::option::Option&lt;(u64, u64)&gt;;<br align="left"/>let mut _162: &amp;ReErased state::user::PerpPosition;<br align="left"/>let _163: usize;<br align="left"/>let mut _164: usize;<br align="left"/>let mut _165: bool;<br align="left"/>let mut _166: controller::position::PositionDirection;<br align="left"/>let _167: u64;<br align="left"/>let mut _168: isize;<br align="left"/>let mut _169: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _170: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _171: &amp;ReErased state::perp_market::AMM;<br align="left"/>let mut _172: u64;<br align="left"/>let mut _173: isize;<br align="left"/>let _174: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _175: !;<br align="left"/>let mut _176: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _177: u64;<br align="left"/>let mut _178: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _179: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _180: &amp;ReErased state::perp_market::AMM;<br align="left"/>let mut _181: u64;<br align="left"/>let mut _182: isize;<br align="left"/>let _183: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _184: !;<br align="left"/>let mut _185: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _186: u64;<br align="left"/>let _187: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _188: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::option::Option&lt;i64&gt;&gt;;<br align="left"/>let mut _189: std::result::Result&lt;std::option::Option&lt;i64&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _190: state::perp_market::PerpMarket;<br align="left"/>let mut _191: isize;<br align="left"/>let _192: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _193: !;<br align="left"/>let mut _194: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _195: std::option::Option&lt;i64&gt;;<br align="left"/>let _196: u64;<br align="left"/>let mut _197: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _198: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _199: &amp;ReErased mut state::perp_market::AMM;<br align="left"/>let mut _200: &amp;ReErased mut state::perp_market::AMM;<br align="left"/>let mut _201: i64;<br align="left"/>let mut _202: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _203: u64;<br align="left"/>let mut _204: std::option::Option&lt;controller::position::PositionDirection&gt;;<br align="left"/>let mut _205: controller::position::PositionDirection;<br align="left"/>let mut _206: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _207: isize;<br align="left"/>let _208: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _209: !;<br align="left"/>let mut _210: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _211: u64;<br align="left"/>let _212: u64;<br align="left"/>let _213: i64;<br align="left"/>let mut _214: (u64, i64, i64);<br align="left"/>let mut _215: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (u64, i64, i64)&gt;;<br align="left"/>let mut _216: std::result::Result&lt;(u64, i64, i64), error::ErrorCode&gt;;<br align="left"/>let mut _217: u64;<br align="left"/>let mut _218: controller::position::PositionDirection;<br align="left"/>let mut _219: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _220: &amp;ReErased mut state::user::User;<br align="left"/>let mut _221: usize;<br align="left"/>let mut _222: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _223: isize;<br align="left"/>let _224: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _225: !;<br align="left"/>let mut _226: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _227: (u64, i64, i64);<br align="left"/>let _228: ();<br align="left"/>let mut _229: isize;<br align="left"/>let _230: u64;<br align="left"/>let _231: ();<br align="left"/>let mut _232: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _233: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _234: u64;<br align="left"/>let mut _235: u64;<br align="left"/>let mut _236: controller::position::PositionDirection;<br align="left"/>let mut _237: u64;<br align="left"/>let mut _238: bool;<br align="left"/>let mut _239: bool;<br align="left"/>let mut _240: isize;<br align="left"/>let _241: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _242: !;<br align="left"/>let mut _243: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _244: ();<br align="left"/>let _245: bool;<br align="left"/>let mut _246: &amp;ReErased mut std::option::Option&lt;&amp;ReErased mut state::user::User&gt;;<br align="left"/>let mut _247: u16;<br align="left"/>let _248: bool;<br align="left"/>let mut _249: bool;<br align="left"/>let mut _250: &amp;ReErased mut std::option::Option&lt;&amp;ReErased mut state::user::User&gt;;<br align="left"/>let mut _251: u16;<br align="left"/>let mut _252: &amp;ReErased mut std::option::Option&lt;&amp;ReErased mut state::user::User&gt;;<br align="left"/>let mut _253: u16;<br align="left"/>let _254: u64;<br align="left"/>let _255: i64;<br align="left"/>let _256: u64;<br align="left"/>let _257: u64;<br align="left"/>let _258: u64;<br align="left"/>let _259: i64;<br align="left"/>let _260: u64;<br align="left"/>let mut _261: math::fees::FillFees;<br align="left"/>let mut _262: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, math::fees::FillFees&gt;;<br align="left"/>let mut _263: std::result::Result&lt;math::fees::FillFees, error::ErrorCode&gt;;<br align="left"/>let mut _264: &amp;ReErased state::user::UserStats;<br align="left"/>let mut _265: u64;<br align="left"/>let mut _266: &amp;ReErased state::state::FeeStructure;<br align="left"/>let mut _267: u64;<br align="left"/>let mut _268: u64;<br align="left"/>let mut _269: bool;<br align="left"/>let mut _270: bool;<br align="left"/>let mut _271: &amp;ReErased std::option::Option&lt;&amp;ReErased mut state::user::UserStats&gt;;<br align="left"/>let mut _272: i64;<br align="left"/>let mut _273: bool;<br align="left"/>let mut _274: i16;<br align="left"/>let mut _275: bool;<br align="left"/>let mut _276: &amp;ReErased state::user::User;<br align="left"/>let mut _277: math::margin::MarginRequirementType;<br align="left"/>let mut _278: isize;<br align="left"/>let _279: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _280: !;<br align="left"/>let mut _281: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _282: math::fees::FillFees;<br align="left"/>let _283: controller::position::PositionDelta;<br align="left"/>let mut _284: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, controller::position::PositionDelta&gt;;<br align="left"/>let mut _285: std::result::Result&lt;controller::position::PositionDelta, error::ErrorCode&gt;;<br align="left"/>let mut _286: u64;<br align="left"/>let mut _287: u64;<br align="left"/>let mut _288: controller::position::PositionDirection;<br align="left"/>let mut _289: isize;<br align="left"/>let _290: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _291: !;<br align="left"/>let mut _292: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _293: controller::position::PositionDelta;<br align="left"/>let mut _294: i128;<br align="left"/>let mut _295: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _296: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _297: i128;<br align="left"/>let mut _298: i128;<br align="left"/>let mut _299: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _300: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _301: i64;<br align="left"/>let mut _302: isize;<br align="left"/>let _303: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _304: !;<br align="left"/>let mut _305: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _306: i128;<br align="left"/>let mut _307: isize;<br align="left"/>let _308: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _309: !;<br align="left"/>let mut _310: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _311: i128;<br align="left"/>let mut _312: u128;<br align="left"/>let mut _313: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _314: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _315: u128;<br align="left"/>let mut _316: u128;<br align="left"/>let mut _317: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _318: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _319: u64;<br align="left"/>let mut _320: isize;<br align="left"/>let _321: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _322: !;<br align="left"/>let mut _323: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _324: u128;<br align="left"/>let mut _325: isize;<br align="left"/>let _326: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _327: !;<br align="left"/>let mut _328: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _329: u128;<br align="left"/>let mut _330: i128;<br align="left"/>let mut _331: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _332: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _333: i128;<br align="left"/>let mut _334: i128;<br align="left"/>let mut _335: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _336: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _337: i64;<br align="left"/>let mut _338: isize;<br align="left"/>let _339: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _340: !;<br align="left"/>let mut _341: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _342: i128;<br align="left"/>let mut _343: isize;<br align="left"/>let _344: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _345: !;<br align="left"/>let mut _346: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _347: i128;<br align="left"/>let mut _348: i128;<br align="left"/>let mut _349: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _350: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _351: i128;<br align="left"/>let mut _352: i128;<br align="left"/>let mut _353: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _354: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _355: i64;<br align="left"/>let mut _356: isize;<br align="left"/>let _357: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _358: !;<br align="left"/>let mut _359: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _360: i128;<br align="left"/>let mut _361: isize;<br align="left"/>let _362: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _363: !;<br align="left"/>let mut _364: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _365: i128;<br align="left"/>let mut _366: i64;<br align="left"/>let mut _367: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _368: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _369: i64;<br align="left"/>let mut _370: i64;<br align="left"/>let mut _371: isize;<br align="left"/>let _372: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _373: !;<br align="left"/>let mut _374: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _375: i64;<br align="left"/>let _376: ();<br align="left"/>let mut _377: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _378: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _379: &amp;ReErased mut state::user::UserStats;<br align="left"/>let mut _380: u64;<br align="left"/>let mut _381: isize;<br align="left"/>let _382: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _383: !;<br align="left"/>let mut _384: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _385: ();<br align="left"/>let _386: ();<br align="left"/>let mut _387: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _388: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _389: &amp;ReErased mut state::user::UserStats;<br align="left"/>let mut _390: u64;<br align="left"/>let mut _391: isize;<br align="left"/>let _392: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _393: !;<br align="left"/>let mut _394: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _395: ();<br align="left"/>let _396: ();<br align="left"/>let mut _397: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _398: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _399: &amp;ReErased mut state::user::UserStats;<br align="left"/>let mut _400: u64;<br align="left"/>let mut _401: isize;<br align="left"/>let _402: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _403: !;<br align="left"/>let mut _404: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _405: ();<br align="left"/>let _406: ();<br align="left"/>let mut _407: (std::option::Option&lt;&amp;ReErased mut &amp;ReErased mut state::user::User&gt;, std::option::Option&lt;&amp;ReErased mut &amp;ReErased mut state::user::UserStats&gt;);<br align="left"/>let mut _408: std::option::Option&lt;&amp;ReErased mut &amp;ReErased mut state::user::User&gt;;<br align="left"/>let mut _409: &amp;ReErased mut std::option::Option&lt;&amp;ReErased mut state::user::User&gt;;<br align="left"/>let mut _410: std::option::Option&lt;&amp;ReErased mut &amp;ReErased mut state::user::UserStats&gt;;<br align="left"/>let mut _411: &amp;ReErased mut std::option::Option&lt;&amp;ReErased mut state::user::UserStats&gt;;<br align="left"/>let mut _412: isize;<br align="left"/>let mut _413: isize;<br align="left"/>let _414: &amp;ReErased mut &amp;ReErased mut state::user::User;<br align="left"/>let _415: &amp;ReErased mut &amp;ReErased mut state::user::UserStats;<br align="left"/>let mut _416: std::result::Result&lt;&amp;ReErased mut state::user::PerpPosition, error::ErrorCode&gt;;<br align="left"/>let mut _417: &amp;ReErased mut state::user::User;<br align="left"/>let mut _418: u16;<br align="left"/>let mut _419: isize;<br align="left"/>let _420: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let _421: ();<br align="left"/>let mut _422: bool;<br align="left"/>let mut _423: u64;<br align="left"/>let _424: ();<br align="left"/>let mut _425: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _426: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _427: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let mut _428: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _429: i64;<br align="left"/>let mut _430: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _431: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _432: u64;<br align="left"/>let mut _433: isize;<br align="left"/>let _434: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _435: !;<br align="left"/>let mut _436: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _437: i64;<br align="left"/>let mut _438: isize;<br align="left"/>let _439: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _440: !;<br align="left"/>let mut _441: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _442: ();<br align="left"/>let _443: ();<br align="left"/>let mut _444: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _445: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _446: &amp;ReErased mut state::user::UserStats;<br align="left"/>let mut _447: u64;<br align="left"/>let mut _448: i64;<br align="left"/>let mut _449: isize;<br align="left"/>let _450: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _451: !;<br align="left"/>let mut _452: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _453: ();<br align="left"/>let _454: usize;<br align="left"/>let mut _455: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, usize&gt;;<br align="left"/>let mut _456: std::result::Result&lt;usize, error::ErrorCode&gt;;<br align="left"/>let mut _457: &amp;ReErased [state::user::PerpPosition; 8_usize];<br align="left"/>let _458: &amp;ReErased [state::user::PerpPosition; 8_usize];<br align="left"/>let mut _459: u16;<br align="left"/>let mut _460: isize;<br align="left"/>let _461: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _462: !;<br align="left"/>let mut _463: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _464: usize;<br align="left"/>let _465: ();<br align="left"/>let mut _466: bool;<br align="left"/>let mut _467: u64;<br align="left"/>let _468: ();<br align="left"/>let mut _469: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _470: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _471: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let mut _472: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let _473: usize;<br align="left"/>let mut _474: usize;<br align="left"/>let mut _475: bool;<br align="left"/>let mut _476: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _477: i64;<br align="left"/>let mut _478: i64;<br align="left"/>let mut _479: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _480: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _481: u64;<br align="left"/>let mut _482: isize;<br align="left"/>let _483: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _484: !;<br align="left"/>let mut _485: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _486: i64;<br align="left"/>let mut _487: bool;<br align="left"/>let mut _488: isize;<br align="left"/>let _489: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _490: !;<br align="left"/>let mut _491: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _492: ();<br align="left"/>let _493: ();<br align="left"/>let mut _494: bool;<br align="left"/>let mut _495: u64;<br align="left"/>let _496: ();<br align="left"/>let mut _497: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _498: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _499: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let mut _500: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let _501: usize;<br align="left"/>let mut _502: usize;<br align="left"/>let mut _503: bool;<br align="left"/>let mut _504: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _505: i64;<br align="left"/>let mut _506: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _507: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _508: u64;<br align="left"/>let mut _509: isize;<br align="left"/>let _510: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _511: !;<br align="left"/>let mut _512: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _513: i64;<br align="left"/>let mut _514: isize;<br align="left"/>let _515: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _516: !;<br align="left"/>let mut _517: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _518: ();<br align="left"/>let _519: ();<br align="left"/>let mut _520: bool;<br align="left"/>let _521: ();<br align="left"/>let mut _522: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _523: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _524: &amp;ReErased mut state::user::UserStats;<br align="left"/>let mut _525: u8;<br align="left"/>let mut _526: u64;<br align="left"/>let mut _527: i64;<br align="left"/>let mut _528: isize;<br align="left"/>let _529: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _530: !;<br align="left"/>let mut _531: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _532: ();<br align="left"/>let _533: ();<br align="left"/>let mut _534: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _535: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _536: &amp;ReErased mut state::user::UserStats;<br align="left"/>let mut _537: u8;<br align="left"/>let mut _538: u64;<br align="left"/>let mut _539: i64;<br align="left"/>let mut _540: isize;<br align="left"/>let _541: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _542: !;<br align="left"/>let mut _543: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _544: ();<br align="left"/>let _545: ();<br align="left"/>let mut _546: std::option::Option&lt;&amp;ReErased mut &amp;ReErased mut state::user::User&gt;;<br align="left"/>let mut _547: &amp;ReErased mut std::option::Option&lt;&amp;ReErased mut state::user::User&gt;;<br align="left"/>let mut _548: isize;<br align="left"/>let _549: &amp;ReErased mut &amp;ReErased mut state::user::User;<br align="left"/>let _550: ();<br align="left"/>let mut _551: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _552: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _553: &amp;ReErased mut state::user::User;<br align="left"/>let mut _554: &amp;ReErased mut std::option::Option&lt;&amp;ReErased mut state::user::UserStats&gt;;<br align="left"/>let mut _555: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _556: u64;<br align="left"/>let mut _557: u64;<br align="left"/>let mut _558: i64;<br align="left"/>let mut _559: u64;<br align="left"/>let mut _560: isize;<br align="left"/>let _561: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _562: !;<br align="left"/>let mut _563: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _564: ();<br align="left"/>let mut _565: std::option::Option&lt;&amp;ReErased mut &amp;ReErased mut state::user::User&gt;;<br align="left"/>let mut _566: &amp;ReErased mut std::option::Option&lt;&amp;ReErased mut state::user::User&gt;;<br align="left"/>let mut _567: isize;<br align="left"/>let _568: &amp;ReErased mut &amp;ReErased mut state::user::User;<br align="left"/>let _569: ();<br align="left"/>let mut _570: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _571: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _572: &amp;ReErased mut state::user::User;<br align="left"/>let mut _573: &amp;ReErased mut std::option::Option&lt;&amp;ReErased mut state::user::UserStats&gt;;<br align="left"/>let mut _574: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _575: u64;<br align="left"/>let mut _576: u64;<br align="left"/>let mut _577: i64;<br align="left"/>let mut _578: u64;<br align="left"/>let mut _579: isize;<br align="left"/>let _580: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _581: !;<br align="left"/>let mut _582: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _583: ();<br align="left"/>let _584: ();<br align="left"/>let mut _585: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _586: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _587: &amp;ReErased mut state::user::Order;<br align="left"/>let mut _588: &amp;ReErased mut state::user::Order;<br align="left"/>let _589: usize;<br align="left"/>let mut _590: usize;<br align="left"/>let mut _591: bool;<br align="left"/>let mut _592: u64;<br align="left"/>let mut _593: u64;<br align="left"/>let mut _594: isize;<br align="left"/>let _595: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _596: !;<br align="left"/>let mut _597: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _598: ();<br align="left"/>let _599: ();<br align="left"/>let mut _600: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _601: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _602: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let mut _603: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let _604: usize;<br align="left"/>let mut _605: usize;<br align="left"/>let mut _606: bool;<br align="left"/>let mut _607: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let _608: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let mut _609: u64;<br align="left"/>let mut _610: bool;<br align="left"/>let mut _611: &amp;ReErased state::user::Order;<br align="left"/>let _612: usize;<br align="left"/>let mut _613: usize;<br align="left"/>let mut _614: bool;<br align="left"/>let mut _615: isize;<br align="left"/>let _616: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _617: !;<br align="left"/>let mut _618: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _619: ();<br align="left"/>let _620: std::option::Option&lt;anchor_lang::prelude::Pubkey&gt;;<br align="left"/>let _621: std::option::Option&lt;state::user::Order&gt;;<br align="left"/>let _622: std::option::Option&lt;anchor_lang::prelude::Pubkey&gt;;<br align="left"/>let _623: std::option::Option&lt;state::user::Order&gt;;<br align="left"/>let mut _624: (std::option::Option&lt;anchor_lang::prelude::Pubkey&gt;, std::option::Option&lt;state::user::Order&gt;, std::option::Option&lt;anchor_lang::prelude::Pubkey&gt;, std::option::Option&lt;state::user::Order&gt;);<br align="left"/>let mut _625: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _626: &amp;ReErased state::user::Order;<br align="left"/>let _627: &amp;ReErased state::user::Order;<br align="left"/>let _628: usize;<br align="left"/>let mut _629: usize;<br align="left"/>let mut _630: bool;<br align="left"/>let _631: u64;<br align="left"/>let _632: u64;<br align="left"/>let mut _633: u64;<br align="left"/>let mut _634: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _635: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _636: u64;<br align="left"/>let mut _637: std::option::Option&lt;u64&gt;;<br align="left"/>let _638: state::events::OrderActionExplanation;<br align="left"/>let mut _639: (std::option::Option&lt;u64&gt;, std::option::Option&lt;u64&gt;);<br align="left"/>let mut _640: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _641: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _642: isize;<br align="left"/>let mut _643: isize;<br align="left"/>let mut _644: &amp;ReErased std::option::Option&lt;u64&gt;;<br align="left"/>let mut _645: &amp;ReErased std::option::Option&lt;u64&gt;;<br align="left"/>let mut _646: bool;<br align="left"/>let mut _647: u8;<br align="left"/>let mut _648: u8;<br align="left"/>let mut _649: u8;<br align="left"/>let mut _650: bool;<br align="left"/>let mut _651: &amp;ReErased state::user::Order;<br align="left"/>let _652: usize;<br align="left"/>let mut _653: usize;<br align="left"/>let mut _654: bool;<br align="left"/>let mut _655: state::user::OrderBitFlag;<br align="left"/>let _656: std::option::Option&lt;u64&gt;;<br align="left"/>let _657: std::option::Option&lt;u64&gt;;<br align="left"/>let _658: std::option::Option&lt;u64&gt;;<br align="left"/>let _659: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _660: (std::option::Option&lt;u64&gt;, std::option::Option&lt;u64&gt;, std::option::Option&lt;u64&gt;, std::option::Option&lt;u64&gt;);<br align="left"/>let _661: std::option::Option&lt;u64&gt;;<br align="left"/>let _662: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _663: (std::option::Option&lt;u64&gt;, std::option::Option&lt;u64&gt;);<br align="left"/>let mut _664: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (std::option::Option&lt;u64&gt;, std::option::Option&lt;u64&gt;)&gt;;<br align="left"/>let mut _665: std::result::Result&lt;(std::option::Option&lt;u64&gt;, std::option::Option&lt;u64&gt;), error::ErrorCode&gt;;<br align="left"/>let mut _666: u64;<br align="left"/>let mut _667: std::option::Option&lt;(u64, u64)&gt;;<br align="left"/>let mut _668: isize;<br align="left"/>let _669: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _670: !;<br align="left"/>let mut _671: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _672: (std::option::Option&lt;u64&gt;, std::option::Option&lt;u64&gt;);<br align="left"/>let mut _673: bool;<br align="left"/>let mut _674: &amp;ReErased std::option::Option&lt;anchor_lang::prelude::Pubkey&gt;;<br align="left"/>let mut _675: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _676: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _677: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _678: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _679: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _680: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _681: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _682: std::option::Option&lt;u64&gt;;<br align="left"/>let _683: state::events::OrderActionRecord;<br align="left"/>let mut _684: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, state::events::OrderActionRecord&gt;;<br align="left"/>let mut _685: std::result::Result&lt;state::events::OrderActionRecord, error::ErrorCode&gt;;<br align="left"/>let mut _686: i64;<br align="left"/>let mut _687: state::events::OrderAction;<br align="left"/>let mut _688: state::events::OrderActionExplanation;<br align="left"/>let mut _689: u16;<br align="left"/>let mut _690: std::option::Option&lt;anchor_lang::prelude::Pubkey&gt;;<br align="left"/>let mut _691: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _692: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _693: u64;<br align="left"/>let mut _694: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _695: u64;<br align="left"/>let mut _696: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _697: u64;<br align="left"/>let mut _698: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _699: u64;<br align="left"/>let mut _700: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _701: u64;<br align="left"/>let mut _702: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _703: bool;<br align="left"/>let mut _704: u64;<br align="left"/>let mut _705: u64;<br align="left"/>let mut _706: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _707: u64;<br align="left"/>let mut _708: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _709: i64;<br align="left"/>let mut _710: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _711: std::option::Option&lt;anchor_lang::prelude::Pubkey&gt;;<br align="left"/>let mut _712: std::option::Option&lt;state::user::Order&gt;;<br align="left"/>let mut _713: std::option::Option&lt;anchor_lang::prelude::Pubkey&gt;;<br align="left"/>let mut _714: std::option::Option&lt;state::user::Order&gt;;<br align="left"/>let mut _715: i64;<br align="left"/>let mut _716: &amp;ReErased state::oracle::OraclePriceData;<br align="left"/>let mut _717: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, &amp;ReErased state::oracle::OraclePriceData&gt;;<br align="left"/>let mut _718: std::result::Result&lt;&amp;ReErased state::oracle::OraclePriceData, error::ErrorCode&gt;;<br align="left"/>let mut _719: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;;<br align="left"/>let mut _720: &amp;ReErased (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);<br align="left"/>let _721: &amp;ReErased (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);<br align="left"/>let _722: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);<br align="left"/>let mut _723: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _724: isize;<br align="left"/>let _725: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _726: !;<br align="left"/>let mut _727: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _728: &amp;ReErased state::oracle::OraclePriceData;<br align="left"/>let mut _729: u8;<br align="left"/>let mut _730: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _731: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _732: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _733: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _734: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _735: isize;<br align="left"/>let _736: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _737: !;<br align="left"/>let mut _738: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _739: state::events::OrderActionRecord;<br align="left"/>let _740: ();<br align="left"/>let mut _741: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _742: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _743: state::events::OrderActionRecord;<br align="left"/>let mut _744: isize;<br align="left"/>let _745: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _746: !;<br align="left"/>let mut _747: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _748: ();<br align="left"/>let _749: ();<br align="left"/>let mut _750: bool;<br align="left"/>let mut _751: u64;<br align="left"/>let mut _752: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _753: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _754: &amp;ReErased state::user::Order;<br align="left"/>let _755: usize;<br align="left"/>let mut _756: usize;<br align="left"/>let mut _757: bool;<br align="left"/>let mut _758: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _759: isize;<br align="left"/>let _760: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _761: !;<br align="left"/>let mut _762: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _763: u64;<br align="left"/>let _764: ();<br align="left"/>let mut _765: &amp;ReErased mut state::user::User;<br align="left"/>let mut _766: bool;<br align="left"/>let mut _767: &amp;ReErased state::user::Order;<br align="left"/>let _768: usize;<br align="left"/>let mut _769: usize;<br align="left"/>let mut _770: bool;<br align="left"/>let mut _771: state::user::OrderStatus;<br align="left"/>let _772: usize;<br align="left"/>let mut _773: usize;<br align="left"/>let mut _774: bool;<br align="left"/>let _775: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let _776: usize;<br align="left"/>let mut _777: usize;<br align="left"/>let mut _778: bool;<br align="left"/>let mut _779: (u8, bool);<br align="left"/>let mut _780: (u64, u64);<br align="left"/>let mut _781: u64;<br align="left"/>let mut _782: u64;<br align="left"/>let mut _783: &amp;ReErased [&amp;ReErased str; 3_usize];<br align="left"/>let mut _784: &amp;ReErased state::user::MarketType;<br align="left"/>let mut _785: &amp;ReErased mut state::user::User;<br align="left"/>let mut _786: &amp;ReErased mut state::user::UserStats;<br align="left"/>let mut _787: &amp;ReErased mut state::user::User;<br align="left"/>let mut _788: &amp;ReErased mut state::user::User;<br align="left"/>debug user =&gt; _1;<br align="left"/>debug user_stats =&gt; _2;<br align="left"/>debug order_index =&gt; _3;<br align="left"/>debug market =&gt; _4;<br align="left"/>debug oracle_map =&gt; _5;<br align="left"/>debug reserve_price_before =&gt; _6;<br align="left"/>debug now =&gt; _7;<br align="left"/>debug slot =&gt; _8;<br align="left"/>debug user_key =&gt; _9;<br align="left"/>debug filler_key =&gt; _10;<br align="left"/>debug filler =&gt; _11;<br align="left"/>debug filler_stats =&gt; _12;<br align="left"/>debug maker =&gt; _13;<br align="left"/>debug maker_stats =&gt; _14;<br align="left"/>debug referrer =&gt; _15;<br align="left"/>debug referrer_stats =&gt; _16;<br align="left"/>debug fee_structure =&gt; _17;<br align="left"/>debug limit_price =&gt; _18;<br align="left"/>debug override_base_asset_amount =&gt; _19;<br align="left"/>debug override_fill_price =&gt; _20;<br align="left"/>debug is_liquidation =&gt; _21;<br align="left"/>debug position_index =&gt; _22;<br align="left"/>debug residual =&gt; _29;<br align="left"/>debug val =&gt; _32;<br align="left"/>debug existing_base_asset_amount =&gt; _33;<br align="left"/>debug base_asset_amount =&gt; _37;<br align="left"/>debug limit_price =&gt; _38;<br align="left"/>debug fill_price =&gt; _39;<br align="left"/>debug override_base_asset_amount =&gt; _42;<br align="left"/>debug fee_tier =&gt; _46;<br align="left"/>debug residual =&gt; _58;<br align="left"/>debug val =&gt; _61;<br align="left"/>debug base_asset_amount =&gt; _62;<br align="left"/>debug limit_price =&gt; _63;<br align="left"/>debug residual =&gt; _79;<br align="left"/>debug val =&gt; _82;<br align="left"/>debug fill_price =&gt; _83;<br align="left"/>debug amm_size_threshold =&gt; _91;<br align="left"/>debug res =&gt; _114;<br align="left"/>debug order_post_only =&gt; _134;<br align="left"/>debug order_slot =&gt; _135;<br align="left"/>debug order_direction =&gt; _136;<br align="left"/>debug residual =&gt; _157;<br align="left"/>debug val =&gt; _160;<br align="left"/>debug existing_position_params_for_order_action =&gt; _161;<br align="left"/>debug market_side_price =&gt; _167;<br align="left"/>debug residual =&gt; _174;<br align="left"/>debug val =&gt; _177;<br align="left"/>debug residual =&gt; _183;<br align="left"/>debug val =&gt; _186;<br align="left"/>debug sanitize_clamp_denominator =&gt; _187;<br align="left"/>debug residual =&gt; _192;<br align="left"/>debug val =&gt; _195;<br align="left"/>debug residual =&gt; _208;<br align="left"/>debug val =&gt; _211;<br align="left"/>debug quote_asset_amount =&gt; _212;<br align="left"/>debug quote_asset_amount_surplus =&gt; _213;<br align="left"/>debug residual =&gt; _224;<br align="left"/>debug val =&gt; _227;<br align="left"/>debug limit_price =&gt; _230;<br align="left"/>debug residual =&gt; _241;<br align="left"/>debug val =&gt; _244;<br align="left"/>debug reward_referrer =&gt; _245;<br align="left"/>debug reward_filler =&gt; _248;<br align="left"/>debug user_fee =&gt; _254;<br align="left"/>debug fee_to_market =&gt; _255;<br align="left"/>debug filler_reward =&gt; _256;<br align="left"/>debug referee_discount =&gt; _257;<br align="left"/>debug referrer_reward =&gt; _258;<br align="left"/>debug fee_to_market_for_lp =&gt; _259;<br align="left"/>debug maker_rebate =&gt; _260;<br align="left"/>debug residual =&gt; _279;<br align="left"/>debug val =&gt; _282;<br align="left"/>debug user_position_delta =&gt; _283;<br align="left"/>debug residual =&gt; _290;<br align="left"/>debug val =&gt; _293;<br align="left"/>debug residual =&gt; _303;<br align="left"/>debug val =&gt; _306;<br align="left"/>debug residual =&gt; _308;<br align="left"/>debug val =&gt; _311;<br align="left"/>debug residual =&gt; _321;<br align="left"/>debug val =&gt; _324;<br align="left"/>debug residual =&gt; _326;<br align="left"/>debug val =&gt; _329;<br align="left"/>debug residual =&gt; _339;<br align="left"/>debug val =&gt; _342;<br align="left"/>debug residual =&gt; _344;<br align="left"/>debug val =&gt; _347;<br align="left"/>debug residual =&gt; _357;<br align="left"/>debug val =&gt; _360;<br align="left"/>debug residual =&gt; _362;<br align="left"/>debug val =&gt; _365;<br align="left"/>debug residual =&gt; _372;<br align="left"/>debug val =&gt; _375;<br align="left"/>debug residual =&gt; _382;<br align="left"/>debug val =&gt; _385;<br align="left"/>debug residual =&gt; _392;<br align="left"/>debug val =&gt; _395;<br align="left"/>debug residual =&gt; _402;<br align="left"/>debug val =&gt; _405;<br align="left"/>debug referrer =&gt; _414;<br align="left"/>debug referrer_stats =&gt; _415;<br align="left"/>debug referrer_position =&gt; _420;<br align="left"/>debug residual =&gt; _434;<br align="left"/>debug val =&gt; _437;<br align="left"/>debug residual =&gt; _439;<br align="left"/>debug val =&gt; _442;<br align="left"/>debug residual =&gt; _450;<br align="left"/>debug val =&gt; _453;<br align="left"/>debug position_index =&gt; _454;<br align="left"/>debug residual =&gt; _461;<br align="left"/>debug val =&gt; _464;<br align="left"/>debug residual =&gt; _483;<br align="left"/>debug val =&gt; _486;<br align="left"/>debug residual =&gt; _489;<br align="left"/>debug val =&gt; _492;<br align="left"/>debug residual =&gt; _510;<br align="left"/>debug val =&gt; _513;<br align="left"/>debug residual =&gt; _515;<br align="left"/>debug val =&gt; _518;<br align="left"/>debug residual =&gt; _529;<br align="left"/>debug val =&gt; _532;<br align="left"/>debug residual =&gt; _541;<br align="left"/>debug val =&gt; _544;<br align="left"/>debug filler =&gt; _549;<br align="left"/>debug residual =&gt; _561;<br align="left"/>debug val =&gt; _564;<br align="left"/>debug maker =&gt; _568;<br align="left"/>debug residual =&gt; _580;<br align="left"/>debug val =&gt; _583;<br align="left"/>debug residual =&gt; _595;<br align="left"/>debug val =&gt; _598;<br align="left"/>debug residual =&gt; _616;<br align="left"/>debug val =&gt; _619;<br align="left"/>debug taker =&gt; _620;<br align="left"/>debug taker_order =&gt; _621;<br align="left"/>debug maker =&gt; _622;<br align="left"/>debug maker_order =&gt; _623;<br align="left"/>debug fill_record_id =&gt; _631;<br align="left"/>debug current_id =&gt; _632;<br align="left"/>debug order_action_explanation =&gt; _638;<br align="left"/>debug order_action_bit_flags =&gt; _647;<br align="left"/>debug taker_existing_quote_entry_amount =&gt; _656;<br align="left"/>debug taker_existing_base_asset_amount =&gt; _657;<br align="left"/>debug maker_existing_quote_entry_amount =&gt; _658;<br align="left"/>debug maker_existing_base_asset_amount =&gt; _659;<br align="left"/>debug existing_quote_entry_amount =&gt; _661;<br align="left"/>debug existing_base_asset_amount =&gt; _662;<br align="left"/>debug residual =&gt; _669;<br align="left"/>debug val =&gt; _672;<br align="left"/>debug order_action_record =&gt; _683;<br align="left"/>debug residual =&gt; _725;<br align="left"/>debug val =&gt; _728;<br align="left"/>debug residual =&gt; _736;<br align="left"/>debug val =&gt; _739;<br align="left"/>debug residual =&gt; _745;<br align="left"/>debug val =&gt; _748;<br align="left"/>debug residual =&gt; _760;<br align="left"/>debug val =&gt; _763;<br align="left"/>debug market_position =&gt; _775;<br align="left"/>>;
    bb0__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>_26 = &amp;((*_1).4: [state::user::PerpPosition; 8])<br/>_25 = &amp;(*_26)<br/>StorageLive(_27)<br/>_27 = ((*_4).21: u16)<br/></td></tr><tr><td align="left">_24 = get_position_index(move _25, move _27)</td></tr></table>>];
    bb1__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>StorageDead(_25)<br/></td></tr><tr><td align="left">_23 = &lt;std::result::Result&lt;usize, error::ErrorCode&gt; as Try&gt;::branch(move _24)</td></tr></table>>];
    bb2__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/>_28 = discriminant(_23)<br/></td></tr><tr><td align="left">switchInt(move _28)</td></tr></table>>];
    bb3__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_32)<br/>_32 = ((_23 as Continue).0: usize)<br/>_22 = _32<br/>StorageDead(_32)<br/>StorageDead(_26)<br/>StorageDead(_23)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>_34 = _22<br/>_35 = Len(((*_1).4: [state::user::PerpPosition; 8]))<br/>_36 = Lt(_34, _35)<br/></td></tr><tr><td align="left">assert(move _36, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _35, _34)</td></tr></table>>];
    bb4__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_29)<br/>_29 = ((_23 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_31)<br/>_31 = _29<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _31)</td></tr></table>>];
    bb6__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/>StorageDead(_29)<br/>StorageDead(_26)<br/>StorageDead(_23)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_33 = (((*_1).4: [state::user::PerpPosition; 8])[_34].1: i64)<br/>StorageDead(_34)<br/>StorageLive(_40)<br/>_41 = discriminant(_19)<br/></td></tr><tr><td align="left">switchInt(move _41)</td></tr></table>>];
    bb8__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageLive(_46)<br/>StorageLive(_47)<br/>StorageLive(_48)<br/>StorageLive(_49)<br/>_49 = &amp;(*_2)<br/>StorageLive(_50)<br/>_50 = &amp;(*_17)<br/>StorageLive(_51)<br/>StorageLive(_52)<br/>_784 = const _<br/>_52 = &amp;(*_784)<br/>_51 = &amp;(*_52)<br/>StorageLive(_54)<br/>StorageLive(_55)<br/>_55 = &amp;(*_1)<br/>StorageLive(_56)<br/>_56 = math::margin::MarginRequirementType::Initial<br/></td></tr><tr><td align="left">_54 = User::is_high_leverage_mode(move _55, move _56)</td></tr></table>>];
    bb9__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_42)<br/>_42 = ((_19 as Some).0: u64)<br/>StorageLive(_43)<br/>_43 = _42<br/>StorageLive(_44)<br/>_44 = _18<br/>StorageLive(_45)<br/>_45 = _20<br/>_40 = (move _43, move _44, move _45)<br/>StorageDead(_45)<br/>StorageDead(_44)<br/>StorageDead(_43)<br/>StorageDead(_42)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_56)<br/>StorageDead(_55)<br/></td></tr><tr><td align="left">_48 = determine_user_fee_tier(move _49, move _50, move _51, move _54)</td></tr></table>>];
    bb11__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_54)<br/>StorageDead(_51)<br/>StorageDead(_50)<br/>StorageDead(_49)<br/></td></tr><tr><td align="left">_47 = &lt;std::result::Result&lt;state::state::FeeTier, error::ErrorCode&gt; as Try&gt;::branch(move _48)</td></tr></table>>];
    bb12__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_48)<br/>_57 = discriminant(_47)<br/></td></tr><tr><td align="left">switchInt(move _57)</td></tr></table>>];
    bb13__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageLive(_61)<br/>_61 = ((_47 as Continue).0: state::state::FeeTier)<br/>_46 = _61<br/>StorageDead(_61)<br/>StorageDead(_52)<br/>StorageDead(_47)<br/>StorageLive(_64)<br/>StorageLive(_65)<br/>StorageLive(_66)<br/>StorageLive(_67)<br/>StorageLive(_68)<br/>StorageLive(_69)<br/>_69 = _3<br/>_70 = Len(((*_1).5: [state::user::Order; 32]))<br/>_71 = Lt(_69, _70)<br/></td></tr><tr><td align="left">assert(move _71, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _70, _69)</td></tr></table>>];
    bb14__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageLive(_58)<br/>_58 = ((_47 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_60)<br/>_60 = _58<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _60)</td></tr></table>>];
    bb15__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_60)<br/>StorageDead(_58)<br/>StorageDead(_52)<br/>StorageDead(_47)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb16__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">_68 = &amp;((*_1).5: [state::user::Order; 32])[_69]<br/>_67 = &amp;(*_68)<br/>StorageLive(_72)<br/>_72 = &amp;(*_4)<br/>StorageLive(_73)<br/>_73 = _18<br/>StorageLive(_74)<br/>_74 = _20<br/>StorageLive(_75)<br/>_75 = _33<br/>StorageLive(_76)<br/>StorageLive(_77)<br/>_77 = &amp;_46<br/>_76 = &amp;(*_77)<br/></td></tr><tr><td align="left">_66 = math::orders::calculate_base_asset_amount_for_amm_to_fulfill(move _67, move _72, move _73, move _74, move _75, move _76)</td></tr></table>>];
    bb17__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_76)<br/>StorageDead(_75)<br/>StorageDead(_74)<br/>StorageDead(_73)<br/>StorageDead(_72)<br/>StorageDead(_67)<br/></td></tr><tr><td align="left">_65 = &lt;std::result::Result&lt;(u64, Option&lt;u64&gt;), error::ErrorCode&gt; as Try&gt;::branch(move _66)</td></tr></table>>];
    bb18__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_66)<br/>_78 = discriminant(_65)<br/></td></tr><tr><td align="left">switchInt(move _78)</td></tr></table>>];
    bb19__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageLive(_82)<br/>_82 = ((_65 as Continue).0: (u64, std::option::Option&lt;u64&gt;))<br/>_64 = _82<br/>StorageDead(_82)<br/>StorageLive(_62)<br/>_62 = (_64.0: u64)<br/>StorageLive(_63)<br/>_63 = (_64.1: std::option::Option&lt;u64&gt;)<br/>StorageDead(_77)<br/>StorageDead(_69)<br/>StorageDead(_68)<br/>StorageDead(_65)<br/>StorageDead(_64)<br/>StorageLive(_83)<br/>StorageLive(_84)<br/>StorageLive(_85)<br/>_85 = _3<br/>_86 = Len(((*_1).5: [state::user::Order; 32]))<br/>_87 = Lt(_85, _86)<br/></td></tr><tr><td align="left">assert(move _87, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _86, _85)</td></tr></table>>];
    bb20__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageLive(_79)<br/>_79 = ((_65 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_81)<br/>_81 = _79<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _81)</td></tr></table>>];
    bb21__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_81)<br/>StorageDead(_79)<br/>StorageDead(_77)<br/>StorageDead(_69)<br/>StorageDead(_68)<br/>StorageDead(_65)<br/>StorageDead(_64)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb22__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">_84 = (((*_1).5: [state::user::Order; 32])[_85].19: bool)<br/></td></tr><tr><td align="left">switchInt(move _84)</td></tr></table>>];
    bb23__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_85)<br/>_83 = _63<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb24__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_85)<br/>_83 = Option::&lt;u64&gt;::None<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb25__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_84)<br/>StorageLive(_88)<br/>_88 = _62<br/>StorageLive(_89)<br/>_89 = _63<br/>StorageLive(_90)<br/>_90 = _83<br/>_40 = (move _88, move _89, move _90)<br/>StorageDead(_90)<br/>StorageDead(_89)<br/>StorageDead(_88)<br/>StorageDead(_83)<br/>StorageDead(_63)<br/>StorageDead(_62)<br/>StorageDead(_46)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb26__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageLive(_37)<br/>_37 = (_40.0: u64)<br/>StorageLive(_38)<br/>_38 = (_40.1: std::option::Option&lt;u64&gt;)<br/>StorageLive(_39)<br/>_39 = (_40.2: std::option::Option&lt;u64&gt;)<br/>StorageDead(_40)<br/>StorageLive(_91)<br/>StorageLive(_92)<br/>StorageLive(_93)<br/>_93 = _3<br/>_94 = Len(((*_1).5: [state::user::Order; 32]))<br/>_95 = Lt(_93, _94)<br/></td></tr><tr><td align="left">assert(move _95, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _94, _93)</td></tr></table>>];
    bb27__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">_92 = (((*_1).5: [state::user::Order; 32])[_93].18: bool)<br/></td></tr><tr><td align="left">switchInt(move _92)</td></tr></table>>];
    bb28__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_93)<br/>StorageLive(_96)<br/>StorageLive(_97)<br/>StorageLive(_98)<br/>_98 = _33<br/></td></tr><tr><td align="left">_97 = core::num::&lt;impl i64&gt;::unsigned_abs(move _98)</td></tr></table>>];
    bb29__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_98)<br/>StorageLive(_99)<br/>_99 = (((*_4).1: state::perp_market::AMM).54: u64)<br/>_96 = Gt(move _97, move _99)<br/></td></tr><tr><td align="left">switchInt(move _96)</td></tr></table>>];
    bb30__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_99)<br/>StorageDead(_97)<br/>_91 = (((*_4).1: state::perp_market::AMM).54: u64)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb31__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageDead(_99)<br/>StorageDead(_97)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb32__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageDead(_93)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb33__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">_91 = (((*_4).1: state::perp_market::AMM).52: u64)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb34__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_96)<br/>StorageDead(_92)<br/>StorageLive(_100)<br/>StorageLive(_101)<br/>StorageLive(_102)<br/>_102 = _37<br/>StorageLive(_103)<br/>_103 = _91<br/>_101 = Lt(move _102, move _103)<br/></td></tr><tr><td align="left">switchInt(move _101)</td></tr></table>>];
    bb35__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_103)<br/>StorageDead(_102)<br/>StorageLive(_105)<br/>StorageLive(_106)<br/>StorageLive(_107)<br/>_107 = &amp;_19<br/></td></tr><tr><td align="left">_106 = Option::&lt;u64&gt;::is_none(move _107)</td></tr></table>>];
    bb36__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left">switchInt(move _106)</td></tr></table>>];
    bb37__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageDead(_107)<br/>StorageLive(_108)<br/>StorageLive(_109)<br/>StorageLive(_110)<br/>StorageLive(_111)<br/>StorageLive(_112)<br/>StorageLive(_113)<br/>StorageLive(_114)<br/>StorageLive(_115)<br/>StorageLive(_116)<br/>StorageLive(_117)<br/>StorageLive(_118)<br/>_783 = const _<br/>_118 = &amp;(*_783)<br/>_117 = &amp;(*_118)<br/>_116 = move _117 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_117)<br/>StorageLive(_120)<br/>StorageLive(_121)<br/>StorageLive(_122)<br/>StorageLive(_123)<br/>StorageLive(_124)<br/>StorageLive(_125)<br/>StorageLive(_126)<br/>_126 = &amp;((*_4).21: u16)<br/>_125 = &amp;(*_126)<br/></td></tr><tr><td align="left">_124 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;u16&gt;(move _125)</td></tr></table>>];
    bb38__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageDead(_125)<br/>StorageLive(_127)<br/>StorageLive(_128)<br/>StorageLive(_129)<br/>_129 = &amp;_37<br/>_128 = &amp;(*_129)<br/></td></tr><tr><td align="left">_127 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;u64&gt;(move _128)</td></tr></table>>];
    bb39__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageDead(_128)<br/>StorageLive(_130)<br/>StorageLive(_131)<br/>StorageLive(_132)<br/>_132 = &amp;(((*_4).1: state::perp_market::AMM).54: u64)<br/>_131 = &amp;(*_132)<br/></td></tr><tr><td align="left">_130 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;u64&gt;(move _131)</td></tr></table>>];
    bb40__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">StorageDead(_131)<br/>_123 = [move _124, move _127, move _130]<br/>StorageDead(_130)<br/>StorageDead(_127)<br/>StorageDead(_124)<br/>_122 = &amp;_123<br/>_121 = &amp;(*_122)<br/>_120 = move _121 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_121)<br/></td></tr><tr><td align="left">_115 = Arguments::&lt;'_&gt;::new_v1(move _116, move _120)</td></tr></table>>];
    bb41__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">StorageDead(_120)<br/>StorageDead(_116)<br/></td></tr><tr><td align="left">_114 = format(move _115)</td></tr></table>>];
    bb42__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageDead(_115)<br/>StorageDead(_132)<br/>StorageDead(_129)<br/>StorageDead(_126)<br/>StorageDead(_123)<br/>StorageDead(_122)<br/>StorageDead(_118)<br/>_113 = move _114<br/>StorageDead(_114)<br/>_112 = &amp;_113<br/>_111 = &amp;(*_112)<br/></td></tr><tr><td align="left">_110 = &lt;String as Deref&gt;::deref(move _111)</td></tr></table>>];
    bb43__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">_109 = &amp;(*_110)<br/>StorageDead(_111)<br/></td></tr><tr><td align="left">_108 = solana_program::log::sol_log(move _109)</td></tr></table>>];
    bb44__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">StorageDead(_109)<br/></td></tr><tr><td align="left">drop(_113)</td></tr></table>>];
    bb45__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">StorageDead(_113)<br/>StorageDead(_112)<br/>StorageDead(_110)<br/>StorageDead(_108)<br/>_105 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb46__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">StorageDead(_107)<br/>_105 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb47__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left" balign="left">StorageDead(_106)<br/>StorageDead(_105)<br/>StorageLive(_133)<br/>_133 = (const 0_u64, const 0_u64)<br/>_0 = std::result::Result::&lt;(u64, u64), error::ErrorCode&gt;::Ok(move _133)<br/>StorageDead(_133)<br/>StorageDead(_101)<br/>StorageDead(_100)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb48__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left" balign="left">StorageDead(_103)<br/>StorageDead(_102)<br/>_100 = const ()<br/>StorageDead(_101)<br/>StorageDead(_100)<br/>StorageLive(_137)<br/>StorageLive(_138)<br/>StorageLive(_139)<br/>_139 = _3<br/>_140 = Len(((*_1).5: [state::user::Order; 32]))<br/>_141 = Lt(_139, _140)<br/></td></tr><tr><td align="left">assert(move _141, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _140, _139)</td></tr></table>>];
    bb49__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left" balign="left">_138 = (((*_1).5: [state::user::Order; 32])[_139].19: bool)<br/>StorageLive(_142)<br/>StorageLive(_143)<br/>_143 = _3<br/>_144 = Len(((*_1).5: [state::user::Order; 32]))<br/>_145 = Lt(_143, _144)<br/></td></tr><tr><td align="left">assert(move _145, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _144, _143)</td></tr></table>>];
    bb50__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">50</td></tr><tr><td align="left" balign="left">_142 = (((*_1).5: [state::user::Order; 32])[_143].0: u64)<br/>StorageLive(_146)<br/>StorageLive(_147)<br/>_147 = _3<br/>_148 = Len(((*_1).5: [state::user::Order; 32]))<br/>_149 = Lt(_147, _148)<br/></td></tr><tr><td align="left">assert(move _149, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _148, _147)</td></tr></table>>];
    bb51__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">51</td></tr><tr><td align="left" balign="left">_146 = (((*_1).5: [state::user::Order; 32])[_147].17: controller::position::PositionDirection)<br/>_137 = (move _138, move _142, move _146)<br/>StorageDead(_146)<br/>StorageDead(_142)<br/>StorageDead(_138)<br/>StorageLive(_134)<br/>_134 = (_137.0: bool)<br/>StorageLive(_135)<br/>_135 = (_137.1: u64)<br/>StorageLive(_136)<br/>_136 = (_137.2: controller::position::PositionDirection)<br/>StorageDead(_147)<br/>StorageDead(_143)<br/>StorageDead(_139)<br/>StorageDead(_137)<br/>StorageLive(_150)<br/>StorageLive(_151)<br/>StorageLive(_152)<br/>StorageLive(_153)<br/>StorageLive(_154)<br/>_154 = &amp;((*_4).1: state::perp_market::AMM)<br/>_153 = &amp;(*_154)<br/>StorageLive(_155)<br/>_155 = _136<br/></td></tr><tr><td align="left">_152 = validate_amm_account_for_fill(move _153, move _155)</td></tr></table>>];
    bb52__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">52</td></tr><tr><td align="left" balign="left">StorageDead(_155)<br/>StorageDead(_153)<br/></td></tr><tr><td align="left">_151 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _152)</td></tr></table>>];
    bb53__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">53</td></tr><tr><td align="left" balign="left">StorageDead(_152)<br/>_156 = discriminant(_151)<br/></td></tr><tr><td align="left">switchInt(move _156)</td></tr></table>>];
    bb54__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">54</td></tr><tr><td align="left" balign="left">StorageLive(_160)<br/>_160 = ((_151 as Continue).0: ())<br/>_150 = _160<br/>StorageDead(_160)<br/>StorageDead(_154)<br/>StorageDead(_151)<br/>StorageDead(_150)<br/>StorageLive(_161)<br/>StorageLive(_162)<br/>StorageLive(_163)<br/>_163 = _22<br/>_164 = Len(((*_1).4: [state::user::PerpPosition; 8]))<br/>_165 = Lt(_163, _164)<br/></td></tr><tr><td align="left">assert(move _165, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _164, _163)</td></tr></table>>];
    bb55__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">55</td></tr><tr><td align="left" balign="left">StorageLive(_157)<br/>_157 = ((_151 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_159)<br/>_159 = _157<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _159)</td></tr></table>>];
    bb56__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">56</td></tr><tr><td align="left" balign="left">StorageDead(_159)<br/>StorageDead(_157)<br/>StorageDead(_154)<br/>StorageDead(_151)<br/>StorageDead(_150)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb57__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">57</td></tr><tr><td align="left" balign="left">_162 = &amp;((*_1).4: [state::user::PerpPosition; 8])[_163]<br/>StorageLive(_166)<br/>_166 = _136<br/></td></tr><tr><td align="left">_161 = PerpPosition::get_existing_position_params_for_order_action(move _162, move _166)</td></tr></table>>];
    bb58__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">58</td></tr><tr><td align="left" balign="left">StorageDead(_166)<br/>StorageDead(_162)<br/>StorageDead(_163)<br/>StorageLive(_167)<br/>_168 = discriminant(_136)<br/></td></tr><tr><td align="left">switchInt(move _168)</td></tr></table>>];
    bb59__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">59</td></tr><tr><td align="left" balign="left">StorageLive(_178)<br/>StorageLive(_179)<br/>StorageLive(_180)<br/>_180 = &amp;((*_4).1: state::perp_market::AMM)<br/>StorageLive(_181)<br/>_181 = _6<br/></td></tr><tr><td align="left">_179 = AMM::bid_price(move _180, move _181)</td></tr></table>>];
    bb60__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">60</td></tr><tr><td align="left" balign="left">StorageLive(_169)<br/>StorageLive(_170)<br/>StorageLive(_171)<br/>_171 = &amp;((*_4).1: state::perp_market::AMM)<br/>StorageLive(_172)<br/>_172 = _6<br/></td></tr><tr><td align="left">_170 = AMM::ask_price(move _171, move _172)</td></tr></table>>];
    bb61__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">61</td></tr><tr><td align="left" balign="left">StorageDead(_172)<br/>StorageDead(_171)<br/></td></tr><tr><td align="left">_169 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _170)</td></tr></table>>];
    bb62__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">62</td></tr><tr><td align="left" balign="left">StorageDead(_170)<br/>_173 = discriminant(_169)<br/></td></tr><tr><td align="left">switchInt(move _173)</td></tr></table>>];
    bb63__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">63</td></tr><tr><td align="left" balign="left">StorageLive(_177)<br/>_177 = ((_169 as Continue).0: u64)<br/>_167 = _177<br/>StorageDead(_177)<br/>StorageDead(_169)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb64__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">64</td></tr><tr><td align="left" balign="left">StorageLive(_174)<br/>_174 = ((_169 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_176)<br/>_176 = _174<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _176)</td></tr></table>>];
    bb65__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">65</td></tr><tr><td align="left" balign="left">StorageDead(_176)<br/>StorageDead(_174)<br/>StorageDead(_169)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb66__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">66</td></tr><tr><td align="left" balign="left">StorageDead(_181)<br/>StorageDead(_180)<br/></td></tr><tr><td align="left">_178 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _179)</td></tr></table>>];
    bb67__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">67</td></tr><tr><td align="left" balign="left">StorageDead(_179)<br/>_182 = discriminant(_178)<br/></td></tr><tr><td align="left">switchInt(move _182)</td></tr></table>>];
    bb68__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">68</td></tr><tr><td align="left" balign="left">StorageLive(_186)<br/>_186 = ((_178 as Continue).0: u64)<br/>_167 = _186<br/>StorageDead(_186)<br/>StorageDead(_178)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb69__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">69</td></tr><tr><td align="left" balign="left">StorageLive(_183)<br/>_183 = ((_178 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_185)<br/>_185 = _183<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _185)</td></tr></table>>];
    bb70__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">70</td></tr><tr><td align="left" balign="left">StorageDead(_185)<br/>StorageDead(_183)<br/>StorageDead(_178)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb71__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">71</td></tr><tr><td align="left" balign="left">StorageLive(_187)<br/>StorageLive(_188)<br/>StorageLive(_189)<br/>StorageLive(_190)<br/>_190 = (*_4)<br/></td></tr><tr><td align="left">_189 = PerpMarket::get_sanitize_clamp_denominator(move _190)</td></tr></table>>];
    bb72__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">72</td></tr><tr><td align="left" balign="left">StorageDead(_190)<br/></td></tr><tr><td align="left">_188 = &lt;std::result::Result&lt;Option&lt;i64&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _189)</td></tr></table>>];
    bb73__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">73</td></tr><tr><td align="left" balign="left">StorageDead(_189)<br/>_191 = discriminant(_188)<br/></td></tr><tr><td align="left">switchInt(move _191)</td></tr></table>>];
    bb74__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">74</td></tr><tr><td align="left" balign="left">StorageLive(_195)<br/>_195 = ((_188 as Continue).0: std::option::Option&lt;i64&gt;)<br/>_187 = _195<br/>StorageDead(_195)<br/>StorageDead(_188)<br/>StorageLive(_196)<br/>StorageLive(_197)<br/>StorageLive(_198)<br/>StorageLive(_199)<br/>StorageLive(_200)<br/>_200 = &amp;mut ((*_4).1: state::perp_market::AMM)<br/>_199 = &amp;mut (*_200)<br/>StorageLive(_201)<br/>_201 = _7<br/>StorageLive(_202)<br/>StorageLive(_203)<br/>_203 = _167<br/>_202 = Option::&lt;u64&gt;::Some(move _203)<br/>StorageDead(_203)<br/>StorageLive(_204)<br/>StorageLive(_205)<br/>_205 = _136<br/>_204 = Option::&lt;controller::position::PositionDirection&gt;::Some(move _205)<br/>StorageDead(_205)<br/>StorageLive(_206)<br/>_206 = _187<br/></td></tr><tr><td align="left">_198 = update_mark_twap_from_estimates(move _199, move _201, move _202, move _204, move _206)</td></tr></table>>];
    bb75__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">75</td></tr><tr><td align="left" balign="left">StorageLive(_192)<br/>_192 = ((_188 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_194)<br/>_194 = _192<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _194)</td></tr></table>>];
    bb76__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">76</td></tr><tr><td align="left" balign="left">StorageDead(_194)<br/>StorageDead(_192)<br/>StorageDead(_188)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb77__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">77</td></tr><tr><td align="left" balign="left">StorageDead(_206)<br/>StorageDead(_204)<br/>StorageDead(_202)<br/>StorageDead(_201)<br/>StorageDead(_199)<br/></td></tr><tr><td align="left">_197 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _198)</td></tr></table>>];
    bb78__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">78</td></tr><tr><td align="left" balign="left">StorageDead(_198)<br/>_207 = discriminant(_197)<br/></td></tr><tr><td align="left">switchInt(move _207)</td></tr></table>>];
    bb79__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">79</td></tr><tr><td align="left" balign="left">StorageLive(_211)<br/>_211 = ((_197 as Continue).0: u64)<br/>_196 = _211<br/>StorageDead(_211)<br/>StorageDead(_200)<br/>StorageDead(_197)<br/>StorageDead(_196)<br/>StorageLive(_214)<br/>StorageLive(_215)<br/>StorageLive(_216)<br/>StorageLive(_217)<br/>_217 = _37<br/>StorageLive(_218)<br/>_218 = _136<br/>StorageLive(_219)<br/>_219 = &amp;mut (*_4)<br/>StorageLive(_220)<br/>_220 = &amp;mut (*_1)<br/>StorageLive(_221)<br/>_221 = _22<br/>StorageLive(_222)<br/>_222 = _39<br/></td></tr><tr><td align="left">_216 = update_position_with_base_asset_amount(move _217, move _218, move _219, move _220, move _221, move _222)</td></tr></table>>];
    bb80__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">80</td></tr><tr><td align="left" balign="left">StorageLive(_208)<br/>_208 = ((_197 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_210)<br/>_210 = _208<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _210)</td></tr></table>>];
    bb81__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">81</td></tr><tr><td align="left" balign="left">StorageDead(_210)<br/>StorageDead(_208)<br/>StorageDead(_200)<br/>StorageDead(_197)<br/>StorageDead(_196)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb82__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">82</td></tr><tr><td align="left" balign="left">StorageDead(_222)<br/>StorageDead(_221)<br/>StorageDead(_220)<br/>StorageDead(_219)<br/>StorageDead(_218)<br/>StorageDead(_217)<br/></td></tr><tr><td align="left">_215 = &lt;std::result::Result&lt;(u64, i64, i64), error::ErrorCode&gt; as Try&gt;::branch(move _216)</td></tr></table>>];
    bb83__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">83</td></tr><tr><td align="left" balign="left">StorageDead(_216)<br/>_223 = discriminant(_215)<br/></td></tr><tr><td align="left">switchInt(move _223)</td></tr></table>>];
    bb84__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">84</td></tr><tr><td align="left" balign="left">StorageLive(_227)<br/>_227 = ((_215 as Continue).0: (u64, i64, i64))<br/>_214 = _227<br/>StorageDead(_227)<br/>StorageLive(_212)<br/>_212 = (_214.0: u64)<br/>StorageLive(_213)<br/>_213 = (_214.1: i64)<br/>StorageDead(_215)<br/>StorageDead(_214)<br/>StorageLive(_228)<br/>_229 = discriminant(_38)<br/></td></tr><tr><td align="left">switchInt(move _229)</td></tr></table>>];
    bb85__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">85</td></tr><tr><td align="left" balign="left">StorageLive(_224)<br/>_224 = ((_215 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_226)<br/>_226 = _224<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _226)</td></tr></table>>];
    bb86__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">86</td></tr><tr><td align="left" balign="left">StorageDead(_226)<br/>StorageDead(_224)<br/>StorageDead(_215)<br/>StorageDead(_214)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb87__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">87</td></tr><tr><td align="left" balign="left">_228 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb88__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">88</td></tr><tr><td align="left" balign="left">StorageLive(_230)<br/>_230 = ((_38 as Some).0: u64)<br/>StorageLive(_231)<br/>StorageLive(_232)<br/>StorageLive(_233)<br/>StorageLive(_234)<br/>_234 = _212<br/>StorageLive(_235)<br/>_235 = _37<br/>StorageLive(_236)<br/>_236 = _136<br/>StorageLive(_237)<br/>_237 = _230<br/>StorageLive(_238)<br/>StorageLive(_239)<br/>_239 = _134<br/>_238 = Not(move _239)<br/>StorageDead(_239)<br/></td></tr><tr><td align="left">_233 = math::orders::validate_fill_price(move _234, move _235, const _, move _236, move _237, move _238)</td></tr></table>>];
    bb89__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">89</td></tr><tr><td align="left" balign="left">StorageDead(_238)<br/>StorageDead(_237)<br/>StorageDead(_236)<br/>StorageDead(_235)<br/>StorageDead(_234)<br/></td></tr><tr><td align="left">_232 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _233)</td></tr></table>>];
    bb90__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">90</td></tr><tr><td align="left" balign="left">StorageDead(_233)<br/>_240 = discriminant(_232)<br/></td></tr><tr><td align="left">switchInt(move _240)</td></tr></table>>];
    bb91__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">91</td></tr><tr><td align="left" balign="left">StorageLive(_244)<br/>_244 = ((_232 as Continue).0: ())<br/>_231 = _244<br/>StorageDead(_244)<br/>StorageDead(_232)<br/>StorageDead(_231)<br/>_228 = const ()<br/>StorageDead(_230)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb92__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">92</td></tr><tr><td align="left" balign="left">StorageLive(_241)<br/>_241 = ((_232 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_243)<br/>_243 = _241<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _243)</td></tr></table>>];
    bb93__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">93</td></tr><tr><td align="left" balign="left">StorageDead(_243)<br/>StorageDead(_241)<br/>StorageDead(_232)<br/>StorageDead(_231)<br/>StorageDead(_230)<br/>StorageDead(_228)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb94__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">94</td></tr><tr><td align="left" balign="left">StorageDead(_228)<br/>StorageLive(_245)<br/>StorageLive(_246)<br/>_246 = &amp;mut (*_15)<br/>StorageLive(_247)<br/>_247 = ((*_4).21: u16)<br/></td></tr><tr><td align="left">_245 = can_reward_user_with_perp_pnl(move _246, move _247)</td></tr></table>>];
    bb95__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">95</td></tr><tr><td align="left" balign="left">StorageDead(_247)<br/>StorageDead(_246)<br/>StorageLive(_248)<br/>StorageLive(_249)<br/>StorageLive(_250)<br/>_250 = &amp;mut (*_11)<br/>StorageLive(_251)<br/>_251 = ((*_4).21: u16)<br/></td></tr><tr><td align="left">_249 = can_reward_user_with_perp_pnl(move _250, move _251)</td></tr></table>>];
    bb96__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">96</td></tr><tr><td align="left">switchInt(move _249)</td></tr></table>>];
    bb97__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">97</td></tr><tr><td align="left" balign="left">StorageDead(_251)<br/>StorageDead(_250)<br/>_248 = const true<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb98__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">98</td></tr><tr><td align="left" balign="left">StorageDead(_251)<br/>StorageDead(_250)<br/>StorageLive(_252)<br/>_252 = &amp;mut (*_13)<br/>StorageLive(_253)<br/>_253 = ((*_4).21: u16)<br/></td></tr><tr><td align="left">_248 = can_reward_user_with_perp_pnl(move _252, move _253)</td></tr></table>>];
    bb99__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">99</td></tr><tr><td align="left" balign="left">StorageDead(_253)<br/>StorageDead(_252)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb100__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">100</td></tr><tr><td align="left" balign="left">StorageDead(_249)<br/>StorageLive(_261)<br/>StorageLive(_262)<br/>StorageLive(_263)<br/>StorageLive(_264)<br/>_264 = &amp;(*_2)<br/>StorageLive(_265)<br/>_265 = _212<br/>StorageLive(_266)<br/>_266 = &amp;(*_17)<br/>StorageLive(_267)<br/>_267 = _135<br/>StorageLive(_268)<br/>_268 = _8<br/>StorageLive(_269)<br/>_269 = _248<br/>StorageLive(_270)<br/>_270 = _245<br/>StorageLive(_271)<br/>_271 = &amp;(*_16)<br/>StorageLive(_272)<br/>_272 = _213<br/>StorageLive(_273)<br/>_273 = _134<br/>StorageLive(_274)<br/>_274 = ((*_4).27: i16)<br/>StorageLive(_275)<br/>StorageLive(_276)<br/>_276 = &amp;(*_1)<br/>StorageLive(_277)<br/>_277 = math::margin::MarginRequirementType::Initial<br/></td></tr><tr><td align="left">_275 = User::is_high_leverage_mode(move _276, move _277)</td></tr></table>>];
    bb101__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">101</td></tr><tr><td align="left" balign="left">StorageDead(_277)<br/>StorageDead(_276)<br/></td></tr><tr><td align="left">_263 = calculate_fee_for_fulfillment_with_amm(move _264, move _265, move _266, move _267, move _268, move _269, move _270, move _271, move _272, move _273, move _274, move _275)</td></tr></table>>];
    bb102__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">102</td></tr><tr><td align="left" balign="left">StorageDead(_275)<br/>StorageDead(_274)<br/>StorageDead(_273)<br/>StorageDead(_272)<br/>StorageDead(_271)<br/>StorageDead(_270)<br/>StorageDead(_269)<br/>StorageDead(_268)<br/>StorageDead(_267)<br/>StorageDead(_266)<br/>StorageDead(_265)<br/>StorageDead(_264)<br/></td></tr><tr><td align="left">_262 = &lt;std::result::Result&lt;FillFees, error::ErrorCode&gt; as Try&gt;::branch(move _263)</td></tr></table>>];
    bb103__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">103</td></tr><tr><td align="left" balign="left">StorageDead(_263)<br/>_278 = discriminant(_262)<br/></td></tr><tr><td align="left">switchInt(move _278)</td></tr></table>>];
    bb104__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">104</td></tr><tr><td align="left" balign="left">StorageLive(_282)<br/>_282 = move ((_262 as Continue).0: math::fees::FillFees)<br/>_261 = move _282<br/>StorageDead(_282)<br/>StorageLive(_254)<br/>_254 = (_261.0: u64)<br/>StorageLive(_255)<br/>_255 = (_261.2: i64)<br/>StorageLive(_256)<br/>_256 = (_261.4: u64)<br/>StorageLive(_257)<br/>_257 = (_261.6: u64)<br/>StorageLive(_258)<br/>_258 = (_261.5: u64)<br/>StorageLive(_259)<br/>_259 = (_261.3: i64)<br/>StorageLive(_260)<br/>_260 = (_261.1: u64)<br/>StorageDead(_262)<br/>StorageDead(_261)<br/>StorageLive(_283)<br/>StorageLive(_284)<br/>StorageLive(_285)<br/>StorageLive(_286)<br/>_286 = _37<br/>StorageLive(_287)<br/>_287 = _212<br/>StorageLive(_288)<br/>_288 = _136<br/></td></tr><tr><td align="left">_285 = math::orders::get_position_delta_for_fill(move _286, move _287, move _288)</td></tr></table>>];
    bb105__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">105</td></tr><tr><td align="left" balign="left">StorageLive(_279)<br/>_279 = ((_262 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_281)<br/>_281 = _279<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _281)</td></tr></table>>];
    bb106__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">106</td></tr><tr><td align="left" balign="left">StorageDead(_281)<br/>StorageDead(_279)<br/>StorageDead(_262)<br/>StorageDead(_261)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb107__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">107</td></tr><tr><td align="left" balign="left">StorageDead(_288)<br/>StorageDead(_287)<br/>StorageDead(_286)<br/></td></tr><tr><td align="left">_284 = &lt;std::result::Result&lt;PositionDelta, error::ErrorCode&gt; as Try&gt;::branch(move _285)</td></tr></table>>];
    bb108__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">108</td></tr><tr><td align="left" balign="left">StorageDead(_285)<br/>_289 = discriminant(_284)<br/></td></tr><tr><td align="left">switchInt(move _289)</td></tr></table>>];
    bb109__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">109</td></tr><tr><td align="left" balign="left">StorageLive(_293)<br/>_293 = move ((_284 as Continue).0: controller::position::PositionDelta)<br/>_283 = move _293<br/>StorageDead(_293)<br/>StorageDead(_284)<br/>StorageLive(_294)<br/>StorageLive(_295)<br/>StorageLive(_296)<br/>StorageLive(_297)<br/>_297 = (((*_4).1: state::perp_market::AMM).28: i128)<br/>StorageLive(_298)<br/>StorageLive(_299)<br/>StorageLive(_300)<br/>StorageLive(_301)<br/>_301 = _255<br/></td></tr><tr><td align="left">_300 = &lt;i64 as Cast&gt;::cast::&lt;i128&gt;(move _301)</td></tr></table>>];
    bb110__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">110</td></tr><tr><td align="left" balign="left">StorageLive(_290)<br/>_290 = ((_284 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_292)<br/>_292 = _290<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _292)</td></tr></table>>];
    bb111__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">111</td></tr><tr><td align="left" balign="left">StorageDead(_292)<br/>StorageDead(_290)<br/>StorageDead(_284)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb112__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">112</td></tr><tr><td align="left" balign="left">StorageDead(_301)<br/></td></tr><tr><td align="left">_299 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _300)</td></tr></table>>];
    bb113__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">113</td></tr><tr><td align="left" balign="left">StorageDead(_300)<br/>_302 = discriminant(_299)<br/></td></tr><tr><td align="left">switchInt(move _302)</td></tr></table>>];
    bb114__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">114</td></tr><tr><td align="left" balign="left">StorageLive(_306)<br/>_306 = ((_299 as Continue).0: i128)<br/>_298 = _306<br/>StorageDead(_306)<br/></td></tr><tr><td align="left">_296 = &lt;i128 as SafeMath&gt;::safe_add(move _297, move _298)</td></tr></table>>];
    bb115__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">115</td></tr><tr><td align="left" balign="left">StorageLive(_303)<br/>_303 = ((_299 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_305)<br/>_305 = _303<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _305)</td></tr></table>>];
    bb116__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">116</td></tr><tr><td align="left" balign="left">StorageDead(_305)<br/>StorageDead(_303)<br/>StorageDead(_298)<br/>StorageDead(_297)<br/>StorageDead(_296)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb117__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">117</td></tr><tr><td align="left" balign="left">StorageDead(_298)<br/>StorageDead(_297)<br/></td></tr><tr><td align="left">_295 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _296)</td></tr></table>>];
    bb118__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">118</td></tr><tr><td align="left" balign="left">StorageDead(_296)<br/>_307 = discriminant(_295)<br/></td></tr><tr><td align="left">switchInt(move _307)</td></tr></table>>];
    bb119__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">119</td></tr><tr><td align="left" balign="left">StorageLive(_311)<br/>_311 = ((_295 as Continue).0: i128)<br/>_294 = _311<br/>StorageDead(_311)<br/>(((*_4).1: state::perp_market::AMM).28: i128) = move _294<br/>StorageDead(_294)<br/>StorageDead(_299)<br/>StorageDead(_295)<br/>StorageLive(_312)<br/>StorageLive(_313)<br/>StorageLive(_314)<br/>StorageLive(_315)<br/>_315 = (((*_4).1: state::perp_market::AMM).30: u128)<br/>StorageLive(_316)<br/>StorageLive(_317)<br/>StorageLive(_318)<br/>StorageLive(_319)<br/>_319 = _254<br/></td></tr><tr><td align="left">_318 = &lt;u64 as Cast&gt;::cast::&lt;u128&gt;(move _319)</td></tr></table>>];
    bb120__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">120</td></tr><tr><td align="left" balign="left">StorageLive(_308)<br/>_308 = ((_295 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_310)<br/>_310 = _308<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _310)</td></tr></table>>];
    bb121__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">121</td></tr><tr><td align="left" balign="left">StorageDead(_310)<br/>StorageDead(_308)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb122__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">122</td></tr><tr><td align="left" balign="left">StorageDead(_319)<br/></td></tr><tr><td align="left">_317 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _318)</td></tr></table>>];
    bb123__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">123</td></tr><tr><td align="left" balign="left">StorageDead(_318)<br/>_320 = discriminant(_317)<br/></td></tr><tr><td align="left">switchInt(move _320)</td></tr></table>>];
    bb124__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">124</td></tr><tr><td align="left" balign="left">StorageLive(_324)<br/>_324 = ((_317 as Continue).0: u128)<br/>_316 = _324<br/>StorageDead(_324)<br/></td></tr><tr><td align="left">_314 = &lt;u128 as SafeMath&gt;::safe_add(move _315, move _316)</td></tr></table>>];
    bb125__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">125</td></tr><tr><td align="left" balign="left">StorageLive(_321)<br/>_321 = ((_317 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_323)<br/>_323 = _321<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _323)</td></tr></table>>];
    bb126__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">126</td></tr><tr><td align="left" balign="left">StorageDead(_323)<br/>StorageDead(_321)<br/>StorageDead(_316)<br/>StorageDead(_315)<br/>StorageDead(_314)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb127__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">127</td></tr><tr><td align="left" balign="left">StorageDead(_316)<br/>StorageDead(_315)<br/></td></tr><tr><td align="left">_313 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _314)</td></tr></table>>];
    bb128__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">128</td></tr><tr><td align="left" balign="left">StorageDead(_314)<br/>_325 = discriminant(_313)<br/></td></tr><tr><td align="left">switchInt(move _325)</td></tr></table>>];
    bb129__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">129</td></tr><tr><td align="left" balign="left">StorageLive(_329)<br/>_329 = ((_313 as Continue).0: u128)<br/>_312 = _329<br/>StorageDead(_329)<br/>(((*_4).1: state::perp_market::AMM).30: u128) = move _312<br/>StorageDead(_312)<br/>StorageDead(_317)<br/>StorageDead(_313)<br/>StorageLive(_330)<br/>StorageLive(_331)<br/>StorageLive(_332)<br/>StorageLive(_333)<br/>_333 = (((*_4).1: state::perp_market::AMM).29: i128)<br/>StorageLive(_334)<br/>StorageLive(_335)<br/>StorageLive(_336)<br/>StorageLive(_337)<br/>_337 = _213<br/></td></tr><tr><td align="left">_336 = &lt;i64 as Cast&gt;::cast::&lt;i128&gt;(move _337)</td></tr></table>>];
    bb130__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">130</td></tr><tr><td align="left" balign="left">StorageLive(_326)<br/>_326 = ((_313 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_328)<br/>_328 = _326<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _328)</td></tr></table>>];
    bb131__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">131</td></tr><tr><td align="left" balign="left">StorageDead(_328)<br/>StorageDead(_326)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb132__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">132</td></tr><tr><td align="left" balign="left">StorageDead(_337)<br/></td></tr><tr><td align="left">_335 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _336)</td></tr></table>>];
    bb133__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">133</td></tr><tr><td align="left" balign="left">StorageDead(_336)<br/>_338 = discriminant(_335)<br/></td></tr><tr><td align="left">switchInt(move _338)</td></tr></table>>];
    bb134__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">134</td></tr><tr><td align="left" balign="left">StorageLive(_342)<br/>_342 = ((_335 as Continue).0: i128)<br/>_334 = _342<br/>StorageDead(_342)<br/></td></tr><tr><td align="left">_332 = &lt;i128 as SafeMath&gt;::safe_add(move _333, move _334)</td></tr></table>>];
    bb135__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">135</td></tr><tr><td align="left" balign="left">StorageLive(_339)<br/>_339 = ((_335 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_341)<br/>_341 = _339<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _341)</td></tr></table>>];
    bb136__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">136</td></tr><tr><td align="left" balign="left">StorageDead(_341)<br/>StorageDead(_339)<br/>StorageDead(_334)<br/>StorageDead(_333)<br/>StorageDead(_332)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb137__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">137</td></tr><tr><td align="left" balign="left">StorageDead(_334)<br/>StorageDead(_333)<br/></td></tr><tr><td align="left">_331 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _332)</td></tr></table>>];
    bb138__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">138</td></tr><tr><td align="left" balign="left">StorageDead(_332)<br/>_343 = discriminant(_331)<br/></td></tr><tr><td align="left">switchInt(move _343)</td></tr></table>>];
    bb139__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">139</td></tr><tr><td align="left" balign="left">StorageLive(_347)<br/>_347 = ((_331 as Continue).0: i128)<br/>_330 = _347<br/>StorageDead(_347)<br/>(((*_4).1: state::perp_market::AMM).29: i128) = move _330<br/>StorageDead(_330)<br/>StorageDead(_335)<br/>StorageDead(_331)<br/>StorageLive(_348)<br/>StorageLive(_349)<br/>StorageLive(_350)<br/>StorageLive(_351)<br/>_351 = (((*_4).1: state::perp_market::AMM).31: i128)<br/>StorageLive(_352)<br/>StorageLive(_353)<br/>StorageLive(_354)<br/>StorageLive(_355)<br/>_355 = _255<br/></td></tr><tr><td align="left">_354 = &lt;i64 as Cast&gt;::cast::&lt;i128&gt;(move _355)</td></tr></table>>];
    bb140__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">140</td></tr><tr><td align="left" balign="left">StorageLive(_344)<br/>_344 = ((_331 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_346)<br/>_346 = _344<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _346)</td></tr></table>>];
    bb141__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">141</td></tr><tr><td align="left" balign="left">StorageDead(_346)<br/>StorageDead(_344)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb142__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">142</td></tr><tr><td align="left" balign="left">StorageDead(_355)<br/></td></tr><tr><td align="left">_353 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _354)</td></tr></table>>];
    bb143__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">143</td></tr><tr><td align="left" balign="left">StorageDead(_354)<br/>_356 = discriminant(_353)<br/></td></tr><tr><td align="left">switchInt(move _356)</td></tr></table>>];
    bb144__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">144</td></tr><tr><td align="left" balign="left">StorageLive(_360)<br/>_360 = ((_353 as Continue).0: i128)<br/>_352 = _360<br/>StorageDead(_360)<br/></td></tr><tr><td align="left">_350 = &lt;i128 as SafeMath&gt;::safe_add(move _351, move _352)</td></tr></table>>];
    bb145__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">145</td></tr><tr><td align="left" balign="left">StorageLive(_357)<br/>_357 = ((_353 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_359)<br/>_359 = _357<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _359)</td></tr></table>>];
    bb146__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">146</td></tr><tr><td align="left" balign="left">StorageDead(_359)<br/>StorageDead(_357)<br/>StorageDead(_352)<br/>StorageDead(_351)<br/>StorageDead(_350)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb147__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">147</td></tr><tr><td align="left" balign="left">StorageDead(_352)<br/>StorageDead(_351)<br/></td></tr><tr><td align="left">_349 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _350)</td></tr></table>>];
    bb148__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">148</td></tr><tr><td align="left" balign="left">StorageDead(_350)<br/>_361 = discriminant(_349)<br/></td></tr><tr><td align="left">switchInt(move _361)</td></tr></table>>];
    bb149__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">149</td></tr><tr><td align="left" balign="left">StorageLive(_365)<br/>_365 = ((_349 as Continue).0: i128)<br/>_348 = _365<br/>StorageDead(_365)<br/>(((*_4).1: state::perp_market::AMM).31: i128) = move _348<br/>StorageDead(_348)<br/>StorageDead(_353)<br/>StorageDead(_349)<br/>StorageLive(_366)<br/>StorageLive(_367)<br/>StorageLive(_368)<br/>StorageLive(_369)<br/>_369 = (((*_4).1: state::perp_market::AMM).49: i64)<br/>StorageLive(_370)<br/>_370 = _255<br/></td></tr><tr><td align="left">_368 = &lt;i64 as SafeMath&gt;::safe_add(move _369, move _370)</td></tr></table>>];
    bb150__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">150</td></tr><tr><td align="left" balign="left">StorageLive(_362)<br/>_362 = ((_349 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_364)<br/>_364 = _362<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _364)</td></tr></table>>];
    bb151__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">151</td></tr><tr><td align="left" balign="left">StorageDead(_364)<br/>StorageDead(_362)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb152__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">152</td></tr><tr><td align="left" balign="left">StorageDead(_370)<br/>StorageDead(_369)<br/></td></tr><tr><td align="left">_367 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _368)</td></tr></table>>];
    bb153__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">153</td></tr><tr><td align="left" balign="left">StorageDead(_368)<br/>_371 = discriminant(_367)<br/></td></tr><tr><td align="left">switchInt(move _371)</td></tr></table>>];
    bb154__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">154</td></tr><tr><td align="left" balign="left">StorageLive(_375)<br/>_375 = ((_367 as Continue).0: i64)<br/>_366 = _375<br/>StorageDead(_375)<br/>(((*_4).1: state::perp_market::AMM).49: i64) = move _366<br/>StorageDead(_366)<br/>StorageDead(_367)<br/>StorageLive(_376)<br/>StorageLive(_377)<br/>StorageLive(_378)<br/>StorageLive(_379)<br/>_379 = &amp;mut (*_2)<br/>StorageLive(_380)<br/>_380 = _254<br/></td></tr><tr><td align="left">_378 = UserStats::increment_total_fees(move _379, move _380)</td></tr></table>>];
    bb155__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">155</td></tr><tr><td align="left" balign="left">StorageLive(_372)<br/>_372 = ((_367 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_374)<br/>_374 = _372<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _374)</td></tr></table>>];
    bb156__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">156</td></tr><tr><td align="left" balign="left">StorageDead(_374)<br/>StorageDead(_372)<br/>StorageDead(_366)<br/>StorageDead(_367)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb157__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">157</td></tr><tr><td align="left" balign="left">StorageDead(_380)<br/>StorageDead(_379)<br/></td></tr><tr><td align="left">_377 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _378)</td></tr></table>>];
    bb158__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">158</td></tr><tr><td align="left" balign="left">StorageDead(_378)<br/>_381 = discriminant(_377)<br/></td></tr><tr><td align="left">switchInt(move _381)</td></tr></table>>];
    bb159__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">159</td></tr><tr><td align="left" balign="left">StorageLive(_385)<br/>_385 = ((_377 as Continue).0: ())<br/>_376 = _385<br/>StorageDead(_385)<br/>StorageDead(_377)<br/>StorageDead(_376)<br/>StorageLive(_386)<br/>StorageLive(_387)<br/>StorageLive(_388)<br/>StorageLive(_389)<br/>_389 = &amp;mut (*_2)<br/>StorageLive(_390)<br/>_390 = _260<br/></td></tr><tr><td align="left">_388 = UserStats::increment_total_rebate(move _389, move _390)</td></tr></table>>];
    bb160__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">160</td></tr><tr><td align="left" balign="left">StorageLive(_382)<br/>_382 = ((_377 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_384)<br/>_384 = _382<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _384)</td></tr></table>>];
    bb161__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">161</td></tr><tr><td align="left" balign="left">StorageDead(_384)<br/>StorageDead(_382)<br/>StorageDead(_377)<br/>StorageDead(_376)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb162__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">162</td></tr><tr><td align="left" balign="left">StorageDead(_390)<br/>StorageDead(_389)<br/></td></tr><tr><td align="left">_387 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _388)</td></tr></table>>];
    bb163__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">163</td></tr><tr><td align="left" balign="left">StorageDead(_388)<br/>_391 = discriminant(_387)<br/></td></tr><tr><td align="left">switchInt(move _391)</td></tr></table>>];
    bb164__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">164</td></tr><tr><td align="left" balign="left">StorageLive(_395)<br/>_395 = ((_387 as Continue).0: ())<br/>_386 = _395<br/>StorageDead(_395)<br/>StorageDead(_387)<br/>StorageDead(_386)<br/>StorageLive(_396)<br/>StorageLive(_397)<br/>StorageLive(_398)<br/>StorageLive(_399)<br/>_399 = &amp;mut (*_2)<br/>StorageLive(_400)<br/>_400 = _257<br/></td></tr><tr><td align="left">_398 = UserStats::increment_total_referee_discount(move _399, move _400)</td></tr></table>>];
    bb165__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">165</td></tr><tr><td align="left" balign="left">StorageLive(_392)<br/>_392 = ((_387 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_394)<br/>_394 = _392<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _394)</td></tr></table>>];
    bb166__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">166</td></tr><tr><td align="left" balign="left">StorageDead(_394)<br/>StorageDead(_392)<br/>StorageDead(_387)<br/>StorageDead(_386)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb167__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">167</td></tr><tr><td align="left" balign="left">StorageDead(_400)<br/>StorageDead(_399)<br/></td></tr><tr><td align="left">_397 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _398)</td></tr></table>>];
    bb168__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">168</td></tr><tr><td align="left" balign="left">StorageDead(_398)<br/>_401 = discriminant(_397)<br/></td></tr><tr><td align="left">switchInt(move _401)</td></tr></table>>];
    bb169__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">169</td></tr><tr><td align="left" balign="left">StorageLive(_405)<br/>_405 = ((_397 as Continue).0: ())<br/>_396 = _405<br/>StorageDead(_405)<br/>StorageDead(_397)<br/>StorageDead(_396)<br/>StorageLive(_406)<br/>StorageLive(_407)<br/>StorageLive(_408)<br/>StorageLive(_409)<br/>_409 = &amp;mut (*_15)<br/></td></tr><tr><td align="left">_408 = Option::&lt;&amp;mut User&gt;::as_mut(move _409)</td></tr></table>>];
    bb170__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">170</td></tr><tr><td align="left" balign="left">StorageLive(_402)<br/>_402 = ((_397 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_404)<br/>_404 = _402<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _404)</td></tr></table>>];
    bb171__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">171</td></tr><tr><td align="left" balign="left">StorageDead(_404)<br/>StorageDead(_402)<br/>StorageDead(_397)<br/>StorageDead(_396)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb172__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">172</td></tr><tr><td align="left" balign="left">StorageDead(_409)<br/>StorageLive(_410)<br/>StorageLive(_411)<br/>_411 = &amp;mut (*_16)<br/></td></tr><tr><td align="left">_410 = Option::&lt;&amp;mut UserStats&gt;::as_mut(move _411)</td></tr></table>>];
    bb173__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">173</td></tr><tr><td align="left" balign="left">StorageDead(_411)<br/>_407 = (move _408, move _410)<br/>StorageDead(_410)<br/>StorageDead(_408)<br/>_413 = discriminant((_407.0: std::option::Option&lt;&amp;mut &amp;mut state::user::User&gt;))<br/></td></tr><tr><td align="left">switchInt(move _413)</td></tr></table>>];
    bb174__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">174</td></tr><tr><td align="left" balign="left">_412 = discriminant((_407.1: std::option::Option&lt;&amp;mut &amp;mut state::user::UserStats&gt;))<br/></td></tr><tr><td align="left">switchInt(move _412)</td></tr></table>>];
    bb175__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">175</td></tr><tr><td align="left" balign="left">StorageLive(_414)<br/>_414 = move (((_407.0: std::option::Option&lt;&amp;mut &amp;mut state::user::User&gt;) as Some).0: &amp;mut &amp;mut state::user::User)<br/>StorageLive(_415)<br/>_415 = move (((_407.1: std::option::Option&lt;&amp;mut &amp;mut state::user::UserStats&gt;) as Some).0: &amp;mut &amp;mut state::user::UserStats)<br/>StorageLive(_416)<br/>StorageLive(_417)<br/>_785 = deref_copy (*_414)<br/>_417 = &amp;mut (*_785)<br/>StorageLive(_418)<br/>_418 = ((*_4).21: u16)<br/></td></tr><tr><td align="left">_416 = User::force_get_perp_position_mut(move _417, move _418)</td></tr></table>>];
    bb176__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">176</td></tr><tr><td align="left" balign="left">StorageDead(_418)<br/>StorageDead(_417)<br/>_419 = discriminant(_416)<br/></td></tr><tr><td align="left">switchInt(move _419)</td></tr></table>>];
    bb177__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">177</td></tr><tr><td align="left" balign="left">StorageLive(_420)<br/>_420 = move ((_416 as Ok).0: &amp;mut state::user::PerpPosition)<br/>StorageLive(_421)<br/>StorageLive(_422)<br/>StorageLive(_423)<br/>_423 = _258<br/>_422 = Gt(move _423, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _422)</td></tr></table>>];
    bb178__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">178</td></tr><tr><td align="left" balign="left">StorageDead(_423)<br/>StorageLive(_424)<br/>StorageLive(_425)<br/>StorageLive(_426)<br/>StorageLive(_427)<br/>_427 = &amp;mut (*_420)<br/>StorageLive(_428)<br/>_428 = &amp;mut (*_4)<br/>StorageLive(_429)<br/>StorageLive(_430)<br/>StorageLive(_431)<br/>StorageLive(_432)<br/>_432 = _258<br/></td></tr><tr><td align="left">_431 = &lt;u64 as Cast&gt;::cast::&lt;i64&gt;(move _432)</td></tr></table>>];
    bb179__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">179</td></tr><tr><td align="left" balign="left">StorageDead(_432)<br/></td></tr><tr><td align="left">_430 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _431)</td></tr></table>>];
    bb180__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">180</td></tr><tr><td align="left" balign="left">StorageDead(_431)<br/>_433 = discriminant(_430)<br/></td></tr><tr><td align="left">switchInt(move _433)</td></tr></table>>];
    bb181__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">181</td></tr><tr><td align="left" balign="left">StorageLive(_437)<br/>_437 = ((_430 as Continue).0: i64)<br/>_429 = _437<br/>StorageDead(_437)<br/></td></tr><tr><td align="left">_426 = update_quote_asset_amount(move _427, move _428, move _429)</td></tr></table>>];
    bb182__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">182</td></tr><tr><td align="left" balign="left">StorageLive(_434)<br/>_434 = ((_430 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_436)<br/>_436 = _434<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _436)</td></tr></table>>];
    bb183__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">183</td></tr><tr><td align="left" balign="left">StorageDead(_436)<br/>StorageDead(_434)<br/>StorageDead(_429)<br/>StorageDead(_428)<br/>StorageDead(_427)<br/>StorageDead(_426)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb184__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">184</td></tr><tr><td align="left" balign="left">StorageDead(_429)<br/>StorageDead(_428)<br/>StorageDead(_427)<br/></td></tr><tr><td align="left">_425 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _426)</td></tr></table>>];
    bb185__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">185</td></tr><tr><td align="left" balign="left">StorageDead(_426)<br/>_438 = discriminant(_425)<br/></td></tr><tr><td align="left">switchInt(move _438)</td></tr></table>>];
    bb186__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">186</td></tr><tr><td align="left" balign="left">StorageLive(_442)<br/>_442 = ((_425 as Continue).0: ())<br/>_424 = _442<br/>StorageDead(_442)<br/>StorageDead(_430)<br/>StorageDead(_425)<br/>StorageDead(_424)<br/>_421 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb187__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">187</td></tr><tr><td align="left" balign="left">StorageLive(_439)<br/>_439 = ((_425 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_441)<br/>_441 = _439<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _441)</td></tr></table>>];
    bb188__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">188</td></tr><tr><td align="left" balign="left">StorageDead(_441)<br/>StorageDead(_439)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb189__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">189</td></tr><tr><td align="left" balign="left">StorageDead(_423)<br/>_421 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb190__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">190</td></tr><tr><td align="left" balign="left">StorageDead(_422)<br/>StorageDead(_421)<br/>StorageLive(_443)<br/>StorageLive(_444)<br/>StorageLive(_445)<br/>StorageLive(_446)<br/>_786 = deref_copy (*_415)<br/>_446 = &amp;mut (*_786)<br/>StorageLive(_447)<br/>_447 = _258<br/>StorageLive(_448)<br/>_448 = _7<br/></td></tr><tr><td align="left">_445 = UserStats::increment_total_referrer_reward(move _446, move _447, move _448)</td></tr></table>>];
    bb191__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">191</td></tr><tr><td align="left" balign="left">StorageDead(_448)<br/>StorageDead(_447)<br/>StorageDead(_446)<br/></td></tr><tr><td align="left">_444 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _445)</td></tr></table>>];
    bb192__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">192</td></tr><tr><td align="left" balign="left">StorageDead(_445)<br/>_449 = discriminant(_444)<br/></td></tr><tr><td align="left">switchInt(move _449)</td></tr></table>>];
    bb193__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">193</td></tr><tr><td align="left" balign="left">StorageLive(_453)<br/>_453 = ((_444 as Continue).0: ())<br/>_443 = _453<br/>StorageDead(_453)<br/>StorageDead(_444)<br/>StorageDead(_443)<br/>_406 = const ()<br/>StorageDead(_420)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb194__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">194</td></tr><tr><td align="left" balign="left">StorageLive(_450)<br/>_450 = ((_444 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_452)<br/>_452 = _450<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _452)</td></tr></table>>];
    bb195__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">195</td></tr><tr><td align="left" balign="left">StorageDead(_452)<br/>StorageDead(_450)<br/>StorageDead(_444)<br/>StorageDead(_443)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb196__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">196</td></tr><tr><td align="left" balign="left">_406 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb197__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">197</td></tr><tr><td align="left" balign="left">StorageDead(_416)<br/>StorageDead(_415)<br/>StorageDead(_414)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb198__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">198</td></tr><tr><td align="left" balign="left">_406 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb199__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">199</td></tr><tr><td align="left" balign="left">StorageDead(_407)<br/>StorageDead(_406)<br/>StorageLive(_454)<br/>StorageLive(_455)<br/>StorageLive(_456)<br/>StorageLive(_457)<br/>StorageLive(_458)<br/>_458 = &amp;((*_1).4: [state::user::PerpPosition; 8])<br/>_457 = &amp;(*_458)<br/>StorageLive(_459)<br/>_459 = ((*_4).21: u16)<br/></td></tr><tr><td align="left">_456 = get_position_index(move _457, move _459)</td></tr></table>>];
    bb200__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">200</td></tr><tr><td align="left" balign="left">StorageDead(_459)<br/>StorageDead(_457)<br/></td></tr><tr><td align="left">_455 = &lt;std::result::Result&lt;usize, error::ErrorCode&gt; as Try&gt;::branch(move _456)</td></tr></table>>];
    bb201__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">201</td></tr><tr><td align="left" balign="left">StorageDead(_456)<br/>_460 = discriminant(_455)<br/></td></tr><tr><td align="left">switchInt(move _460)</td></tr></table>>];
    bb202__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">202</td></tr><tr><td align="left" balign="left">StorageLive(_464)<br/>_464 = ((_455 as Continue).0: usize)<br/>_454 = _464<br/>StorageDead(_464)<br/>StorageDead(_458)<br/>StorageDead(_455)<br/>StorageLive(_465)<br/>StorageLive(_466)<br/>StorageLive(_467)<br/>_467 = _254<br/>_466 = Ne(move _467, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _466)</td></tr></table>>];
    bb203__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">203</td></tr><tr><td align="left" balign="left">StorageLive(_461)<br/>_461 = ((_455 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_463)<br/>_463 = _461<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _463)</td></tr></table>>];
    bb204__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">204</td></tr><tr><td align="left" balign="left">StorageDead(_463)<br/>StorageDead(_461)<br/>StorageDead(_458)<br/>StorageDead(_455)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb205__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">205</td></tr><tr><td align="left" balign="left">StorageDead(_467)<br/>StorageLive(_468)<br/>StorageLive(_469)<br/>StorageLive(_470)<br/>StorageLive(_471)<br/>StorageLive(_472)<br/>StorageLive(_473)<br/>_473 = _454<br/>_474 = Len(((*_1).4: [state::user::PerpPosition; 8]))<br/>_475 = Lt(_473, _474)<br/></td></tr><tr><td align="left">assert(move _475, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _474, _473)</td></tr></table>>];
    bb206__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">206</td></tr><tr><td align="left" balign="left">StorageDead(_467)<br/>_465 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb207__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">207</td></tr><tr><td align="left" balign="left">_472 = &amp;mut ((*_1).4: [state::user::PerpPosition; 8])[_473]<br/>_471 = &amp;mut (*_472)<br/>StorageLive(_476)<br/>_476 = &amp;mut (*_4)<br/>StorageLive(_477)<br/>StorageLive(_478)<br/>StorageLive(_479)<br/>StorageLive(_480)<br/>StorageLive(_481)<br/>_481 = _254<br/></td></tr><tr><td align="left">_480 = &lt;u64 as Cast&gt;::cast::&lt;i64&gt;(move _481)</td></tr></table>>];
    bb208__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">208</td></tr><tr><td align="left" balign="left">StorageDead(_481)<br/></td></tr><tr><td align="left">_479 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _480)</td></tr></table>>];
    bb209__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">209</td></tr><tr><td align="left" balign="left">StorageDead(_480)<br/>_482 = discriminant(_479)<br/></td></tr><tr><td align="left">switchInt(move _482)</td></tr></table>>];
    bb210__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">210</td></tr><tr><td align="left" balign="left">StorageLive(_486)<br/>_486 = ((_479 as Continue).0: i64)<br/>_478 = _486<br/>StorageDead(_486)<br/>_487 = Eq(_478, const i64::MIN)<br/></td></tr><tr><td align="left">assert(!move _487, &quot;attempt to negate `{}`, which would overflow&quot;, _478)</td></tr></table>>];
    bb211__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">211</td></tr><tr><td align="left" balign="left">StorageLive(_483)<br/>_483 = ((_479 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_485)<br/>_485 = _483<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _485)</td></tr></table>>];
    bb212__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">212</td></tr><tr><td align="left" balign="left">StorageDead(_485)<br/>StorageDead(_483)<br/>StorageDead(_478)<br/>StorageDead(_477)<br/>StorageDead(_476)<br/>StorageDead(_471)<br/>StorageDead(_470)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb213__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">213</td></tr><tr><td align="left" balign="left">_477 = Neg(move _478)<br/>StorageDead(_478)<br/></td></tr><tr><td align="left">_470 = update_quote_asset_and_break_even_amount(move _471, move _476, move _477)</td></tr></table>>];
    bb214__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">214</td></tr><tr><td align="left" balign="left">StorageDead(_477)<br/>StorageDead(_476)<br/>StorageDead(_471)<br/></td></tr><tr><td align="left">_469 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _470)</td></tr></table>>];
    bb215__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">215</td></tr><tr><td align="left" balign="left">StorageDead(_470)<br/>_488 = discriminant(_469)<br/></td></tr><tr><td align="left">switchInt(move _488)</td></tr></table>>];
    bb216__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">216</td></tr><tr><td align="left" balign="left">StorageLive(_492)<br/>_492 = ((_469 as Continue).0: ())<br/>_468 = _492<br/>StorageDead(_492)<br/>StorageDead(_479)<br/>StorageDead(_473)<br/>StorageDead(_472)<br/>StorageDead(_469)<br/>StorageDead(_468)<br/>_465 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb217__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">217</td></tr><tr><td align="left" balign="left">StorageLive(_489)<br/>_489 = ((_469 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_491)<br/>_491 = _489<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _491)</td></tr></table>>];
    bb218__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">218</td></tr><tr><td align="left" balign="left">StorageDead(_491)<br/>StorageDead(_489)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb219__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">219</td></tr><tr><td align="left" balign="left">StorageDead(_466)<br/>StorageDead(_465)<br/>StorageLive(_493)<br/>StorageLive(_494)<br/>StorageLive(_495)<br/>_495 = _260<br/>_494 = Ne(move _495, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _494)</td></tr></table>>];
    bb220__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">220</td></tr><tr><td align="left" balign="left">StorageDead(_495)<br/>StorageLive(_496)<br/>StorageLive(_497)<br/>StorageLive(_498)<br/>StorageLive(_499)<br/>StorageLive(_500)<br/>StorageLive(_501)<br/>_501 = _454<br/>_502 = Len(((*_1).4: [state::user::PerpPosition; 8]))<br/>_503 = Lt(_501, _502)<br/></td></tr><tr><td align="left">assert(move _503, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _502, _501)</td></tr></table>>];
    bb221__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">221</td></tr><tr><td align="left" balign="left">_500 = &amp;mut ((*_1).4: [state::user::PerpPosition; 8])[_501]<br/>_499 = &amp;mut (*_500)<br/>StorageLive(_504)<br/>_504 = &amp;mut (*_4)<br/>StorageLive(_505)<br/>StorageLive(_506)<br/>StorageLive(_507)<br/>StorageLive(_508)<br/>_508 = _260<br/></td></tr><tr><td align="left">_507 = &lt;u64 as Cast&gt;::cast::&lt;i64&gt;(move _508)</td></tr></table>>];
    bb222__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">222</td></tr><tr><td align="left" balign="left">StorageDead(_508)<br/></td></tr><tr><td align="left">_506 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _507)</td></tr></table>>];
    bb223__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">223</td></tr><tr><td align="left" balign="left">StorageDead(_507)<br/>_509 = discriminant(_506)<br/></td></tr><tr><td align="left">switchInt(move _509)</td></tr></table>>];
    bb224__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">224</td></tr><tr><td align="left" balign="left">StorageLive(_513)<br/>_513 = ((_506 as Continue).0: i64)<br/>_505 = _513<br/>StorageDead(_513)<br/></td></tr><tr><td align="left">_498 = update_quote_asset_and_break_even_amount(move _499, move _504, move _505)</td></tr></table>>];
    bb225__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">225</td></tr><tr><td align="left" balign="left">StorageLive(_510)<br/>_510 = ((_506 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_512)<br/>_512 = _510<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _512)</td></tr></table>>];
    bb226__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">226</td></tr><tr><td align="left" balign="left">StorageDead(_512)<br/>StorageDead(_510)<br/>StorageDead(_505)<br/>StorageDead(_504)<br/>StorageDead(_499)<br/>StorageDead(_498)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb227__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">227</td></tr><tr><td align="left" balign="left">StorageDead(_505)<br/>StorageDead(_504)<br/>StorageDead(_499)<br/></td></tr><tr><td align="left">_497 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _498)</td></tr></table>>];
    bb228__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">228</td></tr><tr><td align="left" balign="left">StorageDead(_498)<br/>_514 = discriminant(_497)<br/></td></tr><tr><td align="left">switchInt(move _514)</td></tr></table>>];
    bb229__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">229</td></tr><tr><td align="left" balign="left">StorageLive(_518)<br/>_518 = ((_497 as Continue).0: ())<br/>_496 = _518<br/>StorageDead(_518)<br/>StorageDead(_506)<br/>StorageDead(_501)<br/>StorageDead(_500)<br/>StorageDead(_497)<br/>StorageDead(_496)<br/>_493 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb230__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">230</td></tr><tr><td align="left" balign="left">StorageLive(_515)<br/>_515 = ((_497 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_517)<br/>_517 = _515<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _517)</td></tr></table>>];
    bb231__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">231</td></tr><tr><td align="left" balign="left">StorageDead(_517)<br/>StorageDead(_515)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb232__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">232</td></tr><tr><td align="left" balign="left">StorageDead(_495)<br/>_493 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb233__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">233</td></tr><tr><td align="left" balign="left">StorageDead(_494)<br/>StorageDead(_493)<br/>StorageLive(_519)<br/>StorageLive(_520)<br/>_520 = _134<br/></td></tr><tr><td align="left">switchInt(move _520)</td></tr></table>>];
    bb234__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">234</td></tr><tr><td align="left" balign="left">StorageLive(_521)<br/>StorageLive(_522)<br/>StorageLive(_523)<br/>StorageLive(_524)<br/>_524 = &amp;mut (*_2)<br/>StorageLive(_525)<br/>_525 = ((*_4).30: u8)<br/>StorageLive(_526)<br/>_526 = _212<br/>StorageLive(_527)<br/>_527 = _7<br/></td></tr><tr><td align="left">_523 = UserStats::update_maker_volume_30d(move _524, move _525, move _526, move _527)</td></tr></table>>];
    bb235__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">235</td></tr><tr><td align="left" balign="left">StorageDead(_527)<br/>StorageDead(_526)<br/>StorageDead(_525)<br/>StorageDead(_524)<br/></td></tr><tr><td align="left">_522 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _523)</td></tr></table>>];
    bb236__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">236</td></tr><tr><td align="left" balign="left">StorageDead(_523)<br/>_528 = discriminant(_522)<br/></td></tr><tr><td align="left">switchInt(move _528)</td></tr></table>>];
    bb237__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">237</td></tr><tr><td align="left" balign="left">StorageLive(_532)<br/>_532 = ((_522 as Continue).0: ())<br/>_521 = _532<br/>StorageDead(_532)<br/>StorageDead(_522)<br/>StorageDead(_521)<br/>_519 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb238__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">238</td></tr><tr><td align="left" balign="left">StorageLive(_529)<br/>_529 = ((_522 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_531)<br/>_531 = _529<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _531)</td></tr></table>>];
    bb239__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">239</td></tr><tr><td align="left" balign="left">StorageDead(_531)<br/>StorageDead(_529)<br/>StorageDead(_522)<br/>StorageDead(_521)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb240__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">240</td></tr><tr><td align="left" balign="left">StorageLive(_533)<br/>StorageLive(_534)<br/>StorageLive(_535)<br/>StorageLive(_536)<br/>_536 = &amp;mut (*_2)<br/>StorageLive(_537)<br/>_537 = ((*_4).29: u8)<br/>StorageLive(_538)<br/>_538 = _212<br/>StorageLive(_539)<br/>_539 = _7<br/></td></tr><tr><td align="left">_535 = UserStats::update_taker_volume_30d(move _536, move _537, move _538, move _539)</td></tr></table>>];
    bb241__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">241</td></tr><tr><td align="left" balign="left">StorageDead(_539)<br/>StorageDead(_538)<br/>StorageDead(_537)<br/>StorageDead(_536)<br/></td></tr><tr><td align="left">_534 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _535)</td></tr></table>>];
    bb242__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">242</td></tr><tr><td align="left" balign="left">StorageDead(_535)<br/>_540 = discriminant(_534)<br/></td></tr><tr><td align="left">switchInt(move _540)</td></tr></table>>];
    bb243__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">243</td></tr><tr><td align="left" balign="left">StorageLive(_544)<br/>_544 = ((_534 as Continue).0: ())<br/>_533 = _544<br/>StorageDead(_544)<br/>StorageDead(_534)<br/>StorageDead(_533)<br/>_519 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb244__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">244</td></tr><tr><td align="left" balign="left">StorageLive(_541)<br/>_541 = ((_534 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_543)<br/>_543 = _541<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _543)</td></tr></table>>];
    bb245__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">245</td></tr><tr><td align="left" balign="left">StorageDead(_543)<br/>StorageDead(_541)<br/>StorageDead(_534)<br/>StorageDead(_533)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb246__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">246</td></tr><tr><td align="left" balign="left">StorageDead(_520)<br/>StorageDead(_519)<br/>StorageLive(_545)<br/>StorageLive(_546)<br/>StorageLive(_547)<br/>_547 = &amp;mut (*_11)<br/></td></tr><tr><td align="left">_546 = Option::&lt;&amp;mut User&gt;::as_mut(move _547)</td></tr></table>>];
    bb247__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">247</td></tr><tr><td align="left" balign="left">StorageDead(_547)<br/>_548 = discriminant(_546)<br/></td></tr><tr><td align="left">switchInt(move _548)</td></tr></table>>];
    bb248__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">248</td></tr><tr><td align="left" balign="left">StorageLive(_549)<br/>_549 = move ((_546 as Some).0: &amp;mut &amp;mut state::user::User)<br/>StorageLive(_550)<br/>StorageLive(_551)<br/>StorageLive(_552)<br/>StorageLive(_553)<br/>_787 = deref_copy (*_549)<br/>_553 = &amp;mut (*_787)<br/>StorageLive(_554)<br/>_554 = &amp;mut (*_12)<br/>StorageLive(_555)<br/>_555 = &amp;mut (*_4)<br/>StorageLive(_556)<br/>_556 = _256<br/>StorageLive(_557)<br/>_557 = _212<br/>StorageLive(_558)<br/>_558 = _7<br/>StorageLive(_559)<br/>_559 = _8<br/></td></tr><tr><td align="left">_552 = credit_filler_perp_pnl(move _553, move _554, move _555, move _556, move _557, move _558, move _559)</td></tr></table>>];
    bb249__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">249</td></tr><tr><td align="left" balign="left">StorageDead(_559)<br/>StorageDead(_558)<br/>StorageDead(_557)<br/>StorageDead(_556)<br/>StorageDead(_555)<br/>StorageDead(_554)<br/>StorageDead(_553)<br/></td></tr><tr><td align="left">_551 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _552)</td></tr></table>>];
    bb250__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">250</td></tr><tr><td align="left" balign="left">StorageDead(_552)<br/>_560 = discriminant(_551)<br/></td></tr><tr><td align="left">switchInt(move _560)</td></tr></table>>];
    bb251__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">251</td></tr><tr><td align="left" balign="left">StorageLive(_564)<br/>_564 = ((_551 as Continue).0: ())<br/>_550 = _564<br/>StorageDead(_564)<br/>StorageDead(_551)<br/>StorageDead(_550)<br/>_545 = const ()<br/>StorageDead(_549)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb252__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">252</td></tr><tr><td align="left" balign="left">StorageLive(_561)<br/>_561 = ((_551 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_563)<br/>_563 = _561<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _563)</td></tr></table>>];
    bb253__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">253</td></tr><tr><td align="left" balign="left">StorageDead(_563)<br/>StorageDead(_561)<br/>StorageDead(_551)<br/>StorageDead(_550)<br/>StorageDead(_549)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb254__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">254</td></tr><tr><td align="left" balign="left">StorageLive(_565)<br/>StorageLive(_566)<br/>_566 = &amp;mut (*_13)<br/></td></tr><tr><td align="left">_565 = Option::&lt;&amp;mut User&gt;::as_mut(move _566)</td></tr></table>>];
    bb255__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">255</td></tr><tr><td align="left" balign="left">StorageDead(_566)<br/>_567 = discriminant(_565)<br/></td></tr><tr><td align="left">switchInt(move _567)</td></tr></table>>];
    bb256__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">256</td></tr><tr><td align="left" balign="left">StorageLive(_568)<br/>_568 = move ((_565 as Some).0: &amp;mut &amp;mut state::user::User)<br/>StorageLive(_569)<br/>StorageLive(_570)<br/>StorageLive(_571)<br/>StorageLive(_572)<br/>_788 = deref_copy (*_568)<br/>_572 = &amp;mut (*_788)<br/>StorageLive(_573)<br/>_573 = &amp;mut (*_14)<br/>StorageLive(_574)<br/>_574 = &amp;mut (*_4)<br/>StorageLive(_575)<br/>_575 = _256<br/>StorageLive(_576)<br/>_576 = _212<br/>StorageLive(_577)<br/>_577 = _7<br/>StorageLive(_578)<br/>_578 = _8<br/></td></tr><tr><td align="left">_571 = credit_filler_perp_pnl(move _572, move _573, move _574, move _575, move _576, move _577, move _578)</td></tr></table>>];
    bb257__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">257</td></tr><tr><td align="left" balign="left">StorageDead(_578)<br/>StorageDead(_577)<br/>StorageDead(_576)<br/>StorageDead(_575)<br/>StorageDead(_574)<br/>StorageDead(_573)<br/>StorageDead(_572)<br/></td></tr><tr><td align="left">_570 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _571)</td></tr></table>>];
    bb258__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">258</td></tr><tr><td align="left" balign="left">StorageDead(_571)<br/>_579 = discriminant(_570)<br/></td></tr><tr><td align="left">switchInt(move _579)</td></tr></table>>];
    bb259__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">259</td></tr><tr><td align="left" balign="left">StorageLive(_583)<br/>_583 = ((_570 as Continue).0: ())<br/>_569 = _583<br/>StorageDead(_583)<br/>StorageDead(_570)<br/>StorageDead(_569)<br/>_545 = const ()<br/>StorageDead(_568)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb260__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">260</td></tr><tr><td align="left" balign="left">StorageLive(_580)<br/>_580 = ((_570 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_582)<br/>_582 = _580<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _582)</td></tr></table>>];
    bb261__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">261</td></tr><tr><td align="left" balign="left">StorageDead(_582)<br/>StorageDead(_580)<br/>StorageDead(_570)<br/>StorageDead(_569)<br/>StorageDead(_568)<br/>StorageDead(_565)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb262__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">262</td></tr><tr><td align="left" balign="left">_545 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb263__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">263</td></tr><tr><td align="left" balign="left">StorageDead(_565)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb264__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">264</td></tr><tr><td align="left" balign="left">StorageDead(_546)<br/>StorageDead(_545)<br/>StorageLive(_584)<br/>StorageLive(_585)<br/>StorageLive(_586)<br/>StorageLive(_587)<br/>StorageLive(_588)<br/>StorageLive(_589)<br/>_589 = _3<br/>_590 = Len(((*_1).5: [state::user::Order; 32]))<br/>_591 = Lt(_589, _590)<br/></td></tr><tr><td align="left">assert(move _591, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _590, _589)</td></tr></table>>];
    bb265__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">265</td></tr><tr><td align="left" balign="left">_588 = &amp;mut ((*_1).5: [state::user::Order; 32])[_589]<br/>_587 = &amp;mut (*_588)<br/>StorageLive(_592)<br/>_592 = _37<br/>StorageLive(_593)<br/>_593 = _212<br/></td></tr><tr><td align="left">_586 = update_order_after_fill(move _587, move _592, move _593)</td></tr></table>>];
    bb266__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">266</td></tr><tr><td align="left" balign="left">StorageDead(_593)<br/>StorageDead(_592)<br/>StorageDead(_587)<br/></td></tr><tr><td align="left">_585 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _586)</td></tr></table>>];
    bb267__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">267</td></tr><tr><td align="left" balign="left">StorageDead(_586)<br/>_594 = discriminant(_585)<br/></td></tr><tr><td align="left">switchInt(move _594)</td></tr></table>>];
    bb268__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">268</td></tr><tr><td align="left" balign="left">StorageLive(_598)<br/>_598 = ((_585 as Continue).0: ())<br/>_584 = _598<br/>StorageDead(_598)<br/>StorageDead(_589)<br/>StorageDead(_588)<br/>StorageDead(_585)<br/>StorageDead(_584)<br/>StorageLive(_599)<br/>StorageLive(_600)<br/>StorageLive(_601)<br/>StorageLive(_602)<br/>StorageLive(_603)<br/>StorageLive(_604)<br/>_604 = _454<br/>_605 = Len(((*_1).4: [state::user::PerpPosition; 8]))<br/>_606 = Lt(_604, _605)<br/></td></tr><tr><td align="left">assert(move _606, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _605, _604)</td></tr></table>>];
    bb269__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">269</td></tr><tr><td align="left" balign="left">StorageLive(_595)<br/>_595 = ((_585 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_597)<br/>_597 = _595<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _597)</td></tr></table>>];
    bb270__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">270</td></tr><tr><td align="left" balign="left">StorageDead(_597)<br/>StorageDead(_595)<br/>StorageDead(_589)<br/>StorageDead(_588)<br/>StorageDead(_585)<br/>StorageDead(_584)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb271__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">271</td></tr><tr><td align="left" balign="left">_603 = &amp;mut ((*_1).4: [state::user::PerpPosition; 8])[_604]<br/>_602 = &amp;mut (*_603)<br/>StorageLive(_607)<br/>StorageLive(_608)<br/>_608 = &amp;_136<br/>_607 = &amp;(*_608)<br/>StorageLive(_609)<br/>_609 = _37<br/>StorageLive(_610)<br/>StorageLive(_611)<br/>StorageLive(_612)<br/>_612 = _3<br/>_613 = Len(((*_1).5: [state::user::Order; 32]))<br/>_614 = Lt(_612, _613)<br/></td></tr><tr><td align="left">assert(move _614, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _613, _612)</td></tr></table>>];
    bb272__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">272</td></tr><tr><td align="left" balign="left">_611 = &amp;((*_1).5: [state::user::Order; 32])[_612]<br/></td></tr><tr><td align="left">_610 = Order::update_open_bids_and_asks(move _611)</td></tr></table>>];
    bb273__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">273</td></tr><tr><td align="left" balign="left">StorageDead(_611)<br/></td></tr><tr><td align="left">_601 = decrease_open_bids_and_asks(move _602, move _607, move _609, move _610)</td></tr></table>>];
    bb274__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">274</td></tr><tr><td align="left" balign="left">StorageDead(_610)<br/>StorageDead(_609)<br/>StorageDead(_607)<br/>StorageDead(_602)<br/></td></tr><tr><td align="left">_600 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _601)</td></tr></table>>];
    bb275__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">275</td></tr><tr><td align="left" balign="left">StorageDead(_601)<br/>_615 = discriminant(_600)<br/></td></tr><tr><td align="left">switchInt(move _615)</td></tr></table>>];
    bb276__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">276</td></tr><tr><td align="left" balign="left">StorageLive(_619)<br/>_619 = ((_600 as Continue).0: ())<br/>_599 = _619<br/>StorageDead(_619)<br/>StorageDead(_612)<br/>StorageDead(_608)<br/>StorageDead(_604)<br/>StorageDead(_603)<br/>StorageDead(_600)<br/>StorageDead(_599)<br/>StorageLive(_624)<br/>StorageLive(_625)<br/>_625 = &amp;(*_9)<br/>StorageLive(_626)<br/>StorageLive(_627)<br/>StorageLive(_628)<br/>_628 = _3<br/>_629 = Len(((*_1).5: [state::user::Order; 32]))<br/>_630 = Lt(_628, _629)<br/></td></tr><tr><td align="left">assert(move _630, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _629, _628)</td></tr></table>>];
    bb277__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">277</td></tr><tr><td align="left" balign="left">StorageLive(_616)<br/>_616 = ((_600 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_618)<br/>_618 = _616<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _618)</td></tr></table>>];
    bb278__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">278</td></tr><tr><td align="left" balign="left">StorageDead(_618)<br/>StorageDead(_616)<br/>StorageDead(_612)<br/>StorageDead(_608)<br/>StorageDead(_604)<br/>StorageDead(_603)<br/>StorageDead(_600)<br/>StorageDead(_599)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb279__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">279</td></tr><tr><td align="left" balign="left">_627 = &amp;((*_1).5: [state::user::Order; 32])[_628]<br/>_626 = &amp;(*_627)<br/></td></tr><tr><td align="left">_624 = get_taker_and_maker_for_order_record(move _625, move _626)</td></tr></table>>];
    bb280__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">280</td></tr><tr><td align="left" balign="left">StorageDead(_626)<br/>StorageDead(_625)<br/>StorageLive(_620)<br/>_620 = (_624.0: std::option::Option&lt;anchor_lang::prelude::Pubkey&gt;)<br/>StorageLive(_621)<br/>_621 = (_624.1: std::option::Option&lt;state::user::Order&gt;)<br/>StorageLive(_622)<br/>_622 = (_624.2: std::option::Option&lt;anchor_lang::prelude::Pubkey&gt;)<br/>StorageLive(_623)<br/>_623 = (_624.3: std::option::Option&lt;state::user::Order&gt;)<br/>StorageDead(_628)<br/>StorageDead(_627)<br/>StorageDead(_624)<br/>StorageLive(_631)<br/>StorageLive(_632)<br/>_632 = ((*_4).8: u64)<br/>StorageLive(_633)<br/>StorageLive(_634)<br/>StorageLive(_635)<br/>StorageLive(_636)<br/>_636 = _632<br/></td></tr><tr><td align="left">_635 = core::num::&lt;impl u64&gt;::checked_add(move _636, const 1_u64)</td></tr></table>>];
    bb281__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">281</td></tr><tr><td align="left" balign="left">StorageDead(_636)<br/>StorageLive(_637)<br/>_637 = Option::&lt;u64&gt;::Some(const 1_u64)<br/></td></tr><tr><td align="left">_634 = Option::&lt;u64&gt;::or(move _635, move _637)</td></tr></table>>];
    bb282__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">282</td></tr><tr><td align="left" balign="left">StorageDead(_637)<br/>StorageDead(_635)<br/></td></tr><tr><td align="left">_633 = Option::&lt;u64&gt;::unwrap(move _634)</td></tr></table>>];
    bb283__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">283</td></tr><tr><td align="left" balign="left">StorageDead(_634)<br/>((*_4).8: u64) = move _633<br/>StorageDead(_633)<br/>_631 = _632<br/>StorageDead(_632)<br/>StorageLive(_638)<br/>StorageLive(_639)<br/>StorageLive(_640)<br/>_640 = _19<br/>StorageLive(_641)<br/>_641 = _20<br/>_639 = (move _640, move _641)<br/>StorageDead(_641)<br/>StorageDead(_640)<br/>StorageLive(_646)<br/>_646 = _21<br/></td></tr><tr><td align="left">switchInt(move _646)</td></tr></table>>];
    bb284__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">284</td></tr><tr><td align="left" balign="left">_638 = OrderActionExplanation::OrderFilledWithAMM<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb285__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">285</td></tr><tr><td align="left" balign="left">_642 = discriminant((_639.1: std::option::Option&lt;u64&gt;))<br/></td></tr><tr><td align="left">switchInt(move _642)</td></tr></table>>];
    bb286__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">286</td></tr><tr><td align="left" balign="left">StorageDead(_646)<br/>_638 = OrderActionExplanation::Liquidation<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb287__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">287</td></tr><tr><td align="left" balign="left">StorageDead(_646)<br/>_643 = discriminant((_639.0: std::option::Option&lt;u64&gt;))<br/></td></tr><tr><td align="left">switchInt(move _643)</td></tr></table>>];
    bb288__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">288</td></tr><tr><td align="left" balign="left">_638 = OrderActionExplanation::OrderFilledWithAMMJit<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb289__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">289</td></tr><tr><td align="left" balign="left">StorageDead(_639)<br/>StorageLive(_647)<br/>_647 = const 0_u8<br/>StorageLive(_648)<br/>StorageLive(_649)<br/>_649 = _647<br/>StorageLive(_650)<br/>StorageLive(_651)<br/>StorageLive(_652)<br/>_652 = _3<br/>_653 = Len(((*_1).5: [state::user::Order; 32]))<br/>_654 = Lt(_652, _653)<br/></td></tr><tr><td align="left">assert(move _654, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _653, _652)</td></tr></table>>];
    bb290__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">290</td></tr><tr><td align="left" balign="left">_651 = &amp;((*_1).5: [state::user::Order; 32])[_652]<br/></td></tr><tr><td align="left">_650 = Order::is_signed_msg(move _651)</td></tr></table>>];
    bb291__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">291</td></tr><tr><td align="left" balign="left">StorageDead(_651)<br/>StorageLive(_655)<br/>_655 = OrderBitFlag::SignedMessage<br/></td></tr><tr><td align="left">_648 = math::orders::set_order_bit_flag(move _649, move _650, move _655)</td></tr></table>>];
    bb292__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">292</td></tr><tr><td align="left" balign="left">StorageDead(_655)<br/>StorageDead(_650)<br/>StorageDead(_649)<br/>_647 = move _648<br/>StorageDead(_648)<br/>StorageDead(_652)<br/>StorageLive(_660)<br/>StorageLive(_663)<br/>StorageLive(_664)<br/>StorageLive(_665)<br/>StorageLive(_666)<br/>_666 = _37<br/>StorageLive(_667)<br/>_667 = _161<br/></td></tr><tr><td align="left">_665 = math::orders::calculate_existing_position_fields_for_order_action(move _666, move _667)</td></tr></table>>];
    bb293__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">293</td></tr><tr><td align="left" balign="left">StorageDead(_667)<br/>StorageDead(_666)<br/></td></tr><tr><td align="left">_664 = &lt;std::result::Result&lt;(Option&lt;u64&gt;, Option&lt;u64&gt;), error::ErrorCode&gt; as Try&gt;::branch(move _665)</td></tr></table>>];
    bb294__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">294</td></tr><tr><td align="left" balign="left">StorageDead(_665)<br/>_668 = discriminant(_664)<br/></td></tr><tr><td align="left">switchInt(move _668)</td></tr></table>>];
    bb295__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">295</td></tr><tr><td align="left" balign="left">StorageLive(_672)<br/>_672 = ((_664 as Continue).0: (std::option::Option&lt;u64&gt;, std::option::Option&lt;u64&gt;))<br/>_663 = _672<br/>StorageDead(_672)<br/>StorageLive(_661)<br/>_661 = (_663.0: std::option::Option&lt;u64&gt;)<br/>StorageLive(_662)<br/>_662 = (_663.1: std::option::Option&lt;u64&gt;)<br/>StorageDead(_664)<br/>StorageDead(_663)<br/>StorageLive(_673)<br/>StorageLive(_674)<br/>_674 = &amp;_620<br/></td></tr><tr><td align="left">_673 = Option::&lt;anchor_lang::prelude::Pubkey&gt;::is_some(move _674)</td></tr></table>>];
    bb296__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">296</td></tr><tr><td align="left" balign="left">StorageLive(_669)<br/>_669 = ((_664 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_671)<br/>_671 = _669<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _671)</td></tr></table>>];
    bb297__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">297</td></tr><tr><td align="left" balign="left">StorageDead(_671)<br/>StorageDead(_669)<br/>StorageDead(_664)<br/>StorageDead(_663)<br/>StorageDead(_660)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb298__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">298</td></tr><tr><td align="left">switchInt(move _673)</td></tr></table>>];
    bb299__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">299</td></tr><tr><td align="left" balign="left">StorageDead(_674)<br/>StorageLive(_675)<br/>_675 = _661<br/>StorageLive(_676)<br/>_676 = _662<br/>StorageLive(_677)<br/>_677 = Option::&lt;u64&gt;::None<br/>StorageLive(_678)<br/>_678 = Option::&lt;u64&gt;::None<br/>_660 = (move _675, move _676, move _677, move _678)<br/>StorageDead(_678)<br/>StorageDead(_677)<br/>StorageDead(_676)<br/>StorageDead(_675)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb300__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">300</td></tr><tr><td align="left" balign="left">StorageDead(_674)<br/>StorageLive(_679)<br/>_679 = Option::&lt;u64&gt;::None<br/>StorageLive(_680)<br/>_680 = Option::&lt;u64&gt;::None<br/>StorageLive(_681)<br/>_681 = _661<br/>StorageLive(_682)<br/>_682 = _662<br/>_660 = (move _679, move _680, move _681, move _682)<br/>StorageDead(_682)<br/>StorageDead(_681)<br/>StorageDead(_680)<br/>StorageDead(_679)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb301__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">301</td></tr><tr><td align="left" balign="left">StorageDead(_673)<br/>StorageDead(_662)<br/>StorageDead(_661)<br/>StorageLive(_656)<br/>_656 = (_660.0: std::option::Option&lt;u64&gt;)<br/>StorageLive(_657)<br/>_657 = (_660.1: std::option::Option&lt;u64&gt;)<br/>StorageLive(_658)<br/>_658 = (_660.2: std::option::Option&lt;u64&gt;)<br/>StorageLive(_659)<br/>_659 = (_660.3: std::option::Option&lt;u64&gt;)<br/>StorageDead(_660)<br/>StorageLive(_683)<br/>StorageLive(_684)<br/>StorageLive(_685)<br/>StorageLive(_686)<br/>_686 = _7<br/>StorageLive(_687)<br/>_687 = OrderAction::Fill<br/>StorageLive(_688)<br/>_688 = _638<br/>StorageLive(_689)<br/>_689 = ((*_4).21: u16)<br/>StorageLive(_690)<br/>StorageLive(_691)<br/>_691 = (*_10)<br/>_690 = Option::&lt;anchor_lang::prelude::Pubkey&gt;::Some(move _691)<br/>StorageDead(_691)<br/>StorageLive(_692)<br/>StorageLive(_693)<br/>_693 = _631<br/>_692 = Option::&lt;u64&gt;::Some(move _693)<br/>StorageDead(_693)<br/>StorageLive(_694)<br/>StorageLive(_695)<br/>_695 = _256<br/>_694 = Option::&lt;u64&gt;::Some(move _695)<br/>StorageDead(_695)<br/>StorageLive(_696)<br/>StorageLive(_697)<br/>_697 = _37<br/>_696 = Option::&lt;u64&gt;::Some(move _697)<br/>StorageDead(_697)<br/>StorageLive(_698)<br/>StorageLive(_699)<br/>_699 = _212<br/>_698 = Option::&lt;u64&gt;::Some(move _699)<br/>StorageDead(_699)<br/>StorageLive(_700)<br/>StorageLive(_701)<br/>_701 = _254<br/>_700 = Option::&lt;u64&gt;::Some(move _701)<br/>StorageDead(_701)<br/>StorageLive(_702)<br/>StorageLive(_703)<br/>StorageLive(_704)<br/>_704 = _260<br/>_703 = Ne(move _704, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _703)</td></tr></table>>];
    bb302__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">302</td></tr><tr><td align="left" balign="left">StorageDead(_704)<br/>StorageLive(_705)<br/>_705 = _260<br/>_702 = Option::&lt;u64&gt;::Some(move _705)<br/>StorageDead(_705)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb303__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">303</td></tr><tr><td align="left" balign="left">StorageDead(_704)<br/>_702 = Option::&lt;u64&gt;::None<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb304__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">304</td></tr><tr><td align="left" balign="left">StorageDead(_703)<br/>StorageLive(_706)<br/>StorageLive(_707)<br/>_707 = _258<br/>_706 = Option::&lt;u64&gt;::Some(move _707)<br/>StorageDead(_707)<br/>StorageLive(_708)<br/>StorageLive(_709)<br/>_709 = _213<br/>_708 = Option::&lt;i64&gt;::Some(move _709)<br/>StorageDead(_709)<br/>StorageLive(_710)<br/>_710 = Option::&lt;u64&gt;::None<br/>StorageLive(_711)<br/>_711 = _620<br/>StorageLive(_712)<br/>_712 = _621<br/>StorageLive(_713)<br/>_713 = _622<br/>StorageLive(_714)<br/>_714 = _623<br/>StorageLive(_715)<br/>StorageLive(_716)<br/>StorageLive(_717)<br/>StorageLive(_718)<br/>StorageLive(_719)<br/>_719 = &amp;mut (*_5)<br/>StorageLive(_720)<br/>StorageLive(_721)<br/>StorageLive(_722)<br/>StorageLive(_723)<br/>_723 = &amp;(*_4)<br/></td></tr><tr><td align="left">_722 = PerpMarket::oracle_id(move _723)</td></tr></table>>];
    bb305__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">305</td></tr><tr><td align="left" balign="left">StorageDead(_723)<br/>_721 = &amp;_722<br/>_720 = &amp;(*_721)<br/></td></tr><tr><td align="left">_718 = OracleMap::&lt;'_&gt;::get_price_data(move _719, move _720)</td></tr></table>>];
    bb306__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">306</td></tr><tr><td align="left" balign="left">StorageDead(_720)<br/>StorageDead(_719)<br/></td></tr><tr><td align="left">_717 = &lt;std::result::Result&lt;&amp;OraclePriceData, error::ErrorCode&gt; as Try&gt;::branch(move _718)</td></tr></table>>];
    bb307__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">307</td></tr><tr><td align="left" balign="left">StorageDead(_718)<br/>_724 = discriminant(_717)<br/></td></tr><tr><td align="left">switchInt(move _724)</td></tr></table>>];
    bb308__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">308</td></tr><tr><td align="left" balign="left">StorageLive(_728)<br/>_728 = ((_717 as Continue).0: &amp;state::oracle::OraclePriceData)<br/>_716 = _728<br/>StorageDead(_728)<br/>_715 = ((*_716).0: i64)<br/>StorageLive(_729)<br/>_729 = _647<br/>StorageLive(_730)<br/>_730 = _656<br/>StorageLive(_731)<br/>_731 = _657<br/>StorageLive(_732)<br/>_732 = _658<br/>StorageLive(_733)<br/>_733 = _659<br/>StorageLive(_734)<br/>_734 = Option::&lt;u64&gt;::None<br/></td></tr><tr><td align="left">_685 = get_order_action_record(move _686, move _687, move _688, move _689, move _690, move _692, move _694, move _696, move _698, move _700, move _702, move _706, move _708, move _710, move _711, move _712, move _713, move _714, move _715, move _729, move _730, move _731, move _732, move _733, move _734)</td></tr></table>>];
    bb309__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">309</td></tr><tr><td align="left" balign="left">StorageLive(_725)<br/>_725 = ((_717 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_727)<br/>_727 = _725<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _727)</td></tr></table>>];
    bb310__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">310</td></tr><tr><td align="left" balign="left">StorageDead(_727)<br/>StorageDead(_725)<br/>StorageDead(_715)<br/>StorageDead(_714)<br/>StorageDead(_713)<br/>StorageDead(_712)<br/>StorageDead(_711)<br/>StorageDead(_710)<br/>StorageDead(_708)<br/>StorageDead(_706)<br/>StorageDead(_702)<br/>StorageDead(_700)<br/>StorageDead(_698)<br/>StorageDead(_696)<br/>StorageDead(_694)<br/>StorageDead(_692)<br/>StorageDead(_690)<br/>StorageDead(_689)<br/>StorageDead(_688)<br/>StorageDead(_687)<br/>StorageDead(_686)<br/>StorageDead(_685)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb311__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">311</td></tr><tr><td align="left" balign="left">StorageDead(_734)<br/>StorageDead(_733)<br/>StorageDead(_732)<br/>StorageDead(_731)<br/>StorageDead(_730)<br/>StorageDead(_729)<br/>StorageDead(_715)<br/>StorageDead(_714)<br/>StorageDead(_713)<br/>StorageDead(_712)<br/>StorageDead(_711)<br/>StorageDead(_710)<br/>StorageDead(_708)<br/>StorageDead(_706)<br/>StorageDead(_702)<br/>StorageDead(_700)<br/>StorageDead(_698)<br/>StorageDead(_696)<br/>StorageDead(_694)<br/>StorageDead(_692)<br/>StorageDead(_690)<br/>StorageDead(_689)<br/>StorageDead(_688)<br/>StorageDead(_687)<br/>StorageDead(_686)<br/></td></tr><tr><td align="left">_684 = &lt;std::result::Result&lt;OrderActionRecord, error::ErrorCode&gt; as Try&gt;::branch(move _685)</td></tr></table>>];
    bb312__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">312</td></tr><tr><td align="left" balign="left">StorageDead(_685)<br/>_735 = discriminant(_684)<br/></td></tr><tr><td align="left">switchInt(move _735)</td></tr></table>>];
    bb313__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">313</td></tr><tr><td align="left" balign="left">StorageLive(_739)<br/>_739 = move ((_684 as Continue).0: state::events::OrderActionRecord)<br/>_683 = move _739<br/>StorageDead(_739)<br/>StorageDead(_722)<br/>StorageDead(_721)<br/>StorageDead(_717)<br/>StorageDead(_716)<br/>StorageDead(_684)<br/>StorageLive(_740)<br/>StorageLive(_741)<br/>StorageLive(_742)<br/>StorageLive(_743)<br/>_743 = move _683<br/></td></tr><tr><td align="left">_742 = emit_stack::&lt;OrderActionRecord, 464&gt;(move _743)</td></tr></table>>];
    bb314__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">314</td></tr><tr><td align="left" balign="left">StorageLive(_736)<br/>_736 = ((_684 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_738)<br/>_738 = _736<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _738)</td></tr></table>>];
    bb315__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">315</td></tr><tr><td align="left" balign="left">StorageDead(_738)<br/>StorageDead(_736)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb316__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">316</td></tr><tr><td align="left" balign="left">StorageDead(_743)<br/></td></tr><tr><td align="left">_741 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _742)</td></tr></table>>];
    bb317__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">317</td></tr><tr><td align="left" balign="left">StorageDead(_742)<br/>_744 = discriminant(_741)<br/></td></tr><tr><td align="left">switchInt(move _744)</td></tr></table>>];
    bb318__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">318</td></tr><tr><td align="left" balign="left">StorageLive(_748)<br/>_748 = ((_741 as Continue).0: ())<br/>_740 = _748<br/>StorageDead(_748)<br/>StorageDead(_741)<br/>StorageDead(_740)<br/>StorageLive(_749)<br/>StorageLive(_750)<br/>StorageLive(_751)<br/>StorageLive(_752)<br/>StorageLive(_753)<br/>StorageLive(_754)<br/>StorageLive(_755)<br/>_755 = _3<br/>_756 = Len(((*_1).5: [state::user::Order; 32]))<br/>_757 = Lt(_755, _756)<br/></td></tr><tr><td align="left">assert(move _757, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _756, _755)</td></tr></table>>];
    bb319__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">319</td></tr><tr><td align="left" balign="left">StorageLive(_745)<br/>_745 = ((_741 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_747)<br/>_747 = _745<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _747)</td></tr></table>>];
    bb320__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">320</td></tr><tr><td align="left" balign="left">StorageDead(_747)<br/>StorageDead(_745)<br/>StorageDead(_741)<br/>StorageDead(_740)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb321__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">321</td></tr><tr><td align="left" balign="left">_754 = &amp;((*_1).5: [state::user::Order; 32])[_755]<br/>StorageLive(_758)<br/>_758 = Option::&lt;i64&gt;::None<br/></td></tr><tr><td align="left">_753 = Order::get_base_asset_amount_unfilled(move _754, move _758)</td></tr></table>>];
    bb322__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">322</td></tr><tr><td align="left" balign="left">StorageDead(_758)<br/>StorageDead(_754)<br/></td></tr><tr><td align="left">_752 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _753)</td></tr></table>>];
    bb323__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">323</td></tr><tr><td align="left" balign="left">StorageDead(_753)<br/>_759 = discriminant(_752)<br/></td></tr><tr><td align="left">switchInt(move _759)</td></tr></table>>];
    bb324__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">324</td></tr><tr><td align="left" balign="left">StorageLive(_763)<br/>_763 = ((_752 as Continue).0: u64)<br/>_751 = _763<br/>StorageDead(_763)<br/>_750 = Eq(move _751, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _750)</td></tr></table>>];
    bb325__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">325</td></tr><tr><td align="left" balign="left">StorageLive(_760)<br/>_760 = ((_752 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_762)<br/>_762 = _760<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _762)</td></tr></table>>];
    bb326__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">326</td></tr><tr><td align="left" balign="left">StorageDead(_762)<br/>StorageDead(_760)<br/>StorageDead(_755)<br/>StorageDead(_752)<br/>StorageDead(_751)<br/>StorageDead(_750)<br/>StorageDead(_749)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb327__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">327</td></tr><tr><td align="left" balign="left">StorageDead(_755)<br/>StorageDead(_752)<br/>StorageDead(_751)<br/>StorageLive(_764)<br/>StorageLive(_765)<br/>_765 = &amp;mut (*_1)<br/>StorageLive(_766)<br/>StorageLive(_767)<br/>StorageLive(_768)<br/>_768 = _3<br/>_769 = Len(((*_1).5: [state::user::Order; 32]))<br/>_770 = Lt(_768, _769)<br/></td></tr><tr><td align="left">assert(move _770, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _769, _768)</td></tr></table>>];
    bb328__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">328</td></tr><tr><td align="left" balign="left">StorageDead(_755)<br/>StorageDead(_752)<br/>StorageDead(_751)<br/>_749 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb329__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">329</td></tr><tr><td align="left" balign="left">_767 = &amp;((*_1).5: [state::user::Order; 32])[_768]<br/></td></tr><tr><td align="left">_766 = Order::has_auction(move _767)</td></tr></table>>];
    bb330__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">330</td></tr><tr><td align="left" balign="left">StorageDead(_767)<br/></td></tr><tr><td align="left">_764 = User::decrement_open_orders(move _765, move _766)</td></tr></table>>];
    bb331__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">331</td></tr><tr><td align="left" balign="left">StorageDead(_766)<br/>StorageDead(_765)<br/>StorageDead(_768)<br/>StorageDead(_764)<br/>StorageLive(_771)<br/>_771 = OrderStatus::Filled<br/>StorageLive(_772)<br/>_772 = _3<br/>_773 = Len(((*_1).5: [state::user::Order; 32]))<br/>_774 = Lt(_772, _773)<br/></td></tr><tr><td align="left">assert(move _774, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _773, _772)</td></tr></table>>];
    bb332__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">332</td></tr><tr><td align="left" balign="left">(((*_1).5: [state::user::Order; 32])[_772].12: state::user::OrderStatus) = move _771<br/>StorageDead(_771)<br/>StorageDead(_772)<br/>StorageLive(_775)<br/>StorageLive(_776)<br/>_776 = _454<br/>_777 = Len(((*_1).4: [state::user::PerpPosition; 8]))<br/>_778 = Lt(_776, _777)<br/></td></tr><tr><td align="left">assert(move _778, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _777, _776)</td></tr></table>>];
    bb333__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">333</td></tr><tr><td align="left" balign="left">_775 = &amp;mut ((*_1).4: [state::user::PerpPosition; 8])[_776]<br/>_779 = CheckedSub(((*_775).14: u8), const 1_u8)<br/></td></tr><tr><td align="left">assert(!move (_779.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, ((*_775).14: u8), const 1_u8)</td></tr></table>>];
    bb334__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">334</td></tr><tr><td align="left" balign="left">((*_775).14: u8) = move (_779.0: u8)<br/>_749 = const ()<br/>StorageDead(_776)<br/>StorageDead(_775)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb335__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">335</td></tr><tr><td align="left" balign="left">StorageDead(_750)<br/>StorageDead(_749)<br/>StorageLive(_780)<br/>StorageLive(_781)<br/>_781 = _37<br/>StorageLive(_782)<br/>_782 = _212<br/>_780 = (move _781, move _782)<br/>StorageDead(_782)<br/>StorageDead(_781)<br/>_0 = std::result::Result::&lt;(u64, u64), error::ErrorCode&gt;::Ok(move _780)<br/>StorageDead(_780)<br/>StorageDead(_683)<br/>StorageDead(_659)<br/>StorageDead(_658)<br/>StorageDead(_657)<br/>StorageDead(_656)<br/>StorageDead(_647)<br/>StorageDead(_638)<br/>StorageDead(_631)<br/>StorageDead(_623)<br/>StorageDead(_622)<br/>StorageDead(_621)<br/>StorageDead(_620)<br/>StorageDead(_454)<br/>StorageDead(_283)<br/>StorageDead(_260)<br/>StorageDead(_259)<br/>StorageDead(_258)<br/>StorageDead(_257)<br/>StorageDead(_256)<br/>StorageDead(_255)<br/>StorageDead(_254)<br/>StorageDead(_248)<br/>StorageDead(_245)<br/>StorageDead(_213)<br/>StorageDead(_212)<br/>StorageDead(_187)<br/>StorageDead(_167)<br/>StorageDead(_161)<br/>StorageDead(_136)<br/>StorageDead(_135)<br/>StorageDead(_134)<br/>StorageDead(_91)<br/>StorageDead(_39)<br/>StorageDead(_38)<br/>StorageDead(_37)<br/>StorageDead(_33)<br/>StorageDead(_22)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb336__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">336</td></tr><tr><td align="left" balign="left">StorageDead(_722)<br/>StorageDead(_721)<br/>StorageDead(_717)<br/>StorageDead(_716)<br/>StorageDead(_684)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb337__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">337</td></tr><tr><td align="left" balign="left">StorageDead(_683)<br/>StorageDead(_659)<br/>StorageDead(_658)<br/>StorageDead(_657)<br/>StorageDead(_656)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb338__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">338</td></tr><tr><td align="left" balign="left">StorageDead(_647)<br/>StorageDead(_638)<br/>StorageDead(_631)<br/>StorageDead(_623)<br/>StorageDead(_622)<br/>StorageDead(_621)<br/>StorageDead(_620)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb339__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">339</td></tr><tr><td align="left" balign="left">StorageDead(_546)<br/>StorageDead(_545)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb340__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">340</td></tr><tr><td align="left" balign="left">StorageDead(_520)<br/>StorageDead(_519)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb341__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">341</td></tr><tr><td align="left" balign="left">StorageDead(_506)<br/>StorageDead(_501)<br/>StorageDead(_500)<br/>StorageDead(_497)<br/>StorageDead(_496)<br/>StorageDead(_494)<br/>StorageDead(_493)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb342__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">342</td></tr><tr><td align="left" balign="left">StorageDead(_479)<br/>StorageDead(_473)<br/>StorageDead(_472)<br/>StorageDead(_469)<br/>StorageDead(_468)<br/>StorageDead(_466)<br/>StorageDead(_465)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb343__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">343</td></tr><tr><td align="left" balign="left">StorageDead(_454)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb344__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">344</td></tr><tr><td align="left" balign="left">StorageDead(_430)<br/>StorageDead(_425)<br/>StorageDead(_424)<br/>StorageDead(_422)<br/>StorageDead(_421)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb345__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">345</td></tr><tr><td align="left" balign="left">StorageDead(_420)<br/>StorageDead(_416)<br/>StorageDead(_415)<br/>StorageDead(_414)<br/>StorageDead(_407)<br/>StorageDead(_406)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb346__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">346</td></tr><tr><td align="left" balign="left">StorageDead(_348)<br/>StorageDead(_353)<br/>StorageDead(_349)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb347__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">347</td></tr><tr><td align="left" balign="left">StorageDead(_330)<br/>StorageDead(_335)<br/>StorageDead(_331)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb348__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">348</td></tr><tr><td align="left" balign="left">StorageDead(_312)<br/>StorageDead(_317)<br/>StorageDead(_313)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb349__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">349</td></tr><tr><td align="left" balign="left">StorageDead(_294)<br/>StorageDead(_299)<br/>StorageDead(_295)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb350__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">350</td></tr><tr><td align="left" balign="left">StorageDead(_283)<br/>StorageDead(_260)<br/>StorageDead(_259)<br/>StorageDead(_258)<br/>StorageDead(_257)<br/>StorageDead(_256)<br/>StorageDead(_255)<br/>StorageDead(_254)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb351__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">351</td></tr><tr><td align="left" balign="left">StorageDead(_248)<br/>StorageDead(_245)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb352__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">352</td></tr><tr><td align="left" balign="left">StorageDead(_213)<br/>StorageDead(_212)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb353__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">353</td></tr><tr><td align="left" balign="left">StorageDead(_187)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb354__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">354</td></tr><tr><td align="left" balign="left">StorageDead(_167)<br/>StorageDead(_161)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb355__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">355</td></tr><tr><td align="left" balign="left">StorageDead(_136)<br/>StorageDead(_135)<br/>StorageDead(_134)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb356__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">356</td></tr><tr><td align="left" balign="left">StorageDead(_91)<br/>StorageDead(_39)<br/>StorageDead(_38)<br/>StorageDead(_37)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb357__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">357</td></tr><tr><td align="left" balign="left">StorageDead(_46)<br/>StorageDead(_40)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb358__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">358</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb359__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">359</td></tr><tr><td align="left" balign="left">StorageDead(_22)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb360__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">360</td></tr><tr><td align="left">return</td></tr></table>>];
    bb361__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">361 (cleanup)</td></tr><tr><td align="left">drop(_113)</td></tr></table>>];
    bb362__0_536 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">362 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_536 -> bb1__0_536 [label="return"];
    bb1__0_536 -> bb2__0_536 [label="return"];
    bb2__0_536 -> bb3__0_536 [label="0"];
    bb2__0_536 -> bb5__0_536 [label="1"];
    bb2__0_536 -> bb4__0_536 [label="otherwise"];
    bb3__0_536 -> bb7__0_536 [label="success"];
    bb5__0_536 -> bb6__0_536 [label="return"];
    bb6__0_536 -> bb359__0_536 [label=""];
    bb7__0_536 -> bb8__0_536 [label="0"];
    bb7__0_536 -> bb9__0_536 [label="1"];
    bb7__0_536 -> bb4__0_536 [label="otherwise"];
    bb8__0_536 -> bb10__0_536 [label="return"];
    bb9__0_536 -> bb26__0_536 [label=""];
    bb10__0_536 -> bb11__0_536 [label="return"];
    bb11__0_536 -> bb12__0_536 [label="return"];
    bb12__0_536 -> bb13__0_536 [label="0"];
    bb12__0_536 -> bb14__0_536 [label="1"];
    bb12__0_536 -> bb4__0_536 [label="otherwise"];
    bb13__0_536 -> bb16__0_536 [label="success"];
    bb14__0_536 -> bb15__0_536 [label="return"];
    bb15__0_536 -> bb357__0_536 [label=""];
    bb16__0_536 -> bb17__0_536 [label="return"];
    bb17__0_536 -> bb18__0_536 [label="return"];
    bb18__0_536 -> bb19__0_536 [label="0"];
    bb18__0_536 -> bb20__0_536 [label="1"];
    bb18__0_536 -> bb4__0_536 [label="otherwise"];
    bb19__0_536 -> bb22__0_536 [label="success"];
    bb20__0_536 -> bb21__0_536 [label="return"];
    bb21__0_536 -> bb357__0_536 [label=""];
    bb22__0_536 -> bb24__0_536 [label="0"];
    bb22__0_536 -> bb23__0_536 [label="otherwise"];
    bb23__0_536 -> bb25__0_536 [label=""];
    bb24__0_536 -> bb25__0_536 [label=""];
    bb25__0_536 -> bb26__0_536 [label=""];
    bb26__0_536 -> bb27__0_536 [label="success"];
    bb27__0_536 -> bb28__0_536 [label="0"];
    bb27__0_536 -> bb32__0_536 [label="otherwise"];
    bb28__0_536 -> bb29__0_536 [label="return"];
    bb29__0_536 -> bb31__0_536 [label="0"];
    bb29__0_536 -> bb30__0_536 [label="otherwise"];
    bb30__0_536 -> bb34__0_536 [label=""];
    bb31__0_536 -> bb33__0_536 [label=""];
    bb32__0_536 -> bb33__0_536 [label=""];
    bb33__0_536 -> bb34__0_536 [label=""];
    bb34__0_536 -> bb48__0_536 [label="0"];
    bb34__0_536 -> bb35__0_536 [label="otherwise"];
    bb35__0_536 -> bb36__0_536 [label="return"];
    bb36__0_536 -> bb46__0_536 [label="0"];
    bb36__0_536 -> bb37__0_536 [label="otherwise"];
    bb37__0_536 -> bb38__0_536 [label="return"];
    bb38__0_536 -> bb39__0_536 [label="return"];
    bb39__0_536 -> bb40__0_536 [label="return"];
    bb40__0_536 -> bb41__0_536 [label="return"];
    bb41__0_536 -> bb42__0_536 [label="return"];
    bb42__0_536 -> bb43__0_536 [label="return"];
    bb42__0_536 -> bb361__0_536 [label="unwind"];
    bb43__0_536 -> bb44__0_536 [label="return"];
    bb43__0_536 -> bb361__0_536 [label="unwind"];
    bb44__0_536 -> bb45__0_536 [label="return"];
    bb44__0_536 -> bb362__0_536 [label="unwind"];
    bb45__0_536 -> bb47__0_536 [label=""];
    bb46__0_536 -> bb47__0_536 [label=""];
    bb47__0_536 -> bb356__0_536 [label=""];
    bb48__0_536 -> bb49__0_536 [label="success"];
    bb49__0_536 -> bb50__0_536 [label="success"];
    bb50__0_536 -> bb51__0_536 [label="success"];
    bb51__0_536 -> bb52__0_536 [label="return"];
    bb52__0_536 -> bb53__0_536 [label="return"];
    bb53__0_536 -> bb54__0_536 [label="0"];
    bb53__0_536 -> bb55__0_536 [label="1"];
    bb53__0_536 -> bb4__0_536 [label="otherwise"];
    bb54__0_536 -> bb57__0_536 [label="success"];
    bb55__0_536 -> bb56__0_536 [label="return"];
    bb56__0_536 -> bb355__0_536 [label=""];
    bb57__0_536 -> bb58__0_536 [label="return"];
    bb58__0_536 -> bb60__0_536 [label="0"];
    bb58__0_536 -> bb59__0_536 [label="1"];
    bb58__0_536 -> bb4__0_536 [label="otherwise"];
    bb59__0_536 -> bb66__0_536 [label="return"];
    bb60__0_536 -> bb61__0_536 [label="return"];
    bb61__0_536 -> bb62__0_536 [label="return"];
    bb62__0_536 -> bb63__0_536 [label="0"];
    bb62__0_536 -> bb64__0_536 [label="1"];
    bb62__0_536 -> bb4__0_536 [label="otherwise"];
    bb63__0_536 -> bb71__0_536 [label=""];
    bb64__0_536 -> bb65__0_536 [label="return"];
    bb65__0_536 -> bb354__0_536 [label=""];
    bb66__0_536 -> bb67__0_536 [label="return"];
    bb67__0_536 -> bb68__0_536 [label="0"];
    bb67__0_536 -> bb69__0_536 [label="1"];
    bb67__0_536 -> bb4__0_536 [label="otherwise"];
    bb68__0_536 -> bb71__0_536 [label=""];
    bb69__0_536 -> bb70__0_536 [label="return"];
    bb70__0_536 -> bb354__0_536 [label=""];
    bb71__0_536 -> bb72__0_536 [label="return"];
    bb72__0_536 -> bb73__0_536 [label="return"];
    bb73__0_536 -> bb74__0_536 [label="0"];
    bb73__0_536 -> bb75__0_536 [label="1"];
    bb73__0_536 -> bb4__0_536 [label="otherwise"];
    bb74__0_536 -> bb77__0_536 [label="return"];
    bb75__0_536 -> bb76__0_536 [label="return"];
    bb76__0_536 -> bb353__0_536 [label=""];
    bb77__0_536 -> bb78__0_536 [label="return"];
    bb78__0_536 -> bb79__0_536 [label="0"];
    bb78__0_536 -> bb80__0_536 [label="1"];
    bb78__0_536 -> bb4__0_536 [label="otherwise"];
    bb79__0_536 -> bb82__0_536 [label="return"];
    bb80__0_536 -> bb81__0_536 [label="return"];
    bb81__0_536 -> bb353__0_536 [label=""];
    bb82__0_536 -> bb83__0_536 [label="return"];
    bb83__0_536 -> bb84__0_536 [label="0"];
    bb83__0_536 -> bb85__0_536 [label="1"];
    bb83__0_536 -> bb4__0_536 [label="otherwise"];
    bb84__0_536 -> bb88__0_536 [label="1"];
    bb84__0_536 -> bb87__0_536 [label="otherwise"];
    bb85__0_536 -> bb86__0_536 [label="return"];
    bb86__0_536 -> bb353__0_536 [label=""];
    bb87__0_536 -> bb94__0_536 [label=""];
    bb88__0_536 -> bb89__0_536 [label="return"];
    bb89__0_536 -> bb90__0_536 [label="return"];
    bb90__0_536 -> bb91__0_536 [label="0"];
    bb90__0_536 -> bb92__0_536 [label="1"];
    bb90__0_536 -> bb4__0_536 [label="otherwise"];
    bb91__0_536 -> bb94__0_536 [label=""];
    bb92__0_536 -> bb93__0_536 [label="return"];
    bb93__0_536 -> bb352__0_536 [label=""];
    bb94__0_536 -> bb95__0_536 [label="return"];
    bb95__0_536 -> bb96__0_536 [label="return"];
    bb96__0_536 -> bb98__0_536 [label="0"];
    bb96__0_536 -> bb97__0_536 [label="otherwise"];
    bb97__0_536 -> bb100__0_536 [label=""];
    bb98__0_536 -> bb99__0_536 [label="return"];
    bb99__0_536 -> bb100__0_536 [label=""];
    bb100__0_536 -> bb101__0_536 [label="return"];
    bb101__0_536 -> bb102__0_536 [label="return"];
    bb102__0_536 -> bb103__0_536 [label="return"];
    bb103__0_536 -> bb104__0_536 [label="0"];
    bb103__0_536 -> bb105__0_536 [label="1"];
    bb103__0_536 -> bb4__0_536 [label="otherwise"];
    bb104__0_536 -> bb107__0_536 [label="return"];
    bb105__0_536 -> bb106__0_536 [label="return"];
    bb106__0_536 -> bb351__0_536 [label=""];
    bb107__0_536 -> bb108__0_536 [label="return"];
    bb108__0_536 -> bb109__0_536 [label="0"];
    bb108__0_536 -> bb110__0_536 [label="1"];
    bb108__0_536 -> bb4__0_536 [label="otherwise"];
    bb109__0_536 -> bb112__0_536 [label="return"];
    bb110__0_536 -> bb111__0_536 [label="return"];
    bb111__0_536 -> bb350__0_536 [label=""];
    bb112__0_536 -> bb113__0_536 [label="return"];
    bb113__0_536 -> bb114__0_536 [label="0"];
    bb113__0_536 -> bb115__0_536 [label="1"];
    bb113__0_536 -> bb4__0_536 [label="otherwise"];
    bb114__0_536 -> bb117__0_536 [label="return"];
    bb115__0_536 -> bb116__0_536 [label="return"];
    bb116__0_536 -> bb349__0_536 [label=""];
    bb117__0_536 -> bb118__0_536 [label="return"];
    bb118__0_536 -> bb119__0_536 [label="0"];
    bb118__0_536 -> bb120__0_536 [label="1"];
    bb118__0_536 -> bb4__0_536 [label="otherwise"];
    bb119__0_536 -> bb122__0_536 [label="return"];
    bb120__0_536 -> bb121__0_536 [label="return"];
    bb121__0_536 -> bb349__0_536 [label=""];
    bb122__0_536 -> bb123__0_536 [label="return"];
    bb123__0_536 -> bb124__0_536 [label="0"];
    bb123__0_536 -> bb125__0_536 [label="1"];
    bb123__0_536 -> bb4__0_536 [label="otherwise"];
    bb124__0_536 -> bb127__0_536 [label="return"];
    bb125__0_536 -> bb126__0_536 [label="return"];
    bb126__0_536 -> bb348__0_536 [label=""];
    bb127__0_536 -> bb128__0_536 [label="return"];
    bb128__0_536 -> bb129__0_536 [label="0"];
    bb128__0_536 -> bb130__0_536 [label="1"];
    bb128__0_536 -> bb4__0_536 [label="otherwise"];
    bb129__0_536 -> bb132__0_536 [label="return"];
    bb130__0_536 -> bb131__0_536 [label="return"];
    bb131__0_536 -> bb348__0_536 [label=""];
    bb132__0_536 -> bb133__0_536 [label="return"];
    bb133__0_536 -> bb134__0_536 [label="0"];
    bb133__0_536 -> bb135__0_536 [label="1"];
    bb133__0_536 -> bb4__0_536 [label="otherwise"];
    bb134__0_536 -> bb137__0_536 [label="return"];
    bb135__0_536 -> bb136__0_536 [label="return"];
    bb136__0_536 -> bb347__0_536 [label=""];
    bb137__0_536 -> bb138__0_536 [label="return"];
    bb138__0_536 -> bb139__0_536 [label="0"];
    bb138__0_536 -> bb140__0_536 [label="1"];
    bb138__0_536 -> bb4__0_536 [label="otherwise"];
    bb139__0_536 -> bb142__0_536 [label="return"];
    bb140__0_536 -> bb141__0_536 [label="return"];
    bb141__0_536 -> bb347__0_536 [label=""];
    bb142__0_536 -> bb143__0_536 [label="return"];
    bb143__0_536 -> bb144__0_536 [label="0"];
    bb143__0_536 -> bb145__0_536 [label="1"];
    bb143__0_536 -> bb4__0_536 [label="otherwise"];
    bb144__0_536 -> bb147__0_536 [label="return"];
    bb145__0_536 -> bb146__0_536 [label="return"];
    bb146__0_536 -> bb346__0_536 [label=""];
    bb147__0_536 -> bb148__0_536 [label="return"];
    bb148__0_536 -> bb149__0_536 [label="0"];
    bb148__0_536 -> bb150__0_536 [label="1"];
    bb148__0_536 -> bb4__0_536 [label="otherwise"];
    bb149__0_536 -> bb152__0_536 [label="return"];
    bb150__0_536 -> bb151__0_536 [label="return"];
    bb151__0_536 -> bb346__0_536 [label=""];
    bb152__0_536 -> bb153__0_536 [label="return"];
    bb153__0_536 -> bb154__0_536 [label="0"];
    bb153__0_536 -> bb155__0_536 [label="1"];
    bb153__0_536 -> bb4__0_536 [label="otherwise"];
    bb154__0_536 -> bb157__0_536 [label="return"];
    bb155__0_536 -> bb156__0_536 [label="return"];
    bb156__0_536 -> bb350__0_536 [label=""];
    bb157__0_536 -> bb158__0_536 [label="return"];
    bb158__0_536 -> bb159__0_536 [label="0"];
    bb158__0_536 -> bb160__0_536 [label="1"];
    bb158__0_536 -> bb4__0_536 [label="otherwise"];
    bb159__0_536 -> bb162__0_536 [label="return"];
    bb160__0_536 -> bb161__0_536 [label="return"];
    bb161__0_536 -> bb350__0_536 [label=""];
    bb162__0_536 -> bb163__0_536 [label="return"];
    bb163__0_536 -> bb164__0_536 [label="0"];
    bb163__0_536 -> bb165__0_536 [label="1"];
    bb163__0_536 -> bb4__0_536 [label="otherwise"];
    bb164__0_536 -> bb167__0_536 [label="return"];
    bb165__0_536 -> bb166__0_536 [label="return"];
    bb166__0_536 -> bb350__0_536 [label=""];
    bb167__0_536 -> bb168__0_536 [label="return"];
    bb168__0_536 -> bb169__0_536 [label="0"];
    bb168__0_536 -> bb170__0_536 [label="1"];
    bb168__0_536 -> bb4__0_536 [label="otherwise"];
    bb169__0_536 -> bb172__0_536 [label="return"];
    bb170__0_536 -> bb171__0_536 [label="return"];
    bb171__0_536 -> bb350__0_536 [label=""];
    bb172__0_536 -> bb173__0_536 [label="return"];
    bb173__0_536 -> bb174__0_536 [label="1"];
    bb173__0_536 -> bb198__0_536 [label="otherwise"];
    bb174__0_536 -> bb175__0_536 [label="1"];
    bb174__0_536 -> bb198__0_536 [label="otherwise"];
    bb175__0_536 -> bb176__0_536 [label="return"];
    bb176__0_536 -> bb177__0_536 [label="0"];
    bb176__0_536 -> bb196__0_536 [label="otherwise"];
    bb177__0_536 -> bb189__0_536 [label="0"];
    bb177__0_536 -> bb178__0_536 [label="otherwise"];
    bb178__0_536 -> bb179__0_536 [label="return"];
    bb179__0_536 -> bb180__0_536 [label="return"];
    bb180__0_536 -> bb181__0_536 [label="0"];
    bb180__0_536 -> bb182__0_536 [label="1"];
    bb180__0_536 -> bb4__0_536 [label="otherwise"];
    bb181__0_536 -> bb184__0_536 [label="return"];
    bb182__0_536 -> bb183__0_536 [label="return"];
    bb183__0_536 -> bb344__0_536 [label=""];
    bb184__0_536 -> bb185__0_536 [label="return"];
    bb185__0_536 -> bb186__0_536 [label="0"];
    bb185__0_536 -> bb187__0_536 [label="1"];
    bb185__0_536 -> bb4__0_536 [label="otherwise"];
    bb186__0_536 -> bb190__0_536 [label=""];
    bb187__0_536 -> bb188__0_536 [label="return"];
    bb188__0_536 -> bb344__0_536 [label=""];
    bb189__0_536 -> bb190__0_536 [label=""];
    bb190__0_536 -> bb191__0_536 [label="return"];
    bb191__0_536 -> bb192__0_536 [label="return"];
    bb192__0_536 -> bb193__0_536 [label="0"];
    bb192__0_536 -> bb194__0_536 [label="1"];
    bb192__0_536 -> bb4__0_536 [label="otherwise"];
    bb193__0_536 -> bb197__0_536 [label=""];
    bb194__0_536 -> bb195__0_536 [label="return"];
    bb195__0_536 -> bb345__0_536 [label=""];
    bb196__0_536 -> bb197__0_536 [label=""];
    bb197__0_536 -> bb199__0_536 [label=""];
    bb198__0_536 -> bb199__0_536 [label=""];
    bb199__0_536 -> bb200__0_536 [label="return"];
    bb200__0_536 -> bb201__0_536 [label="return"];
    bb201__0_536 -> bb202__0_536 [label="0"];
    bb201__0_536 -> bb203__0_536 [label="1"];
    bb201__0_536 -> bb4__0_536 [label="otherwise"];
    bb202__0_536 -> bb206__0_536 [label="0"];
    bb202__0_536 -> bb205__0_536 [label="otherwise"];
    bb203__0_536 -> bb204__0_536 [label="return"];
    bb204__0_536 -> bb343__0_536 [label=""];
    bb205__0_536 -> bb207__0_536 [label="success"];
    bb206__0_536 -> bb219__0_536 [label=""];
    bb207__0_536 -> bb208__0_536 [label="return"];
    bb208__0_536 -> bb209__0_536 [label="return"];
    bb209__0_536 -> bb210__0_536 [label="0"];
    bb209__0_536 -> bb211__0_536 [label="1"];
    bb209__0_536 -> bb4__0_536 [label="otherwise"];
    bb210__0_536 -> bb213__0_536 [label="success"];
    bb211__0_536 -> bb212__0_536 [label="return"];
    bb212__0_536 -> bb342__0_536 [label=""];
    bb213__0_536 -> bb214__0_536 [label="return"];
    bb214__0_536 -> bb215__0_536 [label="return"];
    bb215__0_536 -> bb216__0_536 [label="0"];
    bb215__0_536 -> bb217__0_536 [label="1"];
    bb215__0_536 -> bb4__0_536 [label="otherwise"];
    bb216__0_536 -> bb219__0_536 [label=""];
    bb217__0_536 -> bb218__0_536 [label="return"];
    bb218__0_536 -> bb342__0_536 [label=""];
    bb219__0_536 -> bb232__0_536 [label="0"];
    bb219__0_536 -> bb220__0_536 [label="otherwise"];
    bb220__0_536 -> bb221__0_536 [label="success"];
    bb221__0_536 -> bb222__0_536 [label="return"];
    bb222__0_536 -> bb223__0_536 [label="return"];
    bb223__0_536 -> bb224__0_536 [label="0"];
    bb223__0_536 -> bb225__0_536 [label="1"];
    bb223__0_536 -> bb4__0_536 [label="otherwise"];
    bb224__0_536 -> bb227__0_536 [label="return"];
    bb225__0_536 -> bb226__0_536 [label="return"];
    bb226__0_536 -> bb341__0_536 [label=""];
    bb227__0_536 -> bb228__0_536 [label="return"];
    bb228__0_536 -> bb229__0_536 [label="0"];
    bb228__0_536 -> bb230__0_536 [label="1"];
    bb228__0_536 -> bb4__0_536 [label="otherwise"];
    bb229__0_536 -> bb233__0_536 [label=""];
    bb230__0_536 -> bb231__0_536 [label="return"];
    bb231__0_536 -> bb341__0_536 [label=""];
    bb232__0_536 -> bb233__0_536 [label=""];
    bb233__0_536 -> bb240__0_536 [label="0"];
    bb233__0_536 -> bb234__0_536 [label="otherwise"];
    bb234__0_536 -> bb235__0_536 [label="return"];
    bb235__0_536 -> bb236__0_536 [label="return"];
    bb236__0_536 -> bb237__0_536 [label="0"];
    bb236__0_536 -> bb238__0_536 [label="1"];
    bb236__0_536 -> bb4__0_536 [label="otherwise"];
    bb237__0_536 -> bb246__0_536 [label=""];
    bb238__0_536 -> bb239__0_536 [label="return"];
    bb239__0_536 -> bb340__0_536 [label=""];
    bb240__0_536 -> bb241__0_536 [label="return"];
    bb241__0_536 -> bb242__0_536 [label="return"];
    bb242__0_536 -> bb243__0_536 [label="0"];
    bb242__0_536 -> bb244__0_536 [label="1"];
    bb242__0_536 -> bb4__0_536 [label="otherwise"];
    bb243__0_536 -> bb246__0_536 [label=""];
    bb244__0_536 -> bb245__0_536 [label="return"];
    bb245__0_536 -> bb340__0_536 [label=""];
    bb246__0_536 -> bb247__0_536 [label="return"];
    bb247__0_536 -> bb248__0_536 [label="1"];
    bb247__0_536 -> bb254__0_536 [label="otherwise"];
    bb248__0_536 -> bb249__0_536 [label="return"];
    bb249__0_536 -> bb250__0_536 [label="return"];
    bb250__0_536 -> bb251__0_536 [label="0"];
    bb250__0_536 -> bb252__0_536 [label="1"];
    bb250__0_536 -> bb4__0_536 [label="otherwise"];
    bb251__0_536 -> bb264__0_536 [label=""];
    bb252__0_536 -> bb253__0_536 [label="return"];
    bb253__0_536 -> bb339__0_536 [label=""];
    bb254__0_536 -> bb255__0_536 [label="return"];
    bb255__0_536 -> bb256__0_536 [label="1"];
    bb255__0_536 -> bb262__0_536 [label="otherwise"];
    bb256__0_536 -> bb257__0_536 [label="return"];
    bb257__0_536 -> bb258__0_536 [label="return"];
    bb258__0_536 -> bb259__0_536 [label="0"];
    bb258__0_536 -> bb260__0_536 [label="1"];
    bb258__0_536 -> bb4__0_536 [label="otherwise"];
    bb259__0_536 -> bb263__0_536 [label=""];
    bb260__0_536 -> bb261__0_536 [label="return"];
    bb261__0_536 -> bb339__0_536 [label=""];
    bb262__0_536 -> bb263__0_536 [label=""];
    bb263__0_536 -> bb264__0_536 [label=""];
    bb264__0_536 -> bb265__0_536 [label="success"];
    bb265__0_536 -> bb266__0_536 [label="return"];
    bb266__0_536 -> bb267__0_536 [label="return"];
    bb267__0_536 -> bb268__0_536 [label="0"];
    bb267__0_536 -> bb269__0_536 [label="1"];
    bb267__0_536 -> bb4__0_536 [label="otherwise"];
    bb268__0_536 -> bb271__0_536 [label="success"];
    bb269__0_536 -> bb270__0_536 [label="return"];
    bb270__0_536 -> bb343__0_536 [label=""];
    bb271__0_536 -> bb272__0_536 [label="success"];
    bb272__0_536 -> bb273__0_536 [label="return"];
    bb273__0_536 -> bb274__0_536 [label="return"];
    bb274__0_536 -> bb275__0_536 [label="return"];
    bb275__0_536 -> bb276__0_536 [label="0"];
    bb275__0_536 -> bb277__0_536 [label="1"];
    bb275__0_536 -> bb4__0_536 [label="otherwise"];
    bb276__0_536 -> bb279__0_536 [label="success"];
    bb277__0_536 -> bb278__0_536 [label="return"];
    bb278__0_536 -> bb343__0_536 [label=""];
    bb279__0_536 -> bb280__0_536 [label="return"];
    bb280__0_536 -> bb281__0_536 [label="return"];
    bb281__0_536 -> bb282__0_536 [label="return"];
    bb282__0_536 -> bb283__0_536 [label="return"];
    bb283__0_536 -> bb287__0_536 [label="0"];
    bb283__0_536 -> bb286__0_536 [label="otherwise"];
    bb284__0_536 -> bb289__0_536 [label=""];
    bb285__0_536 -> bb288__0_536 [label="1"];
    bb285__0_536 -> bb284__0_536 [label="otherwise"];
    bb286__0_536 -> bb289__0_536 [label=""];
    bb287__0_536 -> bb285__0_536 [label="1"];
    bb287__0_536 -> bb284__0_536 [label="otherwise"];
    bb288__0_536 -> bb289__0_536 [label=""];
    bb289__0_536 -> bb290__0_536 [label="success"];
    bb290__0_536 -> bb291__0_536 [label="return"];
    bb291__0_536 -> bb292__0_536 [label="return"];
    bb292__0_536 -> bb293__0_536 [label="return"];
    bb293__0_536 -> bb294__0_536 [label="return"];
    bb294__0_536 -> bb295__0_536 [label="0"];
    bb294__0_536 -> bb296__0_536 [label="1"];
    bb294__0_536 -> bb4__0_536 [label="otherwise"];
    bb295__0_536 -> bb298__0_536 [label="return"];
    bb296__0_536 -> bb297__0_536 [label="return"];
    bb297__0_536 -> bb338__0_536 [label=""];
    bb298__0_536 -> bb300__0_536 [label="0"];
    bb298__0_536 -> bb299__0_536 [label="otherwise"];
    bb299__0_536 -> bb301__0_536 [label=""];
    bb300__0_536 -> bb301__0_536 [label=""];
    bb301__0_536 -> bb303__0_536 [label="0"];
    bb301__0_536 -> bb302__0_536 [label="otherwise"];
    bb302__0_536 -> bb304__0_536 [label=""];
    bb303__0_536 -> bb304__0_536 [label=""];
    bb304__0_536 -> bb305__0_536 [label="return"];
    bb305__0_536 -> bb306__0_536 [label="return"];
    bb306__0_536 -> bb307__0_536 [label="return"];
    bb307__0_536 -> bb308__0_536 [label="0"];
    bb307__0_536 -> bb309__0_536 [label="1"];
    bb307__0_536 -> bb4__0_536 [label="otherwise"];
    bb308__0_536 -> bb311__0_536 [label="return"];
    bb309__0_536 -> bb310__0_536 [label="return"];
    bb310__0_536 -> bb336__0_536 [label=""];
    bb311__0_536 -> bb312__0_536 [label="return"];
    bb312__0_536 -> bb313__0_536 [label="0"];
    bb312__0_536 -> bb314__0_536 [label="1"];
    bb312__0_536 -> bb4__0_536 [label="otherwise"];
    bb313__0_536 -> bb316__0_536 [label="return"];
    bb314__0_536 -> bb315__0_536 [label="return"];
    bb315__0_536 -> bb336__0_536 [label=""];
    bb316__0_536 -> bb317__0_536 [label="return"];
    bb317__0_536 -> bb318__0_536 [label="0"];
    bb317__0_536 -> bb319__0_536 [label="1"];
    bb317__0_536 -> bb4__0_536 [label="otherwise"];
    bb318__0_536 -> bb321__0_536 [label="success"];
    bb319__0_536 -> bb320__0_536 [label="return"];
    bb320__0_536 -> bb337__0_536 [label=""];
    bb321__0_536 -> bb322__0_536 [label="return"];
    bb322__0_536 -> bb323__0_536 [label="return"];
    bb323__0_536 -> bb324__0_536 [label="0"];
    bb323__0_536 -> bb325__0_536 [label="1"];
    bb323__0_536 -> bb4__0_536 [label="otherwise"];
    bb324__0_536 -> bb328__0_536 [label="0"];
    bb324__0_536 -> bb327__0_536 [label="otherwise"];
    bb325__0_536 -> bb326__0_536 [label="return"];
    bb326__0_536 -> bb337__0_536 [label=""];
    bb327__0_536 -> bb329__0_536 [label="success"];
    bb328__0_536 -> bb335__0_536 [label=""];
    bb329__0_536 -> bb330__0_536 [label="return"];
    bb330__0_536 -> bb331__0_536 [label="return"];
    bb331__0_536 -> bb332__0_536 [label="success"];
    bb332__0_536 -> bb333__0_536 [label="success"];
    bb333__0_536 -> bb334__0_536 [label="success"];
    bb334__0_536 -> bb335__0_536 [label=""];
    bb335__0_536 -> bb360__0_536 [label=""];
    bb336__0_536 -> bb337__0_536 [label=""];
    bb337__0_536 -> bb338__0_536 [label=""];
    bb338__0_536 -> bb343__0_536 [label=""];
    bb339__0_536 -> bb343__0_536 [label=""];
    bb340__0_536 -> bb343__0_536 [label=""];
    bb341__0_536 -> bb343__0_536 [label=""];
    bb342__0_536 -> bb343__0_536 [label=""];
    bb343__0_536 -> bb350__0_536 [label=""];
    bb344__0_536 -> bb345__0_536 [label=""];
    bb345__0_536 -> bb350__0_536 [label=""];
    bb346__0_536 -> bb350__0_536 [label=""];
    bb347__0_536 -> bb350__0_536 [label=""];
    bb348__0_536 -> bb350__0_536 [label=""];
    bb349__0_536 -> bb350__0_536 [label=""];
    bb350__0_536 -> bb351__0_536 [label=""];
    bb351__0_536 -> bb352__0_536 [label=""];
    bb352__0_536 -> bb353__0_536 [label=""];
    bb353__0_536 -> bb354__0_536 [label=""];
    bb354__0_536 -> bb355__0_536 [label=""];
    bb355__0_536 -> bb356__0_536 [label=""];
    bb356__0_536 -> bb358__0_536 [label=""];
    bb357__0_536 -> bb358__0_536 [label=""];
    bb358__0_536 -> bb359__0_536 [label=""];
    bb359__0_536 -> bb360__0_536 [label=""];
    bb361__0_536 -> bb362__0_536 [label="return"];
}
