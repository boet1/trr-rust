// MIR for `admin::handle_update_spot_market_max_token_borrows` after PreCodegen

fn admin::handle_update_spot_market_max_token_borrows(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::AdminUpdateSpotMarket<'_>>, _2: u16) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug max_token_borrows_fraction => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _5: std::result::Result<(), anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let _7: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _12: ();
    let _13: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _14: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _16: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _17: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _18: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _19: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _20: isize;
    let _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _24: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _25: ();
    let mut _26: &str;
    let _27: &str;
    let mut _28: &std::string::String;
    let _29: &std::string::String;
    let _30: std::string::String;
    let mut _32: std::fmt::Arguments<'_>;
    let mut _33: &[&str];
    let mut _34: &[&str; 1];
    let _35: &[&str; 1];
    let _36: [&str; 1];
    let mut _37: &[core::fmt::rt::Argument<'_>];
    let mut _38: &[core::fmt::rt::Argument<'_>; 1];
    let _39: &[core::fmt::rt::Argument<'_>; 1];
    let _40: [core::fmt::rt::Argument<'_>; 1];
    let mut _41: core::fmt::rt::Argument<'_>;
    let mut _42: &u16;
    let _43: &u16;
    let _44: &state::spot_market::SpotMarket;
    let mut _45: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _46: ();
    let mut _47: &str;
    let _48: &str;
    let mut _49: &std::string::String;
    let _50: &std::string::String;
    let _51: std::string::String;
    let mut _53: std::fmt::Arguments<'_>;
    let mut _54: &[&str];
    let mut _55: &[&str; 2];
    let _56: &[&str; 2];
    let _57: [&str; 2];
    let mut _58: &[core::fmt::rt::Argument<'_>];
    let mut _59: &[core::fmt::rt::Argument<'_>; 2];
    let _60: &[core::fmt::rt::Argument<'_>; 2];
    let _61: [core::fmt::rt::Argument<'_>; 2];
    let mut _62: core::fmt::rt::Argument<'_>;
    let mut _63: &u16;
    let _64: &u16;
    let _65: &state::spot_market::SpotMarket;
    let mut _66: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _67: core::fmt::rt::Argument<'_>;
    let mut _68: &u16;
    let _69: &u16;
    let mut _71: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _72: std::result::Result<u64, error::ErrorCode>;
    let mut _73: u128;
    let mut _74: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _75: std::result::Result<u128, error::ErrorCode>;
    let mut _76: &state::spot_market::SpotMarket;
    let _77: &state::spot_market::SpotMarket;
    let mut _78: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _79: isize;
    let mut _81: !;
    let mut _82: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _84: isize;
    let mut _86: !;
    let mut _87: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _90: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _91: std::result::Result<u64, error::ErrorCode>;
    let mut _92: u64;
    let mut _93: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _94: std::result::Result<u64, error::ErrorCode>;
    let mut _95: u64;
    let mut _96: &state::spot_market::SpotMarket;
    let mut _97: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _98: u64;
    let mut _99: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _100: std::result::Result<u64, error::ErrorCode>;
    let mut _101: u16;
    let mut _102: isize;
    let mut _104: !;
    let mut _105: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _107: isize;
    let mut _109: !;
    let mut _110: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _112: isize;
    let mut _114: !;
    let mut _115: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _117: ();
    let mut _118: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _119: std::result::Result<(), error::ErrorCode>;
    let mut _120: bool;
    let mut _121: u64;
    let mut _122: u64;
    let mut _123: ();
    let _125: ();
    let mut _126: &str;
    let _127: &str;
    let mut _128: &std::string::String;
    let _129: &std::string::String;
    let _130: std::string::String;
    let mut _132: std::fmt::Arguments<'_>;
    let mut _133: &[&str];
    let mut _134: &[&str; 2];
    let _135: &[&str; 2];
    let _136: [&str; 2];
    let mut _137: &[core::fmt::rt::Argument<'_>];
    let mut _138: &[core::fmt::rt::Argument<'_>; 1];
    let _139: &[core::fmt::rt::Argument<'_>; 1];
    let _140: [core::fmt::rt::Argument<'_>; 1];
    let mut _141: core::fmt::rt::Argument<'_>;
    let mut _142: &error::ErrorCode;
    let _143: &error::ErrorCode;
    let _144: ();
    let mut _145: &str;
    let _146: &str;
    let mut _147: &std::string::String;
    let _148: &std::string::String;
    let _149: std::string::String;
    let mut _151: std::fmt::Arguments<'_>;
    let mut _152: &[&str];
    let mut _153: &[&str; 2];
    let _154: &[&str; 2];
    let _155: [&str; 2];
    let mut _156: &[core::fmt::rt::Argument<'_>];
    let mut _157: &[core::fmt::rt::Argument<'_>; 2];
    let _158: &[core::fmt::rt::Argument<'_>; 2];
    let _159: [core::fmt::rt::Argument<'_>; 2];
    let mut _160: core::fmt::rt::Argument<'_>;
    let mut _161: &u64;
    let _162: &u64;
    let mut _163: core::fmt::rt::Argument<'_>;
    let mut _164: &u16;
    let _165: &u16;
    let mut _166: error::ErrorCode;
    let mut _167: isize;
    let mut _169: !;
    let mut _170: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _172: u16;
    let mut _173: &mut state::spot_market::SpotMarket;
    let mut _174: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _175: ();
    let mut _180: &mut instructions::admin::AdminUpdateSpotMarket<'_>;
    let mut _181: &mut instructions::admin::AdminUpdateSpotMarket<'_>;
    let mut _182: isize;
    let mut _183: isize;
    let mut _184: isize;
    let mut _185: isize;
    let mut _186: isize;
    let mut _187: isize;
    let mut _188: isize;
    let mut _189: isize;
    let mut _190: isize;
    let mut _191: isize;
    scope 1 {
        debug residual => _9;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _12;
        scope 4 {
        }
    }
    scope 5 {
        debug spot_market => _13;
        let _31: std::string::String;
        let _52: std::string::String;
        let _70: u64;
        let _80: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _83: u128;
        let _85: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _88: u64;
        let mut _178: &[&str; 2];
        let mut _179: &[&str; 1];
        scope 10 {
            debug res => _31;
        }
        scope 11 {
            debug res => _52;
        }
        scope 12 {
            debug current_spot_tokens_borrows => _70;
            let _89: u64;
            let _103: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _106: u64;
            let _108: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _111: u64;
            let _113: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _116: u64;
            scope 21 {
                debug new_max_token_borrows => _89;
                let _124: error::ErrorCode;
                let _168: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _171: ();
                scope 34 {
                    debug error_code => _124;
                    let _131: std::string::String;
                    let _150: std::string::String;
                    let mut _176: &[&str; 2];
                    let mut _177: &[&str; 2];
                    scope 35 {
                        debug res => _131;
                    }
                    scope 36 {
                        debug res => _150;
                    }
                }
                scope 37 {
                    debug residual => _168;
                    scope 38 {
                    }
                }
                scope 39 {
                    debug val => _171;
                    scope 40 {
                    }
                }
            }
            scope 22 {
                debug residual => _103;
                scope 23 {
                }
            }
            scope 24 {
                debug val => _106;
                scope 25 {
                }
            }
            scope 26 {
                debug residual => _108;
                scope 27 {
                }
            }
            scope 28 {
                debug val => _111;
                scope 29 {
                }
            }
            scope 30 {
                debug residual => _113;
                scope 31 {
                }
            }
            scope 32 {
                debug val => _116;
                scope 33 {
                }
            }
        }
        scope 13 {
            debug residual => _80;
            scope 14 {
            }
        }
        scope 15 {
            debug val => _83;
            scope 16 {
            }
        }
        scope 17 {
            debug residual => _85;
            scope 18 {
            }
        }
        scope 19 {
            debug val => _88;
            scope 20 {
            }
        }
    }
    scope 6 {
        debug residual => _21;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _24;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _180 = deref_copy (_1.1: &mut instructions::admin::AdminUpdateSpotMarket<'_>);
        _7 = &((*_180).2: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _6 = &(*_7);
        _5 = constraints::spot_market_valid(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb89];
    }

    bb2: {
        StorageDead(_5);
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_4 as Continue).0: ());
        _3 = _12;
        StorageDead(_12);
        _182 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _181 = deref_copy (_1.1: &mut instructions::admin::AdminUpdateSpotMarket<'_>);
        _18 = &((*_181).2: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _17 = anchor_lang::prelude::AccountLoader::<'_, SpotMarket>::load_mut(move _18) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _11) -> [return: bb6, unwind: bb91];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _188 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb83;
    }

    bb7: {
        StorageDead(_18);
        StorageLive(_19);
        _19 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _16 = std::result::Result::<RefMut<'_, SpotMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _17, move _19) -> [return: bb8, unwind: bb89];
    }

    bb8: {
        StorageDead(_19);
        StorageDead(_17);
        _15 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _16) -> [return: bb9, unwind: bb89];
    }

    bb9: {
        StorageDead(_16);
        _20 = discriminant(_15);
        switchInt(move _20) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_24);
        _24 = move ((_15 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _14 = move _24;
        StorageDead(_24);
        _13 = &mut _14;
        _186 = discriminant(_15);
        StorageDead(_15);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _179 = const _;
        _35 = &(*_179);
        _34 = &(*_35);
        _33 = move _34 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_34);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = &(*_13);
        _44 = <RefMut<'_, SpotMarket> as Deref>::deref(move _45) -> [return: bb13, unwind: bb88];
    }

    bb11: {
        StorageLive(_21);
        _21 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_23);
        _23 = _21;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _23) -> [return: bb12, unwind: bb90];
    }

    bb12: {
        StorageDead(_23);
        StorageDead(_21);
        _184 = discriminant(_15);
        StorageDead(_15);
        goto -> bb82;
    }

    bb13: {
        StorageDead(_45);
        _43 = &((*_44).42: u16);
        _42 = &(*_43);
        _41 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _42) -> [return: bb14, unwind: bb88];
    }

    bb14: {
        StorageDead(_42);
        _40 = [move _41];
        StorageDead(_41);
        _39 = &_40;
        _38 = &(*_39);
        _37 = move _38 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_38);
        _32 = Arguments::<'_>::new_v1(move _33, move _37) -> [return: bb15, unwind: bb88];
    }

    bb15: {
        StorageDead(_37);
        StorageDead(_33);
        _31 = format(move _32) -> [return: bb16, unwind: bb88];
    }

    bb16: {
        StorageDead(_32);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_35);
        _30 = move _31;
        StorageDead(_31);
        _29 = &_30;
        _28 = &(*_29);
        _27 = <String as Deref>::deref(move _28) -> [return: bb17, unwind: bb87];
    }

    bb17: {
        _26 = &(*_27);
        StorageDead(_28);
        _25 = solana_program::log::sol_log(move _26) -> [return: bb18, unwind: bb87];
    }

    bb18: {
        StorageDead(_26);
        drop(_30) -> [return: bb19, unwind: bb88];
    }

    bb19: {
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_25);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _178 = const _;
        _56 = &(*_178);
        _55 = &(*_56);
        _54 = move _55 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_55);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _66 = &(*_13);
        _65 = <RefMut<'_, SpotMarket> as Deref>::deref(move _66) -> [return: bb20, unwind: bb88];
    }

    bb20: {
        StorageDead(_66);
        _64 = &((*_65).50: u16);
        _63 = &(*_64);
        _62 = core::fmt::rt::Argument::<'_>::new_debug::<u16>(move _63) -> [return: bb21, unwind: bb88];
    }

    bb21: {
        StorageDead(_63);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &_2;
        _68 = &(*_69);
        _67 = core::fmt::rt::Argument::<'_>::new_debug::<u16>(move _68) -> [return: bb22, unwind: bb88];
    }

    bb22: {
        StorageDead(_68);
        _61 = [move _62, move _67];
        StorageDead(_67);
        StorageDead(_62);
        _60 = &_61;
        _59 = &(*_60);
        _58 = move _59 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_59);
        _53 = Arguments::<'_>::new_v1(move _54, move _58) -> [return: bb23, unwind: bb88];
    }

    bb23: {
        StorageDead(_58);
        StorageDead(_54);
        _52 = format(move _53) -> [return: bb24, unwind: bb88];
    }

    bb24: {
        StorageDead(_53);
        StorageDead(_69);
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_56);
        _51 = move _52;
        StorageDead(_52);
        _50 = &_51;
        _49 = &(*_50);
        _48 = <String as Deref>::deref(move _49) -> [return: bb25, unwind: bb86];
    }

    bb25: {
        _47 = &(*_48);
        StorageDead(_49);
        _46 = solana_program::log::sol_log(move _47) -> [return: bb26, unwind: bb86];
    }

    bb26: {
        StorageDead(_47);
        drop(_51) -> [return: bb27, unwind: bb88];
    }

    bb27: {
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_48);
        StorageDead(_46);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = &(*_13);
        _77 = <RefMut<'_, SpotMarket> as Deref>::deref(move _78) -> [return: bb28, unwind: bb88];
    }

    bb28: {
        _76 = &(*_77);
        StorageDead(_78);
        _75 = SpotMarket::get_borrows(move _76) -> [return: bb29, unwind: bb88];
    }

    bb29: {
        StorageDead(_76);
        _74 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _75) -> [return: bb30, unwind: bb88];
    }

    bb30: {
        StorageDead(_75);
        _79 = discriminant(_74);
        switchInt(move _79) -> [0: bb31, 1: bb32, otherwise: bb4];
    }

    bb31: {
        StorageLive(_83);
        _83 = ((_74 as Continue).0: u128);
        _73 = _83;
        StorageDead(_83);
        _72 = <u128 as Cast>::cast::<u64>(move _73) -> [return: bb34, unwind: bb88];
    }

    bb32: {
        StorageLive(_80);
        _80 = ((_74 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_82);
        _82 = _80;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _82) -> [return: bb33, unwind: bb88];
    }

    bb33: {
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_73);
        StorageDead(_72);
        goto -> bb80;
    }

    bb34: {
        StorageDead(_73);
        _71 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _72) -> [return: bb35, unwind: bb88];
    }

    bb35: {
        StorageDead(_72);
        _84 = discriminant(_71);
        switchInt(move _84) -> [0: bb36, 1: bb37, otherwise: bb4];
    }

    bb36: {
        StorageLive(_88);
        _88 = ((_71 as Continue).0: u64);
        _70 = _88;
        StorageDead(_88);
        StorageDead(_77);
        StorageDead(_74);
        StorageDead(_71);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = &(*_13);
        _96 = <RefMut<'_, SpotMarket> as Deref>::deref(move _97) -> [return: bb39, unwind: bb88];
    }

    bb37: {
        StorageLive(_85);
        _85 = ((_71 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_87);
        _87 = _85;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _87) -> [return: bb38, unwind: bb88];
    }

    bb38: {
        StorageDead(_87);
        StorageDead(_85);
        goto -> bb80;
    }

    bb39: {
        StorageDead(_97);
        _95 = ((*_96).18: u64);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _101 = _2;
        _100 = <u16 as Cast>::cast::<u64>(move _101) -> [return: bb40, unwind: bb88];
    }

    bb40: {
        StorageDead(_101);
        _99 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _100) -> [return: bb41, unwind: bb88];
    }

    bb41: {
        StorageDead(_100);
        _102 = discriminant(_99);
        switchInt(move _102) -> [0: bb42, 1: bb43, otherwise: bb4];
    }

    bb42: {
        StorageLive(_106);
        _106 = ((_99 as Continue).0: u64);
        _98 = _106;
        StorageDead(_106);
        _94 = <u64 as SafeMath>::safe_mul(move _95, move _98) -> [return: bb45, unwind: bb88];
    }

    bb43: {
        StorageLive(_103);
        _103 = ((_99 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_105);
        _105 = _103;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _105) -> [return: bb44, unwind: bb88];
    }

    bb44: {
        StorageDead(_105);
        StorageDead(_103);
        StorageDead(_98);
        StorageDead(_95);
        StorageDead(_94);
        goto -> bb77;
    }

    bb45: {
        StorageDead(_98);
        StorageDead(_95);
        _93 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _94) -> [return: bb46, unwind: bb88];
    }

    bb46: {
        StorageDead(_94);
        _107 = discriminant(_93);
        switchInt(move _107) -> [0: bb47, 1: bb48, otherwise: bb4];
    }

    bb47: {
        StorageLive(_111);
        _111 = ((_93 as Continue).0: u64);
        _92 = _111;
        StorageDead(_111);
        _91 = <u64 as SafeMath>::safe_div(move _92, const 10000_u64) -> [return: bb50, unwind: bb88];
    }

    bb48: {
        StorageLive(_108);
        _108 = ((_93 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_110);
        _110 = _108;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _110) -> [return: bb49, unwind: bb88];
    }

    bb49: {
        StorageDead(_110);
        StorageDead(_108);
        goto -> bb77;
    }

    bb50: {
        StorageDead(_92);
        _90 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _91) -> [return: bb51, unwind: bb88];
    }

    bb51: {
        StorageDead(_91);
        _112 = discriminant(_90);
        switchInt(move _112) -> [0: bb52, 1: bb53, otherwise: bb4];
    }

    bb52: {
        StorageLive(_116);
        _116 = ((_90 as Continue).0: u64);
        _89 = _116;
        StorageDead(_116);
        StorageDead(_99);
        StorageDead(_96);
        StorageDead(_93);
        StorageDead(_90);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        _121 = _70;
        StorageLive(_122);
        _122 = _89;
        _120 = Le(move _121, move _122);
        switchInt(move _120) -> [0: bb56, otherwise: bb55];
    }

    bb53: {
        StorageLive(_113);
        _113 = ((_90 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_115);
        _115 = _113;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _115) -> [return: bb54, unwind: bb88];
    }

    bb54: {
        StorageDead(_115);
        StorageDead(_113);
        goto -> bb78;
    }

    bb55: {
        StorageDead(_122);
        StorageDead(_121);
        StorageLive(_123);
        _123 = ();
        _119 = std::result::Result::<(), error::ErrorCode>::Ok(move _123);
        StorageDead(_123);
        goto -> bb70;
    }

    bb56: {
        StorageDead(_122);
        StorageDead(_121);
        StorageLive(_124);
        _124 = error::ErrorCode::InvalidSpotMarketInitialization;
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        _177 = const _;
        _135 = &(*_177);
        _134 = &(*_135);
        _133 = move _134 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_134);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        _143 = &_124;
        _142 = &(*_143);
        _141 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _142) -> [return: bb57, unwind: bb88];
    }

    bb57: {
        StorageDead(_142);
        _140 = [move _141];
        StorageDead(_141);
        _139 = &_140;
        _138 = &(*_139);
        _137 = move _138 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_138);
        _132 = Arguments::<'_>::new_v1(move _133, move _137) -> [return: bb58, unwind: bb88];
    }

    bb58: {
        StorageDead(_137);
        StorageDead(_133);
        _131 = format(move _132) -> [return: bb59, unwind: bb88];
    }

    bb59: {
        StorageDead(_132);
        StorageDead(_143);
        StorageDead(_140);
        StorageDead(_139);
        StorageDead(_135);
        _130 = move _131;
        StorageDead(_131);
        _129 = &_130;
        _128 = &(*_129);
        _127 = <String as Deref>::deref(move _128) -> [return: bb60, unwind: bb85];
    }

    bb60: {
        _126 = &(*_127);
        StorageDead(_128);
        _125 = solana_program::log::sol_log(move _126) -> [return: bb61, unwind: bb85];
    }

    bb61: {
        StorageDead(_126);
        drop(_130) -> [return: bb62, unwind: bb88];
    }

    bb62: {
        StorageDead(_130);
        StorageDead(_129);
        StorageDead(_127);
        StorageDead(_125);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        _176 = const _;
        _154 = &(*_176);
        _153 = &(*_154);
        _152 = move _153 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_153);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        _162 = &_70;
        _161 = &(*_162);
        _160 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _161) -> [return: bb63, unwind: bb88];
    }

    bb63: {
        StorageDead(_161);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        _165 = &_2;
        _164 = &(*_165);
        _163 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _164) -> [return: bb64, unwind: bb88];
    }

    bb64: {
        StorageDead(_164);
        _159 = [move _160, move _163];
        StorageDead(_163);
        StorageDead(_160);
        _158 = &_159;
        _157 = &(*_158);
        _156 = move _157 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_157);
        _151 = Arguments::<'_>::new_v1(move _152, move _156) -> [return: bb65, unwind: bb88];
    }

    bb65: {
        StorageDead(_156);
        StorageDead(_152);
        _150 = format(move _151) -> [return: bb66, unwind: bb88];
    }

    bb66: {
        StorageDead(_151);
        StorageDead(_165);
        StorageDead(_162);
        StorageDead(_159);
        StorageDead(_158);
        StorageDead(_154);
        _149 = move _150;
        StorageDead(_150);
        _148 = &_149;
        _147 = &(*_148);
        _146 = <String as Deref>::deref(move _147) -> [return: bb67, unwind: bb84];
    }

    bb67: {
        _145 = &(*_146);
        StorageDead(_147);
        _144 = solana_program::log::sol_log(move _145) -> [return: bb68, unwind: bb84];
    }

    bb68: {
        StorageDead(_145);
        drop(_149) -> [return: bb69, unwind: bb88];
    }

    bb69: {
        StorageDead(_149);
        StorageDead(_148);
        StorageDead(_146);
        StorageDead(_144);
        StorageLive(_166);
        _166 = _124;
        _119 = std::result::Result::<(), error::ErrorCode>::Err(move _166);
        StorageDead(_166);
        StorageDead(_124);
        goto -> bb70;
    }

    bb70: {
        StorageDead(_120);
        _118 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _119) -> [return: bb71, unwind: bb88];
    }

    bb71: {
        StorageDead(_119);
        _167 = discriminant(_118);
        switchInt(move _167) -> [0: bb72, 1: bb73, otherwise: bb4];
    }

    bb72: {
        StorageLive(_171);
        _171 = ((_118 as Continue).0: ());
        _117 = _171;
        StorageDead(_171);
        StorageDead(_118);
        StorageDead(_117);
        StorageLive(_172);
        _172 = _2;
        StorageLive(_173);
        StorageLive(_174);
        _174 = &mut (*_13);
        _173 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _174) -> [return: bb75, unwind: bb88];
    }

    bb73: {
        StorageLive(_168);
        _168 = ((_118 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_170);
        _170 = _168;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _170) -> [return: bb74, unwind: bb88];
    }

    bb74: {
        StorageDead(_170);
        StorageDead(_168);
        StorageDead(_118);
        StorageDead(_117);
        goto -> bb79;
    }

    bb75: {
        StorageDead(_174);
        ((*_173).50: u16) = move _172;
        StorageDead(_172);
        StorageDead(_173);
        StorageLive(_175);
        _175 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _175);
        StorageDead(_175);
        StorageDead(_89);
        StorageDead(_70);
        drop(_14) -> [return: bb76, unwind: bb89];
    }

    bb76: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb83;
    }

    bb77: {
        StorageDead(_92);
        StorageDead(_91);
        goto -> bb78;
    }

    bb78: {
        StorageDead(_99);
        StorageDead(_96);
        StorageDead(_93);
        StorageDead(_90);
        goto -> bb79;
    }

    bb79: {
        StorageDead(_89);
        goto -> bb81;
    }

    bb80: {
        StorageDead(_77);
        StorageDead(_74);
        StorageDead(_71);
        goto -> bb81;
    }

    bb81: {
        StorageDead(_70);
        drop(_14) -> [return: bb82, unwind: bb89];
    }

    bb82: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb83;
    }

    bb83: {
        return;
    }

    bb84 (cleanup): {
        drop(_149) -> [return: bb88, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        drop(_130) -> [return: bb88, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        drop(_51) -> [return: bb88, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        drop(_30) -> [return: bb88, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        drop(_14) -> [return: bb89, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        resume;
    }

    bb90 (cleanup): {
        _190 = discriminant(_15);
        goto -> bb89;
    }

    bb91 (cleanup): {
        _191 = discriminant(_4);
        goto -> bb89;
    }
}
