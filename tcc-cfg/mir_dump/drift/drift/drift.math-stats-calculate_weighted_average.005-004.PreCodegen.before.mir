// MIR for `calculate_weighted_average` before PreCodegen

fn calculate_weighted_average(_1: i64, _2: i64, _3: i64, _4: i64, _5: Option<i64>) -> std::result::Result<i64, error::ErrorCode> {
    debug data1 => _1;
    debug data2 => _2;
    debug weight1 => _3;
    debug weight2 => _4;
    debug bias => _5;
    let mut _0: std::result::Result<i64, error::ErrorCode>;
    let _6: i128;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _8: std::result::Result<i128, error::ErrorCode>;
    let mut _9: i64;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _11: std::result::Result<i64, error::ErrorCode>;
    let mut _12: i64;
    let mut _13: i64;
    let mut _14: isize;
    let _15: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _16: !;
    let mut _17: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _18: i64;
    let mut _19: isize;
    let _20: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _21: !;
    let mut _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _23: i128;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _26: std::result::Result<i128, error::ErrorCode>;
    let mut _27: i128;
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _29: std::result::Result<i128, error::ErrorCode>;
    let mut _30: i64;
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _36: i128;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _38: std::result::Result<i128, error::ErrorCode>;
    let mut _39: i64;
    let mut _40: isize;
    let mut _42: !;
    let mut _43: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _45: isize;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _52: std::result::Result<i128, error::ErrorCode>;
    let mut _53: i128;
    let mut _54: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _55: std::result::Result<i128, error::ErrorCode>;
    let mut _56: i64;
    let mut _57: isize;
    let mut _59: !;
    let mut _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _62: i128;
    let mut _63: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _64: std::result::Result<i128, error::ErrorCode>;
    let mut _65: i64;
    let mut _66: isize;
    let mut _68: !;
    let mut _69: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _71: isize;
    let mut _73: !;
    let mut _74: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _76: ();
    let mut _77: bool;
    let mut _78: i64;
    let mut _79: !;
    let mut _80: i64;
    let _81: ();
    let mut _82: bool;
    let mut _83: i64;
    let mut _84: !;
    let mut _85: i64;
    let mut _87: std::option::Option<i64>;
    let mut _88: {closure@programs/drift/src/math/stats.rs:40:41: 40:43};
    let mut _89: &i64;
    let mut _90: &i128;
    let mut _91: &i128;
    let mut _93: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _94: std::result::Result<i64, error::ErrorCode>;
    let mut _95: i128;
    let mut _96: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _97: std::result::Result<i128, error::ErrorCode>;
    let mut _98: i128;
    let mut _99: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _100: std::result::Result<i128, error::ErrorCode>;
    let mut _101: i128;
    let mut _102: i128;
    let mut _103: isize;
    let mut _105: !;
    let mut _106: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _108: i128;
    let mut _109: isize;
    let mut _111: !;
    let mut _112: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _114: isize;
    let mut _116: !;
    let mut _117: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _119: ();
    let mut _120: bool;
    let mut _121: i64;
    let mut _122: bool;
    let mut _123: i64;
    let mut _124: !;
    let mut _125: i64;
    let mut _126: i64;
    let mut _127: i64;
    scope 1 {
        debug denominator => _6;
        let _24: i128;
        let _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _35: i128;
        let _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _44: i128;
        let _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _49: i128;
        scope 10 {
            debug prev_twap_99 => _24;
            let _50: i128;
            let _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _61: i128;
            let _67: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _70: i128;
            let _72: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _75: i128;
            scope 23 {
                debug latest_price_01 => _50;
                let _86: i64;
                scope 36 {
                    debug bias => _86;
                    let _92: i64;
                    let _104: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _107: i128;
                    let _110: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _113: i128;
                    let _115: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _118: i64;
                    scope 37 {
                        debug twap => _92;
                    }
                    scope 38 {
                        debug residual => _104;
                        scope 39 {
                        }
                    }
                    scope 40 {
                        debug val => _107;
                        scope 41 {
                        }
                    }
                    scope 42 {
                        debug residual => _110;
                        scope 43 {
                        }
                    }
                    scope 44 {
                        debug val => _113;
                        scope 45 {
                        }
                    }
                    scope 46 {
                        debug residual => _115;
                        scope 47 {
                        }
                    }
                    scope 48 {
                        debug val => _118;
                        scope 49 {
                        }
                    }
                }
            }
            scope 24 {
                debug residual => _58;
                scope 25 {
                }
            }
            scope 26 {
                debug val => _61;
                scope 27 {
                }
            }
            scope 28 {
                debug residual => _67;
                scope 29 {
                }
            }
            scope 30 {
                debug val => _70;
                scope 31 {
                }
            }
            scope 32 {
                debug residual => _72;
                scope 33 {
                }
            }
            scope 34 {
                debug val => _75;
                scope 35 {
                }
            }
        }
        scope 11 {
            debug residual => _32;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _35;
            scope 14 {
            }
        }
        scope 15 {
            debug residual => _41;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _44;
            scope 18 {
            }
        }
        scope 19 {
            debug residual => _46;
            scope 20 {
            }
        }
        scope 21 {
            debug val => _49;
            scope 22 {
            }
        }
    }
    scope 2 {
        debug residual => _15;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _18;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _20;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _23;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = _3;
        StorageLive(_13);
        _13 = _4;
        _11 = <i64 as SafeMath>::safe_add(move _12, move _13) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_13);
        StorageDead(_12);
        _10 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _11) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_11);
        _14 = discriminant(_10);
        switchInt(move _14) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_18);
        _18 = ((_10 as Continue).0: i64);
        _9 = _18;
        StorageDead(_18);
        _8 = <i64 as Cast>::cast::<i128>(move _9) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_15);
        _15 = ((_10 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_17);
        _17 = _15;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _17) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb77;
    }

    bb7: {
        StorageDead(_9);
        _7 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _8) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_8);
        _19 = discriminant(_7);
        switchInt(move _19) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_23);
        _23 = ((_7 as Continue).0: i128);
        _6 = _23;
        StorageDead(_23);
        StorageDead(_10);
        StorageDead(_7);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = _1;
        _29 = <i64 as Cast>::cast::<i128>(move _30) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_20);
        _20 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_22);
        _22 = _20;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _22) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_22);
        StorageDead(_20);
        goto -> bb77;
    }

    bb12: {
        StorageDead(_30);
        _28 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _29) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_29);
        _31 = discriminant(_28);
        switchInt(move _31) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_35);
        _35 = ((_28 as Continue).0: i128);
        _27 = _35;
        StorageDead(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = _3;
        _38 = <i64 as Cast>::cast::<i128>(move _39) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_32);
        _32 = ((_28 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_34);
        _34 = _32;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _34) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_34);
        StorageDead(_32);
        StorageDead(_27);
        StorageDead(_26);
        goto -> bb75;
    }

    bb17: {
        StorageDead(_39);
        _37 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _38) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_38);
        _40 = discriminant(_37);
        switchInt(move _40) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_44);
        _44 = ((_37 as Continue).0: i128);
        _36 = _44;
        StorageDead(_44);
        _26 = <i128 as SafeMath>::safe_mul(move _27, move _36) -> [return: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_41);
        _41 = ((_37 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_43);
        _43 = _41;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _43) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_43);
        StorageDead(_41);
        StorageDead(_36);
        StorageDead(_27);
        StorageDead(_26);
        goto -> bb74;
    }

    bb22: {
        StorageDead(_36);
        StorageDead(_27);
        _25 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _26) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_26);
        _45 = discriminant(_25);
        switchInt(move _45) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_49);
        _49 = ((_25 as Continue).0: i128);
        _24 = _49;
        StorageDead(_49);
        StorageDead(_37);
        StorageDead(_28);
        StorageDead(_25);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = _2;
        _55 = <i64 as Cast>::cast::<i128>(move _56) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_46);
        _46 = ((_25 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_48);
        _48 = _46;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _48) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_48);
        StorageDead(_46);
        goto -> bb74;
    }

    bb27: {
        StorageDead(_56);
        _54 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _55) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_55);
        _57 = discriminant(_54);
        switchInt(move _57) -> [0: bb29, 1: bb30, otherwise: bb4];
    }

    bb29: {
        StorageLive(_61);
        _61 = ((_54 as Continue).0: i128);
        _53 = _61;
        StorageDead(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = _4;
        _64 = <i64 as Cast>::cast::<i128>(move _65) -> [return: bb32, unwind continue];
    }

    bb30: {
        StorageLive(_58);
        _58 = ((_54 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_60);
        _60 = _58;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _60) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_53);
        StorageDead(_52);
        goto -> bb72;
    }

    bb32: {
        StorageDead(_65);
        _63 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _64) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_64);
        _66 = discriminant(_63);
        switchInt(move _66) -> [0: bb34, 1: bb35, otherwise: bb4];
    }

    bb34: {
        StorageLive(_70);
        _70 = ((_63 as Continue).0: i128);
        _62 = _70;
        StorageDead(_70);
        _52 = <i128 as SafeMath>::safe_mul(move _53, move _62) -> [return: bb37, unwind continue];
    }

    bb35: {
        StorageLive(_67);
        _67 = ((_63 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_69);
        _69 = _67;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _69) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_69);
        StorageDead(_67);
        StorageDead(_62);
        StorageDead(_53);
        StorageDead(_52);
        goto -> bb71;
    }

    bb37: {
        StorageDead(_62);
        StorageDead(_53);
        _51 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _52) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_52);
        _71 = discriminant(_51);
        switchInt(move _71) -> [0: bb39, 1: bb40, otherwise: bb4];
    }

    bb39: {
        StorageLive(_75);
        _75 = ((_51 as Continue).0: i128);
        _50 = _75;
        StorageDead(_75);
        StorageDead(_63);
        StorageDead(_54);
        StorageDead(_51);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = _3;
        _77 = Eq(move _78, const 0_i64);
        switchInt(move _77) -> [0: bb43, otherwise: bb42];
    }

    bb40: {
        StorageLive(_72);
        _72 = ((_51 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_74);
        _74 = _72;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _74) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_74);
        StorageDead(_72);
        goto -> bb71;
    }

    bb42: {
        StorageDead(_78);
        StorageLive(_80);
        _80 = _2;
        _0 = std::result::Result::<i64, error::ErrorCode>::Ok(move _80);
        StorageDead(_80);
        StorageDead(_77);
        StorageDead(_76);
        goto -> bb73;
    }

    bb43: {
        StorageDead(_78);
        _76 = const ();
        StorageDead(_77);
        StorageDead(_76);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _83 = _4;
        _82 = Eq(move _83, const 0_i64);
        switchInt(move _82) -> [0: bb45, otherwise: bb44];
    }

    bb44: {
        StorageDead(_83);
        StorageLive(_85);
        _85 = _1;
        _0 = std::result::Result::<i64, error::ErrorCode>::Ok(move _85);
        StorageDead(_85);
        StorageDead(_82);
        StorageDead(_81);
        goto -> bb73;
    }

    bb45: {
        StorageDead(_83);
        _81 = const ();
        StorageDead(_82);
        StorageDead(_81);
        StorageLive(_86);
        StorageLive(_87);
        _87 = _5;
        StorageLive(_88);
        StorageLive(_89);
        _89 = &_4;
        StorageLive(_90);
        _90 = &_50;
        StorageLive(_91);
        _91 = &_24;
        _88 = {closure@programs/drift/src/math/stats.rs:40:41: 40:43} { weight2: move _89, latest_price_01: move _90, prev_twap_99: move _91 };
        StorageDead(_91);
        StorageDead(_90);
        StorageDead(_89);
        _86 = Option::<i64>::unwrap_or_else::<{closure@programs/drift/src/math/stats.rs:40:41: 40:43}>(move _87, move _88) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_88);
        StorageDead(_87);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _101 = _24;
        StorageLive(_102);
        _102 = _50;
        _100 = <i128 as SafeMath>::safe_add(move _101, move _102) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_102);
        StorageDead(_101);
        _99 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _100) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_100);
        _103 = discriminant(_99);
        switchInt(move _103) -> [0: bb49, 1: bb50, otherwise: bb4];
    }

    bb49: {
        StorageLive(_107);
        _107 = ((_99 as Continue).0: i128);
        _98 = _107;
        StorageDead(_107);
        StorageLive(_108);
        _108 = _6;
        _97 = <i128 as SafeMath>::safe_div(move _98, move _108) -> [return: bb52, unwind continue];
    }

    bb50: {
        StorageLive(_104);
        _104 = ((_99 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_106);
        _106 = _104;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _106) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_106);
        StorageDead(_104);
        StorageDead(_98);
        StorageDead(_97);
        goto -> bb68;
    }

    bb52: {
        StorageDead(_108);
        StorageDead(_98);
        _96 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _97) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_97);
        _109 = discriminant(_96);
        switchInt(move _109) -> [0: bb54, 1: bb55, otherwise: bb4];
    }

    bb54: {
        StorageLive(_113);
        _113 = ((_96 as Continue).0: i128);
        _95 = _113;
        StorageDead(_113);
        _94 = <i128 as Cast>::cast::<i64>(move _95) -> [return: bb57, unwind continue];
    }

    bb55: {
        StorageLive(_110);
        _110 = ((_96 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_112);
        _112 = _110;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _112) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_112);
        StorageDead(_110);
        goto -> bb68;
    }

    bb57: {
        StorageDead(_95);
        _93 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _94) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_94);
        _114 = discriminant(_93);
        switchInt(move _114) -> [0: bb59, 1: bb60, otherwise: bb4];
    }

    bb59: {
        StorageLive(_118);
        _118 = ((_93 as Continue).0: i64);
        _92 = _118;
        StorageDead(_118);
        StorageDead(_99);
        StorageDead(_96);
        StorageDead(_93);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        _121 = _92;
        _120 = Eq(move _121, const 0_i64);
        switchInt(move _120) -> [0: bb63, otherwise: bb62];
    }

    bb60: {
        StorageLive(_115);
        _115 = ((_93 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_117);
        _117 = _115;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _117) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_117);
        StorageDead(_115);
        goto -> bb69;
    }

    bb62: {
        StorageDead(_121);
        StorageLive(_122);
        StorageLive(_123);
        _123 = _86;
        _122 = Lt(move _123, const 0_i64);
        switchInt(move _122) -> [0: bb65, otherwise: bb64];
    }

    bb63: {
        StorageDead(_121);
        goto -> bb66;
    }

    bb64: {
        StorageDead(_123);
        StorageLive(_125);
        _125 = _92;
        _0 = std::result::Result::<i64, error::ErrorCode>::Ok(move _125);
        StorageDead(_125);
        StorageDead(_122);
        StorageDead(_120);
        StorageDead(_119);
        goto -> bb70;
    }

    bb65: {
        StorageDead(_123);
        goto -> bb66;
    }

    bb66: {
        _119 = const ();
        StorageDead(_122);
        StorageDead(_120);
        StorageDead(_119);
        StorageLive(_126);
        _126 = _92;
        StorageLive(_127);
        _127 = _86;
        _0 = <i64 as SafeMath>::safe_add(move _126, move _127) -> [return: bb67, unwind continue];
    }

    bb67: {
        StorageDead(_127);
        StorageDead(_126);
        StorageDead(_92);
        StorageDead(_86);
        StorageDead(_50);
        StorageDead(_24);
        StorageDead(_6);
        goto -> bb79;
    }

    bb68: {
        StorageDead(_95);
        StorageDead(_94);
        goto -> bb69;
    }

    bb69: {
        StorageDead(_99);
        StorageDead(_96);
        StorageDead(_93);
        goto -> bb70;
    }

    bb70: {
        StorageDead(_92);
        StorageDead(_86);
        goto -> bb73;
    }

    bb71: {
        StorageDead(_63);
        goto -> bb72;
    }

    bb72: {
        StorageDead(_54);
        StorageDead(_51);
        goto -> bb73;
    }

    bb73: {
        StorageDead(_50);
        goto -> bb76;
    }

    bb74: {
        StorageDead(_37);
        goto -> bb75;
    }

    bb75: {
        StorageDead(_28);
        StorageDead(_25);
        goto -> bb76;
    }

    bb76: {
        StorageDead(_24);
        goto -> bb78;
    }

    bb77: {
        StorageDead(_10);
        StorageDead(_7);
        goto -> bb78;
    }

    bb78: {
        StorageDead(_6);
        goto -> bb79;
    }

    bb79: {
        return;
    }
}
