// MIR for `controller::liquidation::set_user_status_to_being_liquidated` before PreCodegen

fn controller::liquidation::set_user_status_to_being_liquidated(_1: &mut User, _2: &PerpMarketMap<'_>, _3: &SpotMarketMap<'_>, _4: &mut OracleMap<'_>, _5: u64, _6: &state::state::State) -> std::result::Result<(), error::ErrorCode> {
    debug user => _1;
    debug perp_market_map => _2;
    debug spot_market_map => _3;
    debug oracle_map => _4;
    debug slot => _5;
    debug state => _6;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _7: ();
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _9: std::result::Result<(), error::ErrorCode>;
    let mut _10: bool;
    let mut _11: &state::user::User;
    let mut _12: ();
    let _13: error::ErrorCode;
    let _14: ();
    let mut _15: &str;
    let _16: &str;
    let mut _17: &std::string::String;
    let _18: &std::string::String;
    let _19: std::string::String;
    let mut _21: std::fmt::Arguments<'_>;
    let mut _22: &[&str];
    let mut _23: &[&str; 2];
    let _24: &[&str; 2];
    let _25: [&str; 2];
    let mut _26: &[core::fmt::rt::Argument<'_>];
    let mut _27: &[core::fmt::rt::Argument<'_>; 1];
    let _28: &[core::fmt::rt::Argument<'_>; 1];
    let _29: [core::fmt::rt::Argument<'_>; 1];
    let mut _30: core::fmt::rt::Argument<'_>;
    let mut _31: &error::ErrorCode;
    let _32: &error::ErrorCode;
    let _33: ();
    let mut _34: &str;
    let _35: &str;
    let mut _36: &std::string::String;
    let _37: &std::string::String;
    let _38: std::string::String;
    let mut _40: std::fmt::Arguments<'_>;
    let mut _41: &[&str];
    let mut _42: &[&str; 1];
    let _43: &[&str; 1];
    let _44: [&str; 1];
    let mut _45: error::ErrorCode;
    let mut _46: isize;
    let _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _50: ();
    let _51: ();
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _53: std::result::Result<(), error::ErrorCode>;
    let mut _54: bool;
    let mut _55: &state::user::User;
    let mut _56: ();
    let _57: error::ErrorCode;
    let _58: ();
    let mut _59: &str;
    let _60: &str;
    let mut _61: &std::string::String;
    let _62: &std::string::String;
    let _63: std::string::String;
    let mut _65: std::fmt::Arguments<'_>;
    let mut _66: &[&str];
    let mut _67: &[&str; 2];
    let _68: &[&str; 2];
    let _69: [&str; 2];
    let mut _70: &[core::fmt::rt::Argument<'_>];
    let mut _71: &[core::fmt::rt::Argument<'_>; 1];
    let _72: &[core::fmt::rt::Argument<'_>; 1];
    let _73: [core::fmt::rt::Argument<'_>; 1];
    let mut _74: core::fmt::rt::Argument<'_>;
    let mut _75: &error::ErrorCode;
    let _76: &error::ErrorCode;
    let _77: ();
    let mut _78: &str;
    let _79: &str;
    let mut _80: &std::string::String;
    let _81: &std::string::String;
    let _82: std::string::String;
    let mut _84: std::fmt::Arguments<'_>;
    let mut _85: &[&str];
    let mut _86: &[&str; 1];
    let _87: &[&str; 1];
    let _88: [&str; 1];
    let mut _89: error::ErrorCode;
    let mut _90: isize;
    let _91: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _92: !;
    let mut _93: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _94: ();
    let _95: u32;
    let mut _97: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::margin_calculation::MarginCalculation>;
    let mut _98: std::result::Result<state::margin_calculation::MarginCalculation, error::ErrorCode>;
    let mut _99: &state::user::User;
    let mut _100: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _101: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _102: &mut state::oracle_map::OracleMap<'_>;
    let mut _103: state::margin_calculation::MarginContext;
    let mut _104: u32;
    let mut _105: isize;
    let mut _107: !;
    let mut _108: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _110: ();
    let mut _111: bool;
    let mut _112: &state::user::User;
    let mut _113: bool;
    let mut _114: &state::margin_calculation::MarginCalculation;
    let mut _115: !;
    let _116: ();
    let mut _117: &str;
    let _118: &str;
    let mut _119: &std::string::String;
    let _120: &std::string::String;
    let _121: std::string::String;
    let mut _123: std::fmt::Arguments<'_>;
    let mut _124: &[&str];
    let mut _125: &[&str; 1];
    let _126: &[&str; 1];
    let _127: [&str; 1];
    let mut _128: &[core::fmt::rt::Argument<'_>];
    let mut _129: &[core::fmt::rt::Argument<'_>; 1];
    let _130: &[core::fmt::rt::Argument<'_>; 1];
    let _131: [core::fmt::rt::Argument<'_>; 1];
    let mut _132: core::fmt::rt::Argument<'_>;
    let mut _133: &state::margin_calculation::MarginCalculation;
    let _134: &state::margin_calculation::MarginCalculation;
    let mut _135: error::ErrorCode;
    let _136: u16;
    let mut _137: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u16>;
    let mut _138: std::result::Result<u16, error::ErrorCode>;
    let mut _139: &mut state::user::User;
    let mut _140: u64;
    let mut _141: isize;
    let mut _143: !;
    let mut _144: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _146: ();
    scope 1 {
        debug error_code => _13;
        let _20: std::string::String;
        let _39: std::string::String;
        let mut _150: &[&str; 1];
        let mut _151: &[&str; 2];
        scope 2 {
            debug res => _20;
        }
        scope 3 {
            debug res => _39;
        }
    }
    scope 4 {
        debug residual => _47;
        scope 5 {
        }
    }
    scope 6 {
        debug val => _50;
        scope 7 {
        }
    }
    scope 8 {
        debug error_code => _57;
        let _64: std::string::String;
        let _83: std::string::String;
        let mut _148: &[&str; 1];
        let mut _149: &[&str; 2];
        scope 9 {
            debug res => _64;
        }
        scope 10 {
            debug res => _83;
        }
    }
    scope 11 {
        debug residual => _91;
        scope 12 {
        }
    }
    scope 13 {
        debug val => _94;
        scope 14 {
        }
    }
    scope 15 {
        debug liquidation_margin_buffer_ratio => _95;
        let _96: state::margin_calculation::MarginCalculation;
        let _106: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _109: state::margin_calculation::MarginCalculation;
        scope 16 {
            debug margin_calculation => _96;
            let _122: std::string::String;
            let _142: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _145: u16;
            let mut _147: &[&str; 1];
            scope 21 {
                debug res => _122;
            }
            scope 22 {
                debug residual => _142;
                scope 23 {
                }
            }
            scope 24 {
                debug val => _145;
                scope 25 {
                }
            }
        }
        scope 17 {
            debug residual => _106;
            scope 18 {
            }
        }
        scope 19 {
            debug val => _109;
            scope 20 {
            }
        }
    }

    bb0: {
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &(*_1);
        _10 = User::is_bankrupt(move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _10) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_11);
        StorageLive(_13);
        _13 = error::ErrorCode::UserBankrupt;
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _151 = const _;
        _24 = &(*_151);
        _23 = &(*_24);
        _22 = move _23 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_23);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = &_13;
        _31 = &(*_32);
        _30 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _31) -> [return: bb4, unwind continue];
    }

    bb3: {
        StorageDead(_11);
        StorageLive(_12);
        _12 = ();
        _9 = std::result::Result::<(), error::ErrorCode>::Ok(move _12);
        StorageDead(_12);
        goto -> bb15;
    }

    bb4: {
        StorageDead(_31);
        _29 = [move _30];
        StorageDead(_30);
        _28 = &_29;
        _27 = &(*_28);
        _26 = move _27 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_27);
        _21 = Arguments::<'_>::new_v1(move _22, move _26) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_26);
        StorageDead(_22);
        _20 = format(move _21) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_21);
        StorageDead(_32);
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_24);
        _19 = move _20;
        StorageDead(_20);
        _18 = &_19;
        _17 = &(*_18);
        _16 = <String as Deref>::deref(move _17) -> [return: bb7, unwind: bb71];
    }

    bb7: {
        _15 = &(*_16);
        StorageDead(_17);
        _14 = solana_program::log::sol_log(move _15) -> [return: bb8, unwind: bb71];
    }

    bb8: {
        StorageDead(_15);
        drop(_19) -> [return: bb9, unwind: bb72];
    }

    bb9: {
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_14);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _150 = const _;
        _43 = &(*_150);
        _42 = &(*_43);
        _41 = move _42 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_42);
        _40 = Arguments::<'_>::new_const(move _41) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_41);
        _39 = format(move _40) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_40);
        StorageDead(_43);
        _38 = move _39;
        StorageDead(_39);
        _37 = &_38;
        _36 = &(*_37);
        _35 = <String as Deref>::deref(move _36) -> [return: bb12, unwind: bb70];
    }

    bb12: {
        _34 = &(*_35);
        StorageDead(_36);
        _33 = solana_program::log::sol_log(move _34) -> [return: bb13, unwind: bb70];
    }

    bb13: {
        StorageDead(_34);
        drop(_38) -> [return: bb14, unwind: bb72];
    }

    bb14: {
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_33);
        StorageLive(_45);
        _45 = _13;
        _9 = std::result::Result::<(), error::ErrorCode>::Err(move _45);
        StorageDead(_45);
        StorageDead(_13);
        goto -> bb15;
    }

    bb15: {
        StorageDead(_10);
        _8 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _9) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_9);
        _46 = discriminant(_8);
        switchInt(move _46) -> [0: bb17, 1: bb19, otherwise: bb18];
    }

    bb17: {
        StorageLive(_50);
        _50 = ((_8 as Continue).0: ());
        _7 = _50;
        StorageDead(_50);
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &(*_1);
        _54 = User::is_being_liquidated(move _55) -> [return: bb21, unwind continue];
    }

    bb18: {
        unreachable;
    }

    bb19: {
        StorageLive(_47);
        _47 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_49);
        _49 = _47;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _49) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb66;
    }

    bb21: {
        switchInt(move _54) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        StorageDead(_55);
        StorageLive(_57);
        _57 = error::ErrorCode::UserIsBeingLiquidated;
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _149 = const _;
        _68 = &(*_149);
        _67 = &(*_68);
        _66 = move _67 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_67);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _76 = &_57;
        _75 = &(*_76);
        _74 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _75) -> [return: bb24, unwind continue];
    }

    bb23: {
        StorageDead(_55);
        StorageLive(_56);
        _56 = ();
        _53 = std::result::Result::<(), error::ErrorCode>::Ok(move _56);
        StorageDead(_56);
        goto -> bb35;
    }

    bb24: {
        StorageDead(_75);
        _73 = [move _74];
        StorageDead(_74);
        _72 = &_73;
        _71 = &(*_72);
        _70 = move _71 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_71);
        _65 = Arguments::<'_>::new_v1(move _66, move _70) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_70);
        StorageDead(_66);
        _64 = format(move _65) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_65);
        StorageDead(_76);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_68);
        _63 = move _64;
        StorageDead(_64);
        _62 = &_63;
        _61 = &(*_62);
        _60 = <String as Deref>::deref(move _61) -> [return: bb27, unwind: bb69];
    }

    bb27: {
        _59 = &(*_60);
        StorageDead(_61);
        _58 = solana_program::log::sol_log(move _59) -> [return: bb28, unwind: bb69];
    }

    bb28: {
        StorageDead(_59);
        drop(_63) -> [return: bb29, unwind: bb72];
    }

    bb29: {
        StorageDead(_63);
        StorageDead(_62);
        StorageDead(_60);
        StorageDead(_58);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _148 = const _;
        _87 = &(*_148);
        _86 = &(*_87);
        _85 = move _86 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_86);
        _84 = Arguments::<'_>::new_const(move _85) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_85);
        _83 = format(move _84) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_84);
        StorageDead(_87);
        _82 = move _83;
        StorageDead(_83);
        _81 = &_82;
        _80 = &(*_81);
        _79 = <String as Deref>::deref(move _80) -> [return: bb32, unwind: bb68];
    }

    bb32: {
        _78 = &(*_79);
        StorageDead(_80);
        _77 = solana_program::log::sol_log(move _78) -> [return: bb33, unwind: bb68];
    }

    bb33: {
        StorageDead(_78);
        drop(_82) -> [return: bb34, unwind: bb72];
    }

    bb34: {
        StorageDead(_82);
        StorageDead(_81);
        StorageDead(_79);
        StorageDead(_77);
        StorageLive(_89);
        _89 = _57;
        _53 = std::result::Result::<(), error::ErrorCode>::Err(move _89);
        StorageDead(_89);
        StorageDead(_57);
        goto -> bb35;
    }

    bb35: {
        StorageDead(_54);
        _52 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _53) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_53);
        _90 = discriminant(_52);
        switchInt(move _90) -> [0: bb37, 1: bb38, otherwise: bb18];
    }

    bb37: {
        StorageLive(_94);
        _94 = ((_52 as Continue).0: ());
        _51 = _94;
        StorageDead(_94);
        StorageDead(_52);
        StorageDead(_51);
        StorageLive(_95);
        _95 = ((*_6).11: u32);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = &(*_1);
        StorageLive(_100);
        _100 = &(*_2);
        StorageLive(_101);
        _101 = &(*_3);
        StorageLive(_102);
        _102 = &mut (*_4);
        StorageLive(_103);
        StorageLive(_104);
        _104 = _95;
        _103 = MarginContext::liquidation(move _104) -> [return: bb40, unwind continue];
    }

    bb38: {
        StorageLive(_91);
        _91 = ((_52 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_93);
        _93 = _91;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _93) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_93);
        StorageDead(_91);
        StorageDead(_52);
        StorageDead(_51);
        goto -> bb66;
    }

    bb40: {
        StorageDead(_104);
        _98 = math::margin::calculate_margin_requirement_and_total_collateral_and_liability_info(move _99, move _100, move _101, move _102, move _103) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_99);
        _97 = <std::result::Result<MarginCalculation, error::ErrorCode> as Try>::branch(move _98) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_98);
        _105 = discriminant(_97);
        switchInt(move _105) -> [0: bb43, 1: bb44, otherwise: bb18];
    }

    bb43: {
        StorageLive(_109);
        _109 = ((_97 as Continue).0: state::margin_calculation::MarginCalculation);
        _96 = _109;
        StorageDead(_109);
        StorageDead(_97);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _112 = &(*_1);
        _111 = User::is_being_liquidated(move _112) -> [return: bb46, unwind continue];
    }

    bb44: {
        StorageLive(_106);
        _106 = ((_97 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_108);
        _108 = _106;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _108) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_108);
        StorageDead(_106);
        StorageDead(_97);
        goto -> bb65;
    }

    bb46: {
        switchInt(move _111) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        StorageDead(_112);
        goto -> bb58;
    }

    bb48: {
        StorageDead(_112);
        StorageLive(_113);
        StorageLive(_114);
        _114 = &_96;
        _113 = MarginCalculation::meets_margin_requirement(move _114) -> [return: bb49, unwind continue];
    }

    bb49: {
        switchInt(move _113) -> [0: bb57, otherwise: bb50];
    }

    bb50: {
        StorageDead(_114);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        _147 = const _;
        _126 = &(*_147);
        _125 = &(*_126);
        _124 = move _125 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_125);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        _134 = &_96;
        _133 = &(*_134);
        _132 = core::fmt::rt::Argument::<'_>::new_debug::<MarginCalculation>(move _133) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_133);
        _131 = [move _132];
        StorageDead(_132);
        _130 = &_131;
        _129 = &(*_130);
        _128 = move _129 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_129);
        _123 = Arguments::<'_>::new_v1(move _124, move _128) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_128);
        StorageDead(_124);
        _122 = format(move _123) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_123);
        StorageDead(_134);
        StorageDead(_131);
        StorageDead(_130);
        StorageDead(_126);
        _121 = move _122;
        StorageDead(_122);
        _120 = &_121;
        _119 = &(*_120);
        _118 = <String as Deref>::deref(move _119) -> [return: bb54, unwind: bb67];
    }

    bb54: {
        _117 = &(*_118);
        StorageDead(_119);
        _116 = solana_program::log::sol_log(move _117) -> [return: bb55, unwind: bb67];
    }

    bb55: {
        StorageDead(_117);
        drop(_121) -> [return: bb56, unwind: bb72];
    }

    bb56: {
        StorageDead(_121);
        StorageDead(_120);
        StorageDead(_118);
        StorageDead(_116);
        StorageLive(_135);
        _135 = error::ErrorCode::SufficientCollateral;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _135);
        StorageDead(_135);
        goto -> bb64;
    }

    bb57: {
        StorageDead(_114);
        goto -> bb58;
    }

    bb58: {
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _139 = &mut (*_1);
        StorageLive(_140);
        _140 = _5;
        _138 = User::enter_liquidation(move _139, move _140) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_140);
        StorageDead(_139);
        _137 = <std::result::Result<u16, error::ErrorCode> as Try>::branch(move _138) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_138);
        _141 = discriminant(_137);
        switchInt(move _141) -> [0: bb61, 1: bb62, otherwise: bb18];
    }

    bb61: {
        StorageLive(_145);
        _145 = ((_137 as Continue).0: u16);
        _136 = _145;
        StorageDead(_145);
        StorageDead(_137);
        StorageDead(_136);
        _110 = const ();
        StorageDead(_113);
        StorageDead(_111);
        StorageDead(_110);
        StorageLive(_146);
        _146 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _146);
        StorageDead(_146);
        StorageDead(_96);
        StorageDead(_95);
        goto -> bb66;
    }

    bb62: {
        StorageLive(_142);
        _142 = ((_137 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_144);
        _144 = _142;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _144) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_144);
        StorageDead(_142);
        StorageDead(_137);
        StorageDead(_136);
        goto -> bb64;
    }

    bb64: {
        StorageDead(_113);
        StorageDead(_111);
        StorageDead(_110);
        goto -> bb65;
    }

    bb65: {
        StorageDead(_96);
        StorageDead(_95);
        goto -> bb66;
    }

    bb66: {
        return;
    }

    bb67 (cleanup): {
        drop(_121) -> [return: bb72, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        drop(_82) -> [return: bb72, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        drop(_63) -> [return: bb72, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        drop(_38) -> [return: bb72, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        drop(_19) -> [return: bb72, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        resume;
    }
}
