digraph Mir_0_2602 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn order_breaches_maker_oracle_price_bands(_1: &amp;ReErased state::user::Order, _2: i64, _3: u64, _4: u64, _5: u32, _6: bool) -&gt; std::result::Result&lt;bool, error::ErrorCode&gt;<br align="left"/>let _7: u64;<br align="left"/>let mut _8: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _9: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _10: &amp;ReErased state::user::Order;<br align="left"/>let mut _11: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _12: i64;<br align="left"/>let mut _13: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _14: u64;<br align="left"/>let mut _15: u64;<br align="left"/>let mut _16: bool;<br align="left"/>let mut _17: std::option::Option&lt;state::protected_maker_mode_config::ProtectedMakerParams&gt;;<br align="left"/>let mut _18: isize;<br align="left"/>let _19: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _20: !;<br align="left"/>let mut _21: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _22: u64;<br align="left"/>let mut _23: u64;<br align="left"/>let mut _24: controller::position::PositionDirection;<br align="left"/>let mut _25: i64;<br align="left"/>let mut _26: u32;<br align="left"/>debug order =&gt; _1;<br align="left"/>debug oracle_price =&gt; _2;<br align="left"/>debug slot =&gt; _3;<br align="left"/>debug tick_size =&gt; _4;<br align="left"/>debug margin_ratio_initial =&gt; _5;<br align="left"/>debug is_prediction_market =&gt; _6;<br align="left"/>debug order_limit_price =&gt; _7;<br align="left"/>debug residual =&gt; _19;<br align="left"/>debug val =&gt; _22;<br align="left"/>>;
    bb0__0_2602 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>_10 = &amp;(*_1)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>_12 = _2<br/>_11 = Option::&lt;i64&gt;::Some(move _12)<br/>StorageDead(_12)<br/>StorageLive(_13)<br/>_13 = Option::&lt;u64&gt;::None<br/>StorageLive(_14)<br/>_14 = _3<br/>StorageLive(_15)<br/>_15 = _4<br/>StorageLive(_16)<br/>_16 = _6<br/>StorageLive(_17)<br/>_17 = Option::&lt;ProtectedMakerParams&gt;::None<br/></td></tr><tr><td align="left">_9 = Order::force_get_limit_price(move _10, move _11, move _13, move _14, move _15, move _16, move _17)</td></tr></table>>];
    bb1__0_2602 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageDead(_16)<br/>StorageDead(_15)<br/>StorageDead(_14)<br/>StorageDead(_13)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">_8 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _9)</td></tr></table>>];
    bb2__0_2602 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>_18 = discriminant(_8)<br/></td></tr><tr><td align="left">switchInt(move _18)</td></tr></table>>];
    bb3__0_2602 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_22)<br/>_22 = ((_8 as Continue).0: u64)<br/>_7 = _22<br/>StorageDead(_22)<br/>StorageDead(_8)<br/>StorageLive(_23)<br/>_23 = _7<br/>StorageLive(_24)<br/>_24 = ((*_1).17: controller::position::PositionDirection)<br/>StorageLive(_25)<br/>_25 = _2<br/>StorageLive(_26)<br/>_26 = _5<br/></td></tr><tr><td align="left">_0 = math::orders::limit_price_breaches_maker_oracle_price_bands(move _23, move _24, move _25, move _26)</td></tr></table>>];
    bb4__0_2602 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_2602 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_19)<br/>_19 = ((_8 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_21)<br/>_21 = _19<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _21)</td></tr></table>>];
    bb6__0_2602 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>StorageDead(_19)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_2602 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>StorageDead(_25)<br/>StorageDead(_24)<br/>StorageDead(_23)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_2602 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2602 -> bb1__0_2602 [label="return"];
    bb1__0_2602 -> bb2__0_2602 [label="return"];
    bb2__0_2602 -> bb3__0_2602 [label="0"];
    bb2__0_2602 -> bb5__0_2602 [label="1"];
    bb2__0_2602 -> bb4__0_2602 [label="otherwise"];
    bb3__0_2602 -> bb7__0_2602 [label="return"];
    bb5__0_2602 -> bb6__0_2602 [label="return"];
    bb6__0_2602 -> bb8__0_2602 [label=""];
    bb7__0_2602 -> bb8__0_2602 [label=""];
}
