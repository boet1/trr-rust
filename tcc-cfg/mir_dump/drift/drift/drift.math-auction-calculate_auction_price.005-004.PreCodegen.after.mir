// MIR for `calculate_auction_price` after PreCodegen

fn calculate_auction_price(_1: &Order, _2: u64, _3: u64, _4: Option<i64>, _5: bool) -> std::result::Result<u64, error::ErrorCode> {
    debug order => _1;
    debug slot => _2;
    debug tick_size => _3;
    debug valid_oracle_price => _4;
    debug is_prediction_market => _5;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let mut _6: isize;
    let mut _7: &&state::user::Order;
    let mut _8: &state::user::OrderType;
    let mut _9: bool;
    let mut _10: &state::user::Order;
    let mut _11: state::user::OrderBitFlag;
    let mut _12: &state::user::Order;
    let mut _13: u64;
    let mut _14: u64;
    let mut _15: std::option::Option<i64>;
    let mut _16: bool;
    let mut _17: &state::user::Order;
    let mut _18: u64;
    let mut _19: u64;
    let mut _20: bool;
    let mut _21: state::user::Order;
    let mut _22: &state::user::Order;
    let mut _23: u64;
    let mut _24: u64;
    let mut _25: std::option::Option<i64>;
    let mut _26: bool;
    let mut _27: &state::user::Order;
    let mut _28: u64;
    let mut _29: u64;
    let mut _30: &state::user::Order;
    let mut _31: u64;
    let mut _32: u64;
    let mut _33: std::option::Option<i64>;
    let mut _34: bool;

    bb0: {
        _6 = discriminant(((*_1).13: state::user::OrderType));
        switchInt(move _6) -> [0: bb8, 1: bb10, 2: bb3, 3: bb8, 4: bb1, otherwise: bb2];
    }

    bb1: {
        StorageLive(_30);
        _30 = &(*_1);
        StorageLive(_31);
        _31 = _2;
        StorageLive(_32);
        _32 = _3;
        StorageLive(_33);
        _33 = _4;
        StorageLive(_34);
        _34 = _5;
        _0 = calculate_auction_price_for_oracle_offset_auction(move _30, move _31, move _32, move _33, move _34) -> [return: bb17, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_1);
        StorageLive(_11);
        _11 = OrderBitFlag::OracleTriggerMarket;
        _9 = Order::is_bit_flag_set(move _10, move _11) -> [return: bb4, unwind continue];
    }

    bb4: {
        switchInt(move _9) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_12);
        _12 = &(*_1);
        StorageLive(_13);
        _13 = _2;
        StorageLive(_14);
        _14 = _3;
        StorageLive(_15);
        _15 = _4;
        StorageLive(_16);
        _16 = _5;
        _0 = calculate_auction_price_for_oracle_offset_auction(move _12, move _13, move _14, move _15, move _16) -> [return: bb7, unwind continue];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb8;
    }

    bb7: {
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb18;
    }

    bb8: {
        StorageLive(_17);
        _17 = &(*_1);
        StorageLive(_18);
        _18 = _2;
        StorageLive(_19);
        _19 = _3;
        _0 = calculate_auction_price_for_fixed_auction(move _17, move _18, move _19) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        goto -> bb18;
    }

    bb10: {
        StorageLive(_20);
        StorageLive(_21);
        _21 = (*_1);
        _20 = Order::has_oracle_price_offset(move _21) -> [return: bb11, unwind continue];
    }

    bb11: {
        switchInt(move _20) -> [0: bb14, otherwise: bb12];
    }

    bb12: {
        StorageDead(_21);
        StorageLive(_22);
        _22 = &(*_1);
        StorageLive(_23);
        _23 = _2;
        StorageLive(_24);
        _24 = _3;
        StorageLive(_25);
        _25 = _4;
        StorageLive(_26);
        _26 = _5;
        _0 = calculate_auction_price_for_oracle_offset_auction(move _22, move _23, move _24, move _25, move _26) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb16;
    }

    bb14: {
        StorageDead(_21);
        StorageLive(_27);
        _27 = &(*_1);
        StorageLive(_28);
        _28 = _2;
        StorageLive(_29);
        _29 = _3;
        _0 = calculate_auction_price_for_fixed_auction(move _27, move _28, move _29) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        goto -> bb16;
    }

    bb16: {
        StorageDead(_20);
        goto -> bb18;
    }

    bb17: {
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_30);
        goto -> bb18;
    }

    bb18: {
        return;
    }
}
