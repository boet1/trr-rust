// MIR for `calculate_auction_price_for_oracle_offset_auction` after PreCodegen

fn calculate_auction_price_for_oracle_offset_auction(_1: &Order, _2: u64, _3: u64, _4: Option<i64>, _5: bool) -> std::result::Result<u64, error::ErrorCode> {
    debug order => _1;
    debug slot => _2;
    debug tick_size => _3;
    debug valid_oracle_price => _4;
    debug is_prediction_market => _5;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let _6: i64;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _8: std::result::Result<i64, error::ErrorCode>;
    let mut _9: std::option::Option<i64>;
    let mut _10: {closure@programs/drift/src/math/auction.rs:173:54: 173:56};
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _15: i64;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _18: std::result::Result<u64, error::ErrorCode>;
    let mut _19: u64;
    let mut _20: u64;
    let mut _21: isize;
    let mut _23: !;
    let mut _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _27: u64;
    let mut _28: u64;
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _30: std::result::Result<u64, error::ErrorCode>;
    let mut _31: u8;
    let mut _32: isize;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _40: ();
    let mut _41: bool;
    let mut _42: u8;
    let mut _43: !;
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _46: std::result::Result<u64, error::ErrorCode>;
    let mut _47: i64;
    let mut _48: i64;
    let mut _49: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _50: std::result::Result<i64, error::ErrorCode>;
    let mut _51: i64;
    let mut _52: i64;
    let mut _53: isize;
    let mut _55: !;
    let mut _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _58: i64;
    let mut _59: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _60: std::result::Result<i64, error::ErrorCode>;
    let mut _61: u64;
    let mut _62: isize;
    let mut _64: !;
    let mut _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _67: isize;
    let mut _69: !;
    let mut _70: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _72: ();
    let mut _73: bool;
    let mut _74: u64;
    let mut _75: u64;
    let mut _76: u64;
    let mut _77: u64;
    let mut _78: controller::position::PositionDirection;
    let mut _80: isize;
    let mut _81: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _82: std::result::Result<i64, error::ErrorCode>;
    let mut _83: i64;
    let mut _84: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _85: std::result::Result<i64, error::ErrorCode>;
    let mut _86: i64;
    let mut _87: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _88: std::result::Result<i64, error::ErrorCode>;
    let mut _89: i64;
    let mut _90: i64;
    let mut _91: isize;
    let mut _93: !;
    let mut _94: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _96: i64;
    let mut _97: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _98: std::result::Result<i64, error::ErrorCode>;
    let mut _99: u64;
    let mut _100: isize;
    let mut _102: !;
    let mut _103: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _105: isize;
    let mut _107: !;
    let mut _108: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _110: i64;
    let mut _111: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _112: std::result::Result<i64, error::ErrorCode>;
    let mut _113: u8;
    let mut _114: isize;
    let mut _116: !;
    let mut _117: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _119: isize;
    let mut _121: !;
    let mut _122: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _124: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _125: std::result::Result<i64, error::ErrorCode>;
    let mut _126: i64;
    let mut _127: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _128: std::result::Result<i64, error::ErrorCode>;
    let mut _129: i64;
    let mut _130: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _131: std::result::Result<i64, error::ErrorCode>;
    let mut _132: i64;
    let mut _133: i64;
    let mut _134: isize;
    let mut _136: !;
    let mut _137: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _139: i64;
    let mut _140: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _141: std::result::Result<i64, error::ErrorCode>;
    let mut _142: u64;
    let mut _143: isize;
    let mut _145: !;
    let mut _146: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _148: isize;
    let mut _150: !;
    let mut _151: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _153: i64;
    let mut _154: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _155: std::result::Result<i64, error::ErrorCode>;
    let mut _156: u8;
    let mut _157: isize;
    let mut _159: !;
    let mut _160: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _162: isize;
    let mut _164: !;
    let mut _165: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _168: isize;
    let mut _169: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _170: std::result::Result<i64, error::ErrorCode>;
    let mut _171: i64;
    let mut _172: i64;
    let mut _173: isize;
    let mut _175: !;
    let mut _176: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _178: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _179: std::result::Result<i64, error::ErrorCode>;
    let mut _180: i64;
    let mut _181: i64;
    let mut _182: isize;
    let mut _184: !;
    let mut _185: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _188: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _189: std::result::Result<u64, error::ErrorCode>;
    let mut _190: i64;
    let mut _191: i64;
    let mut _192: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _193: std::result::Result<i64, error::ErrorCode>;
    let mut _194: i64;
    let mut _195: i64;
    let mut _196: isize;
    let mut _198: !;
    let mut _199: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _201: i64;
    let mut _202: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _203: std::result::Result<i64, error::ErrorCode>;
    let mut _204: u64;
    let mut _205: isize;
    let mut _207: !;
    let mut _208: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _210: isize;
    let mut _212: !;
    let mut _213: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _215: ();
    let mut _216: bool;
    let mut _217: u64;
    let mut _218: u64;
    let mut _219: u64;
    let mut _220: u64;
    let mut _221: controller::position::PositionDirection;
    scope 1 {
        debug oracle_price => _6;
        let _16: u64;
        let _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _25: u64;
        scope 6 {
            debug slots_elapsed => _16;
            let _26: u64;
            let _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _36: u64;
            scope 11 {
                debug delta_numerator => _26;
                let _37: u8;
                scope 16 {
                    debug delta_denominator => _37;
                    let _38: i64;
                    scope 17 {
                        debug auction_start_price_offset => _38;
                        let _39: i64;
                        scope 18 {
                            debug auction_end_price_offset => _39;
                            let mut _44: u64;
                            let _54: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _57: i64;
                            let _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _66: i64;
                            let _68: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _71: u64;
                            let _79: i64;
                            let _92: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _95: i64;
                            let _101: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _104: i64;
                            let _106: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _109: i64;
                            let _115: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _118: i64;
                            let _120: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _123: i64;
                            let _135: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _138: i64;
                            let _144: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _147: i64;
                            let _149: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _152: i64;
                            let _158: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _161: i64;
                            let _163: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _166: i64;
                            scope 19 {
                                debug price => _44;
                            }
                            scope 20 {
                                debug residual => _54;
                                scope 21 {
                                }
                            }
                            scope 22 {
                                debug val => _57;
                                scope 23 {
                                }
                            }
                            scope 24 {
                                debug residual => _63;
                                scope 25 {
                                }
                            }
                            scope 26 {
                                debug val => _66;
                                scope 27 {
                                }
                            }
                            scope 28 {
                                debug residual => _68;
                                scope 29 {
                                }
                            }
                            scope 30 {
                                debug val => _71;
                                scope 31 {
                                }
                            }
                            scope 32 {
                                debug price_offset_delta => _79;
                                let _167: i64;
                                let _174: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _177: i64;
                                let _183: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _186: i64;
                                scope 73 {
                                    debug price_offset => _167;
                                    let mut _187: u64;
                                    let _197: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _200: i64;
                                    let _206: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _209: i64;
                                    let _211: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _214: u64;
                                    scope 82 {
                                        debug price => _187;
                                    }
                                    scope 83 {
                                        debug residual => _197;
                                        scope 84 {
                                        }
                                    }
                                    scope 85 {
                                        debug val => _200;
                                        scope 86 {
                                        }
                                    }
                                    scope 87 {
                                        debug residual => _206;
                                        scope 88 {
                                        }
                                    }
                                    scope 89 {
                                        debug val => _209;
                                        scope 90 {
                                        }
                                    }
                                    scope 91 {
                                        debug residual => _211;
                                        scope 92 {
                                        }
                                    }
                                    scope 93 {
                                        debug val => _214;
                                        scope 94 {
                                        }
                                    }
                                }
                                scope 74 {
                                    debug residual => _174;
                                    scope 75 {
                                    }
                                }
                                scope 76 {
                                    debug val => _177;
                                    scope 77 {
                                    }
                                }
                                scope 78 {
                                    debug residual => _183;
                                    scope 79 {
                                    }
                                }
                                scope 80 {
                                    debug val => _186;
                                    scope 81 {
                                    }
                                }
                            }
                            scope 33 {
                                debug residual => _92;
                                scope 34 {
                                }
                            }
                            scope 35 {
                                debug val => _95;
                                scope 36 {
                                }
                            }
                            scope 37 {
                                debug residual => _101;
                                scope 38 {
                                }
                            }
                            scope 39 {
                                debug val => _104;
                                scope 40 {
                                }
                            }
                            scope 41 {
                                debug residual => _106;
                                scope 42 {
                                }
                            }
                            scope 43 {
                                debug val => _109;
                                scope 44 {
                                }
                            }
                            scope 45 {
                                debug residual => _115;
                                scope 46 {
                                }
                            }
                            scope 47 {
                                debug val => _118;
                                scope 48 {
                                }
                            }
                            scope 49 {
                                debug residual => _120;
                                scope 50 {
                                }
                            }
                            scope 51 {
                                debug val => _123;
                                scope 52 {
                                }
                            }
                            scope 53 {
                                debug residual => _135;
                                scope 54 {
                                }
                            }
                            scope 55 {
                                debug val => _138;
                                scope 56 {
                                }
                            }
                            scope 57 {
                                debug residual => _144;
                                scope 58 {
                                }
                            }
                            scope 59 {
                                debug val => _147;
                                scope 60 {
                                }
                            }
                            scope 61 {
                                debug residual => _149;
                                scope 62 {
                                }
                            }
                            scope 63 {
                                debug val => _152;
                                scope 64 {
                                }
                            }
                            scope 65 {
                                debug residual => _158;
                                scope 66 {
                                }
                            }
                            scope 67 {
                                debug val => _161;
                                scope 68 {
                                }
                            }
                            scope 69 {
                                debug residual => _163;
                                scope 70 {
                                }
                            }
                            scope 71 {
                                debug val => _166;
                                scope 72 {
                                }
                            }
                        }
                    }
                }
            }
            scope 12 {
                debug residual => _33;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _36;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _22;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _25;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _12;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _15;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = _4;
        StorageLive(_10);
        _10 = {closure@programs/drift/src/math/auction.rs:173:54: 173:56};
        _8 = Option::<i64>::ok_or_else::<error::ErrorCode, {closure@programs/drift/src/math/auction.rs:173:54: 173:56}>(move _9, move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_10);
        StorageDead(_9);
        _7 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_8);
        _11 = discriminant(_7);
        switchInt(move _11) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_15);
        _15 = ((_7 as Continue).0: i64);
        _6 = _15;
        StorageDead(_15);
        StorageDead(_7);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = _2;
        StorageLive(_20);
        _20 = ((*_1).0: u64);
        _18 = <u64 as SafeMath>::safe_sub(move _19, move _20) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_12);
        _12 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_7);
        goto -> bb146;
    }

    bb7: {
        StorageDead(_20);
        StorageDead(_19);
        _17 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _18) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_18);
        _21 = discriminant(_17);
        switchInt(move _21) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_25);
        _25 = ((_17 as Continue).0: u64);
        _16 = _25;
        StorageDead(_25);
        StorageDead(_17);
        StorageLive(_26);
        StorageLive(_27);
        _27 = _16;
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = ((*_1).22: u8);
        _30 = <u8 as Cast>::cast::<u64>(move _31) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_22);
        _22 = ((_17 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_24);
        _24 = _22;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _24) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_17);
        goto -> bb145;
    }

    bb12: {
        StorageDead(_31);
        _29 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _30) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_30);
        _32 = discriminant(_29);
        switchInt(move _32) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_36);
        _36 = ((_29 as Continue).0: u64);
        _28 = _36;
        StorageDead(_36);
        _26 = std::cmp::min::<u64>(move _27, move _28) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_33);
        _33 = ((_29 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_35);
        _35 = _33;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _35) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_29);
        goto -> bb144;
    }

    bb17: {
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_29);
        StorageLive(_37);
        _37 = ((*_1).22: u8);
        StorageLive(_38);
        _38 = ((*_1).6: i64);
        StorageLive(_39);
        _39 = ((*_1).7: i64);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = _37;
        _41 = Eq(move _42, const 0_u8);
        switchInt(move _41) -> [0: bb40, otherwise: bb18];
    }

    bb18: {
        StorageDead(_42);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = _6;
        StorageLive(_52);
        _52 = _39;
        _50 = <i64 as SafeMath>::safe_add(move _51, move _52) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_52);
        StorageDead(_51);
        _49 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _50) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_50);
        _53 = discriminant(_49);
        switchInt(move _53) -> [0: bb21, 1: bb22, otherwise: bb4];
    }

    bb21: {
        StorageLive(_57);
        _57 = ((_49 as Continue).0: i64);
        _48 = _57;
        StorageDead(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = _3;
        _60 = <u64 as Cast>::cast::<i64>(move _61) -> [return: bb24, unwind continue];
    }

    bb22: {
        StorageLive(_54);
        _54 = ((_49 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_56);
        _56 = _54;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _56) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_56);
        StorageDead(_54);
        StorageDead(_48);
        StorageDead(_47);
        StorageDead(_46);
        goto -> bb141;
    }

    bb24: {
        StorageDead(_61);
        _59 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _60) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_60);
        _62 = discriminant(_59);
        switchInt(move _62) -> [0: bb26, 1: bb27, otherwise: bb4];
    }

    bb26: {
        StorageLive(_66);
        _66 = ((_59 as Continue).0: i64);
        _58 = _66;
        StorageDead(_66);
        _47 = <i64 as Ord>::max(move _48, move _58) -> [return: bb29, unwind continue];
    }

    bb27: {
        StorageLive(_63);
        _63 = ((_59 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_65);
        _65 = _63;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _65) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_58);
        StorageDead(_48);
        StorageDead(_47);
        StorageDead(_46);
        goto -> bb140;
    }

    bb29: {
        StorageDead(_58);
        StorageDead(_48);
        _46 = <i64 as Cast>::cast::<u64>(move _47) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_47);
        _45 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _46) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_46);
        _67 = discriminant(_45);
        switchInt(move _67) -> [0: bb32, 1: bb33, otherwise: bb4];
    }

    bb32: {
        StorageLive(_71);
        _71 = ((_45 as Continue).0: u64);
        _44 = _71;
        StorageDead(_71);
        StorageDead(_59);
        StorageDead(_49);
        StorageDead(_45);
        StorageLive(_72);
        StorageLive(_73);
        _73 = _5;
        switchInt(move _73) -> [0: bb36, otherwise: bb35];
    }

    bb33: {
        StorageLive(_68);
        _68 = ((_45 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_70);
        _70 = _68;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _70) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_70);
        StorageDead(_68);
        goto -> bb140;
    }

    bb35: {
        StorageLive(_74);
        StorageLive(_75);
        _75 = _44;
        _74 = <u64 as Ord>::min(move _75, const _) -> [return: bb37, unwind continue];
    }

    bb36: {
        _72 = const ();
        goto -> bb38;
    }

    bb37: {
        StorageDead(_75);
        _44 = move _74;
        StorageDead(_74);
        _72 = const ();
        goto -> bb38;
    }

    bb38: {
        StorageDead(_73);
        StorageDead(_72);
        StorageLive(_76);
        _76 = _44;
        StorageLive(_77);
        _77 = _3;
        StorageLive(_78);
        _78 = ((*_1).17: controller::position::PositionDirection);
        _0 = math::orders::standardize_price(move _76, move _77, move _78) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_76);
        goto -> bb142;
    }

    bb40: {
        StorageDead(_42);
        _40 = const ();
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_79);
        _80 = discriminant(((*_1).17: controller::position::PositionDirection));
        switchInt(move _80) -> [0: bb42, 1: bb41, otherwise: bb4];
    }

    bb41: {
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        _132 = _38;
        StorageLive(_133);
        _133 = _39;
        _131 = <i64 as SafeMath>::safe_sub(move _132, move _133) -> [return: bb68, unwind continue];
    }

    bb42: {
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = _39;
        StorageLive(_90);
        _90 = _38;
        _88 = <i64 as SafeMath>::safe_sub(move _89, move _90) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_90);
        StorageDead(_89);
        _87 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _88) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_88);
        _91 = discriminant(_87);
        switchInt(move _91) -> [0: bb45, 1: bb46, otherwise: bb4];
    }

    bb45: {
        StorageLive(_95);
        _95 = ((_87 as Continue).0: i64);
        _86 = _95;
        StorageDead(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = _26;
        _98 = <u64 as Cast>::cast::<i64>(move _99) -> [return: bb48, unwind continue];
    }

    bb46: {
        StorageLive(_92);
        _92 = ((_87 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_94);
        _94 = _92;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _94) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_94);
        StorageDead(_92);
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_83);
        StorageDead(_82);
        goto -> bb138;
    }

    bb48: {
        StorageDead(_99);
        _97 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _98) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_98);
        _100 = discriminant(_97);
        switchInt(move _100) -> [0: bb50, 1: bb51, otherwise: bb4];
    }

    bb50: {
        StorageLive(_104);
        _104 = ((_97 as Continue).0: i64);
        _96 = _104;
        StorageDead(_104);
        _85 = <i64 as SafeMath>::safe_mul(move _86, move _96) -> [return: bb53, unwind continue];
    }

    bb51: {
        StorageLive(_101);
        _101 = ((_97 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_103);
        _103 = _101;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _103) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_103);
        StorageDead(_101);
        StorageDead(_96);
        StorageDead(_86);
        StorageDead(_85);
        goto -> bb136;
    }

    bb53: {
        StorageDead(_96);
        StorageDead(_86);
        _84 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _85) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_85);
        _105 = discriminant(_84);
        switchInt(move _105) -> [0: bb55, 1: bb56, otherwise: bb4];
    }

    bb55: {
        StorageLive(_109);
        _109 = ((_84 as Continue).0: i64);
        _83 = _109;
        StorageDead(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        _113 = _37;
        _112 = <u8 as Cast>::cast::<i64>(move _113) -> [return: bb58, unwind continue];
    }

    bb56: {
        StorageLive(_106);
        _106 = ((_84 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_108);
        _108 = _106;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _108) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_108);
        StorageDead(_106);
        goto -> bb136;
    }

    bb58: {
        StorageDead(_113);
        _111 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _112) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_112);
        _114 = discriminant(_111);
        switchInt(move _114) -> [0: bb60, 1: bb61, otherwise: bb4];
    }

    bb60: {
        StorageLive(_118);
        _118 = ((_111 as Continue).0: i64);
        _110 = _118;
        StorageDead(_118);
        _82 = <i64 as SafeMath>::safe_div(move _83, move _110) -> [return: bb63, unwind continue];
    }

    bb61: {
        StorageLive(_115);
        _115 = ((_111 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_117);
        _117 = _115;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _117) -> [return: bb62, unwind continue];
    }

    bb62: {
        StorageDead(_117);
        StorageDead(_115);
        StorageDead(_110);
        StorageDead(_83);
        StorageDead(_82);
        goto -> bb135;
    }

    bb63: {
        StorageDead(_110);
        StorageDead(_83);
        _81 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _82) -> [return: bb64, unwind continue];
    }

    bb64: {
        StorageDead(_82);
        _119 = discriminant(_81);
        switchInt(move _119) -> [0: bb65, 1: bb66, otherwise: bb4];
    }

    bb65: {
        StorageLive(_123);
        _123 = ((_81 as Continue).0: i64);
        _79 = _123;
        StorageDead(_123);
        StorageDead(_111);
        StorageDead(_97);
        StorageDead(_87);
        StorageDead(_84);
        StorageDead(_81);
        goto -> bb93;
    }

    bb66: {
        StorageLive(_120);
        _120 = ((_81 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_122);
        _122 = _120;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _122) -> [return: bb67, unwind continue];
    }

    bb67: {
        StorageDead(_122);
        StorageDead(_120);
        goto -> bb135;
    }

    bb68: {
        StorageDead(_133);
        StorageDead(_132);
        _130 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _131) -> [return: bb69, unwind continue];
    }

    bb69: {
        StorageDead(_131);
        _134 = discriminant(_130);
        switchInt(move _134) -> [0: bb70, 1: bb71, otherwise: bb4];
    }

    bb70: {
        StorageLive(_138);
        _138 = ((_130 as Continue).0: i64);
        _129 = _138;
        StorageDead(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        _142 = _26;
        _141 = <u64 as Cast>::cast::<i64>(move _142) -> [return: bb73, unwind continue];
    }

    bb71: {
        StorageLive(_135);
        _135 = ((_130 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_137);
        _137 = _135;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _137) -> [return: bb72, unwind continue];
    }

    bb72: {
        StorageDead(_137);
        StorageDead(_135);
        StorageDead(_129);
        StorageDead(_128);
        StorageDead(_126);
        StorageDead(_125);
        goto -> bb134;
    }

    bb73: {
        StorageDead(_142);
        _140 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _141) -> [return: bb74, unwind continue];
    }

    bb74: {
        StorageDead(_141);
        _143 = discriminant(_140);
        switchInt(move _143) -> [0: bb75, 1: bb76, otherwise: bb4];
    }

    bb75: {
        StorageLive(_147);
        _147 = ((_140 as Continue).0: i64);
        _139 = _147;
        StorageDead(_147);
        _128 = <i64 as SafeMath>::safe_mul(move _129, move _139) -> [return: bb78, unwind continue];
    }

    bb76: {
        StorageLive(_144);
        _144 = ((_140 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_146);
        _146 = _144;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _146) -> [return: bb77, unwind continue];
    }

    bb77: {
        StorageDead(_146);
        StorageDead(_144);
        StorageDead(_139);
        StorageDead(_129);
        StorageDead(_128);
        goto -> bb132;
    }

    bb78: {
        StorageDead(_139);
        StorageDead(_129);
        _127 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _128) -> [return: bb79, unwind continue];
    }

    bb79: {
        StorageDead(_128);
        _148 = discriminant(_127);
        switchInt(move _148) -> [0: bb80, 1: bb81, otherwise: bb4];
    }

    bb80: {
        StorageLive(_152);
        _152 = ((_127 as Continue).0: i64);
        _126 = _152;
        StorageDead(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        _156 = _37;
        _155 = <u8 as Cast>::cast::<i64>(move _156) -> [return: bb83, unwind continue];
    }

    bb81: {
        StorageLive(_149);
        _149 = ((_127 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_151);
        _151 = _149;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _151) -> [return: bb82, unwind continue];
    }

    bb82: {
        StorageDead(_151);
        StorageDead(_149);
        goto -> bb132;
    }

    bb83: {
        StorageDead(_156);
        _154 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _155) -> [return: bb84, unwind continue];
    }

    bb84: {
        StorageDead(_155);
        _157 = discriminant(_154);
        switchInt(move _157) -> [0: bb85, 1: bb86, otherwise: bb4];
    }

    bb85: {
        StorageLive(_161);
        _161 = ((_154 as Continue).0: i64);
        _153 = _161;
        StorageDead(_161);
        _125 = <i64 as SafeMath>::safe_div(move _126, move _153) -> [return: bb88, unwind continue];
    }

    bb86: {
        StorageLive(_158);
        _158 = ((_154 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_160);
        _160 = _158;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _160) -> [return: bb87, unwind continue];
    }

    bb87: {
        StorageDead(_160);
        StorageDead(_158);
        StorageDead(_153);
        StorageDead(_126);
        StorageDead(_125);
        goto -> bb131;
    }

    bb88: {
        StorageDead(_153);
        StorageDead(_126);
        _124 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _125) -> [return: bb89, unwind continue];
    }

    bb89: {
        StorageDead(_125);
        _162 = discriminant(_124);
        switchInt(move _162) -> [0: bb90, 1: bb91, otherwise: bb4];
    }

    bb90: {
        StorageLive(_166);
        _166 = ((_124 as Continue).0: i64);
        _79 = _166;
        StorageDead(_166);
        StorageDead(_154);
        StorageDead(_140);
        StorageDead(_130);
        StorageDead(_127);
        StorageDead(_124);
        goto -> bb93;
    }

    bb91: {
        StorageLive(_163);
        _163 = ((_124 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_165);
        _165 = _163;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _165) -> [return: bb92, unwind continue];
    }

    bb92: {
        StorageDead(_165);
        StorageDead(_163);
        goto -> bb131;
    }

    bb93: {
        StorageLive(_167);
        _168 = discriminant(((*_1).17: controller::position::PositionDirection));
        switchInt(move _168) -> [0: bb95, 1: bb94, otherwise: bb4];
    }

    bb94: {
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        _180 = _38;
        StorageLive(_181);
        _181 = _79;
        _179 = <i64 as SafeMath>::safe_sub(move _180, move _181) -> [return: bb101, unwind continue];
    }

    bb95: {
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        _171 = _38;
        StorageLive(_172);
        _172 = _79;
        _170 = <i64 as SafeMath>::safe_add(move _171, move _172) -> [return: bb96, unwind continue];
    }

    bb96: {
        StorageDead(_172);
        StorageDead(_171);
        _169 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _170) -> [return: bb97, unwind continue];
    }

    bb97: {
        StorageDead(_170);
        _173 = discriminant(_169);
        switchInt(move _173) -> [0: bb98, 1: bb99, otherwise: bb4];
    }

    bb98: {
        StorageLive(_177);
        _177 = ((_169 as Continue).0: i64);
        _167 = _177;
        StorageDead(_177);
        StorageDead(_169);
        goto -> bb106;
    }

    bb99: {
        StorageLive(_174);
        _174 = ((_169 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_176);
        _176 = _174;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _176) -> [return: bb100, unwind continue];
    }

    bb100: {
        StorageDead(_176);
        StorageDead(_174);
        StorageDead(_169);
        goto -> bb130;
    }

    bb101: {
        StorageDead(_181);
        StorageDead(_180);
        _178 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _179) -> [return: bb102, unwind continue];
    }

    bb102: {
        StorageDead(_179);
        _182 = discriminant(_178);
        switchInt(move _182) -> [0: bb103, 1: bb104, otherwise: bb4];
    }

    bb103: {
        StorageLive(_186);
        _186 = ((_178 as Continue).0: i64);
        _167 = _186;
        StorageDead(_186);
        StorageDead(_178);
        goto -> bb106;
    }

    bb104: {
        StorageLive(_183);
        _183 = ((_178 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_185);
        _185 = _183;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _185) -> [return: bb105, unwind continue];
    }

    bb105: {
        StorageDead(_185);
        StorageDead(_183);
        StorageDead(_178);
        goto -> bb130;
    }

    bb106: {
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        _194 = _6;
        StorageLive(_195);
        _195 = _167;
        _193 = <i64 as SafeMath>::safe_add(move _194, move _195) -> [return: bb107, unwind continue];
    }

    bb107: {
        StorageDead(_195);
        StorageDead(_194);
        _192 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _193) -> [return: bb108, unwind continue];
    }

    bb108: {
        StorageDead(_193);
        _196 = discriminant(_192);
        switchInt(move _196) -> [0: bb109, 1: bb110, otherwise: bb4];
    }

    bb109: {
        StorageLive(_200);
        _200 = ((_192 as Continue).0: i64);
        _191 = _200;
        StorageDead(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        _204 = _3;
        _203 = <u64 as Cast>::cast::<i64>(move _204) -> [return: bb112, unwind continue];
    }

    bb110: {
        StorageLive(_197);
        _197 = ((_192 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_199);
        _199 = _197;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _199) -> [return: bb111, unwind continue];
    }

    bb111: {
        StorageDead(_199);
        StorageDead(_197);
        StorageDead(_191);
        StorageDead(_190);
        StorageDead(_189);
        goto -> bb129;
    }

    bb112: {
        StorageDead(_204);
        _202 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _203) -> [return: bb113, unwind continue];
    }

    bb113: {
        StorageDead(_203);
        _205 = discriminant(_202);
        switchInt(move _205) -> [0: bb114, 1: bb115, otherwise: bb4];
    }

    bb114: {
        StorageLive(_209);
        _209 = ((_202 as Continue).0: i64);
        _201 = _209;
        StorageDead(_209);
        _190 = <i64 as Ord>::max(move _191, move _201) -> [return: bb117, unwind continue];
    }

    bb115: {
        StorageLive(_206);
        _206 = ((_202 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_208);
        _208 = _206;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _208) -> [return: bb116, unwind continue];
    }

    bb116: {
        StorageDead(_208);
        StorageDead(_206);
        StorageDead(_201);
        StorageDead(_191);
        StorageDead(_190);
        StorageDead(_189);
        goto -> bb128;
    }

    bb117: {
        StorageDead(_201);
        StorageDead(_191);
        _189 = <i64 as Cast>::cast::<u64>(move _190) -> [return: bb118, unwind continue];
    }

    bb118: {
        StorageDead(_190);
        _188 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _189) -> [return: bb119, unwind continue];
    }

    bb119: {
        StorageDead(_189);
        _210 = discriminant(_188);
        switchInt(move _210) -> [0: bb120, 1: bb121, otherwise: bb4];
    }

    bb120: {
        StorageLive(_214);
        _214 = ((_188 as Continue).0: u64);
        _187 = _214;
        StorageDead(_214);
        StorageDead(_202);
        StorageDead(_192);
        StorageDead(_188);
        StorageLive(_215);
        StorageLive(_216);
        _216 = _5;
        switchInt(move _216) -> [0: bb124, otherwise: bb123];
    }

    bb121: {
        StorageLive(_211);
        _211 = ((_188 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_213);
        _213 = _211;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _213) -> [return: bb122, unwind continue];
    }

    bb122: {
        StorageDead(_213);
        StorageDead(_211);
        goto -> bb128;
    }

    bb123: {
        StorageLive(_217);
        StorageLive(_218);
        _218 = _187;
        _217 = <u64 as Ord>::min(move _218, const _) -> [return: bb125, unwind continue];
    }

    bb124: {
        _215 = const ();
        goto -> bb126;
    }

    bb125: {
        StorageDead(_218);
        _187 = move _217;
        StorageDead(_217);
        _215 = const ();
        goto -> bb126;
    }

    bb126: {
        StorageDead(_216);
        StorageDead(_215);
        StorageLive(_219);
        _219 = _187;
        StorageLive(_220);
        _220 = _3;
        StorageLive(_221);
        _221 = ((*_1).17: controller::position::PositionDirection);
        _0 = math::orders::standardize_price(move _219, move _220, move _221) -> [return: bb127, unwind continue];
    }

    bb127: {
        StorageDead(_221);
        StorageDead(_220);
        StorageDead(_219);
        StorageDead(_187);
        StorageDead(_167);
        StorageDead(_79);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_26);
        StorageDead(_16);
        StorageDead(_6);
        goto -> bb147;
    }

    bb128: {
        StorageDead(_202);
        goto -> bb129;
    }

    bb129: {
        StorageDead(_192);
        StorageDead(_188);
        StorageDead(_187);
        goto -> bb130;
    }

    bb130: {
        StorageDead(_167);
        goto -> bb139;
    }

    bb131: {
        StorageDead(_154);
        goto -> bb133;
    }

    bb132: {
        StorageDead(_126);
        StorageDead(_125);
        goto -> bb133;
    }

    bb133: {
        StorageDead(_140);
        goto -> bb134;
    }

    bb134: {
        StorageDead(_130);
        StorageDead(_127);
        StorageDead(_124);
        goto -> bb139;
    }

    bb135: {
        StorageDead(_111);
        goto -> bb137;
    }

    bb136: {
        StorageDead(_83);
        StorageDead(_82);
        goto -> bb137;
    }

    bb137: {
        StorageDead(_97);
        goto -> bb138;
    }

    bb138: {
        StorageDead(_87);
        StorageDead(_84);
        StorageDead(_81);
        goto -> bb139;
    }

    bb139: {
        StorageDead(_79);
        goto -> bb143;
    }

    bb140: {
        StorageDead(_59);
        goto -> bb141;
    }

    bb141: {
        StorageDead(_49);
        StorageDead(_45);
        goto -> bb142;
    }

    bb142: {
        StorageDead(_44);
        StorageDead(_41);
        StorageDead(_40);
        goto -> bb143;
    }

    bb143: {
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_37);
        goto -> bb144;
    }

    bb144: {
        StorageDead(_26);
        goto -> bb145;
    }

    bb145: {
        StorageDead(_16);
        goto -> bb146;
    }

    bb146: {
        StorageDead(_6);
        goto -> bb147;
    }

    bb147: {
        return;
    }
}
