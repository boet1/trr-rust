// MIR for `admin::handle_update_feature_bit_flags_mm_oracle` before PreCodegen

fn admin::handle_update_feature_bit_flags_mm_oracle(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::HotAdminUpdateState<'_>>, _2: bool) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug enable => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: &mut std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let _4: ();
    let mut _5: bool;
    let _6: ();
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _8: std::result::Result<(), error::ErrorCode>;
    let mut _9: bool;
    let mut _10: &anchor_lang::prelude::Pubkey;
    let _11: anchor_lang::prelude::Pubkey;
    let mut _12: &anchor_lang::prelude::Signer<'_>;
    let mut _13: &anchor_lang::prelude::Pubkey;
    let _14: &anchor_lang::prelude::Pubkey;
    let _15: &state::state::State;
    let mut _16: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _17: ();
    let _19: ();
    let mut _20: &str;
    let _21: &str;
    let mut _22: &std::string::String;
    let _23: &std::string::String;
    let _24: std::string::String;
    let mut _26: std::fmt::Arguments<'_>;
    let mut _27: &[&str];
    let mut _28: &[&str; 2];
    let _29: &[&str; 2];
    let _30: [&str; 2];
    let mut _31: &[core::fmt::rt::Argument<'_>];
    let mut _32: &[core::fmt::rt::Argument<'_>; 1];
    let _33: &[core::fmt::rt::Argument<'_>; 1];
    let _34: [core::fmt::rt::Argument<'_>; 1];
    let mut _35: core::fmt::rt::Argument<'_>;
    let mut _36: &error::ErrorCode;
    let _37: &error::ErrorCode;
    let _38: ();
    let mut _39: &str;
    let _40: &str;
    let mut _41: error::ErrorCode;
    let mut _42: isize;
    let mut _44: !;
    let mut _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _47: ();
    let mut _48: &str;
    let _49: &str;
    let mut _50: u8;
    let mut _51: &state::state::State;
    let mut _52: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _53: u8;
    let mut _54: isize;
    let mut _55: (isize, bool);
    let mut _56: &mut state::state::State;
    let mut _57: &mut anchor_lang::prelude::Account<'_, state::state::State>;
    let _58: ();
    let mut _59: &str;
    let _60: &str;
    let mut _61: u8;
    let mut _62: &state::state::State;
    let mut _63: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _64: u8;
    let mut _65: u8;
    let mut _66: isize;
    let mut _67: (isize, bool);
    let mut _68: &mut state::state::State;
    let mut _69: &mut anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _70: ();
    let mut _72: &mut instructions::admin::HotAdminUpdateState<'_>;
    let mut _73: &mut instructions::admin::HotAdminUpdateState<'_>;
    let mut _74: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _75: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _76: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _77: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _78: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _79: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _80: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _81: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _82: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _83: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug state => _3;
        let _18: error::ErrorCode;
        let _43: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _46: ();
        scope 2 {
            debug error_code => _18;
            let _25: std::string::String;
            let mut _71: &[&str; 2];
            scope 3 {
                debug res => _25;
            }
        }
        scope 4 {
            debug residual => _43;
            scope 5 {
            }
        }
        scope 6 {
            debug val => _46;
            scope 7 {
            }
        }
    }

    bb0: {
        StorageLive(_3);
        _72 = deref_copy (_1.1: &mut instructions::admin::HotAdminUpdateState<'_>);
        _3 = &mut ((*_72).1: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        StorageLive(_4);
        StorageLive(_5);
        _5 = _2;
        switchInt(move _5) -> [0: bb24, otherwise: bb1];
    }

    bb1: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _73 = deref_copy (_1.1: &mut instructions::admin::HotAdminUpdateState<'_>);
        _12 = &((*_73).0: anchor_lang::prelude::Signer<'_>);
        _11 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _12) -> [return: bb2, unwind continue];
    }

    bb2: {
        _10 = &_11;
        StorageDead(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _74 = deref_copy (*_3);
        _79 = (((_74.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _16 = &(*_79);
        _15 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _16) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_16);
        _14 = &((*_15).0: anchor_lang::prelude::Pubkey);
        _13 = &(*_14);
        _9 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _10, move _13) -> [return: bb4, unwind continue];
    }

    bb4: {
        switchInt(move _9) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_17);
        _17 = ();
        _8 = std::result::Result::<(), error::ErrorCode>::Ok(move _17);
        StorageDead(_17);
        goto -> bb14;
    }

    bb6: {
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_18);
        _18 = error::ErrorCode::DefaultError;
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _71 = const _;
        _29 = &(*_71);
        _28 = &(*_29);
        _27 = move _28 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_28);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &_18;
        _36 = &(*_37);
        _35 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _36) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_36);
        _34 = [move _35];
        StorageDead(_35);
        _33 = &_34;
        _32 = &(*_33);
        _31 = move _32 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_32);
        _26 = Arguments::<'_>::new_v1(move _27, move _31) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_31);
        StorageDead(_27);
        _25 = format(move _26) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_26);
        StorageDead(_37);
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_29);
        _24 = move _25;
        StorageDead(_25);
        _23 = &_24;
        _22 = &(*_23);
        _21 = <String as Deref>::deref(move _22) -> [return: bb10, unwind: bb31];
    }

    bb10: {
        _20 = &(*_21);
        StorageDead(_22);
        _19 = solana_program::log::sol_log(move _20) -> [return: bb11, unwind: bb31];
    }

    bb11: {
        StorageDead(_20);
        drop(_24) -> [return: bb12, unwind: bb32];
    }

    bb12: {
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_19);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = const "Only state admin can re-enable after kill switch";
        _39 = &(*_40);
        _38 = solana_program::log::sol_log(move _39) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_39);
        StorageDead(_40);
        StorageDead(_38);
        StorageLive(_41);
        _41 = _18;
        _8 = std::result::Result::<(), error::ErrorCode>::Err(move _41);
        StorageDead(_41);
        StorageDead(_18);
        goto -> bb14;
    }

    bb14: {
        StorageDead(_9);
        _7 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _8) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_8);
        _42 = discriminant(_7);
        switchInt(move _42) -> [0: bb16, 1: bb18, otherwise: bb17];
    }

    bb16: {
        StorageLive(_46);
        _46 = ((_7 as Continue).0: ());
        _6 = _46;
        StorageDead(_46);
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = const "Setting first bit to 1, enabling mm oracle update";
        _48 = &(*_49);
        _47 = solana_program::log::sol_log(move _48) -> [return: bb20, unwind continue];
    }

    bb17: {
        unreachable;
    }

    bb18: {
        StorageLive(_43);
        _43 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_45);
        _45 = _43;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _45) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_45);
        StorageDead(_43);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb30;
    }

    bb20: {
        StorageDead(_48);
        StorageDead(_49);
        StorageDead(_47);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _75 = deref_copy (*_3);
        _80 = (((_75.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _52 = &(*_80);
        _51 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _52) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_52);
        _50 = ((*_51).24: u8);
        StorageLive(_53);
        StorageLive(_54);
        _55 = CheckedAdd(const _, const 0_isize);
        assert(!move (_55.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 0_isize) -> [success: bb22, unwind continue];
    }

    bb22: {
        _54 = move (_55.0: isize);
        _53 = move _54 as u8 (IntToInt);
        StorageDead(_54);
        StorageLive(_56);
        StorageLive(_57);
        _76 = deref_copy (*_3);
        _81 = (((_76.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _57 = &mut (*_81);
        _56 = <anchor_lang::prelude::Account<'_, state::state::State> as DerefMut>::deref_mut(move _57) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_57);
        ((*_56).24: u8) = BitOr(move _50, move _53);
        StorageDead(_53);
        StorageDead(_50);
        StorageDead(_56);
        StorageDead(_51);
        _4 = const ();
        goto -> bb29;
    }

    bb24: {
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = const "Setting first bit to 0, disabling mm oracle update";
        _59 = &(*_60);
        _58 = solana_program::log::sol_log(move _59) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_59);
        StorageDead(_60);
        StorageDead(_58);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _77 = deref_copy (*_3);
        _82 = (((_77.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _63 = &(*_82);
        _62 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _63) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_63);
        _61 = ((*_62).24: u8);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _67 = CheckedAdd(const _, const 0_isize);
        assert(!move (_67.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 0_isize) -> [success: bb27, unwind continue];
    }

    bb27: {
        _66 = move (_67.0: isize);
        _65 = move _66 as u8 (IntToInt);
        StorageDead(_66);
        _64 = Not(move _65);
        StorageDead(_65);
        StorageLive(_68);
        StorageLive(_69);
        _78 = deref_copy (*_3);
        _83 = (((_78.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _69 = &mut (*_83);
        _68 = <anchor_lang::prelude::Account<'_, state::state::State> as DerefMut>::deref_mut(move _69) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_69);
        ((*_68).24: u8) = BitAnd(move _61, move _64);
        StorageDead(_64);
        StorageDead(_61);
        StorageDead(_68);
        StorageDead(_62);
        _4 = const ();
        goto -> bb29;
    }

    bb29: {
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_70);
        _70 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _70);
        StorageDead(_70);
        StorageDead(_3);
        goto -> bb30;
    }

    bb30: {
        return;
    }

    bb31 (cleanup): {
        drop(_24) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        resume;
    }
}
