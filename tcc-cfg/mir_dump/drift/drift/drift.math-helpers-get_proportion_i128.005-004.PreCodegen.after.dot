digraph Mir_0_2316 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn get_proportion_i128(_1: i128, _2: u128, _3: u128) -&gt; std::result::Result&lt;i128, error::ErrorCode&gt;<br align="left"/>let _4: u128;<br align="left"/>let mut _5: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _6: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _7: u128;<br align="left"/>let mut _8: i128;<br align="left"/>let mut _9: u128;<br align="left"/>let mut _10: u128;<br align="left"/>let mut _11: isize;<br align="left"/>let _12: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _13: !;<br align="left"/>let mut _14: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _15: u128;<br align="left"/>let _16: i128;<br align="left"/>let mut _17: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _18: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _19: i128;<br align="left"/>let mut _20: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _21: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _22: u128;<br align="left"/>let mut _23: isize;<br align="left"/>let _24: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _25: !;<br align="left"/>let mut _26: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _27: i128;<br align="left"/>let mut _28: i128;<br align="left"/>let mut _29: i128;<br align="left"/>let mut _30: isize;<br align="left"/>let _31: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _32: !;<br align="left"/>let mut _33: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _34: i128;<br align="left"/>let mut _35: i128;<br align="left"/>debug value =&gt; _1;<br align="left"/>debug numerator =&gt; _2;<br align="left"/>debug denominator =&gt; _3;<br align="left"/>debug proportional_u128 =&gt; _4;<br align="left"/>debug residual =&gt; _12;<br align="left"/>debug val =&gt; _15;<br align="left"/>debug proportional_value =&gt; _16;<br align="left"/>debug residual =&gt; _24;<br align="left"/>debug val =&gt; _27;<br align="left"/>debug residual =&gt; _31;<br align="left"/>debug val =&gt; _34;<br align="left"/>>;
    bb0__0_2316 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = _1<br/></td></tr><tr><td align="left">_7 = core::num::&lt;impl i128&gt;::unsigned_abs(move _8)</td></tr></table>>];
    bb1__0_2316 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageLive(_9)<br/>_9 = _2<br/>StorageLive(_10)<br/>_10 = _3<br/></td></tr><tr><td align="left">_6 = get_proportion_u128(move _7, move _9, move _10)</td></tr></table>>];
    bb2__0_2316 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_9)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">_5 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _6)</td></tr></table>>];
    bb3__0_2316 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>_11 = discriminant(_5)<br/></td></tr><tr><td align="left">switchInt(move _11)</td></tr></table>>];
    bb4__0_2316 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_15)<br/>_15 = ((_5 as Continue).0: u128)<br/>_4 = _15<br/>StorageDead(_15)<br/>StorageDead(_5)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>_22 = _4<br/></td></tr><tr><td align="left">_21 = &lt;u128 as Cast&gt;::cast::&lt;i128&gt;(move _22)</td></tr></table>>];
    bb5__0_2316 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb6__0_2316 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_12)<br/>_12 = ((_5 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_14)<br/>_14 = _12<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _14)</td></tr></table>>];
    bb7__0_2316 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageDead(_12)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_2316 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_22)<br/></td></tr><tr><td align="left">_20 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _21)</td></tr></table>>];
    bb9__0_2316 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>_23 = discriminant(_20)<br/></td></tr><tr><td align="left">switchInt(move _23)</td></tr></table>>];
    bb10__0_2316 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_27)<br/>_27 = ((_20 as Continue).0: i128)<br/>_19 = _27<br/>StorageDead(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>_29 = _1<br/></td></tr><tr><td align="left">_28 = core::num::&lt;impl i128&gt;::signum(move _29)</td></tr></table>>];
    bb11__0_2316 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_24)<br/>_24 = ((_20 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_26)<br/>_26 = _24<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _26)</td></tr></table>>];
    bb12__0_2316 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>StorageDead(_24)<br/>StorageDead(_19)<br/>StorageDead(_18)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_2316 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/></td></tr><tr><td align="left">_18 = &lt;i128 as SafeMath&gt;::safe_mul(move _19, move _28)</td></tr></table>>];
    bb14__0_2316 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">_17 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _18)</td></tr></table>>];
    bb15__0_2316 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>_30 = discriminant(_17)<br/></td></tr><tr><td align="left">switchInt(move _30)</td></tr></table>>];
    bb16__0_2316 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageLive(_34)<br/>_34 = ((_17 as Continue).0: i128)<br/>_16 = _34<br/>StorageDead(_34)<br/>StorageDead(_20)<br/>StorageDead(_17)<br/>StorageLive(_35)<br/>_35 = _16<br/>_0 = std::result::Result::&lt;i128, error::ErrorCode&gt;::Ok(move _35)<br/>StorageDead(_35)<br/>StorageDead(_16)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_2316 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageLive(_31)<br/>_31 = ((_17 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_33)<br/>_33 = _31<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _33)</td></tr></table>>];
    bb18__0_2316 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>StorageDead(_31)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb19__0_2316 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageDead(_17)<br/>StorageDead(_16)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_2316 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb21__0_2316 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2316 -> bb1__0_2316 [label="return"];
    bb1__0_2316 -> bb2__0_2316 [label="return"];
    bb2__0_2316 -> bb3__0_2316 [label="return"];
    bb3__0_2316 -> bb4__0_2316 [label="0"];
    bb3__0_2316 -> bb6__0_2316 [label="1"];
    bb3__0_2316 -> bb5__0_2316 [label="otherwise"];
    bb4__0_2316 -> bb8__0_2316 [label="return"];
    bb6__0_2316 -> bb7__0_2316 [label="return"];
    bb7__0_2316 -> bb20__0_2316 [label=""];
    bb8__0_2316 -> bb9__0_2316 [label="return"];
    bb9__0_2316 -> bb10__0_2316 [label="0"];
    bb9__0_2316 -> bb11__0_2316 [label="1"];
    bb9__0_2316 -> bb5__0_2316 [label="otherwise"];
    bb10__0_2316 -> bb13__0_2316 [label="return"];
    bb11__0_2316 -> bb12__0_2316 [label="return"];
    bb12__0_2316 -> bb19__0_2316 [label=""];
    bb13__0_2316 -> bb14__0_2316 [label="return"];
    bb14__0_2316 -> bb15__0_2316 [label="return"];
    bb15__0_2316 -> bb16__0_2316 [label="0"];
    bb15__0_2316 -> bb17__0_2316 [label="1"];
    bb15__0_2316 -> bb5__0_2316 [label="otherwise"];
    bb16__0_2316 -> bb21__0_2316 [label=""];
    bb17__0_2316 -> bb18__0_2316 [label="return"];
    bb18__0_2316 -> bb19__0_2316 [label=""];
    bb19__0_2316 -> bb20__0_2316 [label=""];
    bb20__0_2316 -> bb21__0_2316 [label=""];
}
