// MIR for `state::user::<impl at programs/drift/src/state/user.rs:136:1: 136:10>::get_perp_position_mut` before PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:136:1: 136:10>::get_perp_position_mut(_1: &mut User, _2: u16) -> std::result::Result<&mut PerpPosition, error::ErrorCode> {
    debug self => _1;
    debug market_index => _2;
    let mut _0: std::result::Result<&mut state::user::PerpPosition, error::ErrorCode>;
    let mut _3: &mut state::user::PerpPosition;
    let mut _4: &mut state::user::PerpPosition;
    let _5: usize;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, usize>;
    let mut _7: std::result::Result<usize, error::ErrorCode>;
    let mut _8: &[state::user::PerpPosition; 8];
    let _9: &[state::user::PerpPosition; 8];
    let mut _10: u16;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _15: usize;
    let mut _16: usize;
    let mut _17: bool;
    scope 1 {
        debug residual => _12;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _15;
        scope 4 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &((*_1).4: [state::user::PerpPosition; 8]);
        _8 = &(*_9);
        StorageLive(_10);
        _10 = _2;
        _7 = get_position_index(move _8, move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_10);
        StorageDead(_8);
        _6 = <std::result::Result<usize, error::ErrorCode> as Try>::branch(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        _11 = discriminant(_6);
        switchInt(move _11) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_15);
        _15 = ((_6 as Continue).0: usize);
        _5 = _15;
        StorageDead(_15);
        _16 = Len(((*_1).4: [state::user::PerpPosition; 8]));
        _17 = Lt(_5, _16);
        assert(move _17, "index out of bounds: the length is {} but the index is {}", move _16, _5) -> [success: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_12);
        _12 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<&mut PerpPosition, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb8;
    }

    bb7: {
        _4 = &mut ((*_1).4: [state::user::PerpPosition; 8])[_5];
        _3 = &mut (*_4);
        _0 = std::result::Result::<&mut PerpPosition, error::ErrorCode>::Ok(move _3);
        StorageDead(_3);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb8;
    }

    bb8: {
        return;
    }
}
