// MIR for `get_auction_params` after PreCodegen

fn get_auction_params(_1: &order_params::OrderParams, _2: &OraclePriceData, _3: u64, _4: u8) -> std::result::Result<(i64, i64, u8), error::ErrorCode> {
    debug params => _1;
    debug oracle_price_data => _2;
    debug tick_size => _3;
    debug min_auction_duration => _4;
    let mut _0: std::result::Result<(i64, i64, u8), error::ErrorCode>;
    let _5: ();
    let mut _6: bool;
    let mut _7: isize;
    let mut _8: !;
    let mut _9: (i64, i64, u8);
    let _10: ();
    let mut _11: bool;
    let mut _12: &state::user::OrderType;
    let mut _13: &state::user::OrderType;
    let _14: state::user::OrderType;
    let mut _15: !;
    let mut _16: (std::option::Option<i64>, std::option::Option<i64>, std::option::Option<u8>);
    let mut _17: std::option::Option<i64>;
    let mut _18: std::option::Option<i64>;
    let mut _19: std::option::Option<u8>;
    let mut _20: isize;
    let mut _21: isize;
    let mut _22: isize;
    let _23: i64;
    let _24: i64;
    let _25: u8;
    let mut _27: bool;
    let mut _28: u8;
    let mut _29: u8;
    let mut _30: u8;
    let mut _31: (i64, i64, u8);
    let mut _32: i64;
    let mut _33: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _34: std::result::Result<i64, error::ErrorCode>;
    let mut _35: i64;
    let mut _36: i64;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _38: std::result::Result<i64, error::ErrorCode>;
    let mut _39: u64;
    let mut _40: isize;
    let mut _42: !;
    let mut _43: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _45: controller::position::PositionDirection;
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _51: i64;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _53: std::result::Result<i64, error::ErrorCode>;
    let mut _54: i64;
    let mut _55: i64;
    let mut _56: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _57: std::result::Result<i64, error::ErrorCode>;
    let mut _58: u64;
    let mut _59: isize;
    let mut _61: !;
    let mut _62: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _64: controller::position::PositionDirection;
    let mut _65: isize;
    let mut _67: !;
    let mut _68: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _70: u8;
    let mut _71: (i64, i64, u8);
    let _72: u8;
    let mut _73: u8;
    let mut _74: std::option::Option<u8>;
    let mut _75: u8;
    let mut _78: (i64, i64);
    let mut _79: (std::option::Option<i64>, std::option::Option<i64>);
    let mut _80: std::option::Option<i64>;
    let mut _81: std::option::Option<i64>;
    let mut _82: isize;
    let mut _83: isize;
    let mut _84: &std::option::Option<i64>;
    let mut _85: &std::option::Option<i64>;
    let mut _88: i64;
    let mut _89: i64;
    let mut _90: bool;
    let mut _91: &state::user::OrderType;
    let mut _92: &state::user::OrderType;
    let _93: state::user::OrderType;
    let mut _94: !;
    let _95: ();
    let mut _96: &str;
    let _97: &str;
    let mut _98: error::ErrorCode;
    let mut _99: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (i64, i64)>;
    let mut _100: std::result::Result<(i64, i64), error::ErrorCode>;
    let mut _101: &state::oracle::OraclePriceData;
    let mut _102: controller::position::PositionDirection;
    let mut _103: u64;
    let mut _104: isize;
    let mut _106: !;
    let mut _107: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _109: (i64, i64, u8);
    let mut _110: i64;
    let mut _111: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _112: std::result::Result<i64, error::ErrorCode>;
    let mut _113: i64;
    let mut _114: i64;
    let mut _115: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _116: std::result::Result<i64, error::ErrorCode>;
    let mut _117: u64;
    let mut _118: isize;
    let mut _120: !;
    let mut _121: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _123: controller::position::PositionDirection;
    let mut _124: isize;
    let mut _126: !;
    let mut _127: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _129: i64;
    let mut _130: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _131: std::result::Result<i64, error::ErrorCode>;
    let mut _132: i64;
    let mut _133: i64;
    let mut _134: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _135: std::result::Result<i64, error::ErrorCode>;
    let mut _136: u64;
    let mut _137: isize;
    let mut _139: !;
    let mut _140: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _142: controller::position::PositionDirection;
    let mut _143: isize;
    let mut _145: !;
    let mut _146: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _148: u8;
    let mut _150: &state::user::OrderType;
    scope 1 {
        debug auction_start_price => _23;
        debug auction_end_price => _24;
        debug auction_duration => _25;
        let _26: u8;
        scope 2 {
            debug auction_duration => _26;
            let _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _44: i64;
            let _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _50: i64;
            let _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _63: i64;
            let _66: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _69: i64;
            scope 3 {
                debug residual => _41;
                scope 4 {
                }
            }
            scope 5 {
                debug val => _44;
                scope 6 {
                }
            }
            scope 7 {
                debug residual => _47;
                scope 8 {
                }
            }
            scope 9 {
                debug val => _50;
                scope 10 {
                }
            }
            scope 11 {
                debug residual => _60;
                scope 12 {
                }
            }
            scope 13 {
                debug val => _63;
                scope 14 {
                }
            }
            scope 15 {
                debug residual => _66;
                scope 16 {
                }
            }
            scope 17 {
                debug val => _69;
                scope 18 {
                }
            }
        }
    }
    scope 19 {
        debug auction_duration => _72;
        let _76: i64;
        let _77: i64;
        let _86: i64;
        let _87: i64;
        let _105: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _108: (i64, i64);
        let mut _149: &state::user::OrderType;
        scope 20 {
            debug auction_start_price => _76;
            debug auction_end_price => _77;
            let _119: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _122: i64;
            let _125: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _128: i64;
            let _138: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _141: i64;
            let _144: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _147: i64;
            scope 26 {
                debug residual => _119;
                scope 27 {
                }
            }
            scope 28 {
                debug val => _122;
                scope 29 {
                }
            }
            scope 30 {
                debug residual => _125;
                scope 31 {
                }
            }
            scope 32 {
                debug val => _128;
                scope 33 {
                }
            }
            scope 34 {
                debug residual => _138;
                scope 35 {
                }
            }
            scope 36 {
                debug val => _141;
                scope 37 {
                }
            }
            scope 38 {
                debug residual => _144;
                scope 39 {
                }
            }
            scope 40 {
                debug val => _147;
                scope 41 {
                }
            }
        }
        scope 21 {
            debug auction_start_price => _86;
            debug auction_end_price => _87;
        }
        scope 22 {
            debug residual => _105;
            scope 23 {
            }
        }
        scope 24 {
            debug val => _108;
            scope 25 {
            }
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        _7 = discriminant(((*_1).0: state::user::OrderType));
        switchInt(move _7) -> [0: bb2, 1: bb2, 4: bb2, otherwise: bb1];
    }

    bb1: {
        _6 = const false;
        goto -> bb3;
    }

    bb2: {
        _6 = const true;
        goto -> bb3;
    }

    bb3: {
        switchInt(move _6) -> [0: bb4, otherwise: bb5];
    }

    bb4: {
        StorageLive(_9);
        _9 = (const 0_i64, const 0_i64, const 0_u8);
        _0 = std::result::Result::<(i64, i64, u8), error::ErrorCode>::Ok(move _9);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb81;
    }

    bb5: {
        _5 = const ();
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &((*_1).0: state::user::OrderType);
        StorageLive(_13);
        _150 = const _;
        _13 = &(*_150);
        _11 = <state::user::OrderType as PartialEq>::eq(move _12, move _13) -> [return: bb6, unwind continue];
    }

    bb6: {
        switchInt(move _11) -> [0: bb37, otherwise: bb7];
    }

    bb7: {
        StorageDead(_13);
        StorageDead(_12);
        StorageLive(_16);
        StorageLive(_17);
        _17 = ((*_1).15: std::option::Option<i64>);
        StorageLive(_18);
        _18 = ((*_1).16: std::option::Option<i64>);
        StorageLive(_19);
        _19 = ((*_1).14: std::option::Option<u8>);
        _16 = (move _17, move _18, move _19);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        _22 = discriminant((_16.0: std::option::Option<i64>));
        switchInt(move _22) -> [1: bb9, otherwise: bb8];
    }

    bb8: {
        StorageLive(_71);
        _71 = (const 0_i64, const 0_i64, const 0_u8);
        _0 = std::result::Result::<(i64, i64, u8), error::ErrorCode>::Ok(move _71);
        StorageDead(_71);
        goto -> bb80;
    }

    bb9: {
        _21 = discriminant((_16.1: std::option::Option<i64>));
        switchInt(move _21) -> [1: bb10, otherwise: bb8];
    }

    bb10: {
        _20 = discriminant((_16.2: std::option::Option<u8>));
        switchInt(move _20) -> [1: bb11, otherwise: bb8];
    }

    bb11: {
        StorageLive(_23);
        _23 = (((_16.0: std::option::Option<i64>) as Some).0: i64);
        StorageLive(_24);
        _24 = (((_16.1: std::option::Option<i64>) as Some).0: i64);
        StorageLive(_25);
        _25 = (((_16.2: std::option::Option<u8>) as Some).0: u8);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = _25;
        _27 = Eq(move _28, const 0_u8);
        switchInt(move _27) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        StorageDead(_28);
        _26 = _25;
        goto -> bb15;
    }

    bb13: {
        StorageDead(_28);
        StorageLive(_29);
        _29 = _25;
        StorageLive(_30);
        _30 = _4;
        _26 = <u8 as Ord>::max(move _29, move _30) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_30);
        StorageDead(_29);
        goto -> bb15;
    }

    bb15: {
        StorageDead(_27);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = _23;
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = _3;
        _38 = <u64 as Cast>::cast::<i64>(move _39) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_39);
        _37 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _38) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_38);
        _40 = discriminant(_37);
        switchInt(move _40) -> [0: bb18, 1: bb20, otherwise: bb19];
    }

    bb18: {
        StorageLive(_44);
        _44 = ((_37 as Continue).0: i64);
        _36 = _44;
        StorageDead(_44);
        StorageLive(_45);
        _45 = ((*_1).2: controller::position::PositionDirection);
        _34 = math::orders::standardize_price_i64(move _35, move _36, move _45) -> [return: bb22, unwind continue];
    }

    bb19: {
        unreachable;
    }

    bb20: {
        StorageLive(_41);
        _41 = ((_37 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_43);
        _43 = _41;
        _0 = <std::result::Result<(i64, i64, u8), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _43) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_43);
        StorageDead(_41);
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_34);
        goto -> bb78;
    }

    bb22: {
        StorageDead(_45);
        StorageDead(_36);
        StorageDead(_35);
        _33 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _34) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_34);
        _46 = discriminant(_33);
        switchInt(move _46) -> [0: bb24, 1: bb25, otherwise: bb19];
    }

    bb24: {
        StorageLive(_50);
        _50 = ((_33 as Continue).0: i64);
        _32 = _50;
        StorageDead(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = _24;
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _58 = _3;
        _57 = <u64 as Cast>::cast::<i64>(move _58) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_47);
        _47 = ((_33 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_49);
        _49 = _47;
        _0 = <std::result::Result<(i64, i64, u8), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _49) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_49);
        StorageDead(_47);
        goto -> bb78;
    }

    bb27: {
        StorageDead(_58);
        _56 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _57) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_57);
        _59 = discriminant(_56);
        switchInt(move _59) -> [0: bb29, 1: bb30, otherwise: bb19];
    }

    bb29: {
        StorageLive(_63);
        _63 = ((_56 as Continue).0: i64);
        _55 = _63;
        StorageDead(_63);
        StorageLive(_64);
        _64 = ((*_1).2: controller::position::PositionDirection);
        _53 = math::orders::standardize_price_i64(move _54, move _55, move _64) -> [return: bb32, unwind continue];
    }

    bb30: {
        StorageLive(_60);
        _60 = ((_56 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_62);
        _62 = _60;
        _0 = <std::result::Result<(i64, i64, u8), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _62) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_62);
        StorageDead(_60);
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_53);
        goto -> bb77;
    }

    bb32: {
        StorageDead(_64);
        StorageDead(_55);
        StorageDead(_54);
        _52 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _53) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_53);
        _65 = discriminant(_52);
        switchInt(move _65) -> [0: bb34, 1: bb35, otherwise: bb19];
    }

    bb34: {
        StorageLive(_69);
        _69 = ((_52 as Continue).0: i64);
        _51 = _69;
        StorageDead(_69);
        StorageLive(_70);
        _70 = _26;
        _31 = (move _32, move _51, move _70);
        StorageDead(_70);
        StorageDead(_51);
        StorageDead(_32);
        _0 = std::result::Result::<(i64, i64, u8), error::ErrorCode>::Ok(move _31);
        StorageDead(_31);
        StorageDead(_26);
        StorageDead(_56);
        StorageDead(_52);
        StorageDead(_37);
        StorageDead(_33);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb80;
    }

    bb35: {
        StorageLive(_66);
        _66 = ((_52 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_68);
        _68 = _66;
        _0 = <std::result::Result<(i64, i64, u8), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _68) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_68);
        StorageDead(_66);
        goto -> bb77;
    }

    bb37: {
        StorageDead(_13);
        StorageDead(_12);
        _10 = const ();
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = ((*_1).14: std::option::Option<u8>);
        _73 = Option::<u8>::unwrap_or(move _74, const 0_u8) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_74);
        StorageLive(_75);
        _75 = _4;
        _72 = <u8 as Ord>::max(move _73, move _75) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_75);
        StorageDead(_73);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _80 = ((*_1).15: std::option::Option<i64>);
        StorageLive(_81);
        _81 = ((*_1).16: std::option::Option<i64>);
        _79 = (move _80, move _81);
        StorageDead(_81);
        StorageDead(_80);
        _83 = discriminant((_79.0: std::option::Option<i64>));
        switchInt(move _83) -> [1: bb40, otherwise: bb42];
    }

    bb40: {
        _82 = discriminant((_79.1: std::option::Option<i64>));
        switchInt(move _82) -> [1: bb41, otherwise: bb42];
    }

    bb41: {
        StorageLive(_86);
        _86 = (((_79.0: std::option::Option<i64>) as Some).0: i64);
        StorageLive(_87);
        _87 = (((_79.1: std::option::Option<i64>) as Some).0: i64);
        StorageLive(_88);
        _88 = _86;
        StorageLive(_89);
        _89 = _87;
        _78 = (move _88, move _89);
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        goto -> bb52;
    }

    bb42: {
        StorageLive(_90);
        StorageLive(_91);
        _91 = &((*_1).0: state::user::OrderType);
        StorageLive(_92);
        _149 = const _;
        _92 = &(*_149);
        _90 = <state::user::OrderType as PartialEq>::eq(move _91, move _92) -> [return: bb43, unwind continue];
    }

    bb43: {
        switchInt(move _90) -> [0: bb45, otherwise: bb44];
    }

    bb44: {
        StorageDead(_92);
        StorageDead(_91);
        StorageDead(_90);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = const "Oracle order must specify auction start and end price offsets";
        _96 = &(*_97);
        _95 = solana_program::log::sol_log(move _96) -> [return: bb46, unwind continue];
    }

    bb45: {
        StorageDead(_92);
        StorageDead(_91);
        StorageDead(_90);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _101 = &(*_2);
        StorageLive(_102);
        _102 = ((*_1).2: controller::position::PositionDirection);
        StorageLive(_103);
        _103 = ((*_1).5: u64);
        _100 = calculate_auction_prices(move _101, move _102, move _103) -> [return: bb47, unwind continue];
    }

    bb46: {
        StorageDead(_96);
        StorageDead(_97);
        StorageDead(_95);
        StorageLive(_98);
        _98 = error::ErrorCode::InvalidOrderAuction;
        _0 = std::result::Result::<(i64, i64, u8), error::ErrorCode>::Err(move _98);
        StorageDead(_98);
        goto -> bb76;
    }

    bb47: {
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_101);
        _99 = <std::result::Result<(i64, i64), error::ErrorCode> as Try>::branch(move _100) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_100);
        _104 = discriminant(_99);
        switchInt(move _104) -> [0: bb49, 1: bb50, otherwise: bb19];
    }

    bb49: {
        StorageLive(_108);
        _108 = ((_99 as Continue).0: (i64, i64));
        _78 = _108;
        StorageDead(_108);
        StorageDead(_99);
        goto -> bb52;
    }

    bb50: {
        StorageLive(_105);
        _105 = ((_99 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_107);
        _107 = _105;
        _0 = <std::result::Result<(i64, i64, u8), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _107) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_107);
        StorageDead(_105);
        StorageDead(_99);
        goto -> bb76;
    }

    bb52: {
        StorageLive(_76);
        _76 = (_78.0: i64);
        StorageLive(_77);
        _77 = (_78.1: i64);
        StorageDead(_79);
        StorageDead(_78);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        _113 = _76;
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _117 = _3;
        _116 = <u64 as Cast>::cast::<i64>(move _117) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_117);
        _115 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _116) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_116);
        _118 = discriminant(_115);
        switchInt(move _118) -> [0: bb55, 1: bb56, otherwise: bb19];
    }

    bb55: {
        StorageLive(_122);
        _122 = ((_115 as Continue).0: i64);
        _114 = _122;
        StorageDead(_122);
        StorageLive(_123);
        _123 = ((*_1).2: controller::position::PositionDirection);
        _112 = math::orders::standardize_price_i64(move _113, move _114, move _123) -> [return: bb58, unwind continue];
    }

    bb56: {
        StorageLive(_119);
        _119 = ((_115 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_121);
        _121 = _119;
        _0 = <std::result::Result<(i64, i64, u8), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _121) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_121);
        StorageDead(_119);
        StorageDead(_114);
        StorageDead(_113);
        StorageDead(_112);
        goto -> bb74;
    }

    bb58: {
        StorageDead(_123);
        StorageDead(_114);
        StorageDead(_113);
        _111 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _112) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_112);
        _124 = discriminant(_111);
        switchInt(move _124) -> [0: bb60, 1: bb61, otherwise: bb19];
    }

    bb60: {
        StorageLive(_128);
        _128 = ((_111 as Continue).0: i64);
        _110 = _128;
        StorageDead(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        _132 = _77;
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        _136 = _3;
        _135 = <u64 as Cast>::cast::<i64>(move _136) -> [return: bb63, unwind continue];
    }

    bb61: {
        StorageLive(_125);
        _125 = ((_111 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_127);
        _127 = _125;
        _0 = <std::result::Result<(i64, i64, u8), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _127) -> [return: bb62, unwind continue];
    }

    bb62: {
        StorageDead(_127);
        StorageDead(_125);
        goto -> bb74;
    }

    bb63: {
        StorageDead(_136);
        _134 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _135) -> [return: bb64, unwind continue];
    }

    bb64: {
        StorageDead(_135);
        _137 = discriminant(_134);
        switchInt(move _137) -> [0: bb65, 1: bb66, otherwise: bb19];
    }

    bb65: {
        StorageLive(_141);
        _141 = ((_134 as Continue).0: i64);
        _133 = _141;
        StorageDead(_141);
        StorageLive(_142);
        _142 = ((*_1).2: controller::position::PositionDirection);
        _131 = math::orders::standardize_price_i64(move _132, move _133, move _142) -> [return: bb68, unwind continue];
    }

    bb66: {
        StorageLive(_138);
        _138 = ((_134 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_140);
        _140 = _138;
        _0 = <std::result::Result<(i64, i64, u8), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _140) -> [return: bb67, unwind continue];
    }

    bb67: {
        StorageDead(_140);
        StorageDead(_138);
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_131);
        goto -> bb73;
    }

    bb68: {
        StorageDead(_142);
        StorageDead(_133);
        StorageDead(_132);
        _130 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _131) -> [return: bb69, unwind continue];
    }

    bb69: {
        StorageDead(_131);
        _143 = discriminant(_130);
        switchInt(move _143) -> [0: bb70, 1: bb71, otherwise: bb19];
    }

    bb70: {
        StorageLive(_147);
        _147 = ((_130 as Continue).0: i64);
        _129 = _147;
        StorageDead(_147);
        StorageLive(_148);
        _148 = _72;
        _109 = (move _110, move _129, move _148);
        StorageDead(_148);
        StorageDead(_129);
        StorageDead(_110);
        _0 = std::result::Result::<(i64, i64, u8), error::ErrorCode>::Ok(move _109);
        StorageDead(_109);
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_72);
        StorageDead(_134);
        StorageDead(_130);
        StorageDead(_115);
        StorageDead(_111);
        goto -> bb81;
    }

    bb71: {
        StorageLive(_144);
        _144 = ((_130 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_146);
        _146 = _144;
        _0 = <std::result::Result<(i64, i64, u8), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _146) -> [return: bb72, unwind continue];
    }

    bb72: {
        StorageDead(_146);
        StorageDead(_144);
        goto -> bb73;
    }

    bb73: {
        StorageDead(_129);
        StorageDead(_110);
        StorageDead(_109);
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_72);
        StorageDead(_134);
        StorageDead(_130);
        goto -> bb75;
    }

    bb74: {
        StorageDead(_110);
        StorageDead(_109);
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_72);
        goto -> bb75;
    }

    bb75: {
        StorageDead(_115);
        StorageDead(_111);
        goto -> bb81;
    }

    bb76: {
        StorageDead(_79);
        StorageDead(_78);
        StorageDead(_72);
        goto -> bb81;
    }

    bb77: {
        StorageDead(_51);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_26);
        StorageDead(_56);
        StorageDead(_52);
        goto -> bb79;
    }

    bb78: {
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_26);
        goto -> bb79;
    }

    bb79: {
        StorageDead(_37);
        StorageDead(_33);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb80;
    }

    bb80: {
        StorageDead(_16);
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb81;
    }

    bb81: {
        return;
    }
}
