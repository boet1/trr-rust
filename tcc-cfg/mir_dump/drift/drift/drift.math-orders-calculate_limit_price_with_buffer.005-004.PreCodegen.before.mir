// MIR for `calculate_limit_price_with_buffer` before PreCodegen

fn calculate_limit_price_with_buffer(_1: &Order, _2: Option<u64>, _3: &state::state::FeeTier, _4: i16) -> std::result::Result<Option<u64>, error::ErrorCode> {
    debug order => _1;
    debug limit_price => _2;
    debug fee_tier => _3;
    debug fee_adjustment => _4;
    let mut _0: std::result::Result<std::option::Option<u64>, error::ErrorCode>;
    let mut _5: bool;
    let mut _6: std::option::Option<u64>;
    let mut _7: isize;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _11: std::result::Result<u64, error::ErrorCode>;
    let mut _12: u64;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _14: std::result::Result<u64, error::ErrorCode>;
    let mut _15: u64;
    let mut _16: u64;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _18: std::result::Result<u64, error::ErrorCode>;
    let mut _19: u32;
    let mut _20: isize;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _25: isize;
    let mut _27: !;
    let mut _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _30: u64;
    let mut _31: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _32: std::result::Result<u64, error::ErrorCode>;
    let mut _33: u32;
    let mut _34: isize;
    let mut _36: !;
    let mut _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _39: isize;
    let mut _41: !;
    let mut _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _44: ();
    let mut _45: bool;
    let mut _46: i16;
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _49: std::result::Result<u64, error::ErrorCode>;
    let mut _50: u64;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _52: std::result::Result<u64, error::ErrorCode>;
    let mut _53: u64;
    let mut _54: u64;
    let mut _55: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _56: std::result::Result<u64, error::ErrorCode>;
    let mut _57: i16;
    let mut _58: i16;
    let mut _59: isize;
    let mut _61: !;
    let mut _62: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _64: isize;
    let mut _66: !;
    let mut _67: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _69: isize;
    let mut _71: !;
    let mut _72: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _74: u64;
    let mut _75: u64;
    let mut _76: u64;
    let mut _77: bool;
    let mut _78: i16;
    let mut _80: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _81: std::result::Result<u64, error::ErrorCode>;
    let mut _82: u64;
    let mut _83: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _84: std::result::Result<u64, error::ErrorCode>;
    let mut _85: u64;
    let mut _86: u64;
    let mut _87: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _88: std::result::Result<u64, error::ErrorCode>;
    let mut _89: i16;
    let mut _90: isize;
    let mut _92: !;
    let mut _93: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _95: isize;
    let mut _97: !;
    let mut _98: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _100: isize;
    let mut _102: !;
    let mut _103: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _105: u64;
    let mut _106: u64;
    let mut _107: u64;
    let mut _108: isize;
    let mut _109: std::result::Result<u64, error::ErrorCode>;
    let mut _110: u64;
    let mut _111: u64;
    let mut _112: std::result::Result<u64, error::ErrorCode>;
    let mut _113: u64;
    let mut _114: u64;
    let mut _115: std::option::Option<u64>;
    scope 1 {
        debug limit_price => _8;
        let _8: u64;
        let mut _9: u64;
        let _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _24: u64;
        let _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _29: u64;
        let _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _38: u64;
        let _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _43: u64;
        scope 2 {
            debug buffer => _9;
            let _47: u64;
            let _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _63: u64;
            let _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _68: u64;
            let _70: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _73: u64;
            let _79: u64;
            let _91: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _94: u64;
            let _96: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _99: u64;
            let _101: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _104: u64;
            scope 19 {
                debug buffer_adjustment => _47;
            }
            scope 20 {
                debug residual => _60;
                scope 21 {
                }
            }
            scope 22 {
                debug val => _63;
                scope 23 {
                }
            }
            scope 24 {
                debug residual => _65;
                scope 25 {
                }
            }
            scope 26 {
                debug val => _68;
                scope 27 {
                }
            }
            scope 28 {
                debug residual => _70;
                scope 29 {
                }
            }
            scope 30 {
                debug val => _73;
                scope 31 {
                }
            }
            scope 32 {
                debug buffer_adjustment => _79;
            }
            scope 33 {
                debug residual => _91;
                scope 34 {
                }
            }
            scope 35 {
                debug val => _94;
                scope 36 {
                }
            }
            scope 37 {
                debug residual => _96;
                scope 38 {
                }
            }
            scope 39 {
                debug val => _99;
                scope 40 {
                }
            }
            scope 41 {
                debug residual => _101;
                scope 42 {
                }
            }
            scope 43 {
                debug val => _104;
                scope 44 {
                }
            }
        }
        scope 3 {
            debug residual => _21;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _24;
            scope 6 {
            }
        }
        scope 7 {
            debug residual => _26;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _29;
            scope 10 {
            }
        }
        scope 11 {
            debug residual => _35;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _38;
            scope 14 {
            }
        }
        scope 15 {
            debug residual => _40;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _43;
            scope 18 {
            }
        }
    }

    bb0: {
        StorageLive(_5);
        _5 = ((*_1).19: bool);
        switchInt(move _5) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        StorageLive(_6);
        _6 = _2;
        _0 = std::result::Result::<Option<u64>, error::ErrorCode>::Ok(move _6);
        StorageDead(_6);
        goto -> bb72;
    }

    bb2: {
        _7 = discriminant(_2);
        switchInt(move _7) -> [1: bb3, otherwise: bb71];
    }

    bb3: {
        StorageLive(_8);
        _8 = ((_2 as Some).0: u64);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = _8;
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = ((*_3).2: u32);
        _18 = <u32 as Cast>::cast::<u64>(move _19) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_19);
        _17 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _18) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_18);
        _20 = discriminant(_17);
        switchInt(move _20) -> [0: bb6, 1: bb8, otherwise: bb7];
    }

    bb6: {
        StorageLive(_24);
        _24 = ((_17 as Continue).0: u64);
        _16 = _24;
        StorageDead(_24);
        _14 = <u64 as SafeMath>::safe_mul(move _15, move _16) -> [return: bb10, unwind continue];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        StorageLive(_21);
        _21 = ((_17 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_23);
        _23 = _21;
        _0 = <std::result::Result<Option<u64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _23) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb79;
    }

    bb10: {
        StorageDead(_16);
        StorageDead(_15);
        _13 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _14) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_14);
        _25 = discriminant(_13);
        switchInt(move _25) -> [0: bb12, 1: bb13, otherwise: bb7];
    }

    bb12: {
        StorageLive(_29);
        _29 = ((_13 as Continue).0: u64);
        _12 = _29;
        StorageDead(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = ((*_3).3: u32);
        _32 = <u32 as Cast>::cast::<u64>(move _33) -> [return: bb15, unwind continue];
    }

    bb13: {
        StorageLive(_26);
        _26 = ((_13 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_28);
        _28 = _26;
        _0 = <std::result::Result<Option<u64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _28) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_28);
        StorageDead(_26);
        goto -> bb79;
    }

    bb15: {
        StorageDead(_33);
        _31 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _32) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_32);
        _34 = discriminant(_31);
        switchInt(move _34) -> [0: bb17, 1: bb18, otherwise: bb7];
    }

    bb17: {
        StorageLive(_38);
        _38 = ((_31 as Continue).0: u64);
        _30 = _38;
        StorageDead(_38);
        _11 = <u64 as SafeMath>::safe_div(move _12, move _30) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_35);
        _35 = ((_31 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_37);
        _37 = _35;
        _0 = <std::result::Result<Option<u64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _37) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_30);
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb78;
    }

    bb20: {
        StorageDead(_30);
        StorageDead(_12);
        _10 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _11) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_11);
        _39 = discriminant(_10);
        switchInt(move _39) -> [0: bb22, 1: bb23, otherwise: bb7];
    }

    bb22: {
        StorageLive(_43);
        _43 = ((_10 as Continue).0: u64);
        _9 = _43;
        StorageDead(_43);
        StorageDead(_31);
        StorageDead(_17);
        StorageDead(_13);
        StorageDead(_10);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = _4;
        _45 = Lt(move _46, const 0_i16);
        switchInt(move _45) -> [0: bb26, otherwise: bb25];
    }

    bb23: {
        StorageLive(_40);
        _40 = ((_10 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_42);
        _42 = _40;
        _0 = <std::result::Result<Option<u64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _42) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_42);
        StorageDead(_40);
        goto -> bb78;
    }

    bb25: {
        StorageDead(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = _9;
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _58 = _4;
        _57 = core::num::<impl i16>::abs(move _58) -> [return: bb27, unwind continue];
    }

    bb26: {
        StorageDead(_46);
        StorageLive(_77);
        StorageLive(_78);
        _78 = _4;
        _77 = Gt(move _78, const 0_i16);
        switchInt(move _77) -> [0: bb45, otherwise: bb44];
    }

    bb27: {
        StorageDead(_58);
        _56 = <i16 as Cast>::cast::<u64>(move _57) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_57);
        _55 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _56) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_56);
        _59 = discriminant(_55);
        switchInt(move _59) -> [0: bb30, 1: bb31, otherwise: bb7];
    }

    bb30: {
        StorageLive(_63);
        _63 = ((_55 as Continue).0: u64);
        _54 = _63;
        StorageDead(_63);
        _52 = <u64 as SafeMath>::safe_mul(move _53, move _54) -> [return: bb33, unwind continue];
    }

    bb31: {
        StorageLive(_60);
        _60 = ((_55 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_62);
        _62 = _60;
        _0 = <std::result::Result<Option<u64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _62) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_62);
        StorageDead(_60);
        StorageDead(_54);
        StorageDead(_53);
        StorageDead(_52);
        goto -> bb75;
    }

    bb33: {
        StorageDead(_54);
        StorageDead(_53);
        _51 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _52) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_52);
        _64 = discriminant(_51);
        switchInt(move _64) -> [0: bb35, 1: bb36, otherwise: bb7];
    }

    bb35: {
        StorageLive(_68);
        _68 = ((_51 as Continue).0: u64);
        _50 = _68;
        StorageDead(_68);
        _49 = <u64 as SafeMath>::safe_div(move _50, const _) -> [return: bb38, unwind continue];
    }

    bb36: {
        StorageLive(_65);
        _65 = ((_51 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_67);
        _67 = _65;
        _0 = <std::result::Result<Option<u64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _67) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_67);
        StorageDead(_65);
        goto -> bb75;
    }

    bb38: {
        StorageDead(_50);
        _48 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _49) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_49);
        _69 = discriminant(_48);
        switchInt(move _69) -> [0: bb40, 1: bb41, otherwise: bb7];
    }

    bb40: {
        StorageLive(_73);
        _73 = ((_48 as Continue).0: u64);
        _47 = _73;
        StorageDead(_73);
        StorageDead(_55);
        StorageDead(_51);
        StorageDead(_48);
        StorageLive(_74);
        StorageLive(_75);
        _75 = _9;
        StorageLive(_76);
        _76 = _47;
        _74 = core::num::<impl u64>::saturating_sub(move _75, move _76) -> [return: bb43, unwind continue];
    }

    bb41: {
        StorageLive(_70);
        _70 = ((_48 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_72);
        _72 = _70;
        _0 = <std::result::Result<Option<u64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _72) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_72);
        StorageDead(_70);
        goto -> bb76;
    }

    bb43: {
        StorageDead(_76);
        StorageDead(_75);
        _9 = move _74;
        StorageDead(_74);
        _44 = const ();
        StorageDead(_47);
        goto -> bb63;
    }

    bb44: {
        StorageDead(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = _9;
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = _4;
        _88 = <i16 as Cast>::cast::<u64>(move _89) -> [return: bb46, unwind continue];
    }

    bb45: {
        StorageDead(_78);
        _44 = const ();
        goto -> bb62;
    }

    bb46: {
        StorageDead(_89);
        _87 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _88) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_88);
        _90 = discriminant(_87);
        switchInt(move _90) -> [0: bb48, 1: bb49, otherwise: bb7];
    }

    bb48: {
        StorageLive(_94);
        _94 = ((_87 as Continue).0: u64);
        _86 = _94;
        StorageDead(_94);
        _84 = <u64 as SafeMath>::safe_mul(move _85, move _86) -> [return: bb51, unwind continue];
    }

    bb49: {
        StorageLive(_91);
        _91 = ((_87 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_93);
        _93 = _91;
        _0 = <std::result::Result<Option<u64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _93) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_93);
        StorageDead(_91);
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_84);
        goto -> bb73;
    }

    bb51: {
        StorageDead(_86);
        StorageDead(_85);
        _83 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _84) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_84);
        _95 = discriminant(_83);
        switchInt(move _95) -> [0: bb53, 1: bb54, otherwise: bb7];
    }

    bb53: {
        StorageLive(_99);
        _99 = ((_83 as Continue).0: u64);
        _82 = _99;
        StorageDead(_99);
        _81 = <u64 as SafeMath>::safe_div(move _82, const _) -> [return: bb56, unwind continue];
    }

    bb54: {
        StorageLive(_96);
        _96 = ((_83 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_98);
        _98 = _96;
        _0 = <std::result::Result<Option<u64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _98) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_98);
        StorageDead(_96);
        goto -> bb73;
    }

    bb56: {
        StorageDead(_82);
        _80 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _81) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_81);
        _100 = discriminant(_80);
        switchInt(move _100) -> [0: bb58, 1: bb59, otherwise: bb7];
    }

    bb58: {
        StorageLive(_104);
        _104 = ((_80 as Continue).0: u64);
        _79 = _104;
        StorageDead(_104);
        StorageDead(_87);
        StorageDead(_83);
        StorageDead(_80);
        StorageLive(_105);
        StorageLive(_106);
        _106 = _9;
        StorageLive(_107);
        _107 = _79;
        _105 = core::num::<impl u64>::saturating_add(move _106, move _107) -> [return: bb61, unwind continue];
    }

    bb59: {
        StorageLive(_101);
        _101 = ((_80 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_103);
        _103 = _101;
        _0 = <std::result::Result<Option<u64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _103) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_103);
        StorageDead(_101);
        goto -> bb74;
    }

    bb61: {
        StorageDead(_107);
        StorageDead(_106);
        _9 = move _105;
        StorageDead(_105);
        _44 = const ();
        StorageDead(_79);
        goto -> bb62;
    }

    bb62: {
        StorageDead(_77);
        goto -> bb63;
    }

    bb63: {
        StorageDead(_45);
        StorageDead(_44);
        _108 = discriminant(((*_1).17: controller::position::PositionDirection));
        switchInt(move _108) -> [0: bb65, 1: bb64, otherwise: bb7];
    }

    bb64: {
        StorageLive(_112);
        StorageLive(_113);
        _113 = _8;
        StorageLive(_114);
        _114 = _9;
        _112 = <u64 as SafeMath>::safe_add(move _113, move _114) -> [return: bb68, unwind continue];
    }

    bb65: {
        StorageLive(_109);
        StorageLive(_110);
        _110 = _8;
        StorageLive(_111);
        _111 = _9;
        _109 = <u64 as SafeMath>::safe_sub(move _110, move _111) -> [return: bb66, unwind continue];
    }

    bb66: {
        StorageDead(_111);
        StorageDead(_110);
        _0 = std::result::Result::<u64, error::ErrorCode>::map::<Option<u64>, fn(u64) -> Option<u64> {Option::<u64>::Some}>(move _109, Option::<u64>::Some) -> [return: bb67, unwind continue];
    }

    bb67: {
        StorageDead(_109);
        goto -> bb70;
    }

    bb68: {
        StorageDead(_114);
        StorageDead(_113);
        _0 = std::result::Result::<u64, error::ErrorCode>::map::<Option<u64>, fn(u64) -> Option<u64> {Option::<u64>::Some}>(move _112, Option::<u64>::Some) -> [return: bb69, unwind continue];
    }

    bb69: {
        StorageDead(_112);
        goto -> bb70;
    }

    bb70: {
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb72;
    }

    bb71: {
        StorageLive(_115);
        _115 = Option::<u64>::None;
        _0 = std::result::Result::<Option<u64>, error::ErrorCode>::Ok(move _115);
        StorageDead(_115);
        goto -> bb72;
    }

    bb72: {
        StorageDead(_5);
        goto -> bb82;
    }

    bb73: {
        StorageDead(_82);
        StorageDead(_81);
        goto -> bb74;
    }

    bb74: {
        StorageDead(_87);
        StorageDead(_83);
        StorageDead(_80);
        StorageDead(_79);
        StorageDead(_77);
        goto -> bb77;
    }

    bb75: {
        StorageDead(_50);
        StorageDead(_49);
        goto -> bb76;
    }

    bb76: {
        StorageDead(_55);
        StorageDead(_51);
        StorageDead(_48);
        StorageDead(_47);
        goto -> bb77;
    }

    bb77: {
        StorageDead(_45);
        StorageDead(_44);
        goto -> bb81;
    }

    bb78: {
        StorageDead(_31);
        goto -> bb80;
    }

    bb79: {
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb80;
    }

    bb80: {
        StorageDead(_17);
        StorageDead(_13);
        StorageDead(_10);
        goto -> bb81;
    }

    bb81: {
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_5);
        goto -> bb82;
    }

    bb82: {
        return;
    }
}
