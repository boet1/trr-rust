// MIR for `instructions::user::handle_resize_signed_msg_user_orders` before PreCodegen

fn instructions::user::handle_resize_signed_msg_user_orders(_1: anchor_lang::context::Context<'_, '_, '_, '_, instructions::user::ResizeSignedMsgUserOrders<'_>>, _2: u16) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug num_orders => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: &mut std::boxed::Box<anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>>;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::user::User>>;
    let mut _6: std::result::Result<std::cell::Ref<'_, state::user::User>, error::ErrorCode>;
    let mut _7: std::result::Result<std::cell::Ref<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _8: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _9: {closure@programs/drift/src/macros.rs:70:40: 70:43};
    let mut _10: isize;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _15: ();
    let mut _16: bool;
    let mut _17: &&anchor_lang::prelude::Pubkey;
    let _18: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _19: &anchor_lang::prelude::Signer<'_>;
    let mut _20: &&anchor_lang::prelude::Pubkey;
    let mut _21: bool;
    let mut _22: &&anchor_lang::prelude::Pubkey;
    let _23: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _24: &anchor_lang::prelude::Signer<'_>;
    let mut _25: &&anchor_lang::prelude::Pubkey;
    let _26: &anchor_lang::prelude::Pubkey;
    let _27: anchor_lang::prelude::Pubkey;
    let mut _28: &anchor_lang::prelude::Pubkey;
    let _29: &state::user::User;
    let mut _30: &std::cell::Ref<'_, state::user::User>;
    let _31: ();
    let mut _32: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _33: std::result::Result<(), error::ErrorCode>;
    let mut _34: bool;
    let mut _35: usize;
    let mut _36: u16;
    let mut _37: usize;
    let mut _38: &std::vec::Vec<state::signed_msg_user::SignedMsgOrderId>;
    let _39: &state::signed_msg_user::SignedMsgUserOrders;
    let mut _40: &anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>;
    let mut _41: ();
    let _43: ();
    let mut _44: &str;
    let _45: &str;
    let mut _46: &std::string::String;
    let _47: &std::string::String;
    let _48: std::string::String;
    let mut _50: std::fmt::Arguments<'_>;
    let mut _51: &[&str];
    let mut _52: &[&str; 2];
    let _53: &[&str; 2];
    let _54: [&str; 2];
    let mut _55: &[core::fmt::rt::Argument<'_>];
    let mut _56: &[core::fmt::rt::Argument<'_>; 1];
    let _57: &[core::fmt::rt::Argument<'_>; 1];
    let _58: [core::fmt::rt::Argument<'_>; 1];
    let mut _59: core::fmt::rt::Argument<'_>;
    let mut _60: &error::ErrorCode;
    let _61: &error::ErrorCode;
    let _62: ();
    let mut _63: &str;
    let _64: &str;
    let mut _65: error::ErrorCode;
    let mut _66: isize;
    let mut _68: !;
    let mut _69: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _71: ();
    let mut _72: &mut std::vec::Vec<state::signed_msg_user::SignedMsgOrderId>;
    let mut _73: &mut state::signed_msg_user::SignedMsgUserOrders;
    let mut _74: &mut anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>;
    let mut _75: usize;
    let mut _76: u16;
    let _77: ();
    let mut _78: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _79: std::result::Result<(), error::ErrorCode>;
    let mut _80: &state::signed_msg_user::SignedMsgUserOrders;
    let _81: &state::signed_msg_user::SignedMsgUserOrders;
    let mut _82: &anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>;
    let mut _83: isize;
    let mut _85: !;
    let mut _86: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _88: ();
    let mut _90: &mut instructions::user::ResizeSignedMsgUserOrders<'_>;
    let mut _91: &mut instructions::user::ResizeSignedMsgUserOrders<'_>;
    let mut _92: &mut instructions::user::ResizeSignedMsgUserOrders<'_>;
    let mut _93: &mut instructions::user::ResizeSignedMsgUserOrders<'_>;
    let mut _94: &mut instructions::user::ResizeSignedMsgUserOrders<'_>;
    let mut _95: std::boxed::Box<anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>>;
    let mut _96: std::boxed::Box<anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>>;
    let mut _97: std::boxed::Box<anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>>;
    let mut _98: isize;
    let mut _99: isize;
    let mut _100: isize;
    let mut _101: isize;
    let mut _102: isize;
    let mut _103: *const anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>;
    let mut _104: *const anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>;
    let mut _105: *const anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>;
    scope 1 {
        debug signed_msg_user_orders => _3;
        let _4: std::cell::Ref<'_, state::user::User>;
        let _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _14: std::cell::Ref<'_, state::user::User>;
        scope 2 {
            debug user => _4;
            let _42: error::ErrorCode;
            let _67: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _70: ();
            let _84: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _87: ();
            scope 7 {
                debug error_code => _42;
                let _49: std::string::String;
                let mut _89: &[&str; 2];
                scope 8 {
                    debug res => _49;
                }
            }
            scope 9 {
                debug residual => _67;
                scope 10 {
                }
            }
            scope 11 {
                debug val => _70;
                scope 12 {
                }
            }
            scope 13 {
                debug residual => _84;
                scope 14 {
                }
            }
            scope 15 {
                debug val => _87;
                scope 16 {
                }
            }
        }
        scope 3 {
            debug residual => _11;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _14;
            scope 6 {
            }
        }
    }

    bb0: {
        StorageLive(_3);
        _90 = deref_copy (_1.1: &mut instructions::user::ResizeSignedMsgUserOrders<'_>);
        _3 = &mut ((*_90).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>>);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _91 = deref_copy (_1.1: &mut instructions::user::ResizeSignedMsgUserOrders<'_>);
        _8 = &((*_91).2: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _7 = anchor_lang::prelude::AccountLoader::<'_, User>::load(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageLive(_9);
        _9 = {closure@programs/drift/src/macros.rs:70:40: 70:43};
        _6 = std::result::Result::<Ref<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:70:40: 70:43}>(move _7, move _9) -> [return: bb2, unwind: bb50];
    }

    bb2: {
        StorageDead(_9);
        StorageDead(_7);
        _5 = <std::result::Result<Ref<'_, User>, error::ErrorCode> as Try>::branch(move _6) -> [return: bb3, unwind: bb50];
    }

    bb3: {
        StorageDead(_6);
        _10 = discriminant(_5);
        switchInt(move _10) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_14);
        _14 = move ((_5 as Continue).0: std::cell::Ref<'_, state::user::User>);
        _4 = move _14;
        StorageDead(_14);
        _100 = discriminant(_5);
        StorageDead(_5);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _92 = deref_copy (_1.1: &mut instructions::user::ResizeSignedMsgUserOrders<'_>);
        _19 = &((*_92).3: anchor_lang::prelude::Signer<'_>);
        _18 = <anchor_lang::prelude::Signer<'_> as Deref>::deref(move _19) -> [return: bb8, unwind: bb49];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_11);
        _11 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_13);
        _13 = _11;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _13) -> [return: bb7, unwind: bb51];
    }

    bb7: {
        StorageDead(_13);
        StorageDead(_11);
        _98 = discriminant(_5);
        StorageDead(_5);
        goto -> bb46;
    }

    bb8: {
        StorageDead(_19);
        _17 = &((*_18).0: &anchor_lang::prelude::Pubkey);
        StorageLive(_20);
        _93 = deref_copy (_1.1: &mut instructions::user::ResizeSignedMsgUserOrders<'_>);
        _20 = &(((*_93).1: anchor_lang::prelude::AccountInfo<'_>).0: &anchor_lang::prelude::Pubkey);
        _16 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _17, move _20) -> [return: bb9, unwind: bb49];
    }

    bb9: {
        switchInt(move _16) -> [0: bb33, otherwise: bb10];
    }

    bb10: {
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_17);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _94 = deref_copy (_1.1: &mut instructions::user::ResizeSignedMsgUserOrders<'_>);
        _24 = &((*_94).3: anchor_lang::prelude::Signer<'_>);
        _23 = <anchor_lang::prelude::Signer<'_> as Deref>::deref(move _24) -> [return: bb11, unwind: bb49];
    }

    bb11: {
        StorageDead(_24);
        _22 = &((*_23).0: &anchor_lang::prelude::Pubkey);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = &_4;
        _29 = <Ref<'_, User> as Deref>::deref(move _30) -> [return: bb12, unwind: bb49];
    }

    bb12: {
        StorageDead(_30);
        _28 = &((*_29).1: anchor_lang::prelude::Pubkey);
        _27 = <anchor_lang::prelude::Pubkey as anchor_lang::Key>::key(move _28) -> [return: bb13, unwind: bb49];
    }

    bb13: {
        StorageDead(_28);
        _26 = &_27;
        _25 = &_26;
        _21 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _22, move _25) -> [return: bb14, unwind: bb49];
    }

    bb14: {
        switchInt(move _21) -> [0: bb32, otherwise: bb15];
    }

    bb15: {
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_22);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = _2;
        _35 = move _36 as usize (IntToInt);
        StorageDead(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _95 = deref_copy (*_3);
        _103 = (((_95.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>>).0: *const anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>);
        _40 = &(*_103);
        _39 = <anchor_lang::prelude::Account<'_, SignedMsgUserOrders> as Deref>::deref(move _40) -> [return: bb16, unwind: bb49];
    }

    bb16: {
        StorageDead(_40);
        _38 = &((*_39).2: std::vec::Vec<state::signed_msg_user::SignedMsgOrderId>);
        _37 = Vec::<SignedMsgOrderId>::len(move _38) -> [return: bb17, unwind: bb49];
    }

    bb17: {
        StorageDead(_38);
        _34 = Ge(move _35, move _37);
        switchInt(move _34) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_35);
        StorageLive(_41);
        _41 = ();
        _33 = std::result::Result::<(), error::ErrorCode>::Ok(move _41);
        StorageDead(_41);
        goto -> bb27;
    }

    bb19: {
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_35);
        StorageLive(_42);
        _42 = error::ErrorCode::InvalidSignedMsgUserOrdersResize;
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _89 = const _;
        _53 = &(*_89);
        _52 = &(*_53);
        _51 = move _52 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_52);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = &_42;
        _60 = &(*_61);
        _59 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _60) -> [return: bb20, unwind: bb49];
    }

    bb20: {
        StorageDead(_60);
        _58 = [move _59];
        StorageDead(_59);
        _57 = &_58;
        _56 = &(*_57);
        _55 = move _56 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_56);
        _50 = Arguments::<'_>::new_v1(move _51, move _55) -> [return: bb21, unwind: bb49];
    }

    bb21: {
        StorageDead(_55);
        StorageDead(_51);
        _49 = format(move _50) -> [return: bb22, unwind: bb49];
    }

    bb22: {
        StorageDead(_50);
        StorageDead(_61);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_53);
        _48 = move _49;
        StorageDead(_49);
        _47 = &_48;
        _46 = &(*_47);
        _45 = <String as Deref>::deref(move _46) -> [return: bb23, unwind: bb48];
    }

    bb23: {
        _44 = &(*_45);
        StorageDead(_46);
        _43 = solana_program::log::sol_log(move _44) -> [return: bb24, unwind: bb48];
    }

    bb24: {
        StorageDead(_44);
        drop(_48) -> [return: bb25, unwind: bb49];
    }

    bb25: {
        StorageDead(_48);
        StorageDead(_47);
        StorageDead(_45);
        StorageDead(_43);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = const "Invalid shrinking resize for payer != user authority or delegate";
        _63 = &(*_64);
        _62 = solana_program::log::sol_log(move _63) -> [return: bb26, unwind: bb49];
    }

    bb26: {
        StorageDead(_63);
        StorageDead(_64);
        StorageDead(_62);
        StorageLive(_65);
        _65 = _42;
        _33 = std::result::Result::<(), error::ErrorCode>::Err(move _65);
        StorageDead(_65);
        StorageDead(_42);
        goto -> bb27;
    }

    bb27: {
        StorageDead(_34);
        _32 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _33) -> [return: bb28, unwind: bb49];
    }

    bb28: {
        StorageDead(_33);
        _66 = discriminant(_32);
        switchInt(move _66) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_70);
        _70 = ((_32 as Continue).0: ());
        _31 = _70;
        StorageDead(_70);
        StorageDead(_32);
        StorageDead(_31);
        _15 = const ();
        goto -> bb35;
    }

    bb30: {
        StorageLive(_67);
        _67 = ((_32 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_69);
        _69 = _67;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _69) -> [return: bb31, unwind: bb49];
    }

    bb31: {
        StorageDead(_69);
        StorageDead(_67);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_21);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb45;
    }

    bb32: {
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb34;
    }

    bb33: {
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_17);
        goto -> bb34;
    }

    bb34: {
        _15 = const ();
        goto -> bb35;
    }

    bb35: {
        StorageDead(_21);
        StorageDead(_16);
        StorageDead(_15);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _96 = deref_copy (*_3);
        _104 = (((_96.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>>).0: *const anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>);
        _74 = &mut (*_104);
        _73 = <anchor_lang::prelude::Account<'_, SignedMsgUserOrders> as DerefMut>::deref_mut(move _74) -> [return: bb36, unwind: bb49];
    }

    bb36: {
        StorageDead(_74);
        _72 = &mut ((*_73).2: std::vec::Vec<state::signed_msg_user::SignedMsgOrderId>);
        StorageLive(_75);
        StorageLive(_76);
        _76 = _2;
        _75 = move _76 as usize (IntToInt);
        StorageDead(_76);
        _71 = Vec::<SignedMsgOrderId>::resize_with::<fn() -> SignedMsgOrderId {<SignedMsgOrderId as Default>::default}>(move _72, move _75, <SignedMsgOrderId as Default>::default) -> [return: bb37, unwind: bb49];
    }

    bb37: {
        StorageDead(_75);
        StorageDead(_72);
        StorageDead(_73);
        StorageDead(_71);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _97 = deref_copy (*_3);
        _105 = (((_97.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>>).0: *const anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>);
        _82 = &(*_105);
        _81 = <anchor_lang::prelude::Account<'_, SignedMsgUserOrders> as Deref>::deref(move _82) -> [return: bb38, unwind: bb49];
    }

    bb38: {
        _80 = &(*_81);
        StorageDead(_82);
        _79 = SignedMsgUserOrders::validate(move _80) -> [return: bb39, unwind: bb49];
    }

    bb39: {
        StorageDead(_80);
        _78 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _79) -> [return: bb40, unwind: bb49];
    }

    bb40: {
        StorageDead(_79);
        _83 = discriminant(_78);
        switchInt(move _83) -> [0: bb41, 1: bb42, otherwise: bb5];
    }

    bb41: {
        StorageLive(_87);
        _87 = ((_78 as Continue).0: ());
        _77 = _87;
        StorageDead(_87);
        StorageDead(_81);
        StorageDead(_78);
        StorageDead(_77);
        StorageLive(_88);
        _88 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _88);
        StorageDead(_88);
        drop(_4) -> [return: bb44, unwind: bb50];
    }

    bb42: {
        StorageLive(_84);
        _84 = ((_78 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_86);
        _86 = _84;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _86) -> [return: bb43, unwind: bb49];
    }

    bb43: {
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_81);
        StorageDead(_78);
        StorageDead(_77);
        goto -> bb45;
    }

    bb44: {
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb47;
    }

    bb45: {
        drop(_4) -> [return: bb46, unwind: bb50];
    }

    bb46: {
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb47;
    }

    bb47: {
        return;
    }

    bb48 (cleanup): {
        drop(_48) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop(_4) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        resume;
    }

    bb51 (cleanup): {
        _102 = discriminant(_5);
        goto -> bb50;
    }
}
