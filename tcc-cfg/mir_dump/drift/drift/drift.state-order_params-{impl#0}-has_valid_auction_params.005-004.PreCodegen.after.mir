// MIR for `order_params::<impl at programs/drift/src/state/order_params.rs:47:1: 47:17>::has_valid_auction_params` after PreCodegen

fn order_params::<impl at programs/drift/src/state/order_params.rs:47:1: 47:17>::has_valid_auction_params(_1: &order_params::OrderParams) -> std::result::Result<bool, error::ErrorCode> {
    debug self => _1;
    let mut _0: std::result::Result<bool, error::ErrorCode>;
    let mut _2: bool;
    let mut _3: &std::option::Option<u8>;
    let mut _4: bool;
    let mut _5: &std::option::Option<i64>;
    let mut _6: bool;
    let mut _7: &std::option::Option<i64>;
    let mut _8: bool;
    let mut _9: &controller::position::PositionDirection;
    let mut _10: &controller::position::PositionDirection;
    let _11: controller::position::PositionDirection;
    let mut _12: !;
    let mut _13: bool;
    let mut _14: i64;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _16: std::result::Result<i64, error::ErrorCode>;
    let mut _17: std::option::Option<i64>;
    let mut _18: isize;
    let _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _20: !;
    let mut _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _22: i64;
    let mut _23: i64;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _25: std::result::Result<i64, error::ErrorCode>;
    let mut _26: std::option::Option<i64>;
    let mut _27: isize;
    let _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _29: !;
    let mut _30: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _31: i64;
    let mut _32: !;
    let mut _33: bool;
    let mut _34: i64;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _36: std::result::Result<i64, error::ErrorCode>;
    let mut _37: std::option::Option<i64>;
    let mut _38: isize;
    let _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _40: !;
    let mut _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _42: i64;
    let mut _43: i64;
    let mut _44: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _45: std::result::Result<i64, error::ErrorCode>;
    let mut _46: std::option::Option<i64>;
    let mut _47: isize;
    let _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _49: !;
    let mut _50: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _51: i64;
    let mut _52: bool;
    let mut _53: &state::user::OrderType;
    let mut _54: &state::user::OrderType;
    let _55: state::user::OrderType;
    let mut _56: bool;
    let mut _57: &std::option::Option<u8>;
    let mut _58: bool;
    let mut _59: &std::option::Option<i64>;
    let mut _60: bool;
    let mut _61: &std::option::Option<i64>;
    let mut _62: !;
    let mut _63: !;
    let mut _64: &controller::position::PositionDirection;
    let mut _65: &state::user::OrderType;
    scope 1 {
        debug residual => _19;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _22;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _28;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _31;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _39;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _42;
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _48;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _51;
        scope 16 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = &((*_1).14: std::option::Option<u8>);
        _2 = Option::<u8>::is_some(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _2) -> [0: bb33, otherwise: bb2];
    }

    bb2: {
        StorageDead(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &((*_1).15: std::option::Option<i64>);
        _4 = Option::<i64>::is_some(move _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        switchInt(move _4) -> [0: bb32, otherwise: bb4];
    }

    bb4: {
        StorageDead(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &((*_1).16: std::option::Option<i64>);
        _6 = Option::<i64>::is_some(move _7) -> [return: bb5, unwind continue];
    }

    bb5: {
        switchInt(move _6) -> [0: bb31, otherwise: bb6];
    }

    bb6: {
        StorageDead(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &((*_1).2: controller::position::PositionDirection);
        StorageLive(_10);
        _64 = const _;
        _10 = &(*_64);
        _8 = <controller::position::PositionDirection as PartialEq>::eq(move _9, move _10) -> [return: bb7, unwind continue];
    }

    bb7: {
        switchInt(move _8) -> [0: bb20, otherwise: bb8];
    }

    bb8: {
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = ((*_1).15: std::option::Option<i64>);
        _16 = <Option<i64> as SafeUnwrap>::safe_unwrap(move _17) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_17);
        _15 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _16) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_16);
        _18 = discriminant(_15);
        switchInt(move _18) -> [0: bb11, 1: bb13, otherwise: bb12];
    }

    bb11: {
        StorageLive(_22);
        _22 = ((_15 as Continue).0: i64);
        _14 = _22;
        StorageDead(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = ((*_1).16: std::option::Option<i64>);
        _25 = <Option<i64> as SafeUnwrap>::safe_unwrap(move _26) -> [return: bb15, unwind continue];
    }

    bb12: {
        unreachable;
    }

    bb13: {
        StorageLive(_19);
        _19 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_21);
        _21 = _19;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _21) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb52;
    }

    bb15: {
        StorageDead(_26);
        _24 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _25) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_25);
        _27 = discriminant(_24);
        switchInt(move _27) -> [0: bb17, 1: bb18, otherwise: bb12];
    }

    bb17: {
        StorageLive(_31);
        _31 = ((_24 as Continue).0: i64);
        _23 = _31;
        StorageDead(_31);
        _13 = Le(move _14, move _23);
        StorageDead(_23);
        StorageDead(_14);
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(move _13);
        StorageDead(_13);
        goto -> bb51;
    }

    bb18: {
        StorageLive(_28);
        _28 = ((_24 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_30);
        _30 = _28;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _30) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_30);
        StorageDead(_28);
        StorageDead(_23);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb51;
    }

    bb20: {
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = ((*_1).15: std::option::Option<i64>);
        _36 = <Option<i64> as SafeUnwrap>::safe_unwrap(move _37) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_37);
        _35 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _36) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_36);
        _38 = discriminant(_35);
        switchInt(move _38) -> [0: bb23, 1: bb24, otherwise: bb12];
    }

    bb23: {
        StorageLive(_42);
        _42 = ((_35 as Continue).0: i64);
        _34 = _42;
        StorageDead(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = ((*_1).16: std::option::Option<i64>);
        _45 = <Option<i64> as SafeUnwrap>::safe_unwrap(move _46) -> [return: bb26, unwind continue];
    }

    bb24: {
        StorageLive(_39);
        _39 = ((_35 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_41);
        _41 = _39;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _41) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_41);
        StorageDead(_39);
        StorageDead(_34);
        StorageDead(_33);
        goto -> bb50;
    }

    bb26: {
        StorageDead(_46);
        _44 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _45) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_45);
        _47 = discriminant(_44);
        switchInt(move _47) -> [0: bb28, 1: bb29, otherwise: bb12];
    }

    bb28: {
        StorageLive(_51);
        _51 = ((_44 as Continue).0: i64);
        _43 = _51;
        StorageDead(_51);
        _33 = Ge(move _34, move _43);
        StorageDead(_43);
        StorageDead(_34);
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(move _33);
        StorageDead(_33);
        goto -> bb49;
    }

    bb29: {
        StorageLive(_48);
        _48 = ((_44 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_50);
        _50 = _48;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _50) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_50);
        StorageDead(_48);
        StorageDead(_43);
        StorageDead(_34);
        StorageDead(_33);
        goto -> bb49;
    }

    bb31: {
        StorageDead(_7);
        goto -> bb34;
    }

    bb32: {
        StorageDead(_5);
        goto -> bb34;
    }

    bb33: {
        StorageDead(_3);
        goto -> bb34;
    }

    bb34: {
        StorageLive(_52);
        StorageLive(_53);
        _53 = &((*_1).0: state::user::OrderType);
        StorageLive(_54);
        _65 = const _;
        _54 = &(*_65);
        _52 = <state::user::OrderType as PartialEq>::eq(move _53, move _54) -> [return: bb35, unwind continue];
    }

    bb35: {
        switchInt(move _52) -> [0: bb46, otherwise: bb36];
    }

    bb36: {
        StorageDead(_54);
        StorageDead(_53);
        StorageLive(_56);
        StorageLive(_57);
        _57 = &((*_1).14: std::option::Option<u8>);
        _56 = Option::<u8>::is_none(move _57) -> [return: bb37, unwind continue];
    }

    bb37: {
        switchInt(move _56) -> [0: bb45, otherwise: bb38];
    }

    bb38: {
        StorageDead(_57);
        StorageLive(_58);
        StorageLive(_59);
        _59 = &((*_1).15: std::option::Option<i64>);
        _58 = Option::<i64>::is_none(move _59) -> [return: bb39, unwind continue];
    }

    bb39: {
        switchInt(move _58) -> [0: bb44, otherwise: bb40];
    }

    bb40: {
        StorageDead(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = &((*_1).16: std::option::Option<i64>);
        _60 = Option::<i64>::is_none(move _61) -> [return: bb41, unwind continue];
    }

    bb41: {
        switchInt(move _60) -> [0: bb43, otherwise: bb42];
    }

    bb42: {
        StorageDead(_61);
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(const true);
        goto -> bb48;
    }

    bb43: {
        StorageDead(_61);
        goto -> bb47;
    }

    bb44: {
        StorageDead(_59);
        goto -> bb47;
    }

    bb45: {
        StorageDead(_57);
        goto -> bb47;
    }

    bb46: {
        StorageDead(_54);
        StorageDead(_53);
        goto -> bb47;
    }

    bb47: {
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(const false);
        goto -> bb48;
    }

    bb48: {
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_52);
        goto -> bb54;
    }

    bb49: {
        StorageDead(_44);
        goto -> bb50;
    }

    bb50: {
        StorageDead(_35);
        goto -> bb53;
    }

    bb51: {
        StorageDead(_24);
        goto -> bb52;
    }

    bb52: {
        StorageDead(_15);
        goto -> bb53;
    }

    bb53: {
        StorageDead(_8);
        goto -> bb54;
    }

    bb54: {
        StorageDead(_6);
        StorageDead(_4);
        StorageDead(_2);
        return;
    }
}
