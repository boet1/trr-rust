// MIR for `margin_calculation::<impl at programs/drift/src/state/margin_calculation.rs:62:1: 62:19>::standard` before PreCodegen

fn margin_calculation::<impl at programs/drift/src/state/margin_calculation.rs:62:1: 62:19>::standard(_1: math::margin::MarginRequirementType) -> MarginContext {
    debug margin_type => _1;
    let mut _0: state::margin_calculation::MarginContext;
    let mut _2: math::margin::MarginRequirementType;
    let mut _3: state::margin_calculation::MarginCalculationMode;
    let mut _4: std::option::Option<(u16, i64)>;
    let mut _5: [(u16, i128); 2];
    let mut _6: (u16, i128);
    let mut _7: std::option::Option<u32>;

    bb0: {
        StorageLive(_2);
        _2 = _1;
        StorageLive(_3);
        _3 = MarginCalculationMode::Standard { track_open_orders_fraction: const false };
        StorageLive(_4);
        _4 = Option::<(u16, i64)>::None;
        StorageLive(_5);
        StorageLive(_6);
        _6 = (const 0_u16, const 0_i128);
        _5 = [move _6; 2];
        StorageDead(_6);
        StorageLive(_7);
        _7 = Option::<u32>::None;
        _0 = MarginContext { margin_type: move _2, mode: move _3, strict: const false, ignore_invalid_deposit_oracles: const false, margin_buffer: const 0_u128, fuel_bonus_numerator: const 0_i64, fuel_bonus: const 0_u64, fuel_perp_delta: move _4, fuel_spot_deltas: move _5, margin_ratio_override: move _7 };
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        return;
    }
}
