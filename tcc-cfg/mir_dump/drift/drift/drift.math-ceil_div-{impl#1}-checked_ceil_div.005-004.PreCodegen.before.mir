// MIR for `ceil_div::<impl at programs/drift/src/math/ceil_div.rs:11:9: 11:35>::checked_ceil_div` before PreCodegen

fn ceil_div::<impl at programs/drift/src/math/ceil_div.rs:11:9: 11:35>::checked_ceil_div(_1: &U192, _2: U192) -> Option<U192> {
    debug self => _1;
    debug rhs => _2;
    let mut _0: std::option::Option<math::bn::U192>;
    let _3: math::bn::U192;
    let mut _4: std::ops::ControlFlow<std::option::Option<std::convert::Infallible>, math::bn::U192>;
    let mut _5: std::option::Option<math::bn::U192>;
    let mut _6: math::bn::U192;
    let mut _7: math::bn::U192;
    let mut _8: isize;
    let _9: std::option::Option<std::convert::Infallible>;
    let mut _10: !;
    let mut _11: std::option::Option<std::convert::Infallible>;
    let _12: math::bn::U192;
    let mut _14: std::ops::ControlFlow<std::option::Option<std::convert::Infallible>, math::bn::U192>;
    let mut _15: std::option::Option<math::bn::U192>;
    let mut _16: math::bn::U192;
    let mut _17: math::bn::U192;
    let mut _18: isize;
    let mut _20: !;
    let mut _21: std::option::Option<std::convert::Infallible>;
    let mut _23: bool;
    let mut _24: &math::bn::U192;
    let mut _25: &math::bn::U192;
    let _26: math::bn::U192;
    let mut _27: math::bn::U192;
    let mut _28: math::bn::U192;
    let mut _29: math::bn::U192;
    scope 1 {
        debug quotient => _3;
        let _13: math::bn::U192;
        let _19: std::option::Option<std::convert::Infallible>;
        let _22: math::bn::U192;
        scope 6 {
            debug remainder => _13;
        }
        scope 7 {
            debug residual => _19;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _22;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _9;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _12;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = (*_1);
        StorageLive(_7);
        _7 = _2;
        _5 = U192::checked_div(move _6, move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        StorageDead(_6);
        _4 = <Option<U192> as Try>::branch(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_5);
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_4 as Continue).0: math::bn::U192);
        _3 = _12;
        StorageDead(_12);
        StorageDead(_4);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = (*_1);
        StorageLive(_17);
        _17 = _2;
        _15 = U192::checked_rem(move _16, move _17) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = ((_4 as Break).0: std::option::Option<std::convert::Infallible>);
        StorageLive(_11);
        _11 = _9;
        _0 = <Option<U192> as FromResidual<Option<Infallible>>>::from_residual(move _11) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_4);
        goto -> bb19;
    }

    bb7: {
        StorageDead(_17);
        StorageDead(_16);
        _14 = <Option<U192> as Try>::branch(move _15) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_15);
        _18 = discriminant(_14);
        switchInt(move _18) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_22);
        _22 = ((_14 as Continue).0: math::bn::U192);
        _13 = _22;
        StorageDead(_22);
        StorageDead(_14);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &_13;
        StorageLive(_25);
        StorageLive(_26);
        _26 = U192::zero() -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_19);
        _19 = ((_14 as Break).0: std::option::Option<std::convert::Infallible>);
        StorageLive(_21);
        _21 = _19;
        _0 = <Option<U192> as FromResidual<Option<Infallible>>>::from_residual(move _21) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb19;
    }

    bb12: {
        _25 = &_26;
        _23 = <U192 as PartialOrd>::gt(move _24, move _25) -> [return: bb13, unwind continue];
    }

    bb13: {
        switchInt(move _23) -> [0: bb17, otherwise: bb14];
    }

    bb14: {
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageLive(_27);
        _27 = _3;
        StorageLive(_28);
        _28 = U192::one() -> [return: bb15, unwind continue];
    }

    bb15: {
        _0 = U192::checked_add(move _27, move _28) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_28);
        StorageDead(_27);
        goto -> bb18;
    }

    bb17: {
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageLive(_29);
        _29 = _3;
        _0 = Option::<U192>::Some(move _29);
        StorageDead(_29);
        goto -> bb18;
    }

    bb18: {
        StorageDead(_23);
        StorageDead(_13);
        StorageDead(_3);
        goto -> bb20;
    }

    bb19: {
        StorageDead(_3);
        goto -> bb20;
    }

    bb20: {
        return;
    }
}
