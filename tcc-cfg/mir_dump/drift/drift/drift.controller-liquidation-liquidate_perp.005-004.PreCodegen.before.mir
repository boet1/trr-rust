// MIR for `controller::liquidation::liquidate_perp` before PreCodegen

fn controller::liquidation::liquidate_perp(_1: u16, _2: u64, _3: Option<u64>, _4: &mut User, _5: &anchor_lang::prelude::Pubkey, _6: &mut UserStats, _7: &mut User, _8: &anchor_lang::prelude::Pubkey, _9: &mut UserStats, _10: &PerpMarketMap<'_>, _11: &SpotMarketMap<'_>, _12: &mut OracleMap<'_>, _13: u64, _14: i64, _15: &state::state::State) -> std::result::Result<(), error::ErrorCode> {
    debug market_index => _1;
    debug liquidator_max_base_asset_amount => _2;
    debug limit_price => _3;
    debug user => _4;
    debug user_key => _5;
    debug user_stats => _6;
    debug liquidator => _7;
    debug liquidator_key => _8;
    debug liquidator_stats => _9;
    debug perp_market_map => _10;
    debug spot_market_map => _11;
    debug oracle_map => _12;
    debug slot => _13;
    debug now => _14;
    debug state => _15;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _16: u32;
    let mut _18: u16;
    let mut _20: u8;
    let _21: ();
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _23: std::result::Result<(), error::ErrorCode>;
    let mut _24: bool;
    let mut _25: &state::user::User;
    let mut _26: ();
    let _28: ();
    let mut _29: &str;
    let _30: &str;
    let mut _31: &std::string::String;
    let _32: &std::string::String;
    let _33: std::string::String;
    let mut _35: std::fmt::Arguments<'_>;
    let mut _36: &[&str];
    let mut _37: &[&str; 2];
    let _38: &[&str; 2];
    let _39: [&str; 2];
    let mut _40: &[core::fmt::rt::Argument<'_>];
    let mut _41: &[core::fmt::rt::Argument<'_>; 1];
    let _42: &[core::fmt::rt::Argument<'_>; 1];
    let _43: [core::fmt::rt::Argument<'_>; 1];
    let mut _44: core::fmt::rt::Argument<'_>;
    let mut _45: &error::ErrorCode;
    let _46: &error::ErrorCode;
    let _47: ();
    let mut _48: &str;
    let _49: &str;
    let mut _50: &std::string::String;
    let _51: &std::string::String;
    let _52: std::string::String;
    let mut _54: std::fmt::Arguments<'_>;
    let mut _55: &[&str];
    let mut _56: &[&str; 1];
    let _57: &[&str; 1];
    let _58: [&str; 1];
    let mut _59: error::ErrorCode;
    let mut _60: isize;
    let mut _62: !;
    let mut _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _65: ();
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _67: std::result::Result<(), error::ErrorCode>;
    let mut _68: bool;
    let mut _69: &state::user::User;
    let mut _70: ();
    let _72: ();
    let mut _73: &str;
    let _74: &str;
    let mut _75: &std::string::String;
    let _76: &std::string::String;
    let _77: std::string::String;
    let mut _79: std::fmt::Arguments<'_>;
    let mut _80: &[&str];
    let mut _81: &[&str; 2];
    let _82: &[&str; 2];
    let _83: [&str; 2];
    let mut _84: &[core::fmt::rt::Argument<'_>];
    let mut _85: &[core::fmt::rt::Argument<'_>; 1];
    let _86: &[core::fmt::rt::Argument<'_>; 1];
    let _87: [core::fmt::rt::Argument<'_>; 1];
    let mut _88: core::fmt::rt::Argument<'_>;
    let mut _89: &error::ErrorCode;
    let _90: &error::ErrorCode;
    let _91: ();
    let mut _92: &str;
    let _93: &str;
    let mut _94: &std::string::String;
    let _95: &std::string::String;
    let _96: std::string::String;
    let mut _98: std::fmt::Arguments<'_>;
    let mut _99: &[&str];
    let mut _100: &[&str; 1];
    let _101: &[&str; 1];
    let _102: [&str; 1];
    let mut _103: error::ErrorCode;
    let mut _104: isize;
    let mut _106: !;
    let mut _107: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _109: ();
    let mut _110: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _111: std::result::Result<(), error::ErrorCode>;
    let mut _112: bool;
    let mut _113: u8;
    let mut _114: ();
    let _116: ();
    let mut _117: &str;
    let _118: &str;
    let mut _119: &std::string::String;
    let _120: &std::string::String;
    let _121: std::string::String;
    let mut _123: std::fmt::Arguments<'_>;
    let mut _124: &[&str];
    let mut _125: &[&str; 2];
    let _126: &[&str; 2];
    let _127: [&str; 2];
    let mut _128: &[core::fmt::rt::Argument<'_>];
    let mut _129: &[core::fmt::rt::Argument<'_>; 1];
    let _130: &[core::fmt::rt::Argument<'_>; 1];
    let _131: [core::fmt::rt::Argument<'_>; 1];
    let mut _132: core::fmt::rt::Argument<'_>;
    let mut _133: &error::ErrorCode;
    let _134: &error::ErrorCode;
    let _135: ();
    let mut _136: &str;
    let _137: &str;
    let mut _138: &std::string::String;
    let _139: &std::string::String;
    let _140: std::string::String;
    let mut _142: std::fmt::Arguments<'_>;
    let mut _143: &[&str];
    let mut _144: &[&str; 2];
    let _145: &[&str; 2];
    let _146: [&str; 2];
    let mut _147: &[core::fmt::rt::Argument<'_>];
    let mut _148: &[core::fmt::rt::Argument<'_>; 1];
    let _149: &[core::fmt::rt::Argument<'_>; 1];
    let _150: [core::fmt::rt::Argument<'_>; 1];
    let mut _151: core::fmt::rt::Argument<'_>;
    let mut _152: &u8;
    let _153: &u8;
    let mut _154: error::ErrorCode;
    let mut _155: isize;
    let mut _157: !;
    let mut _158: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _161: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::perp_market::PerpMarket>>;
    let mut _162: std::result::Result<std::cell::Ref<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _163: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _164: &u16;
    let _165: &u16;
    let mut _166: isize;
    let mut _168: !;
    let mut _169: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _171: ();
    let mut _172: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _173: std::result::Result<(), error::ErrorCode>;
    let mut _174: bool;
    let mut _175: &state::perp_market::PerpMarket;
    let _176: &state::perp_market::PerpMarket;
    let mut _177: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _178: state::paused_operations::PerpOperation;
    let mut _179: ();
    let _181: ();
    let mut _182: &str;
    let _183: &str;
    let mut _184: &std::string::String;
    let _185: &std::string::String;
    let _186: std::string::String;
    let mut _188: std::fmt::Arguments<'_>;
    let mut _189: &[&str];
    let mut _190: &[&str; 2];
    let _191: &[&str; 2];
    let _192: [&str; 2];
    let mut _193: &[core::fmt::rt::Argument<'_>];
    let mut _194: &[core::fmt::rt::Argument<'_>; 1];
    let _195: &[core::fmt::rt::Argument<'_>; 1];
    let _196: [core::fmt::rt::Argument<'_>; 1];
    let mut _197: core::fmt::rt::Argument<'_>;
    let mut _198: &error::ErrorCode;
    let _199: &error::ErrorCode;
    let _200: ();
    let mut _201: &str;
    let _202: &str;
    let mut _203: &std::string::String;
    let _204: &std::string::String;
    let _205: std::string::String;
    let mut _207: std::fmt::Arguments<'_>;
    let mut _208: &[&str];
    let mut _209: &[&str; 1];
    let _210: &[&str; 1];
    let _211: [&str; 1];
    let mut _212: &[core::fmt::rt::Argument<'_>];
    let mut _213: &[core::fmt::rt::Argument<'_>; 1];
    let _214: &[core::fmt::rt::Argument<'_>; 1];
    let _215: [core::fmt::rt::Argument<'_>; 1];
    let mut _216: core::fmt::rt::Argument<'_>;
    let mut _217: &u16;
    let _218: &u16;
    let mut _219: error::ErrorCode;
    let mut _220: isize;
    let mut _222: !;
    let mut _223: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _225: ();
    let mut _226: std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let _227: ();
    let mut _228: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _229: std::result::Result<(), error::ErrorCode>;
    let mut _230: &mut state::user::User;
    let mut _231: &anchor_lang::prelude::Pubkey;
    let mut _232: &mut state::perp_market::PerpMarket;
    let mut _233: &mut state::perp_market::PerpMarket;
    let mut _234: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _235: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _236: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _237: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _238: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _239: &u16;
    let _240: &u16;
    let mut _241: isize;
    let mut _243: !;
    let mut _244: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _246: i64;
    let mut _247: isize;
    let mut _249: !;
    let mut _250: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _252: ();
    let mut _253: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _254: std::result::Result<(), error::ErrorCode>;
    let mut _255: &mut state::user::User;
    let mut _256: &anchor_lang::prelude::Pubkey;
    let mut _257: &mut state::perp_market::PerpMarket;
    let mut _258: &mut state::perp_market::PerpMarket;
    let mut _259: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _260: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _261: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _262: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _263: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _264: &u16;
    let _265: &u16;
    let mut _266: isize;
    let mut _268: !;
    let mut _269: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _271: i64;
    let mut _272: isize;
    let mut _274: !;
    let mut _275: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _278: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::margin_calculation::MarginCalculation>;
    let mut _279: std::result::Result<state::margin_calculation::MarginCalculation, error::ErrorCode>;
    let mut _280: &state::user::User;
    let mut _281: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _282: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _283: &mut state::oracle_map::OracleMap<'_>;
    let mut _284: state::margin_calculation::MarginContext;
    let mut _285: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::margin_calculation::MarginContext>;
    let mut _286: std::result::Result<state::margin_calculation::MarginContext, error::ErrorCode>;
    let mut _287: state::margin_calculation::MarginContext;
    let mut _288: u32;
    let mut _289: state::margin_calculation::MarketIdentifier;
    let mut _290: u16;
    let mut _291: isize;
    let mut _293: !;
    let mut _294: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _296: isize;
    let mut _298: !;
    let mut _299: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _301: ();
    let mut _302: bool;
    let mut _303: &state::user::User;
    let mut _304: bool;
    let mut _305: &state::margin_calculation::MarginCalculation;
    let mut _306: !;
    let _307: ();
    let mut _308: &str;
    let _309: &str;
    let mut _310: &std::string::String;
    let _311: &std::string::String;
    let _312: std::string::String;
    let mut _314: std::fmt::Arguments<'_>;
    let mut _315: &[&str];
    let mut _316: &[&str; 1];
    let _317: &[&str; 1];
    let _318: [&str; 1];
    let mut _319: &[core::fmt::rt::Argument<'_>];
    let mut _320: &[core::fmt::rt::Argument<'_>; 1];
    let _321: &[core::fmt::rt::Argument<'_>; 1];
    let _322: [core::fmt::rt::Argument<'_>; 1];
    let mut _323: core::fmt::rt::Argument<'_>;
    let mut _324: &state::margin_calculation::MarginCalculation;
    let _325: &state::margin_calculation::MarginCalculation;
    let mut _326: error::ErrorCode;
    let mut _327: bool;
    let mut _328: &state::user::User;
    let mut _329: bool;
    let mut _330: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _331: std::result::Result<bool, error::ErrorCode>;
    let mut _332: &state::margin_calculation::MarginCalculation;
    let mut _333: isize;
    let mut _335: !;
    let mut _336: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _338: !;
    let _339: ();
    let mut _340: &mut state::user::User;
    let mut _341: ();
    let _342: &state::user::PerpPosition;
    let mut _343: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::user::PerpPosition>;
    let mut _344: std::result::Result<&state::user::PerpPosition, error::ErrorCode>;
    let mut _345: std::result::Result<&state::user::PerpPosition, error::ErrorCode>;
    let mut _346: &state::user::User;
    let mut _347: u16;
    let mut _348: {closure@programs/drift/src/controller/liquidation.rs:159:50: 159:53};
    let mut _349: &u16;
    let mut _350: isize;
    let mut _352: !;
    let mut _353: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _355: &mut state::user::PerpPosition;
    let mut _356: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &mut state::user::PerpPosition>;
    let mut _357: std::result::Result<&mut state::user::PerpPosition, error::ErrorCode>;
    let mut _358: std::result::Result<&mut state::user::PerpPosition, error::ErrorCode>;
    let mut _359: &mut state::user::User;
    let mut _360: u16;
    let mut _361: {closure@programs/drift/src/controller/liquidation.rs:169:18: 169:21};
    let mut _362: &u16;
    let mut _363: isize;
    let mut _365: !;
    let mut _366: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _369: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u16>;
    let mut _370: std::result::Result<u16, error::ErrorCode>;
    let mut _371: &mut state::user::User;
    let mut _372: u64;
    let mut _373: isize;
    let mut _375: !;
    let mut _376: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _380: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, usize>;
    let mut _381: std::result::Result<usize, error::ErrorCode>;
    let mut _382: &[state::user::PerpPosition; 8];
    let _383: &[state::user::PerpPosition; 8];
    let mut _384: u16;
    let mut _385: isize;
    let mut _387: !;
    let mut _388: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _390: ();
    let mut _391: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _392: std::result::Result<(), error::ErrorCode>;
    let mut _393: bool;
    let mut _394: &state::user::PerpPosition;
    let _395: usize;
    let mut _396: usize;
    let mut _397: bool;
    let mut _398: bool;
    let mut _399: &state::user::PerpPosition;
    let _400: usize;
    let mut _401: usize;
    let mut _402: bool;
    let mut _403: ();
    let _405: ();
    let mut _406: &str;
    let _407: &str;
    let mut _408: &std::string::String;
    let _409: &std::string::String;
    let _410: std::string::String;
    let mut _412: std::fmt::Arguments<'_>;
    let mut _413: &[&str];
    let mut _414: &[&str; 2];
    let _415: &[&str; 2];
    let _416: [&str; 2];
    let mut _417: &[core::fmt::rt::Argument<'_>];
    let mut _418: &[core::fmt::rt::Argument<'_>; 1];
    let _419: &[core::fmt::rt::Argument<'_>; 1];
    let _420: [core::fmt::rt::Argument<'_>; 1];
    let mut _421: core::fmt::rt::Argument<'_>;
    let mut _422: &error::ErrorCode;
    let _423: &error::ErrorCode;
    let mut _424: error::ErrorCode;
    let mut _425: isize;
    let mut _427: !;
    let mut _428: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _431: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::vec::Vec<u32>>;
    let mut _432: std::result::Result<std::vec::Vec<u32>, error::ErrorCode>;
    let mut _433: &mut state::user::User;
    let mut _434: &anchor_lang::prelude::Pubkey;
    let mut _435: std::option::Option<&anchor_lang::prelude::Pubkey>;
    let mut _436: &anchor_lang::prelude::Pubkey;
    let mut _437: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _438: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _439: &mut state::oracle_map::OracleMap<'_>;
    let mut _440: i64;
    let mut _441: u64;
    let mut _442: state::events::OrderActionExplanation;
    let mut _443: std::option::Option<state::user::MarketType>;
    let mut _444: std::option::Option<u16>;
    let mut _445: std::option::Option<controller::position::PositionDirection>;
    let mut _446: isize;
    let mut _448: !;
    let mut _449: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _452: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _453: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _454: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _455: &u16;
    let _456: &u16;
    let mut _457: isize;
    let mut _459: !;
    let mut _460: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _463: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _464: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _465: &mut state::oracle_map::OracleMap<'_>;
    let mut _466: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _467: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _468: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _469: &state::perp_market::PerpMarket;
    let _470: &state::perp_market::PerpMarket;
    let mut _471: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _472: isize;
    let mut _474: !;
    let mut _475: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _478: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::oracle::MMOraclePriceData>;
    let mut _479: std::result::Result<state::oracle::MMOraclePriceData, error::ErrorCode>;
    let mut _480: &state::perp_market::PerpMarket;
    let _481: &state::perp_market::PerpMarket;
    let mut _482: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _483: state::oracle::OraclePriceData;
    let mut _484: u64;
    let mut _485: &state::state::ValidityGuardRails;
    let _486: &state::state::ValidityGuardRails;
    let mut _487: isize;
    let mut _489: !;
    let mut _490: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _492: ();
    let mut _493: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _494: std::result::Result<(), error::ErrorCode>;
    let mut _495: &mut state::perp_market::PerpMarket;
    let mut _496: &mut state::perp_market::PerpMarket;
    let mut _497: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _498: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _499: &state::oracle::MMOraclePriceData;
    let _500: &state::oracle::MMOraclePriceData;
    let mut _501: &state::state::State;
    let mut _502: i64;
    let mut _503: u64;
    let mut _504: std::option::Option<math::oracle::DriftAction>;
    let mut _505: math::oracle::DriftAction;
    let mut _506: isize;
    let mut _508: !;
    let mut _509: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _512: bool;
    let mut _513: &state::perp_market::MarketStatus;
    let _514: &state::perp_market::PerpMarket;
    let mut _515: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _516: &state::perp_market::MarketStatus;
    let _517: state::perp_market::MarketStatus;
    let mut _518: &state::perp_market::PerpMarket;
    let mut _519: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _520: ();
    let mut _521: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _524: bool;
    let mut _525: &std::vec::Vec<u32>;
    let mut _526: bool;
    let mut _527: u64;
    let mut _529: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::margin_calculation::MarginCalculation>;
    let mut _530: std::result::Result<state::margin_calculation::MarginCalculation, error::ErrorCode>;
    let mut _531: &state::user::User;
    let mut _532: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _533: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _534: &mut state::oracle_map::OracleMap<'_>;
    let mut _535: state::margin_calculation::MarginContext;
    let mut _536: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::margin_calculation::MarginContext>;
    let mut _537: std::result::Result<state::margin_calculation::MarginContext, error::ErrorCode>;
    let mut _538: state::margin_calculation::MarginContext;
    let mut _539: u32;
    let mut _540: state::margin_calculation::MarketIdentifier;
    let mut _541: u16;
    let mut _542: isize;
    let mut _544: !;
    let mut _545: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _547: isize;
    let mut _549: !;
    let mut _550: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _553: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _554: std::result::Result<u128, error::ErrorCode>;
    let mut _555: &state::margin_calculation::MarginCalculation;
    let mut _556: isize;
    let mut _558: !;
    let mut _559: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _562: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _563: std::result::Result<u128, error::ErrorCode>;
    let mut _564: &state::margin_calculation::MarginCalculation;
    let mut _565: isize;
    let mut _567: !;
    let mut _568: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _570: u64;
    let mut _571: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _572: std::result::Result<u64, error::ErrorCode>;
    let mut _573: u128;
    let mut _574: u128;
    let mut _575: u128;
    let mut _576: isize;
    let mut _578: !;
    let mut _579: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _581: ();
    let mut _582: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _583: std::result::Result<(), error::ErrorCode>;
    let mut _584: &mut state::user::User;
    let mut _585: u64;
    let mut _586: isize;
    let mut _588: !;
    let mut _589: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _591: ();
    let mut _592: bool;
    let mut _593: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _594: std::result::Result<bool, error::ErrorCode>;
    let mut _595: &state::margin_calculation::MarginCalculation;
    let mut _596: isize;
    let mut _598: !;
    let mut _599: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _601: !;
    let _602: ();
    let _603: ();
    let mut _604: &[&[u8]];
    let mut _605: &[&[u8]; 1];
    let _606: &[&[u8]; 1];
    let _607: [&[u8]; 1];
    let mut _608: &[u8];
    let _609: &[u8];
    let mut _610: &std::vec::Vec<u8>;
    let _611: &std::vec::Vec<u8>;
    let _612: std::vec::Vec<u8>;
    let mut _613: &state::events::LiquidationRecord;
    let _614: &state::events::LiquidationRecord;
    let _615: state::events::LiquidationRecord;
    let mut _616: i64;
    let mut _617: u16;
    let mut _618: state::events::LiquidationType;
    let mut _619: anchor_lang::prelude::Pubkey;
    let mut _620: anchor_lang::prelude::Pubkey;
    let mut _621: u128;
    let mut _622: i128;
    let mut _623: bool;
    let mut _624: &state::user::User;
    let mut _625: std::vec::Vec<u32>;
    let mut _626: u64;
    let mut _627: state::events::LiquidatePerpRecord;
    let mut _628: u16;
    let mut _629: i64;
    let mut _630: u64;
    let mut _631: state::events::LiquidatePerpRecord;
    let mut _632: state::events::LiquidationRecord;
    let _633: ();
    let mut _634: &mut state::user::User;
    let mut _635: ();
    let _636: ();
    let mut _637: bool;
    let mut _638: i64;
    let _639: usize;
    let mut _640: usize;
    let mut _641: bool;
    let mut _642: !;
    let _643: ();
    let mut _644: &str;
    let _645: &str;
    let mut _646: ();
    let mut _648: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _649: std::result::Result<u64, error::ErrorCode>;
    let mut _650: u64;
    let mut _651: u64;
    let mut _652: &state::perp_market::PerpMarket;
    let mut _653: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let _654: std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _655: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::perp_market::PerpMarket>>;
    let mut _656: std::result::Result<std::cell::Ref<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _657: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _658: &u16;
    let _659: &u16;
    let mut _660: isize;
    let mut _662: !;
    let mut _663: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _665: isize;
    let mut _667: !;
    let mut _668: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _670: ();
    let mut _671: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _672: std::result::Result<(), error::ErrorCode>;
    let mut _673: bool;
    let mut _674: u64;
    let mut _675: ();
    let _677: ();
    let mut _678: &str;
    let _679: &str;
    let mut _680: &std::string::String;
    let _681: &std::string::String;
    let _682: std::string::String;
    let mut _684: std::fmt::Arguments<'_>;
    let mut _685: &[&str];
    let mut _686: &[&str; 2];
    let _687: &[&str; 2];
    let _688: [&str; 2];
    let mut _689: &[core::fmt::rt::Argument<'_>];
    let mut _690: &[core::fmt::rt::Argument<'_>; 1];
    let _691: &[core::fmt::rt::Argument<'_>; 1];
    let _692: [core::fmt::rt::Argument<'_>; 1];
    let mut _693: core::fmt::rt::Argument<'_>;
    let mut _694: &error::ErrorCode;
    let _695: &error::ErrorCode;
    let _696: ();
    let mut _697: &str;
    let _698: &str;
    let mut _699: &std::string::String;
    let _700: &std::string::String;
    let _701: std::string::String;
    let mut _703: std::fmt::Arguments<'_>;
    let mut _704: &[&str];
    let mut _705: &[&str; 1];
    let _706: &[&str; 1];
    let _707: [&str; 1];
    let mut _708: error::ErrorCode;
    let mut _709: isize;
    let mut _711: !;
    let mut _712: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _714: ();
    let mut _716: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::perp_market::PerpMarket>>;
    let mut _717: std::result::Result<std::cell::Ref<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _718: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _719: &u16;
    let _720: &u16;
    let mut _721: isize;
    let mut _723: !;
    let mut _724: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _726: bool;
    let mut _727: &state::perp_market::MarketStatus;
    let _728: &state::perp_market::PerpMarket;
    let mut _729: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _730: &state::perp_market::MarketStatus;
    let _731: state::perp_market::MarketStatus;
    let mut _733: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _734: std::result::Result<bool, error::ErrorCode>;
    let mut _735: i64;
    let mut _736: i64;
    let mut _737: &state::perp_market::PerpMarket;
    let mut _738: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _739: i64;
    let mut _740: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _741: std::result::Result<i64, error::ErrorCode>;
    let mut _742: u64;
    let mut _743: &state::state::OracleGuardRails;
    let mut _744: isize;
    let mut _746: !;
    let mut _747: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _749: isize;
    let mut _751: !;
    let mut _752: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _754: ();
    let mut _755: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _756: std::result::Result<(), error::ErrorCode>;
    let mut _757: bool;
    let mut _758: ();
    let _760: ();
    let mut _761: &str;
    let _762: &str;
    let mut _763: &std::string::String;
    let _764: &std::string::String;
    let _765: std::string::String;
    let mut _767: std::fmt::Arguments<'_>;
    let mut _768: &[&str];
    let mut _769: &[&str; 2];
    let _770: &[&str; 2];
    let _771: [&str; 2];
    let mut _772: &[core::fmt::rt::Argument<'_>];
    let mut _773: &[core::fmt::rt::Argument<'_>; 1];
    let _774: &[core::fmt::rt::Argument<'_>; 1];
    let _775: [core::fmt::rt::Argument<'_>; 1];
    let mut _776: core::fmt::rt::Argument<'_>;
    let mut _777: &error::ErrorCode;
    let _778: &error::ErrorCode;
    let mut _779: error::ErrorCode;
    let mut _780: isize;
    let mut _782: !;
    let mut _783: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _786: i64;
    let _787: usize;
    let mut _788: usize;
    let mut _789: bool;
    let mut _791: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _792: std::result::Result<u32, error::ErrorCode>;
    let mut _793: &state::perp_market::PerpMarket;
    let _794: &state::perp_market::PerpMarket;
    let mut _795: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let _796: std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _797: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::perp_market::PerpMarket>>;
    let mut _798: std::result::Result<std::cell::Ref<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _799: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _800: &u16;
    let _801: &u16;
    let mut _802: isize;
    let mut _804: !;
    let mut _805: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _807: u128;
    let mut _808: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _809: std::result::Result<u128, error::ErrorCode>;
    let mut _810: u64;
    let mut _811: isize;
    let mut _813: !;
    let mut _814: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _816: math::margin::MarginRequirementType;
    let mut _817: bool;
    let mut _818: &state::user::User;
    let mut _819: math::margin::MarginRequirementType;
    let mut _820: isize;
    let mut _822: !;
    let mut _823: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _826: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _827: std::result::Result<u32, error::ErrorCode>;
    let mut _828: u32;
    let mut _829: u32;
    let mut _830: isize;
    let mut _832: !;
    let mut _833: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _836: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _837: std::result::Result<u128, error::ErrorCode>;
    let mut _838: &state::margin_calculation::MarginCalculation;
    let mut _839: isize;
    let mut _841: !;
    let mut _842: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _845: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::perp_market::PerpMarket>>;
    let mut _846: std::result::Result<std::cell::Ref<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _847: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _848: &u16;
    let _849: &u16;
    let mut _850: isize;
    let mut _852: !;
    let mut _853: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _856: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _857: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _858: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _859: &u16;
    let _860: &u16;
    let _861: &state::perp_market::PerpMarket;
    let mut _862: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _863: isize;
    let mut _865: !;
    let mut _866: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _869: &state::oracle::OraclePriceData;
    let mut _870: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _871: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _872: &mut state::oracle_map::OracleMap<'_>;
    let mut _873: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _874: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _875: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _876: &state::spot_market::SpotMarket;
    let _877: &state::spot_market::SpotMarket;
    let mut _878: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _879: isize;
    let mut _881: !;
    let mut _882: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _885: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _886: std::result::Result<u32, error::ErrorCode>;
    let mut _887: u32;
    let mut _888: &state::perp_market::PerpMarket;
    let _889: &state::perp_market::PerpMarket;
    let mut _890: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _891: bool;
    let mut _892: &state::user::User;
    let mut _893: math::margin::MarginRequirementType;
    let mut _894: u32;
    let mut _895: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _896: std::result::Result<u32, error::ErrorCode>;
    let mut _897: &state::perp_market::PerpMarket;
    let _898: &state::perp_market::PerpMarket;
    let mut _899: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _900: isize;
    let mut _902: !;
    let mut _903: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _905: u64;
    let mut _906: u64;
    let mut _907: isize;
    let mut _909: !;
    let mut _910: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _913: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _914: std::result::Result<u32, error::ErrorCode>;
    let mut _915: u128;
    let mut _916: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _917: std::result::Result<u128, error::ErrorCode>;
    let mut _918: &state::margin_calculation::MarginCalculation;
    let mut _919: u128;
    let mut _920: isize;
    let mut _922: !;
    let mut _923: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _925: u64;
    let mut _926: u32;
    let mut _927: u32;
    let mut _928: i64;
    let mut _929: i64;
    let mut _930: u32;
    let mut _931: &state::perp_market::PerpMarket;
    let mut _932: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _933: isize;
    let mut _935: !;
    let mut _936: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _939: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _940: std::result::Result<u64, error::ErrorCode>;
    let mut _941: u128;
    let mut _942: u32;
    let mut _943: u32;
    let mut _944: u32;
    let mut _945: i64;
    let mut _946: i64;
    let mut _947: isize;
    let mut _949: !;
    let mut _950: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _952: ();
    let mut _953: bool;
    let mut _954: u64;
    let mut _955: u64;
    let mut _956: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _957: std::result::Result<u64, error::ErrorCode>;
    let mut _958: u64;
    let mut _959: u64;
    let mut _960: &state::perp_market::PerpMarket;
    let mut _961: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _962: isize;
    let mut _964: !;
    let mut _965: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _967: ();
    let mut _968: std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let _969: ();
    let mut _970: std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _972: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _973: std::result::Result<u128, error::ErrorCode>;
    let mut _974: &state::user::User;
    let mut _975: u128;
    let mut _976: u64;
    let mut _977: u128;
    let mut _978: u128;
    let mut _979: isize;
    let mut _981: !;
    let mut _982: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _985: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _986: std::result::Result<u64, error::ErrorCode>;
    let mut _987: u128;
    let mut _988: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _989: std::result::Result<u128, error::ErrorCode>;
    let mut _990: u128;
    let mut _991: u128;
    let mut _992: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _993: std::result::Result<u128, error::ErrorCode>;
    let mut _994: u64;
    let mut _995: isize;
    let mut _997: !;
    let mut _998: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1000: u128;
    let mut _1001: isize;
    let mut _1003: !;
    let mut _1004: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1006: isize;
    let mut _1008: !;
    let mut _1009: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1011: ();
    let mut _1012: bool;
    let mut _1013: u64;
    let mut _1014: !;
    let _1015: ();
    let mut _1016: &str;
    let _1017: &str;
    let mut _1018: ();
    let mut _1020: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _1021: std::result::Result<u64, error::ErrorCode>;
    let mut _1022: u128;
    let mut _1023: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1024: std::result::Result<u128, error::ErrorCode>;
    let mut _1025: i128;
    let mut _1026: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _1027: std::result::Result<i128, error::ErrorCode>;
    let mut _1028: u64;
    let mut _1029: isize;
    let mut _1031: !;
    let mut _1032: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1034: i64;
    let mut _1035: isize;
    let mut _1037: !;
    let mut _1038: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1040: isize;
    let mut _1042: !;
    let mut _1043: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1046: bool;
    let mut _1047: u64;
    let mut _1048: u64;
    let mut _1049: (u64, bool);
    let mut _1051: u64;
    let mut _1052: u64;
    let mut _1053: u64;
    let mut _1054: u64;
    let mut _1055: u64;
    let mut _1056: u64;
    let mut _1058: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _1059: std::result::Result<u64, error::ErrorCode>;
    let mut _1060: u64;
    let mut _1061: u64;
    let mut _1062: &state::perp_market::PerpMarket;
    let mut _1063: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let _1064: std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _1065: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::perp_market::PerpMarket>>;
    let mut _1066: std::result::Result<std::cell::Ref<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _1067: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _1068: &u16;
    let _1069: &u16;
    let mut _1070: isize;
    let mut _1072: !;
    let mut _1073: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1075: isize;
    let mut _1077: !;
    let mut _1078: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1080: ();
    let mut _1081: isize;
    let mut _1084: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1085: std::result::Result<u128, error::ErrorCode>;
    let mut _1086: i64;
    let mut _1087: isize;
    let mut _1089: !;
    let mut _1090: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1093: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1094: std::result::Result<u128, error::ErrorCode>;
    let mut _1095: u128;
    let mut _1096: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1097: std::result::Result<u128, error::ErrorCode>;
    let mut _1098: u128;
    let mut _1099: u128;
    let mut _1100: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1101: std::result::Result<u128, error::ErrorCode>;
    let mut _1102: u32;
    let mut _1103: isize;
    let mut _1105: !;
    let mut _1106: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1108: isize;
    let mut _1110: !;
    let mut _1111: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1113: isize;
    let mut _1115: !;
    let mut _1116: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1118: controller::position::PositionDirection;
    let mut _1119: &state::user::PerpPosition;
    let _1120: usize;
    let mut _1121: usize;
    let mut _1122: bool;
    let mut _1123: isize;
    let mut _1125: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1126: std::result::Result<u128, error::ErrorCode>;
    let mut _1127: u128;
    let mut _1128: u128;
    let mut _1129: isize;
    let mut _1131: !;
    let mut _1132: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1134: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1135: std::result::Result<(), error::ErrorCode>;
    let mut _1136: bool;
    let mut _1137: u128;
    let mut _1138: u128;
    let mut _1139: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1140: std::result::Result<u128, error::ErrorCode>;
    let mut _1141: u64;
    let mut _1142: isize;
    let mut _1144: !;
    let mut _1145: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1147: ();
    let _1149: ();
    let mut _1150: &str;
    let _1151: &str;
    let mut _1152: &std::string::String;
    let _1153: &std::string::String;
    let _1154: std::string::String;
    let mut _1156: std::fmt::Arguments<'_>;
    let mut _1157: &[&str];
    let mut _1158: &[&str; 2];
    let _1159: &[&str; 2];
    let _1160: [&str; 2];
    let mut _1161: &[core::fmt::rt::Argument<'_>];
    let mut _1162: &[core::fmt::rt::Argument<'_>; 1];
    let _1163: &[core::fmt::rt::Argument<'_>; 1];
    let _1164: [core::fmt::rt::Argument<'_>; 1];
    let mut _1165: core::fmt::rt::Argument<'_>;
    let mut _1166: &error::ErrorCode;
    let _1167: &error::ErrorCode;
    let _1168: ();
    let mut _1169: &str;
    let _1170: &str;
    let mut _1171: &std::string::String;
    let _1172: &std::string::String;
    let _1173: std::string::String;
    let mut _1175: std::fmt::Arguments<'_>;
    let mut _1176: &[&str];
    let mut _1177: &[&str; 3];
    let _1178: &[&str; 3];
    let _1179: [&str; 3];
    let mut _1180: &[core::fmt::rt::Argument<'_>];
    let mut _1181: &[core::fmt::rt::Argument<'_>; 2];
    let _1182: &[core::fmt::rt::Argument<'_>; 2];
    let _1183: [core::fmt::rt::Argument<'_>; 2];
    let mut _1184: core::fmt::rt::Argument<'_>;
    let mut _1185: &u64;
    let _1186: &u64;
    let mut _1187: core::fmt::rt::Argument<'_>;
    let mut _1188: &u128;
    let _1189: &u128;
    let mut _1190: error::ErrorCode;
    let mut _1191: isize;
    let mut _1193: !;
    let mut _1194: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1197: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1198: std::result::Result<u128, error::ErrorCode>;
    let mut _1199: u128;
    let mut _1200: u128;
    let mut _1201: isize;
    let mut _1203: !;
    let mut _1204: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1206: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1207: std::result::Result<(), error::ErrorCode>;
    let mut _1208: bool;
    let mut _1209: u128;
    let mut _1210: u128;
    let mut _1211: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1212: std::result::Result<u128, error::ErrorCode>;
    let mut _1213: u64;
    let mut _1214: isize;
    let mut _1216: !;
    let mut _1217: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1219: ();
    let _1221: ();
    let mut _1222: &str;
    let _1223: &str;
    let mut _1224: &std::string::String;
    let _1225: &std::string::String;
    let _1226: std::string::String;
    let mut _1228: std::fmt::Arguments<'_>;
    let mut _1229: &[&str];
    let mut _1230: &[&str; 2];
    let _1231: &[&str; 2];
    let _1232: [&str; 2];
    let mut _1233: &[core::fmt::rt::Argument<'_>];
    let mut _1234: &[core::fmt::rt::Argument<'_>; 1];
    let _1235: &[core::fmt::rt::Argument<'_>; 1];
    let _1236: [core::fmt::rt::Argument<'_>; 1];
    let mut _1237: core::fmt::rt::Argument<'_>;
    let mut _1238: &error::ErrorCode;
    let _1239: &error::ErrorCode;
    let _1240: ();
    let mut _1241: &str;
    let _1242: &str;
    let mut _1243: &std::string::String;
    let _1244: &std::string::String;
    let _1245: std::string::String;
    let mut _1247: std::fmt::Arguments<'_>;
    let mut _1248: &[&str];
    let mut _1249: &[&str; 3];
    let _1250: &[&str; 3];
    let _1251: [&str; 3];
    let mut _1252: &[core::fmt::rt::Argument<'_>];
    let mut _1253: &[core::fmt::rt::Argument<'_>; 2];
    let _1254: &[core::fmt::rt::Argument<'_>; 2];
    let _1255: [core::fmt::rt::Argument<'_>; 2];
    let mut _1256: core::fmt::rt::Argument<'_>;
    let mut _1257: &u64;
    let _1258: &u64;
    let mut _1259: core::fmt::rt::Argument<'_>;
    let mut _1260: &u128;
    let _1261: &u128;
    let mut _1262: error::ErrorCode;
    let mut _1263: isize;
    let mut _1265: !;
    let mut _1266: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1269: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _1270: std::result::Result<u64, error::ErrorCode>;
    let mut _1271: u128;
    let mut _1272: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1273: std::result::Result<u128, error::ErrorCode>;
    let mut _1274: i128;
    let mut _1275: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _1276: std::result::Result<i128, error::ErrorCode>;
    let mut _1277: u64;
    let mut _1278: isize;
    let mut _1280: !;
    let mut _1281: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1283: i64;
    let mut _1284: isize;
    let mut _1286: !;
    let mut _1287: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1289: isize;
    let mut _1291: !;
    let mut _1292: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1295: i64;
    let mut _1296: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _1297: std::result::Result<i64, error::ErrorCode>;
    let mut _1298: u128;
    let mut _1299: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1300: std::result::Result<u128, error::ErrorCode>;
    let mut _1301: u128;
    let mut _1302: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1303: std::result::Result<u128, error::ErrorCode>;
    let mut _1304: u128;
    let mut _1305: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1306: std::result::Result<u128, error::ErrorCode>;
    let mut _1307: u64;
    let mut _1308: isize;
    let mut _1310: !;
    let mut _1311: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1313: u128;
    let mut _1314: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1315: std::result::Result<u128, error::ErrorCode>;
    let mut _1316: u32;
    let mut _1317: isize;
    let mut _1319: !;
    let mut _1320: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1322: isize;
    let mut _1324: !;
    let mut _1325: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1327: isize;
    let mut _1329: !;
    let mut _1330: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1332: isize;
    let mut _1334: !;
    let mut _1335: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1337: bool;
    let mut _1339: i64;
    let mut _1340: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _1341: std::result::Result<i64, error::ErrorCode>;
    let mut _1342: u128;
    let mut _1343: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1344: std::result::Result<u128, error::ErrorCode>;
    let mut _1345: u128;
    let mut _1346: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1347: std::result::Result<u128, error::ErrorCode>;
    let mut _1348: u128;
    let mut _1349: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1350: std::result::Result<u128, error::ErrorCode>;
    let mut _1351: u64;
    let mut _1352: isize;
    let mut _1354: !;
    let mut _1355: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1357: u128;
    let mut _1358: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1359: std::result::Result<u128, error::ErrorCode>;
    let mut _1360: u32;
    let mut _1361: isize;
    let mut _1363: !;
    let mut _1364: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1366: isize;
    let mut _1368: !;
    let mut _1369: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1371: isize;
    let mut _1373: !;
    let mut _1374: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1376: isize;
    let mut _1378: !;
    let mut _1379: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1381: bool;
    let _1382: ();
    let mut _1383: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1384: std::result::Result<(), error::ErrorCode>;
    let mut _1385: &mut state::user::UserStats;
    let mut _1386: u8;
    let mut _1387: &state::perp_market::PerpMarket;
    let mut _1388: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let _1389: std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _1390: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::perp_market::PerpMarket>>;
    let mut _1391: std::result::Result<std::cell::Ref<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _1392: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _1393: &u16;
    let _1394: &u16;
    let mut _1395: isize;
    let mut _1397: !;
    let mut _1398: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1400: u64;
    let mut _1401: i64;
    let mut _1402: isize;
    let mut _1404: !;
    let mut _1405: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1407: ();
    let mut _1408: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1409: std::result::Result<(), error::ErrorCode>;
    let mut _1410: &mut state::user::UserStats;
    let mut _1411: u8;
    let mut _1412: &state::perp_market::PerpMarket;
    let mut _1413: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let _1414: std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _1415: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::perp_market::PerpMarket>>;
    let mut _1416: std::result::Result<std::cell::Ref<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _1417: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _1418: &u16;
    let _1419: &u16;
    let mut _1420: isize;
    let mut _1422: !;
    let mut _1423: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1425: u64;
    let mut _1426: i64;
    let mut _1427: isize;
    let mut _1429: !;
    let mut _1430: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1433: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, controller::position::PositionDelta>;
    let mut _1434: std::result::Result<controller::position::PositionDelta, error::ErrorCode>;
    let mut _1435: u64;
    let mut _1436: u64;
    let mut _1437: controller::position::PositionDirection;
    let mut _1438: &state::user::PerpPosition;
    let _1439: usize;
    let mut _1440: usize;
    let mut _1441: bool;
    let mut _1442: isize;
    let mut _1444: !;
    let mut _1445: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1448: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, controller::position::PositionDelta>;
    let mut _1449: std::result::Result<controller::position::PositionDelta, error::ErrorCode>;
    let mut _1450: u64;
    let mut _1451: u64;
    let mut _1452: controller::position::PositionDirection;
    let mut _1453: &state::user::PerpPosition;
    let _1454: usize;
    let mut _1455: usize;
    let mut _1456: bool;
    let mut _1457: isize;
    let mut _1459: !;
    let mut _1460: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1467: (controller::position::PositionDirection, controller::position::PositionDirection, std::option::Option<(u64, u64)>, controller::position::PositionDirection, std::option::Option<(u64, u64)>);
    let mut _1469: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _1470: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _1471: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _1472: &u16;
    let _1473: &u16;
    let mut _1474: isize;
    let mut _1476: !;
    let mut _1477: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1480: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &mut state::user::PerpPosition>;
    let mut _1481: std::result::Result<&mut state::user::PerpPosition, error::ErrorCode>;
    let mut _1482: &mut state::user::User;
    let mut _1483: u16;
    let mut _1484: isize;
    let mut _1486: !;
    let mut _1487: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1490: &state::user::PerpPosition;
    let mut _1492: &state::user::PerpPosition;
    let mut _1494: &state::user::PerpPosition;
    let mut _1495: controller::position::PositionDirection;
    let _1496: i64;
    let mut _1497: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _1498: std::result::Result<i64, error::ErrorCode>;
    let mut _1499: &mut state::user::PerpPosition;
    let mut _1500: &mut state::perp_market::PerpMarket;
    let mut _1501: &mut state::perp_market::PerpMarket;
    let mut _1502: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _1503: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _1504: &controller::position::PositionDelta;
    let _1505: &controller::position::PositionDelta;
    let mut _1506: isize;
    let mut _1508: !;
    let mut _1509: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1511: ();
    let mut _1512: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1513: std::result::Result<(), error::ErrorCode>;
    let mut _1514: &mut state::user::PerpPosition;
    let mut _1515: &mut state::perp_market::PerpMarket;
    let mut _1516: &mut state::perp_market::PerpMarket;
    let mut _1517: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _1518: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _1519: i64;
    let mut _1520: isize;
    let mut _1522: !;
    let mut _1523: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1525: ();
    let mut _1526: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1527: std::result::Result<(), error::ErrorCode>;
    let mut _1528: &mut state::user::PerpPosition;
    let mut _1529: &mut state::perp_market::PerpMarket;
    let mut _1530: &mut state::perp_market::PerpMarket;
    let mut _1531: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _1532: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _1533: i64;
    let mut _1534: isize;
    let mut _1536: !;
    let mut _1537: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1539: ();
    let mut _1540: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1541: std::result::Result<(), error::ErrorCode>;
    let mut _1542: bool;
    let mut _1543: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _1544: std::result::Result<bool, error::ErrorCode>;
    let mut _1545: u64;
    let mut _1546: i64;
    let mut _1547: u64;
    let mut _1548: &state::perp_market::PerpMarket;
    let mut _1549: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _1550: isize;
    let mut _1552: !;
    let mut _1553: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1555: ();
    let _1557: ();
    let mut _1558: &str;
    let _1559: &str;
    let mut _1560: &std::string::String;
    let _1561: &std::string::String;
    let _1562: std::string::String;
    let mut _1564: std::fmt::Arguments<'_>;
    let mut _1565: &[&str];
    let mut _1566: &[&str; 2];
    let _1567: &[&str; 2];
    let _1568: [&str; 2];
    let mut _1569: &[core::fmt::rt::Argument<'_>];
    let mut _1570: &[core::fmt::rt::Argument<'_>; 1];
    let _1571: &[core::fmt::rt::Argument<'_>; 1];
    let _1572: [core::fmt::rt::Argument<'_>; 1];
    let mut _1573: core::fmt::rt::Argument<'_>;
    let mut _1574: &error::ErrorCode;
    let _1575: &error::ErrorCode;
    let _1576: ();
    let mut _1577: &str;
    let _1578: &str;
    let mut _1579: &std::string::String;
    let _1580: &std::string::String;
    let _1581: std::string::String;
    let mut _1583: std::fmt::Arguments<'_>;
    let mut _1584: &[&str];
    let mut _1585: &[&str; 2];
    let _1586: &[&str; 2];
    let _1587: [&str; 2];
    let mut _1588: &[core::fmt::rt::Argument<'_>];
    let mut _1589: &[core::fmt::rt::Argument<'_>; 2];
    let _1590: &[core::fmt::rt::Argument<'_>; 2];
    let _1591: [core::fmt::rt::Argument<'_>; 2];
    let mut _1592: core::fmt::rt::Argument<'_>;
    let mut _1593: &i64;
    let _1594: &i64;
    let mut _1595: core::fmt::rt::Argument<'_>;
    let mut _1596: &u64;
    let _1597: &u64;
    let _1598: &state::perp_market::PerpMarket;
    let mut _1599: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _1600: error::ErrorCode;
    let mut _1601: isize;
    let mut _1603: !;
    let mut _1604: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1607: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &mut state::user::PerpPosition>;
    let mut _1608: std::result::Result<&mut state::user::PerpPosition, error::ErrorCode>;
    let mut _1609: &mut state::user::User;
    let mut _1610: u16;
    let mut _1611: isize;
    let mut _1613: !;
    let mut _1614: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1617: &state::user::PerpPosition;
    let mut _1619: &state::user::PerpPosition;
    let mut _1620: controller::position::PositionDirection;
    let _1621: i64;
    let mut _1622: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _1623: std::result::Result<i64, error::ErrorCode>;
    let mut _1624: &mut state::user::PerpPosition;
    let mut _1625: &mut state::perp_market::PerpMarket;
    let mut _1626: &mut state::perp_market::PerpMarket;
    let mut _1627: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _1628: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _1629: &controller::position::PositionDelta;
    let _1630: &controller::position::PositionDelta;
    let mut _1631: isize;
    let mut _1633: !;
    let mut _1634: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1636: ();
    let mut _1637: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1638: std::result::Result<(), error::ErrorCode>;
    let mut _1639: &mut state::user::PerpPosition;
    let mut _1640: &mut state::perp_market::PerpMarket;
    let mut _1641: &mut state::perp_market::PerpMarket;
    let mut _1642: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _1643: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _1644: i64;
    let mut _1645: i64;
    let mut _1646: bool;
    let mut _1647: isize;
    let mut _1649: !;
    let mut _1650: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1652: ();
    let mut _1653: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1654: std::result::Result<(), error::ErrorCode>;
    let mut _1655: bool;
    let mut _1656: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _1657: std::result::Result<bool, error::ErrorCode>;
    let mut _1658: u64;
    let mut _1659: i64;
    let mut _1660: u64;
    let mut _1661: &state::perp_market::PerpMarket;
    let mut _1662: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _1663: isize;
    let mut _1665: !;
    let mut _1666: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1668: ();
    let _1670: ();
    let mut _1671: &str;
    let _1672: &str;
    let mut _1673: &std::string::String;
    let _1674: &std::string::String;
    let _1675: std::string::String;
    let mut _1677: std::fmt::Arguments<'_>;
    let mut _1678: &[&str];
    let mut _1679: &[&str; 2];
    let _1680: &[&str; 2];
    let _1681: [&str; 2];
    let mut _1682: &[core::fmt::rt::Argument<'_>];
    let mut _1683: &[core::fmt::rt::Argument<'_>; 1];
    let _1684: &[core::fmt::rt::Argument<'_>; 1];
    let _1685: [core::fmt::rt::Argument<'_>; 1];
    let mut _1686: core::fmt::rt::Argument<'_>;
    let mut _1687: &error::ErrorCode;
    let _1688: &error::ErrorCode;
    let _1689: ();
    let mut _1690: &str;
    let _1691: &str;
    let mut _1692: &std::string::String;
    let _1693: &std::string::String;
    let _1694: std::string::String;
    let mut _1696: std::fmt::Arguments<'_>;
    let mut _1697: &[&str];
    let mut _1698: &[&str; 2];
    let _1699: &[&str; 2];
    let _1700: [&str; 2];
    let mut _1701: &[core::fmt::rt::Argument<'_>];
    let mut _1702: &[core::fmt::rt::Argument<'_>; 2];
    let _1703: &[core::fmt::rt::Argument<'_>; 2];
    let _1704: [core::fmt::rt::Argument<'_>; 2];
    let mut _1705: core::fmt::rt::Argument<'_>;
    let mut _1706: &i64;
    let _1707: &i64;
    let mut _1708: core::fmt::rt::Argument<'_>;
    let mut _1709: &u64;
    let _1710: &u64;
    let _1711: &state::perp_market::PerpMarket;
    let mut _1712: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _1713: error::ErrorCode;
    let mut _1714: isize;
    let mut _1716: !;
    let mut _1717: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1719: u128;
    let mut _1720: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1721: std::result::Result<u128, error::ErrorCode>;
    let mut _1722: u128;
    let mut _1723: &state::perp_market::PerpMarket;
    let mut _1724: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _1725: u128;
    let mut _1726: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _1727: std::result::Result<u128, error::ErrorCode>;
    let mut _1728: u64;
    let mut _1729: i64;
    let mut _1730: isize;
    let mut _1732: !;
    let mut _1733: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1735: isize;
    let mut _1737: !;
    let mut _1738: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1740: &mut state::perp_market::PerpMarket;
    let mut _1741: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _1742: controller::position::PositionDirection;
    let mut _1743: controller::position::PositionDirection;
    let mut _1744: std::option::Option<(u64, u64)>;
    let mut _1745: controller::position::PositionDirection;
    let mut _1746: std::option::Option<(u64, u64)>;
    let mut _1748: (u64, state::margin_calculation::MarginCalculation);
    let mut _1749: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u64, state::margin_calculation::MarginCalculation)>;
    let mut _1750: std::result::Result<(u64, state::margin_calculation::MarginCalculation), error::ErrorCode>;
    let mut _1751: &state::user::User;
    let mut _1752: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _1753: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _1754: &mut state::oracle_map::OracleMap<'_>;
    let mut _1755: u32;
    let mut _1756: u128;
    let mut _1757: isize;
    let mut _1759: !;
    let mut _1760: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1762: u64;
    let mut _1763: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _1764: std::result::Result<u64, error::ErrorCode>;
    let mut _1765: u64;
    let mut _1766: u64;
    let mut _1767: isize;
    let mut _1769: !;
    let mut _1770: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1772: ();
    let mut _1773: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1774: std::result::Result<(), error::ErrorCode>;
    let mut _1775: &mut state::user::User;
    let mut _1776: u64;
    let mut _1777: isize;
    let mut _1779: !;
    let mut _1780: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1782: ();
    let mut _1783: bool;
    let mut _1784: u64;
    let mut _1785: u64;
    let _1786: ();
    let mut _1787: &mut state::user::User;
    let mut _1788: bool;
    let mut _1789: &state::user::User;
    let _1790: ();
    let mut _1791: &mut state::user::User;
    let mut _1793: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _1794: std::result::Result<bool, error::ErrorCode>;
    let mut _1795: &state::user::User;
    let mut _1796: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _1797: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _1798: &mut state::oracle_map::OracleMap<'_>;
    let mut _1799: isize;
    let mut _1801: !;
    let mut _1802: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1804: ();
    let mut _1805: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1806: std::result::Result<(), error::ErrorCode>;
    let mut _1807: bool;
    let mut _1808: ();
    let _1810: ();
    let mut _1811: &str;
    let _1812: &str;
    let mut _1813: &std::string::String;
    let _1814: &std::string::String;
    let _1815: std::string::String;
    let mut _1817: std::fmt::Arguments<'_>;
    let mut _1818: &[&str];
    let mut _1819: &[&str; 2];
    let _1820: &[&str; 2];
    let _1821: [&str; 2];
    let mut _1822: &[core::fmt::rt::Argument<'_>];
    let mut _1823: &[core::fmt::rt::Argument<'_>; 1];
    let _1824: &[core::fmt::rt::Argument<'_>; 1];
    let _1825: [core::fmt::rt::Argument<'_>; 1];
    let mut _1826: core::fmt::rt::Argument<'_>;
    let mut _1827: &error::ErrorCode;
    let _1828: &error::ErrorCode;
    let _1829: ();
    let mut _1830: &str;
    let _1831: &str;
    let mut _1832: error::ErrorCode;
    let mut _1833: isize;
    let mut _1835: !;
    let mut _1836: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1840: u32;
    let mut _1841: std::option::Option<u32>;
    let mut _1842: std::option::Option<u32>;
    let mut _1843: u32;
    let mut _1844: std::option::Option<u32>;
    let mut _1847: u32;
    let mut _1848: std::option::Option<u32>;
    let mut _1849: std::option::Option<u32>;
    let mut _1850: u32;
    let mut _1851: std::option::Option<u32>;
    let mut _1854: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _1855: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _1856: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _1857: &u16;
    let _1858: &u16;
    let mut _1859: isize;
    let mut _1861: !;
    let mut _1862: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1865: &state::perp_market::PerpMarket;
    let mut _1866: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _1867: u64;
    let mut _1868: std::option::Option<u64>;
    let mut _1869: std::option::Option<u64>;
    let mut _1870: u64;
    let mut _1871: std::option::Option<u64>;
    let mut _1872: &mut state::perp_market::PerpMarket;
    let mut _1873: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _1875: u64;
    let mut _1876: u64;
    let mut _1877: u32;
    let mut _1878: u16;
    let mut _1879: state::user::OrderStatus;
    let mut _1880: state::user::OrderType;
    let mut _1881: state::user::MarketType;
    let mut _1882: controller::position::PositionDirection;
    let mut _1883: controller::position::PositionDirection;
    let mut _1884: state::user::Order;
    let _1885: ();
    let _1886: ();
    let mut _1887: &[&[u8]];
    let mut _1888: &[&[u8]; 1];
    let _1889: &[&[u8]; 1];
    let _1890: [&[u8]; 1];
    let mut _1891: &[u8];
    let _1892: &[u8];
    let mut _1893: &std::vec::Vec<u8>;
    let _1894: &std::vec::Vec<u8>;
    let _1895: std::vec::Vec<u8>;
    let mut _1896: &state::events::OrderRecord;
    let _1897: &state::events::OrderRecord;
    let _1898: state::events::OrderRecord;
    let mut _1899: i64;
    let mut _1900: anchor_lang::prelude::Pubkey;
    let mut _1901: state::user::Order;
    let mut _1903: u64;
    let mut _1904: u64;
    let mut _1905: isize;
    let mut _1907: u64;
    let mut _1908: u32;
    let mut _1909: u16;
    let mut _1910: state::user::OrderStatus;
    let mut _1911: state::user::OrderType;
    let mut _1912: bool;
    let mut _1913: &std::option::Option<u64>;
    let mut _1914: state::user::MarketType;
    let mut _1915: controller::position::PositionDirection;
    let mut _1916: controller::position::PositionDirection;
    let mut _1917: state::user::Order;
    let _1918: ();
    let _1919: ();
    let mut _1920: &[&[u8]];
    let mut _1921: &[&[u8]; 1];
    let _1922: &[&[u8]; 1];
    let _1923: [&[u8]; 1];
    let mut _1924: &[u8];
    let _1925: &[u8];
    let mut _1926: &std::vec::Vec<u8>;
    let _1927: &std::vec::Vec<u8>;
    let _1928: std::vec::Vec<u8>;
    let mut _1929: &state::events::OrderRecord;
    let _1930: &state::events::OrderRecord;
    let _1931: state::events::OrderRecord;
    let mut _1932: i64;
    let mut _1933: anchor_lang::prelude::Pubkey;
    let mut _1934: state::user::Order;
    let mut _1937: (std::option::Option<u64>, std::option::Option<u64>);
    let mut _1938: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (std::option::Option<u64>, std::option::Option<u64>)>;
    let mut _1939: std::result::Result<(std::option::Option<u64>, std::option::Option<u64>), error::ErrorCode>;
    let mut _1940: u64;
    let mut _1941: std::option::Option<(u64, u64)>;
    let mut _1942: isize;
    let mut _1944: !;
    let mut _1945: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1949: (std::option::Option<u64>, std::option::Option<u64>);
    let mut _1950: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (std::option::Option<u64>, std::option::Option<u64>)>;
    let mut _1951: std::result::Result<(std::option::Option<u64>, std::option::Option<u64>), error::ErrorCode>;
    let mut _1952: u64;
    let mut _1953: std::option::Option<(u64, u64)>;
    let mut _1954: isize;
    let mut _1956: !;
    let mut _1957: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1960: i64;
    let mut _1961: state::events::OrderAction;
    let mut _1962: state::events::OrderActionExplanation;
    let mut _1963: u16;
    let mut _1964: state::user::MarketType;
    let mut _1965: std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _1966: std::option::Option<u64>;
    let mut _1967: std::option::Option<u64>;
    let mut _1968: u64;
    let mut _1969: std::option::Option<u64>;
    let mut _1970: u64;
    let mut _1971: std::option::Option<u64>;
    let mut _1972: u64;
    let mut _1973: std::option::Option<u64>;
    let mut _1974: u64;
    let mut _1975: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _1976: std::result::Result<u64, error::ErrorCode>;
    let mut _1977: u64;
    let mut _1978: i64;
    let mut _1979: u64;
    let mut _1980: i64;
    let mut _1981: isize;
    let mut _1983: !;
    let mut _1984: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1986: std::option::Option<i64>;
    let mut _1987: i64;
    let mut _1988: std::option::Option<u32>;
    let mut _1989: std::option::Option<i64>;
    let mut _1990: std::option::Option<u64>;
    let mut _1991: std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _1992: anchor_lang::prelude::Pubkey;
    let mut _1993: std::option::Option<u32>;
    let mut _1994: u32;
    let mut _1995: std::option::Option<controller::position::PositionDirection>;
    let mut _1996: controller::position::PositionDirection;
    let mut _1997: std::option::Option<u64>;
    let mut _1998: u64;
    let mut _1999: std::option::Option<u64>;
    let mut _2000: u64;
    let mut _2001: std::option::Option<u64>;
    let mut _2002: u64;
    let mut _2003: std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _2004: anchor_lang::prelude::Pubkey;
    let mut _2005: std::option::Option<u32>;
    let mut _2006: u32;
    let mut _2007: std::option::Option<controller::position::PositionDirection>;
    let mut _2008: controller::position::PositionDirection;
    let mut _2009: std::option::Option<u64>;
    let mut _2010: u64;
    let mut _2011: std::option::Option<u64>;
    let mut _2012: u64;
    let mut _2013: std::option::Option<u64>;
    let mut _2014: u64;
    let mut _2015: i64;
    let mut _2016: std::option::Option<u64>;
    let mut _2017: std::option::Option<u64>;
    let mut _2018: std::option::Option<u64>;
    let mut _2019: std::option::Option<u64>;
    let mut _2020: std::option::Option<u64>;
    let _2021: ();
    let _2022: ();
    let mut _2023: &[&[u8]];
    let mut _2024: &[&[u8]; 1];
    let _2025: &[&[u8]; 1];
    let _2026: [&[u8]; 1];
    let mut _2027: &[u8];
    let _2028: &[u8];
    let mut _2029: &std::vec::Vec<u8>;
    let _2030: &std::vec::Vec<u8>;
    let _2031: std::vec::Vec<u8>;
    let mut _2032: &state::events::OrderActionRecord;
    let _2033: &state::events::OrderActionRecord;
    let _2034: ();
    let _2035: ();
    let mut _2036: &[&[u8]];
    let mut _2037: &[&[u8]; 1];
    let _2038: &[&[u8]; 1];
    let _2039: [&[u8]; 1];
    let mut _2040: &[u8];
    let _2041: &[u8];
    let mut _2042: &std::vec::Vec<u8>;
    let _2043: &std::vec::Vec<u8>;
    let _2044: std::vec::Vec<u8>;
    let mut _2045: &state::events::LiquidationRecord;
    let _2046: &state::events::LiquidationRecord;
    let _2047: state::events::LiquidationRecord;
    let mut _2048: i64;
    let mut _2049: u16;
    let mut _2050: state::events::LiquidationType;
    let mut _2051: anchor_lang::prelude::Pubkey;
    let mut _2052: anchor_lang::prelude::Pubkey;
    let mut _2053: u128;
    let mut _2054: i128;
    let mut _2055: bool;
    let mut _2056: &state::user::User;
    let mut _2057: std::vec::Vec<u32>;
    let mut _2058: u64;
    let mut _2059: state::events::LiquidatePerpRecord;
    let mut _2060: u16;
    let mut _2061: i64;
    let mut _2062: i64;
    let mut _2063: i64;
    let mut _2064: u64;
    let mut _2065: u32;
    let mut _2066: u32;
    let mut _2067: u64;
    let mut _2068: u64;
    let mut _2069: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _2070: std::result::Result<u64, error::ErrorCode>;
    let mut _2071: i64;
    let mut _2072: i64;
    let mut _2073: isize;
    let mut _2075: !;
    let mut _2076: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _2078: u64;
    let mut _2079: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _2080: std::result::Result<u64, error::ErrorCode>;
    let mut _2081: i64;
    let mut _2082: i64;
    let mut _2083: isize;
    let mut _2085: !;
    let mut _2086: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _2088: state::events::LiquidationRecord;
    let mut _2089: ();
    let mut _2114: bool;
    let mut _2115: bool;
    let mut _2116: bool;
    let mut _2117: bool;
    let mut _2118: bool;
    let mut _2119: bool;
    let mut _2120: bool;
    let mut _2121: bool;
    let mut _2122: bool;
    let mut _2123: bool;
    let mut _2124: bool;
    let mut _2125: bool;
    let mut _2126: isize;
    let mut _2127: isize;
    let mut _2128: isize;
    let mut _2129: isize;
    let mut _2130: isize;
    let mut _2131: isize;
    let mut _2132: isize;
    let mut _2133: isize;
    let mut _2134: isize;
    let mut _2135: isize;
    let mut _2136: isize;
    let mut _2137: isize;
    let mut _2138: isize;
    let mut _2139: isize;
    let mut _2140: isize;
    let mut _2141: isize;
    let mut _2142: isize;
    let mut _2143: isize;
    let mut _2144: isize;
    let mut _2145: isize;
    let mut _2146: isize;
    let mut _2147: isize;
    let mut _2148: isize;
    let mut _2149: isize;
    let mut _2150: isize;
    let mut _2151: isize;
    let mut _2152: isize;
    let mut _2153: isize;
    let mut _2154: isize;
    let mut _2155: isize;
    let mut _2156: isize;
    let mut _2157: isize;
    let mut _2158: isize;
    let mut _2159: isize;
    let mut _2160: isize;
    let mut _2161: isize;
    let mut _2162: isize;
    let mut _2163: isize;
    let mut _2164: isize;
    let mut _2165: isize;
    let mut _2166: isize;
    let mut _2167: isize;
    let mut _2168: isize;
    let mut _2169: isize;
    let mut _2170: isize;
    let mut _2171: isize;
    let mut _2172: isize;
    let mut _2173: isize;
    let mut _2174: isize;
    let mut _2175: isize;
    let mut _2176: isize;
    let mut _2177: isize;
    let mut _2178: isize;
    let mut _2179: isize;
    let mut _2180: isize;
    let mut _2181: isize;
    let mut _2182: isize;
    let mut _2183: isize;
    let mut _2184: isize;
    let mut _2185: isize;
    let mut _2186: isize;
    let mut _2187: isize;
    let mut _2188: isize;
    let mut _2189: isize;
    let mut _2190: isize;
    let mut _2191: isize;
    let mut _2192: isize;
    let mut _2193: isize;
    let mut _2194: isize;
    let mut _2195: isize;
    let mut _2196: isize;
    let mut _2197: isize;
    let mut _2198: isize;
    let mut _2199: isize;
    let mut _2200: isize;
    scope 1 {
        debug liquidation_margin_buffer_ratio => _16;
        let _17: u128;
        scope 2 {
            debug initial_pct_to_liquidate => _17;
            let _19: u128;
            scope 3 {
                debug liquidation_duration => _19;
                let _27: error::ErrorCode;
                let _61: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _64: ();
                let _71: error::ErrorCode;
                let _105: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _108: ();
                let _115: error::ErrorCode;
                let _156: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _159: ();
                let _160: std::cell::Ref<'_, state::perp_market::PerpMarket>;
                let _167: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _170: std::cell::Ref<'_, state::perp_market::PerpMarket>;
                scope 4 {
                    debug error_code => _27;
                    let _34: std::string::String;
                    let _53: std::string::String;
                    let mut _2112: &[&str; 1];
                    let mut _2113: &[&str; 2];
                    scope 5 {
                        debug res => _34;
                    }
                    scope 6 {
                        debug res => _53;
                    }
                }
                scope 7 {
                    debug residual => _61;
                    scope 8 {
                    }
                }
                scope 9 {
                    debug val => _64;
                    scope 10 {
                    }
                }
                scope 11 {
                    debug error_code => _71;
                    let _78: std::string::String;
                    let _97: std::string::String;
                    let mut _2110: &[&str; 1];
                    let mut _2111: &[&str; 2];
                    scope 12 {
                        debug res => _78;
                    }
                    scope 13 {
                        debug res => _97;
                    }
                }
                scope 14 {
                    debug residual => _105;
                    scope 15 {
                    }
                }
                scope 16 {
                    debug val => _108;
                    scope 17 {
                    }
                }
                scope 18 {
                    debug error_code => _115;
                    let _122: std::string::String;
                    let _141: std::string::String;
                    let mut _2108: &[&str; 2];
                    let mut _2109: &[&str; 2];
                    scope 19 {
                        debug res => _122;
                    }
                    scope 20 {
                        debug res => _141;
                    }
                }
                scope 21 {
                    debug residual => _156;
                    scope 22 {
                    }
                }
                scope 23 {
                    debug val => _159;
                    scope 24 {
                    }
                }
                scope 25 {
                    debug market => _160;
                    let _180: error::ErrorCode;
                    let _221: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _224: ();
                    let _242: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _245: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                    let _248: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _251: ();
                    let _267: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _270: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                    let _273: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _276: ();
                    let _277: state::margin_calculation::MarginCalculation;
                    let _292: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _295: state::margin_calculation::MarginContext;
                    let _297: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _300: state::margin_calculation::MarginCalculation;
                    scope 30 {
                        debug error_code => _180;
                        let _187: std::string::String;
                        let _206: std::string::String;
                        let mut _2106: &[&str; 1];
                        let mut _2107: &[&str; 2];
                        scope 31 {
                            debug res => _187;
                        }
                        scope 32 {
                            debug res => _206;
                        }
                    }
                    scope 33 {
                        debug residual => _221;
                        scope 34 {
                        }
                    }
                    scope 35 {
                        debug val => _224;
                        scope 36 {
                        }
                    }
                    scope 37 {
                        debug residual => _242;
                        scope 38 {
                        }
                    }
                    scope 39 {
                        debug val => _245;
                        scope 40 {
                        }
                    }
                    scope 41 {
                        debug residual => _248;
                        scope 42 {
                        }
                    }
                    scope 43 {
                        debug val => _251;
                        scope 44 {
                        }
                    }
                    scope 45 {
                        debug residual => _267;
                        scope 46 {
                        }
                    }
                    scope 47 {
                        debug val => _270;
                        scope 48 {
                        }
                    }
                    scope 49 {
                        debug residual => _273;
                        scope 50 {
                        }
                    }
                    scope 51 {
                        debug val => _276;
                        scope 52 {
                        }
                    }
                    scope 53 {
                        debug margin_calculation => _277;
                        let _313: std::string::String;
                        let _334: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _337: bool;
                        let _351: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _354: &state::user::PerpPosition;
                        let _364: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _367: &mut state::user::PerpPosition;
                        let _368: u16;
                        let _374: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _377: u16;
                        let mut _2105: &[&str; 1];
                        scope 62 {
                            debug res => _313;
                        }
                        scope 63 {
                            debug residual => _334;
                            scope 64 {
                            }
                        }
                        scope 65 {
                            debug val => _337;
                            scope 66 {
                            }
                        }
                        scope 67 {
                            debug residual => _351;
                            scope 68 {
                            }
                        }
                        scope 69 {
                            debug val => _354;
                            scope 70 {
                            }
                        }
                        scope 71 {
                            debug residual => _364;
                            scope 72 {
                            }
                        }
                        scope 73 {
                            debug val => _367;
                            scope 74 {
                            }
                        }
                        scope 75 {
                            debug liquidation_id => _368;
                            let mut _378: u64;
                            scope 80 {
                                debug margin_freed => _378;
                                let _379: usize;
                                let _386: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _389: usize;
                                scope 81 {
                                    debug position_index => _379;
                                    let _404: error::ErrorCode;
                                    let _426: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _429: ();
                                    let _430: std::vec::Vec<u32>;
                                    let _447: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _450: std::vec::Vec<u32>;
                                    scope 86 {
                                        debug error_code => _404;
                                        let _411: std::string::String;
                                        let mut _2104: &[&str; 2];
                                        scope 87 {
                                            debug res => _411;
                                        }
                                    }
                                    scope 88 {
                                        debug residual => _426;
                                        scope 89 {
                                        }
                                    }
                                    scope 90 {
                                        debug val => _429;
                                        scope 91 {
                                        }
                                    }
                                    scope 92 {
                                        debug canceled_order_ids => _430;
                                        let mut _451: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                        let _458: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _461: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                        scope 97 {
                                            debug market => _451;
                                            let _462: &state::oracle::OraclePriceData;
                                            let _473: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _476: &state::oracle::OraclePriceData;
                                            scope 102 {
                                                debug oracle_price_data => _462;
                                                let _477: state::oracle::MMOraclePriceData;
                                                let _488: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _491: state::oracle::MMOraclePriceData;
                                                scope 107 {
                                                    debug mm_oracle_price_data => _477;
                                                    let _507: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _510: ();
                                                    let _511: i64;
                                                    let mut _2103: &state::perp_market::MarketStatus;
                                                    scope 112 {
                                                        debug residual => _507;
                                                        scope 113 {
                                                        }
                                                    }
                                                    scope 114 {
                                                        debug val => _510;
                                                        scope 115 {
                                                        }
                                                    }
                                                    scope 116 {
                                                        debug oracle_price => _511;
                                                        let _522: u64;
                                                        scope 117 {
                                                            debug lp_shares => _522;
                                                            let _523: state::margin_calculation::MarginCalculation;
                                                            let _528: state::margin_calculation::MarginCalculation;
                                                            let _543: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _546: state::margin_calculation::MarginContext;
                                                            let _548: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _551: state::margin_calculation::MarginCalculation;
                                                            scope 118 {
                                                                debug intermediate_margin_calculation => _523;
                                                                let _647: u64;
                                                                let _661: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _664: std::cell::Ref<'_, state::perp_market::PerpMarket>;
                                                                let _666: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _669: u64;
                                                                scope 150 {
                                                                    debug liquidator_max_base_asset_amount => _647;
                                                                    let _676: error::ErrorCode;
                                                                    let _710: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _713: ();
                                                                    let _715: std::cell::Ref<'_, state::perp_market::PerpMarket>;
                                                                    let _722: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _725: std::cell::Ref<'_, state::perp_market::PerpMarket>;
                                                                    let _785: u64;
                                                                    scope 159 {
                                                                        debug error_code => _676;
                                                                        let _683: std::string::String;
                                                                        let _702: std::string::String;
                                                                        let mut _2101: &[&str; 1];
                                                                        let mut _2102: &[&str; 2];
                                                                        scope 160 {
                                                                            debug res => _683;
                                                                        }
                                                                        scope 161 {
                                                                            debug res => _702;
                                                                        }
                                                                    }
                                                                    scope 162 {
                                                                        debug residual => _710;
                                                                        scope 163 {
                                                                        }
                                                                    }
                                                                    scope 164 {
                                                                        debug val => _713;
                                                                        scope 165 {
                                                                        }
                                                                    }
                                                                    scope 166 {
                                                                        debug perp_market => _715;
                                                                        let _732: bool;
                                                                        let _745: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _748: i64;
                                                                        let _750: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _753: bool;
                                                                        let mut _2100: &state::perp_market::MarketStatus;
                                                                        scope 171 {
                                                                            debug oracle_price_too_divergent => _732;
                                                                            let _759: error::ErrorCode;
                                                                            let _781: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _784: ();
                                                                            scope 180 {
                                                                                debug error_code => _759;
                                                                                let _766: std::string::String;
                                                                                let mut _2099: &[&str; 2];
                                                                                scope 181 {
                                                                                    debug res => _766;
                                                                                }
                                                                            }
                                                                            scope 182 {
                                                                                debug residual => _781;
                                                                                scope 183 {
                                                                                }
                                                                            }
                                                                            scope 184 {
                                                                                debug val => _784;
                                                                                scope 185 {
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 172 {
                                                                            debug residual => _745;
                                                                            scope 173 {
                                                                            }
                                                                        }
                                                                        scope 174 {
                                                                            debug val => _748;
                                                                            scope 175 {
                                                                            }
                                                                        }
                                                                        scope 176 {
                                                                            debug residual => _750;
                                                                            scope 177 {
                                                                            }
                                                                        }
                                                                        scope 178 {
                                                                            debug val => _753;
                                                                            scope 179 {
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 167 {
                                                                        debug residual => _722;
                                                                        scope 168 {
                                                                        }
                                                                    }
                                                                    scope 169 {
                                                                        debug val => _725;
                                                                        scope 170 {
                                                                        }
                                                                    }
                                                                    scope 186 {
                                                                        debug user_base_asset_amount => _785;
                                                                        let _790: u32;
                                                                        let _803: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _806: std::cell::Ref<'_, state::perp_market::PerpMarket>;
                                                                        let _812: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _815: u128;
                                                                        let _821: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _824: u32;
                                                                        scope 187 {
                                                                            debug margin_ratio => _790;
                                                                            let _825: u32;
                                                                            let _831: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _834: u32;
                                                                            scope 200 {
                                                                                debug margin_ratio_with_buffer => _825;
                                                                                let _835: u128;
                                                                                let _840: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _843: u128;
                                                                                scope 205 {
                                                                                    debug margin_shortage => _835;
                                                                                    let _844: std::cell::Ref<'_, state::perp_market::PerpMarket>;
                                                                                    let _851: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _854: std::cell::Ref<'_, state::perp_market::PerpMarket>;
                                                                                    scope 210 {
                                                                                        debug market => _844;
                                                                                        let _855: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                                                                        let _864: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _867: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                                                                        scope 215 {
                                                                                            debug quote_spot_market => _855;
                                                                                            let _868: i64;
                                                                                            let _880: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                            let _883: &state::oracle::OraclePriceData;
                                                                                            scope 220 {
                                                                                                debug quote_oracle_price => _868;
                                                                                                let _884: u32;
                                                                                                let _901: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                let _904: u32;
                                                                                                let _908: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                let _911: u32;
                                                                                                scope 225 {
                                                                                                    debug liquidator_fee => _884;
                                                                                                    let _912: u32;
                                                                                                    let _921: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                    let _924: u128;
                                                                                                    let _934: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                    let _937: u32;
                                                                                                    scope 234 {
                                                                                                        debug if_liquidation_fee => _912;
                                                                                                        let mut _938: u64;
                                                                                                        let _948: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _951: u64;
                                                                                                        scope 243 {
                                                                                                            debug base_asset_amount_to_cover_margin_shortage => _938;
                                                                                                            let _963: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                            let _966: u64;
                                                                                                            let _971: u128;
                                                                                                            let _980: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                            let _983: u128;
                                                                                                            scope 248 {
                                                                                                                debug residual => _963;
                                                                                                                scope 249 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 250 {
                                                                                                                debug val => _966;
                                                                                                                scope 251 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 252 {
                                                                                                                debug max_pct_allowed => _971;
                                                                                                                let _984: u64;
                                                                                                                let _996: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                let _999: u128;
                                                                                                                let _1002: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                let _1005: u128;
                                                                                                                let _1007: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                let _1010: u64;
                                                                                                                scope 257 {
                                                                                                                    debug max_base_asset_amount_allowed_to_be_transferred => _984;
                                                                                                                    let _1019: u64;
                                                                                                                    let _1030: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                    let _1033: i128;
                                                                                                                    let _1036: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                    let _1039: u128;
                                                                                                                    let _1041: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                    let _1044: u64;
                                                                                                                    scope 270 {
                                                                                                                        debug base_asset_value => _1019;
                                                                                                                        let _1045: u64;
                                                                                                                        scope 283 {
                                                                                                                            debug min_base_asset_amount => _1045;
                                                                                                                            let _1050: u64;
                                                                                                                            scope 284 {
                                                                                                                                debug base_asset_amount => _1050;
                                                                                                                                let _1057: u64;
                                                                                                                                let _1071: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                let _1074: std::cell::Ref<'_, state::perp_market::PerpMarket>;
                                                                                                                                let _1076: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                let _1079: u64;
                                                                                                                                scope 285 {
                                                                                                                                    debug base_asset_amount => _1057;
                                                                                                                                    let _1268: u64;
                                                                                                                                    let _1279: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                    let _1282: i128;
                                                                                                                                    let _1285: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                    let _1288: u128;
                                                                                                                                    let _1290: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                    let _1293: u64;
                                                                                                                                    scope 294 {
                                                                                                                                        debug limit_price => _1082;
                                                                                                                                        let _1082: u64;
                                                                                                                                        let _1083: u128;
                                                                                                                                        let _1088: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                        let _1091: u128;
                                                                                                                                        scope 295 {
                                                                                                                                            debug oracle_price_u128 => _1083;
                                                                                                                                            let _1092: u128;
                                                                                                                                            let _1104: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                            let _1107: u128;
                                                                                                                                            let _1109: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                            let _1112: u128;
                                                                                                                                            let _1114: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                            let _1117: u128;
                                                                                                                                            scope 300 {
                                                                                                                                                debug fee => _1092;
                                                                                                                                                let _1124: u128;
                                                                                                                                                let _1130: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                let _1133: u128;
                                                                                                                                                let _1196: u128;
                                                                                                                                                let _1202: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                let _1205: u128;
                                                                                                                                                scope 313 {
                                                                                                                                                    debug transfer_price => _1124;
                                                                                                                                                    let _1143: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                    let _1146: u128;
                                                                                                                                                    let _1148: error::ErrorCode;
                                                                                                                                                    let _1192: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                    let _1195: ();
                                                                                                                                                    scope 318 {
                                                                                                                                                        debug residual => _1143;
                                                                                                                                                        scope 319 {
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    scope 320 {
                                                                                                                                                        debug val => _1146;
                                                                                                                                                        scope 321 {
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    scope 322 {
                                                                                                                                                        debug error_code => _1148;
                                                                                                                                                        let _1155: std::string::String;
                                                                                                                                                        let _1174: std::string::String;
                                                                                                                                                        let mut _2097: &[&str; 3];
                                                                                                                                                        let mut _2098: &[&str; 2];
                                                                                                                                                        scope 323 {
                                                                                                                                                            debug res => _1155;
                                                                                                                                                        }
                                                                                                                                                        scope 324 {
                                                                                                                                                            debug res => _1174;
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    scope 325 {
                                                                                                                                                        debug residual => _1192;
                                                                                                                                                        scope 326 {
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    scope 327 {
                                                                                                                                                        debug val => _1195;
                                                                                                                                                        scope 328 {
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                scope 314 {
                                                                                                                                                    debug residual => _1130;
                                                                                                                                                    scope 315 {
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                scope 316 {
                                                                                                                                                    debug val => _1133;
                                                                                                                                                    scope 317 {
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                scope 329 {
                                                                                                                                                    debug transfer_price => _1196;
                                                                                                                                                    let _1215: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                    let _1218: u128;
                                                                                                                                                    let _1220: error::ErrorCode;
                                                                                                                                                    let _1264: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                    let _1267: ();
                                                                                                                                                    scope 334 {
                                                                                                                                                        debug residual => _1215;
                                                                                                                                                        scope 335 {
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    scope 336 {
                                                                                                                                                        debug val => _1218;
                                                                                                                                                        scope 337 {
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    scope 338 {
                                                                                                                                                        debug error_code => _1220;
                                                                                                                                                        let _1227: std::string::String;
                                                                                                                                                        let _1246: std::string::String;
                                                                                                                                                        let mut _2095: &[&str; 3];
                                                                                                                                                        let mut _2096: &[&str; 2];
                                                                                                                                                        scope 339 {
                                                                                                                                                            debug res => _1227;
                                                                                                                                                        }
                                                                                                                                                        scope 340 {
                                                                                                                                                            debug res => _1246;
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    scope 341 {
                                                                                                                                                        debug residual => _1264;
                                                                                                                                                        scope 342 {
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    scope 343 {
                                                                                                                                                        debug val => _1267;
                                                                                                                                                        scope 344 {
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                scope 330 {
                                                                                                                                                    debug residual => _1202;
                                                                                                                                                    scope 331 {
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                scope 332 {
                                                                                                                                                    debug val => _1205;
                                                                                                                                                    scope 333 {
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            scope 301 {
                                                                                                                                                debug residual => _1104;
                                                                                                                                                scope 302 {
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            scope 303 {
                                                                                                                                                debug val => _1107;
                                                                                                                                                scope 304 {
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            scope 305 {
                                                                                                                                                debug residual => _1109;
                                                                                                                                                scope 306 {
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            scope 307 {
                                                                                                                                                debug val => _1112;
                                                                                                                                                scope 308 {
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            scope 309 {
                                                                                                                                                debug residual => _1114;
                                                                                                                                                scope 310 {
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            scope 311 {
                                                                                                                                                debug val => _1117;
                                                                                                                                                scope 312 {
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        scope 296 {
                                                                                                                                            debug residual => _1088;
                                                                                                                                            scope 297 {
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        scope 298 {
                                                                                                                                            debug val => _1091;
                                                                                                                                            scope 299 {
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 345 {
                                                                                                                                        debug base_asset_value => _1268;
                                                                                                                                        let _1294: i64;
                                                                                                                                        let _1309: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                        let _1312: u128;
                                                                                                                                        let _1318: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                        let _1321: u128;
                                                                                                                                        let _1323: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                        let _1326: u128;
                                                                                                                                        let _1328: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                        let _1331: u128;
                                                                                                                                        let _1333: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                        let _1336: i64;
                                                                                                                                        scope 358 {
                                                                                                                                            debug liquidator_fee => _1294;
                                                                                                                                            let _1338: i64;
                                                                                                                                            let _1353: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                            let _1356: u128;
                                                                                                                                            let _1362: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                            let _1365: u128;
                                                                                                                                            let _1367: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                            let _1370: u128;
                                                                                                                                            let _1372: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                            let _1375: u128;
                                                                                                                                            let _1377: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                            let _1380: i64;
                                                                                                                                            scope 379 {
                                                                                                                                                debug if_fee => _1338;
                                                                                                                                                let _1396: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                let _1399: std::cell::Ref<'_, state::perp_market::PerpMarket>;
                                                                                                                                                let _1403: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                let _1406: ();
                                                                                                                                                let _1421: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                let _1424: std::cell::Ref<'_, state::perp_market::PerpMarket>;
                                                                                                                                                let _1428: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                let _1431: ();
                                                                                                                                                let _1432: controller::position::PositionDelta;
                                                                                                                                                let _1443: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                let _1446: controller::position::PositionDelta;
                                                                                                                                                scope 400 {
                                                                                                                                                    debug residual => _1396;
                                                                                                                                                    scope 401 {
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                scope 402 {
                                                                                                                                                    debug val => _1399;
                                                                                                                                                    scope 403 {
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                scope 404 {
                                                                                                                                                    debug residual => _1403;
                                                                                                                                                    scope 405 {
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                scope 406 {
                                                                                                                                                    debug val => _1406;
                                                                                                                                                    scope 407 {
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                scope 408 {
                                                                                                                                                    debug residual => _1421;
                                                                                                                                                    scope 409 {
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                scope 410 {
                                                                                                                                                    debug val => _1424;
                                                                                                                                                    scope 411 {
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                scope 412 {
                                                                                                                                                    debug residual => _1428;
                                                                                                                                                    scope 413 {
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                scope 414 {
                                                                                                                                                    debug val => _1431;
                                                                                                                                                    scope 415 {
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                scope 416 {
                                                                                                                                                    debug user_position_delta => _1432;
                                                                                                                                                    let _1447: controller::position::PositionDelta;
                                                                                                                                                    let _1458: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                    let _1461: controller::position::PositionDelta;
                                                                                                                                                    scope 421 {
                                                                                                                                                        debug liquidator_position_delta => _1447;
                                                                                                                                                        let _1462: controller::position::PositionDirection;
                                                                                                                                                        let _1463: controller::position::PositionDirection;
                                                                                                                                                        let _1464: std::option::Option<(u64, u64)>;
                                                                                                                                                        let _1465: controller::position::PositionDirection;
                                                                                                                                                        let _1466: std::option::Option<(u64, u64)>;
                                                                                                                                                        let mut _1468: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                                                                                                                                        let _1475: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                        let _1478: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                                                                                                                                        scope 426 {
                                                                                                                                                            debug user_existing_position_direction => _1462;
                                                                                                                                                            debug user_position_direction_to_close => _1463;
                                                                                                                                                            debug user_existing_position_params_for_order_action => _1464;
                                                                                                                                                            debug liquidator_existing_position_direction => _1465;
                                                                                                                                                            debug liquidator_existing_position_params_for_order_action => _1466;
                                                                                                                                                            let _1747: u64;
                                                                                                                                                            let _1758: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                            let _1761: (u64, state::margin_calculation::MarginCalculation);
                                                                                                                                                            scope 497 {
                                                                                                                                                                debug margin_freed_for_perp_position => _1747;
                                                                                                                                                                let _1768: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                let _1771: u64;
                                                                                                                                                                let _1778: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                let _1781: ();
                                                                                                                                                                let _1792: bool;
                                                                                                                                                                let _1800: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                let _1803: bool;
                                                                                                                                                                scope 502 {
                                                                                                                                                                    debug residual => _1768;
                                                                                                                                                                    scope 503 {
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                scope 504 {
                                                                                                                                                                    debug val => _1771;
                                                                                                                                                                    scope 505 {
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                scope 506 {
                                                                                                                                                                    debug residual => _1778;
                                                                                                                                                                    scope 507 {
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                scope 508 {
                                                                                                                                                                    debug val => _1781;
                                                                                                                                                                    scope 509 {
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                scope 510 {
                                                                                                                                                                    debug liquidator_meets_initial_margin_requirement => _1792;
                                                                                                                                                                    let _1809: error::ErrorCode;
                                                                                                                                                                    let _1834: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                    let _1837: ();
                                                                                                                                                                    let _1838: u32;
                                                                                                                                                                    let _1839: u32;
                                                                                                                                                                    scope 515 {
                                                                                                                                                                        debug error_code => _1809;
                                                                                                                                                                        let _1816: std::string::String;
                                                                                                                                                                        let mut _2090: &[&str; 2];
                                                                                                                                                                        scope 516 {
                                                                                                                                                                            debug res => _1816;
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                    scope 517 {
                                                                                                                                                                        debug residual => _1834;
                                                                                                                                                                        scope 518 {
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                    scope 519 {
                                                                                                                                                                        debug val => _1837;
                                                                                                                                                                        scope 520 {
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                    scope 521 {
                                                                                                                                                                        debug user_order_id => _1838;
                                                                                                                                                                        let _1845: u32;
                                                                                                                                                                        let _1846: u32;
                                                                                                                                                                        scope 523 {
                                                                                                                                                                            debug liquidator_order_id => _1845;
                                                                                                                                                                            let _1852: u64;
                                                                                                                                                                            let mut _1853: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                                                                                                                                                            let _1860: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                            let _1863: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                                                                                                                                                            scope 525 {
                                                                                                                                                                                debug fill_record_id => _1852;
                                                                                                                                                                                let _1874: state::user::Order;
                                                                                                                                                                                scope 532 {
                                                                                                                                                                                    debug user_order => _1874;
                                                                                                                                                                                    let _1902: state::user::Order;
                                                                                                                                                                                    scope 533 {
                                                                                                                                                                                        debug liquidator_order => _1902;
                                                                                                                                                                                        let _1935: std::option::Option<u64>;
                                                                                                                                                                                        let _1936: std::option::Option<u64>;
                                                                                                                                                                                        let _1943: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                                        let _1946: (std::option::Option<u64>, std::option::Option<u64>);
                                                                                                                                                                                        scope 535 {
                                                                                                                                                                                            debug taker_existing_quote_entry_amount => _1935;
                                                                                                                                                                                            debug taker_existing_base_asset_amount => _1936;
                                                                                                                                                                                            let _1947: std::option::Option<u64>;
                                                                                                                                                                                            let _1948: std::option::Option<u64>;
                                                                                                                                                                                            let _1955: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                                            let _1958: (std::option::Option<u64>, std::option::Option<u64>);
                                                                                                                                                                                            scope 540 {
                                                                                                                                                                                                debug maker_existing_quote_entry_amount => _1947;
                                                                                                                                                                                                debug maker_existing_base_asset_amount => _1948;
                                                                                                                                                                                                let _1959: state::events::OrderActionRecord;
                                                                                                                                                                                                let _1982: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                                                let _1985: u64;
                                                                                                                                                                                                scope 545 {
                                                                                                                                                                                                    debug fill_record => _1959;
                                                                                                                                                                                                    let _2074: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                                                    let _2077: u64;
                                                                                                                                                                                                    let _2084: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                                                    let _2087: u64;
                                                                                                                                                                                                    scope 550 {
                                                                                                                                                                                                        debug residual => _2074;
                                                                                                                                                                                                        scope 551 {
                                                                                                                                                                                                        }
                                                                                                                                                                                                    }
                                                                                                                                                                                                    scope 552 {
                                                                                                                                                                                                        debug val => _2077;
                                                                                                                                                                                                        scope 553 {
                                                                                                                                                                                                        }
                                                                                                                                                                                                    }
                                                                                                                                                                                                    scope 554 {
                                                                                                                                                                                                        debug residual => _2084;
                                                                                                                                                                                                        scope 555 {
                                                                                                                                                                                                        }
                                                                                                                                                                                                    }
                                                                                                                                                                                                    scope 556 {
                                                                                                                                                                                                        debug val => _2087;
                                                                                                                                                                                                        scope 557 {
                                                                                                                                                                                                        }
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                                scope 546 {
                                                                                                                                                                                                    debug residual => _1982;
                                                                                                                                                                                                    scope 547 {
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                                scope 548 {
                                                                                                                                                                                                    debug val => _1985;
                                                                                                                                                                                                    scope 549 {
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                            scope 541 {
                                                                                                                                                                                                debug residual => _1955;
                                                                                                                                                                                                scope 542 {
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                            scope 543 {
                                                                                                                                                                                                debug val => _1958;
                                                                                                                                                                                                scope 544 {
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                        scope 536 {
                                                                                                                                                                                            debug residual => _1943;
                                                                                                                                                                                            scope 537 {
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                        scope 538 {
                                                                                                                                                                                            debug val => _1946;
                                                                                                                                                                                            scope 539 {
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                    scope 534 {
                                                                                                                                                                                        debug price => _1906;
                                                                                                                                                                                        let _1906: u64;
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                            scope 526 {
                                                                                                                                                                                debug market => _1853;
                                                                                                                                                                                let _1864: u64;
                                                                                                                                                                                scope 531 {
                                                                                                                                                                                    debug current_id => _1864;
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                            scope 527 {
                                                                                                                                                                                debug residual => _1860;
                                                                                                                                                                                scope 528 {
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                            scope 529 {
                                                                                                                                                                                debug val => _1863;
                                                                                                                                                                                scope 530 {
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                        scope 524 {
                                                                                                                                                                            debug current_id => _1846;
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                    scope 522 {
                                                                                                                                                                        debug current_id => _1839;
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                scope 511 {
                                                                                                                                                                    debug residual => _1800;
                                                                                                                                                                    scope 512 {
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                scope 513 {
                                                                                                                                                                    debug val => _1803;
                                                                                                                                                                    scope 514 {
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                            scope 498 {
                                                                                                                                                                debug residual => _1758;
                                                                                                                                                                scope 499 {
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                            scope 500 {
                                                                                                                                                                debug val => _1761;
                                                                                                                                                                scope 501 {
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        scope 427 {
                                                                                                                                                            debug market => _1468;
                                                                                                                                                            let _1479: &mut state::user::PerpPosition;
                                                                                                                                                            let _1485: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                            let _1488: &mut state::user::PerpPosition;
                                                                                                                                                            scope 432 {
                                                                                                                                                                debug user_position => _1479;
                                                                                                                                                                let _1489: controller::position::PositionDirection;
                                                                                                                                                                scope 437 {
                                                                                                                                                                    debug user_existing_position_direction => _1489;
                                                                                                                                                                    let _1491: controller::position::PositionDirection;
                                                                                                                                                                    scope 438 {
                                                                                                                                                                        debug user_position_direction_to_close => _1491;
                                                                                                                                                                        let _1493: std::option::Option<(u64, u64)>;
                                                                                                                                                                        scope 439 {
                                                                                                                                                                            debug user_existing_position_params => _1493;
                                                                                                                                                                            let _1507: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                            let _1510: i64;
                                                                                                                                                                            let _1521: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                            let _1524: ();
                                                                                                                                                                            let _1535: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                            let _1538: ();
                                                                                                                                                                            let _1551: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                            let _1554: bool;
                                                                                                                                                                            let _1556: error::ErrorCode;
                                                                                                                                                                            let _1602: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                            let _1605: ();
                                                                                                                                                                            let _1606: &mut state::user::PerpPosition;
                                                                                                                                                                            let _1612: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                            let _1615: &mut state::user::PerpPosition;
                                                                                                                                                                            scope 440 {
                                                                                                                                                                                debug residual => _1507;
                                                                                                                                                                                scope 441 {
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                            scope 442 {
                                                                                                                                                                                debug val => _1510;
                                                                                                                                                                                scope 443 {
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                            scope 444 {
                                                                                                                                                                                debug residual => _1521;
                                                                                                                                                                                scope 445 {
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                            scope 446 {
                                                                                                                                                                                debug val => _1524;
                                                                                                                                                                                scope 447 {
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                            scope 448 {
                                                                                                                                                                                debug residual => _1535;
                                                                                                                                                                                scope 449 {
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                            scope 450 {
                                                                                                                                                                                debug val => _1538;
                                                                                                                                                                                scope 451 {
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                            scope 452 {
                                                                                                                                                                                debug residual => _1551;
                                                                                                                                                                                scope 453 {
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                            scope 454 {
                                                                                                                                                                                debug val => _1554;
                                                                                                                                                                                scope 455 {
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                            scope 456 {
                                                                                                                                                                                debug error_code => _1556;
                                                                                                                                                                                let _1563: std::string::String;
                                                                                                                                                                                let _1582: std::string::String;
                                                                                                                                                                                let mut _2093: &[&str; 2];
                                                                                                                                                                                let mut _2094: &[&str; 2];
                                                                                                                                                                                scope 457 {
                                                                                                                                                                                    debug res => _1563;
                                                                                                                                                                                }
                                                                                                                                                                                scope 458 {
                                                                                                                                                                                    debug res => _1582;
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                            scope 459 {
                                                                                                                                                                                debug residual => _1602;
                                                                                                                                                                                scope 460 {
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                            scope 461 {
                                                                                                                                                                                debug val => _1605;
                                                                                                                                                                                scope 462 {
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                            scope 463 {
                                                                                                                                                                                debug liquidator_position => _1606;
                                                                                                                                                                                let _1616: controller::position::PositionDirection;
                                                                                                                                                                                scope 468 {
                                                                                                                                                                                    debug liquidator_existing_position_direction => _1616;
                                                                                                                                                                                    let _1618: std::option::Option<(u64, u64)>;
                                                                                                                                                                                    scope 469 {
                                                                                                                                                                                        debug liquidator_existing_position_params => _1618;
                                                                                                                                                                                        let _1632: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                                        let _1635: i64;
                                                                                                                                                                                        let _1648: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                                        let _1651: ();
                                                                                                                                                                                        let _1664: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                                        let _1667: bool;
                                                                                                                                                                                        let _1669: error::ErrorCode;
                                                                                                                                                                                        let _1715: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                                        let _1718: ();
                                                                                                                                                                                        let _1731: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                                        let _1734: u128;
                                                                                                                                                                                        let _1736: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                                                                        let _1739: u128;
                                                                                                                                                                                        scope 470 {
                                                                                                                                                                                            debug residual => _1632;
                                                                                                                                                                                            scope 471 {
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                        scope 472 {
                                                                                                                                                                                            debug val => _1635;
                                                                                                                                                                                            scope 473 {
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                        scope 474 {
                                                                                                                                                                                            debug residual => _1648;
                                                                                                                                                                                            scope 475 {
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                        scope 476 {
                                                                                                                                                                                            debug val => _1651;
                                                                                                                                                                                            scope 477 {
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                        scope 478 {
                                                                                                                                                                                            debug residual => _1664;
                                                                                                                                                                                            scope 479 {
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                        scope 480 {
                                                                                                                                                                                            debug val => _1667;
                                                                                                                                                                                            scope 481 {
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                        scope 482 {
                                                                                                                                                                                            debug error_code => _1669;
                                                                                                                                                                                            let _1676: std::string::String;
                                                                                                                                                                                            let _1695: std::string::String;
                                                                                                                                                                                            let mut _2091: &[&str; 2];
                                                                                                                                                                                            let mut _2092: &[&str; 2];
                                                                                                                                                                                            scope 483 {
                                                                                                                                                                                                debug res => _1676;
                                                                                                                                                                                            }
                                                                                                                                                                                            scope 484 {
                                                                                                                                                                                                debug res => _1695;
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                        scope 485 {
                                                                                                                                                                                            debug residual => _1715;
                                                                                                                                                                                            scope 486 {
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                        scope 487 {
                                                                                                                                                                                            debug val => _1718;
                                                                                                                                                                                            scope 488 {
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                        scope 489 {
                                                                                                                                                                                            debug residual => _1731;
                                                                                                                                                                                            scope 490 {
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                        scope 491 {
                                                                                                                                                                                            debug val => _1734;
                                                                                                                                                                                            scope 492 {
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                        scope 493 {
                                                                                                                                                                                            debug residual => _1736;
                                                                                                                                                                                            scope 494 {
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                        scope 495 {
                                                                                                                                                                                            debug val => _1739;
                                                                                                                                                                                            scope 496 {
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                            scope 464 {
                                                                                                                                                                                debug residual => _1612;
                                                                                                                                                                                scope 465 {
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                            scope 466 {
                                                                                                                                                                                debug val => _1615;
                                                                                                                                                                                scope 467 {
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                            scope 433 {
                                                                                                                                                                debug residual => _1485;
                                                                                                                                                                scope 434 {
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                            scope 435 {
                                                                                                                                                                debug val => _1488;
                                                                                                                                                                scope 436 {
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        scope 428 {
                                                                                                                                                            debug residual => _1475;
                                                                                                                                                            scope 429 {
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        scope 430 {
                                                                                                                                                            debug val => _1478;
                                                                                                                                                            scope 431 {
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    scope 422 {
                                                                                                                                                        debug residual => _1458;
                                                                                                                                                        scope 423 {
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    scope 424 {
                                                                                                                                                        debug val => _1461;
                                                                                                                                                        scope 425 {
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                scope 417 {
                                                                                                                                                    debug residual => _1443;
                                                                                                                                                    scope 418 {
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                scope 419 {
                                                                                                                                                    debug val => _1446;
                                                                                                                                                    scope 420 {
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            scope 380 {
                                                                                                                                                debug residual => _1353;
                                                                                                                                                scope 381 {
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            scope 382 {
                                                                                                                                                debug val => _1356;
                                                                                                                                                scope 383 {
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            scope 384 {
                                                                                                                                                debug residual => _1362;
                                                                                                                                                scope 385 {
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            scope 386 {
                                                                                                                                                debug val => _1365;
                                                                                                                                                scope 387 {
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            scope 388 {
                                                                                                                                                debug residual => _1367;
                                                                                                                                                scope 389 {
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            scope 390 {
                                                                                                                                                debug val => _1370;
                                                                                                                                                scope 391 {
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            scope 392 {
                                                                                                                                                debug residual => _1372;
                                                                                                                                                scope 393 {
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            scope 394 {
                                                                                                                                                debug val => _1375;
                                                                                                                                                scope 395 {
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            scope 396 {
                                                                                                                                                debug residual => _1377;
                                                                                                                                                scope 397 {
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            scope 398 {
                                                                                                                                                debug val => _1380;
                                                                                                                                                scope 399 {
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        scope 359 {
                                                                                                                                            debug residual => _1309;
                                                                                                                                            scope 360 {
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        scope 361 {
                                                                                                                                            debug val => _1312;
                                                                                                                                            scope 362 {
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        scope 363 {
                                                                                                                                            debug residual => _1318;
                                                                                                                                            scope 364 {
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        scope 365 {
                                                                                                                                            debug val => _1321;
                                                                                                                                            scope 366 {
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        scope 367 {
                                                                                                                                            debug residual => _1323;
                                                                                                                                            scope 368 {
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        scope 369 {
                                                                                                                                            debug val => _1326;
                                                                                                                                            scope 370 {
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        scope 371 {
                                                                                                                                            debug residual => _1328;
                                                                                                                                            scope 372 {
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        scope 373 {
                                                                                                                                            debug val => _1331;
                                                                                                                                            scope 374 {
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        scope 375 {
                                                                                                                                            debug residual => _1333;
                                                                                                                                            scope 376 {
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        scope 377 {
                                                                                                                                            debug val => _1336;
                                                                                                                                            scope 378 {
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 346 {
                                                                                                                                        debug residual => _1279;
                                                                                                                                        scope 347 {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 348 {
                                                                                                                                        debug val => _1282;
                                                                                                                                        scope 349 {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 350 {
                                                                                                                                        debug residual => _1285;
                                                                                                                                        scope 351 {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 352 {
                                                                                                                                        debug val => _1288;
                                                                                                                                        scope 353 {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 354 {
                                                                                                                                        debug residual => _1290;
                                                                                                                                        scope 355 {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 356 {
                                                                                                                                        debug val => _1293;
                                                                                                                                        scope 357 {
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 286 {
                                                                                                                                    debug residual => _1071;
                                                                                                                                    scope 287 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 288 {
                                                                                                                                    debug val => _1074;
                                                                                                                                    scope 289 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 290 {
                                                                                                                                    debug residual => _1076;
                                                                                                                                    scope 291 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 292 {
                                                                                                                                    debug val => _1079;
                                                                                                                                    scope 293 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 271 {
                                                                                                                        debug residual => _1030;
                                                                                                                        scope 272 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 273 {
                                                                                                                        debug val => _1033;
                                                                                                                        scope 274 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 275 {
                                                                                                                        debug residual => _1036;
                                                                                                                        scope 276 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 277 {
                                                                                                                        debug val => _1039;
                                                                                                                        scope 278 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 279 {
                                                                                                                        debug residual => _1041;
                                                                                                                        scope 280 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 281 {
                                                                                                                        debug val => _1044;
                                                                                                                        scope 282 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 258 {
                                                                                                                    debug residual => _996;
                                                                                                                    scope 259 {
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 260 {
                                                                                                                    debug val => _999;
                                                                                                                    scope 261 {
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 262 {
                                                                                                                    debug residual => _1002;
                                                                                                                    scope 263 {
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 264 {
                                                                                                                    debug val => _1005;
                                                                                                                    scope 265 {
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 266 {
                                                                                                                    debug residual => _1007;
                                                                                                                    scope 267 {
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 268 {
                                                                                                                    debug val => _1010;
                                                                                                                    scope 269 {
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                            scope 253 {
                                                                                                                debug residual => _980;
                                                                                                                scope 254 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 255 {
                                                                                                                debug val => _983;
                                                                                                                scope 256 {
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        scope 244 {
                                                                                                            debug residual => _948;
                                                                                                            scope 245 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 246 {
                                                                                                            debug val => _951;
                                                                                                            scope 247 {
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    scope 235 {
                                                                                                        debug residual => _921;
                                                                                                        scope 236 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 237 {
                                                                                                        debug val => _924;
                                                                                                        scope 238 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 239 {
                                                                                                        debug residual => _934;
                                                                                                        scope 240 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 241 {
                                                                                                        debug val => _937;
                                                                                                        scope 242 {
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                scope 226 {
                                                                                                    debug residual => _901;
                                                                                                    scope 227 {
                                                                                                    }
                                                                                                }
                                                                                                scope 228 {
                                                                                                    debug val => _904;
                                                                                                    scope 229 {
                                                                                                    }
                                                                                                }
                                                                                                scope 230 {
                                                                                                    debug residual => _908;
                                                                                                    scope 231 {
                                                                                                    }
                                                                                                }
                                                                                                scope 232 {
                                                                                                    debug val => _911;
                                                                                                    scope 233 {
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            scope 221 {
                                                                                                debug residual => _880;
                                                                                                scope 222 {
                                                                                                }
                                                                                            }
                                                                                            scope 223 {
                                                                                                debug val => _883;
                                                                                                scope 224 {
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 216 {
                                                                                            debug residual => _864;
                                                                                            scope 217 {
                                                                                            }
                                                                                        }
                                                                                        scope 218 {
                                                                                            debug val => _867;
                                                                                            scope 219 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    scope 211 {
                                                                                        debug residual => _851;
                                                                                        scope 212 {
                                                                                        }
                                                                                    }
                                                                                    scope 213 {
                                                                                        debug val => _854;
                                                                                        scope 214 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                                scope 206 {
                                                                                    debug residual => _840;
                                                                                    scope 207 {
                                                                                    }
                                                                                }
                                                                                scope 208 {
                                                                                    debug val => _843;
                                                                                    scope 209 {
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 201 {
                                                                                debug residual => _831;
                                                                                scope 202 {
                                                                                }
                                                                            }
                                                                            scope 203 {
                                                                                debug val => _834;
                                                                                scope 204 {
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 188 {
                                                                            debug residual => _803;
                                                                            scope 189 {
                                                                            }
                                                                        }
                                                                        scope 190 {
                                                                            debug val => _806;
                                                                            scope 191 {
                                                                            }
                                                                        }
                                                                        scope 192 {
                                                                            debug residual => _812;
                                                                            scope 193 {
                                                                            }
                                                                        }
                                                                        scope 194 {
                                                                            debug val => _815;
                                                                            scope 195 {
                                                                            }
                                                                        }
                                                                        scope 196 {
                                                                            debug residual => _821;
                                                                            scope 197 {
                                                                            }
                                                                        }
                                                                        scope 198 {
                                                                            debug val => _824;
                                                                            scope 199 {
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                scope 151 {
                                                                    debug residual => _661;
                                                                    scope 152 {
                                                                    }
                                                                }
                                                                scope 153 {
                                                                    debug val => _664;
                                                                    scope 154 {
                                                                    }
                                                                }
                                                                scope 155 {
                                                                    debug residual => _666;
                                                                    scope 156 {
                                                                    }
                                                                }
                                                                scope 157 {
                                                                    debug val => _669;
                                                                    scope 158 {
                                                                    }
                                                                }
                                                            }
                                                            scope 119 {
                                                                debug intermediate_margin_calculation => _528;
                                                                let _552: u128;
                                                                let _557: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _560: u128;
                                                                scope 128 {
                                                                    debug initial_margin_shortage => _552;
                                                                    let _561: u128;
                                                                    let _566: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _569: u128;
                                                                    scope 133 {
                                                                        debug new_margin_shortage => _561;
                                                                        let _577: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _580: u64;
                                                                        let _587: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _590: ();
                                                                        let _597: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _600: bool;
                                                                        scope 138 {
                                                                            debug residual => _577;
                                                                            scope 139 {
                                                                            }
                                                                        }
                                                                        scope 140 {
                                                                            debug val => _580;
                                                                            scope 141 {
                                                                            }
                                                                        }
                                                                        scope 142 {
                                                                            debug residual => _587;
                                                                            scope 143 {
                                                                            }
                                                                        }
                                                                        scope 144 {
                                                                            debug val => _590;
                                                                            scope 145 {
                                                                            }
                                                                        }
                                                                        scope 146 {
                                                                            debug residual => _597;
                                                                            scope 147 {
                                                                            }
                                                                        }
                                                                        scope 148 {
                                                                            debug val => _600;
                                                                            scope 149 {
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 134 {
                                                                        debug residual => _566;
                                                                        scope 135 {
                                                                        }
                                                                    }
                                                                    scope 136 {
                                                                        debug val => _569;
                                                                        scope 137 {
                                                                        }
                                                                    }
                                                                }
                                                                scope 129 {
                                                                    debug residual => _557;
                                                                    scope 130 {
                                                                    }
                                                                }
                                                                scope 131 {
                                                                    debug val => _560;
                                                                    scope 132 {
                                                                    }
                                                                }
                                                            }
                                                            scope 120 {
                                                                debug residual => _543;
                                                                scope 121 {
                                                                }
                                                            }
                                                            scope 122 {
                                                                debug val => _546;
                                                                scope 123 {
                                                                }
                                                            }
                                                            scope 124 {
                                                                debug residual => _548;
                                                                scope 125 {
                                                                }
                                                            }
                                                            scope 126 {
                                                                debug val => _551;
                                                                scope 127 {
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                scope 108 {
                                                    debug residual => _488;
                                                    scope 109 {
                                                    }
                                                }
                                                scope 110 {
                                                    debug val => _491;
                                                    scope 111 {
                                                    }
                                                }
                                            }
                                            scope 103 {
                                                debug residual => _473;
                                                scope 104 {
                                                }
                                            }
                                            scope 105 {
                                                debug val => _476;
                                                scope 106 {
                                                }
                                            }
                                        }
                                        scope 98 {
                                            debug residual => _458;
                                            scope 99 {
                                            }
                                        }
                                        scope 100 {
                                            debug val => _461;
                                            scope 101 {
                                            }
                                        }
                                    }
                                    scope 93 {
                                        debug residual => _447;
                                        scope 94 {
                                        }
                                    }
                                    scope 95 {
                                        debug val => _450;
                                        scope 96 {
                                        }
                                    }
                                }
                                scope 82 {
                                    debug residual => _386;
                                    scope 83 {
                                    }
                                }
                                scope 84 {
                                    debug val => _389;
                                    scope 85 {
                                    }
                                }
                            }
                        }
                        scope 76 {
                            debug residual => _374;
                            scope 77 {
                            }
                        }
                        scope 78 {
                            debug val => _377;
                            scope 79 {
                            }
                        }
                    }
                    scope 54 {
                        debug residual => _292;
                        scope 55 {
                        }
                    }
                    scope 56 {
                        debug val => _295;
                        scope 57 {
                        }
                    }
                    scope 58 {
                        debug residual => _297;
                        scope 59 {
                        }
                    }
                    scope 60 {
                        debug val => _300;
                        scope 61 {
                        }
                    }
                }
                scope 26 {
                    debug residual => _167;
                    scope 27 {
                    }
                }
                scope 28 {
                    debug val => _170;
                    scope 29 {
                    }
                }
            }
        }
    }

    bb0: {
        _2125 = const false;
        _2122 = const false;
        _2121 = const false;
        _2118 = const false;
        _2117 = const false;
        _2124 = const false;
        _2123 = const false;
        _2120 = const false;
        _2119 = const false;
        _2116 = const false;
        _2115 = const false;
        _2114 = const false;
        StorageLive(_16);
        _16 = ((*_15).11: u32);
        StorageLive(_17);
        StorageLive(_18);
        _18 = ((*_15).21: u16);
        _17 = move _18 as u128 (IntToInt);
        StorageDead(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = ((*_15).20: u8);
        _19 = move _20 as u128 (IntToInt);
        StorageDead(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &(*_4);
        _24 = User::is_bankrupt(move _25) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _24) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_25);
        StorageLive(_27);
        _27 = error::ErrorCode::UserBankrupt;
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _2113 = const _;
        _38 = &(*_2113);
        _37 = &(*_38);
        _36 = move _37 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_37);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = &_27;
        _45 = &(*_46);
        _44 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _45) -> [return: bb4, unwind continue];
    }

    bb3: {
        StorageDead(_25);
        StorageLive(_26);
        _26 = ();
        _23 = std::result::Result::<(), error::ErrorCode>::Ok(move _26);
        StorageDead(_26);
        goto -> bb15;
    }

    bb4: {
        StorageDead(_45);
        _43 = [move _44];
        StorageDead(_44);
        _42 = &_43;
        _41 = &(*_42);
        _40 = move _41 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_41);
        _35 = Arguments::<'_>::new_v1(move _36, move _40) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_40);
        StorageDead(_36);
        _34 = format(move _35) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_35);
        StorageDead(_46);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_38);
        _33 = move _34;
        StorageDead(_34);
        _32 = &_33;
        _31 = &(*_32);
        _30 = <String as Deref>::deref(move _31) -> [return: bb7, unwind: bb1047];
    }

    bb7: {
        _29 = &(*_30);
        StorageDead(_31);
        _28 = solana_program::log::sol_log(move _29) -> [return: bb8, unwind: bb1047];
    }

    bb8: {
        StorageDead(_29);
        drop(_33) -> [return: bb9, unwind: bb1048];
    }

    bb9: {
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_30);
        StorageDead(_28);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _2112 = const _;
        _57 = &(*_2112);
        _56 = &(*_57);
        _55 = move _56 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_56);
        _54 = Arguments::<'_>::new_const(move _55) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_55);
        _53 = format(move _54) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_54);
        StorageDead(_57);
        _52 = move _53;
        StorageDead(_53);
        _51 = &_52;
        _50 = &(*_51);
        _49 = <String as Deref>::deref(move _50) -> [return: bb12, unwind: bb1046];
    }

    bb12: {
        _48 = &(*_49);
        StorageDead(_50);
        _47 = solana_program::log::sol_log(move _48) -> [return: bb13, unwind: bb1046];
    }

    bb13: {
        StorageDead(_48);
        drop(_52) -> [return: bb14, unwind: bb1048];
    }

    bb14: {
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_49);
        StorageDead(_47);
        StorageLive(_59);
        _59 = _27;
        _23 = std::result::Result::<(), error::ErrorCode>::Err(move _59);
        StorageDead(_59);
        StorageDead(_27);
        goto -> bb15;
    }

    bb15: {
        StorageDead(_24);
        _22 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _23) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_23);
        _60 = discriminant(_22);
        switchInt(move _60) -> [0: bb17, 1: bb19, otherwise: bb18];
    }

    bb17: {
        StorageLive(_64);
        _64 = ((_22 as Continue).0: ());
        _21 = _64;
        StorageDead(_64);
        StorageDead(_22);
        StorageDead(_21);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &(*_7);
        _68 = User::is_bankrupt(move _69) -> [return: bb21, unwind continue];
    }

    bb18: {
        unreachable;
    }

    bb19: {
        StorageLive(_61);
        _61 = ((_22 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_63);
        _63 = _61;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _63) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_63);
        StorageDead(_61);
        StorageDead(_22);
        StorageDead(_21);
        goto -> bb1003;
    }

    bb21: {
        switchInt(move _68) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        StorageDead(_69);
        StorageLive(_71);
        _71 = error::ErrorCode::UserBankrupt;
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _2111 = const _;
        _82 = &(*_2111);
        _81 = &(*_82);
        _80 = move _81 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_81);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        _90 = &_71;
        _89 = &(*_90);
        _88 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _89) -> [return: bb24, unwind continue];
    }

    bb23: {
        StorageDead(_69);
        StorageLive(_70);
        _70 = ();
        _67 = std::result::Result::<(), error::ErrorCode>::Ok(move _70);
        StorageDead(_70);
        goto -> bb35;
    }

    bb24: {
        StorageDead(_89);
        _87 = [move _88];
        StorageDead(_88);
        _86 = &_87;
        _85 = &(*_86);
        _84 = move _85 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_85);
        _79 = Arguments::<'_>::new_v1(move _80, move _84) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_84);
        StorageDead(_80);
        _78 = format(move _79) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_79);
        StorageDead(_90);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_82);
        _77 = move _78;
        StorageDead(_78);
        _76 = &_77;
        _75 = &(*_76);
        _74 = <String as Deref>::deref(move _75) -> [return: bb27, unwind: bb1045];
    }

    bb27: {
        _73 = &(*_74);
        StorageDead(_75);
        _72 = solana_program::log::sol_log(move _73) -> [return: bb28, unwind: bb1045];
    }

    bb28: {
        StorageDead(_73);
        drop(_77) -> [return: bb29, unwind: bb1048];
    }

    bb29: {
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_74);
        StorageDead(_72);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _2110 = const _;
        _101 = &(*_2110);
        _100 = &(*_101);
        _99 = move _100 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_100);
        _98 = Arguments::<'_>::new_const(move _99) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_99);
        _97 = format(move _98) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_98);
        StorageDead(_101);
        _96 = move _97;
        StorageDead(_97);
        _95 = &_96;
        _94 = &(*_95);
        _93 = <String as Deref>::deref(move _94) -> [return: bb32, unwind: bb1044];
    }

    bb32: {
        _92 = &(*_93);
        StorageDead(_94);
        _91 = solana_program::log::sol_log(move _92) -> [return: bb33, unwind: bb1044];
    }

    bb33: {
        StorageDead(_92);
        drop(_96) -> [return: bb34, unwind: bb1048];
    }

    bb34: {
        StorageDead(_96);
        StorageDead(_95);
        StorageDead(_93);
        StorageDead(_91);
        StorageLive(_103);
        _103 = _71;
        _67 = std::result::Result::<(), error::ErrorCode>::Err(move _103);
        StorageDead(_103);
        StorageDead(_71);
        goto -> bb35;
    }

    bb35: {
        StorageDead(_68);
        _66 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _67) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_67);
        _104 = discriminant(_66);
        switchInt(move _104) -> [0: bb37, 1: bb38, otherwise: bb18];
    }

    bb37: {
        StorageLive(_108);
        _108 = ((_66 as Continue).0: ());
        _65 = _108;
        StorageDead(_108);
        StorageDead(_66);
        StorageDead(_65);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        _113 = ((*_7).27: u8);
        _112 = Eq(move _113, const 0_u8);
        switchInt(move _112) -> [0: bb41, otherwise: bb40];
    }

    bb38: {
        StorageLive(_105);
        _105 = ((_66 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_107);
        _107 = _105;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _107) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_107);
        StorageDead(_105);
        StorageDead(_66);
        StorageDead(_65);
        goto -> bb1003;
    }

    bb40: {
        StorageDead(_113);
        StorageLive(_114);
        _114 = ();
        _111 = std::result::Result::<(), error::ErrorCode>::Ok(move _114);
        StorageDead(_114);
        goto -> bb54;
    }

    bb41: {
        StorageDead(_113);
        StorageLive(_115);
        _115 = error::ErrorCode::InvalidPoolId;
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        _2109 = const _;
        _126 = &(*_2109);
        _125 = &(*_126);
        _124 = move _125 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_125);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        _134 = &_115;
        _133 = &(*_134);
        _132 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _133) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_133);
        _131 = [move _132];
        StorageDead(_132);
        _130 = &_131;
        _129 = &(*_130);
        _128 = move _129 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_129);
        _123 = Arguments::<'_>::new_v1(move _124, move _128) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_128);
        StorageDead(_124);
        _122 = format(move _123) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_123);
        StorageDead(_134);
        StorageDead(_131);
        StorageDead(_130);
        StorageDead(_126);
        _121 = move _122;
        StorageDead(_122);
        _120 = &_121;
        _119 = &(*_120);
        _118 = <String as Deref>::deref(move _119) -> [return: bb45, unwind: bb1043];
    }

    bb45: {
        _117 = &(*_118);
        StorageDead(_119);
        _116 = solana_program::log::sol_log(move _117) -> [return: bb46, unwind: bb1043];
    }

    bb46: {
        StorageDead(_117);
        drop(_121) -> [return: bb47, unwind: bb1048];
    }

    bb47: {
        StorageDead(_121);
        StorageDead(_120);
        StorageDead(_118);
        StorageDead(_116);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        _2108 = const _;
        _145 = &(*_2108);
        _144 = &(*_145);
        _143 = move _144 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_144);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        _153 = &((*_7).27: u8);
        _152 = &(*_153);
        _151 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _152) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_152);
        _150 = [move _151];
        StorageDead(_151);
        _149 = &_150;
        _148 = &(*_149);
        _147 = move _148 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_148);
        _142 = Arguments::<'_>::new_v1(move _143, move _147) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_147);
        StorageDead(_143);
        _141 = format(move _142) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_142);
        StorageDead(_153);
        StorageDead(_150);
        StorageDead(_149);
        StorageDead(_145);
        _140 = move _141;
        StorageDead(_141);
        _139 = &_140;
        _138 = &(*_139);
        _137 = <String as Deref>::deref(move _138) -> [return: bb51, unwind: bb1042];
    }

    bb51: {
        _136 = &(*_137);
        StorageDead(_138);
        _135 = solana_program::log::sol_log(move _136) -> [return: bb52, unwind: bb1042];
    }

    bb52: {
        StorageDead(_136);
        drop(_140) -> [return: bb53, unwind: bb1048];
    }

    bb53: {
        StorageDead(_140);
        StorageDead(_139);
        StorageDead(_137);
        StorageDead(_135);
        StorageLive(_154);
        _154 = _115;
        _111 = std::result::Result::<(), error::ErrorCode>::Err(move _154);
        StorageDead(_154);
        StorageDead(_115);
        goto -> bb54;
    }

    bb54: {
        StorageDead(_112);
        _110 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _111) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_111);
        _155 = discriminant(_110);
        switchInt(move _155) -> [0: bb56, 1: bb57, otherwise: bb18];
    }

    bb56: {
        StorageLive(_159);
        _159 = ((_110 as Continue).0: ());
        _109 = _159;
        StorageDead(_159);
        StorageDead(_110);
        StorageDead(_109);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        _163 = &(*_10);
        StorageLive(_164);
        StorageLive(_165);
        _165 = &_1;
        _164 = &(*_165);
        _162 = PerpMarketMap::<'_>::get_ref(move _163, move _164) -> [return: bb59, unwind continue];
    }

    bb57: {
        StorageLive(_156);
        _156 = ((_110 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_158);
        _158 = _156;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _158) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_158);
        StorageDead(_156);
        StorageDead(_110);
        StorageDead(_109);
        goto -> bb1003;
    }

    bb59: {
        StorageDead(_164);
        StorageDead(_163);
        _161 = <std::result::Result<Ref<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _162) -> [return: bb60, unwind: bb1048];
    }

    bb60: {
        StorageDead(_162);
        _166 = discriminant(_161);
        switchInt(move _166) -> [0: bb61, 1: bb62, otherwise: bb18];
    }

    bb61: {
        StorageLive(_170);
        _170 = move ((_161 as Continue).0: std::cell::Ref<'_, state::perp_market::PerpMarket>);
        _2125 = const true;
        _160 = move _170;
        StorageDead(_170);
        _2128 = discriminant(_161);
        StorageDead(_165);
        StorageDead(_161);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        _177 = &_160;
        _176 = <Ref<'_, PerpMarket> as Deref>::deref(move _177) -> [return: bb64, unwind: bb1092];
    }

    bb62: {
        StorageLive(_167);
        _167 = ((_161 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_169);
        _169 = _167;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _169) -> [return: bb63, unwind: bb1093];
    }

    bb63: {
        StorageDead(_169);
        StorageDead(_167);
        _2126 = discriminant(_161);
        StorageDead(_165);
        StorageDead(_161);
        goto -> bb1002;
    }

    bb64: {
        _175 = &(*_176);
        StorageDead(_177);
        StorageLive(_178);
        _178 = PerpOperation::Liquidation;
        _174 = PerpMarket::is_operation_paused(move _175, move _178) -> [return: bb65, unwind: bb1092];
    }

    bb65: {
        switchInt(move _174) -> [0: bb67, otherwise: bb66];
    }

    bb66: {
        StorageDead(_178);
        StorageDead(_175);
        StorageDead(_176);
        StorageLive(_180);
        _180 = error::ErrorCode::InvalidLiquidation;
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        _2107 = const _;
        _191 = &(*_2107);
        _190 = &(*_191);
        _189 = move _190 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_190);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        _199 = &_180;
        _198 = &(*_199);
        _197 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _198) -> [return: bb68, unwind: bb1092];
    }

    bb67: {
        StorageDead(_178);
        StorageDead(_175);
        StorageDead(_176);
        StorageLive(_179);
        _179 = ();
        _173 = std::result::Result::<(), error::ErrorCode>::Ok(move _179);
        StorageDead(_179);
        goto -> bb80;
    }

    bb68: {
        StorageDead(_198);
        _196 = [move _197];
        StorageDead(_197);
        _195 = &_196;
        _194 = &(*_195);
        _193 = move _194 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_194);
        _188 = Arguments::<'_>::new_v1(move _189, move _193) -> [return: bb69, unwind: bb1092];
    }

    bb69: {
        StorageDead(_193);
        StorageDead(_189);
        _187 = format(move _188) -> [return: bb70, unwind: bb1092];
    }

    bb70: {
        StorageDead(_188);
        StorageDead(_199);
        StorageDead(_196);
        StorageDead(_195);
        StorageDead(_191);
        _186 = move _187;
        StorageDead(_187);
        _185 = &_186;
        _184 = &(*_185);
        _183 = <String as Deref>::deref(move _184) -> [return: bb71, unwind: bb1041];
    }

    bb71: {
        _182 = &(*_183);
        StorageDead(_184);
        _181 = solana_program::log::sol_log(move _182) -> [return: bb72, unwind: bb1041];
    }

    bb72: {
        StorageDead(_182);
        drop(_186) -> [return: bb73, unwind: bb1092];
    }

    bb73: {
        StorageDead(_186);
        StorageDead(_185);
        StorageDead(_183);
        StorageDead(_181);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        _2106 = const _;
        _210 = &(*_2106);
        _209 = &(*_210);
        _208 = move _209 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_209);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        _218 = &_1;
        _217 = &(*_218);
        _216 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _217) -> [return: bb74, unwind: bb1092];
    }

    bb74: {
        StorageDead(_217);
        _215 = [move _216];
        StorageDead(_216);
        _214 = &_215;
        _213 = &(*_214);
        _212 = move _213 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_213);
        _207 = Arguments::<'_>::new_v1(move _208, move _212) -> [return: bb75, unwind: bb1092];
    }

    bb75: {
        StorageDead(_212);
        StorageDead(_208);
        _206 = format(move _207) -> [return: bb76, unwind: bb1092];
    }

    bb76: {
        StorageDead(_207);
        StorageDead(_218);
        StorageDead(_215);
        StorageDead(_214);
        StorageDead(_210);
        _205 = move _206;
        StorageDead(_206);
        _204 = &_205;
        _203 = &(*_204);
        _202 = <String as Deref>::deref(move _203) -> [return: bb77, unwind: bb1040];
    }

    bb77: {
        _201 = &(*_202);
        StorageDead(_203);
        _200 = solana_program::log::sol_log(move _201) -> [return: bb78, unwind: bb1040];
    }

    bb78: {
        StorageDead(_201);
        drop(_205) -> [return: bb79, unwind: bb1092];
    }

    bb79: {
        StorageDead(_205);
        StorageDead(_204);
        StorageDead(_202);
        StorageDead(_200);
        StorageLive(_219);
        _219 = _180;
        _173 = std::result::Result::<(), error::ErrorCode>::Err(move _219);
        StorageDead(_219);
        StorageDead(_180);
        goto -> bb80;
    }

    bb80: {
        StorageDead(_174);
        _172 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _173) -> [return: bb81, unwind: bb1092];
    }

    bb81: {
        StorageDead(_173);
        _220 = discriminant(_172);
        switchInt(move _220) -> [0: bb82, 1: bb83, otherwise: bb18];
    }

    bb82: {
        StorageLive(_224);
        _224 = ((_172 as Continue).0: ());
        _171 = _224;
        StorageDead(_224);
        StorageDead(_172);
        StorageDead(_171);
        StorageLive(_225);
        StorageLive(_226);
        _2125 = const false;
        _226 = move _160;
        _225 = std::mem::drop::<Ref<'_, PerpMarket>>(move _226) -> [return: bb85, unwind: bb1092];
    }

    bb83: {
        StorageLive(_221);
        _221 = ((_172 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_223);
        _223 = _221;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _223) -> [return: bb84, unwind: bb1092];
    }

    bb84: {
        StorageDead(_223);
        StorageDead(_221);
        StorageDead(_172);
        StorageDead(_171);
        goto -> bb1068;
    }

    bb85: {
        StorageDead(_226);
        StorageDead(_225);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        _230 = &mut (*_4);
        StorageLive(_231);
        _231 = &(*_5);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        _238 = &(*_10);
        StorageLive(_239);
        StorageLive(_240);
        _240 = &_1;
        _239 = &(*_240);
        _237 = PerpMarketMap::<'_>::get_ref_mut(move _238, move _239) -> [return: bb86, unwind: bb1092];
    }

    bb86: {
        StorageDead(_239);
        StorageDead(_238);
        _236 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _237) -> [return: bb87, unwind: bb1092];
    }

    bb87: {
        _2124 = const true;
        StorageDead(_237);
        _241 = discriminant(_236);
        switchInt(move _241) -> [0: bb88, 1: bb89, otherwise: bb18];
    }

    bb88: {
        StorageLive(_245);
        _245 = move ((_236 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _235 = move _245;
        StorageDead(_245);
        _234 = &mut _235;
        _233 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _234) -> [return: bb91, unwind: bb1039];
    }

    bb89: {
        StorageLive(_242);
        _242 = ((_236 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_244);
        _244 = _242;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _244) -> [return: bb90, unwind: bb1090];
    }

    bb90: {
        StorageDead(_244);
        StorageDead(_242);
        StorageDead(_234);
        StorageDead(_232);
        StorageDead(_231);
        StorageDead(_230);
        StorageDead(_229);
        goto -> bb1066;
    }

    bb91: {
        _232 = &mut (*_233);
        StorageDead(_234);
        StorageLive(_246);
        _246 = _14;
        _229 = controller::funding::settle_funding_payment(move _230, move _231, move _232, move _246) -> [return: bb92, unwind: bb1039];
    }

    bb92: {
        StorageDead(_246);
        StorageDead(_232);
        StorageDead(_231);
        StorageDead(_230);
        _228 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _229) -> [return: bb93, unwind: bb1039];
    }

    bb93: {
        StorageDead(_229);
        _247 = discriminant(_228);
        switchInt(move _247) -> [0: bb94, 1: bb95, otherwise: bb18];
    }

    bb94: {
        StorageLive(_251);
        _251 = ((_228 as Continue).0: ());
        _227 = _251;
        StorageDead(_251);
        drop(_235) -> [return: bb1049, unwind: bb1090];
    }

    bb95: {
        StorageLive(_248);
        _248 = ((_228 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_250);
        _250 = _248;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _250) -> [return: bb96, unwind: bb1039];
    }

    bb96: {
        StorageDead(_250);
        StorageDead(_248);
        drop(_235) -> [return: bb1066, unwind: bb1090];
    }

    bb97: {
        StorageDead(_264);
        StorageDead(_263);
        _261 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _262) -> [return: bb98, unwind: bb1092];
    }

    bb98: {
        _2123 = const true;
        StorageDead(_262);
        _266 = discriminant(_261);
        switchInt(move _266) -> [0: bb99, 1: bb100, otherwise: bb18];
    }

    bb99: {
        StorageLive(_270);
        _270 = move ((_261 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _260 = move _270;
        StorageDead(_270);
        _259 = &mut _260;
        _258 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _259) -> [return: bb102, unwind: bb1038];
    }

    bb100: {
        StorageLive(_267);
        _267 = ((_261 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_269);
        _269 = _267;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _269) -> [return: bb101, unwind: bb1089];
    }

    bb101: {
        StorageDead(_269);
        StorageDead(_267);
        StorageDead(_259);
        StorageDead(_257);
        StorageDead(_256);
        StorageDead(_255);
        StorageDead(_254);
        goto -> bb1065;
    }

    bb102: {
        _257 = &mut (*_258);
        StorageDead(_259);
        StorageLive(_271);
        _271 = _14;
        _254 = controller::funding::settle_funding_payment(move _255, move _256, move _257, move _271) -> [return: bb103, unwind: bb1038];
    }

    bb103: {
        StorageDead(_271);
        StorageDead(_257);
        StorageDead(_256);
        StorageDead(_255);
        _253 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _254) -> [return: bb104, unwind: bb1038];
    }

    bb104: {
        StorageDead(_254);
        _272 = discriminant(_253);
        switchInt(move _272) -> [0: bb105, 1: bb106, otherwise: bb18];
    }

    bb105: {
        StorageLive(_276);
        _276 = ((_253 as Continue).0: ());
        _252 = _276;
        StorageDead(_276);
        drop(_260) -> [return: bb1050, unwind: bb1089];
    }

    bb106: {
        StorageLive(_273);
        _273 = ((_253 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_275);
        _275 = _273;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _275) -> [return: bb107, unwind: bb1038];
    }

    bb107: {
        StorageDead(_275);
        StorageDead(_273);
        drop(_260) -> [return: bb1065, unwind: bb1089];
    }

    bb108: {
        StorageDead(_288);
        StorageLive(_289);
        StorageLive(_290);
        _290 = _1;
        _289 = MarketIdentifier::perp(move _290) -> [return: bb109, unwind: bb1092];
    }

    bb109: {
        StorageDead(_290);
        _286 = MarginContext::track_market_margin_requirement(move _287, move _289) -> [return: bb110, unwind: bb1092];
    }

    bb110: {
        StorageDead(_289);
        StorageDead(_287);
        _285 = <std::result::Result<MarginContext, error::ErrorCode> as Try>::branch(move _286) -> [return: bb111, unwind: bb1092];
    }

    bb111: {
        StorageDead(_286);
        _291 = discriminant(_285);
        switchInt(move _291) -> [0: bb112, 1: bb113, otherwise: bb18];
    }

    bb112: {
        StorageLive(_295);
        _295 = ((_285 as Continue).0: state::margin_calculation::MarginContext);
        _284 = _295;
        StorageDead(_295);
        _279 = math::margin::calculate_margin_requirement_and_total_collateral_and_liability_info(move _280, move _281, move _282, move _283, move _284) -> [return: bb115, unwind: bb1092];
    }

    bb113: {
        StorageLive(_292);
        _292 = ((_285 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_294);
        _294 = _292;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _294) -> [return: bb114, unwind: bb1092];
    }

    bb114: {
        StorageDead(_294);
        StorageDead(_292);
        StorageDead(_284);
        StorageDead(_283);
        StorageDead(_282);
        StorageDead(_281);
        StorageDead(_280);
        StorageDead(_279);
        goto -> bb1000;
    }

    bb115: {
        StorageDead(_284);
        StorageDead(_283);
        StorageDead(_282);
        StorageDead(_281);
        StorageDead(_280);
        _278 = <std::result::Result<MarginCalculation, error::ErrorCode> as Try>::branch(move _279) -> [return: bb116, unwind: bb1092];
    }

    bb116: {
        StorageDead(_279);
        _296 = discriminant(_278);
        switchInt(move _296) -> [0: bb117, 1: bb118, otherwise: bb18];
    }

    bb117: {
        StorageLive(_300);
        _300 = ((_278 as Continue).0: state::margin_calculation::MarginCalculation);
        _277 = _300;
        StorageDead(_300);
        StorageDead(_285);
        StorageDead(_278);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        _303 = &(*_4);
        _302 = User::is_being_liquidated(move _303) -> [return: bb120, unwind: bb1092];
    }

    bb118: {
        StorageLive(_297);
        _297 = ((_278 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_299);
        _299 = _297;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _299) -> [return: bb119, unwind: bb1092];
    }

    bb119: {
        StorageDead(_299);
        StorageDead(_297);
        goto -> bb1000;
    }

    bb120: {
        switchInt(move _302) -> [0: bb122, otherwise: bb121];
    }

    bb121: {
        StorageDead(_303);
        goto -> bb132;
    }

    bb122: {
        StorageDead(_303);
        StorageLive(_304);
        StorageLive(_305);
        _305 = &_277;
        _304 = MarginCalculation::meets_margin_requirement(move _305) -> [return: bb123, unwind: bb1092];
    }

    bb123: {
        switchInt(move _304) -> [0: bb131, otherwise: bb124];
    }

    bb124: {
        StorageDead(_305);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        StorageLive(_311);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        _2105 = const _;
        _317 = &(*_2105);
        _316 = &(*_317);
        _315 = move _316 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_316);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        StorageLive(_325);
        _325 = &_277;
        _324 = &(*_325);
        _323 = core::fmt::rt::Argument::<'_>::new_debug::<MarginCalculation>(move _324) -> [return: bb125, unwind: bb1092];
    }

    bb125: {
        StorageDead(_324);
        _322 = [move _323];
        StorageDead(_323);
        _321 = &_322;
        _320 = &(*_321);
        _319 = move _320 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_320);
        _314 = Arguments::<'_>::new_v1(move _315, move _319) -> [return: bb126, unwind: bb1092];
    }

    bb126: {
        StorageDead(_319);
        StorageDead(_315);
        _313 = format(move _314) -> [return: bb127, unwind: bb1092];
    }

    bb127: {
        StorageDead(_314);
        StorageDead(_325);
        StorageDead(_322);
        StorageDead(_321);
        StorageDead(_317);
        _312 = move _313;
        StorageDead(_313);
        _311 = &_312;
        _310 = &(*_311);
        _309 = <String as Deref>::deref(move _310) -> [return: bb128, unwind: bb1037];
    }

    bb128: {
        _308 = &(*_309);
        StorageDead(_310);
        _307 = solana_program::log::sol_log(move _308) -> [return: bb129, unwind: bb1037];
    }

    bb129: {
        StorageDead(_308);
        drop(_312) -> [return: bb130, unwind: bb1092];
    }

    bb130: {
        StorageDead(_312);
        StorageDead(_311);
        StorageDead(_309);
        StorageDead(_307);
        StorageLive(_326);
        _326 = error::ErrorCode::SufficientCollateral;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _326);
        StorageDead(_326);
        goto -> bb999;
    }

    bb131: {
        StorageDead(_305);
        goto -> bb132;
    }

    bb132: {
        StorageLive(_327);
        StorageLive(_328);
        _328 = &(*_4);
        _327 = User::is_being_liquidated(move _328) -> [return: bb133, unwind: bb1092];
    }

    bb133: {
        switchInt(move _327) -> [0: bb143, otherwise: bb134];
    }

    bb134: {
        StorageDead(_328);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        _332 = &_277;
        _331 = MarginCalculation::can_exit_liquidation(move _332) -> [return: bb135, unwind: bb1092];
    }

    bb135: {
        StorageDead(_332);
        _330 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _331) -> [return: bb136, unwind: bb1092];
    }

    bb136: {
        StorageDead(_331);
        _333 = discriminant(_330);
        switchInt(move _333) -> [0: bb137, 1: bb138, otherwise: bb18];
    }

    bb137: {
        StorageLive(_337);
        _337 = ((_330 as Continue).0: bool);
        _329 = _337;
        StorageDead(_337);
        switchInt(move _329) -> [0: bb141, otherwise: bb140];
    }

    bb138: {
        StorageLive(_334);
        _334 = ((_330 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_336);
        _336 = _334;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _336) -> [return: bb139, unwind: bb1092];
    }

    bb139: {
        StorageDead(_336);
        StorageDead(_334);
        StorageDead(_330);
        goto -> bb998;
    }

    bb140: {
        StorageDead(_330);
        StorageLive(_339);
        StorageLive(_340);
        _340 = &mut (*_4);
        _339 = User::exit_liquidation(move _340) -> [return: bb142, unwind: bb1092];
    }

    bb141: {
        StorageDead(_330);
        goto -> bb144;
    }

    bb142: {
        StorageDead(_340);
        StorageDead(_339);
        StorageLive(_341);
        _341 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _341);
        StorageDead(_341);
        goto -> bb998;
    }

    bb143: {
        StorageDead(_328);
        goto -> bb144;
    }

    bb144: {
        _301 = const ();
        StorageDead(_329);
        StorageDead(_327);
        StorageDead(_304);
        StorageDead(_302);
        StorageDead(_301);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        _346 = &(*_4);
        StorageLive(_347);
        _347 = _1;
        _345 = User::get_perp_position(move _346, move _347) -> [return: bb145, unwind: bb1092];
    }

    bb145: {
        StorageDead(_347);
        StorageDead(_346);
        StorageLive(_348);
        StorageLive(_349);
        _349 = &_1;
        _348 = {closure@programs/drift/src/controller/liquidation.rs:159:50: 159:53} { market_index: move _349 };
        StorageDead(_349);
        _344 = std::result::Result::<&PerpPosition, error::ErrorCode>::map_err::<error::ErrorCode, {closure@programs/drift/src/controller/liquidation.rs:159:50: 159:53}>(move _345, move _348) -> [return: bb146, unwind: bb1092];
    }

    bb146: {
        StorageDead(_348);
        StorageDead(_345);
        _343 = <std::result::Result<&PerpPosition, error::ErrorCode> as Try>::branch(move _344) -> [return: bb147, unwind: bb1092];
    }

    bb147: {
        StorageDead(_344);
        _350 = discriminant(_343);
        switchInt(move _350) -> [0: bb148, 1: bb149, otherwise: bb18];
    }

    bb148: {
        StorageLive(_354);
        _354 = ((_343 as Continue).0: &state::user::PerpPosition);
        _342 = _354;
        StorageDead(_354);
        StorageDead(_343);
        StorageDead(_342);
        StorageLive(_355);
        StorageLive(_356);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        _359 = &mut (*_7);
        StorageLive(_360);
        _360 = _1;
        _358 = User::force_get_perp_position_mut(move _359, move _360) -> [return: bb151, unwind: bb1092];
    }

    bb149: {
        StorageLive(_351);
        _351 = ((_343 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_353);
        _353 = _351;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _353) -> [return: bb150, unwind: bb1092];
    }

    bb150: {
        StorageDead(_353);
        StorageDead(_351);
        StorageDead(_343);
        StorageDead(_342);
        goto -> bb1001;
    }

    bb151: {
        StorageDead(_360);
        StorageDead(_359);
        StorageLive(_361);
        StorageLive(_362);
        _362 = &_1;
        _361 = {closure@programs/drift/src/controller/liquidation.rs:169:18: 169:21} { market_index: move _362 };
        StorageDead(_362);
        _357 = std::result::Result::<&mut PerpPosition, error::ErrorCode>::map_err::<error::ErrorCode, {closure@programs/drift/src/controller/liquidation.rs:169:18: 169:21}>(move _358, move _361) -> [return: bb152, unwind: bb1092];
    }

    bb152: {
        StorageDead(_361);
        StorageDead(_358);
        _356 = <std::result::Result<&mut PerpPosition, error::ErrorCode> as Try>::branch(move _357) -> [return: bb153, unwind: bb1092];
    }

    bb153: {
        StorageDead(_357);
        _363 = discriminant(_356);
        switchInt(move _363) -> [0: bb154, 1: bb155, otherwise: bb18];
    }

    bb154: {
        StorageLive(_367);
        _367 = move ((_356 as Continue).0: &mut state::user::PerpPosition);
        _355 = move _367;
        StorageDead(_367);
        StorageDead(_356);
        StorageDead(_355);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        StorageLive(_371);
        _371 = &mut (*_4);
        StorageLive(_372);
        _372 = _13;
        _370 = User::enter_liquidation(move _371, move _372) -> [return: bb157, unwind: bb1092];
    }

    bb155: {
        StorageLive(_364);
        _364 = ((_356 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_366);
        _366 = _364;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _366) -> [return: bb156, unwind: bb1092];
    }

    bb156: {
        StorageDead(_366);
        StorageDead(_364);
        StorageDead(_356);
        StorageDead(_355);
        goto -> bb1001;
    }

    bb157: {
        StorageDead(_372);
        StorageDead(_371);
        _369 = <std::result::Result<u16, error::ErrorCode> as Try>::branch(move _370) -> [return: bb158, unwind: bb1092];
    }

    bb158: {
        StorageDead(_370);
        _373 = discriminant(_369);
        switchInt(move _373) -> [0: bb159, 1: bb160, otherwise: bb18];
    }

    bb159: {
        StorageLive(_377);
        _377 = ((_369 as Continue).0: u16);
        _368 = _377;
        StorageDead(_377);
        StorageDead(_369);
        StorageLive(_378);
        _378 = const 0_u64;
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        StorageLive(_382);
        StorageLive(_383);
        _383 = &((*_4).4: [state::user::PerpPosition; 8]);
        _382 = &(*_383);
        StorageLive(_384);
        _384 = _1;
        _381 = get_position_index(move _382, move _384) -> [return: bb162, unwind: bb1092];
    }

    bb160: {
        StorageLive(_374);
        _374 = ((_369 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_376);
        _376 = _374;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _376) -> [return: bb161, unwind: bb1092];
    }

    bb161: {
        StorageDead(_376);
        StorageDead(_374);
        StorageDead(_369);
        goto -> bb997;
    }

    bb162: {
        StorageDead(_384);
        StorageDead(_382);
        _380 = <std::result::Result<usize, error::ErrorCode> as Try>::branch(move _381) -> [return: bb163, unwind: bb1092];
    }

    bb163: {
        StorageDead(_381);
        _385 = discriminant(_380);
        switchInt(move _385) -> [0: bb164, 1: bb165, otherwise: bb18];
    }

    bb164: {
        StorageLive(_389);
        _389 = ((_380 as Continue).0: usize);
        _379 = _389;
        StorageDead(_389);
        StorageDead(_383);
        StorageDead(_380);
        StorageLive(_390);
        StorageLive(_391);
        StorageLive(_392);
        StorageLive(_393);
        StorageLive(_394);
        StorageLive(_395);
        _395 = _379;
        _396 = Len(((*_4).4: [state::user::PerpPosition; 8]));
        _397 = Lt(_395, _396);
        assert(move _397, "index out of bounds: the length is {} but the index is {}", move _396, _395) -> [success: bb167, unwind: bb1092];
    }

    bb165: {
        StorageLive(_386);
        _386 = ((_380 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_388);
        _388 = _386;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _388) -> [return: bb166, unwind: bb1092];
    }

    bb166: {
        StorageDead(_388);
        StorageDead(_386);
        StorageDead(_383);
        StorageDead(_380);
        goto -> bb996;
    }

    bb167: {
        _394 = &((*_4).4: [state::user::PerpPosition; 8])[_395];
        _393 = PerpPosition::is_open_position(move _394) -> [return: bb168, unwind: bb1092];
    }

    bb168: {
        switchInt(move _393) -> [0: bb170, otherwise: bb169];
    }

    bb169: {
        StorageDead(_395);
        StorageDead(_394);
        goto -> bb173;
    }

    bb170: {
        StorageDead(_395);
        StorageDead(_394);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        _400 = _379;
        _401 = Len(((*_4).4: [state::user::PerpPosition; 8]));
        _402 = Lt(_400, _401);
        assert(move _402, "index out of bounds: the length is {} but the index is {}", move _401, _400) -> [success: bb171, unwind: bb1092];
    }

    bb171: {
        _399 = &((*_4).4: [state::user::PerpPosition; 8])[_400];
        _398 = PerpPosition::has_open_order(move _399) -> [return: bb172, unwind: bb1092];
    }

    bb172: {
        switchInt(move _398) -> [0: bb174, otherwise: bb173];
    }

    bb173: {
        StorageDead(_400);
        StorageDead(_399);
        StorageLive(_403);
        _403 = ();
        _392 = std::result::Result::<(), error::ErrorCode>::Ok(move _403);
        StorageDead(_403);
        goto -> bb181;
    }

    bb174: {
        StorageDead(_400);
        StorageDead(_399);
        StorageLive(_404);
        _404 = error::ErrorCode::PositionDoesntHaveOpenPositionOrOrders;
        StorageLive(_405);
        StorageLive(_406);
        StorageLive(_407);
        StorageLive(_408);
        StorageLive(_409);
        StorageLive(_410);
        StorageLive(_411);
        StorageLive(_412);
        StorageLive(_413);
        StorageLive(_414);
        StorageLive(_415);
        _2104 = const _;
        _415 = &(*_2104);
        _414 = &(*_415);
        _413 = move _414 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_414);
        StorageLive(_417);
        StorageLive(_418);
        StorageLive(_419);
        StorageLive(_420);
        StorageLive(_421);
        StorageLive(_422);
        StorageLive(_423);
        _423 = &_404;
        _422 = &(*_423);
        _421 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _422) -> [return: bb175, unwind: bb1092];
    }

    bb175: {
        StorageDead(_422);
        _420 = [move _421];
        StorageDead(_421);
        _419 = &_420;
        _418 = &(*_419);
        _417 = move _418 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_418);
        _412 = Arguments::<'_>::new_v1(move _413, move _417) -> [return: bb176, unwind: bb1092];
    }

    bb176: {
        StorageDead(_417);
        StorageDead(_413);
        _411 = format(move _412) -> [return: bb177, unwind: bb1092];
    }

    bb177: {
        StorageDead(_412);
        StorageDead(_423);
        StorageDead(_420);
        StorageDead(_419);
        StorageDead(_415);
        _410 = move _411;
        StorageDead(_411);
        _409 = &_410;
        _408 = &(*_409);
        _407 = <String as Deref>::deref(move _408) -> [return: bb178, unwind: bb1036];
    }

    bb178: {
        _406 = &(*_407);
        StorageDead(_408);
        _405 = solana_program::log::sol_log(move _406) -> [return: bb179, unwind: bb1036];
    }

    bb179: {
        StorageDead(_406);
        drop(_410) -> [return: bb180, unwind: bb1092];
    }

    bb180: {
        StorageDead(_410);
        StorageDead(_409);
        StorageDead(_407);
        StorageDead(_405);
        StorageLive(_424);
        _424 = _404;
        _392 = std::result::Result::<(), error::ErrorCode>::Err(move _424);
        StorageDead(_424);
        StorageDead(_404);
        goto -> bb181;
    }

    bb181: {
        StorageDead(_398);
        StorageDead(_393);
        _391 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _392) -> [return: bb182, unwind: bb1092];
    }

    bb182: {
        StorageDead(_392);
        _425 = discriminant(_391);
        switchInt(move _425) -> [0: bb183, 1: bb184, otherwise: bb18];
    }

    bb183: {
        StorageLive(_429);
        _429 = ((_391 as Continue).0: ());
        _390 = _429;
        StorageDead(_429);
        StorageDead(_391);
        StorageDead(_390);
        StorageLive(_430);
        StorageLive(_431);
        StorageLive(_432);
        StorageLive(_433);
        _433 = &mut (*_4);
        StorageLive(_434);
        _434 = &(*_5);
        StorageLive(_435);
        StorageLive(_436);
        _436 = &(*_8);
        _435 = Option::<&anchor_lang::prelude::Pubkey>::Some(move _436);
        StorageDead(_436);
        StorageLive(_437);
        _437 = &(*_10);
        StorageLive(_438);
        _438 = &(*_11);
        StorageLive(_439);
        _439 = &mut (*_12);
        StorageLive(_440);
        _440 = _14;
        StorageLive(_441);
        _441 = _13;
        StorageLive(_442);
        _442 = OrderActionExplanation::Liquidation;
        StorageLive(_443);
        _443 = Option::<state::user::MarketType>::None;
        StorageLive(_444);
        _444 = Option::<u16>::None;
        StorageLive(_445);
        _445 = Option::<controller::position::PositionDirection>::None;
        _432 = controller::orders::cancel_orders(move _433, move _434, move _435, move _437, move _438, move _439, move _440, move _441, move _442, move _443, move _444, move _445) -> [return: bb186, unwind: bb1092];
    }

    bb184: {
        StorageLive(_426);
        _426 = ((_391 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_428);
        _428 = _426;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _428) -> [return: bb185, unwind: bb1092];
    }

    bb185: {
        StorageDead(_428);
        StorageDead(_426);
        StorageDead(_391);
        StorageDead(_390);
        goto -> bb996;
    }

    bb186: {
        StorageDead(_445);
        StorageDead(_444);
        StorageDead(_443);
        StorageDead(_442);
        StorageDead(_441);
        StorageDead(_440);
        StorageDead(_439);
        StorageDead(_438);
        StorageDead(_437);
        StorageDead(_435);
        StorageDead(_434);
        StorageDead(_433);
        _431 = <std::result::Result<Vec<u32>, error::ErrorCode> as Try>::branch(move _432) -> [return: bb187, unwind: bb1092];
    }

    bb187: {
        StorageDead(_432);
        _446 = discriminant(_431);
        switchInt(move _446) -> [0: bb188, 1: bb189, otherwise: bb18];
    }

    bb188: {
        StorageLive(_450);
        _450 = move ((_431 as Continue).0: std::vec::Vec<u32>);
        _2122 = const true;
        _430 = move _450;
        StorageDead(_450);
        _2136 = discriminant(_431);
        StorageDead(_431);
        StorageLive(_451);
        StorageLive(_452);
        StorageLive(_453);
        StorageLive(_454);
        _454 = &(*_10);
        StorageLive(_455);
        StorageLive(_456);
        _456 = &_1;
        _455 = &(*_456);
        _453 = PerpMarketMap::<'_>::get_ref_mut(move _454, move _455) -> [return: bb191, unwind: bb1087];
    }

    bb189: {
        StorageLive(_447);
        _447 = ((_431 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_449);
        _449 = _447;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _449) -> [return: bb190, unwind: bb1088];
    }

    bb190: {
        StorageDead(_449);
        StorageDead(_447);
        _2134 = discriminant(_431);
        StorageDead(_431);
        goto -> bb995;
    }

    bb191: {
        StorageDead(_455);
        StorageDead(_454);
        _452 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _453) -> [return: bb192, unwind: bb1087];
    }

    bb192: {
        StorageDead(_453);
        _457 = discriminant(_452);
        switchInt(move _457) -> [0: bb193, 1: bb194, otherwise: bb18];
    }

    bb193: {
        StorageLive(_461);
        _461 = move ((_452 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _2121 = const true;
        _451 = move _461;
        StorageDead(_461);
        _2140 = discriminant(_452);
        StorageDead(_456);
        StorageDead(_452);
        StorageLive(_462);
        StorageLive(_463);
        StorageLive(_464);
        StorageLive(_465);
        _465 = &mut (*_12);
        StorageLive(_466);
        StorageLive(_467);
        StorageLive(_468);
        StorageLive(_469);
        StorageLive(_470);
        StorageLive(_471);
        _471 = &_451;
        _470 = <RefMut<'_, PerpMarket> as Deref>::deref(move _471) -> [return: bb196, unwind: bb1084];
    }

    bb194: {
        StorageLive(_458);
        _458 = ((_452 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_460);
        _460 = _458;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _460) -> [return: bb195, unwind: bb1085];
    }

    bb195: {
        StorageDead(_460);
        StorageDead(_458);
        _2138 = discriminant(_452);
        StorageDead(_456);
        StorageDead(_452);
        goto -> bb994;
    }

    bb196: {
        _469 = &(*_470);
        StorageDead(_471);
        _468 = PerpMarket::oracle_id(move _469) -> [return: bb197, unwind: bb1084];
    }

    bb197: {
        StorageDead(_469);
        _467 = &_468;
        _466 = &(*_467);
        _464 = OracleMap::<'_>::get_price_data(move _465, move _466) -> [return: bb198, unwind: bb1084];
    }

    bb198: {
        StorageDead(_466);
        StorageDead(_465);
        _463 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _464) -> [return: bb199, unwind: bb1084];
    }

    bb199: {
        StorageDead(_464);
        _472 = discriminant(_463);
        switchInt(move _472) -> [0: bb200, 1: bb201, otherwise: bb18];
    }

    bb200: {
        StorageLive(_476);
        _476 = ((_463 as Continue).0: &state::oracle::OraclePriceData);
        _462 = _476;
        StorageDead(_476);
        StorageDead(_470);
        StorageDead(_468);
        StorageDead(_467);
        StorageDead(_463);
        StorageLive(_477);
        StorageLive(_478);
        StorageLive(_479);
        StorageLive(_480);
        StorageLive(_481);
        StorageLive(_482);
        _482 = &_451;
        _481 = <RefMut<'_, PerpMarket> as Deref>::deref(move _482) -> [return: bb203, unwind: bb1084];
    }

    bb201: {
        StorageLive(_473);
        _473 = ((_463 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_475);
        _475 = _473;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _475) -> [return: bb202, unwind: bb1084];
    }

    bb202: {
        StorageDead(_475);
        StorageDead(_473);
        StorageDead(_470);
        StorageDead(_468);
        StorageDead(_467);
        StorageDead(_463);
        goto -> bb993;
    }

    bb203: {
        _480 = &(*_481);
        StorageDead(_482);
        StorageLive(_483);
        _483 = (*_462);
        StorageLive(_484);
        _484 = _13;
        StorageLive(_485);
        StorageLive(_486);
        _486 = &(((*_15).7: state::state::OracleGuardRails).1: state::state::ValidityGuardRails);
        _485 = &(*_486);
        _479 = PerpMarket::get_mm_oracle_price_data(move _480, move _483, move _484, move _485) -> [return: bb204, unwind: bb1084];
    }

    bb204: {
        StorageDead(_485);
        StorageDead(_484);
        StorageDead(_483);
        StorageDead(_480);
        _478 = <std::result::Result<MMOraclePriceData, error::ErrorCode> as Try>::branch(move _479) -> [return: bb205, unwind: bb1084];
    }

    bb205: {
        StorageDead(_479);
        _487 = discriminant(_478);
        switchInt(move _487) -> [0: bb206, 1: bb207, otherwise: bb18];
    }

    bb206: {
        StorageLive(_491);
        _491 = ((_478 as Continue).0: state::oracle::MMOraclePriceData);
        _477 = _491;
        StorageDead(_491);
        StorageDead(_486);
        StorageDead(_481);
        StorageDead(_478);
        StorageLive(_492);
        StorageLive(_493);
        StorageLive(_494);
        StorageLive(_495);
        StorageLive(_496);
        StorageLive(_497);
        StorageLive(_498);
        _498 = &mut _451;
        _497 = &mut (*_498);
        _496 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _497) -> [return: bb209, unwind: bb1084];
    }

    bb207: {
        StorageLive(_488);
        _488 = ((_478 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_490);
        _490 = _488;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _490) -> [return: bb208, unwind: bb1084];
    }

    bb208: {
        StorageDead(_490);
        StorageDead(_488);
        StorageDead(_486);
        StorageDead(_481);
        StorageDead(_478);
        goto -> bb992;
    }

    bb209: {
        _495 = &mut (*_496);
        StorageDead(_497);
        StorageLive(_499);
        StorageLive(_500);
        _500 = &_477;
        _499 = &(*_500);
        StorageLive(_501);
        _501 = &(*_15);
        StorageLive(_502);
        _502 = _14;
        StorageLive(_503);
        _503 = _13;
        StorageLive(_504);
        StorageLive(_505);
        _505 = DriftAction::Liquidate;
        _504 = Option::<DriftAction>::Some(move _505);
        StorageDead(_505);
        _494 = update_amm_and_check_validity(move _495, move _499, move _501, move _502, move _503, move _504) -> [return: bb210, unwind: bb1084];
    }

    bb210: {
        StorageDead(_504);
        StorageDead(_503);
        StorageDead(_502);
        StorageDead(_501);
        StorageDead(_499);
        StorageDead(_495);
        _493 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _494) -> [return: bb211, unwind: bb1084];
    }

    bb211: {
        StorageDead(_494);
        _506 = discriminant(_493);
        switchInt(move _506) -> [0: bb212, 1: bb213, otherwise: bb18];
    }

    bb212: {
        StorageLive(_510);
        _510 = ((_493 as Continue).0: ());
        _492 = _510;
        StorageDead(_510);
        StorageDead(_500);
        StorageDead(_498);
        StorageDead(_496);
        StorageDead(_493);
        StorageDead(_492);
        StorageLive(_511);
        StorageLive(_512);
        StorageLive(_513);
        StorageLive(_514);
        StorageLive(_515);
        _515 = &_451;
        _514 = <RefMut<'_, PerpMarket> as Deref>::deref(move _515) -> [return: bb215, unwind: bb1084];
    }

    bb213: {
        StorageLive(_507);
        _507 = ((_493 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_509);
        _509 = _507;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _509) -> [return: bb214, unwind: bb1084];
    }

    bb214: {
        StorageDead(_509);
        StorageDead(_507);
        StorageDead(_500);
        StorageDead(_498);
        StorageDead(_496);
        StorageDead(_493);
        StorageDead(_492);
        goto -> bb992;
    }

    bb215: {
        StorageDead(_515);
        _513 = &((*_514).22: state::perp_market::MarketStatus);
        StorageLive(_516);
        _2103 = const _;
        _516 = &(*_2103);
        _512 = <state::perp_market::MarketStatus as PartialEq>::eq(move _513, move _516) -> [return: bb216, unwind: bb1084];
    }

    bb216: {
        switchInt(move _512) -> [0: bb219, otherwise: bb217];
    }

    bb217: {
        StorageDead(_516);
        StorageDead(_514);
        StorageDead(_513);
        StorageLive(_518);
        StorageLive(_519);
        _519 = &_451;
        _518 = <RefMut<'_, PerpMarket> as Deref>::deref(move _519) -> [return: bb218, unwind: bb1084];
    }

    bb218: {
        StorageDead(_519);
        _511 = ((*_518).7: i64);
        StorageDead(_518);
        goto -> bb220;
    }

    bb219: {
        StorageDead(_516);
        StorageDead(_514);
        StorageDead(_513);
        _511 = ((*_462).0: i64);
        goto -> bb220;
    }

    bb220: {
        StorageDead(_512);
        StorageLive(_520);
        StorageLive(_521);
        _2121 = const false;
        _521 = move _451;
        _520 = std::mem::drop::<RefMut<'_, PerpMarket>>(move _521) -> [return: bb221, unwind: bb1084];
    }

    bb221: {
        StorageDead(_521);
        StorageDead(_520);
        StorageLive(_522);
        _522 = const 0_u64;
        StorageLive(_523);
        StorageLive(_524);
        StorageLive(_525);
        _525 = &_430;
        _524 = Vec::<u32>::is_empty(move _525) -> [return: bb222, unwind: bb1084];
    }

    bb222: {
        switchInt(move _524) -> [0: bb224, otherwise: bb223];
    }

    bb223: {
        StorageDead(_525);
        StorageLive(_526);
        StorageLive(_527);
        _527 = _522;
        _526 = Gt(move _527, const 0_u64);
        switchInt(move _526) -> [0: bb226, otherwise: bb225];
    }

    bb224: {
        StorageDead(_525);
        goto -> bb225;
    }

    bb225: {
        StorageDead(_527);
        StorageLive(_528);
        StorageLive(_529);
        StorageLive(_530);
        StorageLive(_531);
        _531 = &(*_4);
        StorageLive(_532);
        _532 = &(*_10);
        StorageLive(_533);
        _533 = &(*_11);
        StorageLive(_534);
        _534 = &mut (*_12);
        StorageLive(_535);
        StorageLive(_536);
        StorageLive(_537);
        StorageLive(_538);
        StorageLive(_539);
        _539 = _16;
        _538 = MarginContext::liquidation(move _539) -> [return: bb227, unwind: bb1084];
    }

    bb226: {
        StorageDead(_527);
        _523 = _277;
        goto -> bb277;
    }

    bb227: {
        StorageDead(_539);
        StorageLive(_540);
        StorageLive(_541);
        _541 = _1;
        _540 = MarketIdentifier::perp(move _541) -> [return: bb228, unwind: bb1084];
    }

    bb228: {
        StorageDead(_541);
        _537 = MarginContext::track_market_margin_requirement(move _538, move _540) -> [return: bb229, unwind: bb1084];
    }

    bb229: {
        StorageDead(_540);
        StorageDead(_538);
        _536 = <std::result::Result<MarginContext, error::ErrorCode> as Try>::branch(move _537) -> [return: bb230, unwind: bb1084];
    }

    bb230: {
        StorageDead(_537);
        _542 = discriminant(_536);
        switchInt(move _542) -> [0: bb231, 1: bb232, otherwise: bb18];
    }

    bb231: {
        StorageLive(_546);
        _546 = ((_536 as Continue).0: state::margin_calculation::MarginContext);
        _535 = _546;
        StorageDead(_546);
        _530 = math::margin::calculate_margin_requirement_and_total_collateral_and_liability_info(move _531, move _532, move _533, move _534, move _535) -> [return: bb234, unwind: bb1084];
    }

    bb232: {
        StorageLive(_543);
        _543 = ((_536 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_545);
        _545 = _543;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _545) -> [return: bb233, unwind: bb1084];
    }

    bb233: {
        StorageDead(_545);
        StorageDead(_543);
        StorageDead(_535);
        StorageDead(_534);
        StorageDead(_533);
        StorageDead(_532);
        StorageDead(_531);
        StorageDead(_530);
        goto -> bb989;
    }

    bb234: {
        StorageDead(_535);
        StorageDead(_534);
        StorageDead(_533);
        StorageDead(_532);
        StorageDead(_531);
        _529 = <std::result::Result<MarginCalculation, error::ErrorCode> as Try>::branch(move _530) -> [return: bb235, unwind: bb1084];
    }

    bb235: {
        StorageDead(_530);
        _547 = discriminant(_529);
        switchInt(move _547) -> [0: bb236, 1: bb237, otherwise: bb18];
    }

    bb236: {
        StorageLive(_551);
        _551 = ((_529 as Continue).0: state::margin_calculation::MarginCalculation);
        _528 = _551;
        StorageDead(_551);
        StorageDead(_536);
        StorageDead(_529);
        StorageLive(_552);
        StorageLive(_553);
        StorageLive(_554);
        StorageLive(_555);
        _555 = &_277;
        _554 = MarginCalculation::margin_shortage(move _555) -> [return: bb239, unwind: bb1084];
    }

    bb237: {
        StorageLive(_548);
        _548 = ((_529 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_550);
        _550 = _548;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _550) -> [return: bb238, unwind: bb1084];
    }

    bb238: {
        StorageDead(_550);
        StorageDead(_548);
        goto -> bb989;
    }

    bb239: {
        StorageDead(_555);
        _553 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _554) -> [return: bb240, unwind: bb1084];
    }

    bb240: {
        StorageDead(_554);
        _556 = discriminant(_553);
        switchInt(move _556) -> [0: bb241, 1: bb242, otherwise: bb18];
    }

    bb241: {
        StorageLive(_560);
        _560 = ((_553 as Continue).0: u128);
        _552 = _560;
        StorageDead(_560);
        StorageDead(_553);
        StorageLive(_561);
        StorageLive(_562);
        StorageLive(_563);
        StorageLive(_564);
        _564 = &_528;
        _563 = MarginCalculation::margin_shortage(move _564) -> [return: bb244, unwind: bb1084];
    }

    bb242: {
        StorageLive(_557);
        _557 = ((_553 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_559);
        _559 = _557;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _559) -> [return: bb243, unwind: bb1084];
    }

    bb243: {
        StorageDead(_559);
        StorageDead(_557);
        StorageDead(_553);
        goto -> bb988;
    }

    bb244: {
        StorageDead(_564);
        _562 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _563) -> [return: bb245, unwind: bb1084];
    }

    bb245: {
        StorageDead(_563);
        _565 = discriminant(_562);
        switchInt(move _565) -> [0: bb246, 1: bb247, otherwise: bb18];
    }

    bb246: {
        StorageLive(_569);
        _569 = ((_562 as Continue).0: u128);
        _561 = _569;
        StorageDead(_569);
        StorageDead(_562);
        StorageLive(_570);
        StorageLive(_571);
        StorageLive(_572);
        StorageLive(_573);
        StorageLive(_574);
        _574 = _552;
        StorageLive(_575);
        _575 = _561;
        _573 = core::num::<impl u128>::saturating_sub(move _574, move _575) -> [return: bb249, unwind: bb1084];
    }

    bb247: {
        StorageLive(_566);
        _566 = ((_562 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_568);
        _568 = _566;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _568) -> [return: bb248, unwind: bb1084];
    }

    bb248: {
        StorageDead(_568);
        StorageDead(_566);
        StorageDead(_562);
        goto -> bb987;
    }

    bb249: {
        StorageDead(_575);
        StorageDead(_574);
        _572 = <u128 as Cast>::cast::<u64>(move _573) -> [return: bb250, unwind: bb1084];
    }

    bb250: {
        StorageDead(_573);
        _571 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _572) -> [return: bb251, unwind: bb1084];
    }

    bb251: {
        StorageDead(_572);
        _576 = discriminant(_571);
        switchInt(move _576) -> [0: bb252, 1: bb253, otherwise: bb18];
    }

    bb252: {
        StorageLive(_580);
        _580 = ((_571 as Continue).0: u64);
        _570 = _580;
        StorageDead(_580);
        _378 = move _570;
        StorageDead(_570);
        StorageDead(_571);
        StorageLive(_581);
        StorageLive(_582);
        StorageLive(_583);
        StorageLive(_584);
        _584 = &mut (*_4);
        StorageLive(_585);
        _585 = _378;
        _583 = User::increment_margin_freed(move _584, move _585) -> [return: bb255, unwind: bb1084];
    }

    bb253: {
        StorageLive(_577);
        _577 = ((_571 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_579);
        _579 = _577;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _579) -> [return: bb254, unwind: bb1084];
    }

    bb254: {
        StorageDead(_579);
        StorageDead(_577);
        StorageDead(_570);
        StorageDead(_571);
        goto -> bb987;
    }

    bb255: {
        StorageDead(_585);
        StorageDead(_584);
        _582 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _583) -> [return: bb256, unwind: bb1084];
    }

    bb256: {
        StorageDead(_583);
        _586 = discriminant(_582);
        switchInt(move _586) -> [0: bb257, 1: bb258, otherwise: bb18];
    }

    bb257: {
        StorageLive(_590);
        _590 = ((_582 as Continue).0: ());
        _581 = _590;
        StorageDead(_590);
        StorageDead(_582);
        StorageDead(_581);
        StorageLive(_591);
        StorageLive(_592);
        StorageLive(_593);
        StorageLive(_594);
        StorageLive(_595);
        _595 = &_528;
        _594 = MarginCalculation::can_exit_liquidation(move _595) -> [return: bb260, unwind: bb1084];
    }

    bb258: {
        StorageLive(_587);
        _587 = ((_582 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_589);
        _589 = _587;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _589) -> [return: bb259, unwind: bb1084];
    }

    bb259: {
        StorageDead(_589);
        StorageDead(_587);
        StorageDead(_582);
        StorageDead(_581);
        goto -> bb987;
    }

    bb260: {
        StorageDead(_595);
        _593 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _594) -> [return: bb261, unwind: bb1084];
    }

    bb261: {
        StorageDead(_594);
        _596 = discriminant(_593);
        switchInt(move _596) -> [0: bb262, 1: bb263, otherwise: bb18];
    }

    bb262: {
        StorageLive(_600);
        _600 = ((_593 as Continue).0: bool);
        _592 = _600;
        StorageDead(_600);
        switchInt(move _592) -> [0: bb266, otherwise: bb265];
    }

    bb263: {
        StorageLive(_597);
        _597 = ((_593 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_599);
        _599 = _597;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _599) -> [return: bb264, unwind: bb1084];
    }

    bb264: {
        StorageDead(_599);
        StorageDead(_597);
        StorageDead(_593);
        goto -> bb986;
    }

    bb265: {
        StorageDead(_593);
        StorageLive(_602);
        StorageLive(_603);
        StorageLive(_604);
        StorageLive(_605);
        StorageLive(_606);
        StorageLive(_607);
        StorageLive(_608);
        StorageLive(_609);
        StorageLive(_610);
        StorageLive(_611);
        StorageLive(_612);
        StorageLive(_613);
        StorageLive(_614);
        StorageLive(_615);
        StorageLive(_616);
        _616 = _14;
        StorageLive(_617);
        _617 = _368;
        StorageLive(_618);
        _618 = LiquidationType::LiquidatePerp;
        StorageLive(_619);
        _619 = (*_5);
        StorageLive(_620);
        _620 = (*_8);
        StorageLive(_621);
        _621 = (_277.3: u128);
        StorageLive(_622);
        _622 = (_277.1: i128);
        StorageLive(_623);
        StorageLive(_624);
        _624 = &(*_4);
        _623 = User::is_bankrupt(move _624) -> [return: bb267, unwind: bb1084];
    }

    bb266: {
        StorageDead(_593);
        _591 = const ();
        StorageDead(_592);
        StorageDead(_591);
        _523 = _528;
        StorageDead(_561);
        StorageDead(_552);
        StorageDead(_528);
        goto -> bb277;
    }

    bb267: {
        StorageDead(_624);
        StorageLive(_625);
        _2122 = const false;
        _625 = move _430;
        StorageLive(_626);
        _626 = _378;
        StorageLive(_627);
        StorageLive(_628);
        _628 = _1;
        StorageLive(_629);
        _629 = _511;
        StorageLive(_630);
        _630 = _522;
        StorageLive(_631);
        _631 = <LiquidatePerpRecord as Default>::default() -> [return: bb268, unwind: bb1035];
    }

    bb268: {
        _627 = LiquidatePerpRecord { market_index: move _628, oracle_price: move _629, base_asset_amount: (_631.2: i64), quote_asset_amount: (_631.3: i64), lp_shares: move _630, fill_record_id: (_631.5: u64), user_order_id: (_631.6: u32), liquidator_order_id: (_631.7: u32), liquidator_fee: (_631.8: u64), if_fee: (_631.9: u64) };
        StorageDead(_630);
        StorageDead(_629);
        StorageDead(_628);
        StorageLive(_632);
        _632 = <LiquidationRecord as Default>::default() -> [return: bb269, unwind: bb1035];
    }

    bb269: {
        _615 = LiquidationRecord { ts: move _616, liquidation_type: move _618, user: move _619, liquidator: move _620, margin_requirement: move _621, total_collateral: move _622, margin_freed: move _626, liquidation_id: move _617, bankrupt: move _623, canceled_order_ids: move _625, liquidate_perp: move _627, liquidate_spot: move (_632.11: state::events::LiquidateSpotRecord), liquidate_borrow_for_perp_pnl: move (_632.12: state::events::LiquidateBorrowForPerpPnlRecord), liquidate_perp_pnl_for_deposit: move (_632.13: state::events::LiquidatePerpPnlForDepositRecord), perp_bankruptcy: move (_632.14: state::events::PerpBankruptcyRecord), spot_bankruptcy: move (_632.15: state::events::SpotBankruptcyRecord) };
        StorageDead(_627);
        StorageDead(_626);
        StorageDead(_625);
        StorageDead(_623);
        StorageDead(_622);
        StorageDead(_621);
        StorageDead(_620);
        StorageDead(_619);
        StorageDead(_618);
        StorageDead(_617);
        StorageDead(_616);
        _614 = &_615;
        _613 = &(*_614);
        _612 = <LiquidationRecord as anchor_lang::Event>::data(move _613) -> [return: bb270, unwind: bb1033];
    }

    bb270: {
        StorageDead(_613);
        _611 = &_612;
        _610 = &(*_611);
        _609 = <Vec<u8> as Deref>::deref(move _610) -> [return: bb271, unwind: bb1032];
    }

    bb271: {
        _608 = &(*_609);
        StorageDead(_610);
        _607 = [move _608];
        StorageDead(_608);
        _606 = &_607;
        _605 = &(*_606);
        _604 = move _605 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_605);
        _603 = solana_program::log::sol_log_data(move _604) -> [return: bb272, unwind: bb1032];
    }

    bb272: {
        StorageDead(_604);
        drop(_612) -> [return: bb273, unwind: bb1033];
    }

    bb273: {
        drop(_615) -> [return: bb274, unwind: bb1034];
    }

    bb274: {
        drop(_632) -> [return: bb275, unwind: bb1084];
    }

    bb275: {
        StorageDead(_632);
        StorageDead(_631);
        StorageDead(_615);
        StorageDead(_614);
        StorageDead(_612);
        StorageDead(_611);
        StorageDead(_609);
        StorageDead(_607);
        StorageDead(_606);
        StorageDead(_603);
        _602 = const ();
        StorageDead(_602);
        StorageLive(_633);
        StorageLive(_634);
        _634 = &mut (*_4);
        _633 = User::exit_liquidation(move _634) -> [return: bb276, unwind: bb1084];
    }

    bb276: {
        StorageDead(_634);
        StorageDead(_633);
        StorageLive(_635);
        _635 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _635);
        StorageDead(_635);
        goto -> bb986;
    }

    bb277: {
        StorageDead(_526);
        StorageDead(_524);
        StorageLive(_636);
        StorageLive(_637);
        StorageLive(_638);
        StorageLive(_639);
        _639 = _379;
        _640 = Len(((*_4).4: [state::user::PerpPosition; 8]));
        _641 = Lt(_639, _640);
        assert(move _641, "index out of bounds: the length is {} but the index is {}", move _640, _639) -> [success: bb278, unwind: bb1084];
    }

    bb278: {
        _638 = (((*_4).4: [state::user::PerpPosition; 8])[_639].1: i64);
        _637 = Eq(move _638, const 0_i64);
        switchInt(move _637) -> [0: bb281, otherwise: bb279];
    }

    bb279: {
        StorageDead(_639);
        StorageDead(_638);
        StorageLive(_643);
        StorageLive(_644);
        StorageLive(_645);
        _645 = const "User has no base asset amount";
        _644 = &(*_645);
        _643 = solana_program::log::sol_log(move _644) -> [return: bb280, unwind: bb1084];
    }

    bb280: {
        StorageDead(_644);
        StorageDead(_645);
        StorageDead(_643);
        StorageLive(_646);
        _646 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _646);
        StorageDead(_646);
        StorageDead(_637);
        StorageDead(_636);
        goto -> bb991;
    }

    bb281: {
        StorageDead(_639);
        StorageDead(_638);
        _636 = const ();
        StorageDead(_637);
        StorageDead(_636);
        StorageLive(_647);
        StorageLive(_648);
        StorageLive(_649);
        StorageLive(_650);
        _650 = _2;
        StorageLive(_651);
        StorageLive(_652);
        StorageLive(_653);
        StorageLive(_654);
        StorageLive(_655);
        StorageLive(_656);
        StorageLive(_657);
        _657 = &(*_10);
        StorageLive(_658);
        StorageLive(_659);
        _659 = &_1;
        _658 = &(*_659);
        _656 = PerpMarketMap::<'_>::get_ref(move _657, move _658) -> [return: bb282, unwind: bb1084];
    }

    bb282: {
        StorageDead(_658);
        StorageDead(_657);
        _655 = <std::result::Result<Ref<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _656) -> [return: bb283, unwind: bb1084];
    }

    bb283: {
        _2120 = const true;
        StorageDead(_656);
        _660 = discriminant(_655);
        switchInt(move _660) -> [0: bb284, 1: bb285, otherwise: bb18];
    }

    bb284: {
        StorageLive(_664);
        _664 = move ((_655 as Continue).0: std::cell::Ref<'_, state::perp_market::PerpMarket>);
        _654 = move _664;
        StorageDead(_664);
        _653 = &_654;
        _652 = <Ref<'_, PerpMarket> as Deref>::deref(move _653) -> [return: bb287, unwind: bb1031];
    }

    bb285: {
        StorageLive(_661);
        _661 = ((_655 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_663);
        _663 = _661;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _663) -> [return: bb286, unwind: bb1082];
    }

    bb286: {
        StorageDead(_663);
        StorageDead(_661);
        StorageDead(_653);
        StorageDead(_651);
        StorageDead(_650);
        StorageDead(_649);
        goto -> bb1062;
    }

    bb287: {
        StorageDead(_653);
        _651 = (((*_652).1: state::perp_market::AMM).52: u64);
        _649 = math::orders::standardize_base_asset_amount(move _650, move _651) -> [return: bb288, unwind: bb1031];
    }

    bb288: {
        StorageDead(_651);
        StorageDead(_650);
        _648 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _649) -> [return: bb289, unwind: bb1031];
    }

    bb289: {
        StorageDead(_649);
        _665 = discriminant(_648);
        switchInt(move _665) -> [0: bb290, 1: bb291, otherwise: bb18];
    }

    bb290: {
        StorageLive(_669);
        _669 = ((_648 as Continue).0: u64);
        _647 = _669;
        StorageDead(_669);
        drop(_654) -> [return: bb1051, unwind: bb1082];
    }

    bb291: {
        StorageLive(_666);
        _666 = ((_648 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_668);
        _668 = _666;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _668) -> [return: bb292, unwind: bb1031];
    }

    bb292: {
        StorageDead(_668);
        StorageDead(_666);
        drop(_654) -> [return: bb1062, unwind: bb1082];
    }

    bb293: {
        StorageDead(_674);
        StorageLive(_675);
        _675 = ();
        _672 = std::result::Result::<(), error::ErrorCode>::Ok(move _675);
        StorageDead(_675);
        goto -> bb306;
    }

    bb294: {
        StorageDead(_674);
        StorageLive(_676);
        _676 = error::ErrorCode::InvalidBaseAssetAmountForLiquidatePerp;
        StorageLive(_677);
        StorageLive(_678);
        StorageLive(_679);
        StorageLive(_680);
        StorageLive(_681);
        StorageLive(_682);
        StorageLive(_683);
        StorageLive(_684);
        StorageLive(_685);
        StorageLive(_686);
        StorageLive(_687);
        _2102 = const _;
        _687 = &(*_2102);
        _686 = &(*_687);
        _685 = move _686 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_686);
        StorageLive(_689);
        StorageLive(_690);
        StorageLive(_691);
        StorageLive(_692);
        StorageLive(_693);
        StorageLive(_694);
        StorageLive(_695);
        _695 = &_676;
        _694 = &(*_695);
        _693 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _694) -> [return: bb295, unwind: bb1084];
    }

    bb295: {
        StorageDead(_694);
        _692 = [move _693];
        StorageDead(_693);
        _691 = &_692;
        _690 = &(*_691);
        _689 = move _690 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_690);
        _684 = Arguments::<'_>::new_v1(move _685, move _689) -> [return: bb296, unwind: bb1084];
    }

    bb296: {
        StorageDead(_689);
        StorageDead(_685);
        _683 = format(move _684) -> [return: bb297, unwind: bb1084];
    }

    bb297: {
        StorageDead(_684);
        StorageDead(_695);
        StorageDead(_692);
        StorageDead(_691);
        StorageDead(_687);
        _682 = move _683;
        StorageDead(_683);
        _681 = &_682;
        _680 = &(*_681);
        _679 = <String as Deref>::deref(move _680) -> [return: bb298, unwind: bb1030];
    }

    bb298: {
        _678 = &(*_679);
        StorageDead(_680);
        _677 = solana_program::log::sol_log(move _678) -> [return: bb299, unwind: bb1030];
    }

    bb299: {
        StorageDead(_678);
        drop(_682) -> [return: bb300, unwind: bb1084];
    }

    bb300: {
        StorageDead(_682);
        StorageDead(_681);
        StorageDead(_679);
        StorageDead(_677);
        StorageLive(_696);
        StorageLive(_697);
        StorageLive(_698);
        StorageLive(_699);
        StorageLive(_700);
        StorageLive(_701);
        StorageLive(_702);
        StorageLive(_703);
        StorageLive(_704);
        StorageLive(_705);
        StorageLive(_706);
        _2101 = const _;
        _706 = &(*_2101);
        _705 = &(*_706);
        _704 = move _705 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_705);
        _703 = Arguments::<'_>::new_const(move _704) -> [return: bb301, unwind: bb1084];
    }

    bb301: {
        StorageDead(_704);
        _702 = format(move _703) -> [return: bb302, unwind: bb1084];
    }

    bb302: {
        StorageDead(_703);
        StorageDead(_706);
        _701 = move _702;
        StorageDead(_702);
        _700 = &_701;
        _699 = &(*_700);
        _698 = <String as Deref>::deref(move _699) -> [return: bb303, unwind: bb1029];
    }

    bb303: {
        _697 = &(*_698);
        StorageDead(_699);
        _696 = solana_program::log::sol_log(move _697) -> [return: bb304, unwind: bb1029];
    }

    bb304: {
        StorageDead(_697);
        drop(_701) -> [return: bb305, unwind: bb1084];
    }

    bb305: {
        StorageDead(_701);
        StorageDead(_700);
        StorageDead(_698);
        StorageDead(_696);
        StorageLive(_708);
        _708 = _676;
        _672 = std::result::Result::<(), error::ErrorCode>::Err(move _708);
        StorageDead(_708);
        StorageDead(_676);
        goto -> bb306;
    }

    bb306: {
        StorageDead(_673);
        _671 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _672) -> [return: bb307, unwind: bb1084];
    }

    bb307: {
        StorageDead(_672);
        _709 = discriminant(_671);
        switchInt(move _709) -> [0: bb308, 1: bb309, otherwise: bb18];
    }

    bb308: {
        StorageLive(_713);
        _713 = ((_671 as Continue).0: ());
        _670 = _713;
        StorageDead(_713);
        StorageDead(_671);
        StorageDead(_670);
        StorageLive(_714);
        StorageLive(_715);
        StorageLive(_716);
        StorageLive(_717);
        StorageLive(_718);
        _718 = &(*_10);
        StorageLive(_719);
        StorageLive(_720);
        _720 = &_1;
        _719 = &(*_720);
        _717 = PerpMarketMap::<'_>::get_ref(move _718, move _719) -> [return: bb311, unwind: bb1084];
    }

    bb309: {
        StorageLive(_710);
        _710 = ((_671 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_712);
        _712 = _710;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _712) -> [return: bb310, unwind: bb1084];
    }

    bb310: {
        StorageDead(_712);
        StorageDead(_710);
        StorageDead(_671);
        StorageDead(_670);
        goto -> bb985;
    }

    bb311: {
        StorageDead(_719);
        StorageDead(_718);
        _716 = <std::result::Result<Ref<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _717) -> [return: bb312, unwind: bb1084];
    }

    bb312: {
        StorageDead(_717);
        _721 = discriminant(_716);
        switchInt(move _721) -> [0: bb313, 1: bb314, otherwise: bb18];
    }

    bb313: {
        StorageLive(_725);
        _725 = move ((_716 as Continue).0: std::cell::Ref<'_, state::perp_market::PerpMarket>);
        _715 = move _725;
        StorageDead(_725);
        _2146 = discriminant(_716);
        StorageDead(_720);
        StorageDead(_716);
        StorageLive(_726);
        StorageLive(_727);
        StorageLive(_728);
        StorageLive(_729);
        _729 = &_715;
        _728 = <Ref<'_, PerpMarket> as Deref>::deref(move _729) -> [return: bb316, unwind: bb1028];
    }

    bb314: {
        StorageLive(_722);
        _722 = ((_716 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_724);
        _724 = _722;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _724) -> [return: bb315, unwind: bb1081];
    }

    bb315: {
        StorageDead(_724);
        StorageDead(_722);
        _2144 = discriminant(_716);
        StorageDead(_720);
        StorageDead(_716);
        goto -> bb984;
    }

    bb316: {
        StorageDead(_729);
        _727 = &((*_728).22: state::perp_market::MarketStatus);
        StorageLive(_730);
        _2100 = const _;
        _730 = &(*_2100);
        _726 = <state::perp_market::MarketStatus as PartialEq>::ne(move _727, move _730) -> [return: bb317, unwind: bb1028];
    }

    bb317: {
        switchInt(move _726) -> [0: bb344, otherwise: bb318];
    }

    bb318: {
        StorageDead(_730);
        StorageDead(_728);
        StorageDead(_727);
        StorageLive(_732);
        StorageLive(_733);
        StorageLive(_734);
        StorageLive(_735);
        _735 = _511;
        StorageLive(_736);
        StorageLive(_737);
        StorageLive(_738);
        _738 = &_715;
        _737 = <Ref<'_, PerpMarket> as Deref>::deref(move _738) -> [return: bb319, unwind: bb1028];
    }

    bb319: {
        StorageDead(_738);
        _736 = ((((*_737).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).4: i64);
        StorageLive(_739);
        StorageLive(_740);
        StorageLive(_741);
        StorageLive(_742);
        StorageLive(_743);
        _743 = &((*_15).7: state::state::OracleGuardRails);
        _742 = state::state::OracleGuardRails::max_oracle_twap_5min_percent_divergence(move _743) -> [return: bb320, unwind: bb1028];
    }

    bb320: {
        StorageDead(_743);
        _741 = <u64 as Cast>::cast::<i64>(move _742) -> [return: bb321, unwind: bb1028];
    }

    bb321: {
        StorageDead(_742);
        _740 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _741) -> [return: bb322, unwind: bb1028];
    }

    bb322: {
        StorageDead(_741);
        _744 = discriminant(_740);
        switchInt(move _744) -> [0: bb323, 1: bb324, otherwise: bb18];
    }

    bb323: {
        StorageLive(_748);
        _748 = ((_740 as Continue).0: i64);
        _739 = _748;
        StorageDead(_748);
        _734 = math::orders::is_oracle_too_divergent_with_twap_5min(move _735, move _736, move _739) -> [return: bb326, unwind: bb1028];
    }

    bb324: {
        StorageLive(_745);
        _745 = ((_740 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_747);
        _747 = _745;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _747) -> [return: bb325, unwind: bb1028];
    }

    bb325: {
        StorageDead(_747);
        StorageDead(_745);
        StorageDead(_739);
        StorageDead(_736);
        StorageDead(_735);
        StorageDead(_734);
        goto -> bb982;
    }

    bb326: {
        StorageDead(_739);
        StorageDead(_736);
        StorageDead(_735);
        _733 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _734) -> [return: bb327, unwind: bb1028];
    }

    bb327: {
        StorageDead(_734);
        _749 = discriminant(_733);
        switchInt(move _749) -> [0: bb328, 1: bb329, otherwise: bb18];
    }

    bb328: {
        StorageLive(_753);
        _753 = ((_733 as Continue).0: bool);
        _732 = _753;
        StorageDead(_753);
        StorageDead(_740);
        StorageDead(_737);
        StorageDead(_733);
        StorageLive(_754);
        StorageLive(_755);
        StorageLive(_756);
        StorageLive(_757);
        _757 = _732;
        switchInt(move _757) -> [0: bb332, otherwise: bb331];
    }

    bb329: {
        StorageLive(_750);
        _750 = ((_733 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_752);
        _752 = _750;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _752) -> [return: bb330, unwind: bb1028];
    }

    bb330: {
        StorageDead(_752);
        StorageDead(_750);
        goto -> bb982;
    }

    bb331: {
        StorageLive(_759);
        _759 = error::ErrorCode::PriceBandsBreached;
        StorageLive(_760);
        StorageLive(_761);
        StorageLive(_762);
        StorageLive(_763);
        StorageLive(_764);
        StorageLive(_765);
        StorageLive(_766);
        StorageLive(_767);
        StorageLive(_768);
        StorageLive(_769);
        StorageLive(_770);
        _2099 = const _;
        _770 = &(*_2099);
        _769 = &(*_770);
        _768 = move _769 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_769);
        StorageLive(_772);
        StorageLive(_773);
        StorageLive(_774);
        StorageLive(_775);
        StorageLive(_776);
        StorageLive(_777);
        StorageLive(_778);
        _778 = &_759;
        _777 = &(*_778);
        _776 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _777) -> [return: bb333, unwind: bb1028];
    }

    bb332: {
        StorageLive(_758);
        _758 = ();
        _756 = std::result::Result::<(), error::ErrorCode>::Ok(move _758);
        StorageDead(_758);
        goto -> bb339;
    }

    bb333: {
        StorageDead(_777);
        _775 = [move _776];
        StorageDead(_776);
        _774 = &_775;
        _773 = &(*_774);
        _772 = move _773 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_773);
        _767 = Arguments::<'_>::new_v1(move _768, move _772) -> [return: bb334, unwind: bb1028];
    }

    bb334: {
        StorageDead(_772);
        StorageDead(_768);
        _766 = format(move _767) -> [return: bb335, unwind: bb1028];
    }

    bb335: {
        StorageDead(_767);
        StorageDead(_778);
        StorageDead(_775);
        StorageDead(_774);
        StorageDead(_770);
        _765 = move _766;
        StorageDead(_766);
        _764 = &_765;
        _763 = &(*_764);
        _762 = <String as Deref>::deref(move _763) -> [return: bb336, unwind: bb1027];
    }

    bb336: {
        _761 = &(*_762);
        StorageDead(_763);
        _760 = solana_program::log::sol_log(move _761) -> [return: bb337, unwind: bb1027];
    }

    bb337: {
        StorageDead(_761);
        drop(_765) -> [return: bb338, unwind: bb1028];
    }

    bb338: {
        StorageDead(_765);
        StorageDead(_764);
        StorageDead(_762);
        StorageDead(_760);
        StorageLive(_779);
        _779 = _759;
        _756 = std::result::Result::<(), error::ErrorCode>::Err(move _779);
        StorageDead(_779);
        StorageDead(_759);
        goto -> bb339;
    }

    bb339: {
        StorageDead(_757);
        _755 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _756) -> [return: bb340, unwind: bb1028];
    }

    bb340: {
        StorageDead(_756);
        _780 = discriminant(_755);
        switchInt(move _780) -> [0: bb341, 1: bb342, otherwise: bb18];
    }

    bb341: {
        StorageLive(_784);
        _784 = ((_755 as Continue).0: ());
        _754 = _784;
        StorageDead(_784);
        StorageDead(_755);
        StorageDead(_754);
        _714 = const ();
        StorageDead(_732);
        goto -> bb345;
    }

    bb342: {
        StorageLive(_781);
        _781 = ((_755 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_783);
        _783 = _781;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _783) -> [return: bb343, unwind: bb1028];
    }

    bb343: {
        StorageDead(_783);
        StorageDead(_781);
        StorageDead(_755);
        StorageDead(_754);
        goto -> bb983;
    }

    bb344: {
        StorageDead(_730);
        StorageDead(_728);
        StorageDead(_727);
        _714 = const ();
        goto -> bb345;
    }

    bb345: {
        StorageDead(_726);
        drop(_715) -> [return: bb346, unwind: bb1084];
    }

    bb346: {
        StorageDead(_715);
        StorageDead(_714);
        StorageLive(_785);
        StorageLive(_786);
        StorageLive(_787);
        _787 = _379;
        _788 = Len(((*_4).4: [state::user::PerpPosition; 8]));
        _789 = Lt(_787, _788);
        assert(move _789, "index out of bounds: the length is {} but the index is {}", move _788, _787) -> [success: bb347, unwind: bb1084];
    }

    bb347: {
        _786 = (((*_4).4: [state::user::PerpPosition; 8])[_787].1: i64);
        _785 = core::num::<impl i64>::unsigned_abs(move _786) -> [return: bb348, unwind: bb1084];
    }

    bb348: {
        StorageDead(_786);
        StorageDead(_787);
        StorageLive(_790);
        StorageLive(_791);
        StorageLive(_792);
        StorageLive(_793);
        StorageLive(_794);
        StorageLive(_795);
        StorageLive(_796);
        StorageLive(_797);
        StorageLive(_798);
        StorageLive(_799);
        _799 = &(*_10);
        StorageLive(_800);
        StorageLive(_801);
        _801 = &_1;
        _800 = &(*_801);
        _798 = PerpMarketMap::<'_>::get_ref(move _799, move _800) -> [return: bb349, unwind: bb1084];
    }

    bb349: {
        StorageDead(_800);
        StorageDead(_799);
        _797 = <std::result::Result<Ref<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _798) -> [return: bb350, unwind: bb1084];
    }

    bb350: {
        _2119 = const true;
        StorageDead(_798);
        _802 = discriminant(_797);
        switchInt(move _802) -> [0: bb351, 1: bb352, otherwise: bb18];
    }

    bb351: {
        StorageLive(_806);
        _806 = move ((_797 as Continue).0: std::cell::Ref<'_, state::perp_market::PerpMarket>);
        _796 = move _806;
        StorageDead(_806);
        _795 = &_796;
        _794 = <Ref<'_, PerpMarket> as Deref>::deref(move _795) -> [return: bb354, unwind: bb1026];
    }

    bb352: {
        StorageLive(_803);
        _803 = ((_797 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_805);
        _805 = _803;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _805) -> [return: bb353, unwind: bb1080];
    }

    bb353: {
        StorageDead(_805);
        StorageDead(_803);
        StorageDead(_795);
        StorageDead(_793);
        StorageDead(_792);
        goto -> bb1061;
    }

    bb354: {
        _793 = &(*_794);
        StorageDead(_795);
        StorageLive(_807);
        StorageLive(_808);
        StorageLive(_809);
        StorageLive(_810);
        _810 = _785;
        _809 = <u64 as Cast>::cast::<u128>(move _810) -> [return: bb355, unwind: bb1026];
    }

    bb355: {
        StorageDead(_810);
        _808 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _809) -> [return: bb356, unwind: bb1026];
    }

    bb356: {
        StorageDead(_809);
        _811 = discriminant(_808);
        switchInt(move _811) -> [0: bb357, 1: bb358, otherwise: bb18];
    }

    bb357: {
        StorageLive(_815);
        _815 = ((_808 as Continue).0: u128);
        _807 = _815;
        StorageDead(_815);
        StorageLive(_816);
        _816 = math::margin::MarginRequirementType::Maintenance;
        StorageLive(_817);
        StorageLive(_818);
        _818 = &(*_4);
        StorageLive(_819);
        _819 = math::margin::MarginRequirementType::Maintenance;
        _817 = User::is_high_leverage_mode(move _818, move _819) -> [return: bb360, unwind: bb1026];
    }

    bb358: {
        StorageLive(_812);
        _812 = ((_808 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_814);
        _814 = _812;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _814) -> [return: bb359, unwind: bb1026];
    }

    bb359: {
        StorageDead(_814);
        StorageDead(_812);
        StorageDead(_807);
        StorageDead(_793);
        StorageDead(_792);
        goto -> bb980;
    }

    bb360: {
        StorageDead(_819);
        StorageDead(_818);
        _792 = PerpMarket::get_margin_ratio(move _793, move _807, move _816, move _817) -> [return: bb361, unwind: bb1026];
    }

    bb361: {
        StorageDead(_817);
        StorageDead(_816);
        StorageDead(_807);
        StorageDead(_793);
        _791 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _792) -> [return: bb362, unwind: bb1026];
    }

    bb362: {
        StorageDead(_792);
        _820 = discriminant(_791);
        switchInt(move _820) -> [0: bb363, 1: bb364, otherwise: bb18];
    }

    bb363: {
        StorageLive(_824);
        _824 = ((_791 as Continue).0: u32);
        _790 = _824;
        StorageDead(_824);
        StorageDead(_808);
        drop(_796) -> [return: bb1052, unwind: bb1080];
    }

    bb364: {
        StorageLive(_821);
        _821 = ((_791 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_823);
        _823 = _821;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _823) -> [return: bb365, unwind: bb1026];
    }

    bb365: {
        StorageDead(_823);
        StorageDead(_821);
        goto -> bb980;
    }

    bb366: {
        StorageDead(_829);
        StorageDead(_828);
        _826 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _827) -> [return: bb367, unwind: bb1084];
    }

    bb367: {
        StorageDead(_827);
        _830 = discriminant(_826);
        switchInt(move _830) -> [0: bb368, 1: bb369, otherwise: bb18];
    }

    bb368: {
        StorageLive(_834);
        _834 = ((_826 as Continue).0: u32);
        _825 = _834;
        StorageDead(_834);
        StorageDead(_826);
        StorageLive(_835);
        StorageLive(_836);
        StorageLive(_837);
        StorageLive(_838);
        _838 = &_523;
        _837 = MarginCalculation::margin_shortage(move _838) -> [return: bb371, unwind: bb1084];
    }

    bb369: {
        StorageLive(_831);
        _831 = ((_826 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_833);
        _833 = _831;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _833) -> [return: bb370, unwind: bb1084];
    }

    bb370: {
        StorageDead(_833);
        StorageDead(_831);
        StorageDead(_826);
        goto -> bb979;
    }

    bb371: {
        StorageDead(_838);
        _836 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _837) -> [return: bb372, unwind: bb1084];
    }

    bb372: {
        StorageDead(_837);
        _839 = discriminant(_836);
        switchInt(move _839) -> [0: bb373, 1: bb374, otherwise: bb18];
    }

    bb373: {
        StorageLive(_843);
        _843 = ((_836 as Continue).0: u128);
        _835 = _843;
        StorageDead(_843);
        StorageDead(_836);
        StorageLive(_844);
        StorageLive(_845);
        StorageLive(_846);
        StorageLive(_847);
        _847 = &(*_10);
        StorageLive(_848);
        StorageLive(_849);
        _849 = &_1;
        _848 = &(*_849);
        _846 = PerpMarketMap::<'_>::get_ref(move _847, move _848) -> [return: bb376, unwind: bb1084];
    }

    bb374: {
        StorageLive(_840);
        _840 = ((_836 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_842);
        _842 = _840;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _842) -> [return: bb375, unwind: bb1084];
    }

    bb375: {
        StorageDead(_842);
        StorageDead(_840);
        StorageDead(_836);
        goto -> bb978;
    }

    bb376: {
        StorageDead(_848);
        StorageDead(_847);
        _845 = <std::result::Result<Ref<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _846) -> [return: bb377, unwind: bb1084];
    }

    bb377: {
        StorageDead(_846);
        _850 = discriminant(_845);
        switchInt(move _850) -> [0: bb378, 1: bb379, otherwise: bb18];
    }

    bb378: {
        StorageLive(_854);
        _854 = move ((_845 as Continue).0: std::cell::Ref<'_, state::perp_market::PerpMarket>);
        _2118 = const true;
        _844 = move _854;
        StorageDead(_854);
        _2152 = discriminant(_845);
        StorageDead(_849);
        StorageDead(_845);
        StorageLive(_855);
        StorageLive(_856);
        StorageLive(_857);
        StorageLive(_858);
        _858 = &(*_11);
        StorageLive(_859);
        StorageLive(_860);
        StorageLive(_861);
        StorageLive(_862);
        _862 = &_844;
        _861 = <Ref<'_, PerpMarket> as Deref>::deref(move _862) -> [return: bb381, unwind: bb1078];
    }

    bb379: {
        StorageLive(_851);
        _851 = ((_845 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_853);
        _853 = _851;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _853) -> [return: bb380, unwind: bb1079];
    }

    bb380: {
        StorageDead(_853);
        StorageDead(_851);
        _2150 = discriminant(_845);
        StorageDead(_849);
        StorageDead(_845);
        goto -> bb977;
    }

    bb381: {
        StorageDead(_862);
        _860 = &((*_861).26: u16);
        _859 = &(*_860);
        _857 = SpotMarketMap::<'_>::get_ref(move _858, move _859) -> [return: bb382, unwind: bb1078];
    }

    bb382: {
        StorageDead(_859);
        StorageDead(_858);
        _856 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _857) -> [return: bb383, unwind: bb1078];
    }

    bb383: {
        StorageDead(_857);
        _863 = discriminant(_856);
        switchInt(move _863) -> [0: bb384, 1: bb385, otherwise: bb18];
    }

    bb384: {
        StorageLive(_867);
        _867 = move ((_856 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _2117 = const true;
        _855 = move _867;
        StorageDead(_867);
        _2156 = discriminant(_856);
        StorageDead(_861);
        StorageDead(_860);
        StorageDead(_856);
        StorageLive(_868);
        StorageLive(_869);
        StorageLive(_870);
        StorageLive(_871);
        StorageLive(_872);
        _872 = &mut (*_12);
        StorageLive(_873);
        StorageLive(_874);
        StorageLive(_875);
        StorageLive(_876);
        StorageLive(_877);
        StorageLive(_878);
        _878 = &_855;
        _877 = <Ref<'_, SpotMarket> as Deref>::deref(move _878) -> [return: bb387, unwind: bb1075];
    }

    bb385: {
        StorageLive(_864);
        _864 = ((_856 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_866);
        _866 = _864;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _866) -> [return: bb386, unwind: bb1076];
    }

    bb386: {
        StorageDead(_866);
        StorageDead(_864);
        _2154 = discriminant(_856);
        StorageDead(_861);
        StorageDead(_860);
        StorageDead(_856);
        goto -> bb976;
    }

    bb387: {
        _876 = &(*_877);
        StorageDead(_878);
        _875 = SpotMarket::oracle_id(move _876) -> [return: bb388, unwind: bb1075];
    }

    bb388: {
        StorageDead(_876);
        _874 = &_875;
        _873 = &(*_874);
        _871 = OracleMap::<'_>::get_price_data(move _872, move _873) -> [return: bb389, unwind: bb1075];
    }

    bb389: {
        StorageDead(_873);
        StorageDead(_872);
        _870 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _871) -> [return: bb390, unwind: bb1075];
    }

    bb390: {
        StorageDead(_871);
        _879 = discriminant(_870);
        switchInt(move _879) -> [0: bb391, 1: bb392, otherwise: bb18];
    }

    bb391: {
        StorageLive(_883);
        _883 = ((_870 as Continue).0: &state::oracle::OraclePriceData);
        _869 = _883;
        StorageDead(_883);
        _868 = ((*_869).0: i64);
        StorageDead(_877);
        StorageDead(_875);
        StorageDead(_874);
        StorageDead(_870);
        StorageDead(_869);
        StorageLive(_884);
        StorageLive(_885);
        StorageLive(_886);
        StorageLive(_887);
        StorageLive(_888);
        StorageLive(_889);
        StorageLive(_890);
        _890 = &_844;
        _889 = <Ref<'_, PerpMarket> as Deref>::deref(move _890) -> [return: bb394, unwind: bb1075];
    }

    bb392: {
        StorageLive(_880);
        _880 = ((_870 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_882);
        _882 = _880;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _882) -> [return: bb393, unwind: bb1075];
    }

    bb393: {
        StorageDead(_882);
        StorageDead(_880);
        StorageDead(_877);
        StorageDead(_875);
        StorageDead(_874);
        StorageDead(_870);
        StorageDead(_869);
        goto -> bb975;
    }

    bb394: {
        _888 = &(*_889);
        StorageDead(_890);
        StorageLive(_891);
        StorageLive(_892);
        _892 = &(*_4);
        StorageLive(_893);
        _893 = math::margin::MarginRequirementType::Maintenance;
        _891 = User::is_high_leverage_mode(move _892, move _893) -> [return: bb395, unwind: bb1075];
    }

    bb395: {
        StorageDead(_893);
        StorageDead(_892);
        _887 = PerpMarket::get_base_liquidator_fee(move _888, move _891) -> [return: bb396, unwind: bb1075];
    }

    bb396: {
        StorageDead(_891);
        StorageDead(_888);
        StorageLive(_894);
        StorageLive(_895);
        StorageLive(_896);
        StorageLive(_897);
        StorageLive(_898);
        StorageLive(_899);
        _899 = &_844;
        _898 = <Ref<'_, PerpMarket> as Deref>::deref(move _899) -> [return: bb397, unwind: bb1075];
    }

    bb397: {
        _897 = &(*_898);
        StorageDead(_899);
        _896 = PerpMarket::get_max_liquidation_fee(move _897) -> [return: bb398, unwind: bb1075];
    }

    bb398: {
        StorageDead(_897);
        _895 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _896) -> [return: bb399, unwind: bb1075];
    }

    bb399: {
        StorageDead(_896);
        _900 = discriminant(_895);
        switchInt(move _900) -> [0: bb400, 1: bb401, otherwise: bb18];
    }

    bb400: {
        StorageLive(_904);
        _904 = ((_895 as Continue).0: u32);
        _894 = _904;
        StorageDead(_904);
        StorageLive(_905);
        _905 = ((*_4).14: u64);
        StorageLive(_906);
        _906 = _13;
        _886 = get_liquidation_fee(move _887, move _894, move _905, move _906) -> [return: bb403, unwind: bb1075];
    }

    bb401: {
        StorageLive(_901);
        _901 = ((_895 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_903);
        _903 = _901;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _903) -> [return: bb402, unwind: bb1075];
    }

    bb402: {
        StorageDead(_903);
        StorageDead(_901);
        StorageDead(_894);
        StorageDead(_887);
        StorageDead(_886);
        goto -> bb973;
    }

    bb403: {
        StorageDead(_906);
        StorageDead(_905);
        StorageDead(_894);
        StorageDead(_887);
        _885 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _886) -> [return: bb404, unwind: bb1075];
    }

    bb404: {
        StorageDead(_886);
        _907 = discriminant(_885);
        switchInt(move _907) -> [0: bb405, 1: bb406, otherwise: bb18];
    }

    bb405: {
        StorageLive(_911);
        _911 = ((_885 as Continue).0: u32);
        _884 = _911;
        StorageDead(_911);
        StorageDead(_898);
        StorageDead(_895);
        StorageDead(_889);
        StorageDead(_885);
        StorageLive(_912);
        StorageLive(_913);
        StorageLive(_914);
        StorageLive(_915);
        StorageLive(_916);
        StorageLive(_917);
        StorageLive(_918);
        _918 = &_523;
        StorageLive(_919);
        _919 = _835;
        _917 = MarginCalculation::tracked_market_margin_shortage(move _918, move _919) -> [return: bb408, unwind: bb1075];
    }

    bb406: {
        StorageLive(_908);
        _908 = ((_885 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_910);
        _910 = _908;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _910) -> [return: bb407, unwind: bb1075];
    }

    bb407: {
        StorageDead(_910);
        StorageDead(_908);
        goto -> bb973;
    }

    bb408: {
        StorageDead(_919);
        StorageDead(_918);
        _916 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _917) -> [return: bb409, unwind: bb1075];
    }

    bb409: {
        StorageDead(_917);
        _920 = discriminant(_916);
        switchInt(move _920) -> [0: bb410, 1: bb411, otherwise: bb18];
    }

    bb410: {
        StorageLive(_924);
        _924 = ((_916 as Continue).0: u128);
        _915 = _924;
        StorageDead(_924);
        StorageLive(_925);
        _925 = _785;
        StorageLive(_926);
        _926 = _825;
        StorageLive(_927);
        _927 = _884;
        StorageLive(_928);
        _928 = _511;
        StorageLive(_929);
        _929 = _868;
        StorageLive(_930);
        StorageLive(_931);
        StorageLive(_932);
        _932 = &_844;
        _931 = <Ref<'_, PerpMarket> as Deref>::deref(move _932) -> [return: bb413, unwind: bb1075];
    }

    bb411: {
        StorageLive(_921);
        _921 = ((_916 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_923);
        _923 = _921;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _923) -> [return: bb412, unwind: bb1075];
    }

    bb412: {
        StorageDead(_923);
        StorageDead(_921);
        StorageDead(_915);
        StorageDead(_914);
        goto -> bb971;
    }

    bb413: {
        StorageDead(_932);
        _930 = ((*_931).14: u32);
        _914 = calculate_perp_if_fee(move _915, move _925, move _926, move _927, move _928, move _929, move _930) -> [return: bb414, unwind: bb1075];
    }

    bb414: {
        StorageDead(_930);
        StorageDead(_929);
        StorageDead(_928);
        StorageDead(_927);
        StorageDead(_926);
        StorageDead(_925);
        StorageDead(_915);
        _913 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _914) -> [return: bb415, unwind: bb1075];
    }

    bb415: {
        StorageDead(_914);
        _933 = discriminant(_913);
        switchInt(move _933) -> [0: bb416, 1: bb417, otherwise: bb18];
    }

    bb416: {
        StorageLive(_937);
        _937 = ((_913 as Continue).0: u32);
        _912 = _937;
        StorageDead(_937);
        StorageDead(_931);
        StorageDead(_916);
        StorageDead(_913);
        StorageLive(_938);
        StorageLive(_939);
        StorageLive(_940);
        StorageLive(_941);
        _941 = _835;
        StorageLive(_942);
        _942 = _825;
        StorageLive(_943);
        _943 = _884;
        StorageLive(_944);
        _944 = _912;
        StorageLive(_945);
        _945 = _511;
        StorageLive(_946);
        _946 = _868;
        _940 = calculate_base_asset_amount_to_cover_margin_shortage(move _941, move _942, move _943, move _944, move _945, move _946) -> [return: bb419, unwind: bb1075];
    }

    bb417: {
        StorageLive(_934);
        _934 = ((_913 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_936);
        _936 = _934;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _936) -> [return: bb418, unwind: bb1075];
    }

    bb418: {
        StorageDead(_936);
        StorageDead(_934);
        StorageDead(_931);
        goto -> bb971;
    }

    bb419: {
        StorageDead(_946);
        StorageDead(_945);
        StorageDead(_944);
        StorageDead(_943);
        StorageDead(_942);
        StorageDead(_941);
        _939 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _940) -> [return: bb420, unwind: bb1075];
    }

    bb420: {
        StorageDead(_940);
        _947 = discriminant(_939);
        switchInt(move _947) -> [0: bb421, 1: bb422, otherwise: bb18];
    }

    bb421: {
        StorageLive(_951);
        _951 = ((_939 as Continue).0: u64);
        _938 = _951;
        StorageDead(_951);
        StorageDead(_939);
        StorageLive(_952);
        StorageLive(_953);
        StorageLive(_954);
        _954 = _938;
        _953 = Ne(move _954, const _);
        switchInt(move _953) -> [0: bb425, otherwise: bb424];
    }

    bb422: {
        StorageLive(_948);
        _948 = ((_939 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_950);
        _950 = _948;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _950) -> [return: bb423, unwind: bb1075];
    }

    bb423: {
        StorageDead(_950);
        StorageDead(_948);
        StorageDead(_939);
        goto -> bb970;
    }

    bb424: {
        StorageDead(_954);
        StorageLive(_955);
        StorageLive(_956);
        StorageLive(_957);
        StorageLive(_958);
        _958 = _938;
        StorageLive(_959);
        StorageLive(_960);
        StorageLive(_961);
        _961 = &_844;
        _960 = <Ref<'_, PerpMarket> as Deref>::deref(move _961) -> [return: bb426, unwind: bb1075];
    }

    bb425: {
        StorageDead(_954);
        _952 = const ();
        goto -> bb432;
    }

    bb426: {
        StorageDead(_961);
        _959 = (((*_960).1: state::perp_market::AMM).52: u64);
        _957 = standardize_base_asset_amount_ceil(move _958, move _959) -> [return: bb427, unwind: bb1075];
    }

    bb427: {
        StorageDead(_959);
        StorageDead(_958);
        _956 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _957) -> [return: bb428, unwind: bb1075];
    }

    bb428: {
        StorageDead(_957);
        _962 = discriminant(_956);
        switchInt(move _962) -> [0: bb429, 1: bb430, otherwise: bb18];
    }

    bb429: {
        StorageLive(_966);
        _966 = ((_956 as Continue).0: u64);
        _955 = _966;
        StorageDead(_966);
        _938 = move _955;
        StorageDead(_955);
        StorageDead(_960);
        StorageDead(_956);
        _952 = const ();
        goto -> bb432;
    }

    bb430: {
        StorageLive(_963);
        _963 = ((_956 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_965);
        _965 = _963;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _965) -> [return: bb431, unwind: bb1075];
    }

    bb431: {
        StorageDead(_965);
        StorageDead(_963);
        StorageDead(_955);
        StorageDead(_960);
        StorageDead(_956);
        StorageDead(_953);
        StorageDead(_952);
        goto -> bb970;
    }

    bb432: {
        StorageDead(_953);
        StorageDead(_952);
        StorageLive(_967);
        StorageLive(_968);
        _2118 = const false;
        _968 = move _844;
        _967 = std::mem::drop::<Ref<'_, PerpMarket>>(move _968) -> [return: bb433, unwind: bb1075];
    }

    bb433: {
        StorageDead(_968);
        StorageDead(_967);
        StorageLive(_969);
        StorageLive(_970);
        _2117 = const false;
        _970 = move _855;
        _969 = std::mem::drop::<Ref<'_, SpotMarket>>(move _970) -> [return: bb434, unwind: bb1075];
    }

    bb434: {
        StorageDead(_970);
        StorageDead(_969);
        StorageLive(_971);
        StorageLive(_972);
        StorageLive(_973);
        StorageLive(_974);
        _974 = &(*_4);
        StorageLive(_975);
        _975 = _835;
        StorageLive(_976);
        _976 = _13;
        StorageLive(_977);
        _977 = _17;
        StorageLive(_978);
        _978 = _19;
        _973 = calculate_max_pct_to_liquidate(move _974, move _975, move _976, move _977, move _978) -> [return: bb435, unwind: bb1075];
    }

    bb435: {
        StorageDead(_978);
        StorageDead(_977);
        StorageDead(_976);
        StorageDead(_975);
        StorageDead(_974);
        _972 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _973) -> [return: bb436, unwind: bb1075];
    }

    bb436: {
        StorageDead(_973);
        _979 = discriminant(_972);
        switchInt(move _979) -> [0: bb437, 1: bb438, otherwise: bb18];
    }

    bb437: {
        StorageLive(_983);
        _983 = ((_972 as Continue).0: u128);
        _971 = _983;
        StorageDead(_983);
        StorageDead(_972);
        StorageLive(_984);
        StorageLive(_985);
        StorageLive(_986);
        StorageLive(_987);
        StorageLive(_988);
        StorageLive(_989);
        StorageLive(_990);
        StorageLive(_991);
        StorageLive(_992);
        StorageLive(_993);
        StorageLive(_994);
        _994 = _938;
        _993 = <u64 as Cast>::cast::<u128>(move _994) -> [return: bb440, unwind: bb1075];
    }

    bb438: {
        StorageLive(_980);
        _980 = ((_972 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_982);
        _982 = _980;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _982) -> [return: bb439, unwind: bb1075];
    }

    bb439: {
        StorageDead(_982);
        StorageDead(_980);
        StorageDead(_972);
        goto -> bb969;
    }

    bb440: {
        StorageDead(_994);
        _992 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _993) -> [return: bb441, unwind: bb1075];
    }

    bb441: {
        StorageDead(_993);
        _995 = discriminant(_992);
        switchInt(move _995) -> [0: bb442, 1: bb443, otherwise: bb18];
    }

    bb442: {
        StorageLive(_999);
        _999 = ((_992 as Continue).0: u128);
        _991 = _999;
        StorageDead(_999);
        StorageLive(_1000);
        _1000 = _971;
        _990 = core::num::<impl u128>::saturating_mul(move _991, move _1000) -> [return: bb445, unwind: bb1075];
    }

    bb443: {
        StorageLive(_996);
        _996 = ((_992 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_998);
        _998 = _996;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _998) -> [return: bb444, unwind: bb1075];
    }

    bb444: {
        StorageDead(_998);
        StorageDead(_996);
        StorageDead(_991);
        StorageDead(_990);
        StorageDead(_989);
        goto -> bb966;
    }

    bb445: {
        StorageDead(_1000);
        StorageDead(_991);
        _989 = <u128 as SafeMath>::safe_div(move _990, const _) -> [return: bb446, unwind: bb1075];
    }

    bb446: {
        StorageDead(_990);
        _988 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _989) -> [return: bb447, unwind: bb1075];
    }

    bb447: {
        StorageDead(_989);
        _1001 = discriminant(_988);
        switchInt(move _1001) -> [0: bb448, 1: bb449, otherwise: bb18];
    }

    bb448: {
        StorageLive(_1005);
        _1005 = ((_988 as Continue).0: u128);
        _987 = _1005;
        StorageDead(_1005);
        _986 = <u128 as Cast>::cast::<u64>(move _987) -> [return: bb451, unwind: bb1075];
    }

    bb449: {
        StorageLive(_1002);
        _1002 = ((_988 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1004);
        _1004 = _1002;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1004) -> [return: bb450, unwind: bb1075];
    }

    bb450: {
        StorageDead(_1004);
        StorageDead(_1002);
        goto -> bb966;
    }

    bb451: {
        StorageDead(_987);
        _985 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _986) -> [return: bb452, unwind: bb1075];
    }

    bb452: {
        StorageDead(_986);
        _1006 = discriminant(_985);
        switchInt(move _1006) -> [0: bb453, 1: bb454, otherwise: bb18];
    }

    bb453: {
        StorageLive(_1010);
        _1010 = ((_985 as Continue).0: u64);
        _984 = _1010;
        StorageDead(_1010);
        StorageDead(_992);
        StorageDead(_988);
        StorageDead(_985);
        StorageLive(_1011);
        StorageLive(_1012);
        StorageLive(_1013);
        _1013 = _984;
        _1012 = Eq(move _1013, const 0_u64);
        switchInt(move _1012) -> [0: bb457, otherwise: bb456];
    }

    bb454: {
        StorageLive(_1007);
        _1007 = ((_985 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1009);
        _1009 = _1007;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1009) -> [return: bb455, unwind: bb1075];
    }

    bb455: {
        StorageDead(_1009);
        StorageDead(_1007);
        goto -> bb967;
    }

    bb456: {
        StorageDead(_1013);
        StorageLive(_1015);
        StorageLive(_1016);
        StorageLive(_1017);
        _1017 = const "max_base_asset_amount_allowed_to_be_transferred == 0";
        _1016 = &(*_1017);
        _1015 = solana_program::log::sol_log(move _1016) -> [return: bb458, unwind: bb1075];
    }

    bb457: {
        StorageDead(_1013);
        _1011 = const ();
        StorageDead(_1012);
        StorageDead(_1011);
        StorageLive(_1019);
        StorageLive(_1020);
        StorageLive(_1021);
        StorageLive(_1022);
        StorageLive(_1023);
        StorageLive(_1024);
        StorageLive(_1025);
        StorageLive(_1026);
        StorageLive(_1027);
        StorageLive(_1028);
        _1028 = _785;
        _1027 = <u64 as Cast>::cast::<i128>(move _1028) -> [return: bb459, unwind: bb1075];
    }

    bb458: {
        StorageDead(_1016);
        StorageDead(_1017);
        StorageDead(_1015);
        StorageLive(_1018);
        _1018 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _1018);
        StorageDead(_1018);
        StorageDead(_1012);
        StorageDead(_1011);
        goto -> bb968;
    }

    bb459: {
        StorageDead(_1028);
        _1026 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _1027) -> [return: bb460, unwind: bb1075];
    }

    bb460: {
        StorageDead(_1027);
        _1029 = discriminant(_1026);
        switchInt(move _1029) -> [0: bb461, 1: bb462, otherwise: bb18];
    }

    bb461: {
        StorageLive(_1033);
        _1033 = ((_1026 as Continue).0: i128);
        _1025 = _1033;
        StorageDead(_1033);
        StorageLive(_1034);
        _1034 = _511;
        _1024 = calculate_base_asset_value_with_oracle_price(move _1025, move _1034) -> [return: bb464, unwind: bb1075];
    }

    bb462: {
        StorageLive(_1030);
        _1030 = ((_1026 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1032);
        _1032 = _1030;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1032) -> [return: bb463, unwind: bb1075];
    }

    bb463: {
        StorageDead(_1032);
        StorageDead(_1030);
        StorageDead(_1025);
        StorageDead(_1024);
        goto -> bb963;
    }

    bb464: {
        StorageDead(_1034);
        StorageDead(_1025);
        _1023 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1024) -> [return: bb465, unwind: bb1075];
    }

    bb465: {
        StorageDead(_1024);
        _1035 = discriminant(_1023);
        switchInt(move _1035) -> [0: bb466, 1: bb467, otherwise: bb18];
    }

    bb466: {
        StorageLive(_1039);
        _1039 = ((_1023 as Continue).0: u128);
        _1022 = _1039;
        StorageDead(_1039);
        _1021 = <u128 as Cast>::cast::<u64>(move _1022) -> [return: bb469, unwind: bb1075];
    }

    bb467: {
        StorageLive(_1036);
        _1036 = ((_1023 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1038);
        _1038 = _1036;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1038) -> [return: bb468, unwind: bb1075];
    }

    bb468: {
        StorageDead(_1038);
        StorageDead(_1036);
        goto -> bb963;
    }

    bb469: {
        StorageDead(_1022);
        _1020 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _1021) -> [return: bb470, unwind: bb1075];
    }

    bb470: {
        StorageDead(_1021);
        _1040 = discriminant(_1020);
        switchInt(move _1040) -> [0: bb471, 1: bb472, otherwise: bb18];
    }

    bb471: {
        StorageLive(_1044);
        _1044 = ((_1020 as Continue).0: u64);
        _1019 = _1044;
        StorageDead(_1044);
        StorageDead(_1026);
        StorageDead(_1023);
        StorageDead(_1020);
        StorageLive(_1045);
        StorageLive(_1046);
        StorageLive(_1047);
        _1047 = _1019;
        StorageLive(_1048);
        _1049 = CheckedMul(const 50_u64, const _);
        assert(!move (_1049.1: bool), "attempt to compute `{} * {}`, which would overflow", const 50_u64, const _) -> [success: bb474, unwind: bb1075];
    }

    bb472: {
        StorageLive(_1041);
        _1041 = ((_1020 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1043);
        _1043 = _1041;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1043) -> [return: bb473, unwind: bb1075];
    }

    bb473: {
        StorageDead(_1043);
        StorageDead(_1041);
        goto -> bb964;
    }

    bb474: {
        _1048 = move (_1049.0: u64);
        _1046 = Gt(move _1047, move _1048);
        switchInt(move _1046) -> [0: bb476, otherwise: bb475];
    }

    bb475: {
        StorageDead(_1048);
        StorageDead(_1047);
        _1045 = const 0_u64;
        goto -> bb477;
    }

    bb476: {
        StorageDead(_1048);
        StorageDead(_1047);
        _1045 = _785;
        goto -> bb477;
    }

    bb477: {
        StorageDead(_1046);
        StorageLive(_1050);
        StorageLive(_1051);
        StorageLive(_1052);
        _1052 = _785;
        StorageLive(_1053);
        _1053 = _647;
        _1051 = <u64 as Ord>::min(move _1052, move _1053) -> [return: bb478, unwind: bb1075];
    }

    bb478: {
        StorageDead(_1053);
        StorageDead(_1052);
        StorageLive(_1054);
        StorageLive(_1055);
        _1055 = _984;
        StorageLive(_1056);
        _1056 = _1045;
        _1054 = <u64 as Ord>::max(move _1055, move _1056) -> [return: bb479, unwind: bb1075];
    }

    bb479: {
        StorageDead(_1056);
        StorageDead(_1055);
        _1050 = <u64 as Ord>::min(move _1051, move _1054) -> [return: bb480, unwind: bb1075];
    }

    bb480: {
        StorageDead(_1054);
        StorageDead(_1051);
        StorageLive(_1057);
        StorageLive(_1058);
        StorageLive(_1059);
        StorageLive(_1060);
        _1060 = _1050;
        StorageLive(_1061);
        StorageLive(_1062);
        StorageLive(_1063);
        StorageLive(_1064);
        StorageLive(_1065);
        StorageLive(_1066);
        StorageLive(_1067);
        _1067 = &(*_10);
        StorageLive(_1068);
        StorageLive(_1069);
        _1069 = &_1;
        _1068 = &(*_1069);
        _1066 = PerpMarketMap::<'_>::get_ref(move _1067, move _1068) -> [return: bb481, unwind: bb1075];
    }

    bb481: {
        StorageDead(_1068);
        StorageDead(_1067);
        _1065 = <std::result::Result<Ref<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _1066) -> [return: bb482, unwind: bb1075];
    }

    bb482: {
        _2116 = const true;
        StorageDead(_1066);
        _1070 = discriminant(_1065);
        switchInt(move _1070) -> [0: bb483, 1: bb484, otherwise: bb18];
    }

    bb483: {
        StorageLive(_1074);
        _1074 = move ((_1065 as Continue).0: std::cell::Ref<'_, state::perp_market::PerpMarket>);
        _1064 = move _1074;
        StorageDead(_1074);
        _1063 = &_1064;
        _1062 = <Ref<'_, PerpMarket> as Deref>::deref(move _1063) -> [return: bb486, unwind: bb1025];
    }

    bb484: {
        StorageLive(_1071);
        _1071 = ((_1065 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1073);
        _1073 = _1071;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1073) -> [return: bb485, unwind: bb1073];
    }

    bb485: {
        StorageDead(_1073);
        StorageDead(_1071);
        StorageDead(_1063);
        StorageDead(_1061);
        StorageDead(_1060);
        StorageDead(_1059);
        goto -> bb1058;
    }

    bb486: {
        StorageDead(_1063);
        _1061 = (((*_1062).1: state::perp_market::AMM).52: u64);
        _1059 = standardize_base_asset_amount_ceil(move _1060, move _1061) -> [return: bb487, unwind: bb1025];
    }

    bb487: {
        StorageDead(_1061);
        StorageDead(_1060);
        _1058 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _1059) -> [return: bb488, unwind: bb1025];
    }

    bb488: {
        StorageDead(_1059);
        _1075 = discriminant(_1058);
        switchInt(move _1075) -> [0: bb489, 1: bb490, otherwise: bb18];
    }

    bb489: {
        StorageLive(_1079);
        _1079 = ((_1058 as Continue).0: u64);
        _1057 = _1079;
        StorageDead(_1079);
        drop(_1064) -> [return: bb1053, unwind: bb1073];
    }

    bb490: {
        StorageLive(_1076);
        _1076 = ((_1058 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1078);
        _1078 = _1076;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1078) -> [return: bb491, unwind: bb1025];
    }

    bb491: {
        StorageDead(_1078);
        StorageDead(_1076);
        drop(_1064) -> [return: bb1058, unwind: bb1073];
    }

    bb492: {
        StorageLive(_1082);
        _1082 = ((_3 as Some).0: u64);
        StorageLive(_1083);
        StorageLive(_1084);
        StorageLive(_1085);
        StorageLive(_1086);
        _1086 = _511;
        _1085 = <i64 as Cast>::cast::<u128>(move _1086) -> [return: bb493, unwind: bb1075];
    }

    bb493: {
        StorageDead(_1086);
        _1084 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1085) -> [return: bb494, unwind: bb1075];
    }

    bb494: {
        StorageDead(_1085);
        _1087 = discriminant(_1084);
        switchInt(move _1087) -> [0: bb495, 1: bb496, otherwise: bb18];
    }

    bb495: {
        StorageLive(_1091);
        _1091 = ((_1084 as Continue).0: u128);
        _1083 = _1091;
        StorageDead(_1091);
        StorageDead(_1084);
        StorageLive(_1092);
        StorageLive(_1093);
        StorageLive(_1094);
        StorageLive(_1095);
        StorageLive(_1096);
        StorageLive(_1097);
        StorageLive(_1098);
        _1098 = _1083;
        StorageLive(_1099);
        StorageLive(_1100);
        StorageLive(_1101);
        StorageLive(_1102);
        _1102 = _884;
        _1101 = <u32 as Cast>::cast::<u128>(move _1102) -> [return: bb498, unwind: bb1075];
    }

    bb496: {
        StorageLive(_1088);
        _1088 = ((_1084 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1090);
        _1090 = _1088;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1090) -> [return: bb497, unwind: bb1075];
    }

    bb497: {
        StorageDead(_1090);
        StorageDead(_1088);
        StorageDead(_1084);
        goto -> bb960;
    }

    bb498: {
        StorageDead(_1102);
        _1100 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1101) -> [return: bb499, unwind: bb1075];
    }

    bb499: {
        StorageDead(_1101);
        _1103 = discriminant(_1100);
        switchInt(move _1103) -> [0: bb500, 1: bb501, otherwise: bb18];
    }

    bb500: {
        StorageLive(_1107);
        _1107 = ((_1100 as Continue).0: u128);
        _1099 = _1107;
        StorageDead(_1107);
        _1097 = <u128 as SafeMath>::safe_mul(move _1098, move _1099) -> [return: bb503, unwind: bb1075];
    }

    bb501: {
        StorageLive(_1104);
        _1104 = ((_1100 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1106);
        _1106 = _1104;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1106) -> [return: bb502, unwind: bb1075];
    }

    bb502: {
        StorageDead(_1106);
        StorageDead(_1104);
        StorageDead(_1099);
        StorageDead(_1098);
        StorageDead(_1097);
        goto -> bb958;
    }

    bb503: {
        StorageDead(_1099);
        StorageDead(_1098);
        _1096 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1097) -> [return: bb504, unwind: bb1075];
    }

    bb504: {
        StorageDead(_1097);
        _1108 = discriminant(_1096);
        switchInt(move _1108) -> [0: bb505, 1: bb506, otherwise: bb18];
    }

    bb505: {
        StorageLive(_1112);
        _1112 = ((_1096 as Continue).0: u128);
        _1095 = _1112;
        StorageDead(_1112);
        _1094 = <u128 as SafeMath>::safe_div(move _1095, const _) -> [return: bb508, unwind: bb1075];
    }

    bb506: {
        StorageLive(_1109);
        _1109 = ((_1096 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1111);
        _1111 = _1109;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1111) -> [return: bb507, unwind: bb1075];
    }

    bb507: {
        StorageDead(_1111);
        StorageDead(_1109);
        goto -> bb958;
    }

    bb508: {
        StorageDead(_1095);
        _1093 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1094) -> [return: bb509, unwind: bb1075];
    }

    bb509: {
        StorageDead(_1094);
        _1113 = discriminant(_1093);
        switchInt(move _1113) -> [0: bb510, 1: bb511, otherwise: bb18];
    }

    bb510: {
        StorageLive(_1117);
        _1117 = ((_1093 as Continue).0: u128);
        _1092 = _1117;
        StorageDead(_1117);
        StorageDead(_1100);
        StorageDead(_1096);
        StorageDead(_1093);
        StorageLive(_1118);
        StorageLive(_1119);
        StorageLive(_1120);
        _1120 = _379;
        _1121 = Len(((*_4).4: [state::user::PerpPosition; 8]));
        _1122 = Lt(_1120, _1121);
        assert(move _1122, "index out of bounds: the length is {} but the index is {}", move _1121, _1120) -> [success: bb513, unwind: bb1075];
    }

    bb511: {
        StorageLive(_1114);
        _1114 = ((_1093 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1116);
        _1116 = _1114;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1116) -> [return: bb512, unwind: bb1075];
    }

    bb512: {
        StorageDead(_1116);
        StorageDead(_1114);
        goto -> bb959;
    }

    bb513: {
        _1119 = &((*_4).4: [state::user::PerpPosition; 8])[_1120];
        _1118 = PerpPosition::get_direction(move _1119) -> [return: bb514, unwind: bb1075];
    }

    bb514: {
        StorageDead(_1119);
        _1123 = discriminant(_1118);
        switchInt(move _1123) -> [0: bb516, 1: bb515, otherwise: bb18];
    }

    bb515: {
        StorageLive(_1196);
        StorageLive(_1197);
        StorageLive(_1198);
        StorageLive(_1199);
        _1199 = _1083;
        StorageLive(_1200);
        _1200 = _1092;
        _1198 = <u128 as SafeMath>::safe_add(move _1199, move _1200) -> [return: bb547, unwind: bb1075];
    }

    bb516: {
        StorageLive(_1124);
        StorageLive(_1125);
        StorageLive(_1126);
        StorageLive(_1127);
        _1127 = _1083;
        StorageLive(_1128);
        _1128 = _1092;
        _1126 = <u128 as SafeMath>::safe_sub(move _1127, move _1128) -> [return: bb517, unwind: bb1075];
    }

    bb517: {
        StorageDead(_1128);
        StorageDead(_1127);
        _1125 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1126) -> [return: bb518, unwind: bb1075];
    }

    bb518: {
        StorageDead(_1126);
        _1129 = discriminant(_1125);
        switchInt(move _1129) -> [0: bb519, 1: bb520, otherwise: bb18];
    }

    bb519: {
        StorageLive(_1133);
        _1133 = ((_1125 as Continue).0: u128);
        _1124 = _1133;
        StorageDead(_1133);
        StorageDead(_1125);
        StorageLive(_1134);
        StorageLive(_1135);
        StorageLive(_1136);
        StorageLive(_1137);
        _1137 = _1124;
        StorageLive(_1138);
        StorageLive(_1139);
        StorageLive(_1140);
        StorageLive(_1141);
        _1141 = _1082;
        _1140 = <u64 as Cast>::cast::<u128>(move _1141) -> [return: bb522, unwind: bb1075];
    }

    bb520: {
        StorageLive(_1130);
        _1130 = ((_1125 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1132);
        _1132 = _1130;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1132) -> [return: bb521, unwind: bb1075];
    }

    bb521: {
        StorageDead(_1132);
        StorageDead(_1130);
        StorageDead(_1125);
        StorageDead(_1124);
        goto -> bb957;
    }

    bb522: {
        StorageDead(_1141);
        _1139 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1140) -> [return: bb523, unwind: bb1075];
    }

    bb523: {
        StorageDead(_1140);
        _1142 = discriminant(_1139);
        switchInt(move _1142) -> [0: bb524, 1: bb525, otherwise: bb18];
    }

    bb524: {
        StorageLive(_1146);
        _1146 = ((_1139 as Continue).0: u128);
        _1138 = _1146;
        StorageDead(_1146);
        _1136 = Le(move _1137, move _1138);
        switchInt(move _1136) -> [0: bb528, otherwise: bb527];
    }

    bb525: {
        StorageLive(_1143);
        _1143 = ((_1139 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1145);
        _1145 = _1143;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1145) -> [return: bb526, unwind: bb1075];
    }

    bb526: {
        StorageDead(_1145);
        StorageDead(_1143);
        StorageDead(_1139);
        StorageDead(_1138);
        StorageDead(_1137);
        StorageDead(_1136);
        StorageDead(_1135);
        goto -> bb956;
    }

    bb527: {
        StorageDead(_1139);
        StorageDead(_1138);
        StorageDead(_1137);
        StorageLive(_1147);
        _1147 = ();
        _1135 = std::result::Result::<(), error::ErrorCode>::Ok(move _1147);
        StorageDead(_1147);
        goto -> bb542;
    }

    bb528: {
        StorageDead(_1139);
        StorageDead(_1138);
        StorageDead(_1137);
        StorageLive(_1148);
        _1148 = error::ErrorCode::LiquidationDoesntSatisfyLimitPrice;
        StorageLive(_1149);
        StorageLive(_1150);
        StorageLive(_1151);
        StorageLive(_1152);
        StorageLive(_1153);
        StorageLive(_1154);
        StorageLive(_1155);
        StorageLive(_1156);
        StorageLive(_1157);
        StorageLive(_1158);
        StorageLive(_1159);
        _2098 = const _;
        _1159 = &(*_2098);
        _1158 = &(*_1159);
        _1157 = move _1158 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1158);
        StorageLive(_1161);
        StorageLive(_1162);
        StorageLive(_1163);
        StorageLive(_1164);
        StorageLive(_1165);
        StorageLive(_1166);
        StorageLive(_1167);
        _1167 = &_1148;
        _1166 = &(*_1167);
        _1165 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _1166) -> [return: bb529, unwind: bb1075];
    }

    bb529: {
        StorageDead(_1166);
        _1164 = [move _1165];
        StorageDead(_1165);
        _1163 = &_1164;
        _1162 = &(*_1163);
        _1161 = move _1162 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1162);
        _1156 = Arguments::<'_>::new_v1(move _1157, move _1161) -> [return: bb530, unwind: bb1075];
    }

    bb530: {
        StorageDead(_1161);
        StorageDead(_1157);
        _1155 = format(move _1156) -> [return: bb531, unwind: bb1075];
    }

    bb531: {
        StorageDead(_1156);
        StorageDead(_1167);
        StorageDead(_1164);
        StorageDead(_1163);
        StorageDead(_1159);
        _1154 = move _1155;
        StorageDead(_1155);
        _1153 = &_1154;
        _1152 = &(*_1153);
        _1151 = <String as Deref>::deref(move _1152) -> [return: bb532, unwind: bb1024];
    }

    bb532: {
        _1150 = &(*_1151);
        StorageDead(_1152);
        _1149 = solana_program::log::sol_log(move _1150) -> [return: bb533, unwind: bb1024];
    }

    bb533: {
        StorageDead(_1150);
        drop(_1154) -> [return: bb534, unwind: bb1075];
    }

    bb534: {
        StorageDead(_1154);
        StorageDead(_1153);
        StorageDead(_1151);
        StorageDead(_1149);
        StorageLive(_1168);
        StorageLive(_1169);
        StorageLive(_1170);
        StorageLive(_1171);
        StorageLive(_1172);
        StorageLive(_1173);
        StorageLive(_1174);
        StorageLive(_1175);
        StorageLive(_1176);
        StorageLive(_1177);
        StorageLive(_1178);
        _2097 = const _;
        _1178 = &(*_2097);
        _1177 = &(*_1178);
        _1176 = move _1177 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1177);
        StorageLive(_1180);
        StorageLive(_1181);
        StorageLive(_1182);
        StorageLive(_1183);
        StorageLive(_1184);
        StorageLive(_1185);
        StorageLive(_1186);
        _1186 = &_1082;
        _1185 = &(*_1186);
        _1184 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _1185) -> [return: bb535, unwind: bb1075];
    }

    bb535: {
        StorageDead(_1185);
        StorageLive(_1187);
        StorageLive(_1188);
        StorageLive(_1189);
        _1189 = &_1124;
        _1188 = &(*_1189);
        _1187 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _1188) -> [return: bb536, unwind: bb1075];
    }

    bb536: {
        StorageDead(_1188);
        _1183 = [move _1184, move _1187];
        StorageDead(_1187);
        StorageDead(_1184);
        _1182 = &_1183;
        _1181 = &(*_1182);
        _1180 = move _1181 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1181);
        _1175 = Arguments::<'_>::new_v1(move _1176, move _1180) -> [return: bb537, unwind: bb1075];
    }

    bb537: {
        StorageDead(_1180);
        StorageDead(_1176);
        _1174 = format(move _1175) -> [return: bb538, unwind: bb1075];
    }

    bb538: {
        StorageDead(_1175);
        StorageDead(_1189);
        StorageDead(_1186);
        StorageDead(_1183);
        StorageDead(_1182);
        StorageDead(_1178);
        _1173 = move _1174;
        StorageDead(_1174);
        _1172 = &_1173;
        _1171 = &(*_1172);
        _1170 = <String as Deref>::deref(move _1171) -> [return: bb539, unwind: bb1023];
    }

    bb539: {
        _1169 = &(*_1170);
        StorageDead(_1171);
        _1168 = solana_program::log::sol_log(move _1169) -> [return: bb540, unwind: bb1023];
    }

    bb540: {
        StorageDead(_1169);
        drop(_1173) -> [return: bb541, unwind: bb1075];
    }

    bb541: {
        StorageDead(_1173);
        StorageDead(_1172);
        StorageDead(_1170);
        StorageDead(_1168);
        StorageLive(_1190);
        _1190 = _1148;
        _1135 = std::result::Result::<(), error::ErrorCode>::Err(move _1190);
        StorageDead(_1190);
        StorageDead(_1148);
        goto -> bb542;
    }

    bb542: {
        StorageDead(_1136);
        _1134 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1135) -> [return: bb543, unwind: bb1075];
    }

    bb543: {
        StorageDead(_1135);
        _1191 = discriminant(_1134);
        switchInt(move _1191) -> [0: bb544, 1: bb545, otherwise: bb18];
    }

    bb544: {
        StorageLive(_1195);
        _1195 = ((_1134 as Continue).0: ());
        _1080 = _1195;
        StorageDead(_1195);
        StorageDead(_1124);
        StorageDead(_1134);
        goto -> bb577;
    }

    bb545: {
        StorageLive(_1192);
        _1192 = ((_1134 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1194);
        _1194 = _1192;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1194) -> [return: bb546, unwind: bb1075];
    }

    bb546: {
        StorageDead(_1194);
        StorageDead(_1192);
        goto -> bb956;
    }

    bb547: {
        StorageDead(_1200);
        StorageDead(_1199);
        _1197 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1198) -> [return: bb548, unwind: bb1075];
    }

    bb548: {
        StorageDead(_1198);
        _1201 = discriminant(_1197);
        switchInt(move _1201) -> [0: bb549, 1: bb550, otherwise: bb18];
    }

    bb549: {
        StorageLive(_1205);
        _1205 = ((_1197 as Continue).0: u128);
        _1196 = _1205;
        StorageDead(_1205);
        StorageDead(_1197);
        StorageLive(_1206);
        StorageLive(_1207);
        StorageLive(_1208);
        StorageLive(_1209);
        _1209 = _1196;
        StorageLive(_1210);
        StorageLive(_1211);
        StorageLive(_1212);
        StorageLive(_1213);
        _1213 = _1082;
        _1212 = <u64 as Cast>::cast::<u128>(move _1213) -> [return: bb552, unwind: bb1075];
    }

    bb550: {
        StorageLive(_1202);
        _1202 = ((_1197 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1204);
        _1204 = _1202;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1204) -> [return: bb551, unwind: bb1075];
    }

    bb551: {
        StorageDead(_1204);
        StorageDead(_1202);
        StorageDead(_1197);
        StorageDead(_1196);
        goto -> bb957;
    }

    bb552: {
        StorageDead(_1213);
        _1211 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1212) -> [return: bb553, unwind: bb1075];
    }

    bb553: {
        StorageDead(_1212);
        _1214 = discriminant(_1211);
        switchInt(move _1214) -> [0: bb554, 1: bb555, otherwise: bb18];
    }

    bb554: {
        StorageLive(_1218);
        _1218 = ((_1211 as Continue).0: u128);
        _1210 = _1218;
        StorageDead(_1218);
        _1208 = Ge(move _1209, move _1210);
        switchInt(move _1208) -> [0: bb558, otherwise: bb557];
    }

    bb555: {
        StorageLive(_1215);
        _1215 = ((_1211 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1217);
        _1217 = _1215;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1217) -> [return: bb556, unwind: bb1075];
    }

    bb556: {
        StorageDead(_1217);
        StorageDead(_1215);
        StorageDead(_1211);
        StorageDead(_1210);
        StorageDead(_1209);
        StorageDead(_1208);
        StorageDead(_1207);
        goto -> bb955;
    }

    bb557: {
        StorageDead(_1211);
        StorageDead(_1210);
        StorageDead(_1209);
        StorageLive(_1219);
        _1219 = ();
        _1207 = std::result::Result::<(), error::ErrorCode>::Ok(move _1219);
        StorageDead(_1219);
        goto -> bb572;
    }

    bb558: {
        StorageDead(_1211);
        StorageDead(_1210);
        StorageDead(_1209);
        StorageLive(_1220);
        _1220 = error::ErrorCode::LiquidationDoesntSatisfyLimitPrice;
        StorageLive(_1221);
        StorageLive(_1222);
        StorageLive(_1223);
        StorageLive(_1224);
        StorageLive(_1225);
        StorageLive(_1226);
        StorageLive(_1227);
        StorageLive(_1228);
        StorageLive(_1229);
        StorageLive(_1230);
        StorageLive(_1231);
        _2096 = const _;
        _1231 = &(*_2096);
        _1230 = &(*_1231);
        _1229 = move _1230 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1230);
        StorageLive(_1233);
        StorageLive(_1234);
        StorageLive(_1235);
        StorageLive(_1236);
        StorageLive(_1237);
        StorageLive(_1238);
        StorageLive(_1239);
        _1239 = &_1220;
        _1238 = &(*_1239);
        _1237 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _1238) -> [return: bb559, unwind: bb1075];
    }

    bb559: {
        StorageDead(_1238);
        _1236 = [move _1237];
        StorageDead(_1237);
        _1235 = &_1236;
        _1234 = &(*_1235);
        _1233 = move _1234 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1234);
        _1228 = Arguments::<'_>::new_v1(move _1229, move _1233) -> [return: bb560, unwind: bb1075];
    }

    bb560: {
        StorageDead(_1233);
        StorageDead(_1229);
        _1227 = format(move _1228) -> [return: bb561, unwind: bb1075];
    }

    bb561: {
        StorageDead(_1228);
        StorageDead(_1239);
        StorageDead(_1236);
        StorageDead(_1235);
        StorageDead(_1231);
        _1226 = move _1227;
        StorageDead(_1227);
        _1225 = &_1226;
        _1224 = &(*_1225);
        _1223 = <String as Deref>::deref(move _1224) -> [return: bb562, unwind: bb1022];
    }

    bb562: {
        _1222 = &(*_1223);
        StorageDead(_1224);
        _1221 = solana_program::log::sol_log(move _1222) -> [return: bb563, unwind: bb1022];
    }

    bb563: {
        StorageDead(_1222);
        drop(_1226) -> [return: bb564, unwind: bb1075];
    }

    bb564: {
        StorageDead(_1226);
        StorageDead(_1225);
        StorageDead(_1223);
        StorageDead(_1221);
        StorageLive(_1240);
        StorageLive(_1241);
        StorageLive(_1242);
        StorageLive(_1243);
        StorageLive(_1244);
        StorageLive(_1245);
        StorageLive(_1246);
        StorageLive(_1247);
        StorageLive(_1248);
        StorageLive(_1249);
        StorageLive(_1250);
        _2095 = const _;
        _1250 = &(*_2095);
        _1249 = &(*_1250);
        _1248 = move _1249 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1249);
        StorageLive(_1252);
        StorageLive(_1253);
        StorageLive(_1254);
        StorageLive(_1255);
        StorageLive(_1256);
        StorageLive(_1257);
        StorageLive(_1258);
        _1258 = &_1082;
        _1257 = &(*_1258);
        _1256 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _1257) -> [return: bb565, unwind: bb1075];
    }

    bb565: {
        StorageDead(_1257);
        StorageLive(_1259);
        StorageLive(_1260);
        StorageLive(_1261);
        _1261 = &_1196;
        _1260 = &(*_1261);
        _1259 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _1260) -> [return: bb566, unwind: bb1075];
    }

    bb566: {
        StorageDead(_1260);
        _1255 = [move _1256, move _1259];
        StorageDead(_1259);
        StorageDead(_1256);
        _1254 = &_1255;
        _1253 = &(*_1254);
        _1252 = move _1253 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1253);
        _1247 = Arguments::<'_>::new_v1(move _1248, move _1252) -> [return: bb567, unwind: bb1075];
    }

    bb567: {
        StorageDead(_1252);
        StorageDead(_1248);
        _1246 = format(move _1247) -> [return: bb568, unwind: bb1075];
    }

    bb568: {
        StorageDead(_1247);
        StorageDead(_1261);
        StorageDead(_1258);
        StorageDead(_1255);
        StorageDead(_1254);
        StorageDead(_1250);
        _1245 = move _1246;
        StorageDead(_1246);
        _1244 = &_1245;
        _1243 = &(*_1244);
        _1242 = <String as Deref>::deref(move _1243) -> [return: bb569, unwind: bb1021];
    }

    bb569: {
        _1241 = &(*_1242);
        StorageDead(_1243);
        _1240 = solana_program::log::sol_log(move _1241) -> [return: bb570, unwind: bb1021];
    }

    bb570: {
        StorageDead(_1241);
        drop(_1245) -> [return: bb571, unwind: bb1075];
    }

    bb571: {
        StorageDead(_1245);
        StorageDead(_1244);
        StorageDead(_1242);
        StorageDead(_1240);
        StorageLive(_1262);
        _1262 = _1220;
        _1207 = std::result::Result::<(), error::ErrorCode>::Err(move _1262);
        StorageDead(_1262);
        StorageDead(_1220);
        goto -> bb572;
    }

    bb572: {
        StorageDead(_1208);
        _1206 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1207) -> [return: bb573, unwind: bb1075];
    }

    bb573: {
        StorageDead(_1207);
        _1263 = discriminant(_1206);
        switchInt(move _1263) -> [0: bb574, 1: bb575, otherwise: bb18];
    }

    bb574: {
        StorageLive(_1267);
        _1267 = ((_1206 as Continue).0: ());
        _1080 = _1267;
        StorageDead(_1267);
        StorageDead(_1196);
        StorageDead(_1206);
        goto -> bb577;
    }

    bb575: {
        StorageLive(_1264);
        _1264 = ((_1206 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1266);
        _1266 = _1264;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1266) -> [return: bb576, unwind: bb1075];
    }

    bb576: {
        StorageDead(_1266);
        StorageDead(_1264);
        goto -> bb955;
    }

    bb577: {
        StorageDead(_1092);
        StorageDead(_1083);
        StorageDead(_1120);
        StorageDead(_1118);
        StorageDead(_1082);
        goto -> bb579;
    }

    bb578: {
        _1080 = const ();
        goto -> bb579;
    }

    bb579: {
        StorageDead(_1080);
        StorageLive(_1268);
        StorageLive(_1269);
        StorageLive(_1270);
        StorageLive(_1271);
        StorageLive(_1272);
        StorageLive(_1273);
        StorageLive(_1274);
        StorageLive(_1275);
        StorageLive(_1276);
        StorageLive(_1277);
        _1277 = _1057;
        _1276 = <u64 as Cast>::cast::<i128>(move _1277) -> [return: bb580, unwind: bb1075];
    }

    bb580: {
        StorageDead(_1277);
        _1275 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _1276) -> [return: bb581, unwind: bb1075];
    }

    bb581: {
        StorageDead(_1276);
        _1278 = discriminant(_1275);
        switchInt(move _1278) -> [0: bb582, 1: bb583, otherwise: bb18];
    }

    bb582: {
        StorageLive(_1282);
        _1282 = ((_1275 as Continue).0: i128);
        _1274 = _1282;
        StorageDead(_1282);
        StorageLive(_1283);
        _1283 = _511;
        _1273 = calculate_base_asset_value_with_oracle_price(move _1274, move _1283) -> [return: bb585, unwind: bb1075];
    }

    bb583: {
        StorageLive(_1279);
        _1279 = ((_1275 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1281);
        _1281 = _1279;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1281) -> [return: bb584, unwind: bb1075];
    }

    bb584: {
        StorageDead(_1281);
        StorageDead(_1279);
        StorageDead(_1274);
        StorageDead(_1273);
        goto -> bb952;
    }

    bb585: {
        StorageDead(_1283);
        StorageDead(_1274);
        _1272 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1273) -> [return: bb586, unwind: bb1075];
    }

    bb586: {
        StorageDead(_1273);
        _1284 = discriminant(_1272);
        switchInt(move _1284) -> [0: bb587, 1: bb588, otherwise: bb18];
    }

    bb587: {
        StorageLive(_1288);
        _1288 = ((_1272 as Continue).0: u128);
        _1271 = _1288;
        StorageDead(_1288);
        _1270 = <u128 as Cast>::cast::<u64>(move _1271) -> [return: bb590, unwind: bb1075];
    }

    bb588: {
        StorageLive(_1285);
        _1285 = ((_1272 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1287);
        _1287 = _1285;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1287) -> [return: bb589, unwind: bb1075];
    }

    bb589: {
        StorageDead(_1287);
        StorageDead(_1285);
        goto -> bb952;
    }

    bb590: {
        StorageDead(_1271);
        _1269 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _1270) -> [return: bb591, unwind: bb1075];
    }

    bb591: {
        StorageDead(_1270);
        _1289 = discriminant(_1269);
        switchInt(move _1289) -> [0: bb592, 1: bb593, otherwise: bb18];
    }

    bb592: {
        StorageLive(_1293);
        _1293 = ((_1269 as Continue).0: u64);
        _1268 = _1293;
        StorageDead(_1293);
        StorageDead(_1275);
        StorageDead(_1272);
        StorageDead(_1269);
        StorageLive(_1294);
        StorageLive(_1295);
        StorageLive(_1296);
        StorageLive(_1297);
        StorageLive(_1298);
        StorageLive(_1299);
        StorageLive(_1300);
        StorageLive(_1301);
        StorageLive(_1302);
        StorageLive(_1303);
        StorageLive(_1304);
        StorageLive(_1305);
        StorageLive(_1306);
        StorageLive(_1307);
        _1307 = _1268;
        _1306 = <u64 as Cast>::cast::<u128>(move _1307) -> [return: bb595, unwind: bb1075];
    }

    bb593: {
        StorageLive(_1290);
        _1290 = ((_1269 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1292);
        _1292 = _1290;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1292) -> [return: bb594, unwind: bb1075];
    }

    bb594: {
        StorageDead(_1292);
        StorageDead(_1290);
        goto -> bb953;
    }

    bb595: {
        StorageDead(_1307);
        _1305 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1306) -> [return: bb596, unwind: bb1075];
    }

    bb596: {
        StorageDead(_1306);
        _1308 = discriminant(_1305);
        switchInt(move _1308) -> [0: bb597, 1: bb598, otherwise: bb18];
    }

    bb597: {
        StorageLive(_1312);
        _1312 = ((_1305 as Continue).0: u128);
        _1304 = _1312;
        StorageDead(_1312);
        StorageLive(_1313);
        StorageLive(_1314);
        StorageLive(_1315);
        StorageLive(_1316);
        _1316 = _884;
        _1315 = <u32 as Cast>::cast::<u128>(move _1316) -> [return: bb600, unwind: bb1075];
    }

    bb598: {
        StorageLive(_1309);
        _1309 = ((_1305 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1311);
        _1311 = _1309;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1311) -> [return: bb599, unwind: bb1075];
    }

    bb599: {
        StorageDead(_1311);
        StorageDead(_1309);
        StorageDead(_1304);
        StorageDead(_1303);
        StorageDead(_1301);
        StorageDead(_1300);
        StorageDead(_1298);
        StorageDead(_1297);
        StorageDead(_1295);
        goto -> bb950;
    }

    bb600: {
        StorageDead(_1316);
        _1314 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1315) -> [return: bb601, unwind: bb1075];
    }

    bb601: {
        StorageDead(_1315);
        _1317 = discriminant(_1314);
        switchInt(move _1317) -> [0: bb602, 1: bb603, otherwise: bb18];
    }

    bb602: {
        StorageLive(_1321);
        _1321 = ((_1314 as Continue).0: u128);
        _1313 = _1321;
        StorageDead(_1321);
        _1303 = <u128 as SafeMath>::safe_mul(move _1304, move _1313) -> [return: bb605, unwind: bb1075];
    }

    bb603: {
        StorageLive(_1318);
        _1318 = ((_1314 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1320);
        _1320 = _1318;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1320) -> [return: bb604, unwind: bb1075];
    }

    bb604: {
        StorageDead(_1320);
        StorageDead(_1318);
        StorageDead(_1313);
        StorageDead(_1304);
        StorageDead(_1303);
        goto -> bb947;
    }

    bb605: {
        StorageDead(_1313);
        StorageDead(_1304);
        _1302 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1303) -> [return: bb606, unwind: bb1075];
    }

    bb606: {
        StorageDead(_1303);
        _1322 = discriminant(_1302);
        switchInt(move _1322) -> [0: bb607, 1: bb608, otherwise: bb18];
    }

    bb607: {
        StorageLive(_1326);
        _1326 = ((_1302 as Continue).0: u128);
        _1301 = _1326;
        StorageDead(_1326);
        _1300 = <u128 as SafeMath>::safe_div(move _1301, const _) -> [return: bb610, unwind: bb1075];
    }

    bb608: {
        StorageLive(_1323);
        _1323 = ((_1302 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1325);
        _1325 = _1323;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1325) -> [return: bb609, unwind: bb1075];
    }

    bb609: {
        StorageDead(_1325);
        StorageDead(_1323);
        goto -> bb947;
    }

    bb610: {
        StorageDead(_1301);
        _1299 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1300) -> [return: bb611, unwind: bb1075];
    }

    bb611: {
        StorageDead(_1300);
        _1327 = discriminant(_1299);
        switchInt(move _1327) -> [0: bb612, 1: bb613, otherwise: bb18];
    }

    bb612: {
        StorageLive(_1331);
        _1331 = ((_1299 as Continue).0: u128);
        _1298 = _1331;
        StorageDead(_1331);
        _1297 = <u128 as Cast>::cast::<i64>(move _1298) -> [return: bb615, unwind: bb1075];
    }

    bb613: {
        StorageLive(_1328);
        _1328 = ((_1299 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1330);
        _1330 = _1328;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1330) -> [return: bb614, unwind: bb1075];
    }

    bb614: {
        StorageDead(_1330);
        StorageDead(_1328);
        goto -> bb948;
    }

    bb615: {
        StorageDead(_1298);
        _1296 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _1297) -> [return: bb616, unwind: bb1075];
    }

    bb616: {
        StorageDead(_1297);
        _1332 = discriminant(_1296);
        switchInt(move _1332) -> [0: bb617, 1: bb618, otherwise: bb18];
    }

    bb617: {
        StorageLive(_1336);
        _1336 = ((_1296 as Continue).0: i64);
        _1295 = _1336;
        StorageDead(_1336);
        _1337 = Eq(_1295, const i64::MIN);
        assert(!move _1337, "attempt to negate `{}`, which would overflow", _1295) -> [success: bb620, unwind: bb1075];
    }

    bb618: {
        StorageLive(_1333);
        _1333 = ((_1296 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1335);
        _1335 = _1333;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1335) -> [return: bb619, unwind: bb1075];
    }

    bb619: {
        StorageDead(_1335);
        StorageDead(_1333);
        goto -> bb949;
    }

    bb620: {
        _1294 = Neg(move _1295);
        StorageDead(_1295);
        StorageDead(_1314);
        StorageDead(_1305);
        StorageDead(_1302);
        StorageDead(_1299);
        StorageDead(_1296);
        StorageLive(_1338);
        StorageLive(_1339);
        StorageLive(_1340);
        StorageLive(_1341);
        StorageLive(_1342);
        StorageLive(_1343);
        StorageLive(_1344);
        StorageLive(_1345);
        StorageLive(_1346);
        StorageLive(_1347);
        StorageLive(_1348);
        StorageLive(_1349);
        StorageLive(_1350);
        StorageLive(_1351);
        _1351 = _1268;
        _1350 = <u64 as Cast>::cast::<u128>(move _1351) -> [return: bb621, unwind: bb1075];
    }

    bb621: {
        StorageDead(_1351);
        _1349 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1350) -> [return: bb622, unwind: bb1075];
    }

    bb622: {
        StorageDead(_1350);
        _1352 = discriminant(_1349);
        switchInt(move _1352) -> [0: bb623, 1: bb624, otherwise: bb18];
    }

    bb623: {
        StorageLive(_1356);
        _1356 = ((_1349 as Continue).0: u128);
        _1348 = _1356;
        StorageDead(_1356);
        StorageLive(_1357);
        StorageLive(_1358);
        StorageLive(_1359);
        StorageLive(_1360);
        _1360 = _912;
        _1359 = <u32 as Cast>::cast::<u128>(move _1360) -> [return: bb626, unwind: bb1075];
    }

    bb624: {
        StorageLive(_1353);
        _1353 = ((_1349 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1355);
        _1355 = _1353;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1355) -> [return: bb625, unwind: bb1075];
    }

    bb625: {
        StorageDead(_1355);
        StorageDead(_1353);
        StorageDead(_1348);
        StorageDead(_1347);
        StorageDead(_1345);
        StorageDead(_1344);
        StorageDead(_1342);
        StorageDead(_1341);
        StorageDead(_1339);
        goto -> bb945;
    }

    bb626: {
        StorageDead(_1360);
        _1358 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1359) -> [return: bb627, unwind: bb1075];
    }

    bb627: {
        StorageDead(_1359);
        _1361 = discriminant(_1358);
        switchInt(move _1361) -> [0: bb628, 1: bb629, otherwise: bb18];
    }

    bb628: {
        StorageLive(_1365);
        _1365 = ((_1358 as Continue).0: u128);
        _1357 = _1365;
        StorageDead(_1365);
        _1347 = <u128 as SafeMath>::safe_mul(move _1348, move _1357) -> [return: bb631, unwind: bb1075];
    }

    bb629: {
        StorageLive(_1362);
        _1362 = ((_1358 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1364);
        _1364 = _1362;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1364) -> [return: bb630, unwind: bb1075];
    }

    bb630: {
        StorageDead(_1364);
        StorageDead(_1362);
        StorageDead(_1357);
        StorageDead(_1348);
        StorageDead(_1347);
        goto -> bb942;
    }

    bb631: {
        StorageDead(_1357);
        StorageDead(_1348);
        _1346 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1347) -> [return: bb632, unwind: bb1075];
    }

    bb632: {
        StorageDead(_1347);
        _1366 = discriminant(_1346);
        switchInt(move _1366) -> [0: bb633, 1: bb634, otherwise: bb18];
    }

    bb633: {
        StorageLive(_1370);
        _1370 = ((_1346 as Continue).0: u128);
        _1345 = _1370;
        StorageDead(_1370);
        _1344 = <u128 as SafeMath>::safe_div(move _1345, const _) -> [return: bb636, unwind: bb1075];
    }

    bb634: {
        StorageLive(_1367);
        _1367 = ((_1346 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1369);
        _1369 = _1367;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1369) -> [return: bb635, unwind: bb1075];
    }

    bb635: {
        StorageDead(_1369);
        StorageDead(_1367);
        goto -> bb942;
    }

    bb636: {
        StorageDead(_1345);
        _1343 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1344) -> [return: bb637, unwind: bb1075];
    }

    bb637: {
        StorageDead(_1344);
        _1371 = discriminant(_1343);
        switchInt(move _1371) -> [0: bb638, 1: bb639, otherwise: bb18];
    }

    bb638: {
        StorageLive(_1375);
        _1375 = ((_1343 as Continue).0: u128);
        _1342 = _1375;
        StorageDead(_1375);
        _1341 = <u128 as Cast>::cast::<i64>(move _1342) -> [return: bb641, unwind: bb1075];
    }

    bb639: {
        StorageLive(_1372);
        _1372 = ((_1343 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1374);
        _1374 = _1372;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1374) -> [return: bb640, unwind: bb1075];
    }

    bb640: {
        StorageDead(_1374);
        StorageDead(_1372);
        goto -> bb943;
    }

    bb641: {
        StorageDead(_1342);
        _1340 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _1341) -> [return: bb642, unwind: bb1075];
    }

    bb642: {
        StorageDead(_1341);
        _1376 = discriminant(_1340);
        switchInt(move _1376) -> [0: bb643, 1: bb644, otherwise: bb18];
    }

    bb643: {
        StorageLive(_1380);
        _1380 = ((_1340 as Continue).0: i64);
        _1339 = _1380;
        StorageDead(_1380);
        _1381 = Eq(_1339, const i64::MIN);
        assert(!move _1381, "attempt to negate `{}`, which would overflow", _1339) -> [success: bb646, unwind: bb1075];
    }

    bb644: {
        StorageLive(_1377);
        _1377 = ((_1340 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1379);
        _1379 = _1377;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1379) -> [return: bb645, unwind: bb1075];
    }

    bb645: {
        StorageDead(_1379);
        StorageDead(_1377);
        goto -> bb944;
    }

    bb646: {
        _1338 = Neg(move _1339);
        StorageDead(_1339);
        StorageDead(_1358);
        StorageDead(_1349);
        StorageDead(_1346);
        StorageDead(_1343);
        StorageDead(_1340);
        StorageLive(_1382);
        StorageLive(_1383);
        StorageLive(_1384);
        StorageLive(_1385);
        _1385 = &mut (*_6);
        StorageLive(_1386);
        StorageLive(_1387);
        StorageLive(_1388);
        StorageLive(_1389);
        StorageLive(_1390);
        StorageLive(_1391);
        StorageLive(_1392);
        _1392 = &(*_10);
        StorageLive(_1393);
        StorageLive(_1394);
        _1394 = &_1;
        _1393 = &(*_1394);
        _1391 = PerpMarketMap::<'_>::get_ref(move _1392, move _1393) -> [return: bb647, unwind: bb1075];
    }

    bb647: {
        StorageDead(_1393);
        StorageDead(_1392);
        _1390 = <std::result::Result<Ref<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _1391) -> [return: bb648, unwind: bb1075];
    }

    bb648: {
        _2115 = const true;
        StorageDead(_1391);
        _1395 = discriminant(_1390);
        switchInt(move _1395) -> [0: bb649, 1: bb650, otherwise: bb18];
    }

    bb649: {
        StorageLive(_1399);
        _1399 = move ((_1390 as Continue).0: std::cell::Ref<'_, state::perp_market::PerpMarket>);
        _1389 = move _1399;
        StorageDead(_1399);
        _1388 = &_1389;
        _1387 = <Ref<'_, PerpMarket> as Deref>::deref(move _1388) -> [return: bb652, unwind: bb1020];
    }

    bb650: {
        StorageLive(_1396);
        _1396 = ((_1390 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1398);
        _1398 = _1396;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1398) -> [return: bb651, unwind: bb1072];
    }

    bb651: {
        StorageDead(_1398);
        StorageDead(_1396);
        StorageDead(_1388);
        StorageDead(_1386);
        StorageDead(_1385);
        StorageDead(_1384);
        goto -> bb1057;
    }

    bb652: {
        StorageDead(_1388);
        _1386 = ((*_1387).29: u8);
        StorageLive(_1400);
        _1400 = _1268;
        StorageLive(_1401);
        _1401 = _14;
        _1384 = UserStats::update_taker_volume_30d(move _1385, move _1386, move _1400, move _1401) -> [return: bb653, unwind: bb1020];
    }

    bb653: {
        StorageDead(_1401);
        StorageDead(_1400);
        StorageDead(_1386);
        StorageDead(_1385);
        _1383 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1384) -> [return: bb654, unwind: bb1020];
    }

    bb654: {
        StorageDead(_1384);
        _1402 = discriminant(_1383);
        switchInt(move _1402) -> [0: bb655, 1: bb656, otherwise: bb18];
    }

    bb655: {
        StorageLive(_1406);
        _1406 = ((_1383 as Continue).0: ());
        _1382 = _1406;
        StorageDead(_1406);
        drop(_1389) -> [return: bb1054, unwind: bb1072];
    }

    bb656: {
        StorageLive(_1403);
        _1403 = ((_1383 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1405);
        _1405 = _1403;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1405) -> [return: bb657, unwind: bb1020];
    }

    bb657: {
        StorageDead(_1405);
        StorageDead(_1403);
        drop(_1389) -> [return: bb1057, unwind: bb1072];
    }

    bb658: {
        StorageDead(_1418);
        StorageDead(_1417);
        _1415 = <std::result::Result<Ref<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _1416) -> [return: bb659, unwind: bb1075];
    }

    bb659: {
        _2114 = const true;
        StorageDead(_1416);
        _1420 = discriminant(_1415);
        switchInt(move _1420) -> [0: bb660, 1: bb661, otherwise: bb18];
    }

    bb660: {
        StorageLive(_1424);
        _1424 = move ((_1415 as Continue).0: std::cell::Ref<'_, state::perp_market::PerpMarket>);
        _1414 = move _1424;
        StorageDead(_1424);
        _1413 = &_1414;
        _1412 = <Ref<'_, PerpMarket> as Deref>::deref(move _1413) -> [return: bb663, unwind: bb1019];
    }

    bb661: {
        StorageLive(_1421);
        _1421 = ((_1415 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1423);
        _1423 = _1421;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1423) -> [return: bb662, unwind: bb1071];
    }

    bb662: {
        StorageDead(_1423);
        StorageDead(_1421);
        StorageDead(_1413);
        StorageDead(_1411);
        StorageDead(_1410);
        StorageDead(_1409);
        goto -> bb1056;
    }

    bb663: {
        StorageDead(_1413);
        _1411 = ((*_1412).30: u8);
        StorageLive(_1425);
        _1425 = _1268;
        StorageLive(_1426);
        _1426 = _14;
        _1409 = UserStats::update_maker_volume_30d(move _1410, move _1411, move _1425, move _1426) -> [return: bb664, unwind: bb1019];
    }

    bb664: {
        StorageDead(_1426);
        StorageDead(_1425);
        StorageDead(_1411);
        StorageDead(_1410);
        _1408 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1409) -> [return: bb665, unwind: bb1019];
    }

    bb665: {
        StorageDead(_1409);
        _1427 = discriminant(_1408);
        switchInt(move _1427) -> [0: bb666, 1: bb667, otherwise: bb18];
    }

    bb666: {
        StorageLive(_1431);
        _1431 = ((_1408 as Continue).0: ());
        _1407 = _1431;
        StorageDead(_1431);
        drop(_1414) -> [return: bb1055, unwind: bb1071];
    }

    bb667: {
        StorageLive(_1428);
        _1428 = ((_1408 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1430);
        _1430 = _1428;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1430) -> [return: bb668, unwind: bb1019];
    }

    bb668: {
        StorageDead(_1430);
        StorageDead(_1428);
        drop(_1414) -> [return: bb1056, unwind: bb1071];
    }

    bb669: {
        _1438 = &((*_4).4: [state::user::PerpPosition; 8])[_1439];
        _1437 = PerpPosition::get_direction_to_close(move _1438) -> [return: bb670, unwind: bb1075];
    }

    bb670: {
        StorageDead(_1438);
        _1434 = math::orders::get_position_delta_for_fill(move _1435, move _1436, move _1437) -> [return: bb671, unwind: bb1075];
    }

    bb671: {
        StorageDead(_1437);
        StorageDead(_1436);
        StorageDead(_1435);
        _1433 = <std::result::Result<PositionDelta, error::ErrorCode> as Try>::branch(move _1434) -> [return: bb672, unwind: bb1075];
    }

    bb672: {
        StorageDead(_1434);
        _1442 = discriminant(_1433);
        switchInt(move _1442) -> [0: bb673, 1: bb674, otherwise: bb18];
    }

    bb673: {
        StorageLive(_1446);
        _1446 = move ((_1433 as Continue).0: controller::position::PositionDelta);
        _1432 = move _1446;
        StorageDead(_1446);
        StorageDead(_1439);
        StorageDead(_1433);
        StorageLive(_1447);
        StorageLive(_1448);
        StorageLive(_1449);
        StorageLive(_1450);
        _1450 = _1057;
        StorageLive(_1451);
        _1451 = _1268;
        StorageLive(_1452);
        StorageLive(_1453);
        StorageLive(_1454);
        _1454 = _379;
        _1455 = Len(((*_4).4: [state::user::PerpPosition; 8]));
        _1456 = Lt(_1454, _1455);
        assert(move _1456, "index out of bounds: the length is {} but the index is {}", move _1455, _1454) -> [success: bb676, unwind: bb1075];
    }

    bb674: {
        StorageLive(_1443);
        _1443 = ((_1433 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1445);
        _1445 = _1443;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1445) -> [return: bb675, unwind: bb1075];
    }

    bb675: {
        StorageDead(_1445);
        StorageDead(_1443);
        StorageDead(_1439);
        StorageDead(_1433);
        goto -> bb941;
    }

    bb676: {
        _1453 = &((*_4).4: [state::user::PerpPosition; 8])[_1454];
        _1452 = PerpPosition::get_direction(move _1453) -> [return: bb677, unwind: bb1075];
    }

    bb677: {
        StorageDead(_1453);
        _1449 = math::orders::get_position_delta_for_fill(move _1450, move _1451, move _1452) -> [return: bb678, unwind: bb1075];
    }

    bb678: {
        StorageDead(_1452);
        StorageDead(_1451);
        StorageDead(_1450);
        _1448 = <std::result::Result<PositionDelta, error::ErrorCode> as Try>::branch(move _1449) -> [return: bb679, unwind: bb1075];
    }

    bb679: {
        StorageDead(_1449);
        _1457 = discriminant(_1448);
        switchInt(move _1457) -> [0: bb680, 1: bb681, otherwise: bb18];
    }

    bb680: {
        StorageLive(_1461);
        _1461 = move ((_1448 as Continue).0: controller::position::PositionDelta);
        _1447 = move _1461;
        StorageDead(_1461);
        StorageDead(_1454);
        StorageDead(_1448);
        StorageLive(_1467);
        StorageLive(_1468);
        StorageLive(_1469);
        StorageLive(_1470);
        StorageLive(_1471);
        _1471 = &(*_10);
        StorageLive(_1472);
        StorageLive(_1473);
        _1473 = &_1;
        _1472 = &(*_1473);
        _1470 = PerpMarketMap::<'_>::get_ref_mut(move _1471, move _1472) -> [return: bb683, unwind: bb1075];
    }

    bb681: {
        StorageLive(_1458);
        _1458 = ((_1448 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1460);
        _1460 = _1458;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1460) -> [return: bb682, unwind: bb1075];
    }

    bb682: {
        StorageDead(_1460);
        StorageDead(_1458);
        StorageDead(_1454);
        StorageDead(_1448);
        goto -> bb940;
    }

    bb683: {
        StorageDead(_1472);
        StorageDead(_1471);
        _1469 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _1470) -> [return: bb684, unwind: bb1075];
    }

    bb684: {
        StorageDead(_1470);
        _1474 = discriminant(_1469);
        switchInt(move _1474) -> [0: bb685, 1: bb686, otherwise: bb18];
    }

    bb685: {
        StorageLive(_1478);
        _1478 = move ((_1469 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _1468 = move _1478;
        StorageDead(_1478);
        _2166 = discriminant(_1469);
        StorageDead(_1473);
        StorageDead(_1469);
        StorageLive(_1479);
        StorageLive(_1480);
        StorageLive(_1481);
        StorageLive(_1482);
        _1482 = &mut (*_4);
        StorageLive(_1483);
        _1483 = _1;
        _1481 = User::get_perp_position_mut(move _1482, move _1483) -> [return: bb688, unwind: bb1018];
    }

    bb686: {
        StorageLive(_1475);
        _1475 = ((_1469 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1477);
        _1477 = _1475;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1477) -> [return: bb687, unwind: bb1070];
    }

    bb687: {
        StorageDead(_1477);
        StorageDead(_1475);
        _2164 = discriminant(_1469);
        StorageDead(_1473);
        StorageDead(_1469);
        goto -> bb939;
    }

    bb688: {
        StorageDead(_1483);
        StorageDead(_1482);
        _1480 = <std::result::Result<&mut PerpPosition, error::ErrorCode> as Try>::branch(move _1481) -> [return: bb689, unwind: bb1018];
    }

    bb689: {
        StorageDead(_1481);
        _1484 = discriminant(_1480);
        switchInt(move _1484) -> [0: bb690, 1: bb691, otherwise: bb18];
    }

    bb690: {
        StorageLive(_1488);
        _1488 = move ((_1480 as Continue).0: &mut state::user::PerpPosition);
        _1479 = move _1488;
        StorageDead(_1488);
        StorageDead(_1480);
        StorageLive(_1489);
        StorageLive(_1490);
        _1490 = &(*_1479);
        _1489 = PerpPosition::get_direction(move _1490) -> [return: bb693, unwind: bb1018];
    }

    bb691: {
        StorageLive(_1485);
        _1485 = ((_1480 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1487);
        _1487 = _1485;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1487) -> [return: bb692, unwind: bb1018];
    }

    bb692: {
        StorageDead(_1487);
        StorageDead(_1485);
        StorageDead(_1480);
        goto -> bb938;
    }

    bb693: {
        StorageDead(_1490);
        StorageLive(_1491);
        StorageLive(_1492);
        _1492 = &(*_1479);
        _1491 = PerpPosition::get_direction_to_close(move _1492) -> [return: bb694, unwind: bb1018];
    }

    bb694: {
        StorageDead(_1492);
        StorageLive(_1493);
        StorageLive(_1494);
        _1494 = &(*_1479);
        StorageLive(_1495);
        _1495 = _1491;
        _1493 = PerpPosition::get_existing_position_params_for_order_action(move _1494, move _1495) -> [return: bb695, unwind: bb1018];
    }

    bb695: {
        StorageDead(_1495);
        StorageDead(_1494);
        StorageLive(_1496);
        StorageLive(_1497);
        StorageLive(_1498);
        StorageLive(_1499);
        _1499 = &mut (*_1479);
        StorageLive(_1500);
        StorageLive(_1501);
        StorageLive(_1502);
        StorageLive(_1503);
        _1503 = &mut _1468;
        _1502 = &mut (*_1503);
        _1501 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _1502) -> [return: bb696, unwind: bb1018];
    }

    bb696: {
        _1500 = &mut (*_1501);
        StorageDead(_1502);
        StorageLive(_1504);
        StorageLive(_1505);
        _1505 = &_1432;
        _1504 = &(*_1505);
        _1498 = update_position_and_market(move _1499, move _1500, move _1504) -> [return: bb697, unwind: bb1018];
    }

    bb697: {
        StorageDead(_1504);
        StorageDead(_1500);
        StorageDead(_1499);
        _1497 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _1498) -> [return: bb698, unwind: bb1018];
    }

    bb698: {
        StorageDead(_1498);
        _1506 = discriminant(_1497);
        switchInt(move _1506) -> [0: bb699, 1: bb700, otherwise: bb18];
    }

    bb699: {
        StorageLive(_1510);
        _1510 = ((_1497 as Continue).0: i64);
        _1496 = _1510;
        StorageDead(_1510);
        StorageDead(_1505);
        StorageDead(_1503);
        StorageDead(_1501);
        StorageDead(_1497);
        StorageDead(_1496);
        StorageLive(_1511);
        StorageLive(_1512);
        StorageLive(_1513);
        StorageLive(_1514);
        _1514 = &mut (*_1479);
        StorageLive(_1515);
        StorageLive(_1516);
        StorageLive(_1517);
        StorageLive(_1518);
        _1518 = &mut _1468;
        _1517 = &mut (*_1518);
        _1516 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _1517) -> [return: bb702, unwind: bb1018];
    }

    bb700: {
        StorageLive(_1507);
        _1507 = ((_1497 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1509);
        _1509 = _1507;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1509) -> [return: bb701, unwind: bb1018];
    }

    bb701: {
        StorageDead(_1509);
        StorageDead(_1507);
        StorageDead(_1505);
        StorageDead(_1503);
        StorageDead(_1501);
        StorageDead(_1497);
        StorageDead(_1496);
        goto -> bb937;
    }

    bb702: {
        _1515 = &mut (*_1516);
        StorageDead(_1517);
        StorageLive(_1519);
        _1519 = _1294;
        _1513 = update_quote_asset_and_break_even_amount(move _1514, move _1515, move _1519) -> [return: bb703, unwind: bb1018];
    }

    bb703: {
        StorageDead(_1519);
        StorageDead(_1515);
        StorageDead(_1514);
        _1512 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1513) -> [return: bb704, unwind: bb1018];
    }

    bb704: {
        StorageDead(_1513);
        _1520 = discriminant(_1512);
        switchInt(move _1520) -> [0: bb705, 1: bb706, otherwise: bb18];
    }

    bb705: {
        StorageLive(_1524);
        _1524 = ((_1512 as Continue).0: ());
        _1511 = _1524;
        StorageDead(_1524);
        StorageDead(_1518);
        StorageDead(_1516);
        StorageDead(_1512);
        StorageDead(_1511);
        StorageLive(_1525);
        StorageLive(_1526);
        StorageLive(_1527);
        StorageLive(_1528);
        _1528 = &mut (*_1479);
        StorageLive(_1529);
        StorageLive(_1530);
        StorageLive(_1531);
        StorageLive(_1532);
        _1532 = &mut _1468;
        _1531 = &mut (*_1532);
        _1530 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _1531) -> [return: bb708, unwind: bb1018];
    }

    bb706: {
        StorageLive(_1521);
        _1521 = ((_1512 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1523);
        _1523 = _1521;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1523) -> [return: bb707, unwind: bb1018];
    }

    bb707: {
        StorageDead(_1523);
        StorageDead(_1521);
        StorageDead(_1518);
        StorageDead(_1516);
        StorageDead(_1512);
        StorageDead(_1511);
        goto -> bb937;
    }

    bb708: {
        _1529 = &mut (*_1530);
        StorageDead(_1531);
        StorageLive(_1533);
        _1533 = _1338;
        _1527 = update_quote_asset_and_break_even_amount(move _1528, move _1529, move _1533) -> [return: bb709, unwind: bb1018];
    }

    bb709: {
        StorageDead(_1533);
        StorageDead(_1529);
        StorageDead(_1528);
        _1526 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1527) -> [return: bb710, unwind: bb1018];
    }

    bb710: {
        StorageDead(_1527);
        _1534 = discriminant(_1526);
        switchInt(move _1534) -> [0: bb711, 1: bb712, otherwise: bb18];
    }

    bb711: {
        StorageLive(_1538);
        _1538 = ((_1526 as Continue).0: ());
        _1525 = _1538;
        StorageDead(_1538);
        StorageDead(_1532);
        StorageDead(_1530);
        StorageDead(_1526);
        StorageDead(_1525);
        StorageLive(_1539);
        StorageLive(_1540);
        StorageLive(_1541);
        StorageLive(_1542);
        StorageLive(_1543);
        StorageLive(_1544);
        StorageLive(_1545);
        StorageLive(_1546);
        _1546 = ((*_1479).1: i64);
        _1545 = core::num::<impl i64>::unsigned_abs(move _1546) -> [return: bb714, unwind: bb1018];
    }

    bb712: {
        StorageLive(_1535);
        _1535 = ((_1526 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1537);
        _1537 = _1535;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1537) -> [return: bb713, unwind: bb1018];
    }

    bb713: {
        StorageDead(_1537);
        StorageDead(_1535);
        StorageDead(_1532);
        StorageDead(_1530);
        StorageDead(_1526);
        StorageDead(_1525);
        goto -> bb937;
    }

    bb714: {
        StorageDead(_1546);
        StorageLive(_1547);
        StorageLive(_1548);
        StorageLive(_1549);
        _1549 = &_1468;
        _1548 = <RefMut<'_, PerpMarket> as Deref>::deref(move _1549) -> [return: bb715, unwind: bb1018];
    }

    bb715: {
        StorageDead(_1549);
        _1547 = (((*_1548).1: state::perp_market::AMM).52: u64);
        _1544 = math::orders::is_multiple_of_step_size(move _1545, move _1547) -> [return: bb716, unwind: bb1018];
    }

    bb716: {
        StorageDead(_1547);
        StorageDead(_1545);
        _1543 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _1544) -> [return: bb717, unwind: bb1018];
    }

    bb717: {
        StorageDead(_1544);
        _1550 = discriminant(_1543);
        switchInt(move _1550) -> [0: bb718, 1: bb719, otherwise: bb18];
    }

    bb718: {
        StorageLive(_1554);
        _1554 = ((_1543 as Continue).0: bool);
        _1542 = _1554;
        StorageDead(_1554);
        switchInt(move _1542) -> [0: bb722, otherwise: bb721];
    }

    bb719: {
        StorageLive(_1551);
        _1551 = ((_1543 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1553);
        _1553 = _1551;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1553) -> [return: bb720, unwind: bb1018];
    }

    bb720: {
        StorageDead(_1553);
        StorageDead(_1551);
        StorageDead(_1548);
        StorageDead(_1543);
        StorageDead(_1542);
        StorageDead(_1541);
        goto -> bb936;
    }

    bb721: {
        StorageDead(_1548);
        StorageDead(_1543);
        StorageLive(_1555);
        _1555 = ();
        _1541 = std::result::Result::<(), error::ErrorCode>::Ok(move _1555);
        StorageDead(_1555);
        goto -> bb737;
    }

    bb722: {
        StorageDead(_1548);
        StorageDead(_1543);
        StorageLive(_1556);
        _1556 = error::ErrorCode::InvalidPerpPosition;
        StorageLive(_1557);
        StorageLive(_1558);
        StorageLive(_1559);
        StorageLive(_1560);
        StorageLive(_1561);
        StorageLive(_1562);
        StorageLive(_1563);
        StorageLive(_1564);
        StorageLive(_1565);
        StorageLive(_1566);
        StorageLive(_1567);
        _2094 = const _;
        _1567 = &(*_2094);
        _1566 = &(*_1567);
        _1565 = move _1566 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1566);
        StorageLive(_1569);
        StorageLive(_1570);
        StorageLive(_1571);
        StorageLive(_1572);
        StorageLive(_1573);
        StorageLive(_1574);
        StorageLive(_1575);
        _1575 = &_1556;
        _1574 = &(*_1575);
        _1573 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _1574) -> [return: bb723, unwind: bb1018];
    }

    bb723: {
        StorageDead(_1574);
        _1572 = [move _1573];
        StorageDead(_1573);
        _1571 = &_1572;
        _1570 = &(*_1571);
        _1569 = move _1570 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1570);
        _1564 = Arguments::<'_>::new_v1(move _1565, move _1569) -> [return: bb724, unwind: bb1018];
    }

    bb724: {
        StorageDead(_1569);
        StorageDead(_1565);
        _1563 = format(move _1564) -> [return: bb725, unwind: bb1018];
    }

    bb725: {
        StorageDead(_1564);
        StorageDead(_1575);
        StorageDead(_1572);
        StorageDead(_1571);
        StorageDead(_1567);
        _1562 = move _1563;
        StorageDead(_1563);
        _1561 = &_1562;
        _1560 = &(*_1561);
        _1559 = <String as Deref>::deref(move _1560) -> [return: bb726, unwind: bb1017];
    }

    bb726: {
        _1558 = &(*_1559);
        StorageDead(_1560);
        _1557 = solana_program::log::sol_log(move _1558) -> [return: bb727, unwind: bb1017];
    }

    bb727: {
        StorageDead(_1558);
        drop(_1562) -> [return: bb728, unwind: bb1018];
    }

    bb728: {
        StorageDead(_1562);
        StorageDead(_1561);
        StorageDead(_1559);
        StorageDead(_1557);
        StorageLive(_1576);
        StorageLive(_1577);
        StorageLive(_1578);
        StorageLive(_1579);
        StorageLive(_1580);
        StorageLive(_1581);
        StorageLive(_1582);
        StorageLive(_1583);
        StorageLive(_1584);
        StorageLive(_1585);
        StorageLive(_1586);
        _2093 = const _;
        _1586 = &(*_2093);
        _1585 = &(*_1586);
        _1584 = move _1585 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1585);
        StorageLive(_1588);
        StorageLive(_1589);
        StorageLive(_1590);
        StorageLive(_1591);
        StorageLive(_1592);
        StorageLive(_1593);
        StorageLive(_1594);
        _1594 = &((*_1479).1: i64);
        _1593 = &(*_1594);
        _1592 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _1593) -> [return: bb729, unwind: bb1018];
    }

    bb729: {
        StorageDead(_1593);
        StorageLive(_1595);
        StorageLive(_1596);
        StorageLive(_1597);
        StorageLive(_1598);
        StorageLive(_1599);
        _1599 = &_1468;
        _1598 = <RefMut<'_, PerpMarket> as Deref>::deref(move _1599) -> [return: bb730, unwind: bb1018];
    }

    bb730: {
        StorageDead(_1599);
        _1597 = &(((*_1598).1: state::perp_market::AMM).52: u64);
        _1596 = &(*_1597);
        _1595 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _1596) -> [return: bb731, unwind: bb1018];
    }

    bb731: {
        StorageDead(_1596);
        _1591 = [move _1592, move _1595];
        StorageDead(_1595);
        StorageDead(_1592);
        _1590 = &_1591;
        _1589 = &(*_1590);
        _1588 = move _1589 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1589);
        _1583 = Arguments::<'_>::new_v1(move _1584, move _1588) -> [return: bb732, unwind: bb1018];
    }

    bb732: {
        StorageDead(_1588);
        StorageDead(_1584);
        _1582 = format(move _1583) -> [return: bb733, unwind: bb1018];
    }

    bb733: {
        StorageDead(_1583);
        StorageDead(_1598);
        StorageDead(_1597);
        StorageDead(_1594);
        StorageDead(_1591);
        StorageDead(_1590);
        StorageDead(_1586);
        _1581 = move _1582;
        StorageDead(_1582);
        _1580 = &_1581;
        _1579 = &(*_1580);
        _1578 = <String as Deref>::deref(move _1579) -> [return: bb734, unwind: bb1016];
    }

    bb734: {
        _1577 = &(*_1578);
        StorageDead(_1579);
        _1576 = solana_program::log::sol_log(move _1577) -> [return: bb735, unwind: bb1016];
    }

    bb735: {
        StorageDead(_1577);
        drop(_1581) -> [return: bb736, unwind: bb1018];
    }

    bb736: {
        StorageDead(_1581);
        StorageDead(_1580);
        StorageDead(_1578);
        StorageDead(_1576);
        StorageLive(_1600);
        _1600 = _1556;
        _1541 = std::result::Result::<(), error::ErrorCode>::Err(move _1600);
        StorageDead(_1600);
        StorageDead(_1556);
        goto -> bb737;
    }

    bb737: {
        StorageDead(_1542);
        _1540 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1541) -> [return: bb738, unwind: bb1018];
    }

    bb738: {
        StorageDead(_1541);
        _1601 = discriminant(_1540);
        switchInt(move _1601) -> [0: bb739, 1: bb740, otherwise: bb18];
    }

    bb739: {
        StorageLive(_1605);
        _1605 = ((_1540 as Continue).0: ());
        _1539 = _1605;
        StorageDead(_1605);
        StorageDead(_1540);
        StorageDead(_1539);
        StorageLive(_1606);
        StorageLive(_1607);
        StorageLive(_1608);
        StorageLive(_1609);
        _1609 = &mut (*_7);
        StorageLive(_1610);
        _1610 = _1;
        _1608 = User::force_get_perp_position_mut(move _1609, move _1610) -> [return: bb742, unwind: bb1018];
    }

    bb740: {
        StorageLive(_1602);
        _1602 = ((_1540 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1604);
        _1604 = _1602;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1604) -> [return: bb741, unwind: bb1018];
    }

    bb741: {
        StorageDead(_1604);
        StorageDead(_1602);
        goto -> bb936;
    }

    bb742: {
        StorageDead(_1610);
        StorageDead(_1609);
        _1607 = <std::result::Result<&mut PerpPosition, error::ErrorCode> as Try>::branch(move _1608) -> [return: bb743, unwind: bb1018];
    }

    bb743: {
        StorageDead(_1608);
        _1611 = discriminant(_1607);
        switchInt(move _1611) -> [0: bb744, 1: bb745, otherwise: bb18];
    }

    bb744: {
        StorageLive(_1615);
        _1615 = move ((_1607 as Continue).0: &mut state::user::PerpPosition);
        _1606 = move _1615;
        StorageDead(_1615);
        StorageDead(_1607);
        StorageLive(_1616);
        StorageLive(_1617);
        _1617 = &(*_1606);
        _1616 = PerpPosition::get_direction(move _1617) -> [return: bb747, unwind: bb1018];
    }

    bb745: {
        StorageLive(_1612);
        _1612 = ((_1607 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1614);
        _1614 = _1612;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1614) -> [return: bb746, unwind: bb1018];
    }

    bb746: {
        StorageDead(_1614);
        StorageDead(_1612);
        StorageDead(_1607);
        goto -> bb935;
    }

    bb747: {
        StorageDead(_1617);
        StorageLive(_1618);
        StorageLive(_1619);
        _1619 = &(*_1606);
        StorageLive(_1620);
        _1620 = _1489;
        _1618 = PerpPosition::get_existing_position_params_for_order_action(move _1619, move _1620) -> [return: bb748, unwind: bb1018];
    }

    bb748: {
        StorageDead(_1620);
        StorageDead(_1619);
        StorageLive(_1621);
        StorageLive(_1622);
        StorageLive(_1623);
        StorageLive(_1624);
        _1624 = &mut (*_1606);
        StorageLive(_1625);
        StorageLive(_1626);
        StorageLive(_1627);
        StorageLive(_1628);
        _1628 = &mut _1468;
        _1627 = &mut (*_1628);
        _1626 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _1627) -> [return: bb749, unwind: bb1018];
    }

    bb749: {
        _1625 = &mut (*_1626);
        StorageDead(_1627);
        StorageLive(_1629);
        StorageLive(_1630);
        _1630 = &_1447;
        _1629 = &(*_1630);
        _1623 = update_position_and_market(move _1624, move _1625, move _1629) -> [return: bb750, unwind: bb1018];
    }

    bb750: {
        StorageDead(_1629);
        StorageDead(_1625);
        StorageDead(_1624);
        _1622 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _1623) -> [return: bb751, unwind: bb1018];
    }

    bb751: {
        StorageDead(_1623);
        _1631 = discriminant(_1622);
        switchInt(move _1631) -> [0: bb752, 1: bb753, otherwise: bb18];
    }

    bb752: {
        StorageLive(_1635);
        _1635 = ((_1622 as Continue).0: i64);
        _1621 = _1635;
        StorageDead(_1635);
        StorageDead(_1630);
        StorageDead(_1628);
        StorageDead(_1626);
        StorageDead(_1622);
        StorageDead(_1621);
        StorageLive(_1636);
        StorageLive(_1637);
        StorageLive(_1638);
        StorageLive(_1639);
        _1639 = &mut (*_1606);
        StorageLive(_1640);
        StorageLive(_1641);
        StorageLive(_1642);
        StorageLive(_1643);
        _1643 = &mut _1468;
        _1642 = &mut (*_1643);
        _1641 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _1642) -> [return: bb755, unwind: bb1018];
    }

    bb753: {
        StorageLive(_1632);
        _1632 = ((_1622 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1634);
        _1634 = _1632;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1634) -> [return: bb754, unwind: bb1018];
    }

    bb754: {
        StorageDead(_1634);
        StorageDead(_1632);
        StorageDead(_1630);
        StorageDead(_1628);
        StorageDead(_1626);
        StorageDead(_1622);
        StorageDead(_1621);
        goto -> bb934;
    }

    bb755: {
        _1640 = &mut (*_1641);
        StorageDead(_1642);
        StorageLive(_1644);
        StorageLive(_1645);
        _1645 = _1294;
        _1646 = Eq(_1645, const i64::MIN);
        assert(!move _1646, "attempt to negate `{}`, which would overflow", _1645) -> [success: bb756, unwind: bb1018];
    }

    bb756: {
        _1644 = Neg(move _1645);
        StorageDead(_1645);
        _1638 = update_quote_asset_and_break_even_amount(move _1639, move _1640, move _1644) -> [return: bb757, unwind: bb1018];
    }

    bb757: {
        StorageDead(_1644);
        StorageDead(_1640);
        StorageDead(_1639);
        _1637 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1638) -> [return: bb758, unwind: bb1018];
    }

    bb758: {
        StorageDead(_1638);
        _1647 = discriminant(_1637);
        switchInt(move _1647) -> [0: bb759, 1: bb760, otherwise: bb18];
    }

    bb759: {
        StorageLive(_1651);
        _1651 = ((_1637 as Continue).0: ());
        _1636 = _1651;
        StorageDead(_1651);
        StorageDead(_1643);
        StorageDead(_1641);
        StorageDead(_1637);
        StorageDead(_1636);
        StorageLive(_1652);
        StorageLive(_1653);
        StorageLive(_1654);
        StorageLive(_1655);
        StorageLive(_1656);
        StorageLive(_1657);
        StorageLive(_1658);
        StorageLive(_1659);
        _1659 = ((*_1606).1: i64);
        _1658 = core::num::<impl i64>::unsigned_abs(move _1659) -> [return: bb762, unwind: bb1018];
    }

    bb760: {
        StorageLive(_1648);
        _1648 = ((_1637 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1650);
        _1650 = _1648;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1650) -> [return: bb761, unwind: bb1018];
    }

    bb761: {
        StorageDead(_1650);
        StorageDead(_1648);
        StorageDead(_1643);
        StorageDead(_1641);
        StorageDead(_1637);
        StorageDead(_1636);
        goto -> bb934;
    }

    bb762: {
        StorageDead(_1659);
        StorageLive(_1660);
        StorageLive(_1661);
        StorageLive(_1662);
        _1662 = &_1468;
        _1661 = <RefMut<'_, PerpMarket> as Deref>::deref(move _1662) -> [return: bb763, unwind: bb1018];
    }

    bb763: {
        StorageDead(_1662);
        _1660 = (((*_1661).1: state::perp_market::AMM).52: u64);
        _1657 = math::orders::is_multiple_of_step_size(move _1658, move _1660) -> [return: bb764, unwind: bb1018];
    }

    bb764: {
        StorageDead(_1660);
        StorageDead(_1658);
        _1656 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _1657) -> [return: bb765, unwind: bb1018];
    }

    bb765: {
        StorageDead(_1657);
        _1663 = discriminant(_1656);
        switchInt(move _1663) -> [0: bb766, 1: bb767, otherwise: bb18];
    }

    bb766: {
        StorageLive(_1667);
        _1667 = ((_1656 as Continue).0: bool);
        _1655 = _1667;
        StorageDead(_1667);
        switchInt(move _1655) -> [0: bb770, otherwise: bb769];
    }

    bb767: {
        StorageLive(_1664);
        _1664 = ((_1656 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1666);
        _1666 = _1664;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1666) -> [return: bb768, unwind: bb1018];
    }

    bb768: {
        StorageDead(_1666);
        StorageDead(_1664);
        StorageDead(_1661);
        StorageDead(_1656);
        StorageDead(_1655);
        StorageDead(_1654);
        goto -> bb933;
    }

    bb769: {
        StorageDead(_1661);
        StorageDead(_1656);
        StorageLive(_1668);
        _1668 = ();
        _1654 = std::result::Result::<(), error::ErrorCode>::Ok(move _1668);
        StorageDead(_1668);
        goto -> bb785;
    }

    bb770: {
        StorageDead(_1661);
        StorageDead(_1656);
        StorageLive(_1669);
        _1669 = error::ErrorCode::InvalidPerpPosition;
        StorageLive(_1670);
        StorageLive(_1671);
        StorageLive(_1672);
        StorageLive(_1673);
        StorageLive(_1674);
        StorageLive(_1675);
        StorageLive(_1676);
        StorageLive(_1677);
        StorageLive(_1678);
        StorageLive(_1679);
        StorageLive(_1680);
        _2092 = const _;
        _1680 = &(*_2092);
        _1679 = &(*_1680);
        _1678 = move _1679 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1679);
        StorageLive(_1682);
        StorageLive(_1683);
        StorageLive(_1684);
        StorageLive(_1685);
        StorageLive(_1686);
        StorageLive(_1687);
        StorageLive(_1688);
        _1688 = &_1669;
        _1687 = &(*_1688);
        _1686 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _1687) -> [return: bb771, unwind: bb1018];
    }

    bb771: {
        StorageDead(_1687);
        _1685 = [move _1686];
        StorageDead(_1686);
        _1684 = &_1685;
        _1683 = &(*_1684);
        _1682 = move _1683 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1683);
        _1677 = Arguments::<'_>::new_v1(move _1678, move _1682) -> [return: bb772, unwind: bb1018];
    }

    bb772: {
        StorageDead(_1682);
        StorageDead(_1678);
        _1676 = format(move _1677) -> [return: bb773, unwind: bb1018];
    }

    bb773: {
        StorageDead(_1677);
        StorageDead(_1688);
        StorageDead(_1685);
        StorageDead(_1684);
        StorageDead(_1680);
        _1675 = move _1676;
        StorageDead(_1676);
        _1674 = &_1675;
        _1673 = &(*_1674);
        _1672 = <String as Deref>::deref(move _1673) -> [return: bb774, unwind: bb1015];
    }

    bb774: {
        _1671 = &(*_1672);
        StorageDead(_1673);
        _1670 = solana_program::log::sol_log(move _1671) -> [return: bb775, unwind: bb1015];
    }

    bb775: {
        StorageDead(_1671);
        drop(_1675) -> [return: bb776, unwind: bb1018];
    }

    bb776: {
        StorageDead(_1675);
        StorageDead(_1674);
        StorageDead(_1672);
        StorageDead(_1670);
        StorageLive(_1689);
        StorageLive(_1690);
        StorageLive(_1691);
        StorageLive(_1692);
        StorageLive(_1693);
        StorageLive(_1694);
        StorageLive(_1695);
        StorageLive(_1696);
        StorageLive(_1697);
        StorageLive(_1698);
        StorageLive(_1699);
        _2091 = const _;
        _1699 = &(*_2091);
        _1698 = &(*_1699);
        _1697 = move _1698 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1698);
        StorageLive(_1701);
        StorageLive(_1702);
        StorageLive(_1703);
        StorageLive(_1704);
        StorageLive(_1705);
        StorageLive(_1706);
        StorageLive(_1707);
        _1707 = &((*_1606).1: i64);
        _1706 = &(*_1707);
        _1705 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _1706) -> [return: bb777, unwind: bb1018];
    }

    bb777: {
        StorageDead(_1706);
        StorageLive(_1708);
        StorageLive(_1709);
        StorageLive(_1710);
        StorageLive(_1711);
        StorageLive(_1712);
        _1712 = &_1468;
        _1711 = <RefMut<'_, PerpMarket> as Deref>::deref(move _1712) -> [return: bb778, unwind: bb1018];
    }

    bb778: {
        StorageDead(_1712);
        _1710 = &(((*_1711).1: state::perp_market::AMM).52: u64);
        _1709 = &(*_1710);
        _1708 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _1709) -> [return: bb779, unwind: bb1018];
    }

    bb779: {
        StorageDead(_1709);
        _1704 = [move _1705, move _1708];
        StorageDead(_1708);
        StorageDead(_1705);
        _1703 = &_1704;
        _1702 = &(*_1703);
        _1701 = move _1702 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1702);
        _1696 = Arguments::<'_>::new_v1(move _1697, move _1701) -> [return: bb780, unwind: bb1018];
    }

    bb780: {
        StorageDead(_1701);
        StorageDead(_1697);
        _1695 = format(move _1696) -> [return: bb781, unwind: bb1018];
    }

    bb781: {
        StorageDead(_1696);
        StorageDead(_1711);
        StorageDead(_1710);
        StorageDead(_1707);
        StorageDead(_1704);
        StorageDead(_1703);
        StorageDead(_1699);
        _1694 = move _1695;
        StorageDead(_1695);
        _1693 = &_1694;
        _1692 = &(*_1693);
        _1691 = <String as Deref>::deref(move _1692) -> [return: bb782, unwind: bb1014];
    }

    bb782: {
        _1690 = &(*_1691);
        StorageDead(_1692);
        _1689 = solana_program::log::sol_log(move _1690) -> [return: bb783, unwind: bb1014];
    }

    bb783: {
        StorageDead(_1690);
        drop(_1694) -> [return: bb784, unwind: bb1018];
    }

    bb784: {
        StorageDead(_1694);
        StorageDead(_1693);
        StorageDead(_1691);
        StorageDead(_1689);
        StorageLive(_1713);
        _1713 = _1669;
        _1654 = std::result::Result::<(), error::ErrorCode>::Err(move _1713);
        StorageDead(_1713);
        StorageDead(_1669);
        goto -> bb785;
    }

    bb785: {
        StorageDead(_1655);
        _1653 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1654) -> [return: bb786, unwind: bb1018];
    }

    bb786: {
        StorageDead(_1654);
        _1714 = discriminant(_1653);
        switchInt(move _1714) -> [0: bb787, 1: bb788, otherwise: bb18];
    }

    bb787: {
        StorageLive(_1718);
        _1718 = ((_1653 as Continue).0: ());
        _1652 = _1718;
        StorageDead(_1718);
        StorageDead(_1653);
        StorageDead(_1652);
        StorageLive(_1719);
        StorageLive(_1720);
        StorageLive(_1721);
        StorageLive(_1722);
        StorageLive(_1723);
        StorageLive(_1724);
        _1724 = &_1468;
        _1723 = <RefMut<'_, PerpMarket> as Deref>::deref(move _1724) -> [return: bb790, unwind: bb1018];
    }

    bb788: {
        StorageLive(_1715);
        _1715 = ((_1653 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1717);
        _1717 = _1715;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1717) -> [return: bb789, unwind: bb1018];
    }

    bb789: {
        StorageDead(_1717);
        StorageDead(_1715);
        goto -> bb933;
    }

    bb790: {
        StorageDead(_1724);
        _1722 = (((*_1723).1: state::perp_market::AMM).33: u128);
        StorageLive(_1725);
        StorageLive(_1726);
        StorageLive(_1727);
        StorageLive(_1728);
        StorageLive(_1729);
        _1729 = _1338;
        _1728 = core::num::<impl i64>::unsigned_abs(move _1729) -> [return: bb791, unwind: bb1018];
    }

    bb791: {
        StorageDead(_1729);
        _1727 = <u64 as Cast>::cast::<u128>(move _1728) -> [return: bb792, unwind: bb1018];
    }

    bb792: {
        StorageDead(_1728);
        _1726 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1727) -> [return: bb793, unwind: bb1018];
    }

    bb793: {
        StorageDead(_1727);
        _1730 = discriminant(_1726);
        switchInt(move _1730) -> [0: bb794, 1: bb795, otherwise: bb18];
    }

    bb794: {
        StorageLive(_1734);
        _1734 = ((_1726 as Continue).0: u128);
        _1725 = _1734;
        StorageDead(_1734);
        _1721 = <u128 as SafeMath>::safe_add(move _1722, move _1725) -> [return: bb797, unwind: bb1018];
    }

    bb795: {
        StorageLive(_1731);
        _1731 = ((_1726 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1733);
        _1733 = _1731;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1733) -> [return: bb796, unwind: bb1018];
    }

    bb796: {
        StorageDead(_1733);
        StorageDead(_1731);
        StorageDead(_1725);
        StorageDead(_1722);
        StorageDead(_1721);
        goto -> bb932;
    }

    bb797: {
        StorageDead(_1725);
        StorageDead(_1722);
        _1720 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _1721) -> [return: bb798, unwind: bb1018];
    }

    bb798: {
        StorageDead(_1721);
        _1735 = discriminant(_1720);
        switchInt(move _1735) -> [0: bb799, 1: bb800, otherwise: bb18];
    }

    bb799: {
        StorageLive(_1739);
        _1739 = ((_1720 as Continue).0: u128);
        _1719 = _1739;
        StorageDead(_1739);
        StorageLive(_1740);
        StorageLive(_1741);
        _1741 = &mut _1468;
        _1740 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _1741) -> [return: bb802, unwind: bb1018];
    }

    bb800: {
        StorageLive(_1736);
        _1736 = ((_1720 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1738);
        _1738 = _1736;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1738) -> [return: bb801, unwind: bb1018];
    }

    bb801: {
        StorageDead(_1738);
        StorageDead(_1736);
        goto -> bb932;
    }

    bb802: {
        StorageDead(_1741);
        (((*_1740).1: state::perp_market::AMM).33: u128) = move _1719;
        StorageDead(_1719);
        StorageDead(_1740);
        StorageDead(_1726);
        StorageDead(_1723);
        StorageDead(_1720);
        StorageLive(_1742);
        _1742 = _1489;
        StorageLive(_1743);
        _1743 = _1491;
        StorageLive(_1744);
        _1744 = _1493;
        StorageLive(_1745);
        _1745 = _1616;
        StorageLive(_1746);
        _1746 = _1618;
        _1467 = (move _1742, move _1743, move _1744, move _1745, move _1746);
        StorageDead(_1746);
        StorageDead(_1745);
        StorageDead(_1744);
        StorageDead(_1743);
        StorageDead(_1742);
        StorageDead(_1618);
        StorageDead(_1616);
        StorageDead(_1606);
        StorageDead(_1493);
        StorageDead(_1491);
        StorageDead(_1489);
        StorageDead(_1479);
        drop(_1468) -> [return: bb803, unwind: bb1075];
    }

    bb803: {
        StorageDead(_1468);
        StorageLive(_1462);
        _1462 = (_1467.0: controller::position::PositionDirection);
        StorageLive(_1463);
        _1463 = (_1467.1: controller::position::PositionDirection);
        StorageLive(_1464);
        _1464 = (_1467.2: std::option::Option<(u64, u64)>);
        StorageLive(_1465);
        _1465 = (_1467.3: controller::position::PositionDirection);
        StorageLive(_1466);
        _1466 = (_1467.4: std::option::Option<(u64, u64)>);
        StorageDead(_1467);
        StorageLive(_1748);
        StorageLive(_1749);
        StorageLive(_1750);
        StorageLive(_1751);
        _1751 = &(*_4);
        StorageLive(_1752);
        _1752 = &(*_10);
        StorageLive(_1753);
        _1753 = &(*_11);
        StorageLive(_1754);
        _1754 = &mut (*_12);
        StorageLive(_1755);
        _1755 = _16;
        StorageLive(_1756);
        _1756 = _835;
        _1750 = calculate_margin_freed(move _1751, move _1752, move _1753, move _1754, move _1755, move _1756) -> [return: bb804, unwind: bb1075];
    }

    bb804: {
        StorageDead(_1756);
        StorageDead(_1755);
        StorageDead(_1754);
        StorageDead(_1753);
        StorageDead(_1752);
        StorageDead(_1751);
        _1749 = <std::result::Result<(u64, MarginCalculation), error::ErrorCode> as Try>::branch(move _1750) -> [return: bb805, unwind: bb1075];
    }

    bb805: {
        StorageDead(_1750);
        _1757 = discriminant(_1749);
        switchInt(move _1757) -> [0: bb806, 1: bb807, otherwise: bb18];
    }

    bb806: {
        StorageLive(_1761);
        _1761 = ((_1749 as Continue).0: (u64, state::margin_calculation::MarginCalculation));
        _1748 = _1761;
        StorageDead(_1761);
        StorageLive(_1747);
        _1747 = (_1748.0: u64);
        StorageDead(_1749);
        StorageDead(_1748);
        StorageLive(_1762);
        StorageLive(_1763);
        StorageLive(_1764);
        StorageLive(_1765);
        _1765 = _378;
        StorageLive(_1766);
        _1766 = _1747;
        _1764 = <u64 as SafeMath>::safe_add(move _1765, move _1766) -> [return: bb809, unwind: bb1075];
    }

    bb807: {
        StorageLive(_1758);
        _1758 = ((_1749 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1760);
        _1760 = _1758;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1760) -> [return: bb808, unwind: bb1075];
    }

    bb808: {
        StorageDead(_1760);
        StorageDead(_1758);
        StorageDead(_1749);
        StorageDead(_1748);
        goto -> bb931;
    }

    bb809: {
        StorageDead(_1766);
        StorageDead(_1765);
        _1763 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _1764) -> [return: bb810, unwind: bb1075];
    }

    bb810: {
        StorageDead(_1764);
        _1767 = discriminant(_1763);
        switchInt(move _1767) -> [0: bb811, 1: bb812, otherwise: bb18];
    }

    bb811: {
        StorageLive(_1771);
        _1771 = ((_1763 as Continue).0: u64);
        _1762 = _1771;
        StorageDead(_1771);
        _378 = move _1762;
        StorageDead(_1762);
        StorageDead(_1763);
        StorageLive(_1772);
        StorageLive(_1773);
        StorageLive(_1774);
        StorageLive(_1775);
        _1775 = &mut (*_4);
        StorageLive(_1776);
        _1776 = _1747;
        _1774 = User::increment_margin_freed(move _1775, move _1776) -> [return: bb814, unwind: bb1075];
    }

    bb812: {
        StorageLive(_1768);
        _1768 = ((_1763 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1770);
        _1770 = _1768;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1770) -> [return: bb813, unwind: bb1075];
    }

    bb813: {
        StorageDead(_1770);
        StorageDead(_1768);
        StorageDead(_1762);
        StorageDead(_1763);
        goto -> bb930;
    }

    bb814: {
        StorageDead(_1776);
        StorageDead(_1775);
        _1773 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1774) -> [return: bb815, unwind: bb1075];
    }

    bb815: {
        StorageDead(_1774);
        _1777 = discriminant(_1773);
        switchInt(move _1777) -> [0: bb816, 1: bb817, otherwise: bb18];
    }

    bb816: {
        StorageLive(_1781);
        _1781 = ((_1773 as Continue).0: ());
        _1772 = _1781;
        StorageDead(_1781);
        StorageDead(_1773);
        StorageDead(_1772);
        StorageLive(_1782);
        StorageLive(_1783);
        StorageLive(_1784);
        _1784 = _1057;
        StorageLive(_1785);
        _1785 = _938;
        _1783 = Ge(move _1784, move _1785);
        switchInt(move _1783) -> [0: bb820, otherwise: bb819];
    }

    bb817: {
        StorageLive(_1778);
        _1778 = ((_1773 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1780);
        _1780 = _1778;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1780) -> [return: bb818, unwind: bb1075];
    }

    bb818: {
        StorageDead(_1780);
        StorageDead(_1778);
        StorageDead(_1773);
        StorageDead(_1772);
        goto -> bb930;
    }

    bb819: {
        StorageDead(_1785);
        StorageDead(_1784);
        StorageLive(_1786);
        StorageLive(_1787);
        _1787 = &mut (*_4);
        _1786 = User::exit_liquidation(move _1787) -> [return: bb821, unwind: bb1075];
    }

    bb820: {
        StorageDead(_1785);
        StorageDead(_1784);
        StorageLive(_1788);
        StorageLive(_1789);
        _1789 = &(*_4);
        _1788 = is_user_bankrupt(move _1789) -> [return: bb822, unwind: bb1075];
    }

    bb821: {
        StorageDead(_1787);
        StorageDead(_1786);
        _1782 = const ();
        goto -> bb827;
    }

    bb822: {
        switchInt(move _1788) -> [0: bb825, otherwise: bb823];
    }

    bb823: {
        StorageDead(_1789);
        StorageLive(_1790);
        StorageLive(_1791);
        _1791 = &mut (*_4);
        _1790 = User::enter_bankruptcy(move _1791) -> [return: bb824, unwind: bb1075];
    }

    bb824: {
        StorageDead(_1791);
        StorageDead(_1790);
        _1782 = const ();
        goto -> bb826;
    }

    bb825: {
        StorageDead(_1789);
        _1782 = const ();
        goto -> bb826;
    }

    bb826: {
        StorageDead(_1788);
        goto -> bb827;
    }

    bb827: {
        StorageDead(_1783);
        StorageDead(_1782);
        StorageLive(_1792);
        StorageLive(_1793);
        StorageLive(_1794);
        StorageLive(_1795);
        _1795 = &(*_7);
        StorageLive(_1796);
        _1796 = &(*_10);
        StorageLive(_1797);
        _1797 = &(*_11);
        StorageLive(_1798);
        _1798 = &mut (*_12);
        _1794 = math::margin::meets_initial_margin_requirement(move _1795, move _1796, move _1797, move _1798) -> [return: bb828, unwind: bb1075];
    }

    bb828: {
        StorageDead(_1798);
        StorageDead(_1797);
        StorageDead(_1796);
        StorageDead(_1795);
        _1793 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _1794) -> [return: bb829, unwind: bb1075];
    }

    bb829: {
        StorageDead(_1794);
        _1799 = discriminant(_1793);
        switchInt(move _1799) -> [0: bb830, 1: bb831, otherwise: bb18];
    }

    bb830: {
        StorageLive(_1803);
        _1803 = ((_1793 as Continue).0: bool);
        _1792 = _1803;
        StorageDead(_1803);
        StorageDead(_1793);
        StorageLive(_1804);
        StorageLive(_1805);
        StorageLive(_1806);
        StorageLive(_1807);
        _1807 = _1792;
        switchInt(move _1807) -> [0: bb834, otherwise: bb833];
    }

    bb831: {
        StorageLive(_1800);
        _1800 = ((_1793 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1802);
        _1802 = _1800;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1802) -> [return: bb832, unwind: bb1075];
    }

    bb832: {
        StorageDead(_1802);
        StorageDead(_1800);
        StorageDead(_1793);
        goto -> bb929;
    }

    bb833: {
        StorageLive(_1808);
        _1808 = ();
        _1806 = std::result::Result::<(), error::ErrorCode>::Ok(move _1808);
        StorageDead(_1808);
        goto -> bb842;
    }

    bb834: {
        StorageLive(_1809);
        _1809 = error::ErrorCode::InsufficientCollateral;
        StorageLive(_1810);
        StorageLive(_1811);
        StorageLive(_1812);
        StorageLive(_1813);
        StorageLive(_1814);
        StorageLive(_1815);
        StorageLive(_1816);
        StorageLive(_1817);
        StorageLive(_1818);
        StorageLive(_1819);
        StorageLive(_1820);
        _2090 = const _;
        _1820 = &(*_2090);
        _1819 = &(*_1820);
        _1818 = move _1819 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1819);
        StorageLive(_1822);
        StorageLive(_1823);
        StorageLive(_1824);
        StorageLive(_1825);
        StorageLive(_1826);
        StorageLive(_1827);
        StorageLive(_1828);
        _1828 = &_1809;
        _1827 = &(*_1828);
        _1826 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _1827) -> [return: bb835, unwind: bb1075];
    }

    bb835: {
        StorageDead(_1827);
        _1825 = [move _1826];
        StorageDead(_1826);
        _1824 = &_1825;
        _1823 = &(*_1824);
        _1822 = move _1823 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1823);
        _1817 = Arguments::<'_>::new_v1(move _1818, move _1822) -> [return: bb836, unwind: bb1075];
    }

    bb836: {
        StorageDead(_1822);
        StorageDead(_1818);
        _1816 = format(move _1817) -> [return: bb837, unwind: bb1075];
    }

    bb837: {
        StorageDead(_1817);
        StorageDead(_1828);
        StorageDead(_1825);
        StorageDead(_1824);
        StorageDead(_1820);
        _1815 = move _1816;
        StorageDead(_1816);
        _1814 = &_1815;
        _1813 = &(*_1814);
        _1812 = <String as Deref>::deref(move _1813) -> [return: bb838, unwind: bb1013];
    }

    bb838: {
        _1811 = &(*_1812);
        StorageDead(_1813);
        _1810 = solana_program::log::sol_log(move _1811) -> [return: bb839, unwind: bb1013];
    }

    bb839: {
        StorageDead(_1811);
        drop(_1815) -> [return: bb840, unwind: bb1075];
    }

    bb840: {
        StorageDead(_1815);
        StorageDead(_1814);
        StorageDead(_1812);
        StorageDead(_1810);
        StorageLive(_1829);
        StorageLive(_1830);
        StorageLive(_1831);
        _1831 = const "Liquidator doesnt have enough collateral to take over perp position";
        _1830 = &(*_1831);
        _1829 = solana_program::log::sol_log(move _1830) -> [return: bb841, unwind: bb1075];
    }

    bb841: {
        StorageDead(_1830);
        StorageDead(_1831);
        StorageDead(_1829);
        StorageLive(_1832);
        _1832 = _1809;
        _1806 = std::result::Result::<(), error::ErrorCode>::Err(move _1832);
        StorageDead(_1832);
        StorageDead(_1809);
        goto -> bb842;
    }

    bb842: {
        StorageDead(_1807);
        _1805 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1806) -> [return: bb843, unwind: bb1075];
    }

    bb843: {
        StorageDead(_1806);
        _1833 = discriminant(_1805);
        switchInt(move _1833) -> [0: bb844, 1: bb845, otherwise: bb18];
    }

    bb844: {
        StorageLive(_1837);
        _1837 = ((_1805 as Continue).0: ());
        _1804 = _1837;
        StorageDead(_1837);
        StorageDead(_1805);
        StorageDead(_1804);
        StorageLive(_1838);
        StorageLive(_1839);
        _1839 = ((*_4).15: u32);
        StorageLive(_1840);
        StorageLive(_1841);
        StorageLive(_1842);
        StorageLive(_1843);
        _1843 = _1839;
        _1842 = core::num::<impl u32>::checked_add(move _1843, const 1_u32) -> [return: bb847, unwind: bb1075];
    }

    bb845: {
        StorageLive(_1834);
        _1834 = ((_1805 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1836);
        _1836 = _1834;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1836) -> [return: bb846, unwind: bb1075];
    }

    bb846: {
        StorageDead(_1836);
        StorageDead(_1834);
        StorageDead(_1805);
        StorageDead(_1804);
        goto -> bb929;
    }

    bb847: {
        StorageDead(_1843);
        StorageLive(_1844);
        _1844 = Option::<u32>::Some(const 1_u32);
        _1841 = Option::<u32>::or(move _1842, move _1844) -> [return: bb848, unwind: bb1075];
    }

    bb848: {
        StorageDead(_1844);
        StorageDead(_1842);
        _1840 = Option::<u32>::unwrap(move _1841) -> [return: bb849, unwind: bb1075];
    }

    bb849: {
        StorageDead(_1841);
        ((*_4).15: u32) = move _1840;
        StorageDead(_1840);
        _1838 = _1839;
        StorageDead(_1839);
        StorageLive(_1845);
        StorageLive(_1846);
        _1846 = ((*_7).15: u32);
        StorageLive(_1847);
        StorageLive(_1848);
        StorageLive(_1849);
        StorageLive(_1850);
        _1850 = _1846;
        _1849 = core::num::<impl u32>::checked_add(move _1850, const 1_u32) -> [return: bb850, unwind: bb1075];
    }

    bb850: {
        StorageDead(_1850);
        StorageLive(_1851);
        _1851 = Option::<u32>::Some(const 1_u32);
        _1848 = Option::<u32>::or(move _1849, move _1851) -> [return: bb851, unwind: bb1075];
    }

    bb851: {
        StorageDead(_1851);
        StorageDead(_1849);
        _1847 = Option::<u32>::unwrap(move _1848) -> [return: bb852, unwind: bb1075];
    }

    bb852: {
        StorageDead(_1848);
        ((*_7).15: u32) = move _1847;
        StorageDead(_1847);
        _1845 = _1846;
        StorageDead(_1846);
        StorageLive(_1852);
        StorageLive(_1853);
        StorageLive(_1854);
        StorageLive(_1855);
        StorageLive(_1856);
        _1856 = &(*_10);
        StorageLive(_1857);
        StorageLive(_1858);
        _1858 = &_1;
        _1857 = &(*_1858);
        _1855 = PerpMarketMap::<'_>::get_ref_mut(move _1856, move _1857) -> [return: bb853, unwind: bb1075];
    }

    bb853: {
        StorageDead(_1857);
        StorageDead(_1856);
        _1854 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _1855) -> [return: bb854, unwind: bb1075];
    }

    bb854: {
        StorageDead(_1855);
        _1859 = discriminant(_1854);
        switchInt(move _1859) -> [0: bb855, 1: bb856, otherwise: bb18];
    }

    bb855: {
        StorageLive(_1863);
        _1863 = move ((_1854 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _1853 = move _1863;
        StorageDead(_1863);
        _2170 = discriminant(_1854);
        StorageDead(_1858);
        StorageDead(_1854);
        StorageLive(_1864);
        StorageLive(_1865);
        StorageLive(_1866);
        _1866 = &_1853;
        _1865 = <RefMut<'_, PerpMarket> as Deref>::deref(move _1866) -> [return: bb858, unwind: bb1012];
    }

    bb856: {
        StorageLive(_1860);
        _1860 = ((_1854 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1862);
        _1862 = _1860;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1862) -> [return: bb857, unwind: bb1069];
    }

    bb857: {
        StorageDead(_1862);
        StorageDead(_1860);
        _2168 = discriminant(_1854);
        StorageDead(_1858);
        StorageDead(_1854);
        StorageDead(_1853);
        goto -> bb928;
    }

    bb858: {
        StorageDead(_1866);
        _1864 = ((*_1865).8: u64);
        StorageDead(_1865);
        StorageLive(_1867);
        StorageLive(_1868);
        StorageLive(_1869);
        StorageLive(_1870);
        _1870 = _1864;
        _1869 = core::num::<impl u64>::checked_add(move _1870, const 1_u64) -> [return: bb859, unwind: bb1012];
    }

    bb859: {
        StorageDead(_1870);
        StorageLive(_1871);
        _1871 = Option::<u64>::Some(const 1_u64);
        _1868 = Option::<u64>::or(move _1869, move _1871) -> [return: bb860, unwind: bb1012];
    }

    bb860: {
        StorageDead(_1871);
        StorageDead(_1869);
        _1867 = Option::<u64>::unwrap(move _1868) -> [return: bb861, unwind: bb1012];
    }

    bb861: {
        StorageDead(_1868);
        StorageLive(_1872);
        StorageLive(_1873);
        _1873 = &mut _1853;
        _1872 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _1873) -> [return: bb862, unwind: bb1012];
    }

    bb862: {
        StorageDead(_1873);
        ((*_1872).8: u64) = move _1867;
        StorageDead(_1867);
        StorageDead(_1872);
        _1852 = _1864;
        StorageDead(_1864);
        drop(_1853) -> [return: bb863, unwind: bb1075];
    }

    bb863: {
        StorageDead(_1853);
        StorageLive(_1874);
        StorageLive(_1875);
        _1875 = _13;
        StorageLive(_1876);
        _1876 = _1057;
        StorageLive(_1877);
        _1877 = _1838;
        StorageLive(_1878);
        _1878 = _1;
        StorageLive(_1879);
        _1879 = OrderStatus::Open;
        StorageLive(_1880);
        _1880 = state::user::OrderType::Market;
        StorageLive(_1881);
        _1881 = state::user::MarketType::Perp;
        StorageLive(_1882);
        _1882 = _1463;
        StorageLive(_1883);
        _1883 = _1462;
        StorageLive(_1884);
        _1884 = <Order as Default>::default() -> [return: bb864, unwind: bb1075];
    }

    bb864: {
        _1874 = Order { slot: move _1875, price: (_1884.1: u64), base_asset_amount: move _1876, base_asset_amount_filled: (_1884.3: u64), quote_asset_amount_filled: (_1884.4: u64), trigger_price: (_1884.5: u64), auction_start_price: (_1884.6: i64), auction_end_price: (_1884.7: i64), max_ts: (_1884.8: i64), oracle_price_offset: (_1884.9: i32), order_id: move _1877, market_index: move _1878, status: move _1879, order_type: move _1880, market_type: move _1881, user_order_id: (_1884.15: u8), existing_position_direction: move _1883, direction: move _1882, reduce_only: (_1884.18: bool), post_only: (_1884.19: bool), immediate_or_cancel: (_1884.20: bool), trigger_condition: (_1884.21: state::user::OrderTriggerCondition), auction_duration: (_1884.22: u8), posted_slot_tail: (_1884.23: u8), bit_flags: (_1884.24: u8), padding: (_1884.25: [u8; 1]) };
        StorageDead(_1883);
        StorageDead(_1882);
        StorageDead(_1881);
        StorageDead(_1880);
        StorageDead(_1879);
        StorageDead(_1878);
        StorageDead(_1877);
        StorageDead(_1876);
        StorageDead(_1875);
        StorageDead(_1884);
        StorageLive(_1885);
        StorageLive(_1886);
        StorageLive(_1887);
        StorageLive(_1888);
        StorageLive(_1889);
        StorageLive(_1890);
        StorageLive(_1891);
        StorageLive(_1892);
        StorageLive(_1893);
        StorageLive(_1894);
        StorageLive(_1895);
        StorageLive(_1896);
        StorageLive(_1897);
        StorageLive(_1898);
        StorageLive(_1899);
        _1899 = _14;
        StorageLive(_1900);
        _1900 = (*_5);
        StorageLive(_1901);
        _1901 = _1874;
        _1898 = OrderRecord { ts: move _1899, user: move _1900, order: move _1901 };
        StorageDead(_1901);
        StorageDead(_1900);
        StorageDead(_1899);
        _1897 = &_1898;
        _1896 = &(*_1897);
        _1895 = <OrderRecord as anchor_lang::Event>::data(move _1896) -> [return: bb865, unwind: bb1075];
    }

    bb865: {
        StorageDead(_1896);
        _1894 = &_1895;
        _1893 = &(*_1894);
        _1892 = <Vec<u8> as Deref>::deref(move _1893) -> [return: bb866, unwind: bb1011];
    }

    bb866: {
        _1891 = &(*_1892);
        StorageDead(_1893);
        _1890 = [move _1891];
        StorageDead(_1891);
        _1889 = &_1890;
        _1888 = &(*_1889);
        _1887 = move _1888 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_1888);
        _1886 = solana_program::log::sol_log_data(move _1887) -> [return: bb867, unwind: bb1011];
    }

    bb867: {
        StorageDead(_1887);
        drop(_1895) -> [return: bb868, unwind: bb1075];
    }

    bb868: {
        StorageDead(_1898);
        StorageDead(_1897);
        StorageDead(_1895);
        StorageDead(_1894);
        StorageDead(_1892);
        StorageDead(_1890);
        StorageDead(_1889);
        StorageDead(_1886);
        _1885 = const ();
        StorageDead(_1885);
        StorageLive(_1902);
        StorageLive(_1903);
        _1903 = _13;
        StorageLive(_1904);
        _1905 = discriminant(_3);
        switchInt(move _1905) -> [1: bb869, otherwise: bb870];
    }

    bb869: {
        StorageLive(_1906);
        _1906 = ((_3 as Some).0: u64);
        _1904 = _1906;
        StorageDead(_1906);
        goto -> bb871;
    }

    bb870: {
        _1904 = const 0_u64;
        goto -> bb871;
    }

    bb871: {
        StorageLive(_1907);
        _1907 = _1057;
        StorageLive(_1908);
        _1908 = _1845;
        StorageLive(_1909);
        _1909 = _1;
        StorageLive(_1910);
        _1910 = OrderStatus::Open;
        StorageLive(_1911);
        StorageLive(_1912);
        StorageLive(_1913);
        _1913 = &_3;
        _1912 = Option::<u64>::is_some(move _1913) -> [return: bb872, unwind: bb1075];
    }

    bb872: {
        switchInt(move _1912) -> [0: bb874, otherwise: bb873];
    }

    bb873: {
        StorageDead(_1913);
        _1911 = state::user::OrderType::Limit;
        goto -> bb875;
    }

    bb874: {
        StorageDead(_1913);
        _1911 = state::user::OrderType::Market;
        goto -> bb875;
    }

    bb875: {
        StorageDead(_1912);
        StorageLive(_1914);
        _1914 = state::user::MarketType::Perp;
        StorageLive(_1915);
        _1915 = _1462;
        StorageLive(_1916);
        _1916 = _1465;
        StorageLive(_1917);
        _1917 = <Order as Default>::default() -> [return: bb876, unwind: bb1075];
    }

    bb876: {
        _1902 = Order { slot: move _1903, price: move _1904, base_asset_amount: move _1907, base_asset_amount_filled: (_1917.3: u64), quote_asset_amount_filled: (_1917.4: u64), trigger_price: (_1917.5: u64), auction_start_price: (_1917.6: i64), auction_end_price: (_1917.7: i64), max_ts: (_1917.8: i64), oracle_price_offset: (_1917.9: i32), order_id: move _1908, market_index: move _1909, status: move _1910, order_type: move _1911, market_type: move _1914, user_order_id: (_1917.15: u8), existing_position_direction: move _1916, direction: move _1915, reduce_only: (_1917.18: bool), post_only: (_1917.19: bool), immediate_or_cancel: (_1917.20: bool), trigger_condition: (_1917.21: state::user::OrderTriggerCondition), auction_duration: (_1917.22: u8), posted_slot_tail: (_1917.23: u8), bit_flags: (_1917.24: u8), padding: (_1917.25: [u8; 1]) };
        StorageDead(_1916);
        StorageDead(_1915);
        StorageDead(_1914);
        StorageDead(_1911);
        StorageDead(_1910);
        StorageDead(_1909);
        StorageDead(_1908);
        StorageDead(_1907);
        StorageDead(_1904);
        StorageDead(_1903);
        StorageDead(_1917);
        StorageLive(_1918);
        StorageLive(_1919);
        StorageLive(_1920);
        StorageLive(_1921);
        StorageLive(_1922);
        StorageLive(_1923);
        StorageLive(_1924);
        StorageLive(_1925);
        StorageLive(_1926);
        StorageLive(_1927);
        StorageLive(_1928);
        StorageLive(_1929);
        StorageLive(_1930);
        StorageLive(_1931);
        StorageLive(_1932);
        _1932 = _14;
        StorageLive(_1933);
        _1933 = (*_8);
        StorageLive(_1934);
        _1934 = _1902;
        _1931 = OrderRecord { ts: move _1932, user: move _1933, order: move _1934 };
        StorageDead(_1934);
        StorageDead(_1933);
        StorageDead(_1932);
        _1930 = &_1931;
        _1929 = &(*_1930);
        _1928 = <OrderRecord as anchor_lang::Event>::data(move _1929) -> [return: bb877, unwind: bb1075];
    }

    bb877: {
        StorageDead(_1929);
        _1927 = &_1928;
        _1926 = &(*_1927);
        _1925 = <Vec<u8> as Deref>::deref(move _1926) -> [return: bb878, unwind: bb1010];
    }

    bb878: {
        _1924 = &(*_1925);
        StorageDead(_1926);
        _1923 = [move _1924];
        StorageDead(_1924);
        _1922 = &_1923;
        _1921 = &(*_1922);
        _1920 = move _1921 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_1921);
        _1919 = solana_program::log::sol_log_data(move _1920) -> [return: bb879, unwind: bb1010];
    }

    bb879: {
        StorageDead(_1920);
        drop(_1928) -> [return: bb880, unwind: bb1075];
    }

    bb880: {
        StorageDead(_1931);
        StorageDead(_1930);
        StorageDead(_1928);
        StorageDead(_1927);
        StorageDead(_1925);
        StorageDead(_1923);
        StorageDead(_1922);
        StorageDead(_1919);
        _1918 = const ();
        StorageDead(_1918);
        StorageLive(_1937);
        StorageLive(_1938);
        StorageLive(_1939);
        StorageLive(_1940);
        _1940 = _1057;
        StorageLive(_1941);
        _1941 = _1464;
        _1939 = math::orders::calculate_existing_position_fields_for_order_action(move _1940, move _1941) -> [return: bb881, unwind: bb1075];
    }

    bb881: {
        StorageDead(_1941);
        StorageDead(_1940);
        _1938 = <std::result::Result<(Option<u64>, Option<u64>), error::ErrorCode> as Try>::branch(move _1939) -> [return: bb882, unwind: bb1075];
    }

    bb882: {
        StorageDead(_1939);
        _1942 = discriminant(_1938);
        switchInt(move _1942) -> [0: bb883, 1: bb884, otherwise: bb18];
    }

    bb883: {
        StorageLive(_1946);
        _1946 = ((_1938 as Continue).0: (std::option::Option<u64>, std::option::Option<u64>));
        _1937 = _1946;
        StorageDead(_1946);
        StorageLive(_1935);
        _1935 = (_1937.0: std::option::Option<u64>);
        StorageLive(_1936);
        _1936 = (_1937.1: std::option::Option<u64>);
        StorageDead(_1938);
        StorageDead(_1937);
        StorageLive(_1949);
        StorageLive(_1950);
        StorageLive(_1951);
        StorageLive(_1952);
        _1952 = _1057;
        StorageLive(_1953);
        _1953 = _1466;
        _1951 = math::orders::calculate_existing_position_fields_for_order_action(move _1952, move _1953) -> [return: bb886, unwind: bb1075];
    }

    bb884: {
        StorageLive(_1943);
        _1943 = ((_1938 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1945);
        _1945 = _1943;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1945) -> [return: bb885, unwind: bb1075];
    }

    bb885: {
        StorageDead(_1945);
        StorageDead(_1943);
        StorageDead(_1938);
        StorageDead(_1937);
        goto -> bb927;
    }

    bb886: {
        StorageDead(_1953);
        StorageDead(_1952);
        _1950 = <std::result::Result<(Option<u64>, Option<u64>), error::ErrorCode> as Try>::branch(move _1951) -> [return: bb887, unwind: bb1075];
    }

    bb887: {
        StorageDead(_1951);
        _1954 = discriminant(_1950);
        switchInt(move _1954) -> [0: bb888, 1: bb889, otherwise: bb18];
    }

    bb888: {
        StorageLive(_1958);
        _1958 = ((_1950 as Continue).0: (std::option::Option<u64>, std::option::Option<u64>));
        _1949 = _1958;
        StorageDead(_1958);
        StorageLive(_1947);
        _1947 = (_1949.0: std::option::Option<u64>);
        StorageLive(_1948);
        _1948 = (_1949.1: std::option::Option<u64>);
        StorageDead(_1950);
        StorageDead(_1949);
        StorageLive(_1959);
        StorageLive(_1960);
        _1960 = _14;
        StorageLive(_1961);
        _1961 = OrderAction::Fill;
        StorageLive(_1962);
        _1962 = OrderActionExplanation::Liquidation;
        StorageLive(_1963);
        _1963 = _1;
        StorageLive(_1964);
        _1964 = state::user::MarketType::Perp;
        StorageLive(_1965);
        _1965 = Option::<anchor_lang::prelude::Pubkey>::None;
        StorageLive(_1966);
        _1966 = Option::<u64>::None;
        StorageLive(_1967);
        StorageLive(_1968);
        _1968 = _1852;
        _1967 = Option::<u64>::Some(move _1968);
        StorageDead(_1968);
        StorageLive(_1969);
        StorageLive(_1970);
        _1970 = _1057;
        _1969 = Option::<u64>::Some(move _1970);
        StorageDead(_1970);
        StorageLive(_1971);
        StorageLive(_1972);
        _1972 = _1268;
        _1971 = Option::<u64>::Some(move _1972);
        StorageDead(_1972);
        StorageLive(_1973);
        StorageLive(_1974);
        StorageLive(_1975);
        StorageLive(_1976);
        StorageLive(_1977);
        StorageLive(_1978);
        _1978 = _1294;
        _1977 = core::num::<impl i64>::unsigned_abs(move _1978) -> [return: bb891, unwind: bb1075];
    }

    bb889: {
        StorageLive(_1955);
        _1955 = ((_1950 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1957);
        _1957 = _1955;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1957) -> [return: bb890, unwind: bb1075];
    }

    bb890: {
        StorageDead(_1957);
        StorageDead(_1955);
        StorageDead(_1950);
        StorageDead(_1949);
        goto -> bb926;
    }

    bb891: {
        StorageDead(_1978);
        StorageLive(_1979);
        StorageLive(_1980);
        _1980 = _1338;
        _1979 = core::num::<impl i64>::unsigned_abs(move _1980) -> [return: bb892, unwind: bb1075];
    }

    bb892: {
        StorageDead(_1980);
        _1976 = <u64 as SafeMath>::safe_add(move _1977, move _1979) -> [return: bb893, unwind: bb1075];
    }

    bb893: {
        StorageDead(_1979);
        StorageDead(_1977);
        _1975 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _1976) -> [return: bb894, unwind: bb1075];
    }

    bb894: {
        StorageDead(_1976);
        _1981 = discriminant(_1975);
        switchInt(move _1981) -> [0: bb895, 1: bb896, otherwise: bb18];
    }

    bb895: {
        StorageLive(_1985);
        _1985 = ((_1975 as Continue).0: u64);
        _1974 = _1985;
        StorageDead(_1985);
        _1973 = Option::<u64>::Some(move _1974);
        StorageDead(_1974);
        StorageLive(_1986);
        StorageLive(_1987);
        _1987 = _1294;
        _1986 = Option::<i64>::Some(move _1987);
        StorageDead(_1987);
        StorageLive(_1988);
        _1988 = Option::<u32>::None;
        StorageLive(_1989);
        _1989 = Option::<i64>::None;
        StorageLive(_1990);
        _1990 = Option::<u64>::None;
        StorageLive(_1991);
        StorageLive(_1992);
        _1992 = (*_5);
        _1991 = Option::<anchor_lang::prelude::Pubkey>::Some(move _1992);
        StorageDead(_1992);
        StorageLive(_1993);
        StorageLive(_1994);
        _1994 = _1838;
        _1993 = Option::<u32>::Some(move _1994);
        StorageDead(_1994);
        StorageLive(_1995);
        StorageLive(_1996);
        _1996 = _1463;
        _1995 = Option::<controller::position::PositionDirection>::Some(move _1996);
        StorageDead(_1996);
        StorageLive(_1997);
        StorageLive(_1998);
        _1998 = _1057;
        _1997 = Option::<u64>::Some(move _1998);
        StorageDead(_1998);
        StorageLive(_1999);
        StorageLive(_2000);
        _2000 = _1057;
        _1999 = Option::<u64>::Some(move _2000);
        StorageDead(_2000);
        StorageLive(_2001);
        StorageLive(_2002);
        _2002 = _1268;
        _2001 = Option::<u64>::Some(move _2002);
        StorageDead(_2002);
        StorageLive(_2003);
        StorageLive(_2004);
        _2004 = (*_8);
        _2003 = Option::<anchor_lang::prelude::Pubkey>::Some(move _2004);
        StorageDead(_2004);
        StorageLive(_2005);
        StorageLive(_2006);
        _2006 = _1845;
        _2005 = Option::<u32>::Some(move _2006);
        StorageDead(_2006);
        StorageLive(_2007);
        StorageLive(_2008);
        _2008 = _1462;
        _2007 = Option::<controller::position::PositionDirection>::Some(move _2008);
        StorageDead(_2008);
        StorageLive(_2009);
        StorageLive(_2010);
        _2010 = _1057;
        _2009 = Option::<u64>::Some(move _2010);
        StorageDead(_2010);
        StorageLive(_2011);
        StorageLive(_2012);
        _2012 = _1057;
        _2011 = Option::<u64>::Some(move _2012);
        StorageDead(_2012);
        StorageLive(_2013);
        StorageLive(_2014);
        _2014 = _1268;
        _2013 = Option::<u64>::Some(move _2014);
        StorageDead(_2014);
        StorageLive(_2015);
        _2015 = _511;
        StorageLive(_2016);
        _2016 = _1935;
        StorageLive(_2017);
        _2017 = _1936;
        StorageLive(_2018);
        _2018 = _1947;
        StorageLive(_2019);
        _2019 = _1948;
        StorageLive(_2020);
        _2020 = Option::<u64>::None;
        _1959 = OrderActionRecord { ts: move _1960, action: move _1961, action_explanation: move _1962, market_index: move _1963, market_type: move _1964, filler: move _1965, filler_reward: move _1966, fill_record_id: move _1967, base_asset_amount_filled: move _1969, quote_asset_amount_filled: move _1971, taker_fee: move _1973, maker_fee: move _1986, referrer_reward: move _1988, quote_asset_amount_surplus: move _1989, spot_fulfillment_method_fee: move _1990, taker: move _1991, taker_order_id: move _1993, taker_order_direction: move _1995, taker_order_base_asset_amount: move _1997, taker_order_cumulative_base_asset_amount_filled: move _1999, taker_order_cumulative_quote_asset_amount_filled: move _2001, maker: move _2003, maker_order_id: move _2005, maker_order_direction: move _2007, maker_order_base_asset_amount: move _2009, maker_order_cumulative_base_asset_amount_filled: move _2011, maker_order_cumulative_quote_asset_amount_filled: move _2013, oracle_price: move _2015, bit_flags: const 0_u8, taker_existing_quote_entry_amount: move _2016, taker_existing_base_asset_amount: move _2017, maker_existing_quote_entry_amount: move _2018, maker_existing_base_asset_amount: move _2019, trigger_price: move _2020 };
        StorageDead(_2020);
        StorageDead(_2019);
        StorageDead(_2018);
        StorageDead(_2017);
        StorageDead(_2016);
        StorageDead(_2015);
        StorageDead(_2013);
        StorageDead(_2011);
        StorageDead(_2009);
        StorageDead(_2007);
        StorageDead(_2005);
        StorageDead(_2003);
        StorageDead(_2001);
        StorageDead(_1999);
        StorageDead(_1997);
        StorageDead(_1995);
        StorageDead(_1993);
        StorageDead(_1991);
        StorageDead(_1990);
        StorageDead(_1989);
        StorageDead(_1988);
        StorageDead(_1986);
        StorageDead(_1973);
        StorageDead(_1971);
        StorageDead(_1969);
        StorageDead(_1967);
        StorageDead(_1966);
        StorageDead(_1965);
        StorageDead(_1964);
        StorageDead(_1963);
        StorageDead(_1962);
        StorageDead(_1961);
        StorageDead(_1960);
        StorageDead(_1975);
        StorageLive(_2021);
        StorageLive(_2022);
        StorageLive(_2023);
        StorageLive(_2024);
        StorageLive(_2025);
        StorageLive(_2026);
        StorageLive(_2027);
        StorageLive(_2028);
        StorageLive(_2029);
        StorageLive(_2030);
        StorageLive(_2031);
        StorageLive(_2032);
        StorageLive(_2033);
        _2033 = &_1959;
        _2032 = &(*_2033);
        _2031 = <OrderActionRecord as anchor_lang::Event>::data(move _2032) -> [return: bb898, unwind: bb1075];
    }

    bb896: {
        StorageLive(_1982);
        _1982 = ((_1975 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1984);
        _1984 = _1982;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1984) -> [return: bb897, unwind: bb1075];
    }

    bb897: {
        StorageDead(_1984);
        StorageDead(_1982);
        StorageDead(_1974);
        StorageDead(_1973);
        StorageDead(_1971);
        StorageDead(_1969);
        StorageDead(_1967);
        StorageDead(_1966);
        StorageDead(_1965);
        StorageDead(_1964);
        StorageDead(_1963);
        StorageDead(_1962);
        StorageDead(_1961);
        StorageDead(_1960);
        StorageDead(_1975);
        goto -> bb925;
    }

    bb898: {
        StorageDead(_2032);
        _2030 = &_2031;
        _2029 = &(*_2030);
        _2028 = <Vec<u8> as Deref>::deref(move _2029) -> [return: bb899, unwind: bb1009];
    }

    bb899: {
        _2027 = &(*_2028);
        StorageDead(_2029);
        _2026 = [move _2027];
        StorageDead(_2027);
        _2025 = &_2026;
        _2024 = &(*_2025);
        _2023 = move _2024 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_2024);
        _2022 = solana_program::log::sol_log_data(move _2023) -> [return: bb900, unwind: bb1009];
    }

    bb900: {
        StorageDead(_2023);
        drop(_2031) -> [return: bb901, unwind: bb1075];
    }

    bb901: {
        StorageDead(_2033);
        StorageDead(_2031);
        StorageDead(_2030);
        StorageDead(_2028);
        StorageDead(_2026);
        StorageDead(_2025);
        StorageDead(_2022);
        _2021 = const ();
        StorageDead(_2021);
        StorageLive(_2034);
        StorageLive(_2035);
        StorageLive(_2036);
        StorageLive(_2037);
        StorageLive(_2038);
        StorageLive(_2039);
        StorageLive(_2040);
        StorageLive(_2041);
        StorageLive(_2042);
        StorageLive(_2043);
        StorageLive(_2044);
        StorageLive(_2045);
        StorageLive(_2046);
        StorageLive(_2047);
        StorageLive(_2048);
        _2048 = _14;
        StorageLive(_2049);
        _2049 = _368;
        StorageLive(_2050);
        _2050 = LiquidationType::LiquidatePerp;
        StorageLive(_2051);
        _2051 = (*_5);
        StorageLive(_2052);
        _2052 = (*_8);
        StorageLive(_2053);
        _2053 = (_277.3: u128);
        StorageLive(_2054);
        _2054 = (_277.1: i128);
        StorageLive(_2055);
        StorageLive(_2056);
        _2056 = &(*_4);
        _2055 = User::is_bankrupt(move _2056) -> [return: bb902, unwind: bb1075];
    }

    bb902: {
        StorageDead(_2056);
        StorageLive(_2057);
        _2122 = const false;
        _2057 = move _430;
        StorageLive(_2058);
        _2058 = _378;
        StorageLive(_2059);
        StorageLive(_2060);
        _2060 = _1;
        StorageLive(_2061);
        _2061 = _511;
        StorageLive(_2062);
        _2062 = (_1432.1: i64);
        StorageLive(_2063);
        _2063 = (_1432.0: i64);
        StorageLive(_2064);
        _2064 = _522;
        StorageLive(_2065);
        _2065 = _1838;
        StorageLive(_2066);
        _2066 = _1845;
        StorageLive(_2067);
        _2067 = _1852;
        StorageLive(_2068);
        StorageLive(_2069);
        StorageLive(_2070);
        StorageLive(_2071);
        StorageLive(_2072);
        _2072 = _1294;
        _2071 = core::num::<impl i64>::abs(move _2072) -> [return: bb903, unwind: bb1008];
    }

    bb903: {
        StorageDead(_2072);
        _2070 = <i64 as Cast>::cast::<u64>(move _2071) -> [return: bb904, unwind: bb1008];
    }

    bb904: {
        StorageDead(_2071);
        _2069 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _2070) -> [return: bb905, unwind: bb1008];
    }

    bb905: {
        StorageDead(_2070);
        _2073 = discriminant(_2069);
        switchInt(move _2073) -> [0: bb906, 1: bb907, otherwise: bb18];
    }

    bb906: {
        StorageLive(_2077);
        _2077 = ((_2069 as Continue).0: u64);
        _2068 = _2077;
        StorageDead(_2077);
        StorageLive(_2078);
        StorageLive(_2079);
        StorageLive(_2080);
        StorageLive(_2081);
        StorageLive(_2082);
        _2082 = _1338;
        _2081 = core::num::<impl i64>::abs(move _2082) -> [return: bb909, unwind: bb1008];
    }

    bb907: {
        StorageLive(_2074);
        _2074 = ((_2069 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_2076);
        _2076 = _2074;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _2076) -> [return: bb908, unwind: bb1008];
    }

    bb908: {
        StorageDead(_2076);
        StorageDead(_2074);
        StorageDead(_2068);
        StorageDead(_2067);
        StorageDead(_2066);
        StorageDead(_2065);
        StorageDead(_2064);
        StorageDead(_2063);
        StorageDead(_2062);
        StorageDead(_2061);
        StorageDead(_2060);
        StorageDead(_2059);
        StorageDead(_2058);
        drop(_2057) -> [return: bb923, unwind: bb1075];
    }

    bb909: {
        StorageDead(_2082);
        _2080 = <i64 as Cast>::cast::<u64>(move _2081) -> [return: bb910, unwind: bb1008];
    }

    bb910: {
        StorageDead(_2081);
        _2079 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _2080) -> [return: bb911, unwind: bb1008];
    }

    bb911: {
        StorageDead(_2080);
        _2083 = discriminant(_2079);
        switchInt(move _2083) -> [0: bb912, 1: bb913, otherwise: bb18];
    }

    bb912: {
        StorageLive(_2087);
        _2087 = ((_2079 as Continue).0: u64);
        _2078 = _2087;
        StorageDead(_2087);
        _2059 = LiquidatePerpRecord { market_index: move _2060, oracle_price: move _2061, base_asset_amount: move _2062, quote_asset_amount: move _2063, lp_shares: move _2064, fill_record_id: move _2067, user_order_id: move _2065, liquidator_order_id: move _2066, liquidator_fee: move _2068, if_fee: move _2078 };
        StorageDead(_2078);
        StorageDead(_2068);
        StorageDead(_2067);
        StorageDead(_2066);
        StorageDead(_2065);
        StorageDead(_2064);
        StorageDead(_2063);
        StorageDead(_2062);
        StorageDead(_2061);
        StorageDead(_2060);
        StorageLive(_2088);
        _2088 = <LiquidationRecord as Default>::default() -> [return: bb915, unwind: bb1008];
    }

    bb913: {
        StorageLive(_2084);
        _2084 = ((_2079 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_2086);
        _2086 = _2084;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _2086) -> [return: bb914, unwind: bb1008];
    }

    bb914: {
        StorageDead(_2086);
        StorageDead(_2084);
        StorageDead(_2078);
        StorageDead(_2068);
        StorageDead(_2067);
        StorageDead(_2066);
        StorageDead(_2065);
        StorageDead(_2064);
        StorageDead(_2063);
        StorageDead(_2062);
        StorageDead(_2061);
        StorageDead(_2060);
        StorageDead(_2059);
        StorageDead(_2058);
        drop(_2057) -> [return: bb922, unwind: bb1075];
    }

    bb915: {
        _2047 = LiquidationRecord { ts: move _2048, liquidation_type: move _2050, user: move _2051, liquidator: move _2052, margin_requirement: move _2053, total_collateral: move _2054, margin_freed: move _2058, liquidation_id: move _2049, bankrupt: move _2055, canceled_order_ids: move _2057, liquidate_perp: move _2059, liquidate_spot: move (_2088.11: state::events::LiquidateSpotRecord), liquidate_borrow_for_perp_pnl: move (_2088.12: state::events::LiquidateBorrowForPerpPnlRecord), liquidate_perp_pnl_for_deposit: move (_2088.13: state::events::LiquidatePerpPnlForDepositRecord), perp_bankruptcy: move (_2088.14: state::events::PerpBankruptcyRecord), spot_bankruptcy: move (_2088.15: state::events::SpotBankruptcyRecord) };
        StorageDead(_2059);
        StorageDead(_2058);
        StorageDead(_2057);
        StorageDead(_2055);
        StorageDead(_2054);
        StorageDead(_2053);
        StorageDead(_2052);
        StorageDead(_2051);
        StorageDead(_2050);
        StorageDead(_2049);
        StorageDead(_2048);
        _2046 = &_2047;
        _2045 = &(*_2046);
        _2044 = <LiquidationRecord as anchor_lang::Event>::data(move _2045) -> [return: bb916, unwind: bb1006];
    }

    bb916: {
        StorageDead(_2045);
        _2043 = &_2044;
        _2042 = &(*_2043);
        _2041 = <Vec<u8> as Deref>::deref(move _2042) -> [return: bb917, unwind: bb1005];
    }

    bb917: {
        _2040 = &(*_2041);
        StorageDead(_2042);
        _2039 = [move _2040];
        StorageDead(_2040);
        _2038 = &_2039;
        _2037 = &(*_2038);
        _2036 = move _2037 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_2037);
        _2035 = solana_program::log::sol_log_data(move _2036) -> [return: bb918, unwind: bb1005];
    }

    bb918: {
        StorageDead(_2036);
        drop(_2044) -> [return: bb919, unwind: bb1006];
    }

    bb919: {
        drop(_2047) -> [return: bb920, unwind: bb1007];
    }

    bb920: {
        drop(_2088) -> [return: bb921, unwind: bb1075];
    }

    bb921: {
        StorageDead(_2088);
        StorageDead(_2079);
        StorageDead(_2069);
        StorageDead(_2047);
        StorageDead(_2046);
        StorageDead(_2044);
        StorageDead(_2043);
        StorageDead(_2041);
        StorageDead(_2039);
        StorageDead(_2038);
        StorageDead(_2035);
        _2034 = const ();
        StorageDead(_2034);
        StorageLive(_2089);
        _2089 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _2089);
        StorageDead(_2089);
        StorageDead(_1959);
        StorageDead(_1948);
        StorageDead(_1947);
        StorageDead(_1936);
        StorageDead(_1935);
        StorageDead(_1902);
        StorageDead(_1874);
        StorageDead(_1852);
        StorageDead(_1845);
        StorageDead(_1838);
        StorageDead(_1792);
        StorageDead(_1747);
        StorageDead(_1466);
        StorageDead(_1465);
        StorageDead(_1464);
        StorageDead(_1463);
        StorageDead(_1462);
        StorageDead(_1447);
        StorageDead(_1432);
        StorageDead(_1338);
        StorageDead(_1294);
        StorageDead(_1268);
        StorageDead(_1057);
        StorageDead(_1050);
        StorageDead(_1045);
        StorageDead(_1019);
        StorageDead(_984);
        StorageDead(_971);
        StorageDead(_938);
        StorageDead(_912);
        StorageDead(_884);
        StorageDead(_868);
        _2117 = const false;
        StorageDead(_855);
        _2118 = const false;
        StorageDead(_844);
        StorageDead(_835);
        StorageDead(_825);
        StorageDead(_790);
        StorageDead(_785);
        StorageDead(_647);
        StorageDead(_523);
        StorageDead(_522);
        StorageDead(_511);
        StorageDead(_477);
        StorageDead(_462);
        _2121 = const false;
        StorageDead(_451);
        _2122 = const false;
        StorageDead(_430);
        StorageDead(_379);
        StorageDead(_378);
        StorageDead(_368);
        StorageDead(_277);
        _2125 = const false;
        StorageDead(_160);
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb1004;
    }

    bb922: {
        StorageDead(_2057);
        StorageDead(_2055);
        StorageDead(_2054);
        StorageDead(_2053);
        StorageDead(_2052);
        StorageDead(_2051);
        StorageDead(_2050);
        StorageDead(_2049);
        StorageDead(_2048);
        StorageDead(_2045);
        StorageDead(_2042);
        StorageDead(_2040);
        StorageDead(_2037);
        StorageDead(_2036);
        StorageDead(_2079);
        goto -> bb924;
    }

    bb923: {
        StorageDead(_2057);
        StorageDead(_2055);
        StorageDead(_2054);
        StorageDead(_2053);
        StorageDead(_2052);
        StorageDead(_2051);
        StorageDead(_2050);
        StorageDead(_2049);
        StorageDead(_2048);
        StorageDead(_2045);
        StorageDead(_2042);
        StorageDead(_2040);
        StorageDead(_2037);
        StorageDead(_2036);
        goto -> bb924;
    }

    bb924: {
        StorageDead(_2069);
        StorageDead(_2047);
        StorageDead(_2046);
        StorageDead(_2044);
        StorageDead(_2043);
        StorageDead(_2041);
        StorageDead(_2039);
        StorageDead(_2038);
        StorageDead(_2035);
        StorageDead(_2034);
        goto -> bb925;
    }

    bb925: {
        StorageDead(_1959);
        StorageDead(_1948);
        StorageDead(_1947);
        goto -> bb926;
    }

    bb926: {
        StorageDead(_1936);
        StorageDead(_1935);
        goto -> bb927;
    }

    bb927: {
        StorageDead(_1902);
        StorageDead(_1874);
        goto -> bb928;
    }

    bb928: {
        StorageDead(_1852);
        StorageDead(_1845);
        StorageDead(_1838);
        goto -> bb929;
    }

    bb929: {
        StorageDead(_1792);
        goto -> bb930;
    }

    bb930: {
        StorageDead(_1747);
        goto -> bb931;
    }

    bb931: {
        StorageDead(_1466);
        StorageDead(_1465);
        StorageDead(_1464);
        StorageDead(_1463);
        StorageDead(_1462);
        goto -> bb940;
    }

    bb932: {
        StorageDead(_1719);
        StorageDead(_1726);
        StorageDead(_1723);
        StorageDead(_1720);
        goto -> bb934;
    }

    bb933: {
        StorageDead(_1653);
        StorageDead(_1652);
        goto -> bb934;
    }

    bb934: {
        StorageDead(_1618);
        StorageDead(_1616);
        goto -> bb935;
    }

    bb935: {
        StorageDead(_1606);
        goto -> bb937;
    }

    bb936: {
        StorageDead(_1540);
        StorageDead(_1539);
        goto -> bb937;
    }

    bb937: {
        StorageDead(_1493);
        StorageDead(_1491);
        StorageDead(_1489);
        goto -> bb938;
    }

    bb938: {
        StorageDead(_1479);
        drop(_1468) -> [return: bb939, unwind: bb1075];
    }

    bb939: {
        StorageDead(_1468);
        StorageDead(_1467);
        goto -> bb940;
    }

    bb940: {
        StorageDead(_1447);
        goto -> bb941;
    }

    bb941: {
        StorageDead(_1432);
        goto -> bb946;
    }

    bb942: {
        StorageDead(_1345);
        StorageDead(_1344);
        goto -> bb943;
    }

    bb943: {
        StorageDead(_1342);
        StorageDead(_1341);
        goto -> bb944;
    }

    bb944: {
        StorageDead(_1339);
        StorageDead(_1358);
        goto -> bb945;
    }

    bb945: {
        StorageDead(_1349);
        StorageDead(_1346);
        StorageDead(_1343);
        StorageDead(_1340);
        goto -> bb946;
    }

    bb946: {
        StorageDead(_1338);
        goto -> bb951;
    }

    bb947: {
        StorageDead(_1301);
        StorageDead(_1300);
        goto -> bb948;
    }

    bb948: {
        StorageDead(_1298);
        StorageDead(_1297);
        goto -> bb949;
    }

    bb949: {
        StorageDead(_1295);
        StorageDead(_1314);
        goto -> bb950;
    }

    bb950: {
        StorageDead(_1305);
        StorageDead(_1302);
        StorageDead(_1299);
        StorageDead(_1296);
        goto -> bb951;
    }

    bb951: {
        StorageDead(_1294);
        goto -> bb954;
    }

    bb952: {
        StorageDead(_1271);
        StorageDead(_1270);
        goto -> bb953;
    }

    bb953: {
        StorageDead(_1275);
        StorageDead(_1272);
        StorageDead(_1269);
        goto -> bb954;
    }

    bb954: {
        StorageDead(_1268);
        goto -> bb962;
    }

    bb955: {
        StorageDead(_1196);
        StorageDead(_1206);
        goto -> bb957;
    }

    bb956: {
        StorageDead(_1124);
        StorageDead(_1134);
        goto -> bb957;
    }

    bb957: {
        StorageDead(_1092);
        StorageDead(_1083);
        StorageDead(_1120);
        StorageDead(_1118);
        goto -> bb961;
    }

    bb958: {
        StorageDead(_1095);
        StorageDead(_1094);
        goto -> bb959;
    }

    bb959: {
        StorageDead(_1100);
        StorageDead(_1096);
        StorageDead(_1093);
        StorageDead(_1092);
        goto -> bb960;
    }

    bb960: {
        StorageDead(_1083);
        goto -> bb961;
    }

    bb961: {
        StorageDead(_1082);
        StorageDead(_1080);
        goto -> bb962;
    }

    bb962: {
        StorageDead(_1057);
        StorageDead(_1050);
        StorageDead(_1045);
        goto -> bb965;
    }

    bb963: {
        StorageDead(_1022);
        StorageDead(_1021);
        goto -> bb964;
    }

    bb964: {
        StorageDead(_1026);
        StorageDead(_1023);
        StorageDead(_1020);
        goto -> bb965;
    }

    bb965: {
        StorageDead(_1019);
        goto -> bb968;
    }

    bb966: {
        StorageDead(_987);
        StorageDead(_986);
        goto -> bb967;
    }

    bb967: {
        StorageDead(_992);
        StorageDead(_988);
        StorageDead(_985);
        goto -> bb968;
    }

    bb968: {
        StorageDead(_984);
        goto -> bb969;
    }

    bb969: {
        StorageDead(_971);
        goto -> bb970;
    }

    bb970: {
        StorageDead(_938);
        goto -> bb972;
    }

    bb971: {
        StorageDead(_916);
        StorageDead(_913);
        goto -> bb972;
    }

    bb972: {
        StorageDead(_912);
        goto -> bb974;
    }

    bb973: {
        StorageDead(_898);
        StorageDead(_895);
        StorageDead(_889);
        StorageDead(_885);
        goto -> bb974;
    }

    bb974: {
        StorageDead(_884);
        goto -> bb975;
    }

    bb975: {
        StorageDead(_868);
        switchInt(_2117) -> [0: bb976, otherwise: bb1059];
    }

    bb976: {
        _2117 = const false;
        StorageDead(_855);
        switchInt(_2118) -> [0: bb977, otherwise: bb1060];
    }

    bb977: {
        _2118 = const false;
        StorageDead(_844);
        goto -> bb978;
    }

    bb978: {
        StorageDead(_835);
        goto -> bb979;
    }

    bb979: {
        StorageDead(_825);
        goto -> bb981;
    }

    bb980: {
        StorageDead(_808);
        drop(_796) -> [return: bb1061, unwind: bb1080];
    }

    bb981: {
        StorageDead(_790);
        StorageDead(_785);
        goto -> bb985;
    }

    bb982: {
        StorageDead(_740);
        StorageDead(_737);
        StorageDead(_733);
        goto -> bb983;
    }

    bb983: {
        StorageDead(_732);
        StorageDead(_726);
        drop(_715) -> [return: bb984, unwind: bb1084];
    }

    bb984: {
        StorageDead(_715);
        StorageDead(_714);
        goto -> bb985;
    }

    bb985: {
        StorageDead(_647);
        goto -> bb991;
    }

    bb986: {
        StorageDead(_592);
        StorageDead(_591);
        goto -> bb987;
    }

    bb987: {
        StorageDead(_561);
        goto -> bb988;
    }

    bb988: {
        StorageDead(_552);
        goto -> bb990;
    }

    bb989: {
        StorageDead(_536);
        StorageDead(_529);
        goto -> bb990;
    }

    bb990: {
        StorageDead(_528);
        StorageDead(_526);
        StorageDead(_524);
        goto -> bb991;
    }

    bb991: {
        StorageDead(_523);
        StorageDead(_522);
        StorageDead(_511);
        goto -> bb992;
    }

    bb992: {
        StorageDead(_477);
        goto -> bb993;
    }

    bb993: {
        StorageDead(_462);
        switchInt(_2121) -> [0: bb994, otherwise: bb1063];
    }

    bb994: {
        _2121 = const false;
        StorageDead(_451);
        switchInt(_2122) -> [0: bb995, otherwise: bb1064];
    }

    bb995: {
        _2122 = const false;
        StorageDead(_430);
        goto -> bb996;
    }

    bb996: {
        StorageDead(_379);
        StorageDead(_378);
        goto -> bb997;
    }

    bb997: {
        StorageDead(_368);
        goto -> bb1001;
    }

    bb998: {
        StorageDead(_329);
        StorageDead(_327);
        goto -> bb999;
    }

    bb999: {
        StorageDead(_304);
        StorageDead(_302);
        StorageDead(_301);
        goto -> bb1001;
    }

    bb1000: {
        StorageDead(_285);
        StorageDead(_278);
        goto -> bb1001;
    }

    bb1001: {
        StorageDead(_277);
        goto -> bb1068;
    }

    bb1002: {
        _2125 = const false;
        StorageDead(_160);
        goto -> bb1003;
    }

    bb1003: {
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb1004;
    }

    bb1004: {
        return;
    }

    bb1005 (cleanup): {
        drop(_2044) -> [return: bb1006, unwind terminate(cleanup)];
    }

    bb1006 (cleanup): {
        drop(_2047) -> [return: bb1007, unwind terminate(cleanup)];
    }

    bb1007 (cleanup): {
        drop(_2088) -> [return: bb1075, unwind terminate(cleanup)];
    }

    bb1008 (cleanup): {
        drop(_2057) -> [return: bb1075, unwind terminate(cleanup)];
    }

    bb1009 (cleanup): {
        drop(_2031) -> [return: bb1075, unwind terminate(cleanup)];
    }

    bb1010 (cleanup): {
        drop(_1928) -> [return: bb1075, unwind terminate(cleanup)];
    }

    bb1011 (cleanup): {
        drop(_1895) -> [return: bb1075, unwind terminate(cleanup)];
    }

    bb1012 (cleanup): {
        drop(_1853) -> [return: bb1075, unwind terminate(cleanup)];
    }

    bb1013 (cleanup): {
        drop(_1815) -> [return: bb1075, unwind terminate(cleanup)];
    }

    bb1014 (cleanup): {
        drop(_1694) -> [return: bb1018, unwind terminate(cleanup)];
    }

    bb1015 (cleanup): {
        drop(_1675) -> [return: bb1018, unwind terminate(cleanup)];
    }

    bb1016 (cleanup): {
        drop(_1581) -> [return: bb1018, unwind terminate(cleanup)];
    }

    bb1017 (cleanup): {
        drop(_1562) -> [return: bb1018, unwind terminate(cleanup)];
    }

    bb1018 (cleanup): {
        drop(_1468) -> [return: bb1075, unwind terminate(cleanup)];
    }

    bb1019 (cleanup): {
        drop(_1414) -> [return: bb1071, unwind terminate(cleanup)];
    }

    bb1020 (cleanup): {
        drop(_1389) -> [return: bb1072, unwind terminate(cleanup)];
    }

    bb1021 (cleanup): {
        drop(_1245) -> [return: bb1075, unwind terminate(cleanup)];
    }

    bb1022 (cleanup): {
        drop(_1226) -> [return: bb1075, unwind terminate(cleanup)];
    }

    bb1023 (cleanup): {
        drop(_1173) -> [return: bb1075, unwind terminate(cleanup)];
    }

    bb1024 (cleanup): {
        drop(_1154) -> [return: bb1075, unwind terminate(cleanup)];
    }

    bb1025 (cleanup): {
        drop(_1064) -> [return: bb1073, unwind terminate(cleanup)];
    }

    bb1026 (cleanup): {
        drop(_796) -> [return: bb1080, unwind terminate(cleanup)];
    }

    bb1027 (cleanup): {
        drop(_765) -> [return: bb1028, unwind terminate(cleanup)];
    }

    bb1028 (cleanup): {
        drop(_715) -> [return: bb1084, unwind terminate(cleanup)];
    }

    bb1029 (cleanup): {
        drop(_701) -> [return: bb1084, unwind terminate(cleanup)];
    }

    bb1030 (cleanup): {
        drop(_682) -> [return: bb1084, unwind terminate(cleanup)];
    }

    bb1031 (cleanup): {
        drop(_654) -> [return: bb1082, unwind terminate(cleanup)];
    }

    bb1032 (cleanup): {
        drop(_612) -> [return: bb1033, unwind terminate(cleanup)];
    }

    bb1033 (cleanup): {
        drop(_615) -> [return: bb1034, unwind terminate(cleanup)];
    }

    bb1034 (cleanup): {
        drop(_632) -> [return: bb1084, unwind terminate(cleanup)];
    }

    bb1035 (cleanup): {
        drop(_625) -> [return: bb1084, unwind terminate(cleanup)];
    }

    bb1036 (cleanup): {
        drop(_410) -> [return: bb1092, unwind terminate(cleanup)];
    }

    bb1037 (cleanup): {
        drop(_312) -> [return: bb1092, unwind terminate(cleanup)];
    }

    bb1038 (cleanup): {
        drop(_260) -> [return: bb1089, unwind terminate(cleanup)];
    }

    bb1039 (cleanup): {
        drop(_235) -> [return: bb1090, unwind terminate(cleanup)];
    }

    bb1040 (cleanup): {
        drop(_205) -> [return: bb1092, unwind terminate(cleanup)];
    }

    bb1041 (cleanup): {
        drop(_186) -> [return: bb1092, unwind terminate(cleanup)];
    }

    bb1042 (cleanup): {
        drop(_140) -> [return: bb1048, unwind terminate(cleanup)];
    }

    bb1043 (cleanup): {
        drop(_121) -> [return: bb1048, unwind terminate(cleanup)];
    }

    bb1044 (cleanup): {
        drop(_96) -> [return: bb1048, unwind terminate(cleanup)];
    }

    bb1045 (cleanup): {
        drop(_77) -> [return: bb1048, unwind terminate(cleanup)];
    }

    bb1046 (cleanup): {
        drop(_52) -> [return: bb1048, unwind terminate(cleanup)];
    }

    bb1047 (cleanup): {
        drop(_33) -> [return: bb1048, unwind terminate(cleanup)];
    }

    bb1048 (cleanup): {
        resume;
    }

    bb1049: {
        _2130 = discriminant(_236);
        StorageDead(_240);
        _2124 = const false;
        StorageDead(_236);
        StorageDead(_235);
        StorageDead(_233);
        StorageDead(_228);
        StorageDead(_227);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        _255 = &mut (*_7);
        StorageLive(_256);
        _256 = &(*_8);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        _263 = &(*_10);
        StorageLive(_264);
        StorageLive(_265);
        _265 = &_1;
        _264 = &(*_265);
        _262 = PerpMarketMap::<'_>::get_ref_mut(move _263, move _264) -> [return: bb97, unwind: bb1092];
    }

    bb1050: {
        _2132 = discriminant(_261);
        StorageDead(_265);
        _2123 = const false;
        StorageDead(_261);
        StorageDead(_260);
        StorageDead(_258);
        StorageDead(_253);
        StorageDead(_252);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        _280 = &(*_4);
        StorageLive(_281);
        _281 = &(*_10);
        StorageLive(_282);
        _282 = &(*_11);
        StorageLive(_283);
        _283 = &mut (*_12);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        _288 = _16;
        _287 = MarginContext::liquidation(move _288) -> [return: bb108, unwind: bb1092];
    }

    bb1051: {
        _2142 = discriminant(_655);
        StorageDead(_659);
        _2120 = const false;
        StorageDead(_655);
        StorageDead(_654);
        StorageDead(_652);
        StorageDead(_648);
        StorageLive(_670);
        StorageLive(_671);
        StorageLive(_672);
        StorageLive(_673);
        StorageLive(_674);
        _674 = _647;
        _673 = Ne(move _674, const 0_u64);
        switchInt(move _673) -> [0: bb294, otherwise: bb293];
    }

    bb1052: {
        _2148 = discriminant(_797);
        StorageDead(_801);
        _2119 = const false;
        StorageDead(_797);
        StorageDead(_796);
        StorageDead(_794);
        StorageDead(_791);
        StorageLive(_825);
        StorageLive(_826);
        StorageLive(_827);
        StorageLive(_828);
        _828 = _790;
        StorageLive(_829);
        _829 = _16;
        _827 = <u32 as SafeMath>::safe_add(move _828, move _829) -> [return: bb366, unwind: bb1084];
    }

    bb1053: {
        _2158 = discriminant(_1065);
        StorageDead(_1069);
        _2116 = const false;
        StorageDead(_1065);
        StorageDead(_1064);
        StorageDead(_1062);
        StorageDead(_1058);
        StorageLive(_1080);
        _1081 = discriminant(_3);
        switchInt(move _1081) -> [1: bb492, otherwise: bb578];
    }

    bb1054: {
        _2160 = discriminant(_1390);
        StorageDead(_1394);
        _2115 = const false;
        StorageDead(_1390);
        StorageDead(_1389);
        StorageDead(_1387);
        StorageDead(_1383);
        StorageDead(_1382);
        StorageLive(_1407);
        StorageLive(_1408);
        StorageLive(_1409);
        StorageLive(_1410);
        _1410 = &mut (*_9);
        StorageLive(_1411);
        StorageLive(_1412);
        StorageLive(_1413);
        StorageLive(_1414);
        StorageLive(_1415);
        StorageLive(_1416);
        StorageLive(_1417);
        _1417 = &(*_10);
        StorageLive(_1418);
        StorageLive(_1419);
        _1419 = &_1;
        _1418 = &(*_1419);
        _1416 = PerpMarketMap::<'_>::get_ref(move _1417, move _1418) -> [return: bb658, unwind: bb1075];
    }

    bb1055: {
        _2162 = discriminant(_1415);
        StorageDead(_1419);
        _2114 = const false;
        StorageDead(_1415);
        StorageDead(_1414);
        StorageDead(_1412);
        StorageDead(_1408);
        StorageDead(_1407);
        StorageLive(_1432);
        StorageLive(_1433);
        StorageLive(_1434);
        StorageLive(_1435);
        _1435 = _1057;
        StorageLive(_1436);
        _1436 = _1268;
        StorageLive(_1437);
        StorageLive(_1438);
        StorageLive(_1439);
        _1439 = _379;
        _1440 = Len(((*_4).4: [state::user::PerpPosition; 8]));
        _1441 = Lt(_1439, _1440);
        assert(move _1441, "index out of bounds: the length is {} but the index is {}", move _1440, _1439) -> [success: bb669, unwind: bb1075];
    }

    bb1056: {
        _2172 = discriminant(_1415);
        StorageDead(_1419);
        _2114 = const false;
        StorageDead(_1415);
        StorageDead(_1414);
        StorageDead(_1412);
        StorageDead(_1408);
        StorageDead(_1407);
        goto -> bb946;
    }

    bb1057: {
        _2174 = discriminant(_1390);
        StorageDead(_1394);
        _2115 = const false;
        StorageDead(_1390);
        StorageDead(_1389);
        StorageDead(_1387);
        StorageDead(_1383);
        StorageDead(_1382);
        goto -> bb946;
    }

    bb1058: {
        _2176 = discriminant(_1065);
        StorageDead(_1069);
        _2116 = const false;
        StorageDead(_1065);
        StorageDead(_1064);
        StorageDead(_1062);
        StorageDead(_1058);
        goto -> bb962;
    }

    bb1059: {
        drop(_855) -> [return: bb976, unwind: bb1078];
    }

    bb1060: {
        drop(_844) -> [return: bb977, unwind: bb1084];
    }

    bb1061: {
        _2178 = discriminant(_797);
        StorageDead(_801);
        _2119 = const false;
        StorageDead(_797);
        StorageDead(_796);
        StorageDead(_794);
        StorageDead(_791);
        goto -> bb981;
    }

    bb1062: {
        _2180 = discriminant(_655);
        StorageDead(_659);
        _2120 = const false;
        StorageDead(_655);
        StorageDead(_654);
        StorageDead(_652);
        StorageDead(_648);
        goto -> bb985;
    }

    bb1063: {
        drop(_451) -> [return: bb994, unwind: bb1087];
    }

    bb1064: {
        drop(_430) -> [return: bb995, unwind: bb1092];
    }

    bb1065: {
        _2182 = discriminant(_261);
        StorageDead(_265);
        _2123 = const false;
        StorageDead(_261);
        StorageDead(_260);
        StorageDead(_258);
        StorageDead(_253);
        StorageDead(_252);
        goto -> bb1068;
    }

    bb1066: {
        _2184 = discriminant(_236);
        StorageDead(_240);
        _2124 = const false;
        StorageDead(_236);
        StorageDead(_235);
        StorageDead(_233);
        StorageDead(_228);
        StorageDead(_227);
        goto -> bb1068;
    }

    bb1067: {
        drop(_160) -> [return: bb1002, unwind: bb1048];
    }

    bb1068: {
        switchInt(_2125) -> [0: bb1002, otherwise: bb1067];
    }

    bb1069 (cleanup): {
        _2186 = discriminant(_1854);
        goto -> bb1075;
    }

    bb1070 (cleanup): {
        _2187 = discriminant(_1469);
        goto -> bb1075;
    }

    bb1071 (cleanup): {
        _2188 = discriminant(_1415);
        goto -> bb1075;
    }

    bb1072 (cleanup): {
        _2189 = discriminant(_1390);
        goto -> bb1075;
    }

    bb1073 (cleanup): {
        _2190 = discriminant(_1065);
        goto -> bb1075;
    }

    bb1074 (cleanup): {
        drop(_855) -> [return: bb1078, unwind terminate(cleanup)];
    }

    bb1075 (cleanup): {
        switchInt(_2117) -> [0: bb1078, otherwise: bb1074];
    }

    bb1076 (cleanup): {
        _2191 = discriminant(_856);
        goto -> bb1078;
    }

    bb1077 (cleanup): {
        drop(_844) -> [return: bb1084, unwind terminate(cleanup)];
    }

    bb1078 (cleanup): {
        switchInt(_2118) -> [0: bb1084, otherwise: bb1077];
    }

    bb1079 (cleanup): {
        _2192 = discriminant(_845);
        goto -> bb1084;
    }

    bb1080 (cleanup): {
        _2193 = discriminant(_797);
        goto -> bb1084;
    }

    bb1081 (cleanup): {
        _2194 = discriminant(_716);
        goto -> bb1084;
    }

    bb1082 (cleanup): {
        _2195 = discriminant(_655);
        goto -> bb1084;
    }

    bb1083 (cleanup): {
        drop(_451) -> [return: bb1087, unwind terminate(cleanup)];
    }

    bb1084 (cleanup): {
        switchInt(_2121) -> [0: bb1087, otherwise: bb1083];
    }

    bb1085 (cleanup): {
        _2196 = discriminant(_452);
        goto -> bb1087;
    }

    bb1086 (cleanup): {
        drop(_430) -> [return: bb1092, unwind terminate(cleanup)];
    }

    bb1087 (cleanup): {
        switchInt(_2122) -> [0: bb1092, otherwise: bb1086];
    }

    bb1088 (cleanup): {
        _2197 = discriminant(_431);
        goto -> bb1092;
    }

    bb1089 (cleanup): {
        _2198 = discriminant(_261);
        goto -> bb1092;
    }

    bb1090 (cleanup): {
        _2199 = discriminant(_236);
        goto -> bb1092;
    }

    bb1091 (cleanup): {
        drop(_160) -> [return: bb1048, unwind terminate(cleanup)];
    }

    bb1092 (cleanup): {
        switchInt(_2125) -> [0: bb1048, otherwise: bb1091];
    }

    bb1093 (cleanup): {
        _2200 = discriminant(_161);
        goto -> bb1048;
    }
}
