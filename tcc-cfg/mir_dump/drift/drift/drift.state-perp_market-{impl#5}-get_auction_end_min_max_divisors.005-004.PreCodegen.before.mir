// MIR for `state::perp_market::<impl at programs/drift/src/state/perp_market.rs:298:1: 298:16>::get_auction_end_min_max_divisors` before PreCodegen

fn state::perp_market::<impl at programs/drift/src/state/perp_market.rs:298:1: 298:16>::get_auction_end_min_max_divisors(_1: PerpMarket) -> std::result::Result<(u64, u64), error::ErrorCode> {
    debug self => _1;
    let mut _0: std::result::Result<(u64, u64), error::ErrorCode>;
    let mut _2: (u64, u64);
    let mut _3: isize;

    bb0: {
        StorageLive(_2);
        _3 = discriminant((_1.24: state::perp_market::ContractTier));
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb1, otherwise: bb2];
    }

    bb1: {
        _2 = (const 50_u64, const 5_u64);
        goto -> bb8;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _2 = (const 1000_u64, const 50_u64);
        goto -> bb8;
    }

    bb4: {
        _2 = (const 1000_u64, const 20_u64);
        goto -> bb8;
    }

    bb5: {
        _2 = (const 500_u64, const 20_u64);
        goto -> bb8;
    }

    bb6: {
        _2 = (const 100_u64, const 10_u64);
        goto -> bb8;
    }

    bb7: {
        _2 = (const 50_u64, const 5_u64);
        goto -> bb8;
    }

    bb8: {
        _0 = std::result::Result::<(u64, u64), error::ErrorCode>::Ok(move _2);
        StorageDead(_2);
        return;
    }
}
