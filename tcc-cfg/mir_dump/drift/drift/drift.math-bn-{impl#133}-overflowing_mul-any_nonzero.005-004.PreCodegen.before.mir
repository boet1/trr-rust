// MIR for `bn::<impl at /home/bitnami/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uint-0.9.1/src/uint.rs:587:3: 587:13>::overflowing_mul::any_nonzero` before PreCodegen

fn bn::<impl at /home/bitnami/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uint-0.9.1/src/uint.rs:587:3: 587:13>::overflowing_mul::any_nonzero(_1: &[u64; 3]) -> bool {
    debug arr => _1;
    let mut _0: bool;
    let _2: ();
    let _3: ();
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: u64;
    let _7: usize;
    let mut _8: usize;
    let mut _9: bool;
    let mut _10: !;
    let _11: ();
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: u64;
    let _15: usize;
    let mut _16: usize;
    let mut _17: bool;
    let mut _18: !;
    let _19: ();
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: u64;
    let _23: usize;
    let mut _24: usize;
    let mut _25: bool;
    let mut _26: !;
    scope 1 {
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = Ge(const _, const 0_usize);
        switchInt(move _4) -> [0: bb5, otherwise: bb1];
    }

    bb1: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = const _;
        _8 = Len((*_1));
        _9 = Lt(_7, _8);
        assert(move _9, "index out of bounds: the length is {} but the index is {}", move _8, _7) -> [success: bb2, unwind continue];
    }

    bb2: {
        _6 = (*_1)[_7];
        _5 = Ne(move _6, const 0_u64);
        switchInt(move _5) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageDead(_7);
        StorageDead(_6);
        _0 = const true;
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb19;
    }

    bb4: {
        StorageDead(_7);
        StorageDead(_6);
        _3 = const ();
        StorageDead(_5);
        goto -> bb6;
    }

    bb5: {
        _3 = const ();
        goto -> bb6;
    }

    bb6: {
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_11);
        StorageLive(_12);
        _12 = Ge(const _, const 0_usize);
        switchInt(move _12) -> [0: bb11, otherwise: bb7];
    }

    bb7: {
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = const _;
        _16 = Len((*_1));
        _17 = Lt(_15, _16);
        assert(move _17, "index out of bounds: the length is {} but the index is {}", move _16, _15) -> [success: bb8, unwind continue];
    }

    bb8: {
        _14 = (*_1)[_15];
        _13 = Ne(move _14, const 0_u64);
        switchInt(move _13) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        StorageDead(_15);
        StorageDead(_14);
        _0 = const true;
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb19;
    }

    bb10: {
        StorageDead(_15);
        StorageDead(_14);
        _11 = const ();
        StorageDead(_13);
        goto -> bb12;
    }

    bb11: {
        _11 = const ();
        goto -> bb12;
    }

    bb12: {
        StorageDead(_12);
        StorageDead(_11);
        StorageLive(_19);
        StorageLive(_20);
        _20 = Ge(const _, const 0_usize);
        switchInt(move _20) -> [0: bb17, otherwise: bb13];
    }

    bb13: {
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = const _;
        _24 = Len((*_1));
        _25 = Lt(_23, _24);
        assert(move _25, "index out of bounds: the length is {} but the index is {}", move _24, _23) -> [success: bb14, unwind continue];
    }

    bb14: {
        _22 = (*_1)[_23];
        _21 = Ne(move _22, const 0_u64);
        switchInt(move _21) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        StorageDead(_23);
        StorageDead(_22);
        _0 = const true;
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        goto -> bb19;
    }

    bb16: {
        StorageDead(_23);
        StorageDead(_22);
        _19 = const ();
        StorageDead(_21);
        goto -> bb18;
    }

    bb17: {
        _19 = const ();
        goto -> bb18;
    }

    bb18: {
        StorageDead(_20);
        StorageDead(_19);
        _2 = const ();
        StorageDead(_2);
        _0 = const false;
        goto -> bb20;
    }

    bb19: {
        StorageDead(_2);
        goto -> bb20;
    }

    bb20: {
        return;
    }
}
