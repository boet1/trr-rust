// MIR for `fulfill_perp_order_with_match` before PreCodegen

fn fulfill_perp_order_with_match(_1: &mut PerpMarket, _2: &mut User, _3: &mut UserStats, _4: usize, _5: &anchor_lang::prelude::Pubkey, _6: &mut User, _7: &mut Option<&mut UserStats>, _8: usize, _9: &anchor_lang::prelude::Pubkey, _10: &mut Option<&mut User>, _11: &mut Option<&mut UserStats>, _12: &anchor_lang::prelude::Pubkey, _13: &mut Option<&mut User>, _14: &mut Option<&mut UserStats>, _15: u64, _16: Option<i64>, _17: Option<u64>, _18: u64, _19: i64, _20: u64, _21: &state::state::FeeStructure, _22: &mut OracleMap<'_>, _23: bool) -> std::result::Result<(u64, u64, u64), error::ErrorCode> {
    debug market => _1;
    debug taker => _2;
    debug taker_stats => _3;
    debug taker_order_index => _4;
    debug taker_key => _5;
    debug maker => _6;
    debug maker_stats => _7;
    debug maker_order_index => _8;
    debug maker_key => _9;
    debug filler => _10;
    debug filler_stats => _11;
    debug filler_key => _12;
    debug referrer => _13;
    debug referrer_stats => _14;
    debug reserve_price_before => _15;
    debug valid_oracle_price => _16;
    debug taker_limit_price => _17;
    debug maker_price => _18;
    debug now => _19;
    debug slot => _20;
    debug fee_structure => _21;
    debug oracle_map => _22;
    debug is_liquidation => _23;
    let mut _0: std::result::Result<(u64, u64, u64), error::ErrorCode>;
    let _24: ();
    let mut _25: bool;
    let mut _26: &state::user::Order;
    let _27: &state::user::Order;
    let _28: usize;
    let mut _29: usize;
    let mut _30: bool;
    let mut _31: &state::user::Order;
    let _32: &state::user::Order;
    let _33: usize;
    let mut _34: usize;
    let mut _35: bool;
    let mut _36: !;
    let mut _37: (u64, u64, u64);
    let _38: i64;
    let mut _39: &state::oracle::OraclePriceData;
    let mut _40: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _41: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _42: &mut state::oracle_map::OracleMap<'_>;
    let mut _43: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _44: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _45: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _46: &state::perp_market::PerpMarket;
    let mut _47: isize;
    let _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _49: !;
    let mut _50: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _51: &state::oracle::OraclePriceData;
    let _53: usize;
    let mut _54: usize;
    let mut _55: bool;
    let mut _57: isize;
    let mut _60: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _61: std::result::Result<u64, error::ErrorCode>;
    let mut _62: &state::perp_market::AMM;
    let _63: &state::perp_market::AMM;
    let mut _64: &controller::position::PositionDirection;
    let _65: &controller::position::PositionDirection;
    let mut _66: isize;
    let mut _68: !;
    let mut _69: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _71: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _72: std::result::Result<u64, error::ErrorCode>;
    let mut _73: state::perp_market::AMM;
    let mut _74: &controller::position::PositionDirection;
    let _75: &controller::position::PositionDirection;
    let mut _76: u64;
    let mut _77: i64;
    let mut _78: i64;
    let mut _79: state::user::Order;
    let _80: usize;
    let mut _81: usize;
    let mut _82: bool;
    let mut _83: i64;
    let mut _84: isize;
    let mut _86: !;
    let mut _87: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _90: &state::user::PerpPosition;
    let mut _91: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::user::PerpPosition>;
    let mut _92: std::result::Result<&state::user::PerpPosition, error::ErrorCode>;
    let mut _93: &state::user::User;
    let mut _94: u16;
    let mut _95: isize;
    let mut _97: !;
    let mut _98: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _101: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _102: std::result::Result<u64, error::ErrorCode>;
    let mut _103: &state::user::Order;
    let _104: usize;
    let mut _105: usize;
    let mut _106: bool;
    let mut _107: std::option::Option<i64>;
    let mut _108: i64;
    let mut _109: isize;
    let mut _111: !;
    let mut _112: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _115: usize;
    let mut _116: usize;
    let mut _117: bool;
    let mut _120: (i64, std::option::Option<(u64, u64)>);
    let mut _122: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::user::PerpPosition>;
    let mut _123: std::result::Result<&state::user::PerpPosition, error::ErrorCode>;
    let mut _124: &state::user::User;
    let mut _125: u16;
    let mut _126: isize;
    let mut _128: !;
    let mut _129: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _131: i64;
    let mut _132: std::option::Option<(u64, u64)>;
    let mut _133: &state::user::PerpPosition;
    let mut _134: controller::position::PositionDirection;
    let mut _136: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _137: std::result::Result<u64, error::ErrorCode>;
    let mut _138: &state::user::Order;
    let _139: usize;
    let mut _140: usize;
    let mut _141: bool;
    let mut _142: std::option::Option<i64>;
    let mut _143: i64;
    let mut _144: isize;
    let mut _146: !;
    let mut _147: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _150: controller::position::PositionDirection;
    let mut _151: u64;
    let mut _152: u64;
    let _153: ();
    let mut _154: bool;
    let mut _155: !;
    let _156: ();
    let mut _157: &str;
    let _158: &str;
    let mut _159: &std::string::String;
    let _160: &std::string::String;
    let _161: std::string::String;
    let mut _163: std::fmt::Arguments<'_>;
    let mut _164: &[&str];
    let mut _165: &[&str; 2];
    let _166: &[&str; 2];
    let _167: [&str; 2];
    let mut _168: &[core::fmt::rt::Argument<'_>];
    let mut _169: &[core::fmt::rt::Argument<'_>; 2];
    let _170: &[core::fmt::rt::Argument<'_>; 2];
    let _171: [core::fmt::rt::Argument<'_>; 2];
    let mut _172: core::fmt::rt::Argument<'_>;
    let mut _173: &u64;
    let _174: &u64;
    let mut _175: core::fmt::rt::Argument<'_>;
    let mut _176: &u64;
    let _177: &u64;
    let mut _178: (u64, u64, u64);
    let mut _180: (u64, u64);
    let mut _181: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u64, u64)>;
    let mut _182: std::result::Result<(u64, u64), error::ErrorCode>;
    let mut _183: u64;
    let mut _184: u64;
    let mut _185: u64;
    let mut _186: controller::position::PositionDirection;
    let mut _187: isize;
    let mut _189: !;
    let mut _190: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _192: ();
    let mut _193: bool;
    let mut _194: u64;
    let mut _195: !;
    let mut _196: (u64, u64, u64);
    let mut _198: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::option::Option<i64>>;
    let mut _199: std::result::Result<std::option::Option<i64>, error::ErrorCode>;
    let mut _200: state::perp_market::PerpMarket;
    let mut _201: isize;
    let mut _203: !;
    let mut _204: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _206: u64;
    let mut _207: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _208: std::result::Result<u64, error::ErrorCode>;
    let mut _209: &mut state::perp_market::AMM;
    let mut _210: &mut state::perp_market::AMM;
    let mut _211: i64;
    let mut _212: std::option::Option<u64>;
    let mut _213: u64;
    let mut _214: std::option::Option<controller::position::PositionDirection>;
    let mut _215: controller::position::PositionDirection;
    let mut _216: std::option::Option<i64>;
    let mut _217: isize;
    let mut _219: !;
    let mut _220: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _225: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _226: std::result::Result<u64, error::ErrorCode>;
    let mut _227: &mut state::perp_market::PerpMarket;
    let mut _228: controller::position::PositionDirection;
    let mut _229: u64;
    let mut _230: std::option::Option<i64>;
    let mut _231: u64;
    let mut _232: u64;
    let mut _233: u64;
    let mut _234: bool;
    let mut _235: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _236: std::result::Result<bool, error::ErrorCode>;
    let mut _237: state::user::Order;
    let _238: usize;
    let mut _239: usize;
    let mut _240: bool;
    let mut _241: u64;
    let mut _242: isize;
    let mut _244: !;
    let mut _245: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _247: isize;
    let mut _249: !;
    let mut _250: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _252: ();
    let mut _253: bool;
    let mut _254: u64;
    let mut _257: (u64, u64);
    let mut _258: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u64, u64)>;
    let mut _259: std::result::Result<(u64, u64), error::ErrorCode>;
    let mut _260: &mut state::user::User;
    let mut _261: &mut state::user::UserStats;
    let mut _262: usize;
    let mut _263: &mut state::perp_market::PerpMarket;
    let mut _264: &mut state::oracle_map::OracleMap<'_>;
    let mut _265: u64;
    let mut _266: i64;
    let mut _267: u64;
    let mut _268: &anchor_lang::prelude::Pubkey;
    let mut _269: &anchor_lang::prelude::Pubkey;
    let mut _270: &mut std::option::Option<&mut state::user::User>;
    let mut _271: &mut std::option::Option<&mut state::user::UserStats>;
    let mut _272: &mut std::option::Option<&mut state::user::User>;
    let mut _273: &mut std::option::Option<&mut state::user::User>;
    let mut _274: std::option::Option<&mut state::user::User>;
    let mut _275: &mut std::option::Option<&mut state::user::UserStats>;
    let mut _276: &mut std::option::Option<&mut state::user::UserStats>;
    let mut _277: std::option::Option<&mut state::user::UserStats>;
    let mut _278: &mut std::option::Option<&mut state::user::User>;
    let mut _279: &mut std::option::Option<&mut state::user::User>;
    let mut _280: std::option::Option<&mut state::user::User>;
    let mut _281: &mut std::option::Option<&mut state::user::UserStats>;
    let mut _282: &mut std::option::Option<&mut state::user::UserStats>;
    let mut _283: std::option::Option<&mut state::user::UserStats>;
    let mut _284: &state::state::FeeStructure;
    let mut _285: std::option::Option<u64>;
    let mut _286: std::option::Option<u64>;
    let mut _287: u64;
    let mut _288: std::option::Option<u64>;
    let mut _289: u64;
    let mut _290: bool;
    let mut _291: isize;
    let mut _293: !;
    let mut _294: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _296: u64;
    let mut _297: u64;
    let mut _300: (i64, std::option::Option<(u64, u64)>);
    let mut _302: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::user::PerpPosition>;
    let mut _303: std::result::Result<&state::user::PerpPosition, error::ErrorCode>;
    let mut _304: &state::user::User;
    let mut _305: u16;
    let mut _306: isize;
    let mut _308: !;
    let mut _309: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _311: i64;
    let mut _312: std::option::Option<(u64, u64)>;
    let mut _313: &state::user::PerpPosition;
    let mut _314: controller::position::PositionDirection;
    let mut _316: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _317: std::result::Result<u64, error::ErrorCode>;
    let mut _318: &state::user::Order;
    let _319: usize;
    let mut _320: usize;
    let mut _321: bool;
    let mut _322: std::option::Option<i64>;
    let mut _323: i64;
    let mut _324: isize;
    let mut _326: !;
    let mut _327: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _331: (u64, u64);
    let mut _332: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u64, u64)>;
    let mut _333: std::result::Result<(u64, u64), error::ErrorCode>;
    let mut _334: u64;
    let mut _335: u64;
    let mut _336: u64;
    let mut _337: controller::position::PositionDirection;
    let mut _338: isize;
    let mut _340: !;
    let mut _341: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _343: ();
    let mut _344: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _345: std::result::Result<(), error::ErrorCode>;
    let mut _346: u64;
    let mut _347: u64;
    let mut _348: controller::position::PositionDirection;
    let mut _349: u64;
    let mut _350: isize;
    let mut _352: !;
    let mut _353: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _355: ();
    let mut _356: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _357: std::result::Result<(), error::ErrorCode>;
    let mut _358: u64;
    let mut _359: u64;
    let mut _360: controller::position::PositionDirection;
    let mut _361: u64;
    let mut _362: isize;
    let mut _364: !;
    let mut _365: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _367: u64;
    let mut _368: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _369: std::result::Result<u64, error::ErrorCode>;
    let mut _370: u64;
    let mut _371: u64;
    let mut _372: isize;
    let mut _374: !;
    let mut _375: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _377: u64;
    let mut _378: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _379: std::result::Result<u64, error::ErrorCode>;
    let mut _380: u64;
    let mut _381: u64;
    let mut _382: isize;
    let mut _384: !;
    let mut _385: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _388: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, usize>;
    let mut _389: std::result::Result<usize, error::ErrorCode>;
    let mut _390: &[state::user::PerpPosition; 8];
    let _391: &[state::user::PerpPosition; 8];
    let mut _392: u16;
    let _393: usize;
    let mut _394: usize;
    let mut _395: bool;
    let mut _396: isize;
    let mut _398: !;
    let mut _399: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _402: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, controller::position::PositionDelta>;
    let mut _403: std::result::Result<controller::position::PositionDelta, error::ErrorCode>;
    let mut _404: u64;
    let mut _405: u64;
    let mut _406: controller::position::PositionDirection;
    let _407: usize;
    let mut _408: usize;
    let mut _409: bool;
    let mut _410: isize;
    let mut _412: !;
    let mut _413: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _415: i64;
    let mut _416: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _417: std::result::Result<i64, error::ErrorCode>;
    let mut _418: &mut state::user::PerpPosition;
    let mut _419: &mut state::user::PerpPosition;
    let _420: usize;
    let mut _421: usize;
    let mut _422: bool;
    let mut _423: &mut state::perp_market::PerpMarket;
    let mut _424: &controller::position::PositionDelta;
    let _425: &controller::position::PositionDelta;
    let mut _426: isize;
    let mut _428: !;
    let mut _429: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _431: ();
    let mut _432: isize;
    let _434: ();
    let mut _435: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _436: std::result::Result<(), error::ErrorCode>;
    let mut _437: &mut state::user::UserStats;
    let mut _438: u8;
    let mut _439: u64;
    let mut _440: i64;
    let mut _441: isize;
    let mut _443: !;
    let mut _444: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _446: ();
    let mut _447: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _448: std::result::Result<(), error::ErrorCode>;
    let mut _449: &mut state::user::UserStats;
    let mut _450: u8;
    let mut _451: u64;
    let mut _452: i64;
    let mut _453: isize;
    let mut _455: !;
    let mut _456: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _459: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, usize>;
    let mut _460: std::result::Result<usize, error::ErrorCode>;
    let mut _461: &[state::user::PerpPosition; 8];
    let _462: &[state::user::PerpPosition; 8];
    let mut _463: u16;
    let _464: usize;
    let mut _465: usize;
    let mut _466: bool;
    let mut _467: isize;
    let mut _469: !;
    let mut _470: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _473: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, controller::position::PositionDelta>;
    let mut _474: std::result::Result<controller::position::PositionDelta, error::ErrorCode>;
    let mut _475: u64;
    let mut _476: u64;
    let mut _477: controller::position::PositionDirection;
    let _478: usize;
    let mut _479: usize;
    let mut _480: bool;
    let mut _481: isize;
    let mut _483: !;
    let mut _484: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _486: i64;
    let mut _487: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _488: std::result::Result<i64, error::ErrorCode>;
    let mut _489: &mut state::user::PerpPosition;
    let mut _490: &mut state::user::PerpPosition;
    let _491: usize;
    let mut _492: usize;
    let mut _493: bool;
    let mut _494: &mut state::perp_market::PerpMarket;
    let mut _495: &controller::position::PositionDelta;
    let _496: &controller::position::PositionDelta;
    let mut _497: isize;
    let mut _499: !;
    let mut _500: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _502: ();
    let mut _503: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _504: std::result::Result<(), error::ErrorCode>;
    let mut _505: &mut state::user::UserStats;
    let mut _506: u8;
    let mut _507: u64;
    let mut _508: i64;
    let mut _509: isize;
    let mut _511: !;
    let mut _512: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _515: &mut std::option::Option<&mut state::user::User>;
    let mut _516: u16;
    let mut _518: &mut std::option::Option<&mut state::user::User>;
    let mut _519: u16;
    let mut _521: bool;
    let mut _522: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _523: std::result::Result<u64, error::ErrorCode>;
    let mut _524: u64;
    let mut _525: controller::position::PositionDirection;
    let mut _526: i64;
    let mut _527: isize;
    let mut _529: !;
    let mut _530: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _538: math::fees::FillFees;
    let mut _539: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::fees::FillFees>;
    let mut _540: std::result::Result<math::fees::FillFees, error::ErrorCode>;
    let mut _541: &state::user::UserStats;
    let mut _542: &std::option::Option<&mut state::user::UserStats>;
    let mut _543: u64;
    let mut _544: &state::state::FeeStructure;
    let mut _545: u64;
    let _546: usize;
    let mut _547: usize;
    let mut _548: bool;
    let mut _549: u64;
    let mut _550: u64;
    let mut _551: bool;
    let mut _552: &std::option::Option<&mut state::user::UserStats>;
    let mut _553: &state::user::MarketType;
    let _554: &state::user::MarketType;
    let _555: state::user::MarketType;
    let mut _556: i16;
    let mut _557: bool;
    let mut _558: &state::user::User;
    let mut _559: math::margin::MarginRequirementType;
    let mut _560: isize;
    let mut _562: !;
    let mut _563: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _565: i128;
    let mut _566: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _567: std::result::Result<i128, error::ErrorCode>;
    let mut _568: i128;
    let mut _569: i128;
    let mut _570: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _571: std::result::Result<i128, error::ErrorCode>;
    let mut _572: i64;
    let mut _573: isize;
    let mut _575: !;
    let mut _576: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _578: isize;
    let mut _580: !;
    let mut _581: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _583: u128;
    let mut _584: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _585: std::result::Result<u128, error::ErrorCode>;
    let mut _586: u128;
    let mut _587: u128;
    let mut _588: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _589: std::result::Result<u128, error::ErrorCode>;
    let mut _590: i64;
    let mut _591: isize;
    let mut _593: !;
    let mut _594: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _596: isize;
    let mut _598: !;
    let mut _599: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _601: i128;
    let mut _602: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _603: std::result::Result<i128, error::ErrorCode>;
    let mut _604: i128;
    let mut _605: i128;
    let mut _606: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _607: std::result::Result<i128, error::ErrorCode>;
    let mut _608: i64;
    let mut _609: isize;
    let mut _611: !;
    let mut _612: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _614: isize;
    let mut _616: !;
    let mut _617: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _619: i64;
    let mut _620: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _621: std::result::Result<i64, error::ErrorCode>;
    let mut _622: i64;
    let mut _623: i64;
    let mut _624: isize;
    let mut _626: !;
    let mut _627: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _629: ();
    let mut _630: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _631: std::result::Result<(), error::ErrorCode>;
    let mut _632: &mut state::user::PerpPosition;
    let mut _633: &mut state::user::PerpPosition;
    let _634: usize;
    let mut _635: usize;
    let mut _636: bool;
    let mut _637: &mut state::perp_market::PerpMarket;
    let mut _638: i64;
    let mut _639: i64;
    let mut _640: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _641: std::result::Result<i64, error::ErrorCode>;
    let mut _642: u64;
    let mut _643: isize;
    let mut _645: !;
    let mut _646: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _648: bool;
    let mut _649: isize;
    let mut _651: !;
    let mut _652: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _654: ();
    let mut _655: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _656: std::result::Result<(), error::ErrorCode>;
    let mut _657: &mut state::user::UserStats;
    let mut _658: u64;
    let mut _659: isize;
    let mut _661: !;
    let mut _662: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _664: ();
    let mut _665: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _666: std::result::Result<(), error::ErrorCode>;
    let mut _667: &mut state::user::UserStats;
    let mut _668: u64;
    let mut _669: isize;
    let mut _671: !;
    let mut _672: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _674: ();
    let mut _675: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _676: std::result::Result<(), error::ErrorCode>;
    let mut _677: &mut state::user::PerpPosition;
    let mut _678: &mut state::user::PerpPosition;
    let _679: usize;
    let mut _680: usize;
    let mut _681: bool;
    let mut _682: &mut state::perp_market::PerpMarket;
    let mut _683: i64;
    let mut _684: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _685: std::result::Result<i64, error::ErrorCode>;
    let mut _686: u64;
    let mut _687: isize;
    let mut _689: !;
    let mut _690: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _692: isize;
    let mut _694: !;
    let mut _695: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _697: ();
    let mut _698: isize;
    let _700: ();
    let mut _701: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _702: std::result::Result<(), error::ErrorCode>;
    let mut _703: &mut state::user::UserStats;
    let mut _704: u64;
    let mut _705: isize;
    let mut _707: !;
    let mut _708: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _710: ();
    let mut _711: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _712: std::result::Result<(), error::ErrorCode>;
    let mut _713: &mut state::user::UserStats;
    let mut _714: u64;
    let mut _715: isize;
    let mut _717: !;
    let mut _718: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _720: ();
    let mut _721: isize;
    let _723: ();
    let mut _724: bool;
    let mut _725: u64;
    let mut _727: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, usize>;
    let mut _728: std::result::Result<usize, error::ErrorCode>;
    let mut _729: std::result::Result<usize, error::ErrorCode>;
    let mut _730: &[state::user::PerpPosition; 8];
    let _731: &[state::user::PerpPosition; 8];
    let mut _732: u16;
    let mut _733: {closure@programs/drift/src/controller/orders.rs:2773:89: 2773:92};
    let mut _734: &mut &mut &mut state::user::User;
    let mut _735: &&mut state::perp_market::PerpMarket;
    let mut _736: isize;
    let mut _738: !;
    let mut _739: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _741: ();
    let mut _742: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _743: std::result::Result<(), error::ErrorCode>;
    let mut _744: &mut state::user::PerpPosition;
    let mut _745: &mut state::user::PerpPosition;
    let _746: usize;
    let mut _747: usize;
    let mut _748: bool;
    let mut _749: &mut state::perp_market::PerpMarket;
    let mut _750: i64;
    let mut _751: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _752: std::result::Result<i64, error::ErrorCode>;
    let mut _753: u64;
    let mut _754: isize;
    let mut _756: !;
    let mut _757: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _759: isize;
    let mut _761: !;
    let mut _762: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _764: ();
    let mut _765: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _766: std::result::Result<(), error::ErrorCode>;
    let mut _767: &mut state::user::UserStats;
    let mut _768: &mut &mut state::user::UserStats;
    let mut _769: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &mut &mut state::user::UserStats>;
    let mut _770: std::result::Result<&mut &mut state::user::UserStats, error::ErrorCode>;
    let mut _771: std::option::Option<&mut &mut state::user::UserStats>;
    let mut _772: &mut std::option::Option<&mut state::user::UserStats>;
    let mut _773: isize;
    let mut _775: !;
    let mut _776: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _778: u64;
    let mut _779: i64;
    let mut _780: isize;
    let mut _782: !;
    let mut _783: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _785: ();
    let mut _786: &mut state::user::User;
    let mut _787: u64;
    let _788: ();
    let mut _789: (std::option::Option<&mut &mut state::user::User>, std::option::Option<&mut &mut state::user::UserStats>);
    let mut _790: std::option::Option<&mut &mut state::user::User>;
    let mut _791: &mut std::option::Option<&mut state::user::User>;
    let mut _792: std::option::Option<&mut &mut state::user::UserStats>;
    let mut _793: &mut std::option::Option<&mut state::user::UserStats>;
    let mut _794: isize;
    let mut _795: isize;
    let mut _798: std::result::Result<&mut state::user::PerpPosition, error::ErrorCode>;
    let mut _799: &mut state::user::User;
    let mut _800: u16;
    let mut _801: isize;
    let _803: ();
    let mut _804: bool;
    let mut _805: u64;
    let _806: ();
    let mut _807: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _808: std::result::Result<(), error::ErrorCode>;
    let mut _809: &mut state::user::PerpPosition;
    let mut _810: &mut state::perp_market::PerpMarket;
    let mut _811: i64;
    let mut _812: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _813: std::result::Result<i64, error::ErrorCode>;
    let mut _814: u64;
    let mut _815: isize;
    let mut _817: !;
    let mut _818: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _820: isize;
    let mut _822: !;
    let mut _823: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _825: ();
    let mut _826: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _827: std::result::Result<(), error::ErrorCode>;
    let mut _828: &mut state::user::UserStats;
    let mut _829: u64;
    let mut _830: i64;
    let mut _831: isize;
    let mut _833: !;
    let mut _834: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _836: ();
    let mut _837: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _838: std::result::Result<(), error::ErrorCode>;
    let mut _839: &mut state::user::Order;
    let mut _840: &mut state::user::Order;
    let _841: usize;
    let mut _842: usize;
    let mut _843: bool;
    let mut _844: u64;
    let mut _845: u64;
    let mut _846: isize;
    let mut _848: !;
    let mut _849: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _851: ();
    let mut _852: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _853: std::result::Result<(), error::ErrorCode>;
    let mut _854: &mut state::user::PerpPosition;
    let mut _855: &mut state::user::PerpPosition;
    let _856: usize;
    let mut _857: usize;
    let mut _858: bool;
    let mut _859: &controller::position::PositionDirection;
    let _860: &controller::position::PositionDirection;
    let _861: usize;
    let mut _862: usize;
    let mut _863: bool;
    let mut _864: u64;
    let mut _865: bool;
    let mut _866: &state::user::Order;
    let _867: usize;
    let mut _868: usize;
    let mut _869: bool;
    let mut _870: isize;
    let mut _872: !;
    let mut _873: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _875: ();
    let mut _876: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _877: std::result::Result<(), error::ErrorCode>;
    let mut _878: &mut state::user::Order;
    let mut _879: &mut state::user::Order;
    let _880: usize;
    let mut _881: usize;
    let mut _882: bool;
    let mut _883: u64;
    let mut _884: u64;
    let mut _885: isize;
    let mut _887: !;
    let mut _888: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _890: ();
    let mut _891: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _892: std::result::Result<(), error::ErrorCode>;
    let mut _893: &mut state::user::PerpPosition;
    let mut _894: &mut state::user::PerpPosition;
    let _895: usize;
    let mut _896: usize;
    let mut _897: bool;
    let mut _898: &controller::position::PositionDirection;
    let _899: &controller::position::PositionDirection;
    let _900: usize;
    let mut _901: usize;
    let mut _902: bool;
    let mut _903: u64;
    let mut _904: bool;
    let mut _905: &state::user::Order;
    let _906: usize;
    let mut _907: usize;
    let mut _908: bool;
    let mut _909: isize;
    let mut _911: !;
    let mut _912: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _916: u64;
    let mut _917: std::option::Option<u64>;
    let mut _918: std::option::Option<u64>;
    let mut _919: u64;
    let mut _920: std::option::Option<u64>;
    let mut _922: bool;
    let mut _923: bool;
    let mut _924: &state::user::Order;
    let _925: usize;
    let mut _926: usize;
    let mut _927: bool;
    let mut _929: u8;
    let mut _930: u8;
    let mut _931: bool;
    let mut _932: &state::user::Order;
    let _933: usize;
    let mut _934: usize;
    let mut _935: bool;
    let mut _936: state::user::OrderBitFlag;
    let mut _939: (std::option::Option<u64>, std::option::Option<u64>);
    let mut _940: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (std::option::Option<u64>, std::option::Option<u64>)>;
    let mut _941: std::result::Result<(std::option::Option<u64>, std::option::Option<u64>), error::ErrorCode>;
    let mut _942: u64;
    let mut _943: std::option::Option<(u64, u64)>;
    let mut _944: isize;
    let mut _946: !;
    let mut _947: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _951: (std::option::Option<u64>, std::option::Option<u64>);
    let mut _952: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (std::option::Option<u64>, std::option::Option<u64>)>;
    let mut _953: std::result::Result<(std::option::Option<u64>, std::option::Option<u64>), error::ErrorCode>;
    let mut _954: u64;
    let mut _955: std::option::Option<(u64, u64)>;
    let mut _956: isize;
    let mut _958: !;
    let mut _959: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _962: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::events::OrderActionRecord>;
    let mut _963: std::result::Result<state::events::OrderActionRecord, error::ErrorCode>;
    let mut _964: i64;
    let mut _965: state::events::OrderAction;
    let mut _966: state::events::OrderActionExplanation;
    let mut _967: u16;
    let mut _968: std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _969: anchor_lang::prelude::Pubkey;
    let mut _970: std::option::Option<u64>;
    let mut _971: u64;
    let mut _972: std::option::Option<u64>;
    let mut _973: u64;
    let mut _974: std::option::Option<u64>;
    let mut _975: u64;
    let mut _976: std::option::Option<u64>;
    let mut _977: u64;
    let mut _978: std::option::Option<u64>;
    let mut _979: u64;
    let mut _980: std::option::Option<u64>;
    let mut _981: u64;
    let mut _982: std::option::Option<u64>;
    let mut _983: u64;
    let mut _984: std::option::Option<i64>;
    let mut _985: std::option::Option<u64>;
    let mut _986: std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _987: anchor_lang::prelude::Pubkey;
    let mut _988: std::option::Option<state::user::Order>;
    let mut _989: state::user::Order;
    let _990: usize;
    let mut _991: usize;
    let mut _992: bool;
    let mut _993: std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _994: anchor_lang::prelude::Pubkey;
    let mut _995: std::option::Option<state::user::Order>;
    let mut _996: state::user::Order;
    let _997: usize;
    let mut _998: usize;
    let mut _999: bool;
    let mut _1000: i64;
    let mut _1001: &state::oracle::OraclePriceData;
    let mut _1002: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _1003: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _1004: &mut state::oracle_map::OracleMap<'_>;
    let mut _1005: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _1006: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _1007: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _1008: &state::perp_market::PerpMarket;
    let mut _1009: isize;
    let mut _1011: !;
    let mut _1012: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1014: u8;
    let mut _1015: std::option::Option<u64>;
    let mut _1016: std::option::Option<u64>;
    let mut _1017: std::option::Option<u64>;
    let mut _1018: std::option::Option<u64>;
    let mut _1019: std::option::Option<u64>;
    let mut _1020: isize;
    let mut _1022: !;
    let mut _1023: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1025: ();
    let mut _1026: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1027: std::result::Result<(), error::ErrorCode>;
    let mut _1028: state::events::OrderActionRecord;
    let mut _1029: isize;
    let mut _1031: !;
    let mut _1032: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1034: ();
    let mut _1035: bool;
    let mut _1036: u64;
    let mut _1037: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _1038: std::result::Result<u64, error::ErrorCode>;
    let mut _1039: &state::user::Order;
    let _1040: usize;
    let mut _1041: usize;
    let mut _1042: bool;
    let mut _1043: std::option::Option<i64>;
    let mut _1044: isize;
    let mut _1046: !;
    let mut _1047: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1049: ();
    let mut _1050: &mut state::user::User;
    let mut _1051: bool;
    let mut _1052: &state::user::Order;
    let _1053: usize;
    let mut _1054: usize;
    let mut _1055: bool;
    let mut _1056: state::user::OrderStatus;
    let _1057: usize;
    let mut _1058: usize;
    let mut _1059: bool;
    let _1061: usize;
    let mut _1062: usize;
    let mut _1063: bool;
    let mut _1064: (u8, bool);
    let _1065: ();
    let mut _1066: bool;
    let mut _1067: u64;
    let mut _1068: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _1069: std::result::Result<u64, error::ErrorCode>;
    let mut _1070: &state::user::Order;
    let _1071: usize;
    let mut _1072: usize;
    let mut _1073: bool;
    let mut _1074: std::option::Option<i64>;
    let mut _1075: isize;
    let mut _1077: !;
    let mut _1078: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1080: ();
    let mut _1081: &mut state::user::User;
    let mut _1082: bool;
    let mut _1083: &state::user::Order;
    let _1084: usize;
    let mut _1085: usize;
    let mut _1086: bool;
    let mut _1087: state::user::OrderStatus;
    let _1088: usize;
    let mut _1089: usize;
    let mut _1090: bool;
    let _1092: usize;
    let mut _1093: usize;
    let mut _1094: bool;
    let mut _1095: (u8, bool);
    let mut _1096: (u64, u64, u64);
    let mut _1097: u64;
    let mut _1098: u64;
    let mut _1099: u64;
    let mut _1102: &mut state::user::UserStats;
    let mut _1103: &mut state::user::UserStats;
    let mut _1104: &mut state::user::User;
    let mut _1105: &mut state::user::User;
    let mut _1106: &mut state::user::User;
    let mut _1107: &mut state::user::UserStats;
    let mut _1108: &mut state::user::User;
    let mut _1109: &mut state::user::User;
    let mut _1110: &mut state::user::UserStats;
    scope 1 {
        debug oracle_price => _38;
        let _52: controller::position::PositionDirection;
        scope 6 {
            debug taker_direction => _52;
            let _56: u64;
            let _59: u64;
            let _67: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _70: u64;
            scope 7 {
                debug taker_price => _56;
                let _89: i64;
                let _96: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _99: &state::user::PerpPosition;
                scope 18 {
                    debug taker_existing_position => _89;
                    let _100: u64;
                    let _110: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _113: u64;
                    scope 23 {
                        debug taker_base_asset_amount => _100;
                        let _114: controller::position::PositionDirection;
                        scope 28 {
                            debug maker_direction => _114;
                            let _118: i64;
                            let _119: std::option::Option<(u64, u64)>;
                            let _121: &state::user::PerpPosition;
                            let _127: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _130: &state::user::PerpPosition;
                            scope 29 {
                                debug maker_existing_position => _118;
                                debug maker_existing_position_params_for_order_action => _119;
                                let _135: u64;
                                let _145: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _148: u64;
                                scope 35 {
                                    debug maker_base_asset_amount => _135;
                                    let _149: bool;
                                    scope 40 {
                                        debug orders_cross => _149;
                                        let _162: std::string::String;
                                        let _179: u64;
                                        let _188: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _191: (u64, u64);
                                        let mut _1101: &[&str; 2];
                                        scope 41 {
                                            debug res => _162;
                                        }
                                        scope 42 {
                                            debug base_asset_amount => _179;
                                            let _197: std::option::Option<i64>;
                                            let _202: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _205: std::option::Option<i64>;
                                            scope 47 {
                                                debug sanitize_clamp_denominator => _197;
                                                let _218: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _221: u64;
                                                let mut _222: u64;
                                                scope 52 {
                                                    debug residual => _218;
                                                    scope 53 {
                                                    }
                                                }
                                                scope 54 {
                                                    debug val => _221;
                                                    scope 55 {
                                                    }
                                                }
                                                scope 56 {
                                                    debug total_quote_asset_amount => _222;
                                                    let mut _223: u64;
                                                    scope 57 {
                                                        debug total_base_asset_amount => _223;
                                                        let _224: u64;
                                                        let _243: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _246: bool;
                                                        let _248: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _251: u64;
                                                        scope 58 {
                                                            debug jit_base_asset_amount => _224;
                                                            let _255: u64;
                                                            let _256: u64;
                                                            let _292: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _295: (u64, u64);
                                                            let _298: i64;
                                                            let _299: std::option::Option<(u64, u64)>;
                                                            let _301: &state::user::PerpPosition;
                                                            let _307: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _310: &state::user::PerpPosition;
                                                            scope 67 {
                                                                debug base_asset_amount_filled_by_amm => _255;
                                                                debug quote_asset_amount_filled_by_amm => _256;
                                                            }
                                                            scope 68 {
                                                                debug residual => _292;
                                                                scope 69 {
                                                                }
                                                            }
                                                            scope 70 {
                                                                debug val => _295;
                                                                scope 71 {
                                                                }
                                                            }
                                                            scope 72 {
                                                                debug taker_existing_position => _298;
                                                                debug taker_existing_position_params_for_order_action => _299;
                                                                let _315: u64;
                                                                let _325: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _328: u64;
                                                                scope 78 {
                                                                    debug taker_base_asset_amount => _315;
                                                                    let _329: u64;
                                                                    let _330: u64;
                                                                    let _339: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _342: (u64, u64);
                                                                    scope 83 {
                                                                        debug base_asset_amount_fulfilled_by_maker => _329;
                                                                        debug quote_asset_amount => _330;
                                                                        let _351: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _354: ();
                                                                        let _363: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _366: ();
                                                                        let _373: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _376: u64;
                                                                        let _383: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _386: u64;
                                                                        let _387: usize;
                                                                        let _397: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _400: usize;
                                                                        scope 88 {
                                                                            debug residual => _351;
                                                                            scope 89 {
                                                                            }
                                                                        }
                                                                        scope 90 {
                                                                            debug val => _354;
                                                                            scope 91 {
                                                                            }
                                                                        }
                                                                        scope 92 {
                                                                            debug residual => _363;
                                                                            scope 93 {
                                                                            }
                                                                        }
                                                                        scope 94 {
                                                                            debug val => _366;
                                                                            scope 95 {
                                                                            }
                                                                        }
                                                                        scope 96 {
                                                                            debug residual => _373;
                                                                            scope 97 {
                                                                            }
                                                                        }
                                                                        scope 98 {
                                                                            debug val => _376;
                                                                            scope 99 {
                                                                            }
                                                                        }
                                                                        scope 100 {
                                                                            debug residual => _383;
                                                                            scope 101 {
                                                                            }
                                                                        }
                                                                        scope 102 {
                                                                            debug val => _386;
                                                                            scope 103 {
                                                                            }
                                                                        }
                                                                        scope 104 {
                                                                            debug maker_position_index => _387;
                                                                            let _401: controller::position::PositionDelta;
                                                                            let _411: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _414: controller::position::PositionDelta;
                                                                            scope 109 {
                                                                                debug maker_position_delta => _401;
                                                                                let _427: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _430: i64;
                                                                                let _454: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _457: ();
                                                                                let _458: usize;
                                                                                let _468: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _471: usize;
                                                                                scope 114 {
                                                                                    debug residual => _427;
                                                                                    scope 115 {
                                                                                    }
                                                                                }
                                                                                scope 116 {
                                                                                    debug val => _430;
                                                                                    scope 117 {
                                                                                    }
                                                                                }
                                                                                scope 118 {
                                                                                    debug maker_stats => _433;
                                                                                    let _433: &mut &mut state::user::UserStats;
                                                                                    let _442: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _445: ();
                                                                                    scope 119 {
                                                                                        debug residual => _442;
                                                                                        scope 120 {
                                                                                        }
                                                                                    }
                                                                                    scope 121 {
                                                                                        debug val => _445;
                                                                                        scope 122 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                                scope 123 {
                                                                                    debug residual => _454;
                                                                                    scope 124 {
                                                                                    }
                                                                                }
                                                                                scope 125 {
                                                                                    debug val => _457;
                                                                                    scope 126 {
                                                                                    }
                                                                                }
                                                                                scope 127 {
                                                                                    debug taker_position_index => _458;
                                                                                    let _472: controller::position::PositionDelta;
                                                                                    let _482: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _485: controller::position::PositionDelta;
                                                                                    scope 132 {
                                                                                        debug taker_position_delta => _472;
                                                                                        let _498: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _501: i64;
                                                                                        let _510: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _513: ();
                                                                                        let _514: bool;
                                                                                        scope 137 {
                                                                                            debug residual => _498;
                                                                                            scope 138 {
                                                                                            }
                                                                                        }
                                                                                        scope 139 {
                                                                                            debug val => _501;
                                                                                            scope 140 {
                                                                                            }
                                                                                        }
                                                                                        scope 141 {
                                                                                            debug residual => _510;
                                                                                            scope 142 {
                                                                                            }
                                                                                        }
                                                                                        scope 143 {
                                                                                            debug val => _513;
                                                                                            scope 144 {
                                                                                            }
                                                                                        }
                                                                                        scope 145 {
                                                                                            debug reward_referrer => _514;
                                                                                            let _517: bool;
                                                                                            scope 146 {
                                                                                                debug reward_filler => _517;
                                                                                                let _520: u64;
                                                                                                let _528: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                let _531: u64;
                                                                                                scope 147 {
                                                                                                    debug filler_multiplier => _520;
                                                                                                    let _532: u64;
                                                                                                    let _533: u64;
                                                                                                    let _534: i64;
                                                                                                    let _535: u64;
                                                                                                    let _536: u64;
                                                                                                    let _537: u64;
                                                                                                    let _561: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                    let _564: math::fees::FillFees;
                                                                                                    let mut _1100: &state::user::MarketType;
                                                                                                    scope 152 {
                                                                                                        debug taker_fee => _532;
                                                                                                        debug maker_rebate => _533;
                                                                                                        debug fee_to_market => _534;
                                                                                                        debug filler_reward => _535;
                                                                                                        debug referrer_reward => _536;
                                                                                                        debug referee_discount => _537;
                                                                                                        let _574: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _577: i128;
                                                                                                        let _579: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _582: i128;
                                                                                                        let _592: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _595: u128;
                                                                                                        let _597: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _600: u128;
                                                                                                        let _610: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _613: i128;
                                                                                                        let _615: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _618: i128;
                                                                                                        let _625: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _628: i64;
                                                                                                        let _644: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _647: i64;
                                                                                                        let _650: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _653: ();
                                                                                                        let _660: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _663: ();
                                                                                                        let _670: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _673: ();
                                                                                                        let _688: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _691: i64;
                                                                                                        let _693: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _696: ();
                                                                                                        let _716: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _719: ();
                                                                                                        let _847: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _850: ();
                                                                                                        let _871: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _874: ();
                                                                                                        let _886: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _889: ();
                                                                                                        let _910: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                        let _913: ();
                                                                                                        let _914: u64;
                                                                                                        let _915: u64;
                                                                                                        scope 157 {
                                                                                                            debug residual => _574;
                                                                                                            scope 158 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 159 {
                                                                                                            debug val => _577;
                                                                                                            scope 160 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 161 {
                                                                                                            debug residual => _579;
                                                                                                            scope 162 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 163 {
                                                                                                            debug val => _582;
                                                                                                            scope 164 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 165 {
                                                                                                            debug residual => _592;
                                                                                                            scope 166 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 167 {
                                                                                                            debug val => _595;
                                                                                                            scope 168 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 169 {
                                                                                                            debug residual => _597;
                                                                                                            scope 170 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 171 {
                                                                                                            debug val => _600;
                                                                                                            scope 172 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 173 {
                                                                                                            debug residual => _610;
                                                                                                            scope 174 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 175 {
                                                                                                            debug val => _613;
                                                                                                            scope 176 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 177 {
                                                                                                            debug residual => _615;
                                                                                                            scope 178 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 179 {
                                                                                                            debug val => _618;
                                                                                                            scope 180 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 181 {
                                                                                                            debug residual => _625;
                                                                                                            scope 182 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 183 {
                                                                                                            debug val => _628;
                                                                                                            scope 184 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 185 {
                                                                                                            debug residual => _644;
                                                                                                            scope 186 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 187 {
                                                                                                            debug val => _647;
                                                                                                            scope 188 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 189 {
                                                                                                            debug residual => _650;
                                                                                                            scope 190 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 191 {
                                                                                                            debug val => _653;
                                                                                                            scope 192 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 193 {
                                                                                                            debug residual => _660;
                                                                                                            scope 194 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 195 {
                                                                                                            debug val => _663;
                                                                                                            scope 196 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 197 {
                                                                                                            debug residual => _670;
                                                                                                            scope 198 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 199 {
                                                                                                            debug val => _673;
                                                                                                            scope 200 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 201 {
                                                                                                            debug residual => _688;
                                                                                                            scope 202 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 203 {
                                                                                                            debug val => _691;
                                                                                                            scope 204 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 205 {
                                                                                                            debug residual => _693;
                                                                                                            scope 206 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 207 {
                                                                                                            debug val => _696;
                                                                                                            scope 208 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 209 {
                                                                                                            debug maker_stats => _699;
                                                                                                            let _699: &mut &mut state::user::UserStats;
                                                                                                            let _706: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                            let _709: ();
                                                                                                            scope 210 {
                                                                                                                debug residual => _706;
                                                                                                                scope 211 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 212 {
                                                                                                                debug val => _709;
                                                                                                                scope 213 {
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        scope 214 {
                                                                                                            debug residual => _716;
                                                                                                            scope 215 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 216 {
                                                                                                            debug val => _719;
                                                                                                            scope 217 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 218 {
                                                                                                            debug filler => _722;
                                                                                                            let _722: &mut &mut state::user::User;
                                                                                                            let _726: usize;
                                                                                                            let _737: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                            let _740: usize;
                                                                                                            scope 219 {
                                                                                                                debug filler_position_index => _726;
                                                                                                                let _755: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                let _758: i64;
                                                                                                                let _760: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                let _763: ();
                                                                                                                let _774: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                let _777: &mut &mut state::user::UserStats;
                                                                                                                let _781: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                let _784: ();
                                                                                                                scope 224 {
                                                                                                                    debug residual => _755;
                                                                                                                    scope 225 {
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 226 {
                                                                                                                    debug val => _758;
                                                                                                                    scope 227 {
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 228 {
                                                                                                                    debug residual => _760;
                                                                                                                    scope 229 {
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 230 {
                                                                                                                    debug val => _763;
                                                                                                                    scope 231 {
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 232 {
                                                                                                                    debug residual => _774;
                                                                                                                    scope 233 {
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 234 {
                                                                                                                    debug val => _777;
                                                                                                                    scope 235 {
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 236 {
                                                                                                                    debug residual => _781;
                                                                                                                    scope 237 {
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 238 {
                                                                                                                    debug val => _784;
                                                                                                                    scope 239 {
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                            scope 220 {
                                                                                                                debug residual => _737;
                                                                                                                scope 221 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 222 {
                                                                                                                debug val => _740;
                                                                                                                scope 223 {
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        scope 240 {
                                                                                                            debug referrer => _796;
                                                                                                            debug referrer_stats => _797;
                                                                                                            let _796: &mut &mut state::user::User;
                                                                                                            let _797: &mut &mut state::user::UserStats;
                                                                                                            scope 241 {
                                                                                                                debug referrer_position => _802;
                                                                                                                let _802: &mut state::user::PerpPosition;
                                                                                                                let _816: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                let _819: i64;
                                                                                                                let _821: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                let _824: ();
                                                                                                                let _832: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                let _835: ();
                                                                                                                scope 242 {
                                                                                                                    debug residual => _816;
                                                                                                                    scope 243 {
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 244 {
                                                                                                                    debug val => _819;
                                                                                                                    scope 245 {
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 246 {
                                                                                                                    debug residual => _821;
                                                                                                                    scope 247 {
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 248 {
                                                                                                                    debug val => _824;
                                                                                                                    scope 249 {
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 250 {
                                                                                                                    debug residual => _832;
                                                                                                                    scope 251 {
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 252 {
                                                                                                                    debug val => _835;
                                                                                                                    scope 253 {
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        scope 254 {
                                                                                                            debug residual => _847;
                                                                                                            scope 255 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 256 {
                                                                                                            debug val => _850;
                                                                                                            scope 257 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 258 {
                                                                                                            debug residual => _871;
                                                                                                            scope 259 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 260 {
                                                                                                            debug val => _874;
                                                                                                            scope 261 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 262 {
                                                                                                            debug residual => _886;
                                                                                                            scope 263 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 264 {
                                                                                                            debug val => _889;
                                                                                                            scope 265 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 266 {
                                                                                                            debug residual => _910;
                                                                                                            scope 267 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 268 {
                                                                                                            debug val => _913;
                                                                                                            scope 269 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 270 {
                                                                                                            debug fill_record_id => _914;
                                                                                                            let _921: state::events::OrderActionExplanation;
                                                                                                            scope 272 {
                                                                                                                debug order_action_explanation => _921;
                                                                                                                let mut _928: u8;
                                                                                                                scope 273 {
                                                                                                                    debug order_action_bit_flags => _928;
                                                                                                                    let _937: std::option::Option<u64>;
                                                                                                                    let _938: std::option::Option<u64>;
                                                                                                                    let _945: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                    let _948: (std::option::Option<u64>, std::option::Option<u64>);
                                                                                                                    scope 274 {
                                                                                                                        debug taker_existing_quote_entry_amount => _937;
                                                                                                                        debug taker_existing_base_asset_amount => _938;
                                                                                                                        let _949: std::option::Option<u64>;
                                                                                                                        let _950: std::option::Option<u64>;
                                                                                                                        let _957: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                        let _960: (std::option::Option<u64>, std::option::Option<u64>);
                                                                                                                        scope 279 {
                                                                                                                            debug maker_existing_quote_entry_amount => _949;
                                                                                                                            debug maker_existing_base_asset_amount => _950;
                                                                                                                            let _961: state::events::OrderActionRecord;
                                                                                                                            let _1010: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                            let _1013: &state::oracle::OraclePriceData;
                                                                                                                            let _1021: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                            let _1024: state::events::OrderActionRecord;
                                                                                                                            scope 284 {
                                                                                                                                debug order_action_record => _961;
                                                                                                                                let _1030: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                let _1033: ();
                                                                                                                                let _1045: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                let _1048: u64;
                                                                                                                                let _1060: &mut state::user::PerpPosition;
                                                                                                                                let _1076: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                                                let _1079: u64;
                                                                                                                                let _1091: &mut state::user::PerpPosition;
                                                                                                                                scope 293 {
                                                                                                                                    debug residual => _1030;
                                                                                                                                    scope 294 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 295 {
                                                                                                                                    debug val => _1033;
                                                                                                                                    scope 296 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 297 {
                                                                                                                                    debug residual => _1045;
                                                                                                                                    scope 298 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 299 {
                                                                                                                                    debug val => _1048;
                                                                                                                                    scope 300 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 301 {
                                                                                                                                    debug market_position => _1060;
                                                                                                                                }
                                                                                                                                scope 302 {
                                                                                                                                    debug residual => _1076;
                                                                                                                                    scope 303 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 304 {
                                                                                                                                    debug val => _1079;
                                                                                                                                    scope 305 {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 306 {
                                                                                                                                    debug market_position => _1091;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            scope 285 {
                                                                                                                                debug residual => _1010;
                                                                                                                                scope 286 {
                                                                                                                                }
                                                                                                                            }
                                                                                                                            scope 287 {
                                                                                                                                debug val => _1013;
                                                                                                                                scope 288 {
                                                                                                                                }
                                                                                                                            }
                                                                                                                            scope 289 {
                                                                                                                                debug residual => _1021;
                                                                                                                                scope 290 {
                                                                                                                                }
                                                                                                                            }
                                                                                                                            scope 291 {
                                                                                                                                debug val => _1024;
                                                                                                                                scope 292 {
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 280 {
                                                                                                                            debug residual => _957;
                                                                                                                            scope 281 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 282 {
                                                                                                                            debug val => _960;
                                                                                                                            scope 283 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 275 {
                                                                                                                        debug residual => _945;
                                                                                                                        scope 276 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 277 {
                                                                                                                        debug val => _948;
                                                                                                                        scope 278 {
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        scope 271 {
                                                                                                            debug current_id => _915;
                                                                                                        }
                                                                                                    }
                                                                                                    scope 153 {
                                                                                                        debug residual => _561;
                                                                                                        scope 154 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 155 {
                                                                                                        debug val => _564;
                                                                                                        scope 156 {
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                scope 148 {
                                                                                                    debug residual => _528;
                                                                                                    scope 149 {
                                                                                                    }
                                                                                                }
                                                                                                scope 150 {
                                                                                                    debug val => _531;
                                                                                                    scope 151 {
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    scope 133 {
                                                                                        debug residual => _482;
                                                                                        scope 134 {
                                                                                        }
                                                                                    }
                                                                                    scope 135 {
                                                                                        debug val => _485;
                                                                                        scope 136 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                                scope 128 {
                                                                                    debug residual => _468;
                                                                                    scope 129 {
                                                                                    }
                                                                                }
                                                                                scope 130 {
                                                                                    debug val => _471;
                                                                                    scope 131 {
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 110 {
                                                                                debug residual => _411;
                                                                                scope 111 {
                                                                                }
                                                                            }
                                                                            scope 112 {
                                                                                debug val => _414;
                                                                                scope 113 {
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 105 {
                                                                            debug residual => _397;
                                                                            scope 106 {
                                                                            }
                                                                        }
                                                                        scope 107 {
                                                                            debug val => _400;
                                                                            scope 108 {
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 84 {
                                                                        debug residual => _339;
                                                                        scope 85 {
                                                                        }
                                                                    }
                                                                    scope 86 {
                                                                        debug val => _342;
                                                                        scope 87 {
                                                                        }
                                                                    }
                                                                }
                                                                scope 79 {
                                                                    debug residual => _325;
                                                                    scope 80 {
                                                                    }
                                                                }
                                                                scope 81 {
                                                                    debug val => _328;
                                                                    scope 82 {
                                                                    }
                                                                }
                                                            }
                                                            scope 73 {
                                                                debug taker_position => _301;
                                                            }
                                                            scope 74 {
                                                                debug residual => _307;
                                                                scope 75 {
                                                                }
                                                            }
                                                            scope 76 {
                                                                debug val => _310;
                                                                scope 77 {
                                                                }
                                                            }
                                                        }
                                                        scope 59 {
                                                            debug residual => _243;
                                                            scope 60 {
                                                            }
                                                        }
                                                        scope 61 {
                                                            debug val => _246;
                                                            scope 62 {
                                                            }
                                                        }
                                                        scope 63 {
                                                            debug residual => _248;
                                                            scope 64 {
                                                            }
                                                        }
                                                        scope 65 {
                                                            debug val => _251;
                                                            scope 66 {
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            scope 48 {
                                                debug residual => _202;
                                                scope 49 {
                                                }
                                            }
                                            scope 50 {
                                                debug val => _205;
                                                scope 51 {
                                                }
                                            }
                                        }
                                        scope 43 {
                                            debug residual => _188;
                                            scope 44 {
                                            }
                                        }
                                        scope 45 {
                                            debug val => _191;
                                            scope 46 {
                                            }
                                        }
                                    }
                                }
                                scope 36 {
                                    debug residual => _145;
                                    scope 37 {
                                    }
                                }
                                scope 38 {
                                    debug val => _148;
                                    scope 39 {
                                    }
                                }
                            }
                            scope 30 {
                                debug maker_position => _121;
                            }
                            scope 31 {
                                debug residual => _127;
                                scope 32 {
                                }
                            }
                            scope 33 {
                                debug val => _130;
                                scope 34 {
                                }
                            }
                        }
                    }
                    scope 24 {
                        debug residual => _110;
                        scope 25 {
                        }
                    }
                    scope 26 {
                        debug val => _113;
                        scope 27 {
                        }
                    }
                }
                scope 19 {
                    debug residual => _96;
                    scope 20 {
                    }
                }
                scope 21 {
                    debug val => _99;
                    scope 22 {
                    }
                }
            }
            scope 8 {
                debug taker_limit_price => _58;
                let _58: u64;
            }
            scope 9 {
                debug amm_available_liquidity => _59;
                let _85: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _88: u64;
                scope 14 {
                    debug residual => _85;
                    scope 15 {
                    }
                }
                scope 16 {
                    debug val => _88;
                    scope 17 {
                    }
                }
            }
            scope 10 {
                debug residual => _67;
                scope 11 {
                }
            }
            scope 12 {
                debug val => _70;
                scope 13 {
                }
            }
        }
    }
    scope 2 {
        debug residual => _48;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _51;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = _8;
        _29 = Len(((*_6).5: [state::user::Order; 32]));
        _30 = Lt(_28, _29);
        assert(move _30, "index out of bounds: the length is {} but the index is {}", move _29, _28) -> [success: bb1, unwind continue];
    }

    bb1: {
        _27 = &((*_6).5: [state::user::Order; 32])[_28];
        _26 = &(*_27);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = _4;
        _34 = Len(((*_2).5: [state::user::Order; 32]));
        _35 = Lt(_33, _34);
        assert(move _35, "index out of bounds: the length is {} but the index is {}", move _34, _33) -> [success: bb2, unwind continue];
    }

    bb2: {
        _32 = &((*_2).5: [state::user::Order; 32])[_33];
        _31 = &(*_32);
        _25 = are_orders_same_market_but_different_sides(move _26, move _31) -> [return: bb3, unwind continue];
    }

    bb3: {
        switchInt(move _25) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        StorageDead(_31);
        StorageDead(_26);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_28);
        StorageDead(_27);
        _24 = const ();
        StorageDead(_25);
        StorageDead(_24);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = &mut (*_22);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = &(*_1);
        _45 = PerpMarket::oracle_id(move _46) -> [return: bb6, unwind continue];
    }

    bb5: {
        StorageDead(_31);
        StorageDead(_26);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_28);
        StorageDead(_27);
        StorageLive(_37);
        _37 = (const 0_u64, const 0_u64, const 0_u64);
        _0 = std::result::Result::<(u64, u64, u64), error::ErrorCode>::Ok(move _37);
        StorageDead(_37);
        StorageDead(_25);
        StorageDead(_24);
        goto -> bb488;
    }

    bb6: {
        StorageDead(_46);
        _44 = &_45;
        _43 = &(*_44);
        _41 = OracleMap::<'_>::get_price_data(move _42, move _43) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_43);
        StorageDead(_42);
        _40 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _41) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_41);
        _47 = discriminant(_40);
        switchInt(move _47) -> [0: bb9, 1: bb11, otherwise: bb10];
    }

    bb9: {
        StorageLive(_51);
        _51 = ((_40 as Continue).0: &state::oracle::OraclePriceData);
        _39 = _51;
        StorageDead(_51);
        _38 = ((*_39).0: i64);
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_40);
        StorageDead(_39);
        StorageLive(_52);
        StorageLive(_53);
        _53 = _4;
        _54 = Len(((*_2).5: [state::user::Order; 32]));
        _55 = Lt(_53, _54);
        assert(move _55, "index out of bounds: the length is {} but the index is {}", move _54, _53) -> [success: bb13, unwind continue];
    }

    bb10: {
        unreachable;
    }

    bb11: {
        StorageLive(_48);
        _48 = ((_40 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_50);
        _50 = _48;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _50) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_50);
        StorageDead(_48);
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_40);
        StorageDead(_39);
        goto -> bb487;
    }

    bb13: {
        _52 = (((*_2).5: [state::user::Order; 32])[_53].17: controller::position::PositionDirection);
        StorageDead(_53);
        StorageLive(_56);
        _57 = discriminant(_17);
        switchInt(move _57) -> [1: bb14, otherwise: bb15];
    }

    bb14: {
        StorageLive(_58);
        _58 = ((_17 as Some).0: u64);
        _56 = _58;
        StorageDead(_58);
        goto -> bb28;
    }

    bb15: {
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = &((*_1).1: state::perp_market::AMM);
        _62 = &(*_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = &_52;
        _64 = &(*_65);
        _61 = calculate_amm_available_liquidity(move _62, move _64) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_64);
        StorageDead(_62);
        _60 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _61) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_61);
        _66 = discriminant(_60);
        switchInt(move _66) -> [0: bb18, 1: bb19, otherwise: bb10];
    }

    bb18: {
        StorageLive(_70);
        _70 = ((_60 as Continue).0: u64);
        _59 = _70;
        StorageDead(_70);
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_60);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _73 = ((*_1).1: state::perp_market::AMM);
        StorageLive(_74);
        StorageLive(_75);
        _75 = &_52;
        _74 = &(*_75);
        StorageLive(_76);
        _76 = _59;
        StorageLive(_77);
        _77 = _38;
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _80 = _4;
        _81 = Len(((*_2).5: [state::user::Order; 32]));
        _82 = Lt(_80, _81);
        assert(move _82, "index out of bounds: the length is {} but the index is {}", move _81, _80) -> [success: bb21, unwind continue];
    }

    bb19: {
        StorageLive(_67);
        _67 = ((_60 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_69);
        _69 = _67;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _69) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_69);
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_60);
        StorageDead(_59);
        goto -> bb486;
    }

    bb21: {
        _79 = ((*_2).5: [state::user::Order; 32])[_80];
        StorageLive(_83);
        _83 = _19;
        _78 = Order::seconds_til_expiry(move _79, move _83) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_83);
        StorageDead(_79);
        _72 = AMM::get_fallback_price(move _73, move _74, move _76, move _77, move _78) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_74);
        StorageDead(_73);
        _71 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _72) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_72);
        _84 = discriminant(_71);
        switchInt(move _84) -> [0: bb25, 1: bb26, otherwise: bb10];
    }

    bb25: {
        StorageLive(_88);
        _88 = ((_71 as Continue).0: u64);
        _56 = _88;
        StorageDead(_88);
        StorageDead(_59);
        StorageDead(_80);
        StorageDead(_75);
        StorageDead(_71);
        goto -> bb28;
    }

    bb26: {
        StorageLive(_85);
        _85 = ((_71 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_87);
        _87 = _85;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _87) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_87);
        StorageDead(_85);
        StorageDead(_59);
        StorageDead(_80);
        StorageDead(_75);
        StorageDead(_71);
        goto -> bb486;
    }

    bb28: {
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _93 = &(*_2);
        StorageLive(_94);
        _94 = ((*_1).21: u16);
        _92 = User::get_perp_position(move _93, move _94) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_94);
        StorageDead(_93);
        _91 = <std::result::Result<&PerpPosition, error::ErrorCode> as Try>::branch(move _92) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_92);
        _95 = discriminant(_91);
        switchInt(move _95) -> [0: bb31, 1: bb32, otherwise: bb10];
    }

    bb31: {
        StorageLive(_99);
        _99 = ((_91 as Continue).0: &state::user::PerpPosition);
        _90 = _99;
        StorageDead(_99);
        _89 = ((*_90).1: i64);
        StorageDead(_91);
        StorageDead(_90);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _104 = _4;
        _105 = Len(((*_2).5: [state::user::Order; 32]));
        _106 = Lt(_104, _105);
        assert(move _106, "index out of bounds: the length is {} but the index is {}", move _105, _104) -> [success: bb34, unwind continue];
    }

    bb32: {
        StorageLive(_96);
        _96 = ((_91 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_98);
        _98 = _96;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _98) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_98);
        StorageDead(_96);
        StorageDead(_91);
        StorageDead(_90);
        goto -> bb485;
    }

    bb34: {
        _103 = &((*_2).5: [state::user::Order; 32])[_104];
        StorageLive(_107);
        StorageLive(_108);
        _108 = _89;
        _107 = Option::<i64>::Some(move _108);
        StorageDead(_108);
        _102 = Order::get_base_asset_amount_unfilled(move _103, move _107) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_107);
        StorageDead(_103);
        _101 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _102) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_102);
        _109 = discriminant(_101);
        switchInt(move _109) -> [0: bb37, 1: bb38, otherwise: bb10];
    }

    bb37: {
        StorageLive(_113);
        _113 = ((_101 as Continue).0: u64);
        _100 = _113;
        StorageDead(_113);
        StorageDead(_104);
        StorageDead(_101);
        StorageLive(_114);
        StorageLive(_115);
        _115 = _8;
        _116 = Len(((*_6).5: [state::user::Order; 32]));
        _117 = Lt(_115, _116);
        assert(move _117, "index out of bounds: the length is {} but the index is {}", move _116, _115) -> [success: bb40, unwind continue];
    }

    bb38: {
        StorageLive(_110);
        _110 = ((_101 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_112);
        _112 = _110;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _112) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_112);
        StorageDead(_110);
        StorageDead(_104);
        StorageDead(_101);
        goto -> bb484;
    }

    bb40: {
        _114 = (((*_6).5: [state::user::Order; 32])[_115].17: controller::position::PositionDirection);
        StorageDead(_115);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        _124 = &(*_6);
        StorageLive(_125);
        _125 = ((*_1).21: u16);
        _123 = User::get_perp_position(move _124, move _125) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_125);
        StorageDead(_124);
        _122 = <std::result::Result<&PerpPosition, error::ErrorCode> as Try>::branch(move _123) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_123);
        _126 = discriminant(_122);
        switchInt(move _126) -> [0: bb43, 1: bb44, otherwise: bb10];
    }

    bb43: {
        StorageLive(_130);
        _130 = ((_122 as Continue).0: &state::user::PerpPosition);
        _121 = _130;
        StorageDead(_130);
        StorageDead(_122);
        StorageLive(_131);
        _131 = ((*_121).1: i64);
        StorageLive(_132);
        StorageLive(_133);
        _133 = &(*_121);
        StorageLive(_134);
        _134 = _114;
        _132 = PerpPosition::get_existing_position_params_for_order_action(move _133, move _134) -> [return: bb46, unwind continue];
    }

    bb44: {
        StorageLive(_127);
        _127 = ((_122 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_129);
        _129 = _127;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _129) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_129);
        StorageDead(_127);
        StorageDead(_122);
        StorageDead(_121);
        StorageDead(_120);
        goto -> bb483;
    }

    bb46: {
        StorageDead(_134);
        StorageDead(_133);
        _120 = (move _131, move _132);
        StorageDead(_132);
        StorageDead(_131);
        StorageDead(_121);
        StorageLive(_118);
        _118 = (_120.0: i64);
        StorageLive(_119);
        _119 = (_120.1: std::option::Option<(u64, u64)>);
        StorageDead(_120);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _139 = _8;
        _140 = Len(((*_6).5: [state::user::Order; 32]));
        _141 = Lt(_139, _140);
        assert(move _141, "index out of bounds: the length is {} but the index is {}", move _140, _139) -> [success: bb47, unwind continue];
    }

    bb47: {
        _138 = &((*_6).5: [state::user::Order; 32])[_139];
        StorageLive(_142);
        StorageLive(_143);
        _143 = _118;
        _142 = Option::<i64>::Some(move _143);
        StorageDead(_143);
        _137 = Order::get_base_asset_amount_unfilled(move _138, move _142) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_142);
        StorageDead(_138);
        _136 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _137) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_137);
        _144 = discriminant(_136);
        switchInt(move _144) -> [0: bb50, 1: bb51, otherwise: bb10];
    }

    bb50: {
        StorageLive(_148);
        _148 = ((_136 as Continue).0: u64);
        _135 = _148;
        StorageDead(_148);
        StorageDead(_139);
        StorageDead(_136);
        StorageLive(_149);
        StorageLive(_150);
        _150 = _114;
        StorageLive(_151);
        _151 = _18;
        StorageLive(_152);
        _152 = _56;
        _149 = do_orders_cross(move _150, move _151, move _152) -> [return: bb53, unwind continue];
    }

    bb51: {
        StorageLive(_145);
        _145 = ((_136 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_147);
        _147 = _145;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _147) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_147);
        StorageDead(_145);
        StorageDead(_139);
        StorageDead(_136);
        goto -> bb482;
    }

    bb53: {
        StorageDead(_152);
        StorageDead(_151);
        StorageDead(_150);
        StorageLive(_153);
        StorageLive(_154);
        _154 = _149;
        switchInt(move _154) -> [0: bb54, otherwise: bb62];
    }

    bb54: {
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        _1101 = const _;
        _166 = &(*_1101);
        _165 = &(*_166);
        _164 = move _165 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_165);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        _174 = &_18;
        _173 = &(*_174);
        _172 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _173) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_173);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        _177 = &_56;
        _176 = &(*_177);
        _175 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _176) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_176);
        _171 = [move _172, move _175];
        StorageDead(_175);
        StorageDead(_172);
        _170 = &_171;
        _169 = &(*_170);
        _168 = move _169 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_169);
        _163 = Arguments::<'_>::new_v1(move _164, move _168) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_168);
        StorageDead(_164);
        _162 = format(move _163) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_163);
        StorageDead(_177);
        StorageDead(_174);
        StorageDead(_171);
        StorageDead(_170);
        StorageDead(_166);
        _161 = move _162;
        StorageDead(_162);
        _160 = &_161;
        _159 = &(*_160);
        _158 = <String as Deref>::deref(move _159) -> [return: bb59, unwind: bb489];
    }

    bb59: {
        _157 = &(*_158);
        StorageDead(_159);
        _156 = solana_program::log::sol_log(move _157) -> [return: bb60, unwind: bb489];
    }

    bb60: {
        StorageDead(_157);
        drop(_161) -> [return: bb61, unwind: bb490];
    }

    bb61: {
        StorageDead(_161);
        StorageDead(_160);
        StorageDead(_158);
        StorageDead(_156);
        StorageLive(_178);
        _178 = (const 0_u64, const 0_u64, const 0_u64);
        _0 = std::result::Result::<(u64, u64, u64), error::ErrorCode>::Ok(move _178);
        StorageDead(_178);
        StorageDead(_154);
        StorageDead(_153);
        goto -> bb481;
    }

    bb62: {
        _153 = const ();
        StorageDead(_154);
        StorageDead(_153);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        _183 = _135;
        StorageLive(_184);
        _184 = _18;
        StorageLive(_185);
        _185 = _100;
        StorageLive(_186);
        _186 = _114;
        _182 = calculate_fill_for_matched_orders(move _183, move _184, move _185, const _, move _186) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_186);
        StorageDead(_185);
        StorageDead(_184);
        StorageDead(_183);
        _181 = <std::result::Result<(u64, u64), error::ErrorCode> as Try>::branch(move _182) -> [return: bb64, unwind continue];
    }

    bb64: {
        StorageDead(_182);
        _187 = discriminant(_181);
        switchInt(move _187) -> [0: bb65, 1: bb66, otherwise: bb10];
    }

    bb65: {
        StorageLive(_191);
        _191 = ((_181 as Continue).0: (u64, u64));
        _180 = _191;
        StorageDead(_191);
        StorageLive(_179);
        _179 = (_180.0: u64);
        StorageDead(_181);
        StorageDead(_180);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        _194 = _179;
        _193 = Eq(move _194, const 0_u64);
        switchInt(move _193) -> [0: bb69, otherwise: bb68];
    }

    bb66: {
        StorageLive(_188);
        _188 = ((_181 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_190);
        _190 = _188;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _190) -> [return: bb67, unwind continue];
    }

    bb67: {
        StorageDead(_190);
        StorageDead(_188);
        StorageDead(_181);
        StorageDead(_180);
        goto -> bb481;
    }

    bb68: {
        StorageDead(_194);
        StorageLive(_196);
        _196 = (const 0_u64, const 0_u64, const 0_u64);
        _0 = std::result::Result::<(u64, u64, u64), error::ErrorCode>::Ok(move _196);
        StorageDead(_196);
        StorageDead(_193);
        StorageDead(_192);
        goto -> bb480;
    }

    bb69: {
        StorageDead(_194);
        _192 = const ();
        StorageDead(_193);
        StorageDead(_192);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        _200 = (*_1);
        _199 = PerpMarket::get_sanitize_clamp_denominator(move _200) -> [return: bb70, unwind continue];
    }

    bb70: {
        StorageDead(_200);
        _198 = <std::result::Result<Option<i64>, error::ErrorCode> as Try>::branch(move _199) -> [return: bb71, unwind continue];
    }

    bb71: {
        StorageDead(_199);
        _201 = discriminant(_198);
        switchInt(move _201) -> [0: bb72, 1: bb73, otherwise: bb10];
    }

    bb72: {
        StorageLive(_205);
        _205 = ((_198 as Continue).0: std::option::Option<i64>);
        _197 = _205;
        StorageDead(_205);
        StorageDead(_198);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        _210 = &mut ((*_1).1: state::perp_market::AMM);
        _209 = &mut (*_210);
        StorageLive(_211);
        _211 = _19;
        StorageLive(_212);
        StorageLive(_213);
        _213 = _18;
        _212 = Option::<u64>::Some(move _213);
        StorageDead(_213);
        StorageLive(_214);
        StorageLive(_215);
        _215 = _52;
        _214 = Option::<controller::position::PositionDirection>::Some(move _215);
        StorageDead(_215);
        StorageLive(_216);
        _216 = _197;
        _208 = update_mark_twap_from_estimates(move _209, move _211, move _212, move _214, move _216) -> [return: bb75, unwind continue];
    }

    bb73: {
        StorageLive(_202);
        _202 = ((_198 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_204);
        _204 = _202;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _204) -> [return: bb74, unwind continue];
    }

    bb74: {
        StorageDead(_204);
        StorageDead(_202);
        StorageDead(_198);
        goto -> bb479;
    }

    bb75: {
        StorageDead(_216);
        StorageDead(_214);
        StorageDead(_212);
        StorageDead(_211);
        StorageDead(_209);
        _207 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _208) -> [return: bb76, unwind continue];
    }

    bb76: {
        StorageDead(_208);
        _217 = discriminant(_207);
        switchInt(move _217) -> [0: bb77, 1: bb78, otherwise: bb10];
    }

    bb77: {
        StorageLive(_221);
        _221 = ((_207 as Continue).0: u64);
        _206 = _221;
        StorageDead(_221);
        StorageDead(_210);
        StorageDead(_207);
        StorageDead(_206);
        StorageLive(_222);
        _222 = const 0_u64;
        StorageLive(_223);
        _223 = const 0_u64;
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        _227 = &mut (*_1);
        StorageLive(_228);
        _228 = _52;
        StorageLive(_229);
        _229 = _18;
        StorageLive(_230);
        _230 = _16;
        StorageLive(_231);
        _231 = _179;
        StorageLive(_232);
        _232 = _100;
        StorageLive(_233);
        _233 = _135;
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        _238 = _4;
        _239 = Len(((*_2).5: [state::user::Order; 32]));
        _240 = Lt(_238, _239);
        assert(move _240, "index out of bounds: the length is {} but the index is {}", move _239, _238) -> [success: bb80, unwind continue];
    }

    bb78: {
        StorageLive(_218);
        _218 = ((_207 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_220);
        _220 = _218;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _220) -> [return: bb79, unwind continue];
    }

    bb79: {
        StorageDead(_220);
        StorageDead(_218);
        StorageDead(_210);
        StorageDead(_207);
        StorageDead(_206);
        goto -> bb479;
    }

    bb80: {
        _237 = ((*_2).5: [state::user::Order; 32])[_238];
        StorageLive(_241);
        _241 = _20;
        _236 = Order::has_limit_price(move _237, move _241) -> [return: bb81, unwind continue];
    }

    bb81: {
        StorageDead(_241);
        StorageDead(_237);
        _235 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _236) -> [return: bb82, unwind continue];
    }

    bb82: {
        StorageDead(_236);
        _242 = discriminant(_235);
        switchInt(move _242) -> [0: bb83, 1: bb84, otherwise: bb10];
    }

    bb83: {
        StorageLive(_246);
        _246 = ((_235 as Continue).0: bool);
        _234 = _246;
        StorageDead(_246);
        _226 = calculate_amm_jit_liquidity(move _227, move _228, move _229, move _230, move _231, move _232, move _233, move _234) -> [return: bb86, unwind continue];
    }

    bb84: {
        StorageLive(_243);
        _243 = ((_235 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_245);
        _245 = _243;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _245) -> [return: bb85, unwind continue];
    }

    bb85: {
        StorageDead(_245);
        StorageDead(_243);
        StorageDead(_234);
        StorageDead(_233);
        StorageDead(_232);
        StorageDead(_231);
        StorageDead(_230);
        StorageDead(_229);
        StorageDead(_228);
        StorageDead(_227);
        StorageDead(_226);
        goto -> bb477;
    }

    bb86: {
        StorageDead(_234);
        StorageDead(_233);
        StorageDead(_232);
        StorageDead(_231);
        StorageDead(_230);
        StorageDead(_229);
        StorageDead(_228);
        StorageDead(_227);
        _225 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _226) -> [return: bb87, unwind continue];
    }

    bb87: {
        StorageDead(_226);
        _247 = discriminant(_225);
        switchInt(move _247) -> [0: bb88, 1: bb89, otherwise: bb10];
    }

    bb88: {
        StorageLive(_251);
        _251 = ((_225 as Continue).0: u64);
        _224 = _251;
        StorageDead(_251);
        StorageDead(_238);
        StorageDead(_235);
        StorageDead(_225);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        _254 = _224;
        _253 = Gt(move _254, const 0_u64);
        switchInt(move _253) -> [0: bb92, otherwise: bb91];
    }

    bb89: {
        StorageLive(_248);
        _248 = ((_225 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_250);
        _250 = _248;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _250) -> [return: bb90, unwind continue];
    }

    bb90: {
        StorageDead(_250);
        StorageDead(_248);
        goto -> bb477;
    }

    bb91: {
        StorageDead(_254);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        _260 = &mut (*_2);
        StorageLive(_261);
        _261 = &mut (*_3);
        StorageLive(_262);
        _262 = _4;
        StorageLive(_263);
        _263 = &mut (*_1);
        StorageLive(_264);
        _264 = &mut (*_22);
        StorageLive(_265);
        _265 = _15;
        StorageLive(_266);
        _266 = _19;
        StorageLive(_267);
        _267 = _20;
        StorageLive(_268);
        _268 = &(*_5);
        StorageLive(_269);
        _269 = &(*_12);
        StorageLive(_270);
        _270 = &mut (*_10);
        StorageLive(_271);
        _271 = &mut (*_11);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        _274 = Option::<&mut User>::None;
        _273 = &mut _274;
        _272 = &mut (*_273);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        _277 = Option::<&mut UserStats>::None;
        _276 = &mut _277;
        _275 = &mut (*_276);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        _280 = Option::<&mut User>::None;
        _279 = &mut _280;
        _278 = &mut (*_279);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        _283 = Option::<&mut UserStats>::None;
        _282 = &mut _283;
        _281 = &mut (*_282);
        StorageLive(_284);
        _284 = &(*_21);
        StorageLive(_285);
        _285 = _17;
        StorageLive(_286);
        StorageLive(_287);
        _287 = _224;
        _286 = Option::<u64>::Some(move _287);
        StorageDead(_287);
        StorageLive(_288);
        StorageLive(_289);
        _289 = _18;
        _288 = Option::<u64>::Some(move _289);
        StorageDead(_289);
        StorageLive(_290);
        _290 = _23;
        _259 = fulfill_perp_order_with_amm(move _260, move _261, move _262, move _263, move _264, move _265, move _266, move _267, move _268, move _269, move _270, move _271, move _272, move _275, move _278, move _281, move _284, move _285, move _286, move _288, move _290) -> [return: bb93, unwind continue];
    }

    bb92: {
        StorageDead(_254);
        _252 = const ();
        goto -> bb98;
    }

    bb93: {
        StorageDead(_290);
        StorageDead(_288);
        StorageDead(_286);
        StorageDead(_285);
        StorageDead(_284);
        StorageDead(_281);
        StorageDead(_278);
        StorageDead(_275);
        StorageDead(_272);
        StorageDead(_271);
        StorageDead(_270);
        StorageDead(_269);
        StorageDead(_268);
        StorageDead(_267);
        StorageDead(_266);
        StorageDead(_265);
        StorageDead(_264);
        StorageDead(_263);
        StorageDead(_262);
        StorageDead(_261);
        StorageDead(_260);
        _258 = <std::result::Result<(u64, u64), error::ErrorCode> as Try>::branch(move _259) -> [return: bb94, unwind continue];
    }

    bb94: {
        StorageDead(_259);
        _291 = discriminant(_258);
        switchInt(move _291) -> [0: bb95, 1: bb96, otherwise: bb10];
    }

    bb95: {
        StorageLive(_295);
        _295 = ((_258 as Continue).0: (u64, u64));
        _257 = _295;
        StorageDead(_295);
        StorageLive(_255);
        _255 = (_257.0: u64);
        StorageLive(_256);
        _256 = (_257.1: u64);
        StorageDead(_283);
        StorageDead(_282);
        StorageDead(_280);
        StorageDead(_279);
        StorageDead(_277);
        StorageDead(_276);
        StorageDead(_274);
        StorageDead(_273);
        StorageDead(_258);
        StorageDead(_257);
        StorageLive(_296);
        _296 = _255;
        _223 = move _296;
        StorageDead(_296);
        StorageLive(_297);
        _297 = _256;
        _222 = move _297;
        _252 = const ();
        StorageDead(_297);
        StorageDead(_256);
        StorageDead(_255);
        goto -> bb98;
    }

    bb96: {
        StorageLive(_292);
        _292 = ((_258 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_294);
        _294 = _292;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _294) -> [return: bb97, unwind continue];
    }

    bb97: {
        StorageDead(_294);
        StorageDead(_292);
        StorageDead(_283);
        StorageDead(_282);
        StorageDead(_280);
        StorageDead(_279);
        StorageDead(_277);
        StorageDead(_276);
        StorageDead(_274);
        StorageDead(_273);
        StorageDead(_258);
        StorageDead(_257);
        StorageDead(_253);
        StorageDead(_252);
        goto -> bb478;
    }

    bb98: {
        StorageDead(_253);
        StorageDead(_252);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        _304 = &(*_2);
        StorageLive(_305);
        _305 = ((*_1).21: u16);
        _303 = User::get_perp_position(move _304, move _305) -> [return: bb99, unwind continue];
    }

    bb99: {
        StorageDead(_305);
        StorageDead(_304);
        _302 = <std::result::Result<&PerpPosition, error::ErrorCode> as Try>::branch(move _303) -> [return: bb100, unwind continue];
    }

    bb100: {
        StorageDead(_303);
        _306 = discriminant(_302);
        switchInt(move _306) -> [0: bb101, 1: bb102, otherwise: bb10];
    }

    bb101: {
        StorageLive(_310);
        _310 = ((_302 as Continue).0: &state::user::PerpPosition);
        _301 = _310;
        StorageDead(_310);
        StorageDead(_302);
        StorageLive(_311);
        _311 = ((*_301).1: i64);
        StorageLive(_312);
        StorageLive(_313);
        _313 = &(*_301);
        StorageLive(_314);
        _314 = _52;
        _312 = PerpPosition::get_existing_position_params_for_order_action(move _313, move _314) -> [return: bb104, unwind continue];
    }

    bb102: {
        StorageLive(_307);
        _307 = ((_302 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_309);
        _309 = _307;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _309) -> [return: bb103, unwind continue];
    }

    bb103: {
        StorageDead(_309);
        StorageDead(_307);
        StorageDead(_302);
        StorageDead(_301);
        StorageDead(_300);
        goto -> bb478;
    }

    bb104: {
        StorageDead(_314);
        StorageDead(_313);
        _300 = (move _311, move _312);
        StorageDead(_312);
        StorageDead(_311);
        StorageDead(_301);
        StorageLive(_298);
        _298 = (_300.0: i64);
        StorageLive(_299);
        _299 = (_300.1: std::option::Option<(u64, u64)>);
        StorageDead(_300);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        _319 = _4;
        _320 = Len(((*_2).5: [state::user::Order; 32]));
        _321 = Lt(_319, _320);
        assert(move _321, "index out of bounds: the length is {} but the index is {}", move _320, _319) -> [success: bb105, unwind continue];
    }

    bb105: {
        _318 = &((*_2).5: [state::user::Order; 32])[_319];
        StorageLive(_322);
        StorageLive(_323);
        _323 = _298;
        _322 = Option::<i64>::Some(move _323);
        StorageDead(_323);
        _317 = Order::get_base_asset_amount_unfilled(move _318, move _322) -> [return: bb106, unwind continue];
    }

    bb106: {
        StorageDead(_322);
        StorageDead(_318);
        _316 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _317) -> [return: bb107, unwind continue];
    }

    bb107: {
        StorageDead(_317);
        _324 = discriminant(_316);
        switchInt(move _324) -> [0: bb108, 1: bb109, otherwise: bb10];
    }

    bb108: {
        StorageLive(_328);
        _328 = ((_316 as Continue).0: u64);
        _315 = _328;
        StorageDead(_328);
        StorageDead(_319);
        StorageDead(_316);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        _334 = _135;
        StorageLive(_335);
        _335 = _18;
        StorageLive(_336);
        _336 = _315;
        StorageLive(_337);
        _337 = _114;
        _333 = calculate_fill_for_matched_orders(move _334, move _335, move _336, const _, move _337) -> [return: bb111, unwind continue];
    }

    bb109: {
        StorageLive(_325);
        _325 = ((_316 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_327);
        _327 = _325;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _327) -> [return: bb110, unwind continue];
    }

    bb110: {
        StorageDead(_327);
        StorageDead(_325);
        StorageDead(_319);
        StorageDead(_316);
        goto -> bb476;
    }

    bb111: {
        StorageDead(_337);
        StorageDead(_336);
        StorageDead(_335);
        StorageDead(_334);
        _332 = <std::result::Result<(u64, u64), error::ErrorCode> as Try>::branch(move _333) -> [return: bb112, unwind continue];
    }

    bb112: {
        StorageDead(_333);
        _338 = discriminant(_332);
        switchInt(move _338) -> [0: bb113, 1: bb114, otherwise: bb10];
    }

    bb113: {
        StorageLive(_342);
        _342 = ((_332 as Continue).0: (u64, u64));
        _331 = _342;
        StorageDead(_342);
        StorageLive(_329);
        _329 = (_331.0: u64);
        StorageLive(_330);
        _330 = (_331.1: u64);
        StorageDead(_332);
        StorageDead(_331);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        _346 = _330;
        StorageLive(_347);
        _347 = _329;
        StorageLive(_348);
        _348 = _52;
        StorageLive(_349);
        _349 = _56;
        _345 = math::orders::validate_fill_price(move _346, move _347, const _, move _348, move _349, const true) -> [return: bb116, unwind continue];
    }

    bb114: {
        StorageLive(_339);
        _339 = ((_332 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_341);
        _341 = _339;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _341) -> [return: bb115, unwind continue];
    }

    bb115: {
        StorageDead(_341);
        StorageDead(_339);
        StorageDead(_332);
        StorageDead(_331);
        goto -> bb476;
    }

    bb116: {
        StorageDead(_349);
        StorageDead(_348);
        StorageDead(_347);
        StorageDead(_346);
        _344 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _345) -> [return: bb117, unwind continue];
    }

    bb117: {
        StorageDead(_345);
        _350 = discriminant(_344);
        switchInt(move _350) -> [0: bb118, 1: bb119, otherwise: bb10];
    }

    bb118: {
        StorageLive(_354);
        _354 = ((_344 as Continue).0: ());
        _343 = _354;
        StorageDead(_354);
        StorageDead(_344);
        StorageDead(_343);
        StorageLive(_355);
        StorageLive(_356);
        StorageLive(_357);
        StorageLive(_358);
        _358 = _330;
        StorageLive(_359);
        _359 = _329;
        StorageLive(_360);
        _360 = _114;
        StorageLive(_361);
        _361 = _18;
        _357 = math::orders::validate_fill_price(move _358, move _359, const _, move _360, move _361, const false) -> [return: bb121, unwind continue];
    }

    bb119: {
        StorageLive(_351);
        _351 = ((_344 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_353);
        _353 = _351;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _353) -> [return: bb120, unwind continue];
    }

    bb120: {
        StorageDead(_353);
        StorageDead(_351);
        StorageDead(_344);
        StorageDead(_343);
        goto -> bb475;
    }

    bb121: {
        StorageDead(_361);
        StorageDead(_360);
        StorageDead(_359);
        StorageDead(_358);
        _356 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _357) -> [return: bb122, unwind continue];
    }

    bb122: {
        StorageDead(_357);
        _362 = discriminant(_356);
        switchInt(move _362) -> [0: bb123, 1: bb124, otherwise: bb10];
    }

    bb123: {
        StorageLive(_366);
        _366 = ((_356 as Continue).0: ());
        _355 = _366;
        StorageDead(_366);
        StorageDead(_356);
        StorageDead(_355);
        StorageLive(_367);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        _370 = _223;
        StorageLive(_371);
        _371 = _329;
        _369 = <u64 as SafeMath>::safe_add(move _370, move _371) -> [return: bb126, unwind continue];
    }

    bb124: {
        StorageLive(_363);
        _363 = ((_356 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_365);
        _365 = _363;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _365) -> [return: bb125, unwind continue];
    }

    bb125: {
        StorageDead(_365);
        StorageDead(_363);
        StorageDead(_356);
        StorageDead(_355);
        goto -> bb475;
    }

    bb126: {
        StorageDead(_371);
        StorageDead(_370);
        _368 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _369) -> [return: bb127, unwind continue];
    }

    bb127: {
        StorageDead(_369);
        _372 = discriminant(_368);
        switchInt(move _372) -> [0: bb128, 1: bb129, otherwise: bb10];
    }

    bb128: {
        StorageLive(_376);
        _376 = ((_368 as Continue).0: u64);
        _367 = _376;
        StorageDead(_376);
        _223 = move _367;
        StorageDead(_367);
        StorageDead(_368);
        StorageLive(_377);
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        _380 = _222;
        StorageLive(_381);
        _381 = _330;
        _379 = <u64 as SafeMath>::safe_add(move _380, move _381) -> [return: bb131, unwind continue];
    }

    bb129: {
        StorageLive(_373);
        _373 = ((_368 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_375);
        _375 = _373;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _375) -> [return: bb130, unwind continue];
    }

    bb130: {
        StorageDead(_375);
        StorageDead(_373);
        StorageDead(_367);
        StorageDead(_368);
        goto -> bb475;
    }

    bb131: {
        StorageDead(_381);
        StorageDead(_380);
        _378 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _379) -> [return: bb132, unwind continue];
    }

    bb132: {
        StorageDead(_379);
        _382 = discriminant(_378);
        switchInt(move _382) -> [0: bb133, 1: bb134, otherwise: bb10];
    }

    bb133: {
        StorageLive(_386);
        _386 = ((_378 as Continue).0: u64);
        _377 = _386;
        StorageDead(_386);
        _222 = move _377;
        StorageDead(_377);
        StorageDead(_378);
        StorageLive(_387);
        StorageLive(_388);
        StorageLive(_389);
        StorageLive(_390);
        StorageLive(_391);
        _391 = &((*_6).4: [state::user::PerpPosition; 8]);
        _390 = &(*_391);
        StorageLive(_392);
        StorageLive(_393);
        _393 = _8;
        _394 = Len(((*_6).5: [state::user::Order; 32]));
        _395 = Lt(_393, _394);
        assert(move _395, "index out of bounds: the length is {} but the index is {}", move _394, _393) -> [success: bb136, unwind continue];
    }

    bb134: {
        StorageLive(_383);
        _383 = ((_378 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_385);
        _385 = _383;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _385) -> [return: bb135, unwind continue];
    }

    bb135: {
        StorageDead(_385);
        StorageDead(_383);
        StorageDead(_377);
        StorageDead(_378);
        goto -> bb475;
    }

    bb136: {
        _392 = (((*_6).5: [state::user::Order; 32])[_393].11: u16);
        _389 = get_position_index(move _390, move _392) -> [return: bb137, unwind continue];
    }

    bb137: {
        StorageDead(_392);
        StorageDead(_390);
        _388 = <std::result::Result<usize, error::ErrorCode> as Try>::branch(move _389) -> [return: bb138, unwind continue];
    }

    bb138: {
        StorageDead(_389);
        _396 = discriminant(_388);
        switchInt(move _396) -> [0: bb139, 1: bb140, otherwise: bb10];
    }

    bb139: {
        StorageLive(_400);
        _400 = ((_388 as Continue).0: usize);
        _387 = _400;
        StorageDead(_400);
        StorageDead(_393);
        StorageDead(_391);
        StorageDead(_388);
        StorageLive(_401);
        StorageLive(_402);
        StorageLive(_403);
        StorageLive(_404);
        _404 = _329;
        StorageLive(_405);
        _405 = _330;
        StorageLive(_406);
        StorageLive(_407);
        _407 = _8;
        _408 = Len(((*_6).5: [state::user::Order; 32]));
        _409 = Lt(_407, _408);
        assert(move _409, "index out of bounds: the length is {} but the index is {}", move _408, _407) -> [success: bb142, unwind continue];
    }

    bb140: {
        StorageLive(_397);
        _397 = ((_388 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_399);
        _399 = _397;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _399) -> [return: bb141, unwind continue];
    }

    bb141: {
        StorageDead(_399);
        StorageDead(_397);
        StorageDead(_393);
        StorageDead(_391);
        StorageDead(_388);
        goto -> bb474;
    }

    bb142: {
        _406 = (((*_6).5: [state::user::Order; 32])[_407].17: controller::position::PositionDirection);
        _403 = math::orders::get_position_delta_for_fill(move _404, move _405, move _406) -> [return: bb143, unwind continue];
    }

    bb143: {
        StorageDead(_406);
        StorageDead(_405);
        StorageDead(_404);
        _402 = <std::result::Result<PositionDelta, error::ErrorCode> as Try>::branch(move _403) -> [return: bb144, unwind continue];
    }

    bb144: {
        StorageDead(_403);
        _410 = discriminant(_402);
        switchInt(move _410) -> [0: bb145, 1: bb146, otherwise: bb10];
    }

    bb145: {
        StorageLive(_414);
        _414 = move ((_402 as Continue).0: controller::position::PositionDelta);
        _401 = move _414;
        StorageDead(_414);
        StorageDead(_407);
        StorageDead(_402);
        StorageLive(_415);
        StorageLive(_416);
        StorageLive(_417);
        StorageLive(_418);
        StorageLive(_419);
        StorageLive(_420);
        _420 = _387;
        _421 = Len(((*_6).4: [state::user::PerpPosition; 8]));
        _422 = Lt(_420, _421);
        assert(move _422, "index out of bounds: the length is {} but the index is {}", move _421, _420) -> [success: bb148, unwind continue];
    }

    bb146: {
        StorageLive(_411);
        _411 = ((_402 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_413);
        _413 = _411;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _413) -> [return: bb147, unwind continue];
    }

    bb147: {
        StorageDead(_413);
        StorageDead(_411);
        StorageDead(_407);
        StorageDead(_402);
        goto -> bb473;
    }

    bb148: {
        _419 = &mut ((*_6).4: [state::user::PerpPosition; 8])[_420];
        _418 = &mut (*_419);
        StorageLive(_423);
        _423 = &mut (*_1);
        StorageLive(_424);
        StorageLive(_425);
        _425 = &_401;
        _424 = &(*_425);
        _417 = update_position_and_market(move _418, move _423, move _424) -> [return: bb149, unwind continue];
    }

    bb149: {
        StorageDead(_424);
        StorageDead(_423);
        StorageDead(_418);
        _416 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _417) -> [return: bb150, unwind continue];
    }

    bb150: {
        StorageDead(_417);
        _426 = discriminant(_416);
        switchInt(move _426) -> [0: bb151, 1: bb152, otherwise: bb10];
    }

    bb151: {
        StorageLive(_430);
        _430 = ((_416 as Continue).0: i64);
        _415 = _430;
        StorageDead(_430);
        StorageDead(_425);
        StorageDead(_420);
        StorageDead(_419);
        StorageDead(_416);
        StorageDead(_415);
        StorageLive(_431);
        _432 = discriminant((*_7));
        switchInt(move _432) -> [1: bb155, otherwise: bb154];
    }

    bb152: {
        StorageLive(_427);
        _427 = ((_416 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_429);
        _429 = _427;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _429) -> [return: bb153, unwind continue];
    }

    bb153: {
        StorageDead(_429);
        StorageDead(_427);
        StorageDead(_425);
        StorageDead(_420);
        StorageDead(_419);
        StorageDead(_416);
        StorageDead(_415);
        goto -> bb473;
    }

    bb154: {
        StorageLive(_446);
        StorageLive(_447);
        StorageLive(_448);
        StorageLive(_449);
        _449 = &mut (*_3);
        StorageLive(_450);
        _450 = ((*_1).30: u8);
        StorageLive(_451);
        _451 = _330;
        StorageLive(_452);
        _452 = _19;
        _448 = UserStats::update_maker_volume_30d(move _449, move _450, move _451, move _452) -> [return: bb161, unwind continue];
    }

    bb155: {
        StorageLive(_433);
        _433 = &mut (((*_7) as Some).0: &mut state::user::UserStats);
        StorageLive(_434);
        StorageLive(_435);
        StorageLive(_436);
        StorageLive(_437);
        _1102 = deref_copy (*_433);
        _437 = &mut (*_1102);
        StorageLive(_438);
        _438 = ((*_1).30: u8);
        StorageLive(_439);
        _439 = _330;
        StorageLive(_440);
        _440 = _19;
        _436 = UserStats::update_maker_volume_30d(move _437, move _438, move _439, move _440) -> [return: bb156, unwind continue];
    }

    bb156: {
        StorageDead(_440);
        StorageDead(_439);
        StorageDead(_438);
        StorageDead(_437);
        _435 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _436) -> [return: bb157, unwind continue];
    }

    bb157: {
        StorageDead(_436);
        _441 = discriminant(_435);
        switchInt(move _441) -> [0: bb158, 1: bb159, otherwise: bb10];
    }

    bb158: {
        StorageLive(_445);
        _445 = ((_435 as Continue).0: ());
        _434 = _445;
        StorageDead(_445);
        StorageDead(_435);
        StorageDead(_434);
        _431 = const ();
        StorageDead(_433);
        goto -> bb166;
    }

    bb159: {
        StorageLive(_442);
        _442 = ((_435 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_444);
        _444 = _442;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _444) -> [return: bb160, unwind continue];
    }

    bb160: {
        StorageDead(_444);
        StorageDead(_442);
        StorageDead(_435);
        StorageDead(_434);
        StorageDead(_433);
        goto -> bb472;
    }

    bb161: {
        StorageDead(_452);
        StorageDead(_451);
        StorageDead(_450);
        StorageDead(_449);
        _447 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _448) -> [return: bb162, unwind continue];
    }

    bb162: {
        StorageDead(_448);
        _453 = discriminant(_447);
        switchInt(move _453) -> [0: bb163, 1: bb164, otherwise: bb10];
    }

    bb163: {
        StorageLive(_457);
        _457 = ((_447 as Continue).0: ());
        _446 = _457;
        StorageDead(_457);
        StorageDead(_447);
        StorageDead(_446);
        _431 = const ();
        goto -> bb166;
    }

    bb164: {
        StorageLive(_454);
        _454 = ((_447 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_456);
        _456 = _454;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _456) -> [return: bb165, unwind continue];
    }

    bb165: {
        StorageDead(_456);
        StorageDead(_454);
        StorageDead(_447);
        StorageDead(_446);
        goto -> bb472;
    }

    bb166: {
        StorageDead(_431);
        StorageLive(_458);
        StorageLive(_459);
        StorageLive(_460);
        StorageLive(_461);
        StorageLive(_462);
        _462 = &((*_2).4: [state::user::PerpPosition; 8]);
        _461 = &(*_462);
        StorageLive(_463);
        StorageLive(_464);
        _464 = _4;
        _465 = Len(((*_2).5: [state::user::Order; 32]));
        _466 = Lt(_464, _465);
        assert(move _466, "index out of bounds: the length is {} but the index is {}", move _465, _464) -> [success: bb167, unwind continue];
    }

    bb167: {
        _463 = (((*_2).5: [state::user::Order; 32])[_464].11: u16);
        _460 = get_position_index(move _461, move _463) -> [return: bb168, unwind continue];
    }

    bb168: {
        StorageDead(_463);
        StorageDead(_461);
        _459 = <std::result::Result<usize, error::ErrorCode> as Try>::branch(move _460) -> [return: bb169, unwind continue];
    }

    bb169: {
        StorageDead(_460);
        _467 = discriminant(_459);
        switchInt(move _467) -> [0: bb170, 1: bb171, otherwise: bb10];
    }

    bb170: {
        StorageLive(_471);
        _471 = ((_459 as Continue).0: usize);
        _458 = _471;
        StorageDead(_471);
        StorageDead(_464);
        StorageDead(_462);
        StorageDead(_459);
        StorageLive(_472);
        StorageLive(_473);
        StorageLive(_474);
        StorageLive(_475);
        _475 = _329;
        StorageLive(_476);
        _476 = _330;
        StorageLive(_477);
        StorageLive(_478);
        _478 = _4;
        _479 = Len(((*_2).5: [state::user::Order; 32]));
        _480 = Lt(_478, _479);
        assert(move _480, "index out of bounds: the length is {} but the index is {}", move _479, _478) -> [success: bb173, unwind continue];
    }

    bb171: {
        StorageLive(_468);
        _468 = ((_459 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_470);
        _470 = _468;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _470) -> [return: bb172, unwind continue];
    }

    bb172: {
        StorageDead(_470);
        StorageDead(_468);
        StorageDead(_464);
        StorageDead(_462);
        StorageDead(_459);
        goto -> bb471;
    }

    bb173: {
        _477 = (((*_2).5: [state::user::Order; 32])[_478].17: controller::position::PositionDirection);
        _474 = math::orders::get_position_delta_for_fill(move _475, move _476, move _477) -> [return: bb174, unwind continue];
    }

    bb174: {
        StorageDead(_477);
        StorageDead(_476);
        StorageDead(_475);
        _473 = <std::result::Result<PositionDelta, error::ErrorCode> as Try>::branch(move _474) -> [return: bb175, unwind continue];
    }

    bb175: {
        StorageDead(_474);
        _481 = discriminant(_473);
        switchInt(move _481) -> [0: bb176, 1: bb177, otherwise: bb10];
    }

    bb176: {
        StorageLive(_485);
        _485 = move ((_473 as Continue).0: controller::position::PositionDelta);
        _472 = move _485;
        StorageDead(_485);
        StorageDead(_478);
        StorageDead(_473);
        StorageLive(_486);
        StorageLive(_487);
        StorageLive(_488);
        StorageLive(_489);
        StorageLive(_490);
        StorageLive(_491);
        _491 = _458;
        _492 = Len(((*_2).4: [state::user::PerpPosition; 8]));
        _493 = Lt(_491, _492);
        assert(move _493, "index out of bounds: the length is {} but the index is {}", move _492, _491) -> [success: bb179, unwind continue];
    }

    bb177: {
        StorageLive(_482);
        _482 = ((_473 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_484);
        _484 = _482;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _484) -> [return: bb178, unwind continue];
    }

    bb178: {
        StorageDead(_484);
        StorageDead(_482);
        StorageDead(_478);
        StorageDead(_473);
        goto -> bb470;
    }

    bb179: {
        _490 = &mut ((*_2).4: [state::user::PerpPosition; 8])[_491];
        _489 = &mut (*_490);
        StorageLive(_494);
        _494 = &mut (*_1);
        StorageLive(_495);
        StorageLive(_496);
        _496 = &_472;
        _495 = &(*_496);
        _488 = update_position_and_market(move _489, move _494, move _495) -> [return: bb180, unwind continue];
    }

    bb180: {
        StorageDead(_495);
        StorageDead(_494);
        StorageDead(_489);
        _487 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _488) -> [return: bb181, unwind continue];
    }

    bb181: {
        StorageDead(_488);
        _497 = discriminant(_487);
        switchInt(move _497) -> [0: bb182, 1: bb183, otherwise: bb10];
    }

    bb182: {
        StorageLive(_501);
        _501 = ((_487 as Continue).0: i64);
        _486 = _501;
        StorageDead(_501);
        StorageDead(_496);
        StorageDead(_491);
        StorageDead(_490);
        StorageDead(_487);
        StorageDead(_486);
        StorageLive(_502);
        StorageLive(_503);
        StorageLive(_504);
        StorageLive(_505);
        _505 = &mut (*_3);
        StorageLive(_506);
        _506 = ((*_1).29: u8);
        StorageLive(_507);
        _507 = _330;
        StorageLive(_508);
        _508 = _19;
        _504 = UserStats::update_taker_volume_30d(move _505, move _506, move _507, move _508) -> [return: bb185, unwind continue];
    }

    bb183: {
        StorageLive(_498);
        _498 = ((_487 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_500);
        _500 = _498;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _500) -> [return: bb184, unwind continue];
    }

    bb184: {
        StorageDead(_500);
        StorageDead(_498);
        StorageDead(_496);
        StorageDead(_491);
        StorageDead(_490);
        StorageDead(_487);
        StorageDead(_486);
        goto -> bb470;
    }

    bb185: {
        StorageDead(_508);
        StorageDead(_507);
        StorageDead(_506);
        StorageDead(_505);
        _503 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _504) -> [return: bb186, unwind continue];
    }

    bb186: {
        StorageDead(_504);
        _509 = discriminant(_503);
        switchInt(move _509) -> [0: bb187, 1: bb188, otherwise: bb10];
    }

    bb187: {
        StorageLive(_513);
        _513 = ((_503 as Continue).0: ());
        _502 = _513;
        StorageDead(_513);
        StorageDead(_503);
        StorageDead(_502);
        StorageLive(_514);
        StorageLive(_515);
        _515 = &mut (*_13);
        StorageLive(_516);
        _516 = ((*_1).21: u16);
        _514 = can_reward_user_with_perp_pnl(move _515, move _516) -> [return: bb190, unwind continue];
    }

    bb188: {
        StorageLive(_510);
        _510 = ((_503 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_512);
        _512 = _510;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _512) -> [return: bb189, unwind continue];
    }

    bb189: {
        StorageDead(_512);
        StorageDead(_510);
        StorageDead(_503);
        StorageDead(_502);
        goto -> bb470;
    }

    bb190: {
        StorageDead(_516);
        StorageDead(_515);
        StorageLive(_517);
        StorageLive(_518);
        _518 = &mut (*_10);
        StorageLive(_519);
        _519 = ((*_1).21: u16);
        _517 = can_reward_user_with_perp_pnl(move _518, move _519) -> [return: bb191, unwind continue];
    }

    bb191: {
        StorageDead(_519);
        StorageDead(_518);
        StorageLive(_520);
        StorageLive(_521);
        _521 = _517;
        switchInt(move _521) -> [0: bb198, otherwise: bb192];
    }

    bb192: {
        StorageLive(_522);
        StorageLive(_523);
        StorageLive(_524);
        _524 = _18;
        StorageLive(_525);
        _525 = _114;
        StorageLive(_526);
        _526 = _38;
        _523 = calculate_filler_multiplier_for_matched_orders(move _524, move _525, move _526) -> [return: bb193, unwind continue];
    }

    bb193: {
        StorageDead(_526);
        StorageDead(_525);
        StorageDead(_524);
        _522 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _523) -> [return: bb194, unwind continue];
    }

    bb194: {
        StorageDead(_523);
        _527 = discriminant(_522);
        switchInt(move _527) -> [0: bb195, 1: bb196, otherwise: bb10];
    }

    bb195: {
        StorageLive(_531);
        _531 = ((_522 as Continue).0: u64);
        _520 = _531;
        StorageDead(_531);
        StorageDead(_522);
        goto -> bb199;
    }

    bb196: {
        StorageLive(_528);
        _528 = ((_522 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_530);
        _530 = _528;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _530) -> [return: bb197, unwind continue];
    }

    bb197: {
        StorageDead(_530);
        StorageDead(_528);
        StorageDead(_522);
        StorageDead(_521);
        goto -> bb469;
    }

    bb198: {
        _520 = const 0_u64;
        goto -> bb199;
    }

    bb199: {
        StorageDead(_521);
        StorageLive(_538);
        StorageLive(_539);
        StorageLive(_540);
        StorageLive(_541);
        _541 = &(*_3);
        StorageLive(_542);
        _542 = &(*_7);
        StorageLive(_543);
        _543 = _330;
        StorageLive(_544);
        _544 = &(*_21);
        StorageLive(_545);
        StorageLive(_546);
        _546 = _4;
        _547 = Len(((*_2).5: [state::user::Order; 32]));
        _548 = Lt(_546, _547);
        assert(move _548, "index out of bounds: the length is {} but the index is {}", move _547, _546) -> [success: bb200, unwind continue];
    }

    bb200: {
        _545 = (((*_2).5: [state::user::Order; 32])[_546].0: u64);
        StorageLive(_549);
        _549 = _20;
        StorageLive(_550);
        _550 = _520;
        StorageLive(_551);
        _551 = _514;
        StorageLive(_552);
        _552 = &(*_14);
        StorageLive(_553);
        StorageLive(_554);
        _1100 = const _;
        _554 = &(*_1100);
        _553 = &(*_554);
        StorageLive(_556);
        _556 = ((*_1).27: i16);
        StorageLive(_557);
        StorageLive(_558);
        _558 = &(*_2);
        StorageLive(_559);
        _559 = math::margin::MarginRequirementType::Initial;
        _557 = User::is_high_leverage_mode(move _558, move _559) -> [return: bb201, unwind continue];
    }

    bb201: {
        StorageDead(_559);
        StorageDead(_558);
        _540 = calculate_fee_for_fulfillment_with_match(move _541, move _542, move _543, move _544, move _545, move _549, move _550, move _551, move _552, move _553, move _556, move _557) -> [return: bb202, unwind continue];
    }

    bb202: {
        StorageDead(_557);
        StorageDead(_556);
        StorageDead(_553);
        StorageDead(_552);
        StorageDead(_551);
        StorageDead(_550);
        StorageDead(_549);
        StorageDead(_545);
        StorageDead(_544);
        StorageDead(_543);
        StorageDead(_542);
        StorageDead(_541);
        _539 = <std::result::Result<FillFees, error::ErrorCode> as Try>::branch(move _540) -> [return: bb203, unwind continue];
    }

    bb203: {
        StorageDead(_540);
        _560 = discriminant(_539);
        switchInt(move _560) -> [0: bb204, 1: bb205, otherwise: bb10];
    }

    bb204: {
        StorageLive(_564);
        _564 = move ((_539 as Continue).0: math::fees::FillFees);
        _538 = move _564;
        StorageDead(_564);
        StorageLive(_532);
        _532 = (_538.0: u64);
        StorageLive(_533);
        _533 = (_538.1: u64);
        StorageLive(_534);
        _534 = (_538.2: i64);
        StorageLive(_535);
        _535 = (_538.4: u64);
        StorageLive(_536);
        _536 = (_538.5: u64);
        StorageLive(_537);
        _537 = (_538.6: u64);
        StorageDead(_554);
        StorageDead(_546);
        StorageDead(_539);
        StorageDead(_538);
        StorageLive(_565);
        StorageLive(_566);
        StorageLive(_567);
        StorageLive(_568);
        _568 = (((*_1).1: state::perp_market::AMM).28: i128);
        StorageLive(_569);
        StorageLive(_570);
        StorageLive(_571);
        StorageLive(_572);
        _572 = _534;
        _571 = <i64 as Cast>::cast::<i128>(move _572) -> [return: bb207, unwind continue];
    }

    bb205: {
        StorageLive(_561);
        _561 = ((_539 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_563);
        _563 = _561;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _563) -> [return: bb206, unwind continue];
    }

    bb206: {
        StorageDead(_563);
        StorageDead(_561);
        StorageDead(_554);
        StorageDead(_546);
        StorageDead(_539);
        StorageDead(_538);
        goto -> bb469;
    }

    bb207: {
        StorageDead(_572);
        _570 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _571) -> [return: bb208, unwind continue];
    }

    bb208: {
        StorageDead(_571);
        _573 = discriminant(_570);
        switchInt(move _573) -> [0: bb209, 1: bb210, otherwise: bb10];
    }

    bb209: {
        StorageLive(_577);
        _577 = ((_570 as Continue).0: i128);
        _569 = _577;
        StorageDead(_577);
        _567 = <i128 as SafeMath>::safe_add(move _568, move _569) -> [return: bb212, unwind continue];
    }

    bb210: {
        StorageLive(_574);
        _574 = ((_570 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_576);
        _576 = _574;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _576) -> [return: bb211, unwind continue];
    }

    bb211: {
        StorageDead(_576);
        StorageDead(_574);
        StorageDead(_569);
        StorageDead(_568);
        StorageDead(_567);
        goto -> bb467;
    }

    bb212: {
        StorageDead(_569);
        StorageDead(_568);
        _566 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _567) -> [return: bb213, unwind continue];
    }

    bb213: {
        StorageDead(_567);
        _578 = discriminant(_566);
        switchInt(move _578) -> [0: bb214, 1: bb215, otherwise: bb10];
    }

    bb214: {
        StorageLive(_582);
        _582 = ((_566 as Continue).0: i128);
        _565 = _582;
        StorageDead(_582);
        (((*_1).1: state::perp_market::AMM).28: i128) = move _565;
        StorageDead(_565);
        StorageDead(_570);
        StorageDead(_566);
        StorageLive(_583);
        StorageLive(_584);
        StorageLive(_585);
        StorageLive(_586);
        _586 = (((*_1).1: state::perp_market::AMM).30: u128);
        StorageLive(_587);
        StorageLive(_588);
        StorageLive(_589);
        StorageLive(_590);
        _590 = _534;
        _589 = <i64 as Cast>::cast::<u128>(move _590) -> [return: bb217, unwind continue];
    }

    bb215: {
        StorageLive(_579);
        _579 = ((_566 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_581);
        _581 = _579;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _581) -> [return: bb216, unwind continue];
    }

    bb216: {
        StorageDead(_581);
        StorageDead(_579);
        goto -> bb467;
    }

    bb217: {
        StorageDead(_590);
        _588 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _589) -> [return: bb218, unwind continue];
    }

    bb218: {
        StorageDead(_589);
        _591 = discriminant(_588);
        switchInt(move _591) -> [0: bb219, 1: bb220, otherwise: bb10];
    }

    bb219: {
        StorageLive(_595);
        _595 = ((_588 as Continue).0: u128);
        _587 = _595;
        StorageDead(_595);
        _585 = <u128 as SafeMath>::safe_add(move _586, move _587) -> [return: bb222, unwind continue];
    }

    bb220: {
        StorageLive(_592);
        _592 = ((_588 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_594);
        _594 = _592;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _594) -> [return: bb221, unwind continue];
    }

    bb221: {
        StorageDead(_594);
        StorageDead(_592);
        StorageDead(_587);
        StorageDead(_586);
        StorageDead(_585);
        goto -> bb466;
    }

    bb222: {
        StorageDead(_587);
        StorageDead(_586);
        _584 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _585) -> [return: bb223, unwind continue];
    }

    bb223: {
        StorageDead(_585);
        _596 = discriminant(_584);
        switchInt(move _596) -> [0: bb224, 1: bb225, otherwise: bb10];
    }

    bb224: {
        StorageLive(_600);
        _600 = ((_584 as Continue).0: u128);
        _583 = _600;
        StorageDead(_600);
        (((*_1).1: state::perp_market::AMM).30: u128) = move _583;
        StorageDead(_583);
        StorageDead(_588);
        StorageDead(_584);
        StorageLive(_601);
        StorageLive(_602);
        StorageLive(_603);
        StorageLive(_604);
        _604 = (((*_1).1: state::perp_market::AMM).31: i128);
        StorageLive(_605);
        StorageLive(_606);
        StorageLive(_607);
        StorageLive(_608);
        _608 = _534;
        _607 = <i64 as Cast>::cast::<i128>(move _608) -> [return: bb227, unwind continue];
    }

    bb225: {
        StorageLive(_597);
        _597 = ((_584 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_599);
        _599 = _597;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _599) -> [return: bb226, unwind continue];
    }

    bb226: {
        StorageDead(_599);
        StorageDead(_597);
        goto -> bb466;
    }

    bb227: {
        StorageDead(_608);
        _606 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _607) -> [return: bb228, unwind continue];
    }

    bb228: {
        StorageDead(_607);
        _609 = discriminant(_606);
        switchInt(move _609) -> [0: bb229, 1: bb230, otherwise: bb10];
    }

    bb229: {
        StorageLive(_613);
        _613 = ((_606 as Continue).0: i128);
        _605 = _613;
        StorageDead(_613);
        _603 = <i128 as SafeMath>::safe_add(move _604, move _605) -> [return: bb232, unwind continue];
    }

    bb230: {
        StorageLive(_610);
        _610 = ((_606 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_612);
        _612 = _610;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _612) -> [return: bb231, unwind continue];
    }

    bb231: {
        StorageDead(_612);
        StorageDead(_610);
        StorageDead(_605);
        StorageDead(_604);
        StorageDead(_603);
        goto -> bb465;
    }

    bb232: {
        StorageDead(_605);
        StorageDead(_604);
        _602 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _603) -> [return: bb233, unwind continue];
    }

    bb233: {
        StorageDead(_603);
        _614 = discriminant(_602);
        switchInt(move _614) -> [0: bb234, 1: bb235, otherwise: bb10];
    }

    bb234: {
        StorageLive(_618);
        _618 = ((_602 as Continue).0: i128);
        _601 = _618;
        StorageDead(_618);
        (((*_1).1: state::perp_market::AMM).31: i128) = move _601;
        StorageDead(_601);
        StorageDead(_606);
        StorageDead(_602);
        StorageLive(_619);
        StorageLive(_620);
        StorageLive(_621);
        StorageLive(_622);
        _622 = (((*_1).1: state::perp_market::AMM).49: i64);
        StorageLive(_623);
        _623 = _534;
        _621 = <i64 as SafeMath>::safe_add(move _622, move _623) -> [return: bb237, unwind continue];
    }

    bb235: {
        StorageLive(_615);
        _615 = ((_602 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_617);
        _617 = _615;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _617) -> [return: bb236, unwind continue];
    }

    bb236: {
        StorageDead(_617);
        StorageDead(_615);
        goto -> bb465;
    }

    bb237: {
        StorageDead(_623);
        StorageDead(_622);
        _620 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _621) -> [return: bb238, unwind continue];
    }

    bb238: {
        StorageDead(_621);
        _624 = discriminant(_620);
        switchInt(move _624) -> [0: bb239, 1: bb240, otherwise: bb10];
    }

    bb239: {
        StorageLive(_628);
        _628 = ((_620 as Continue).0: i64);
        _619 = _628;
        StorageDead(_628);
        (((*_1).1: state::perp_market::AMM).49: i64) = move _619;
        StorageDead(_619);
        StorageDead(_620);
        StorageLive(_629);
        StorageLive(_630);
        StorageLive(_631);
        StorageLive(_632);
        StorageLive(_633);
        StorageLive(_634);
        _634 = _458;
        _635 = Len(((*_2).4: [state::user::PerpPosition; 8]));
        _636 = Lt(_634, _635);
        assert(move _636, "index out of bounds: the length is {} but the index is {}", move _635, _634) -> [success: bb242, unwind continue];
    }

    bb240: {
        StorageLive(_625);
        _625 = ((_620 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_627);
        _627 = _625;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _627) -> [return: bb241, unwind continue];
    }

    bb241: {
        StorageDead(_627);
        StorageDead(_625);
        StorageDead(_619);
        StorageDead(_620);
        goto -> bb468;
    }

    bb242: {
        _633 = &mut ((*_2).4: [state::user::PerpPosition; 8])[_634];
        _632 = &mut (*_633);
        StorageLive(_637);
        _637 = &mut (*_1);
        StorageLive(_638);
        StorageLive(_639);
        StorageLive(_640);
        StorageLive(_641);
        StorageLive(_642);
        _642 = _532;
        _641 = <u64 as Cast>::cast::<i64>(move _642) -> [return: bb243, unwind continue];
    }

    bb243: {
        StorageDead(_642);
        _640 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _641) -> [return: bb244, unwind continue];
    }

    bb244: {
        StorageDead(_641);
        _643 = discriminant(_640);
        switchInt(move _643) -> [0: bb245, 1: bb246, otherwise: bb10];
    }

    bb245: {
        StorageLive(_647);
        _647 = ((_640 as Continue).0: i64);
        _639 = _647;
        StorageDead(_647);
        _648 = Eq(_639, const i64::MIN);
        assert(!move _648, "attempt to negate `{}`, which would overflow", _639) -> [success: bb248, unwind continue];
    }

    bb246: {
        StorageLive(_644);
        _644 = ((_640 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_646);
        _646 = _644;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _646) -> [return: bb247, unwind continue];
    }

    bb247: {
        StorageDead(_646);
        StorageDead(_644);
        StorageDead(_639);
        StorageDead(_638);
        StorageDead(_637);
        StorageDead(_632);
        StorageDead(_631);
        goto -> bb464;
    }

    bb248: {
        _638 = Neg(move _639);
        StorageDead(_639);
        _631 = update_quote_asset_and_break_even_amount(move _632, move _637, move _638) -> [return: bb249, unwind continue];
    }

    bb249: {
        StorageDead(_638);
        StorageDead(_637);
        StorageDead(_632);
        _630 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _631) -> [return: bb250, unwind continue];
    }

    bb250: {
        StorageDead(_631);
        _649 = discriminant(_630);
        switchInt(move _649) -> [0: bb251, 1: bb252, otherwise: bb10];
    }

    bb251: {
        StorageLive(_653);
        _653 = ((_630 as Continue).0: ());
        _629 = _653;
        StorageDead(_653);
        StorageDead(_640);
        StorageDead(_634);
        StorageDead(_633);
        StorageDead(_630);
        StorageDead(_629);
        StorageLive(_654);
        StorageLive(_655);
        StorageLive(_656);
        StorageLive(_657);
        _657 = &mut (*_3);
        StorageLive(_658);
        _658 = _532;
        _656 = UserStats::increment_total_fees(move _657, move _658) -> [return: bb254, unwind continue];
    }

    bb252: {
        StorageLive(_650);
        _650 = ((_630 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_652);
        _652 = _650;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _652) -> [return: bb253, unwind continue];
    }

    bb253: {
        StorageDead(_652);
        StorageDead(_650);
        goto -> bb464;
    }

    bb254: {
        StorageDead(_658);
        StorageDead(_657);
        _655 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _656) -> [return: bb255, unwind continue];
    }

    bb255: {
        StorageDead(_656);
        _659 = discriminant(_655);
        switchInt(move _659) -> [0: bb256, 1: bb257, otherwise: bb10];
    }

    bb256: {
        StorageLive(_663);
        _663 = ((_655 as Continue).0: ());
        _654 = _663;
        StorageDead(_663);
        StorageDead(_655);
        StorageDead(_654);
        StorageLive(_664);
        StorageLive(_665);
        StorageLive(_666);
        StorageLive(_667);
        _667 = &mut (*_3);
        StorageLive(_668);
        _668 = _537;
        _666 = UserStats::increment_total_referee_discount(move _667, move _668) -> [return: bb259, unwind continue];
    }

    bb257: {
        StorageLive(_660);
        _660 = ((_655 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_662);
        _662 = _660;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _662) -> [return: bb258, unwind continue];
    }

    bb258: {
        StorageDead(_662);
        StorageDead(_660);
        StorageDead(_655);
        StorageDead(_654);
        goto -> bb468;
    }

    bb259: {
        StorageDead(_668);
        StorageDead(_667);
        _665 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _666) -> [return: bb260, unwind continue];
    }

    bb260: {
        StorageDead(_666);
        _669 = discriminant(_665);
        switchInt(move _669) -> [0: bb261, 1: bb262, otherwise: bb10];
    }

    bb261: {
        StorageLive(_673);
        _673 = ((_665 as Continue).0: ());
        _664 = _673;
        StorageDead(_673);
        StorageDead(_665);
        StorageDead(_664);
        StorageLive(_674);
        StorageLive(_675);
        StorageLive(_676);
        StorageLive(_677);
        StorageLive(_678);
        StorageLive(_679);
        _679 = _387;
        _680 = Len(((*_6).4: [state::user::PerpPosition; 8]));
        _681 = Lt(_679, _680);
        assert(move _681, "index out of bounds: the length is {} but the index is {}", move _680, _679) -> [success: bb264, unwind continue];
    }

    bb262: {
        StorageLive(_670);
        _670 = ((_665 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_672);
        _672 = _670;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _672) -> [return: bb263, unwind continue];
    }

    bb263: {
        StorageDead(_672);
        StorageDead(_670);
        StorageDead(_665);
        StorageDead(_664);
        goto -> bb468;
    }

    bb264: {
        _678 = &mut ((*_6).4: [state::user::PerpPosition; 8])[_679];
        _677 = &mut (*_678);
        StorageLive(_682);
        _682 = &mut (*_1);
        StorageLive(_683);
        StorageLive(_684);
        StorageLive(_685);
        StorageLive(_686);
        _686 = _533;
        _685 = <u64 as Cast>::cast::<i64>(move _686) -> [return: bb265, unwind continue];
    }

    bb265: {
        StorageDead(_686);
        _684 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _685) -> [return: bb266, unwind continue];
    }

    bb266: {
        StorageDead(_685);
        _687 = discriminant(_684);
        switchInt(move _687) -> [0: bb267, 1: bb268, otherwise: bb10];
    }

    bb267: {
        StorageLive(_691);
        _691 = ((_684 as Continue).0: i64);
        _683 = _691;
        StorageDead(_691);
        _676 = update_quote_asset_and_break_even_amount(move _677, move _682, move _683) -> [return: bb270, unwind continue];
    }

    bb268: {
        StorageLive(_688);
        _688 = ((_684 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_690);
        _690 = _688;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _690) -> [return: bb269, unwind continue];
    }

    bb269: {
        StorageDead(_690);
        StorageDead(_688);
        StorageDead(_683);
        StorageDead(_682);
        StorageDead(_677);
        StorageDead(_676);
        goto -> bb463;
    }

    bb270: {
        StorageDead(_683);
        StorageDead(_682);
        StorageDead(_677);
        _675 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _676) -> [return: bb271, unwind continue];
    }

    bb271: {
        StorageDead(_676);
        _692 = discriminant(_675);
        switchInt(move _692) -> [0: bb272, 1: bb273, otherwise: bb10];
    }

    bb272: {
        StorageLive(_696);
        _696 = ((_675 as Continue).0: ());
        _674 = _696;
        StorageDead(_696);
        StorageDead(_684);
        StorageDead(_679);
        StorageDead(_678);
        StorageDead(_675);
        StorageDead(_674);
        StorageLive(_697);
        _698 = discriminant((*_7));
        switchInt(move _698) -> [1: bb276, otherwise: bb275];
    }

    bb273: {
        StorageLive(_693);
        _693 = ((_675 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_695);
        _695 = _693;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _695) -> [return: bb274, unwind continue];
    }

    bb274: {
        StorageDead(_695);
        StorageDead(_693);
        goto -> bb463;
    }

    bb275: {
        StorageLive(_710);
        StorageLive(_711);
        StorageLive(_712);
        StorageLive(_713);
        _713 = &mut (*_3);
        StorageLive(_714);
        _714 = _533;
        _712 = UserStats::increment_total_rebate(move _713, move _714) -> [return: bb282, unwind continue];
    }

    bb276: {
        StorageLive(_699);
        _699 = &mut (((*_7) as Some).0: &mut state::user::UserStats);
        StorageLive(_700);
        StorageLive(_701);
        StorageLive(_702);
        StorageLive(_703);
        _1103 = deref_copy (*_699);
        _703 = &mut (*_1103);
        StorageLive(_704);
        _704 = _533;
        _702 = UserStats::increment_total_rebate(move _703, move _704) -> [return: bb277, unwind continue];
    }

    bb277: {
        StorageDead(_704);
        StorageDead(_703);
        _701 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _702) -> [return: bb278, unwind continue];
    }

    bb278: {
        StorageDead(_702);
        _705 = discriminant(_701);
        switchInt(move _705) -> [0: bb279, 1: bb280, otherwise: bb10];
    }

    bb279: {
        StorageLive(_709);
        _709 = ((_701 as Continue).0: ());
        _700 = _709;
        StorageDead(_709);
        StorageDead(_701);
        StorageDead(_700);
        _697 = const ();
        StorageDead(_699);
        goto -> bb287;
    }

    bb280: {
        StorageLive(_706);
        _706 = ((_701 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_708);
        _708 = _706;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _708) -> [return: bb281, unwind continue];
    }

    bb281: {
        StorageDead(_708);
        StorageDead(_706);
        StorageDead(_701);
        StorageDead(_700);
        StorageDead(_699);
        goto -> bb462;
    }

    bb282: {
        StorageDead(_714);
        StorageDead(_713);
        _711 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _712) -> [return: bb283, unwind continue];
    }

    bb283: {
        StorageDead(_712);
        _715 = discriminant(_711);
        switchInt(move _715) -> [0: bb284, 1: bb285, otherwise: bb10];
    }

    bb284: {
        StorageLive(_719);
        _719 = ((_711 as Continue).0: ());
        _710 = _719;
        StorageDead(_719);
        StorageDead(_711);
        StorageDead(_710);
        _697 = const ();
        goto -> bb287;
    }

    bb285: {
        StorageLive(_716);
        _716 = ((_711 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_718);
        _718 = _716;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _718) -> [return: bb286, unwind continue];
    }

    bb286: {
        StorageDead(_718);
        StorageDead(_716);
        StorageDead(_711);
        StorageDead(_710);
        goto -> bb462;
    }

    bb287: {
        StorageDead(_697);
        StorageLive(_720);
        _721 = discriminant((*_10));
        switchInt(move _721) -> [1: bb288, otherwise: bb321];
    }

    bb288: {
        StorageLive(_722);
        _722 = &mut (((*_10) as Some).0: &mut state::user::User);
        StorageLive(_723);
        StorageLive(_724);
        StorageLive(_725);
        _725 = _535;
        _724 = Gt(move _725, const 0_u64);
        switchInt(move _724) -> [0: bb318, otherwise: bb289];
    }

    bb289: {
        StorageDead(_725);
        StorageLive(_726);
        StorageLive(_727);
        StorageLive(_728);
        StorageLive(_729);
        StorageLive(_730);
        StorageLive(_731);
        _1104 = deref_copy (*_722);
        _731 = &((*_1104).4: [state::user::PerpPosition; 8]);
        _730 = &(*_731);
        StorageLive(_732);
        _732 = ((*_1).21: u16);
        _729 = get_position_index(move _730, move _732) -> [return: bb290, unwind continue];
    }

    bb290: {
        StorageDead(_732);
        StorageDead(_730);
        StorageLive(_733);
        StorageLive(_734);
        _734 = &mut _722;
        StorageLive(_735);
        _735 = &_1;
        _733 = {closure@programs/drift/src/controller/orders.rs:2773:89: 2773:92} { filler: move _734, market: move _735 };
        StorageDead(_735);
        StorageDead(_734);
        _728 = std::result::Result::<usize, error::ErrorCode>::or_else::<error::ErrorCode, {closure@programs/drift/src/controller/orders.rs:2773:89: 2773:92}>(move _729, move _733) -> [return: bb291, unwind continue];
    }

    bb291: {
        StorageDead(_733);
        StorageDead(_729);
        _727 = <std::result::Result<usize, error::ErrorCode> as Try>::branch(move _728) -> [return: bb292, unwind continue];
    }

    bb292: {
        StorageDead(_728);
        _736 = discriminant(_727);
        switchInt(move _736) -> [0: bb293, 1: bb294, otherwise: bb10];
    }

    bb293: {
        StorageLive(_740);
        _740 = ((_727 as Continue).0: usize);
        _726 = _740;
        StorageDead(_740);
        StorageDead(_731);
        StorageDead(_727);
        StorageLive(_741);
        StorageLive(_742);
        StorageLive(_743);
        StorageLive(_744);
        StorageLive(_745);
        StorageLive(_746);
        _746 = _726;
        _1105 = deref_copy (*_722);
        _747 = Len(((*_1105).4: [state::user::PerpPosition; 8]));
        _748 = Lt(_746, _747);
        assert(move _748, "index out of bounds: the length is {} but the index is {}", move _747, _746) -> [success: bb296, unwind continue];
    }

    bb294: {
        StorageLive(_737);
        _737 = ((_727 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_739);
        _739 = _737;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _739) -> [return: bb295, unwind continue];
    }

    bb295: {
        StorageDead(_739);
        StorageDead(_737);
        StorageDead(_731);
        StorageDead(_727);
        goto -> bb461;
    }

    bb296: {
        _1106 = deref_copy (*_722);
        _745 = &mut ((*_1106).4: [state::user::PerpPosition; 8])[_746];
        _744 = &mut (*_745);
        StorageLive(_749);
        _749 = &mut (*_1);
        StorageLive(_750);
        StorageLive(_751);
        StorageLive(_752);
        StorageLive(_753);
        _753 = _535;
        _752 = <u64 as Cast>::cast::<i64>(move _753) -> [return: bb297, unwind continue];
    }

    bb297: {
        StorageDead(_753);
        _751 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _752) -> [return: bb298, unwind continue];
    }

    bb298: {
        StorageDead(_752);
        _754 = discriminant(_751);
        switchInt(move _754) -> [0: bb299, 1: bb300, otherwise: bb10];
    }

    bb299: {
        StorageLive(_758);
        _758 = ((_751 as Continue).0: i64);
        _750 = _758;
        StorageDead(_758);
        _743 = update_quote_asset_amount(move _744, move _749, move _750) -> [return: bb302, unwind continue];
    }

    bb300: {
        StorageLive(_755);
        _755 = ((_751 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_757);
        _757 = _755;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _757) -> [return: bb301, unwind continue];
    }

    bb301: {
        StorageDead(_757);
        StorageDead(_755);
        StorageDead(_750);
        StorageDead(_749);
        StorageDead(_744);
        StorageDead(_743);
        goto -> bb460;
    }

    bb302: {
        StorageDead(_750);
        StorageDead(_749);
        StorageDead(_744);
        _742 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _743) -> [return: bb303, unwind continue];
    }

    bb303: {
        StorageDead(_743);
        _759 = discriminant(_742);
        switchInt(move _759) -> [0: bb304, 1: bb305, otherwise: bb10];
    }

    bb304: {
        StorageLive(_763);
        _763 = ((_742 as Continue).0: ());
        _741 = _763;
        StorageDead(_763);
        StorageDead(_751);
        StorageDead(_746);
        StorageDead(_745);
        StorageDead(_742);
        StorageDead(_741);
        StorageLive(_764);
        StorageLive(_765);
        StorageLive(_766);
        StorageLive(_767);
        StorageLive(_768);
        StorageLive(_769);
        StorageLive(_770);
        StorageLive(_771);
        StorageLive(_772);
        _772 = &mut (*_11);
        _771 = Option::<&mut UserStats>::as_mut(move _772) -> [return: bb307, unwind continue];
    }

    bb305: {
        StorageLive(_760);
        _760 = ((_742 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_762);
        _762 = _760;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _762) -> [return: bb306, unwind continue];
    }

    bb306: {
        StorageDead(_762);
        StorageDead(_760);
        goto -> bb460;
    }

    bb307: {
        StorageDead(_772);
        _770 = <Option<&mut &mut UserStats> as SafeUnwrap>::safe_unwrap(move _771) -> [return: bb308, unwind continue];
    }

    bb308: {
        StorageDead(_771);
        _769 = <std::result::Result<&mut &mut UserStats, error::ErrorCode> as Try>::branch(move _770) -> [return: bb309, unwind continue];
    }

    bb309: {
        StorageDead(_770);
        _773 = discriminant(_769);
        switchInt(move _773) -> [0: bb310, 1: bb311, otherwise: bb10];
    }

    bb310: {
        StorageLive(_777);
        _777 = move ((_769 as Continue).0: &mut &mut state::user::UserStats);
        _768 = move _777;
        StorageDead(_777);
        _1107 = deref_copy (*_768);
        _767 = &mut (*_1107);
        StorageLive(_778);
        _778 = _330;
        StorageLive(_779);
        _779 = _19;
        _766 = UserStats::update_filler_volume(move _767, move _778, move _779) -> [return: bb313, unwind continue];
    }

    bb311: {
        StorageLive(_774);
        _774 = ((_769 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_776);
        _776 = _774;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _776) -> [return: bb312, unwind continue];
    }

    bb312: {
        StorageDead(_776);
        StorageDead(_774);
        StorageDead(_767);
        StorageDead(_766);
        goto -> bb459;
    }

    bb313: {
        StorageDead(_779);
        StorageDead(_778);
        StorageDead(_767);
        _765 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _766) -> [return: bb314, unwind continue];
    }

    bb314: {
        StorageDead(_766);
        _780 = discriminant(_765);
        switchInt(move _780) -> [0: bb315, 1: bb316, otherwise: bb10];
    }

    bb315: {
        StorageLive(_784);
        _784 = ((_765 as Continue).0: ());
        _764 = _784;
        StorageDead(_784);
        StorageDead(_769);
        StorageDead(_768);
        StorageDead(_765);
        StorageDead(_764);
        _723 = const ();
        StorageDead(_726);
        goto -> bb319;
    }

    bb316: {
        StorageLive(_781);
        _781 = ((_765 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_783);
        _783 = _781;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _783) -> [return: bb317, unwind continue];
    }

    bb317: {
        StorageDead(_783);
        StorageDead(_781);
        goto -> bb459;
    }

    bb318: {
        StorageDead(_725);
        _723 = const ();
        goto -> bb319;
    }

    bb319: {
        StorageDead(_724);
        StorageDead(_723);
        StorageLive(_785);
        StorageLive(_786);
        _1108 = deref_copy (*_722);
        _786 = &mut (*_1108);
        StorageLive(_787);
        _787 = _20;
        _785 = User::update_last_active_slot(move _786, move _787) -> [return: bb320, unwind continue];
    }

    bb320: {
        StorageDead(_787);
        StorageDead(_786);
        StorageDead(_785);
        _720 = const ();
        StorageDead(_722);
        goto -> bb322;
    }

    bb321: {
        _720 = const ();
        goto -> bb322;
    }

    bb322: {
        StorageDead(_720);
        StorageLive(_788);
        StorageLive(_789);
        StorageLive(_790);
        StorageLive(_791);
        _791 = &mut (*_13);
        _790 = Option::<&mut User>::as_mut(move _791) -> [return: bb323, unwind continue];
    }

    bb323: {
        StorageDead(_791);
        StorageLive(_792);
        StorageLive(_793);
        _793 = &mut (*_14);
        _792 = Option::<&mut UserStats>::as_mut(move _793) -> [return: bb324, unwind continue];
    }

    bb324: {
        StorageDead(_793);
        _789 = (move _790, move _792);
        StorageDead(_792);
        StorageDead(_790);
        _795 = discriminant((_789.0: std::option::Option<&mut &mut state::user::User>));
        switchInt(move _795) -> [1: bb325, otherwise: bb349];
    }

    bb325: {
        _794 = discriminant((_789.1: std::option::Option<&mut &mut state::user::UserStats>));
        switchInt(move _794) -> [1: bb326, otherwise: bb349];
    }

    bb326: {
        StorageLive(_796);
        _796 = move (((_789.0: std::option::Option<&mut &mut state::user::User>) as Some).0: &mut &mut state::user::User);
        StorageLive(_797);
        _797 = move (((_789.1: std::option::Option<&mut &mut state::user::UserStats>) as Some).0: &mut &mut state::user::UserStats);
        StorageLive(_798);
        StorageLive(_799);
        _1109 = deref_copy (*_796);
        _799 = &mut (*_1109);
        StorageLive(_800);
        _800 = ((*_1).21: u16);
        _798 = User::force_get_perp_position_mut(move _799, move _800) -> [return: bb327, unwind continue];
    }

    bb327: {
        StorageDead(_800);
        StorageDead(_799);
        _801 = discriminant(_798);
        switchInt(move _801) -> [0: bb328, otherwise: bb347];
    }

    bb328: {
        StorageLive(_802);
        _802 = move ((_798 as Ok).0: &mut state::user::PerpPosition);
        StorageLive(_803);
        StorageLive(_804);
        StorageLive(_805);
        _805 = _536;
        _804 = Gt(move _805, const 0_u64);
        switchInt(move _804) -> [0: bb340, otherwise: bb329];
    }

    bb329: {
        StorageDead(_805);
        StorageLive(_806);
        StorageLive(_807);
        StorageLive(_808);
        StorageLive(_809);
        _809 = &mut (*_802);
        StorageLive(_810);
        _810 = &mut (*_1);
        StorageLive(_811);
        StorageLive(_812);
        StorageLive(_813);
        StorageLive(_814);
        _814 = _536;
        _813 = <u64 as Cast>::cast::<i64>(move _814) -> [return: bb330, unwind continue];
    }

    bb330: {
        StorageDead(_814);
        _812 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _813) -> [return: bb331, unwind continue];
    }

    bb331: {
        StorageDead(_813);
        _815 = discriminant(_812);
        switchInt(move _815) -> [0: bb332, 1: bb333, otherwise: bb10];
    }

    bb332: {
        StorageLive(_819);
        _819 = ((_812 as Continue).0: i64);
        _811 = _819;
        StorageDead(_819);
        _808 = update_quote_asset_amount(move _809, move _810, move _811) -> [return: bb335, unwind continue];
    }

    bb333: {
        StorageLive(_816);
        _816 = ((_812 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_818);
        _818 = _816;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _818) -> [return: bb334, unwind continue];
    }

    bb334: {
        StorageDead(_818);
        StorageDead(_816);
        StorageDead(_811);
        StorageDead(_810);
        StorageDead(_809);
        StorageDead(_808);
        goto -> bb457;
    }

    bb335: {
        StorageDead(_811);
        StorageDead(_810);
        StorageDead(_809);
        _807 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _808) -> [return: bb336, unwind continue];
    }

    bb336: {
        StorageDead(_808);
        _820 = discriminant(_807);
        switchInt(move _820) -> [0: bb337, 1: bb338, otherwise: bb10];
    }

    bb337: {
        StorageLive(_824);
        _824 = ((_807 as Continue).0: ());
        _806 = _824;
        StorageDead(_824);
        StorageDead(_812);
        StorageDead(_807);
        StorageDead(_806);
        _803 = const ();
        goto -> bb341;
    }

    bb338: {
        StorageLive(_821);
        _821 = ((_807 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_823);
        _823 = _821;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _823) -> [return: bb339, unwind continue];
    }

    bb339: {
        StorageDead(_823);
        StorageDead(_821);
        goto -> bb457;
    }

    bb340: {
        StorageDead(_805);
        _803 = const ();
        goto -> bb341;
    }

    bb341: {
        StorageDead(_804);
        StorageDead(_803);
        StorageLive(_825);
        StorageLive(_826);
        StorageLive(_827);
        StorageLive(_828);
        _1110 = deref_copy (*_797);
        _828 = &mut (*_1110);
        StorageLive(_829);
        _829 = _536;
        StorageLive(_830);
        _830 = _19;
        _827 = UserStats::increment_total_referrer_reward(move _828, move _829, move _830) -> [return: bb342, unwind continue];
    }

    bb342: {
        StorageDead(_830);
        StorageDead(_829);
        StorageDead(_828);
        _826 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _827) -> [return: bb343, unwind continue];
    }

    bb343: {
        StorageDead(_827);
        _831 = discriminant(_826);
        switchInt(move _831) -> [0: bb344, 1: bb345, otherwise: bb10];
    }

    bb344: {
        StorageLive(_835);
        _835 = ((_826 as Continue).0: ());
        _825 = _835;
        StorageDead(_835);
        StorageDead(_826);
        StorageDead(_825);
        _788 = const ();
        StorageDead(_802);
        goto -> bb348;
    }

    bb345: {
        StorageLive(_832);
        _832 = ((_826 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_834);
        _834 = _832;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _834) -> [return: bb346, unwind continue];
    }

    bb346: {
        StorageDead(_834);
        StorageDead(_832);
        StorageDead(_826);
        StorageDead(_825);
        goto -> bb458;
    }

    bb347: {
        _788 = const ();
        goto -> bb348;
    }

    bb348: {
        StorageDead(_798);
        StorageDead(_797);
        StorageDead(_796);
        goto -> bb350;
    }

    bb349: {
        _788 = const ();
        goto -> bb350;
    }

    bb350: {
        StorageDead(_789);
        StorageDead(_788);
        StorageLive(_836);
        StorageLive(_837);
        StorageLive(_838);
        StorageLive(_839);
        StorageLive(_840);
        StorageLive(_841);
        _841 = _4;
        _842 = Len(((*_2).5: [state::user::Order; 32]));
        _843 = Lt(_841, _842);
        assert(move _843, "index out of bounds: the length is {} but the index is {}", move _842, _841) -> [success: bb351, unwind continue];
    }

    bb351: {
        _840 = &mut ((*_2).5: [state::user::Order; 32])[_841];
        _839 = &mut (*_840);
        StorageLive(_844);
        _844 = _329;
        StorageLive(_845);
        _845 = _330;
        _838 = update_order_after_fill(move _839, move _844, move _845) -> [return: bb352, unwind continue];
    }

    bb352: {
        StorageDead(_845);
        StorageDead(_844);
        StorageDead(_839);
        _837 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _838) -> [return: bb353, unwind continue];
    }

    bb353: {
        StorageDead(_838);
        _846 = discriminant(_837);
        switchInt(move _846) -> [0: bb354, 1: bb355, otherwise: bb10];
    }

    bb354: {
        StorageLive(_850);
        _850 = ((_837 as Continue).0: ());
        _836 = _850;
        StorageDead(_850);
        StorageDead(_841);
        StorageDead(_840);
        StorageDead(_837);
        StorageDead(_836);
        StorageLive(_851);
        StorageLive(_852);
        StorageLive(_853);
        StorageLive(_854);
        StorageLive(_855);
        StorageLive(_856);
        _856 = _458;
        _857 = Len(((*_2).4: [state::user::PerpPosition; 8]));
        _858 = Lt(_856, _857);
        assert(move _858, "index out of bounds: the length is {} but the index is {}", move _857, _856) -> [success: bb357, unwind continue];
    }

    bb355: {
        StorageLive(_847);
        _847 = ((_837 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_849);
        _849 = _847;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _849) -> [return: bb356, unwind continue];
    }

    bb356: {
        StorageDead(_849);
        StorageDead(_847);
        StorageDead(_841);
        StorageDead(_840);
        StorageDead(_837);
        StorageDead(_836);
        goto -> bb468;
    }

    bb357: {
        _855 = &mut ((*_2).4: [state::user::PerpPosition; 8])[_856];
        _854 = &mut (*_855);
        StorageLive(_859);
        StorageLive(_860);
        StorageLive(_861);
        _861 = _4;
        _862 = Len(((*_2).5: [state::user::Order; 32]));
        _863 = Lt(_861, _862);
        assert(move _863, "index out of bounds: the length is {} but the index is {}", move _862, _861) -> [success: bb358, unwind continue];
    }

    bb358: {
        _860 = &(((*_2).5: [state::user::Order; 32])[_861].17: controller::position::PositionDirection);
        _859 = &(*_860);
        StorageLive(_864);
        _864 = _329;
        StorageLive(_865);
        StorageLive(_866);
        StorageLive(_867);
        _867 = _4;
        _868 = Len(((*_2).5: [state::user::Order; 32]));
        _869 = Lt(_867, _868);
        assert(move _869, "index out of bounds: the length is {} but the index is {}", move _868, _867) -> [success: bb359, unwind continue];
    }

    bb359: {
        _866 = &((*_2).5: [state::user::Order; 32])[_867];
        _865 = Order::update_open_bids_and_asks(move _866) -> [return: bb360, unwind continue];
    }

    bb360: {
        StorageDead(_866);
        _853 = decrease_open_bids_and_asks(move _854, move _859, move _864, move _865) -> [return: bb361, unwind continue];
    }

    bb361: {
        StorageDead(_865);
        StorageDead(_864);
        StorageDead(_859);
        StorageDead(_854);
        _852 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _853) -> [return: bb362, unwind continue];
    }

    bb362: {
        StorageDead(_853);
        _870 = discriminant(_852);
        switchInt(move _870) -> [0: bb363, 1: bb364, otherwise: bb10];
    }

    bb363: {
        StorageLive(_874);
        _874 = ((_852 as Continue).0: ());
        _851 = _874;
        StorageDead(_874);
        StorageDead(_867);
        StorageDead(_861);
        StorageDead(_860);
        StorageDead(_856);
        StorageDead(_855);
        StorageDead(_852);
        StorageDead(_851);
        StorageLive(_875);
        StorageLive(_876);
        StorageLive(_877);
        StorageLive(_878);
        StorageLive(_879);
        StorageLive(_880);
        _880 = _8;
        _881 = Len(((*_6).5: [state::user::Order; 32]));
        _882 = Lt(_880, _881);
        assert(move _882, "index out of bounds: the length is {} but the index is {}", move _881, _880) -> [success: bb366, unwind continue];
    }

    bb364: {
        StorageLive(_871);
        _871 = ((_852 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_873);
        _873 = _871;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _873) -> [return: bb365, unwind continue];
    }

    bb365: {
        StorageDead(_873);
        StorageDead(_871);
        StorageDead(_867);
        StorageDead(_861);
        StorageDead(_860);
        StorageDead(_856);
        StorageDead(_855);
        StorageDead(_852);
        StorageDead(_851);
        goto -> bb468;
    }

    bb366: {
        _879 = &mut ((*_6).5: [state::user::Order; 32])[_880];
        _878 = &mut (*_879);
        StorageLive(_883);
        _883 = _329;
        StorageLive(_884);
        _884 = _330;
        _877 = update_order_after_fill(move _878, move _883, move _884) -> [return: bb367, unwind continue];
    }

    bb367: {
        StorageDead(_884);
        StorageDead(_883);
        StorageDead(_878);
        _876 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _877) -> [return: bb368, unwind continue];
    }

    bb368: {
        StorageDead(_877);
        _885 = discriminant(_876);
        switchInt(move _885) -> [0: bb369, 1: bb370, otherwise: bb10];
    }

    bb369: {
        StorageLive(_889);
        _889 = ((_876 as Continue).0: ());
        _875 = _889;
        StorageDead(_889);
        StorageDead(_880);
        StorageDead(_879);
        StorageDead(_876);
        StorageDead(_875);
        StorageLive(_890);
        StorageLive(_891);
        StorageLive(_892);
        StorageLive(_893);
        StorageLive(_894);
        StorageLive(_895);
        _895 = _387;
        _896 = Len(((*_6).4: [state::user::PerpPosition; 8]));
        _897 = Lt(_895, _896);
        assert(move _897, "index out of bounds: the length is {} but the index is {}", move _896, _895) -> [success: bb372, unwind continue];
    }

    bb370: {
        StorageLive(_886);
        _886 = ((_876 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_888);
        _888 = _886;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _888) -> [return: bb371, unwind continue];
    }

    bb371: {
        StorageDead(_888);
        StorageDead(_886);
        StorageDead(_880);
        StorageDead(_879);
        StorageDead(_876);
        StorageDead(_875);
        goto -> bb468;
    }

    bb372: {
        _894 = &mut ((*_6).4: [state::user::PerpPosition; 8])[_895];
        _893 = &mut (*_894);
        StorageLive(_898);
        StorageLive(_899);
        StorageLive(_900);
        _900 = _8;
        _901 = Len(((*_6).5: [state::user::Order; 32]));
        _902 = Lt(_900, _901);
        assert(move _902, "index out of bounds: the length is {} but the index is {}", move _901, _900) -> [success: bb373, unwind continue];
    }

    bb373: {
        _899 = &(((*_6).5: [state::user::Order; 32])[_900].17: controller::position::PositionDirection);
        _898 = &(*_899);
        StorageLive(_903);
        _903 = _329;
        StorageLive(_904);
        StorageLive(_905);
        StorageLive(_906);
        _906 = _8;
        _907 = Len(((*_6).5: [state::user::Order; 32]));
        _908 = Lt(_906, _907);
        assert(move _908, "index out of bounds: the length is {} but the index is {}", move _907, _906) -> [success: bb374, unwind continue];
    }

    bb374: {
        _905 = &((*_6).5: [state::user::Order; 32])[_906];
        _904 = Order::update_open_bids_and_asks(move _905) -> [return: bb375, unwind continue];
    }

    bb375: {
        StorageDead(_905);
        _892 = decrease_open_bids_and_asks(move _893, move _898, move _903, move _904) -> [return: bb376, unwind continue];
    }

    bb376: {
        StorageDead(_904);
        StorageDead(_903);
        StorageDead(_898);
        StorageDead(_893);
        _891 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _892) -> [return: bb377, unwind continue];
    }

    bb377: {
        StorageDead(_892);
        _909 = discriminant(_891);
        switchInt(move _909) -> [0: bb378, 1: bb379, otherwise: bb10];
    }

    bb378: {
        StorageLive(_913);
        _913 = ((_891 as Continue).0: ());
        _890 = _913;
        StorageDead(_913);
        StorageDead(_906);
        StorageDead(_900);
        StorageDead(_899);
        StorageDead(_895);
        StorageDead(_894);
        StorageDead(_891);
        StorageDead(_890);
        StorageLive(_914);
        StorageLive(_915);
        _915 = ((*_1).8: u64);
        StorageLive(_916);
        StorageLive(_917);
        StorageLive(_918);
        StorageLive(_919);
        _919 = _915;
        _918 = core::num::<impl u64>::checked_add(move _919, const 1_u64) -> [return: bb381, unwind continue];
    }

    bb379: {
        StorageLive(_910);
        _910 = ((_891 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_912);
        _912 = _910;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _912) -> [return: bb380, unwind continue];
    }

    bb380: {
        StorageDead(_912);
        StorageDead(_910);
        StorageDead(_906);
        StorageDead(_900);
        StorageDead(_899);
        StorageDead(_895);
        StorageDead(_894);
        StorageDead(_891);
        StorageDead(_890);
        goto -> bb468;
    }

    bb381: {
        StorageDead(_919);
        StorageLive(_920);
        _920 = Option::<u64>::Some(const 1_u64);
        _917 = Option::<u64>::or(move _918, move _920) -> [return: bb382, unwind continue];
    }

    bb382: {
        StorageDead(_920);
        StorageDead(_918);
        _916 = Option::<u64>::unwrap(move _917) -> [return: bb383, unwind continue];
    }

    bb383: {
        StorageDead(_917);
        ((*_1).8: u64) = move _916;
        StorageDead(_916);
        _914 = _915;
        StorageDead(_915);
        StorageLive(_921);
        StorageLive(_922);
        _922 = _23;
        switchInt(move _922) -> [0: bb385, otherwise: bb384];
    }

    bb384: {
        _921 = OrderActionExplanation::Liquidation;
        goto -> bb391;
    }

    bb385: {
        StorageLive(_923);
        StorageLive(_924);
        StorageLive(_925);
        _925 = _8;
        _926 = Len(((*_6).5: [state::user::Order; 32]));
        _927 = Lt(_925, _926);
        assert(move _927, "index out of bounds: the length is {} but the index is {}", move _926, _925) -> [success: bb386, unwind continue];
    }

    bb386: {
        _924 = &((*_6).5: [state::user::Order; 32])[_925];
        _923 = Order::is_jit_maker(move _924) -> [return: bb387, unwind continue];
    }

    bb387: {
        switchInt(move _923) -> [0: bb389, otherwise: bb388];
    }

    bb388: {
        StorageDead(_925);
        StorageDead(_924);
        _921 = OrderActionExplanation::OrderFilledWithMatchJit;
        goto -> bb390;
    }

    bb389: {
        StorageDead(_925);
        StorageDead(_924);
        _921 = OrderActionExplanation::OrderFilledWithMatch;
        goto -> bb390;
    }

    bb390: {
        StorageDead(_923);
        goto -> bb391;
    }

    bb391: {
        StorageDead(_922);
        StorageLive(_928);
        _928 = const 0_u8;
        StorageLive(_929);
        StorageLive(_930);
        _930 = _928;
        StorageLive(_931);
        StorageLive(_932);
        StorageLive(_933);
        _933 = _4;
        _934 = Len(((*_2).5: [state::user::Order; 32]));
        _935 = Lt(_933, _934);
        assert(move _935, "index out of bounds: the length is {} but the index is {}", move _934, _933) -> [success: bb392, unwind continue];
    }

    bb392: {
        _932 = &((*_2).5: [state::user::Order; 32])[_933];
        _931 = Order::is_signed_msg(move _932) -> [return: bb393, unwind continue];
    }

    bb393: {
        StorageDead(_932);
        StorageLive(_936);
        _936 = OrderBitFlag::SignedMessage;
        _929 = math::orders::set_order_bit_flag(move _930, move _931, move _936) -> [return: bb394, unwind continue];
    }

    bb394: {
        StorageDead(_936);
        StorageDead(_931);
        StorageDead(_930);
        _928 = move _929;
        StorageDead(_929);
        StorageDead(_933);
        StorageLive(_939);
        StorageLive(_940);
        StorageLive(_941);
        StorageLive(_942);
        _942 = _329;
        StorageLive(_943);
        _943 = _299;
        _941 = math::orders::calculate_existing_position_fields_for_order_action(move _942, move _943) -> [return: bb395, unwind continue];
    }

    bb395: {
        StorageDead(_943);
        StorageDead(_942);
        _940 = <std::result::Result<(Option<u64>, Option<u64>), error::ErrorCode> as Try>::branch(move _941) -> [return: bb396, unwind continue];
    }

    bb396: {
        StorageDead(_941);
        _944 = discriminant(_940);
        switchInt(move _944) -> [0: bb397, 1: bb398, otherwise: bb10];
    }

    bb397: {
        StorageLive(_948);
        _948 = ((_940 as Continue).0: (std::option::Option<u64>, std::option::Option<u64>));
        _939 = _948;
        StorageDead(_948);
        StorageLive(_937);
        _937 = (_939.0: std::option::Option<u64>);
        StorageLive(_938);
        _938 = (_939.1: std::option::Option<u64>);
        StorageDead(_940);
        StorageDead(_939);
        StorageLive(_951);
        StorageLive(_952);
        StorageLive(_953);
        StorageLive(_954);
        _954 = _329;
        StorageLive(_955);
        _955 = _119;
        _953 = math::orders::calculate_existing_position_fields_for_order_action(move _954, move _955) -> [return: bb400, unwind continue];
    }

    bb398: {
        StorageLive(_945);
        _945 = ((_940 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_947);
        _947 = _945;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _947) -> [return: bb399, unwind continue];
    }

    bb399: {
        StorageDead(_947);
        StorageDead(_945);
        StorageDead(_940);
        StorageDead(_939);
        goto -> bb456;
    }

    bb400: {
        StorageDead(_955);
        StorageDead(_954);
        _952 = <std::result::Result<(Option<u64>, Option<u64>), error::ErrorCode> as Try>::branch(move _953) -> [return: bb401, unwind continue];
    }

    bb401: {
        StorageDead(_953);
        _956 = discriminant(_952);
        switchInt(move _956) -> [0: bb402, 1: bb403, otherwise: bb10];
    }

    bb402: {
        StorageLive(_960);
        _960 = ((_952 as Continue).0: (std::option::Option<u64>, std::option::Option<u64>));
        _951 = _960;
        StorageDead(_960);
        StorageLive(_949);
        _949 = (_951.0: std::option::Option<u64>);
        StorageLive(_950);
        _950 = (_951.1: std::option::Option<u64>);
        StorageDead(_952);
        StorageDead(_951);
        StorageLive(_961);
        StorageLive(_962);
        StorageLive(_963);
        StorageLive(_964);
        _964 = _19;
        StorageLive(_965);
        _965 = OrderAction::Fill;
        StorageLive(_966);
        _966 = _921;
        StorageLive(_967);
        _967 = ((*_1).21: u16);
        StorageLive(_968);
        StorageLive(_969);
        _969 = (*_12);
        _968 = Option::<anchor_lang::prelude::Pubkey>::Some(move _969);
        StorageDead(_969);
        StorageLive(_970);
        StorageLive(_971);
        _971 = _914;
        _970 = Option::<u64>::Some(move _971);
        StorageDead(_971);
        StorageLive(_972);
        StorageLive(_973);
        _973 = _535;
        _972 = Option::<u64>::Some(move _973);
        StorageDead(_973);
        StorageLive(_974);
        StorageLive(_975);
        _975 = _329;
        _974 = Option::<u64>::Some(move _975);
        StorageDead(_975);
        StorageLive(_976);
        StorageLive(_977);
        _977 = _330;
        _976 = Option::<u64>::Some(move _977);
        StorageDead(_977);
        StorageLive(_978);
        StorageLive(_979);
        _979 = _532;
        _978 = Option::<u64>::Some(move _979);
        StorageDead(_979);
        StorageLive(_980);
        StorageLive(_981);
        _981 = _533;
        _980 = Option::<u64>::Some(move _981);
        StorageDead(_981);
        StorageLive(_982);
        StorageLive(_983);
        _983 = _536;
        _982 = Option::<u64>::Some(move _983);
        StorageDead(_983);
        StorageLive(_984);
        _984 = Option::<i64>::None;
        StorageLive(_985);
        _985 = Option::<u64>::None;
        StorageLive(_986);
        StorageLive(_987);
        _987 = (*_5);
        _986 = Option::<anchor_lang::prelude::Pubkey>::Some(move _987);
        StorageDead(_987);
        StorageLive(_988);
        StorageLive(_989);
        StorageLive(_990);
        _990 = _4;
        _991 = Len(((*_2).5: [state::user::Order; 32]));
        _992 = Lt(_990, _991);
        assert(move _992, "index out of bounds: the length is {} but the index is {}", move _991, _990) -> [success: bb405, unwind continue];
    }

    bb403: {
        StorageLive(_957);
        _957 = ((_952 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_959);
        _959 = _957;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _959) -> [return: bb404, unwind continue];
    }

    bb404: {
        StorageDead(_959);
        StorageDead(_957);
        StorageDead(_952);
        StorageDead(_951);
        goto -> bb455;
    }

    bb405: {
        _989 = ((*_2).5: [state::user::Order; 32])[_990];
        _988 = Option::<Order>::Some(move _989);
        StorageDead(_989);
        StorageLive(_993);
        StorageLive(_994);
        _994 = (*_9);
        _993 = Option::<anchor_lang::prelude::Pubkey>::Some(move _994);
        StorageDead(_994);
        StorageLive(_995);
        StorageLive(_996);
        StorageLive(_997);
        _997 = _8;
        _998 = Len(((*_6).5: [state::user::Order; 32]));
        _999 = Lt(_997, _998);
        assert(move _999, "index out of bounds: the length is {} but the index is {}", move _998, _997) -> [success: bb406, unwind continue];
    }

    bb406: {
        _996 = ((*_6).5: [state::user::Order; 32])[_997];
        _995 = Option::<Order>::Some(move _996);
        StorageDead(_996);
        StorageLive(_1000);
        StorageLive(_1001);
        StorageLive(_1002);
        StorageLive(_1003);
        StorageLive(_1004);
        _1004 = &mut (*_22);
        StorageLive(_1005);
        StorageLive(_1006);
        StorageLive(_1007);
        StorageLive(_1008);
        _1008 = &(*_1);
        _1007 = PerpMarket::oracle_id(move _1008) -> [return: bb407, unwind continue];
    }

    bb407: {
        StorageDead(_1008);
        _1006 = &_1007;
        _1005 = &(*_1006);
        _1003 = OracleMap::<'_>::get_price_data(move _1004, move _1005) -> [return: bb408, unwind continue];
    }

    bb408: {
        StorageDead(_1005);
        StorageDead(_1004);
        _1002 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _1003) -> [return: bb409, unwind continue];
    }

    bb409: {
        StorageDead(_1003);
        _1009 = discriminant(_1002);
        switchInt(move _1009) -> [0: bb410, 1: bb411, otherwise: bb10];
    }

    bb410: {
        StorageLive(_1013);
        _1013 = ((_1002 as Continue).0: &state::oracle::OraclePriceData);
        _1001 = _1013;
        StorageDead(_1013);
        _1000 = ((*_1001).0: i64);
        StorageLive(_1014);
        _1014 = _928;
        StorageLive(_1015);
        _1015 = _937;
        StorageLive(_1016);
        _1016 = _938;
        StorageLive(_1017);
        _1017 = _949;
        StorageLive(_1018);
        _1018 = _950;
        StorageLive(_1019);
        _1019 = Option::<u64>::None;
        _963 = get_order_action_record(move _964, move _965, move _966, move _967, move _968, move _970, move _972, move _974, move _976, move _978, move _980, move _982, move _984, move _985, move _986, move _988, move _993, move _995, move _1000, move _1014, move _1015, move _1016, move _1017, move _1018, move _1019) -> [return: bb413, unwind continue];
    }

    bb411: {
        StorageLive(_1010);
        _1010 = ((_1002 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1012);
        _1012 = _1010;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1012) -> [return: bb412, unwind continue];
    }

    bb412: {
        StorageDead(_1012);
        StorageDead(_1010);
        StorageDead(_1000);
        StorageDead(_995);
        StorageDead(_993);
        StorageDead(_988);
        StorageDead(_986);
        StorageDead(_985);
        StorageDead(_984);
        StorageDead(_982);
        StorageDead(_980);
        StorageDead(_978);
        StorageDead(_976);
        StorageDead(_974);
        StorageDead(_972);
        StorageDead(_970);
        StorageDead(_968);
        StorageDead(_967);
        StorageDead(_966);
        StorageDead(_965);
        StorageDead(_964);
        StorageDead(_963);
        goto -> bb453;
    }

    bb413: {
        StorageDead(_1019);
        StorageDead(_1018);
        StorageDead(_1017);
        StorageDead(_1016);
        StorageDead(_1015);
        StorageDead(_1014);
        StorageDead(_1000);
        StorageDead(_995);
        StorageDead(_993);
        StorageDead(_988);
        StorageDead(_986);
        StorageDead(_985);
        StorageDead(_984);
        StorageDead(_982);
        StorageDead(_980);
        StorageDead(_978);
        StorageDead(_976);
        StorageDead(_974);
        StorageDead(_972);
        StorageDead(_970);
        StorageDead(_968);
        StorageDead(_967);
        StorageDead(_966);
        StorageDead(_965);
        StorageDead(_964);
        _962 = <std::result::Result<OrderActionRecord, error::ErrorCode> as Try>::branch(move _963) -> [return: bb414, unwind continue];
    }

    bb414: {
        StorageDead(_963);
        _1020 = discriminant(_962);
        switchInt(move _1020) -> [0: bb415, 1: bb416, otherwise: bb10];
    }

    bb415: {
        StorageLive(_1024);
        _1024 = move ((_962 as Continue).0: state::events::OrderActionRecord);
        _961 = move _1024;
        StorageDead(_1024);
        StorageDead(_1007);
        StorageDead(_1006);
        StorageDead(_1002);
        StorageDead(_1001);
        StorageDead(_997);
        StorageDead(_990);
        StorageDead(_962);
        StorageLive(_1025);
        StorageLive(_1026);
        StorageLive(_1027);
        StorageLive(_1028);
        _1028 = move _961;
        _1027 = emit_stack::<OrderActionRecord, 464>(move _1028) -> [return: bb418, unwind continue];
    }

    bb416: {
        StorageLive(_1021);
        _1021 = ((_962 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1023);
        _1023 = _1021;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1023) -> [return: bb417, unwind continue];
    }

    bb417: {
        StorageDead(_1023);
        StorageDead(_1021);
        goto -> bb453;
    }

    bb418: {
        StorageDead(_1028);
        _1026 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1027) -> [return: bb419, unwind continue];
    }

    bb419: {
        StorageDead(_1027);
        _1029 = discriminant(_1026);
        switchInt(move _1029) -> [0: bb420, 1: bb421, otherwise: bb10];
    }

    bb420: {
        StorageLive(_1033);
        _1033 = ((_1026 as Continue).0: ());
        _1025 = _1033;
        StorageDead(_1033);
        StorageDead(_1026);
        StorageDead(_1025);
        StorageLive(_1034);
        StorageLive(_1035);
        StorageLive(_1036);
        StorageLive(_1037);
        StorageLive(_1038);
        StorageLive(_1039);
        StorageLive(_1040);
        _1040 = _4;
        _1041 = Len(((*_2).5: [state::user::Order; 32]));
        _1042 = Lt(_1040, _1041);
        assert(move _1042, "index out of bounds: the length is {} but the index is {}", move _1041, _1040) -> [success: bb423, unwind continue];
    }

    bb421: {
        StorageLive(_1030);
        _1030 = ((_1026 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1032);
        _1032 = _1030;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1032) -> [return: bb422, unwind continue];
    }

    bb422: {
        StorageDead(_1032);
        StorageDead(_1030);
        StorageDead(_1026);
        StorageDead(_1025);
        goto -> bb454;
    }

    bb423: {
        _1039 = &((*_2).5: [state::user::Order; 32])[_1040];
        StorageLive(_1043);
        _1043 = Option::<i64>::None;
        _1038 = Order::get_base_asset_amount_unfilled(move _1039, move _1043) -> [return: bb424, unwind continue];
    }

    bb424: {
        StorageDead(_1043);
        StorageDead(_1039);
        _1037 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _1038) -> [return: bb425, unwind continue];
    }

    bb425: {
        StorageDead(_1038);
        _1044 = discriminant(_1037);
        switchInt(move _1044) -> [0: bb426, 1: bb427, otherwise: bb10];
    }

    bb426: {
        StorageLive(_1048);
        _1048 = ((_1037 as Continue).0: u64);
        _1036 = _1048;
        StorageDead(_1048);
        _1035 = Eq(move _1036, const 0_u64);
        switchInt(move _1035) -> [0: bb430, otherwise: bb429];
    }

    bb427: {
        StorageLive(_1045);
        _1045 = ((_1037 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1047);
        _1047 = _1045;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1047) -> [return: bb428, unwind continue];
    }

    bb428: {
        StorageDead(_1047);
        StorageDead(_1045);
        StorageDead(_1040);
        StorageDead(_1037);
        StorageDead(_1036);
        StorageDead(_1035);
        StorageDead(_1034);
        goto -> bb454;
    }

    bb429: {
        StorageDead(_1040);
        StorageDead(_1037);
        StorageDead(_1036);
        StorageLive(_1049);
        StorageLive(_1050);
        _1050 = &mut (*_2);
        StorageLive(_1051);
        StorageLive(_1052);
        StorageLive(_1053);
        _1053 = _4;
        _1054 = Len(((*_2).5: [state::user::Order; 32]));
        _1055 = Lt(_1053, _1054);
        assert(move _1055, "index out of bounds: the length is {} but the index is {}", move _1054, _1053) -> [success: bb431, unwind continue];
    }

    bb430: {
        StorageDead(_1040);
        StorageDead(_1037);
        StorageDead(_1036);
        _1034 = const ();
        goto -> bb437;
    }

    bb431: {
        _1052 = &((*_2).5: [state::user::Order; 32])[_1053];
        _1051 = Order::has_auction(move _1052) -> [return: bb432, unwind continue];
    }

    bb432: {
        StorageDead(_1052);
        _1049 = User::decrement_open_orders(move _1050, move _1051) -> [return: bb433, unwind continue];
    }

    bb433: {
        StorageDead(_1051);
        StorageDead(_1050);
        StorageDead(_1053);
        StorageDead(_1049);
        StorageLive(_1056);
        _1056 = OrderStatus::Filled;
        StorageLive(_1057);
        _1057 = _4;
        _1058 = Len(((*_2).5: [state::user::Order; 32]));
        _1059 = Lt(_1057, _1058);
        assert(move _1059, "index out of bounds: the length is {} but the index is {}", move _1058, _1057) -> [success: bb434, unwind continue];
    }

    bb434: {
        (((*_2).5: [state::user::Order; 32])[_1057].12: state::user::OrderStatus) = move _1056;
        StorageDead(_1056);
        StorageDead(_1057);
        StorageLive(_1060);
        StorageLive(_1061);
        _1061 = _458;
        _1062 = Len(((*_2).4: [state::user::PerpPosition; 8]));
        _1063 = Lt(_1061, _1062);
        assert(move _1063, "index out of bounds: the length is {} but the index is {}", move _1062, _1061) -> [success: bb435, unwind continue];
    }

    bb435: {
        _1060 = &mut ((*_2).4: [state::user::PerpPosition; 8])[_1061];
        _1064 = CheckedSub(((*_1060).14: u8), const 1_u8);
        assert(!move (_1064.1: bool), "attempt to compute `{} - {}`, which would overflow", ((*_1060).14: u8), const 1_u8) -> [success: bb436, unwind continue];
    }

    bb436: {
        ((*_1060).14: u8) = move (_1064.0: u8);
        _1034 = const ();
        StorageDead(_1061);
        StorageDead(_1060);
        goto -> bb437;
    }

    bb437: {
        StorageDead(_1035);
        StorageDead(_1034);
        StorageLive(_1065);
        StorageLive(_1066);
        StorageLive(_1067);
        StorageLive(_1068);
        StorageLive(_1069);
        StorageLive(_1070);
        StorageLive(_1071);
        _1071 = _8;
        _1072 = Len(((*_6).5: [state::user::Order; 32]));
        _1073 = Lt(_1071, _1072);
        assert(move _1073, "index out of bounds: the length is {} but the index is {}", move _1072, _1071) -> [success: bb438, unwind continue];
    }

    bb438: {
        _1070 = &((*_6).5: [state::user::Order; 32])[_1071];
        StorageLive(_1074);
        _1074 = Option::<i64>::None;
        _1069 = Order::get_base_asset_amount_unfilled(move _1070, move _1074) -> [return: bb439, unwind continue];
    }

    bb439: {
        StorageDead(_1074);
        StorageDead(_1070);
        _1068 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _1069) -> [return: bb440, unwind continue];
    }

    bb440: {
        StorageDead(_1069);
        _1075 = discriminant(_1068);
        switchInt(move _1075) -> [0: bb441, 1: bb442, otherwise: bb10];
    }

    bb441: {
        StorageLive(_1079);
        _1079 = ((_1068 as Continue).0: u64);
        _1067 = _1079;
        StorageDead(_1079);
        _1066 = Eq(move _1067, const 0_u64);
        switchInt(move _1066) -> [0: bb445, otherwise: bb444];
    }

    bb442: {
        StorageLive(_1076);
        _1076 = ((_1068 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1078);
        _1078 = _1076;
        _0 = <std::result::Result<(u64, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1078) -> [return: bb443, unwind continue];
    }

    bb443: {
        StorageDead(_1078);
        StorageDead(_1076);
        StorageDead(_1071);
        StorageDead(_1068);
        StorageDead(_1067);
        StorageDead(_1066);
        StorageDead(_1065);
        goto -> bb454;
    }

    bb444: {
        StorageDead(_1071);
        StorageDead(_1068);
        StorageDead(_1067);
        StorageLive(_1080);
        StorageLive(_1081);
        _1081 = &mut (*_6);
        StorageLive(_1082);
        StorageLive(_1083);
        StorageLive(_1084);
        _1084 = _8;
        _1085 = Len(((*_6).5: [state::user::Order; 32]));
        _1086 = Lt(_1084, _1085);
        assert(move _1086, "index out of bounds: the length is {} but the index is {}", move _1085, _1084) -> [success: bb446, unwind continue];
    }

    bb445: {
        StorageDead(_1071);
        StorageDead(_1068);
        StorageDead(_1067);
        _1065 = const ();
        goto -> bb452;
    }

    bb446: {
        _1083 = &((*_6).5: [state::user::Order; 32])[_1084];
        _1082 = Order::has_auction(move _1083) -> [return: bb447, unwind continue];
    }

    bb447: {
        StorageDead(_1083);
        _1080 = User::decrement_open_orders(move _1081, move _1082) -> [return: bb448, unwind continue];
    }

    bb448: {
        StorageDead(_1082);
        StorageDead(_1081);
        StorageDead(_1084);
        StorageDead(_1080);
        StorageLive(_1087);
        _1087 = OrderStatus::Filled;
        StorageLive(_1088);
        _1088 = _8;
        _1089 = Len(((*_6).5: [state::user::Order; 32]));
        _1090 = Lt(_1088, _1089);
        assert(move _1090, "index out of bounds: the length is {} but the index is {}", move _1089, _1088) -> [success: bb449, unwind continue];
    }

    bb449: {
        (((*_6).5: [state::user::Order; 32])[_1088].12: state::user::OrderStatus) = move _1087;
        StorageDead(_1087);
        StorageDead(_1088);
        StorageLive(_1091);
        StorageLive(_1092);
        _1092 = _387;
        _1093 = Len(((*_6).4: [state::user::PerpPosition; 8]));
        _1094 = Lt(_1092, _1093);
        assert(move _1094, "index out of bounds: the length is {} but the index is {}", move _1093, _1092) -> [success: bb450, unwind continue];
    }

    bb450: {
        _1091 = &mut ((*_6).4: [state::user::PerpPosition; 8])[_1092];
        _1095 = CheckedSub(((*_1091).14: u8), const 1_u8);
        assert(!move (_1095.1: bool), "attempt to compute `{} - {}`, which would overflow", ((*_1091).14: u8), const 1_u8) -> [success: bb451, unwind continue];
    }

    bb451: {
        ((*_1091).14: u8) = move (_1095.0: u8);
        _1065 = const ();
        StorageDead(_1092);
        StorageDead(_1091);
        goto -> bb452;
    }

    bb452: {
        StorageDead(_1066);
        StorageDead(_1065);
        StorageLive(_1096);
        StorageLive(_1097);
        _1097 = _223;
        StorageLive(_1098);
        _1098 = _222;
        StorageLive(_1099);
        _1099 = _329;
        _1096 = (move _1097, move _1098, move _1099);
        StorageDead(_1099);
        StorageDead(_1098);
        StorageDead(_1097);
        _0 = std::result::Result::<(u64, u64, u64), error::ErrorCode>::Ok(move _1096);
        StorageDead(_1096);
        StorageDead(_961);
        StorageDead(_950);
        StorageDead(_949);
        StorageDead(_938);
        StorageDead(_937);
        StorageDead(_928);
        StorageDead(_921);
        StorageDead(_914);
        StorageDead(_537);
        StorageDead(_536);
        StorageDead(_535);
        StorageDead(_534);
        StorageDead(_533);
        StorageDead(_532);
        StorageDead(_520);
        StorageDead(_517);
        StorageDead(_514);
        StorageDead(_472);
        StorageDead(_458);
        StorageDead(_401);
        StorageDead(_387);
        StorageDead(_330);
        StorageDead(_329);
        StorageDead(_315);
        StorageDead(_299);
        StorageDead(_298);
        StorageDead(_224);
        StorageDead(_223);
        StorageDead(_222);
        StorageDead(_197);
        StorageDead(_179);
        StorageDead(_149);
        StorageDead(_135);
        StorageDead(_119);
        StorageDead(_118);
        StorageDead(_114);
        StorageDead(_100);
        StorageDead(_89);
        StorageDead(_56);
        StorageDead(_52);
        StorageDead(_38);
        goto -> bb488;
    }

    bb453: {
        StorageDead(_1007);
        StorageDead(_1006);
        StorageDead(_1002);
        StorageDead(_1001);
        StorageDead(_997);
        StorageDead(_990);
        StorageDead(_962);
        goto -> bb454;
    }

    bb454: {
        StorageDead(_961);
        StorageDead(_950);
        StorageDead(_949);
        goto -> bb455;
    }

    bb455: {
        StorageDead(_938);
        StorageDead(_937);
        goto -> bb456;
    }

    bb456: {
        StorageDead(_928);
        StorageDead(_921);
        StorageDead(_914);
        goto -> bb468;
    }

    bb457: {
        StorageDead(_812);
        StorageDead(_807);
        StorageDead(_806);
        StorageDead(_804);
        StorageDead(_803);
        goto -> bb458;
    }

    bb458: {
        StorageDead(_802);
        StorageDead(_798);
        StorageDead(_797);
        StorageDead(_796);
        StorageDead(_789);
        StorageDead(_788);
        goto -> bb468;
    }

    bb459: {
        StorageDead(_769);
        StorageDead(_768);
        StorageDead(_765);
        StorageDead(_764);
        goto -> bb461;
    }

    bb460: {
        StorageDead(_751);
        StorageDead(_746);
        StorageDead(_745);
        StorageDead(_742);
        StorageDead(_741);
        goto -> bb461;
    }

    bb461: {
        StorageDead(_726);
        StorageDead(_724);
        StorageDead(_723);
        StorageDead(_722);
        StorageDead(_720);
        goto -> bb468;
    }

    bb462: {
        StorageDead(_697);
        goto -> bb468;
    }

    bb463: {
        StorageDead(_684);
        StorageDead(_679);
        StorageDead(_678);
        StorageDead(_675);
        StorageDead(_674);
        goto -> bb468;
    }

    bb464: {
        StorageDead(_640);
        StorageDead(_634);
        StorageDead(_633);
        StorageDead(_630);
        StorageDead(_629);
        goto -> bb468;
    }

    bb465: {
        StorageDead(_601);
        StorageDead(_606);
        StorageDead(_602);
        goto -> bb468;
    }

    bb466: {
        StorageDead(_583);
        StorageDead(_588);
        StorageDead(_584);
        goto -> bb468;
    }

    bb467: {
        StorageDead(_565);
        StorageDead(_570);
        StorageDead(_566);
        goto -> bb468;
    }

    bb468: {
        StorageDead(_537);
        StorageDead(_536);
        StorageDead(_535);
        StorageDead(_534);
        StorageDead(_533);
        StorageDead(_532);
        goto -> bb469;
    }

    bb469: {
        StorageDead(_520);
        StorageDead(_517);
        StorageDead(_514);
        goto -> bb470;
    }

    bb470: {
        StorageDead(_472);
        goto -> bb471;
    }

    bb471: {
        StorageDead(_458);
        goto -> bb473;
    }

    bb472: {
        StorageDead(_431);
        goto -> bb473;
    }

    bb473: {
        StorageDead(_401);
        goto -> bb474;
    }

    bb474: {
        StorageDead(_387);
        goto -> bb475;
    }

    bb475: {
        StorageDead(_330);
        StorageDead(_329);
        goto -> bb476;
    }

    bb476: {
        StorageDead(_315);
        StorageDead(_299);
        StorageDead(_298);
        goto -> bb478;
    }

    bb477: {
        StorageDead(_238);
        StorageDead(_235);
        StorageDead(_225);
        goto -> bb478;
    }

    bb478: {
        StorageDead(_224);
        StorageDead(_223);
        StorageDead(_222);
        goto -> bb479;
    }

    bb479: {
        StorageDead(_197);
        goto -> bb480;
    }

    bb480: {
        StorageDead(_179);
        goto -> bb481;
    }

    bb481: {
        StorageDead(_149);
        goto -> bb482;
    }

    bb482: {
        StorageDead(_135);
        StorageDead(_119);
        StorageDead(_118);
        goto -> bb483;
    }

    bb483: {
        StorageDead(_114);
        goto -> bb484;
    }

    bb484: {
        StorageDead(_100);
        goto -> bb485;
    }

    bb485: {
        StorageDead(_89);
        goto -> bb486;
    }

    bb486: {
        StorageDead(_56);
        StorageDead(_52);
        goto -> bb487;
    }

    bb487: {
        StorageDead(_38);
        goto -> bb488;
    }

    bb488: {
        return;
    }

    bb489 (cleanup): {
        drop(_161) -> [return: bb490, unwind terminate(cleanup)];
    }

    bb490 (cleanup): {
        resume;
    }
}
