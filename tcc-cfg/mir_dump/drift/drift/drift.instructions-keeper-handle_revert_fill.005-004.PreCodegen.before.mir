// MIR for `keeper::handle_revert_fill` before PreCodegen

fn keeper::handle_revert_fill(_1: anchor_lang::context::Context<'_, '_, '_, '_, keeper::RevertFill<'_>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: ();
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _4: std::result::Result<(), anchor_lang::error::Error>;
    let mut _5: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _6: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _11: ();
    let _12: std::cell::RefMut<'_, state::user::User>;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _14: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _15: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _16: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _17: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _18: isize;
    let _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _20: !;
    let mut _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _22: std::cell::RefMut<'_, state::user::User>;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _25: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _26: isize;
    let mut _28: !;
    let mut _29: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _31: ();
    let mut _32: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _33: std::result::Result<(), error::ErrorCode>;
    let mut _34: bool;
    let mut _35: u64;
    let mut _36: &state::user::User;
    let mut _37: &std::cell::RefMut<'_, state::user::User>;
    let mut _38: u64;
    let mut _39: ();
    let _41: ();
    let mut _42: &str;
    let _43: &str;
    let mut _44: &std::string::String;
    let _45: &std::string::String;
    let _46: std::string::String;
    let mut _48: std::fmt::Arguments<'_>;
    let mut _49: &[&str];
    let mut _50: &[&str; 2];
    let _51: &[&str; 2];
    let _52: [&str; 2];
    let mut _53: &[core::fmt::rt::Argument<'_>];
    let mut _54: &[core::fmt::rt::Argument<'_>; 1];
    let _55: &[core::fmt::rt::Argument<'_>; 1];
    let _56: [core::fmt::rt::Argument<'_>; 1];
    let mut _57: core::fmt::rt::Argument<'_>;
    let mut _58: &error::ErrorCode;
    let _59: &error::ErrorCode;
    let _60: ();
    let mut _61: &str;
    let _62: &str;
    let mut _63: &std::string::String;
    let _64: &std::string::String;
    let _65: std::string::String;
    let mut _67: std::fmt::Arguments<'_>;
    let mut _68: &[&str];
    let mut _69: &[&str; 3];
    let _70: &[&str; 3];
    let _71: [&str; 3];
    let mut _72: &[core::fmt::rt::Argument<'_>];
    let mut _73: &[core::fmt::rt::Argument<'_>; 2];
    let _74: &[core::fmt::rt::Argument<'_>; 2];
    let _75: [core::fmt::rt::Argument<'_>; 2];
    let mut _76: core::fmt::rt::Argument<'_>;
    let mut _77: &u64;
    let _78: &u64;
    let _79: &state::user::User;
    let mut _80: &std::cell::RefMut<'_, state::user::User>;
    let mut _81: core::fmt::rt::Argument<'_>;
    let mut _82: &u64;
    let _83: &u64;
    let mut _84: error::ErrorCode;
    let mut _85: isize;
    let mut _87: !;
    let mut _88: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _90: ();
    let mut _93: &mut instructions::keeper::RevertFill<'_>;
    let mut _94: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _95: &mut instructions::keeper::RevertFill<'_>;
    let mut _96: isize;
    let mut _97: isize;
    let mut _98: isize;
    let mut _99: isize;
    let mut _100: isize;
    let mut _101: isize;
    let mut _102: isize;
    let mut _103: isize;
    let mut _104: isize;
    let mut _105: isize;
    let mut _106: isize;
    let mut _107: isize;
    let mut _108: isize;
    let mut _109: isize;
    let mut _110: isize;
    let mut _111: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug residual => _8;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _11;
        scope 4 {
        }
    }
    scope 5 {
        debug filler => _12;
        let _23: anchor_lang::prelude::Clock;
        let _27: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
        let _30: anchor_lang::prelude::Clock;
        scope 10 {
            debug clock => _23;
            let _40: error::ErrorCode;
            let _86: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _89: ();
            scope 15 {
                debug error_code => _40;
                let _47: std::string::String;
                let _66: std::string::String;
                let mut _91: &[&str; 3];
                let mut _92: &[&str; 2];
                scope 16 {
                    debug res => _47;
                }
                scope 17 {
                    debug res => _66;
                }
            }
            scope 18 {
                debug residual => _86;
                scope 19 {
                }
            }
            scope 20 {
                debug val => _89;
                scope 21 {
                }
            }
        }
        scope 11 {
            debug residual => _27;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _30;
            scope 14 {
            }
        }
    }
    scope 6 {
        debug residual => _19;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _22;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _93 = deref_copy (_1.1: &mut instructions::keeper::RevertFill<'_>);
        _6 = &((*_93).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _94 = deref_copy (*_6);
        _111 = (((_94.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _5 = &(*_111);
        _4 = constraints::fill_not_paused(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        _3 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _4) -> [return: bb2, unwind: bb47];
    }

    bb2: {
        StorageDead(_4);
        _7 = discriminant(_3);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = ((_3 as Continue).0: ());
        _2 = _11;
        StorageDead(_11);
        _96 = discriminant(_3);
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _95 = deref_copy (_1.1: &mut instructions::keeper::RevertFill<'_>);
        _16 = &((*_95).2: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _15 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _16) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_10);
        _10 = move _8;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _10) -> [return: bb6, unwind: bb50];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        _106 = discriminant(_3);
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb43;
    }

    bb7: {
        StorageDead(_16);
        StorageLive(_17);
        _17 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _14 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _15, move _17) -> [return: bb8, unwind: bb47];
    }

    bb8: {
        StorageDead(_17);
        StorageDead(_15);
        _13 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _14) -> [return: bb9, unwind: bb47];
    }

    bb9: {
        StorageDead(_14);
        _18 = discriminant(_13);
        switchInt(move _18) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_22);
        _22 = move ((_13 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _12 = move _22;
        StorageDead(_22);
        _100 = discriminant(_13);
        StorageDead(_13);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb13, unwind: bb46];
    }

    bb11: {
        StorageLive(_19);
        _19 = ((_13 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_21);
        _21 = _19;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _21) -> [return: bb12, unwind: bb49];
    }

    bb12: {
        StorageDead(_21);
        StorageDead(_19);
        _98 = discriminant(_13);
        StorageDead(_13);
        goto -> bb42;
    }

    bb13: {
        _24 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _25) -> [return: bb14, unwind: bb46];
    }

    bb14: {
        StorageDead(_25);
        _26 = discriminant(_24);
        switchInt(move _26) -> [0: bb15, 1: bb16, otherwise: bb4];
    }

    bb15: {
        StorageLive(_30);
        _30 = move ((_24 as Continue).0: anchor_lang::prelude::Clock);
        _23 = move _30;
        StorageDead(_30);
        _102 = discriminant(_24);
        StorageDead(_24);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &_12;
        _36 = <RefMut<'_, User> as Deref>::deref(move _37) -> [return: bb18, unwind: bb46];
    }

    bb16: {
        StorageLive(_27);
        _27 = move ((_24 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_29);
        _29 = move _27;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _29) -> [return: bb17, unwind: bb48];
    }

    bb17: {
        StorageDead(_29);
        StorageDead(_27);
        _104 = discriminant(_24);
        StorageDead(_24);
        goto -> bb41;
    }

    bb18: {
        StorageDead(_37);
        _35 = ((*_36).14: u64);
        StorageLive(_38);
        _38 = (_23.0: u64);
        _34 = Eq(move _35, move _38);
        switchInt(move _34) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        StorageDead(_38);
        StorageDead(_36);
        StorageDead(_35);
        StorageLive(_39);
        _39 = ();
        _33 = std::result::Result::<(), error::ErrorCode>::Ok(move _39);
        StorageDead(_39);
        goto -> bb35;
    }

    bb20: {
        StorageDead(_38);
        StorageDead(_36);
        StorageDead(_35);
        StorageLive(_40);
        _40 = error::ErrorCode::RevertFill;
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _92 = const _;
        _51 = &(*_92);
        _50 = &(*_51);
        _49 = move _50 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_50);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _59 = &_40;
        _58 = &(*_59);
        _57 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _58) -> [return: bb21, unwind: bb46];
    }

    bb21: {
        StorageDead(_58);
        _56 = [move _57];
        StorageDead(_57);
        _55 = &_56;
        _54 = &(*_55);
        _53 = move _54 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_54);
        _48 = Arguments::<'_>::new_v1(move _49, move _53) -> [return: bb22, unwind: bb46];
    }

    bb22: {
        StorageDead(_53);
        StorageDead(_49);
        _47 = format(move _48) -> [return: bb23, unwind: bb46];
    }

    bb23: {
        StorageDead(_48);
        StorageDead(_59);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_51);
        _46 = move _47;
        StorageDead(_47);
        _45 = &_46;
        _44 = &(*_45);
        _43 = <String as Deref>::deref(move _44) -> [return: bb24, unwind: bb45];
    }

    bb24: {
        _42 = &(*_43);
        StorageDead(_44);
        _41 = solana_program::log::sol_log(move _42) -> [return: bb25, unwind: bb45];
    }

    bb25: {
        StorageDead(_42);
        drop(_46) -> [return: bb26, unwind: bb46];
    }

    bb26: {
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_43);
        StorageDead(_41);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _91 = const _;
        _70 = &(*_91);
        _69 = &(*_70);
        _68 = move _69 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_69);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _80 = &_12;
        _79 = <RefMut<'_, User> as Deref>::deref(move _80) -> [return: bb27, unwind: bb46];
    }

    bb27: {
        StorageDead(_80);
        _78 = &((*_79).14: u64);
        _77 = &(*_78);
        _76 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _77) -> [return: bb28, unwind: bb46];
    }

    bb28: {
        StorageDead(_77);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _83 = &(_23.0: u64);
        _82 = &(*_83);
        _81 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _82) -> [return: bb29, unwind: bb46];
    }

    bb29: {
        StorageDead(_82);
        _75 = [move _76, move _81];
        StorageDead(_81);
        StorageDead(_76);
        _74 = &_75;
        _73 = &(*_74);
        _72 = move _73 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_73);
        _67 = Arguments::<'_>::new_v1(move _68, move _72) -> [return: bb30, unwind: bb46];
    }

    bb30: {
        StorageDead(_72);
        StorageDead(_68);
        _66 = format(move _67) -> [return: bb31, unwind: bb46];
    }

    bb31: {
        StorageDead(_67);
        StorageDead(_83);
        StorageDead(_79);
        StorageDead(_78);
        StorageDead(_75);
        StorageDead(_74);
        StorageDead(_70);
        _65 = move _66;
        StorageDead(_66);
        _64 = &_65;
        _63 = &(*_64);
        _62 = <String as Deref>::deref(move _63) -> [return: bb32, unwind: bb44];
    }

    bb32: {
        _61 = &(*_62);
        StorageDead(_63);
        _60 = solana_program::log::sol_log(move _61) -> [return: bb33, unwind: bb44];
    }

    bb33: {
        StorageDead(_61);
        drop(_65) -> [return: bb34, unwind: bb46];
    }

    bb34: {
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_62);
        StorageDead(_60);
        StorageLive(_84);
        _84 = _40;
        _33 = std::result::Result::<(), error::ErrorCode>::Err(move _84);
        StorageDead(_84);
        StorageDead(_40);
        goto -> bb35;
    }

    bb35: {
        StorageDead(_34);
        _32 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _33) -> [return: bb36, unwind: bb46];
    }

    bb36: {
        StorageDead(_33);
        _85 = discriminant(_32);
        switchInt(move _85) -> [0: bb37, 1: bb38, otherwise: bb4];
    }

    bb37: {
        StorageLive(_89);
        _89 = ((_32 as Continue).0: ());
        _31 = _89;
        StorageDead(_89);
        StorageDead(_32);
        StorageDead(_31);
        StorageLive(_90);
        _90 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _90);
        StorageDead(_90);
        StorageDead(_23);
        drop(_12) -> [return: bb40, unwind: bb47];
    }

    bb38: {
        StorageLive(_86);
        _86 = ((_32 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_88);
        _88 = _86;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _88) -> [return: bb39, unwind: bb46];
    }

    bb39: {
        StorageDead(_88);
        StorageDead(_86);
        StorageDead(_32);
        StorageDead(_31);
        goto -> bb41;
    }

    bb40: {
        StorageDead(_12);
        goto -> bb43;
    }

    bb41: {
        StorageDead(_23);
        drop(_12) -> [return: bb42, unwind: bb47];
    }

    bb42: {
        StorageDead(_12);
        goto -> bb43;
    }

    bb43: {
        return;
    }

    bb44 (cleanup): {
        drop(_65) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_46) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        drop(_12) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        resume;
    }

    bb48 (cleanup): {
        _108 = discriminant(_24);
        goto -> bb46;
    }

    bb49 (cleanup): {
        _109 = discriminant(_13);
        goto -> bb47;
    }

    bb50 (cleanup): {
        _110 = discriminant(_3);
        goto -> bb47;
    }
}
