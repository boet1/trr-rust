// MIR for `signed_msg_user::<impl at programs/drift/src/state/signed_msg_user.rs:50:1: 50:11>::clone` before PreCodegen

fn signed_msg_user::<impl at programs/drift/src/state/signed_msg_user.rs:50:1: 50:11>::clone(_1: &SignedMsgUserOrders) -> SignedMsgUserOrders {
    debug self => _1;
    let mut _0: state::signed_msg_user::SignedMsgUserOrders;
    let mut _2: anchor_lang::prelude::Pubkey;
    let mut _3: &anchor_lang::prelude::Pubkey;
    let _4: &anchor_lang::prelude::Pubkey;
    let mut _5: u32;
    let mut _6: &u32;
    let _7: &u32;
    let mut _8: std::vec::Vec<state::signed_msg_user::SignedMsgOrderId>;
    let mut _9: &std::vec::Vec<state::signed_msg_user::SignedMsgOrderId>;
    let _10: &std::vec::Vec<state::signed_msg_user::SignedMsgOrderId>;

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = &((*_1).0: anchor_lang::prelude::Pubkey);
        _3 = &(*_4);
        _2 = <anchor_lang::prelude::Pubkey as Clone>::clone(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_3);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &((*_1).1: u32);
        _6 = &(*_7);
        _5 = <u32 as Clone>::clone(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &((*_1).2: std::vec::Vec<state::signed_msg_user::SignedMsgOrderId>);
        _9 = &(*_10);
        _8 = <Vec<SignedMsgOrderId> as Clone>::clone(move _9) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_9);
        _0 = SignedMsgUserOrders { authority_pubkey: move _2, padding: move _5, signed_msg_order_data: move _8 };
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_2);
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_4);
        return;
    }
}
