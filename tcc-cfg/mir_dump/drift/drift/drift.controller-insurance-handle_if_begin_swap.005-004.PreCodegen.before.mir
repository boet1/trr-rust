// MIR for `handle_if_begin_swap` before PreCodegen

fn handle_if_begin_swap(_1: &mut IfRebalanceConfig, _2: u64, _3: u64, _4: &mut SpotMarket, _5: &mut SpotMarket, _6: u64, _7: i64) -> std::result::Result<(), error::ErrorCode> {
    debug if_rebalance_config => _1;
    debug in_insurance_fund_vault_amount => _2;
    debug out_insurance_fund_vault_amount => _3;
    debug in_spot_market => _4;
    debug out_spot_market => _5;
    debug in_amount => _6;
    debug now => _7;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _8: ();
    let mut _9: bool;
    let mut _10: i64;
    let mut _11: i64;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _13: std::result::Result<i64, error::ErrorCode>;
    let mut _14: i64;
    let mut _15: i64;
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _20: i64;
    let mut _21: i64;
    let _22: ();
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _24: std::result::Result<(), error::ErrorCode>;
    let mut _25: u64;
    let mut _26: &mut state::spot_market::SpotMarket;
    let mut _27: isize;
    let _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _29: !;
    let mut _30: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _31: ();
    let _32: ();
    let mut _33: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _34: std::result::Result<(), error::ErrorCode>;
    let mut _35: u64;
    let mut _36: &mut state::spot_market::SpotMarket;
    let mut _37: isize;
    let _38: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _39: !;
    let mut _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _41: ();
    let mut _42: ();
    scope 1 {
        debug residual => _17;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _20;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _28;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _31;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _38;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _41;
        scope 12 {
        }
    }

    bb0: {
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = _7;
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = ((*_1).6: i64);
        StorageLive(_15);
        _15 = ((*_1).9: i64);
        _13 = <i64 as SafeMath>::safe_add(move _14, move _15) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_15);
        StorageDead(_14);
        _12 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _13) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_13);
        _16 = discriminant(_12);
        switchInt(move _16) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_20);
        _20 = ((_12 as Continue).0: i64);
        _11 = _20;
        StorageDead(_20);
        _9 = Gt(move _10, move _11);
        switchInt(move _9) -> [0: bb8, otherwise: bb7];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_17);
        _17 = ((_12 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_19);
        _19 = _17;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _19) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb20;
    }

    bb7: {
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_21);
        _21 = _7;
        ((*_1).6: i64) = move _21;
        StorageDead(_21);
        ((*_1).7: u64) = const 0_u64;
        _8 = const ();
        goto -> bb9;
    }

    bb8: {
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        _8 = const ();
        goto -> bb9;
    }

    bb9: {
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = _2;
        StorageLive(_26);
        _26 = &mut (*_4);
        _24 = apply_rebase_to_insurance_fund(move _25, move _26) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_26);
        StorageDead(_25);
        _23 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _24) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_24);
        _27 = discriminant(_23);
        switchInt(move _27) -> [0: bb12, 1: bb13, otherwise: bb4];
    }

    bb12: {
        StorageLive(_31);
        _31 = ((_23 as Continue).0: ());
        _22 = _31;
        StorageDead(_31);
        StorageDead(_23);
        StorageDead(_22);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = _3;
        StorageLive(_36);
        _36 = &mut (*_5);
        _34 = apply_rebase_to_insurance_fund(move _35, move _36) -> [return: bb15, unwind continue];
    }

    bb13: {
        StorageLive(_28);
        _28 = ((_23 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_30);
        _30 = _28;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _30) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_30);
        StorageDead(_28);
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb20;
    }

    bb15: {
        StorageDead(_36);
        StorageDead(_35);
        _33 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _34) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_34);
        _37 = discriminant(_33);
        switchInt(move _37) -> [0: bb17, 1: bb18, otherwise: bb4];
    }

    bb17: {
        StorageLive(_41);
        _41 = ((_33 as Continue).0: ());
        _32 = _41;
        StorageDead(_41);
        StorageDead(_33);
        StorageDead(_32);
        StorageLive(_42);
        _42 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _42);
        StorageDead(_42);
        goto -> bb20;
    }

    bb18: {
        StorageLive(_38);
        _38 = ((_33 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_40);
        _40 = _38;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _40) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_33);
        StorageDead(_32);
        goto -> bb20;
    }

    bb20: {
        return;
    }
}
