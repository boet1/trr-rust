// MIR for `fill_mode::<impl at programs/drift/src/state/fill_mode.rs:10:23: 10:28>::fmt` before PreCodegen

fn fill_mode::<impl at programs/drift/src/state/fill_mode.rs:10:23: 10:28>::fmt(_1: &FillMode, _2: &mut Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let mut _4: &mut std::fmt::Formatter<'_>;
    let mut _5: &str;
    let _6: &str;
    let mut _7: &mut std::fmt::Formatter<'_>;
    let mut _8: &str;
    let _9: &str;
    let _10: &bool;
    let _11: &u8;
    let mut _12: &mut std::fmt::Formatter<'_>;
    let mut _13: &str;
    let _14: &str;
    let mut _15: &dyn std::fmt::Debug;
    let mut _16: &bool;
    let mut _17: &dyn std::fmt::Debug;
    let mut _18: &&u8;
    let _19: &&u8;
    let mut _20: &mut std::fmt::Formatter<'_>;
    let mut _21: &str;
    let _22: &str;
    scope 1 {
        debug __self_0 => _10;
        debug __self_1 => _11;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb5, 2: bb7, 3: bb1, otherwise: bb2];
    }

    bb1: {
        StorageLive(_20);
        _20 = &mut (*_2);
        StorageLive(_21);
        StorageLive(_22);
        _22 = const "Liquidation";
        _21 = &(*_22);
        _0 = Formatter::<'_>::write_str(move _20, move _21) -> [return: bb9, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        StorageLive(_4);
        _4 = &mut (*_2);
        StorageLive(_5);
        StorageLive(_6);
        _6 = const "Fill";
        _5 = &(*_6);
        _0 = Formatter::<'_>::write_str(move _4, move _5) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb10;
    }

    bb5: {
        StorageLive(_7);
        _7 = &mut (*_2);
        StorageLive(_8);
        StorageLive(_9);
        _9 = const "PlaceAndMake";
        _8 = &(*_9);
        _0 = Formatter::<'_>::write_str(move _7, move _8) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb10;
    }

    bb7: {
        StorageLive(_10);
        _10 = &(((*_1) as PlaceAndTake).0: bool);
        StorageLive(_11);
        _11 = &(((*_1) as PlaceAndTake).1: u8);
        StorageLive(_12);
        _12 = &mut (*_2);
        StorageLive(_13);
        StorageLive(_14);
        _14 = const "PlaceAndTake";
        _13 = &(*_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &(*_10);
        _15 = move _16 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        StorageDead(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &_11;
        _18 = &(*_19);
        _17 = move _18 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        StorageDead(_18);
        _0 = Formatter::<'_>::debug_tuple_field2_finish(move _12, move _13, move _15, move _17) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb10;
    }

    bb9: {
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        goto -> bb10;
    }

    bb10: {
        return;
    }
}
