// MIR for `state::user::<impl at programs/drift/src/state/user.rs:1703:1: 1703:15>::increment_total_referrer_reward` after PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:1703:1: 1703:15>::increment_total_referrer_reward(_1: &mut UserStats, _2: u64, _3: i64) -> std::result::Result<(), error::ErrorCode> {
    debug self => _1;
    debug reward => _2;
    debug now => _3;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let mut _4: u64;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _6: std::result::Result<u64, error::ErrorCode>;
    let mut _7: u64;
    let mut _8: u64;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _13: u64;
    let mut _14: u64;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _16: std::result::Result<u64, error::ErrorCode>;
    let mut _17: u64;
    let mut _18: u64;
    let mut _19: isize;
    let _20: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _21: !;
    let mut _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _23: u64;
    let _24: ();
    let mut _25: bool;
    let mut _26: i64;
    let mut _27: i64;
    let _28: i64;
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _30: std::result::Result<i64, error::ErrorCode>;
    let mut _31: i64;
    let mut _32: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _33: std::result::Result<i64, error::ErrorCode>;
    let mut _34: i64;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _36: std::result::Result<i64, error::ErrorCode>;
    let mut _37: i64;
    let mut _38: i64;
    let mut _39: isize;
    let _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _41: !;
    let mut _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _43: i64;
    let mut _44: isize;
    let _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _46: !;
    let mut _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _48: i64;
    let mut _49: isize;
    let _50: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _51: !;
    let mut _52: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _53: i64;
    let mut _54: i64;
    let mut _55: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _56: std::result::Result<i64, error::ErrorCode>;
    let mut _57: i64;
    let mut _58: i64;
    let mut _59: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _60: std::result::Result<i64, error::ErrorCode>;
    let mut _61: i64;
    let mut _62: isize;
    let mut _64: !;
    let mut _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _67: isize;
    let mut _69: !;
    let mut _70: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _72: ();
    scope 1 {
        debug residual => _10;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _13;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _20;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _23;
        scope 8 {
        }
    }
    scope 9 {
        debug n_epoch_durations => _28;
        let _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _66: i64;
        let _68: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _71: i64;
        scope 22 {
            debug residual => _63;
            scope 23 {
            }
        }
        scope 24 {
            debug val => _66;
            scope 25 {
            }
        }
        scope 26 {
            debug residual => _68;
            scope 27 {
            }
        }
        scope 28 {
            debug val => _71;
            scope 29 {
            }
        }
    }
    scope 10 {
        debug residual => _40;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _43;
        scope 13 {
        }
    }
    scope 14 {
        debug residual => _45;
        scope 15 {
        }
    }
    scope 16 {
        debug val => _48;
        scope 17 {
        }
    }
    scope 18 {
        debug residual => _50;
        scope 19 {
        }
    }
    scope 20 {
        debug val => _53;
        scope 21 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = (((*_1).2: state::user::UserFees).4: u64);
        StorageLive(_8);
        _8 = _2;
        _6 = <u64 as SafeMath>::safe_add(move _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageDead(_7);
        _5 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        _9 = discriminant(_5);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_5 as Continue).0: u64);
        _4 = _13;
        StorageDead(_13);
        (((*_1).2: state::user::UserFees).4: u64) = move _4;
        StorageDead(_4);
        StorageDead(_5);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = (((*_1).2: state::user::UserFees).5: u64);
        StorageLive(_18);
        _18 = _2;
        _16 = <u64 as SafeMath>::safe_add(move _17, move _18) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_12);
        _12 = _10;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _12) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_4);
        StorageDead(_5);
        goto -> bb44;
    }

    bb7: {
        StorageDead(_18);
        StorageDead(_17);
        _15 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _16) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_16);
        _19 = discriminant(_15);
        switchInt(move _19) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_23);
        _23 = ((_15 as Continue).0: u64);
        _14 = _23;
        StorageDead(_23);
        (((*_1).2: state::user::UserFees).5: u64) = move _14;
        StorageDead(_14);
        StorageDead(_15);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = _3;
        StorageLive(_27);
        _27 = ((*_1).3: i64);
        _25 = Gt(move _26, move _27);
        switchInt(move _25) -> [0: bb13, otherwise: bb12];
    }

    bb10: {
        StorageLive(_20);
        _20 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_22);
        _22 = _20;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _22) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_14);
        StorageDead(_15);
        goto -> bb44;
    }

    bb12: {
        StorageDead(_27);
        StorageDead(_26);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = _3;
        StorageLive(_38);
        _38 = ((*_1).3: i64);
        _36 = <i64 as SafeMath>::safe_sub(move _37, move _38) -> [return: bb14, unwind continue];
    }

    bb13: {
        StorageDead(_27);
        StorageDead(_26);
        _24 = const ();
        goto -> bb39;
    }

    bb14: {
        StorageDead(_38);
        StorageDead(_37);
        _35 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _36) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_36);
        _39 = discriminant(_35);
        switchInt(move _39) -> [0: bb16, 1: bb17, otherwise: bb4];
    }

    bb16: {
        StorageLive(_43);
        _43 = ((_35 as Continue).0: i64);
        _34 = _43;
        StorageDead(_43);
        _33 = <i64 as SafeMath>::safe_div(move _34, const _) -> [return: bb19, unwind continue];
    }

    bb17: {
        StorageLive(_40);
        _40 = ((_35 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_42);
        _42 = _40;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _42) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_34);
        StorageDead(_33);
        goto -> bb41;
    }

    bb19: {
        StorageDead(_34);
        _32 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _33) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_33);
        _44 = discriminant(_32);
        switchInt(move _44) -> [0: bb21, 1: bb22, otherwise: bb4];
    }

    bb21: {
        StorageLive(_48);
        _48 = ((_32 as Continue).0: i64);
        _31 = _48;
        StorageDead(_48);
        _30 = <i64 as SafeMath>::safe_add(move _31, const 1_i64) -> [return: bb24, unwind continue];
    }

    bb22: {
        StorageLive(_45);
        _45 = ((_32 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_47);
        _47 = _45;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _47) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_47);
        StorageDead(_45);
        goto -> bb41;
    }

    bb24: {
        StorageDead(_31);
        _29 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _30) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_30);
        _49 = discriminant(_29);
        switchInt(move _49) -> [0: bb26, 1: bb27, otherwise: bb4];
    }

    bb26: {
        StorageLive(_53);
        _53 = ((_29 as Continue).0: i64);
        _28 = _53;
        StorageDead(_53);
        StorageDead(_35);
        StorageDead(_32);
        StorageDead(_29);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = ((*_1).3: i64);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = _28;
        _60 = <i64 as SafeMath>::safe_mul(const _, move _61) -> [return: bb29, unwind continue];
    }

    bb27: {
        StorageLive(_50);
        _50 = ((_29 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_52);
        _52 = _50;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _52) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_52);
        StorageDead(_50);
        goto -> bb42;
    }

    bb29: {
        StorageDead(_61);
        _59 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _60) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_60);
        _62 = discriminant(_59);
        switchInt(move _62) -> [0: bb31, 1: bb32, otherwise: bb4];
    }

    bb31: {
        StorageLive(_66);
        _66 = ((_59 as Continue).0: i64);
        _58 = _66;
        StorageDead(_66);
        _56 = <i64 as SafeMath>::safe_add(move _57, move _58) -> [return: bb34, unwind continue];
    }

    bb32: {
        StorageLive(_63);
        _63 = ((_59 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_65);
        _65 = _63;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _65) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        goto -> bb40;
    }

    bb34: {
        StorageDead(_58);
        StorageDead(_57);
        _55 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _56) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_56);
        _67 = discriminant(_55);
        switchInt(move _67) -> [0: bb36, 1: bb37, otherwise: bb4];
    }

    bb36: {
        StorageLive(_71);
        _71 = ((_55 as Continue).0: i64);
        _54 = _71;
        StorageDead(_71);
        ((*_1).3: i64) = move _54;
        StorageDead(_54);
        StorageDead(_59);
        StorageDead(_55);
        (((*_1).2: state::user::UserFees).5: u64) = const 0_u64;
        _24 = const ();
        StorageDead(_28);
        goto -> bb39;
    }

    bb37: {
        StorageLive(_68);
        _68 = ((_55 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_70);
        _70 = _68;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _70) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_70);
        StorageDead(_68);
        goto -> bb40;
    }

    bb39: {
        StorageDead(_25);
        StorageDead(_24);
        StorageLive(_72);
        _72 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _72);
        StorageDead(_72);
        goto -> bb44;
    }

    bb40: {
        StorageDead(_54);
        StorageDead(_59);
        StorageDead(_55);
        goto -> bb43;
    }

    bb41: {
        StorageDead(_31);
        StorageDead(_30);
        goto -> bb42;
    }

    bb42: {
        StorageDead(_35);
        StorageDead(_32);
        StorageDead(_29);
        goto -> bb43;
    }

    bb43: {
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_24);
        goto -> bb44;
    }

    bb44: {
        return;
    }
}
