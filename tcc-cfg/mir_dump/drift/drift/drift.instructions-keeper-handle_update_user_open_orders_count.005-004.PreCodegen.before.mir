// MIR for `keeper::handle_update_user_open_orders_count` before PreCodegen

fn keeper::handle_update_user_open_orders_count(_1: anchor_lang::context::Context<'_, '_, '_, '_, keeper::UpdateUserIdle<'_>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: ();
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _4: std::result::Result<(), anchor_lang::error::Error>;
    let mut _5: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _6: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _11: ();
    let mut _12: std::cell::RefMut<'_, state::user::User>;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _14: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _15: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _16: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _17: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _18: isize;
    let _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _20: !;
    let mut _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _22: std::cell::RefMut<'_, state::user::User>;
    let _25: ();
    let mut _26: std::slice::Iter<'_, state::user::Order>;
    let mut _27: std::slice::Iter<'_, state::user::Order>;
    let mut _28: &[state::user::Order];
    let mut _29: &[state::user::Order; 32];
    let _30: &state::user::User;
    let mut _31: &std::cell::RefMut<'_, state::user::User>;
    let mut _33: ();
    let _34: ();
    let mut _35: std::option::Option<&state::user::Order>;
    let mut _36: &mut std::slice::Iter<'_, state::user::Order>;
    let mut _37: &mut std::slice::Iter<'_, state::user::Order>;
    let mut _38: isize;
    let mut _39: !;
    let _41: ();
    let mut _42: bool;
    let mut _43: &state::user::OrderStatus;
    let mut _44: &state::user::OrderStatus;
    let _45: state::user::OrderStatus;
    let mut _46: (u8, bool);
    let mut _47: bool;
    let mut _48: &state::user::Order;
    let mut _49: (u8, bool);
    let mut _50: u8;
    let mut _51: &mut state::user::User;
    let mut _52: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _53: u8;
    let mut _54: &mut state::user::User;
    let mut _55: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _56: u8;
    let mut _57: &mut state::user::User;
    let mut _58: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _59: u8;
    let mut _60: &mut state::user::User;
    let mut _61: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _62: ();
    let mut _64: &mut instructions::keeper::UpdateUserIdle<'_>;
    let mut _65: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _66: &mut instructions::keeper::UpdateUserIdle<'_>;
    let mut _67: isize;
    let mut _68: isize;
    let mut _69: isize;
    let mut _70: isize;
    let mut _71: isize;
    let mut _72: isize;
    let mut _73: isize;
    let mut _74: isize;
    let mut _75: isize;
    let mut _76: isize;
    let mut _77: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug residual => _8;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _11;
        scope 4 {
        }
    }
    scope 5 {
        debug user => _12;
        let mut _23: u8;
        scope 10 {
            debug open_orders => _23;
            let mut _24: u8;
            scope 11 {
                debug open_auctions => _24;
                let mut _32: std::slice::Iter<'_, state::user::Order>;
                scope 12 {
                    debug iter => _32;
                    let _40: &state::user::Order;
                    scope 13 {
                        debug order => _40;
                        let mut _63: &state::user::OrderStatus;
                    }
                }
            }
        }
    }
    scope 6 {
        debug residual => _19;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _22;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _64 = deref_copy (_1.1: &mut instructions::keeper::UpdateUserIdle<'_>);
        _6 = &((*_64).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _65 = deref_copy (*_6);
        _77 = (((_65.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _5 = &(*_77);
        _4 = constraints::exchange_not_paused(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        _3 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _4) -> [return: bb2, unwind: bb37];
    }

    bb2: {
        StorageDead(_4);
        _7 = discriminant(_3);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = ((_3 as Continue).0: ());
        _2 = _11;
        StorageDead(_11);
        _67 = discriminant(_3);
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _66 = deref_copy (_1.1: &mut instructions::keeper::UpdateUserIdle<'_>);
        _16 = &((*_66).3: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _15 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _16) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_10);
        _10 = move _8;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _10) -> [return: bb6, unwind: bb39];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        _73 = discriminant(_3);
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb35;
    }

    bb7: {
        StorageDead(_16);
        StorageLive(_17);
        _17 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _14 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _15, move _17) -> [return: bb8, unwind: bb37];
    }

    bb8: {
        StorageDead(_17);
        StorageDead(_15);
        _13 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _14) -> [return: bb9, unwind: bb37];
    }

    bb9: {
        StorageDead(_14);
        _18 = discriminant(_13);
        switchInt(move _18) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_22);
        _22 = move ((_13 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _12 = move _22;
        StorageDead(_22);
        _71 = discriminant(_13);
        StorageDead(_13);
        StorageLive(_23);
        _23 = const 0_u8;
        StorageLive(_24);
        _24 = const 0_u8;
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = &_12;
        _30 = <RefMut<'_, User> as Deref>::deref(move _31) -> [return: bb13, unwind: bb36];
    }

    bb11: {
        StorageLive(_19);
        _19 = ((_13 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_21);
        _21 = _19;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _21) -> [return: bb12, unwind: bb38];
    }

    bb12: {
        StorageDead(_21);
        StorageDead(_19);
        _69 = discriminant(_13);
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb35;
    }

    bb13: {
        StorageDead(_31);
        _29 = &((*_30).5: [state::user::Order; 32]);
        _28 = move _29 as &[state::user::Order] (PointerCoercion(Unsize));
        StorageDead(_29);
        _27 = core::slice::<impl [Order]>::iter(move _28) -> [return: bb14, unwind: bb36];
    }

    bb14: {
        StorageDead(_28);
        _26 = <std::slice::Iter<'_, Order> as IntoIterator>::into_iter(move _27) -> [return: bb15, unwind: bb36];
    }

    bb15: {
        StorageDead(_27);
        StorageLive(_32);
        _32 = move _26;
        goto -> bb16;
    }

    bb16: {
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &mut _32;
        _36 = &mut (*_37);
        _35 = <std::slice::Iter<'_, Order> as Iterator>::next(move _36) -> [return: bb17, unwind: bb36];
    }

    bb17: {
        StorageDead(_36);
        _38 = discriminant(_35);
        switchInt(move _38) -> [0: bb19, 1: bb18, otherwise: bb4];
    }

    bb18: {
        StorageLive(_40);
        _40 = ((_35 as Some).0: &state::user::Order);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = &((*_40).12: state::user::OrderStatus);
        StorageLive(_44);
        _63 = const _;
        _44 = &(*_63);
        _42 = <OrderStatus as PartialEq>::eq(move _43, move _44) -> [return: bb20, unwind: bb36];
    }

    bb19: {
        _25 = const ();
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_32);
        StorageDead(_30);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_50);
        _50 = _23;
        StorageLive(_51);
        StorageLive(_52);
        _52 = &mut _12;
        _51 = <RefMut<'_, User> as DerefMut>::deref_mut(move _52) -> [return: bb30, unwind: bb36];
    }

    bb20: {
        switchInt(move _42) -> [0: bb23, otherwise: bb21];
    }

    bb21: {
        StorageDead(_44);
        StorageDead(_43);
        _46 = CheckedAdd(_23, const 1_u8);
        assert(!move (_46.1: bool), "attempt to compute `{} + {}`, which would overflow", _23, const 1_u8) -> [success: bb22, unwind: bb36];
    }

    bb22: {
        _23 = move (_46.0: u8);
        _41 = const ();
        goto -> bb24;
    }

    bb23: {
        StorageDead(_44);
        StorageDead(_43);
        _41 = const ();
        goto -> bb24;
    }

    bb24: {
        StorageDead(_42);
        StorageDead(_41);
        StorageLive(_47);
        StorageLive(_48);
        _48 = &(*_40);
        _47 = Order::has_auction(move _48) -> [return: bb25, unwind: bb36];
    }

    bb25: {
        switchInt(move _47) -> [0: bb28, otherwise: bb26];
    }

    bb26: {
        StorageDead(_48);
        _49 = CheckedAdd(_24, const 1_u8);
        assert(!move (_49.1: bool), "attempt to compute `{} + {}`, which would overflow", _24, const 1_u8) -> [success: bb27, unwind: bb36];
    }

    bb27: {
        _24 = move (_49.0: u8);
        _34 = const ();
        goto -> bb29;
    }

    bb28: {
        StorageDead(_48);
        _34 = const ();
        goto -> bb29;
    }

    bb29: {
        StorageDead(_47);
        StorageDead(_40);
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_34);
        _33 = const ();
        goto -> bb16;
    }

    bb30: {
        StorageDead(_52);
        ((*_51).22: u8) = move _50;
        StorageDead(_50);
        StorageDead(_51);
        StorageLive(_53);
        _53 = _23;
        StorageLive(_54);
        StorageLive(_55);
        _55 = &mut _12;
        _54 = <RefMut<'_, User> as DerefMut>::deref_mut(move _55) -> [return: bb31, unwind: bb36];
    }

    bb31: {
        StorageDead(_55);
        ((*_54).23: bool) = Gt(move _53, const 0_u8);
        StorageDead(_53);
        StorageDead(_54);
        StorageLive(_56);
        _56 = _24;
        StorageLive(_57);
        StorageLive(_58);
        _58 = &mut _12;
        _57 = <RefMut<'_, User> as DerefMut>::deref_mut(move _58) -> [return: bb32, unwind: bb36];
    }

    bb32: {
        StorageDead(_58);
        ((*_57).24: u8) = move _56;
        StorageDead(_56);
        StorageDead(_57);
        StorageLive(_59);
        _59 = _24;
        StorageLive(_60);
        StorageLive(_61);
        _61 = &mut _12;
        _60 = <RefMut<'_, User> as DerefMut>::deref_mut(move _61) -> [return: bb33, unwind: bb36];
    }

    bb33: {
        StorageDead(_61);
        ((*_60).25: bool) = Gt(move _59, const 0_u8);
        StorageDead(_59);
        StorageDead(_60);
        StorageLive(_62);
        _62 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _62);
        StorageDead(_62);
        StorageDead(_24);
        StorageDead(_23);
        drop(_12) -> [return: bb34, unwind: bb37];
    }

    bb34: {
        StorageDead(_12);
        goto -> bb35;
    }

    bb35: {
        return;
    }

    bb36 (cleanup): {
        drop(_12) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        resume;
    }

    bb38 (cleanup): {
        _75 = discriminant(_13);
        goto -> bb37;
    }

    bb39 (cleanup): {
        _76 = discriminant(_3);
        goto -> bb37;
    }
}
