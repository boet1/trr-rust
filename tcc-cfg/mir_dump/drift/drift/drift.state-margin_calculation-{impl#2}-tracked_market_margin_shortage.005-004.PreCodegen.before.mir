// MIR for `margin_calculation::<impl at programs/drift/src/state/margin_calculation.rs:208:1: 208:23>::tracked_market_margin_shortage` before PreCodegen

fn margin_calculation::<impl at programs/drift/src/state/margin_calculation.rs:208:1: 208:23>::tracked_market_margin_shortage(_1: &MarginCalculation, _2: u128) -> std::result::Result<u128, error::ErrorCode> {
    debug self => _1;
    debug margin_shortage => _2;
    let mut _0: std::result::Result<u128, error::ErrorCode>;
    let _3: ();
    let mut _4: bool;
    let mut _5: &std::option::Option<state::margin_calculation::MarketIdentifier>;
    let _6: std::option::Option<state::margin_calculation::MarketIdentifier>;
    let mut _7: &state::margin_calculation::MarginCalculation;
    let mut _8: !;
    let _9: ();
    let mut _10: &str;
    let _11: &str;
    let mut _12: error::ErrorCode;
    let _13: ();
    let mut _14: bool;
    let mut _15: u128;
    let mut _16: !;
    let mut _17: u128;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _19: std::result::Result<u128, error::ErrorCode>;
    let mut _20: u128;
    let mut _21: u128;
    let mut _22: isize;
    let _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _24: !;
    let mut _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _26: u128;
    let mut _27: u128;
    scope 1 {
        debug residual => _23;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _26;
        scope 4 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &(*_1);
        _6 = MarginCalculation::market_to_track_margin_requirement(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &_6;
        StorageDead(_7);
        _4 = Option::<MarketIdentifier>::is_none(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _4) -> [0: bb5, otherwise: bb3];
    }

    bb3: {
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = const "cant call tracked_market_margin_shortage";
        _10 = &(*_11);
        _9 = solana_program::log::sol_log(move _10) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_10);
        StorageDead(_11);
        StorageDead(_9);
        StorageLive(_12);
        _12 = error::ErrorCode::InvalidMarginCalculation;
        _0 = std::result::Result::<u128, error::ErrorCode>::Err(move _12);
        StorageDead(_12);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb15;
    }

    bb5: {
        StorageDead(_6);
        StorageDead(_5);
        _3 = const ();
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = ((*_1).3: u128);
        _14 = Eq(move _15, const 0_u128);
        switchInt(move _14) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        StorageDead(_15);
        _0 = std::result::Result::<u128, error::ErrorCode>::Ok(const 0_u128);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb15;
    }

    bb7: {
        StorageDead(_15);
        _13 = const ();
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = _2;
        StorageLive(_21);
        _21 = ((*_1).16: u128);
        _19 = <u128 as SafeMath>::safe_mul(move _20, move _21) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_21);
        StorageDead(_20);
        _18 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _19) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_19);
        _22 = discriminant(_18);
        switchInt(move _22) -> [0: bb10, 1: bb12, otherwise: bb11];
    }

    bb10: {
        StorageLive(_26);
        _26 = ((_18 as Continue).0: u128);
        _17 = _26;
        StorageDead(_26);
        StorageLive(_27);
        _27 = ((*_1).3: u128);
        _0 = <u128 as SafeMath>::safe_div(move _17, move _27) -> [return: bb14, unwind continue];
    }

    bb11: {
        unreachable;
    }

    bb12: {
        StorageLive(_23);
        _23 = ((_18 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_25);
        _25 = _23;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _25) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_17);
        StorageDead(_18);
        goto -> bb15;
    }

    bb14: {
        StorageDead(_27);
        StorageDead(_17);
        StorageDead(_18);
        goto -> bb15;
    }

    bb15: {
        return;
    }
}
