// MIR for `state::user::<impl at programs/drift/src/state/user.rs:992:1: 992:18>::get_claimable_pnl` before PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:992:1: 992:18>::get_claimable_pnl(_1: &PerpPosition, _2: i64, _3: i128) -> std::result::Result<i128, error::ErrorCode> {
    debug self => _1;
    debug oracle_price => _2;
    debug pnl_pool_excess => _3;
    let mut _0: std::result::Result<i128, error::ErrorCode>;
    let _4: i128;
    let mut _5: (u128, i128);
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u128, i128)>;
    let mut _7: std::result::Result<(u128, i128), error::ErrorCode>;
    let mut _8: &state::user::PerpPosition;
    let mut _9: i64;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _14: (u128, i128);
    let mut _15: bool;
    let mut _16: i128;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _19: std::result::Result<i128, error::ErrorCode>;
    let mut _20: i128;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _22: std::result::Result<i128, error::ErrorCode>;
    let mut _23: std::result::Result<i128, error::ErrorCode>;
    let mut _24: i128;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _26: std::result::Result<i128, error::ErrorCode>;
    let mut _27: i64;
    let mut _28: isize;
    let mut _30: !;
    let mut _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _33: i128;
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _35: std::result::Result<i128, error::ErrorCode>;
    let mut _36: i64;
    let mut _37: isize;
    let mut _39: !;
    let mut _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _42: {closure@programs/drift/src/state/user.rs:1108:22: 1108:29};
    let mut _43: isize;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _48: i128;
    let mut _49: i128;
    let mut _50: isize;
    let mut _52: !;
    let mut _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _55: ();
    let mut _56: bool;
    let mut _57: i128;
    let mut _58: i128;
    let _59: ();
    let mut _60: &str;
    let _61: &str;
    let mut _62: &std::string::String;
    let _63: &std::string::String;
    let _64: std::string::String;
    let mut _66: std::fmt::Arguments<'_>;
    let mut _67: &[&str];
    let mut _68: &[&str; 2];
    let _69: &[&str; 2];
    let _70: [&str; 2];
    let mut _71: &[core::fmt::rt::Argument<'_>];
    let mut _72: &[core::fmt::rt::Argument<'_>; 2];
    let _73: &[core::fmt::rt::Argument<'_>; 2];
    let _74: [core::fmt::rt::Argument<'_>; 2];
    let mut _75: core::fmt::rt::Argument<'_>;
    let mut _76: &i128;
    let _77: &i128;
    let mut _78: core::fmt::rt::Argument<'_>;
    let mut _79: &i128;
    let _80: &i128;
    let mut _81: i128;
    let mut _82: i128;
    let mut _83: i128;
    let mut _84: i128;
    scope 1 {
        debug unrealized_pnl => _4;
        let _17: i128;
        let _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _32: i128;
        let _38: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _41: i128;
        let _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _47: i128;
        let _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _54: i128;
        scope 6 {
            debug max_positive_pnl => _17;
            let _65: std::string::String;
            let mut _85: &[&str; 2];
            scope 23 {
                debug res => _65;
            }
        }
        scope 7 {
            debug residual => _29;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _32;
            scope 10 {
            }
        }
        scope 11 {
            debug residual => _38;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _41;
            scope 14 {
            }
        }
        scope 15 {
            debug residual => _44;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _47;
            scope 18 {
            }
        }
        scope 19 {
            debug residual => _51;
            scope 20 {
            }
        }
        scope 21 {
            debug val => _54;
            scope 22 {
            }
        }
    }
    scope 2 {
        debug residual => _11;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _14;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &(*_1);
        StorageLive(_9);
        _9 = _2;
        _7 = calculate_base_asset_value_and_pnl_with_oracle_price(move _8, move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        StorageDead(_8);
        _6 = <std::result::Result<(u128, i128), error::ErrorCode> as Try>::branch(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        _10 = discriminant(_6);
        switchInt(move _10) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_14);
        _14 = ((_6 as Continue).0: (u128, i128));
        _5 = _14;
        StorageDead(_14);
        StorageLive(_4);
        _4 = (_5.1: i128);
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_15);
        StorageLive(_16);
        _16 = _4;
        _15 = Gt(move _16, const 0_i128);
        switchInt(move _15) -> [0: bb8, otherwise: bb7];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_11);
        _11 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_13);
        _13 = _11;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _13) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb46;
    }

    bb7: {
        StorageDead(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = ((*_1).2: i64);
        _26 = <i64 as Cast>::cast::<i128>(move _27) -> [return: bb9, unwind continue];
    }

    bb8: {
        StorageDead(_16);
        StorageLive(_84);
        _84 = _4;
        _0 = std::result::Result::<i128, error::ErrorCode>::Ok(move _84);
        StorageDead(_84);
        goto -> bb42;
    }

    bb9: {
        StorageDead(_27);
        _25 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _26) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_26);
        _28 = discriminant(_25);
        switchInt(move _28) -> [0: bb11, 1: bb12, otherwise: bb4];
    }

    bb11: {
        StorageLive(_32);
        _32 = ((_25 as Continue).0: i128);
        _24 = _32;
        StorageDead(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = ((*_1).4: i64);
        _35 = <i64 as Cast>::cast::<i128>(move _36) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_29);
        _29 = ((_25 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_31);
        _31 = _29;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _31) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_19);
        goto -> bb45;
    }

    bb14: {
        StorageDead(_36);
        _34 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _35) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_35);
        _37 = discriminant(_34);
        switchInt(move _37) -> [0: bb16, 1: bb17, otherwise: bb4];
    }

    bb16: {
        StorageLive(_41);
        _41 = ((_34 as Continue).0: i128);
        _33 = _41;
        StorageDead(_41);
        _23 = <i128 as SafeMath>::safe_sub(move _24, move _33) -> [return: bb19, unwind continue];
    }

    bb17: {
        StorageLive(_38);
        _38 = ((_34 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_40);
        _40 = _38;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _40) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_33);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb43;
    }

    bb19: {
        StorageDead(_33);
        StorageDead(_24);
        StorageLive(_42);
        _42 = {closure@programs/drift/src/state/user.rs:1108:22: 1108:29};
        _22 = std::result::Result::<i128, error::ErrorCode>::map::<i128, {closure@programs/drift/src/state/user.rs:1108:22: 1108:29}>(move _23, move _42) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_42);
        StorageDead(_23);
        _21 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _22) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_22);
        _43 = discriminant(_21);
        switchInt(move _43) -> [0: bb22, 1: bb23, otherwise: bb4];
    }

    bb22: {
        StorageLive(_47);
        _47 = ((_21 as Continue).0: i128);
        _20 = _47;
        StorageDead(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = _3;
        _48 = <i128 as Ord>::max(move _49, const 0_i128) -> [return: bb25, unwind continue];
    }

    bb23: {
        StorageLive(_44);
        _44 = ((_21 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_46);
        _46 = _44;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _46) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_46);
        StorageDead(_44);
        goto -> bb43;
    }

    bb25: {
        StorageDead(_49);
        _19 = <i128 as SafeMath>::safe_add(move _20, move _48) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_48);
        StorageDead(_20);
        _18 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _19) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_19);
        _50 = discriminant(_18);
        switchInt(move _50) -> [0: bb28, 1: bb29, otherwise: bb4];
    }

    bb28: {
        StorageLive(_54);
        _54 = ((_18 as Continue).0: i128);
        _17 = _54;
        StorageDead(_54);
        StorageDead(_34);
        StorageDead(_25);
        StorageDead(_21);
        StorageDead(_18);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = _17;
        StorageLive(_58);
        _58 = _4;
        _56 = Lt(move _57, move _58);
        switchInt(move _56) -> [0: bb32, otherwise: bb31];
    }

    bb29: {
        StorageLive(_51);
        _51 = ((_18 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_53);
        _53 = _51;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _53) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_53);
        StorageDead(_51);
        goto -> bb44;
    }

    bb31: {
        StorageDead(_58);
        StorageDead(_57);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _85 = const _;
        _69 = &(*_85);
        _68 = &(*_69);
        _67 = move _68 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_68);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _77 = &_17;
        _76 = &(*_77);
        _75 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _76) -> [return: bb33, unwind continue];
    }

    bb32: {
        StorageDead(_58);
        StorageDead(_57);
        _55 = const ();
        goto -> bb40;
    }

    bb33: {
        StorageDead(_76);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _80 = &_4;
        _79 = &(*_80);
        _78 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _79) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_79);
        _74 = [move _75, move _78];
        StorageDead(_78);
        StorageDead(_75);
        _73 = &_74;
        _72 = &(*_73);
        _71 = move _72 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_72);
        _66 = Arguments::<'_>::new_v1(move _67, move _71) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_71);
        StorageDead(_67);
        _65 = format(move _66) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_66);
        StorageDead(_80);
        StorageDead(_77);
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_69);
        _64 = move _65;
        StorageDead(_65);
        _63 = &_64;
        _62 = &(*_63);
        _61 = <String as Deref>::deref(move _62) -> [return: bb37, unwind: bb47];
    }

    bb37: {
        _60 = &(*_61);
        StorageDead(_62);
        _59 = solana_program::log::sol_log(move _60) -> [return: bb38, unwind: bb47];
    }

    bb38: {
        StorageDead(_60);
        drop(_64) -> [return: bb39, unwind: bb48];
    }

    bb39: {
        StorageDead(_64);
        StorageDead(_63);
        StorageDead(_61);
        StorageDead(_59);
        _55 = const ();
        goto -> bb40;
    }

    bb40: {
        StorageDead(_56);
        StorageDead(_55);
        StorageLive(_81);
        StorageLive(_82);
        _82 = _4;
        StorageLive(_83);
        _83 = _17;
        _81 = <i128 as Ord>::min(move _82, move _83) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_83);
        StorageDead(_82);
        _0 = std::result::Result::<i128, error::ErrorCode>::Ok(move _81);
        StorageDead(_81);
        StorageDead(_17);
        goto -> bb42;
    }

    bb42: {
        StorageDead(_15);
        StorageDead(_4);
        goto -> bb46;
    }

    bb43: {
        StorageDead(_20);
        StorageDead(_19);
        goto -> bb44;
    }

    bb44: {
        StorageDead(_34);
        goto -> bb45;
    }

    bb45: {
        StorageDead(_25);
        StorageDead(_21);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_4);
        goto -> bb46;
    }

    bb46: {
        return;
    }

    bb47 (cleanup): {
        drop(_64) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        resume;
    }
}
