// MIR for `openbook_v2::<impl at programs/drift/src/state/fulfillment_params/openbook_v2.rs:320:1: 320:75>::get_best_bid_and_ask` before PreCodegen

fn openbook_v2::<impl at programs/drift/src/state/fulfillment_params/openbook_v2.rs:320:1: 320:75>::get_best_bid_and_ask(_1: &OpenbookV2FulfillmentParams<'_, '_>) -> std::result::Result<(Option<u64>, Option<u64>), error::ErrorCode> {
    debug self => _1;
    let mut _0: std::result::Result<(std::option::Option<u64>, std::option::Option<u64>), error::ErrorCode>;
    let _2: openbook_v2_light::Market;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, openbook_v2_light::Market>;
    let mut _4: std::result::Result<openbook_v2_light::Market, error::ErrorCode>;
    let mut _5: &state::fulfillment_params::openbook_v2::OpenbookV2Context<'_, '_>;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _8: !;
    let mut _9: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _10: openbook_v2_light::Market;
    let mut _12: &std::cell::RefCell<&mut [u8]>;
    let _13: &std::cell::RefCell<&mut [u8]>;
    let mut _14: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &openbook_v2_light::BookSide>;
    let mut _17: std::result::Result<&openbook_v2_light::BookSide, error::ErrorCode>;
    let mut _18: std::result::Result<&openbook_v2_light::BookSide, bytemuck::PodCastError>;
    let mut _19: &[u8];
    let _20: &[u8];
    let _21: &[u8];
    let mut _22: &[u8];
    let _23: &&mut [u8];
    let mut _24: &std::cell::Ref<'_, &mut [u8]>;
    let mut _25: std::ops::RangeFrom<usize>;
    let mut _26: {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:419:80: 419:83};
    let mut _27: isize;
    let mut _29: !;
    let mut _30: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _33: &std::cell::RefCell<&mut [u8]>;
    let _34: &std::cell::RefCell<&mut [u8]>;
    let mut _35: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &openbook_v2_light::BookSide>;
    let mut _38: std::result::Result<&openbook_v2_light::BookSide, error::ErrorCode>;
    let mut _39: std::result::Result<&openbook_v2_light::BookSide, bytemuck::PodCastError>;
    let mut _40: &[u8];
    let _41: &[u8];
    let _42: &[u8];
    let mut _43: &[u8];
    let _44: &&mut [u8];
    let mut _45: &std::cell::Ref<'_, &mut [u8]>;
    let mut _46: std::ops::RangeFrom<usize>;
    let mut _47: {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:424:80: 424:83};
    let mut _48: isize;
    let mut _50: !;
    let mut _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _54: std::option::Option<u64>;
    let mut _55: &openbook_v2_light::BookSide;
    let mut _56: isize;
    let mut _59: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _60: std::result::Result<u64, error::ErrorCode>;
    let mut _61: u64;
    let mut _62: u64;
    let mut _63: i64;
    let mut _64: u32;
    let mut _65: u8;
    let mut _66: u64;
    let mut _67: i64;
    let mut _68: isize;
    let mut _70: !;
    let mut _71: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _73: u64;
    let mut _75: std::option::Option<u64>;
    let mut _76: &openbook_v2_light::BookSide;
    let mut _77: isize;
    let mut _80: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _81: std::result::Result<u64, error::ErrorCode>;
    let mut _82: u64;
    let mut _83: u64;
    let mut _84: i64;
    let mut _85: u32;
    let mut _86: u8;
    let mut _87: u64;
    let mut _88: i64;
    let mut _89: isize;
    let mut _91: !;
    let mut _92: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _94: u64;
    let mut _95: (std::option::Option<u64>, std::option::Option<u64>);
    let mut _96: std::option::Option<u64>;
    let mut _97: std::option::Option<u64>;
    let mut _98: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _99: &mut [u8];
    let mut _100: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _101: &mut [u8];
    scope 1 {
        debug market => _2;
        let _11: std::cell::Ref<'_, &mut [u8]>;
        scope 6 {
            debug bid_data => _11;
            let _15: &openbook_v2_light::BookSide;
            let _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _31: &openbook_v2_light::BookSide;
            scope 7 {
                debug bid => _15;
                let _32: std::cell::Ref<'_, &mut [u8]>;
                scope 12 {
                    debug ask_data => _32;
                    let _36: &openbook_v2_light::BookSide;
                    let _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _52: &openbook_v2_light::BookSide;
                    scope 13 {
                        debug ask => _36;
                        let _53: std::option::Option<u64>;
                        let _57: u64;
                        scope 18 {
                            debug bid_price => _53;
                            let _74: std::option::Option<u64>;
                            let _78: u64;
                            scope 25 {
                                debug ask_price => _74;
                            }
                            scope 26 {
                                debug ask => _78;
                                let _79: u64;
                                let _90: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _93: u64;
                                scope 27 {
                                    debug ask_price => _79;
                                }
                                scope 28 {
                                    debug residual => _90;
                                    scope 29 {
                                    }
                                }
                                scope 30 {
                                    debug val => _93;
                                    scope 31 {
                                    }
                                }
                            }
                        }
                        scope 19 {
                            debug bid => _57;
                            let _58: u64;
                            let _69: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _72: u64;
                            scope 20 {
                                debug bid_price => _58;
                            }
                            scope 21 {
                                debug residual => _69;
                                scope 22 {
                                }
                            }
                            scope 23 {
                                debug val => _72;
                                scope 24 {
                                }
                            }
                        }
                    }
                    scope 14 {
                        debug residual => _49;
                        scope 15 {
                        }
                    }
                    scope 16 {
                        debug val => _52;
                        scope 17 {
                        }
                    }
                }
            }
            scope 8 {
                debug residual => _28;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _31;
                scope 11 {
                }
            }
        }
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _10;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &((*_1).1: state::fulfillment_params::openbook_v2::OpenbookV2Context<'_, '_>);
        _4 = OpenbookV2Context::<'_, '_>::load_openbook_v2_market(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        _3 = <std::result::Result<openbook_v2_light::Market, error::ErrorCode> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_4);
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_10);
        _10 = ((_3 as Continue).0: openbook_v2_light::Market);
        _2 = _10;
        StorageDead(_10);
        StorageDead(_3);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _98 = deref_copy ((*_1).4: &anchor_lang::prelude::AccountInfo<'_>);
        _14 = &((*_98).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _13 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _14) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_7);
        _7 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_9);
        _9 = _7;
        _0 = <std::result::Result<(Option<u64>, Option<u64>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _9) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_9);
        StorageDead(_7);
        StorageDead(_3);
        goto -> bb52;
    }

    bb7: {
        _12 = &(*_13);
        StorageDead(_14);
        _11 = RefCell::<&mut [u8]>::borrow(move _12) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_12);
        StorageDead(_13);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &_11;
        _23 = <Ref<'_, &mut [u8]> as Deref>::deref(move _24) -> [return: bb9, unwind: bb55];
    }

    bb9: {
        _99 = deref_copy (*_23);
        _22 = &(*_99);
        StorageDead(_24);
        StorageLive(_25);
        _25 = RangeFrom::<usize> { start: const 8_usize };
        _21 = <[u8] as Index<RangeFrom<usize>>>::index(move _22, move _25) -> [return: bb10, unwind: bb55];
    }

    bb10: {
        StorageDead(_25);
        StorageDead(_22);
        _20 = &(*_21);
        _19 = &(*_20);
        _18 = bytemuck::try_from_bytes::<BookSide>(move _19) -> [return: bb11, unwind: bb55];
    }

    bb11: {
        StorageDead(_19);
        StorageLive(_26);
        _26 = {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:419:80: 419:83};
        _17 = std::result::Result::<&BookSide, bytemuck::PodCastError>::map_err::<error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:419:80: 419:83}>(move _18, move _26) -> [return: bb12, unwind: bb55];
    }

    bb12: {
        StorageDead(_26);
        StorageDead(_18);
        _16 = <std::result::Result<&BookSide, error::ErrorCode> as Try>::branch(move _17) -> [return: bb13, unwind: bb55];
    }

    bb13: {
        StorageDead(_17);
        _27 = discriminant(_16);
        switchInt(move _27) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_31);
        _31 = ((_16 as Continue).0: &openbook_v2_light::BookSide);
        _15 = _31;
        StorageDead(_31);
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_16);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _100 = deref_copy ((*_1).5: &anchor_lang::prelude::AccountInfo<'_>);
        _35 = &((*_100).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _34 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _35) -> [return: bb17, unwind: bb55];
    }

    bb15: {
        StorageLive(_28);
        _28 = ((_16 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_30);
        _30 = _28;
        _0 = <std::result::Result<(Option<u64>, Option<u64>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _30) -> [return: bb16, unwind: bb55];
    }

    bb16: {
        StorageDead(_30);
        StorageDead(_28);
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_16);
        goto -> bb50;
    }

    bb17: {
        _33 = &(*_34);
        StorageDead(_35);
        _32 = RefCell::<&mut [u8]>::borrow(move _33) -> [return: bb18, unwind: bb55];
    }

    bb18: {
        StorageDead(_33);
        StorageDead(_34);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = &_32;
        _44 = <Ref<'_, &mut [u8]> as Deref>::deref(move _45) -> [return: bb19, unwind: bb54];
    }

    bb19: {
        _101 = deref_copy (*_44);
        _43 = &(*_101);
        StorageDead(_45);
        StorageLive(_46);
        _46 = RangeFrom::<usize> { start: const 8_usize };
        _42 = <[u8] as Index<RangeFrom<usize>>>::index(move _43, move _46) -> [return: bb20, unwind: bb54];
    }

    bb20: {
        StorageDead(_46);
        StorageDead(_43);
        _41 = &(*_42);
        _40 = &(*_41);
        _39 = bytemuck::try_from_bytes::<BookSide>(move _40) -> [return: bb21, unwind: bb54];
    }

    bb21: {
        StorageDead(_40);
        StorageLive(_47);
        _47 = {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:424:80: 424:83};
        _38 = std::result::Result::<&BookSide, bytemuck::PodCastError>::map_err::<error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:424:80: 424:83}>(move _39, move _47) -> [return: bb22, unwind: bb54];
    }

    bb22: {
        StorageDead(_47);
        StorageDead(_39);
        _37 = <std::result::Result<&BookSide, error::ErrorCode> as Try>::branch(move _38) -> [return: bb23, unwind: bb54];
    }

    bb23: {
        StorageDead(_38);
        _48 = discriminant(_37);
        switchInt(move _48) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_52);
        _52 = ((_37 as Continue).0: &openbook_v2_light::BookSide);
        _36 = _52;
        StorageDead(_52);
        StorageDead(_44);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_37);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &(*_15);
        _54 = BookSide::find_max(move _55) -> [return: bb27, unwind: bb54];
    }

    bb25: {
        StorageLive(_49);
        _49 = ((_37 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_51);
        _51 = _49;
        _0 = <std::result::Result<(Option<u64>, Option<u64>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _51) -> [return: bb26, unwind: bb54];
    }

    bb26: {
        StorageDead(_51);
        StorageDead(_49);
        StorageDead(_44);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_37);
        goto -> bb48;
    }

    bb27: {
        StorageDead(_55);
        _56 = discriminant(_54);
        switchInt(move _56) -> [0: bb28, 1: bb29, otherwise: bb4];
    }

    bb28: {
        _53 = Option::<u64>::None;
        goto -> bb35;
    }

    bb29: {
        StorageLive(_57);
        _57 = ((_54 as Some).0: u64);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = _57;
        StorageLive(_62);
        StorageLive(_63);
        _63 = (_2.17: i64);
        _62 = move _63 as u64 (IntToInt);
        StorageDead(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = (_2.1: u8);
        _64 = move _65 as u32 (IntToInt);
        StorageDead(_65);
        StorageLive(_66);
        StorageLive(_67);
        _67 = (_2.18: i64);
        _66 = move _67 as u64 (IntToInt);
        StorageDead(_67);
        _60 = calculate_price_from_serum_limit_price(move _61, move _62, move _64, move _66) -> [return: bb30, unwind: bb54];
    }

    bb30: {
        StorageDead(_66);
        StorageDead(_64);
        StorageDead(_62);
        StorageDead(_61);
        _59 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _60) -> [return: bb31, unwind: bb54];
    }

    bb31: {
        StorageDead(_60);
        _68 = discriminant(_59);
        switchInt(move _68) -> [0: bb32, 1: bb33, otherwise: bb4];
    }

    bb32: {
        StorageLive(_72);
        _72 = ((_59 as Continue).0: u64);
        _58 = _72;
        StorageDead(_72);
        StorageDead(_59);
        StorageLive(_73);
        _73 = _58;
        _53 = Option::<u64>::Some(move _73);
        StorageDead(_73);
        StorageDead(_58);
        StorageDead(_57);
        goto -> bb35;
    }

    bb33: {
        StorageLive(_69);
        _69 = ((_59 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_71);
        _71 = _69;
        _0 = <std::result::Result<(Option<u64>, Option<u64>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _71) -> [return: bb34, unwind: bb54];
    }

    bb34: {
        StorageDead(_71);
        StorageDead(_69);
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_54);
        goto -> bb47;
    }

    bb35: {
        StorageDead(_54);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _76 = &(*_36);
        _75 = BookSide::find_min(move _76) -> [return: bb36, unwind: bb54];
    }

    bb36: {
        StorageDead(_76);
        _77 = discriminant(_75);
        switchInt(move _77) -> [0: bb37, 1: bb38, otherwise: bb4];
    }

    bb37: {
        _74 = Option::<u64>::None;
        goto -> bb44;
    }

    bb38: {
        StorageLive(_78);
        _78 = ((_75 as Some).0: u64);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = _78;
        StorageLive(_83);
        StorageLive(_84);
        _84 = (_2.17: i64);
        _83 = move _84 as u64 (IntToInt);
        StorageDead(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = (_2.1: u8);
        _85 = move _86 as u32 (IntToInt);
        StorageDead(_86);
        StorageLive(_87);
        StorageLive(_88);
        _88 = (_2.18: i64);
        _87 = move _88 as u64 (IntToInt);
        StorageDead(_88);
        _81 = calculate_price_from_serum_limit_price(move _82, move _83, move _85, move _87) -> [return: bb39, unwind: bb54];
    }

    bb39: {
        StorageDead(_87);
        StorageDead(_85);
        StorageDead(_83);
        StorageDead(_82);
        _80 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _81) -> [return: bb40, unwind: bb54];
    }

    bb40: {
        StorageDead(_81);
        _89 = discriminant(_80);
        switchInt(move _89) -> [0: bb41, 1: bb42, otherwise: bb4];
    }

    bb41: {
        StorageLive(_93);
        _93 = ((_80 as Continue).0: u64);
        _79 = _93;
        StorageDead(_93);
        StorageDead(_80);
        StorageLive(_94);
        _94 = _79;
        _74 = Option::<u64>::Some(move _94);
        StorageDead(_94);
        StorageDead(_79);
        StorageDead(_78);
        goto -> bb44;
    }

    bb42: {
        StorageLive(_90);
        _90 = ((_80 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_92);
        _92 = _90;
        _0 = <std::result::Result<(Option<u64>, Option<u64>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _92) -> [return: bb43, unwind: bb54];
    }

    bb43: {
        StorageDead(_92);
        StorageDead(_90);
        StorageDead(_80);
        StorageDead(_79);
        StorageDead(_78);
        StorageDead(_75);
        StorageDead(_74);
        goto -> bb47;
    }

    bb44: {
        StorageDead(_75);
        StorageLive(_95);
        StorageLive(_96);
        _96 = _53;
        StorageLive(_97);
        _97 = _74;
        _95 = (move _96, move _97);
        StorageDead(_97);
        StorageDead(_96);
        _0 = std::result::Result::<(Option<u64>, Option<u64>), error::ErrorCode>::Ok(move _95);
        StorageDead(_95);
        StorageDead(_74);
        StorageDead(_53);
        StorageDead(_36);
        drop(_32) -> [return: bb45, unwind: bb55];
    }

    bb45: {
        StorageDead(_32);
        StorageDead(_15);
        drop(_11) -> [return: bb46, unwind: bb56];
    }

    bb46: {
        StorageDead(_11);
        StorageDead(_2);
        goto -> bb53;
    }

    bb47: {
        StorageDead(_53);
        goto -> bb48;
    }

    bb48: {
        StorageDead(_36);
        drop(_32) -> [return: bb49, unwind: bb55];
    }

    bb49: {
        StorageDead(_32);
        goto -> bb50;
    }

    bb50: {
        StorageDead(_15);
        drop(_11) -> [return: bb51, unwind: bb56];
    }

    bb51: {
        StorageDead(_11);
        goto -> bb52;
    }

    bb52: {
        StorageDead(_2);
        goto -> bb53;
    }

    bb53: {
        return;
    }

    bb54 (cleanup): {
        drop(_32) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_11) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        resume;
    }
}
