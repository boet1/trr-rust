// MIR for `instructions::user::handle_place_spot_order` before PreCodegen

fn instructions::user::handle_place_spot_order(_1: anchor_lang::context::Context<'_, '_, '_, '_, instructions::user::PlaceOrder<'_>>, _2: order_params::OrderParams) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug params => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: state::perp_market_map::PerpMarketMap<'_>;
    let _4: state::spot_market_map::SpotMarketMap<'_>;
    let mut _5: state::oracle_map::OracleMap<'_>;
    let mut _6: instructions::optional_accounts::AccountMaps<'_>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, instructions::optional_accounts::AccountMaps<'_>>;
    let mut _8: std::result::Result<instructions::optional_accounts::AccountMaps<'_>, error::ErrorCode>;
    let mut _9: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _10: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _11: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _12: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _13: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _14: &std::collections::BTreeSet<u16>;
    let _15: &std::collections::BTreeSet<u16>;
    let _16: std::collections::BTreeSet<u16>;
    let mut _17: &std::collections::BTreeSet<u16>;
    let _18: &std::collections::BTreeSet<u16>;
    let _19: std::collections::BTreeSet<u16>;
    let mut _20: u64;
    let mut _21: anchor_lang::prelude::Clock;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _23: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _24: isize;
    let _25: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _26: !;
    let mut _27: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _28: anchor_lang::prelude::Clock;
    let mut _29: std::option::Option<state::state::OracleGuardRails>;
    let mut _30: isize;
    let _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _34: instructions::optional_accounts::AccountMaps<'_>;
    let _35: ();
    let mut _36: bool;
    let mut _37: &state::order_params::OrderParams;
    let mut _38: !;
    let _39: ();
    let mut _40: &str;
    let _41: &str;
    let mut _42: anchor_lang::error::Error;
    let mut _43: error::ErrorCode;
    let mut _44: &{closure@programs/drift/src/error.rs:647:9: 647:11};
    let _45: {closure@programs/drift/src/error.rs:647:9: 647:11};
    let mut _46: ();
    let mut _48: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _50: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _51: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _52: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _53: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _54: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _55: isize;
    let mut _57: !;
    let mut _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _60: ();
    let mut _61: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _62: std::result::Result<(), error::ErrorCode>;
    let mut _63: &state::state::State;
    let _64: &state::state::State;
    let mut _65: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _66: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _67: &mut state::user::User;
    let mut _68: &mut state::user::User;
    let mut _69: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _70: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _71: anchor_lang::prelude::Pubkey;
    let mut _72: &state::perp_market_map::PerpMarketMap<'_>;
    let _73: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _74: &state::spot_market_map::SpotMarketMap<'_>;
    let _75: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _76: &mut state::oracle_map::OracleMap<'_>;
    let mut _77: &mut state::oracle_map::OracleMap<'_>;
    let mut _78: &anchor_lang::prelude::Clock;
    let _79: &anchor_lang::prelude::Clock;
    let _80: anchor_lang::prelude::Clock;
    let mut _81: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _82: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _83: isize;
    let mut _85: !;
    let mut _86: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _88: state::order_params::OrderParams;
    let mut _89: state::order_params::PlaceOrderOptions;
    let mut _90: isize;
    let mut _92: !;
    let mut _93: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _95: ();
    let mut _97: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _98: &mut instructions::user::PlaceOrder<'_>;
    let mut _99: &mut instructions::user::PlaceOrder<'_>;
    let mut _100: &mut instructions::user::PlaceOrder<'_>;
    let mut _101: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _102: bool;
    let mut _103: bool;
    let mut _104: bool;
    let mut _105: bool;
    let mut _106: isize;
    let mut _107: isize;
    let mut _108: isize;
    let mut _109: isize;
    let mut _110: isize;
    let mut _111: isize;
    let mut _112: isize;
    let mut _113: isize;
    let mut _114: isize;
    let mut _115: isize;
    let mut _116: isize;
    let mut _117: isize;
    let mut _118: isize;
    let mut _119: isize;
    let mut _120: isize;
    let mut _121: isize;
    let mut _122: isize;
    let mut _123: isize;
    let mut _124: isize;
    let mut _125: isize;
    let mut _126: isize;
    let mut _127: isize;
    let mut _128: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug perp_market_map => _3;
        debug spot_market_map => _4;
        debug oracle_map => _5;
        let _47: anchor_lang::prelude::Pubkey;
        let mut _96: &{closure@programs/drift/src/error.rs:647:9: 647:11};
        scope 10 {
            debug user_key => _47;
            let mut _49: std::cell::RefMut<'_, state::user::User>;
            let _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _59: std::cell::RefMut<'_, state::user::User>;
            scope 11 {
                debug user => _49;
                let _84: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                let _87: anchor_lang::prelude::Clock;
                let _91: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _94: ();
                scope 16 {
                    debug residual => _84;
                    scope 17 {
                    }
                }
                scope 18 {
                    debug val => _87;
                    scope 19 {
                    }
                }
                scope 20 {
                    debug residual => _91;
                    scope 21 {
                    }
                }
                scope 22 {
                    debug val => _94;
                    scope 23 {
                    }
                }
            }
            scope 12 {
                debug residual => _56;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _59;
                scope 15 {
                }
            }
        }
    }
    scope 2 {
        debug residual => _25;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _28;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _31;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _34;
        scope 9 {
        }
    }

    bb0: {
        _105 = const false;
        _104 = const false;
        _103 = const false;
        _102 = const false;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _97 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _13 = &(*_97);
        _12 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _13) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_13);
        _11 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::peekable(move _12) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_12);
        _10 = &mut _11;
        _9 = &mut (*_10);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = BTreeSet::<u16>::new() -> [return: bb3, unwind continue];
    }

    bb3: {
        _15 = &_16;
        _14 = &(*_15);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = BTreeSet::<u16>::new() -> [return: bb4, unwind: bb63];
    }

    bb4: {
        _18 = &_19;
        _17 = &(*_18);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb5, unwind: bb62];
    }

    bb5: {
        _22 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _23) -> [return: bb6, unwind: bb62];
    }

    bb6: {
        _104 = const true;
        _105 = const true;
        StorageDead(_23);
        _24 = discriminant(_22);
        switchInt(move _24) -> [0: bb7, 1: bb9, otherwise: bb8];
    }

    bb7: {
        StorageLive(_28);
        _28 = move ((_22 as Continue).0: anchor_lang::prelude::Clock);
        _21 = move _28;
        StorageDead(_28);
        _20 = (_21.0: u64);
        StorageLive(_29);
        _29 = Option::<state::state::OracleGuardRails>::None;
        _8 = load_maps(move _9, move _14, move _17, move _20, move _29) -> [return: bb11, unwind: bb69];
    }

    bb8: {
        unreachable;
    }

    bb9: {
        StorageLive(_25);
        _25 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_27);
        _27 = move _25;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _27) -> [return: bb10, unwind: bb69];
    }

    bb10: {
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_20);
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb53;
    }

    bb11: {
        StorageDead(_29);
        StorageDead(_20);
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_9);
        _7 = <std::result::Result<AccountMaps<'_>, error::ErrorCode> as Try>::branch(move _8) -> [return: bb12, unwind: bb69];
    }

    bb12: {
        StorageDead(_8);
        _30 = discriminant(_7);
        switchInt(move _30) -> [0: bb13, 1: bb14, otherwise: bb8];
    }

    bb13: {
        StorageLive(_34);
        _34 = move ((_7 as Continue).0: instructions::optional_accounts::AccountMaps<'_>);
        _6 = move _34;
        StorageDead(_34);
        StorageLive(_3);
        _3 = move (_6.0: state::perp_market_map::PerpMarketMap<'_>);
        StorageLive(_4);
        _4 = move (_6.1: state::spot_market_map::SpotMarketMap<'_>);
        StorageLive(_5);
        _5 = move (_6.2: state::oracle_map::OracleMap<'_>);
        _108 = discriminant(_7);
        _110 = discriminant(_22);
        _104 = const false;
        _105 = const false;
        StorageDead(_22);
        StorageDead(_21);
        drop(_19) -> [return: bb16, unwind: bb58];
    }

    bb14: {
        StorageLive(_31);
        _31 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_33);
        _33 = _31;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _33) -> [return: bb15, unwind: bb68];
    }

    bb15: {
        StorageDead(_33);
        StorageDead(_31);
        _106 = discriminant(_7);
        goto -> bb53;
    }

    bb16: {
        StorageDead(_19);
        StorageDead(_18);
        drop(_16) -> [return: bb17, unwind: bb59];
    }

    bb17: {
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &_2;
        _36 = order_params::OrderParams::is_immediate_or_cancel(move _37) -> [return: bb18, unwind: bb59];
    }

    bb18: {
        switchInt(move _36) -> [0: bb23, otherwise: bb19];
    }

    bb19: {
        StorageDead(_37);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = const "immediate_or_cancel order must be in place_and_make or place_and_take";
        _40 = &(*_41);
        _39 = solana_program::log::sol_log(move _40) -> [return: bb20, unwind: bb59];
    }

    bb20: {
        StorageDead(_40);
        StorageDead(_41);
        StorageDead(_39);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _96 = const _;
        _44 = &(*_96);
        StorageLive(_46);
        _46 = ();
        _43 = <{closure@programs/drift/src/error.rs:647:9: 647:11} as Fn<()>>::call(move _44, move _46) -> [return: bb21, unwind: bb59];
    }

    bb21: {
        StorageDead(_46);
        StorageDead(_44);
        _42 = <error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _43) -> [return: bb22, unwind: bb59];
    }

    bb22: {
        StorageDead(_43);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _42);
        StorageDead(_42);
        StorageDead(_36);
        StorageDead(_35);
        goto -> bb49;
    }

    bb23: {
        StorageDead(_37);
        _35 = const ();
        StorageDead(_36);
        StorageDead(_35);
        StorageLive(_47);
        StorageLive(_48);
        _98 = deref_copy (_1.1: &mut instructions::user::PlaceOrder<'_>);
        _48 = &((*_98).1: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _47 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _48) -> [return: bb24, unwind: bb59];
    }

    bb24: {
        StorageDead(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _99 = deref_copy (_1.1: &mut instructions::user::PlaceOrder<'_>);
        _53 = &((*_99).1: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _52 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _53) -> [return: bb25, unwind: bb59];
    }

    bb25: {
        StorageDead(_53);
        StorageLive(_54);
        _54 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _51 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _52, move _54) -> [return: bb26, unwind: bb59];
    }

    bb26: {
        StorageDead(_54);
        StorageDead(_52);
        _50 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _51) -> [return: bb27, unwind: bb59];
    }

    bb27: {
        StorageDead(_51);
        _55 = discriminant(_50);
        switchInt(move _55) -> [0: bb28, 1: bb29, otherwise: bb8];
    }

    bb28: {
        StorageLive(_59);
        _59 = move ((_50 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _49 = move _59;
        StorageDead(_59);
        _114 = discriminant(_50);
        StorageDead(_50);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _100 = deref_copy (_1.1: &mut instructions::user::PlaceOrder<'_>);
        _66 = &((*_100).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _101 = deref_copy (*_66);
        _128 = (((_101.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _65 = &(*_128);
        _64 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _65) -> [return: bb31, unwind: bb57];
    }

    bb29: {
        StorageLive(_56);
        _56 = ((_50 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_58);
        _58 = _56;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _58) -> [return: bb30, unwind: bb67];
    }

    bb30: {
        StorageDead(_58);
        StorageDead(_56);
        _112 = discriminant(_50);
        StorageDead(_50);
        goto -> bb48;
    }

    bb31: {
        _63 = &(*_64);
        StorageDead(_65);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &mut _49;
        _69 = &mut (*_70);
        _68 = <RefMut<'_, User> as DerefMut>::deref_mut(move _69) -> [return: bb32, unwind: bb57];
    }

    bb32: {
        _67 = &mut (*_68);
        StorageDead(_69);
        StorageLive(_71);
        _71 = _47;
        StorageLive(_72);
        StorageLive(_73);
        _73 = &_3;
        _72 = &(*_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = &_4;
        _74 = &(*_75);
        StorageLive(_76);
        StorageLive(_77);
        _77 = &mut _5;
        _76 = &mut (*_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb33, unwind: bb57];
    }

    bb33: {
        _81 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _82) -> [return: bb34, unwind: bb57];
    }

    bb34: {
        _102 = const true;
        _103 = const true;
        StorageDead(_82);
        _83 = discriminant(_81);
        switchInt(move _83) -> [0: bb35, 1: bb36, otherwise: bb8];
    }

    bb35: {
        StorageLive(_87);
        _87 = move ((_81 as Continue).0: anchor_lang::prelude::Clock);
        _80 = move _87;
        StorageDead(_87);
        _79 = &_80;
        _78 = &(*_79);
        StorageLive(_88);
        _88 = _2;
        StorageLive(_89);
        _89 = <PlaceOrderOptions as Default>::default() -> [return: bb38, unwind: bb66];
    }

    bb36: {
        StorageLive(_84);
        _84 = move ((_81 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_86);
        _86 = move _84;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _86) -> [return: bb37, unwind: bb66];
    }

    bb37: {
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_78);
        StorageDead(_76);
        StorageDead(_74);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_67);
        StorageDead(_63);
        StorageDead(_62);
        goto -> bb65;
    }

    bb38: {
        _62 = controller::orders::place_spot_order(move _63, move _67, move _71, move _72, move _74, move _76, move _78, move _88, move _89) -> [return: bb39, unwind: bb66];
    }

    bb39: {
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_78);
        StorageDead(_76);
        StorageDead(_74);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_67);
        StorageDead(_63);
        _61 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _62) -> [return: bb40, unwind: bb66];
    }

    bb40: {
        StorageDead(_62);
        _90 = discriminant(_61);
        switchInt(move _90) -> [0: bb41, 1: bb42, otherwise: bb8];
    }

    bb41: {
        StorageLive(_94);
        _94 = ((_61 as Continue).0: ());
        _60 = _94;
        StorageDead(_94);
        _116 = discriminant(_81);
        _102 = const false;
        _103 = const false;
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_79);
        StorageDead(_77);
        StorageDead(_75);
        StorageDead(_73);
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_66);
        StorageDead(_64);
        StorageDead(_61);
        StorageDead(_60);
        StorageLive(_95);
        _95 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _95);
        StorageDead(_95);
        drop(_49) -> [return: bb44, unwind: bb59];
    }

    bb42: {
        StorageLive(_91);
        _91 = ((_61 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_93);
        _93 = _91;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _93) -> [return: bb43, unwind: bb66];
    }

    bb43: {
        StorageDead(_93);
        StorageDead(_91);
        goto -> bb65;
    }

    bb44: {
        StorageDead(_49);
        StorageDead(_47);
        drop(_5) -> [return: bb45, unwind: bb60];
    }

    bb45: {
        StorageDead(_5);
        drop(_4) -> [return: bb46, unwind: bb61];
    }

    bb46: {
        StorageDead(_4);
        drop(_3) -> [return: bb47, unwind: bb64];
    }

    bb47: {
        StorageDead(_3);
        goto -> bb56;
    }

    bb48: {
        StorageDead(_49);
        StorageDead(_47);
        goto -> bb49;
    }

    bb49: {
        drop(_5) -> [return: bb50, unwind: bb60];
    }

    bb50: {
        StorageDead(_5);
        drop(_4) -> [return: bb51, unwind: bb61];
    }

    bb51: {
        StorageDead(_4);
        drop(_3) -> [return: bb52, unwind: bb64];
    }

    bb52: {
        StorageDead(_3);
        goto -> bb56;
    }

    bb53: {
        _120 = discriminant(_22);
        _104 = const false;
        _105 = const false;
        StorageDead(_22);
        StorageDead(_21);
        drop(_19) -> [return: bb54, unwind: bb63];
    }

    bb54: {
        StorageDead(_19);
        StorageDead(_18);
        drop(_16) -> [return: bb55, unwind: bb64];
    }

    bb55: {
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb56;
    }

    bb56: {
        return;
    }

    bb57 (cleanup): {
        drop(_49) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_16) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_5) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_4) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_3) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_19) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        drop(_16) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        resume;
    }

    bb65: {
        _118 = discriminant(_81);
        _102 = const false;
        _103 = const false;
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_79);
        StorageDead(_77);
        StorageDead(_75);
        StorageDead(_73);
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_66);
        StorageDead(_64);
        StorageDead(_61);
        StorageDead(_60);
        drop(_49) -> [return: bb48, unwind: bb59];
    }

    bb66 (cleanup): {
        _122 = discriminant(_81);
        goto -> bb57;
    }

    bb67 (cleanup): {
        _123 = discriminant(_50);
        goto -> bb59;
    }

    bb68 (cleanup): {
        _126 = discriminant(_7);
        goto -> bb69;
    }

    bb69 (cleanup): {
        _127 = discriminant(_22);
        goto -> bb62;
    }
}
