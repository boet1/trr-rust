// MIR for `program_entry` after PreCodegen

fn program_entry(_1: &anchor_lang::prelude::Pubkey, _2: &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8]) -> std::result::Result<(), anchor_lang::prelude::ProgramError> {
    debug program_id => _1;
    debug accounts => _2;
    debug data => _3;
    let mut _0: std::result::Result<(), anchor_lang::prelude::ProgramError>;
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: bool;
    let mut _9: ();
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _11: std::result::Result<(), anchor_lang::error::Error>;
    let mut _12: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _13: &[u8];
    let mut _14: isize;
    let mut _16: !;
    let mut _17: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _19: ();
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _21: std::result::Result<(), anchor_lang::error::Error>;
    let mut _22: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _23: &[u8];
    let mut _24: isize;
    let mut _26: !;
    let mut _27: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _29: anchor_lang::prelude::ProgramError;
    let mut _30: anchor_lang::prelude::ProgramError;
    let mut _31: &anchor_lang::prelude::Pubkey;
    let mut _32: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _33: &[u8];
    let mut _34: isize;
    let mut _35: isize;
    let mut _36: isize;
    let mut _37: isize;
    let mut _38: isize;
    let mut _39: isize;
    let mut _40: isize;
    let mut _41: isize;
    let mut _42: isize;
    let mut _43: isize;
    scope 1 {
        debug discriminator => _7;
        debug payload => _8;
        let _7: &u8;
        let _8: &[u8];
        let _15: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _18: ();
        let _25: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _28: ();
        scope 2 {
            debug residual => _15;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _18;
            scope 5 {
            }
        }
        scope 6 {
            debug residual => _25;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _28;
            scope 9 {
            }
        }
    }

    bb0: {
        _4 = Len((*_3));
        _5 = const 5_usize;
        _6 = Ge(move _4, move _5);
        switchInt(move _6) -> [0: bb22, otherwise: bb1];
    }

    bb1: {
        switchInt((*_3)[0 of 5]) -> [255: bb2, otherwise: bb22];
    }

    bb2: {
        switchInt((*_3)[1 of 5]) -> [255: bb3, otherwise: bb22];
    }

    bb3: {
        switchInt((*_3)[2 of 5]) -> [255: bb4, otherwise: bb22];
    }

    bb4: {
        switchInt((*_3)[3 of 5]) -> [255: bb5, otherwise: bb22];
    }

    bb5: {
        StorageLive(_7);
        _7 = &(*_3)[4 of 5];
        StorageLive(_8);
        _8 = &(*_3)[5:];
        switchInt((*_7)) -> [0: bb7, 1: bb14, otherwise: bb6];
    }

    bb6: {
        StorageLive(_29);
        StorageLive(_30);
        _30 = anchor_lang::prelude::ProgramError::InvalidInstructionData;
        _29 = <anchor_lang::prelude::ProgramError as Into<anchor_lang::prelude::ProgramError>>::into(move _30) -> [return: bb20, unwind: bb26];
    }

    bb7: {
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &(*_2);
        StorageLive(_13);
        _13 = &(*_8);
        _11 = admin::handle_update_mm_oracle_native(move _12, move _13) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_13);
        StorageDead(_12);
        _10 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _11) -> [return: bb9, unwind: bb26];
    }

    bb9: {
        StorageDead(_11);
        _14 = discriminant(_10);
        switchInt(move _14) -> [0: bb10, 1: bb12, otherwise: bb11];
    }

    bb10: {
        StorageLive(_18);
        _18 = ((_10 as Continue).0: ());
        _9 = _18;
        StorageDead(_18);
        _0 = std::result::Result::<(), anchor_lang::prelude::ProgramError>::Ok(move _9);
        _34 = discriminant(_10);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb21;
    }

    bb11: {
        unreachable;
    }

    bb12: {
        StorageLive(_15);
        _15 = move ((_10 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_17);
        _17 = move _15;
        _0 = <std::result::Result<(), anchor_lang::prelude::ProgramError> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _17) -> [return: bb13, unwind: bb28];
    }

    bb13: {
        StorageDead(_17);
        StorageDead(_15);
        _40 = discriminant(_10);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb24;
    }

    bb14: {
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = &(*_2);
        StorageLive(_23);
        _23 = &(*_8);
        _21 = admin::handle_update_amm_spread_adjustment_native(move _22, move _23) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_23);
        StorageDead(_22);
        _20 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _21) -> [return: bb16, unwind: bb26];
    }

    bb16: {
        StorageDead(_21);
        _24 = discriminant(_20);
        switchInt(move _24) -> [0: bb17, 1: bb18, otherwise: bb11];
    }

    bb17: {
        StorageLive(_28);
        _28 = ((_20 as Continue).0: ());
        _19 = _28;
        StorageDead(_28);
        _0 = std::result::Result::<(), anchor_lang::prelude::ProgramError>::Ok(move _19);
        _36 = discriminant(_20);
        StorageDead(_20);
        StorageDead(_19);
        goto -> bb21;
    }

    bb18: {
        StorageLive(_25);
        _25 = move ((_20 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_27);
        _27 = move _25;
        _0 = <std::result::Result<(), anchor_lang::prelude::ProgramError> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _27) -> [return: bb19, unwind: bb27];
    }

    bb19: {
        StorageDead(_27);
        StorageDead(_25);
        _38 = discriminant(_20);
        StorageDead(_20);
        StorageDead(_19);
        goto -> bb24;
    }

    bb20: {
        StorageDead(_30);
        _0 = std::result::Result::<(), anchor_lang::prelude::ProgramError>::Err(move _29);
        StorageDead(_29);
        goto -> bb21;
    }

    bb21: {
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb25;
    }

    bb22: {
        StorageLive(_31);
        _31 = &(*_1);
        StorageLive(_32);
        _32 = &(*_2);
        StorageLive(_33);
        _33 = &(*_3);
        _0 = entry(move _31, move _32, move _33) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_31);
        goto -> bb25;
    }

    bb24: {
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb25;
    }

    bb25: {
        return;
    }

    bb26 (cleanup): {
        resume;
    }

    bb27 (cleanup): {
        _42 = discriminant(_20);
        goto -> bb26;
    }

    bb28 (cleanup): {
        _43 = discriminant(_10);
        goto -> bb26;
    }
}
