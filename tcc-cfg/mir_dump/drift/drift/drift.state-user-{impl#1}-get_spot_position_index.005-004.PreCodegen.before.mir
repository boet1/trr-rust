// MIR for `state::user::<impl at programs/drift/src/state/user.rs:136:1: 136:10>::get_spot_position_index` before PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:136:1: 136:10>::get_spot_position_index(_1: &User, _2: u16) -> std::result::Result<usize, error::ErrorCode> {
    debug self => _1;
    debug market_index => _2;
    let mut _0: std::result::Result<usize, error::ErrorCode>;
    let _3: ();
    let mut _4: bool;
    let mut _5: u16;
    let mut _6: !;
    let _7: ();
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _9: std::result::Result<(), error::ErrorCode>;
    let mut _10: bool;
    let mut _11: u16;
    let _12: usize;
    let mut _13: usize;
    let mut _14: bool;
    let mut _15: ();
    let _16: error::ErrorCode;
    let _17: ();
    let mut _18: &str;
    let _19: &str;
    let mut _20: &std::string::String;
    let _21: &std::string::String;
    let _22: std::string::String;
    let mut _24: std::fmt::Arguments<'_>;
    let mut _25: &[&str];
    let mut _26: &[&str; 2];
    let _27: &[&str; 2];
    let _28: [&str; 2];
    let mut _29: &[core::fmt::rt::Argument<'_>];
    let mut _30: &[core::fmt::rt::Argument<'_>; 1];
    let _31: &[core::fmt::rt::Argument<'_>; 1];
    let _32: [core::fmt::rt::Argument<'_>; 1];
    let mut _33: core::fmt::rt::Argument<'_>;
    let mut _34: &error::ErrorCode;
    let _35: &error::ErrorCode;
    let _36: ();
    let mut _37: &str;
    let _38: &str;
    let mut _39: error::ErrorCode;
    let mut _40: isize;
    let _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _42: !;
    let mut _43: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _44: ();
    let mut _45: std::option::Option<usize>;
    let mut _46: &mut std::slice::Iter<'_, state::user::SpotPosition>;
    let mut _47: std::slice::Iter<'_, state::user::SpotPosition>;
    let mut _48: &[state::user::SpotPosition];
    let mut _49: &[state::user::SpotPosition; 8];
    let mut _50: {closure@programs/drift/src/state/user.rs:178:23: 178:38};
    let mut _51: &u16;
    let mut _52: error::ErrorCode;
    scope 1 {
        debug error_code => _16;
        let _23: std::string::String;
        let mut _53: &[&str; 2];
        scope 2 {
            debug res => _23;
        }
    }
    scope 3 {
        debug residual => _41;
        scope 4 {
        }
    }
    scope 5 {
        debug val => _44;
        scope 6 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = _2;
        _4 = Eq(move _5, const 0_u16);
        switchInt(move _4) -> [0: bb18, otherwise: bb1];
    }

    bb1: {
        StorageDead(_5);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = const 0_usize;
        _13 = Len(((*_1).3: [state::user::SpotPosition; 8]));
        _14 = Lt(_12, _13);
        assert(move _14, "index out of bounds: the length is {} but the index is {}", move _13, _12) -> [success: bb2, unwind continue];
    }

    bb2: {
        _11 = (((*_1).3: [state::user::SpotPosition; 8])[_12].4: u16);
        _10 = Eq(move _11, const 0_u16);
        switchInt(move _10) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageDead(_12);
        StorageDead(_11);
        StorageLive(_15);
        _15 = ();
        _9 = std::result::Result::<(), error::ErrorCode>::Ok(move _15);
        StorageDead(_15);
        goto -> bb12;
    }

    bb4: {
        StorageDead(_12);
        StorageDead(_11);
        StorageLive(_16);
        _16 = error::ErrorCode::DefaultError;
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _53 = const _;
        _27 = &(*_53);
        _26 = &(*_27);
        _25 = move _26 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_26);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = &_16;
        _34 = &(*_35);
        _33 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _34) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_34);
        _32 = [move _33];
        StorageDead(_33);
        _31 = &_32;
        _30 = &(*_31);
        _29 = move _30 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_30);
        _24 = Arguments::<'_>::new_v1(move _25, move _29) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_29);
        StorageDead(_25);
        _23 = format(move _24) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_24);
        StorageDead(_35);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_27);
        _22 = move _23;
        StorageDead(_23);
        _21 = &_22;
        _20 = &(*_21);
        _19 = <String as Deref>::deref(move _20) -> [return: bb8, unwind: bb24];
    }

    bb8: {
        _18 = &(*_19);
        StorageDead(_20);
        _17 = solana_program::log::sol_log(move _18) -> [return: bb9, unwind: bb24];
    }

    bb9: {
        StorageDead(_18);
        drop(_22) -> [return: bb10, unwind: bb25];
    }

    bb10: {
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_17);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = const "User position 0 not market_index=0";
        _37 = &(*_38);
        _36 = solana_program::log::sol_log(move _37) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_37);
        StorageDead(_38);
        StorageDead(_36);
        StorageLive(_39);
        _39 = _16;
        _9 = std::result::Result::<(), error::ErrorCode>::Err(move _39);
        StorageDead(_39);
        StorageDead(_16);
        goto -> bb12;
    }

    bb12: {
        StorageDead(_10);
        _8 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _9) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_9);
        _40 = discriminant(_8);
        switchInt(move _40) -> [0: bb14, 1: bb16, otherwise: bb15];
    }

    bb14: {
        StorageLive(_44);
        _44 = ((_8 as Continue).0: ());
        _7 = _44;
        StorageDead(_44);
        StorageDead(_8);
        StorageDead(_7);
        _0 = std::result::Result::<usize, error::ErrorCode>::Ok(const 0_usize);
        goto -> bb22;
    }

    bb15: {
        unreachable;
    }

    bb16: {
        StorageLive(_41);
        _41 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_43);
        _43 = _41;
        _0 = <std::result::Result<usize, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _43) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_43);
        StorageDead(_41);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb22;
    }

    bb18: {
        StorageDead(_5);
        _3 = const ();
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = &((*_1).3: [state::user::SpotPosition; 8]);
        _48 = move _49 as &[state::user::SpotPosition] (PointerCoercion(Unsize));
        StorageDead(_49);
        _47 = core::slice::<impl [SpotPosition]>::iter(move _48) -> [return: bb19, unwind continue];
    }

    bb19: {
        _46 = &mut _47;
        StorageDead(_48);
        StorageLive(_50);
        StorageLive(_51);
        _51 = &_2;
        _50 = {closure@programs/drift/src/state/user.rs:178:23: 178:38} { market_index: move _51 };
        StorageDead(_51);
        _45 = <std::slice::Iter<'_, SpotPosition> as Iterator>::position::<{closure@programs/drift/src/state/user.rs:178:23: 178:38}>(move _46, move _50) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_50);
        StorageDead(_46);
        StorageLive(_52);
        _52 = error::ErrorCode::CouldNotFindSpotPosition;
        _0 = Option::<usize>::ok_or::<error::ErrorCode>(move _45, move _52) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_52);
        StorageDead(_45);
        StorageDead(_47);
        goto -> bb23;
    }

    bb22: {
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb23;
    }

    bb23: {
        return;
    }

    bb24 (cleanup): {
        drop(_22) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        resume;
    }
}
