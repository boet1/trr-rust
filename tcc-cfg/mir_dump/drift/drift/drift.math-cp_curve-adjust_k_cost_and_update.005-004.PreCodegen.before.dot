digraph Mir_0_2171 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn adjust_k_cost_and_update(_1: &amp;ReErased mut state::perp_market::PerpMarket, _2: &amp;ReErased math::cp_curve::UpdateKResult) -&gt; std::result::Result&lt;i128, error::ErrorCode&gt;<br align="left"/>let _3: u128;<br align="left"/>let mut _4: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _5: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _6: i128;<br align="left"/>let mut _7: &amp;ReErased state::perp_market::AMM;<br align="left"/>let _8: &amp;ReErased state::perp_market::AMM;<br align="left"/>let mut _9: isize;<br align="left"/>let _10: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _11: !;<br align="left"/>let mut _12: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _13: u128;<br align="left"/>let _14: ();<br align="left"/>let mut _15: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _16: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _17: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _18: &amp;ReErased math::cp_curve::UpdateKResult;<br align="left"/>let mut _19: isize;<br align="left"/>let _20: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _21: !;<br align="left"/>let mut _22: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _23: ();<br align="left"/>let _24: u128;<br align="left"/>let _25: i128;<br align="left"/>let mut _26: (u128, i128);<br align="left"/>let mut _27: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (u128, i128)&gt;;<br align="left"/>let mut _28: std::result::Result&lt;(u128, i128), error::ErrorCode&gt;;<br align="left"/>let mut _29: i128;<br align="left"/>let mut _30: u128;<br align="left"/>let mut _31: &amp;ReErased state::perp_market::AMM;<br align="left"/>let _32: &amp;ReErased state::perp_market::AMM;<br align="left"/>let mut _33: isize;<br align="left"/>let _34: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _35: !;<br align="left"/>let mut _36: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _37: (u128, i128);<br align="left"/>let mut _38: i128;<br align="left"/>debug market =&gt; _1;<br align="left"/>debug update_k_result =&gt; _2;<br align="left"/>debug current_net_market_value =&gt; _3;<br align="left"/>debug residual =&gt; _10;<br align="left"/>debug val =&gt; _13;<br align="left"/>debug residual =&gt; _20;<br align="left"/>debug val =&gt; _23;<br align="left"/>debug _new_net_market_value =&gt; _24;<br align="left"/>debug cost =&gt; _25;<br align="left"/>debug residual =&gt; _34;<br align="left"/>debug val =&gt; _37;<br align="left"/>>;
    bb0__0_2171 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = (((*_1).1: state::perp_market::AMM).15: i128)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = &amp;((*_1).1: state::perp_market::AMM)<br/>_7 = &amp;(*_8)<br/></td></tr><tr><td align="left">_5 = calculate_base_asset_value(move _6, move _7)</td></tr></table>>];
    bb1__0_2171 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">_4 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _5)</td></tr></table>>];
    bb2__0_2171 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>_9 = discriminant(_4)<br/></td></tr><tr><td align="left">switchInt(move _9)</td></tr></table>>];
    bb3__0_2171 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_13)<br/>_13 = ((_4 as Continue).0: u128)<br/>_3 = _13<br/>StorageDead(_13)<br/>StorageDead(_8)<br/>StorageDead(_4)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>_17 = &amp;mut (*_1)<br/>StorageLive(_18)<br/>_18 = &amp;(*_2)<br/></td></tr><tr><td align="left">_16 = cp_curve::update_k(move _17, move _18)</td></tr></table>>];
    bb4__0_2171 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_2171 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_10)<br/>_10 = ((_4 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_12)<br/>_12 = _10<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _12)</td></tr></table>>];
    bb6__0_2171 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_10)<br/>StorageDead(_8)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_2171 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageDead(_17)<br/></td></tr><tr><td align="left">_15 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _16)</td></tr></table>>];
    bb8__0_2171 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>_19 = discriminant(_15)<br/></td></tr><tr><td align="left">switchInt(move _19)</td></tr></table>>];
    bb9__0_2171 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_23)<br/>_23 = ((_15 as Continue).0: ())<br/>_14 = _23<br/>StorageDead(_23)<br/>StorageDead(_15)<br/>StorageDead(_14)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>_29 = (((*_1).1: state::perp_market::AMM).15: i128)<br/>StorageLive(_30)<br/>_30 = _3<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>_32 = &amp;((*_1).1: state::perp_market::AMM)<br/>_31 = &amp;(*_32)<br/></td></tr><tr><td align="left">_28 = calculate_base_asset_value_and_pnl(move _29, move _30, move _31)</td></tr></table>>];
    bb10__0_2171 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_20)<br/>_20 = ((_15 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_22)<br/>_22 = _20<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _22)</td></tr></table>>];
    bb11__0_2171 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_22)<br/>StorageDead(_20)<br/>StorageDead(_15)<br/>StorageDead(_14)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_2171 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/>StorageDead(_30)<br/>StorageDead(_29)<br/></td></tr><tr><td align="left">_27 = &lt;std::result::Result&lt;(u128, i128), error::ErrorCode&gt; as Try&gt;::branch(move _28)</td></tr></table>>];
    bb13__0_2171 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>_33 = discriminant(_27)<br/></td></tr><tr><td align="left">switchInt(move _33)</td></tr></table>>];
    bb14__0_2171 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageLive(_37)<br/>_37 = ((_27 as Continue).0: (u128, i128))<br/>_26 = _37<br/>StorageDead(_37)<br/>StorageLive(_24)<br/>_24 = (_26.0: u128)<br/>StorageLive(_25)<br/>_25 = (_26.1: i128)<br/>StorageDead(_32)<br/>StorageDead(_27)<br/>StorageDead(_26)<br/>StorageLive(_38)<br/>_38 = _25<br/>_0 = std::result::Result::&lt;i128, error::ErrorCode&gt;::Ok(move _38)<br/>StorageDead(_38)<br/>StorageDead(_25)<br/>StorageDead(_24)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_2171 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_34)<br/>_34 = ((_27 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_36)<br/>_36 = _34<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _36)</td></tr></table>>];
    bb16__0_2171 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_36)<br/>StorageDead(_34)<br/>StorageDead(_32)<br/>StorageDead(_27)<br/>StorageDead(_26)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_2171 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_2171 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2171 -> bb1__0_2171 [label="return"];
    bb1__0_2171 -> bb2__0_2171 [label="return"];
    bb2__0_2171 -> bb3__0_2171 [label="0"];
    bb2__0_2171 -> bb5__0_2171 [label="1"];
    bb2__0_2171 -> bb4__0_2171 [label="otherwise"];
    bb3__0_2171 -> bb7__0_2171 [label="return"];
    bb5__0_2171 -> bb6__0_2171 [label="return"];
    bb6__0_2171 -> bb17__0_2171 [label=""];
    bb7__0_2171 -> bb8__0_2171 [label="return"];
    bb8__0_2171 -> bb9__0_2171 [label="0"];
    bb8__0_2171 -> bb10__0_2171 [label="1"];
    bb8__0_2171 -> bb4__0_2171 [label="otherwise"];
    bb9__0_2171 -> bb12__0_2171 [label="return"];
    bb10__0_2171 -> bb11__0_2171 [label="return"];
    bb11__0_2171 -> bb17__0_2171 [label=""];
    bb12__0_2171 -> bb13__0_2171 [label="return"];
    bb13__0_2171 -> bb14__0_2171 [label="0"];
    bb13__0_2171 -> bb15__0_2171 [label="1"];
    bb13__0_2171 -> bb4__0_2171 [label="otherwise"];
    bb14__0_2171 -> bb18__0_2171 [label=""];
    bb15__0_2171 -> bb16__0_2171 [label="return"];
    bb16__0_2171 -> bb17__0_2171 [label=""];
    bb17__0_2171 -> bb18__0_2171 [label=""];
}
