// MIR for `update_revenue_pool_balances` after PreCodegen

fn update_revenue_pool_balances(_1: u128, _2: &SpotBalanceType, _3: &mut SpotMarket) -> std::result::Result<(), error::ErrorCode> {
    debug token_amount => _1;
    debug update_direction => _2;
    debug spot_market => _3;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let mut _4: state::perp_market::PoolBalance;
    let _5: ();
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _7: std::result::Result<(), error::ErrorCode>;
    let mut _8: u128;
    let mut _9: &state::spot_market::SpotBalanceType;
    let mut _10: &mut state::spot_market::SpotMarket;
    let mut _11: &mut dyn state::spot_market::SpotBalance;
    let mut _12: &mut state::perp_market::PoolBalance;
    let mut _13: &mut state::perp_market::PoolBalance;
    let mut _14: isize;
    let mut _16: !;
    let mut _17: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _19: state::perp_market::PoolBalance;
    let mut _20: ();
    scope 1 {
        debug spot_balance => _4;
        let _15: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _18: ();
        scope 2 {
            debug residual => _15;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _18;
            scope 5 {
            }
        }
    }

    bb0: {
        StorageLive(_4);
        _4 = ((*_3).7: state::perp_market::PoolBalance);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _1;
        StorageLive(_9);
        _9 = &(*_2);
        StorageLive(_10);
        _10 = &mut (*_3);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &mut _4;
        _12 = &mut (*_13);
        _11 = move _12 as &mut dyn state::spot_market::SpotBalance (PointerCoercion(Unsize));
        StorageDead(_12);
        _7 = update_spot_balances(move _8, move _9, move _10, move _11, const false) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        _6 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        _14 = discriminant(_6);
        switchInt(move _14) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_18);
        _18 = ((_6 as Continue).0: ());
        _5 = _18;
        StorageDead(_18);
        StorageDead(_13);
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_19);
        _19 = _4;
        ((*_3).7: state::perp_market::PoolBalance) = move _19;
        StorageDead(_19);
        StorageLive(_20);
        _20 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _20);
        StorageDead(_20);
        StorageDead(_4);
        goto -> bb7;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_15);
        _15 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_17);
        _17 = _15;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _17) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}
