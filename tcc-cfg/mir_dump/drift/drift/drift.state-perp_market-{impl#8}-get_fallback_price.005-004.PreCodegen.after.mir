// MIR for `state::perp_market::<impl at programs/drift/src/state/perp_market.rs:1269:1: 1269:9>::get_fallback_price` after PreCodegen

fn state::perp_market::<impl at programs/drift/src/state/perp_market.rs:1269:1: 1269:9>::get_fallback_price(_1: AMM, _2: &controller::position::PositionDirection, _3: u64, _4: i64, _5: i64) -> std::result::Result<u64, error::ErrorCode> {
    debug self => _1;
    debug direction => _2;
    debug amm_available_liquidity => _3;
    debug oracle_price => _4;
    debug seconds_til_order_expiry => _5;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let mut _6: bool;
    let mut _7: &controller::position::PositionDirection;
    let mut _8: &controller::position::PositionDirection;
    let _9: &controller::position::PositionDirection;
    let _10: controller::position::PositionDirection;
    let mut _11: bool;
    let mut _12: u64;
    let mut _13: u64;
    let _14: u64;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _16: std::result::Result<u64, error::ErrorCode>;
    let mut _17: &state::perp_market::AMM;
    let mut _18: isize;
    let _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _20: !;
    let mut _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _22: u64;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _25: std::result::Result<i64, error::ErrorCode>;
    let mut _26: u64;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _28: std::result::Result<u64, error::ErrorCode>;
    let mut _29: &state::perp_market::AMM;
    let mut _30: u64;
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _36: isize;
    let mut _38: !;
    let mut _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _41: i64;
    let mut _42: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _43: std::result::Result<i64, error::ErrorCode>;
    let mut _44: i64;
    let mut _45: i64;
    let mut _46: i64;
    let mut _47: i64;
    let mut _48: i64;
    let mut _49: i64;
    let mut _50: (i64, bool);
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: isize;
    let mut _57: !;
    let mut _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _60: i64;
    let mut _61: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _62: std::result::Result<i64, error::ErrorCode>;
    let mut _63: i64;
    let mut _64: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _65: std::result::Result<i64, error::ErrorCode>;
    let mut _66: i64;
    let mut _67: i64;
    let mut _68: i64;
    let mut _69: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _70: std::result::Result<i64, error::ErrorCode>;
    let mut _71: i64;
    let mut _72: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _73: std::result::Result<i64, error::ErrorCode>;
    let mut _74: u64;
    let mut _75: isize;
    let _76: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _77: !;
    let mut _78: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _79: i64;
    let mut _80: i64;
    let mut _81: isize;
    let _82: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _83: !;
    let mut _84: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _85: i64;
    let mut _86: isize;
    let _87: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _88: !;
    let mut _89: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _90: i64;
    let mut _91: i64;
    let mut _92: i64;
    let mut _93: i64;
    let mut _94: i64;
    let mut _95: i64;
    let mut _96: (i64, bool);
    let mut _97: bool;
    let mut _98: bool;
    let mut _99: bool;
    let mut _100: bool;
    let mut _101: isize;
    let _102: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _103: !;
    let mut _104: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _105: i64;
    let mut _106: bool;
    let mut _107: u64;
    let mut _108: u64;
    let _109: u64;
    let mut _110: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _111: std::result::Result<u64, error::ErrorCode>;
    let mut _112: &state::perp_market::AMM;
    let mut _113: isize;
    let _114: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _115: !;
    let mut _116: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _117: u64;
    let mut _119: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _120: std::result::Result<i64, error::ErrorCode>;
    let mut _121: u64;
    let mut _122: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _123: std::result::Result<u64, error::ErrorCode>;
    let mut _124: &state::perp_market::AMM;
    let mut _125: u64;
    let mut _126: isize;
    let mut _128: !;
    let mut _129: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _131: isize;
    let mut _133: !;
    let mut _134: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _136: i64;
    let mut _137: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _138: std::result::Result<i64, error::ErrorCode>;
    let mut _139: i64;
    let mut _140: i64;
    let mut _141: i64;
    let mut _142: i64;
    let mut _143: i64;
    let mut _144: i64;
    let mut _145: (i64, bool);
    let mut _146: bool;
    let mut _147: bool;
    let mut _148: bool;
    let mut _149: bool;
    let mut _150: isize;
    let mut _152: !;
    let mut _153: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _155: i64;
    let mut _156: i64;
    let mut _157: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _158: std::result::Result<i64, error::ErrorCode>;
    let mut _159: i64;
    let mut _160: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _161: std::result::Result<i64, error::ErrorCode>;
    let mut _162: i64;
    let mut _163: i64;
    let mut _164: i64;
    let mut _165: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _166: std::result::Result<i64, error::ErrorCode>;
    let mut _167: i64;
    let mut _168: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _169: std::result::Result<i64, error::ErrorCode>;
    let mut _170: u64;
    let mut _171: isize;
    let _172: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _173: !;
    let mut _174: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _175: i64;
    let mut _176: i64;
    let mut _177: isize;
    let _178: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _179: !;
    let mut _180: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _181: i64;
    let mut _182: isize;
    let _183: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _184: !;
    let mut _185: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _186: i64;
    let mut _187: i64;
    let mut _188: i64;
    let mut _189: i64;
    let mut _190: i64;
    let mut _191: i64;
    let mut _192: (i64, bool);
    let mut _193: bool;
    let mut _194: bool;
    let mut _195: bool;
    let mut _196: bool;
    let mut _197: isize;
    let _198: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _199: !;
    let mut _200: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _201: i64;
    let mut _202: &controller::position::PositionDirection;
    scope 1 {
        debug reserve_price => _14;
        let _23: i64;
        let _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _35: u64;
        let _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _40: i64;
        scope 6 {
            debug amm_ask_price => _23;
            let _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _59: i64;
            scope 15 {
                debug residual => _56;
                scope 16 {
                }
            }
            scope 17 {
                debug val => _59;
                scope 18 {
                }
            }
        }
        scope 7 {
            debug residual => _32;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _35;
            scope 10 {
            }
        }
        scope 11 {
            debug residual => _37;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _40;
            scope 14 {
            }
        }
    }
    scope 2 {
        debug residual => _19;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _22;
        scope 5 {
        }
    }
    scope 19 {
        debug residual => _76;
        scope 20 {
        }
    }
    scope 21 {
        debug val => _79;
        scope 22 {
        }
    }
    scope 23 {
        debug residual => _82;
        scope 24 {
        }
    }
    scope 25 {
        debug val => _85;
        scope 26 {
        }
    }
    scope 27 {
        debug residual => _87;
        scope 28 {
        }
    }
    scope 29 {
        debug val => _90;
        scope 30 {
        }
    }
    scope 31 {
        debug residual => _102;
        scope 32 {
        }
    }
    scope 33 {
        debug val => _105;
        scope 34 {
        }
    }
    scope 35 {
        debug reserve_price => _109;
        let _118: i64;
        let _127: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _130: u64;
        let _132: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _135: i64;
        scope 40 {
            debug amm_bid_price => _118;
            let _151: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _154: i64;
            scope 49 {
                debug residual => _151;
                scope 50 {
                }
            }
            scope 51 {
                debug val => _154;
                scope 52 {
                }
            }
        }
        scope 41 {
            debug residual => _127;
            scope 42 {
            }
        }
        scope 43 {
            debug val => _130;
            scope 44 {
            }
        }
        scope 45 {
            debug residual => _132;
            scope 46 {
            }
        }
        scope 47 {
            debug val => _135;
            scope 48 {
            }
        }
    }
    scope 36 {
        debug residual => _114;
        scope 37 {
        }
    }
    scope 38 {
        debug val => _117;
        scope 39 {
        }
    }
    scope 53 {
        debug residual => _172;
        scope 54 {
        }
    }
    scope 55 {
        debug val => _175;
        scope 56 {
        }
    }
    scope 57 {
        debug residual => _178;
        scope 58 {
        }
    }
    scope 59 {
        debug val => _181;
        scope 60 {
        }
    }
    scope 61 {
        debug residual => _183;
        scope 62 {
        }
    }
    scope 63 {
        debug val => _186;
        scope 64 {
        }
    }
    scope 65 {
        debug residual => _198;
        scope 66 {
        }
    }
    scope 67 {
        debug val => _201;
        scope 68 {
        }
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        _7 = &(*_2);
        StorageLive(_8);
        StorageLive(_9);
        _202 = const _;
        _9 = &(*_202);
        _8 = &(*_9);
        _6 = <controller::position::PositionDirection as PartialEq>::eq(move _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _6) -> [0: bb58, otherwise: bb2];
    }

    bb2: {
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_11);
        StorageLive(_12);
        _12 = _3;
        StorageLive(_13);
        _13 = (_1.54: u64);
        _11 = Ge(move _12, move _13);
        switchInt(move _11) -> [0: bb30, otherwise: bb3];
    }

    bb3: {
        StorageDead(_13);
        StorageDead(_12);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = &_1;
        _16 = AMM::reserve_price(move _17) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_17);
        _15 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _16) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_16);
        _18 = discriminant(_15);
        switchInt(move _18) -> [0: bb6, 1: bb8, otherwise: bb7];
    }

    bb6: {
        StorageLive(_22);
        _22 = ((_15 as Continue).0: u64);
        _14 = _22;
        StorageDead(_22);
        StorageDead(_15);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = &_1;
        StorageLive(_30);
        _30 = _14;
        _28 = AMM::ask_price(move _29, move _30) -> [return: bb10, unwind continue];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        StorageLive(_19);
        _19 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_21);
        _21 = _19;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _21) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_15);
        goto -> bb125;
    }

    bb10: {
        StorageDead(_30);
        StorageDead(_29);
        _27 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _28) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_28);
        _31 = discriminant(_27);
        switchInt(move _31) -> [0: bb12, 1: bb13, otherwise: bb7];
    }

    bb12: {
        StorageLive(_35);
        _35 = ((_27 as Continue).0: u64);
        _26 = _35;
        StorageDead(_35);
        _25 = <u64 as Cast>::cast::<i64>(move _26) -> [return: bb15, unwind continue];
    }

    bb13: {
        StorageLive(_32);
        _32 = ((_27 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_34);
        _34 = _32;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _34) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_34);
        StorageDead(_32);
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb124;
    }

    bb15: {
        StorageDead(_26);
        _24 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _25) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_25);
        _36 = discriminant(_24);
        switchInt(move _36) -> [0: bb17, 1: bb18, otherwise: bb7];
    }

    bb17: {
        StorageLive(_40);
        _40 = ((_24 as Continue).0: i64);
        _23 = _40;
        StorageDead(_40);
        StorageDead(_27);
        StorageDead(_24);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = _23;
        StorageLive(_45);
        StorageLive(_46);
        _46 = _23;
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = _5;
        _50 = CheckedMul(_49, const 20_i64);
        assert(!move (_50.1: bool), "attempt to compute `{} * {}`, which would overflow", move _49, const 20_i64) -> [success: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_37);
        _37 = ((_24 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_39);
        _39 = _37;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _39) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_39);
        StorageDead(_37);
        goto -> bb124;
    }

    bb20: {
        _48 = move (_50.0: i64);
        StorageDead(_49);
        _47 = <i64 as Ord>::clamp(move _48, const 100_i64, const 200_i64) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_48);
        _51 = Eq(_47, const 0_i64);
        assert(!move _51, "attempt to divide `{}` by zero", _46) -> [success: bb22, unwind continue];
    }

    bb22: {
        _52 = Eq(_47, const -1_i64);
        _53 = Eq(_46, const i64::MIN);
        _54 = BitAnd(move _52, move _53);
        assert(!move _54, "attempt to compute `{} / {}`, which would overflow", _46, _47) -> [success: bb23, unwind continue];
    }

    bb23: {
        _45 = Div(move _46, move _47);
        StorageDead(_47);
        StorageDead(_46);
        _43 = <i64 as SafeMath>::safe_add(move _44, move _45) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_45);
        StorageDead(_44);
        _42 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _43) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_43);
        _55 = discriminant(_42);
        switchInt(move _55) -> [0: bb26, 1: bb27, otherwise: bb7];
    }

    bb26: {
        StorageLive(_59);
        _59 = ((_42 as Continue).0: i64);
        _41 = _59;
        StorageDead(_59);
        _0 = <i64 as Cast>::cast::<u64>(move _41) -> [return: bb29, unwind continue];
    }

    bb27: {
        StorageLive(_56);
        _56 = ((_42 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_58);
        _58 = _56;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _58) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_41);
        StorageDead(_23);
        StorageDead(_14);
        StorageDead(_42);
        goto -> bb126;
    }

    bb29: {
        StorageDead(_41);
        StorageDead(_23);
        StorageDead(_14);
        StorageDead(_42);
        goto -> bb57;
    }

    bb30: {
        StorageDead(_13);
        StorageDead(_12);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _66 = _4;
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = (_1.44: u64);
        _73 = <u64 as Cast>::cast::<i64>(move _74) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_74);
        _72 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _73) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_73);
        _75 = discriminant(_72);
        switchInt(move _75) -> [0: bb33, 1: bb34, otherwise: bb7];
    }

    bb33: {
        StorageLive(_79);
        _79 = ((_72 as Continue).0: i64);
        _71 = _79;
        StorageDead(_79);
        StorageLive(_80);
        _80 = ((_1.1: state::oracle::HistoricalOracleData).3: i64);
        _70 = <i64 as SafeMath>::safe_sub(move _71, move _80) -> [return: bb36, unwind continue];
    }

    bb34: {
        StorageLive(_76);
        _76 = ((_72 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_78);
        _78 = _76;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _78) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_78);
        StorageDead(_76);
        StorageDead(_71);
        StorageDead(_70);
        goto -> bb121;
    }

    bb36: {
        StorageDead(_80);
        StorageDead(_71);
        _69 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _70) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_70);
        _81 = discriminant(_69);
        switchInt(move _81) -> [0: bb38, 1: bb39, otherwise: bb7];
    }

    bb38: {
        StorageLive(_85);
        _85 = ((_69 as Continue).0: i64);
        _68 = _85;
        StorageDead(_85);
        _67 = <i64 as Ord>::max(move _68, const 0_i64) -> [return: bb41, unwind continue];
    }

    bb39: {
        StorageLive(_82);
        _82 = ((_69 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_84);
        _84 = _82;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _84) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_84);
        StorageDead(_82);
        goto -> bb121;
    }

    bb41: {
        StorageDead(_68);
        _65 = <i64 as SafeMath>::safe_add(move _66, move _67) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_67);
        StorageDead(_66);
        _64 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _65) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_65);
        _86 = discriminant(_64);
        switchInt(move _86) -> [0: bb44, 1: bb45, otherwise: bb7];
    }

    bb44: {
        StorageLive(_90);
        _90 = ((_64 as Continue).0: i64);
        _63 = _90;
        StorageDead(_90);
        StorageLive(_91);
        StorageLive(_92);
        _92 = _4;
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        _95 = _5;
        _96 = CheckedMul(_95, const 2_i64);
        assert(!move (_96.1: bool), "attempt to compute `{} * {}`, which would overflow", move _95, const 2_i64) -> [success: bb47, unwind continue];
    }

    bb45: {
        StorageLive(_87);
        _87 = ((_64 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_89);
        _89 = _87;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _89) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_89);
        StorageDead(_87);
        goto -> bb122;
    }

    bb47: {
        _94 = move (_96.0: i64);
        StorageDead(_95);
        _93 = <i64 as Ord>::clamp(move _94, const 10_i64, const 50_i64) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_94);
        _97 = Eq(_93, const 0_i64);
        assert(!move _97, "attempt to divide `{}` by zero", _92) -> [success: bb49, unwind continue];
    }

    bb49: {
        _98 = Eq(_93, const -1_i64);
        _99 = Eq(_92, const i64::MIN);
        _100 = BitAnd(move _98, move _99);
        assert(!move _100, "attempt to compute `{} / {}`, which would overflow", _92, _93) -> [success: bb50, unwind continue];
    }

    bb50: {
        _91 = Div(move _92, move _93);
        StorageDead(_93);
        StorageDead(_92);
        _62 = <i64 as SafeMath>::safe_add(move _63, move _91) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_91);
        StorageDead(_63);
        _61 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _62) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_62);
        _101 = discriminant(_61);
        switchInt(move _101) -> [0: bb53, 1: bb54, otherwise: bb7];
    }

    bb53: {
        StorageLive(_105);
        _105 = ((_61 as Continue).0: i64);
        _60 = _105;
        StorageDead(_105);
        _0 = <i64 as Cast>::cast::<u64>(move _60) -> [return: bb56, unwind continue];
    }

    bb54: {
        StorageLive(_102);
        _102 = ((_61 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_104);
        _104 = _102;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _104) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_104);
        StorageDead(_102);
        goto -> bb123;
    }

    bb56: {
        StorageDead(_60);
        StorageDead(_72);
        StorageDead(_69);
        StorageDead(_64);
        StorageDead(_61);
        goto -> bb57;
    }

    bb57: {
        StorageDead(_11);
        goto -> bb114;
    }

    bb58: {
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_106);
        StorageLive(_107);
        _107 = _3;
        StorageLive(_108);
        _108 = (_1.54: u64);
        _106 = Ge(move _107, move _108);
        switchInt(move _106) -> [0: bb85, otherwise: bb59];
    }

    bb59: {
        StorageDead(_108);
        StorageDead(_107);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _112 = &_1;
        _111 = AMM::reserve_price(move _112) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_112);
        _110 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _111) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_111);
        _113 = discriminant(_110);
        switchInt(move _113) -> [0: bb62, 1: bb63, otherwise: bb7];
    }

    bb62: {
        StorageLive(_117);
        _117 = ((_110 as Continue).0: u64);
        _109 = _117;
        StorageDead(_117);
        StorageDead(_110);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        _124 = &_1;
        StorageLive(_125);
        _125 = _109;
        _123 = AMM::bid_price(move _124, move _125) -> [return: bb65, unwind continue];
    }

    bb63: {
        StorageLive(_114);
        _114 = ((_110 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_116);
        _116 = _114;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _116) -> [return: bb64, unwind continue];
    }

    bb64: {
        StorageDead(_116);
        StorageDead(_114);
        StorageDead(_110);
        goto -> bb119;
    }

    bb65: {
        StorageDead(_125);
        StorageDead(_124);
        _122 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _123) -> [return: bb66, unwind continue];
    }

    bb66: {
        StorageDead(_123);
        _126 = discriminant(_122);
        switchInt(move _126) -> [0: bb67, 1: bb68, otherwise: bb7];
    }

    bb67: {
        StorageLive(_130);
        _130 = ((_122 as Continue).0: u64);
        _121 = _130;
        StorageDead(_130);
        _120 = <u64 as Cast>::cast::<i64>(move _121) -> [return: bb70, unwind continue];
    }

    bb68: {
        StorageLive(_127);
        _127 = ((_122 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_129);
        _129 = _127;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _129) -> [return: bb69, unwind continue];
    }

    bb69: {
        StorageDead(_129);
        StorageDead(_127);
        StorageDead(_121);
        StorageDead(_120);
        goto -> bb118;
    }

    bb70: {
        StorageDead(_121);
        _119 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _120) -> [return: bb71, unwind continue];
    }

    bb71: {
        StorageDead(_120);
        _131 = discriminant(_119);
        switchInt(move _131) -> [0: bb72, 1: bb73, otherwise: bb7];
    }

    bb72: {
        StorageLive(_135);
        _135 = ((_119 as Continue).0: i64);
        _118 = _135;
        StorageDead(_135);
        StorageDead(_122);
        StorageDead(_119);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _139 = _118;
        StorageLive(_140);
        StorageLive(_141);
        _141 = _118;
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        _144 = _5;
        _145 = CheckedMul(_144, const 20_i64);
        assert(!move (_145.1: bool), "attempt to compute `{} * {}`, which would overflow", move _144, const 20_i64) -> [success: bb75, unwind continue];
    }

    bb73: {
        StorageLive(_132);
        _132 = ((_119 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_134);
        _134 = _132;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _134) -> [return: bb74, unwind continue];
    }

    bb74: {
        StorageDead(_134);
        StorageDead(_132);
        goto -> bb118;
    }

    bb75: {
        _143 = move (_145.0: i64);
        StorageDead(_144);
        _142 = <i64 as Ord>::clamp(move _143, const 100_i64, const 200_i64) -> [return: bb76, unwind continue];
    }

    bb76: {
        StorageDead(_143);
        _146 = Eq(_142, const 0_i64);
        assert(!move _146, "attempt to divide `{}` by zero", _141) -> [success: bb77, unwind continue];
    }

    bb77: {
        _147 = Eq(_142, const -1_i64);
        _148 = Eq(_141, const i64::MIN);
        _149 = BitAnd(move _147, move _148);
        assert(!move _149, "attempt to compute `{} / {}`, which would overflow", _141, _142) -> [success: bb78, unwind continue];
    }

    bb78: {
        _140 = Div(move _141, move _142);
        StorageDead(_142);
        StorageDead(_141);
        _138 = <i64 as SafeMath>::safe_sub(move _139, move _140) -> [return: bb79, unwind continue];
    }

    bb79: {
        StorageDead(_140);
        StorageDead(_139);
        _137 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _138) -> [return: bb80, unwind continue];
    }

    bb80: {
        StorageDead(_138);
        _150 = discriminant(_137);
        switchInt(move _150) -> [0: bb81, 1: bb82, otherwise: bb7];
    }

    bb81: {
        StorageLive(_154);
        _154 = ((_137 as Continue).0: i64);
        _136 = _154;
        StorageDead(_154);
        _0 = <i64 as Cast>::cast::<u64>(move _136) -> [return: bb84, unwind continue];
    }

    bb82: {
        StorageLive(_151);
        _151 = ((_137 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_153);
        _153 = _151;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _153) -> [return: bb83, unwind continue];
    }

    bb83: {
        StorageDead(_153);
        StorageDead(_151);
        StorageDead(_136);
        StorageDead(_118);
        StorageDead(_109);
        StorageDead(_137);
        goto -> bb120;
    }

    bb84: {
        StorageDead(_136);
        StorageDead(_118);
        StorageDead(_109);
        StorageDead(_137);
        goto -> bb113;
    }

    bb85: {
        StorageDead(_108);
        StorageDead(_107);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        _162 = _4;
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        _170 = (_1.43: u64);
        _169 = <u64 as Cast>::cast::<i64>(move _170) -> [return: bb86, unwind continue];
    }

    bb86: {
        StorageDead(_170);
        _168 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _169) -> [return: bb87, unwind continue];
    }

    bb87: {
        StorageDead(_169);
        _171 = discriminant(_168);
        switchInt(move _171) -> [0: bb88, 1: bb89, otherwise: bb7];
    }

    bb88: {
        StorageLive(_175);
        _175 = ((_168 as Continue).0: i64);
        _167 = _175;
        StorageDead(_175);
        StorageLive(_176);
        _176 = ((_1.1: state::oracle::HistoricalOracleData).3: i64);
        _166 = <i64 as SafeMath>::safe_sub(move _167, move _176) -> [return: bb91, unwind continue];
    }

    bb89: {
        StorageLive(_172);
        _172 = ((_168 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_174);
        _174 = _172;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _174) -> [return: bb90, unwind continue];
    }

    bb90: {
        StorageDead(_174);
        StorageDead(_172);
        StorageDead(_167);
        StorageDead(_166);
        goto -> bb115;
    }

    bb91: {
        StorageDead(_176);
        StorageDead(_167);
        _165 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _166) -> [return: bb92, unwind continue];
    }

    bb92: {
        StorageDead(_166);
        _177 = discriminant(_165);
        switchInt(move _177) -> [0: bb93, 1: bb94, otherwise: bb7];
    }

    bb93: {
        StorageLive(_181);
        _181 = ((_165 as Continue).0: i64);
        _164 = _181;
        StorageDead(_181);
        _163 = <i64 as Ord>::min(move _164, const 0_i64) -> [return: bb96, unwind continue];
    }

    bb94: {
        StorageLive(_178);
        _178 = ((_165 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_180);
        _180 = _178;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _180) -> [return: bb95, unwind continue];
    }

    bb95: {
        StorageDead(_180);
        StorageDead(_178);
        goto -> bb115;
    }

    bb96: {
        StorageDead(_164);
        _161 = <i64 as SafeMath>::safe_add(move _162, move _163) -> [return: bb97, unwind continue];
    }

    bb97: {
        StorageDead(_163);
        StorageDead(_162);
        _160 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _161) -> [return: bb98, unwind continue];
    }

    bb98: {
        StorageDead(_161);
        _182 = discriminant(_160);
        switchInt(move _182) -> [0: bb99, 1: bb100, otherwise: bb7];
    }

    bb99: {
        StorageLive(_186);
        _186 = ((_160 as Continue).0: i64);
        _159 = _186;
        StorageDead(_186);
        StorageLive(_187);
        StorageLive(_188);
        _188 = _4;
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        _191 = _5;
        _192 = CheckedMul(_191, const 2_i64);
        assert(!move (_192.1: bool), "attempt to compute `{} * {}`, which would overflow", move _191, const 2_i64) -> [success: bb102, unwind continue];
    }

    bb100: {
        StorageLive(_183);
        _183 = ((_160 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_185);
        _185 = _183;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _185) -> [return: bb101, unwind continue];
    }

    bb101: {
        StorageDead(_185);
        StorageDead(_183);
        goto -> bb116;
    }

    bb102: {
        _190 = move (_192.0: i64);
        StorageDead(_191);
        _189 = <i64 as Ord>::clamp(move _190, const 10_i64, const 50_i64) -> [return: bb103, unwind continue];
    }

    bb103: {
        StorageDead(_190);
        _193 = Eq(_189, const 0_i64);
        assert(!move _193, "attempt to divide `{}` by zero", _188) -> [success: bb104, unwind continue];
    }

    bb104: {
        _194 = Eq(_189, const -1_i64);
        _195 = Eq(_188, const i64::MIN);
        _196 = BitAnd(move _194, move _195);
        assert(!move _196, "attempt to compute `{} / {}`, which would overflow", _188, _189) -> [success: bb105, unwind continue];
    }

    bb105: {
        _187 = Div(move _188, move _189);
        StorageDead(_189);
        StorageDead(_188);
        _158 = <i64 as SafeMath>::safe_sub(move _159, move _187) -> [return: bb106, unwind continue];
    }

    bb106: {
        StorageDead(_187);
        StorageDead(_159);
        _157 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _158) -> [return: bb107, unwind continue];
    }

    bb107: {
        StorageDead(_158);
        _197 = discriminant(_157);
        switchInt(move _197) -> [0: bb108, 1: bb109, otherwise: bb7];
    }

    bb108: {
        StorageLive(_201);
        _201 = ((_157 as Continue).0: i64);
        _156 = _201;
        StorageDead(_201);
        _155 = <i64 as Ord>::max(move _156, const 0_i64) -> [return: bb111, unwind continue];
    }

    bb109: {
        StorageLive(_198);
        _198 = ((_157 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_200);
        _200 = _198;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _200) -> [return: bb110, unwind continue];
    }

    bb110: {
        StorageDead(_200);
        StorageDead(_198);
        goto -> bb117;
    }

    bb111: {
        StorageDead(_156);
        _0 = <i64 as Cast>::cast::<u64>(move _155) -> [return: bb112, unwind continue];
    }

    bb112: {
        StorageDead(_155);
        StorageDead(_168);
        StorageDead(_165);
        StorageDead(_160);
        StorageDead(_157);
        goto -> bb113;
    }

    bb113: {
        StorageDead(_106);
        goto -> bb114;
    }

    bb114: {
        StorageDead(_6);
        goto -> bb128;
    }

    bb115: {
        StorageDead(_164);
        StorageDead(_163);
        StorageDead(_162);
        StorageDead(_161);
        goto -> bb116;
    }

    bb116: {
        StorageDead(_159);
        StorageDead(_158);
        goto -> bb117;
    }

    bb117: {
        StorageDead(_156);
        StorageDead(_155);
        StorageDead(_168);
        StorageDead(_165);
        StorageDead(_160);
        StorageDead(_157);
        goto -> bb120;
    }

    bb118: {
        StorageDead(_122);
        StorageDead(_119);
        StorageDead(_118);
        goto -> bb119;
    }

    bb119: {
        StorageDead(_109);
        goto -> bb120;
    }

    bb120: {
        StorageDead(_106);
        goto -> bb127;
    }

    bb121: {
        StorageDead(_68);
        StorageDead(_67);
        StorageDead(_66);
        StorageDead(_65);
        goto -> bb122;
    }

    bb122: {
        StorageDead(_63);
        StorageDead(_62);
        goto -> bb123;
    }

    bb123: {
        StorageDead(_60);
        StorageDead(_72);
        StorageDead(_69);
        StorageDead(_64);
        StorageDead(_61);
        goto -> bb126;
    }

    bb124: {
        StorageDead(_27);
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb125;
    }

    bb125: {
        StorageDead(_14);
        goto -> bb126;
    }

    bb126: {
        StorageDead(_11);
        goto -> bb127;
    }

    bb127: {
        StorageDead(_6);
        goto -> bb128;
    }

    bb128: {
        return;
    }
}
