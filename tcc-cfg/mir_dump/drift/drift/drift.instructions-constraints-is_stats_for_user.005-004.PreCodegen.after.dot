digraph Mir_0_1155 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn constraints::is_stats_for_user(_1: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::User&gt;, _2: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::UserStats&gt;) -&gt; std::result::Result&lt;bool, anchor_lang::error::Error&gt;<br align="left"/>let _3: std::cell::Ref&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _4: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, std::cell::Ref&lt;ReErased, state::user::User&gt;&gt;;<br align="left"/>let mut _5: std::result::Result&lt;std::cell::Ref&lt;ReErased, state::user::User&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _6: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _7: isize;<br align="left"/>let _8: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _9: !;<br align="left"/>let mut _10: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _11: std::cell::Ref&lt;ReErased, state::user::User&gt;;<br align="left"/>let _12: std::cell::Ref&lt;ReErased, state::user::UserStats&gt;;<br align="left"/>let mut _13: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, std::cell::Ref&lt;ReErased, state::user::UserStats&gt;&gt;;<br align="left"/>let mut _14: std::result::Result&lt;std::cell::Ref&lt;ReErased, state::user::UserStats&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _15: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::UserStats&gt;;<br align="left"/>let mut _16: isize;<br align="left"/>let _17: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _18: !;<br align="left"/>let mut _19: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _20: std::cell::Ref&lt;ReErased, state::user::UserStats&gt;;<br align="left"/>let mut _21: bool;<br align="left"/>let mut _22: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _23: &amp;ReErased state::user::UserStats;<br align="left"/>let mut _24: &amp;ReErased std::cell::Ref&lt;ReErased, state::user::UserStats&gt;;<br align="left"/>let mut _25: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _26: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _27: &amp;ReErased state::user::User;<br align="left"/>let mut _28: &amp;ReErased std::cell::Ref&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _29: isize;<br align="left"/>let mut _30: isize;<br align="left"/>let mut _31: isize;<br align="left"/>let mut _32: isize;<br align="left"/>let mut _33: isize;<br align="left"/>let mut _34: isize;<br align="left"/>let mut _35: isize;<br align="left"/>let mut _36: isize;<br align="left"/>let mut _37: isize;<br align="left"/>let mut _38: isize;<br align="left"/>debug user =&gt; _1;<br align="left"/>debug user_stats =&gt; _2;<br align="left"/>debug user =&gt; _3;<br align="left"/>debug residual =&gt; _8;<br align="left"/>debug val =&gt; _11;<br align="left"/>debug user_stats =&gt; _12;<br align="left"/>debug residual =&gt; _17;<br align="left"/>debug val =&gt; _20;<br align="left"/>>;
    bb0__0_1155 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = &amp;(*_1)<br/></td></tr><tr><td align="left">_5 = anchor_lang::prelude::AccountLoader::&lt;'_, User&gt;::load(move _6)</td></tr></table>>];
    bb1__0_1155 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/></td></tr><tr><td align="left">_4 = &lt;std::result::Result&lt;Ref&lt;'_, User&gt;, anchor_lang::error::Error&gt; as Try&gt;::branch(move _5)</td></tr></table>>];
    bb2__0_1155 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>_7 = discriminant(_4)<br/></td></tr><tr><td align="left">switchInt(move _7)</td></tr></table>>];
    bb3__0_1155 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_11)<br/>_11 = move ((_4 as Continue).0: std::cell::Ref&lt;'_, state::user::User&gt;)<br/>_3 = move _11<br/>StorageDead(_11)<br/>_29 = discriminant(_4)<br/>StorageDead(_4)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>_15 = &amp;(*_2)<br/></td></tr><tr><td align="left">_14 = anchor_lang::prelude::AccountLoader::&lt;'_, UserStats&gt;::load(move _15)</td></tr></table>>];
    bb4__0_1155 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_1155 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_8)<br/>_8 = move ((_4 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_10)<br/>_10 = move _8<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _10)</td></tr></table>>];
    bb6__0_1155 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_8)<br/>_35 = discriminant(_4)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_1155 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/></td></tr><tr><td align="left">_13 = &lt;std::result::Result&lt;Ref&lt;'_, UserStats&gt;, anchor_lang::error::Error&gt; as Try&gt;::branch(move _14)</td></tr></table>>];
    bb8__0_1155 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>_16 = discriminant(_13)<br/></td></tr><tr><td align="left">switchInt(move _16)</td></tr></table>>];
    bb9__0_1155 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_20)<br/>_20 = move ((_13 as Continue).0: std::cell::Ref&lt;'_, state::user::UserStats&gt;)<br/>_12 = move _20<br/>StorageDead(_20)<br/>_31 = discriminant(_13)<br/>StorageDead(_13)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>_24 = &amp;_12<br/></td></tr><tr><td align="left">_23 = &lt;Ref&lt;'_, UserStats&gt; as Deref&gt;::deref(move _24)</td></tr></table>>];
    bb10__0_1155 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_17)<br/>_17 = move ((_13 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_19)<br/>_19 = move _17<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _19)</td></tr></table>>];
    bb11__0_1155 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageDead(_17)<br/>_33 = discriminant(_13)<br/>StorageDead(_13)<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">drop(_3)</td></tr></table>>];
    bb12__0_1155 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/>_22 = &amp;((*_23).0: anchor_lang::prelude::Pubkey)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>_28 = &amp;_3<br/></td></tr><tr><td align="left">_27 = &lt;Ref&lt;'_, User&gt; as Deref&gt;::deref(move _28)</td></tr></table>>];
    bb13__0_1155 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>_26 = &amp;((*_27).0: anchor_lang::prelude::Pubkey)<br/>_25 = &amp;(*_26)<br/></td></tr><tr><td align="left">_21 = &lt;anchor_lang::prelude::Pubkey as PartialEq&gt;::eq(move _22, move _25)</td></tr></table>>];
    bb14__0_1155 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_22)<br/>_0 = std::result::Result::&lt;bool, anchor_lang::error::Error&gt;::Ok(move _21)<br/>StorageDead(_21)<br/></td></tr><tr><td align="left">drop(_12)</td></tr></table>>];
    bb15__0_1155 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/></td></tr><tr><td align="left">drop(_3)</td></tr></table>>];
    bb16__0_1155 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_3)<br/>StorageDead(_27)<br/>StorageDead(_26)<br/>StorageDead(_23)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_1155 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_1155 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left">return</td></tr></table>>];
    bb19__0_1155 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">19 (cleanup)</td></tr><tr><td align="left">drop(_12)</td></tr></table>>];
    bb20__0_1155 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">20 (cleanup)</td></tr><tr><td align="left">drop(_3)</td></tr></table>>];
    bb21__0_1155 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">21 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb22__0_1155 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">22 (cleanup)</td></tr><tr><td align="left" balign="left">_37 = discriminant(_13)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb23__0_1155 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">23 (cleanup)</td></tr><tr><td align="left" balign="left">_38 = discriminant(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_1155 -> bb1__0_1155 [label="return"];
    bb1__0_1155 -> bb2__0_1155 [label="return"];
    bb1__0_1155 -> bb21__0_1155 [label="unwind"];
    bb2__0_1155 -> bb3__0_1155 [label="0"];
    bb2__0_1155 -> bb5__0_1155 [label="1"];
    bb2__0_1155 -> bb4__0_1155 [label="otherwise"];
    bb3__0_1155 -> bb7__0_1155 [label="return"];
    bb3__0_1155 -> bb20__0_1155 [label="unwind"];
    bb5__0_1155 -> bb6__0_1155 [label="return"];
    bb5__0_1155 -> bb23__0_1155 [label="unwind"];
    bb6__0_1155 -> bb17__0_1155 [label=""];
    bb7__0_1155 -> bb8__0_1155 [label="return"];
    bb7__0_1155 -> bb20__0_1155 [label="unwind"];
    bb8__0_1155 -> bb9__0_1155 [label="0"];
    bb8__0_1155 -> bb10__0_1155 [label="1"];
    bb8__0_1155 -> bb4__0_1155 [label="otherwise"];
    bb9__0_1155 -> bb12__0_1155 [label="return"];
    bb9__0_1155 -> bb19__0_1155 [label="unwind"];
    bb10__0_1155 -> bb11__0_1155 [label="return"];
    bb10__0_1155 -> bb22__0_1155 [label="unwind"];
    bb11__0_1155 -> bb17__0_1155 [label="return"];
    bb11__0_1155 -> bb21__0_1155 [label="unwind"];
    bb12__0_1155 -> bb13__0_1155 [label="return"];
    bb12__0_1155 -> bb19__0_1155 [label="unwind"];
    bb13__0_1155 -> bb14__0_1155 [label="return"];
    bb13__0_1155 -> bb19__0_1155 [label="unwind"];
    bb14__0_1155 -> bb15__0_1155 [label="return"];
    bb14__0_1155 -> bb20__0_1155 [label="unwind"];
    bb15__0_1155 -> bb16__0_1155 [label="return"];
    bb15__0_1155 -> bb21__0_1155 [label="unwind"];
    bb16__0_1155 -> bb18__0_1155 [label=""];
    bb17__0_1155 -> bb18__0_1155 [label=""];
    bb19__0_1155 -> bb20__0_1155 [label="return"];
    bb20__0_1155 -> bb21__0_1155 [label="return"];
    bb22__0_1155 -> bb20__0_1155 [label=""];
    bb23__0_1155 -> bb21__0_1155 [label=""];
}
