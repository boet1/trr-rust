digraph Mir_0_14909 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn &lt;U192 as Mul&lt;i32&gt;&gt;::mul(_1: math::bn::U192, _2: i32) -&gt; math::bn::U192<br align="left"/>let _3: math::bn::U192;<br align="left"/>let _4: u64;<br align="left"/>let mut _5: (math::bn::U192, u64);<br align="left"/>let mut _6: math::bn::U192;<br align="left"/>let mut _7: u64;<br align="left"/>let mut _8: i32;<br align="left"/>let _9: ();<br align="left"/>let mut _10: bool;<br align="left"/>let mut _11: u64;<br align="left"/>let mut _12: !;<br align="left"/>let _13: !;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug other =&gt; _2;<br align="left"/>debug result =&gt; _3;<br align="left"/>debug carry =&gt; _4;<br align="left"/>>;
    bb0__0_14909 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = _1<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = _2<br/>_7 = move _8 as u64 (IntToInt)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">_5 = U192::overflowing_mul_u64(move _6, move _7)</td></tr></table>>];
    bb1__0_14909 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>StorageDead(_6)<br/>StorageLive(_3)<br/>_3 = (_5.0: math::bn::U192)<br/>StorageLive(_4)<br/>_4 = (_5.1: u64)<br/>StorageDead(_5)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>_11 = _4<br/>_10 = Gt(move _11, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _10)</td></tr></table>>];
    bb2__0_14909 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageLive(_13)<br/></td></tr><tr><td align="left">_13 = begin_panic::&lt;&amp;str&gt;(const &quot;arithmetic operation overflow&quot;)</td></tr></table>>];
    bb3__0_14909 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>_9 = const ()<br/>StorageDead(_10)<br/>StorageDead(_9)<br/>_0 = _3<br/>StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_14909 -> bb1__0_14909 [label="return"];
    bb1__0_14909 -> bb3__0_14909 [label="0"];
    bb1__0_14909 -> bb2__0_14909 [label="otherwise"];
}
