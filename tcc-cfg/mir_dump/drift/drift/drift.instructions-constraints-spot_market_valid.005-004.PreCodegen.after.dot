digraph Mir_0_1158 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn constraints::spot_market_valid(_1: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::spot_market::SpotMarket&gt;) -&gt; std::result::Result&lt;(), anchor_lang::error::Error&gt;<br align="left"/>let _2: ();<br align="left"/>let mut _3: bool;<br align="left"/>let mut _4: &amp;ReErased state::perp_market::MarketStatus;<br align="left"/>let _5: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let mut _6: &amp;ReErased std::cell::Ref&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let _7: std::cell::Ref&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let mut _8: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, std::cell::Ref&lt;ReErased, state::spot_market::SpotMarket&gt;&gt;;<br align="left"/>let mut _9: std::result::Result&lt;std::cell::Ref&lt;ReErased, state::spot_market::SpotMarket&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _10: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let mut _11: isize;<br align="left"/>let _12: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _13: !;<br align="left"/>let mut _14: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _15: std::cell::Ref&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let mut _16: &amp;ReErased state::perp_market::MarketStatus;<br align="left"/>let _17: state::perp_market::MarketStatus;<br align="left"/>let mut _18: !;<br align="left"/>let mut _19: anchor_lang::error::Error;<br align="left"/>let mut _20: error::ErrorCode;<br align="left"/>let mut _21: ();<br align="left"/>let mut _22: &amp;ReErased state::perp_market::MarketStatus;<br align="left"/>let mut _23: bool;<br align="left"/>let mut _24: bool;<br align="left"/>let mut _25: isize;<br align="left"/>let mut _26: isize;<br align="left"/>let mut _27: isize;<br align="left"/>let mut _28: isize;<br align="left"/>let mut _29: isize;<br align="left"/>let mut _30: isize;<br align="left"/>let mut _31: isize;<br align="left"/>debug market =&gt; _1;<br align="left"/>debug residual =&gt; _12;<br align="left"/>debug val =&gt; _15;<br align="left"/>>;
    bb0__0_1158 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_24 = const false<br/>_23 = const false<br/>StorageLive(_2)<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>_10 = &amp;(*_1)<br/></td></tr><tr><td align="left">_9 = anchor_lang::prelude::AccountLoader::&lt;'_, SpotMarket&gt;::load(move _10)</td></tr></table>>];
    bb1__0_1158 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/></td></tr><tr><td align="left">_8 = &lt;std::result::Result&lt;Ref&lt;'_, SpotMarket&gt;, anchor_lang::error::Error&gt; as Try&gt;::branch(move _9)</td></tr></table>>];
    bb2__0_1158 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_23 = const true<br/>_24 = const true<br/>StorageDead(_9)<br/>_11 = discriminant(_8)<br/></td></tr><tr><td align="left">switchInt(move _11)</td></tr></table>>];
    bb3__0_1158 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_15)<br/>_15 = move ((_8 as Continue).0: std::cell::Ref&lt;'_, state::spot_market::SpotMarket&gt;)<br/>_7 = move _15<br/>StorageDead(_15)<br/>_6 = &amp;_7<br/></td></tr><tr><td align="left">_5 = &lt;Ref&lt;'_, SpotMarket&gt; as Deref&gt;::deref(move _6)</td></tr></table>>];
    bb4__0_1158 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_1158 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_12)<br/>_12 = move ((_8 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_14)<br/>_14 = move _12<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _14)</td></tr></table>>];
    bb6__0_1158 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageDead(_12)<br/>StorageDead(_6)<br/>_29 = discriminant(_8)<br/>_23 = const false<br/>_24 = const false<br/>StorageDead(_8)<br/>StorageDead(_7)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_1158 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>_4 = &amp;((*_5).45: state::perp_market::MarketStatus)<br/>StorageLive(_16)<br/>_22 = const _<br/>_16 = &amp;(*_22)<br/></td></tr><tr><td align="left">_3 = &lt;state::perp_market::MarketStatus as PartialEq&gt;::eq(move _4, move _16)</td></tr></table>>];
    bb8__0_1158 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">switchInt(move _3)</td></tr></table>>];
    bb9__0_1158 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/></td></tr><tr><td align="left">drop(_7)</td></tr></table>>];
    bb10__0_1158 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Err(move _19)<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb11__0_1158 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/></td></tr><tr><td align="left">drop(_7)</td></tr></table>>];
    bb12__0_1158 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_3)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_1158 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left">return</td></tr></table>>];
    bb14__0_1158 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">14 (cleanup)</td></tr><tr><td align="left">drop(_7)</td></tr></table>>];
    bb15__0_1158 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">15 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb16__0_1158 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">_25 = discriminant(_8)<br/>_23 = const false<br/>_24 = const false<br/>StorageDead(_8)<br/>StorageDead(_7)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>_20 = error::ErrorCode::MarketDelisted<br/></td></tr><tr><td align="left">_19 = &lt;error::ErrorCode as Into&lt;anchor_lang::error::Error&gt;&gt;::into(move _20)</td></tr></table>>];
    bb17__0_1158 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">_27 = discriminant(_8)<br/>_23 = const false<br/>_24 = const false<br/>StorageDead(_8)<br/>StorageDead(_7)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/>_2 = const ()<br/>StorageDead(_3)<br/>StorageDead(_2)<br/>StorageLive(_21)<br/>_21 = ()<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Ok(move _21)<br/>StorageDead(_21)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_1158 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">18 (cleanup)</td></tr><tr><td align="left" balign="left">_31 = discriminant(_8)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_1158 -> bb1__0_1158 [label="return"];
    bb1__0_1158 -> bb2__0_1158 [label="return"];
    bb1__0_1158 -> bb15__0_1158 [label="unwind"];
    bb2__0_1158 -> bb3__0_1158 [label="0"];
    bb2__0_1158 -> bb5__0_1158 [label="1"];
    bb2__0_1158 -> bb4__0_1158 [label="otherwise"];
    bb3__0_1158 -> bb7__0_1158 [label="return"];
    bb3__0_1158 -> bb14__0_1158 [label="unwind"];
    bb5__0_1158 -> bb6__0_1158 [label="return"];
    bb5__0_1158 -> bb18__0_1158 [label="unwind"];
    bb6__0_1158 -> bb12__0_1158 [label=""];
    bb7__0_1158 -> bb8__0_1158 [label="return"];
    bb7__0_1158 -> bb14__0_1158 [label="unwind"];
    bb8__0_1158 -> bb11__0_1158 [label="0"];
    bb8__0_1158 -> bb9__0_1158 [label="otherwise"];
    bb9__0_1158 -> bb16__0_1158 [label="return"];
    bb9__0_1158 -> bb18__0_1158 [label="unwind"];
    bb10__0_1158 -> bb12__0_1158 [label=""];
    bb11__0_1158 -> bb17__0_1158 [label="return"];
    bb11__0_1158 -> bb18__0_1158 [label="unwind"];
    bb12__0_1158 -> bb13__0_1158 [label=""];
    bb14__0_1158 -> bb18__0_1158 [label="return"];
    bb16__0_1158 -> bb10__0_1158 [label="return"];
    bb17__0_1158 -> bb13__0_1158 [label=""];
    bb18__0_1158 -> bb15__0_1158 [label=""];
}
