// MIR for `standardize_value_with_remainder_i128` before PreCodegen

fn standardize_value_with_remainder_i128(_1: i128, _2: u128) -> std::result::Result<(i128, i128), error::ErrorCode> {
    debug value => _1;
    debug step_size => _2;
    let mut _0: std::result::Result<(i128, i128), error::ErrorCode>;
    let _3: i128;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _5: std::result::Result<i128, error::ErrorCode>;
    let mut _6: i128;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _8: std::result::Result<i128, error::ErrorCode>;
    let mut _9: u128;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _11: std::result::Result<u128, error::ErrorCode>;
    let mut _12: std::option::Option<u128>;
    let mut _13: u128;
    let mut _14: i128;
    let mut _15: u128;
    let mut _16: {closure@programs/drift/src/error.rs:658:9: 658:11};
    let mut _17: isize;
    let _18: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _21: u128;
    let mut _22: isize;
    let _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _24: !;
    let mut _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _26: i128;
    let mut _27: i128;
    let mut _28: i128;
    let mut _29: isize;
    let _30: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _31: !;
    let mut _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _33: i128;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _36: std::result::Result<i128, error::ErrorCode>;
    let mut _37: i128;
    let mut _38: i128;
    let mut _39: isize;
    let mut _41: !;
    let mut _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _44: (i128, i128);
    let mut _45: i128;
    let mut _46: i128;
    scope 1 {
        debug remainder => _3;
        let _34: i128;
        let _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _43: i128;
        scope 14 {
            debug standardized_value => _34;
        }
        scope 15 {
            debug residual => _40;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _43;
            scope 18 {
            }
        }
    }
    scope 2 {
        debug residual => _18;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _21;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _23;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _26;
        scope 9 {
        }
    }
    scope 10 {
        debug residual => _30;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _33;
        scope 13 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = _1;
        _13 = core::num::<impl i128>::unsigned_abs(move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        StorageLive(_15);
        _15 = _2;
        _12 = core::num::<impl u128>::checked_rem_euclid(move _13, move _15) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_15);
        StorageDead(_13);
        StorageLive(_16);
        _16 = {closure@programs/drift/src/error.rs:658:9: 658:11};
        _11 = Option::<u128>::ok_or_else::<error::ErrorCode, {closure@programs/drift/src/error.rs:658:9: 658:11}>(move _12, move _16) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_16);
        StorageDead(_12);
        _10 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _11) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_11);
        _17 = discriminant(_10);
        switchInt(move _17) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_21);
        _21 = ((_10 as Continue).0: u128);
        _9 = _21;
        StorageDead(_21);
        _8 = <u128 as Cast>::cast::<i128>(move _9) -> [return: bb9, unwind continue];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_18);
        _18 = ((_10 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_20);
        _20 = _18;
        _0 = <std::result::Result<(i128, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _20) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb25;
    }

    bb9: {
        StorageDead(_9);
        _7 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _8) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_8);
        _22 = discriminant(_7);
        switchInt(move _22) -> [0: bb11, 1: bb12, otherwise: bb6];
    }

    bb11: {
        StorageLive(_26);
        _26 = ((_7 as Continue).0: i128);
        _6 = _26;
        StorageDead(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = _1;
        _27 = core::num::<impl i128>::signum(move _28) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_23);
        _23 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_25);
        _25 = _23;
        _0 = <std::result::Result<(i128, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _25) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_25);
        StorageDead(_23);
        goto -> bb25;
    }

    bb14: {
        StorageDead(_28);
        _5 = <i128 as SafeMath>::safe_mul(move _6, move _27) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_27);
        StorageDead(_6);
        _4 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _5) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_5);
        _29 = discriminant(_4);
        switchInt(move _29) -> [0: bb17, 1: bb18, otherwise: bb6];
    }

    bb17: {
        StorageLive(_33);
        _33 = ((_4 as Continue).0: i128);
        _3 = _33;
        StorageDead(_33);
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_4);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = _1;
        StorageLive(_38);
        _38 = _3;
        _36 = <i128 as SafeMath>::safe_sub(move _37, move _38) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_30);
        _30 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_32);
        _32 = _30;
        _0 = <std::result::Result<(i128, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _32) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_32);
        StorageDead(_30);
        goto -> bb26;
    }

    bb20: {
        StorageDead(_38);
        StorageDead(_37);
        _35 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _36) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_36);
        _39 = discriminant(_35);
        switchInt(move _39) -> [0: bb22, 1: bb23, otherwise: bb6];
    }

    bb22: {
        StorageLive(_43);
        _43 = ((_35 as Continue).0: i128);
        _34 = _43;
        StorageDead(_43);
        StorageDead(_35);
        StorageLive(_44);
        StorageLive(_45);
        _45 = _34;
        StorageLive(_46);
        _46 = _3;
        _44 = (move _45, move _46);
        StorageDead(_46);
        StorageDead(_45);
        _0 = std::result::Result::<(i128, i128), error::ErrorCode>::Ok(move _44);
        StorageDead(_44);
        StorageDead(_34);
        StorageDead(_3);
        goto -> bb28;
    }

    bb23: {
        StorageLive(_40);
        _40 = ((_35 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_42);
        _42 = _40;
        _0 = <std::result::Result<(i128, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _42) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_35);
        StorageDead(_34);
        goto -> bb27;
    }

    bb25: {
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb26;
    }

    bb26: {
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_4);
        goto -> bb27;
    }

    bb27: {
        StorageDead(_3);
        goto -> bb28;
    }

    bb28: {
        return;
    }
}
