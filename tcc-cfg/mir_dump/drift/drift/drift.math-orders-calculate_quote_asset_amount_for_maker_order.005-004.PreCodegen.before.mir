// MIR for `calculate_quote_asset_amount_for_maker_order` before PreCodegen

fn calculate_quote_asset_amount_for_maker_order(_1: u64, _2: u64, _3: u32, _4: controller::position::PositionDirection) -> std::result::Result<u64, error::ErrorCode> {
    debug base_asset_amount => _1;
    debug fill_price => _2;
    debug base_decimals => _3;
    debug position_direction => _4;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let _5: u128;
    let mut _6: u32;
    let mut _7: isize;
    let mut _8: u128;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _10: std::result::Result<u128, error::ErrorCode>;
    let mut _11: u128;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _13: std::result::Result<u128, error::ErrorCode>;
    let mut _14: u128;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _16: std::result::Result<u128, error::ErrorCode>;
    let mut _17: u64;
    let mut _18: isize;
    let mut _20: !;
    let mut _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _23: u128;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _25: std::result::Result<u128, error::ErrorCode>;
    let mut _26: u64;
    let mut _27: isize;
    let mut _29: !;
    let mut _30: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _32: isize;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _37: u128;
    let mut _38: isize;
    let mut _40: !;
    let mut _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _43: u128;
    let mut _44: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _45: std::result::Result<u128, error::ErrorCode>;
    let mut _46: u128;
    let mut _47: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _48: std::result::Result<u128, error::ErrorCode>;
    let mut _49: u128;
    let mut _50: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _51: std::result::Result<u128, error::ErrorCode>;
    let mut _52: u64;
    let mut _53: isize;
    let mut _55: !;
    let mut _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _58: u128;
    let mut _59: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _60: std::result::Result<u128, error::ErrorCode>;
    let mut _61: u64;
    let mut _62: isize;
    let mut _64: !;
    let mut _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _67: isize;
    let mut _69: !;
    let mut _70: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _72: u128;
    let mut _73: isize;
    let mut _75: !;
    let mut _76: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    scope 1 {
        debug precision_decrease => _5;
        let _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _22: u128;
        let _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _31: u128;
        let _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _36: u128;
        let _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _42: u128;
        let _54: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _57: u128;
        let _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _66: u128;
        let _68: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _71: u128;
        let _74: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _77: u128;
        scope 2 {
            debug residual => _19;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _22;
            scope 5 {
            }
        }
        scope 6 {
            debug residual => _28;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _31;
            scope 9 {
            }
        }
        scope 10 {
            debug residual => _33;
            scope 11 {
            }
        }
        scope 12 {
            debug val => _36;
            scope 13 {
            }
        }
        scope 14 {
            debug residual => _39;
            scope 15 {
            }
        }
        scope 16 {
            debug val => _42;
            scope 17 {
            }
        }
        scope 18 {
            debug residual => _54;
            scope 19 {
            }
        }
        scope 20 {
            debug val => _57;
            scope 21 {
            }
        }
        scope 22 {
            debug residual => _63;
            scope 23 {
            }
        }
        scope 24 {
            debug val => _66;
            scope 25 {
            }
        }
        scope 26 {
            debug residual => _68;
            scope 27 {
            }
        }
        scope 28 {
            debug val => _71;
            scope 29 {
            }
        }
        scope 30 {
            debug residual => _74;
            scope 31 {
            }
        }
        scope 32 {
            debug val => _77;
            scope 33 {
            }
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        _6 = _3;
        _5 = core::num::<impl u128>::pow(const 10_u128, move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = _2;
        _51 = <u64 as Cast>::cast::<u128>(move _52) -> [return: bb26, unwind continue];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = _2;
        _16 = <u64 as Cast>::cast::<u128>(move _17) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_17);
        _15 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _16) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_16);
        _18 = discriminant(_15);
        switchInt(move _18) -> [0: bb7, 1: bb8, otherwise: bb3];
    }

    bb7: {
        StorageLive(_22);
        _22 = ((_15 as Continue).0: u128);
        _14 = _22;
        StorageDead(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = _1;
        _25 = <u64 as Cast>::cast::<u128>(move _26) -> [return: bb10, unwind continue];
    }

    bb8: {
        StorageLive(_19);
        _19 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_21);
        _21 = _19;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _21) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb53;
    }

    bb10: {
        StorageDead(_26);
        _24 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _25) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_25);
        _27 = discriminant(_24);
        switchInt(move _27) -> [0: bb12, 1: bb13, otherwise: bb3];
    }

    bb12: {
        StorageLive(_31);
        _31 = ((_24 as Continue).0: u128);
        _23 = _31;
        StorageDead(_31);
        _13 = <u128 as SafeMath>::safe_mul(move _14, move _23) -> [return: bb15, unwind continue];
    }

    bb13: {
        StorageLive(_28);
        _28 = ((_24 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_30);
        _30 = _28;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _30) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_30);
        StorageDead(_28);
        StorageDead(_23);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb51;
    }

    bb15: {
        StorageDead(_23);
        StorageDead(_14);
        _12 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _13) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_13);
        _32 = discriminant(_12);
        switchInt(move _32) -> [0: bb17, 1: bb18, otherwise: bb3];
    }

    bb17: {
        StorageLive(_36);
        _36 = ((_12 as Continue).0: u128);
        _11 = _36;
        StorageDead(_36);
        StorageLive(_37);
        _37 = _5;
        _10 = <u128 as SafeMath>::safe_div(move _11, move _37) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_33);
        _33 = ((_12 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_35);
        _35 = _33;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _35) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_35);
        StorageDead(_33);
        goto -> bb51;
    }

    bb20: {
        StorageDead(_37);
        StorageDead(_11);
        _9 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _10) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_10);
        _38 = discriminant(_9);
        switchInt(move _38) -> [0: bb22, 1: bb23, otherwise: bb3];
    }

    bb22: {
        StorageLive(_42);
        _42 = ((_9 as Continue).0: u128);
        _8 = _42;
        StorageDead(_42);
        _0 = <u128 as Cast>::cast::<u64>(move _8) -> [return: bb25, unwind continue];
    }

    bb23: {
        StorageLive(_39);
        _39 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_41);
        _41 = _39;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _41) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_41);
        StorageDead(_39);
        goto -> bb52;
    }

    bb25: {
        StorageDead(_24);
        StorageDead(_15);
        StorageDead(_12);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb47;
    }

    bb26: {
        StorageDead(_52);
        _50 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _51) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_51);
        _53 = discriminant(_50);
        switchInt(move _53) -> [0: bb28, 1: bb29, otherwise: bb3];
    }

    bb28: {
        StorageLive(_57);
        _57 = ((_50 as Continue).0: u128);
        _49 = _57;
        StorageDead(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = _1;
        _60 = <u64 as Cast>::cast::<u128>(move _61) -> [return: bb31, unwind continue];
    }

    bb29: {
        StorageLive(_54);
        _54 = ((_50 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_56);
        _56 = _54;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _56) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_56);
        StorageDead(_54);
        StorageDead(_49);
        StorageDead(_48);
        StorageDead(_46);
        StorageDead(_45);
        goto -> bb50;
    }

    bb31: {
        StorageDead(_61);
        _59 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _60) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_60);
        _62 = discriminant(_59);
        switchInt(move _62) -> [0: bb33, 1: bb34, otherwise: bb3];
    }

    bb33: {
        StorageLive(_66);
        _66 = ((_59 as Continue).0: u128);
        _58 = _66;
        StorageDead(_66);
        _48 = <u128 as SafeMath>::safe_mul(move _49, move _58) -> [return: bb36, unwind continue];
    }

    bb34: {
        StorageLive(_63);
        _63 = ((_59 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_65);
        _65 = _63;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _65) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_58);
        StorageDead(_49);
        StorageDead(_48);
        goto -> bb48;
    }

    bb36: {
        StorageDead(_58);
        StorageDead(_49);
        _47 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _48) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_48);
        _67 = discriminant(_47);
        switchInt(move _67) -> [0: bb38, 1: bb39, otherwise: bb3];
    }

    bb38: {
        StorageLive(_71);
        _71 = ((_47 as Continue).0: u128);
        _46 = _71;
        StorageDead(_71);
        StorageLive(_72);
        _72 = _5;
        _45 = <u128 as SafeMath>::safe_div_ceil(move _46, move _72) -> [return: bb41, unwind continue];
    }

    bb39: {
        StorageLive(_68);
        _68 = ((_47 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_70);
        _70 = _68;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _70) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_70);
        StorageDead(_68);
        goto -> bb48;
    }

    bb41: {
        StorageDead(_72);
        StorageDead(_46);
        _44 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _45) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_45);
        _73 = discriminant(_44);
        switchInt(move _73) -> [0: bb43, 1: bb44, otherwise: bb3];
    }

    bb43: {
        StorageLive(_77);
        _77 = ((_44 as Continue).0: u128);
        _43 = _77;
        StorageDead(_77);
        _0 = <u128 as Cast>::cast::<u64>(move _43) -> [return: bb46, unwind continue];
    }

    bb44: {
        StorageLive(_74);
        _74 = ((_44 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_76);
        _76 = _74;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _76) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_76);
        StorageDead(_74);
        goto -> bb49;
    }

    bb46: {
        StorageDead(_59);
        StorageDead(_50);
        StorageDead(_47);
        StorageDead(_44);
        StorageDead(_43);
        goto -> bb47;
    }

    bb47: {
        StorageDead(_5);
        goto -> bb55;
    }

    bb48: {
        StorageDead(_46);
        StorageDead(_45);
        goto -> bb49;
    }

    bb49: {
        StorageDead(_59);
        goto -> bb50;
    }

    bb50: {
        StorageDead(_50);
        StorageDead(_47);
        StorageDead(_44);
        StorageDead(_43);
        goto -> bb54;
    }

    bb51: {
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb52;
    }

    bb52: {
        StorageDead(_24);
        goto -> bb53;
    }

    bb53: {
        StorageDead(_15);
        StorageDead(_12);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb54;
    }

    bb54: {
        StorageDead(_5);
        goto -> bb55;
    }

    bb55: {
        return;
    }
}
