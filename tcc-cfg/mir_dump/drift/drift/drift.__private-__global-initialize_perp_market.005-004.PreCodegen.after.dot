digraph Mir_0_19455 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn __global::initialize_perp_market(_1: &amp;ReErased anchor_lang::prelude::Pubkey, _2: &amp;ReErased [anchor_lang::prelude::AccountInfo&lt;ReErased&gt;], _3: &amp;ReErased [u8]) -&gt; std::result::Result&lt;(), anchor_lang::error::Error&gt;<br align="left"/>let _4: ();<br align="left"/>let mut _5: &amp;ReErased str;<br align="left"/>let _6: &amp;ReErased str;<br align="left"/>let _7: instruction::InitializePerpMarket;<br align="left"/>let mut _8: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::ErrorCode&gt;, instruction::InitializePerpMarket&gt;;<br align="left"/>let mut _9: std::result::Result&lt;instruction::InitializePerpMarket, anchor_lang::error::ErrorCode&gt;;<br align="left"/>let mut _10: std::result::Result&lt;instruction::InitializePerpMarket, std::io::Error&gt;;<br align="left"/>let mut _11: &amp;ReErased mut &amp;ReErased [u8];<br align="left"/>let mut _12: &amp;ReErased mut &amp;ReErased [u8];<br align="left"/>let mut _13: &amp;ReErased [u8];<br align="left"/>let _14: &amp;ReErased [u8];<br align="left"/>let mut _15: &amp;ReErased [u8];<br align="left"/>let mut _16: std::ops::RangeFull;<br align="left"/>let mut _17: Closure(DefId(0:19457 ~ drift[d311]::__private::__global::initialize_perp_market::{closure#0}), [i32, Binder(extern &quot;RustCall&quot; fn((std::io::Error,)) -&gt; anchor_lang::error::ErrorCode, []), ()]);<br align="left"/>let mut _18: isize;<br align="left"/>let _19: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::ErrorCode&gt;;<br align="left"/>let mut _20: !;<br align="left"/>let mut _21: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::ErrorCode&gt;;<br align="left"/>let _22: instruction::InitializePerpMarket;<br align="left"/>let _23: u16;<br align="left"/>let _24: u128;<br align="left"/>let _25: u128;<br align="left"/>let _26: i64;<br align="left"/>let _27: u128;<br align="left"/>let _28: state::oracle::OracleSource;<br align="left"/>let _29: state::perp_market::ContractTier;<br align="left"/>let _30: u32;<br align="left"/>let _31: u32;<br align="left"/>let _32: u32;<br align="left"/>let _33: u32;<br align="left"/>let _34: u32;<br align="left"/>let _35: bool;<br align="left"/>let _36: u32;<br align="left"/>let _37: u32;<br align="left"/>let _38: u128;<br align="left"/>let _39: u64;<br align="left"/>let _40: u64;<br align="left"/>let _41: u64;<br align="left"/>let _42: u64;<br align="left"/>let _43: u64;<br align="left"/>let _44: u128;<br align="left"/>let _45: u8;<br align="left"/>let _46: u8;<br align="left"/>let _47: [u8; 32_usize];<br align="left"/>let mut _48: instructions::admin::InitializePerpMarketBumps;<br align="left"/>let mut _49: std::collections::BTreeSet&lt;anchor_lang::prelude::Pubkey, std::alloc::Global&gt;;<br align="left"/>let mut _50: &amp;ReErased [anchor_lang::prelude::AccountInfo&lt;ReErased&gt;];<br align="left"/>let mut _51: instructions::admin::InitializePerpMarket&lt;ReErased&gt;;<br align="left"/>let mut _52: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, instructions::admin::InitializePerpMarket&lt;ReErased&gt;&gt;;<br align="left"/>let mut _53: std::result::Result&lt;instructions::admin::InitializePerpMarket&lt;ReErased&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _54: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _55: &amp;ReErased mut &amp;ReErased [anchor_lang::prelude::AccountInfo&lt;ReErased&gt;];<br align="left"/>let mut _56: &amp;ReErased mut &amp;ReErased [anchor_lang::prelude::AccountInfo&lt;ReErased&gt;];<br align="left"/>let mut _57: &amp;ReErased [u8];<br align="left"/>let mut _58: &amp;ReErased mut instructions::admin::InitializePerpMarketBumps;<br align="left"/>let mut _59: &amp;ReErased mut instructions::admin::InitializePerpMarketBumps;<br align="left"/>let mut _60: &amp;ReErased mut std::collections::BTreeSet&lt;anchor_lang::prelude::Pubkey, std::alloc::Global&gt;;<br align="left"/>let mut _61: &amp;ReErased mut std::collections::BTreeSet&lt;anchor_lang::prelude::Pubkey, std::alloc::Global&gt;;<br align="left"/>let mut _62: isize;<br align="left"/>let _63: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _64: !;<br align="left"/>let mut _65: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _66: instructions::admin::InitializePerpMarket&lt;ReErased&gt;;<br align="left"/>let _67: ();<br align="left"/>let mut _68: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, ()&gt;;<br align="left"/>let mut _69: std::result::Result&lt;(), anchor_lang::error::Error&gt;;<br align="left"/>let mut _70: anchor_lang::context::Context&lt;ReErased, ReErased, ReErased, ReErased, instructions::admin::InitializePerpMarket&lt;ReErased&gt;&gt;;<br align="left"/>let mut _71: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _72: &amp;ReErased mut instructions::admin::InitializePerpMarket&lt;ReErased&gt;;<br align="left"/>let mut _73: &amp;ReErased mut instructions::admin::InitializePerpMarket&lt;ReErased&gt;;<br align="left"/>let mut _74: &amp;ReErased [anchor_lang::prelude::AccountInfo&lt;ReErased&gt;];<br align="left"/>let mut _75: instructions::admin::InitializePerpMarketBumps;<br align="left"/>let mut _76: u16;<br align="left"/>let mut _77: u128;<br align="left"/>let mut _78: u128;<br align="left"/>let mut _79: i64;<br align="left"/>let mut _80: u128;<br align="left"/>let mut _81: state::oracle::OracleSource;<br align="left"/>let mut _82: state::perp_market::ContractTier;<br align="left"/>let mut _83: u32;<br align="left"/>let mut _84: u32;<br align="left"/>let mut _85: u32;<br align="left"/>let mut _86: u32;<br align="left"/>let mut _87: u32;<br align="left"/>let mut _88: bool;<br align="left"/>let mut _89: u32;<br align="left"/>let mut _90: u32;<br align="left"/>let mut _91: u128;<br align="left"/>let mut _92: u64;<br align="left"/>let mut _93: u64;<br align="left"/>let mut _94: u64;<br align="left"/>let mut _95: u64;<br align="left"/>let mut _96: u64;<br align="left"/>let mut _97: u128;<br align="left"/>let mut _98: u8;<br align="left"/>let mut _99: u8;<br align="left"/>let mut _100: [u8; 32_usize];<br align="left"/>let mut _101: isize;<br align="left"/>let _102: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _103: !;<br align="left"/>let mut _104: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _105: ();<br align="left"/>let mut _106: &amp;ReErased instructions::admin::InitializePerpMarket&lt;ReErased&gt;;<br align="left"/>let mut _107: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _108: isize;<br align="left"/>let mut _109: isize;<br align="left"/>let mut _110: isize;<br align="left"/>let mut _111: isize;<br align="left"/>let mut _112: isize;<br align="left"/>let mut _113: isize;<br align="left"/>let mut _114: isize;<br align="left"/>let mut _115: isize;<br align="left"/>let mut _116: isize;<br align="left"/>let mut _117: isize;<br align="left"/>debug __program_id =&gt; _1;<br align="left"/>debug __accounts =&gt; _2;<br align="left"/>debug __ix_data =&gt; _3;<br align="left"/>debug ix =&gt; _7;<br align="left"/>debug residual =&gt; _19;<br align="left"/>debug val =&gt; _22;<br align="left"/>debug market_index =&gt; _23;<br align="left"/>debug amm_base_asset_reserve =&gt; _24;<br align="left"/>debug amm_quote_asset_reserve =&gt; _25;<br align="left"/>debug amm_periodicity =&gt; _26;<br align="left"/>debug amm_peg_multiplier =&gt; _27;<br align="left"/>debug oracle_source =&gt; _28;<br align="left"/>debug contract_tier =&gt; _29;<br align="left"/>debug margin_ratio_initial =&gt; _30;<br align="left"/>debug margin_ratio_maintenance =&gt; _31;<br align="left"/>debug liquidator_fee =&gt; _32;<br align="left"/>debug if_liquidation_fee =&gt; _33;<br align="left"/>debug imf_factor =&gt; _34;<br align="left"/>debug active_status =&gt; _35;<br align="left"/>debug base_spread =&gt; _36;<br align="left"/>debug max_spread =&gt; _37;<br align="left"/>debug max_open_interest =&gt; _38;<br align="left"/>debug max_revenue_withdraw_per_period =&gt; _39;<br align="left"/>debug quote_max_insurance =&gt; _40;<br align="left"/>debug order_step_size =&gt; _41;<br align="left"/>debug order_tick_size =&gt; _42;<br align="left"/>debug min_order_size =&gt; _43;<br align="left"/>debug concentration_coef_scale =&gt; _44;<br align="left"/>debug curve_update_intensity =&gt; _45;<br align="left"/>debug amm_jit_intensity =&gt; _46;<br align="left"/>debug name =&gt; _47;<br align="left"/>debug __bumps =&gt; _48;<br align="left"/>debug __reallocs =&gt; _49;<br align="left"/>debug __remaining_accounts =&gt; _50;<br align="left"/>debug __accounts =&gt; _51;<br align="left"/>debug residual =&gt; _63;<br align="left"/>debug val =&gt; _66;<br align="left"/>debug result =&gt; _67;<br align="left"/>debug residual =&gt; _102;<br align="left"/>debug val =&gt; _105;<br align="left"/>>;
    bb0__0_19455 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = const &quot;Instruction: InitializePerpMarket&quot;<br/>_5 = &amp;(*_6)<br/></td></tr><tr><td align="left">_4 = solana_program::log::sol_log(move _5)</td></tr></table>>];
    bb1__0_19455 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageDead(_6)<br/>StorageDead(_4)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>_15 = &amp;(*_3)<br/>StorageLive(_16)<br/>_16 = RangeFull<br/></td></tr><tr><td align="left">_14 = &lt;[u8] as Index&lt;RangeFull&gt;&gt;::index(move _15, move _16)</td></tr></table>>];
    bb2__0_19455 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageDead(_15)<br/>_13 = &amp;(*_14)<br/>_12 = &amp;mut _13<br/>_11 = &amp;mut (*_12)<br/></td></tr><tr><td align="left">_10 = &lt;instruction::InitializePerpMarket as BorshDeserialize&gt;::deserialize(move _11)</td></tr></table>>];
    bb3__0_19455 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageLive(_17)<br/>_17 = {closure@programs/drift/src/lib.rs:69:1: 69:11}<br/></td></tr><tr><td align="left">_9 = std::result::Result::&lt;instruction::InitializePerpMarket, std::io::Error&gt;::map_err::&lt;anchor_lang::error::ErrorCode, {closure@programs/drift/src/lib.rs:69:1: 69:11}&gt;(move _10, move _17)</td></tr></table>>];
    bb4__0_19455 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">_8 = &lt;std::result::Result&lt;instruction::InitializePerpMarket, anchor_lang::error::ErrorCode&gt; as Try&gt;::branch(move _9)</td></tr></table>>];
    bb5__0_19455 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>_18 = discriminant(_8)<br/></td></tr><tr><td align="left">switchInt(move _18)</td></tr></table>>];
    bb6__0_19455 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_22)<br/>_22 = move ((_8 as Continue).0: instruction::InitializePerpMarket)<br/>_7 = move _22<br/>StorageDead(_22)<br/>StorageDead(_14)<br/>StorageDead(_13)<br/>StorageDead(_12)<br/>StorageDead(_8)<br/>StorageLive(_23)<br/>_23 = (_7.0: u16)<br/>StorageLive(_24)<br/>_24 = (_7.1: u128)<br/>StorageLive(_25)<br/>_25 = (_7.2: u128)<br/>StorageLive(_26)<br/>_26 = (_7.3: i64)<br/>StorageLive(_27)<br/>_27 = (_7.4: u128)<br/>StorageLive(_28)<br/>_28 = (_7.5: state::oracle::OracleSource)<br/>StorageLive(_29)<br/>_29 = (_7.6: state::perp_market::ContractTier)<br/>StorageLive(_30)<br/>_30 = (_7.7: u32)<br/>StorageLive(_31)<br/>_31 = (_7.8: u32)<br/>StorageLive(_32)<br/>_32 = (_7.9: u32)<br/>StorageLive(_33)<br/>_33 = (_7.10: u32)<br/>StorageLive(_34)<br/>_34 = (_7.11: u32)<br/>StorageLive(_35)<br/>_35 = (_7.12: bool)<br/>StorageLive(_36)<br/>_36 = (_7.13: u32)<br/>StorageLive(_37)<br/>_37 = (_7.14: u32)<br/>StorageLive(_38)<br/>_38 = (_7.15: u128)<br/>StorageLive(_39)<br/>_39 = (_7.16: u64)<br/>StorageLive(_40)<br/>_40 = (_7.17: u64)<br/>StorageLive(_41)<br/>_41 = (_7.18: u64)<br/>StorageLive(_42)<br/>_42 = (_7.19: u64)<br/>StorageLive(_43)<br/>_43 = (_7.20: u64)<br/>StorageLive(_44)<br/>_44 = (_7.21: u128)<br/>StorageLive(_45)<br/>_45 = (_7.22: u8)<br/>StorageLive(_46)<br/>_46 = (_7.23: u8)<br/>StorageLive(_47)<br/>_47 = (_7.24: [u8; 32])<br/>StorageLive(_48)<br/></td></tr><tr><td align="left">_48 = &lt;InitializePerpMarketBumps as Default&gt;::default()</td></tr></table>>];
    bb7__0_19455 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb8__0_19455 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageLive(_19)<br/>_19 = ((_8 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::ErrorCode&gt;)<br/>StorageLive(_21)<br/>_21 = _19<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::ErrorCode&gt;&gt;&gt;::from_residual(move _21)</td></tr></table>>];
    bb9__0_19455 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>StorageDead(_19)<br/>StorageDead(_14)<br/>StorageDead(_13)<br/>StorageDead(_12)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_19455 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_49)<br/></td></tr><tr><td align="left">_49 = BTreeSet::&lt;anchor_lang::prelude::Pubkey&gt;::new()</td></tr></table>>];
    bb11__0_19455 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_50)<br/>_50 = &amp;(*_2)<br/>StorageLive(_51)<br/>StorageLive(_52)<br/>StorageLive(_53)<br/>StorageLive(_54)<br/>_54 = &amp;(*_1)<br/>StorageLive(_55)<br/>StorageLive(_56)<br/>_56 = &amp;mut _50<br/>_55 = &amp;mut (*_56)<br/>StorageLive(_57)<br/>_57 = &amp;(*_3)<br/>StorageLive(_58)<br/>StorageLive(_59)<br/>_59 = &amp;mut _48<br/>_58 = &amp;mut (*_59)<br/>StorageLive(_60)<br/>StorageLive(_61)<br/>_61 = &amp;mut _49<br/>_60 = &amp;mut (*_61)<br/></td></tr><tr><td align="left">_53 = &lt;admin::InitializePerpMarket&lt;'_&gt; as anchor_lang::Accounts&lt;'_, InitializePerpMarketBumps&gt;&gt;::try_accounts(move _54, move _55, move _57, move _58, move _60)</td></tr></table>>];
    bb12__0_19455 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_60)<br/>StorageDead(_58)<br/>StorageDead(_57)<br/>StorageDead(_55)<br/>StorageDead(_54)<br/></td></tr><tr><td align="left">_52 = &lt;std::result::Result&lt;admin::InitializePerpMarket&lt;'_&gt;, anchor_lang::error::Error&gt; as Try&gt;::branch(move _53)</td></tr></table>>];
    bb13__0_19455 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_53)<br/>_62 = discriminant(_52)<br/></td></tr><tr><td align="left">switchInt(move _62)</td></tr></table>>];
    bb14__0_19455 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageLive(_66)<br/>_66 = move ((_52 as Continue).0: instructions::admin::InitializePerpMarket&lt;'_&gt;)<br/>_51 = move _66<br/>StorageDead(_66)<br/>_108 = discriminant(_52)<br/>StorageDead(_61)<br/>StorageDead(_59)<br/>StorageDead(_56)<br/>StorageDead(_52)<br/>StorageLive(_67)<br/>StorageLive(_68)<br/>StorageLive(_69)<br/>StorageLive(_70)<br/>StorageLive(_71)<br/>_71 = &amp;(*_1)<br/>StorageLive(_72)<br/>StorageLive(_73)<br/>_73 = &amp;mut _51<br/>_72 = &amp;mut (*_73)<br/>StorageLive(_74)<br/>_74 = &amp;(*_50)<br/>StorageLive(_75)<br/>_75 = move _48<br/></td></tr><tr><td align="left">_70 = anchor_lang::context::Context::&lt;'_, '_, '_, '_, admin::InitializePerpMarket&lt;'_&gt;&gt;::new(move _71, move _72, move _74, move _75)</td></tr></table>>];
    bb15__0_19455 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_63)<br/>_63 = move ((_52 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_65)<br/>_65 = move _63<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _65)</td></tr></table>>];
    bb16__0_19455 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_65)<br/>StorageDead(_63)<br/>_114 = discriminant(_52)<br/>StorageDead(_61)<br/>StorageDead(_59)<br/>StorageDead(_56)<br/>StorageDead(_52)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_19455 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_75)<br/>StorageDead(_74)<br/>StorageDead(_72)<br/>StorageDead(_71)<br/>StorageLive(_76)<br/>_76 = _23<br/>StorageLive(_77)<br/>_77 = _24<br/>StorageLive(_78)<br/>_78 = _25<br/>StorageLive(_79)<br/>_79 = _26<br/>StorageLive(_80)<br/>_80 = _27<br/>StorageLive(_81)<br/>_81 = _28<br/>StorageLive(_82)<br/>_82 = _29<br/>StorageLive(_83)<br/>_83 = _30<br/>StorageLive(_84)<br/>_84 = _31<br/>StorageLive(_85)<br/>_85 = _32<br/>StorageLive(_86)<br/>_86 = _33<br/>StorageLive(_87)<br/>_87 = _34<br/>StorageLive(_88)<br/>_88 = _35<br/>StorageLive(_89)<br/>_89 = _36<br/>StorageLive(_90)<br/>_90 = _37<br/>StorageLive(_91)<br/>_91 = _38<br/>StorageLive(_92)<br/>_92 = _39<br/>StorageLive(_93)<br/>_93 = _40<br/>StorageLive(_94)<br/>_94 = _41<br/>StorageLive(_95)<br/>_95 = _42<br/>StorageLive(_96)<br/>_96 = _43<br/>StorageLive(_97)<br/>_97 = _44<br/>StorageLive(_98)<br/>_98 = _45<br/>StorageLive(_99)<br/>_99 = _46<br/>StorageLive(_100)<br/>_100 = _47<br/></td></tr><tr><td align="left">_69 = drift::initialize_perp_market::&lt;'_, '_&gt;(move _70, move _76, move _77, move _78, move _79, move _80, move _81, move _82, move _83, move _84, move _85, move _86, move _87, move _88, move _89, move _90, move _91, move _92, move _93, move _94, move _95, move _96, move _97, move _98, move _99, move _100)</td></tr></table>>];
    bb18__0_19455 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_100)<br/>StorageDead(_99)<br/>StorageDead(_98)<br/>StorageDead(_97)<br/>StorageDead(_96)<br/>StorageDead(_95)<br/>StorageDead(_94)<br/>StorageDead(_93)<br/>StorageDead(_92)<br/>StorageDead(_91)<br/>StorageDead(_90)<br/>StorageDead(_89)<br/>StorageDead(_88)<br/>StorageDead(_87)<br/>StorageDead(_86)<br/>StorageDead(_85)<br/>StorageDead(_84)<br/>StorageDead(_83)<br/>StorageDead(_82)<br/>StorageDead(_81)<br/>StorageDead(_80)<br/>StorageDead(_79)<br/>StorageDead(_78)<br/>StorageDead(_77)<br/>StorageDead(_76)<br/>StorageDead(_70)<br/></td></tr><tr><td align="left">_68 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as Try&gt;::branch(move _69)</td></tr></table>>];
    bb19__0_19455 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_69)<br/>_101 = discriminant(_68)<br/></td></tr><tr><td align="left">switchInt(move _101)</td></tr></table>>];
    bb20__0_19455 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageLive(_105)<br/>_105 = ((_68 as Continue).0: ())<br/>_67 = _105<br/>StorageDead(_105)<br/>_110 = discriminant(_68)<br/>StorageDead(_73)<br/>StorageDead(_68)<br/>StorageLive(_106)<br/>_106 = &amp;_51<br/>StorageLive(_107)<br/>_107 = &amp;(*_1)<br/></td></tr><tr><td align="left">_0 = &lt;admin::InitializePerpMarket&lt;'_&gt; as anchor_lang::AccountsExit&lt;'_&gt;&gt;::exit(move _106, move _107)</td></tr></table>>];
    bb21__0_19455 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageLive(_102)<br/>_102 = move ((_68 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_104)<br/>_104 = move _102<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _104)</td></tr></table>>];
    bb22__0_19455 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_104)<br/>StorageDead(_102)<br/>_112 = discriminant(_68)<br/>StorageDead(_73)<br/>StorageDead(_68)<br/>StorageDead(_67)<br/></td></tr><tr><td align="left">drop(_51)</td></tr></table>>];
    bb23__0_19455 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_107)<br/>StorageDead(_106)<br/>StorageDead(_67)<br/></td></tr><tr><td align="left">drop(_51)</td></tr></table>>];
    bb24__0_19455 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_51)<br/>StorageDead(_50)<br/></td></tr><tr><td align="left">drop(_49)</td></tr></table>>];
    bb25__0_19455 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_49)<br/>StorageDead(_48)<br/>StorageDead(_47)<br/>StorageDead(_46)<br/>StorageDead(_45)<br/>StorageDead(_44)<br/>StorageDead(_43)<br/>StorageDead(_42)<br/>StorageDead(_41)<br/>StorageDead(_40)<br/>StorageDead(_39)<br/>StorageDead(_38)<br/>StorageDead(_37)<br/>StorageDead(_36)<br/>StorageDead(_35)<br/>StorageDead(_34)<br/>StorageDead(_33)<br/>StorageDead(_32)<br/>StorageDead(_31)<br/>StorageDead(_30)<br/>StorageDead(_29)<br/>StorageDead(_28)<br/>StorageDead(_27)<br/>StorageDead(_26)<br/>StorageDead(_25)<br/>StorageDead(_24)<br/>StorageDead(_23)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb26__0_19455 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_51)<br/>StorageDead(_50)<br/></td></tr><tr><td align="left">drop(_49)</td></tr></table>>];
    bb27__0_19455 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_49)<br/>StorageDead(_48)<br/>StorageDead(_47)<br/>StorageDead(_46)<br/>StorageDead(_45)<br/>StorageDead(_44)<br/>StorageDead(_43)<br/>StorageDead(_42)<br/>StorageDead(_41)<br/>StorageDead(_40)<br/>StorageDead(_39)<br/>StorageDead(_38)<br/>StorageDead(_37)<br/>StorageDead(_36)<br/>StorageDead(_35)<br/>StorageDead(_34)<br/>StorageDead(_33)<br/>StorageDead(_32)<br/>StorageDead(_31)<br/>StorageDead(_30)<br/>StorageDead(_29)<br/>StorageDead(_28)<br/>StorageDead(_27)<br/>StorageDead(_26)<br/>StorageDead(_25)<br/>StorageDead(_24)<br/>StorageDead(_23)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb28__0_19455 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb29__0_19455 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left">return</td></tr></table>>];
    bb30__0_19455 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">30 (cleanup)</td></tr><tr><td align="left">drop(_51)</td></tr></table>>];
    bb31__0_19455 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">31 (cleanup)</td></tr><tr><td align="left">drop(_49)</td></tr></table>>];
    bb32__0_19455 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">32 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb33__0_19455 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">33 (cleanup)</td></tr><tr><td align="left" balign="left">_116 = discriminant(_68)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb34__0_19455 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">34 (cleanup)</td></tr><tr><td align="left" balign="left">_117 = discriminant(_52)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_19455 -> bb1__0_19455 [label="return"];
    bb1__0_19455 -> bb2__0_19455 [label="return"];
    bb2__0_19455 -> bb3__0_19455 [label="return"];
    bb3__0_19455 -> bb4__0_19455 [label="return"];
    bb3__0_19455 -> bb32__0_19455 [label="unwind"];
    bb4__0_19455 -> bb5__0_19455 [label="return"];
    bb5__0_19455 -> bb6__0_19455 [label="0"];
    bb5__0_19455 -> bb8__0_19455 [label="1"];
    bb5__0_19455 -> bb7__0_19455 [label="otherwise"];
    bb6__0_19455 -> bb10__0_19455 [label="return"];
    bb8__0_19455 -> bb9__0_19455 [label="return"];
    bb9__0_19455 -> bb28__0_19455 [label=""];
    bb10__0_19455 -> bb11__0_19455 [label="return"];
    bb11__0_19455 -> bb12__0_19455 [label="return"];
    bb11__0_19455 -> bb31__0_19455 [label="unwind"];
    bb12__0_19455 -> bb13__0_19455 [label="return"];
    bb12__0_19455 -> bb31__0_19455 [label="unwind"];
    bb13__0_19455 -> bb14__0_19455 [label="0"];
    bb13__0_19455 -> bb15__0_19455 [label="1"];
    bb13__0_19455 -> bb7__0_19455 [label="otherwise"];
    bb14__0_19455 -> bb17__0_19455 [label="return"];
    bb14__0_19455 -> bb30__0_19455 [label="unwind"];
    bb15__0_19455 -> bb16__0_19455 [label="return"];
    bb15__0_19455 -> bb34__0_19455 [label="unwind"];
    bb16__0_19455 -> bb26__0_19455 [label=""];
    bb17__0_19455 -> bb18__0_19455 [label="return"];
    bb17__0_19455 -> bb30__0_19455 [label="unwind"];
    bb18__0_19455 -> bb19__0_19455 [label="return"];
    bb18__0_19455 -> bb30__0_19455 [label="unwind"];
    bb19__0_19455 -> bb20__0_19455 [label="0"];
    bb19__0_19455 -> bb21__0_19455 [label="1"];
    bb19__0_19455 -> bb7__0_19455 [label="otherwise"];
    bb20__0_19455 -> bb23__0_19455 [label="return"];
    bb20__0_19455 -> bb30__0_19455 [label="unwind"];
    bb21__0_19455 -> bb22__0_19455 [label="return"];
    bb21__0_19455 -> bb33__0_19455 [label="unwind"];
    bb22__0_19455 -> bb26__0_19455 [label="return"];
    bb22__0_19455 -> bb31__0_19455 [label="unwind"];
    bb23__0_19455 -> bb24__0_19455 [label="return"];
    bb23__0_19455 -> bb31__0_19455 [label="unwind"];
    bb24__0_19455 -> bb25__0_19455 [label="return"];
    bb24__0_19455 -> bb32__0_19455 [label="unwind"];
    bb25__0_19455 -> bb29__0_19455 [label=""];
    bb26__0_19455 -> bb27__0_19455 [label="return"];
    bb26__0_19455 -> bb32__0_19455 [label="unwind"];
    bb27__0_19455 -> bb28__0_19455 [label=""];
    bb28__0_19455 -> bb29__0_19455 [label=""];
    bb30__0_19455 -> bb31__0_19455 [label="return"];
    bb31__0_19455 -> bb32__0_19455 [label="return"];
    bb33__0_19455 -> bb30__0_19455 [label=""];
    bb34__0_19455 -> bb31__0_19455 [label=""];
}
