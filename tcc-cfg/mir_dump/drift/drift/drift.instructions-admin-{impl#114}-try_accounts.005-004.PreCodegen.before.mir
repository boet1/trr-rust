// MIR for `admin::<impl at programs/drift/src/instructions/admin.rs:5256:10: 5256:18>::try_accounts` before PreCodegen

fn admin::<impl at programs/drift/src/instructions/admin.rs:5256:10: 5256:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut DepositIntoMarketFeePoolBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<admin::DepositIntoMarketFeePool<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<instructions::admin::DepositIntoMarketFeePool<'_>, anchor_lang::error::Error>;
    let _6: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>>;
    let mut _8: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _9: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _10: &anchor_lang::prelude::Pubkey;
    let mut _11: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _12: &[u8];
    let mut _13: &mut instructions::admin::DepositIntoMarketFeePoolBumps;
    let mut _14: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _15: {closure@programs/drift/src/instructions/admin.rs:5256:10: 5256:18};
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _20: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>>;
    let mut _23: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _24: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _25: &anchor_lang::prelude::Pubkey;
    let mut _26: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _27: &[u8];
    let mut _28: &mut instructions::admin::DepositIntoMarketFeePoolBumps;
    let mut _29: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _30: {closure@programs/drift/src/instructions/admin.rs:5256:10: 5256:18};
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _38: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _39: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _40: &anchor_lang::prelude::Pubkey;
    let mut _41: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _42: &[u8];
    let mut _43: &mut instructions::admin::DepositIntoMarketFeePoolBumps;
    let mut _44: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _45: {closure@programs/drift/src/instructions/admin.rs:5256:10: 5256:18};
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _53: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _54: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _55: &anchor_lang::prelude::Pubkey;
    let mut _56: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _57: &[u8];
    let mut _58: &mut instructions::admin::DepositIntoMarketFeePoolBumps;
    let mut _59: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _60: {closure@programs/drift/src/instructions/admin.rs:5256:10: 5256:18};
    let mut _61: isize;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _68: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _69: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _70: &anchor_lang::prelude::Pubkey;
    let mut _71: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _72: &[u8];
    let mut _73: &mut instructions::admin::DepositIntoMarketFeePoolBumps;
    let mut _74: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _75: {closure@programs/drift/src/instructions/admin.rs:5256:10: 5256:18};
    let mut _76: isize;
    let mut _78: !;
    let mut _79: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _82: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>>;
    let mut _83: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _84: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _85: &anchor_lang::prelude::Pubkey;
    let mut _86: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _87: &[u8];
    let mut _88: &mut instructions::admin::DepositIntoMarketFeePoolBumps;
    let mut _89: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _90: {closure@programs/drift/src/instructions/admin.rs:5256:10: 5256:18};
    let mut _91: isize;
    let mut _93: !;
    let mut _94: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _97: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _98: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _99: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _100: &anchor_lang::prelude::Pubkey;
    let mut _101: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _102: &[u8];
    let mut _103: &mut instructions::admin::DepositIntoMarketFeePoolBumps;
    let mut _104: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _105: {closure@programs/drift/src/instructions/admin.rs:5256:10: 5256:18};
    let mut _106: isize;
    let mut _108: !;
    let mut _109: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _112: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>>;
    let mut _113: std::result::Result<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>, anchor_lang::error::Error>;
    let mut _114: std::result::Result<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>, anchor_lang::error::Error>;
    let mut _115: &anchor_lang::prelude::Pubkey;
    let mut _116: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _117: &[u8];
    let mut _118: &mut instructions::admin::DepositIntoMarketFeePoolBumps;
    let mut _119: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _120: {closure@programs/drift/src/instructions/admin.rs:5256:10: 5256:18};
    let mut _121: isize;
    let mut _123: !;
    let mut _124: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _126: ();
    let mut _127: bool;
    let mut _128: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _129: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _130: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _131: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _132: !;
    let mut _133: anchor_lang::error::Error;
    let mut _134: anchor_lang::error::Error;
    let mut _135: anchor_lang::error::ErrorCode;
    let _136: ();
    let mut _138: &state::state::State;
    let mut _139: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _141: &anchor_lang::prelude::Signer<'_>;
    let mut _142: bool;
    let mut _143: &anchor_lang::prelude::Pubkey;
    let mut _144: &anchor_lang::prelude::Pubkey;
    let mut _145: !;
    let mut _146: anchor_lang::error::Error;
    let mut _147: anchor_lang::error::Error;
    let mut _148: anchor_lang::error::Error;
    let mut _149: anchor_lang::error::ErrorCode;
    let mut _150: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _151: anchor_lang::prelude::Pubkey;
    let mut _152: anchor_lang::prelude::Pubkey;
    let _153: ();
    let mut _154: bool;
    let mut _155: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _156: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let _157: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _158: !;
    let mut _159: anchor_lang::error::Error;
    let mut _160: anchor_lang::error::Error;
    let mut _161: anchor_lang::error::ErrorCode;
    let _162: ();
    let mut _163: bool;
    let mut _164: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _165: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _166: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _167: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _168: !;
    let mut _169: anchor_lang::error::Error;
    let mut _170: anchor_lang::error::Error;
    let mut _171: anchor_lang::error::ErrorCode;
    let _172: ();
    let mut _173: bool;
    let mut _174: &anchor_lang::prelude::Pubkey;
    let _175: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _176: &anchor_spl::token_interface::TokenAccount;
    let _177: &anchor_spl::token_interface::TokenAccount;
    let mut _178: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _179: &anchor_lang::prelude::Pubkey;
    let _180: anchor_lang::prelude::Pubkey;
    let mut _181: &anchor_lang::prelude::Signer<'_>;
    let mut _182: !;
    let mut _183: anchor_lang::error::Error;
    let mut _184: anchor_lang::error::ErrorCode;
    let _185: ();
    let mut _186: bool;
    let mut _187: &anchor_lang::prelude::Pubkey;
    let _188: &state::state::State;
    let mut _189: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _190: &anchor_lang::prelude::Pubkey;
    let _191: &anchor_lang::prelude::Pubkey;
    let _192: anchor_lang::prelude::Pubkey;
    let mut _193: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _194: !;
    let mut _195: anchor_lang::error::Error;
    let mut _196: anchor_lang::error::Error;
    let mut _197: anchor_lang::error::ErrorCode;
    let mut _200: (anchor_lang::prelude::Pubkey, u8);
    let mut _201: &[&[u8]];
    let mut _202: &[&[u8]; 2];
    let _203: &[&[u8]; 2];
    let _204: [&[u8]; 2];
    let mut _205: &[u8];
    let mut _206: &[u8; 11];
    let _207: &[u8; 11];
    let mut _208: &[u8];
    let _209: &[u8];
    let mut _210: &[u8; 2];
    let _211: [u8; 2];
    let mut _212: &anchor_lang::prelude::Pubkey;
    let _213: &&anchor_lang::prelude::Pubkey;
    let mut _214: u8;
    let _215: ();
    let mut _216: bool;
    let mut _217: &anchor_lang::prelude::Pubkey;
    let _218: anchor_lang::prelude::Pubkey;
    let mut _219: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _220: &anchor_lang::prelude::Pubkey;
    let mut _221: !;
    let mut _222: anchor_lang::error::Error;
    let mut _223: anchor_lang::error::Error;
    let mut _224: anchor_lang::error::Error;
    let mut _225: anchor_lang::error::ErrorCode;
    let mut _226: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _227: anchor_lang::prelude::Pubkey;
    let mut _228: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _229: anchor_lang::prelude::Pubkey;
    let _230: ();
    let mut _231: bool;
    let mut _232: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _233: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let _234: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _235: !;
    let mut _236: anchor_lang::error::Error;
    let mut _237: anchor_lang::error::Error;
    let mut _238: anchor_lang::error::ErrorCode;
    let mut _241: (anchor_lang::prelude::Pubkey, u8);
    let mut _242: &[&[u8]];
    let mut _243: &[&[u8]; 2];
    let _244: &[&[u8]; 2];
    let _245: [&[u8]; 2];
    let mut _246: &[u8];
    let _247: &[u8];
    let mut _248: &[u8; 17];
    let _249: &[u8; 17];
    let mut _250: &[u8];
    let _251: &[u8];
    let mut _252: &[u8; 2];
    let _253: [u8; 2];
    let mut _254: &anchor_lang::prelude::Pubkey;
    let _255: &&anchor_lang::prelude::Pubkey;
    let mut _256: u8;
    let _257: ();
    let mut _258: bool;
    let mut _259: &anchor_lang::prelude::Pubkey;
    let _260: anchor_lang::prelude::Pubkey;
    let mut _261: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _262: &anchor_lang::prelude::Pubkey;
    let mut _263: !;
    let mut _264: anchor_lang::error::Error;
    let mut _265: anchor_lang::error::Error;
    let mut _266: anchor_lang::error::Error;
    let mut _267: anchor_lang::error::ErrorCode;
    let mut _268: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _269: anchor_lang::prelude::Pubkey;
    let mut _270: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _271: anchor_lang::prelude::Pubkey;
    let _272: ();
    let mut _273: bool;
    let mut _274: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _275: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _276: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _277: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _278: !;
    let mut _279: anchor_lang::error::Error;
    let mut _280: anchor_lang::error::Error;
    let mut _281: anchor_lang::error::ErrorCode;
    let mut _282: instructions::admin::DepositIntoMarketFeePool<'_>;
    let mut _283: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _284: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _285: anchor_lang::prelude::Signer<'_>;
    let mut _286: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _287: anchor_lang::prelude::AccountInfo<'_>;
    let mut _288: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _289: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _290: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _291: &anchor_lang::prelude::Pubkey;
    let mut _292: &anchor_lang::prelude::Pubkey;
    let mut _293: bool;
    let mut _294: bool;
    let mut _295: isize;
    let mut _296: isize;
    let mut _297: isize;
    let mut _298: isize;
    let mut _299: isize;
    let mut _300: isize;
    let mut _301: isize;
    let mut _302: isize;
    let mut _303: isize;
    let mut _304: isize;
    let mut _305: isize;
    let mut _306: isize;
    let mut _307: isize;
    let mut _308: isize;
    let mut _309: isize;
    let mut _310: isize;
    let mut _311: isize;
    let mut _312: isize;
    let mut _313: isize;
    let mut _314: isize;
    let mut _315: isize;
    let mut _316: isize;
    let mut _317: isize;
    let mut _318: isize;
    let mut _319: isize;
    let mut _320: isize;
    let mut _321: isize;
    let mut _322: isize;
    let mut _323: isize;
    let mut _324: isize;
    let mut _325: isize;
    let mut _326: isize;
    let mut _327: isize;
    let mut _328: isize;
    let mut _329: isize;
    let mut _330: isize;
    let mut _331: isize;
    let mut _332: isize;
    let mut _333: isize;
    let mut _334: isize;
    let mut _335: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _336: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _337: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _338: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _339: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug state => _6;
        let _21: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
        let _32: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _35: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
        scope 6 {
            debug perp_market => _21;
            let _36: anchor_lang::prelude::Signer<'_>;
            let _47: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _50: anchor_lang::prelude::Signer<'_>;
            scope 11 {
                debug admin => _36;
                let _51: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                let _62: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _65: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                scope 16 {
                    debug source_vault => _51;
                    let _66: anchor_lang::prelude::AccountInfo<'_>;
                    let _77: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _80: anchor_lang::prelude::AccountInfo<'_>;
                    scope 21 {
                        debug drift_signer => _66;
                        let _81: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
                        let _92: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _95: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
                        scope 26 {
                            debug quote_spot_market => _81;
                            let _96: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                            let _107: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _110: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                            scope 31 {
                                debug spot_market_vault => _96;
                                let _111: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
                                let _122: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _125: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
                                scope 36 {
                                    debug token_program => _111;
                                    let _137: anchor_lang::prelude::Pubkey;
                                    let _198: anchor_lang::prelude::Pubkey;
                                    let _199: u8;
                                    scope 41 {
                                        debug my_key => _137;
                                        let _140: anchor_lang::prelude::Pubkey;
                                        scope 42 {
                                            debug target_key => _140;
                                        }
                                    }
                                    scope 43 {
                                        debug __pda_address => _198;
                                        debug __bump => _199;
                                        let _239: anchor_lang::prelude::Pubkey;
                                        let _240: u8;
                                        scope 44 {
                                            debug __pda_address => _239;
                                            debug __bump => _240;
                                        }
                                    }
                                }
                                scope 37 {
                                    debug residual => _122;
                                    scope 38 {
                                    }
                                }
                                scope 39 {
                                    debug val => _125;
                                    scope 40 {
                                    }
                                }
                            }
                            scope 32 {
                                debug residual => _107;
                                scope 33 {
                                }
                            }
                            scope 34 {
                                debug val => _110;
                                scope 35 {
                                }
                            }
                        }
                        scope 27 {
                            debug residual => _92;
                            scope 28 {
                            }
                        }
                        scope 29 {
                            debug val => _95;
                            scope 30 {
                            }
                        }
                    }
                    scope 22 {
                        debug residual => _77;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug val => _80;
                        scope 25 {
                        }
                    }
                }
                scope 17 {
                    debug residual => _62;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _65;
                    scope 20 {
                    }
                }
            }
            scope 12 {
                debug residual => _47;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _50;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _32;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _35;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _17;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _20;
        scope 5 {
        }
    }

    bb0: {
        _294 = const false;
        _293 = const false;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_1);
        StorageLive(_11);
        _11 = &mut (*_2);
        StorageLive(_12);
        _12 = &(*_3);
        StorageLive(_13);
        _13 = &mut (*_4);
        StorageLive(_14);
        _14 = &mut (*_5);
        _9 = <Box<anchor_lang::prelude::Account<'_, state::state::State>> as anchor_lang::Accounts<'_, DepositIntoMarketFeePoolBumps>>::try_accounts(move _10, move _11, move _12, move _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_15);
        _15 = {closure@programs/drift/src/instructions/admin.rs:5256:10: 5256:18};
        _8 = std::result::Result::<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5256:10: 5256:18}>(move _9, move _15) -> [return: bb2, unwind: bb138];
    }

    bb2: {
        StorageDead(_15);
        StorageDead(_9);
        _7 = <std::result::Result<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error> as Try>::branch(move _8) -> [return: bb3, unwind: bb138];
    }

    bb3: {
        StorageDead(_8);
        _16 = discriminant(_7);
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_20);
        _20 = move ((_7 as Continue).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _6 = move _20;
        StorageDead(_20);
        _295 = discriminant(_7);
        StorageDead(_7);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &(*_1);
        StorageLive(_26);
        _26 = &mut (*_2);
        StorageLive(_27);
        _27 = &(*_3);
        StorageLive(_28);
        _28 = &mut (*_4);
        StorageLive(_29);
        _29 = &mut (*_5);
        _24 = <anchor_lang::prelude::AccountLoader<'_, PerpMarket> as anchor_lang::Accounts<'_, DepositIntoMarketFeePoolBumps>>::try_accounts(move _25, move _26, move _27, move _28, move _29) -> [return: bb8, unwind: bb137];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_17);
        _17 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<admin::DepositIntoMarketFeePool<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _19) -> [return: bb7, unwind: bb150];
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_17);
        _325 = discriminant(_7);
        StorageDead(_7);
        goto -> bb132;
    }

    bb8: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_30);
        _30 = {closure@programs/drift/src/instructions/admin.rs:5256:10: 5256:18};
        _23 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, PerpMarket>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5256:10: 5256:18}>(move _24, move _30) -> [return: bb9, unwind: bb137];
    }

    bb9: {
        StorageDead(_30);
        StorageDead(_24);
        _22 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, PerpMarket>, anchor_lang::error::Error> as Try>::branch(move _23) -> [return: bb10, unwind: bb137];
    }

    bb10: {
        StorageDead(_23);
        _31 = discriminant(_22);
        switchInt(move _31) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_35);
        _35 = move ((_22 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _21 = move _35;
        StorageDead(_35);
        _297 = discriminant(_22);
        StorageDead(_22);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &(*_1);
        StorageLive(_41);
        _41 = &mut (*_2);
        StorageLive(_42);
        _42 = &(*_3);
        StorageLive(_43);
        _43 = &mut (*_4);
        StorageLive(_44);
        _44 = &mut (*_5);
        _39 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, DepositIntoMarketFeePoolBumps>>::try_accounts(move _40, move _41, move _42, move _43, move _44) -> [return: bb14, unwind: bb137];
    }

    bb12: {
        StorageLive(_32);
        _32 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_34);
        _34 = move _32;
        _0 = <std::result::Result<admin::DepositIntoMarketFeePool<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _34) -> [return: bb13, unwind: bb149];
    }

    bb13: {
        StorageDead(_34);
        StorageDead(_32);
        _323 = discriminant(_22);
        StorageDead(_22);
        goto -> bb131;
    }

    bb14: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_45);
        _45 = {closure@programs/drift/src/instructions/admin.rs:5256:10: 5256:18};
        _38 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5256:10: 5256:18}>(move _39, move _45) -> [return: bb15, unwind: bb137];
    }

    bb15: {
        StorageDead(_45);
        StorageDead(_39);
        _37 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _38) -> [return: bb16, unwind: bb137];
    }

    bb16: {
        StorageDead(_38);
        _46 = discriminant(_37);
        switchInt(move _46) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_50);
        _50 = move ((_37 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _36 = move _50;
        StorageDead(_50);
        _299 = discriminant(_37);
        StorageDead(_37);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &(*_1);
        StorageLive(_56);
        _56 = &mut (*_2);
        StorageLive(_57);
        _57 = &(*_3);
        StorageLive(_58);
        _58 = &mut (*_4);
        StorageLive(_59);
        _59 = &mut (*_5);
        _54 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, DepositIntoMarketFeePoolBumps>>::try_accounts(move _55, move _56, move _57, move _58, move _59) -> [return: bb20, unwind: bb137];
    }

    bb18: {
        StorageLive(_47);
        _47 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_49);
        _49 = move _47;
        _0 = <std::result::Result<admin::DepositIntoMarketFeePool<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _49) -> [return: bb19, unwind: bb148];
    }

    bb19: {
        StorageDead(_49);
        StorageDead(_47);
        _321 = discriminant(_37);
        StorageDead(_37);
        goto -> bb130;
    }

    bb20: {
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageLive(_60);
        _60 = {closure@programs/drift/src/instructions/admin.rs:5256:10: 5256:18};
        _53 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5256:10: 5256:18}>(move _54, move _60) -> [return: bb21, unwind: bb137];
    }

    bb21: {
        StorageDead(_60);
        StorageDead(_54);
        _52 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _53) -> [return: bb22, unwind: bb137];
    }

    bb22: {
        StorageDead(_53);
        _61 = discriminant(_52);
        switchInt(move _61) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_65);
        _65 = move ((_52 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _51 = move _65;
        StorageDead(_65);
        _301 = discriminant(_52);
        StorageDead(_52);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &(*_1);
        StorageLive(_71);
        _71 = &mut (*_2);
        StorageLive(_72);
        _72 = &(*_3);
        StorageLive(_73);
        _73 = &mut (*_4);
        StorageLive(_74);
        _74 = &mut (*_5);
        _69 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, DepositIntoMarketFeePoolBumps>>::try_accounts(move _70, move _71, move _72, move _73, move _74) -> [return: bb26, unwind: bb136];
    }

    bb24: {
        StorageLive(_62);
        _62 = move ((_52 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_64);
        _64 = move _62;
        _0 = <std::result::Result<admin::DepositIntoMarketFeePool<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _64) -> [return: bb25, unwind: bb147];
    }

    bb25: {
        StorageDead(_64);
        StorageDead(_62);
        _319 = discriminant(_52);
        StorageDead(_52);
        goto -> bb129;
    }

    bb26: {
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_75);
        _75 = {closure@programs/drift/src/instructions/admin.rs:5256:10: 5256:18};
        _68 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5256:10: 5256:18}>(move _69, move _75) -> [return: bb27, unwind: bb136];
    }

    bb27: {
        StorageDead(_75);
        StorageDead(_69);
        _67 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _68) -> [return: bb28, unwind: bb136];
    }

    bb28: {
        StorageDead(_68);
        _76 = discriminant(_67);
        switchInt(move _76) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_80);
        _80 = move ((_67 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _66 = move _80;
        StorageDead(_80);
        _303 = discriminant(_67);
        StorageDead(_67);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &(*_1);
        StorageLive(_86);
        _86 = &mut (*_2);
        StorageLive(_87);
        _87 = &(*_3);
        StorageLive(_88);
        _88 = &mut (*_4);
        StorageLive(_89);
        _89 = &mut (*_5);
        _84 = <anchor_lang::prelude::AccountLoader<'_, SpotMarket> as anchor_lang::Accounts<'_, DepositIntoMarketFeePoolBumps>>::try_accounts(move _85, move _86, move _87, move _88, move _89) -> [return: bb32, unwind: bb135];
    }

    bb30: {
        StorageLive(_77);
        _77 = move ((_67 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_79);
        _79 = move _77;
        _0 = <std::result::Result<admin::DepositIntoMarketFeePool<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _79) -> [return: bb31, unwind: bb146];
    }

    bb31: {
        StorageDead(_79);
        StorageDead(_77);
        _317 = discriminant(_67);
        StorageDead(_67);
        goto -> bb128;
    }

    bb32: {
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_85);
        StorageLive(_90);
        _90 = {closure@programs/drift/src/instructions/admin.rs:5256:10: 5256:18};
        _83 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, SpotMarket>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5256:10: 5256:18}>(move _84, move _90) -> [return: bb33, unwind: bb135];
    }

    bb33: {
        StorageDead(_90);
        StorageDead(_84);
        _82 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, SpotMarket>, anchor_lang::error::Error> as Try>::branch(move _83) -> [return: bb34, unwind: bb135];
    }

    bb34: {
        StorageDead(_83);
        _91 = discriminant(_82);
        switchInt(move _91) -> [0: bb35, 1: bb36, otherwise: bb5];
    }

    bb35: {
        StorageLive(_95);
        _95 = move ((_82 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _81 = move _95;
        StorageDead(_95);
        _305 = discriminant(_82);
        StorageDead(_82);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = &(*_1);
        StorageLive(_101);
        _101 = &mut (*_2);
        StorageLive(_102);
        _102 = &(*_3);
        StorageLive(_103);
        _103 = &mut (*_4);
        StorageLive(_104);
        _104 = &mut (*_5);
        _99 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, DepositIntoMarketFeePoolBumps>>::try_accounts(move _100, move _101, move _102, move _103, move _104) -> [return: bb38, unwind: bb135];
    }

    bb36: {
        StorageLive(_92);
        _92 = move ((_82 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_94);
        _94 = move _92;
        _0 = <std::result::Result<admin::DepositIntoMarketFeePool<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _94) -> [return: bb37, unwind: bb145];
    }

    bb37: {
        StorageDead(_94);
        StorageDead(_92);
        _315 = discriminant(_82);
        StorageDead(_82);
        goto -> bb127;
    }

    bb38: {
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_100);
        StorageLive(_105);
        _105 = {closure@programs/drift/src/instructions/admin.rs:5256:10: 5256:18};
        _98 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5256:10: 5256:18}>(move _99, move _105) -> [return: bb39, unwind: bb135];
    }

    bb39: {
        StorageDead(_105);
        StorageDead(_99);
        _97 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _98) -> [return: bb40, unwind: bb135];
    }

    bb40: {
        StorageDead(_98);
        _106 = discriminant(_97);
        switchInt(move _106) -> [0: bb41, 1: bb42, otherwise: bb5];
    }

    bb41: {
        StorageLive(_110);
        _110 = move ((_97 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _96 = move _110;
        StorageDead(_110);
        _307 = discriminant(_97);
        StorageDead(_97);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        _115 = &(*_1);
        StorageLive(_116);
        _116 = &mut (*_2);
        StorageLive(_117);
        _117 = &(*_3);
        StorageLive(_118);
        _118 = &mut (*_4);
        StorageLive(_119);
        _119 = &mut (*_5);
        _114 = <anchor_lang::prelude::Interface<'_, TokenInterface> as anchor_lang::Accounts<'_, DepositIntoMarketFeePoolBumps>>::try_accounts(move _115, move _116, move _117, move _118, move _119) -> [return: bb44, unwind: bb134];
    }

    bb42: {
        StorageLive(_107);
        _107 = move ((_97 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_109);
        _109 = move _107;
        _0 = <std::result::Result<admin::DepositIntoMarketFeePool<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _109) -> [return: bb43, unwind: bb144];
    }

    bb43: {
        StorageDead(_109);
        StorageDead(_107);
        _313 = discriminant(_97);
        StorageDead(_97);
        goto -> bb126;
    }

    bb44: {
        StorageDead(_119);
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_115);
        StorageLive(_120);
        _120 = {closure@programs/drift/src/instructions/admin.rs:5256:10: 5256:18};
        _113 = std::result::Result::<anchor_lang::prelude::Interface<'_, TokenInterface>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5256:10: 5256:18}>(move _114, move _120) -> [return: bb45, unwind: bb134];
    }

    bb45: {
        StorageDead(_120);
        StorageDead(_114);
        _112 = <std::result::Result<anchor_lang::prelude::Interface<'_, TokenInterface>, anchor_lang::error::Error> as Try>::branch(move _113) -> [return: bb46, unwind: bb134];
    }

    bb46: {
        StorageDead(_113);
        _121 = discriminant(_112);
        switchInt(move _121) -> [0: bb47, 1: bb48, otherwise: bb5];
    }

    bb47: {
        StorageLive(_125);
        _125 = move ((_112 as Continue).0: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _111 = move _125;
        StorageDead(_125);
        _309 = discriminant(_112);
        StorageDead(_112);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        _131 = &_6;
        _130 = <Box<anchor_lang::prelude::Account<'_, state::state::State>> as AsRef<anchor_lang::prelude::Account<'_, state::state::State>>>::as_ref(move _131) -> [return: bb50, unwind: bb134];
    }

    bb48: {
        StorageLive(_122);
        _122 = move ((_112 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_124);
        _124 = move _122;
        _0 = <std::result::Result<admin::DepositIntoMarketFeePool<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _124) -> [return: bb49, unwind: bb143];
    }

    bb49: {
        StorageDead(_124);
        StorageDead(_122);
        _311 = discriminant(_112);
        StorageDead(_112);
        goto -> bb125;
    }

    bb50: {
        _129 = &(*_130);
        StorageDead(_131);
        _128 = <anchor_lang::prelude::Account<'_, state::state::State> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _129) -> [return: bb51, unwind: bb134];
    }

    bb51: {
        StorageDead(_129);
        _127 = ((*_128).6: bool);
        switchInt(move _127) -> [0: bb52, otherwise: bb55];
    }

    bb52: {
        StorageDead(_130);
        StorageDead(_128);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        _135 = ConstraintMut;
        _134 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _135) -> [return: bb53, unwind: bb134];
    }

    bb53: {
        StorageDead(_135);
        _133 = anchor_lang::error::Error::with_account_name::<&str>(move _134, const "state") -> [return: bb54, unwind: bb134];
    }

    bb54: {
        StorageDead(_134);
        _0 = std::result::Result::<admin::DepositIntoMarketFeePool<'_>, anchor_lang::error::Error>::Err(move _133);
        StorageDead(_133);
        StorageDead(_127);
        StorageDead(_126);
        goto -> bb125;
    }

    bb55: {
        StorageDead(_130);
        StorageDead(_128);
        _126 = const ();
        StorageDead(_127);
        StorageDead(_126);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _335 = (((_6.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _139 = &(*_335);
        _138 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _139) -> [return: bb56, unwind: bb134];
    }

    bb56: {
        StorageDead(_139);
        _137 = ((*_138).0: anchor_lang::prelude::Pubkey);
        StorageDead(_138);
        StorageLive(_140);
        StorageLive(_141);
        _141 = &_36;
        _140 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _141) -> [return: bb57, unwind: bb134];
    }

    bb57: {
        StorageDead(_141);
        StorageLive(_142);
        StorageLive(_143);
        _143 = &_137;
        StorageLive(_144);
        _144 = &_140;
        _142 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _143, move _144) -> [return: bb58, unwind: bb134];
    }

    bb58: {
        switchInt(move _142) -> [0: bb63, otherwise: bb59];
    }

    bb59: {
        StorageDead(_144);
        StorageDead(_143);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        _149 = ConstraintHasOne;
        _148 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _149) -> [return: bb60, unwind: bb134];
    }

    bb60: {
        StorageDead(_149);
        _147 = anchor_lang::error::Error::with_account_name::<&str>(move _148, const "state") -> [return: bb61, unwind: bb134];
    }

    bb61: {
        StorageDead(_148);
        StorageLive(_150);
        StorageLive(_151);
        _151 = _137;
        StorageLive(_152);
        _152 = _140;
        _150 = (move _151, move _152);
        StorageDead(_152);
        StorageDead(_151);
        _146 = anchor_lang::error::Error::with_pubkeys(move _147, move _150) -> [return: bb62, unwind: bb134];
    }

    bb62: {
        StorageDead(_150);
        StorageDead(_147);
        _0 = std::result::Result::<admin::DepositIntoMarketFeePool<'_>, anchor_lang::error::Error>::Err(move _146);
        StorageDead(_146);
        StorageDead(_142);
        StorageDead(_140);
        StorageDead(_137);
        StorageDead(_136);
        goto -> bb125;
    }

    bb63: {
        StorageDead(_144);
        StorageDead(_143);
        _136 = const ();
        StorageDead(_142);
        StorageDead(_140);
        StorageDead(_137);
        StorageDead(_136);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        _157 = &_21;
        _156 = &(*_157);
        _155 = <anchor_lang::prelude::AccountLoader<'_, PerpMarket> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _156) -> [return: bb64, unwind: bb134];
    }

    bb64: {
        StorageDead(_156);
        _154 = ((*_155).6: bool);
        switchInt(move _154) -> [0: bb65, otherwise: bb68];
    }

    bb65: {
        StorageDead(_157);
        StorageDead(_155);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        _161 = ConstraintMut;
        _160 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _161) -> [return: bb66, unwind: bb134];
    }

    bb66: {
        StorageDead(_161);
        _159 = anchor_lang::error::Error::with_account_name::<&str>(move _160, const "perp_market") -> [return: bb67, unwind: bb134];
    }

    bb67: {
        StorageDead(_160);
        _0 = std::result::Result::<admin::DepositIntoMarketFeePool<'_>, anchor_lang::error::Error>::Err(move _159);
        StorageDead(_159);
        StorageDead(_154);
        StorageDead(_153);
        goto -> bb125;
    }

    bb68: {
        StorageDead(_157);
        StorageDead(_155);
        _153 = const ();
        StorageDead(_154);
        StorageDead(_153);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        _167 = &_51;
        _166 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _167) -> [return: bb69, unwind: bb134];
    }

    bb69: {
        _165 = &(*_166);
        StorageDead(_167);
        _164 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _165) -> [return: bb70, unwind: bb134];
    }

    bb70: {
        StorageDead(_165);
        _163 = ((*_164).6: bool);
        switchInt(move _163) -> [0: bb71, otherwise: bb74];
    }

    bb71: {
        StorageDead(_166);
        StorageDead(_164);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        _171 = ConstraintMut;
        _170 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _171) -> [return: bb72, unwind: bb134];
    }

    bb72: {
        StorageDead(_171);
        _169 = anchor_lang::error::Error::with_account_name::<&str>(move _170, const "source_vault") -> [return: bb73, unwind: bb134];
    }

    bb73: {
        StorageDead(_170);
        _0 = std::result::Result::<admin::DepositIntoMarketFeePool<'_>, anchor_lang::error::Error>::Err(move _169);
        StorageDead(_169);
        StorageDead(_163);
        StorageDead(_162);
        goto -> bb125;
    }

    bb74: {
        StorageDead(_166);
        StorageDead(_164);
        _162 = const ();
        StorageDead(_163);
        StorageDead(_162);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        _336 = (((_51.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _178 = &(*_336);
        _177 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _178) -> [return: bb75, unwind: bb134];
    }

    bb75: {
        _176 = &(*_177);
        _175 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _176) -> [return: bb76, unwind: bb134];
    }

    bb76: {
        StorageDead(_178);
        StorageDead(_176);
        _174 = &((*_175).1: anchor_lang::prelude::Pubkey);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        _181 = &_36;
        _180 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _181) -> [return: bb77, unwind: bb134];
    }

    bb77: {
        _179 = &_180;
        StorageDead(_181);
        _173 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _174, move _179) -> [return: bb78, unwind: bb134];
    }

    bb78: {
        switchInt(move _173) -> [0: bb81, otherwise: bb79];
    }

    bb79: {
        StorageDead(_180);
        StorageDead(_179);
        StorageDead(_177);
        StorageDead(_175);
        StorageDead(_174);
        StorageLive(_183);
        StorageLive(_184);
        _184 = ConstraintTokenOwner;
        _183 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _184) -> [return: bb80, unwind: bb134];
    }

    bb80: {
        StorageDead(_184);
        _0 = std::result::Result::<admin::DepositIntoMarketFeePool<'_>, anchor_lang::error::Error>::Err(move _183);
        StorageDead(_183);
        StorageDead(_173);
        StorageDead(_172);
        goto -> bb125;
    }

    bb81: {
        StorageDead(_180);
        StorageDead(_179);
        StorageDead(_177);
        StorageDead(_175);
        StorageDead(_174);
        _172 = const ();
        StorageDead(_173);
        StorageDead(_172);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        _337 = (((_6.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _189 = &(*_337);
        _188 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _189) -> [return: bb82, unwind: bb134];
    }

    bb82: {
        StorageDead(_189);
        _187 = &((*_188).3: anchor_lang::prelude::Pubkey);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        _193 = &_66;
        _192 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _193) -> [return: bb83, unwind: bb134];
    }

    bb83: {
        StorageDead(_193);
        _191 = &_192;
        _190 = &(*_191);
        _186 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _187, move _190) -> [return: bb84, unwind: bb134];
    }

    bb84: {
        switchInt(move _186) -> [0: bb86, otherwise: bb85];
    }

    bb85: {
        StorageDead(_190);
        StorageDead(_187);
        StorageDead(_192);
        StorageDead(_191);
        StorageDead(_188);
        _185 = const ();
        StorageDead(_186);
        StorageDead(_185);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        _207 = const b"spot_market";
        _206 = &(*_207);
        _205 = move _206 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_206);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        _211 = core::num::<impl u16>::to_le_bytes(const 0_u16) -> [return: bb89, unwind: bb134];
    }

    bb86: {
        StorageDead(_190);
        StorageDead(_187);
        StorageDead(_192);
        StorageDead(_191);
        StorageDead(_188);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        _197 = ConstraintRaw;
        _196 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _197) -> [return: bb87, unwind: bb134];
    }

    bb87: {
        StorageDead(_197);
        _195 = anchor_lang::error::Error::with_account_name::<&str>(move _196, const "drift_signer") -> [return: bb88, unwind: bb134];
    }

    bb88: {
        StorageDead(_196);
        _0 = std::result::Result::<admin::DepositIntoMarketFeePool<'_>, anchor_lang::error::Error>::Err(move _195);
        StorageDead(_195);
        StorageDead(_186);
        StorageDead(_185);
        goto -> bb125;
    }

    bb89: {
        _210 = &_211;
        _209 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _210) -> [return: bb90, unwind: bb134];
    }

    bb90: {
        _208 = &(*_209);
        StorageDead(_210);
        _204 = [move _205, move _208];
        StorageDead(_208);
        StorageDead(_205);
        _203 = &_204;
        _202 = &(*_203);
        _201 = move _202 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_202);
        StorageLive(_212);
        StorageLive(_213);
        _213 = &_1;
        _291 = deref_copy (*_213);
        _212 = &(*_291);
        _200 = anchor_lang::prelude::Pubkey::find_program_address(move _201, move _212) -> [return: bb91, unwind: bb134];
    }

    bb91: {
        StorageDead(_212);
        StorageDead(_201);
        StorageLive(_198);
        _198 = (_200.0: anchor_lang::prelude::Pubkey);
        StorageLive(_199);
        _199 = (_200.1: u8);
        StorageDead(_213);
        StorageDead(_211);
        StorageDead(_209);
        StorageDead(_207);
        StorageDead(_204);
        StorageDead(_203);
        StorageDead(_200);
        StorageLive(_214);
        _214 = _199;
        ((*_4).0: u8) = move _214;
        StorageDead(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        _219 = &_81;
        _218 = <anchor_lang::prelude::AccountLoader<'_, SpotMarket> as anchor_lang::Key>::key(move _219) -> [return: bb92, unwind: bb134];
    }

    bb92: {
        _217 = &_218;
        StorageDead(_219);
        StorageLive(_220);
        _220 = &_198;
        _216 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _217, move _220) -> [return: bb93, unwind: bb134];
    }

    bb93: {
        switchInt(move _216) -> [0: bb99, otherwise: bb94];
    }

    bb94: {
        StorageDead(_220);
        StorageDead(_218);
        StorageDead(_217);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        _225 = ConstraintSeeds;
        _224 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _225) -> [return: bb95, unwind: bb134];
    }

    bb95: {
        StorageDead(_225);
        _223 = anchor_lang::error::Error::with_account_name::<&str>(move _224, const "quote_spot_market") -> [return: bb96, unwind: bb134];
    }

    bb96: {
        _294 = const true;
        StorageDead(_224);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        _228 = &_81;
        _227 = <anchor_lang::prelude::AccountLoader<'_, SpotMarket> as anchor_lang::Key>::key(move _228) -> [return: bb97, unwind: bb142];
    }

    bb97: {
        StorageDead(_228);
        StorageLive(_229);
        _229 = _198;
        _226 = (move _227, move _229);
        StorageDead(_229);
        StorageDead(_227);
        _294 = const false;
        _222 = anchor_lang::error::Error::with_pubkeys(move _223, move _226) -> [return: bb98, unwind: bb142];
    }

    bb98: {
        StorageDead(_226);
        _294 = const false;
        StorageDead(_223);
        _0 = std::result::Result::<admin::DepositIntoMarketFeePool<'_>, anchor_lang::error::Error>::Err(move _222);
        StorageDead(_222);
        StorageDead(_216);
        StorageDead(_215);
        goto -> bb124;
    }

    bb99: {
        StorageDead(_220);
        StorageDead(_218);
        StorageDead(_217);
        _215 = const ();
        StorageDead(_216);
        StorageDead(_215);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        _234 = &_81;
        _233 = &(*_234);
        _232 = <anchor_lang::prelude::AccountLoader<'_, SpotMarket> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _233) -> [return: bb100, unwind: bb134];
    }

    bb100: {
        StorageDead(_233);
        _231 = ((*_232).6: bool);
        switchInt(move _231) -> [0: bb101, otherwise: bb104];
    }

    bb101: {
        StorageDead(_234);
        StorageDead(_232);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        _238 = ConstraintMut;
        _237 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _238) -> [return: bb102, unwind: bb134];
    }

    bb102: {
        StorageDead(_238);
        _236 = anchor_lang::error::Error::with_account_name::<&str>(move _237, const "quote_spot_market") -> [return: bb103, unwind: bb134];
    }

    bb103: {
        StorageDead(_237);
        _0 = std::result::Result::<admin::DepositIntoMarketFeePool<'_>, anchor_lang::error::Error>::Err(move _236);
        StorageDead(_236);
        StorageDead(_231);
        StorageDead(_230);
        goto -> bb124;
    }

    bb104: {
        StorageDead(_234);
        StorageDead(_232);
        _230 = const ();
        StorageDead(_231);
        StorageDead(_230);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        _249 = const b"spot_market_vault";
        _248 = &(*_249);
        _247 = <[u8; 17] as AsRef<[u8]>>::as_ref(move _248) -> [return: bb105, unwind: bb134];
    }

    bb105: {
        _246 = &(*_247);
        StorageDead(_248);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        _253 = core::num::<impl u16>::to_le_bytes(const 0_u16) -> [return: bb106, unwind: bb134];
    }

    bb106: {
        _252 = &_253;
        _251 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _252) -> [return: bb107, unwind: bb134];
    }

    bb107: {
        _250 = &(*_251);
        StorageDead(_252);
        _245 = [move _246, move _250];
        StorageDead(_250);
        StorageDead(_246);
        _244 = &_245;
        _243 = &(*_244);
        _242 = move _243 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_243);
        StorageLive(_254);
        StorageLive(_255);
        _255 = &_1;
        _292 = deref_copy (*_255);
        _254 = &(*_292);
        _241 = anchor_lang::prelude::Pubkey::find_program_address(move _242, move _254) -> [return: bb108, unwind: bb134];
    }

    bb108: {
        StorageDead(_254);
        StorageDead(_242);
        StorageLive(_239);
        _239 = (_241.0: anchor_lang::prelude::Pubkey);
        StorageLive(_240);
        _240 = (_241.1: u8);
        StorageDead(_255);
        StorageDead(_253);
        StorageDead(_251);
        StorageDead(_249);
        StorageDead(_247);
        StorageDead(_245);
        StorageDead(_244);
        StorageDead(_241);
        StorageLive(_256);
        _256 = _240;
        ((*_4).1: u8) = move _256;
        StorageDead(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        _338 = (((_96.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _261 = &(*_338);
        _260 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _261) -> [return: bb109, unwind: bb134];
    }

    bb109: {
        _259 = &_260;
        StorageDead(_261);
        StorageLive(_262);
        _262 = &_239;
        _258 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _259, move _262) -> [return: bb110, unwind: bb134];
    }

    bb110: {
        switchInt(move _258) -> [0: bb116, otherwise: bb111];
    }

    bb111: {
        StorageDead(_262);
        StorageDead(_260);
        StorageDead(_259);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        _267 = ConstraintSeeds;
        _266 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _267) -> [return: bb112, unwind: bb134];
    }

    bb112: {
        StorageDead(_267);
        _265 = anchor_lang::error::Error::with_account_name::<&str>(move _266, const "spot_market_vault") -> [return: bb113, unwind: bb134];
    }

    bb113: {
        _293 = const true;
        StorageDead(_266);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        _339 = (((_96.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _270 = &(*_339);
        _269 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _270) -> [return: bb114, unwind: bb140];
    }

    bb114: {
        StorageDead(_270);
        StorageLive(_271);
        _271 = _239;
        _268 = (move _269, move _271);
        StorageDead(_271);
        StorageDead(_269);
        _293 = const false;
        _264 = anchor_lang::error::Error::with_pubkeys(move _265, move _268) -> [return: bb115, unwind: bb140];
    }

    bb115: {
        StorageDead(_268);
        _293 = const false;
        StorageDead(_265);
        _0 = std::result::Result::<admin::DepositIntoMarketFeePool<'_>, anchor_lang::error::Error>::Err(move _264);
        StorageDead(_264);
        StorageDead(_258);
        StorageDead(_257);
        goto -> bb123;
    }

    bb116: {
        StorageDead(_262);
        StorageDead(_260);
        StorageDead(_259);
        _257 = const ();
        StorageDead(_258);
        StorageDead(_257);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        _277 = &_96;
        _276 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _277) -> [return: bb117, unwind: bb134];
    }

    bb117: {
        _275 = &(*_276);
        StorageDead(_277);
        _274 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _275) -> [return: bb118, unwind: bb134];
    }

    bb118: {
        StorageDead(_275);
        _273 = ((*_274).6: bool);
        switchInt(move _273) -> [0: bb119, otherwise: bb122];
    }

    bb119: {
        StorageDead(_276);
        StorageDead(_274);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        _281 = ConstraintMut;
        _280 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _281) -> [return: bb120, unwind: bb134];
    }

    bb120: {
        StorageDead(_281);
        _279 = anchor_lang::error::Error::with_account_name::<&str>(move _280, const "spot_market_vault") -> [return: bb121, unwind: bb134];
    }

    bb121: {
        StorageDead(_280);
        _0 = std::result::Result::<admin::DepositIntoMarketFeePool<'_>, anchor_lang::error::Error>::Err(move _279);
        StorageDead(_279);
        StorageDead(_273);
        StorageDead(_272);
        goto -> bb123;
    }

    bb122: {
        StorageDead(_276);
        StorageDead(_274);
        _272 = const ();
        StorageDead(_273);
        StorageDead(_272);
        StorageLive(_282);
        StorageLive(_283);
        _283 = move _6;
        StorageLive(_284);
        _284 = move _21;
        StorageLive(_285);
        _285 = move _36;
        StorageLive(_286);
        _286 = move _51;
        StorageLive(_287);
        _287 = move _66;
        StorageLive(_288);
        _288 = move _81;
        StorageLive(_289);
        _289 = move _96;
        StorageLive(_290);
        _290 = move _111;
        _282 = admin::DepositIntoMarketFeePool::<'_> { state: move _283, perp_market: move _284, admin: move _285, source_vault: move _286, drift_signer: move _287, quote_spot_market: move _288, spot_market_vault: move _289, token_program: move _290 };
        StorageDead(_290);
        StorageDead(_289);
        StorageDead(_288);
        StorageDead(_287);
        StorageDead(_286);
        StorageDead(_285);
        StorageDead(_284);
        StorageDead(_283);
        _0 = std::result::Result::<admin::DepositIntoMarketFeePool<'_>, anchor_lang::error::Error>::Ok(move _282);
        StorageDead(_282);
        StorageDead(_240);
        StorageDead(_239);
        StorageDead(_199);
        StorageDead(_198);
        StorageDead(_111);
        StorageDead(_96);
        StorageDead(_81);
        StorageDead(_66);
        StorageDead(_51);
        StorageDead(_36);
        StorageDead(_21);
        StorageDead(_6);
        goto -> bb133;
    }

    bb123: {
        StorageDead(_240);
        StorageDead(_239);
        goto -> bb124;
    }

    bb124: {
        StorageDead(_199);
        StorageDead(_198);
        goto -> bb125;
    }

    bb125: {
        StorageDead(_111);
        drop(_96) -> [return: bb126, unwind: bb135];
    }

    bb126: {
        StorageDead(_96);
        goto -> bb127;
    }

    bb127: {
        StorageDead(_81);
        drop(_66) -> [return: bb128, unwind: bb136];
    }

    bb128: {
        StorageDead(_66);
        drop(_51) -> [return: bb129, unwind: bb137];
    }

    bb129: {
        StorageDead(_51);
        goto -> bb130;
    }

    bb130: {
        StorageDead(_36);
        goto -> bb131;
    }

    bb131: {
        StorageDead(_21);
        drop(_6) -> [return: bb132, unwind: bb138];
    }

    bb132: {
        StorageDead(_6);
        goto -> bb133;
    }

    bb133: {
        return;
    }

    bb134 (cleanup): {
        drop(_96) -> [return: bb135, unwind terminate(cleanup)];
    }

    bb135 (cleanup): {
        drop(_66) -> [return: bb136, unwind terminate(cleanup)];
    }

    bb136 (cleanup): {
        drop(_51) -> [return: bb137, unwind terminate(cleanup)];
    }

    bb137 (cleanup): {
        drop(_6) -> [return: bb138, unwind terminate(cleanup)];
    }

    bb138 (cleanup): {
        resume;
    }

    bb139 (cleanup): {
        drop(_265) -> [return: bb134, unwind terminate(cleanup)];
    }

    bb140 (cleanup): {
        switchInt(_293) -> [0: bb134, otherwise: bb139];
    }

    bb141 (cleanup): {
        drop(_223) -> [return: bb134, unwind terminate(cleanup)];
    }

    bb142 (cleanup): {
        switchInt(_294) -> [0: bb134, otherwise: bb141];
    }

    bb143 (cleanup): {
        _327 = discriminant(_112);
        goto -> bb134;
    }

    bb144 (cleanup): {
        _328 = discriminant(_97);
        goto -> bb135;
    }

    bb145 (cleanup): {
        _329 = discriminant(_82);
        goto -> bb135;
    }

    bb146 (cleanup): {
        _330 = discriminant(_67);
        goto -> bb136;
    }

    bb147 (cleanup): {
        _331 = discriminant(_52);
        goto -> bb137;
    }

    bb148 (cleanup): {
        _332 = discriminant(_37);
        goto -> bb137;
    }

    bb149 (cleanup): {
        _333 = discriminant(_22);
        goto -> bb137;
    }

    bb150 (cleanup): {
        _334 = discriminant(_7);
        goto -> bb138;
    }
}

alloc213 (size: 17, align: 1) {
    0x00 │ 73 70 6f 74 5f 6d 61 72 6b 65 74 5f 76 61 75 6c │ spot_market_vaul
    0x10 │ 74                                              │ t
}

alloc212 (size: 11, align: 1) {
    73 70 6f 74 5f 6d 61 72 6b 65 74                │ spot_market
}
