// MIR for `instructions::user::handle_initialize_referrer_name` before PreCodegen

fn instructions::user::handle_initialize_referrer_name(_1: anchor_lang::context::Context<'_, '_, '_, '_, instructions::user::InitializeReferrerName<'_>>, _2: [u8; 32]) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug name => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: anchor_lang::prelude::Pubkey;
    let mut _4: &anchor_lang::prelude::Signer<'_>;
    let mut _6: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _8: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::ReferrerName>>;
    let mut _11: std::result::Result<std::cell::RefMut<'_, state::user::ReferrerName>, error::ErrorCode>;
    let mut _12: std::result::Result<std::cell::RefMut<'_, state::user::ReferrerName>, anchor_lang::error::Error>;
    let mut _13: &anchor_lang::prelude::AccountLoader<'_, state::user::ReferrerName>;
    let mut _14: std::result::Result<std::cell::RefMut<'_, state::user::ReferrerName>, error::ErrorCode>;
    let mut _15: error::ErrorCode;
    let mut _16: isize;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::user::User>>;
    let mut _23: std::result::Result<std::cell::Ref<'_, state::user::User>, error::ErrorCode>;
    let mut _24: std::result::Result<std::cell::Ref<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _25: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _26: {closure@programs/drift/src/macros.rs:70:40: 70:43};
    let mut _27: isize;
    let mut _29: !;
    let mut _30: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _32: ();
    let mut _33: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _34: std::result::Result<(), error::ErrorCode>;
    let mut _35: bool;
    let mut _36: u16;
    let mut _37: &state::user::User;
    let mut _38: &std::cell::Ref<'_, state::user::User>;
    let mut _39: ();
    let _41: ();
    let mut _42: &str;
    let _43: &str;
    let mut _44: &std::string::String;
    let _45: &std::string::String;
    let _46: std::string::String;
    let mut _48: std::fmt::Arguments<'_>;
    let mut _49: &[&str];
    let mut _50: &[&str; 2];
    let _51: &[&str; 2];
    let _52: [&str; 2];
    let mut _53: &[core::fmt::rt::Argument<'_>];
    let mut _54: &[core::fmt::rt::Argument<'_>; 1];
    let _55: &[core::fmt::rt::Argument<'_>; 1];
    let _56: [core::fmt::rt::Argument<'_>; 1];
    let mut _57: core::fmt::rt::Argument<'_>;
    let mut _58: &error::ErrorCode;
    let _59: &error::ErrorCode;
    let _60: ();
    let mut _61: &str;
    let _62: &str;
    let mut _63: error::ErrorCode;
    let mut _64: isize;
    let mut _66: !;
    let mut _67: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _69: ();
    let mut _70: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _71: std::result::Result<(), error::ErrorCode>;
    let mut _72: bool;
    let mut _73: u8;
    let mut _74: &state::user::User;
    let mut _75: &std::cell::Ref<'_, state::user::User>;
    let mut _76: ();
    let _78: ();
    let mut _79: &str;
    let _80: &str;
    let mut _81: &std::string::String;
    let _82: &std::string::String;
    let _83: std::string::String;
    let mut _85: std::fmt::Arguments<'_>;
    let mut _86: &[&str];
    let mut _87: &[&str; 2];
    let _88: &[&str; 2];
    let _89: [&str; 2];
    let mut _90: &[core::fmt::rt::Argument<'_>];
    let mut _91: &[core::fmt::rt::Argument<'_>; 1];
    let _92: &[core::fmt::rt::Argument<'_>; 1];
    let _93: [core::fmt::rt::Argument<'_>; 1];
    let mut _94: core::fmt::rt::Argument<'_>;
    let mut _95: &error::ErrorCode;
    let _96: &error::ErrorCode;
    let _97: ();
    let mut _98: &str;
    let _99: &str;
    let mut _100: error::ErrorCode;
    let mut _101: isize;
    let mut _103: !;
    let mut _104: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _106: anchor_lang::prelude::Pubkey;
    let mut _107: &mut state::user::ReferrerName;
    let mut _108: &mut std::cell::RefMut<'_, state::user::ReferrerName>;
    let mut _109: anchor_lang::prelude::Pubkey;
    let mut _110: &mut state::user::ReferrerName;
    let mut _111: &mut std::cell::RefMut<'_, state::user::ReferrerName>;
    let mut _112: anchor_lang::prelude::Pubkey;
    let mut _113: &mut state::user::ReferrerName;
    let mut _114: &mut std::cell::RefMut<'_, state::user::ReferrerName>;
    let mut _115: [u8; 32];
    let mut _116: &mut state::user::ReferrerName;
    let mut _117: &mut std::cell::RefMut<'_, state::user::ReferrerName>;
    let mut _118: ();
    let mut _121: &mut instructions::user::InitializeReferrerName<'_>;
    let mut _122: &mut instructions::user::InitializeReferrerName<'_>;
    let mut _123: &mut instructions::user::InitializeReferrerName<'_>;
    let mut _124: &mut instructions::user::InitializeReferrerName<'_>;
    let mut _125: &mut instructions::user::InitializeReferrerName<'_>;
    let mut _126: isize;
    let mut _127: isize;
    let mut _128: isize;
    let mut _129: isize;
    let mut _130: isize;
    let mut _131: isize;
    let mut _132: isize;
    let mut _133: isize;
    let mut _134: isize;
    let mut _135: isize;
    scope 1 {
        debug authority_key => _3;
        let _5: anchor_lang::prelude::Pubkey;
        scope 2 {
            debug user_stats_key => _5;
            let _7: anchor_lang::prelude::Pubkey;
            scope 3 {
                debug user_key => _7;
                let mut _9: std::cell::RefMut<'_, state::user::ReferrerName>;
                let _17: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _20: std::cell::RefMut<'_, state::user::ReferrerName>;
                scope 4 {
                    debug referrer_name => _9;
                    let _21: std::cell::Ref<'_, state::user::User>;
                    let _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _31: std::cell::Ref<'_, state::user::User>;
                    scope 9 {
                        debug user => _21;
                        let _40: error::ErrorCode;
                        let _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _68: ();
                        let _77: error::ErrorCode;
                        let _102: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _105: ();
                        scope 14 {
                            debug error_code => _40;
                            let _47: std::string::String;
                            let mut _120: &[&str; 2];
                            scope 15 {
                                debug res => _47;
                            }
                        }
                        scope 16 {
                            debug residual => _65;
                            scope 17 {
                            }
                        }
                        scope 18 {
                            debug val => _68;
                            scope 19 {
                            }
                        }
                        scope 20 {
                            debug error_code => _77;
                            let _84: std::string::String;
                            let mut _119: &[&str; 2];
                            scope 21 {
                                debug res => _84;
                            }
                        }
                        scope 22 {
                            debug residual => _102;
                            scope 23 {
                            }
                        }
                        scope 24 {
                            debug val => _105;
                            scope 25 {
                            }
                        }
                    }
                    scope 10 {
                        debug residual => _28;
                        scope 11 {
                        }
                    }
                    scope 12 {
                        debug val => _31;
                        scope 13 {
                        }
                    }
                }
                scope 5 {
                    debug residual => _17;
                    scope 6 {
                    }
                }
                scope 7 {
                    debug val => _20;
                    scope 8 {
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _121 = deref_copy (_1.1: &mut instructions::user::InitializeReferrerName<'_>);
        _4 = &((*_121).3: anchor_lang::prelude::Signer<'_>);
        _3 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_4);
        StorageLive(_5);
        StorageLive(_6);
        _122 = deref_copy (_1.1: &mut instructions::user::InitializeReferrerName<'_>);
        _6 = &((*_122).2: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _5 = <anchor_lang::prelude::AccountLoader<'_, UserStats> as anchor_lang::Key>::key(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        StorageLive(_7);
        StorageLive(_8);
        _123 = deref_copy (_1.1: &mut instructions::user::InitializeReferrerName<'_>);
        _8 = &((*_123).1: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _7 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _8) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _124 = deref_copy (_1.1: &mut instructions::user::InitializeReferrerName<'_>);
        _13 = &((*_124).0: anchor_lang::prelude::AccountLoader<'_, state::user::ReferrerName>);
        _12 = anchor_lang::prelude::AccountLoader::<'_, ReferrerName>::load_init(move _13) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = error::ErrorCode::UnableToLoadAccountLoader;
        _14 = std::result::Result::<RefMut<'_, ReferrerName>, error::ErrorCode>::Err(move _15);
        StorageDead(_15);
        _11 = std::result::Result::<RefMut<'_, ReferrerName>, anchor_lang::error::Error>::or::<error::ErrorCode>(move _12, move _14) -> [return: bb5, unwind: bb61];
    }

    bb5: {
        StorageDead(_14);
        StorageDead(_12);
        _10 = <std::result::Result<RefMut<'_, ReferrerName>, error::ErrorCode> as Try>::branch(move _11) -> [return: bb6, unwind: bb61];
    }

    bb6: {
        StorageDead(_11);
        _16 = discriminant(_10);
        switchInt(move _16) -> [0: bb7, 1: bb9, otherwise: bb8];
    }

    bb7: {
        StorageLive(_20);
        _20 = move ((_10 as Continue).0: std::cell::RefMut<'_, state::user::ReferrerName>);
        _9 = move _20;
        StorageDead(_20);
        _128 = discriminant(_10);
        StorageDead(_10);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _125 = deref_copy (_1.1: &mut instructions::user::InitializeReferrerName<'_>);
        _25 = &((*_125).1: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _24 = anchor_lang::prelude::AccountLoader::<'_, User>::load(move _25) -> [return: bb11, unwind: bb60];
    }

    bb8: {
        unreachable;
    }

    bb9: {
        StorageLive(_17);
        _17 = ((_10 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_19);
        _19 = _17;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _19) -> [return: bb10, unwind: bb63];
    }

    bb10: {
        StorageDead(_19);
        StorageDead(_17);
        _126 = discriminant(_10);
        StorageDead(_10);
        goto -> bb55;
    }

    bb11: {
        StorageDead(_25);
        StorageLive(_26);
        _26 = {closure@programs/drift/src/macros.rs:70:40: 70:43};
        _23 = std::result::Result::<Ref<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:70:40: 70:43}>(move _24, move _26) -> [return: bb12, unwind: bb60];
    }

    bb12: {
        StorageDead(_26);
        StorageDead(_24);
        _22 = <std::result::Result<Ref<'_, User>, error::ErrorCode> as Try>::branch(move _23) -> [return: bb13, unwind: bb60];
    }

    bb13: {
        StorageDead(_23);
        _27 = discriminant(_22);
        switchInt(move _27) -> [0: bb14, 1: bb15, otherwise: bb8];
    }

    bb14: {
        StorageLive(_31);
        _31 = move ((_22 as Continue).0: std::cell::Ref<'_, state::user::User>);
        _21 = move _31;
        StorageDead(_31);
        _132 = discriminant(_22);
        StorageDead(_22);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = &_21;
        _37 = <Ref<'_, User> as Deref>::deref(move _38) -> [return: bb17, unwind: bb59];
    }

    bb15: {
        StorageLive(_28);
        _28 = ((_22 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_30);
        _30 = _28;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _30) -> [return: bb16, unwind: bb62];
    }

    bb16: {
        StorageDead(_30);
        StorageDead(_28);
        _130 = discriminant(_22);
        StorageDead(_22);
        goto -> bb54;
    }

    bb17: {
        StorageDead(_38);
        _36 = ((*_37).18: u16);
        _35 = Eq(move _36, const 0_u16);
        switchInt(move _35) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        StorageDead(_37);
        StorageDead(_36);
        StorageLive(_39);
        _39 = ();
        _34 = std::result::Result::<(), error::ErrorCode>::Ok(move _39);
        StorageDead(_39);
        goto -> bb27;
    }

    bb19: {
        StorageDead(_37);
        StorageDead(_36);
        StorageLive(_40);
        _40 = error::ErrorCode::InvalidReferrer;
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _120 = const _;
        _51 = &(*_120);
        _50 = &(*_51);
        _49 = move _50 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_50);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _59 = &_40;
        _58 = &(*_59);
        _57 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _58) -> [return: bb20, unwind: bb59];
    }

    bb20: {
        StorageDead(_58);
        _56 = [move _57];
        StorageDead(_57);
        _55 = &_56;
        _54 = &(*_55);
        _53 = move _54 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_54);
        _48 = Arguments::<'_>::new_v1(move _49, move _53) -> [return: bb21, unwind: bb59];
    }

    bb21: {
        StorageDead(_53);
        StorageDead(_49);
        _47 = format(move _48) -> [return: bb22, unwind: bb59];
    }

    bb22: {
        StorageDead(_48);
        StorageDead(_59);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_51);
        _46 = move _47;
        StorageDead(_47);
        _45 = &_46;
        _44 = &(*_45);
        _43 = <String as Deref>::deref(move _44) -> [return: bb23, unwind: bb58];
    }

    bb23: {
        _42 = &(*_43);
        StorageDead(_44);
        _41 = solana_program::log::sol_log(move _42) -> [return: bb24, unwind: bb58];
    }

    bb24: {
        StorageDead(_42);
        drop(_46) -> [return: bb25, unwind: bb59];
    }

    bb25: {
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_43);
        StorageDead(_41);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = const "must be subaccount 0";
        _61 = &(*_62);
        _60 = solana_program::log::sol_log(move _61) -> [return: bb26, unwind: bb59];
    }

    bb26: {
        StorageDead(_61);
        StorageDead(_62);
        StorageDead(_60);
        StorageLive(_63);
        _63 = _40;
        _34 = std::result::Result::<(), error::ErrorCode>::Err(move _63);
        StorageDead(_63);
        StorageDead(_40);
        goto -> bb27;
    }

    bb27: {
        StorageDead(_35);
        _33 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _34) -> [return: bb28, unwind: bb59];
    }

    bb28: {
        StorageDead(_34);
        _64 = discriminant(_33);
        switchInt(move _64) -> [0: bb29, 1: bb30, otherwise: bb8];
    }

    bb29: {
        StorageLive(_68);
        _68 = ((_33 as Continue).0: ());
        _32 = _68;
        StorageDead(_68);
        StorageDead(_33);
        StorageDead(_32);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = &_21;
        _74 = <Ref<'_, User> as Deref>::deref(move _75) -> [return: bb32, unwind: bb59];
    }

    bb30: {
        StorageLive(_65);
        _65 = ((_33 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_67);
        _67 = _65;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _67) -> [return: bb31, unwind: bb59];
    }

    bb31: {
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_33);
        StorageDead(_32);
        goto -> bb53;
    }

    bb32: {
        StorageDead(_75);
        _73 = ((*_74).27: u8);
        _72 = Eq(move _73, const 0_u8);
        switchInt(move _72) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        StorageDead(_74);
        StorageDead(_73);
        StorageLive(_76);
        _76 = ();
        _71 = std::result::Result::<(), error::ErrorCode>::Ok(move _76);
        StorageDead(_76);
        goto -> bb42;
    }

    bb34: {
        StorageDead(_74);
        StorageDead(_73);
        StorageLive(_77);
        _77 = error::ErrorCode::InvalidReferrer;
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _119 = const _;
        _88 = &(*_119);
        _87 = &(*_88);
        _86 = move _87 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_87);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = &_77;
        _95 = &(*_96);
        _94 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _95) -> [return: bb35, unwind: bb59];
    }

    bb35: {
        StorageDead(_95);
        _93 = [move _94];
        StorageDead(_94);
        _92 = &_93;
        _91 = &(*_92);
        _90 = move _91 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_91);
        _85 = Arguments::<'_>::new_v1(move _86, move _90) -> [return: bb36, unwind: bb59];
    }

    bb36: {
        StorageDead(_90);
        StorageDead(_86);
        _84 = format(move _85) -> [return: bb37, unwind: bb59];
    }

    bb37: {
        StorageDead(_85);
        StorageDead(_96);
        StorageDead(_93);
        StorageDead(_92);
        StorageDead(_88);
        _83 = move _84;
        StorageDead(_84);
        _82 = &_83;
        _81 = &(*_82);
        _80 = <String as Deref>::deref(move _81) -> [return: bb38, unwind: bb57];
    }

    bb38: {
        _79 = &(*_80);
        StorageDead(_81);
        _78 = solana_program::log::sol_log(move _79) -> [return: bb39, unwind: bb57];
    }

    bb39: {
        StorageDead(_79);
        drop(_83) -> [return: bb40, unwind: bb59];
    }

    bb40: {
        StorageDead(_83);
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_78);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = const "must be pool_id 0";
        _98 = &(*_99);
        _97 = solana_program::log::sol_log(move _98) -> [return: bb41, unwind: bb59];
    }

    bb41: {
        StorageDead(_98);
        StorageDead(_99);
        StorageDead(_97);
        StorageLive(_100);
        _100 = _77;
        _71 = std::result::Result::<(), error::ErrorCode>::Err(move _100);
        StorageDead(_100);
        StorageDead(_77);
        goto -> bb42;
    }

    bb42: {
        StorageDead(_72);
        _70 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _71) -> [return: bb43, unwind: bb59];
    }

    bb43: {
        StorageDead(_71);
        _101 = discriminant(_70);
        switchInt(move _101) -> [0: bb44, 1: bb45, otherwise: bb8];
    }

    bb44: {
        StorageLive(_105);
        _105 = ((_70 as Continue).0: ());
        _69 = _105;
        StorageDead(_105);
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_106);
        _106 = _3;
        StorageLive(_107);
        StorageLive(_108);
        _108 = &mut _9;
        _107 = <RefMut<'_, ReferrerName> as DerefMut>::deref_mut(move _108) -> [return: bb47, unwind: bb59];
    }

    bb45: {
        StorageLive(_102);
        _102 = ((_70 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_104);
        _104 = _102;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _104) -> [return: bb46, unwind: bb59];
    }

    bb46: {
        StorageDead(_104);
        StorageDead(_102);
        StorageDead(_70);
        StorageDead(_69);
        goto -> bb53;
    }

    bb47: {
        StorageDead(_108);
        ((*_107).0: anchor_lang::prelude::Pubkey) = move _106;
        StorageDead(_106);
        StorageDead(_107);
        StorageLive(_109);
        _109 = _7;
        StorageLive(_110);
        StorageLive(_111);
        _111 = &mut _9;
        _110 = <RefMut<'_, ReferrerName> as DerefMut>::deref_mut(move _111) -> [return: bb48, unwind: bb59];
    }

    bb48: {
        StorageDead(_111);
        ((*_110).1: anchor_lang::prelude::Pubkey) = move _109;
        StorageDead(_109);
        StorageDead(_110);
        StorageLive(_112);
        _112 = _5;
        StorageLive(_113);
        StorageLive(_114);
        _114 = &mut _9;
        _113 = <RefMut<'_, ReferrerName> as DerefMut>::deref_mut(move _114) -> [return: bb49, unwind: bb59];
    }

    bb49: {
        StorageDead(_114);
        ((*_113).2: anchor_lang::prelude::Pubkey) = move _112;
        StorageDead(_112);
        StorageDead(_113);
        StorageLive(_115);
        _115 = _2;
        StorageLive(_116);
        StorageLive(_117);
        _117 = &mut _9;
        _116 = <RefMut<'_, ReferrerName> as DerefMut>::deref_mut(move _117) -> [return: bb50, unwind: bb59];
    }

    bb50: {
        StorageDead(_117);
        ((*_116).3: [u8; 32]) = move _115;
        StorageDead(_115);
        StorageDead(_116);
        StorageLive(_118);
        _118 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _118);
        StorageDead(_118);
        drop(_21) -> [return: bb51, unwind: bb60];
    }

    bb51: {
        StorageDead(_21);
        drop(_9) -> [return: bb52, unwind: bb61];
    }

    bb52: {
        StorageDead(_9);
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_3);
        goto -> bb56;
    }

    bb53: {
        drop(_21) -> [return: bb54, unwind: bb60];
    }

    bb54: {
        StorageDead(_21);
        drop(_9) -> [return: bb55, unwind: bb61];
    }

    bb55: {
        StorageDead(_9);
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_3);
        goto -> bb56;
    }

    bb56: {
        return;
    }

    bb57 (cleanup): {
        drop(_83) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_46) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_21) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_9) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        resume;
    }

    bb62 (cleanup): {
        _134 = discriminant(_22);
        goto -> bb60;
    }

    bb63 (cleanup): {
        _135 = discriminant(_10);
        goto -> bb61;
    }
}
