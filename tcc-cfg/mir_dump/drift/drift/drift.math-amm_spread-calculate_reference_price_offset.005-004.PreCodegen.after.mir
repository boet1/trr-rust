// MIR for `calculate_reference_price_offset` after PreCodegen

fn calculate_reference_price_offset(_1: u64, _2: i64, _3: i128, _4: u64, _5: i64, _6: u64, _7: i64, _8: u64, _9: i64) -> std::result::Result<i32, error::ErrorCode> {
    debug reserve_price => _1;
    debug last_24h_avg_funding_rate => _2;
    debug liquidity_fraction => _3;
    debug _min_order_size => _4;
    debug oracle_twap_fast => _5;
    debug mark_twap_fast => _6;
    debug oracle_twap_slow => _7;
    debug mark_twap_slow => _8;
    debug max_offset_pct => _9;
    let mut _0: std::result::Result<i32, error::ErrorCode>;
    let _10: ();
    let mut _11: bool;
    let mut _12: i64;
    let mut _13: !;
    let _14: i64;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _16: std::result::Result<i64, error::ErrorCode>;
    let mut _17: i64;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _19: std::result::Result<i64, error::ErrorCode>;
    let mut _20: i64;
    let mut _21: i64;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _23: std::result::Result<i64, error::ErrorCode>;
    let mut _24: u64;
    let mut _25: isize;
    let _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _27: !;
    let mut _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _29: i64;
    let mut _30: isize;
    let _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _34: i64;
    let mut _35: i64;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _37: std::result::Result<i64, error::ErrorCode>;
    let mut _38: isize;
    let _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _40: !;
    let mut _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _42: i64;
    let mut _43: isize;
    let _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _47: i64;
    let mut _49: i64;
    let mut _50: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _51: std::result::Result<i64, error::ErrorCode>;
    let mut _52: i64;
    let mut _53: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _54: std::result::Result<i64, error::ErrorCode>;
    let mut _55: u64;
    let mut _56: isize;
    let mut _58: !;
    let mut _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _61: i64;
    let mut _62: isize;
    let mut _64: !;
    let mut _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _67: i64;
    let mut _68: i64;
    let mut _69: bool;
    let mut _70: i64;
    let mut _72: i64;
    let mut _73: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _74: std::result::Result<i64, error::ErrorCode>;
    let mut _75: i64;
    let mut _76: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _77: std::result::Result<i64, error::ErrorCode>;
    let mut _78: u64;
    let mut _79: isize;
    let mut _81: !;
    let mut _82: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _84: i64;
    let mut _85: isize;
    let mut _87: !;
    let mut _88: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _90: i64;
    let mut _91: i64;
    let mut _92: bool;
    let mut _93: i64;
    let mut _95: i64;
    let mut _96: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _97: std::result::Result<i64, error::ErrorCode>;
    let mut _98: i64;
    let mut _99: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _100: std::result::Result<i64, error::ErrorCode>;
    let mut _101: i64;
    let mut _102: i64;
    let mut _103: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _104: std::result::Result<i64, error::ErrorCode>;
    let mut _105: isize;
    let mut _107: !;
    let mut _108: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _110: isize;
    let mut _112: !;
    let mut _113: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _115: isize;
    let mut _117: !;
    let mut _118: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _120: i64;
    let mut _121: i64;
    let mut _122: bool;
    let mut _123: i64;
    let mut _125: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _126: std::result::Result<i64, error::ErrorCode>;
    let mut _127: i64;
    let mut _128: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _129: std::result::Result<i64, error::ErrorCode>;
    let mut _130: i64;
    let mut _131: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _132: std::result::Result<i64, error::ErrorCode>;
    let mut _133: i64;
    let mut _134: i64;
    let mut _135: isize;
    let mut _137: !;
    let mut _138: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _140: i64;
    let mut _141: isize;
    let mut _143: !;
    let mut _144: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _146: isize;
    let mut _148: !;
    let mut _149: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _152: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _153: std::result::Result<i64, error::ErrorCode>;
    let mut _154: i64;
    let mut _155: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _156: std::result::Result<i64, error::ErrorCode>;
    let mut _157: i64;
    let mut _158: isize;
    let mut _160: !;
    let mut _161: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _163: i64;
    let mut _164: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _165: std::result::Result<i64, error::ErrorCode>;
    let mut _166: u64;
    let mut _167: isize;
    let mut _169: !;
    let mut _170: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _172: isize;
    let mut _174: !;
    let mut _175: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _178: i64;
    let mut _179: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _180: std::result::Result<i64, error::ErrorCode>;
    let mut _181: i64;
    let mut _182: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _183: std::result::Result<i64, error::ErrorCode>;
    let mut _184: i64;
    let mut _185: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _186: std::result::Result<i64, error::ErrorCode>;
    let mut _187: i128;
    let mut _188: isize;
    let mut _190: !;
    let mut _191: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _193: i64;
    let mut _194: isize;
    let mut _196: !;
    let mut _197: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _199: i64;
    let mut _200: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _201: std::result::Result<i64, error::ErrorCode>;
    let mut _202: isize;
    let mut _204: !;
    let mut _205: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _207: isize;
    let mut _209: !;
    let mut _210: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _212: i64;
    let mut _213: i64;
    let mut _214: bool;
    let mut _215: i64;
    let mut _217: bool;
    let mut _218: i64;
    let mut _219: bool;
    let mut _220: i64;
    let mut _221: bool;
    let mut _222: i64;
    let mut _223: bool;
    let mut _224: i64;
    let mut _225: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _226: std::result::Result<i64, error::ErrorCode>;
    let mut _227: i64;
    let mut _228: i64;
    let mut _229: isize;
    let mut _231: !;
    let mut _232: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _235: i64;
    let mut _236: i64;
    let mut _237: i64;
    let mut _238: bool;
    let mut _239: i64;
    let _240: ();
    let mut _241: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _242: std::result::Result<(), error::ErrorCode>;
    let mut _243: bool;
    let mut _244: i64;
    let mut _245: i64;
    let mut _246: i64;
    let mut _247: ();
    let _249: ();
    let mut _250: &str;
    let _251: &str;
    let mut _252: &std::string::String;
    let _253: &std::string::String;
    let _254: std::string::String;
    let mut _256: std::fmt::Arguments<'_>;
    let mut _257: &[&str];
    let mut _258: &[&str; 2];
    let _259: &[&str; 2];
    let _260: [&str; 2];
    let mut _261: &[core::fmt::rt::Argument<'_>];
    let mut _262: &[core::fmt::rt::Argument<'_>; 1];
    let _263: &[core::fmt::rt::Argument<'_>; 1];
    let _264: [core::fmt::rt::Argument<'_>; 1];
    let mut _265: core::fmt::rt::Argument<'_>;
    let mut _266: &error::ErrorCode;
    let _267: &error::ErrorCode;
    let _268: ();
    let mut _269: &str;
    let _270: &str;
    let mut _271: &std::string::String;
    let _272: &std::string::String;
    let _273: std::string::String;
    let mut _275: std::fmt::Arguments<'_>;
    let mut _276: &[&str];
    let mut _277: &[&str; 1];
    let _278: &[&str; 1];
    let _279: [&str; 1];
    let mut _280: &[core::fmt::rt::Argument<'_>];
    let mut _281: &[core::fmt::rt::Argument<'_>; 1];
    let _282: &[core::fmt::rt::Argument<'_>; 1];
    let _283: [core::fmt::rt::Argument<'_>; 1];
    let mut _284: core::fmt::rt::Argument<'_>;
    let mut _285: &i64;
    let _286: &i64;
    let mut _287: error::ErrorCode;
    let mut _288: isize;
    let mut _290: !;
    let mut _291: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _293: i64;
    scope 1 {
        debug max_offset_in_price => _14;
        let _48: i64;
        let _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _60: i64;
        let _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _66: i64;
        scope 18 {
            debug mark_premium_minute => _48;
            let _71: i64;
            let _80: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _83: i64;
            let _86: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _89: i64;
            scope 27 {
                debug mark_premium_hour => _71;
                let _94: i64;
                let _106: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _109: i64;
                let _111: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _114: i64;
                let _116: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _119: i64;
                scope 36 {
                    debug mark_premium_day => _94;
                    let _124: i64;
                    let _136: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _139: i64;
                    let _142: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _145: i64;
                    let _147: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _150: i64;
                    scope 49 {
                        debug mark_premium_avg => _124;
                        let _151: i64;
                        let _159: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _162: i64;
                        let _168: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _171: i64;
                        let _173: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _176: i64;
                        scope 62 {
                            debug mark_premium_avg_pct => _151;
                            let _177: i64;
                            let _189: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _192: i64;
                            let _195: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _198: i64;
                            let _203: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _206: i64;
                            let _208: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _211: i64;
                            scope 75 {
                                debug inventory_pct => _177;
                                let _216: i64;
                                let _230: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _233: i64;
                                scope 92 {
                                    debug offset_pct => _216;
                                    let _234: i64;
                                    scope 97 {
                                        debug clamped_offset_pct => _234;
                                        let _248: error::ErrorCode;
                                        let _289: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _292: ();
                                        scope 98 {
                                            debug error_code => _248;
                                            let _255: std::string::String;
                                            let _274: std::string::String;
                                            let mut _294: &[&str; 1];
                                            let mut _295: &[&str; 2];
                                            scope 99 {
                                                debug res => _255;
                                            }
                                            scope 100 {
                                                debug res => _274;
                                            }
                                        }
                                        scope 101 {
                                            debug residual => _289;
                                            scope 102 {
                                            }
                                        }
                                        scope 103 {
                                            debug val => _292;
                                            scope 104 {
                                            }
                                        }
                                    }
                                }
                                scope 93 {
                                    debug residual => _230;
                                    scope 94 {
                                    }
                                }
                                scope 95 {
                                    debug val => _233;
                                    scope 96 {
                                    }
                                }
                            }
                            scope 76 {
                                debug residual => _189;
                                scope 77 {
                                }
                            }
                            scope 78 {
                                debug val => _192;
                                scope 79 {
                                }
                            }
                            scope 80 {
                                debug residual => _195;
                                scope 81 {
                                }
                            }
                            scope 82 {
                                debug val => _198;
                                scope 83 {
                                }
                            }
                            scope 84 {
                                debug residual => _203;
                                scope 85 {
                                }
                            }
                            scope 86 {
                                debug val => _206;
                                scope 87 {
                                }
                            }
                            scope 88 {
                                debug residual => _208;
                                scope 89 {
                                }
                            }
                            scope 90 {
                                debug val => _211;
                                scope 91 {
                                }
                            }
                        }
                        scope 63 {
                            debug residual => _159;
                            scope 64 {
                            }
                        }
                        scope 65 {
                            debug val => _162;
                            scope 66 {
                            }
                        }
                        scope 67 {
                            debug residual => _168;
                            scope 68 {
                            }
                        }
                        scope 69 {
                            debug val => _171;
                            scope 70 {
                            }
                        }
                        scope 71 {
                            debug residual => _173;
                            scope 72 {
                            }
                        }
                        scope 73 {
                            debug val => _176;
                            scope 74 {
                            }
                        }
                    }
                    scope 50 {
                        debug residual => _136;
                        scope 51 {
                        }
                    }
                    scope 52 {
                        debug val => _139;
                        scope 53 {
                        }
                    }
                    scope 54 {
                        debug residual => _142;
                        scope 55 {
                        }
                    }
                    scope 56 {
                        debug val => _145;
                        scope 57 {
                        }
                    }
                    scope 58 {
                        debug residual => _147;
                        scope 59 {
                        }
                    }
                    scope 60 {
                        debug val => _150;
                        scope 61 {
                        }
                    }
                }
                scope 37 {
                    debug residual => _106;
                    scope 38 {
                    }
                }
                scope 39 {
                    debug val => _109;
                    scope 40 {
                    }
                }
                scope 41 {
                    debug residual => _111;
                    scope 42 {
                    }
                }
                scope 43 {
                    debug val => _114;
                    scope 44 {
                    }
                }
                scope 45 {
                    debug residual => _116;
                    scope 46 {
                    }
                }
                scope 47 {
                    debug val => _119;
                    scope 48 {
                    }
                }
            }
            scope 28 {
                debug residual => _80;
                scope 29 {
                }
            }
            scope 30 {
                debug val => _83;
                scope 31 {
                }
            }
            scope 32 {
                debug residual => _86;
                scope 33 {
                }
            }
            scope 34 {
                debug val => _89;
                scope 35 {
                }
            }
        }
        scope 19 {
            debug residual => _57;
            scope 20 {
            }
        }
        scope 21 {
            debug val => _60;
            scope 22 {
            }
        }
        scope 23 {
            debug residual => _63;
            scope 24 {
            }
        }
        scope 25 {
            debug val => _66;
            scope 26 {
            }
        }
    }
    scope 2 {
        debug residual => _26;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _29;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _31;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _34;
        scope 9 {
        }
    }
    scope 10 {
        debug residual => _39;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _42;
        scope 13 {
        }
    }
    scope 14 {
        debug residual => _44;
        scope 15 {
        }
    }
    scope 16 {
        debug val => _47;
        scope 17 {
        }
    }

    bb0: {
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = _2;
        _11 = Eq(move _12, const 0_i64);
        switchInt(move _11) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_12);
        _0 = std::result::Result::<i32, error::ErrorCode>::Ok(const 0_i32);
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb178;
    }

    bb2: {
        StorageDead(_12);
        _10 = const ();
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = _9;
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = _1;
        _23 = <u64 as Cast>::cast::<i64>(move _24) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_24);
        _22 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _23) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_23);
        _25 = discriminant(_22);
        switchInt(move _25) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_29);
        _29 = ((_22 as Continue).0: i64);
        _21 = _29;
        StorageDead(_29);
        _19 = <i64 as SafeMath>::safe_mul(move _20, move _21) -> [return: bb9, unwind continue];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_26);
        _26 = ((_22 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_28);
        _28 = _26;
        _0 = <std::result::Result<i32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _28) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        goto -> bb175;
    }

    bb9: {
        StorageDead(_21);
        StorageDead(_20);
        _18 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _19) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_19);
        _30 = discriminant(_18);
        switchInt(move _30) -> [0: bb11, 1: bb12, otherwise: bb6];
    }

    bb11: {
        StorageLive(_34);
        _34 = ((_18 as Continue).0: i64);
        _17 = _34;
        StorageDead(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = <u128 as Cast>::cast::<i64>(const _) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_31);
        _31 = ((_18 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_33);
        _33 = _31;
        _0 = <std::result::Result<i32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _33) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_33);
        StorageDead(_31);
        goto -> bb175;
    }

    bb14: {
        _36 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _37) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_37);
        _38 = discriminant(_36);
        switchInt(move _38) -> [0: bb16, 1: bb17, otherwise: bb6];
    }

    bb16: {
        StorageLive(_42);
        _42 = ((_36 as Continue).0: i64);
        _35 = _42;
        StorageDead(_42);
        _16 = <i64 as SafeMath>::safe_div(move _17, move _35) -> [return: bb19, unwind continue];
    }

    bb17: {
        StorageLive(_39);
        _39 = ((_36 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_41);
        _41 = _39;
        _0 = <std::result::Result<i32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _41) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_41);
        StorageDead(_39);
        StorageDead(_35);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb174;
    }

    bb19: {
        StorageDead(_35);
        StorageDead(_17);
        _15 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _16) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_16);
        _43 = discriminant(_15);
        switchInt(move _43) -> [0: bb21, 1: bb22, otherwise: bb6];
    }

    bb21: {
        StorageLive(_47);
        _47 = ((_15 as Continue).0: i64);
        _14 = _47;
        StorageDead(_47);
        StorageDead(_36);
        StorageDead(_22);
        StorageDead(_18);
        StorageDead(_15);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = _6;
        _54 = <u64 as Cast>::cast::<i64>(move _55) -> [return: bb24, unwind continue];
    }

    bb22: {
        StorageLive(_44);
        _44 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_46);
        _46 = _44;
        _0 = <std::result::Result<i32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _46) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_46);
        StorageDead(_44);
        goto -> bb174;
    }

    bb24: {
        StorageDead(_55);
        _53 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _54) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_54);
        _56 = discriminant(_53);
        switchInt(move _56) -> [0: bb26, 1: bb27, otherwise: bb6];
    }

    bb26: {
        StorageLive(_60);
        _60 = ((_53 as Continue).0: i64);
        _52 = _60;
        StorageDead(_60);
        StorageLive(_61);
        _61 = _5;
        _51 = <i64 as SafeMath>::safe_sub(move _52, move _61) -> [return: bb29, unwind continue];
    }

    bb27: {
        StorageLive(_57);
        _57 = ((_53 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_59);
        _59 = _57;
        _0 = <std::result::Result<i32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _59) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_52);
        StorageDead(_51);
        goto -> bb172;
    }

    bb29: {
        StorageDead(_61);
        StorageDead(_52);
        _50 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _51) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_51);
        _62 = discriminant(_50);
        switchInt(move _62) -> [0: bb31, 1: bb32, otherwise: bb6];
    }

    bb31: {
        StorageLive(_66);
        _66 = ((_50 as Continue).0: i64);
        _49 = _66;
        StorageDead(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = _14;
        _69 = Eq(_68, const i64::MIN);
        assert(!move _69, "attempt to negate `{}`, which would overflow", _68) -> [success: bb34, unwind continue];
    }

    bb32: {
        StorageLive(_63);
        _63 = ((_50 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_65);
        _65 = _63;
        _0 = <std::result::Result<i32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _65) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_65);
        StorageDead(_63);
        goto -> bb172;
    }

    bb34: {
        _67 = Neg(move _68);
        StorageDead(_68);
        StorageLive(_70);
        _70 = _14;
        _48 = <i64 as Ord>::clamp(move _49, move _67, move _70) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_70);
        StorageDead(_67);
        StorageDead(_49);
        StorageDead(_53);
        StorageDead(_50);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = _8;
        _77 = <u64 as Cast>::cast::<i64>(move _78) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_78);
        _76 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _77) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_77);
        _79 = discriminant(_76);
        switchInt(move _79) -> [0: bb38, 1: bb39, otherwise: bb6];
    }

    bb38: {
        StorageLive(_83);
        _83 = ((_76 as Continue).0: i64);
        _75 = _83;
        StorageDead(_83);
        StorageLive(_84);
        _84 = _7;
        _74 = <i64 as SafeMath>::safe_sub(move _75, move _84) -> [return: bb41, unwind continue];
    }

    bb39: {
        StorageLive(_80);
        _80 = ((_76 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_82);
        _82 = _80;
        _0 = <std::result::Result<i32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _82) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_75);
        StorageDead(_74);
        goto -> bb170;
    }

    bb41: {
        StorageDead(_84);
        StorageDead(_75);
        _73 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _74) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_74);
        _85 = discriminant(_73);
        switchInt(move _85) -> [0: bb43, 1: bb44, otherwise: bb6];
    }

    bb43: {
        StorageLive(_89);
        _89 = ((_73 as Continue).0: i64);
        _72 = _89;
        StorageDead(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = _14;
        _92 = Eq(_91, const i64::MIN);
        assert(!move _92, "attempt to negate `{}`, which would overflow", _91) -> [success: bb46, unwind continue];
    }

    bb44: {
        StorageLive(_86);
        _86 = ((_73 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_88);
        _88 = _86;
        _0 = <std::result::Result<i32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _88) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_88);
        StorageDead(_86);
        goto -> bb170;
    }

    bb46: {
        _90 = Neg(move _91);
        StorageDead(_91);
        StorageLive(_93);
        _93 = _14;
        _71 = <i64 as Ord>::clamp(move _72, move _90, move _93) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_93);
        StorageDead(_90);
        StorageDead(_72);
        StorageDead(_76);
        StorageDead(_73);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _101 = _2;
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _104 = <u128 as Cast>::cast::<i64>(const _) -> [return: bb48, unwind continue];
    }

    bb48: {
        _103 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _104) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_104);
        _105 = discriminant(_103);
        switchInt(move _105) -> [0: bb50, 1: bb51, otherwise: bb6];
    }

    bb50: {
        StorageLive(_109);
        _109 = ((_103 as Continue).0: i64);
        _102 = _109;
        StorageDead(_109);
        _100 = <i64 as SafeMath>::safe_div(move _101, move _102) -> [return: bb53, unwind continue];
    }

    bb51: {
        StorageLive(_106);
        _106 = ((_103 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_108);
        _108 = _106;
        _0 = <std::result::Result<i32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _108) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_108);
        StorageDead(_106);
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_100);
        goto -> bb167;
    }

    bb53: {
        StorageDead(_102);
        StorageDead(_101);
        _99 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _100) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_100);
        _110 = discriminant(_99);
        switchInt(move _110) -> [0: bb55, 1: bb56, otherwise: bb6];
    }

    bb55: {
        StorageLive(_114);
        _114 = ((_99 as Continue).0: i64);
        _98 = _114;
        StorageDead(_114);
        _97 = <i64 as SafeMath>::safe_mul(move _98, const 24_i64) -> [return: bb58, unwind continue];
    }

    bb56: {
        StorageLive(_111);
        _111 = ((_99 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_113);
        _113 = _111;
        _0 = <std::result::Result<i32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _113) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_113);
        StorageDead(_111);
        goto -> bb167;
    }

    bb58: {
        StorageDead(_98);
        _96 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _97) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_97);
        _115 = discriminant(_96);
        switchInt(move _115) -> [0: bb60, 1: bb61, otherwise: bb6];
    }

    bb60: {
        StorageLive(_119);
        _119 = ((_96 as Continue).0: i64);
        _95 = _119;
        StorageDead(_119);
        StorageLive(_120);
        StorageLive(_121);
        _121 = _14;
        _122 = Eq(_121, const i64::MIN);
        assert(!move _122, "attempt to negate `{}`, which would overflow", _121) -> [success: bb63, unwind continue];
    }

    bb61: {
        StorageLive(_116);
        _116 = ((_96 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_118);
        _118 = _116;
        _0 = <std::result::Result<i32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _118) -> [return: bb62, unwind continue];
    }

    bb62: {
        StorageDead(_118);
        StorageDead(_116);
        goto -> bb168;
    }

    bb63: {
        _120 = Neg(move _121);
        StorageDead(_121);
        StorageLive(_123);
        _123 = _14;
        _94 = <i64 as Ord>::clamp(move _95, move _120, move _123) -> [return: bb64, unwind continue];
    }

    bb64: {
        StorageDead(_123);
        StorageDead(_120);
        StorageDead(_95);
        StorageDead(_103);
        StorageDead(_99);
        StorageDead(_96);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        _133 = _48;
        StorageLive(_134);
        _134 = _71;
        _132 = <i64 as SafeMath>::safe_add(move _133, move _134) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_134);
        StorageDead(_133);
        _131 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _132) -> [return: bb66, unwind continue];
    }

    bb66: {
        StorageDead(_132);
        _135 = discriminant(_131);
        switchInt(move _135) -> [0: bb67, 1: bb68, otherwise: bb6];
    }

    bb67: {
        StorageLive(_139);
        _139 = ((_131 as Continue).0: i64);
        _130 = _139;
        StorageDead(_139);
        StorageLive(_140);
        _140 = _94;
        _129 = <i64 as SafeMath>::safe_add(move _130, move _140) -> [return: bb70, unwind continue];
    }

    bb68: {
        StorageLive(_136);
        _136 = ((_131 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_138);
        _138 = _136;
        _0 = <std::result::Result<i32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _138) -> [return: bb69, unwind continue];
    }

    bb69: {
        StorageDead(_138);
        StorageDead(_136);
        StorageDead(_130);
        StorageDead(_129);
        goto -> bb164;
    }

    bb70: {
        StorageDead(_140);
        StorageDead(_130);
        _128 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _129) -> [return: bb71, unwind continue];
    }

    bb71: {
        StorageDead(_129);
        _141 = discriminant(_128);
        switchInt(move _141) -> [0: bb72, 1: bb73, otherwise: bb6];
    }

    bb72: {
        StorageLive(_145);
        _145 = ((_128 as Continue).0: i64);
        _127 = _145;
        StorageDead(_145);
        _126 = <i64 as SafeMath>::safe_div(move _127, const 3_i64) -> [return: bb75, unwind continue];
    }

    bb73: {
        StorageLive(_142);
        _142 = ((_128 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_144);
        _144 = _142;
        _0 = <std::result::Result<i32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _144) -> [return: bb74, unwind continue];
    }

    bb74: {
        StorageDead(_144);
        StorageDead(_142);
        goto -> bb164;
    }

    bb75: {
        StorageDead(_127);
        _125 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _126) -> [return: bb76, unwind continue];
    }

    bb76: {
        StorageDead(_126);
        _146 = discriminant(_125);
        switchInt(move _146) -> [0: bb77, 1: bb78, otherwise: bb6];
    }

    bb77: {
        StorageLive(_150);
        _150 = ((_125 as Continue).0: i64);
        _124 = _150;
        StorageDead(_150);
        StorageDead(_131);
        StorageDead(_128);
        StorageDead(_125);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        _157 = _124;
        _156 = <i64 as SafeMath>::safe_mul(move _157, const _) -> [return: bb80, unwind continue];
    }

    bb78: {
        StorageLive(_147);
        _147 = ((_125 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_149);
        _149 = _147;
        _0 = <std::result::Result<i32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _149) -> [return: bb79, unwind continue];
    }

    bb79: {
        StorageDead(_149);
        StorageDead(_147);
        goto -> bb165;
    }

    bb80: {
        StorageDead(_157);
        _155 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _156) -> [return: bb81, unwind continue];
    }

    bb81: {
        StorageDead(_156);
        _158 = discriminant(_155);
        switchInt(move _158) -> [0: bb82, 1: bb83, otherwise: bb6];
    }

    bb82: {
        StorageLive(_162);
        _162 = ((_155 as Continue).0: i64);
        _154 = _162;
        StorageDead(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        _166 = _1;
        _165 = <u64 as Cast>::cast::<i64>(move _166) -> [return: bb85, unwind continue];
    }

    bb83: {
        StorageLive(_159);
        _159 = ((_155 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_161);
        _161 = _159;
        _0 = <std::result::Result<i32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _161) -> [return: bb84, unwind continue];
    }

    bb84: {
        StorageDead(_161);
        StorageDead(_159);
        StorageDead(_154);
        StorageDead(_153);
        goto -> bb162;
    }

    bb85: {
        StorageDead(_166);
        _164 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _165) -> [return: bb86, unwind continue];
    }

    bb86: {
        StorageDead(_165);
        _167 = discriminant(_164);
        switchInt(move _167) -> [0: bb87, 1: bb88, otherwise: bb6];
    }

    bb87: {
        StorageLive(_171);
        _171 = ((_164 as Continue).0: i64);
        _163 = _171;
        StorageDead(_171);
        _153 = <i64 as SafeMath>::safe_div(move _154, move _163) -> [return: bb90, unwind continue];
    }

    bb88: {
        StorageLive(_168);
        _168 = ((_164 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_170);
        _170 = _168;
        _0 = <std::result::Result<i32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _170) -> [return: bb89, unwind continue];
    }

    bb89: {
        StorageDead(_170);
        StorageDead(_168);
        StorageDead(_163);
        StorageDead(_154);
        StorageDead(_153);
        goto -> bb161;
    }

    bb90: {
        StorageDead(_163);
        StorageDead(_154);
        _152 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _153) -> [return: bb91, unwind continue];
    }

    bb91: {
        StorageDead(_153);
        _172 = discriminant(_152);
        switchInt(move _172) -> [0: bb92, 1: bb93, otherwise: bb6];
    }

    bb92: {
        StorageLive(_176);
        _176 = ((_152 as Continue).0: i64);
        _151 = _176;
        StorageDead(_176);
        StorageDead(_164);
        StorageDead(_155);
        StorageDead(_152);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        _187 = _3;
        _186 = <i128 as Cast>::cast::<i64>(move _187) -> [return: bb95, unwind continue];
    }

    bb93: {
        StorageLive(_173);
        _173 = ((_152 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_175);
        _175 = _173;
        _0 = <std::result::Result<i32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _175) -> [return: bb94, unwind continue];
    }

    bb94: {
        StorageDead(_175);
        StorageDead(_173);
        goto -> bb161;
    }

    bb95: {
        StorageDead(_187);
        _185 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _186) -> [return: bb96, unwind continue];
    }

    bb96: {
        StorageDead(_186);
        _188 = discriminant(_185);
        switchInt(move _188) -> [0: bb97, 1: bb98, otherwise: bb6];
    }

    bb97: {
        StorageLive(_192);
        _192 = ((_185 as Continue).0: i64);
        _184 = _192;
        StorageDead(_192);
        StorageLive(_193);
        _193 = _9;
        _183 = <i64 as SafeMath>::safe_mul(move _184, move _193) -> [return: bb100, unwind continue];
    }

    bb98: {
        StorageLive(_189);
        _189 = ((_185 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_191);
        _191 = _189;
        _0 = <std::result::Result<i32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _191) -> [return: bb99, unwind continue];
    }

    bb99: {
        StorageDead(_191);
        StorageDead(_189);
        StorageDead(_184);
        StorageDead(_183);
        goto -> bb158;
    }

    bb100: {
        StorageDead(_193);
        StorageDead(_184);
        _182 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _183) -> [return: bb101, unwind continue];
    }

    bb101: {
        StorageDead(_183);
        _194 = discriminant(_182);
        switchInt(move _194) -> [0: bb102, 1: bb103, otherwise: bb6];
    }

    bb102: {
        StorageLive(_198);
        _198 = ((_182 as Continue).0: i64);
        _181 = _198;
        StorageDead(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        _201 = <u128 as Cast>::cast::<i64>(const _) -> [return: bb105, unwind continue];
    }

    bb103: {
        StorageLive(_195);
        _195 = ((_182 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_197);
        _197 = _195;
        _0 = <std::result::Result<i32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _197) -> [return: bb104, unwind continue];
    }

    bb104: {
        StorageDead(_197);
        StorageDead(_195);
        goto -> bb158;
    }

    bb105: {
        _200 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _201) -> [return: bb106, unwind continue];
    }

    bb106: {
        StorageDead(_201);
        _202 = discriminant(_200);
        switchInt(move _202) -> [0: bb107, 1: bb108, otherwise: bb6];
    }

    bb107: {
        StorageLive(_206);
        _206 = ((_200 as Continue).0: i64);
        _199 = _206;
        StorageDead(_206);
        _180 = <i64 as SafeMath>::safe_div(move _181, move _199) -> [return: bb110, unwind continue];
    }

    bb108: {
        StorageLive(_203);
        _203 = ((_200 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_205);
        _205 = _203;
        _0 = <std::result::Result<i32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _205) -> [return: bb109, unwind continue];
    }

    bb109: {
        StorageDead(_205);
        StorageDead(_203);
        StorageDead(_199);
        StorageDead(_181);
        StorageDead(_180);
        goto -> bb157;
    }

    bb110: {
        StorageDead(_199);
        StorageDead(_181);
        _179 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _180) -> [return: bb111, unwind continue];
    }

    bb111: {
        StorageDead(_180);
        _207 = discriminant(_179);
        switchInt(move _207) -> [0: bb112, 1: bb113, otherwise: bb6];
    }

    bb112: {
        StorageLive(_211);
        _211 = ((_179 as Continue).0: i64);
        _178 = _211;
        StorageDead(_211);
        StorageLive(_212);
        StorageLive(_213);
        _213 = _9;
        _214 = Eq(_213, const i64::MIN);
        assert(!move _214, "attempt to negate `{}`, which would overflow", _213) -> [success: bb115, unwind continue];
    }

    bb113: {
        StorageLive(_208);
        _208 = ((_179 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_210);
        _210 = _208;
        _0 = <std::result::Result<i32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _210) -> [return: bb114, unwind continue];
    }

    bb114: {
        StorageDead(_210);
        StorageDead(_208);
        goto -> bb157;
    }

    bb115: {
        _212 = Neg(move _213);
        StorageDead(_213);
        StorageLive(_215);
        _215 = _9;
        _177 = <i64 as Ord>::clamp(move _178, move _212, move _215) -> [return: bb116, unwind continue];
    }

    bb116: {
        StorageDead(_215);
        StorageDead(_212);
        StorageDead(_178);
        StorageDead(_200);
        StorageDead(_185);
        StorageDead(_182);
        StorageDead(_179);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        _218 = _151;
        _217 = Ge(move _218, const 0_i64);
        switchInt(move _217) -> [0: bb120, otherwise: bb117];
    }

    bb117: {
        StorageDead(_218);
        StorageLive(_219);
        StorageLive(_220);
        _220 = _177;
        _219 = Ge(move _220, const 0_i64);
        switchInt(move _219) -> [0: bb119, otherwise: bb118];
    }

    bb118: {
        StorageDead(_220);
        goto -> bb123;
    }

    bb119: {
        StorageDead(_220);
        goto -> bb121;
    }

    bb120: {
        StorageDead(_218);
        goto -> bb121;
    }

    bb121: {
        StorageLive(_221);
        StorageLive(_222);
        _222 = _151;
        _221 = Le(move _222, const 0_i64);
        switchInt(move _221) -> [0: bb130, otherwise: bb122];
    }

    bb122: {
        StorageDead(_222);
        StorageLive(_223);
        StorageLive(_224);
        _224 = _177;
        _223 = Le(move _224, const 0_i64);
        switchInt(move _223) -> [0: bb129, otherwise: bb123];
    }

    bb123: {
        StorageDead(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        _227 = _151;
        StorageLive(_228);
        _228 = _177;
        _226 = <i64 as SafeMath>::safe_add(move _227, move _228) -> [return: bb124, unwind continue];
    }

    bb124: {
        StorageDead(_228);
        StorageDead(_227);
        _225 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _226) -> [return: bb125, unwind continue];
    }

    bb125: {
        StorageDead(_226);
        _229 = discriminant(_225);
        switchInt(move _229) -> [0: bb126, 1: bb127, otherwise: bb6];
    }

    bb126: {
        StorageLive(_233);
        _233 = ((_225 as Continue).0: i64);
        _216 = _233;
        StorageDead(_233);
        StorageDead(_225);
        goto -> bb132;
    }

    bb127: {
        StorageLive(_230);
        _230 = ((_225 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_232);
        _232 = _230;
        _0 = <std::result::Result<i32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _232) -> [return: bb128, unwind continue];
    }

    bb128: {
        StorageDead(_232);
        StorageDead(_230);
        StorageDead(_225);
        StorageDead(_223);
        StorageDead(_221);
        StorageDead(_219);
        StorageDead(_217);
        goto -> bb156;
    }

    bb129: {
        StorageDead(_224);
        goto -> bb131;
    }

    bb130: {
        StorageDead(_222);
        goto -> bb131;
    }

    bb131: {
        _216 = const 0_i64;
        goto -> bb132;
    }

    bb132: {
        StorageDead(_223);
        StorageDead(_221);
        StorageDead(_219);
        StorageDead(_217);
        StorageLive(_234);
        StorageLive(_235);
        _235 = _216;
        StorageLive(_236);
        StorageLive(_237);
        _237 = _9;
        _238 = Eq(_237, const i64::MIN);
        assert(!move _238, "attempt to negate `{}`, which would overflow", _237) -> [success: bb133, unwind continue];
    }

    bb133: {
        _236 = Neg(move _237);
        StorageDead(_237);
        StorageLive(_239);
        _239 = _9;
        _234 = <i64 as Ord>::clamp(move _235, move _236, move _239) -> [return: bb134, unwind continue];
    }

    bb134: {
        StorageDead(_239);
        StorageDead(_236);
        StorageDead(_235);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        _245 = _234;
        _244 = core::num::<impl i64>::abs(move _245) -> [return: bb135, unwind continue];
    }

    bb135: {
        StorageDead(_245);
        StorageLive(_246);
        _246 = _9;
        _243 = Le(move _244, move _246);
        switchInt(move _243) -> [0: bb137, otherwise: bb136];
    }

    bb136: {
        StorageDead(_246);
        StorageDead(_244);
        StorageLive(_247);
        _247 = ();
        _242 = std::result::Result::<(), error::ErrorCode>::Ok(move _247);
        StorageDead(_247);
        goto -> bb150;
    }

    bb137: {
        StorageDead(_246);
        StorageDead(_244);
        StorageLive(_248);
        _248 = error::ErrorCode::InvalidAmmDetected;
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        _295 = const _;
        _259 = &(*_295);
        _258 = &(*_259);
        _257 = move _258 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_258);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        _267 = &_248;
        _266 = &(*_267);
        _265 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _266) -> [return: bb138, unwind continue];
    }

    bb138: {
        StorageDead(_266);
        _264 = [move _265];
        StorageDead(_265);
        _263 = &_264;
        _262 = &(*_263);
        _261 = move _262 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_262);
        _256 = Arguments::<'_>::new_v1(move _257, move _261) -> [return: bb139, unwind continue];
    }

    bb139: {
        StorageDead(_261);
        StorageDead(_257);
        _255 = format(move _256) -> [return: bb140, unwind continue];
    }

    bb140: {
        StorageDead(_256);
        StorageDead(_267);
        StorageDead(_264);
        StorageDead(_263);
        StorageDead(_259);
        _254 = move _255;
        StorageDead(_255);
        _253 = &_254;
        _252 = &(*_253);
        _251 = <String as Deref>::deref(move _252) -> [return: bb141, unwind: bb180];
    }

    bb141: {
        _250 = &(*_251);
        StorageDead(_252);
        _249 = solana_program::log::sol_log(move _250) -> [return: bb142, unwind: bb180];
    }

    bb142: {
        StorageDead(_250);
        drop(_254) -> [return: bb143, unwind: bb181];
    }

    bb143: {
        StorageDead(_254);
        StorageDead(_253);
        StorageDead(_251);
        StorageDead(_249);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        _294 = const _;
        _278 = &(*_294);
        _277 = &(*_278);
        _276 = move _277 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_277);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        _286 = &_234;
        _285 = &(*_286);
        _284 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _285) -> [return: bb144, unwind continue];
    }

    bb144: {
        StorageDead(_285);
        _283 = [move _284];
        StorageDead(_284);
        _282 = &_283;
        _281 = &(*_282);
        _280 = move _281 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_281);
        _275 = Arguments::<'_>::new_v1(move _276, move _280) -> [return: bb145, unwind continue];
    }

    bb145: {
        StorageDead(_280);
        StorageDead(_276);
        _274 = format(move _275) -> [return: bb146, unwind continue];
    }

    bb146: {
        StorageDead(_275);
        StorageDead(_286);
        StorageDead(_283);
        StorageDead(_282);
        StorageDead(_278);
        _273 = move _274;
        StorageDead(_274);
        _272 = &_273;
        _271 = &(*_272);
        _270 = <String as Deref>::deref(move _271) -> [return: bb147, unwind: bb179];
    }

    bb147: {
        _269 = &(*_270);
        StorageDead(_271);
        _268 = solana_program::log::sol_log(move _269) -> [return: bb148, unwind: bb179];
    }

    bb148: {
        StorageDead(_269);
        drop(_273) -> [return: bb149, unwind: bb181];
    }

    bb149: {
        StorageDead(_273);
        StorageDead(_272);
        StorageDead(_270);
        StorageDead(_268);
        StorageLive(_287);
        _287 = _248;
        _242 = std::result::Result::<(), error::ErrorCode>::Err(move _287);
        StorageDead(_287);
        StorageDead(_248);
        goto -> bb150;
    }

    bb150: {
        StorageDead(_243);
        _241 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _242) -> [return: bb151, unwind continue];
    }

    bb151: {
        StorageDead(_242);
        _288 = discriminant(_241);
        switchInt(move _288) -> [0: bb152, 1: bb153, otherwise: bb6];
    }

    bb152: {
        StorageLive(_292);
        _292 = ((_241 as Continue).0: ());
        _240 = _292;
        StorageDead(_292);
        StorageDead(_241);
        StorageDead(_240);
        StorageLive(_293);
        _293 = _234;
        _0 = <i64 as Cast>::cast::<i32>(move _293) -> [return: bb155, unwind continue];
    }

    bb153: {
        StorageLive(_289);
        _289 = ((_241 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_291);
        _291 = _289;
        _0 = <std::result::Result<i32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _291) -> [return: bb154, unwind continue];
    }

    bb154: {
        StorageDead(_291);
        StorageDead(_289);
        StorageDead(_241);
        StorageDead(_240);
        StorageDead(_234);
        goto -> bb156;
    }

    bb155: {
        StorageDead(_293);
        StorageDead(_234);
        StorageDead(_216);
        StorageDead(_177);
        StorageDead(_151);
        StorageDead(_124);
        StorageDead(_94);
        StorageDead(_71);
        StorageDead(_48);
        StorageDead(_14);
        goto -> bb178;
    }

    bb156: {
        StorageDead(_216);
        goto -> bb160;
    }

    bb157: {
        StorageDead(_178);
        StorageDead(_200);
        goto -> bb159;
    }

    bb158: {
        StorageDead(_181);
        StorageDead(_180);
        StorageDead(_178);
        goto -> bb159;
    }

    bb159: {
        StorageDead(_185);
        StorageDead(_182);
        StorageDead(_179);
        goto -> bb160;
    }

    bb160: {
        StorageDead(_177);
        goto -> bb163;
    }

    bb161: {
        StorageDead(_164);
        goto -> bb162;
    }

    bb162: {
        StorageDead(_155);
        StorageDead(_152);
        goto -> bb163;
    }

    bb163: {
        StorageDead(_151);
        goto -> bb166;
    }

    bb164: {
        StorageDead(_127);
        StorageDead(_126);
        goto -> bb165;
    }

    bb165: {
        StorageDead(_131);
        StorageDead(_128);
        StorageDead(_125);
        goto -> bb166;
    }

    bb166: {
        StorageDead(_124);
        goto -> bb169;
    }

    bb167: {
        StorageDead(_98);
        StorageDead(_97);
        goto -> bb168;
    }

    bb168: {
        StorageDead(_95);
        StorageDead(_103);
        StorageDead(_99);
        StorageDead(_96);
        goto -> bb169;
    }

    bb169: {
        StorageDead(_94);
        goto -> bb171;
    }

    bb170: {
        StorageDead(_72);
        StorageDead(_76);
        StorageDead(_73);
        goto -> bb171;
    }

    bb171: {
        StorageDead(_71);
        goto -> bb173;
    }

    bb172: {
        StorageDead(_49);
        StorageDead(_53);
        StorageDead(_50);
        goto -> bb173;
    }

    bb173: {
        StorageDead(_48);
        goto -> bb177;
    }

    bb174: {
        StorageDead(_36);
        goto -> bb176;
    }

    bb175: {
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb176;
    }

    bb176: {
        StorageDead(_22);
        StorageDead(_18);
        StorageDead(_15);
        goto -> bb177;
    }

    bb177: {
        StorageDead(_14);
        goto -> bb178;
    }

    bb178: {
        return;
    }

    bb179 (cleanup): {
        drop(_273) -> [return: bb181, unwind terminate(cleanup)];
    }

    bb180 (cleanup): {
        drop(_254) -> [return: bb181, unwind terminate(cleanup)];
    }

    bb181 (cleanup): {
        resume;
    }
}
