// MIR for `get_liquidation_fee` after PreCodegen

fn get_liquidation_fee(_1: u32, _2: u32, _3: u64, _4: u64) -> std::result::Result<u32, error::ErrorCode> {
    debug base_liquidation_fee => _1;
    debug max_liquidation_fee => _2;
    debug last_active_user_slot => _3;
    debug current_slot => _4;
    let mut _0: std::result::Result<u32, error::ErrorCode>;
    let _5: u64;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _7: std::result::Result<u64, error::ErrorCode>;
    let mut _8: u64;
    let mut _9: u64;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _14: u64;
    let _15: ();
    let mut _16: bool;
    let mut _17: u64;
    let mut _18: !;
    let mut _19: u32;
    let mut _21: u32;
    let mut _22: u32;
    let mut _23: std::result::Result<u32, error::ErrorCode>;
    let mut _24: u64;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _26: std::result::Result<u64, error::ErrorCode>;
    let mut _27: u64;
    let mut _28: u64;
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _30: std::result::Result<u64, error::ErrorCode>;
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _36: isize;
    let mut _38: !;
    let mut _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _41: u32;
    let mut _42: u32;
    let mut _43: u32;
    scope 1 {
        debug slots_elapsed => _5;
        let _20: u32;
        let _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _35: u64;
        let _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _40: u64;
        scope 6 {
            debug liquidation_fee => _20;
        }
        scope 7 {
            debug residual => _32;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _35;
            scope 10 {
            }
        }
        scope 11 {
            debug residual => _37;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _40;
            scope 14 {
            }
        }
    }
    scope 2 {
        debug residual => _11;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _14;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _4;
        StorageLive(_9);
        _9 = _3;
        _7 = <u64 as SafeMath>::safe_sub(move _8, move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        StorageDead(_8);
        _6 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        _10 = discriminant(_6);
        switchInt(move _10) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_14);
        _14 = ((_6 as Continue).0: u64);
        _5 = _14;
        StorageDead(_14);
        StorageDead(_6);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = _5;
        _16 = Lt(move _17, const _);
        switchInt(move _16) -> [0: bb8, otherwise: bb7];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_11);
        _11 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_13);
        _13 = _11;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _13) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_6);
        goto -> bb24;
    }

    bb7: {
        StorageDead(_17);
        StorageLive(_19);
        _19 = _1;
        _0 = std::result::Result::<u32, error::ErrorCode>::Ok(move _19);
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb24;
    }

    bb8: {
        StorageDead(_17);
        _15 = const ();
        StorageDead(_16);
        StorageDead(_15);
        StorageLive(_20);
        StorageLive(_21);
        _21 = _1;
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = _5;
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = <u32 as Cast>::cast::<u64>(const _) -> [return: bb9, unwind continue];
    }

    bb9: {
        _29 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _30) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_30);
        _31 = discriminant(_29);
        switchInt(move _31) -> [0: bb11, 1: bb12, otherwise: bb4];
    }

    bb11: {
        StorageLive(_35);
        _35 = ((_29 as Continue).0: u64);
        _28 = _35;
        StorageDead(_35);
        _26 = <u64 as SafeMath>::safe_mul(move _27, move _28) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_32);
        _32 = ((_29 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_34);
        _34 = _32;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _34) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_34);
        StorageDead(_32);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        goto -> bb23;
    }

    bb14: {
        StorageDead(_28);
        StorageDead(_27);
        _25 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _26) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_26);
        _36 = discriminant(_25);
        switchInt(move _36) -> [0: bb16, 1: bb17, otherwise: bb4];
    }

    bb16: {
        StorageLive(_40);
        _40 = ((_25 as Continue).0: u64);
        _24 = _40;
        StorageDead(_40);
        _23 = <u64 as Cast>::cast::<u32>(move _24) -> [return: bb19, unwind continue];
    }

    bb17: {
        StorageLive(_37);
        _37 = ((_25 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_39);
        _39 = _37;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _39) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_39);
        StorageDead(_37);
        goto -> bb23;
    }

    bb19: {
        StorageDead(_24);
        _22 = std::result::Result::<u32, error::ErrorCode>::unwrap_or(move _23, const _) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_23);
        _20 = core::num::<impl u32>::saturating_add(move _21, move _22) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_29);
        StorageDead(_25);
        StorageLive(_41);
        StorageLive(_42);
        _42 = _20;
        StorageLive(_43);
        _43 = _2;
        _41 = <u32 as Ord>::min(move _42, move _43) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_43);
        StorageDead(_42);
        _0 = std::result::Result::<u32, error::ErrorCode>::Ok(move _41);
        StorageDead(_41);
        StorageDead(_20);
        StorageDead(_5);
        goto -> bb25;
    }

    bb23: {
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_29);
        StorageDead(_25);
        StorageDead(_20);
        goto -> bb24;
    }

    bb24: {
        StorageDead(_5);
        goto -> bb25;
    }

    bb25: {
        return;
    }
}
