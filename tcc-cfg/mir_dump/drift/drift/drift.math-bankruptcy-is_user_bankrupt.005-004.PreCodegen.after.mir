// MIR for `is_user_bankrupt` after PreCodegen

fn is_user_bankrupt(_1: &User) -> bool {
    debug user => _1;
    let mut _0: bool;
    let mut _2: bool;
    let _3: ();
    let mut _4: std::slice::Iter<'_, state::user::SpotPosition>;
    let mut _5: std::slice::Iter<'_, state::user::SpotPosition>;
    let mut _6: &[state::user::SpotPosition];
    let mut _7: &[state::user::SpotPosition; 8];
    let mut _9: ();
    let _10: ();
    let mut _11: std::option::Option<&state::user::SpotPosition>;
    let mut _12: &mut std::slice::Iter<'_, state::user::SpotPosition>;
    let mut _13: &mut std::slice::Iter<'_, state::user::SpotPosition>;
    let mut _14: isize;
    let mut _15: !;
    let mut _17: bool;
    let mut _18: u64;
    let mut _19: isize;
    let mut _20: !;
    let _21: ();
    let mut _22: std::slice::Iter<'_, state::user::PerpPosition>;
    let mut _23: std::slice::Iter<'_, state::user::PerpPosition>;
    let mut _24: &[state::user::PerpPosition];
    let mut _25: &[state::user::PerpPosition; 8];
    let _27: ();
    let mut _28: std::option::Option<&state::user::PerpPosition>;
    let mut _29: &mut std::slice::Iter<'_, state::user::PerpPosition>;
    let mut _30: &mut std::slice::Iter<'_, state::user::PerpPosition>;
    let mut _31: isize;
    let mut _32: !;
    let _34: ();
    let mut _35: bool;
    let mut _36: i64;
    let mut _37: bool;
    let mut _38: i64;
    let mut _39: bool;
    let mut _40: &state::user::PerpPosition;
    let mut _41: !;
    let mut _42: bool;
    let mut _43: i64;
    scope 1 {
        debug has_liability => _2;
        let mut _8: std::slice::Iter<'_, state::user::SpotPosition>;
        let mut _26: std::slice::Iter<'_, state::user::PerpPosition>;
        scope 2 {
            debug iter => _8;
            let _16: &state::user::SpotPosition;
            scope 3 {
                debug spot_position => _16;
            }
        }
        scope 4 {
            debug iter => _26;
            let _33: &state::user::PerpPosition;
            scope 5 {
                debug perp_position => _33;
            }
        }
    }

    bb0: {
        StorageLive(_2);
        _2 = const false;
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &((*_1).3: [state::user::SpotPosition; 8]);
        _6 = move _7 as &[state::user::SpotPosition] (PointerCoercion(Unsize));
        StorageDead(_7);
        _5 = core::slice::<impl [SpotPosition]>::iter(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::slice::Iter<'_, SpotPosition> as IntoIterator>::into_iter(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_5);
        StorageLive(_8);
        _8 = move _4;
        goto -> bb3;
    }

    bb3: {
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &mut _8;
        _12 = &mut (*_13);
        _11 = <std::slice::Iter<'_, SpotPosition> as Iterator>::next(move _12) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_12);
        _14 = discriminant(_11);
        switchInt(move _14) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        StorageLive(_16);
        _16 = ((_11 as Some).0: &state::user::SpotPosition);
        StorageLive(_17);
        StorageLive(_18);
        _18 = ((*_16).0: u64);
        _17 = Gt(move _18, const 0_u64);
        switchInt(move _17) -> [0: bb11, otherwise: bb8];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _3 = const ();
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &((*_1).4: [state::user::PerpPosition; 8]);
        _24 = move _25 as &[state::user::PerpPosition] (PointerCoercion(Unsize));
        StorageDead(_25);
        _23 = core::slice::<impl [PerpPosition]>::iter(move _24) -> [return: bb13, unwind continue];
    }

    bb8: {
        StorageDead(_18);
        _19 = discriminant(((*_16).5: state::spot_market::SpotBalanceType));
        switchInt(move _19) -> [0: bb10, 1: bb9, otherwise: bb6];
    }

    bb9: {
        _2 = const true;
        _10 = const ();
        goto -> bb12;
    }

    bb10: {
        _0 = const false;
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb29;
    }

    bb11: {
        StorageDead(_18);
        _10 = const ();
        goto -> bb12;
    }

    bb12: {
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_10);
        _9 = const ();
        goto -> bb3;
    }

    bb13: {
        StorageDead(_24);
        _22 = <std::slice::Iter<'_, PerpPosition> as IntoIterator>::into_iter(move _23) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_23);
        StorageLive(_26);
        _26 = move _22;
        goto -> bb15;
    }

    bb15: {
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = &mut _26;
        _29 = &mut (*_30);
        _28 = <std::slice::Iter<'_, PerpPosition> as Iterator>::next(move _29) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_29);
        _31 = discriminant(_28);
        switchInt(move _31) -> [0: bb18, 1: bb17, otherwise: bb6];
    }

    bb17: {
        StorageLive(_33);
        _33 = ((_28 as Some).0: &state::user::PerpPosition);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = ((*_33).1: i64);
        _35 = Ne(move _36, const 0_i64);
        switchInt(move _35) -> [0: bb20, otherwise: bb19];
    }

    bb18: {
        _21 = const ();
        StorageDead(_30);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_22);
        StorageDead(_21);
        _0 = _2;
        StorageDead(_2);
        goto -> bb30;
    }

    bb19: {
        StorageDead(_36);
        goto -> bb21;
    }

    bb20: {
        StorageDead(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = ((*_33).2: i64);
        _37 = Gt(move _38, const 0_i64);
        switchInt(move _37) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        StorageDead(_38);
        goto -> bb24;
    }

    bb22: {
        StorageDead(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &(*_33);
        _39 = PerpPosition::has_open_order(move _40) -> [return: bb23, unwind continue];
    }

    bb23: {
        switchInt(move _39) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        StorageDead(_40);
        _0 = const false;
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_30);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_22);
        StorageDead(_21);
        goto -> bb29;
    }

    bb25: {
        StorageDead(_40);
        _34 = const ();
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_34);
        StorageLive(_42);
        StorageLive(_43);
        _43 = ((*_33).2: i64);
        _42 = Lt(move _43, const 0_i64);
        switchInt(move _42) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        StorageDead(_43);
        _2 = const true;
        _27 = const ();
        goto -> bb28;
    }

    bb27: {
        StorageDead(_43);
        _27 = const ();
        goto -> bb28;
    }

    bb28: {
        StorageDead(_42);
        StorageDead(_33);
        StorageDead(_30);
        StorageDead(_28);
        StorageDead(_27);
        _9 = const ();
        goto -> bb15;
    }

    bb29: {
        StorageDead(_2);
        goto -> bb30;
    }

    bb30: {
        return;
    }
}
