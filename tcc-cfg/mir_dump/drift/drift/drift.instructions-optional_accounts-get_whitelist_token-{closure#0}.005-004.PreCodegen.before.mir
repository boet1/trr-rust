// MIR for `get_whitelist_token::{closure#0}` before PreCodegen

fn get_whitelist_token::{closure#0}(_1: {closure@programs/drift/src/instructions/optional_accounts.rs:196:55: 196:58}, _2: anchor_lang::error::Error) -> error::ErrorCode {
    debug e => _2;
    let mut _0: error::ErrorCode;
    let _3: ();
    let mut _4: &str;
    let _5: &str;
    let _6: ();
    let mut _7: &str;
    let _8: &str;
    let mut _9: &std::string::String;
    let _10: &std::string::String;
    let _11: std::string::String;
    let _12: std::string::String;
    let mut _13: std::fmt::Arguments<'_>;
    let mut _14: &[&str];
    let mut _15: &[&str; 1];
    let _16: &[&str; 1];
    let _17: [&str; 1];
    let mut _18: &[core::fmt::rt::Argument<'_>];
    let mut _19: &[core::fmt::rt::Argument<'_>; 1];
    let _20: &[core::fmt::rt::Argument<'_>; 1];
    let _21: [core::fmt::rt::Argument<'_>; 1];
    let mut _22: core::fmt::rt::Argument<'_>;
    let mut _23: &anchor_lang::error::Error;
    let _24: &anchor_lang::error::Error;
    let mut _25: &[&str; 1];
    scope 1 {
        debug res => _12;
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = const "Unable to deserialize whitelist token";
        _4 = &(*_5);
        _3 = solana_program::log::sol_log(move _4) -> [return: bb1, unwind: bb10];
    }

    bb1: {
        StorageDead(_4);
        StorageDead(_5);
        StorageDead(_3);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _25 = const _;
        _16 = &(*_25);
        _15 = &(*_16);
        _14 = move _15 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_15);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &_2;
        _23 = &(*_24);
        _22 = core::fmt::rt::Argument::<'_>::new_debug::<anchor_lang::error::Error>(move _23) -> [return: bb2, unwind: bb10];
    }

    bb2: {
        StorageDead(_23);
        _21 = [move _22];
        StorageDead(_22);
        _20 = &_21;
        _19 = &(*_20);
        _18 = move _19 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_19);
        _13 = Arguments::<'_>::new_v1(move _14, move _18) -> [return: bb3, unwind: bb10];
    }

    bb3: {
        StorageDead(_18);
        StorageDead(_14);
        _12 = format(move _13) -> [return: bb4, unwind: bb10];
    }

    bb4: {
        StorageDead(_13);
        StorageDead(_24);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_16);
        _11 = move _12;
        StorageDead(_12);
        _10 = &_11;
        _9 = &(*_10);
        _8 = <String as Deref>::deref(move _9) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        _7 = &(*_8);
        StorageDead(_9);
        _6 = solana_program::log::sol_log(move _7) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        StorageDead(_7);
        drop(_11) -> [return: bb7, unwind: bb10];
    }

    bb7: {
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_6);
        _0 = error::ErrorCode::InvalidWhitelistToken;
        drop(_2) -> [return: bb8, unwind: bb11];
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_11) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        drop(_2) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }
}
