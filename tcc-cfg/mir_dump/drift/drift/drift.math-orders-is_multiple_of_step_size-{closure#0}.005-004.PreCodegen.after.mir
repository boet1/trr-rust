// MIR for `math::orders::is_multiple_of_step_size::{closure#0}` after PreCodegen

fn math::orders::is_multiple_of_step_size::{closure#0}(_1: {closure@programs/drift/src/error.rs:658:9: 658:11}) -> error::ErrorCode {
    let mut _0: error::ErrorCode;
    let _2: error::ErrorCode;
    let _3: ();
    let mut _4: &str;
    let _5: &str;
    let mut _6: &std::string::String;
    let _7: &std::string::String;
    let _8: std::string::String;
    let mut _10: std::fmt::Arguments<'_>;
    let mut _11: &[&str];
    let mut _12: &[&str; 2];
    let _13: &[&str; 2];
    let _14: [&str; 2];
    let mut _15: &[core::fmt::rt::Argument<'_>];
    let mut _16: &[core::fmt::rt::Argument<'_>; 1];
    let _17: &[core::fmt::rt::Argument<'_>; 1];
    let _18: [core::fmt::rt::Argument<'_>; 1];
    let mut _19: core::fmt::rt::Argument<'_>;
    let mut _20: &error::ErrorCode;
    let _21: &error::ErrorCode;
    scope 1 {
        debug error_code => _2;
        let _9: std::string::String;
        let mut _22: &[&str; 2];
        scope 2 {
            debug res => _9;
        }
    }

    bb0: {
        StorageLive(_2);
        _2 = error::ErrorCode::MathError;
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _22 = const _;
        _13 = &(*_22);
        _12 = &(*_13);
        _11 = move _12 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_12);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &_2;
        _20 = &(*_21);
        _19 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _20) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_20);
        _18 = [move _19];
        StorageDead(_19);
        _17 = &_18;
        _16 = &(*_17);
        _15 = move _16 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_16);
        _10 = Arguments::<'_>::new_v1(move _11, move _15) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_15);
        StorageDead(_11);
        _9 = format(move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_10);
        StorageDead(_21);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_13);
        _8 = move _9;
        StorageDead(_9);
        _7 = &_8;
        _6 = &(*_7);
        _5 = <String as Deref>::deref(move _6) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        _4 = &(*_5);
        StorageDead(_6);
        _3 = solana_program::log::sol_log(move _4) -> [return: bb5, unwind: bb7];
    }

    bb5: {
        StorageDead(_4);
        drop(_8) -> [return: bb6, unwind: bb8];
    }

    bb6: {
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_3);
        _0 = _2;
        StorageDead(_2);
        return;
    }

    bb7 (cleanup): {
        drop(_8) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        resume;
    }
}
