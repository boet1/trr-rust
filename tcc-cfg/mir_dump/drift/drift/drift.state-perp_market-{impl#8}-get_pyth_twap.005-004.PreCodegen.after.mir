// MIR for `state::perp_market::<impl at programs/drift/src/state/perp_market.rs:1269:1: 1269:9>::get_pyth_twap` after PreCodegen

fn state::perp_market::<impl at programs/drift/src/state/perp_market.rs:1269:1: 1269:9>::get_pyth_twap(_1: &AMM, _2: &anchor_lang::prelude::AccountInfo<'_>, _3: &state::oracle::OracleSource) -> std::result::Result<i64, error::ErrorCode> {
    debug self => _1;
    debug price_oracle => _2;
    debug oracle_source => _3;
    let mut _0: std::result::Result<i64, error::ErrorCode>;
    let _4: u128;
    let mut _5: &state::oracle::OracleSource;
    let _7: &&mut [u8];
    let mut _8: &std::cell::Ref<'_, &mut [u8]>;
    let _9: &std::cell::Ref<'_, &mut [u8]>;
    let _10: std::cell::Ref<'_, &mut [u8]>;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _12: std::result::Result<std::cell::Ref<'_, &mut [u8]>, error::ErrorCode>;
    let mut _13: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _14: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _15: std::result::Result<std::cell::Ref<'_, &mut [u8]>, error::ErrorCode>;
    let mut _16: error::ErrorCode;
    let mut _17: isize;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _25: ();
    let mut _26: bool;
    let mut _27: &state::oracle::OracleSource;
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, pyth_solana_receiver_sdk::price_update::PriceUpdateV2>;
    let mut _30: std::result::Result<pyth_solana_receiver_sdk::price_update::PriceUpdateV2, error::ErrorCode>;
    let mut _31: std::result::Result<pyth_solana_receiver_sdk::price_update::PriceUpdateV2, anchor_lang::error::Error>;
    let mut _32: &mut &[u8];
    let mut _33: &mut &[u8];
    let mut _34: std::result::Result<pyth_solana_receiver_sdk::price_update::PriceUpdateV2, error::ErrorCode>;
    let mut _35: error::ErrorCode;
    let mut _36: isize;
    let mut _38: !;
    let mut _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _41: i64;
    let mut _42: i64;
    let mut _43: i32;
    let mut _44: bool;
    let mut _45: &state::oracle::OracleSource;
    let mut _47: &[u8];
    let mut _48: i64;
    let mut _49: i64;
    let mut _50: i32;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::pyth_lazer_oracle::PythLazerOracle>;
    let mut _53: std::result::Result<state::pyth_lazer_oracle::PythLazerOracle, error::ErrorCode>;
    let mut _54: std::result::Result<state::pyth_lazer_oracle::PythLazerOracle, anchor_lang::error::Error>;
    let mut _55: &mut &[u8];
    let mut _56: &mut &[u8];
    let mut _57: std::result::Result<state::pyth_lazer_oracle::PythLazerOracle, error::ErrorCode>;
    let mut _58: error::ErrorCode;
    let mut _59: isize;
    let mut _61: !;
    let mut _62: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _64: i64;
    let mut _65: i64;
    let mut _66: i32;
    let _67: ();
    let mut _68: bool;
    let mut _69: i64;
    let mut _70: i64;
    let mut _71: i64;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: !;
    let mut _78: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _79: std::result::Result<u128, error::ErrorCode>;
    let mut _80: u128;
    let mut _81: u32;
    let mut _82: i32;
    let mut _83: u128;
    let mut _84: isize;
    let mut _86: !;
    let mut _87: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _91: ();
    let mut _92: bool;
    let mut _93: u128;
    let mut _94: u128;
    let mut _95: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _96: std::result::Result<u128, error::ErrorCode>;
    let mut _97: u128;
    let mut _98: isize;
    let mut _100: !;
    let mut _101: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _103: u128;
    let mut _104: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _105: std::result::Result<u128, error::ErrorCode>;
    let mut _106: u128;
    let mut _107: isize;
    let mut _109: !;
    let mut _110: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _112: i128;
    let mut _113: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _114: std::result::Result<i128, error::ErrorCode>;
    let mut _115: i128;
    let mut _116: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _117: std::result::Result<i128, error::ErrorCode>;
    let mut _118: i128;
    let mut _119: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _120: std::result::Result<i128, error::ErrorCode>;
    let mut _121: i64;
    let mut _122: isize;
    let mut _124: !;
    let mut _125: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _127: i128;
    let mut _128: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _129: std::result::Result<i128, error::ErrorCode>;
    let mut _130: u128;
    let mut _131: isize;
    let mut _133: !;
    let mut _134: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _136: isize;
    let mut _138: !;
    let mut _139: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _141: i128;
    let mut _142: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _143: std::result::Result<i128, error::ErrorCode>;
    let mut _144: u128;
    let mut _145: isize;
    let mut _147: !;
    let mut _148: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _150: isize;
    let mut _152: !;
    let mut _153: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _155: &mut [u8];
    let mut _156: isize;
    let mut _157: isize;
    let mut _158: isize;
    let mut _159: isize;
    let mut _160: isize;
    let mut _161: isize;
    scope 1 {
        debug multiple => _4;
        let mut _6: &[u8];
        let _18: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _21: std::cell::Ref<'_, &mut [u8]>;
        scope 2 {
            debug pyth_price_data => _6;
            let _22: i64;
            scope 7 {
                debug oracle_price => _22;
                let _23: i64;
                scope 8 {
                    debug oracle_twap => _23;
                    let _24: i32;
                    scope 9 {
                        debug oracle_exponent => _24;
                        let _28: pyth_solana_receiver_sdk::price_update::PriceUpdateV2;
                        let _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _40: pyth_solana_receiver_sdk::price_update::PriceUpdateV2;
                        let _46: &pyth_client::Price;
                        let _51: state::pyth_lazer_oracle::PythLazerOracle;
                        let _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _63: state::pyth_lazer_oracle::PythLazerOracle;
                        let _77: u128;
                        let _85: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _88: u128;
                        scope 10 {
                            debug price_message => _28;
                        }
                        scope 11 {
                            debug residual => _37;
                            scope 12 {
                            }
                        }
                        scope 13 {
                            debug val => _40;
                            scope 14 {
                            }
                        }
                        scope 15 {
                            debug price_data => _46;
                        }
                        scope 16 {
                            debug price_data => _51;
                        }
                        scope 17 {
                            debug residual => _60;
                            scope 18 {
                            }
                        }
                        scope 19 {
                            debug val => _63;
                            scope 20 {
                            }
                        }
                        scope 21 {
                            debug oracle_precision => _77;
                            let mut _89: u128;
                            scope 26 {
                                debug oracle_scale_mult => _89;
                                let mut _90: u128;
                                scope 27 {
                                    debug oracle_scale_div => _90;
                                    let _99: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _102: u128;
                                    let _108: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _111: u128;
                                    let _123: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _126: i128;
                                    let _132: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _135: i128;
                                    let _137: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _140: i128;
                                    let _146: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _149: i128;
                                    let _151: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _154: i128;
                                    scope 28 {
                                        debug residual => _99;
                                        scope 29 {
                                        }
                                    }
                                    scope 30 {
                                        debug val => _102;
                                        scope 31 {
                                        }
                                    }
                                    scope 32 {
                                        debug residual => _108;
                                        scope 33 {
                                        }
                                    }
                                    scope 34 {
                                        debug val => _111;
                                        scope 35 {
                                        }
                                    }
                                    scope 36 {
                                        debug residual => _123;
                                        scope 37 {
                                        }
                                    }
                                    scope 38 {
                                        debug val => _126;
                                        scope 39 {
                                        }
                                    }
                                    scope 40 {
                                        debug residual => _132;
                                        scope 41 {
                                        }
                                    }
                                    scope 42 {
                                        debug val => _135;
                                        scope 43 {
                                        }
                                    }
                                    scope 44 {
                                        debug residual => _137;
                                        scope 45 {
                                        }
                                    }
                                    scope 46 {
                                        debug val => _140;
                                        scope 47 {
                                        }
                                    }
                                    scope 48 {
                                        debug residual => _146;
                                        scope 49 {
                                        }
                                    }
                                    scope 50 {
                                        debug val => _149;
                                        scope 51 {
                                        }
                                    }
                                    scope 52 {
                                        debug residual => _151;
                                        scope 53 {
                                        }
                                    }
                                    scope 54 {
                                        debug val => _154;
                                        scope 55 {
                                        }
                                    }
                                }
                            }
                        }
                        scope 22 {
                            debug residual => _85;
                            scope 23 {
                            }
                        }
                        scope 24 {
                            debug val => _88;
                            scope 25 {
                            }
                        }
                    }
                }
            }
        }
        scope 3 {
            debug residual => _18;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _21;
            scope 6 {
            }
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        _5 = &(*_3);
        _4 = state::oracle::OracleSource::get_pyth_multiple(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = &(*_2);
        _13 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _14) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = error::ErrorCode::UnableToLoadOracle;
        _15 = std::result::Result::<Ref<'_, &mut [u8]>, error::ErrorCode>::Err(move _16);
        StorageDead(_16);
        _12 = std::result::Result::<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>::or::<error::ErrorCode>(move _13, move _15) -> [return: bb3, unwind: bb97];
    }

    bb3: {
        StorageDead(_15);
        StorageDead(_13);
        _11 = <std::result::Result<Ref<'_, &mut [u8]>, error::ErrorCode> as Try>::branch(move _12) -> [return: bb4, unwind: bb97];
    }

    bb4: {
        StorageDead(_12);
        _17 = discriminant(_11);
        switchInt(move _17) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_21);
        _21 = move ((_11 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _10 = move _21;
        StorageDead(_21);
        _9 = &_10;
        _8 = &(*_9);
        _7 = <Ref<'_, &mut [u8]> as Deref>::deref(move _8) -> [return: bb9, unwind: bb95];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_18);
        _18 = ((_11 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_20);
        _20 = _18;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _20) -> [return: bb8, unwind: bb98];
    }

    bb8: {
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_8);
        _156 = discriminant(_11);
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_7);
        goto -> bb93;
    }

    bb9: {
        _155 = deref_copy (*_7);
        _6 = &(*_155);
        StorageDead(_8);
        _158 = discriminant(_11);
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_7);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &(*_3);
        _26 = state::oracle::OracleSource::is_pyth_pull_oracle(move _27) -> [return: bb10, unwind: bb96];
    }

    bb10: {
        switchInt(move _26) -> [0: bb18, otherwise: bb11];
    }

    bb11: {
        StorageDead(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &mut _6;
        _32 = &mut (*_33);
        _31 = <PriceUpdateV2 as anchor_lang::AccountDeserialize>::try_deserialize(move _32) -> [return: bb12, unwind: bb96];
    }

    bb12: {
        StorageDead(_32);
        StorageLive(_34);
        StorageLive(_35);
        _35 = error::ErrorCode::UnableToLoadOracle;
        _34 = std::result::Result::<PriceUpdateV2, error::ErrorCode>::Err(move _35);
        StorageDead(_35);
        _30 = std::result::Result::<PriceUpdateV2, anchor_lang::error::Error>::or::<error::ErrorCode>(move _31, move _34) -> [return: bb13, unwind: bb96];
    }

    bb13: {
        StorageDead(_34);
        StorageDead(_31);
        _29 = <std::result::Result<PriceUpdateV2, error::ErrorCode> as Try>::branch(move _30) -> [return: bb14, unwind: bb96];
    }

    bb14: {
        StorageDead(_30);
        _36 = discriminant(_29);
        switchInt(move _36) -> [0: bb15, 1: bb16, otherwise: bb6];
    }

    bb15: {
        StorageLive(_40);
        _40 = move ((_29 as Continue).0: pyth_solana_receiver_sdk::price_update::PriceUpdateV2);
        _28 = move _40;
        StorageDead(_40);
        StorageDead(_33);
        StorageDead(_29);
        StorageLive(_41);
        _41 = ((_28.2: pyth_solana_receiver_sdk::price_update::PriceFeedMessage).1: i64);
        _22 = move _41;
        StorageDead(_41);
        StorageLive(_42);
        _42 = ((_28.2: pyth_solana_receiver_sdk::price_update::PriceFeedMessage).6: i64);
        _23 = move _42;
        StorageDead(_42);
        StorageLive(_43);
        _43 = ((_28.2: pyth_solana_receiver_sdk::price_update::PriceFeedMessage).3: i32);
        _24 = move _43;
        StorageDead(_43);
        _25 = const ();
        StorageDead(_28);
        goto -> bb30;
    }

    bb16: {
        StorageLive(_37);
        _37 = ((_29 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_39);
        _39 = _37;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _39) -> [return: bb17, unwind: bb96];
    }

    bb17: {
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_33);
        StorageDead(_29);
        StorageDead(_28);
        goto -> bb91;
    }

    bb18: {
        StorageDead(_27);
        StorageLive(_44);
        StorageLive(_45);
        _45 = &(*_3);
        _44 = state::oracle::OracleSource::is_pyth_push_oracle(move _45) -> [return: bb19, unwind: bb96];
    }

    bb19: {
        switchInt(move _44) -> [0: bb22, otherwise: bb20];
    }

    bb20: {
        StorageDead(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = &(*_6);
        _46 = pyth_client::cast::<pyth_client::Price>(move _47) -> [return: bb21, unwind: bb96];
    }

    bb21: {
        StorageDead(_47);
        StorageLive(_48);
        _48 = (((*_46).20: pyth_client::PriceInfo).0: i64);
        _22 = move _48;
        StorageDead(_48);
        StorageLive(_49);
        _49 = (((*_46).10: pyth_client::Ema).0: i64);
        _23 = move _49;
        StorageDead(_49);
        StorageLive(_50);
        _50 = ((*_46).5: i32);
        _24 = move _50;
        StorageDead(_50);
        _25 = const ();
        StorageDead(_46);
        goto -> bb29;
    }

    bb22: {
        StorageDead(_45);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = &mut _6;
        _55 = &mut (*_56);
        _54 = <PythLazerOracle as anchor_lang::AccountDeserialize>::try_deserialize(move _55) -> [return: bb23, unwind: bb96];
    }

    bb23: {
        StorageDead(_55);
        StorageLive(_57);
        StorageLive(_58);
        _58 = error::ErrorCode::UnableToLoadOracle;
        _57 = std::result::Result::<PythLazerOracle, error::ErrorCode>::Err(move _58);
        StorageDead(_58);
        _53 = std::result::Result::<PythLazerOracle, anchor_lang::error::Error>::or::<error::ErrorCode>(move _54, move _57) -> [return: bb24, unwind: bb96];
    }

    bb24: {
        StorageDead(_57);
        StorageDead(_54);
        _52 = <std::result::Result<PythLazerOracle, error::ErrorCode> as Try>::branch(move _53) -> [return: bb25, unwind: bb96];
    }

    bb25: {
        StorageDead(_53);
        _59 = discriminant(_52);
        switchInt(move _59) -> [0: bb26, 1: bb27, otherwise: bb6];
    }

    bb26: {
        StorageLive(_63);
        _63 = ((_52 as Continue).0: state::pyth_lazer_oracle::PythLazerOracle);
        _51 = _63;
        StorageDead(_63);
        StorageDead(_56);
        StorageDead(_52);
        StorageLive(_64);
        _64 = (_51.0: i64);
        _22 = move _64;
        StorageDead(_64);
        StorageLive(_65);
        _65 = (_51.0: i64);
        _23 = move _65;
        StorageDead(_65);
        StorageLive(_66);
        _66 = (_51.3: i32);
        _24 = move _66;
        StorageDead(_66);
        _25 = const ();
        StorageDead(_51);
        goto -> bb29;
    }

    bb27: {
        StorageLive(_60);
        _60 = ((_52 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_62);
        _62 = _60;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _62) -> [return: bb28, unwind: bb96];
    }

    bb28: {
        StorageDead(_62);
        StorageDead(_60);
        StorageDead(_56);
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_44);
        goto -> bb91;
    }

    bb29: {
        StorageDead(_44);
        goto -> bb30;
    }

    bb30: {
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = _23;
        StorageLive(_70);
        StorageLive(_71);
        _71 = _22;
        _72 = Eq(const 10_i64, const 0_i64);
        assert(!move _72, "attempt to divide `{}` by zero", _71) -> [success: bb31, unwind: bb96];
    }

    bb31: {
        _73 = Eq(const 10_i64, const -1_i64);
        _74 = Eq(_71, const i64::MIN);
        _75 = BitAnd(move _73, move _74);
        assert(!move _75, "attempt to compute `{} / {}`, which would overflow", _71, const 10_i64) -> [success: bb32, unwind: bb96];
    }

    bb32: {
        _70 = Div(move _71, const 10_i64);
        StorageDead(_71);
        _68 = Gt(move _69, move _70);
        switchInt(move _68) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        StorageDead(_70);
        StorageDead(_69);
        _67 = const ();
        StorageDead(_68);
        StorageDead(_67);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = _24;
        _81 = core::num::<impl i32>::unsigned_abs(move _82) -> [return: bb35, unwind: bb96];
    }

    bb34: {
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_76);
        _76 = panic(const "assertion failed: oracle_twap > oracle_price / 10") -> bb96;
    }

    bb35: {
        StorageDead(_82);
        _80 = core::num::<impl u128>::pow(const 10_u128, move _81) -> [return: bb36, unwind: bb96];
    }

    bb36: {
        StorageDead(_81);
        StorageLive(_83);
        _83 = _4;
        _79 = <u128 as SafeMath>::safe_div(move _80, move _83) -> [return: bb37, unwind: bb96];
    }

    bb37: {
        StorageDead(_83);
        StorageDead(_80);
        _78 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _79) -> [return: bb38, unwind: bb96];
    }

    bb38: {
        StorageDead(_79);
        _84 = discriminant(_78);
        switchInt(move _84) -> [0: bb39, 1: bb40, otherwise: bb6];
    }

    bb39: {
        StorageLive(_88);
        _88 = ((_78 as Continue).0: u128);
        _77 = _88;
        StorageDead(_88);
        StorageDead(_78);
        StorageLive(_89);
        _89 = const 1_u128;
        StorageLive(_90);
        _90 = const 1_u128;
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _93 = _77;
        _92 = Gt(move _93, const _);
        switchInt(move _92) -> [0: bb43, otherwise: bb42];
    }

    bb40: {
        StorageLive(_85);
        _85 = ((_78 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_87);
        _87 = _85;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _87) -> [return: bb41, unwind: bb96];
    }

    bb41: {
        StorageDead(_87);
        StorageDead(_85);
        StorageDead(_78);
        goto -> bb90;
    }

    bb42: {
        StorageDead(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = _77;
        _96 = <u128 as SafeMath>::safe_div(move _97, const _) -> [return: bb44, unwind: bb96];
    }

    bb43: {
        StorageDead(_93);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        _106 = _77;
        _105 = <u128 as SafeMath>::safe_div(const _, move _106) -> [return: bb49, unwind: bb96];
    }

    bb44: {
        StorageDead(_97);
        _95 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _96) -> [return: bb45, unwind: bb96];
    }

    bb45: {
        StorageDead(_96);
        _98 = discriminant(_95);
        switchInt(move _98) -> [0: bb46, 1: bb47, otherwise: bb6];
    }

    bb46: {
        StorageLive(_102);
        _102 = ((_95 as Continue).0: u128);
        _94 = _102;
        StorageDead(_102);
        _90 = move _94;
        StorageDead(_94);
        StorageDead(_95);
        _91 = const ();
        goto -> bb54;
    }

    bb47: {
        StorageLive(_99);
        _99 = ((_95 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_101);
        _101 = _99;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _101) -> [return: bb48, unwind: bb96];
    }

    bb48: {
        StorageDead(_101);
        StorageDead(_99);
        StorageDead(_94);
        StorageDead(_95);
        goto -> bb89;
    }

    bb49: {
        StorageDead(_106);
        _104 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _105) -> [return: bb50, unwind: bb96];
    }

    bb50: {
        StorageDead(_105);
        _107 = discriminant(_104);
        switchInt(move _107) -> [0: bb51, 1: bb52, otherwise: bb6];
    }

    bb51: {
        StorageLive(_111);
        _111 = ((_104 as Continue).0: u128);
        _103 = _111;
        StorageDead(_111);
        _89 = move _103;
        StorageDead(_103);
        StorageDead(_104);
        _91 = const ();
        goto -> bb54;
    }

    bb52: {
        StorageLive(_108);
        _108 = ((_104 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_110);
        _110 = _108;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _110) -> [return: bb53, unwind: bb96];
    }

    bb53: {
        StorageDead(_110);
        StorageDead(_108);
        StorageDead(_103);
        StorageDead(_104);
        goto -> bb89;
    }

    bb54: {
        StorageDead(_92);
        StorageDead(_91);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        _121 = _23;
        _120 = <i64 as Cast>::cast::<i128>(move _121) -> [return: bb55, unwind: bb96];
    }

    bb55: {
        StorageDead(_121);
        _119 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _120) -> [return: bb56, unwind: bb96];
    }

    bb56: {
        StorageDead(_120);
        _122 = discriminant(_119);
        switchInt(move _122) -> [0: bb57, 1: bb58, otherwise: bb6];
    }

    bb57: {
        StorageLive(_126);
        _126 = ((_119 as Continue).0: i128);
        _118 = _126;
        StorageDead(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _130 = _89;
        _129 = <u128 as Cast>::cast::<i128>(move _130) -> [return: bb60, unwind: bb96];
    }

    bb58: {
        StorageLive(_123);
        _123 = ((_119 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_125);
        _125 = _123;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _125) -> [return: bb59, unwind: bb96];
    }

    bb59: {
        StorageDead(_125);
        StorageDead(_123);
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_115);
        StorageDead(_114);
        StorageDead(_112);
        StorageDead(_90);
        StorageDead(_89);
        StorageDead(_77);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        drop(_10) -> [return: bb87, unwind: bb97];
    }

    bb60: {
        StorageDead(_130);
        _128 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _129) -> [return: bb61, unwind: bb96];
    }

    bb61: {
        StorageDead(_129);
        _131 = discriminant(_128);
        switchInt(move _131) -> [0: bb62, 1: bb63, otherwise: bb6];
    }

    bb62: {
        StorageLive(_135);
        _135 = ((_128 as Continue).0: i128);
        _127 = _135;
        StorageDead(_135);
        _117 = <i128 as SafeMath>::safe_mul(move _118, move _127) -> [return: bb65, unwind: bb96];
    }

    bb63: {
        StorageLive(_132);
        _132 = ((_128 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_134);
        _134 = _132;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _134) -> [return: bb64, unwind: bb96];
    }

    bb64: {
        StorageDead(_134);
        StorageDead(_132);
        StorageDead(_127);
        StorageDead(_118);
        StorageDead(_117);
        goto -> bb84;
    }

    bb65: {
        StorageDead(_127);
        StorageDead(_118);
        _116 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _117) -> [return: bb66, unwind: bb96];
    }

    bb66: {
        StorageDead(_117);
        _136 = discriminant(_116);
        switchInt(move _136) -> [0: bb67, 1: bb68, otherwise: bb6];
    }

    bb67: {
        StorageLive(_140);
        _140 = ((_116 as Continue).0: i128);
        _115 = _140;
        StorageDead(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        _144 = _90;
        _143 = <u128 as Cast>::cast::<i128>(move _144) -> [return: bb70, unwind: bb96];
    }

    bb68: {
        StorageLive(_137);
        _137 = ((_116 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_139);
        _139 = _137;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _139) -> [return: bb69, unwind: bb96];
    }

    bb69: {
        StorageDead(_139);
        StorageDead(_137);
        goto -> bb84;
    }

    bb70: {
        StorageDead(_144);
        _142 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _143) -> [return: bb71, unwind: bb96];
    }

    bb71: {
        StorageDead(_143);
        _145 = discriminant(_142);
        switchInt(move _145) -> [0: bb72, 1: bb73, otherwise: bb6];
    }

    bb72: {
        StorageLive(_149);
        _149 = ((_142 as Continue).0: i128);
        _141 = _149;
        StorageDead(_149);
        _114 = <i128 as SafeMath>::safe_div(move _115, move _141) -> [return: bb75, unwind: bb96];
    }

    bb73: {
        StorageLive(_146);
        _146 = ((_142 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_148);
        _148 = _146;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _148) -> [return: bb74, unwind: bb96];
    }

    bb74: {
        StorageDead(_148);
        StorageDead(_146);
        StorageDead(_141);
        StorageDead(_115);
        StorageDead(_114);
        goto -> bb82;
    }

    bb75: {
        StorageDead(_141);
        StorageDead(_115);
        _113 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _114) -> [return: bb76, unwind: bb96];
    }

    bb76: {
        StorageDead(_114);
        _150 = discriminant(_113);
        switchInt(move _150) -> [0: bb77, 1: bb78, otherwise: bb6];
    }

    bb77: {
        StorageLive(_154);
        _154 = ((_113 as Continue).0: i128);
        _112 = _154;
        StorageDead(_154);
        _0 = <i128 as Cast>::cast::<i64>(move _112) -> [return: bb80, unwind: bb96];
    }

    bb78: {
        StorageLive(_151);
        _151 = ((_113 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_153);
        _153 = _151;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _153) -> [return: bb79, unwind: bb96];
    }

    bb79: {
        StorageDead(_153);
        StorageDead(_151);
        goto -> bb82;
    }

    bb80: {
        StorageDead(_112);
        StorageDead(_90);
        StorageDead(_89);
        StorageDead(_77);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        drop(_10) -> [return: bb81, unwind: bb97];
    }

    bb81: {
        StorageDead(_10);
        StorageDead(_6);
        StorageDead(_4);
        StorageDead(_142);
        StorageDead(_128);
        StorageDead(_119);
        StorageDead(_116);
        StorageDead(_113);
        goto -> bb94;
    }

    bb82: {
        StorageDead(_112);
        StorageDead(_90);
        StorageDead(_89);
        StorageDead(_77);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        drop(_10) -> [return: bb83, unwind: bb97];
    }

    bb83: {
        StorageDead(_10);
        StorageDead(_6);
        StorageDead(_4);
        StorageDead(_142);
        goto -> bb86;
    }

    bb84: {
        StorageDead(_115);
        StorageDead(_114);
        StorageDead(_112);
        StorageDead(_90);
        StorageDead(_89);
        StorageDead(_77);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        drop(_10) -> [return: bb85, unwind: bb97];
    }

    bb85: {
        StorageDead(_10);
        StorageDead(_6);
        StorageDead(_4);
        goto -> bb86;
    }

    bb86: {
        StorageDead(_128);
        goto -> bb88;
    }

    bb87: {
        StorageDead(_10);
        StorageDead(_6);
        StorageDead(_4);
        goto -> bb88;
    }

    bb88: {
        StorageDead(_119);
        StorageDead(_116);
        StorageDead(_113);
        goto -> bb94;
    }

    bb89: {
        StorageDead(_92);
        StorageDead(_91);
        StorageDead(_90);
        StorageDead(_89);
        goto -> bb90;
    }

    bb90: {
        StorageDead(_77);
        goto -> bb92;
    }

    bb91: {
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb92;
    }

    bb92: {
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        drop(_10) -> [return: bb93, unwind: bb97];
    }

    bb93: {
        StorageDead(_10);
        StorageDead(_6);
        StorageDead(_4);
        goto -> bb94;
    }

    bb94: {
        return;
    }

    bb95 (cleanup): {
        _160 = discriminant(_11);
        goto -> bb96;
    }

    bb96 (cleanup): {
        drop(_10) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        resume;
    }

    bb98 (cleanup): {
        _161 = discriminant(_11);
        goto -> bb97;
    }
}
