// MIR for `instructions::user::<impl at programs/drift/src/instructions/user.rs:4434:10: 4434:18>::exit` after PreCodegen

fn instructions::user::<impl at programs/drift/src/instructions/user.rs:4434:10: 4434:18>::exit(_1: &instructions::user::UpdateUser<'_>, _2: &anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {
    debug self => _1;
    debug program_id => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _5: std::result::Result<(), anchor_lang::error::Error>;
    let mut _6: std::result::Result<(), anchor_lang::error::Error>;
    let mut _7: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _8: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _9: &anchor_lang::prelude::Pubkey;
    let mut _10: {closure@programs/drift/src/instructions/user.rs:4434:10: 4434:18};
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _15: ();
    let mut _16: ();
    let mut _17: isize;
    let mut _18: isize;
    let mut _19: isize;
    let mut _20: isize;
    let mut _21: isize;
    scope 1 {
        debug residual => _12;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _15;
        scope 4 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &((*_1).0: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _7 = &(*_8);
        StorageLive(_9);
        _9 = &(*_2);
        _6 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::AccountsExit<'_>>::exit(move _7, move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        StorageDead(_7);
        StorageLive(_10);
        _10 = {closure@programs/drift/src/instructions/user.rs:4434:10: 4434:18};
        _5 = std::result::Result::<(), anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4434:10: 4434:18}>(move _6, move _10) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_6);
        _4 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb3, unwind: bb9];
    }

    bb3: {
        StorageDead(_5);
        _11 = discriminant(_4);
        switchInt(move _11) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_15);
        _15 = ((_4 as Continue).0: ());
        _3 = _15;
        StorageDead(_15);
        _17 = discriminant(_4);
        StorageDead(_8);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_16);
        _16 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _16);
        StorageDead(_16);
        goto -> bb8;
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_12);
        _12 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_14);
        _14 = move _12;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _14) -> [return: bb7, unwind: bb10];
    }

    bb7: {
        StorageDead(_14);
        StorageDead(_12);
        _19 = discriminant(_4);
        StorageDead(_8);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb8;
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        resume;
    }

    bb10 (cleanup): {
        _21 = discriminant(_4);
        goto -> bb9;
    }
}
