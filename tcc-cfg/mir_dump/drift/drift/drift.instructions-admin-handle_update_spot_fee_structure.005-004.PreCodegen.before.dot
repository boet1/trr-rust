digraph Mir_0_1090 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn admin::handle_update_spot_fee_structure(_1: anchor_lang::context::Context&lt;ReErased, ReErased, ReErased, ReErased, instructions::admin::AdminUpdateState&lt;ReErased&gt;&gt;, _2: state::state::FeeStructure) -&gt; std::result::Result&lt;(), anchor_lang::error::Error&gt;<br align="left"/>let _3: ();<br align="left"/>let mut _4: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _5: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _6: &amp;ReErased state::state::FeeStructure;<br align="left"/>let _7: &amp;ReErased state::state::FeeStructure;<br align="left"/>let mut _8: isize;<br align="left"/>let _9: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _10: !;<br align="left"/>let mut _11: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _12: ();<br align="left"/>let _13: ();<br align="left"/>let mut _14: &amp;ReErased str;<br align="left"/>let _15: &amp;ReErased str;<br align="left"/>let mut _16: &amp;ReErased std::string::String;<br align="left"/>let _17: &amp;ReErased std::string::String;<br align="left"/>let _18: std::string::String;<br align="left"/>let _19: std::string::String;<br align="left"/>let mut _20: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _21: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _22: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _23: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _24: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _25: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _26: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 2_usize];<br align="left"/>let _27: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 2_usize];<br align="left"/>let _28: [core::fmt::rt::Argument&lt;ReErased&gt;; 2_usize];<br align="left"/>let mut _29: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _30: &amp;ReErased state::state::FeeStructure;<br align="left"/>let _31: &amp;ReErased state::state::FeeStructure;<br align="left"/>let _32: &amp;ReErased state::state::State;<br align="left"/>let mut _33: &amp;ReErased anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;;<br align="left"/>let mut _34: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _35: &amp;ReErased state::state::FeeStructure;<br align="left"/>let _36: &amp;ReErased state::state::FeeStructure;<br align="left"/>let mut _37: state::state::FeeStructure;<br align="left"/>let mut _38: &amp;ReErased mut state::state::State;<br align="left"/>let mut _39: &amp;ReErased mut anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;;<br align="left"/>let mut _40: ();<br align="left"/>let mut _41: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _42: &amp;ReErased mut instructions::admin::AdminUpdateState&lt;ReErased&gt;;<br align="left"/>let mut _43: std::boxed::Box&lt;anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;, std::alloc::Global&gt;;<br align="left"/>let mut _44: &amp;ReErased mut instructions::admin::AdminUpdateState&lt;ReErased&gt;;<br align="left"/>let mut _45: std::boxed::Box&lt;anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;, std::alloc::Global&gt;;<br align="left"/>let mut _46: *const anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;;<br align="left"/>let mut _47: *const anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;;<br align="left"/>debug ctx =&gt; _1;<br align="left"/>debug fee_structure =&gt; _2;<br align="left"/>debug residual =&gt; _9;<br align="left"/>debug val =&gt; _12;<br align="left"/>debug res =&gt; _19;<br align="left"/>>;
    bb0__0_1090 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>_7 = &amp;_2<br/>_6 = &amp;(*_7)<br/></td></tr><tr><td align="left">_5 = validate_fee_structure(move _6)</td></tr></table>>];
    bb1__0_1090 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/></td></tr><tr><td align="left">_4 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _5)</td></tr></table>>];
    bb2__0_1090 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>_8 = discriminant(_4)<br/></td></tr><tr><td align="left">switchInt(move _8)</td></tr></table>>];
    bb3__0_1090 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_12)<br/>_12 = ((_4 as Continue).0: ())<br/>_3 = _12<br/>StorageDead(_12)<br/>StorageDead(_7)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>_41 = const _<br/>_23 = &amp;(*_41)<br/>_22 = &amp;(*_23)<br/>_21 = move _22 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_22)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>_42 = deref_copy (_1.1: &amp;mut instructions::admin::AdminUpdateState&lt;'_&gt;)<br/>_43 = deref_copy ((*_42).1: std::boxed::Box&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;)<br/>_46 = (((_43.0: std::ptr::Unique&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;).0: std::ptr::NonNull&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;).0: *const anchor_lang::prelude::Account&lt;'_, state::state::State&gt;)<br/>_33 = &amp;(*_46)<br/></td></tr><tr><td align="left">_32 = &lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt; as Deref&gt;::deref(move _33)</td></tr></table>>];
    bb4__0_1090 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_1090 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_9)<br/>_9 = ((_4 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_11)<br/>_11 = _9<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _11)</td></tr></table>>];
    bb6__0_1090 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_9)<br/>StorageDead(_7)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_1090 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>_31 = &amp;((*_32).6: state::state::FeeStructure)<br/>_30 = &amp;(*_31)<br/></td></tr><tr><td align="left">_29 = core::fmt::rt::Argument::&lt;'_&gt;::new_debug::&lt;state::state::FeeStructure&gt;(move _30)</td></tr></table>>];
    bb8__0_1090 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>StorageLive(_36)<br/>_36 = &amp;_2<br/>_35 = &amp;(*_36)<br/></td></tr><tr><td align="left">_34 = core::fmt::rt::Argument::&lt;'_&gt;::new_debug::&lt;state::state::FeeStructure&gt;(move _35)</td></tr></table>>];
    bb9__0_1090 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_35)<br/>_28 = [move _29, move _34]<br/>StorageDead(_34)<br/>StorageDead(_29)<br/>_27 = &amp;_28<br/>_26 = &amp;(*_27)<br/>_25 = move _26 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_26)<br/></td></tr><tr><td align="left">_20 = Arguments::&lt;'_&gt;::new_v1(move _21, move _25)</td></tr></table>>];
    bb10__0_1090 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_21)<br/></td></tr><tr><td align="left">_19 = format(move _20)</td></tr></table>>];
    bb11__0_1090 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageDead(_36)<br/>StorageDead(_32)<br/>StorageDead(_31)<br/>StorageDead(_28)<br/>StorageDead(_27)<br/>StorageDead(_23)<br/>_18 = move _19<br/>StorageDead(_19)<br/>_17 = &amp;_18<br/>_16 = &amp;(*_17)<br/></td></tr><tr><td align="left">_15 = &lt;String as Deref&gt;::deref(move _16)</td></tr></table>>];
    bb12__0_1090 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">_14 = &amp;(*_15)<br/>StorageDead(_16)<br/></td></tr><tr><td align="left">_13 = solana_program::log::sol_log(move _14)</td></tr></table>>];
    bb13__0_1090 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/></td></tr><tr><td align="left">drop(_18)</td></tr></table>>];
    bb14__0_1090 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageDead(_17)<br/>StorageDead(_15)<br/>StorageDead(_13)<br/>StorageLive(_37)<br/>_37 = move _2<br/>StorageLive(_38)<br/>StorageLive(_39)<br/>_44 = deref_copy (_1.1: &amp;mut instructions::admin::AdminUpdateState&lt;'_&gt;)<br/>_45 = deref_copy ((*_44).1: std::boxed::Box&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;)<br/>_47 = (((_45.0: std::ptr::Unique&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;).0: std::ptr::NonNull&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;).0: *const anchor_lang::prelude::Account&lt;'_, state::state::State&gt;)<br/>_39 = &amp;mut (*_47)<br/></td></tr><tr><td align="left">_38 = &lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt; as DerefMut&gt;::deref_mut(move _39)</td></tr></table>>];
    bb15__0_1090 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_39)<br/>((*_38).6: state::state::FeeStructure) = move _37<br/>StorageDead(_37)<br/>StorageDead(_38)<br/>StorageLive(_40)<br/>_40 = ()<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Ok(move _40)<br/>StorageDead(_40)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb16__0_1090 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left">return</td></tr></table>>];
    bb17__0_1090 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">17 (cleanup)</td></tr><tr><td align="left">drop(_18)</td></tr></table>>];
    bb18__0_1090 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">18 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_1090 -> bb1__0_1090 [label="return"];
    bb1__0_1090 -> bb2__0_1090 [label="return"];
    bb2__0_1090 -> bb3__0_1090 [label="0"];
    bb2__0_1090 -> bb5__0_1090 [label="1"];
    bb2__0_1090 -> bb4__0_1090 [label="otherwise"];
    bb3__0_1090 -> bb7__0_1090 [label="return"];
    bb5__0_1090 -> bb6__0_1090 [label="return"];
    bb6__0_1090 -> bb16__0_1090 [label=""];
    bb7__0_1090 -> bb8__0_1090 [label="return"];
    bb8__0_1090 -> bb9__0_1090 [label="return"];
    bb9__0_1090 -> bb10__0_1090 [label="return"];
    bb10__0_1090 -> bb11__0_1090 [label="return"];
    bb11__0_1090 -> bb12__0_1090 [label="return"];
    bb11__0_1090 -> bb17__0_1090 [label="unwind"];
    bb12__0_1090 -> bb13__0_1090 [label="return"];
    bb12__0_1090 -> bb17__0_1090 [label="unwind"];
    bb13__0_1090 -> bb14__0_1090 [label="return"];
    bb13__0_1090 -> bb18__0_1090 [label="unwind"];
    bb14__0_1090 -> bb15__0_1090 [label="return"];
    bb15__0_1090 -> bb16__0_1090 [label=""];
    bb17__0_1090 -> bb18__0_1090 [label="return"];
}
