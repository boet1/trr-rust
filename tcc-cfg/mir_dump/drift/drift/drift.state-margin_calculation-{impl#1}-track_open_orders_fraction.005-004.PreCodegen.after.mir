// MIR for `margin_calculation::<impl at programs/drift/src/state/margin_calculation.rs:62:1: 62:19>::track_open_orders_fraction` after PreCodegen

fn margin_calculation::<impl at programs/drift/src/state/margin_calculation.rs:62:1: 62:19>::track_open_orders_fraction(_1: MarginContext) -> std::result::Result<MarginContext, error::ErrorCode> {
    debug self => _1;
    let mut _0: std::result::Result<state::margin_calculation::MarginContext, error::ErrorCode>;
    let _2: ();
    let mut _3: isize;
    let _4: &mut bool;
    let mut _5: !;
    let _6: ();
    let mut _7: &str;
    let _8: &str;
    let mut _9: error::ErrorCode;
    let mut _10: state::margin_calculation::MarginContext;
    scope 1 {
        debug track => _4;
    }

    bb0: {
        StorageLive(_2);
        _3 = discriminant((_1.1: state::margin_calculation::MarginCalculationMode));
        switchInt(move _3) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = const "Cant track open orders fraction outside of standard mode";
        _7 = &(*_8);
        _6 = solana_program::log::sol_log(move _7) -> [return: bb3, unwind continue];
    }

    bb2: {
        StorageLive(_4);
        _4 = &mut (((_1.1: state::margin_calculation::MarginCalculationMode) as Standard).0: bool);
        (*_4) = const true;
        _2 = const ();
        StorageDead(_4);
        StorageDead(_2);
        StorageLive(_10);
        _10 = _1;
        _0 = std::result::Result::<MarginContext, error::ErrorCode>::Ok(move _10);
        StorageDead(_10);
        goto -> bb4;
    }

    bb3: {
        StorageDead(_7);
        StorageDead(_8);
        StorageDead(_6);
        StorageLive(_9);
        _9 = error::ErrorCode::InvalidMarginCalculation;
        _0 = std::result::Result::<MarginContext, error::ErrorCode>::Err(move _9);
        StorageDead(_9);
        StorageDead(_2);
        goto -> bb4;
    }

    bb4: {
        return;
    }
}
