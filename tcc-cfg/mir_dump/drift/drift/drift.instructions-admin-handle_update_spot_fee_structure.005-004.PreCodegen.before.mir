// MIR for `admin::handle_update_spot_fee_structure` before PreCodegen

fn admin::handle_update_spot_fee_structure(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::AdminUpdateState<'_>>, _2: state::state::FeeStructure) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug fee_structure => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _5: std::result::Result<(), error::ErrorCode>;
    let mut _6: &state::state::FeeStructure;
    let _7: &state::state::FeeStructure;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _12: ();
    let _13: ();
    let mut _14: &str;
    let _15: &str;
    let mut _16: &std::string::String;
    let _17: &std::string::String;
    let _18: std::string::String;
    let _19: std::string::String;
    let mut _20: std::fmt::Arguments<'_>;
    let mut _21: &[&str];
    let mut _22: &[&str; 2];
    let _23: &[&str; 2];
    let _24: [&str; 2];
    let mut _25: &[core::fmt::rt::Argument<'_>];
    let mut _26: &[core::fmt::rt::Argument<'_>; 2];
    let _27: &[core::fmt::rt::Argument<'_>; 2];
    let _28: [core::fmt::rt::Argument<'_>; 2];
    let mut _29: core::fmt::rt::Argument<'_>;
    let mut _30: &state::state::FeeStructure;
    let _31: &state::state::FeeStructure;
    let _32: &state::state::State;
    let mut _33: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _34: core::fmt::rt::Argument<'_>;
    let mut _35: &state::state::FeeStructure;
    let _36: &state::state::FeeStructure;
    let mut _37: state::state::FeeStructure;
    let mut _38: &mut state::state::State;
    let mut _39: &mut anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _40: ();
    let mut _41: &[&str; 2];
    let mut _42: &mut instructions::admin::AdminUpdateState<'_>;
    let mut _43: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _44: &mut instructions::admin::AdminUpdateState<'_>;
    let mut _45: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _46: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _47: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug residual => _9;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _12;
        scope 4 {
        }
    }
    scope 5 {
        debug res => _19;
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &_2;
        _6 = &(*_7);
        _5 = validate_fee_structure(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_5);
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_4 as Continue).0: ());
        _3 = _12;
        StorageDead(_12);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _41 = const _;
        _23 = &(*_41);
        _22 = &(*_23);
        _21 = move _22 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_22);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _42 = deref_copy (_1.1: &mut instructions::admin::AdminUpdateState<'_>);
        _43 = deref_copy ((*_42).1: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _46 = (((_43.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _33 = &(*_46);
        _32 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _33) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_11);
        _11 = _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _11) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb16;
    }

    bb7: {
        StorageDead(_33);
        _31 = &((*_32).6: state::state::FeeStructure);
        _30 = &(*_31);
        _29 = core::fmt::rt::Argument::<'_>::new_debug::<state::state::FeeStructure>(move _30) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_30);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = &_2;
        _35 = &(*_36);
        _34 = core::fmt::rt::Argument::<'_>::new_debug::<state::state::FeeStructure>(move _35) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_35);
        _28 = [move _29, move _34];
        StorageDead(_34);
        StorageDead(_29);
        _27 = &_28;
        _26 = &(*_27);
        _25 = move _26 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_26);
        _20 = Arguments::<'_>::new_v1(move _21, move _25) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_25);
        StorageDead(_21);
        _19 = format(move _20) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_20);
        StorageDead(_36);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_23);
        _18 = move _19;
        StorageDead(_19);
        _17 = &_18;
        _16 = &(*_17);
        _15 = <String as Deref>::deref(move _16) -> [return: bb12, unwind: bb17];
    }

    bb12: {
        _14 = &(*_15);
        StorageDead(_16);
        _13 = solana_program::log::sol_log(move _14) -> [return: bb13, unwind: bb17];
    }

    bb13: {
        StorageDead(_14);
        drop(_18) -> [return: bb14, unwind: bb18];
    }

    bb14: {
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_13);
        StorageLive(_37);
        _37 = move _2;
        StorageLive(_38);
        StorageLive(_39);
        _44 = deref_copy (_1.1: &mut instructions::admin::AdminUpdateState<'_>);
        _45 = deref_copy ((*_44).1: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _47 = (((_45.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _39 = &mut (*_47);
        _38 = <anchor_lang::prelude::Account<'_, state::state::State> as DerefMut>::deref_mut(move _39) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_39);
        ((*_38).6: state::state::FeeStructure) = move _37;
        StorageDead(_37);
        StorageDead(_38);
        StorageLive(_40);
        _40 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _40);
        StorageDead(_40);
        goto -> bb16;
    }

    bb16: {
        return;
    }

    bb17 (cleanup): {
        drop(_18) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        resume;
    }
}
