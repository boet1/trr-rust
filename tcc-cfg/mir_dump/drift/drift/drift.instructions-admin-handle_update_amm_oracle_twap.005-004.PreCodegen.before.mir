// MIR for `admin::handle_update_amm_oracle_twap` before PreCodegen

fn admin::handle_update_amm_oracle_twap(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::RepegCurve<'_>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: ();
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _4: std::result::Result<(), anchor_lang::error::Error>;
    let mut _5: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let _6: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _11: ();
    let _12: ();
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _14: std::result::Result<(), anchor_lang::error::Error>;
    let mut _15: &anchor_lang::prelude::AccountInfo<'_>;
    let _16: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _17: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let _18: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _19: isize;
    let _20: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _21: !;
    let mut _22: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _23: ();
    let _24: anchor_lang::prelude::Clock;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _26: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _27: isize;
    let _28: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _29: !;
    let mut _30: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _31: anchor_lang::prelude::Clock;
    let mut _34: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _36: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _37: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _38: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _39: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _40: isize;
    let mut _42: !;
    let mut _43: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _45: ();
    let mut _46: &str;
    let _47: &str;
    let mut _48: &std::string::String;
    let _49: &std::string::String;
    let _50: std::string::String;
    let mut _52: std::fmt::Arguments<'_>;
    let mut _53: &[&str];
    let mut _54: &[&str; 1];
    let _55: &[&str; 1];
    let _56: [&str; 1];
    let mut _57: &[core::fmt::rt::Argument<'_>];
    let mut _58: &[core::fmt::rt::Argument<'_>; 1];
    let _59: &[core::fmt::rt::Argument<'_>; 1];
    let _60: [core::fmt::rt::Argument<'_>; 1];
    let mut _61: core::fmt::rt::Argument<'_>;
    let mut _62: &u16;
    let _63: &u16;
    let _64: &state::perp_market::PerpMarket;
    let mut _65: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _68: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::option::Option<i64>>;
    let mut _69: std::result::Result<std::option::Option<i64>, error::ErrorCode>;
    let mut _70: &state::perp_market::AMM;
    let _71: &state::perp_market::PerpMarket;
    let mut _72: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _73: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _74: u64;
    let mut _75: isize;
    let mut _77: !;
    let mut _78: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _80: ();
    let mut _81: isize;
    let mut _84: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _85: std::result::Result<i64, error::ErrorCode>;
    let mut _86: i64;
    let mut _87: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _88: std::result::Result<i64, error::ErrorCode>;
    let mut _89: u64;
    let mut _90: &state::perp_market::PerpMarket;
    let mut _91: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _92: isize;
    let mut _94: !;
    let mut _95: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _97: i64;
    let mut _98: &state::perp_market::PerpMarket;
    let mut _99: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _100: isize;
    let mut _102: !;
    let mut _103: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _106: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _107: std::result::Result<i64, error::ErrorCode>;
    let mut _108: i64;
    let mut _109: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _110: std::result::Result<i64, error::ErrorCode>;
    let mut _111: u64;
    let mut _112: &state::perp_market::PerpMarket;
    let mut _113: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _114: isize;
    let mut _116: !;
    let mut _117: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _119: i64;
    let mut _120: isize;
    let mut _122: !;
    let mut _123: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _125: bool;
    let mut _126: i64;
    let mut _127: bool;
    let mut _128: i64;
    let mut _129: bool;
    let mut _130: i64;
    let mut _131: bool;
    let mut _132: i64;
    let _133: ();
    let mut _134: &str;
    let _135: &str;
    let mut _136: &std::string::String;
    let _137: &std::string::String;
    let _138: std::string::String;
    let mut _140: std::fmt::Arguments<'_>;
    let mut _141: &[&str];
    let mut _142: &[&str; 2];
    let _143: &[&str; 2];
    let _144: [&str; 2];
    let mut _145: &[core::fmt::rt::Argument<'_>];
    let mut _146: &[core::fmt::rt::Argument<'_>; 2];
    let _147: &[core::fmt::rt::Argument<'_>; 2];
    let _148: [core::fmt::rt::Argument<'_>; 2];
    let mut _149: core::fmt::rt::Argument<'_>;
    let mut _150: &i64;
    let _151: &i64;
    let _152: &state::perp_market::PerpMarket;
    let mut _153: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _154: core::fmt::rt::Argument<'_>;
    let mut _155: &i64;
    let _156: &i64;
    let _157: i64;
    let mut _158: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _159: std::result::Result<i64, error::ErrorCode>;
    let mut _160: u64;
    let mut _161: &state::perp_market::PerpMarket;
    let mut _162: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _163: isize;
    let mut _165: !;
    let mut _166: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _168: ();
    let mut _169: &str;
    let _170: &str;
    let mut _171: &std::string::String;
    let _172: &std::string::String;
    let _173: std::string::String;
    let mut _175: std::fmt::Arguments<'_>;
    let mut _176: &[&str];
    let mut _177: &[&str; 2];
    let _178: &[&str; 2];
    let _179: [&str; 2];
    let mut _180: &[core::fmt::rt::Argument<'_>];
    let mut _181: &[core::fmt::rt::Argument<'_>; 2];
    let _182: &[core::fmt::rt::Argument<'_>; 2];
    let _183: [core::fmt::rt::Argument<'_>; 2];
    let mut _184: core::fmt::rt::Argument<'_>;
    let mut _185: &i64;
    let _186: &i64;
    let _187: &state::perp_market::PerpMarket;
    let mut _188: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _189: core::fmt::rt::Argument<'_>;
    let mut _190: &i64;
    let _191: &i64;
    let mut _192: i64;
    let mut _193: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _194: std::result::Result<i64, error::ErrorCode>;
    let mut _195: u64;
    let mut _196: &state::perp_market::PerpMarket;
    let mut _197: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _198: isize;
    let mut _200: !;
    let mut _201: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _203: &mut state::perp_market::PerpMarket;
    let mut _204: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _205: i64;
    let mut _206: &mut state::perp_market::PerpMarket;
    let mut _207: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _208: bool;
    let mut _209: u64;
    let mut _210: i64;
    let mut _211: u64;
    let mut _212: i64;
    let _213: ();
    let mut _214: &str;
    let _215: &str;
    let mut _216: &std::string::String;
    let _217: &std::string::String;
    let _218: std::string::String;
    let mut _220: std::fmt::Arguments<'_>;
    let mut _221: &[&str];
    let mut _222: &[&str; 2];
    let _223: &[&str; 2];
    let _224: [&str; 2];
    let mut _225: &[core::fmt::rt::Argument<'_>];
    let mut _226: &[core::fmt::rt::Argument<'_>; 2];
    let _227: &[core::fmt::rt::Argument<'_>; 2];
    let _228: [core::fmt::rt::Argument<'_>; 2];
    let mut _229: core::fmt::rt::Argument<'_>;
    let mut _230: &i64;
    let _231: &i64;
    let _232: &state::perp_market::PerpMarket;
    let mut _233: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _234: core::fmt::rt::Argument<'_>;
    let mut _235: &i64;
    let _236: &i64;
    let _237: ();
    let mut _238: &str;
    let _239: &str;
    let mut _240: &std::string::String;
    let _241: &std::string::String;
    let _242: std::string::String;
    let mut _244: std::fmt::Arguments<'_>;
    let mut _245: &[&str];
    let mut _246: &[&str; 2];
    let _247: &[&str; 2];
    let _248: [&str; 2];
    let mut _249: &[core::fmt::rt::Argument<'_>];
    let mut _250: &[core::fmt::rt::Argument<'_>; 2];
    let _251: &[core::fmt::rt::Argument<'_>; 2];
    let _252: [core::fmt::rt::Argument<'_>; 2];
    let mut _253: core::fmt::rt::Argument<'_>;
    let mut _254: &i64;
    let _255: &i64;
    let _256: &state::perp_market::PerpMarket;
    let mut _257: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _258: core::fmt::rt::Argument<'_>;
    let mut _259: &i64;
    let _260: &i64;
    let mut _261: i64;
    let mut _262: &mut state::perp_market::PerpMarket;
    let mut _263: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _264: i64;
    let mut _265: &mut state::perp_market::PerpMarket;
    let mut _266: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _267: !;
    let mut _268: anchor_lang::error::Error;
    let mut _269: error::ErrorCode;
    let mut _270: !;
    let mut _271: anchor_lang::error::Error;
    let mut _272: error::ErrorCode;
    let mut _273: ();
    let mut _279: &mut instructions::admin::RepegCurve<'_>;
    let mut _280: &mut instructions::admin::RepegCurve<'_>;
    let mut _281: &mut instructions::admin::RepegCurve<'_>;
    let mut _282: &mut instructions::admin::RepegCurve<'_>;
    let mut _283: &mut instructions::admin::RepegCurve<'_>;
    let mut _284: isize;
    let mut _285: isize;
    let mut _286: isize;
    let mut _287: isize;
    let mut _288: isize;
    let mut _289: isize;
    let mut _290: isize;
    let mut _291: isize;
    let mut _292: isize;
    let mut _293: isize;
    let mut _294: isize;
    let mut _295: isize;
    let mut _296: isize;
    let mut _297: isize;
    let mut _298: isize;
    let mut _299: isize;
    let mut _300: isize;
    let mut _301: isize;
    let mut _302: isize;
    let mut _303: isize;
    scope 1 {
        debug residual => _8;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _11;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _20;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _23;
        scope 8 {
        }
    }
    scope 9 {
        debug clock => _24;
        let _32: i64;
        scope 14 {
            debug now => _32;
            let _33: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
            let _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _44: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
            scope 15 {
                debug perp_market => _33;
                let _51: std::string::String;
                let _66: &anchor_lang::prelude::AccountInfo<'_>;
                let mut _278: &[&str; 1];
                scope 20 {
                    debug res => _51;
                }
                scope 21 {
                    debug price_oracle => _66;
                    let _67: std::option::Option<i64>;
                    let _76: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _79: std::option::Option<i64>;
                    scope 22 {
                        debug oracle_twap => _67;
                        scope 27 {
                            debug oracle_twap => _82;
                            let _82: i64;
                            let _83: i64;
                            let _93: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _96: i64;
                            let _101: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _104: i64;
                            scope 28 {
                                debug oracle_mark_gap_before => _83;
                                let _105: i64;
                                let _115: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _118: i64;
                                let _121: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _124: i64;
                                scope 37 {
                                    debug oracle_mark_gap_after => _105;
                                    let _139: std::string::String;
                                    let _164: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _167: i64;
                                    let _174: std::string::String;
                                    let _199: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _202: i64;
                                    let _219: std::string::String;
                                    let _243: std::string::String;
                                    let mut _274: &[&str; 2];
                                    let mut _275: &[&str; 2];
                                    let mut _276: &[&str; 2];
                                    let mut _277: &[&str; 2];
                                    scope 46 {
                                        debug res => _139;
                                    }
                                    scope 47 {
                                        debug residual => _164;
                                        scope 48 {
                                        }
                                    }
                                    scope 49 {
                                        debug val => _167;
                                        scope 50 {
                                        }
                                    }
                                    scope 51 {
                                        debug res => _174;
                                    }
                                    scope 52 {
                                        debug residual => _199;
                                        scope 53 {
                                        }
                                    }
                                    scope 54 {
                                        debug val => _202;
                                        scope 55 {
                                        }
                                    }
                                    scope 56 {
                                        debug res => _219;
                                    }
                                    scope 57 {
                                        debug res => _243;
                                    }
                                }
                                scope 38 {
                                    debug residual => _115;
                                    scope 39 {
                                    }
                                }
                                scope 40 {
                                    debug val => _118;
                                    scope 41 {
                                    }
                                }
                                scope 42 {
                                    debug residual => _121;
                                    scope 43 {
                                    }
                                }
                                scope 44 {
                                    debug val => _124;
                                    scope 45 {
                                    }
                                }
                            }
                            scope 29 {
                                debug residual => _93;
                                scope 30 {
                                }
                            }
                            scope 31 {
                                debug val => _96;
                                scope 32 {
                                }
                            }
                            scope 33 {
                                debug residual => _101;
                                scope 34 {
                                }
                            }
                            scope 35 {
                                debug val => _104;
                                scope 36 {
                                }
                            }
                        }
                    }
                    scope 23 {
                        debug residual => _76;
                        scope 24 {
                        }
                    }
                    scope 25 {
                        debug val => _79;
                        scope 26 {
                        }
                    }
                }
            }
            scope 16 {
                debug residual => _41;
                scope 17 {
                }
            }
            scope 18 {
                debug val => _44;
                scope 19 {
                }
            }
        }
    }
    scope 10 {
        debug residual => _28;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _31;
        scope 13 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _279 = deref_copy (_1.1: &mut instructions::admin::RepegCurve<'_>);
        _6 = &((*_279).1: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _5 = &(*_6);
        _4 = constraints::perp_market_valid(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        _3 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _4) -> [return: bb2, unwind: bb143];
    }

    bb2: {
        StorageDead(_4);
        _7 = discriminant(_3);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = ((_3 as Continue).0: ());
        _2 = _11;
        StorageDead(_11);
        _284 = discriminant(_3);
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _280 = deref_copy (_1.1: &mut instructions::admin::RepegCurve<'_>);
        _16 = &((*_280).2: anchor_lang::prelude::AccountInfo<'_>);
        _15 = &(*_16);
        StorageLive(_17);
        StorageLive(_18);
        _281 = deref_copy (_1.1: &mut instructions::admin::RepegCurve<'_>);
        _18 = &((*_281).1: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _17 = &(*_18);
        _14 = constraints::valid_oracle_for_perp_market(move _15, move _17) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_10);
        _10 = move _8;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _10) -> [return: bb6, unwind: bb147];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        _298 = discriminant(_3);
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb136;
    }

    bb7: {
        StorageDead(_17);
        StorageDead(_15);
        _13 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _14) -> [return: bb8, unwind: bb143];
    }

    bb8: {
        StorageDead(_14);
        _19 = discriminant(_13);
        switchInt(move _19) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_23);
        _23 = ((_13 as Continue).0: ());
        _12 = _23;
        StorageDead(_23);
        _286 = discriminant(_13);
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_12);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_20);
        _20 = move ((_13 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_22);
        _22 = move _20;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _22) -> [return: bb11, unwind: bb146];
    }

    bb11: {
        StorageDead(_22);
        StorageDead(_20);
        _296 = discriminant(_13);
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb136;
    }

    bb12: {
        _25 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _26) -> [return: bb13, unwind: bb143];
    }

    bb13: {
        StorageDead(_26);
        _27 = discriminant(_25);
        switchInt(move _27) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_31);
        _31 = move ((_25 as Continue).0: anchor_lang::prelude::Clock);
        _24 = move _31;
        StorageDead(_31);
        _288 = discriminant(_25);
        StorageDead(_25);
        StorageLive(_32);
        _32 = (_24.4: i64);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _282 = deref_copy (_1.1: &mut instructions::admin::RepegCurve<'_>);
        _38 = &((*_282).1: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _37 = anchor_lang::prelude::AccountLoader::<'_, PerpMarket>::load_mut(move _38) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_28);
        _28 = move ((_25 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_30);
        _30 = move _28;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _30) -> [return: bb16, unwind: bb145];
    }

    bb16: {
        StorageDead(_30);
        StorageDead(_28);
        _294 = discriminant(_25);
        StorageDead(_25);
        goto -> bb135;
    }

    bb17: {
        StorageDead(_38);
        StorageLive(_39);
        _39 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _36 = std::result::Result::<RefMut<'_, PerpMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _37, move _39) -> [return: bb18, unwind: bb143];
    }

    bb18: {
        StorageDead(_39);
        StorageDead(_37);
        _35 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _36) -> [return: bb19, unwind: bb143];
    }

    bb19: {
        StorageDead(_36);
        _40 = discriminant(_35);
        switchInt(move _40) -> [0: bb20, 1: bb21, otherwise: bb4];
    }

    bb20: {
        StorageLive(_44);
        _44 = move ((_35 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _34 = move _44;
        StorageDead(_44);
        _33 = &mut _34;
        _292 = discriminant(_35);
        StorageDead(_35);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _278 = const _;
        _55 = &(*_278);
        _54 = &(*_55);
        _53 = move _54 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_54);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = &(*_33);
        _64 = <RefMut<'_, PerpMarket> as Deref>::deref(move _65) -> [return: bb23, unwind: bb142];
    }

    bb21: {
        StorageLive(_41);
        _41 = ((_35 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_43);
        _43 = _41;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _43) -> [return: bb22, unwind: bb144];
    }

    bb22: {
        StorageDead(_43);
        StorageDead(_41);
        _290 = discriminant(_35);
        StorageDead(_35);
        goto -> bb134;
    }

    bb23: {
        StorageDead(_65);
        _63 = &((*_64).21: u16);
        _62 = &(*_63);
        _61 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _62) -> [return: bb24, unwind: bb142];
    }

    bb24: {
        StorageDead(_62);
        _60 = [move _61];
        StorageDead(_61);
        _59 = &_60;
        _58 = &(*_59);
        _57 = move _58 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_58);
        _52 = Arguments::<'_>::new_v1(move _53, move _57) -> [return: bb25, unwind: bb142];
    }

    bb25: {
        StorageDead(_57);
        StorageDead(_53);
        _51 = format(move _52) -> [return: bb26, unwind: bb142];
    }

    bb26: {
        StorageDead(_52);
        StorageDead(_64);
        StorageDead(_63);
        StorageDead(_60);
        StorageDead(_59);
        StorageDead(_55);
        _50 = move _51;
        StorageDead(_51);
        _49 = &_50;
        _48 = &(*_49);
        _47 = <String as Deref>::deref(move _48) -> [return: bb27, unwind: bb141];
    }

    bb27: {
        _46 = &(*_47);
        StorageDead(_48);
        _45 = solana_program::log::sol_log(move _46) -> [return: bb28, unwind: bb141];
    }

    bb28: {
        StorageDead(_46);
        drop(_50) -> [return: bb29, unwind: bb142];
    }

    bb29: {
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_45);
        StorageLive(_66);
        _283 = deref_copy (_1.1: &mut instructions::admin::RepegCurve<'_>);
        _66 = &((*_283).2: anchor_lang::prelude::AccountInfo<'_>);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        _72 = &(*_33);
        _71 = <RefMut<'_, PerpMarket> as Deref>::deref(move _72) -> [return: bb30, unwind: bb142];
    }

    bb30: {
        StorageDead(_72);
        _70 = &((*_71).1: state::perp_market::AMM);
        StorageLive(_73);
        _73 = &(*_66);
        StorageLive(_74);
        _74 = (_24.0: u64);
        _69 = AMM::get_oracle_twap(move _70, move _73, move _74) -> [return: bb31, unwind: bb142];
    }

    bb31: {
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_70);
        _68 = <std::result::Result<Option<i64>, error::ErrorCode> as Try>::branch(move _69) -> [return: bb32, unwind: bb142];
    }

    bb32: {
        StorageDead(_69);
        _75 = discriminant(_68);
        switchInt(move _75) -> [0: bb33, 1: bb34, otherwise: bb4];
    }

    bb33: {
        StorageLive(_79);
        _79 = ((_68 as Continue).0: std::option::Option<i64>);
        _67 = _79;
        StorageDead(_79);
        StorageDead(_71);
        StorageDead(_68);
        StorageLive(_80);
        _81 = discriminant(_67);
        switchInt(move _81) -> [1: bb37, otherwise: bb36];
    }

    bb34: {
        StorageLive(_76);
        _76 = ((_68 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_78);
        _78 = _76;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _78) -> [return: bb35, unwind: bb142];
    }

    bb35: {
        StorageDead(_78);
        StorageDead(_76);
        StorageDead(_71);
        StorageDead(_68);
        goto -> bb133;
    }

    bb36: {
        StorageLive(_271);
        StorageLive(_272);
        _272 = error::ErrorCode::InvalidOracle;
        _271 = <error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _272) -> [return: bb125, unwind: bb142];
    }

    bb37: {
        StorageLive(_82);
        _82 = ((_67 as Some).0: i64);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = &(*_33);
        _90 = <RefMut<'_, PerpMarket> as Deref>::deref(move _91) -> [return: bb38, unwind: bb142];
    }

    bb38: {
        StorageDead(_91);
        _89 = (((*_90).1: state::perp_market::AMM).45: u64);
        _88 = <u64 as Cast>::cast::<i64>(move _89) -> [return: bb39, unwind: bb142];
    }

    bb39: {
        StorageDead(_89);
        _87 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _88) -> [return: bb40, unwind: bb142];
    }

    bb40: {
        StorageDead(_88);
        _92 = discriminant(_87);
        switchInt(move _92) -> [0: bb41, 1: bb42, otherwise: bb4];
    }

    bb41: {
        StorageLive(_96);
        _96 = ((_87 as Continue).0: i64);
        _86 = _96;
        StorageDead(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = &(*_33);
        _98 = <RefMut<'_, PerpMarket> as Deref>::deref(move _99) -> [return: bb44, unwind: bb142];
    }

    bb42: {
        StorageLive(_93);
        _93 = ((_87 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_95);
        _95 = _93;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _95) -> [return: bb43, unwind: bb142];
    }

    bb43: {
        StorageDead(_95);
        StorageDead(_93);
        StorageDead(_86);
        StorageDead(_85);
        goto -> bb130;
    }

    bb44: {
        StorageDead(_99);
        _97 = ((((*_98).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).3: i64);
        _85 = <i64 as SafeMath>::safe_sub(move _86, move _97) -> [return: bb45, unwind: bb142];
    }

    bb45: {
        StorageDead(_97);
        StorageDead(_86);
        _84 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _85) -> [return: bb46, unwind: bb142];
    }

    bb46: {
        StorageDead(_85);
        _100 = discriminant(_84);
        switchInt(move _100) -> [0: bb47, 1: bb48, otherwise: bb4];
    }

    bb47: {
        StorageLive(_104);
        _104 = ((_84 as Continue).0: i64);
        _83 = _104;
        StorageDead(_104);
        StorageDead(_98);
        StorageDead(_90);
        StorageDead(_87);
        StorageDead(_84);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        _113 = &(*_33);
        _112 = <RefMut<'_, PerpMarket> as Deref>::deref(move _113) -> [return: bb50, unwind: bb142];
    }

    bb48: {
        StorageLive(_101);
        _101 = ((_84 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_103);
        _103 = _101;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _103) -> [return: bb49, unwind: bb142];
    }

    bb49: {
        StorageDead(_103);
        StorageDead(_101);
        StorageDead(_98);
        goto -> bb130;
    }

    bb50: {
        StorageDead(_113);
        _111 = (((*_112).1: state::perp_market::AMM).45: u64);
        _110 = <u64 as Cast>::cast::<i64>(move _111) -> [return: bb51, unwind: bb142];
    }

    bb51: {
        StorageDead(_111);
        _109 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _110) -> [return: bb52, unwind: bb142];
    }

    bb52: {
        StorageDead(_110);
        _114 = discriminant(_109);
        switchInt(move _114) -> [0: bb53, 1: bb54, otherwise: bb4];
    }

    bb53: {
        StorageLive(_118);
        _118 = ((_109 as Continue).0: i64);
        _108 = _118;
        StorageDead(_118);
        StorageLive(_119);
        _119 = _82;
        _107 = <i64 as SafeMath>::safe_sub(move _108, move _119) -> [return: bb56, unwind: bb142];
    }

    bb54: {
        StorageLive(_115);
        _115 = ((_109 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_117);
        _117 = _115;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _117) -> [return: bb55, unwind: bb142];
    }

    bb55: {
        StorageDead(_117);
        StorageDead(_115);
        StorageDead(_108);
        StorageDead(_107);
        goto -> bb128;
    }

    bb56: {
        StorageDead(_119);
        StorageDead(_108);
        _106 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _107) -> [return: bb57, unwind: bb142];
    }

    bb57: {
        StorageDead(_107);
        _120 = discriminant(_106);
        switchInt(move _120) -> [0: bb58, 1: bb59, otherwise: bb4];
    }

    bb58: {
        StorageLive(_124);
        _124 = ((_106 as Continue).0: i64);
        _105 = _124;
        StorageDead(_124);
        StorageDead(_112);
        StorageDead(_109);
        StorageDead(_106);
        StorageLive(_125);
        StorageLive(_126);
        _126 = _105;
        _125 = Gt(move _126, const 0_i64);
        switchInt(move _125) -> [0: bb62, otherwise: bb61];
    }

    bb59: {
        StorageLive(_121);
        _121 = ((_106 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_123);
        _123 = _121;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _123) -> [return: bb60, unwind: bb142];
    }

    bb60: {
        StorageDead(_123);
        StorageDead(_121);
        goto -> bb128;
    }

    bb61: {
        StorageDead(_126);
        StorageLive(_127);
        StorageLive(_128);
        _128 = _83;
        _127 = Lt(move _128, const 0_i64);
        switchInt(move _127) -> [0: bb64, otherwise: bb63];
    }

    bb62: {
        StorageDead(_126);
        goto -> bb65;
    }

    bb63: {
        StorageDead(_128);
        goto -> bb67;
    }

    bb64: {
        StorageDead(_128);
        goto -> bb65;
    }

    bb65: {
        StorageLive(_129);
        StorageLive(_130);
        _130 = _105;
        _129 = Lt(move _130, const 0_i64);
        switchInt(move _129) -> [0: bb99, otherwise: bb66];
    }

    bb66: {
        StorageDead(_130);
        StorageLive(_131);
        StorageLive(_132);
        _132 = _83;
        _131 = Gt(move _132, const 0_i64);
        switchInt(move _131) -> [0: bb98, otherwise: bb67];
    }

    bb67: {
        StorageDead(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        _275 = const _;
        _143 = &(*_275);
        _142 = &(*_143);
        _141 = move _142 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_142);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        _153 = &(*_33);
        _152 = <RefMut<'_, PerpMarket> as Deref>::deref(move _153) -> [return: bb68, unwind: bb142];
    }

    bb68: {
        StorageDead(_153);
        _151 = &((((*_152).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).3: i64);
        _150 = &(*_151);
        _149 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _150) -> [return: bb69, unwind: bb142];
    }

    bb69: {
        StorageDead(_150);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        _162 = &(*_33);
        _161 = <RefMut<'_, PerpMarket> as Deref>::deref(move _162) -> [return: bb70, unwind: bb142];
    }

    bb70: {
        StorageDead(_162);
        _160 = (((*_161).1: state::perp_market::AMM).45: u64);
        _159 = <u64 as Cast>::cast::<i64>(move _160) -> [return: bb71, unwind: bb142];
    }

    bb71: {
        StorageDead(_160);
        _158 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _159) -> [return: bb72, unwind: bb142];
    }

    bb72: {
        StorageDead(_159);
        _163 = discriminant(_158);
        switchInt(move _163) -> [0: bb73, 1: bb74, otherwise: bb4];
    }

    bb73: {
        StorageLive(_167);
        _167 = ((_158 as Continue).0: i64);
        _157 = _167;
        StorageDead(_167);
        _156 = &_157;
        _155 = &(*_156);
        _154 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _155) -> [return: bb76, unwind: bb142];
    }

    bb74: {
        StorageLive(_164);
        _164 = ((_158 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_166);
        _166 = _164;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _166) -> [return: bb75, unwind: bb142];
    }

    bb75: {
        StorageDead(_166);
        StorageDead(_164);
        StorageDead(_155);
        StorageDead(_154);
        StorageDead(_149);
        StorageDead(_146);
        StorageDead(_145);
        StorageDead(_141);
        StorageDead(_140);
        StorageDead(_161);
        StorageDead(_158);
        StorageDead(_157);
        StorageDead(_156);
        StorageDead(_152);
        StorageDead(_151);
        StorageDead(_148);
        StorageDead(_147);
        StorageDead(_143);
        StorageDead(_139);
        StorageDead(_136);
        StorageDead(_134);
        StorageDead(_138);
        StorageDead(_137);
        StorageDead(_135);
        StorageDead(_133);
        goto -> bb127;
    }

    bb76: {
        StorageDead(_155);
        _148 = [move _149, move _154];
        StorageDead(_154);
        StorageDead(_149);
        _147 = &_148;
        _146 = &(*_147);
        _145 = move _146 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_146);
        _140 = Arguments::<'_>::new_v1(move _141, move _145) -> [return: bb77, unwind: bb142];
    }

    bb77: {
        StorageDead(_145);
        StorageDead(_141);
        _139 = format(move _140) -> [return: bb78, unwind: bb142];
    }

    bb78: {
        StorageDead(_140);
        StorageDead(_161);
        StorageDead(_158);
        StorageDead(_157);
        StorageDead(_156);
        StorageDead(_152);
        StorageDead(_151);
        StorageDead(_148);
        StorageDead(_147);
        StorageDead(_143);
        _138 = move _139;
        StorageDead(_139);
        _137 = &_138;
        _136 = &(*_137);
        _135 = <String as Deref>::deref(move _136) -> [return: bb79, unwind: bb140];
    }

    bb79: {
        _134 = &(*_135);
        StorageDead(_136);
        _133 = solana_program::log::sol_log(move _134) -> [return: bb80, unwind: bb140];
    }

    bb80: {
        StorageDead(_134);
        drop(_138) -> [return: bb81, unwind: bb142];
    }

    bb81: {
        StorageDead(_138);
        StorageDead(_137);
        StorageDead(_135);
        StorageDead(_133);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        _274 = const _;
        _178 = &(*_274);
        _177 = &(*_178);
        _176 = move _177 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_177);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        _188 = &(*_33);
        _187 = <RefMut<'_, PerpMarket> as Deref>::deref(move _188) -> [return: bb82, unwind: bb142];
    }

    bb82: {
        StorageDead(_188);
        _186 = &((((*_187).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).5: i64);
        _185 = &(*_186);
        _184 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _185) -> [return: bb83, unwind: bb142];
    }

    bb83: {
        StorageDead(_185);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        _191 = &_32;
        _190 = &(*_191);
        _189 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _190) -> [return: bb84, unwind: bb142];
    }

    bb84: {
        StorageDead(_190);
        _183 = [move _184, move _189];
        StorageDead(_189);
        StorageDead(_184);
        _182 = &_183;
        _181 = &(*_182);
        _180 = move _181 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_181);
        _175 = Arguments::<'_>::new_v1(move _176, move _180) -> [return: bb85, unwind: bb142];
    }

    bb85: {
        StorageDead(_180);
        StorageDead(_176);
        _174 = format(move _175) -> [return: bb86, unwind: bb142];
    }

    bb86: {
        StorageDead(_175);
        StorageDead(_191);
        StorageDead(_187);
        StorageDead(_186);
        StorageDead(_183);
        StorageDead(_182);
        StorageDead(_178);
        _173 = move _174;
        StorageDead(_174);
        _172 = &_173;
        _171 = &(*_172);
        _170 = <String as Deref>::deref(move _171) -> [return: bb87, unwind: bb139];
    }

    bb87: {
        _169 = &(*_170);
        StorageDead(_171);
        _168 = solana_program::log::sol_log(move _169) -> [return: bb88, unwind: bb139];
    }

    bb88: {
        StorageDead(_169);
        drop(_173) -> [return: bb89, unwind: bb142];
    }

    bb89: {
        StorageDead(_173);
        StorageDead(_172);
        StorageDead(_170);
        StorageDead(_168);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        _197 = &(*_33);
        _196 = <RefMut<'_, PerpMarket> as Deref>::deref(move _197) -> [return: bb90, unwind: bb142];
    }

    bb90: {
        StorageDead(_197);
        _195 = (((*_196).1: state::perp_market::AMM).45: u64);
        _194 = <u64 as Cast>::cast::<i64>(move _195) -> [return: bb91, unwind: bb142];
    }

    bb91: {
        StorageDead(_195);
        _193 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _194) -> [return: bb92, unwind: bb142];
    }

    bb92: {
        StorageDead(_194);
        _198 = discriminant(_193);
        switchInt(move _198) -> [0: bb93, 1: bb94, otherwise: bb4];
    }

    bb93: {
        StorageLive(_202);
        _202 = ((_193 as Continue).0: i64);
        _192 = _202;
        StorageDead(_202);
        StorageLive(_203);
        StorageLive(_204);
        _204 = &mut (*_33);
        _203 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _204) -> [return: bb96, unwind: bb142];
    }

    bb94: {
        StorageLive(_199);
        _199 = ((_193 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_201);
        _201 = _199;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _201) -> [return: bb95, unwind: bb142];
    }

    bb95: {
        StorageDead(_201);
        StorageDead(_199);
        StorageDead(_192);
        StorageDead(_196);
        StorageDead(_193);
        goto -> bb127;
    }

    bb96: {
        StorageDead(_204);
        ((((*_203).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).3: i64) = move _192;
        StorageDead(_192);
        StorageDead(_203);
        StorageDead(_196);
        StorageDead(_193);
        StorageLive(_205);
        _205 = _32;
        StorageLive(_206);
        StorageLive(_207);
        _207 = &mut (*_33);
        _206 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _207) -> [return: bb97, unwind: bb142];
    }

    bb97: {
        StorageDead(_207);
        ((((*_206).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).5: i64) = move _205;
        StorageDead(_205);
        StorageDead(_206);
        _80 = const ();
        goto -> bb124;
    }

    bb98: {
        StorageDead(_132);
        goto -> bb100;
    }

    bb99: {
        StorageDead(_130);
        goto -> bb100;
    }

    bb100: {
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        _210 = _105;
        _209 = core::num::<impl i64>::unsigned_abs(move _210) -> [return: bb101, unwind: bb142];
    }

    bb101: {
        StorageDead(_210);
        StorageLive(_211);
        StorageLive(_212);
        _212 = _83;
        _211 = core::num::<impl i64>::unsigned_abs(move _212) -> [return: bb102, unwind: bb142];
    }

    bb102: {
        StorageDead(_212);
        _208 = Le(move _209, move _211);
        switchInt(move _208) -> [0: bb122, otherwise: bb103];
    }

    bb103: {
        StorageDead(_211);
        StorageDead(_209);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        _277 = const _;
        _223 = &(*_277);
        _222 = &(*_223);
        _221 = move _222 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_222);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        _233 = &(*_33);
        _232 = <RefMut<'_, PerpMarket> as Deref>::deref(move _233) -> [return: bb104, unwind: bb142];
    }

    bb104: {
        StorageDead(_233);
        _231 = &((((*_232).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).3: i64);
        _230 = &(*_231);
        _229 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _230) -> [return: bb105, unwind: bb142];
    }

    bb105: {
        StorageDead(_230);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        _236 = &_82;
        _235 = &(*_236);
        _234 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _235) -> [return: bb106, unwind: bb142];
    }

    bb106: {
        StorageDead(_235);
        _228 = [move _229, move _234];
        StorageDead(_234);
        StorageDead(_229);
        _227 = &_228;
        _226 = &(*_227);
        _225 = move _226 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_226);
        _220 = Arguments::<'_>::new_v1(move _221, move _225) -> [return: bb107, unwind: bb142];
    }

    bb107: {
        StorageDead(_225);
        StorageDead(_221);
        _219 = format(move _220) -> [return: bb108, unwind: bb142];
    }

    bb108: {
        StorageDead(_220);
        StorageDead(_236);
        StorageDead(_232);
        StorageDead(_231);
        StorageDead(_228);
        StorageDead(_227);
        StorageDead(_223);
        _218 = move _219;
        StorageDead(_219);
        _217 = &_218;
        _216 = &(*_217);
        _215 = <String as Deref>::deref(move _216) -> [return: bb109, unwind: bb138];
    }

    bb109: {
        _214 = &(*_215);
        StorageDead(_216);
        _213 = solana_program::log::sol_log(move _214) -> [return: bb110, unwind: bb138];
    }

    bb110: {
        StorageDead(_214);
        drop(_218) -> [return: bb111, unwind: bb142];
    }

    bb111: {
        StorageDead(_218);
        StorageDead(_217);
        StorageDead(_215);
        StorageDead(_213);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        _276 = const _;
        _247 = &(*_276);
        _246 = &(*_247);
        _245 = move _246 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_246);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        _257 = &(*_33);
        _256 = <RefMut<'_, PerpMarket> as Deref>::deref(move _257) -> [return: bb112, unwind: bb142];
    }

    bb112: {
        StorageDead(_257);
        _255 = &((((*_256).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).5: i64);
        _254 = &(*_255);
        _253 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _254) -> [return: bb113, unwind: bb142];
    }

    bb113: {
        StorageDead(_254);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        _260 = &_32;
        _259 = &(*_260);
        _258 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _259) -> [return: bb114, unwind: bb142];
    }

    bb114: {
        StorageDead(_259);
        _252 = [move _253, move _258];
        StorageDead(_258);
        StorageDead(_253);
        _251 = &_252;
        _250 = &(*_251);
        _249 = move _250 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_250);
        _244 = Arguments::<'_>::new_v1(move _245, move _249) -> [return: bb115, unwind: bb142];
    }

    bb115: {
        StorageDead(_249);
        StorageDead(_245);
        _243 = format(move _244) -> [return: bb116, unwind: bb142];
    }

    bb116: {
        StorageDead(_244);
        StorageDead(_260);
        StorageDead(_256);
        StorageDead(_255);
        StorageDead(_252);
        StorageDead(_251);
        StorageDead(_247);
        _242 = move _243;
        StorageDead(_243);
        _241 = &_242;
        _240 = &(*_241);
        _239 = <String as Deref>::deref(move _240) -> [return: bb117, unwind: bb137];
    }

    bb117: {
        _238 = &(*_239);
        StorageDead(_240);
        _237 = solana_program::log::sol_log(move _238) -> [return: bb118, unwind: bb137];
    }

    bb118: {
        StorageDead(_238);
        drop(_242) -> [return: bb119, unwind: bb142];
    }

    bb119: {
        StorageDead(_242);
        StorageDead(_241);
        StorageDead(_239);
        StorageDead(_237);
        StorageLive(_261);
        _261 = _82;
        StorageLive(_262);
        StorageLive(_263);
        _263 = &mut (*_33);
        _262 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _263) -> [return: bb120, unwind: bb142];
    }

    bb120: {
        StorageDead(_263);
        ((((*_262).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).3: i64) = move _261;
        StorageDead(_261);
        StorageDead(_262);
        StorageLive(_264);
        _264 = _32;
        StorageLive(_265);
        StorageLive(_266);
        _266 = &mut (*_33);
        _265 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _266) -> [return: bb121, unwind: bb142];
    }

    bb121: {
        StorageDead(_266);
        ((((*_265).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).5: i64) = move _264;
        StorageDead(_264);
        StorageDead(_265);
        _80 = const ();
        StorageDead(_208);
        goto -> bb124;
    }

    bb122: {
        StorageDead(_211);
        StorageDead(_209);
        StorageLive(_268);
        StorageLive(_269);
        _269 = error::ErrorCode::PriceBandsBreached;
        _268 = <error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _269) -> [return: bb123, unwind: bb142];
    }

    bb123: {
        StorageDead(_269);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _268);
        StorageDead(_268);
        StorageDead(_208);
        goto -> bb127;
    }

    bb124: {
        StorageDead(_131);
        StorageDead(_129);
        StorageDead(_127);
        StorageDead(_125);
        StorageDead(_105);
        StorageDead(_83);
        StorageDead(_82);
        StorageDead(_80);
        StorageLive(_273);
        _273 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _273);
        StorageDead(_273);
        StorageDead(_67);
        StorageDead(_66);
        drop(_34) -> [return: bb126, unwind: bb143];
    }

    bb125: {
        StorageDead(_272);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _271);
        StorageDead(_271);
        goto -> bb132;
    }

    bb126: {
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_24);
        goto -> bb136;
    }

    bb127: {
        StorageDead(_131);
        StorageDead(_129);
        StorageDead(_127);
        StorageDead(_125);
        goto -> bb129;
    }

    bb128: {
        StorageDead(_112);
        StorageDead(_109);
        StorageDead(_106);
        goto -> bb129;
    }

    bb129: {
        StorageDead(_105);
        goto -> bb131;
    }

    bb130: {
        StorageDead(_90);
        StorageDead(_87);
        StorageDead(_84);
        goto -> bb131;
    }

    bb131: {
        StorageDead(_83);
        StorageDead(_82);
        goto -> bb132;
    }

    bb132: {
        StorageDead(_80);
        goto -> bb133;
    }

    bb133: {
        StorageDead(_67);
        StorageDead(_66);
        drop(_34) -> [return: bb134, unwind: bb143];
    }

    bb134: {
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_32);
        goto -> bb135;
    }

    bb135: {
        StorageDead(_24);
        goto -> bb136;
    }

    bb136: {
        return;
    }

    bb137 (cleanup): {
        drop(_242) -> [return: bb142, unwind terminate(cleanup)];
    }

    bb138 (cleanup): {
        drop(_218) -> [return: bb142, unwind terminate(cleanup)];
    }

    bb139 (cleanup): {
        drop(_173) -> [return: bb142, unwind terminate(cleanup)];
    }

    bb140 (cleanup): {
        drop(_138) -> [return: bb142, unwind terminate(cleanup)];
    }

    bb141 (cleanup): {
        drop(_50) -> [return: bb142, unwind terminate(cleanup)];
    }

    bb142 (cleanup): {
        drop(_34) -> [return: bb143, unwind terminate(cleanup)];
    }

    bb143 (cleanup): {
        resume;
    }

    bb144 (cleanup): {
        _300 = discriminant(_35);
        goto -> bb143;
    }

    bb145 (cleanup): {
        _301 = discriminant(_25);
        goto -> bb143;
    }

    bb146 (cleanup): {
        _302 = discriminant(_13);
        goto -> bb143;
    }

    bb147 (cleanup): {
        _303 = discriminant(_3);
        goto -> bb143;
    }
}
