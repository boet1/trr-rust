// MIR for `openbook_v2::<impl at programs/drift/src/state/fulfillment_params/openbook_v2.rs:36:10: 36:17>::default` after PreCodegen

fn openbook_v2::<impl at programs/drift/src/state/fulfillment_params/openbook_v2.rs:36:10: 36:17>::default() -> OpenbookV2FulfillmentConfig {
    let mut _0: state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig;
    let mut _1: anchor_lang::prelude::Pubkey;
    let mut _2: anchor_lang::prelude::Pubkey;
    let mut _3: anchor_lang::prelude::Pubkey;
    let mut _4: anchor_lang::prelude::Pubkey;
    let mut _5: anchor_lang::prelude::Pubkey;
    let mut _6: anchor_lang::prelude::Pubkey;
    let mut _7: anchor_lang::prelude::Pubkey;
    let mut _8: anchor_lang::prelude::Pubkey;
    let mut _9: anchor_lang::prelude::Pubkey;
    let mut _10: u16;
    let mut _11: instructions::keeper::SpotFulfillmentType;
    let mut _12: state::spot_market::SpotFulfillmentConfigStatus;
    let mut _13: [u8; 4];

    bb0: {
        StorageLive(_1);
        _1 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_2);
        _2 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageLive(_3);
        _3 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageLive(_4);
        _4 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageLive(_5);
        _5 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageLive(_6);
        _6 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageLive(_7);
        _7 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageLive(_8);
        _8 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageLive(_9);
        _9 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageLive(_10);
        _10 = <u16 as Default>::default() -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageLive(_11);
        _11 = <keeper::SpotFulfillmentType as Default>::default() -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageLive(_12);
        _12 = <state::spot_market::SpotFulfillmentConfigStatus as Default>::default() -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageLive(_13);
        _13 = <[u8; 4] as Default>::default() -> [return: bb13, unwind continue];
    }

    bb13: {
        _0 = OpenbookV2FulfillmentConfig { pubkey: move _1, openbook_v2_program_id: move _2, openbook_v2_market: move _3, openbook_v2_market_authority: move _4, openbook_v2_event_heap: move _5, openbook_v2_bids: move _6, openbook_v2_asks: move _7, openbook_v2_base_vault: move _8, openbook_v2_quote_vault: move _9, market_index: move _10, fulfillment_type: move _11, status: move _12, padding: move _13 };
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}
