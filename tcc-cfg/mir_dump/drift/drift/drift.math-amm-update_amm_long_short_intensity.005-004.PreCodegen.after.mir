// MIR for `update_amm_long_short_intensity` after PreCodegen

fn update_amm_long_short_intensity(_1: &mut AMM, _2: i64, _3: u64, _4: controller::position::PositionDirection) -> std::result::Result<bool, error::ErrorCode> {
    debug amm => _1;
    debug now => _2;
    debug quote_asset_amount => _3;
    debug direction => _4;
    let mut _0: std::result::Result<bool, error::ErrorCode>;
    let _5: i64;
    let mut _6: i64;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _8: std::result::Result<i64, error::ErrorCode>;
    let mut _9: i64;
    let mut _10: i64;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _15: i64;
    let mut _18: (u64, u64);
    let mut _19: bool;
    let mut _20: &controller::position::PositionDirection;
    let mut _21: &controller::position::PositionDirection;
    let _22: controller::position::PositionDirection;
    let mut _23: u64;
    let mut _24: u64;
    let mut _25: u64;
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _27: std::result::Result<u64, error::ErrorCode>;
    let mut _28: u64;
    let mut _29: u64;
    let mut _30: i64;
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _36: u64;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _38: std::result::Result<u64, error::ErrorCode>;
    let mut _39: u64;
    let mut _40: u64;
    let mut _41: i64;
    let mut _42: isize;
    let mut _44: !;
    let mut _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    scope 1 {
        debug since_last => _5;
        let _16: u64;
        let _17: u64;
        let mut _47: &controller::position::PositionDirection;
        scope 6 {
            debug long_quote_amount => _16;
            debug short_quote_amount => _17;
            let _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _35: u64;
            let _43: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _46: u64;
            scope 7 {
                debug residual => _32;
                scope 8 {
                }
            }
            scope 9 {
                debug val => _35;
                scope 10 {
                }
            }
            scope 11 {
                debug residual => _43;
                scope 12 {
                }
            }
            scope 13 {
                debug val => _46;
                scope 14 {
                }
            }
        }
    }
    scope 2 {
        debug residual => _12;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _15;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = _2;
        StorageLive(_10);
        _10 = ((*_1).59: i64);
        _8 = <i64 as SafeMath>::safe_sub(move _9, move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_10);
        StorageDead(_9);
        _7 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_8);
        _11 = discriminant(_7);
        switchInt(move _11) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_15);
        _15 = ((_7 as Continue).0: i64);
        _6 = _15;
        StorageDead(_15);
        _5 = std::cmp::max::<i64>(const 1_i64, move _6) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_12);
        _12 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_6);
        StorageDead(_7);
        goto -> bb23;
    }

    bb7: {
        StorageDead(_6);
        StorageDead(_7);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = &_4;
        StorageLive(_21);
        _47 = const _;
        _21 = &(*_47);
        _19 = <controller::position::PositionDirection as PartialEq>::eq(move _20, move _21) -> [return: bb8, unwind continue];
    }

    bb8: {
        switchInt(move _19) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        StorageDead(_21);
        StorageDead(_20);
        StorageLive(_23);
        _23 = _3;
        _18 = (move _23, const 0_u64);
        StorageDead(_23);
        goto -> bb11;
    }

    bb10: {
        StorageDead(_21);
        StorageDead(_20);
        StorageLive(_24);
        _24 = _3;
        _18 = (const 0_u64, move _24);
        StorageDead(_24);
        goto -> bb11;
    }

    bb11: {
        StorageDead(_19);
        StorageLive(_16);
        _16 = (_18.0: u64);
        StorageLive(_17);
        _17 = (_18.1: u64);
        StorageDead(_18);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = ((*_1).57: u64);
        StorageLive(_29);
        _29 = _16;
        StorageLive(_30);
        _30 = _5;
        _27 = calculate_rolling_sum(move _28, move _29, move _30, const _) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_28);
        _26 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _27) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_27);
        _31 = discriminant(_26);
        switchInt(move _31) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_35);
        _35 = ((_26 as Continue).0: u64);
        _25 = _35;
        StorageDead(_35);
        ((*_1).57: u64) = move _25;
        StorageDead(_25);
        StorageDead(_26);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = ((*_1).58: u64);
        StorageLive(_40);
        _40 = _17;
        StorageLive(_41);
        _41 = _5;
        _38 = calculate_rolling_sum(move _39, move _40, move _41, const _) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_32);
        _32 = ((_26 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_34);
        _34 = _32;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _34) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_34);
        StorageDead(_32);
        StorageDead(_25);
        StorageDead(_26);
        goto -> bb22;
    }

    bb17: {
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        _37 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _38) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_38);
        _42 = discriminant(_37);
        switchInt(move _42) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_46);
        _46 = ((_37 as Continue).0: u64);
        _36 = _46;
        StorageDead(_46);
        ((*_1).58: u64) = move _36;
        StorageDead(_36);
        StorageDead(_37);
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(const true);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_5);
        goto -> bb24;
    }

    bb20: {
        StorageLive(_43);
        _43 = ((_37 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_45);
        _45 = _43;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _45) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_45);
        StorageDead(_43);
        StorageDead(_36);
        StorageDead(_37);
        goto -> bb22;
    }

    bb22: {
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb23;
    }

    bb23: {
        StorageDead(_5);
        goto -> bb24;
    }

    bb24: {
        return;
    }
}
