// MIR for `state::state::<impl at programs/drift/src/state/state.rs:227:55: 227:60>::clone` after PreCodegen

fn state::state::<impl at programs/drift/src/state/state.rs:227:55: 227:60>::clone(_1: &OrderFillerRewardStructure) -> OrderFillerRewardStructure {
    debug self => _1;
    let mut _0: state::state::OrderFillerRewardStructure;
    let mut _2: u32;
    let mut _3: &u32;
    let _4: &u32;
    let mut _5: u32;
    let mut _6: &u32;
    let _7: &u32;
    let mut _8: u128;
    let mut _9: &u128;
    let _10: &u128;

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = &((*_1).0: u32);
        _3 = &(*_4);
        _2 = <u32 as Clone>::clone(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_3);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &((*_1).1: u32);
        _6 = &(*_7);
        _5 = <u32 as Clone>::clone(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &((*_1).2: u128);
        _9 = &(*_10);
        _8 = <u128 as Clone>::clone(move _9) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_9);
        _0 = OrderFillerRewardStructure { reward_numerator: move _2, reward_denominator: move _5, time_based_reward_lower_bound: move _8 };
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_2);
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_4);
        return;
    }
}
