// MIR for `instructions::user::<impl at programs/drift/src/instructions/user.rs:4463:10: 4463:18>::exit` after PreCodegen

fn instructions::user::<impl at programs/drift/src/instructions/user.rs:4463:10: 4463:18>::exit(_1: &instructions::user::DeleteUser<'_>, _2: &anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {
    debug self => _1;
    debug program_id => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let _4: &anchor_lang::prelude::Signer<'_>;
    let _5: ();
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _7: std::result::Result<(), anchor_lang::error::Error>;
    let mut _8: std::result::Result<(), anchor_lang::error::Error>;
    let mut _9: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _10: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _11: anchor_lang::prelude::AccountInfo<'_>;
    let mut _12: &anchor_lang::prelude::Signer<'_>;
    let mut _13: {closure@programs/drift/src/instructions/user.rs:4463:10: 4463:18};
    let mut _14: isize;
    let mut _16: !;
    let mut _17: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _19: ();
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _21: std::result::Result<(), anchor_lang::error::Error>;
    let mut _22: std::result::Result<(), anchor_lang::error::Error>;
    let mut _23: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let _24: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _25: &anchor_lang::prelude::Pubkey;
    let mut _26: {closure@programs/drift/src/instructions/user.rs:4463:10: 4463:18};
    let mut _27: isize;
    let _28: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _29: !;
    let mut _30: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _31: ();
    let _32: ();
    let mut _33: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _34: std::result::Result<(), anchor_lang::error::Error>;
    let mut _35: std::result::Result<(), anchor_lang::error::Error>;
    let mut _36: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let _37: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _38: &anchor_lang::prelude::Pubkey;
    let mut _39: {closure@programs/drift/src/instructions/user.rs:4463:10: 4463:18};
    let mut _40: isize;
    let _41: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _42: !;
    let mut _43: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _44: ();
    let _45: ();
    let mut _46: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _47: std::result::Result<(), anchor_lang::error::Error>;
    let mut _48: std::result::Result<(), anchor_lang::error::Error>;
    let mut _49: &anchor_lang::prelude::Signer<'_>;
    let _50: &anchor_lang::prelude::Signer<'_>;
    let mut _51: &anchor_lang::prelude::Pubkey;
    let mut _52: {closure@programs/drift/src/instructions/user.rs:4463:10: 4463:18};
    let mut _53: isize;
    let _54: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _55: !;
    let mut _56: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _57: ();
    let mut _58: ();
    let mut _59: isize;
    let mut _60: isize;
    let mut _61: isize;
    let mut _62: isize;
    let mut _63: isize;
    let mut _64: isize;
    let mut _65: isize;
    let mut _66: isize;
    let mut _67: isize;
    let mut _68: isize;
    let mut _69: isize;
    let mut _70: isize;
    let mut _71: isize;
    let mut _72: isize;
    let mut _73: isize;
    let mut _74: isize;
    let mut _75: isize;
    let mut _76: isize;
    let mut _77: isize;
    let mut _78: isize;
    scope 1 {
        debug authority => _4;
        let _15: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _18: ();
        scope 2 {
            debug residual => _15;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _18;
            scope 5 {
            }
        }
    }
    scope 6 {
        debug residual => _28;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _31;
        scope 9 {
        }
    }
    scope 10 {
        debug residual => _41;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _44;
        scope 13 {
        }
    }
    scope 14 {
        debug residual => _54;
        scope 15 {
        }
    }
    scope 16 {
        debug val => _57;
        scope 17 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = &((*_1).3: anchor_lang::prelude::Signer<'_>);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &((*_1).0: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _9 = &(*_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &(*_4);
        _11 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_12);
        _8 = <anchor_lang::prelude::AccountLoader<'_, User> as AccountsClose<'_>>::close(move _9, move _11) -> [return: bb2, unwind: bb28];
    }

    bb2: {
        StorageDead(_11);
        StorageDead(_9);
        StorageLive(_13);
        _13 = {closure@programs/drift/src/instructions/user.rs:4463:10: 4463:18};
        _7 = std::result::Result::<(), anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4463:10: 4463:18}>(move _8, move _13) -> [return: bb3, unwind: bb28];
    }

    bb3: {
        StorageDead(_13);
        StorageDead(_8);
        _6 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _7) -> [return: bb4, unwind: bb28];
    }

    bb4: {
        StorageDead(_7);
        _14 = discriminant(_6);
        switchInt(move _14) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_18);
        _18 = ((_6 as Continue).0: ());
        _5 = _18;
        StorageDead(_18);
        _59 = discriminant(_6);
        StorageDead(_10);
        StorageDead(_6);
        StorageDead(_5);
        _3 = const ();
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &((*_1).1: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _23 = &(*_24);
        StorageLive(_25);
        _25 = &(*_2);
        _22 = <anchor_lang::prelude::AccountLoader<'_, UserStats> as anchor_lang::AccountsExit<'_>>::exit(move _23, move _25) -> [return: bb9, unwind continue];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_15);
        _15 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_17);
        _17 = move _15;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _17) -> [return: bb8, unwind: bb32];
    }

    bb8: {
        StorageDead(_17);
        StorageDead(_15);
        _73 = discriminant(_6);
        StorageDead(_10);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb27;
    }

    bb9: {
        StorageDead(_25);
        StorageDead(_23);
        StorageLive(_26);
        _26 = {closure@programs/drift/src/instructions/user.rs:4463:10: 4463:18};
        _21 = std::result::Result::<(), anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4463:10: 4463:18}>(move _22, move _26) -> [return: bb10, unwind: bb28];
    }

    bb10: {
        StorageDead(_26);
        StorageDead(_22);
        _20 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _21) -> [return: bb11, unwind: bb28];
    }

    bb11: {
        StorageDead(_21);
        _27 = discriminant(_20);
        switchInt(move _27) -> [0: bb12, 1: bb13, otherwise: bb6];
    }

    bb12: {
        StorageLive(_31);
        _31 = ((_20 as Continue).0: ());
        _19 = _31;
        StorageDead(_31);
        _61 = discriminant(_20);
        StorageDead(_24);
        StorageDead(_20);
        StorageDead(_19);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &((*_1).2: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _36 = &(*_37);
        StorageLive(_38);
        _38 = &(*_2);
        _35 = <Box<anchor_lang::prelude::Account<'_, state::state::State>> as anchor_lang::AccountsExit<'_>>::exit(move _36, move _38) -> [return: bb15, unwind continue];
    }

    bb13: {
        StorageLive(_28);
        _28 = move ((_20 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_30);
        _30 = move _28;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _30) -> [return: bb14, unwind: bb31];
    }

    bb14: {
        StorageDead(_30);
        StorageDead(_28);
        _71 = discriminant(_20);
        StorageDead(_24);
        StorageDead(_20);
        StorageDead(_19);
        goto -> bb27;
    }

    bb15: {
        StorageDead(_38);
        StorageDead(_36);
        StorageLive(_39);
        _39 = {closure@programs/drift/src/instructions/user.rs:4463:10: 4463:18};
        _34 = std::result::Result::<(), anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4463:10: 4463:18}>(move _35, move _39) -> [return: bb16, unwind: bb28];
    }

    bb16: {
        StorageDead(_39);
        StorageDead(_35);
        _33 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _34) -> [return: bb17, unwind: bb28];
    }

    bb17: {
        StorageDead(_34);
        _40 = discriminant(_33);
        switchInt(move _40) -> [0: bb18, 1: bb19, otherwise: bb6];
    }

    bb18: {
        StorageLive(_44);
        _44 = ((_33 as Continue).0: ());
        _32 = _44;
        StorageDead(_44);
        _63 = discriminant(_33);
        StorageDead(_37);
        StorageDead(_33);
        StorageDead(_32);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = &((*_1).3: anchor_lang::prelude::Signer<'_>);
        _49 = &(*_50);
        StorageLive(_51);
        _51 = &(*_2);
        _48 = <anchor_lang::prelude::Signer<'_> as anchor_lang::AccountsExit<'_>>::exit(move _49, move _51) -> [return: bb21, unwind continue];
    }

    bb19: {
        StorageLive(_41);
        _41 = move ((_33 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_43);
        _43 = move _41;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _43) -> [return: bb20, unwind: bb30];
    }

    bb20: {
        StorageDead(_43);
        StorageDead(_41);
        _69 = discriminant(_33);
        StorageDead(_37);
        StorageDead(_33);
        StorageDead(_32);
        goto -> bb27;
    }

    bb21: {
        StorageDead(_51);
        StorageDead(_49);
        StorageLive(_52);
        _52 = {closure@programs/drift/src/instructions/user.rs:4463:10: 4463:18};
        _47 = std::result::Result::<(), anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4463:10: 4463:18}>(move _48, move _52) -> [return: bb22, unwind: bb28];
    }

    bb22: {
        StorageDead(_52);
        StorageDead(_48);
        _46 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _47) -> [return: bb23, unwind: bb28];
    }

    bb23: {
        StorageDead(_47);
        _53 = discriminant(_46);
        switchInt(move _53) -> [0: bb24, 1: bb25, otherwise: bb6];
    }

    bb24: {
        StorageLive(_57);
        _57 = ((_46 as Continue).0: ());
        _45 = _57;
        StorageDead(_57);
        _65 = discriminant(_46);
        StorageDead(_50);
        StorageDead(_46);
        StorageDead(_45);
        StorageLive(_58);
        _58 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _58);
        StorageDead(_58);
        goto -> bb27;
    }

    bb25: {
        StorageLive(_54);
        _54 = move ((_46 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_56);
        _56 = move _54;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _56) -> [return: bb26, unwind: bb29];
    }

    bb26: {
        StorageDead(_56);
        StorageDead(_54);
        _67 = discriminant(_46);
        StorageDead(_50);
        StorageDead(_46);
        StorageDead(_45);
        goto -> bb27;
    }

    bb27: {
        return;
    }

    bb28 (cleanup): {
        resume;
    }

    bb29 (cleanup): {
        _75 = discriminant(_46);
        goto -> bb28;
    }

    bb30 (cleanup): {
        _76 = discriminant(_33);
        goto -> bb28;
    }

    bb31 (cleanup): {
        _77 = discriminant(_20);
        goto -> bb28;
    }

    bb32 (cleanup): {
        _78 = discriminant(_6);
        goto -> bb28;
    }
}
