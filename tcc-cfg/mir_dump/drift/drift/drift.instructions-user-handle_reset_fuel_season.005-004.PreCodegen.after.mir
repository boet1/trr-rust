// MIR for `instructions::user::handle_reset_fuel_season` after PreCodegen

fn instructions::user::handle_reset_fuel_season(_1: anchor_lang::context::Context<'_, '_, '_, '_, instructions::user::ResetFuelSeason<'_>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let mut _2: std::cell::RefMut<'_, state::user::UserStats>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _4: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, error::ErrorCode>;
    let mut _5: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let _7: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _8: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _13: std::cell::RefMut<'_, state::user::UserStats>;
    let mut _15: &anchor_lang::context::Context<'_, '_, '_, '_, instructions::user::ResetFuelSeason<'_>>;
    let _16: ();
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _18: std::result::Result<(), error::ErrorCode>;
    let mut _19: &state::user::UserStats;
    let _20: &state::user::UserStats;
    let mut _21: &std::cell::RefMut<'_, state::user::UserStats>;
    let mut _22: &std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::FuelOverflow>>;
    let _23: &std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::FuelOverflow>>;
    let mut _24: isize;
    let mut _26: !;
    let mut _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _30: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _31: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _32: isize;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _37: ();
    let mut _38: isize;
    let mut _41: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::FuelOverflow>>;
    let mut _42: std::result::Result<std::cell::RefMut<'_, state::user::FuelOverflow>, error::ErrorCode>;
    let mut _43: std::result::Result<std::cell::RefMut<'_, state::user::FuelOverflow>, anchor_lang::error::Error>;
    let mut _44: &anchor_lang::prelude::AccountLoader<'_, state::user::FuelOverflow>;
    let mut _45: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _51: ();
    let _52: ();
    let mut _53: &[&[u8]];
    let mut _54: &[&[u8]; 1];
    let _55: &[&[u8]; 1];
    let _56: [&[u8]; 1];
    let mut _57: &[u8];
    let _58: &[u8];
    let mut _59: &std::vec::Vec<u8>;
    let _60: &std::vec::Vec<u8>;
    let _61: std::vec::Vec<u8>;
    let mut _62: &state::events::FuelSweepRecord;
    let _63: &state::events::FuelSweepRecord;
    let _64: state::events::FuelSweepRecord;
    let mut _65: i64;
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _67: std::result::Result<i64, error::ErrorCode>;
    let mut _68: i64;
    let mut _69: isize;
    let mut _71: !;
    let mut _72: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _74: anchor_lang::prelude::Pubkey;
    let mut _75: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _76: u32;
    let mut _77: &state::user::UserStats;
    let mut _78: &std::cell::RefMut<'_, state::user::UserStats>;
    let mut _79: u32;
    let mut _80: &state::user::UserStats;
    let mut _81: &std::cell::RefMut<'_, state::user::UserStats>;
    let mut _82: u32;
    let mut _83: &state::user::UserStats;
    let mut _84: &std::cell::RefMut<'_, state::user::UserStats>;
    let mut _85: u32;
    let mut _86: &state::user::UserStats;
    let mut _87: &std::cell::RefMut<'_, state::user::UserStats>;
    let mut _88: u32;
    let mut _89: &state::user::UserStats;
    let mut _90: &std::cell::RefMut<'_, state::user::UserStats>;
    let mut _91: u32;
    let mut _92: &state::user::UserStats;
    let mut _93: &std::cell::RefMut<'_, state::user::UserStats>;
    let mut _94: u128;
    let mut _95: &state::user::FuelOverflow;
    let mut _96: &std::cell::RefMut<'_, state::user::FuelOverflow>;
    let mut _97: u128;
    let mut _98: &state::user::FuelOverflow;
    let mut _99: &std::cell::RefMut<'_, state::user::FuelOverflow>;
    let mut _100: u128;
    let mut _101: &state::user::FuelOverflow;
    let mut _102: &std::cell::RefMut<'_, state::user::FuelOverflow>;
    let mut _103: u128;
    let mut _104: &state::user::FuelOverflow;
    let mut _105: &std::cell::RefMut<'_, state::user::FuelOverflow>;
    let mut _106: u128;
    let mut _107: &state::user::FuelOverflow;
    let mut _108: &std::cell::RefMut<'_, state::user::FuelOverflow>;
    let mut _109: u128;
    let mut _110: &state::user::FuelOverflow;
    let mut _111: &std::cell::RefMut<'_, state::user::FuelOverflow>;
    let _112: ();
    let mut _113: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _114: std::result::Result<(), error::ErrorCode>;
    let mut _115: &mut state::user::FuelOverflow;
    let mut _116: &mut state::user::FuelOverflow;
    let mut _117: &mut std::cell::RefMut<'_, state::user::FuelOverflow>;
    let mut _118: &state::user::UserStats;
    let _119: &state::user::UserStats;
    let mut _120: &std::cell::RefMut<'_, state::user::UserStats>;
    let _121: &std::cell::RefMut<'_, state::user::UserStats>;
    let mut _122: u32;
    let mut _123: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _124: std::result::Result<u32, error::ErrorCode>;
    let mut _125: i64;
    let mut _126: isize;
    let mut _128: !;
    let mut _129: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _131: isize;
    let mut _133: !;
    let mut _134: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _136: ();
    let _137: ();
    let mut _138: &[&[u8]];
    let mut _139: &[&[u8]; 1];
    let _140: &[&[u8]; 1];
    let _141: [&[u8]; 1];
    let mut _142: &[u8];
    let _143: &[u8];
    let mut _144: &std::vec::Vec<u8>;
    let _145: &std::vec::Vec<u8>;
    let _146: std::vec::Vec<u8>;
    let mut _147: &state::events::FuelSeasonRecord;
    let _148: &state::events::FuelSeasonRecord;
    let _149: state::events::FuelSeasonRecord;
    let mut _150: i64;
    let mut _151: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _152: std::result::Result<i64, error::ErrorCode>;
    let mut _153: i64;
    let mut _154: isize;
    let mut _156: !;
    let mut _157: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _159: anchor_lang::prelude::Pubkey;
    let mut _160: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _161: u128;
    let mut _162: &state::user::FuelOverflow;
    let mut _163: &std::cell::RefMut<'_, state::user::FuelOverflow>;
    let mut _164: u128;
    let mut _165: &state::user::FuelOverflow;
    let mut _166: &std::cell::RefMut<'_, state::user::FuelOverflow>;
    let mut _167: u128;
    let mut _168: &state::user::FuelOverflow;
    let mut _169: &std::cell::RefMut<'_, state::user::FuelOverflow>;
    let mut _170: u128;
    let mut _171: &state::user::FuelOverflow;
    let mut _172: &std::cell::RefMut<'_, state::user::FuelOverflow>;
    let mut _173: u128;
    let mut _174: &state::user::FuelOverflow;
    let mut _175: &std::cell::RefMut<'_, state::user::FuelOverflow>;
    let mut _176: u128;
    let mut _177: &state::user::FuelOverflow;
    let mut _178: &std::cell::RefMut<'_, state::user::FuelOverflow>;
    let mut _179: u128;
    let mut _180: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _181: std::result::Result<u128, error::ErrorCode>;
    let mut _182: &state::user::FuelOverflow;
    let _183: &state::user::FuelOverflow;
    let mut _184: &std::cell::RefMut<'_, state::user::FuelOverflow>;
    let mut _185: isize;
    let mut _187: !;
    let mut _188: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _190: ();
    let mut _191: &mut state::user::FuelOverflow;
    let mut _192: &mut state::user::FuelOverflow;
    let mut _193: &mut std::cell::RefMut<'_, state::user::FuelOverflow>;
    let mut _194: u32;
    let mut _195: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _196: std::result::Result<u32, error::ErrorCode>;
    let mut _197: i64;
    let mut _198: isize;
    let mut _200: !;
    let mut _201: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _203: ();
    let _204: ();
    let mut _205: &[&[u8]];
    let mut _206: &[&[u8]; 1];
    let _207: &[&[u8]; 1];
    let _208: [&[u8]; 1];
    let mut _209: &[u8];
    let _210: &[u8];
    let mut _211: &std::vec::Vec<u8>;
    let _212: &std::vec::Vec<u8>;
    let _213: std::vec::Vec<u8>;
    let mut _214: &state::events::FuelSeasonRecord;
    let _215: &state::events::FuelSeasonRecord;
    let _216: state::events::FuelSeasonRecord;
    let mut _217: i64;
    let mut _218: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _219: std::result::Result<i64, error::ErrorCode>;
    let mut _220: i64;
    let mut _221: isize;
    let mut _223: !;
    let mut _224: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _226: anchor_lang::prelude::Pubkey;
    let mut _227: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _228: u128;
    let mut _229: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _230: std::result::Result<u128, error::ErrorCode>;
    let mut _231: u32;
    let mut _232: &state::user::UserStats;
    let mut _233: &std::cell::RefMut<'_, state::user::UserStats>;
    let mut _234: isize;
    let mut _236: !;
    let mut _237: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _239: u128;
    let mut _240: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _241: std::result::Result<u128, error::ErrorCode>;
    let mut _242: u32;
    let mut _243: &state::user::UserStats;
    let mut _244: &std::cell::RefMut<'_, state::user::UserStats>;
    let mut _245: isize;
    let mut _247: !;
    let mut _248: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _250: u128;
    let mut _251: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _252: std::result::Result<u128, error::ErrorCode>;
    let mut _253: u32;
    let mut _254: &state::user::UserStats;
    let mut _255: &std::cell::RefMut<'_, state::user::UserStats>;
    let mut _256: isize;
    let mut _258: !;
    let mut _259: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _261: u128;
    let mut _262: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _263: std::result::Result<u128, error::ErrorCode>;
    let mut _264: u32;
    let mut _265: &state::user::UserStats;
    let mut _266: &std::cell::RefMut<'_, state::user::UserStats>;
    let mut _267: isize;
    let mut _269: !;
    let mut _270: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _272: u128;
    let mut _273: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _274: std::result::Result<u128, error::ErrorCode>;
    let mut _275: u32;
    let mut _276: &state::user::UserStats;
    let mut _277: &std::cell::RefMut<'_, state::user::UserStats>;
    let mut _278: isize;
    let mut _280: !;
    let mut _281: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _283: u128;
    let mut _284: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _285: std::result::Result<u128, error::ErrorCode>;
    let mut _286: u32;
    let mut _287: &state::user::UserStats;
    let mut _288: &std::cell::RefMut<'_, state::user::UserStats>;
    let mut _289: isize;
    let mut _291: !;
    let mut _292: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _294: u128;
    let mut _295: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _296: std::result::Result<u128, error::ErrorCode>;
    let mut _297: &state::user::UserStats;
    let _298: &state::user::UserStats;
    let mut _299: &std::cell::RefMut<'_, state::user::UserStats>;
    let mut _300: isize;
    let mut _302: !;
    let mut _303: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _305: ();
    let mut _306: &mut state::user::UserStats;
    let mut _307: &mut state::user::UserStats;
    let mut _308: &mut std::cell::RefMut<'_, state::user::UserStats>;
    let mut _309: ();
    let mut _310: &mut instructions::user::ResetFuelSeason<'_>;
    let mut _311: &mut instructions::user::ResetFuelSeason<'_>;
    let mut _312: &mut instructions::user::ResetFuelSeason<'_>;
    let mut _313: &mut instructions::user::ResetFuelSeason<'_>;
    let mut _314: isize;
    let mut _315: isize;
    let mut _316: isize;
    let mut _317: isize;
    let mut _318: isize;
    let mut _319: isize;
    let mut _320: isize;
    let mut _321: isize;
    let mut _322: isize;
    let mut _323: isize;
    let mut _324: isize;
    let mut _325: isize;
    let mut _326: isize;
    let mut _327: isize;
    let mut _328: isize;
    scope 1 {
        debug user_stats => _2;
        let _14: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::FuelOverflow>>;
        scope 6 {
            debug fuel_overflow => _14;
            let _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _28: ();
            let _29: anchor_lang::prelude::Clock;
            let _33: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
            let _36: anchor_lang::prelude::Clock;
            scope 7 {
                debug residual => _25;
                scope 8 {
                }
            }
            scope 9 {
                debug val => _28;
                scope 10 {
                }
            }
            scope 11 {
                debug clock => _29;
                let _222: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _225: i64;
                let _235: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _238: u128;
                let _246: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _249: u128;
                let _257: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _260: u128;
                let _268: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _271: u128;
                let _279: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _282: u128;
                let _290: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _293: u128;
                let _301: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _304: u128;
                scope 16 {
                    debug fuel_overflow_account => _39;
                    let _39: anchor_lang::prelude::AccountLoader<'_, state::user::FuelOverflow>;
                    let mut _40: std::cell::RefMut<'_, state::user::FuelOverflow>;
                    let _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _50: std::cell::RefMut<'_, state::user::FuelOverflow>;
                    scope 17 {
                        debug fuel_overflow => _40;
                        let _70: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _73: i64;
                        let _127: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _130: u32;
                        let _132: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _135: ();
                        let _155: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _158: i64;
                        let _186: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _189: u128;
                        let _199: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _202: u32;
                        scope 22 {
                            debug residual => _70;
                            scope 23 {
                            }
                        }
                        scope 24 {
                            debug val => _73;
                            scope 25 {
                            }
                        }
                        scope 26 {
                            debug residual => _127;
                            scope 27 {
                            }
                        }
                        scope 28 {
                            debug val => _130;
                            scope 29 {
                            }
                        }
                        scope 30 {
                            debug residual => _132;
                            scope 31 {
                            }
                        }
                        scope 32 {
                            debug val => _135;
                            scope 33 {
                            }
                        }
                        scope 34 {
                            debug residual => _155;
                            scope 35 {
                            }
                        }
                        scope 36 {
                            debug val => _158;
                            scope 37 {
                            }
                        }
                        scope 38 {
                            debug residual => _186;
                            scope 39 {
                            }
                        }
                        scope 40 {
                            debug val => _189;
                            scope 41 {
                            }
                        }
                        scope 42 {
                            debug residual => _199;
                            scope 43 {
                            }
                        }
                        scope 44 {
                            debug val => _202;
                            scope 45 {
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _47;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _50;
                        scope 21 {
                        }
                    }
                }
                scope 46 {
                    debug residual => _222;
                    scope 47 {
                    }
                }
                scope 48 {
                    debug val => _225;
                    scope 49 {
                    }
                }
                scope 50 {
                    debug residual => _235;
                    scope 51 {
                    }
                }
                scope 52 {
                    debug val => _238;
                    scope 53 {
                    }
                }
                scope 54 {
                    debug residual => _246;
                    scope 55 {
                    }
                }
                scope 56 {
                    debug val => _249;
                    scope 57 {
                    }
                }
                scope 58 {
                    debug residual => _257;
                    scope 59 {
                    }
                }
                scope 60 {
                    debug val => _260;
                    scope 61 {
                    }
                }
                scope 62 {
                    debug residual => _268;
                    scope 63 {
                    }
                }
                scope 64 {
                    debug val => _271;
                    scope 65 {
                    }
                }
                scope 66 {
                    debug residual => _279;
                    scope 67 {
                    }
                }
                scope 68 {
                    debug val => _282;
                    scope 69 {
                    }
                }
                scope 70 {
                    debug residual => _290;
                    scope 71 {
                    }
                }
                scope 72 {
                    debug val => _293;
                    scope 73 {
                    }
                }
                scope 74 {
                    debug residual => _301;
                    scope 75 {
                    }
                }
                scope 76 {
                    debug val => _304;
                    scope 77 {
                    }
                }
            }
            scope 12 {
                debug residual => _33;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _36;
                scope 15 {
                }
            }
        }
    }
    scope 2 {
        debug residual => _10;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _13;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _310 = deref_copy (_1.1: &mut instructions::user::ResetFuelSeason<'_>);
        _7 = &((*_310).0: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _6 = &(*_7);
        _5 = anchor_lang::prelude::AccountLoader::<'_, UserStats>::load_mut(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        StorageLive(_8);
        _8 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _4 = std::result::Result::<RefMut<'_, UserStats>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _5, move _8) -> [return: bb2, unwind: bb169];
    }

    bb2: {
        StorageDead(_8);
        StorageDead(_5);
        _3 = <std::result::Result<RefMut<'_, UserStats>, error::ErrorCode> as Try>::branch(move _4) -> [return: bb3, unwind: bb169];
    }

    bb3: {
        StorageDead(_4);
        _9 = discriminant(_3);
        switchInt(move _9) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_13);
        _13 = move ((_3 as Continue).0: std::cell::RefMut<'_, state::user::UserStats>);
        _2 = move _13;
        StorageDead(_13);
        _316 = discriminant(_3);
        StorageDead(_7);
        StorageDead(_3);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &_1;
        _14 = <anchor_lang::context::Context<'_, '_, '_, '_, instructions::user::ResetFuelSeason<'_>> as state::user::FuelOverflowProvider<'_>>::fuel_overflow(move _15) -> [return: bb8, unwind: bb168];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_10);
        _10 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_12);
        _12 = _10;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _12) -> [return: bb7, unwind: bb172];
    }

    bb7: {
        StorageDead(_12);
        StorageDead(_10);
        _314 = discriminant(_3);
        StorageDead(_7);
        StorageDead(_3);
        goto -> bb162;
    }

    bb8: {
        StorageDead(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &_2;
        _20 = <RefMut<'_, UserStats> as Deref>::deref(move _21) -> [return: bb9, unwind: bb168];
    }

    bb9: {
        _19 = &(*_20);
        StorageDead(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = &_14;
        _22 = &(*_23);
        _18 = UserStats::validate_fuel_overflow(move _19, move _22) -> [return: bb10, unwind: bb168];
    }

    bb10: {
        StorageDead(_22);
        StorageDead(_19);
        _17 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _18) -> [return: bb11, unwind: bb168];
    }

    bb11: {
        StorageDead(_18);
        _24 = discriminant(_17);
        switchInt(move _24) -> [0: bb12, 1: bb13, otherwise: bb5];
    }

    bb12: {
        StorageLive(_28);
        _28 = ((_17 as Continue).0: ());
        _16 = _28;
        StorageDead(_28);
        StorageDead(_23);
        StorageDead(_20);
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb15, unwind: bb168];
    }

    bb13: {
        StorageLive(_25);
        _25 = ((_17 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_27);
        _27 = _25;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _27) -> [return: bb14, unwind: bb168];
    }

    bb14: {
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_20);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb161;
    }

    bb15: {
        _30 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _31) -> [return: bb16, unwind: bb168];
    }

    bb16: {
        StorageDead(_31);
        _32 = discriminant(_30);
        switchInt(move _32) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_36);
        _36 = move ((_30 as Continue).0: anchor_lang::prelude::Clock);
        _29 = move _36;
        StorageDead(_36);
        _318 = discriminant(_30);
        StorageDead(_30);
        StorageLive(_37);
        _38 = discriminant(_14);
        switchInt(move _38) -> [1: bb20, otherwise: bb91];
    }

    bb18: {
        StorageLive(_33);
        _33 = move ((_30 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_35);
        _35 = move _33;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _35) -> [return: bb19, unwind: bb171];
    }

    bb19: {
        StorageDead(_35);
        StorageDead(_33);
        _324 = discriminant(_30);
        StorageDead(_30);
        goto -> bb160;
    }

    bb20: {
        StorageLive(_39);
        _39 = move ((_14 as Some).0: anchor_lang::prelude::AccountLoader<'_, state::user::FuelOverflow>);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = &_39;
        _43 = anchor_lang::prelude::AccountLoader::<'_, FuelOverflow>::load_mut(move _44) -> [return: bb21, unwind: bb168];
    }

    bb21: {
        StorageDead(_44);
        StorageLive(_45);
        _45 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _42 = std::result::Result::<RefMut<'_, FuelOverflow>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _43, move _45) -> [return: bb22, unwind: bb168];
    }

    bb22: {
        StorageDead(_45);
        StorageDead(_43);
        _41 = <std::result::Result<RefMut<'_, FuelOverflow>, error::ErrorCode> as Try>::branch(move _42) -> [return: bb23, unwind: bb168];
    }

    bb23: {
        StorageDead(_42);
        _46 = discriminant(_41);
        switchInt(move _46) -> [0: bb24, 1: bb25, otherwise: bb5];
    }

    bb24: {
        StorageLive(_50);
        _50 = move ((_41 as Continue).0: std::cell::RefMut<'_, state::user::FuelOverflow>);
        _40 = move _50;
        StorageDead(_50);
        _322 = discriminant(_41);
        StorageDead(_41);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = (_29.4: i64);
        _67 = <i64 as Cast>::cast::<i64>(move _68) -> [return: bb27, unwind: bb167];
    }

    bb25: {
        StorageLive(_47);
        _47 = ((_41 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_49);
        _49 = _47;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _49) -> [return: bb26, unwind: bb170];
    }

    bb26: {
        StorageDead(_49);
        StorageDead(_47);
        _320 = discriminant(_41);
        StorageDead(_41);
        goto -> bb158;
    }

    bb27: {
        StorageDead(_68);
        _66 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _67) -> [return: bb28, unwind: bb167];
    }

    bb28: {
        StorageDead(_67);
        _69 = discriminant(_66);
        switchInt(move _69) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_73);
        _73 = ((_66 as Continue).0: i64);
        _65 = _73;
        StorageDead(_73);
        StorageLive(_74);
        StorageLive(_75);
        _311 = deref_copy (_1.1: &mut instructions::user::ResetFuelSeason<'_>);
        _75 = &((*_311).1: anchor_lang::prelude::AccountInfo<'_>);
        _74 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _75) -> [return: bb32, unwind: bb167];
    }

    bb30: {
        StorageLive(_70);
        _70 = ((_66 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_72);
        _72 = _70;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _72) -> [return: bb31, unwind: bb167];
    }

    bb31: {
        StorageDead(_72);
        StorageDead(_70);
        StorageDead(_65);
        StorageDead(_62);
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_54);
        StorageDead(_53);
        StorageDead(_66);
        StorageDead(_64);
        StorageDead(_63);
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_52);
        StorageDead(_51);
        goto -> bb157;
    }

    bb32: {
        StorageDead(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = &_2;
        _77 = <RefMut<'_, UserStats> as Deref>::deref(move _78) -> [return: bb33, unwind: bb167];
    }

    bb33: {
        StorageDead(_78);
        _76 = ((*_77).17: u32);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        _81 = &_2;
        _80 = <RefMut<'_, UserStats> as Deref>::deref(move _81) -> [return: bb34, unwind: bb167];
    }

    bb34: {
        StorageDead(_81);
        _79 = ((*_80).18: u32);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = &_2;
        _83 = <RefMut<'_, UserStats> as Deref>::deref(move _84) -> [return: bb35, unwind: bb167];
    }

    bb35: {
        StorageDead(_84);
        _82 = ((*_83).19: u32);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _87 = &_2;
        _86 = <RefMut<'_, UserStats> as Deref>::deref(move _87) -> [return: bb36, unwind: bb167];
    }

    bb36: {
        StorageDead(_87);
        _85 = ((*_86).20: u32);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        _90 = &_2;
        _89 = <RefMut<'_, UserStats> as Deref>::deref(move _90) -> [return: bb37, unwind: bb167];
    }

    bb37: {
        StorageDead(_90);
        _88 = ((*_89).21: u32);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _93 = &_2;
        _92 = <RefMut<'_, UserStats> as Deref>::deref(move _93) -> [return: bb38, unwind: bb167];
    }

    bb38: {
        StorageDead(_93);
        _91 = ((*_92).22: u32);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = &_40;
        _95 = <RefMut<'_, FuelOverflow> as Deref>::deref(move _96) -> [return: bb39, unwind: bb167];
    }

    bb39: {
        StorageDead(_96);
        _94 = ((*_95).1: u128);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = &_40;
        _98 = <RefMut<'_, FuelOverflow> as Deref>::deref(move _99) -> [return: bb40, unwind: bb167];
    }

    bb40: {
        StorageDead(_99);
        _97 = ((*_98).2: u128);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _102 = &_40;
        _101 = <RefMut<'_, FuelOverflow> as Deref>::deref(move _102) -> [return: bb41, unwind: bb167];
    }

    bb41: {
        StorageDead(_102);
        _100 = ((*_101).3: u128);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _105 = &_40;
        _104 = <RefMut<'_, FuelOverflow> as Deref>::deref(move _105) -> [return: bb42, unwind: bb167];
    }

    bb42: {
        StorageDead(_105);
        _103 = ((*_104).4: u128);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        _108 = &_40;
        _107 = <RefMut<'_, FuelOverflow> as Deref>::deref(move _108) -> [return: bb43, unwind: bb167];
    }

    bb43: {
        StorageDead(_108);
        _106 = ((*_107).5: u128);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        _111 = &_40;
        _110 = <RefMut<'_, FuelOverflow> as Deref>::deref(move _111) -> [return: bb44, unwind: bb167];
    }

    bb44: {
        StorageDead(_111);
        _109 = ((*_110).6: u128);
        _64 = FuelSweepRecord { ts: move _65, authority: move _74, user_stats_fuel_insurance: move _76, user_stats_fuel_deposits: move _79, user_stats_fuel_borrows: move _82, user_stats_fuel_positions: move _85, user_stats_fuel_taker: move _88, user_stats_fuel_maker: move _91, fuel_overflow_fuel_insurance: move _94, fuel_overflow_fuel_deposits: move _97, fuel_overflow_fuel_borrows: move _100, fuel_overflow_fuel_positions: move _103, fuel_overflow_fuel_taker: move _106, fuel_overflow_fuel_maker: move _109 };
        StorageDead(_109);
        StorageDead(_106);
        StorageDead(_103);
        StorageDead(_100);
        StorageDead(_97);
        StorageDead(_94);
        StorageDead(_91);
        StorageDead(_88);
        StorageDead(_85);
        StorageDead(_82);
        StorageDead(_79);
        StorageDead(_76);
        StorageDead(_74);
        StorageDead(_65);
        _63 = &_64;
        _62 = &(*_63);
        _61 = <FuelSweepRecord as anchor_lang::Event>::data(move _62) -> [return: bb45, unwind: bb167];
    }

    bb45: {
        StorageDead(_62);
        _60 = &_61;
        _59 = &(*_60);
        _58 = <Vec<u8> as Deref>::deref(move _59) -> [return: bb46, unwind: bb166];
    }

    bb46: {
        _57 = &(*_58);
        StorageDead(_59);
        _56 = [move _57];
        StorageDead(_57);
        _55 = &_56;
        _54 = &(*_55);
        _53 = move _54 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_54);
        _52 = solana_program::log::sol_log_data(move _53) -> [return: bb47, unwind: bb166];
    }

    bb47: {
        StorageDead(_53);
        drop(_61) -> [return: bb48, unwind: bb167];
    }

    bb48: {
        StorageDead(_110);
        StorageDead(_107);
        StorageDead(_104);
        StorageDead(_101);
        StorageDead(_98);
        StorageDead(_95);
        StorageDead(_92);
        StorageDead(_89);
        StorageDead(_86);
        StorageDead(_83);
        StorageDead(_80);
        StorageDead(_77);
        StorageDead(_66);
        StorageDead(_64);
        StorageDead(_63);
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_52);
        _51 = const ();
        StorageDead(_51);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _117 = &mut _40;
        _116 = <RefMut<'_, FuelOverflow> as DerefMut>::deref_mut(move _117) -> [return: bb49, unwind: bb167];
    }

    bb49: {
        _115 = &mut (*_116);
        StorageDead(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        _121 = &_2;
        _120 = &(*_121);
        _119 = <RefMut<'_, UserStats> as Deref>::deref(move _120) -> [return: bb50, unwind: bb167];
    }

    bb50: {
        _118 = &(*_119);
        StorageDead(_120);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _125 = (_29.4: i64);
        _124 = <i64 as Cast>::cast::<u32>(move _125) -> [return: bb51, unwind: bb167];
    }

    bb51: {
        StorageDead(_125);
        _123 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _124) -> [return: bb52, unwind: bb167];
    }

    bb52: {
        StorageDead(_124);
        _126 = discriminant(_123);
        switchInt(move _126) -> [0: bb53, 1: bb54, otherwise: bb5];
    }

    bb53: {
        StorageLive(_130);
        _130 = ((_123 as Continue).0: u32);
        _122 = _130;
        StorageDead(_130);
        _114 = FuelOverflow::update_from_user_stats(move _115, move _118, move _122) -> [return: bb56, unwind: bb167];
    }

    bb54: {
        StorageLive(_127);
        _127 = ((_123 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_129);
        _129 = _127;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _129) -> [return: bb55, unwind: bb167];
    }

    bb55: {
        StorageDead(_129);
        StorageDead(_127);
        StorageDead(_122);
        StorageDead(_118);
        StorageDead(_115);
        StorageDead(_114);
        goto -> bb156;
    }

    bb56: {
        StorageDead(_122);
        StorageDead(_118);
        StorageDead(_115);
        _113 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _114) -> [return: bb57, unwind: bb167];
    }

    bb57: {
        StorageDead(_114);
        _131 = discriminant(_113);
        switchInt(move _131) -> [0: bb58, 1: bb59, otherwise: bb5];
    }

    bb58: {
        StorageLive(_135);
        _135 = ((_113 as Continue).0: ());
        _112 = _135;
        StorageDead(_135);
        StorageDead(_123);
        StorageDead(_121);
        StorageDead(_119);
        StorageDead(_116);
        StorageDead(_113);
        StorageDead(_112);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        _153 = (_29.4: i64);
        _152 = <i64 as Cast>::cast::<i64>(move _153) -> [return: bb61, unwind: bb167];
    }

    bb59: {
        StorageLive(_132);
        _132 = ((_113 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_134);
        _134 = _132;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _134) -> [return: bb60, unwind: bb167];
    }

    bb60: {
        StorageDead(_134);
        StorageDead(_132);
        goto -> bb156;
    }

    bb61: {
        StorageDead(_153);
        _151 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _152) -> [return: bb62, unwind: bb167];
    }

    bb62: {
        StorageDead(_152);
        _154 = discriminant(_151);
        switchInt(move _154) -> [0: bb63, 1: bb64, otherwise: bb5];
    }

    bb63: {
        StorageLive(_158);
        _158 = ((_151 as Continue).0: i64);
        _150 = _158;
        StorageDead(_158);
        StorageLive(_159);
        StorageLive(_160);
        _312 = deref_copy (_1.1: &mut instructions::user::ResetFuelSeason<'_>);
        _160 = &((*_312).1: anchor_lang::prelude::AccountInfo<'_>);
        _159 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _160) -> [return: bb66, unwind: bb167];
    }

    bb64: {
        StorageLive(_155);
        _155 = ((_151 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_157);
        _157 = _155;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _157) -> [return: bb65, unwind: bb167];
    }

    bb65: {
        StorageDead(_157);
        StorageDead(_155);
        StorageDead(_150);
        StorageDead(_147);
        StorageDead(_144);
        StorageDead(_142);
        StorageDead(_139);
        StorageDead(_138);
        goto -> bb155;
    }

    bb66: {
        StorageDead(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        _163 = &_40;
        _162 = <RefMut<'_, FuelOverflow> as Deref>::deref(move _163) -> [return: bb67, unwind: bb167];
    }

    bb67: {
        StorageDead(_163);
        _161 = ((*_162).1: u128);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        _166 = &_40;
        _165 = <RefMut<'_, FuelOverflow> as Deref>::deref(move _166) -> [return: bb68, unwind: bb167];
    }

    bb68: {
        StorageDead(_166);
        _164 = ((*_165).2: u128);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        _169 = &_40;
        _168 = <RefMut<'_, FuelOverflow> as Deref>::deref(move _169) -> [return: bb69, unwind: bb167];
    }

    bb69: {
        StorageDead(_169);
        _167 = ((*_168).3: u128);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        _172 = &_40;
        _171 = <RefMut<'_, FuelOverflow> as Deref>::deref(move _172) -> [return: bb70, unwind: bb167];
    }

    bb70: {
        StorageDead(_172);
        _170 = ((*_171).4: u128);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        _175 = &_40;
        _174 = <RefMut<'_, FuelOverflow> as Deref>::deref(move _175) -> [return: bb71, unwind: bb167];
    }

    bb71: {
        StorageDead(_175);
        _173 = ((*_174).5: u128);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        _178 = &_40;
        _177 = <RefMut<'_, FuelOverflow> as Deref>::deref(move _178) -> [return: bb72, unwind: bb167];
    }

    bb72: {
        StorageDead(_178);
        _176 = ((*_177).6: u128);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        _184 = &_40;
        _183 = <RefMut<'_, FuelOverflow> as Deref>::deref(move _184) -> [return: bb73, unwind: bb167];
    }

    bb73: {
        _182 = &(*_183);
        StorageDead(_184);
        _181 = FuelOverflow::total_fuel(move _182) -> [return: bb74, unwind: bb167];
    }

    bb74: {
        StorageDead(_182);
        _180 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _181) -> [return: bb75, unwind: bb167];
    }

    bb75: {
        StorageDead(_181);
        _185 = discriminant(_180);
        switchInt(move _185) -> [0: bb76, 1: bb77, otherwise: bb5];
    }

    bb76: {
        StorageLive(_189);
        _189 = ((_180 as Continue).0: u128);
        _179 = _189;
        StorageDead(_189);
        _149 = FuelSeasonRecord { ts: move _150, authority: move _159, fuel_insurance: move _161, fuel_deposits: move _164, fuel_borrows: move _167, fuel_positions: move _170, fuel_taker: move _173, fuel_maker: move _176, fuel_total: move _179 };
        StorageDead(_179);
        StorageDead(_176);
        StorageDead(_173);
        StorageDead(_170);
        StorageDead(_167);
        StorageDead(_164);
        StorageDead(_161);
        StorageDead(_159);
        StorageDead(_150);
        _148 = &_149;
        _147 = &(*_148);
        _146 = <FuelSeasonRecord as anchor_lang::Event>::data(move _147) -> [return: bb79, unwind: bb167];
    }

    bb77: {
        StorageLive(_186);
        _186 = ((_180 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_188);
        _188 = _186;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _188) -> [return: bb78, unwind: bb167];
    }

    bb78: {
        StorageDead(_188);
        StorageDead(_186);
        StorageDead(_179);
        StorageDead(_176);
        StorageDead(_173);
        StorageDead(_170);
        StorageDead(_167);
        StorageDead(_164);
        StorageDead(_161);
        StorageDead(_159);
        StorageDead(_150);
        StorageDead(_147);
        StorageDead(_144);
        StorageDead(_142);
        StorageDead(_139);
        StorageDead(_138);
        StorageDead(_183);
        StorageDead(_180);
        StorageDead(_177);
        StorageDead(_174);
        StorageDead(_171);
        StorageDead(_168);
        StorageDead(_165);
        StorageDead(_162);
        goto -> bb155;
    }

    bb79: {
        StorageDead(_147);
        _145 = &_146;
        _144 = &(*_145);
        _143 = <Vec<u8> as Deref>::deref(move _144) -> [return: bb80, unwind: bb165];
    }

    bb80: {
        _142 = &(*_143);
        StorageDead(_144);
        _141 = [move _142];
        StorageDead(_142);
        _140 = &_141;
        _139 = &(*_140);
        _138 = move _139 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_139);
        _137 = solana_program::log::sol_log_data(move _138) -> [return: bb81, unwind: bb165];
    }

    bb81: {
        StorageDead(_138);
        drop(_146) -> [return: bb82, unwind: bb167];
    }

    bb82: {
        StorageDead(_183);
        StorageDead(_180);
        StorageDead(_177);
        StorageDead(_174);
        StorageDead(_171);
        StorageDead(_168);
        StorageDead(_165);
        StorageDead(_162);
        StorageDead(_151);
        StorageDead(_149);
        StorageDead(_148);
        StorageDead(_146);
        StorageDead(_145);
        StorageDead(_143);
        StorageDead(_141);
        StorageDead(_140);
        StorageDead(_137);
        _136 = const ();
        StorageDead(_136);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        _193 = &mut _40;
        _192 = <RefMut<'_, FuelOverflow> as DerefMut>::deref_mut(move _193) -> [return: bb83, unwind: bb167];
    }

    bb83: {
        _191 = &mut (*_192);
        StorageDead(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        _197 = (_29.4: i64);
        _196 = <i64 as Cast>::cast::<u32>(move _197) -> [return: bb84, unwind: bb167];
    }

    bb84: {
        StorageDead(_197);
        _195 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _196) -> [return: bb85, unwind: bb167];
    }

    bb85: {
        StorageDead(_196);
        _198 = discriminant(_195);
        switchInt(move _198) -> [0: bb86, 1: bb87, otherwise: bb5];
    }

    bb86: {
        StorageLive(_202);
        _202 = ((_195 as Continue).0: u32);
        _194 = _202;
        StorageDead(_202);
        _190 = FuelOverflow::reset_fuel(move _191, move _194) -> [return: bb89, unwind: bb167];
    }

    bb87: {
        StorageLive(_199);
        _199 = ((_195 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_201);
        _201 = _199;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _201) -> [return: bb88, unwind: bb167];
    }

    bb88: {
        StorageDead(_201);
        StorageDead(_199);
        StorageDead(_194);
        StorageDead(_191);
        StorageDead(_195);
        StorageDead(_192);
        StorageDead(_190);
        goto -> bb157;
    }

    bb89: {
        StorageDead(_194);
        StorageDead(_191);
        StorageDead(_195);
        StorageDead(_192);
        StorageDead(_190);
        _37 = const ();
        drop(_40) -> [return: bb90, unwind: bb168];
    }

    bb90: {
        StorageDead(_40);
        StorageDead(_39);
        goto -> bb144;
    }

    bb91: {
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        _220 = (_29.4: i64);
        _219 = <i64 as Cast>::cast::<i64>(move _220) -> [return: bb92, unwind: bb168];
    }

    bb92: {
        StorageDead(_220);
        _218 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _219) -> [return: bb93, unwind: bb168];
    }

    bb93: {
        StorageDead(_219);
        _221 = discriminant(_218);
        switchInt(move _221) -> [0: bb94, 1: bb95, otherwise: bb5];
    }

    bb94: {
        StorageLive(_225);
        _225 = ((_218 as Continue).0: i64);
        _217 = _225;
        StorageDead(_225);
        StorageLive(_226);
        StorageLive(_227);
        _313 = deref_copy (_1.1: &mut instructions::user::ResetFuelSeason<'_>);
        _227 = &((*_313).1: anchor_lang::prelude::AccountInfo<'_>);
        _226 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _227) -> [return: bb97, unwind: bb168];
    }

    bb95: {
        StorageLive(_222);
        _222 = ((_218 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_224);
        _224 = _222;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _224) -> [return: bb96, unwind: bb168];
    }

    bb96: {
        StorageDead(_224);
        StorageDead(_222);
        StorageDead(_217);
        StorageDead(_214);
        StorageDead(_211);
        StorageDead(_209);
        StorageDead(_206);
        StorageDead(_205);
        goto -> bb154;
    }

    bb97: {
        StorageDead(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        _233 = &_2;
        _232 = <RefMut<'_, UserStats> as Deref>::deref(move _233) -> [return: bb98, unwind: bb168];
    }

    bb98: {
        StorageDead(_233);
        _231 = ((*_232).17: u32);
        _230 = <u32 as Cast>::cast::<u128>(move _231) -> [return: bb99, unwind: bb168];
    }

    bb99: {
        StorageDead(_231);
        _229 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _230) -> [return: bb100, unwind: bb168];
    }

    bb100: {
        StorageDead(_230);
        _234 = discriminant(_229);
        switchInt(move _234) -> [0: bb101, 1: bb102, otherwise: bb5];
    }

    bb101: {
        StorageLive(_238);
        _238 = ((_229 as Continue).0: u128);
        _228 = _238;
        StorageDead(_238);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        _244 = &_2;
        _243 = <RefMut<'_, UserStats> as Deref>::deref(move _244) -> [return: bb104, unwind: bb168];
    }

    bb102: {
        StorageLive(_235);
        _235 = ((_229 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_237);
        _237 = _235;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _237) -> [return: bb103, unwind: bb168];
    }

    bb103: {
        StorageDead(_237);
        StorageDead(_235);
        StorageDead(_228);
        StorageDead(_226);
        StorageDead(_217);
        StorageDead(_214);
        StorageDead(_211);
        StorageDead(_209);
        StorageDead(_206);
        StorageDead(_205);
        goto -> bb153;
    }

    bb104: {
        StorageDead(_244);
        _242 = ((*_243).18: u32);
        _241 = <u32 as Cast>::cast::<u128>(move _242) -> [return: bb105, unwind: bb168];
    }

    bb105: {
        StorageDead(_242);
        _240 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _241) -> [return: bb106, unwind: bb168];
    }

    bb106: {
        StorageDead(_241);
        _245 = discriminant(_240);
        switchInt(move _245) -> [0: bb107, 1: bb108, otherwise: bb5];
    }

    bb107: {
        StorageLive(_249);
        _249 = ((_240 as Continue).0: u128);
        _239 = _249;
        StorageDead(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        _255 = &_2;
        _254 = <RefMut<'_, UserStats> as Deref>::deref(move _255) -> [return: bb110, unwind: bb168];
    }

    bb108: {
        StorageLive(_246);
        _246 = ((_240 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_248);
        _248 = _246;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _248) -> [return: bb109, unwind: bb168];
    }

    bb109: {
        StorageDead(_248);
        StorageDead(_246);
        StorageDead(_239);
        StorageDead(_228);
        StorageDead(_226);
        StorageDead(_217);
        StorageDead(_214);
        StorageDead(_211);
        StorageDead(_209);
        StorageDead(_206);
        StorageDead(_205);
        goto -> bb152;
    }

    bb110: {
        StorageDead(_255);
        _253 = ((*_254).19: u32);
        _252 = <u32 as Cast>::cast::<u128>(move _253) -> [return: bb111, unwind: bb168];
    }

    bb111: {
        StorageDead(_253);
        _251 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _252) -> [return: bb112, unwind: bb168];
    }

    bb112: {
        StorageDead(_252);
        _256 = discriminant(_251);
        switchInt(move _256) -> [0: bb113, 1: bb114, otherwise: bb5];
    }

    bb113: {
        StorageLive(_260);
        _260 = ((_251 as Continue).0: u128);
        _250 = _260;
        StorageDead(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        _266 = &_2;
        _265 = <RefMut<'_, UserStats> as Deref>::deref(move _266) -> [return: bb116, unwind: bb168];
    }

    bb114: {
        StorageLive(_257);
        _257 = ((_251 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_259);
        _259 = _257;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _259) -> [return: bb115, unwind: bb168];
    }

    bb115: {
        StorageDead(_259);
        StorageDead(_257);
        StorageDead(_250);
        StorageDead(_239);
        StorageDead(_228);
        StorageDead(_226);
        StorageDead(_217);
        StorageDead(_214);
        StorageDead(_211);
        StorageDead(_209);
        StorageDead(_206);
        StorageDead(_205);
        goto -> bb151;
    }

    bb116: {
        StorageDead(_266);
        _264 = ((*_265).20: u32);
        _263 = <u32 as Cast>::cast::<u128>(move _264) -> [return: bb117, unwind: bb168];
    }

    bb117: {
        StorageDead(_264);
        _262 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _263) -> [return: bb118, unwind: bb168];
    }

    bb118: {
        StorageDead(_263);
        _267 = discriminant(_262);
        switchInt(move _267) -> [0: bb119, 1: bb120, otherwise: bb5];
    }

    bb119: {
        StorageLive(_271);
        _271 = ((_262 as Continue).0: u128);
        _261 = _271;
        StorageDead(_271);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        _277 = &_2;
        _276 = <RefMut<'_, UserStats> as Deref>::deref(move _277) -> [return: bb122, unwind: bb168];
    }

    bb120: {
        StorageLive(_268);
        _268 = ((_262 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_270);
        _270 = _268;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _270) -> [return: bb121, unwind: bb168];
    }

    bb121: {
        StorageDead(_270);
        StorageDead(_268);
        StorageDead(_261);
        StorageDead(_250);
        StorageDead(_239);
        StorageDead(_228);
        StorageDead(_226);
        StorageDead(_217);
        StorageDead(_214);
        StorageDead(_211);
        StorageDead(_209);
        StorageDead(_206);
        StorageDead(_205);
        goto -> bb150;
    }

    bb122: {
        StorageDead(_277);
        _275 = ((*_276).21: u32);
        _274 = <u32 as Cast>::cast::<u128>(move _275) -> [return: bb123, unwind: bb168];
    }

    bb123: {
        StorageDead(_275);
        _273 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _274) -> [return: bb124, unwind: bb168];
    }

    bb124: {
        StorageDead(_274);
        _278 = discriminant(_273);
        switchInt(move _278) -> [0: bb125, 1: bb126, otherwise: bb5];
    }

    bb125: {
        StorageLive(_282);
        _282 = ((_273 as Continue).0: u128);
        _272 = _282;
        StorageDead(_282);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        _288 = &_2;
        _287 = <RefMut<'_, UserStats> as Deref>::deref(move _288) -> [return: bb128, unwind: bb168];
    }

    bb126: {
        StorageLive(_279);
        _279 = ((_273 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_281);
        _281 = _279;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _281) -> [return: bb127, unwind: bb168];
    }

    bb127: {
        StorageDead(_281);
        StorageDead(_279);
        StorageDead(_272);
        StorageDead(_261);
        StorageDead(_250);
        StorageDead(_239);
        StorageDead(_228);
        StorageDead(_226);
        StorageDead(_217);
        StorageDead(_214);
        StorageDead(_211);
        StorageDead(_209);
        StorageDead(_206);
        StorageDead(_205);
        goto -> bb149;
    }

    bb128: {
        StorageDead(_288);
        _286 = ((*_287).22: u32);
        _285 = <u32 as Cast>::cast::<u128>(move _286) -> [return: bb129, unwind: bb168];
    }

    bb129: {
        StorageDead(_286);
        _284 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _285) -> [return: bb130, unwind: bb168];
    }

    bb130: {
        StorageDead(_285);
        _289 = discriminant(_284);
        switchInt(move _289) -> [0: bb131, 1: bb132, otherwise: bb5];
    }

    bb131: {
        StorageLive(_293);
        _293 = ((_284 as Continue).0: u128);
        _283 = _293;
        StorageDead(_293);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        _299 = &_2;
        _298 = <RefMut<'_, UserStats> as Deref>::deref(move _299) -> [return: bb134, unwind: bb168];
    }

    bb132: {
        StorageLive(_290);
        _290 = ((_284 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_292);
        _292 = _290;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _292) -> [return: bb133, unwind: bb168];
    }

    bb133: {
        StorageDead(_292);
        StorageDead(_290);
        StorageDead(_283);
        StorageDead(_272);
        StorageDead(_261);
        StorageDead(_250);
        StorageDead(_239);
        StorageDead(_228);
        StorageDead(_226);
        StorageDead(_217);
        StorageDead(_214);
        StorageDead(_211);
        StorageDead(_209);
        StorageDead(_206);
        StorageDead(_205);
        goto -> bb148;
    }

    bb134: {
        _297 = &(*_298);
        StorageDead(_299);
        _296 = UserStats::total_fuel(move _297) -> [return: bb135, unwind: bb168];
    }

    bb135: {
        StorageDead(_297);
        _295 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _296) -> [return: bb136, unwind: bb168];
    }

    bb136: {
        StorageDead(_296);
        _300 = discriminant(_295);
        switchInt(move _300) -> [0: bb137, 1: bb138, otherwise: bb5];
    }

    bb137: {
        StorageLive(_304);
        _304 = ((_295 as Continue).0: u128);
        _294 = _304;
        StorageDead(_304);
        _216 = FuelSeasonRecord { ts: move _217, authority: move _226, fuel_insurance: move _228, fuel_deposits: move _239, fuel_borrows: move _250, fuel_positions: move _261, fuel_taker: move _272, fuel_maker: move _283, fuel_total: move _294 };
        StorageDead(_294);
        StorageDead(_283);
        StorageDead(_272);
        StorageDead(_261);
        StorageDead(_250);
        StorageDead(_239);
        StorageDead(_228);
        StorageDead(_226);
        StorageDead(_217);
        _215 = &_216;
        _214 = &(*_215);
        _213 = <FuelSeasonRecord as anchor_lang::Event>::data(move _214) -> [return: bb140, unwind: bb168];
    }

    bb138: {
        StorageLive(_301);
        _301 = ((_295 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_303);
        _303 = _301;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _303) -> [return: bb139, unwind: bb168];
    }

    bb139: {
        StorageDead(_303);
        StorageDead(_301);
        StorageDead(_294);
        StorageDead(_283);
        StorageDead(_272);
        StorageDead(_261);
        StorageDead(_250);
        StorageDead(_239);
        StorageDead(_228);
        StorageDead(_226);
        StorageDead(_217);
        StorageDead(_214);
        StorageDead(_211);
        StorageDead(_209);
        StorageDead(_206);
        StorageDead(_205);
        StorageDead(_298);
        StorageDead(_295);
        goto -> bb148;
    }

    bb140: {
        StorageDead(_214);
        _212 = &_213;
        _211 = &(*_212);
        _210 = <Vec<u8> as Deref>::deref(move _211) -> [return: bb141, unwind: bb164];
    }

    bb141: {
        _209 = &(*_210);
        StorageDead(_211);
        _208 = [move _209];
        StorageDead(_209);
        _207 = &_208;
        _206 = &(*_207);
        _205 = move _206 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_206);
        _204 = solana_program::log::sol_log_data(move _205) -> [return: bb142, unwind: bb164];
    }

    bb142: {
        StorageDead(_205);
        drop(_213) -> [return: bb143, unwind: bb168];
    }

    bb143: {
        StorageDead(_298);
        StorageDead(_295);
        StorageDead(_287);
        StorageDead(_284);
        StorageDead(_276);
        StorageDead(_273);
        StorageDead(_265);
        StorageDead(_262);
        StorageDead(_254);
        StorageDead(_251);
        StorageDead(_243);
        StorageDead(_240);
        StorageDead(_232);
        StorageDead(_229);
        StorageDead(_218);
        StorageDead(_216);
        StorageDead(_215);
        StorageDead(_213);
        StorageDead(_212);
        StorageDead(_210);
        StorageDead(_208);
        StorageDead(_207);
        StorageDead(_204);
        _203 = const ();
        StorageDead(_203);
        _37 = const ();
        goto -> bb144;
    }

    bb144: {
        StorageDead(_37);
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        _308 = &mut _2;
        _307 = <RefMut<'_, UserStats> as DerefMut>::deref_mut(move _308) -> [return: bb145, unwind: bb168];
    }

    bb145: {
        _306 = &mut (*_307);
        StorageDead(_308);
        _305 = UserStats::reset_fuel(move _306) -> [return: bb146, unwind: bb168];
    }

    bb146: {
        StorageDead(_306);
        StorageDead(_307);
        StorageDead(_305);
        StorageLive(_309);
        _309 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _309);
        StorageDead(_309);
        StorageDead(_29);
        StorageDead(_14);
        drop(_2) -> [return: bb147, unwind: bb169];
    }

    bb147: {
        StorageDead(_2);
        goto -> bb163;
    }

    bb148: {
        StorageDead(_287);
        StorageDead(_284);
        goto -> bb149;
    }

    bb149: {
        StorageDead(_276);
        StorageDead(_273);
        goto -> bb150;
    }

    bb150: {
        StorageDead(_265);
        StorageDead(_262);
        goto -> bb151;
    }

    bb151: {
        StorageDead(_254);
        StorageDead(_251);
        goto -> bb152;
    }

    bb152: {
        StorageDead(_243);
        StorageDead(_240);
        goto -> bb153;
    }

    bb153: {
        StorageDead(_232);
        StorageDead(_229);
        goto -> bb154;
    }

    bb154: {
        StorageDead(_218);
        StorageDead(_216);
        StorageDead(_215);
        StorageDead(_213);
        StorageDead(_212);
        StorageDead(_210);
        StorageDead(_208);
        StorageDead(_207);
        StorageDead(_204);
        StorageDead(_203);
        goto -> bb159;
    }

    bb155: {
        StorageDead(_151);
        StorageDead(_149);
        StorageDead(_148);
        StorageDead(_146);
        StorageDead(_145);
        StorageDead(_143);
        StorageDead(_141);
        StorageDead(_140);
        StorageDead(_137);
        StorageDead(_136);
        goto -> bb157;
    }

    bb156: {
        StorageDead(_123);
        StorageDead(_121);
        StorageDead(_119);
        StorageDead(_116);
        StorageDead(_113);
        StorageDead(_112);
        goto -> bb157;
    }

    bb157: {
        drop(_40) -> [return: bb158, unwind: bb168];
    }

    bb158: {
        StorageDead(_40);
        StorageDead(_39);
        goto -> bb159;
    }

    bb159: {
        StorageDead(_37);
        goto -> bb160;
    }

    bb160: {
        StorageDead(_29);
        goto -> bb161;
    }

    bb161: {
        StorageDead(_14);
        drop(_2) -> [return: bb162, unwind: bb169];
    }

    bb162: {
        StorageDead(_2);
        goto -> bb163;
    }

    bb163: {
        return;
    }

    bb164 (cleanup): {
        drop(_213) -> [return: bb168, unwind terminate(cleanup)];
    }

    bb165 (cleanup): {
        drop(_146) -> [return: bb167, unwind terminate(cleanup)];
    }

    bb166 (cleanup): {
        drop(_61) -> [return: bb167, unwind terminate(cleanup)];
    }

    bb167 (cleanup): {
        drop(_40) -> [return: bb168, unwind terminate(cleanup)];
    }

    bb168 (cleanup): {
        drop(_2) -> [return: bb169, unwind terminate(cleanup)];
    }

    bb169 (cleanup): {
        resume;
    }

    bb170 (cleanup): {
        _326 = discriminant(_41);
        goto -> bb168;
    }

    bb171 (cleanup): {
        _327 = discriminant(_30);
        goto -> bb168;
    }

    bb172 (cleanup): {
        _328 = discriminant(_3);
        goto -> bb169;
    }
}
