// MIR for `order_params::<impl at programs/drift/src/state/order_params.rs:47:1: 47:17>::get_auction_start_price_offset` before PreCodegen

fn order_params::<impl at programs/drift/src/state/order_params.rs:47:1: 47:17>::get_auction_start_price_offset(_1: order_params::OrderParams, _2: i64) -> std::result::Result<i64, error::ErrorCode> {
    debug self => _1;
    debug oracle_price => _2;
    let mut _0: std::result::Result<i64, error::ErrorCode>;
    let _3: i64;
    let mut _4: bool;
    let mut _5: &state::user::OrderType;
    let mut _6: &state::user::OrderType;
    let _7: state::user::OrderType;
    let mut _8: std::option::Option<i64>;
    let mut _9: isize;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _12: std::result::Result<i64, error::ErrorCode>;
    let mut _13: i64;
    let mut _14: i64;
    let mut _15: isize;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _20: !;
    let mut _21: i64;
    let mut _22: &state::user::OrderType;
    scope 1 {
        debug start_offset => _3;
    }
    scope 2 {
        debug auction_start_price => _10;
        let _10: i64;
        let _16: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _19: i64;
        scope 3 {
            debug residual => _16;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _19;
            scope 6 {
            }
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &(_1.0: state::user::OrderType);
        StorageLive(_6);
        _22 = const _;
        _6 = &(*_22);
        _4 = <state::user::OrderType as PartialEq>::eq(move _5, move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _4) -> [0: bb4, otherwise: bb2];
    }

    bb2: {
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_8);
        _8 = (_1.15: std::option::Option<i64>);
        _3 = Option::<i64>::unwrap_or(move _8, const 0_i64) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_8);
        goto -> bb13;
    }

    bb4: {
        StorageDead(_6);
        StorageDead(_5);
        _9 = discriminant((_1.15: std::option::Option<i64>));
        switchInt(move _9) -> [1: bb5, otherwise: bb12];
    }

    bb5: {
        StorageLive(_10);
        _10 = (((_1.15: std::option::Option<i64>) as Some).0: i64);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = _10;
        StorageLive(_14);
        _14 = _2;
        _12 = <i64 as SafeMath>::safe_sub(move _13, move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_13);
        _11 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _12) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_12);
        _15 = discriminant(_11);
        switchInt(move _15) -> [0: bb8, 1: bb10, otherwise: bb9];
    }

    bb8: {
        StorageLive(_19);
        _19 = ((_11 as Continue).0: i64);
        _3 = _19;
        StorageDead(_19);
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb13;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        StorageLive(_16);
        _16 = ((_11 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_18);
        _18 = _16;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _18) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb14;
    }

    bb12: {
        _0 = std::result::Result::<i64, error::ErrorCode>::Ok(const 0_i64);
        goto -> bb14;
    }

    bb13: {
        StorageDead(_4);
        StorageLive(_21);
        _21 = _3;
        _0 = std::result::Result::<i64, error::ErrorCode>::Ok(move _21);
        StorageDead(_21);
        StorageDead(_3);
        goto -> bb15;
    }

    bb14: {
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb15;
    }

    bb15: {
        return;
    }
}
