// MIR for `get_referrer_info` after PreCodegen

fn get_referrer_info(_1: &UserStats, _2: &anchor_lang::prelude::Pubkey, _3: &UserMap<'_>, _4: &UserStatsMap<'_>, _5: u64) -> std::result::Result<Option<(anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey)>, error::ErrorCode> {
    debug user_stats => _1;
    debug user_key => _2;
    debug makers_and_referrer => _3;
    debug makers_and_referrer_stats => _4;
    debug slot => _5;
    let mut _0: std::result::Result<std::option::Option<(anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey)>, error::ErrorCode>;
    let _6: ();
    let mut _7: bool;
    let mut _8: &anchor_lang::prelude::Pubkey;
    let mut _9: &anchor_lang::prelude::Pubkey;
    let _10: &anchor_lang::prelude::Pubkey;
    let _11: anchor_lang::prelude::Pubkey;
    let mut _12: !;
    let mut _13: std::option::Option<(anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey)>;
    let _14: ();
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _16: std::result::Result<(), error::ErrorCode>;
    let mut _17: bool;
    let mut _18: &std::collections::BTreeMap<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>;
    let mut _19: &anchor_lang::prelude::Pubkey;
    let _20: &anchor_lang::prelude::Pubkey;
    let mut _21: ();
    let _22: error::ErrorCode;
    let _23: ();
    let mut _24: &str;
    let _25: &str;
    let mut _26: &std::string::String;
    let _27: &std::string::String;
    let _28: std::string::String;
    let mut _30: std::fmt::Arguments<'_>;
    let mut _31: &[&str];
    let mut _32: &[&str; 2];
    let _33: &[&str; 2];
    let _34: [&str; 2];
    let mut _35: &[core::fmt::rt::Argument<'_>];
    let mut _36: &[core::fmt::rt::Argument<'_>; 1];
    let _37: &[core::fmt::rt::Argument<'_>; 1];
    let _38: [core::fmt::rt::Argument<'_>; 1];
    let mut _39: core::fmt::rt::Argument<'_>;
    let mut _40: &error::ErrorCode;
    let _41: &error::ErrorCode;
    let mut _42: error::ErrorCode;
    let mut _43: isize;
    let _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _47: ();
    let _48: anchor_lang::prelude::Pubkey;
    let _50: ();
    let mut _51: std::collections::btree_map::Iter<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _52: std::collections::btree_map::Iter<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _53: &std::collections::BTreeMap<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _55: ();
    let _56: ();
    let mut _57: std::option::Option<(&anchor_lang::prelude::Pubkey, &anchor_lang::prelude::AccountLoader<'_, state::user::User>)>;
    let mut _58: &mut std::collections::btree_map::Iter<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _59: &mut std::collections::btree_map::Iter<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _60: isize;
    let mut _61: !;
    let _64: ();
    let mut _65: bool;
    let mut _66: &&anchor_lang::prelude::Pubkey;
    let mut _67: &&anchor_lang::prelude::Pubkey;
    let mut _68: !;
    let mut _70: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _71: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _72: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _73: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _74: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _75: isize;
    let mut _77: !;
    let mut _78: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _80: ();
    let mut _81: bool;
    let mut _82: &anchor_lang::prelude::Pubkey;
    let _83: &state::user::User;
    let mut _84: &std::cell::RefMut<'_, state::user::User>;
    let mut _85: &anchor_lang::prelude::Pubkey;
    let mut _86: !;
    let mut _87: bool;
    let mut _88: u16;
    let mut _89: &state::user::User;
    let mut _90: &std::cell::RefMut<'_, state::user::User>;
    let mut _91: !;
    let _92: ();
    let mut _93: bool;
    let mut _94: u8;
    let mut _95: &state::user::User;
    let mut _96: &std::cell::RefMut<'_, state::user::User>;
    let mut _97: !;
    let mut _98: std::option::Option<(anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey)>;
    let _99: ();
    let mut _100: &mut state::user::User;
    let mut _101: &mut state::user::User;
    let mut _102: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _103: u64;
    let mut _104: anchor_lang::prelude::Pubkey;
    let _105: ();
    let mut _106: bool;
    let mut _107: &anchor_lang::prelude::Pubkey;
    let mut _108: &anchor_lang::prelude::Pubkey;
    let _109: anchor_lang::prelude::Pubkey;
    let mut _110: !;
    let mut _111: error::ErrorCode;
    let mut _112: std::option::Option<(anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey)>;
    let mut _113: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _114: anchor_lang::prelude::Pubkey;
    let mut _115: anchor_lang::prelude::Pubkey;
    let mut _117: isize;
    let mut _118: isize;
    let mut _119: isize;
    let mut _120: isize;
    let mut _121: isize;
    scope 1 {
        debug error_code => _22;
        let _29: std::string::String;
        let mut _116: &[&str; 2];
        scope 2 {
            debug res => _29;
        }
    }
    scope 3 {
        debug residual => _44;
        scope 4 {
        }
    }
    scope 5 {
        debug val => _47;
        scope 6 {
        }
    }
    scope 7 {
        debug referrer_authority_key => _48;
        let mut _49: anchor_lang::prelude::Pubkey;
        scope 8 {
            debug referrer_user_key => _49;
            let mut _54: std::collections::btree_map::Iter<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
            scope 9 {
                debug iter => _54;
                let _62: &anchor_lang::prelude::Pubkey;
                let _63: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
                scope 10 {
                    debug referrer_key => _62;
                    debug referrer => _63;
                    let mut _69: std::cell::RefMut<'_, state::user::User>;
                    let _76: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _79: std::cell::RefMut<'_, state::user::User>;
                    scope 11 {
                        debug referrer => _69;
                    }
                    scope 12 {
                        debug residual => _76;
                        scope 13 {
                        }
                    }
                    scope 14 {
                        debug val => _79;
                        scope 15 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &((*_1).1: anchor_lang::prelude::Pubkey);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _10 = &_11;
        _9 = &(*_10);
        _7 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _8, move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _7) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_13);
        _13 = Option::<(anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey)>::None;
        _0 = std::result::Result::<Option<(anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey)>, error::ErrorCode>::Ok(move _13);
        StorageDead(_13);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb59;
    }

    bb4: {
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        _6 = const ();
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = &((*_4).0: std::collections::BTreeMap<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>);
        StorageLive(_19);
        StorageLive(_20);
        _20 = &((*_1).1: anchor_lang::prelude::Pubkey);
        _19 = &(*_20);
        _17 = BTreeMap::<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, UserStats>>::contains_key::<anchor_lang::prelude::Pubkey>(move _18, move _19) -> [return: bb5, unwind continue];
    }

    bb5: {
        switchInt(move _17) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageLive(_21);
        _21 = ();
        _16 = std::result::Result::<(), error::ErrorCode>::Ok(move _21);
        StorageDead(_21);
        goto -> bb14;
    }

    bb7: {
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageLive(_22);
        _22 = error::ErrorCode::ReferrerStatsNotFound;
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _116 = const _;
        _33 = &(*_116);
        _32 = &(*_33);
        _31 = move _32 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_32);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = &_22;
        _40 = &(*_41);
        _39 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _40) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_40);
        _38 = [move _39];
        StorageDead(_39);
        _37 = &_38;
        _36 = &(*_37);
        _35 = move _36 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_36);
        _30 = Arguments::<'_>::new_v1(move _31, move _35) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_35);
        StorageDead(_31);
        _29 = format(move _30) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_30);
        StorageDead(_41);
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_33);
        _28 = move _29;
        StorageDead(_29);
        _27 = &_28;
        _26 = &(*_27);
        _25 = <String as Deref>::deref(move _26) -> [return: bb11, unwind: bb61];
    }

    bb11: {
        _24 = &(*_25);
        StorageDead(_26);
        _23 = solana_program::log::sol_log(move _24) -> [return: bb12, unwind: bb61];
    }

    bb12: {
        StorageDead(_24);
        drop(_28) -> [return: bb13, unwind: bb62];
    }

    bb13: {
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_23);
        StorageLive(_42);
        _42 = _22;
        _16 = std::result::Result::<(), error::ErrorCode>::Err(move _42);
        StorageDead(_42);
        StorageDead(_22);
        goto -> bb14;
    }

    bb14: {
        StorageDead(_17);
        _15 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _16) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_16);
        _43 = discriminant(_15);
        switchInt(move _43) -> [0: bb16, 1: bb18, otherwise: bb17];
    }

    bb16: {
        StorageLive(_47);
        _47 = ((_15 as Continue).0: ());
        _14 = _47;
        StorageDead(_47);
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_48);
        _48 = ((*_1).1: anchor_lang::prelude::Pubkey);
        StorageLive(_49);
        _49 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb20, unwind continue];
    }

    bb17: {
        unreachable;
    }

    bb18: {
        StorageLive(_44);
        _44 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_46);
        _46 = _44;
        _0 = <std::result::Result<Option<(anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey)>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _46) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb59;
    }

    bb20: {
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = &((*_3).0: std::collections::BTreeMap<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, state::user::User>>);
        _52 = BTreeMap::<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, User>>::iter(move _53) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_53);
        _51 = <std::collections::btree_map::Iter<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, User>> as IntoIterator>::into_iter(move _52) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_52);
        StorageLive(_54);
        _54 = move _51;
        goto -> bb23;
    }

    bb23: {
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _59 = &mut _54;
        _58 = &mut (*_59);
        _57 = <std::collections::btree_map::Iter<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, User>> as Iterator>::next(move _58) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_58);
        _60 = discriminant(_57);
        switchInt(move _60) -> [0: bb26, 1: bb25, otherwise: bb17];
    }

    bb25: {
        StorageLive(_62);
        _62 = (((_57 as Some).0: (&anchor_lang::prelude::Pubkey, &anchor_lang::prelude::AccountLoader<'_, state::user::User>)).0: &anchor_lang::prelude::Pubkey);
        StorageLive(_63);
        _63 = (((_57 as Some).0: (&anchor_lang::prelude::Pubkey, &anchor_lang::prelude::AccountLoader<'_, state::user::User>)).1: &anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _66 = &_62;
        StorageLive(_67);
        _67 = &_2;
        _65 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _66, move _67) -> [return: bb27, unwind continue];
    }

    bb26: {
        _50 = const ();
        goto -> bb50;
    }

    bb27: {
        switchInt(move _65) -> [0: bb29, otherwise: bb28];
    }

    bb28: {
        StorageDead(_67);
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_64);
        goto -> bb52;
    }

    bb29: {
        StorageDead(_67);
        StorageDead(_66);
        _64 = const ();
        StorageDead(_65);
        StorageDead(_64);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _73 = &(*_63);
        _72 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _73) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_73);
        StorageLive(_74);
        _74 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _71 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _72, move _74) -> [return: bb31, unwind: bb62];
    }

    bb31: {
        StorageDead(_74);
        StorageDead(_72);
        _70 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _71) -> [return: bb32, unwind: bb62];
    }

    bb32: {
        StorageDead(_71);
        _75 = discriminant(_70);
        switchInt(move _75) -> [0: bb33, 1: bb34, otherwise: bb17];
    }

    bb33: {
        StorageLive(_79);
        _79 = move ((_70 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _69 = move _79;
        StorageDead(_79);
        _119 = discriminant(_70);
        StorageDead(_70);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = &_69;
        _83 = <RefMut<'_, User> as Deref>::deref(move _84) -> [return: bb36, unwind: bb60];
    }

    bb34: {
        StorageLive(_76);
        _76 = ((_70 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_78);
        _78 = _76;
        _0 = <std::result::Result<Option<(anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey)>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _78) -> [return: bb35, unwind: bb63];
    }

    bb35: {
        StorageDead(_78);
        StorageDead(_76);
        _117 = discriminant(_70);
        StorageDead(_70);
        goto -> bb57;
    }

    bb36: {
        StorageDead(_84);
        _82 = &((*_83).0: anchor_lang::prelude::Pubkey);
        StorageLive(_85);
        _85 = &_48;
        _81 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _82, move _85) -> [return: bb37, unwind: bb60];
    }

    bb37: {
        switchInt(move _81) -> [0: bb39, otherwise: bb38];
    }

    bb38: {
        StorageDead(_85);
        StorageDead(_83);
        StorageDead(_82);
        StorageDead(_81);
        StorageDead(_80);
        drop(_69) -> [return: bb51, unwind: bb62];
    }

    bb39: {
        StorageDead(_85);
        StorageDead(_83);
        StorageDead(_82);
        _80 = const ();
        StorageDead(_81);
        StorageDead(_80);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        _90 = &_69;
        _89 = <RefMut<'_, User> as Deref>::deref(move _90) -> [return: bb40, unwind: bb60];
    }

    bb40: {
        StorageDead(_90);
        _88 = ((*_89).18: u16);
        _87 = Eq(move _88, const 0_u16);
        switchInt(move _87) -> [0: bb47, otherwise: bb41];
    }

    bb41: {
        StorageDead(_89);
        StorageDead(_88);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = &_69;
        _95 = <RefMut<'_, User> as Deref>::deref(move _96) -> [return: bb42, unwind: bb60];
    }

    bb42: {
        StorageDead(_96);
        _94 = ((*_95).27: u8);
        _93 = Ne(move _94, const 0_u8);
        switchInt(move _93) -> [0: bb44, otherwise: bb43];
    }

    bb43: {
        StorageDead(_95);
        StorageDead(_94);
        StorageLive(_98);
        _98 = Option::<(anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey)>::None;
        _0 = std::result::Result::<Option<(anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey)>, error::ErrorCode>::Ok(move _98);
        StorageDead(_98);
        StorageDead(_93);
        StorageDead(_92);
        StorageDead(_87);
        drop(_69) -> [return: bb57, unwind: bb62];
    }

    bb44: {
        StorageDead(_95);
        StorageDead(_94);
        _92 = const ();
        StorageDead(_93);
        StorageDead(_92);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _102 = &mut _69;
        _101 = <RefMut<'_, User> as DerefMut>::deref_mut(move _102) -> [return: bb45, unwind: bb60];
    }

    bb45: {
        _100 = &mut (*_101);
        StorageDead(_102);
        StorageLive(_103);
        _103 = _5;
        _99 = User::update_last_active_slot(move _100, move _103) -> [return: bb46, unwind: bb60];
    }

    bb46: {
        StorageDead(_103);
        StorageDead(_100);
        StorageDead(_101);
        StorageDead(_99);
        StorageLive(_104);
        _104 = (*_62);
        _49 = move _104;
        StorageDead(_104);
        _50 = const ();
        StorageDead(_87);
        drop(_69) -> [return: bb49, unwind: bb62];
    }

    bb47: {
        StorageDead(_89);
        StorageDead(_88);
        _56 = const ();
        StorageDead(_87);
        drop(_69) -> [return: bb48, unwind: bb62];
    }

    bb48: {
        StorageDead(_69);
        StorageDead(_63);
        StorageDead(_62);
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_56);
        _55 = const ();
        goto -> bb23;
    }

    bb49: {
        StorageDead(_69);
        StorageDead(_63);
        StorageDead(_62);
        goto -> bb50;
    }

    bb50: {
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_54);
        StorageDead(_51);
        StorageDead(_50);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        _107 = &_49;
        StorageLive(_108);
        StorageLive(_109);
        _109 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb53, unwind continue];
    }

    bb51: {
        StorageDead(_69);
        goto -> bb52;
    }

    bb52: {
        StorageDead(_63);
        StorageDead(_62);
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_56);
        goto -> bb23;
    }

    bb53: {
        _108 = &_109;
        _106 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _107, move _108) -> [return: bb54, unwind continue];
    }

    bb54: {
        switchInt(move _106) -> [0: bb56, otherwise: bb55];
    }

    bb55: {
        StorageDead(_109);
        StorageDead(_108);
        StorageDead(_107);
        StorageLive(_111);
        _111 = error::ErrorCode::ReferrerNotFound;
        _0 = std::result::Result::<Option<(anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey)>, error::ErrorCode>::Err(move _111);
        StorageDead(_111);
        StorageDead(_106);
        StorageDead(_105);
        goto -> bb58;
    }

    bb56: {
        StorageDead(_109);
        StorageDead(_108);
        StorageDead(_107);
        _105 = const ();
        StorageDead(_106);
        StorageDead(_105);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        _114 = _48;
        StorageLive(_115);
        _115 = _49;
        _113 = (move _114, move _115);
        StorageDead(_115);
        StorageDead(_114);
        _112 = Option::<(anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey)>::Some(move _113);
        StorageDead(_113);
        _0 = std::result::Result::<Option<(anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey)>, error::ErrorCode>::Ok(move _112);
        StorageDead(_112);
        StorageDead(_49);
        StorageDead(_48);
        goto -> bb59;
    }

    bb57: {
        StorageDead(_69);
        StorageDead(_63);
        StorageDead(_62);
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_54);
        StorageDead(_51);
        StorageDead(_50);
        goto -> bb58;
    }

    bb58: {
        StorageDead(_49);
        StorageDead(_48);
        goto -> bb59;
    }

    bb59: {
        return;
    }

    bb60 (cleanup): {
        drop(_69) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_28) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        resume;
    }

    bb63 (cleanup): {
        _121 = discriminant(_70);
        goto -> bb62;
    }
}
