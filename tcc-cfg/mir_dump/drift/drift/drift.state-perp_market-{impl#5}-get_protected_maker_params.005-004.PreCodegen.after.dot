digraph Mir_0_3809 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn PerpMarket::get_protected_maker_params(_1: &amp;ReErased state::perp_market::PerpMarket) -&gt; state::protected_maker_mode_config::ProtectedMakerParams<br align="left"/>let _2: u64;<br align="left"/>let mut _3: bool;<br align="left"/>let mut _4: u8;<br align="left"/>let mut _5: u64;<br align="left"/>let mut _6: u64;<br align="left"/>let mut _7: u64;<br align="left"/>let mut _8: u64;<br align="left"/>let mut _9: u8;<br align="left"/>let mut _10: bool;<br align="left"/>let mut _11: u8;<br align="left"/>let mut _12: u64;<br align="left"/>let mut _13: u64;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug dynamic_offset =&gt; _2;<br align="left"/>>;
    bb0__0_3809 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>_4 = ((*_1).35: u8)<br/>_3 = Gt(move _4, const 0_u8)<br/></td></tr><tr><td align="left">switchInt(move _3)</td></tr></table>>];
    bb1__0_3809 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = (((*_1).1: state::perp_market::AMM).61: u64)<br/>StorageLive(_7)<br/>_7 = (((*_1).1: state::perp_market::AMM).60: u64)<br/></td></tr><tr><td align="left">_5 = &lt;u64 as Ord&gt;::max(move _6, move _7)</td></tr></table>>];
    bb2__0_3809 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>StorageDead(_6)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = ((*_1).35: u8)<br/>_8 = move _9 as u64 (IntToInt)<br/>StorageDead(_9)<br/>_10 = Eq(_8, const 0_u64)<br/></td></tr><tr><td align="left">assert(!move _10, &quot;attempt to divide `{}` by zero&quot;, _5)</td></tr></table>>];
    bb3__0_3809 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_2 = Div(move _5, move _8)<br/>StorageDead(_8)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb4__0_3809 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>_2 = const 0_u64<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb5__0_3809 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_3)<br/>StorageLive(_11)<br/>_11 = ((*_1).34: u8)<br/>StorageLive(_12)<br/>_12 = _2<br/>StorageLive(_13)<br/>_13 = (((*_1).1: state::perp_market::AMM).53: u64)<br/>_0 = ProtectedMakerParams { limit_price_divisor: move _11, dynamic_offset: move _12, tick_size: move _13 }<br/>StorageDead(_13)<br/>StorageDead(_12)<br/>StorageDead(_11)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_3809 -> bb4__0_3809 [label="0"];
    bb0__0_3809 -> bb1__0_3809 [label="otherwise"];
    bb1__0_3809 -> bb2__0_3809 [label="return"];
    bb2__0_3809 -> bb3__0_3809 [label="success"];
    bb3__0_3809 -> bb5__0_3809 [label=""];
    bb4__0_3809 -> bb5__0_3809 [label=""];
}
