// MIR for `order_params::<impl at programs/drift/src/state/order_params.rs:20:72: 20:81>::eq` before PreCodegen

fn order_params::<impl at programs/drift/src/state/order_params.rs:20:72: 20:81>::eq(_1: &order_params::OrderParams, _2: &order_params::OrderParams) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: &state::user::OrderType;
    let mut _5: &state::user::OrderType;
    let mut _6: bool;
    let mut _7: &state::user::MarketType;
    let mut _8: &state::user::MarketType;
    let mut _9: bool;
    let mut _10: &controller::position::PositionDirection;
    let mut _11: &controller::position::PositionDirection;
    let mut _12: bool;
    let mut _13: u8;
    let mut _14: u8;
    let mut _15: bool;
    let mut _16: u64;
    let mut _17: u64;
    let mut _18: bool;
    let mut _19: u64;
    let mut _20: u64;
    let mut _21: bool;
    let mut _22: u16;
    let mut _23: u16;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: &state::order_params::PostOnlyParam;
    let mut _29: &state::order_params::PostOnlyParam;
    let mut _30: bool;
    let mut _31: u8;
    let mut _32: u8;
    let mut _33: bool;
    let mut _34: &std::option::Option<i64>;
    let mut _35: &std::option::Option<i64>;
    let mut _36: bool;
    let mut _37: &std::option::Option<u64>;
    let mut _38: &std::option::Option<u64>;
    let mut _39: bool;
    let mut _40: &state::user::OrderTriggerCondition;
    let mut _41: &state::user::OrderTriggerCondition;
    let mut _42: bool;
    let mut _43: &std::option::Option<i32>;
    let mut _44: &std::option::Option<i32>;
    let mut _45: bool;
    let mut _46: &std::option::Option<u8>;
    let mut _47: &std::option::Option<u8>;
    let mut _48: bool;
    let mut _49: &std::option::Option<i64>;
    let mut _50: &std::option::Option<i64>;
    let mut _51: &std::option::Option<i64>;
    let mut _52: &std::option::Option<i64>;

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = &((*_1).0: state::user::OrderType);
        StorageLive(_5);
        _5 = &((*_2).0: state::user::OrderType);
        _3 = <state::user::OrderType as PartialEq>::eq(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _3) -> [0: bb42, otherwise: bb2];
    }

    bb2: {
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &((*_1).1: state::user::MarketType);
        StorageLive(_8);
        _8 = &((*_2).1: state::user::MarketType);
        _6 = <state::user::MarketType as PartialEq>::eq(move _7, move _8) -> [return: bb3, unwind continue];
    }

    bb3: {
        switchInt(move _6) -> [0: bb41, otherwise: bb4];
    }

    bb4: {
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &((*_1).2: controller::position::PositionDirection);
        StorageLive(_11);
        _11 = &((*_2).2: controller::position::PositionDirection);
        _9 = <controller::position::PositionDirection as PartialEq>::eq(move _10, move _11) -> [return: bb5, unwind continue];
    }

    bb5: {
        switchInt(move _9) -> [0: bb40, otherwise: bb6];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_12);
        StorageLive(_13);
        _13 = ((*_1).3: u8);
        StorageLive(_14);
        _14 = ((*_2).3: u8);
        _12 = Eq(move _13, move _14);
        switchInt(move _12) -> [0: bb39, otherwise: bb7];
    }

    bb7: {
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_15);
        StorageLive(_16);
        _16 = ((*_1).4: u64);
        StorageLive(_17);
        _17 = ((*_2).4: u64);
        _15 = Eq(move _16, move _17);
        switchInt(move _15) -> [0: bb38, otherwise: bb8];
    }

    bb8: {
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_18);
        StorageLive(_19);
        _19 = ((*_1).5: u64);
        StorageLive(_20);
        _20 = ((*_2).5: u64);
        _18 = Eq(move _19, move _20);
        switchInt(move _18) -> [0: bb37, otherwise: bb9];
    }

    bb9: {
        StorageDead(_20);
        StorageDead(_19);
        StorageLive(_21);
        StorageLive(_22);
        _22 = ((*_1).6: u16);
        StorageLive(_23);
        _23 = ((*_2).6: u16);
        _21 = Eq(move _22, move _23);
        switchInt(move _21) -> [0: bb36, otherwise: bb10];
    }

    bb10: {
        StorageDead(_23);
        StorageDead(_22);
        StorageLive(_24);
        StorageLive(_25);
        _25 = ((*_1).7: bool);
        StorageLive(_26);
        _26 = ((*_2).7: bool);
        _24 = Eq(move _25, move _26);
        switchInt(move _24) -> [0: bb35, otherwise: bb11];
    }

    bb11: {
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &((*_1).8: state::order_params::PostOnlyParam);
        StorageLive(_29);
        _29 = &((*_2).8: state::order_params::PostOnlyParam);
        _27 = <PostOnlyParam as PartialEq>::eq(move _28, move _29) -> [return: bb12, unwind continue];
    }

    bb12: {
        switchInt(move _27) -> [0: bb34, otherwise: bb13];
    }

    bb13: {
        StorageDead(_29);
        StorageDead(_28);
        StorageLive(_30);
        StorageLive(_31);
        _31 = ((*_1).9: u8);
        StorageLive(_32);
        _32 = ((*_2).9: u8);
        _30 = Eq(move _31, move _32);
        switchInt(move _30) -> [0: bb33, otherwise: bb14];
    }

    bb14: {
        StorageDead(_32);
        StorageDead(_31);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &((*_1).10: std::option::Option<i64>);
        StorageLive(_35);
        _35 = &((*_2).10: std::option::Option<i64>);
        _33 = <Option<i64> as PartialEq>::eq(move _34, move _35) -> [return: bb15, unwind continue];
    }

    bb15: {
        switchInt(move _33) -> [0: bb32, otherwise: bb16];
    }

    bb16: {
        StorageDead(_35);
        StorageDead(_34);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &((*_1).11: std::option::Option<u64>);
        StorageLive(_38);
        _38 = &((*_2).11: std::option::Option<u64>);
        _36 = <Option<u64> as PartialEq>::eq(move _37, move _38) -> [return: bb17, unwind continue];
    }

    bb17: {
        switchInt(move _36) -> [0: bb31, otherwise: bb18];
    }

    bb18: {
        StorageDead(_38);
        StorageDead(_37);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &((*_1).12: state::user::OrderTriggerCondition);
        StorageLive(_41);
        _41 = &((*_2).12: state::user::OrderTriggerCondition);
        _39 = <OrderTriggerCondition as PartialEq>::eq(move _40, move _41) -> [return: bb19, unwind continue];
    }

    bb19: {
        switchInt(move _39) -> [0: bb30, otherwise: bb20];
    }

    bb20: {
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_42);
        StorageLive(_43);
        _43 = &((*_1).13: std::option::Option<i32>);
        StorageLive(_44);
        _44 = &((*_2).13: std::option::Option<i32>);
        _42 = <Option<i32> as PartialEq>::eq(move _43, move _44) -> [return: bb21, unwind continue];
    }

    bb21: {
        switchInt(move _42) -> [0: bb29, otherwise: bb22];
    }

    bb22: {
        StorageDead(_44);
        StorageDead(_43);
        StorageLive(_45);
        StorageLive(_46);
        _46 = &((*_1).14: std::option::Option<u8>);
        StorageLive(_47);
        _47 = &((*_2).14: std::option::Option<u8>);
        _45 = <Option<u8> as PartialEq>::eq(move _46, move _47) -> [return: bb23, unwind continue];
    }

    bb23: {
        switchInt(move _45) -> [0: bb28, otherwise: bb24];
    }

    bb24: {
        StorageDead(_47);
        StorageDead(_46);
        StorageLive(_48);
        StorageLive(_49);
        _49 = &((*_1).15: std::option::Option<i64>);
        StorageLive(_50);
        _50 = &((*_2).15: std::option::Option<i64>);
        _48 = <Option<i64> as PartialEq>::eq(move _49, move _50) -> [return: bb25, unwind continue];
    }

    bb25: {
        switchInt(move _48) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        StorageDead(_50);
        StorageDead(_49);
        StorageLive(_51);
        _51 = &((*_1).16: std::option::Option<i64>);
        StorageLive(_52);
        _52 = &((*_2).16: std::option::Option<i64>);
        _0 = <Option<i64> as PartialEq>::eq(move _51, move _52) -> [return: bb44, unwind continue];
    }

    bb27: {
        StorageDead(_50);
        StorageDead(_49);
        goto -> bb43;
    }

    bb28: {
        StorageDead(_47);
        StorageDead(_46);
        goto -> bb43;
    }

    bb29: {
        StorageDead(_44);
        StorageDead(_43);
        goto -> bb43;
    }

    bb30: {
        StorageDead(_41);
        StorageDead(_40);
        goto -> bb43;
    }

    bb31: {
        StorageDead(_38);
        StorageDead(_37);
        goto -> bb43;
    }

    bb32: {
        StorageDead(_35);
        StorageDead(_34);
        goto -> bb43;
    }

    bb33: {
        StorageDead(_32);
        StorageDead(_31);
        goto -> bb43;
    }

    bb34: {
        StorageDead(_29);
        StorageDead(_28);
        goto -> bb43;
    }

    bb35: {
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb43;
    }

    bb36: {
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb43;
    }

    bb37: {
        StorageDead(_20);
        StorageDead(_19);
        goto -> bb43;
    }

    bb38: {
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb43;
    }

    bb39: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb43;
    }

    bb40: {
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb43;
    }

    bb41: {
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb43;
    }

    bb42: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb43;
    }

    bb43: {
        _0 = const false;
        goto -> bb45;
    }

    bb44: {
        StorageDead(_52);
        StorageDead(_51);
        goto -> bb45;
    }

    bb45: {
        StorageDead(_48);
        StorageDead(_45);
        StorageDead(_42);
        StorageDead(_39);
        StorageDead(_36);
        StorageDead(_33);
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_24);
        StorageDead(_21);
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_12);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_3);
        return;
    }
}
