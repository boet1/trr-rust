// MIR for `admin::<impl at programs/drift/src/instructions/admin.rs:5140:10: 5140:18>::try_accounts` after PreCodegen

fn admin::<impl at programs/drift/src/instructions/admin.rs:5140:10: 5140:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut InitializePerpMarketBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<admin::InitializePerpMarket<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<instructions::admin::InitializePerpMarket<'_>, anchor_lang::error::Error>;
    let _6: anchor_lang::prelude::Signer<'_>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _8: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _9: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _10: &anchor_lang::prelude::Pubkey;
    let mut _11: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _12: &[u8];
    let mut _13: &mut instructions::admin::InitializePerpMarketBumps;
    let mut _14: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _15: {closure@programs/drift/src/instructions/admin.rs:5140:10: 5140:18};
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _20: anchor_lang::prelude::Signer<'_>;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>>;
    let mut _23: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _24: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _25: &anchor_lang::prelude::Pubkey;
    let mut _26: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _27: &[u8];
    let mut _28: &mut instructions::admin::InitializePerpMarketBumps;
    let mut _29: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _30: {closure@programs/drift/src/instructions/admin.rs:5140:10: 5140:18};
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _36: ();
    let mut _37: bool;
    let mut _38: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _39: !;
    let mut _40: anchor_lang::error::Error;
    let mut _41: anchor_lang::error::ErrorCode;
    let _43: usize;
    let mut _44: usize;
    let mut _45: bool;
    let mut _46: &[anchor_lang::prelude::AccountInfo<'_>];
    let _47: &[anchor_lang::prelude::AccountInfo<'_>];
    let _48: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _49: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _50: std::ops::RangeFrom<usize>;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _53: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _54: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _55: &anchor_lang::prelude::Pubkey;
    let mut _56: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _57: &[u8];
    let mut _58: &mut instructions::admin::InitializePerpMarketBumps;
    let mut _59: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _60: {closure@programs/drift/src/instructions/admin.rs:5140:10: 5140:18};
    let mut _61: isize;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>>;
    let mut _68: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _69: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _70: &anchor_lang::prelude::Pubkey;
    let mut _71: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _72: &[u8];
    let mut _73: &mut instructions::admin::InitializePerpMarketBumps;
    let mut _74: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _75: {closure@programs/drift/src/instructions/admin.rs:5140:10: 5140:18};
    let mut _76: isize;
    let mut _78: !;
    let mut _79: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _82: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>>;
    let mut _83: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _84: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _85: &anchor_lang::prelude::Pubkey;
    let mut _86: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _87: &[u8];
    let mut _88: &mut instructions::admin::InitializePerpMarketBumps;
    let mut _89: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _90: {closure@programs/drift/src/instructions/admin.rs:5140:10: 5140:18};
    let mut _91: isize;
    let mut _93: !;
    let mut _94: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _97: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Rent>;
    let mut _98: std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError>;
    let mut _99: isize;
    let mut _101: !;
    let mut _102: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _106: (anchor_lang::prelude::Pubkey, u8);
    let mut _107: &[&[u8]];
    let mut _108: &[&[u8]; 2];
    let _109: &[&[u8]; 2];
    let _110: [&[u8]; 2];
    let mut _111: &[u8];
    let mut _112: &[u8; 11];
    let _113: &[u8; 11];
    let mut _114: &[u8];
    let _115: &[u8];
    let mut _116: &[u8; 2];
    let _117: [u8; 2];
    let mut _118: u16;
    let mut _119: &state::state::State;
    let mut _120: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _121: &anchor_lang::prelude::Pubkey;
    let mut _122: u8;
    let _123: ();
    let mut _124: bool;
    let mut _125: &anchor_lang::prelude::Pubkey;
    let _126: anchor_lang::prelude::Pubkey;
    let mut _127: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _128: &anchor_lang::prelude::Pubkey;
    let mut _129: !;
    let mut _130: anchor_lang::error::Error;
    let mut _131: anchor_lang::error::Error;
    let mut _132: anchor_lang::error::Error;
    let mut _133: anchor_lang::error::ErrorCode;
    let mut _134: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _135: anchor_lang::prelude::Pubkey;
    let mut _136: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _137: anchor_lang::prelude::Pubkey;
    let mut _140: &&anchor_lang::prelude::AccountInfo<'_>;
    let _141: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _145: bool;
    let mut _146: bool;
    let mut _147: &&anchor_lang::prelude::Pubkey;
    let mut _148: &&anchor_lang::prelude::Pubkey;
    let _149: &anchor_lang::prelude::Pubkey;
    let _150: anchor_lang::prelude::Pubkey;
    let mut _152: &anchor_lang::prelude::AccountInfo<'_>;
    let _153: ();
    let mut _154: bool;
    let mut _155: u64;
    let mut _158: &anchor_lang::prelude::Rent;
    let mut _159: usize;
    let mut _161: anchor_lang::prelude::AccountInfo<'_>;
    let mut _162: &anchor_lang::prelude::Signer<'_>;
    let mut _163: anchor_lang::prelude::AccountInfo<'_>;
    let mut _164: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _166: anchor_lang::prelude::AccountInfo<'_>;
    let mut _167: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _168: anchor_lang::system_program::CreateAccount<'_>;
    let _169: ();
    let mut _170: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _171: std::result::Result<(), anchor_lang::error::Error>;
    let mut _172: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _173: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _174: &[&[&[u8]]];
    let mut _175: &[&[&[u8]]; 1];
    let _176: &[&[&[u8]]; 1];
    let _177: [&[&[u8]]; 1];
    let mut _178: &[&[u8]];
    let _179: &[&[u8]];
    let _180: &[&[u8]];
    let mut _181: &[&[u8]; 3];
    let _182: [&[u8]; 3];
    let mut _183: &[u8];
    let mut _184: &[u8; 11];
    let _185: &[u8; 11];
    let mut _186: &[u8];
    let mut _187: &[u8; 2];
    let _188: [u8; 2];
    let mut _189: u16;
    let mut _190: &state::state::State;
    let mut _191: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _192: &[u8];
    let _193: &[u8];
    let _194: &[u8];
    let mut _195: &[u8; 1];
    let _196: [u8; 1];
    let mut _197: u8;
    let mut _198: std::ops::RangeFull;
    let mut _199: std::ops::RangeFull;
    let mut _200: u64;
    let mut _201: u64;
    let mut _202: usize;
    let mut _203: &anchor_lang::prelude::Pubkey;
    let mut _204: isize;
    let mut _206: !;
    let mut _207: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _209: ();
    let mut _210: bool;
    let mut _211: &anchor_lang::prelude::Pubkey;
    let _212: anchor_lang::prelude::Pubkey;
    let mut _213: &anchor_lang::prelude::Signer<'_>;
    let mut _214: &anchor_lang::prelude::Pubkey;
    let _215: anchor_lang::prelude::Pubkey;
    let mut _216: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _217: !;
    let mut _218: anchor_lang::error::Error;
    let mut _219: anchor_lang::error::Error;
    let mut _220: anchor_lang::error::AnchorError;
    let mut _221: std::string::String;
    let mut _222: &anchor_lang::error::ErrorCode;
    let _223: anchor_lang::error::ErrorCode;
    let mut _224: u32;
    let mut _225: anchor_lang::error::ErrorCode;
    let mut _226: std::string::String;
    let mut _227: &anchor_lang::error::ErrorCode;
    let _228: anchor_lang::error::ErrorCode;
    let mut _229: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _230: anchor_lang::error::ErrorOrigin;
    let mut _231: anchor_lang::error::Source;
    let mut _232: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _233: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _234: anchor_lang::prelude::Pubkey;
    let mut _235: &anchor_lang::prelude::Signer<'_>;
    let mut _236: anchor_lang::prelude::Pubkey;
    let mut _237: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _239: u64;
    let mut _240: u64;
    let mut _241: &anchor_lang::prelude::Rent;
    let mut _242: usize;
    let mut _243: u64;
    let _244: ();
    let mut _245: bool;
    let mut _246: u64;
    let mut _248: anchor_lang::prelude::AccountInfo<'_>;
    let mut _249: &anchor_lang::prelude::Signer<'_>;
    let mut _250: anchor_lang::prelude::AccountInfo<'_>;
    let mut _251: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _253: anchor_lang::prelude::AccountInfo<'_>;
    let mut _254: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _255: anchor_lang::system_program::Transfer<'_>;
    let _256: ();
    let mut _257: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _258: std::result::Result<(), anchor_lang::error::Error>;
    let mut _259: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
    let mut _260: u64;
    let mut _261: isize;
    let mut _263: !;
    let mut _264: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _267: anchor_lang::prelude::AccountInfo<'_>;
    let mut _268: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _270: anchor_lang::prelude::AccountInfo<'_>;
    let mut _271: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _272: anchor_lang::system_program::Allocate<'_>;
    let _273: ();
    let mut _274: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _275: std::result::Result<(), anchor_lang::error::Error>;
    let mut _276: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _277: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _278: &[&[&[u8]]];
    let mut _279: &[&[&[u8]]; 1];
    let _280: &[&[&[u8]]; 1];
    let _281: [&[&[u8]]; 1];
    let mut _282: &[&[u8]];
    let _283: &[&[u8]];
    let _284: &[&[u8]];
    let mut _285: &[&[u8]; 3];
    let _286: [&[u8]; 3];
    let mut _287: &[u8];
    let mut _288: &[u8; 11];
    let _289: &[u8; 11];
    let mut _290: &[u8];
    let mut _291: &[u8; 2];
    let _292: [u8; 2];
    let mut _293: u16;
    let mut _294: &state::state::State;
    let mut _295: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _296: &[u8];
    let _297: &[u8];
    let _298: &[u8];
    let mut _299: &[u8; 1];
    let _300: [u8; 1];
    let mut _301: u8;
    let mut _302: std::ops::RangeFull;
    let mut _303: std::ops::RangeFull;
    let mut _304: u64;
    let mut _305: usize;
    let mut _306: isize;
    let mut _308: !;
    let mut _309: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _312: anchor_lang::prelude::AccountInfo<'_>;
    let mut _313: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _315: anchor_lang::prelude::AccountInfo<'_>;
    let mut _316: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _317: anchor_lang::system_program::Assign<'_>;
    let _318: ();
    let mut _319: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _320: std::result::Result<(), anchor_lang::error::Error>;
    let mut _321: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _322: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _323: &[&[&[u8]]];
    let mut _324: &[&[&[u8]]; 1];
    let _325: &[&[&[u8]]; 1];
    let _326: [&[&[u8]]; 1];
    let mut _327: &[&[u8]];
    let _328: &[&[u8]];
    let _329: &[&[u8]];
    let mut _330: &[&[u8]; 3];
    let _331: [&[u8]; 3];
    let mut _332: &[u8];
    let mut _333: &[u8; 11];
    let _334: &[u8; 11];
    let mut _335: &[u8];
    let mut _336: &[u8; 2];
    let _337: [u8; 2];
    let mut _338: u16;
    let mut _339: &state::state::State;
    let mut _340: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _341: &[u8];
    let _342: &[u8];
    let _343: &[u8];
    let mut _344: &[u8; 1];
    let _345: [u8; 1];
    let mut _346: u8;
    let mut _347: std::ops::RangeFull;
    let mut _348: std::ops::RangeFull;
    let mut _349: &anchor_lang::prelude::Pubkey;
    let mut _350: isize;
    let mut _352: !;
    let mut _353: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _355: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _356: &anchor_lang::prelude::Pubkey;
    let mut _357: &anchor_lang::prelude::AccountInfo<'_>;
    let _358: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _359: isize;
    let mut _362: !;
    let mut _363: anchor_lang::error::Error;
    let mut _364: anchor_lang::error::Error;
    let mut _365: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _366: &anchor_lang::prelude::AccountInfo<'_>;
    let _367: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _368: isize;
    let mut _371: !;
    let mut _372: anchor_lang::error::Error;
    let mut _373: anchor_lang::error::Error;
    let _374: ();
    let mut _375: bool;
    let _376: ();
    let mut _377: bool;
    let mut _378: usize;
    let mut _379: usize;
    let mut _380: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _381: !;
    let mut _382: anchor_lang::error::Error;
    let mut _383: anchor_lang::error::Error;
    let mut _384: anchor_lang::error::Error;
    let mut _385: anchor_lang::error::ErrorCode;
    let mut _386: (usize, usize);
    let mut _387: usize;
    let mut _388: usize;
    let mut _389: &anchor_lang::prelude::AccountInfo<'_>;
    let _390: ();
    let mut _391: bool;
    let mut _392: &&anchor_lang::prelude::Pubkey;
    let mut _393: &&anchor_lang::prelude::Pubkey;
    let mut _394: !;
    let mut _395: anchor_lang::error::Error;
    let mut _396: anchor_lang::error::Error;
    let mut _397: anchor_lang::error::Error;
    let mut _398: anchor_lang::error::ErrorCode;
    let mut _399: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _400: anchor_lang::prelude::Pubkey;
    let mut _401: anchor_lang::prelude::Pubkey;
    let mut _403: &anchor_lang::prelude::Rent;
    let mut _404: usize;
    let mut _405: bool;
    let mut _406: u64;
    let mut _407: &anchor_lang::prelude::AccountInfo<'_>;
    let _408: anchor_lang::prelude::AccountInfo<'_>;
    let mut _409: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _410: u64;
    let mut _411: !;
    let mut _412: anchor_lang::error::Error;
    let mut _413: anchor_lang::error::Error;
    let mut _414: anchor_lang::error::ErrorCode;
    let _415: ();
    let mut _416: bool;
    let mut _417: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _418: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let _419: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _420: !;
    let mut _421: anchor_lang::error::Error;
    let mut _422: anchor_lang::error::Error;
    let mut _423: anchor_lang::error::ErrorCode;
    let _424: ();
    let mut _425: bool;
    let mut _426: &anchor_lang::prelude::Rent;
    let mut _427: u64;
    let mut _428: &anchor_lang::prelude::AccountInfo<'_>;
    let _429: anchor_lang::prelude::AccountInfo<'_>;
    let mut _430: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _431: usize;
    let mut _432: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _433: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _434: &anchor_lang::prelude::AccountInfo<'_>;
    let _435: anchor_lang::prelude::AccountInfo<'_>;
    let mut _436: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _437: isize;
    let mut _439: !;
    let mut _440: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _442: !;
    let mut _443: anchor_lang::error::Error;
    let mut _444: anchor_lang::error::Error;
    let mut _445: anchor_lang::error::ErrorCode;
    let _446: ();
    let mut _447: bool;
    let mut _448: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _449: &anchor_lang::prelude::Signer<'_>;
    let _450: &anchor_lang::prelude::Signer<'_>;
    let mut _451: !;
    let mut _452: anchor_lang::error::Error;
    let mut _453: anchor_lang::error::Error;
    let mut _454: anchor_lang::error::ErrorCode;
    let _455: ();
    let mut _456: bool;
    let mut _457: &anchor_lang::prelude::Pubkey;
    let _458: anchor_lang::prelude::Pubkey;
    let mut _459: &anchor_lang::prelude::Signer<'_>;
    let mut _460: &anchor_lang::prelude::Pubkey;
    let _461: anchor_lang::prelude::Pubkey;
    let mut _462: bool;
    let mut _463: &anchor_lang::prelude::Pubkey;
    let _464: anchor_lang::prelude::Pubkey;
    let mut _465: &anchor_lang::prelude::Signer<'_>;
    let mut _466: &anchor_lang::prelude::Pubkey;
    let _467: &state::state::State;
    let mut _468: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _469: !;
    let mut _470: anchor_lang::error::Error;
    let mut _471: anchor_lang::error::Error;
    let mut _472: anchor_lang::error::ErrorCode;
    let _473: ();
    let mut _474: bool;
    let mut _475: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _476: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _477: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _478: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _479: !;
    let mut _480: anchor_lang::error::Error;
    let mut _481: anchor_lang::error::Error;
    let mut _482: anchor_lang::error::ErrorCode;
    let mut _483: instructions::admin::InitializePerpMarket<'_>;
    let mut _484: anchor_lang::prelude::Signer<'_>;
    let mut _485: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _486: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _487: anchor_lang::prelude::AccountInfo<'_>;
    let mut _488: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
    let mut _489: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _493: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _494: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _495: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _496: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _497: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _498: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _499: bool;
    let mut _500: bool;
    let mut _501: bool;
    let mut _502: bool;
    let mut _503: bool;
    let mut _504: bool;
    let mut _505: bool;
    let mut _506: bool;
    let mut _507: bool;
    let mut _508: bool;
    let mut _509: bool;
    let mut _510: isize;
    let mut _511: isize;
    let mut _512: isize;
    let mut _513: isize;
    let mut _514: isize;
    let mut _515: isize;
    let mut _516: isize;
    let mut _517: isize;
    let mut _518: isize;
    let mut _519: isize;
    let mut _520: isize;
    let mut _521: isize;
    let mut _522: isize;
    let mut _523: isize;
    let mut _524: isize;
    let mut _525: isize;
    let mut _526: isize;
    let mut _527: isize;
    let mut _528: isize;
    let mut _529: isize;
    let mut _530: isize;
    let mut _531: isize;
    let mut _532: isize;
    let mut _533: isize;
    let mut _534: isize;
    let mut _535: isize;
    let mut _536: isize;
    let mut _537: isize;
    let mut _538: isize;
    let mut _539: isize;
    let mut _540: isize;
    let mut _541: isize;
    let mut _542: isize;
    let mut _543: isize;
    let mut _544: isize;
    let mut _545: isize;
    let mut _546: isize;
    let mut _547: isize;
    let mut _548: isize;
    let mut _549: isize;
    let mut _550: isize;
    let mut _551: isize;
    let mut _552: isize;
    let mut _553: isize;
    let mut _554: isize;
    let mut _555: isize;
    let mut _556: isize;
    let mut _557: isize;
    let mut _558: isize;
    let mut _559: isize;
    let mut _560: isize;
    let mut _561: isize;
    let mut _562: isize;
    let mut _563: isize;
    let mut _564: isize;
    let mut _565: isize;
    let mut _566: isize;
    let mut _567: isize;
    let mut _568: isize;
    let mut _569: isize;
    let mut _570: isize;
    let mut _571: isize;
    let mut _572: isize;
    let mut _573: isize;
    let mut _574: isize;
    let mut _575: isize;
    let mut _576: isize;
    let mut _577: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _578: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _579: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _580: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _581: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug admin => _6;
        let _21: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
        let _32: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _35: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
        scope 6 {
            debug state => _21;
            let _42: &anchor_lang::prelude::AccountInfo<'_>;
            scope 11 {
                debug perp_market => _42;
                let _51: anchor_lang::prelude::AccountInfo<'_>;
                let _62: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _65: anchor_lang::prelude::AccountInfo<'_>;
                scope 12 {
                    debug oracle => _51;
                    let _66: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                    let _77: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _80: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                    scope 17 {
                        debug rent => _66;
                        let _81: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                        let _92: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _95: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                        scope 22 {
                            debug system_program => _81;
                            let _96: anchor_lang::prelude::Rent;
                            let _100: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                            let _103: anchor_lang::prelude::Rent;
                            scope 27 {
                                debug __anchor_rent => _96;
                                let _104: anchor_lang::prelude::Pubkey;
                                let _105: u8;
                                scope 32 {
                                    debug __pda_address => _104;
                                    debug __bump => _105;
                                    let _138: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
                                    let _139: &anchor_lang::prelude::AccountInfo<'_>;
                                    scope 33 {
                                        debug perp_market => _138;
                                        let _438: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                        let _441: usize;
                                        scope 71 {
                                            debug residual => _438;
                                            scope 72 {
                                            }
                                        }
                                        scope 73 {
                                            debug val => _441;
                                            scope 74 {
                                            }
                                        }
                                    }
                                    scope 34 {
                                        debug actual_field => _139;
                                        let _142: &anchor_lang::prelude::Pubkey;
                                        scope 35 {
                                            debug actual_owner => _142;
                                            let _143: usize;
                                            scope 36 {
                                                debug space => _143;
                                                let _144: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
                                                let _151: u64;
                                                let _369: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
                                                let _370: anchor_lang::error::Error;
                                                let mut _492: &&anchor_lang::prelude::Pubkey;
                                                scope 37 {
                                                    debug pa => _144;
                                                    let _402: u64;
                                                    scope 70 {
                                                        debug required_lamports => _402;
                                                    }
                                                }
                                                scope 38 {
                                                    debug __current_lamports => _151;
                                                    let _156: usize;
                                                    let _238: u64;
                                                    let _360: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
                                                    let _361: anchor_lang::error::Error;
                                                    let mut _490: &anchor_lang::error::ErrorCode;
                                                    let mut _491: &anchor_lang::error::ErrorCode;
                                                    scope 39 {
                                                        debug space => _156;
                                                        let _157: u64;
                                                        scope 40 {
                                                            debug lamports => _157;
                                                            let _160: anchor_lang::system_program::CreateAccount<'_>;
                                                            scope 41 {
                                                                debug cpi_accounts => _160;
                                                                let _165: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
                                                                scope 42 {
                                                                    debug cpi_context => _165;
                                                                    let _205: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                    let _208: ();
                                                                    scope 43 {
                                                                        debug residual => _205;
                                                                        scope 44 {
                                                                        }
                                                                    }
                                                                    scope 45 {
                                                                        debug val => _208;
                                                                        scope 46 {
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    scope 47 {
                                                        debug required_lamports => _238;
                                                        let _247: anchor_lang::system_program::Transfer<'_>;
                                                        let _266: anchor_lang::system_program::Allocate<'_>;
                                                        scope 48 {
                                                            debug cpi_accounts => _247;
                                                            let _252: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
                                                            scope 49 {
                                                                debug cpi_context => _252;
                                                                let _262: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                let _265: ();
                                                                scope 50 {
                                                                    debug residual => _262;
                                                                    scope 51 {
                                                                    }
                                                                }
                                                                scope 52 {
                                                                    debug val => _265;
                                                                    scope 53 {
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        scope 54 {
                                                            debug cpi_accounts => _266;
                                                            let _269: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
                                                            scope 55 {
                                                                debug cpi_context => _269;
                                                                let _307: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                let _310: ();
                                                                let _311: anchor_lang::system_program::Assign<'_>;
                                                                scope 56 {
                                                                    debug residual => _307;
                                                                    scope 57 {
                                                                    }
                                                                }
                                                                scope 58 {
                                                                    debug val => _310;
                                                                    scope 59 {
                                                                    }
                                                                }
                                                                scope 60 {
                                                                    debug cpi_accounts => _311;
                                                                    let _314: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
                                                                    scope 61 {
                                                                        debug cpi_context => _314;
                                                                        let _351: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                        let _354: ();
                                                                        scope 62 {
                                                                            debug residual => _351;
                                                                            scope 63 {
                                                                            }
                                                                        }
                                                                        scope 64 {
                                                                            debug val => _354;
                                                                            scope 65 {
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    scope 66 {
                                                        debug val => _360;
                                                    }
                                                    scope 67 {
                                                        debug e => _361;
                                                    }
                                                }
                                                scope 68 {
                                                    debug val => _369;
                                                }
                                                scope 69 {
                                                    debug e => _370;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            scope 28 {
                                debug residual => _100;
                                scope 29 {
                                }
                            }
                            scope 30 {
                                debug val => _103;
                                scope 31 {
                                }
                            }
                        }
                        scope 23 {
                            debug residual => _92;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _95;
                            scope 26 {
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _77;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _80;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _62;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _65;
                    scope 16 {
                    }
                }
            }
        }
        scope 7 {
            debug residual => _32;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _35;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _17;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _20;
        scope 5 {
        }
    }

    bb0: {
        _509 = const false;
        _508 = const false;
        _507 = const false;
        _506 = const false;
        _505 = const false;
        _504 = const false;
        _503 = const false;
        _502 = const false;
        _501 = const false;
        _500 = const false;
        _499 = const false;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_1);
        StorageLive(_11);
        _11 = &mut (*_2);
        StorageLive(_12);
        _12 = &(*_3);
        StorageLive(_13);
        _13 = &mut (*_4);
        StorageLive(_14);
        _14 = &mut (*_5);
        _9 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, InitializePerpMarketBumps>>::try_accounts(move _10, move _11, move _12, move _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_15);
        _15 = {closure@programs/drift/src/instructions/admin.rs:5140:10: 5140:18};
        _8 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5140:10: 5140:18}>(move _9, move _15) -> [return: bb2, unwind: bb241];
    }

    bb2: {
        StorageDead(_15);
        StorageDead(_9);
        _7 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _8) -> [return: bb3, unwind: bb241];
    }

    bb3: {
        StorageDead(_8);
        _16 = discriminant(_7);
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_20);
        _20 = move ((_7 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _6 = move _20;
        StorageDead(_20);
        _510 = discriminant(_7);
        StorageDead(_7);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &(*_1);
        StorageLive(_26);
        _26 = &mut (*_2);
        StorageLive(_27);
        _27 = &(*_3);
        StorageLive(_28);
        _28 = &mut (*_4);
        StorageLive(_29);
        _29 = &mut (*_5);
        _24 = <Box<anchor_lang::prelude::Account<'_, state::state::State>> as anchor_lang::Accounts<'_, InitializePerpMarketBumps>>::try_accounts(move _25, move _26, move _27, move _28, move _29) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_17);
        _17 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<admin::InitializePerpMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _19) -> [return: bb7, unwind: bb274];
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_17);
        _562 = discriminant(_7);
        StorageDead(_7);
        goto -> bb231;
    }

    bb8: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_30);
        _30 = {closure@programs/drift/src/instructions/admin.rs:5140:10: 5140:18};
        _23 = std::result::Result::<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5140:10: 5140:18}>(move _24, move _30) -> [return: bb9, unwind: bb241];
    }

    bb9: {
        StorageDead(_30);
        StorageDead(_24);
        _22 = <std::result::Result<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error> as Try>::branch(move _23) -> [return: bb10, unwind: bb241];
    }

    bb10: {
        StorageDead(_23);
        _31 = discriminant(_22);
        switchInt(move _31) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_35);
        _35 = move ((_22 as Continue).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _21 = move _35;
        StorageDead(_35);
        _512 = discriminant(_22);
        StorageDead(_22);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _493 = deref_copy (*_2);
        _38 = &(*_493);
        _37 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::is_empty(move _38) -> [return: bb14, unwind: bb240];
    }

    bb12: {
        StorageLive(_32);
        _32 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_34);
        _34 = move _32;
        _0 = <std::result::Result<admin::InitializePerpMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _34) -> [return: bb13, unwind: bb273];
    }

    bb13: {
        StorageDead(_34);
        StorageDead(_32);
        _560 = discriminant(_22);
        StorageDead(_22);
        goto -> bb230;
    }

    bb14: {
        switchInt(move _37) -> [0: bb17, otherwise: bb15];
    }

    bb15: {
        StorageDead(_38);
        StorageLive(_40);
        StorageLive(_41);
        _41 = AccountNotEnoughKeys;
        _40 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _41) -> [return: bb16, unwind: bb240];
    }

    bb16: {
        StorageDead(_41);
        _0 = std::result::Result::<admin::InitializePerpMarket<'_>, anchor_lang::error::Error>::Err(move _40);
        StorageDead(_40);
        StorageDead(_37);
        StorageDead(_36);
        goto -> bb229;
    }

    bb17: {
        StorageDead(_38);
        _36 = const ();
        StorageDead(_37);
        StorageDead(_36);
        StorageLive(_42);
        StorageLive(_43);
        _43 = const 0_usize;
        _494 = deref_copy (*_2);
        _44 = Len((*_494));
        _45 = Lt(_43, _44);
        assert(move _45, "index out of bounds: the length is {} but the index is {}", move _44, _43) -> [success: bb18, unwind: bb240];
    }

    bb18: {
        _495 = deref_copy (*_2);
        _42 = &(*_495)[_43];
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _496 = deref_copy (*_2);
        _49 = &(*_496);
        StorageLive(_50);
        _50 = RangeFrom::<usize> { start: const 1_usize };
        _48 = <[anchor_lang::prelude::AccountInfo<'_>] as Index<RangeFrom<usize>>>::index(move _49, move _50) -> [return: bb19, unwind: bb240];
    }

    bb19: {
        StorageDead(_50);
        StorageDead(_49);
        _47 = &(*_48);
        _46 = &(*_47);
        (*_2) = move _46;
        StorageDead(_46);
        StorageDead(_48);
        StorageDead(_47);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &(*_1);
        StorageLive(_56);
        _56 = &mut (*_2);
        StorageLive(_57);
        _57 = &(*_3);
        StorageLive(_58);
        _58 = &mut (*_4);
        StorageLive(_59);
        _59 = &mut (*_5);
        _54 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, InitializePerpMarketBumps>>::try_accounts(move _55, move _56, move _57, move _58, move _59) -> [return: bb20, unwind: bb240];
    }

    bb20: {
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageLive(_60);
        _60 = {closure@programs/drift/src/instructions/admin.rs:5140:10: 5140:18};
        _53 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5140:10: 5140:18}>(move _54, move _60) -> [return: bb21, unwind: bb240];
    }

    bb21: {
        StorageDead(_60);
        StorageDead(_54);
        _52 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _53) -> [return: bb22, unwind: bb240];
    }

    bb22: {
        StorageDead(_53);
        _61 = discriminant(_52);
        switchInt(move _61) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_65);
        _65 = move ((_52 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _51 = move _65;
        StorageDead(_65);
        _514 = discriminant(_52);
        StorageDead(_52);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &(*_1);
        StorageLive(_71);
        _71 = &mut (*_2);
        StorageLive(_72);
        _72 = &(*_3);
        StorageLive(_73);
        _73 = &mut (*_4);
        StorageLive(_74);
        _74 = &mut (*_5);
        _69 = <anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent> as anchor_lang::Accounts<'_, InitializePerpMarketBumps>>::try_accounts(move _70, move _71, move _72, move _73, move _74) -> [return: bb26, unwind: bb239];
    }

    bb24: {
        StorageLive(_62);
        _62 = move ((_52 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_64);
        _64 = move _62;
        _0 = <std::result::Result<admin::InitializePerpMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _64) -> [return: bb25, unwind: bb272];
    }

    bb25: {
        StorageDead(_64);
        StorageDead(_62);
        _558 = discriminant(_52);
        StorageDead(_52);
        goto -> bb228;
    }

    bb26: {
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_75);
        _75 = {closure@programs/drift/src/instructions/admin.rs:5140:10: 5140:18};
        _68 = std::result::Result::<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5140:10: 5140:18}>(move _69, move _75) -> [return: bb27, unwind: bb239];
    }

    bb27: {
        StorageDead(_75);
        StorageDead(_69);
        _67 = <std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error> as Try>::branch(move _68) -> [return: bb28, unwind: bb239];
    }

    bb28: {
        StorageDead(_68);
        _76 = discriminant(_67);
        switchInt(move _76) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_80);
        _80 = move ((_67 as Continue).0: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>);
        _66 = move _80;
        StorageDead(_80);
        _516 = discriminant(_67);
        StorageDead(_67);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &(*_1);
        StorageLive(_86);
        _86 = &mut (*_2);
        StorageLive(_87);
        _87 = &(*_3);
        StorageLive(_88);
        _88 = &mut (*_4);
        StorageLive(_89);
        _89 = &mut (*_5);
        _84 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::Accounts<'_, InitializePerpMarketBumps>>::try_accounts(move _85, move _86, move _87, move _88, move _89) -> [return: bb32, unwind: bb239];
    }

    bb30: {
        StorageLive(_77);
        _77 = move ((_67 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_79);
        _79 = move _77;
        _0 = <std::result::Result<admin::InitializePerpMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _79) -> [return: bb31, unwind: bb271];
    }

    bb31: {
        StorageDead(_79);
        StorageDead(_77);
        _556 = discriminant(_67);
        StorageDead(_67);
        goto -> bb227;
    }

    bb32: {
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_85);
        StorageLive(_90);
        _90 = {closure@programs/drift/src/instructions/admin.rs:5140:10: 5140:18};
        _83 = std::result::Result::<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5140:10: 5140:18}>(move _84, move _90) -> [return: bb33, unwind: bb239];
    }

    bb33: {
        StorageDead(_90);
        StorageDead(_84);
        _82 = <std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error> as Try>::branch(move _83) -> [return: bb34, unwind: bb239];
    }

    bb34: {
        StorageDead(_83);
        _91 = discriminant(_82);
        switchInt(move _91) -> [0: bb35, 1: bb36, otherwise: bb5];
    }

    bb35: {
        StorageLive(_95);
        _95 = move ((_82 as Continue).0: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>);
        _81 = move _95;
        StorageDead(_95);
        _518 = discriminant(_82);
        StorageDead(_82);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        _98 = <anchor_lang::prelude::Rent as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb38, unwind: bb239];
    }

    bb36: {
        StorageLive(_92);
        _92 = move ((_82 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_94);
        _94 = move _92;
        _0 = <std::result::Result<admin::InitializePerpMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _94) -> [return: bb37, unwind: bb270];
    }

    bb37: {
        StorageDead(_94);
        StorageDead(_92);
        _554 = discriminant(_82);
        StorageDead(_82);
        goto -> bb226;
    }

    bb38: {
        _97 = <std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError> as Try>::branch(move _98) -> [return: bb39, unwind: bb239];
    }

    bb39: {
        StorageDead(_98);
        _99 = discriminant(_97);
        switchInt(move _99) -> [0: bb40, 1: bb41, otherwise: bb5];
    }

    bb40: {
        StorageLive(_103);
        _103 = ((_97 as Continue).0: anchor_lang::prelude::Rent);
        _96 = _103;
        StorageDead(_103);
        _520 = discriminant(_97);
        StorageDead(_97);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        _113 = const b"perp_market";
        _112 = &(*_113);
        _111 = move _112 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_112);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        _577 = (((_21.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _120 = &(*_577);
        _119 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _120) -> [return: bb43, unwind: bb239];
    }

    bb41: {
        StorageLive(_100);
        _100 = move ((_97 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_102);
        _102 = move _100;
        _0 = <std::result::Result<admin::InitializePerpMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _102) -> [return: bb42, unwind: bb269];
    }

    bb42: {
        StorageDead(_102);
        StorageDead(_100);
        _552 = discriminant(_97);
        StorageDead(_97);
        goto -> bb225;
    }

    bb43: {
        StorageDead(_120);
        _118 = ((*_119).13: u16);
        _117 = core::num::<impl u16>::to_le_bytes(move _118) -> [return: bb44, unwind: bb239];
    }

    bb44: {
        _116 = &_117;
        StorageDead(_118);
        _115 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _116) -> [return: bb45, unwind: bb239];
    }

    bb45: {
        _114 = &(*_115);
        StorageDead(_116);
        _110 = [move _111, move _114];
        StorageDead(_114);
        StorageDead(_111);
        _109 = &_110;
        _108 = &(*_109);
        _107 = move _108 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_108);
        StorageLive(_121);
        _121 = &(*_1);
        _106 = anchor_lang::prelude::Pubkey::find_program_address(move _107, move _121) -> [return: bb46, unwind: bb239];
    }

    bb46: {
        StorageDead(_121);
        StorageDead(_107);
        StorageLive(_104);
        _104 = (_106.0: anchor_lang::prelude::Pubkey);
        StorageLive(_105);
        _105 = (_106.1: u8);
        StorageDead(_119);
        StorageDead(_117);
        StorageDead(_115);
        StorageDead(_113);
        StorageDead(_110);
        StorageDead(_109);
        StorageDead(_106);
        StorageLive(_122);
        _122 = _105;
        ((*_4).0: u8) = move _122;
        StorageDead(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        _127 = &(*_42);
        _126 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _127) -> [return: bb47, unwind: bb239];
    }

    bb47: {
        _125 = &_126;
        StorageDead(_127);
        StorageLive(_128);
        _128 = &_104;
        _124 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _125, move _128) -> [return: bb48, unwind: bb239];
    }

    bb48: {
        switchInt(move _124) -> [0: bb54, otherwise: bb49];
    }

    bb49: {
        StorageDead(_128);
        StorageDead(_126);
        StorageDead(_125);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        _133 = ConstraintSeeds;
        _132 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _133) -> [return: bb50, unwind: bb239];
    }

    bb50: {
        StorageDead(_133);
        _131 = anchor_lang::error::Error::with_account_name::<&str>(move _132, const "perp_market") -> [return: bb51, unwind: bb239];
    }

    bb51: {
        _509 = const true;
        StorageDead(_132);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        _136 = &(*_42);
        _135 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _136) -> [return: bb52, unwind: bb268];
    }

    bb52: {
        StorageDead(_136);
        StorageLive(_137);
        _137 = _104;
        _134 = (move _135, move _137);
        StorageDead(_137);
        StorageDead(_135);
        _509 = const false;
        _130 = anchor_lang::error::Error::with_pubkeys(move _131, move _134) -> [return: bb53, unwind: bb268];
    }

    bb53: {
        StorageDead(_134);
        _509 = const false;
        StorageDead(_131);
        _0 = std::result::Result::<admin::InitializePerpMarket<'_>, anchor_lang::error::Error>::Err(move _130);
        StorageDead(_130);
        StorageDead(_124);
        StorageDead(_123);
        goto -> bb224;
    }

    bb54: {
        StorageDead(_128);
        StorageDead(_126);
        StorageDead(_125);
        _123 = const ();
        StorageDead(_124);
        StorageDead(_123);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        _141 = &_42;
        _140 = &(*_141);
        _139 = <&anchor_lang::prelude::AccountInfo<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _140) -> [return: bb55, unwind: bb239];
    }

    bb55: {
        StorageDead(_140);
        StorageDead(_141);
        StorageLive(_142);
        _142 = ((*_139).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_143);
        _143 = const _;
        StorageLive(_144);
        StorageLive(_145);
        _145 = const false;
        switchInt(move _145) -> [0: bb58, otherwise: bb56];
    }

    bb56: {
        StorageLive(_146);
        StorageLive(_147);
        _147 = &_142;
        StorageLive(_148);
        _492 = const _;
        _148 = &(*_492);
        _146 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _147, move _148) -> [return: bb57, unwind: bb239];
    }

    bb57: {
        switchInt(move _146) -> [0: bb138, otherwise: bb58];
    }

    bb58: {
        StorageDead(_148);
        StorageDead(_147);
        StorageLive(_151);
        StorageLive(_152);
        _152 = &(*_42);
        _151 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _152) -> [return: bb59, unwind: bb239];
    }

    bb59: {
        StorageDead(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        _155 = _151;
        _154 = Eq(move _155, const 0_u64);
        switchInt(move _154) -> [0: bb77, otherwise: bb60];
    }

    bb60: {
        StorageDead(_155);
        StorageLive(_156);
        _156 = _143;
        StorageLive(_157);
        StorageLive(_158);
        _158 = &_96;
        StorageLive(_159);
        _159 = _156;
        _157 = anchor_lang::prelude::Rent::minimum_balance(move _158, move _159) -> [return: bb61, unwind: bb239];
    }

    bb61: {
        StorageDead(_159);
        StorageDead(_158);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        _162 = &_6;
        _161 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _162) -> [return: bb62, unwind: bb239];
    }

    bb62: {
        StorageDead(_162);
        StorageLive(_163);
        StorageLive(_164);
        _164 = &(*_42);
        _163 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _164) -> [return: bb63, unwind: bb238];
    }

    bb63: {
        StorageDead(_164);
        _508 = const true;
        _160 = anchor_lang::system_program::CreateAccount::<'_> { from: move _161, to: move _163 };
        StorageDead(_163);
        StorageDead(_161);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        _167 = &_81;
        _166 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _167) -> [return: bb64, unwind: bb266];
    }

    bb64: {
        StorageDead(_167);
        StorageLive(_168);
        _508 = const false;
        _168 = move _160;
        _165 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::new(move _166, move _168) -> [return: bb65, unwind: bb266];
    }

    bb65: {
        StorageDead(_168);
        StorageDead(_166);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        _507 = const true;
        _173 = move _165;
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        _185 = const b"perp_market";
        _184 = &(*_185);
        _183 = move _184 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_184);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        _578 = (((_21.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _191 = &(*_578);
        _190 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _191) -> [return: bb66, unwind: bb264];
    }

    bb66: {
        StorageDead(_191);
        _189 = ((*_190).13: u16);
        _188 = core::num::<impl u16>::to_le_bytes(move _189) -> [return: bb67, unwind: bb264];
    }

    bb67: {
        _187 = &_188;
        StorageDead(_189);
        _186 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _187) -> [return: bb68, unwind: bb264];
    }

    bb68: {
        StorageDead(_187);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        _197 = _105;
        _196 = [move _197];
        _195 = &_196;
        StorageDead(_197);
        StorageLive(_198);
        _198 = RangeFull;
        _194 = <[u8; 1] as Index<RangeFull>>::index(move _195, move _198) -> [return: bb69, unwind: bb264];
    }

    bb69: {
        StorageDead(_198);
        StorageDead(_195);
        _193 = &(*_194);
        _192 = &(*_193);
        _182 = [move _183, move _186, move _192];
        _181 = &_182;
        StorageDead(_192);
        StorageDead(_186);
        StorageDead(_183);
        StorageLive(_199);
        _199 = RangeFull;
        _180 = <[&[u8]; 3] as Index<RangeFull>>::index(move _181, move _199) -> [return: bb70, unwind: bb264];
    }

    bb70: {
        StorageDead(_199);
        StorageDead(_181);
        _179 = &(*_180);
        _178 = &(*_179);
        _177 = [move _178];
        StorageDead(_178);
        _176 = &_177;
        _175 = &(*_176);
        _174 = move _175 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_175);
        _507 = const false;
        _172 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::with_signer(move _173, move _174) -> [return: bb71, unwind: bb264];
    }

    bb71: {
        StorageDead(_174);
        _507 = const false;
        StorageDead(_173);
        StorageLive(_200);
        _200 = _157;
        StorageLive(_201);
        StorageLive(_202);
        _202 = _156;
        _201 = move _202 as u64 (IntToInt);
        StorageDead(_202);
        StorageLive(_203);
        _203 = &(*_1);
        _171 = anchor_lang::system_program::create_account(move _172, move _200, move _201, move _203) -> [return: bb72, unwind: bb266];
    }

    bb72: {
        StorageDead(_203);
        StorageDead(_201);
        StorageDead(_200);
        StorageDead(_172);
        _170 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _171) -> [return: bb73, unwind: bb266];
    }

    bb73: {
        StorageDead(_171);
        _204 = discriminant(_170);
        switchInt(move _204) -> [0: bb74, 1: bb75, otherwise: bb5];
    }

    bb74: {
        StorageLive(_208);
        _208 = ((_170 as Continue).0: ());
        _169 = _208;
        StorageDead(_208);
        _522 = discriminant(_170);
        StorageDead(_196);
        StorageDead(_194);
        StorageDead(_193);
        StorageDead(_190);
        StorageDead(_188);
        StorageDead(_185);
        StorageDead(_182);
        StorageDead(_180);
        StorageDead(_179);
        StorageDead(_177);
        StorageDead(_176);
        StorageDead(_170);
        StorageDead(_169);
        _153 = const ();
        StorageDead(_165);
        _508 = const false;
        StorageDead(_160);
        StorageDead(_157);
        StorageDead(_156);
        goto -> bb133;
    }

    bb75: {
        StorageLive(_205);
        _205 = move ((_170 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_207);
        _207 = move _205;
        _0 = <std::result::Result<admin::InitializePerpMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _207) -> [return: bb76, unwind: bb262];
    }

    bb76: {
        StorageDead(_207);
        StorageDead(_205);
        _550 = discriminant(_170);
        StorageDead(_196);
        StorageDead(_194);
        StorageDead(_193);
        StorageDead(_190);
        StorageDead(_188);
        StorageDead(_185);
        StorageDead(_182);
        StorageDead(_180);
        StorageDead(_179);
        StorageDead(_177);
        StorageDead(_176);
        StorageDead(_170);
        StorageDead(_169);
        StorageDead(_165);
        _508 = const false;
        StorageDead(_160);
        StorageDead(_157);
        StorageDead(_156);
        goto -> bb220;
    }

    bb77: {
        StorageDead(_155);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        _213 = &_6;
        _212 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _213) -> [return: bb78, unwind: bb239];
    }

    bb78: {
        _211 = &_212;
        StorageDead(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        _216 = &(*_42);
        _215 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _216) -> [return: bb79, unwind: bb239];
    }

    bb79: {
        _214 = &_215;
        StorageDead(_216);
        _210 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _211, move _214) -> [return: bb80, unwind: bb239];
    }

    bb80: {
        switchInt(move _210) -> [0: bb89, otherwise: bb81];
    }

    bb81: {
        StorageDead(_215);
        StorageDead(_214);
        StorageDead(_212);
        StorageDead(_211);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        _491 = const _;
        _222 = &(*_491);
        _221 = anchor_lang::error::ErrorCode::name(move _222) -> [return: bb82, unwind: bb239];
    }

    bb82: {
        StorageDead(_222);
        StorageLive(_224);
        StorageLive(_225);
        _225 = TryingToInitPayerAsProgramAccount;
        _224 = <anchor_lang::error::ErrorCode as Into<u32>>::into(move _225) -> [return: bb83, unwind: bb237];
    }

    bb83: {
        StorageDead(_225);
        StorageLive(_226);
        StorageLive(_227);
        _490 = const _;
        _227 = &(*_490);
        _226 = <anchor_lang::error::ErrorCode as ToString>::to_string(move _227) -> [return: bb84, unwind: bb237];
    }

    bb84: {
        StorageDead(_227);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        _231 = anchor_lang::error::Source { filename: const "programs/drift/src/instructions/admin.rs", line: const 5140_u32 };
        _230 = anchor_lang::error::ErrorOrigin::Source(move _231);
        StorageDead(_231);
        _229 = Option::<ErrorOrigin>::Some(move _230);
        StorageDead(_230);
        StorageLive(_232);
        _232 = Option::<ComparedValues>::None;
        _220 = anchor_lang::error::AnchorError { error_name: move _221, error_code_number: move _224, error_msg: move _226, error_origin: move _229, compared_values: move _232 };
        StorageDead(_232);
        StorageDead(_229);
        StorageDead(_226);
        StorageDead(_224);
        StorageDead(_221);
        _219 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _220) -> [return: bb85, unwind: bb239];
    }

    bb85: {
        _506 = const true;
        StorageDead(_220);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        _235 = &_6;
        _234 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _235) -> [return: bb86, unwind: bb261];
    }

    bb86: {
        StorageDead(_235);
        StorageLive(_236);
        StorageLive(_237);
        _237 = &(*_42);
        _236 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _237) -> [return: bb87, unwind: bb261];
    }

    bb87: {
        StorageDead(_237);
        _233 = (move _234, move _236);
        StorageDead(_236);
        StorageDead(_234);
        _506 = const false;
        _218 = anchor_lang::error::Error::with_pubkeys(move _219, move _233) -> [return: bb88, unwind: bb261];
    }

    bb88: {
        StorageDead(_233);
        _506 = const false;
        StorageDead(_219);
        _0 = std::result::Result::<admin::InitializePerpMarket<'_>, anchor_lang::error::Error>::Err(move _218);
        StorageDead(_218);
        StorageDead(_210);
        StorageDead(_209);
        goto -> bb220;
    }

    bb89: {
        StorageDead(_215);
        StorageDead(_214);
        StorageDead(_212);
        StorageDead(_211);
        _209 = const ();
        StorageDead(_210);
        StorageDead(_209);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        _241 = &_96;
        StorageLive(_242);
        _242 = _143;
        _240 = anchor_lang::prelude::Rent::minimum_balance(move _241, move _242) -> [return: bb90, unwind: bb239];
    }

    bb90: {
        StorageDead(_242);
        StorageDead(_241);
        _239 = <u64 as Ord>::max(move _240, const 1_u64) -> [return: bb91, unwind: bb239];
    }

    bb91: {
        StorageDead(_240);
        StorageLive(_243);
        _243 = _151;
        _238 = core::num::<impl u64>::saturating_sub(move _239, move _243) -> [return: bb92, unwind: bb239];
    }

    bb92: {
        StorageDead(_243);
        StorageDead(_239);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        _246 = _238;
        _245 = Gt(move _246, const 0_u64);
        switchInt(move _245) -> [0: bb103, otherwise: bb93];
    }

    bb93: {
        StorageDead(_246);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        _249 = &_6;
        _248 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _249) -> [return: bb94, unwind: bb239];
    }

    bb94: {
        StorageDead(_249);
        StorageLive(_250);
        StorageLive(_251);
        _251 = &(*_42);
        _250 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _251) -> [return: bb95, unwind: bb236];
    }

    bb95: {
        StorageDead(_251);
        _505 = const true;
        _247 = anchor_lang::system_program::Transfer::<'_> { from: move _248, to: move _250 };
        StorageDead(_250);
        StorageDead(_248);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        _254 = &_81;
        _253 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _254) -> [return: bb96, unwind: bb259];
    }

    bb96: {
        StorageDead(_254);
        StorageLive(_255);
        _505 = const false;
        _255 = move _247;
        _252 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>::new(move _253, move _255) -> [return: bb97, unwind: bb259];
    }

    bb97: {
        StorageDead(_255);
        StorageDead(_253);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        _259 = move _252;
        StorageLive(_260);
        _260 = _238;
        _258 = anchor_lang::system_program::transfer(move _259, move _260) -> [return: bb98, unwind: bb259];
    }

    bb98: {
        StorageDead(_260);
        StorageDead(_259);
        _257 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _258) -> [return: bb99, unwind: bb259];
    }

    bb99: {
        StorageDead(_258);
        _261 = discriminant(_257);
        switchInt(move _261) -> [0: bb100, 1: bb101, otherwise: bb5];
    }

    bb100: {
        StorageLive(_265);
        _265 = ((_257 as Continue).0: ());
        _256 = _265;
        StorageDead(_265);
        _524 = discriminant(_257);
        StorageDead(_257);
        StorageDead(_256);
        _244 = const ();
        StorageDead(_252);
        _505 = const false;
        StorageDead(_247);
        goto -> bb104;
    }

    bb101: {
        StorageLive(_262);
        _262 = move ((_257 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_264);
        _264 = move _262;
        _0 = <std::result::Result<admin::InitializePerpMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _264) -> [return: bb102, unwind: bb257];
    }

    bb102: {
        StorageDead(_264);
        StorageDead(_262);
        _548 = discriminant(_257);
        StorageDead(_257);
        StorageDead(_256);
        StorageDead(_252);
        _505 = const false;
        StorageDead(_247);
        StorageDead(_245);
        StorageDead(_244);
        goto -> bb219;
    }

    bb103: {
        StorageDead(_246);
        _244 = const ();
        goto -> bb104;
    }

    bb104: {
        StorageDead(_245);
        StorageDead(_244);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        _268 = &(*_42);
        _267 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _268) -> [return: bb105, unwind: bb239];
    }

    bb105: {
        StorageDead(_268);
        _504 = const true;
        _266 = anchor_lang::system_program::Allocate::<'_> { account_to_allocate: move _267 };
        StorageDead(_267);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        _271 = &_81;
        _270 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _271) -> [return: bb106, unwind: bb256];
    }

    bb106: {
        StorageDead(_271);
        StorageLive(_272);
        _504 = const false;
        _272 = move _266;
        _269 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::new(move _270, move _272) -> [return: bb107, unwind: bb256];
    }

    bb107: {
        StorageDead(_272);
        StorageDead(_270);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        _503 = const true;
        _277 = move _269;
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        _289 = const b"perp_market";
        _288 = &(*_289);
        _287 = move _288 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_288);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        StorageLive(_295);
        _579 = (((_21.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _295 = &(*_579);
        _294 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _295) -> [return: bb108, unwind: bb254];
    }

    bb108: {
        StorageDead(_295);
        _293 = ((*_294).13: u16);
        _292 = core::num::<impl u16>::to_le_bytes(move _293) -> [return: bb109, unwind: bb254];
    }

    bb109: {
        _291 = &_292;
        StorageDead(_293);
        _290 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _291) -> [return: bb110, unwind: bb254];
    }

    bb110: {
        StorageDead(_291);
        StorageLive(_296);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        _301 = _105;
        _300 = [move _301];
        _299 = &_300;
        StorageDead(_301);
        StorageLive(_302);
        _302 = RangeFull;
        _298 = <[u8; 1] as Index<RangeFull>>::index(move _299, move _302) -> [return: bb111, unwind: bb254];
    }

    bb111: {
        StorageDead(_302);
        StorageDead(_299);
        _297 = &(*_298);
        _296 = &(*_297);
        _286 = [move _287, move _290, move _296];
        _285 = &_286;
        StorageDead(_296);
        StorageDead(_290);
        StorageDead(_287);
        StorageLive(_303);
        _303 = RangeFull;
        _284 = <[&[u8]; 3] as Index<RangeFull>>::index(move _285, move _303) -> [return: bb112, unwind: bb254];
    }

    bb112: {
        StorageDead(_303);
        StorageDead(_285);
        _283 = &(*_284);
        _282 = &(*_283);
        _281 = [move _282];
        StorageDead(_282);
        _280 = &_281;
        _279 = &(*_280);
        _278 = move _279 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_279);
        _503 = const false;
        _276 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::with_signer(move _277, move _278) -> [return: bb113, unwind: bb254];
    }

    bb113: {
        StorageDead(_278);
        _503 = const false;
        StorageDead(_277);
        StorageLive(_304);
        StorageLive(_305);
        _305 = _143;
        _304 = move _305 as u64 (IntToInt);
        StorageDead(_305);
        _275 = anchor_lang::system_program::allocate(move _276, move _304) -> [return: bb114, unwind: bb256];
    }

    bb114: {
        StorageDead(_304);
        StorageDead(_276);
        _274 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _275) -> [return: bb115, unwind: bb256];
    }

    bb115: {
        StorageDead(_275);
        _306 = discriminant(_274);
        switchInt(move _306) -> [0: bb116, 1: bb117, otherwise: bb5];
    }

    bb116: {
        StorageLive(_310);
        _310 = ((_274 as Continue).0: ());
        _273 = _310;
        StorageDead(_310);
        _526 = discriminant(_274);
        StorageDead(_300);
        StorageDead(_298);
        StorageDead(_297);
        StorageDead(_294);
        StorageDead(_292);
        StorageDead(_289);
        StorageDead(_286);
        StorageDead(_284);
        StorageDead(_283);
        StorageDead(_281);
        StorageDead(_280);
        StorageDead(_274);
        StorageDead(_273);
        StorageLive(_311);
        StorageLive(_312);
        StorageLive(_313);
        _313 = &(*_42);
        _312 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _313) -> [return: bb119, unwind: bb256];
    }

    bb117: {
        StorageLive(_307);
        _307 = move ((_274 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_309);
        _309 = move _307;
        _0 = <std::result::Result<admin::InitializePerpMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _309) -> [return: bb118, unwind: bb252];
    }

    bb118: {
        StorageDead(_309);
        StorageDead(_307);
        _546 = discriminant(_274);
        StorageDead(_300);
        StorageDead(_298);
        StorageDead(_297);
        StorageDead(_294);
        StorageDead(_292);
        StorageDead(_289);
        StorageDead(_286);
        StorageDead(_284);
        StorageDead(_283);
        StorageDead(_281);
        StorageDead(_280);
        StorageDead(_274);
        StorageDead(_273);
        goto -> bb218;
    }

    bb119: {
        StorageDead(_313);
        _502 = const true;
        _311 = anchor_lang::system_program::Assign::<'_> { account_to_assign: move _312 };
        StorageDead(_312);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        _316 = &_81;
        _315 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _316) -> [return: bb120, unwind: bb251];
    }

    bb120: {
        StorageDead(_316);
        StorageLive(_317);
        _502 = const false;
        _317 = move _311;
        _314 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::new(move _315, move _317) -> [return: bb121, unwind: bb251];
    }

    bb121: {
        StorageDead(_317);
        StorageDead(_315);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        _501 = const true;
        _322 = move _314;
        StorageLive(_323);
        StorageLive(_324);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        _334 = const b"perp_market";
        _333 = &(*_334);
        _332 = move _333 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_333);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        StorageLive(_338);
        StorageLive(_339);
        StorageLive(_340);
        _580 = (((_21.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _340 = &(*_580);
        _339 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _340) -> [return: bb122, unwind: bb249];
    }

    bb122: {
        StorageDead(_340);
        _338 = ((*_339).13: u16);
        _337 = core::num::<impl u16>::to_le_bytes(move _338) -> [return: bb123, unwind: bb249];
    }

    bb123: {
        _336 = &_337;
        StorageDead(_338);
        _335 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _336) -> [return: bb124, unwind: bb249];
    }

    bb124: {
        StorageDead(_336);
        StorageLive(_341);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        _346 = _105;
        _345 = [move _346];
        _344 = &_345;
        StorageDead(_346);
        StorageLive(_347);
        _347 = RangeFull;
        _343 = <[u8; 1] as Index<RangeFull>>::index(move _344, move _347) -> [return: bb125, unwind: bb249];
    }

    bb125: {
        StorageDead(_347);
        StorageDead(_344);
        _342 = &(*_343);
        _341 = &(*_342);
        _331 = [move _332, move _335, move _341];
        _330 = &_331;
        StorageDead(_341);
        StorageDead(_335);
        StorageDead(_332);
        StorageLive(_348);
        _348 = RangeFull;
        _329 = <[&[u8]; 3] as Index<RangeFull>>::index(move _330, move _348) -> [return: bb126, unwind: bb249];
    }

    bb126: {
        StorageDead(_348);
        StorageDead(_330);
        _328 = &(*_329);
        _327 = &(*_328);
        _326 = [move _327];
        StorageDead(_327);
        _325 = &_326;
        _324 = &(*_325);
        _323 = move _324 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_324);
        _501 = const false;
        _321 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::with_signer(move _322, move _323) -> [return: bb127, unwind: bb249];
    }

    bb127: {
        StorageDead(_323);
        _501 = const false;
        StorageDead(_322);
        StorageLive(_349);
        _349 = &(*_1);
        _320 = anchor_lang::system_program::assign(move _321, move _349) -> [return: bb128, unwind: bb251];
    }

    bb128: {
        StorageDead(_349);
        StorageDead(_321);
        _319 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _320) -> [return: bb129, unwind: bb251];
    }

    bb129: {
        StorageDead(_320);
        _350 = discriminant(_319);
        switchInt(move _350) -> [0: bb130, 1: bb131, otherwise: bb5];
    }

    bb130: {
        StorageLive(_354);
        _354 = ((_319 as Continue).0: ());
        _318 = _354;
        StorageDead(_354);
        _528 = discriminant(_319);
        StorageDead(_345);
        StorageDead(_343);
        StorageDead(_342);
        StorageDead(_339);
        StorageDead(_337);
        StorageDead(_334);
        StorageDead(_331);
        StorageDead(_329);
        StorageDead(_328);
        StorageDead(_326);
        StorageDead(_325);
        StorageDead(_319);
        StorageDead(_318);
        _153 = const ();
        StorageDead(_314);
        _502 = const false;
        StorageDead(_311);
        StorageDead(_269);
        _504 = const false;
        StorageDead(_266);
        StorageDead(_238);
        goto -> bb133;
    }

    bb131: {
        StorageLive(_351);
        _351 = move ((_319 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_353);
        _353 = move _351;
        _0 = <std::result::Result<admin::InitializePerpMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _353) -> [return: bb132, unwind: bb247];
    }

    bb132: {
        StorageDead(_353);
        StorageDead(_351);
        _544 = discriminant(_319);
        StorageDead(_345);
        StorageDead(_343);
        StorageDead(_342);
        StorageDead(_339);
        StorageDead(_337);
        StorageDead(_334);
        StorageDead(_331);
        StorageDead(_329);
        StorageDead(_328);
        StorageDead(_326);
        StorageDead(_325);
        StorageDead(_319);
        StorageDead(_318);
        StorageDead(_314);
        _502 = const false;
        StorageDead(_311);
        goto -> bb218;
    }

    bb133: {
        StorageDead(_154);
        StorageDead(_153);
        StorageLive(_355);
        StorageLive(_356);
        _356 = &(*_1);
        StorageLive(_357);
        StorageLive(_358);
        _358 = &_42;
        _497 = deref_copy (*_358);
        _357 = &(*_497);
        _355 = anchor_lang::prelude::AccountLoader::<'_, PerpMarket>::try_from_unchecked(move _356, move _357) -> [return: bb134, unwind: bb239];
    }

    bb134: {
        StorageDead(_357);
        StorageDead(_356);
        _359 = discriminant(_355);
        switchInt(move _359) -> [0: bb136, 1: bb135, otherwise: bb5];
    }

    bb135: {
        StorageLive(_361);
        _361 = move ((_355 as Err).0: anchor_lang::error::Error);
        StorageLive(_363);
        StorageLive(_364);
        _364 = move _361;
        _363 = anchor_lang::error::Error::with_account_name::<&str>(move _364, const "perp_market") -> [return: bb137, unwind: bb246];
    }

    bb136: {
        StorageLive(_360);
        _360 = move ((_355 as Ok).0: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _144 = move _360;
        StorageDead(_360);
        StorageDead(_151);
        _530 = discriminant(_355);
        StorageDead(_358);
        StorageDead(_355);
        goto -> bb143;
    }

    bb137: {
        StorageDead(_364);
        _0 = std::result::Result::<admin::InitializePerpMarket<'_>, anchor_lang::error::Error>::Err(move _363);
        StorageDead(_363);
        StorageDead(_361);
        StorageDead(_151);
        _542 = discriminant(_355);
        StorageDead(_358);
        StorageDead(_355);
        goto -> bb221;
    }

    bb138: {
        StorageDead(_148);
        StorageDead(_147);
        StorageLive(_365);
        StorageLive(_366);
        StorageLive(_367);
        _367 = &_42;
        _498 = deref_copy (*_367);
        _366 = &(*_498);
        _365 = anchor_lang::prelude::AccountLoader::<'_, PerpMarket>::try_from(move _366) -> [return: bb139, unwind: bb239];
    }

    bb139: {
        StorageDead(_366);
        _368 = discriminant(_365);
        switchInt(move _368) -> [0: bb141, 1: bb140, otherwise: bb5];
    }

    bb140: {
        StorageLive(_370);
        _370 = move ((_365 as Err).0: anchor_lang::error::Error);
        StorageLive(_372);
        StorageLive(_373);
        _373 = move _370;
        _372 = anchor_lang::error::Error::with_account_name::<&str>(move _373, const "perp_market") -> [return: bb142, unwind: bb245];
    }

    bb141: {
        StorageLive(_369);
        _369 = move ((_365 as Ok).0: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _144 = move _369;
        StorageDead(_369);
        _532 = discriminant(_365);
        StorageDead(_367);
        StorageDead(_365);
        goto -> bb143;
    }

    bb142: {
        StorageDead(_373);
        _0 = std::result::Result::<admin::InitializePerpMarket<'_>, anchor_lang::error::Error>::Err(move _372);
        StorageDead(_372);
        StorageDead(_370);
        _540 = discriminant(_365);
        StorageDead(_367);
        StorageDead(_365);
        goto -> bb221;
    }

    bb143: {
        StorageDead(_146);
        StorageDead(_145);
        StorageLive(_374);
        StorageLive(_375);
        _375 = const false;
        switchInt(move _375) -> [0: bb167, otherwise: bb144];
    }

    bb144: {
        StorageLive(_376);
        StorageLive(_377);
        StorageLive(_378);
        _378 = _143;
        StorageLive(_379);
        StorageLive(_380);
        _380 = &(*_139);
        _379 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _380) -> [return: bb145, unwind: bb239];
    }

    bb145: {
        StorageDead(_380);
        _377 = Ne(move _378, move _379);
        switchInt(move _377) -> [0: bb151, otherwise: bb146];
    }

    bb146: {
        StorageDead(_379);
        StorageDead(_378);
        StorageLive(_382);
        StorageLive(_383);
        StorageLive(_384);
        StorageLive(_385);
        _385 = ConstraintSpace;
        _384 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _385) -> [return: bb147, unwind: bb239];
    }

    bb147: {
        StorageDead(_385);
        _383 = anchor_lang::error::Error::with_account_name::<&str>(move _384, const "perp_market") -> [return: bb148, unwind: bb239];
    }

    bb148: {
        _500 = const true;
        StorageDead(_384);
        StorageLive(_386);
        StorageLive(_387);
        _387 = _143;
        StorageLive(_388);
        StorageLive(_389);
        _389 = &(*_139);
        _388 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _389) -> [return: bb149, unwind: bb244];
    }

    bb149: {
        StorageDead(_389);
        _386 = (move _387, move _388);
        StorageDead(_388);
        StorageDead(_387);
        _500 = const false;
        _382 = anchor_lang::error::Error::with_values::<usize, usize>(move _383, move _386) -> [return: bb150, unwind: bb244];
    }

    bb150: {
        StorageDead(_386);
        _500 = const false;
        StorageDead(_383);
        _0 = std::result::Result::<admin::InitializePerpMarket<'_>, anchor_lang::error::Error>::Err(move _382);
        StorageDead(_382);
        StorageDead(_377);
        StorageDead(_376);
        goto -> bb217;
    }

    bb151: {
        StorageDead(_379);
        StorageDead(_378);
        _376 = const ();
        StorageDead(_377);
        StorageDead(_376);
        StorageLive(_390);
        StorageLive(_391);
        StorageLive(_392);
        _392 = &_142;
        StorageLive(_393);
        _393 = &_1;
        _391 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _392, move _393) -> [return: bb152, unwind: bb239];
    }

    bb152: {
        switchInt(move _391) -> [0: bb157, otherwise: bb153];
    }

    bb153: {
        StorageDead(_393);
        StorageDead(_392);
        StorageLive(_395);
        StorageLive(_396);
        StorageLive(_397);
        StorageLive(_398);
        _398 = ConstraintOwner;
        _397 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _398) -> [return: bb154, unwind: bb239];
    }

    bb154: {
        StorageDead(_398);
        _396 = anchor_lang::error::Error::with_account_name::<&str>(move _397, const "perp_market") -> [return: bb155, unwind: bb239];
    }

    bb155: {
        StorageDead(_397);
        StorageLive(_399);
        StorageLive(_400);
        _400 = (*_142);
        StorageLive(_401);
        _401 = (*_1);
        _399 = (move _400, move _401);
        StorageDead(_401);
        StorageDead(_400);
        _395 = anchor_lang::error::Error::with_pubkeys(move _396, move _399) -> [return: bb156, unwind: bb239];
    }

    bb156: {
        StorageDead(_399);
        StorageDead(_396);
        _0 = std::result::Result::<admin::InitializePerpMarket<'_>, anchor_lang::error::Error>::Err(move _395);
        StorageDead(_395);
        StorageDead(_391);
        StorageDead(_390);
        goto -> bb217;
    }

    bb157: {
        StorageDead(_393);
        StorageDead(_392);
        _390 = const ();
        StorageDead(_391);
        StorageDead(_390);
        StorageLive(_402);
        StorageLive(_403);
        _403 = &_96;
        StorageLive(_404);
        _404 = _143;
        _402 = anchor_lang::prelude::Rent::minimum_balance(move _403, move _404) -> [return: bb158, unwind: bb239];
    }

    bb158: {
        StorageDead(_404);
        StorageDead(_403);
        StorageLive(_405);
        StorageLive(_406);
        StorageLive(_407);
        StorageLive(_408);
        StorageLive(_409);
        _409 = &_144;
        _408 = <anchor_lang::prelude::AccountLoader<'_, PerpMarket> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _409) -> [return: bb159, unwind: bb239];
    }

    bb159: {
        _407 = &_408;
        StorageDead(_409);
        _406 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _407) -> [return: bb160, unwind: bb235];
    }

    bb160: {
        StorageDead(_407);
        StorageLive(_410);
        _410 = _402;
        _405 = Lt(move _406, move _410);
        switchInt(move _405) -> [0: bb165, otherwise: bb161];
    }

    bb161: {
        StorageDead(_410);
        drop(_408) -> [return: bb162, unwind: bb239];
    }

    bb162: {
        StorageDead(_408);
        StorageDead(_406);
        StorageLive(_412);
        StorageLive(_413);
        StorageLive(_414);
        _414 = ConstraintRentExempt;
        _413 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _414) -> [return: bb163, unwind: bb239];
    }

    bb163: {
        StorageDead(_414);
        _412 = anchor_lang::error::Error::with_account_name::<&str>(move _413, const "perp_market") -> [return: bb164, unwind: bb239];
    }

    bb164: {
        StorageDead(_413);
        _0 = std::result::Result::<admin::InitializePerpMarket<'_>, anchor_lang::error::Error>::Err(move _412);
        StorageDead(_412);
        StorageDead(_405);
        StorageDead(_402);
        goto -> bb217;
    }

    bb165: {
        StorageDead(_410);
        drop(_408) -> [return: bb166, unwind: bb239];
    }

    bb166: {
        StorageDead(_408);
        StorageDead(_406);
        _374 = const ();
        StorageDead(_405);
        StorageDead(_402);
        goto -> bb168;
    }

    bb167: {
        _374 = const ();
        goto -> bb168;
    }

    bb168: {
        StorageDead(_375);
        StorageDead(_374);
        _138 = move _144;
        StorageDead(_144);
        StorageDead(_143);
        StorageDead(_142);
        StorageDead(_139);
        StorageLive(_415);
        StorageLive(_416);
        StorageLive(_417);
        StorageLive(_418);
        StorageLive(_419);
        _419 = &_138;
        _418 = &(*_419);
        _417 = <anchor_lang::prelude::AccountLoader<'_, PerpMarket> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _418) -> [return: bb169, unwind: bb239];
    }

    bb169: {
        StorageDead(_418);
        _416 = ((*_417).6: bool);
        switchInt(move _416) -> [0: bb170, otherwise: bb173];
    }

    bb170: {
        StorageDead(_419);
        StorageDead(_417);
        StorageLive(_421);
        StorageLive(_422);
        StorageLive(_423);
        _423 = ConstraintMut;
        _422 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _423) -> [return: bb171, unwind: bb239];
    }

    bb171: {
        StorageDead(_423);
        _421 = anchor_lang::error::Error::with_account_name::<&str>(move _422, const "perp_market") -> [return: bb172, unwind: bb239];
    }

    bb172: {
        StorageDead(_422);
        _0 = std::result::Result::<admin::InitializePerpMarket<'_>, anchor_lang::error::Error>::Err(move _421);
        StorageDead(_421);
        StorageDead(_416);
        StorageDead(_415);
        goto -> bb223;
    }

    bb173: {
        StorageDead(_419);
        StorageDead(_417);
        _415 = const ();
        StorageDead(_416);
        StorageDead(_415);
        StorageLive(_424);
        StorageLive(_425);
        StorageLive(_426);
        _426 = &_96;
        StorageLive(_427);
        StorageLive(_428);
        StorageLive(_429);
        StorageLive(_430);
        _430 = &_138;
        _429 = <anchor_lang::prelude::AccountLoader<'_, PerpMarket> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _430) -> [return: bb174, unwind: bb239];
    }

    bb174: {
        _428 = &_429;
        StorageDead(_430);
        _427 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _428) -> [return: bb175, unwind: bb234];
    }

    bb175: {
        StorageDead(_428);
        StorageLive(_431);
        StorageLive(_432);
        StorageLive(_433);
        StorageLive(_434);
        StorageLive(_435);
        StorageLive(_436);
        _436 = &_138;
        _435 = <anchor_lang::prelude::AccountLoader<'_, PerpMarket> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _436) -> [return: bb176, unwind: bb234];
    }

    bb176: {
        _434 = &_435;
        StorageDead(_436);
        _433 = anchor_lang::prelude::AccountInfo::<'_>::try_data_len(move _434) -> [return: bb177, unwind: bb233];
    }

    bb177: {
        StorageDead(_434);
        _432 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _433) -> [return: bb178, unwind: bb233];
    }

    bb178: {
        _499 = const true;
        StorageDead(_433);
        _437 = discriminant(_432);
        switchInt(move _437) -> [0: bb179, 1: bb180, otherwise: bb5];
    }

    bb179: {
        StorageLive(_441);
        _441 = ((_432 as Continue).0: usize);
        _431 = _441;
        StorageDead(_441);
        _425 = anchor_lang::prelude::Rent::is_exempt(move _426, move _427, move _431) -> [return: bb182, unwind: bb242];
    }

    bb180: {
        StorageLive(_438);
        _438 = move ((_432 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_440);
        _440 = move _438;
        _0 = <std::result::Result<admin::InitializePerpMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _440) -> [return: bb181, unwind: bb242];
    }

    bb181: {
        StorageDead(_440);
        StorageDead(_438);
        StorageDead(_431);
        StorageDead(_427);
        StorageDead(_426);
        _538 = discriminant(_432);
        drop(_435) -> [return: bb214, unwind: bb234];
    }

    bb182: {
        switchInt(move _425) -> [0: bb184, otherwise: bb183];
    }

    bb183: {
        StorageDead(_431);
        StorageDead(_427);
        StorageDead(_426);
        _534 = discriminant(_432);
        drop(_435) -> [return: bb189, unwind: bb234];
    }

    bb184: {
        StorageDead(_431);
        StorageDead(_427);
        StorageDead(_426);
        _536 = discriminant(_432);
        drop(_435) -> [return: bb185, unwind: bb234];
    }

    bb185: {
        StorageDead(_435);
        _499 = const false;
        StorageDead(_432);
        drop(_429) -> [return: bb186, unwind: bb239];
    }

    bb186: {
        StorageDead(_429);
        StorageLive(_443);
        StorageLive(_444);
        StorageLive(_445);
        _445 = ConstraintRentExempt;
        _444 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _445) -> [return: bb187, unwind: bb239];
    }

    bb187: {
        StorageDead(_445);
        _443 = anchor_lang::error::Error::with_account_name::<&str>(move _444, const "perp_market") -> [return: bb188, unwind: bb239];
    }

    bb188: {
        StorageDead(_444);
        _0 = std::result::Result::<admin::InitializePerpMarket<'_>, anchor_lang::error::Error>::Err(move _443);
        StorageDead(_443);
        goto -> bb216;
    }

    bb189: {
        StorageDead(_435);
        _499 = const false;
        StorageDead(_432);
        drop(_429) -> [return: bb190, unwind: bb239];
    }

    bb190: {
        StorageDead(_429);
        _424 = const ();
        StorageDead(_425);
        StorageDead(_424);
        StorageLive(_446);
        StorageLive(_447);
        StorageLive(_448);
        StorageLive(_449);
        StorageLive(_450);
        _450 = &_6;
        _449 = &(*_450);
        _448 = <anchor_lang::prelude::Signer<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _449) -> [return: bb191, unwind: bb239];
    }

    bb191: {
        StorageDead(_449);
        _447 = ((*_448).6: bool);
        switchInt(move _447) -> [0: bb192, otherwise: bb195];
    }

    bb192: {
        StorageDead(_450);
        StorageDead(_448);
        StorageLive(_452);
        StorageLive(_453);
        StorageLive(_454);
        _454 = ConstraintMut;
        _453 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _454) -> [return: bb193, unwind: bb239];
    }

    bb193: {
        StorageDead(_454);
        _452 = anchor_lang::error::Error::with_account_name::<&str>(move _453, const "admin") -> [return: bb194, unwind: bb239];
    }

    bb194: {
        StorageDead(_453);
        _0 = std::result::Result::<admin::InitializePerpMarket<'_>, anchor_lang::error::Error>::Err(move _452);
        StorageDead(_452);
        StorageDead(_447);
        StorageDead(_446);
        goto -> bb223;
    }

    bb195: {
        StorageDead(_450);
        StorageDead(_448);
        _446 = const ();
        StorageDead(_447);
        StorageDead(_446);
        StorageLive(_455);
        StorageLive(_456);
        StorageLive(_457);
        StorageLive(_458);
        StorageLive(_459);
        _459 = &_6;
        _458 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _459) -> [return: bb196, unwind: bb239];
    }

    bb196: {
        _457 = &_458;
        StorageDead(_459);
        StorageLive(_460);
        StorageLive(_461);
        _461 = admin_hot_wallet::id() -> [return: bb197, unwind: bb239];
    }

    bb197: {
        _460 = &_461;
        _456 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _457, move _460) -> [return: bb198, unwind: bb239];
    }

    bb198: {
        switchInt(move _456) -> [0: bb200, otherwise: bb199];
    }

    bb199: {
        StorageDead(_461);
        StorageDead(_460);
        StorageDead(_458);
        StorageDead(_457);
        goto -> bb204;
    }

    bb200: {
        StorageDead(_461);
        StorageDead(_460);
        StorageDead(_458);
        StorageDead(_457);
        StorageLive(_462);
        StorageLive(_463);
        StorageLive(_464);
        StorageLive(_465);
        _465 = &_6;
        _464 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _465) -> [return: bb201, unwind: bb239];
    }

    bb201: {
        _463 = &_464;
        StorageDead(_465);
        StorageLive(_466);
        StorageLive(_467);
        StorageLive(_468);
        _581 = (((_21.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _468 = &(*_581);
        _467 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _468) -> [return: bb202, unwind: bb239];
    }

    bb202: {
        StorageDead(_468);
        _466 = &((*_467).0: anchor_lang::prelude::Pubkey);
        _462 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _463, move _466) -> [return: bb203, unwind: bb239];
    }

    bb203: {
        switchInt(move _462) -> [0: bb205, otherwise: bb204];
    }

    bb204: {
        StorageDead(_467);
        StorageDead(_466);
        StorageDead(_464);
        StorageDead(_463);
        _455 = const ();
        StorageDead(_462);
        StorageDead(_456);
        StorageDead(_455);
        StorageLive(_473);
        StorageLive(_474);
        StorageLive(_475);
        StorageLive(_476);
        StorageLive(_477);
        StorageLive(_478);
        _478 = &_21;
        _477 = <Box<anchor_lang::prelude::Account<'_, state::state::State>> as AsRef<anchor_lang::prelude::Account<'_, state::state::State>>>::as_ref(move _478) -> [return: bb208, unwind: bb239];
    }

    bb205: {
        StorageDead(_467);
        StorageDead(_466);
        StorageDead(_464);
        StorageDead(_463);
        StorageLive(_470);
        StorageLive(_471);
        StorageLive(_472);
        _472 = ConstraintRaw;
        _471 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _472) -> [return: bb206, unwind: bb239];
    }

    bb206: {
        StorageDead(_472);
        _470 = anchor_lang::error::Error::with_account_name::<&str>(move _471, const "admin") -> [return: bb207, unwind: bb239];
    }

    bb207: {
        StorageDead(_471);
        _0 = std::result::Result::<admin::InitializePerpMarket<'_>, anchor_lang::error::Error>::Err(move _470);
        StorageDead(_470);
        StorageDead(_462);
        StorageDead(_456);
        StorageDead(_455);
        goto -> bb223;
    }

    bb208: {
        _476 = &(*_477);
        StorageDead(_478);
        _475 = <anchor_lang::prelude::Account<'_, state::state::State> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _476) -> [return: bb209, unwind: bb239];
    }

    bb209: {
        StorageDead(_476);
        _474 = ((*_475).6: bool);
        switchInt(move _474) -> [0: bb210, otherwise: bb213];
    }

    bb210: {
        StorageDead(_477);
        StorageDead(_475);
        StorageLive(_480);
        StorageLive(_481);
        StorageLive(_482);
        _482 = ConstraintMut;
        _481 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _482) -> [return: bb211, unwind: bb239];
    }

    bb211: {
        StorageDead(_482);
        _480 = anchor_lang::error::Error::with_account_name::<&str>(move _481, const "state") -> [return: bb212, unwind: bb239];
    }

    bb212: {
        StorageDead(_481);
        _0 = std::result::Result::<admin::InitializePerpMarket<'_>, anchor_lang::error::Error>::Err(move _480);
        StorageDead(_480);
        StorageDead(_474);
        StorageDead(_473);
        goto -> bb223;
    }

    bb213: {
        StorageDead(_477);
        StorageDead(_475);
        _473 = const ();
        StorageDead(_474);
        StorageDead(_473);
        StorageLive(_483);
        StorageLive(_484);
        _484 = move _6;
        StorageLive(_485);
        _485 = move _21;
        StorageLive(_486);
        _486 = move _138;
        StorageLive(_487);
        _487 = move _51;
        StorageLive(_488);
        _488 = move _66;
        StorageLive(_489);
        _489 = move _81;
        _483 = admin::InitializePerpMarket::<'_> { admin: move _484, state: move _485, perp_market: move _486, oracle: move _487, rent: move _488, system_program: move _489 };
        StorageDead(_489);
        StorageDead(_488);
        StorageDead(_487);
        StorageDead(_486);
        StorageDead(_485);
        StorageDead(_484);
        _0 = std::result::Result::<admin::InitializePerpMarket<'_>, anchor_lang::error::Error>::Ok(move _483);
        StorageDead(_483);
        StorageDead(_138);
        StorageDead(_105);
        StorageDead(_104);
        StorageDead(_96);
        StorageDead(_81);
        StorageDead(_66);
        StorageDead(_51);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_21);
        StorageDead(_6);
        goto -> bb232;
    }

    bb214: {
        StorageDead(_435);
        _499 = const false;
        StorageDead(_432);
        drop(_429) -> [return: bb215, unwind: bb239];
    }

    bb215: {
        StorageDead(_429);
        goto -> bb216;
    }

    bb216: {
        StorageDead(_425);
        StorageDead(_424);
        goto -> bb223;
    }

    bb217: {
        StorageDead(_375);
        StorageDead(_374);
        goto -> bb222;
    }

    bb218: {
        StorageDead(_269);
        _504 = const false;
        StorageDead(_266);
        goto -> bb219;
    }

    bb219: {
        StorageDead(_238);
        goto -> bb220;
    }

    bb220: {
        StorageDead(_154);
        StorageDead(_153);
        StorageDead(_151);
        goto -> bb221;
    }

    bb221: {
        StorageDead(_146);
        StorageDead(_145);
        goto -> bb222;
    }

    bb222: {
        StorageDead(_144);
        StorageDead(_143);
        StorageDead(_142);
        StorageDead(_139);
        goto -> bb223;
    }

    bb223: {
        StorageDead(_138);
        goto -> bb224;
    }

    bb224: {
        StorageDead(_105);
        StorageDead(_104);
        goto -> bb225;
    }

    bb225: {
        StorageDead(_96);
        goto -> bb226;
    }

    bb226: {
        StorageDead(_81);
        goto -> bb227;
    }

    bb227: {
        StorageDead(_66);
        drop(_51) -> [return: bb228, unwind: bb240];
    }

    bb228: {
        StorageDead(_51);
        StorageDead(_43);
        StorageDead(_42);
        goto -> bb229;
    }

    bb229: {
        drop(_21) -> [return: bb230, unwind: bb241];
    }

    bb230: {
        StorageDead(_21);
        goto -> bb231;
    }

    bb231: {
        StorageDead(_6);
        goto -> bb232;
    }

    bb232: {
        return;
    }

    bb233 (cleanup): {
        drop(_435) -> [return: bb234, unwind terminate(cleanup)];
    }

    bb234 (cleanup): {
        drop(_429) -> [return: bb239, unwind terminate(cleanup)];
    }

    bb235 (cleanup): {
        drop(_408) -> [return: bb239, unwind terminate(cleanup)];
    }

    bb236 (cleanup): {
        drop(_248) -> [return: bb239, unwind terminate(cleanup)];
    }

    bb237 (cleanup): {
        drop(_221) -> [return: bb239, unwind terminate(cleanup)];
    }

    bb238 (cleanup): {
        drop(_161) -> [return: bb239, unwind terminate(cleanup)];
    }

    bb239 (cleanup): {
        drop(_51) -> [return: bb240, unwind terminate(cleanup)];
    }

    bb240 (cleanup): {
        drop(_21) -> [return: bb241, unwind terminate(cleanup)];
    }

    bb241 (cleanup): {
        resume;
    }

    bb242 (cleanup): {
        _564 = discriminant(_432);
        goto -> bb233;
    }

    bb243 (cleanup): {
        drop(_383) -> [return: bb239, unwind terminate(cleanup)];
    }

    bb244 (cleanup): {
        switchInt(_500) -> [0: bb239, otherwise: bb243];
    }

    bb245 (cleanup): {
        _565 = discriminant(_365);
        goto -> bb239;
    }

    bb246 (cleanup): {
        _566 = discriminant(_355);
        goto -> bb239;
    }

    bb247 (cleanup): {
        _567 = discriminant(_319);
        goto -> bb251;
    }

    bb248 (cleanup): {
        drop(_322) -> [return: bb251, unwind terminate(cleanup)];
    }

    bb249 (cleanup): {
        switchInt(_501) -> [0: bb251, otherwise: bb248];
    }

    bb250 (cleanup): {
        drop(_311) -> [return: bb256, unwind terminate(cleanup)];
    }

    bb251 (cleanup): {
        switchInt(_502) -> [0: bb256, otherwise: bb250];
    }

    bb252 (cleanup): {
        _568 = discriminant(_274);
        goto -> bb256;
    }

    bb253 (cleanup): {
        drop(_277) -> [return: bb256, unwind terminate(cleanup)];
    }

    bb254 (cleanup): {
        switchInt(_503) -> [0: bb256, otherwise: bb253];
    }

    bb255 (cleanup): {
        drop(_266) -> [return: bb239, unwind terminate(cleanup)];
    }

    bb256 (cleanup): {
        switchInt(_504) -> [0: bb239, otherwise: bb255];
    }

    bb257 (cleanup): {
        _569 = discriminant(_257);
        goto -> bb259;
    }

    bb258 (cleanup): {
        drop(_247) -> [return: bb239, unwind terminate(cleanup)];
    }

    bb259 (cleanup): {
        switchInt(_505) -> [0: bb239, otherwise: bb258];
    }

    bb260 (cleanup): {
        drop(_219) -> [return: bb239, unwind terminate(cleanup)];
    }

    bb261 (cleanup): {
        switchInt(_506) -> [0: bb239, otherwise: bb260];
    }

    bb262 (cleanup): {
        _570 = discriminant(_170);
        goto -> bb266;
    }

    bb263 (cleanup): {
        drop(_173) -> [return: bb266, unwind terminate(cleanup)];
    }

    bb264 (cleanup): {
        switchInt(_507) -> [0: bb266, otherwise: bb263];
    }

    bb265 (cleanup): {
        drop(_160) -> [return: bb239, unwind terminate(cleanup)];
    }

    bb266 (cleanup): {
        switchInt(_508) -> [0: bb239, otherwise: bb265];
    }

    bb267 (cleanup): {
        drop(_131) -> [return: bb239, unwind terminate(cleanup)];
    }

    bb268 (cleanup): {
        switchInt(_509) -> [0: bb239, otherwise: bb267];
    }

    bb269 (cleanup): {
        _571 = discriminant(_97);
        goto -> bb239;
    }

    bb270 (cleanup): {
        _572 = discriminant(_82);
        goto -> bb239;
    }

    bb271 (cleanup): {
        _573 = discriminant(_67);
        goto -> bb239;
    }

    bb272 (cleanup): {
        _574 = discriminant(_52);
        goto -> bb240;
    }

    bb273 (cleanup): {
        _575 = discriminant(_22);
        goto -> bb241;
    }

    bb274 (cleanup): {
        _576 = discriminant(_7);
        goto -> bb241;
    }
}

alloc207 (size: 11, align: 1) {
    70 65 72 70 5f 6d 61 72 6b 65 74                │ perp_market
}

alloc206 (size: 11, align: 1) {
    70 65 72 70 5f 6d 61 72 6b 65 74                │ perp_market
}

alloc205 (size: 11, align: 1) {
    70 65 72 70 5f 6d 61 72 6b 65 74                │ perp_market
}

alloc204 (size: 11, align: 1) {
    70 65 72 70 5f 6d 61 72 6b 65 74                │ perp_market
}
