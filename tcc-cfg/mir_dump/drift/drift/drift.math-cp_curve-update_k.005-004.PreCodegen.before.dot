digraph Mir_0_2177 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn cp_curve::update_k(_1: &amp;ReErased mut state::perp_market::PerpMarket, _2: &amp;ReErased math::cp_curve::UpdateKResult) -&gt; std::result::Result&lt;(), error::ErrorCode&gt;<br align="left"/>let mut _3: u128;<br align="left"/>let mut _4: u128;<br align="left"/>let mut _5: u128;<br align="left"/>let _6: u128;<br align="left"/>let _7: u128;<br align="left"/>let mut _8: (u128, u128);<br align="left"/>let mut _9: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (u128, u128)&gt;;<br align="left"/>let mut _10: std::result::Result&lt;(u128, u128), error::ErrorCode&gt;;<br align="left"/>let mut _11: &amp;ReErased state::perp_market::AMM;<br align="left"/>let _12: &amp;ReErased state::perp_market::AMM;<br align="left"/>let mut _13: isize;<br align="left"/>let _14: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _15: !;<br align="left"/>let mut _16: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _17: (u128, u128);<br align="left"/>let mut _18: u128;<br align="left"/>let _19: u128;<br align="left"/>let _20: u128;<br align="left"/>let mut _21: (u128, u128);<br align="left"/>let mut _22: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (u128, u128)&gt;;<br align="left"/>let mut _23: std::result::Result&lt;(u128, u128), error::ErrorCode&gt;;<br align="left"/>let mut _24: u128;<br align="left"/>let mut _25: u128;<br align="left"/>let mut _26: isize;<br align="left"/>let _27: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _28: !;<br align="left"/>let mut _29: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _30: (u128, u128);<br align="left"/>let mut _31: u128;<br align="left"/>let mut _32: u128;<br align="left"/>let _33: u64;<br align="left"/>let mut _34: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _35: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _36: &amp;ReErased state::perp_market::AMM;<br align="left"/>let mut _37: isize;<br align="left"/>let _38: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _39: !;<br align="left"/>let mut _40: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _41: u64;<br align="left"/>let _42: (u32, u32);<br align="left"/>let mut _43: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (u32, u32)&gt;;<br align="left"/>let mut _44: std::result::Result&lt;(u32, u32), error::ErrorCode&gt;;<br align="left"/>let mut _45: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _46: u64;<br align="left"/>let mut _47: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _48: isize;<br align="left"/>let _49: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _50: !;<br align="left"/>let mut _51: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _52: (u32, u32);<br align="left"/>let mut _53: ();<br align="left"/>debug market =&gt; _1;<br align="left"/>debug update_k_result =&gt; _2;<br align="left"/>debug new_terminal_quote_reserve =&gt; _6;<br align="left"/>debug new_terminal_base_reserve =&gt; _7;<br align="left"/>debug residual =&gt; _14;<br align="left"/>debug val =&gt; _17;<br align="left"/>debug min_base_asset_reserve =&gt; _19;<br align="left"/>debug max_base_asset_reserve =&gt; _20;<br align="left"/>debug residual =&gt; _27;<br align="left"/>debug val =&gt; _30;<br align="left"/>debug reserve_price_after =&gt; _33;<br align="left"/>debug residual =&gt; _38;<br align="left"/>debug val =&gt; _41;<br align="left"/>debug residual =&gt; _49;<br align="left"/>debug val =&gt; _52;<br align="left"/>>;
    bb0__0_2177 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>_3 = ((*_2).1: u128)<br/>(((*_1).1: state::perp_market::AMM).5: u128) = move _3<br/>StorageDead(_3)<br/>StorageLive(_4)<br/>_4 = ((*_2).2: u128)<br/>(((*_1).1: state::perp_market::AMM).6: u128) = move _4<br/>StorageDead(_4)<br/>StorageLive(_5)<br/>_5 = ((*_2).0: u128)<br/>(((*_1).1: state::perp_market::AMM).10: u128) = move _5<br/>StorageDead(_5)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>_12 = &amp;((*_1).1: state::perp_market::AMM)<br/>_11 = &amp;(*_12)<br/></td></tr><tr><td align="left">_10 = calculate_terminal_reserves(move _11)</td></tr></table>>];
    bb1__0_2177 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/></td></tr><tr><td align="left">_9 = &lt;std::result::Result&lt;(u128, u128), error::ErrorCode&gt; as Try&gt;::branch(move _10)</td></tr></table>>];
    bb2__0_2177 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>_13 = discriminant(_9)<br/></td></tr><tr><td align="left">switchInt(move _13)</td></tr></table>>];
    bb3__0_2177 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_17)<br/>_17 = ((_9 as Continue).0: (u128, u128))<br/>_8 = _17<br/>StorageDead(_17)<br/>StorageLive(_6)<br/>_6 = (_8.0: u128)<br/>StorageLive(_7)<br/>_7 = (_8.1: u128)<br/>StorageDead(_12)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/>StorageLive(_18)<br/>_18 = _6<br/>(((*_1).1: state::perp_market::AMM).12: u128) = move _18<br/>StorageDead(_18)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>_24 = (((*_1).1: state::perp_market::AMM).7: u128)<br/>StorageLive(_25)<br/>_25 = _7<br/></td></tr><tr><td align="left">_23 = calculate_bid_ask_bounds(move _24, move _25)</td></tr></table>>];
    bb4__0_2177 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_2177 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_14)<br/>_14 = ((_9 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_16)<br/>_16 = _14<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _16)</td></tr></table>>];
    bb6__0_2177 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageDead(_14)<br/>StorageDead(_12)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_2177 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_24)<br/></td></tr><tr><td align="left">_22 = &lt;std::result::Result&lt;(u128, u128), error::ErrorCode&gt; as Try&gt;::branch(move _23)</td></tr></table>>];
    bb8__0_2177 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>_26 = discriminant(_22)<br/></td></tr><tr><td align="left">switchInt(move _26)</td></tr></table>>];
    bb9__0_2177 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_30)<br/>_30 = ((_22 as Continue).0: (u128, u128))<br/>_21 = _30<br/>StorageDead(_30)<br/>StorageLive(_19)<br/>_19 = (_21.0: u128)<br/>StorageLive(_20)<br/>_20 = (_21.1: u128)<br/>StorageDead(_22)<br/>StorageDead(_21)<br/>StorageLive(_31)<br/>_31 = _19<br/>(((*_1).1: state::perp_market::AMM).8: u128) = move _31<br/>StorageDead(_31)<br/>StorageLive(_32)<br/>_32 = _20<br/>(((*_1).1: state::perp_market::AMM).9: u128) = move _32<br/>StorageDead(_32)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>StorageLive(_36)<br/>_36 = &amp;((*_1).1: state::perp_market::AMM)<br/></td></tr><tr><td align="left">_35 = AMM::reserve_price(move _36)</td></tr></table>>];
    bb10__0_2177 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_27)<br/>_27 = ((_22 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_29)<br/>_29 = _27<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _29)</td></tr></table>>];
    bb11__0_2177 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>StorageDead(_27)<br/>StorageDead(_22)<br/>StorageDead(_21)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_2177 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_36)<br/></td></tr><tr><td align="left">_34 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _35)</td></tr></table>>];
    bb13__0_2177 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_35)<br/>_37 = discriminant(_34)<br/></td></tr><tr><td align="left">switchInt(move _37)</td></tr></table>>];
    bb14__0_2177 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageLive(_41)<br/>_41 = ((_34 as Continue).0: u64)<br/>_33 = _41<br/>StorageDead(_41)<br/>StorageDead(_34)<br/>StorageLive(_42)<br/>StorageLive(_43)<br/>StorageLive(_44)<br/>StorageLive(_45)<br/>_45 = &amp;mut (*_1)<br/>StorageLive(_46)<br/>_46 = _33<br/>StorageLive(_47)<br/>_47 = Option::&lt;u64&gt;::None<br/></td></tr><tr><td align="left">_44 = update_spreads(move _45, move _46, move _47)</td></tr></table>>];
    bb15__0_2177 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_38)<br/>_38 = ((_34 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_40)<br/>_40 = _38<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _40)</td></tr></table>>];
    bb16__0_2177 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_40)<br/>StorageDead(_38)<br/>StorageDead(_34)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_2177 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_47)<br/>StorageDead(_46)<br/>StorageDead(_45)<br/></td></tr><tr><td align="left">_43 = &lt;std::result::Result&lt;(u32, u32), error::ErrorCode&gt; as Try&gt;::branch(move _44)</td></tr></table>>];
    bb18__0_2177 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_44)<br/>_48 = discriminant(_43)<br/></td></tr><tr><td align="left">switchInt(move _48)</td></tr></table>>];
    bb19__0_2177 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageLive(_52)<br/>_52 = ((_43 as Continue).0: (u32, u32))<br/>_42 = _52<br/>StorageDead(_52)<br/>StorageDead(_43)<br/>StorageDead(_42)<br/>StorageLive(_53)<br/>_53 = ()<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _53)<br/>StorageDead(_53)<br/>StorageDead(_33)<br/>StorageDead(_20)<br/>StorageDead(_19)<br/>StorageDead(_7)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_2177 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageLive(_49)<br/>_49 = ((_43 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_51)<br/>_51 = _49<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _51)</td></tr></table>>];
    bb21__0_2177 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_51)<br/>StorageDead(_49)<br/>StorageDead(_43)<br/>StorageDead(_42)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb22__0_2177 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>StorageDead(_20)<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb23__0_2177 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb24__0_2177 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2177 -> bb1__0_2177 [label="return"];
    bb1__0_2177 -> bb2__0_2177 [label="return"];
    bb2__0_2177 -> bb3__0_2177 [label="0"];
    bb2__0_2177 -> bb5__0_2177 [label="1"];
    bb2__0_2177 -> bb4__0_2177 [label="otherwise"];
    bb3__0_2177 -> bb7__0_2177 [label="return"];
    bb5__0_2177 -> bb6__0_2177 [label="return"];
    bb6__0_2177 -> bb24__0_2177 [label=""];
    bb7__0_2177 -> bb8__0_2177 [label="return"];
    bb8__0_2177 -> bb9__0_2177 [label="0"];
    bb8__0_2177 -> bb10__0_2177 [label="1"];
    bb8__0_2177 -> bb4__0_2177 [label="otherwise"];
    bb9__0_2177 -> bb12__0_2177 [label="return"];
    bb10__0_2177 -> bb11__0_2177 [label="return"];
    bb11__0_2177 -> bb23__0_2177 [label=""];
    bb12__0_2177 -> bb13__0_2177 [label="return"];
    bb13__0_2177 -> bb14__0_2177 [label="0"];
    bb13__0_2177 -> bb15__0_2177 [label="1"];
    bb13__0_2177 -> bb4__0_2177 [label="otherwise"];
    bb14__0_2177 -> bb17__0_2177 [label="return"];
    bb15__0_2177 -> bb16__0_2177 [label="return"];
    bb16__0_2177 -> bb22__0_2177 [label=""];
    bb17__0_2177 -> bb18__0_2177 [label="return"];
    bb18__0_2177 -> bb19__0_2177 [label="0"];
    bb18__0_2177 -> bb20__0_2177 [label="1"];
    bb18__0_2177 -> bb4__0_2177 [label="otherwise"];
    bb19__0_2177 -> bb24__0_2177 [label=""];
    bb20__0_2177 -> bb21__0_2177 [label="return"];
    bb21__0_2177 -> bb22__0_2177 [label=""];
    bb22__0_2177 -> bb23__0_2177 [label=""];
    bb23__0_2177 -> bb24__0_2177 [label=""];
}
