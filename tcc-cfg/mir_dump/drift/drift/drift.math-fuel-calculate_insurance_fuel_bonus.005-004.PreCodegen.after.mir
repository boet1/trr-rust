// MIR for `calculate_insurance_fuel_bonus` after PreCodegen

fn calculate_insurance_fuel_bonus(_1: &SpotMarket, _2: u64, _3: i64, _4: u32) -> std::result::Result<u64, error::ErrorCode> {
    debug spot_market => _1;
    debug stake_amount => _2;
    debug stake_amount_delta => _3;
    debug fuel_bonus_numerator => _4;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let mut _5: u64;
    let mut _6: u64;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _8: std::result::Result<u64, error::ErrorCode>;
    let mut _9: u128;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _11: std::result::Result<u128, error::ErrorCode>;
    let mut _12: u128;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _14: std::result::Result<u128, error::ErrorCode>;
    let mut _15: u128;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _17: std::result::Result<u128, error::ErrorCode>;
    let mut _18: u128;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _20: std::result::Result<u128, error::ErrorCode>;
    let mut _21: u64;
    let mut _22: u64;
    let mut _23: u64;
    let mut _24: i64;
    let mut _25: isize;
    let _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _27: !;
    let mut _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _29: u128;
    let mut _30: u128;
    let mut _31: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _32: std::result::Result<u128, error::ErrorCode>;
    let mut _33: u32;
    let mut _34: isize;
    let _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _36: !;
    let mut _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _38: u128;
    let mut _39: isize;
    let _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _41: !;
    let mut _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _43: u128;
    let mut _44: u128;
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _46: std::result::Result<u128, error::ErrorCode>;
    let mut _47: u8;
    let mut _48: isize;
    let _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _50: !;
    let mut _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _52: u128;
    let mut _53: isize;
    let _54: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _55: !;
    let mut _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _57: u128;
    let mut _58: isize;
    let _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _60: !;
    let mut _61: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _62: u128;
    let mut _63: isize;
    let _64: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _65: !;
    let mut _66: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _67: u64;
    let mut _68: u64;
    let mut _69: bool;
    let mut _70: bool;
    scope 1 {
        debug residual => _26;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _29;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _35;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _38;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _40;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _43;
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _49;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _52;
        scope 16 {
        }
    }
    scope 17 {
        debug residual => _54;
        scope 18 {
        }
    }
    scope 19 {
        debug val => _57;
        scope 20 {
        }
    }
    scope 21 {
        debug residual => _59;
        scope 22 {
        }
    }
    scope 23 {
        debug val => _62;
        scope 24 {
        }
    }
    scope 25 {
        debug residual => _64;
        scope 26 {
        }
    }
    scope 27 {
        debug val => _67;
        scope 28 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = _2;
        StorageLive(_23);
        StorageLive(_24);
        _24 = _3;
        _23 = core::num::<impl i64>::unsigned_abs(move _24) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_24);
        _21 = core::num::<impl u64>::saturating_sub(move _22, move _23) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_23);
        StorageDead(_22);
        _20 = <u64 as Cast>::cast::<u128>(move _21) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_21);
        _19 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _20) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_20);
        _25 = discriminant(_19);
        switchInt(move _25) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_29);
        _29 = ((_19 as Continue).0: u128);
        _18 = _29;
        StorageDead(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = _4;
        _32 = <u32 as Cast>::cast::<u128>(move _33) -> [return: bb9, unwind continue];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_26);
        _26 = ((_19 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_28);
        _28 = _26;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _28) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb46;
    }

    bb9: {
        StorageDead(_33);
        _31 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _32) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_32);
        _34 = discriminant(_31);
        switchInt(move _34) -> [0: bb11, 1: bb12, otherwise: bb6];
    }

    bb11: {
        StorageLive(_38);
        _38 = ((_31 as Continue).0: u128);
        _30 = _38;
        StorageDead(_38);
        _17 = <u128 as SafeMath>::safe_mul(move _18, move _30) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_35);
        _35 = ((_31 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_37);
        _37 = _35;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _37) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_30);
        StorageDead(_18);
        StorageDead(_17);
        goto -> bb44;
    }

    bb14: {
        StorageDead(_30);
        StorageDead(_18);
        _16 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _17) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_17);
        _39 = discriminant(_16);
        switchInt(move _39) -> [0: bb16, 1: bb17, otherwise: bb6];
    }

    bb16: {
        StorageLive(_43);
        _43 = ((_16 as Continue).0: u128);
        _15 = _43;
        StorageDead(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = ((*_1).60: u8);
        _46 = <u8 as Cast>::cast::<u128>(move _47) -> [return: bb19, unwind continue];
    }

    bb17: {
        StorageLive(_40);
        _40 = ((_16 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_42);
        _42 = _40;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _42) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_42);
        StorageDead(_40);
        goto -> bb44;
    }

    bb19: {
        StorageDead(_47);
        _45 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _46) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_46);
        _48 = discriminant(_45);
        switchInt(move _48) -> [0: bb21, 1: bb22, otherwise: bb6];
    }

    bb21: {
        StorageLive(_52);
        _52 = ((_45 as Continue).0: u128);
        _44 = _52;
        StorageDead(_52);
        _14 = <u128 as SafeMath>::safe_mul(move _15, move _44) -> [return: bb24, unwind continue];
    }

    bb22: {
        StorageLive(_49);
        _49 = ((_45 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_51);
        _51 = _49;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _51) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_51);
        StorageDead(_49);
        StorageDead(_44);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb41;
    }

    bb24: {
        StorageDead(_44);
        StorageDead(_15);
        _13 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _14) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_14);
        _53 = discriminant(_13);
        switchInt(move _53) -> [0: bb26, 1: bb27, otherwise: bb6];
    }

    bb26: {
        StorageLive(_57);
        _57 = ((_13 as Continue).0: u128);
        _12 = _57;
        StorageDead(_57);
        _11 = <u128 as SafeMath>::safe_div(move _12, const _) -> [return: bb29, unwind continue];
    }

    bb27: {
        StorageLive(_54);
        _54 = ((_13 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_56);
        _56 = _54;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _56) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_56);
        StorageDead(_54);
        goto -> bb41;
    }

    bb29: {
        StorageDead(_12);
        _10 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _11) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_11);
        _58 = discriminant(_10);
        switchInt(move _58) -> [0: bb31, 1: bb32, otherwise: bb6];
    }

    bb31: {
        StorageLive(_62);
        _62 = ((_10 as Continue).0: u128);
        _9 = _62;
        StorageDead(_62);
        _8 = <u128 as Cast>::cast::<u64>(move _9) -> [return: bb34, unwind continue];
    }

    bb32: {
        StorageLive(_59);
        _59 = ((_10 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_61);
        _61 = _59;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _61) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_61);
        StorageDead(_59);
        goto -> bb42;
    }

    bb34: {
        StorageDead(_9);
        _7 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _8) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_8);
        _63 = discriminant(_7);
        switchInt(move _63) -> [0: bb36, 1: bb37, otherwise: bb6];
    }

    bb36: {
        StorageLive(_67);
        _67 = ((_7 as Continue).0: u64);
        _6 = _67;
        StorageDead(_67);
        StorageLive(_68);
        _69 = Eq(const 10_u64, const 0_u64);
        assert(!move _69, "attempt to divide `{}` by zero", const _) -> [success: bb39, unwind continue];
    }

    bb37: {
        StorageLive(_64);
        _64 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_66);
        _66 = _64;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _66) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_66);
        StorageDead(_64);
        goto -> bb43;
    }

    bb39: {
        _68 = Div(const _, const 10_u64);
        _70 = Eq(_68, const 0_u64);
        assert(!move _70, "attempt to divide `{}` by zero", _6) -> [success: bb40, unwind continue];
    }

    bb40: {
        _5 = Div(move _6, move _68);
        StorageDead(_68);
        StorageDead(_6);
        _0 = std::result::Result::<u64, error::ErrorCode>::Ok(move _5);
        StorageDead(_5);
        StorageDead(_45);
        StorageDead(_31);
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_10);
        StorageDead(_7);
        goto -> bb47;
    }

    bb41: {
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb42;
    }

    bb42: {
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb43;
    }

    bb43: {
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_45);
        goto -> bb45;
    }

    bb44: {
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb45;
    }

    bb45: {
        StorageDead(_31);
        goto -> bb46;
    }

    bb46: {
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_10);
        StorageDead(_7);
        goto -> bb47;
    }

    bb47: {
        return;
    }
}
