// MIR for `admin::<impl at programs/drift/src/instructions/admin.rs:5660:10: 5660:18>::try_accounts` after PreCodegen

fn admin::<impl at programs/drift/src/instructions/admin.rs:5660:10: 5660:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut InitializeProtectedMakerModeConfigBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<admin::InitializeProtectedMakerModeConfig<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<instructions::admin::InitializeProtectedMakerModeConfig<'_>, anchor_lang::error::Error>;
    let _6: anchor_lang::prelude::Signer<'_>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _8: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _9: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _10: &anchor_lang::prelude::Pubkey;
    let mut _11: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _12: &[u8];
    let mut _13: &mut instructions::admin::InitializeProtectedMakerModeConfigBumps;
    let mut _14: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _15: {closure@programs/drift/src/instructions/admin.rs:5660:10: 5660:18};
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _20: anchor_lang::prelude::Signer<'_>;
    let _21: ();
    let mut _22: bool;
    let mut _23: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _24: !;
    let mut _25: anchor_lang::error::Error;
    let mut _26: anchor_lang::error::ErrorCode;
    let _28: usize;
    let mut _29: usize;
    let mut _30: bool;
    let mut _31: &[anchor_lang::prelude::AccountInfo<'_>];
    let _32: &[anchor_lang::prelude::AccountInfo<'_>];
    let _33: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _34: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _35: std::ops::RangeFrom<usize>;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>>;
    let mut _38: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _39: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _40: &anchor_lang::prelude::Pubkey;
    let mut _41: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _42: &[u8];
    let mut _43: &mut instructions::admin::InitializeProtectedMakerModeConfigBumps;
    let mut _44: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _45: {closure@programs/drift/src/instructions/admin.rs:5660:10: 5660:18};
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>>;
    let mut _53: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _54: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _55: &anchor_lang::prelude::Pubkey;
    let mut _56: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _57: &[u8];
    let mut _58: &mut instructions::admin::InitializeProtectedMakerModeConfigBumps;
    let mut _59: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _60: {closure@programs/drift/src/instructions/admin.rs:5660:10: 5660:18};
    let mut _61: isize;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>>;
    let mut _68: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _69: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _70: &anchor_lang::prelude::Pubkey;
    let mut _71: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _72: &[u8];
    let mut _73: &mut instructions::admin::InitializeProtectedMakerModeConfigBumps;
    let mut _74: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _75: {closure@programs/drift/src/instructions/admin.rs:5660:10: 5660:18};
    let mut _76: isize;
    let mut _78: !;
    let mut _79: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _82: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Rent>;
    let mut _83: std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError>;
    let mut _84: isize;
    let mut _86: !;
    let mut _87: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _91: (anchor_lang::prelude::Pubkey, u8);
    let mut _92: &[&[u8]];
    let mut _93: &[&[u8]; 1];
    let _94: &[&[u8]; 1];
    let _95: [&[u8]; 1];
    let mut _96: &[u8];
    let _97: &[u8];
    let mut _98: &[u8; 27];
    let _99: &[u8; 27];
    let mut _100: &anchor_lang::prelude::Pubkey;
    let mut _101: u8;
    let _102: ();
    let mut _103: bool;
    let mut _104: &anchor_lang::prelude::Pubkey;
    let _105: anchor_lang::prelude::Pubkey;
    let mut _106: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _107: &anchor_lang::prelude::Pubkey;
    let mut _108: !;
    let mut _109: anchor_lang::error::Error;
    let mut _110: anchor_lang::error::Error;
    let mut _111: anchor_lang::error::Error;
    let mut _112: anchor_lang::error::ErrorCode;
    let mut _113: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _114: anchor_lang::prelude::Pubkey;
    let mut _115: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _116: anchor_lang::prelude::Pubkey;
    let mut _119: &&anchor_lang::prelude::AccountInfo<'_>;
    let _120: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _124: bool;
    let mut _125: bool;
    let mut _126: &&anchor_lang::prelude::Pubkey;
    let mut _127: &&anchor_lang::prelude::Pubkey;
    let _128: &anchor_lang::prelude::Pubkey;
    let _129: anchor_lang::prelude::Pubkey;
    let mut _131: &anchor_lang::prelude::AccountInfo<'_>;
    let _132: ();
    let mut _133: bool;
    let mut _134: u64;
    let mut _137: &anchor_lang::prelude::Rent;
    let mut _138: usize;
    let mut _140: anchor_lang::prelude::AccountInfo<'_>;
    let mut _141: &anchor_lang::prelude::Signer<'_>;
    let mut _142: anchor_lang::prelude::AccountInfo<'_>;
    let mut _143: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _145: anchor_lang::prelude::AccountInfo<'_>;
    let mut _146: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _147: anchor_lang::system_program::CreateAccount<'_>;
    let _148: ();
    let mut _149: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _150: std::result::Result<(), anchor_lang::error::Error>;
    let mut _151: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _152: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _153: &[&[&[u8]]];
    let mut _154: &[&[&[u8]]; 1];
    let _155: &[&[&[u8]]; 1];
    let _156: [&[&[u8]]; 1];
    let mut _157: &[&[u8]];
    let _158: &[&[u8]];
    let _159: &[&[u8]];
    let mut _160: &[&[u8]; 2];
    let _161: [&[u8]; 2];
    let mut _162: &[u8];
    let mut _163: &[u8; 27];
    let _164: &[u8; 27];
    let mut _165: &[u8];
    let _166: &[u8];
    let _167: &[u8];
    let mut _168: &[u8; 1];
    let _169: [u8; 1];
    let mut _170: u8;
    let mut _171: std::ops::RangeFull;
    let mut _172: std::ops::RangeFull;
    let mut _173: u64;
    let mut _174: u64;
    let mut _175: usize;
    let mut _176: &anchor_lang::prelude::Pubkey;
    let mut _177: isize;
    let mut _179: !;
    let mut _180: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _182: ();
    let mut _183: bool;
    let mut _184: &anchor_lang::prelude::Pubkey;
    let _185: anchor_lang::prelude::Pubkey;
    let mut _186: &anchor_lang::prelude::Signer<'_>;
    let mut _187: &anchor_lang::prelude::Pubkey;
    let _188: anchor_lang::prelude::Pubkey;
    let mut _189: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _190: !;
    let mut _191: anchor_lang::error::Error;
    let mut _192: anchor_lang::error::Error;
    let mut _193: anchor_lang::error::AnchorError;
    let mut _194: std::string::String;
    let mut _195: &anchor_lang::error::ErrorCode;
    let _196: anchor_lang::error::ErrorCode;
    let mut _197: u32;
    let mut _198: anchor_lang::error::ErrorCode;
    let mut _199: std::string::String;
    let mut _200: &anchor_lang::error::ErrorCode;
    let _201: anchor_lang::error::ErrorCode;
    let mut _202: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _203: anchor_lang::error::ErrorOrigin;
    let mut _204: anchor_lang::error::Source;
    let mut _205: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _206: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _207: anchor_lang::prelude::Pubkey;
    let mut _208: &anchor_lang::prelude::Signer<'_>;
    let mut _209: anchor_lang::prelude::Pubkey;
    let mut _210: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _212: u64;
    let mut _213: u64;
    let mut _214: &anchor_lang::prelude::Rent;
    let mut _215: usize;
    let mut _216: u64;
    let _217: ();
    let mut _218: bool;
    let mut _219: u64;
    let mut _221: anchor_lang::prelude::AccountInfo<'_>;
    let mut _222: &anchor_lang::prelude::Signer<'_>;
    let mut _223: anchor_lang::prelude::AccountInfo<'_>;
    let mut _224: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _226: anchor_lang::prelude::AccountInfo<'_>;
    let mut _227: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _228: anchor_lang::system_program::Transfer<'_>;
    let _229: ();
    let mut _230: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _231: std::result::Result<(), anchor_lang::error::Error>;
    let mut _232: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
    let mut _233: u64;
    let mut _234: isize;
    let mut _236: !;
    let mut _237: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _240: anchor_lang::prelude::AccountInfo<'_>;
    let mut _241: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _243: anchor_lang::prelude::AccountInfo<'_>;
    let mut _244: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _245: anchor_lang::system_program::Allocate<'_>;
    let _246: ();
    let mut _247: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _248: std::result::Result<(), anchor_lang::error::Error>;
    let mut _249: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _250: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _251: &[&[&[u8]]];
    let mut _252: &[&[&[u8]]; 1];
    let _253: &[&[&[u8]]; 1];
    let _254: [&[&[u8]]; 1];
    let mut _255: &[&[u8]];
    let _256: &[&[u8]];
    let _257: &[&[u8]];
    let mut _258: &[&[u8]; 2];
    let _259: [&[u8]; 2];
    let mut _260: &[u8];
    let mut _261: &[u8; 27];
    let _262: &[u8; 27];
    let mut _263: &[u8];
    let _264: &[u8];
    let _265: &[u8];
    let mut _266: &[u8; 1];
    let _267: [u8; 1];
    let mut _268: u8;
    let mut _269: std::ops::RangeFull;
    let mut _270: std::ops::RangeFull;
    let mut _271: u64;
    let mut _272: usize;
    let mut _273: isize;
    let mut _275: !;
    let mut _276: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _279: anchor_lang::prelude::AccountInfo<'_>;
    let mut _280: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _282: anchor_lang::prelude::AccountInfo<'_>;
    let mut _283: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _284: anchor_lang::system_program::Assign<'_>;
    let _285: ();
    let mut _286: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _287: std::result::Result<(), anchor_lang::error::Error>;
    let mut _288: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _289: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _290: &[&[&[u8]]];
    let mut _291: &[&[&[u8]]; 1];
    let _292: &[&[&[u8]]; 1];
    let _293: [&[&[u8]]; 1];
    let mut _294: &[&[u8]];
    let _295: &[&[u8]];
    let _296: &[&[u8]];
    let mut _297: &[&[u8]; 2];
    let _298: [&[u8]; 2];
    let mut _299: &[u8];
    let mut _300: &[u8; 27];
    let _301: &[u8; 27];
    let mut _302: &[u8];
    let _303: &[u8];
    let _304: &[u8];
    let mut _305: &[u8; 1];
    let _306: [u8; 1];
    let mut _307: u8;
    let mut _308: std::ops::RangeFull;
    let mut _309: std::ops::RangeFull;
    let mut _310: &anchor_lang::prelude::Pubkey;
    let mut _311: isize;
    let mut _313: !;
    let mut _314: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _316: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>, anchor_lang::error::Error>;
    let mut _317: &anchor_lang::prelude::Pubkey;
    let mut _318: &anchor_lang::prelude::AccountInfo<'_>;
    let _319: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _320: isize;
    let mut _323: !;
    let mut _324: anchor_lang::error::Error;
    let mut _325: anchor_lang::error::Error;
    let mut _326: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>, anchor_lang::error::Error>;
    let mut _327: &anchor_lang::prelude::AccountInfo<'_>;
    let _328: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _329: isize;
    let mut _332: !;
    let mut _333: anchor_lang::error::Error;
    let mut _334: anchor_lang::error::Error;
    let _335: ();
    let mut _336: bool;
    let _337: ();
    let mut _338: bool;
    let mut _339: usize;
    let mut _340: usize;
    let mut _341: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _342: !;
    let mut _343: anchor_lang::error::Error;
    let mut _344: anchor_lang::error::Error;
    let mut _345: anchor_lang::error::Error;
    let mut _346: anchor_lang::error::ErrorCode;
    let mut _347: (usize, usize);
    let mut _348: usize;
    let mut _349: usize;
    let mut _350: &anchor_lang::prelude::AccountInfo<'_>;
    let _351: ();
    let mut _352: bool;
    let mut _353: &&anchor_lang::prelude::Pubkey;
    let mut _354: &&anchor_lang::prelude::Pubkey;
    let mut _355: !;
    let mut _356: anchor_lang::error::Error;
    let mut _357: anchor_lang::error::Error;
    let mut _358: anchor_lang::error::Error;
    let mut _359: anchor_lang::error::ErrorCode;
    let mut _360: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _361: anchor_lang::prelude::Pubkey;
    let mut _362: anchor_lang::prelude::Pubkey;
    let mut _364: &anchor_lang::prelude::Rent;
    let mut _365: usize;
    let mut _366: bool;
    let mut _367: u64;
    let mut _368: &anchor_lang::prelude::AccountInfo<'_>;
    let _369: anchor_lang::prelude::AccountInfo<'_>;
    let mut _370: &anchor_lang::prelude::AccountLoader<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>;
    let mut _371: u64;
    let mut _372: !;
    let mut _373: anchor_lang::error::Error;
    let mut _374: anchor_lang::error::Error;
    let mut _375: anchor_lang::error::ErrorCode;
    let _376: ();
    let mut _377: bool;
    let mut _378: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _379: &anchor_lang::prelude::AccountLoader<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>;
    let _380: &anchor_lang::prelude::AccountLoader<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>;
    let mut _381: !;
    let mut _382: anchor_lang::error::Error;
    let mut _383: anchor_lang::error::Error;
    let mut _384: anchor_lang::error::ErrorCode;
    let _385: ();
    let mut _386: bool;
    let mut _387: &anchor_lang::prelude::Rent;
    let mut _388: u64;
    let mut _389: &anchor_lang::prelude::AccountInfo<'_>;
    let _390: anchor_lang::prelude::AccountInfo<'_>;
    let mut _391: &anchor_lang::prelude::AccountLoader<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>;
    let mut _392: usize;
    let mut _393: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _394: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _395: &anchor_lang::prelude::AccountInfo<'_>;
    let _396: anchor_lang::prelude::AccountInfo<'_>;
    let mut _397: &anchor_lang::prelude::AccountLoader<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>;
    let mut _398: isize;
    let mut _400: !;
    let mut _401: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _403: !;
    let mut _404: anchor_lang::error::Error;
    let mut _405: anchor_lang::error::Error;
    let mut _406: anchor_lang::error::ErrorCode;
    let _407: ();
    let mut _408: bool;
    let mut _409: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _410: &anchor_lang::prelude::Signer<'_>;
    let _411: &anchor_lang::prelude::Signer<'_>;
    let mut _412: !;
    let mut _413: anchor_lang::error::Error;
    let mut _414: anchor_lang::error::Error;
    let mut _415: anchor_lang::error::ErrorCode;
    let _416: ();
    let mut _417: bool;
    let mut _418: &anchor_lang::prelude::Pubkey;
    let _419: anchor_lang::prelude::Pubkey;
    let mut _420: &anchor_lang::prelude::Signer<'_>;
    let mut _421: &anchor_lang::prelude::Pubkey;
    let _422: anchor_lang::prelude::Pubkey;
    let mut _423: bool;
    let mut _424: &anchor_lang::prelude::Pubkey;
    let _425: anchor_lang::prelude::Pubkey;
    let mut _426: &anchor_lang::prelude::Signer<'_>;
    let mut _427: &anchor_lang::prelude::Pubkey;
    let _428: &state::state::State;
    let mut _429: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _430: !;
    let mut _431: anchor_lang::error::Error;
    let mut _432: anchor_lang::error::Error;
    let mut _433: anchor_lang::error::ErrorCode;
    let _434: ();
    let mut _436: &state::state::State;
    let mut _437: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _439: &anchor_lang::prelude::Signer<'_>;
    let mut _440: bool;
    let mut _441: &anchor_lang::prelude::Pubkey;
    let mut _442: &anchor_lang::prelude::Pubkey;
    let mut _443: !;
    let mut _444: anchor_lang::error::Error;
    let mut _445: anchor_lang::error::Error;
    let mut _446: anchor_lang::error::Error;
    let mut _447: anchor_lang::error::ErrorCode;
    let mut _448: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _449: anchor_lang::prelude::Pubkey;
    let mut _450: anchor_lang::prelude::Pubkey;
    let mut _451: instructions::admin::InitializeProtectedMakerModeConfig<'_>;
    let mut _452: anchor_lang::prelude::Signer<'_>;
    let mut _453: anchor_lang::prelude::AccountLoader<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>;
    let mut _454: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _455: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
    let mut _456: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _460: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _461: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _462: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _463: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _464: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _465: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _466: bool;
    let mut _467: bool;
    let mut _468: bool;
    let mut _469: bool;
    let mut _470: bool;
    let mut _471: bool;
    let mut _472: bool;
    let mut _473: bool;
    let mut _474: bool;
    let mut _475: bool;
    let mut _476: bool;
    let mut _477: isize;
    let mut _478: isize;
    let mut _479: isize;
    let mut _480: isize;
    let mut _481: isize;
    let mut _482: isize;
    let mut _483: isize;
    let mut _484: isize;
    let mut _485: isize;
    let mut _486: isize;
    let mut _487: isize;
    let mut _488: isize;
    let mut _489: isize;
    let mut _490: isize;
    let mut _491: isize;
    let mut _492: isize;
    let mut _493: isize;
    let mut _494: isize;
    let mut _495: isize;
    let mut _496: isize;
    let mut _497: isize;
    let mut _498: isize;
    let mut _499: isize;
    let mut _500: isize;
    let mut _501: isize;
    let mut _502: isize;
    let mut _503: isize;
    let mut _504: isize;
    let mut _505: isize;
    let mut _506: isize;
    let mut _507: isize;
    let mut _508: isize;
    let mut _509: isize;
    let mut _510: isize;
    let mut _511: isize;
    let mut _512: isize;
    let mut _513: isize;
    let mut _514: isize;
    let mut _515: isize;
    let mut _516: isize;
    let mut _517: isize;
    let mut _518: isize;
    let mut _519: isize;
    let mut _520: isize;
    let mut _521: isize;
    let mut _522: isize;
    let mut _523: isize;
    let mut _524: isize;
    let mut _525: isize;
    let mut _526: isize;
    let mut _527: isize;
    let mut _528: isize;
    let mut _529: isize;
    let mut _530: isize;
    let mut _531: isize;
    let mut _532: isize;
    let mut _533: isize;
    let mut _534: isize;
    let mut _535: isize;
    let mut _536: isize;
    let mut _537: isize;
    let mut _538: isize;
    let mut _539: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _540: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug admin => _6;
        let _27: &anchor_lang::prelude::AccountInfo<'_>;
        scope 6 {
            debug protected_maker_mode_config => _27;
            let _36: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
            let _47: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _50: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
            scope 7 {
                debug state => _36;
                let _51: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                let _62: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _65: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                scope 12 {
                    debug rent => _51;
                    let _66: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                    let _77: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _80: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                    scope 17 {
                        debug system_program => _66;
                        let _81: anchor_lang::prelude::Rent;
                        let _85: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                        let _88: anchor_lang::prelude::Rent;
                        scope 22 {
                            debug __anchor_rent => _81;
                            let _89: anchor_lang::prelude::Pubkey;
                            let _90: u8;
                            scope 27 {
                                debug __pda_address => _89;
                                debug __bump => _90;
                                let _117: anchor_lang::prelude::AccountLoader<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>;
                                let _118: &anchor_lang::prelude::AccountInfo<'_>;
                                scope 28 {
                                    debug protected_maker_mode_config => _117;
                                    let _399: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                    let _402: usize;
                                    let _435: anchor_lang::prelude::Pubkey;
                                    scope 66 {
                                        debug residual => _399;
                                        scope 67 {
                                        }
                                    }
                                    scope 68 {
                                        debug val => _402;
                                        scope 69 {
                                        }
                                    }
                                    scope 70 {
                                        debug my_key => _435;
                                        let _438: anchor_lang::prelude::Pubkey;
                                        scope 71 {
                                            debug target_key => _438;
                                        }
                                    }
                                }
                                scope 29 {
                                    debug actual_field => _118;
                                    let _121: &anchor_lang::prelude::Pubkey;
                                    scope 30 {
                                        debug actual_owner => _121;
                                        let _122: usize;
                                        scope 31 {
                                            debug space => _122;
                                            let _123: anchor_lang::prelude::AccountLoader<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>;
                                            let _130: u64;
                                            let _330: anchor_lang::prelude::AccountLoader<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>;
                                            let _331: anchor_lang::error::Error;
                                            let mut _459: &&anchor_lang::prelude::Pubkey;
                                            scope 32 {
                                                debug pa => _123;
                                                let _363: u64;
                                                scope 65 {
                                                    debug required_lamports => _363;
                                                }
                                            }
                                            scope 33 {
                                                debug __current_lamports => _130;
                                                let _135: usize;
                                                let _211: u64;
                                                let _321: anchor_lang::prelude::AccountLoader<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>;
                                                let _322: anchor_lang::error::Error;
                                                let mut _457: &anchor_lang::error::ErrorCode;
                                                let mut _458: &anchor_lang::error::ErrorCode;
                                                scope 34 {
                                                    debug space => _135;
                                                    let _136: u64;
                                                    scope 35 {
                                                        debug lamports => _136;
                                                        let _139: anchor_lang::system_program::CreateAccount<'_>;
                                                        scope 36 {
                                                            debug cpi_accounts => _139;
                                                            let _144: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
                                                            scope 37 {
                                                                debug cpi_context => _144;
                                                                let _178: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                let _181: ();
                                                                scope 38 {
                                                                    debug residual => _178;
                                                                    scope 39 {
                                                                    }
                                                                }
                                                                scope 40 {
                                                                    debug val => _181;
                                                                    scope 41 {
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                scope 42 {
                                                    debug required_lamports => _211;
                                                    let _220: anchor_lang::system_program::Transfer<'_>;
                                                    let _239: anchor_lang::system_program::Allocate<'_>;
                                                    scope 43 {
                                                        debug cpi_accounts => _220;
                                                        let _225: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
                                                        scope 44 {
                                                            debug cpi_context => _225;
                                                            let _235: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                            let _238: ();
                                                            scope 45 {
                                                                debug residual => _235;
                                                                scope 46 {
                                                                }
                                                            }
                                                            scope 47 {
                                                                debug val => _238;
                                                                scope 48 {
                                                                }
                                                            }
                                                        }
                                                    }
                                                    scope 49 {
                                                        debug cpi_accounts => _239;
                                                        let _242: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
                                                        scope 50 {
                                                            debug cpi_context => _242;
                                                            let _274: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                            let _277: ();
                                                            let _278: anchor_lang::system_program::Assign<'_>;
                                                            scope 51 {
                                                                debug residual => _274;
                                                                scope 52 {
                                                                }
                                                            }
                                                            scope 53 {
                                                                debug val => _277;
                                                                scope 54 {
                                                                }
                                                            }
                                                            scope 55 {
                                                                debug cpi_accounts => _278;
                                                                let _281: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
                                                                scope 56 {
                                                                    debug cpi_context => _281;
                                                                    let _312: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                    let _315: ();
                                                                    scope 57 {
                                                                        debug residual => _312;
                                                                        scope 58 {
                                                                        }
                                                                    }
                                                                    scope 59 {
                                                                        debug val => _315;
                                                                        scope 60 {
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                scope 61 {
                                                    debug val => _321;
                                                }
                                                scope 62 {
                                                    debug e => _322;
                                                }
                                            }
                                            scope 63 {
                                                debug val => _330;
                                            }
                                            scope 64 {
                                                debug e => _331;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        scope 23 {
                            debug residual => _85;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _88;
                            scope 26 {
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _77;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _80;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _62;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _65;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _47;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _50;
                scope 11 {
                }
            }
        }
    }
    scope 2 {
        debug residual => _17;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _20;
        scope 5 {
        }
    }

    bb0: {
        _476 = const false;
        _475 = const false;
        _474 = const false;
        _473 = const false;
        _472 = const false;
        _471 = const false;
        _470 = const false;
        _469 = const false;
        _468 = const false;
        _467 = const false;
        _466 = const false;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_1);
        StorageLive(_11);
        _11 = &mut (*_2);
        StorageLive(_12);
        _12 = &(*_3);
        StorageLive(_13);
        _13 = &mut (*_4);
        StorageLive(_14);
        _14 = &mut (*_5);
        _9 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, InitializeProtectedMakerModeConfigBumps>>::try_accounts(move _10, move _11, move _12, move _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_15);
        _15 = {closure@programs/drift/src/instructions/admin.rs:5660:10: 5660:18};
        _8 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5660:10: 5660:18}>(move _9, move _15) -> [return: bb2, unwind: bb226];
    }

    bb2: {
        StorageDead(_15);
        StorageDead(_9);
        _7 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _8) -> [return: bb3, unwind: bb226];
    }

    bb3: {
        StorageDead(_8);
        _16 = discriminant(_7);
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_20);
        _20 = move ((_7 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _6 = move _20;
        StorageDead(_20);
        _477 = discriminant(_7);
        StorageDead(_7);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _460 = deref_copy (*_2);
        _23 = &(*_460);
        _22 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::is_empty(move _23) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_17);
        _17 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<admin::InitializeProtectedMakerModeConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _19) -> [return: bb7, unwind: bb258];
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_17);
        _525 = discriminant(_7);
        StorageDead(_7);
        goto -> bb217;
    }

    bb8: {
        switchInt(move _22) -> [0: bb11, otherwise: bb9];
    }

    bb9: {
        StorageDead(_23);
        StorageLive(_25);
        StorageLive(_26);
        _26 = AccountNotEnoughKeys;
        _25 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _26) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_26);
        _0 = std::result::Result::<admin::InitializeProtectedMakerModeConfig<'_>, anchor_lang::error::Error>::Err(move _25);
        StorageDead(_25);
        StorageDead(_22);
        StorageDead(_21);
        goto -> bb217;
    }

    bb11: {
        StorageDead(_23);
        _21 = const ();
        StorageDead(_22);
        StorageDead(_21);
        StorageLive(_27);
        StorageLive(_28);
        _28 = const 0_usize;
        _461 = deref_copy (*_2);
        _29 = Len((*_461));
        _30 = Lt(_28, _29);
        assert(move _30, "index out of bounds: the length is {} but the index is {}", move _29, _28) -> [success: bb12, unwind continue];
    }

    bb12: {
        _462 = deref_copy (*_2);
        _27 = &(*_462)[_28];
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _463 = deref_copy (*_2);
        _34 = &(*_463);
        StorageLive(_35);
        _35 = RangeFrom::<usize> { start: const 1_usize };
        _33 = <[anchor_lang::prelude::AccountInfo<'_>] as Index<RangeFrom<usize>>>::index(move _34, move _35) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_35);
        StorageDead(_34);
        _32 = &(*_33);
        _31 = &(*_32);
        (*_2) = move _31;
        StorageDead(_31);
        StorageDead(_33);
        StorageDead(_32);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &(*_1);
        StorageLive(_41);
        _41 = &mut (*_2);
        StorageLive(_42);
        _42 = &(*_3);
        StorageLive(_43);
        _43 = &mut (*_4);
        StorageLive(_44);
        _44 = &mut (*_5);
        _39 = <Box<anchor_lang::prelude::Account<'_, state::state::State>> as anchor_lang::Accounts<'_, InitializeProtectedMakerModeConfigBumps>>::try_accounts(move _40, move _41, move _42, move _43, move _44) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_45);
        _45 = {closure@programs/drift/src/instructions/admin.rs:5660:10: 5660:18};
        _38 = std::result::Result::<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5660:10: 5660:18}>(move _39, move _45) -> [return: bb15, unwind: bb226];
    }

    bb15: {
        StorageDead(_45);
        StorageDead(_39);
        _37 = <std::result::Result<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error> as Try>::branch(move _38) -> [return: bb16, unwind: bb226];
    }

    bb16: {
        StorageDead(_38);
        _46 = discriminant(_37);
        switchInt(move _46) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_50);
        _50 = move ((_37 as Continue).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _36 = move _50;
        StorageDead(_50);
        _479 = discriminant(_37);
        StorageDead(_37);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &(*_1);
        StorageLive(_56);
        _56 = &mut (*_2);
        StorageLive(_57);
        _57 = &(*_3);
        StorageLive(_58);
        _58 = &mut (*_4);
        StorageLive(_59);
        _59 = &mut (*_5);
        _54 = <anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent> as anchor_lang::Accounts<'_, InitializeProtectedMakerModeConfigBumps>>::try_accounts(move _55, move _56, move _57, move _58, move _59) -> [return: bb20, unwind: bb225];
    }

    bb18: {
        StorageLive(_47);
        _47 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_49);
        _49 = move _47;
        _0 = <std::result::Result<admin::InitializeProtectedMakerModeConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _49) -> [return: bb19, unwind: bb257];
    }

    bb19: {
        StorageDead(_49);
        StorageDead(_47);
        _523 = discriminant(_37);
        StorageDead(_37);
        goto -> bb216;
    }

    bb20: {
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageLive(_60);
        _60 = {closure@programs/drift/src/instructions/admin.rs:5660:10: 5660:18};
        _53 = std::result::Result::<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5660:10: 5660:18}>(move _54, move _60) -> [return: bb21, unwind: bb225];
    }

    bb21: {
        StorageDead(_60);
        StorageDead(_54);
        _52 = <std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error> as Try>::branch(move _53) -> [return: bb22, unwind: bb225];
    }

    bb22: {
        StorageDead(_53);
        _61 = discriminant(_52);
        switchInt(move _61) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_65);
        _65 = move ((_52 as Continue).0: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>);
        _51 = move _65;
        StorageDead(_65);
        _481 = discriminant(_52);
        StorageDead(_52);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &(*_1);
        StorageLive(_71);
        _71 = &mut (*_2);
        StorageLive(_72);
        _72 = &(*_3);
        StorageLive(_73);
        _73 = &mut (*_4);
        StorageLive(_74);
        _74 = &mut (*_5);
        _69 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::Accounts<'_, InitializeProtectedMakerModeConfigBumps>>::try_accounts(move _70, move _71, move _72, move _73, move _74) -> [return: bb26, unwind: bb225];
    }

    bb24: {
        StorageLive(_62);
        _62 = move ((_52 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_64);
        _64 = move _62;
        _0 = <std::result::Result<admin::InitializeProtectedMakerModeConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _64) -> [return: bb25, unwind: bb256];
    }

    bb25: {
        StorageDead(_64);
        StorageDead(_62);
        _521 = discriminant(_52);
        StorageDead(_52);
        goto -> bb215;
    }

    bb26: {
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_75);
        _75 = {closure@programs/drift/src/instructions/admin.rs:5660:10: 5660:18};
        _68 = std::result::Result::<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5660:10: 5660:18}>(move _69, move _75) -> [return: bb27, unwind: bb225];
    }

    bb27: {
        StorageDead(_75);
        StorageDead(_69);
        _67 = <std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error> as Try>::branch(move _68) -> [return: bb28, unwind: bb225];
    }

    bb28: {
        StorageDead(_68);
        _76 = discriminant(_67);
        switchInt(move _76) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_80);
        _80 = move ((_67 as Continue).0: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>);
        _66 = move _80;
        StorageDead(_80);
        _483 = discriminant(_67);
        StorageDead(_67);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _83 = <anchor_lang::prelude::Rent as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb32, unwind: bb225];
    }

    bb30: {
        StorageLive(_77);
        _77 = move ((_67 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_79);
        _79 = move _77;
        _0 = <std::result::Result<admin::InitializeProtectedMakerModeConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _79) -> [return: bb31, unwind: bb255];
    }

    bb31: {
        StorageDead(_79);
        StorageDead(_77);
        _519 = discriminant(_67);
        StorageDead(_67);
        goto -> bb214;
    }

    bb32: {
        _82 = <std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError> as Try>::branch(move _83) -> [return: bb33, unwind: bb225];
    }

    bb33: {
        StorageDead(_83);
        _84 = discriminant(_82);
        switchInt(move _84) -> [0: bb34, 1: bb35, otherwise: bb5];
    }

    bb34: {
        StorageLive(_88);
        _88 = ((_82 as Continue).0: anchor_lang::prelude::Rent);
        _81 = _88;
        StorageDead(_88);
        _485 = discriminant(_82);
        StorageDead(_82);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = const b"protected_maker_mode_config";
        _98 = &(*_99);
        _97 = <[u8; 27] as AsRef<[u8]>>::as_ref(move _98) -> [return: bb37, unwind: bb225];
    }

    bb35: {
        StorageLive(_85);
        _85 = move ((_82 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_87);
        _87 = move _85;
        _0 = <std::result::Result<admin::InitializeProtectedMakerModeConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _87) -> [return: bb36, unwind: bb254];
    }

    bb36: {
        StorageDead(_87);
        StorageDead(_85);
        _517 = discriminant(_82);
        StorageDead(_82);
        goto -> bb213;
    }

    bb37: {
        _96 = &(*_97);
        StorageDead(_98);
        _95 = [move _96];
        StorageDead(_96);
        _94 = &_95;
        _93 = &(*_94);
        _92 = move _93 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_93);
        StorageLive(_100);
        _100 = &(*_1);
        _91 = anchor_lang::prelude::Pubkey::find_program_address(move _92, move _100) -> [return: bb38, unwind: bb225];
    }

    bb38: {
        StorageDead(_100);
        StorageDead(_92);
        StorageLive(_89);
        _89 = (_91.0: anchor_lang::prelude::Pubkey);
        StorageLive(_90);
        _90 = (_91.1: u8);
        StorageDead(_99);
        StorageDead(_97);
        StorageDead(_95);
        StorageDead(_94);
        StorageDead(_91);
        StorageLive(_101);
        _101 = _90;
        ((*_4).0: u8) = move _101;
        StorageDead(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        _106 = &(*_27);
        _105 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _106) -> [return: bb39, unwind: bb225];
    }

    bb39: {
        _104 = &_105;
        StorageDead(_106);
        StorageLive(_107);
        _107 = &_89;
        _103 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _104, move _107) -> [return: bb40, unwind: bb225];
    }

    bb40: {
        switchInt(move _103) -> [0: bb46, otherwise: bb41];
    }

    bb41: {
        StorageDead(_107);
        StorageDead(_105);
        StorageDead(_104);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _112 = ConstraintSeeds;
        _111 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _112) -> [return: bb42, unwind: bb225];
    }

    bb42: {
        StorageDead(_112);
        _110 = anchor_lang::error::Error::with_account_name::<&str>(move _111, const "protected_maker_mode_config") -> [return: bb43, unwind: bb225];
    }

    bb43: {
        _476 = const true;
        StorageDead(_111);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        _115 = &(*_27);
        _114 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _115) -> [return: bb44, unwind: bb253];
    }

    bb44: {
        StorageDead(_115);
        StorageLive(_116);
        _116 = _89;
        _113 = (move _114, move _116);
        StorageDead(_116);
        StorageDead(_114);
        _476 = const false;
        _109 = anchor_lang::error::Error::with_pubkeys(move _110, move _113) -> [return: bb45, unwind: bb253];
    }

    bb45: {
        StorageDead(_113);
        _476 = const false;
        StorageDead(_110);
        _0 = std::result::Result::<admin::InitializeProtectedMakerModeConfig<'_>, anchor_lang::error::Error>::Err(move _109);
        StorageDead(_109);
        StorageDead(_103);
        StorageDead(_102);
        goto -> bb212;
    }

    bb46: {
        StorageDead(_107);
        StorageDead(_105);
        StorageDead(_104);
        _102 = const ();
        StorageDead(_103);
        StorageDead(_102);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        _120 = &_27;
        _119 = &(*_120);
        _118 = <&anchor_lang::prelude::AccountInfo<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _119) -> [return: bb47, unwind: bb225];
    }

    bb47: {
        StorageDead(_119);
        StorageDead(_120);
        StorageLive(_121);
        _121 = ((*_118).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_122);
        _122 = const _;
        StorageLive(_123);
        StorageLive(_124);
        _124 = const false;
        switchInt(move _124) -> [0: bb50, otherwise: bb48];
    }

    bb48: {
        StorageLive(_125);
        StorageLive(_126);
        _126 = &_121;
        StorageLive(_127);
        _459 = const _;
        _127 = &(*_459);
        _125 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _126, move _127) -> [return: bb49, unwind: bb225];
    }

    bb49: {
        switchInt(move _125) -> [0: bb124, otherwise: bb50];
    }

    bb50: {
        StorageDead(_127);
        StorageDead(_126);
        StorageLive(_130);
        StorageLive(_131);
        _131 = &(*_27);
        _130 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _131) -> [return: bb51, unwind: bb225];
    }

    bb51: {
        StorageDead(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        _134 = _130;
        _133 = Eq(move _134, const 0_u64);
        switchInt(move _133) -> [0: bb67, otherwise: bb52];
    }

    bb52: {
        StorageDead(_134);
        StorageLive(_135);
        _135 = _122;
        StorageLive(_136);
        StorageLive(_137);
        _137 = &_81;
        StorageLive(_138);
        _138 = _135;
        _136 = anchor_lang::prelude::Rent::minimum_balance(move _137, move _138) -> [return: bb53, unwind: bb225];
    }

    bb53: {
        StorageDead(_138);
        StorageDead(_137);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        _141 = &_6;
        _140 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _141) -> [return: bb54, unwind: bb225];
    }

    bb54: {
        StorageDead(_141);
        StorageLive(_142);
        StorageLive(_143);
        _143 = &(*_27);
        _142 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _143) -> [return: bb55, unwind: bb224];
    }

    bb55: {
        StorageDead(_143);
        _475 = const true;
        _139 = anchor_lang::system_program::CreateAccount::<'_> { from: move _140, to: move _142 };
        StorageDead(_142);
        StorageDead(_140);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        _146 = &_66;
        _145 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _146) -> [return: bb56, unwind: bb251];
    }

    bb56: {
        StorageDead(_146);
        StorageLive(_147);
        _475 = const false;
        _147 = move _139;
        _144 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::new(move _145, move _147) -> [return: bb57, unwind: bb251];
    }

    bb57: {
        StorageDead(_147);
        StorageDead(_145);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        _474 = const true;
        _152 = move _144;
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        _164 = const b"protected_maker_mode_config";
        _163 = &(*_164);
        _162 = <[u8; 27] as AsRef<[u8]>>::as_ref(move _163) -> [return: bb58, unwind: bb249];
    }

    bb58: {
        StorageDead(_163);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        _170 = _90;
        _169 = [move _170];
        _168 = &_169;
        StorageDead(_170);
        StorageLive(_171);
        _171 = RangeFull;
        _167 = <[u8; 1] as Index<RangeFull>>::index(move _168, move _171) -> [return: bb59, unwind: bb249];
    }

    bb59: {
        StorageDead(_171);
        StorageDead(_168);
        _166 = &(*_167);
        _165 = &(*_166);
        _161 = [move _162, move _165];
        _160 = &_161;
        StorageDead(_165);
        StorageDead(_162);
        StorageLive(_172);
        _172 = RangeFull;
        _159 = <[&[u8]; 2] as Index<RangeFull>>::index(move _160, move _172) -> [return: bb60, unwind: bb249];
    }

    bb60: {
        StorageDead(_172);
        StorageDead(_160);
        _158 = &(*_159);
        _157 = &(*_158);
        _156 = [move _157];
        StorageDead(_157);
        _155 = &_156;
        _154 = &(*_155);
        _153 = move _154 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_154);
        _474 = const false;
        _151 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::with_signer(move _152, move _153) -> [return: bb61, unwind: bb249];
    }

    bb61: {
        StorageDead(_153);
        _474 = const false;
        StorageDead(_152);
        StorageLive(_173);
        _173 = _136;
        StorageLive(_174);
        StorageLive(_175);
        _175 = _135;
        _174 = move _175 as u64 (IntToInt);
        StorageDead(_175);
        StorageLive(_176);
        _176 = &(*_1);
        _150 = anchor_lang::system_program::create_account(move _151, move _173, move _174, move _176) -> [return: bb62, unwind: bb251];
    }

    bb62: {
        StorageDead(_176);
        StorageDead(_174);
        StorageDead(_173);
        StorageDead(_151);
        _149 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _150) -> [return: bb63, unwind: bb251];
    }

    bb63: {
        StorageDead(_150);
        _177 = discriminant(_149);
        switchInt(move _177) -> [0: bb64, 1: bb65, otherwise: bb5];
    }

    bb64: {
        StorageLive(_181);
        _181 = ((_149 as Continue).0: ());
        _148 = _181;
        StorageDead(_181);
        _487 = discriminant(_149);
        StorageDead(_169);
        StorageDead(_167);
        StorageDead(_166);
        StorageDead(_164);
        StorageDead(_161);
        StorageDead(_159);
        StorageDead(_158);
        StorageDead(_156);
        StorageDead(_155);
        StorageDead(_149);
        StorageDead(_148);
        _132 = const ();
        StorageDead(_144);
        _475 = const false;
        StorageDead(_139);
        StorageDead(_136);
        StorageDead(_135);
        goto -> bb119;
    }

    bb65: {
        StorageLive(_178);
        _178 = move ((_149 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_180);
        _180 = move _178;
        _0 = <std::result::Result<admin::InitializeProtectedMakerModeConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _180) -> [return: bb66, unwind: bb247];
    }

    bb66: {
        StorageDead(_180);
        StorageDead(_178);
        _515 = discriminant(_149);
        StorageDead(_169);
        StorageDead(_167);
        StorageDead(_166);
        StorageDead(_164);
        StorageDead(_161);
        StorageDead(_159);
        StorageDead(_158);
        StorageDead(_156);
        StorageDead(_155);
        StorageDead(_149);
        StorageDead(_148);
        StorageDead(_144);
        _475 = const false;
        StorageDead(_139);
        StorageDead(_136);
        StorageDead(_135);
        goto -> bb208;
    }

    bb67: {
        StorageDead(_134);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        _186 = &_6;
        _185 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _186) -> [return: bb68, unwind: bb225];
    }

    bb68: {
        _184 = &_185;
        StorageDead(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        _189 = &(*_27);
        _188 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _189) -> [return: bb69, unwind: bb225];
    }

    bb69: {
        _187 = &_188;
        StorageDead(_189);
        _183 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _184, move _187) -> [return: bb70, unwind: bb225];
    }

    bb70: {
        switchInt(move _183) -> [0: bb79, otherwise: bb71];
    }

    bb71: {
        StorageDead(_188);
        StorageDead(_187);
        StorageDead(_185);
        StorageDead(_184);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        _458 = const _;
        _195 = &(*_458);
        _194 = anchor_lang::error::ErrorCode::name(move _195) -> [return: bb72, unwind: bb225];
    }

    bb72: {
        StorageDead(_195);
        StorageLive(_197);
        StorageLive(_198);
        _198 = TryingToInitPayerAsProgramAccount;
        _197 = <anchor_lang::error::ErrorCode as Into<u32>>::into(move _198) -> [return: bb73, unwind: bb223];
    }

    bb73: {
        StorageDead(_198);
        StorageLive(_199);
        StorageLive(_200);
        _457 = const _;
        _200 = &(*_457);
        _199 = <anchor_lang::error::ErrorCode as ToString>::to_string(move _200) -> [return: bb74, unwind: bb223];
    }

    bb74: {
        StorageDead(_200);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        _204 = anchor_lang::error::Source { filename: const "programs/drift/src/instructions/admin.rs", line: const 5660_u32 };
        _203 = anchor_lang::error::ErrorOrigin::Source(move _204);
        StorageDead(_204);
        _202 = Option::<ErrorOrigin>::Some(move _203);
        StorageDead(_203);
        StorageLive(_205);
        _205 = Option::<ComparedValues>::None;
        _193 = anchor_lang::error::AnchorError { error_name: move _194, error_code_number: move _197, error_msg: move _199, error_origin: move _202, compared_values: move _205 };
        StorageDead(_205);
        StorageDead(_202);
        StorageDead(_199);
        StorageDead(_197);
        StorageDead(_194);
        _192 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _193) -> [return: bb75, unwind: bb225];
    }

    bb75: {
        _473 = const true;
        StorageDead(_193);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        _208 = &_6;
        _207 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _208) -> [return: bb76, unwind: bb246];
    }

    bb76: {
        StorageDead(_208);
        StorageLive(_209);
        StorageLive(_210);
        _210 = &(*_27);
        _209 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _210) -> [return: bb77, unwind: bb246];
    }

    bb77: {
        StorageDead(_210);
        _206 = (move _207, move _209);
        StorageDead(_209);
        StorageDead(_207);
        _473 = const false;
        _191 = anchor_lang::error::Error::with_pubkeys(move _192, move _206) -> [return: bb78, unwind: bb246];
    }

    bb78: {
        StorageDead(_206);
        _473 = const false;
        StorageDead(_192);
        _0 = std::result::Result::<admin::InitializeProtectedMakerModeConfig<'_>, anchor_lang::error::Error>::Err(move _191);
        StorageDead(_191);
        StorageDead(_183);
        StorageDead(_182);
        goto -> bb208;
    }

    bb79: {
        StorageDead(_188);
        StorageDead(_187);
        StorageDead(_185);
        StorageDead(_184);
        _182 = const ();
        StorageDead(_183);
        StorageDead(_182);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        _214 = &_81;
        StorageLive(_215);
        _215 = _122;
        _213 = anchor_lang::prelude::Rent::minimum_balance(move _214, move _215) -> [return: bb80, unwind: bb225];
    }

    bb80: {
        StorageDead(_215);
        StorageDead(_214);
        _212 = <u64 as Ord>::max(move _213, const 1_u64) -> [return: bb81, unwind: bb225];
    }

    bb81: {
        StorageDead(_213);
        StorageLive(_216);
        _216 = _130;
        _211 = core::num::<impl u64>::saturating_sub(move _212, move _216) -> [return: bb82, unwind: bb225];
    }

    bb82: {
        StorageDead(_216);
        StorageDead(_212);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        _219 = _211;
        _218 = Gt(move _219, const 0_u64);
        switchInt(move _218) -> [0: bb93, otherwise: bb83];
    }

    bb83: {
        StorageDead(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        _222 = &_6;
        _221 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _222) -> [return: bb84, unwind: bb225];
    }

    bb84: {
        StorageDead(_222);
        StorageLive(_223);
        StorageLive(_224);
        _224 = &(*_27);
        _223 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _224) -> [return: bb85, unwind: bb222];
    }

    bb85: {
        StorageDead(_224);
        _472 = const true;
        _220 = anchor_lang::system_program::Transfer::<'_> { from: move _221, to: move _223 };
        StorageDead(_223);
        StorageDead(_221);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        _227 = &_66;
        _226 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _227) -> [return: bb86, unwind: bb244];
    }

    bb86: {
        StorageDead(_227);
        StorageLive(_228);
        _472 = const false;
        _228 = move _220;
        _225 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>::new(move _226, move _228) -> [return: bb87, unwind: bb244];
    }

    bb87: {
        StorageDead(_228);
        StorageDead(_226);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        _232 = move _225;
        StorageLive(_233);
        _233 = _211;
        _231 = anchor_lang::system_program::transfer(move _232, move _233) -> [return: bb88, unwind: bb244];
    }

    bb88: {
        StorageDead(_233);
        StorageDead(_232);
        _230 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _231) -> [return: bb89, unwind: bb244];
    }

    bb89: {
        StorageDead(_231);
        _234 = discriminant(_230);
        switchInt(move _234) -> [0: bb90, 1: bb91, otherwise: bb5];
    }

    bb90: {
        StorageLive(_238);
        _238 = ((_230 as Continue).0: ());
        _229 = _238;
        StorageDead(_238);
        _489 = discriminant(_230);
        StorageDead(_230);
        StorageDead(_229);
        _217 = const ();
        StorageDead(_225);
        _472 = const false;
        StorageDead(_220);
        goto -> bb94;
    }

    bb91: {
        StorageLive(_235);
        _235 = move ((_230 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_237);
        _237 = move _235;
        _0 = <std::result::Result<admin::InitializeProtectedMakerModeConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _237) -> [return: bb92, unwind: bb242];
    }

    bb92: {
        StorageDead(_237);
        StorageDead(_235);
        _513 = discriminant(_230);
        StorageDead(_230);
        StorageDead(_229);
        StorageDead(_225);
        _472 = const false;
        StorageDead(_220);
        StorageDead(_218);
        StorageDead(_217);
        goto -> bb207;
    }

    bb93: {
        StorageDead(_219);
        _217 = const ();
        goto -> bb94;
    }

    bb94: {
        StorageDead(_218);
        StorageDead(_217);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        _241 = &(*_27);
        _240 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _241) -> [return: bb95, unwind: bb225];
    }

    bb95: {
        StorageDead(_241);
        _471 = const true;
        _239 = anchor_lang::system_program::Allocate::<'_> { account_to_allocate: move _240 };
        StorageDead(_240);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        _244 = &_66;
        _243 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _244) -> [return: bb96, unwind: bb241];
    }

    bb96: {
        StorageDead(_244);
        StorageLive(_245);
        _471 = const false;
        _245 = move _239;
        _242 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::new(move _243, move _245) -> [return: bb97, unwind: bb241];
    }

    bb97: {
        StorageDead(_245);
        StorageDead(_243);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        _470 = const true;
        _250 = move _242;
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        _262 = const b"protected_maker_mode_config";
        _261 = &(*_262);
        _260 = <[u8; 27] as AsRef<[u8]>>::as_ref(move _261) -> [return: bb98, unwind: bb239];
    }

    bb98: {
        StorageDead(_261);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        _268 = _90;
        _267 = [move _268];
        _266 = &_267;
        StorageDead(_268);
        StorageLive(_269);
        _269 = RangeFull;
        _265 = <[u8; 1] as Index<RangeFull>>::index(move _266, move _269) -> [return: bb99, unwind: bb239];
    }

    bb99: {
        StorageDead(_269);
        StorageDead(_266);
        _264 = &(*_265);
        _263 = &(*_264);
        _259 = [move _260, move _263];
        _258 = &_259;
        StorageDead(_263);
        StorageDead(_260);
        StorageLive(_270);
        _270 = RangeFull;
        _257 = <[&[u8]; 2] as Index<RangeFull>>::index(move _258, move _270) -> [return: bb100, unwind: bb239];
    }

    bb100: {
        StorageDead(_270);
        StorageDead(_258);
        _256 = &(*_257);
        _255 = &(*_256);
        _254 = [move _255];
        StorageDead(_255);
        _253 = &_254;
        _252 = &(*_253);
        _251 = move _252 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_252);
        _470 = const false;
        _249 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::with_signer(move _250, move _251) -> [return: bb101, unwind: bb239];
    }

    bb101: {
        StorageDead(_251);
        _470 = const false;
        StorageDead(_250);
        StorageLive(_271);
        StorageLive(_272);
        _272 = _122;
        _271 = move _272 as u64 (IntToInt);
        StorageDead(_272);
        _248 = anchor_lang::system_program::allocate(move _249, move _271) -> [return: bb102, unwind: bb241];
    }

    bb102: {
        StorageDead(_271);
        StorageDead(_249);
        _247 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _248) -> [return: bb103, unwind: bb241];
    }

    bb103: {
        StorageDead(_248);
        _273 = discriminant(_247);
        switchInt(move _273) -> [0: bb104, 1: bb105, otherwise: bb5];
    }

    bb104: {
        StorageLive(_277);
        _277 = ((_247 as Continue).0: ());
        _246 = _277;
        StorageDead(_277);
        _491 = discriminant(_247);
        StorageDead(_267);
        StorageDead(_265);
        StorageDead(_264);
        StorageDead(_262);
        StorageDead(_259);
        StorageDead(_257);
        StorageDead(_256);
        StorageDead(_254);
        StorageDead(_253);
        StorageDead(_247);
        StorageDead(_246);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        _280 = &(*_27);
        _279 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _280) -> [return: bb107, unwind: bb241];
    }

    bb105: {
        StorageLive(_274);
        _274 = move ((_247 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_276);
        _276 = move _274;
        _0 = <std::result::Result<admin::InitializeProtectedMakerModeConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _276) -> [return: bb106, unwind: bb237];
    }

    bb106: {
        StorageDead(_276);
        StorageDead(_274);
        _511 = discriminant(_247);
        StorageDead(_267);
        StorageDead(_265);
        StorageDead(_264);
        StorageDead(_262);
        StorageDead(_259);
        StorageDead(_257);
        StorageDead(_256);
        StorageDead(_254);
        StorageDead(_253);
        StorageDead(_247);
        StorageDead(_246);
        goto -> bb206;
    }

    bb107: {
        StorageDead(_280);
        _469 = const true;
        _278 = anchor_lang::system_program::Assign::<'_> { account_to_assign: move _279 };
        StorageDead(_279);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        _283 = &_66;
        _282 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _283) -> [return: bb108, unwind: bb236];
    }

    bb108: {
        StorageDead(_283);
        StorageLive(_284);
        _469 = const false;
        _284 = move _278;
        _281 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::new(move _282, move _284) -> [return: bb109, unwind: bb236];
    }

    bb109: {
        StorageDead(_284);
        StorageDead(_282);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        _468 = const true;
        _289 = move _281;
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        _301 = const b"protected_maker_mode_config";
        _300 = &(*_301);
        _299 = <[u8; 27] as AsRef<[u8]>>::as_ref(move _300) -> [return: bb110, unwind: bb234];
    }

    bb110: {
        StorageDead(_300);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        _307 = _90;
        _306 = [move _307];
        _305 = &_306;
        StorageDead(_307);
        StorageLive(_308);
        _308 = RangeFull;
        _304 = <[u8; 1] as Index<RangeFull>>::index(move _305, move _308) -> [return: bb111, unwind: bb234];
    }

    bb111: {
        StorageDead(_308);
        StorageDead(_305);
        _303 = &(*_304);
        _302 = &(*_303);
        _298 = [move _299, move _302];
        _297 = &_298;
        StorageDead(_302);
        StorageDead(_299);
        StorageLive(_309);
        _309 = RangeFull;
        _296 = <[&[u8]; 2] as Index<RangeFull>>::index(move _297, move _309) -> [return: bb112, unwind: bb234];
    }

    bb112: {
        StorageDead(_309);
        StorageDead(_297);
        _295 = &(*_296);
        _294 = &(*_295);
        _293 = [move _294];
        StorageDead(_294);
        _292 = &_293;
        _291 = &(*_292);
        _290 = move _291 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_291);
        _468 = const false;
        _288 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::with_signer(move _289, move _290) -> [return: bb113, unwind: bb234];
    }

    bb113: {
        StorageDead(_290);
        _468 = const false;
        StorageDead(_289);
        StorageLive(_310);
        _310 = &(*_1);
        _287 = anchor_lang::system_program::assign(move _288, move _310) -> [return: bb114, unwind: bb236];
    }

    bb114: {
        StorageDead(_310);
        StorageDead(_288);
        _286 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _287) -> [return: bb115, unwind: bb236];
    }

    bb115: {
        StorageDead(_287);
        _311 = discriminant(_286);
        switchInt(move _311) -> [0: bb116, 1: bb117, otherwise: bb5];
    }

    bb116: {
        StorageLive(_315);
        _315 = ((_286 as Continue).0: ());
        _285 = _315;
        StorageDead(_315);
        _493 = discriminant(_286);
        StorageDead(_306);
        StorageDead(_304);
        StorageDead(_303);
        StorageDead(_301);
        StorageDead(_298);
        StorageDead(_296);
        StorageDead(_295);
        StorageDead(_293);
        StorageDead(_292);
        StorageDead(_286);
        StorageDead(_285);
        _132 = const ();
        StorageDead(_281);
        _469 = const false;
        StorageDead(_278);
        StorageDead(_242);
        _471 = const false;
        StorageDead(_239);
        StorageDead(_211);
        goto -> bb119;
    }

    bb117: {
        StorageLive(_312);
        _312 = move ((_286 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_314);
        _314 = move _312;
        _0 = <std::result::Result<admin::InitializeProtectedMakerModeConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _314) -> [return: bb118, unwind: bb232];
    }

    bb118: {
        StorageDead(_314);
        StorageDead(_312);
        _509 = discriminant(_286);
        StorageDead(_306);
        StorageDead(_304);
        StorageDead(_303);
        StorageDead(_301);
        StorageDead(_298);
        StorageDead(_296);
        StorageDead(_295);
        StorageDead(_293);
        StorageDead(_292);
        StorageDead(_286);
        StorageDead(_285);
        StorageDead(_281);
        _469 = const false;
        StorageDead(_278);
        goto -> bb206;
    }

    bb119: {
        StorageDead(_133);
        StorageDead(_132);
        StorageLive(_316);
        StorageLive(_317);
        _317 = &(*_1);
        StorageLive(_318);
        StorageLive(_319);
        _319 = &_27;
        _464 = deref_copy (*_319);
        _318 = &(*_464);
        _316 = anchor_lang::prelude::AccountLoader::<'_, ProtectedMakerModeConfig>::try_from_unchecked(move _317, move _318) -> [return: bb120, unwind: bb225];
    }

    bb120: {
        StorageDead(_318);
        StorageDead(_317);
        _320 = discriminant(_316);
        switchInt(move _320) -> [0: bb122, 1: bb121, otherwise: bb5];
    }

    bb121: {
        StorageLive(_322);
        _322 = move ((_316 as Err).0: anchor_lang::error::Error);
        StorageLive(_324);
        StorageLive(_325);
        _325 = move _322;
        _324 = anchor_lang::error::Error::with_account_name::<&str>(move _325, const "protected_maker_mode_config") -> [return: bb123, unwind: bb231];
    }

    bb122: {
        StorageLive(_321);
        _321 = move ((_316 as Ok).0: anchor_lang::prelude::AccountLoader<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>);
        _123 = move _321;
        StorageDead(_321);
        StorageDead(_130);
        _495 = discriminant(_316);
        StorageDead(_319);
        StorageDead(_316);
        goto -> bb129;
    }

    bb123: {
        StorageDead(_325);
        _0 = std::result::Result::<admin::InitializeProtectedMakerModeConfig<'_>, anchor_lang::error::Error>::Err(move _324);
        StorageDead(_324);
        StorageDead(_322);
        StorageDead(_130);
        _507 = discriminant(_316);
        StorageDead(_319);
        StorageDead(_316);
        goto -> bb209;
    }

    bb124: {
        StorageDead(_127);
        StorageDead(_126);
        StorageLive(_326);
        StorageLive(_327);
        StorageLive(_328);
        _328 = &_27;
        _465 = deref_copy (*_328);
        _327 = &(*_465);
        _326 = anchor_lang::prelude::AccountLoader::<'_, ProtectedMakerModeConfig>::try_from(move _327) -> [return: bb125, unwind: bb225];
    }

    bb125: {
        StorageDead(_327);
        _329 = discriminant(_326);
        switchInt(move _329) -> [0: bb127, 1: bb126, otherwise: bb5];
    }

    bb126: {
        StorageLive(_331);
        _331 = move ((_326 as Err).0: anchor_lang::error::Error);
        StorageLive(_333);
        StorageLive(_334);
        _334 = move _331;
        _333 = anchor_lang::error::Error::with_account_name::<&str>(move _334, const "protected_maker_mode_config") -> [return: bb128, unwind: bb230];
    }

    bb127: {
        StorageLive(_330);
        _330 = move ((_326 as Ok).0: anchor_lang::prelude::AccountLoader<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>);
        _123 = move _330;
        StorageDead(_330);
        _497 = discriminant(_326);
        StorageDead(_328);
        StorageDead(_326);
        goto -> bb129;
    }

    bb128: {
        StorageDead(_334);
        _0 = std::result::Result::<admin::InitializeProtectedMakerModeConfig<'_>, anchor_lang::error::Error>::Err(move _333);
        StorageDead(_333);
        StorageDead(_331);
        _505 = discriminant(_326);
        StorageDead(_328);
        StorageDead(_326);
        goto -> bb209;
    }

    bb129: {
        StorageDead(_125);
        StorageDead(_124);
        StorageLive(_335);
        StorageLive(_336);
        _336 = const false;
        switchInt(move _336) -> [0: bb153, otherwise: bb130];
    }

    bb130: {
        StorageLive(_337);
        StorageLive(_338);
        StorageLive(_339);
        _339 = _122;
        StorageLive(_340);
        StorageLive(_341);
        _341 = &(*_118);
        _340 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _341) -> [return: bb131, unwind: bb225];
    }

    bb131: {
        StorageDead(_341);
        _338 = Ne(move _339, move _340);
        switchInt(move _338) -> [0: bb137, otherwise: bb132];
    }

    bb132: {
        StorageDead(_340);
        StorageDead(_339);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        _346 = ConstraintSpace;
        _345 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _346) -> [return: bb133, unwind: bb225];
    }

    bb133: {
        StorageDead(_346);
        _344 = anchor_lang::error::Error::with_account_name::<&str>(move _345, const "protected_maker_mode_config") -> [return: bb134, unwind: bb225];
    }

    bb134: {
        _467 = const true;
        StorageDead(_345);
        StorageLive(_347);
        StorageLive(_348);
        _348 = _122;
        StorageLive(_349);
        StorageLive(_350);
        _350 = &(*_118);
        _349 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _350) -> [return: bb135, unwind: bb229];
    }

    bb135: {
        StorageDead(_350);
        _347 = (move _348, move _349);
        StorageDead(_349);
        StorageDead(_348);
        _467 = const false;
        _343 = anchor_lang::error::Error::with_values::<usize, usize>(move _344, move _347) -> [return: bb136, unwind: bb229];
    }

    bb136: {
        StorageDead(_347);
        _467 = const false;
        StorageDead(_344);
        _0 = std::result::Result::<admin::InitializeProtectedMakerModeConfig<'_>, anchor_lang::error::Error>::Err(move _343);
        StorageDead(_343);
        StorageDead(_338);
        StorageDead(_337);
        goto -> bb205;
    }

    bb137: {
        StorageDead(_340);
        StorageDead(_339);
        _337 = const ();
        StorageDead(_338);
        StorageDead(_337);
        StorageLive(_351);
        StorageLive(_352);
        StorageLive(_353);
        _353 = &_121;
        StorageLive(_354);
        _354 = &_1;
        _352 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _353, move _354) -> [return: bb138, unwind: bb225];
    }

    bb138: {
        switchInt(move _352) -> [0: bb143, otherwise: bb139];
    }

    bb139: {
        StorageDead(_354);
        StorageDead(_353);
        StorageLive(_356);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        _359 = ConstraintOwner;
        _358 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _359) -> [return: bb140, unwind: bb225];
    }

    bb140: {
        StorageDead(_359);
        _357 = anchor_lang::error::Error::with_account_name::<&str>(move _358, const "protected_maker_mode_config") -> [return: bb141, unwind: bb225];
    }

    bb141: {
        StorageDead(_358);
        StorageLive(_360);
        StorageLive(_361);
        _361 = (*_121);
        StorageLive(_362);
        _362 = (*_1);
        _360 = (move _361, move _362);
        StorageDead(_362);
        StorageDead(_361);
        _356 = anchor_lang::error::Error::with_pubkeys(move _357, move _360) -> [return: bb142, unwind: bb225];
    }

    bb142: {
        StorageDead(_360);
        StorageDead(_357);
        _0 = std::result::Result::<admin::InitializeProtectedMakerModeConfig<'_>, anchor_lang::error::Error>::Err(move _356);
        StorageDead(_356);
        StorageDead(_352);
        StorageDead(_351);
        goto -> bb205;
    }

    bb143: {
        StorageDead(_354);
        StorageDead(_353);
        _351 = const ();
        StorageDead(_352);
        StorageDead(_351);
        StorageLive(_363);
        StorageLive(_364);
        _364 = &_81;
        StorageLive(_365);
        _365 = _122;
        _363 = anchor_lang::prelude::Rent::minimum_balance(move _364, move _365) -> [return: bb144, unwind: bb225];
    }

    bb144: {
        StorageDead(_365);
        StorageDead(_364);
        StorageLive(_366);
        StorageLive(_367);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        _370 = &_123;
        _369 = <anchor_lang::prelude::AccountLoader<'_, ProtectedMakerModeConfig> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _370) -> [return: bb145, unwind: bb225];
    }

    bb145: {
        _368 = &_369;
        StorageDead(_370);
        _367 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _368) -> [return: bb146, unwind: bb221];
    }

    bb146: {
        StorageDead(_368);
        StorageLive(_371);
        _371 = _363;
        _366 = Lt(move _367, move _371);
        switchInt(move _366) -> [0: bb151, otherwise: bb147];
    }

    bb147: {
        StorageDead(_371);
        drop(_369) -> [return: bb148, unwind: bb225];
    }

    bb148: {
        StorageDead(_369);
        StorageDead(_367);
        StorageLive(_373);
        StorageLive(_374);
        StorageLive(_375);
        _375 = ConstraintRentExempt;
        _374 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _375) -> [return: bb149, unwind: bb225];
    }

    bb149: {
        StorageDead(_375);
        _373 = anchor_lang::error::Error::with_account_name::<&str>(move _374, const "protected_maker_mode_config") -> [return: bb150, unwind: bb225];
    }

    bb150: {
        StorageDead(_374);
        _0 = std::result::Result::<admin::InitializeProtectedMakerModeConfig<'_>, anchor_lang::error::Error>::Err(move _373);
        StorageDead(_373);
        StorageDead(_366);
        StorageDead(_363);
        goto -> bb205;
    }

    bb151: {
        StorageDead(_371);
        drop(_369) -> [return: bb152, unwind: bb225];
    }

    bb152: {
        StorageDead(_369);
        StorageDead(_367);
        _335 = const ();
        StorageDead(_366);
        StorageDead(_363);
        goto -> bb154;
    }

    bb153: {
        _335 = const ();
        goto -> bb154;
    }

    bb154: {
        StorageDead(_336);
        StorageDead(_335);
        _117 = move _123;
        StorageDead(_123);
        StorageDead(_122);
        StorageDead(_121);
        StorageDead(_118);
        StorageLive(_376);
        StorageLive(_377);
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        _380 = &_117;
        _379 = &(*_380);
        _378 = <anchor_lang::prelude::AccountLoader<'_, ProtectedMakerModeConfig> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _379) -> [return: bb155, unwind: bb225];
    }

    bb155: {
        StorageDead(_379);
        _377 = ((*_378).6: bool);
        switchInt(move _377) -> [0: bb156, otherwise: bb159];
    }

    bb156: {
        StorageDead(_380);
        StorageDead(_378);
        StorageLive(_382);
        StorageLive(_383);
        StorageLive(_384);
        _384 = ConstraintMut;
        _383 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _384) -> [return: bb157, unwind: bb225];
    }

    bb157: {
        StorageDead(_384);
        _382 = anchor_lang::error::Error::with_account_name::<&str>(move _383, const "protected_maker_mode_config") -> [return: bb158, unwind: bb225];
    }

    bb158: {
        StorageDead(_383);
        _0 = std::result::Result::<admin::InitializeProtectedMakerModeConfig<'_>, anchor_lang::error::Error>::Err(move _382);
        StorageDead(_382);
        StorageDead(_377);
        StorageDead(_376);
        goto -> bb211;
    }

    bb159: {
        StorageDead(_380);
        StorageDead(_378);
        _376 = const ();
        StorageDead(_377);
        StorageDead(_376);
        StorageLive(_385);
        StorageLive(_386);
        StorageLive(_387);
        _387 = &_81;
        StorageLive(_388);
        StorageLive(_389);
        StorageLive(_390);
        StorageLive(_391);
        _391 = &_117;
        _390 = <anchor_lang::prelude::AccountLoader<'_, ProtectedMakerModeConfig> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _391) -> [return: bb160, unwind: bb225];
    }

    bb160: {
        _389 = &_390;
        StorageDead(_391);
        _388 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _389) -> [return: bb161, unwind: bb220];
    }

    bb161: {
        StorageDead(_389);
        StorageLive(_392);
        StorageLive(_393);
        StorageLive(_394);
        StorageLive(_395);
        StorageLive(_396);
        StorageLive(_397);
        _397 = &_117;
        _396 = <anchor_lang::prelude::AccountLoader<'_, ProtectedMakerModeConfig> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _397) -> [return: bb162, unwind: bb220];
    }

    bb162: {
        _395 = &_396;
        StorageDead(_397);
        _394 = anchor_lang::prelude::AccountInfo::<'_>::try_data_len(move _395) -> [return: bb163, unwind: bb219];
    }

    bb163: {
        StorageDead(_395);
        _393 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _394) -> [return: bb164, unwind: bb219];
    }

    bb164: {
        _466 = const true;
        StorageDead(_394);
        _398 = discriminant(_393);
        switchInt(move _398) -> [0: bb165, 1: bb166, otherwise: bb5];
    }

    bb165: {
        StorageLive(_402);
        _402 = ((_393 as Continue).0: usize);
        _392 = _402;
        StorageDead(_402);
        _386 = anchor_lang::prelude::Rent::is_exempt(move _387, move _388, move _392) -> [return: bb168, unwind: bb227];
    }

    bb166: {
        StorageLive(_399);
        _399 = move ((_393 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_401);
        _401 = move _399;
        _0 = <std::result::Result<admin::InitializeProtectedMakerModeConfig<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _401) -> [return: bb167, unwind: bb227];
    }

    bb167: {
        StorageDead(_401);
        StorageDead(_399);
        StorageDead(_392);
        StorageDead(_388);
        StorageDead(_387);
        _503 = discriminant(_393);
        drop(_396) -> [return: bb202, unwind: bb220];
    }

    bb168: {
        switchInt(move _386) -> [0: bb170, otherwise: bb169];
    }

    bb169: {
        StorageDead(_392);
        StorageDead(_388);
        StorageDead(_387);
        _499 = discriminant(_393);
        drop(_396) -> [return: bb175, unwind: bb220];
    }

    bb170: {
        StorageDead(_392);
        StorageDead(_388);
        StorageDead(_387);
        _501 = discriminant(_393);
        drop(_396) -> [return: bb171, unwind: bb220];
    }

    bb171: {
        StorageDead(_396);
        _466 = const false;
        StorageDead(_393);
        drop(_390) -> [return: bb172, unwind: bb225];
    }

    bb172: {
        StorageDead(_390);
        StorageLive(_404);
        StorageLive(_405);
        StorageLive(_406);
        _406 = ConstraintRentExempt;
        _405 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _406) -> [return: bb173, unwind: bb225];
    }

    bb173: {
        StorageDead(_406);
        _404 = anchor_lang::error::Error::with_account_name::<&str>(move _405, const "protected_maker_mode_config") -> [return: bb174, unwind: bb225];
    }

    bb174: {
        StorageDead(_405);
        _0 = std::result::Result::<admin::InitializeProtectedMakerModeConfig<'_>, anchor_lang::error::Error>::Err(move _404);
        StorageDead(_404);
        goto -> bb204;
    }

    bb175: {
        StorageDead(_396);
        _466 = const false;
        StorageDead(_393);
        drop(_390) -> [return: bb176, unwind: bb225];
    }

    bb176: {
        StorageDead(_390);
        _385 = const ();
        StorageDead(_386);
        StorageDead(_385);
        StorageLive(_407);
        StorageLive(_408);
        StorageLive(_409);
        StorageLive(_410);
        StorageLive(_411);
        _411 = &_6;
        _410 = &(*_411);
        _409 = <anchor_lang::prelude::Signer<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _410) -> [return: bb177, unwind: bb225];
    }

    bb177: {
        StorageDead(_410);
        _408 = ((*_409).6: bool);
        switchInt(move _408) -> [0: bb178, otherwise: bb181];
    }

    bb178: {
        StorageDead(_411);
        StorageDead(_409);
        StorageLive(_413);
        StorageLive(_414);
        StorageLive(_415);
        _415 = ConstraintMut;
        _414 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _415) -> [return: bb179, unwind: bb225];
    }

    bb179: {
        StorageDead(_415);
        _413 = anchor_lang::error::Error::with_account_name::<&str>(move _414, const "admin") -> [return: bb180, unwind: bb225];
    }

    bb180: {
        StorageDead(_414);
        _0 = std::result::Result::<admin::InitializeProtectedMakerModeConfig<'_>, anchor_lang::error::Error>::Err(move _413);
        StorageDead(_413);
        StorageDead(_408);
        StorageDead(_407);
        goto -> bb211;
    }

    bb181: {
        StorageDead(_411);
        StorageDead(_409);
        _407 = const ();
        StorageDead(_408);
        StorageDead(_407);
        StorageLive(_416);
        StorageLive(_417);
        StorageLive(_418);
        StorageLive(_419);
        StorageLive(_420);
        _420 = &_6;
        _419 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _420) -> [return: bb182, unwind: bb225];
    }

    bb182: {
        _418 = &_419;
        StorageDead(_420);
        StorageLive(_421);
        StorageLive(_422);
        _422 = admin_hot_wallet::id() -> [return: bb183, unwind: bb225];
    }

    bb183: {
        _421 = &_422;
        _417 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _418, move _421) -> [return: bb184, unwind: bb225];
    }

    bb184: {
        switchInt(move _417) -> [0: bb186, otherwise: bb185];
    }

    bb185: {
        StorageDead(_422);
        StorageDead(_421);
        StorageDead(_419);
        StorageDead(_418);
        goto -> bb190;
    }

    bb186: {
        StorageDead(_422);
        StorageDead(_421);
        StorageDead(_419);
        StorageDead(_418);
        StorageLive(_423);
        StorageLive(_424);
        StorageLive(_425);
        StorageLive(_426);
        _426 = &_6;
        _425 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _426) -> [return: bb187, unwind: bb225];
    }

    bb187: {
        _424 = &_425;
        StorageDead(_426);
        StorageLive(_427);
        StorageLive(_428);
        StorageLive(_429);
        _539 = (((_36.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _429 = &(*_539);
        _428 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _429) -> [return: bb188, unwind: bb225];
    }

    bb188: {
        StorageDead(_429);
        _427 = &((*_428).0: anchor_lang::prelude::Pubkey);
        _423 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _424, move _427) -> [return: bb189, unwind: bb225];
    }

    bb189: {
        switchInt(move _423) -> [0: bb191, otherwise: bb190];
    }

    bb190: {
        StorageDead(_428);
        StorageDead(_427);
        StorageDead(_425);
        StorageDead(_424);
        _416 = const ();
        StorageDead(_423);
        StorageDead(_417);
        StorageDead(_416);
        StorageLive(_434);
        StorageLive(_435);
        StorageLive(_436);
        StorageLive(_437);
        _540 = (((_36.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _437 = &(*_540);
        _436 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _437) -> [return: bb194, unwind: bb225];
    }

    bb191: {
        StorageDead(_428);
        StorageDead(_427);
        StorageDead(_425);
        StorageDead(_424);
        StorageLive(_431);
        StorageLive(_432);
        StorageLive(_433);
        _433 = ConstraintRaw;
        _432 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _433) -> [return: bb192, unwind: bb225];
    }

    bb192: {
        StorageDead(_433);
        _431 = anchor_lang::error::Error::with_account_name::<&str>(move _432, const "admin") -> [return: bb193, unwind: bb225];
    }

    bb193: {
        StorageDead(_432);
        _0 = std::result::Result::<admin::InitializeProtectedMakerModeConfig<'_>, anchor_lang::error::Error>::Err(move _431);
        StorageDead(_431);
        StorageDead(_423);
        StorageDead(_417);
        StorageDead(_416);
        goto -> bb211;
    }

    bb194: {
        StorageDead(_437);
        _435 = ((*_436).0: anchor_lang::prelude::Pubkey);
        StorageDead(_436);
        StorageLive(_438);
        StorageLive(_439);
        _439 = &_6;
        _438 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _439) -> [return: bb195, unwind: bb225];
    }

    bb195: {
        StorageDead(_439);
        StorageLive(_440);
        StorageLive(_441);
        _441 = &_435;
        StorageLive(_442);
        _442 = &_438;
        _440 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _441, move _442) -> [return: bb196, unwind: bb225];
    }

    bb196: {
        switchInt(move _440) -> [0: bb201, otherwise: bb197];
    }

    bb197: {
        StorageDead(_442);
        StorageDead(_441);
        StorageLive(_444);
        StorageLive(_445);
        StorageLive(_446);
        StorageLive(_447);
        _447 = ConstraintHasOne;
        _446 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _447) -> [return: bb198, unwind: bb225];
    }

    bb198: {
        StorageDead(_447);
        _445 = anchor_lang::error::Error::with_account_name::<&str>(move _446, const "state") -> [return: bb199, unwind: bb225];
    }

    bb199: {
        StorageDead(_446);
        StorageLive(_448);
        StorageLive(_449);
        _449 = _435;
        StorageLive(_450);
        _450 = _438;
        _448 = (move _449, move _450);
        StorageDead(_450);
        StorageDead(_449);
        _444 = anchor_lang::error::Error::with_pubkeys(move _445, move _448) -> [return: bb200, unwind: bb225];
    }

    bb200: {
        StorageDead(_448);
        StorageDead(_445);
        _0 = std::result::Result::<admin::InitializeProtectedMakerModeConfig<'_>, anchor_lang::error::Error>::Err(move _444);
        StorageDead(_444);
        StorageDead(_440);
        StorageDead(_438);
        StorageDead(_435);
        StorageDead(_434);
        goto -> bb211;
    }

    bb201: {
        StorageDead(_442);
        StorageDead(_441);
        _434 = const ();
        StorageDead(_440);
        StorageDead(_438);
        StorageDead(_435);
        StorageDead(_434);
        StorageLive(_451);
        StorageLive(_452);
        _452 = move _6;
        StorageLive(_453);
        _453 = move _117;
        StorageLive(_454);
        _454 = move _36;
        StorageLive(_455);
        _455 = move _51;
        StorageLive(_456);
        _456 = move _66;
        _451 = admin::InitializeProtectedMakerModeConfig::<'_> { admin: move _452, protected_maker_mode_config: move _453, state: move _454, rent: move _455, system_program: move _456 };
        StorageDead(_456);
        StorageDead(_455);
        StorageDead(_454);
        StorageDead(_453);
        StorageDead(_452);
        _0 = std::result::Result::<admin::InitializeProtectedMakerModeConfig<'_>, anchor_lang::error::Error>::Ok(move _451);
        StorageDead(_451);
        StorageDead(_117);
        StorageDead(_90);
        StorageDead(_89);
        StorageDead(_81);
        StorageDead(_66);
        StorageDead(_51);
        StorageDead(_36);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_6);
        goto -> bb218;
    }

    bb202: {
        StorageDead(_396);
        _466 = const false;
        StorageDead(_393);
        drop(_390) -> [return: bb203, unwind: bb225];
    }

    bb203: {
        StorageDead(_390);
        goto -> bb204;
    }

    bb204: {
        StorageDead(_386);
        StorageDead(_385);
        goto -> bb211;
    }

    bb205: {
        StorageDead(_336);
        StorageDead(_335);
        goto -> bb210;
    }

    bb206: {
        StorageDead(_242);
        _471 = const false;
        StorageDead(_239);
        goto -> bb207;
    }

    bb207: {
        StorageDead(_211);
        goto -> bb208;
    }

    bb208: {
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_130);
        goto -> bb209;
    }

    bb209: {
        StorageDead(_125);
        StorageDead(_124);
        goto -> bb210;
    }

    bb210: {
        StorageDead(_123);
        StorageDead(_122);
        StorageDead(_121);
        StorageDead(_118);
        goto -> bb211;
    }

    bb211: {
        StorageDead(_117);
        goto -> bb212;
    }

    bb212: {
        StorageDead(_90);
        StorageDead(_89);
        goto -> bb213;
    }

    bb213: {
        StorageDead(_81);
        goto -> bb214;
    }

    bb214: {
        StorageDead(_66);
        goto -> bb215;
    }

    bb215: {
        StorageDead(_51);
        drop(_36) -> [return: bb216, unwind: bb226];
    }

    bb216: {
        StorageDead(_36);
        StorageDead(_28);
        StorageDead(_27);
        goto -> bb217;
    }

    bb217: {
        StorageDead(_6);
        goto -> bb218;
    }

    bb218: {
        return;
    }

    bb219 (cleanup): {
        drop(_396) -> [return: bb220, unwind terminate(cleanup)];
    }

    bb220 (cleanup): {
        drop(_390) -> [return: bb225, unwind terminate(cleanup)];
    }

    bb221 (cleanup): {
        drop(_369) -> [return: bb225, unwind terminate(cleanup)];
    }

    bb222 (cleanup): {
        drop(_221) -> [return: bb225, unwind terminate(cleanup)];
    }

    bb223 (cleanup): {
        drop(_194) -> [return: bb225, unwind terminate(cleanup)];
    }

    bb224 (cleanup): {
        drop(_140) -> [return: bb225, unwind terminate(cleanup)];
    }

    bb225 (cleanup): {
        drop(_36) -> [return: bb226, unwind terminate(cleanup)];
    }

    bb226 (cleanup): {
        resume;
    }

    bb227 (cleanup): {
        _527 = discriminant(_393);
        goto -> bb219;
    }

    bb228 (cleanup): {
        drop(_344) -> [return: bb225, unwind terminate(cleanup)];
    }

    bb229 (cleanup): {
        switchInt(_467) -> [0: bb225, otherwise: bb228];
    }

    bb230 (cleanup): {
        _528 = discriminant(_326);
        goto -> bb225;
    }

    bb231 (cleanup): {
        _529 = discriminant(_316);
        goto -> bb225;
    }

    bb232 (cleanup): {
        _530 = discriminant(_286);
        goto -> bb236;
    }

    bb233 (cleanup): {
        drop(_289) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb234 (cleanup): {
        switchInt(_468) -> [0: bb236, otherwise: bb233];
    }

    bb235 (cleanup): {
        drop(_278) -> [return: bb241, unwind terminate(cleanup)];
    }

    bb236 (cleanup): {
        switchInt(_469) -> [0: bb241, otherwise: bb235];
    }

    bb237 (cleanup): {
        _531 = discriminant(_247);
        goto -> bb241;
    }

    bb238 (cleanup): {
        drop(_250) -> [return: bb241, unwind terminate(cleanup)];
    }

    bb239 (cleanup): {
        switchInt(_470) -> [0: bb241, otherwise: bb238];
    }

    bb240 (cleanup): {
        drop(_239) -> [return: bb225, unwind terminate(cleanup)];
    }

    bb241 (cleanup): {
        switchInt(_471) -> [0: bb225, otherwise: bb240];
    }

    bb242 (cleanup): {
        _532 = discriminant(_230);
        goto -> bb244;
    }

    bb243 (cleanup): {
        drop(_220) -> [return: bb225, unwind terminate(cleanup)];
    }

    bb244 (cleanup): {
        switchInt(_472) -> [0: bb225, otherwise: bb243];
    }

    bb245 (cleanup): {
        drop(_192) -> [return: bb225, unwind terminate(cleanup)];
    }

    bb246 (cleanup): {
        switchInt(_473) -> [0: bb225, otherwise: bb245];
    }

    bb247 (cleanup): {
        _533 = discriminant(_149);
        goto -> bb251;
    }

    bb248 (cleanup): {
        drop(_152) -> [return: bb251, unwind terminate(cleanup)];
    }

    bb249 (cleanup): {
        switchInt(_474) -> [0: bb251, otherwise: bb248];
    }

    bb250 (cleanup): {
        drop(_139) -> [return: bb225, unwind terminate(cleanup)];
    }

    bb251 (cleanup): {
        switchInt(_475) -> [0: bb225, otherwise: bb250];
    }

    bb252 (cleanup): {
        drop(_110) -> [return: bb225, unwind terminate(cleanup)];
    }

    bb253 (cleanup): {
        switchInt(_476) -> [0: bb225, otherwise: bb252];
    }

    bb254 (cleanup): {
        _534 = discriminant(_82);
        goto -> bb225;
    }

    bb255 (cleanup): {
        _535 = discriminant(_67);
        goto -> bb225;
    }

    bb256 (cleanup): {
        _536 = discriminant(_52);
        goto -> bb225;
    }

    bb257 (cleanup): {
        _537 = discriminant(_37);
        goto -> bb226;
    }

    bb258 (cleanup): {
        _538 = discriminant(_7);
        goto -> bb226;
    }
}

alloc240 (size: 27, align: 1) {
    0x00 │ 70 72 6f 74 65 63 74 65 64 5f 6d 61 6b 65 72 5f │ protected_maker_
    0x10 │ 6d 6f 64 65 5f 63 6f 6e 66 69 67                │ mode_config
}

alloc239 (size: 27, align: 1) {
    0x00 │ 70 72 6f 74 65 63 74 65 64 5f 6d 61 6b 65 72 5f │ protected_maker_
    0x10 │ 6d 6f 64 65 5f 63 6f 6e 66 69 67                │ mode_config
}

alloc238 (size: 27, align: 1) {
    0x00 │ 70 72 6f 74 65 63 74 65 64 5f 6d 61 6b 65 72 5f │ protected_maker_
    0x10 │ 6d 6f 64 65 5f 63 6f 6e 66 69 67                │ mode_config
}

alloc237 (size: 27, align: 1) {
    0x00 │ 70 72 6f 74 65 63 74 65 64 5f 6d 61 6b 65 72 5f │ protected_maker_
    0x10 │ 6d 6f 64 65 5f 63 6f 6e 66 69 67                │ mode_config
}
