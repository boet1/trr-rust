// MIR for `math::orders::get_price_for_perp_order` after PreCodegen

fn math::orders::get_price_for_perp_order(_1: u64, _2: controller::position::PositionDirection, _3: PostOnlyParam, _4: &AMM) -> std::result::Result<u64, error::ErrorCode> {
    debug price => _1;
    debug direction => _2;
    debug post_only => _3;
    debug amm => _4;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let mut _5: u64;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _7: std::result::Result<u64, error::ErrorCode>;
    let mut _8: u64;
    let mut _9: u64;
    let mut _10: controller::position::PositionDirection;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _15: u64;
    let _16: ();
    let mut _17: bool;
    let mut _18: &state::order_params::PostOnlyParam;
    let mut _19: &state::order_params::PostOnlyParam;
    let _20: state::order_params::PostOnlyParam;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _23: std::result::Result<u64, error::ErrorCode>;
    let mut _24: &state::perp_market::AMM;
    let mut _25: isize;
    let mut _27: !;
    let mut _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _30: isize;
    let mut _32: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _33: std::result::Result<u64, error::ErrorCode>;
    let mut _34: &state::perp_market::AMM;
    let mut _35: u64;
    let mut _36: isize;
    let mut _38: !;
    let mut _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _41: bool;
    let mut _42: u64;
    let mut _43: u64;
    let mut _44: u64;
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _46: std::result::Result<u64, error::ErrorCode>;
    let mut _47: u64;
    let mut _48: u64;
    let mut _49: isize;
    let mut _51: !;
    let mut _52: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _55: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _56: std::result::Result<u64, error::ErrorCode>;
    let mut _57: &state::perp_market::AMM;
    let mut _58: u64;
    let mut _59: isize;
    let mut _61: !;
    let mut _62: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _64: bool;
    let mut _65: u64;
    let mut _66: u64;
    let mut _67: u64;
    let mut _68: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _69: std::result::Result<u64, error::ErrorCode>;
    let mut _70: u64;
    let mut _71: u64;
    let mut _72: isize;
    let mut _74: !;
    let mut _75: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _77: u64;
    scope 1 {
        debug limit_price => _5;
        let _21: u64;
        let _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _29: u64;
        let mut _78: &state::order_params::PostOnlyParam;
        scope 6 {
            debug reserve_price => _21;
            let _31: u64;
            let _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _40: u64;
            let _54: u64;
            let _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _63: u64;
            scope 11 {
                debug amm_ask => _31;
                let _50: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _53: u64;
                scope 16 {
                    debug residual => _50;
                    scope 17 {
                    }
                }
                scope 18 {
                    debug val => _53;
                    scope 19 {
                    }
                }
            }
            scope 12 {
                debug residual => _37;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _40;
                scope 15 {
                }
            }
            scope 20 {
                debug amm_bid => _54;
                let _73: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _76: u64;
                scope 25 {
                    debug residual => _73;
                    scope 26 {
                    }
                }
                scope 27 {
                    debug val => _76;
                    scope 28 {
                    }
                }
            }
            scope 21 {
                debug residual => _60;
                scope 22 {
                }
            }
            scope 23 {
                debug val => _63;
                scope 24 {
                }
            }
        }
        scope 7 {
            debug residual => _26;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _29;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _12;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _15;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _1;
        StorageLive(_9);
        _9 = ((*_4).53: u64);
        StorageLive(_10);
        _10 = _2;
        _7 = math::orders::standardize_price(move _8, move _9, move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        _6 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        _11 = discriminant(_6);
        switchInt(move _11) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_15);
        _15 = ((_6 as Continue).0: u64);
        _5 = _15;
        StorageDead(_15);
        StorageDead(_6);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = &_3;
        StorageLive(_19);
        _78 = const _;
        _19 = &(*_78);
        _17 = <PostOnlyParam as PartialEq>::eq(move _18, move _19) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_12);
        _12 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_6);
        goto -> bb48;
    }

    bb7: {
        switchInt(move _17) -> [0: bb43, otherwise: bb8];
    }

    bb8: {
        StorageDead(_19);
        StorageDead(_18);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &(*_4);
        _23 = AMM::reserve_price(move _24) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_24);
        _22 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _23) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_23);
        _25 = discriminant(_22);
        switchInt(move _25) -> [0: bb11, 1: bb12, otherwise: bb4];
    }

    bb11: {
        StorageLive(_29);
        _29 = ((_22 as Continue).0: u64);
        _21 = _29;
        StorageDead(_29);
        StorageDead(_22);
        _30 = discriminant(_2);
        switchInt(move _30) -> [0: bb15, 1: bb14, otherwise: bb4];
    }

    bb12: {
        StorageLive(_26);
        _26 = ((_22 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_28);
        _28 = _26;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _28) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_22);
        goto -> bb47;
    }

    bb14: {
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = &(*_4);
        StorageLive(_58);
        _58 = _21;
        _56 = AMM::bid_price(move _57, move _58) -> [return: bb29, unwind continue];
    }

    bb15: {
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &(*_4);
        StorageLive(_35);
        _35 = _21;
        _33 = AMM::ask_price(move _34, move _35) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_35);
        StorageDead(_34);
        _32 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _33) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_33);
        _36 = discriminant(_32);
        switchInt(move _36) -> [0: bb18, 1: bb19, otherwise: bb4];
    }

    bb18: {
        StorageLive(_40);
        _40 = ((_32 as Continue).0: u64);
        _31 = _40;
        StorageDead(_40);
        StorageDead(_32);
        StorageLive(_41);
        StorageLive(_42);
        _42 = _5;
        StorageLive(_43);
        _43 = _31;
        _41 = Ge(move _42, move _43);
        switchInt(move _41) -> [0: bb22, otherwise: bb21];
    }

    bb19: {
        StorageLive(_37);
        _37 = ((_32 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_39);
        _39 = _37;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _39) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_32);
        goto -> bb46;
    }

    bb21: {
        StorageDead(_43);
        StorageDead(_42);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = _31;
        StorageLive(_48);
        _48 = ((*_4).53: u64);
        _46 = <u64 as SafeMath>::safe_sub(move _47, move _48) -> [return: bb23, unwind continue];
    }

    bb22: {
        StorageDead(_43);
        StorageDead(_42);
        _16 = const ();
        goto -> bb28;
    }

    bb23: {
        StorageDead(_48);
        StorageDead(_47);
        _45 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _46) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_46);
        _49 = discriminant(_45);
        switchInt(move _49) -> [0: bb25, 1: bb26, otherwise: bb4];
    }

    bb25: {
        StorageLive(_53);
        _53 = ((_45 as Continue).0: u64);
        _44 = _53;
        StorageDead(_53);
        _5 = move _44;
        StorageDead(_44);
        StorageDead(_45);
        _16 = const ();
        goto -> bb28;
    }

    bb26: {
        StorageLive(_50);
        _50 = ((_45 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_52);
        _52 = _50;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _52) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_52);
        StorageDead(_50);
        StorageDead(_44);
        StorageDead(_45);
        StorageDead(_41);
        goto -> bb46;
    }

    bb28: {
        StorageDead(_41);
        StorageDead(_31);
        goto -> bb42;
    }

    bb29: {
        StorageDead(_58);
        StorageDead(_57);
        _55 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _56) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_56);
        _59 = discriminant(_55);
        switchInt(move _59) -> [0: bb31, 1: bb32, otherwise: bb4];
    }

    bb31: {
        StorageLive(_63);
        _63 = ((_55 as Continue).0: u64);
        _54 = _63;
        StorageDead(_63);
        StorageDead(_55);
        StorageLive(_64);
        StorageLive(_65);
        _65 = _5;
        StorageLive(_66);
        _66 = _54;
        _64 = Le(move _65, move _66);
        switchInt(move _64) -> [0: bb35, otherwise: bb34];
    }

    bb32: {
        StorageLive(_60);
        _60 = ((_55 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_62);
        _62 = _60;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _62) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_62);
        StorageDead(_60);
        StorageDead(_55);
        goto -> bb45;
    }

    bb34: {
        StorageDead(_66);
        StorageDead(_65);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = _54;
        StorageLive(_71);
        _71 = ((*_4).53: u64);
        _69 = <u64 as SafeMath>::safe_add(move _70, move _71) -> [return: bb36, unwind continue];
    }

    bb35: {
        StorageDead(_66);
        StorageDead(_65);
        _16 = const ();
        goto -> bb41;
    }

    bb36: {
        StorageDead(_71);
        StorageDead(_70);
        _68 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _69) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_69);
        _72 = discriminant(_68);
        switchInt(move _72) -> [0: bb38, 1: bb39, otherwise: bb4];
    }

    bb38: {
        StorageLive(_76);
        _76 = ((_68 as Continue).0: u64);
        _67 = _76;
        StorageDead(_76);
        _5 = move _67;
        StorageDead(_67);
        StorageDead(_68);
        _16 = const ();
        goto -> bb41;
    }

    bb39: {
        StorageLive(_73);
        _73 = ((_68 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_75);
        _75 = _73;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _75) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_75);
        StorageDead(_73);
        StorageDead(_67);
        StorageDead(_68);
        StorageDead(_64);
        goto -> bb45;
    }

    bb41: {
        StorageDead(_64);
        StorageDead(_54);
        goto -> bb42;
    }

    bb42: {
        StorageDead(_21);
        goto -> bb44;
    }

    bb43: {
        StorageDead(_19);
        StorageDead(_18);
        _16 = const ();
        goto -> bb44;
    }

    bb44: {
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_77);
        _77 = _5;
        _0 = std::result::Result::<u64, error::ErrorCode>::Ok(move _77);
        StorageDead(_77);
        StorageDead(_5);
        goto -> bb49;
    }

    bb45: {
        StorageDead(_54);
        goto -> bb47;
    }

    bb46: {
        StorageDead(_31);
        goto -> bb47;
    }

    bb47: {
        StorageDead(_21);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb48;
    }

    bb48: {
        StorageDead(_5);
        goto -> bb49;
    }

    bb49: {
        return;
    }
}
