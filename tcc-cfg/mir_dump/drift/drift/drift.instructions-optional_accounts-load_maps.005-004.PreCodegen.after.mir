// MIR for `load_maps` after PreCodegen

fn load_maps(_1: &mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>, _2: &BTreeSet<u16>, _3: &BTreeSet<u16>, _4: u64, _5: Option<state::state::OracleGuardRails>) -> std::result::Result<AccountMaps<'_>, error::ErrorCode> {
    debug account_info_iter => _1;
    debug writable_perp_markets => _2;
    debug writable_spot_markets => _3;
    debug slot => _4;
    debug oracle_guard_rails => _5;
    let mut _0: std::result::Result<instructions::optional_accounts::AccountMaps<'_>, error::ErrorCode>;
    let _6: state::oracle_map::OracleMap<'_>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::oracle_map::OracleMap<'_>>;
    let mut _8: std::result::Result<state::oracle_map::OracleMap<'_>, error::ErrorCode>;
    let mut _9: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _10: u64;
    let mut _11: std::option::Option<state::state::OracleGuardRails>;
    let mut _12: isize;
    let _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _14: !;
    let mut _15: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _16: state::oracle_map::OracleMap<'_>;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::spot_market_map::SpotMarketMap<'_>>;
    let mut _19: std::result::Result<state::spot_market_map::SpotMarketMap<'_>, error::ErrorCode>;
    let mut _20: &std::collections::BTreeSet<u16>;
    let mut _21: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _22: isize;
    let mut _24: !;
    let mut _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::perp_market_map::PerpMarketMap<'_>>;
    let mut _29: std::result::Result<state::perp_market_map::PerpMarketMap<'_>, error::ErrorCode>;
    let mut _30: &std::collections::BTreeSet<u16>;
    let mut _31: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _32: isize;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _37: ();
    let mut _38: std::collections::btree_set::Iter<'_, u16>;
    let mut _39: std::collections::btree_set::Iter<'_, u16>;
    let mut _40: &std::collections::BTreeSet<u16>;
    let mut _42: ();
    let _43: ();
    let mut _44: std::option::Option<&u16>;
    let mut _45: &mut std::collections::btree_set::Iter<'_, u16>;
    let mut _46: &mut std::collections::btree_set::Iter<'_, u16>;
    let mut _47: isize;
    let mut _48: !;
    let _50: ();
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _52: std::result::Result<(), error::ErrorCode>;
    let mut _53: &state::perp_market::PerpMarket;
    let _54: &state::perp_market::PerpMarket;
    let mut _55: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let _56: std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _57: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::perp_market::PerpMarket>>;
    let mut _58: std::result::Result<std::cell::Ref<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _59: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _60: &u16;
    let mut _61: isize;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _66: &state::oracle_map::OracleMap<'_>;
    let _67: &state::oracle_map::OracleMap<'_>;
    let mut _68: u64;
    let mut _69: isize;
    let mut _71: !;
    let mut _72: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _74: instructions::optional_accounts::AccountMaps<'_>;
    let mut _75: state::perp_market_map::PerpMarketMap<'_>;
    let mut _76: state::spot_market_map::SpotMarketMap<'_>;
    let mut _77: state::oracle_map::OracleMap<'_>;
    let mut _78: bool;
    let mut _79: isize;
    let mut _80: isize;
    let mut _81: isize;
    let mut _82: isize;
    let mut _83: isize;
    let mut _84: isize;
    let mut _85: isize;
    let mut _86: isize;
    let mut _87: isize;
    let mut _88: isize;
    let mut _89: isize;
    let mut _90: isize;
    let mut _91: isize;
    let mut _92: isize;
    let mut _93: isize;
    let mut _94: isize;
    let mut _95: isize;
    let mut _96: isize;
    let mut _97: isize;
    let mut _98: isize;
    scope 1 {
        debug oracle_map => _6;
        let _17: state::spot_market_map::SpotMarketMap<'_>;
        let _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _26: state::spot_market_map::SpotMarketMap<'_>;
        scope 6 {
            debug spot_market_map => _17;
            let _27: state::perp_market_map::PerpMarketMap<'_>;
            let _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _36: state::perp_market_map::PerpMarketMap<'_>;
            scope 11 {
                debug perp_market_map => _27;
                let mut _41: std::collections::btree_set::Iter<'_, u16>;
                scope 16 {
                    debug iter => _41;
                    let _49: &u16;
                    scope 17 {
                        debug perp_market_index => _49;
                        let _62: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _65: std::cell::Ref<'_, state::perp_market::PerpMarket>;
                        let _70: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _73: ();
                        scope 18 {
                            debug residual => _62;
                            scope 19 {
                            }
                        }
                        scope 20 {
                            debug val => _65;
                            scope 21 {
                            }
                        }
                        scope 22 {
                            debug residual => _70;
                            scope 23 {
                            }
                        }
                        scope 24 {
                            debug val => _73;
                            scope 25 {
                            }
                        }
                    }
                }
            }
            scope 12 {
                debug residual => _33;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _36;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _23;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _26;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _13;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _16;
        scope 5 {
        }
    }

    bb0: {
        _78 = const false;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &mut (*_1);
        StorageLive(_10);
        _10 = _4;
        StorageLive(_11);
        _11 = _5;
        _8 = OracleMap::<'_>::load(move _9, move _10, move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        _7 = <std::result::Result<OracleMap<'_>, error::ErrorCode> as Try>::branch(move _8) -> [return: bb2, unwind: bb42];
    }

    bb2: {
        StorageDead(_8);
        _12 = discriminant(_7);
        switchInt(move _12) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_16);
        _16 = move ((_7 as Continue).0: state::oracle_map::OracleMap<'_>);
        _6 = move _16;
        StorageDead(_16);
        _81 = discriminant(_7);
        StorageDead(_7);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = &(*_3);
        StorageLive(_21);
        _21 = &mut (*_1);
        _19 = SpotMarketMap::<'_>::load(move _20, move _21) -> [return: bb7, unwind: bb41];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_13);
        _13 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_15);
        _15 = _13;
        _0 = <std::result::Result<AccountMaps<'_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _15) -> [return: bb6, unwind: bb48];
    }

    bb6: {
        StorageDead(_15);
        StorageDead(_13);
        _79 = discriminant(_7);
        StorageDead(_7);
        goto -> bb36;
    }

    bb7: {
        StorageDead(_21);
        StorageDead(_20);
        _18 = <std::result::Result<SpotMarketMap<'_>, error::ErrorCode> as Try>::branch(move _19) -> [return: bb8, unwind: bb41];
    }

    bb8: {
        StorageDead(_19);
        _22 = discriminant(_18);
        switchInt(move _22) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_26);
        _26 = move ((_18 as Continue).0: state::spot_market_map::SpotMarketMap<'_>);
        _17 = move _26;
        StorageDead(_26);
        _85 = discriminant(_18);
        StorageDead(_18);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = &(*_2);
        StorageLive(_31);
        _31 = &mut (*_1);
        _29 = PerpMarketMap::<'_>::load(move _30, move _31) -> [return: bb12, unwind: bb40];
    }

    bb10: {
        StorageLive(_23);
        _23 = ((_18 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_25);
        _25 = _23;
        _0 = <std::result::Result<AccountMaps<'_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _25) -> [return: bb11, unwind: bb47];
    }

    bb11: {
        StorageDead(_25);
        StorageDead(_23);
        _83 = discriminant(_18);
        StorageDead(_18);
        goto -> bb35;
    }

    bb12: {
        StorageDead(_31);
        StorageDead(_30);
        _28 = <std::result::Result<PerpMarketMap<'_>, error::ErrorCode> as Try>::branch(move _29) -> [return: bb13, unwind: bb40];
    }

    bb13: {
        StorageDead(_29);
        _32 = discriminant(_28);
        switchInt(move _32) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_36);
        _36 = move ((_28 as Continue).0: state::perp_market_map::PerpMarketMap<'_>);
        _27 = move _36;
        StorageDead(_36);
        _89 = discriminant(_28);
        StorageDead(_28);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &(*_2);
        _39 = BTreeSet::<u16>::iter(move _40) -> [return: bb17, unwind: bb39];
    }

    bb15: {
        StorageLive(_33);
        _33 = ((_28 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_35);
        _35 = _33;
        _0 = <std::result::Result<AccountMaps<'_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _35) -> [return: bb16, unwind: bb46];
    }

    bb16: {
        StorageDead(_35);
        StorageDead(_33);
        _87 = discriminant(_28);
        StorageDead(_28);
        goto -> bb34;
    }

    bb17: {
        StorageDead(_40);
        _38 = <std::collections::btree_set::Iter<'_, u16> as IntoIterator>::into_iter(move _39) -> [return: bb18, unwind: bb39];
    }

    bb18: {
        StorageDead(_39);
        StorageLive(_41);
        _41 = move _38;
        goto -> bb19;
    }

    bb19: {
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = &mut _41;
        _45 = &mut (*_46);
        _44 = <std::collections::btree_set::Iter<'_, u16> as Iterator>::next(move _45) -> [return: bb20, unwind: bb39];
    }

    bb20: {
        StorageDead(_45);
        _47 = discriminant(_44);
        switchInt(move _47) -> [0: bb22, 1: bb21, otherwise: bb4];
    }

    bb21: {
        StorageLive(_49);
        _49 = ((_44 as Some).0: &u16);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _59 = &_27;
        StorageLive(_60);
        _60 = &(*_49);
        _58 = PerpMarketMap::<'_>::get_ref(move _59, move _60) -> [return: bb23, unwind: bb39];
    }

    bb22: {
        _37 = const ();
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_41);
        StorageDead(_38);
        StorageDead(_37);
        StorageLive(_74);
        StorageLive(_75);
        _75 = move _27;
        StorageLive(_76);
        _76 = move _17;
        StorageLive(_77);
        _77 = move _6;
        _74 = AccountMaps::<'_> { perp_market_map: move _75, spot_market_map: move _76, oracle_map: move _77 };
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_75);
        _0 = std::result::Result::<AccountMaps<'_>, error::ErrorCode>::Ok(move _74);
        StorageDead(_74);
        StorageDead(_27);
        StorageDead(_17);
        StorageDead(_6);
        goto -> bb37;
    }

    bb23: {
        StorageDead(_60);
        StorageDead(_59);
        _57 = <std::result::Result<Ref<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _58) -> [return: bb24, unwind: bb39];
    }

    bb24: {
        _78 = const true;
        StorageDead(_58);
        _61 = discriminant(_57);
        switchInt(move _61) -> [0: bb25, 1: bb26, otherwise: bb4];
    }

    bb25: {
        StorageLive(_65);
        _65 = move ((_57 as Continue).0: std::cell::Ref<'_, state::perp_market::PerpMarket>);
        _56 = move _65;
        StorageDead(_65);
        _55 = &_56;
        _54 = <Ref<'_, PerpMarket> as Deref>::deref(move _55) -> [return: bb28, unwind: bb38];
    }

    bb26: {
        StorageLive(_62);
        _62 = ((_57 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_64);
        _64 = _62;
        _0 = <std::result::Result<AccountMaps<'_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _64) -> [return: bb27, unwind: bb45];
    }

    bb27: {
        StorageDead(_64);
        StorageDead(_62);
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_52);
        goto -> bb44;
    }

    bb28: {
        _53 = &(*_54);
        StorageDead(_55);
        StorageLive(_66);
        StorageLive(_67);
        _67 = &_6;
        _66 = &(*_67);
        StorageLive(_68);
        _68 = _4;
        _52 = instructions::optional_accounts::update_prelaunch_oracle(move _53, move _66, move _68) -> [return: bb29, unwind: bb38];
    }

    bb29: {
        StorageDead(_68);
        StorageDead(_66);
        StorageDead(_53);
        _51 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _52) -> [return: bb30, unwind: bb38];
    }

    bb30: {
        StorageDead(_52);
        _69 = discriminant(_51);
        switchInt(move _69) -> [0: bb31, 1: bb32, otherwise: bb4];
    }

    bb31: {
        StorageLive(_73);
        _73 = ((_51 as Continue).0: ());
        _50 = _73;
        StorageDead(_73);
        StorageDead(_67);
        drop(_56) -> [return: bb43, unwind: bb45];
    }

    bb32: {
        StorageLive(_70);
        _70 = ((_51 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_72);
        _72 = _70;
        _0 = <std::result::Result<AccountMaps<'_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _72) -> [return: bb33, unwind: bb38];
    }

    bb33: {
        StorageDead(_72);
        StorageDead(_70);
        StorageDead(_67);
        drop(_56) -> [return: bb44, unwind: bb45];
    }

    bb34: {
        StorageDead(_27);
        drop(_17) -> [return: bb35, unwind: bb41];
    }

    bb35: {
        StorageDead(_17);
        drop(_6) -> [return: bb36, unwind: bb42];
    }

    bb36: {
        StorageDead(_6);
        goto -> bb37;
    }

    bb37: {
        return;
    }

    bb38 (cleanup): {
        drop(_56) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_27) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_17) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_6) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        resume;
    }

    bb43: {
        _91 = discriminant(_57);
        _78 = const false;
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_54);
        StorageDead(_51);
        StorageDead(_50);
        _43 = const ();
        StorageDead(_49);
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_43);
        _42 = const ();
        goto -> bb19;
    }

    bb44: {
        _93 = discriminant(_57);
        _78 = const false;
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_54);
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_41);
        StorageDead(_38);
        StorageDead(_37);
        drop(_27) -> [return: bb34, unwind: bb40];
    }

    bb45 (cleanup): {
        _95 = discriminant(_57);
        goto -> bb39;
    }

    bb46 (cleanup): {
        _96 = discriminant(_28);
        goto -> bb40;
    }

    bb47 (cleanup): {
        _97 = discriminant(_18);
        goto -> bb41;
    }

    bb48 (cleanup): {
        _98 = discriminant(_7);
        goto -> bb42;
    }
}
