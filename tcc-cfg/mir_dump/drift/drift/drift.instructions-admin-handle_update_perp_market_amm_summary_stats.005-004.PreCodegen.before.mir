// MIR for `admin::handle_update_perp_market_amm_summary_stats` before PreCodegen

fn admin::handle_update_perp_market_amm_summary_stats(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::AdminUpdatePerpMarketAmmSummaryStats<'_>>, _2: admin::UpdatePerpMarketSummaryStatsParams) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug params => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _5: std::result::Result<(), anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let _7: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _12: ();
    let _13: ();
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _15: std::result::Result<(), anchor_lang::error::Error>;
    let mut _16: &anchor_lang::prelude::AccountInfo<'_>;
    let _17: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _18: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let _19: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _20: isize;
    let _21: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _24: ();
    let _25: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _26: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _28: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _29: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _30: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _31: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _32: isize;
    let _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _36: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _38: std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _39: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _40: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _41: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _42: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _43: {closure@programs/drift/src/macros.rs:70:40: 70:43};
    let mut _44: isize;
    let mut _46: !;
    let mut _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _49: ();
    let mut _50: &str;
    let _51: &str;
    let mut _52: &std::string::String;
    let _53: &std::string::String;
    let _54: std::string::String;
    let mut _56: std::fmt::Arguments<'_>;
    let mut _57: &[&str];
    let mut _58: &[&str; 1];
    let _59: &[&str; 1];
    let _60: [&str; 1];
    let mut _61: &[core::fmt::rt::Argument<'_>];
    let mut _62: &[core::fmt::rt::Argument<'_>; 1];
    let _63: &[core::fmt::rt::Argument<'_>; 1];
    let _64: [core::fmt::rt::Argument<'_>; 1];
    let mut _65: core::fmt::rt::Argument<'_>;
    let mut _66: &u16;
    let _67: &u16;
    let _68: &state::perp_market::PerpMarket;
    let mut _69: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _70: ();
    let mut _71: &str;
    let _72: &str;
    let mut _73: &std::string::String;
    let _74: &std::string::String;
    let _75: std::string::String;
    let mut _77: std::fmt::Arguments<'_>;
    let mut _78: &[&str];
    let mut _79: &[&str; 1];
    let _80: &[&str; 1];
    let _81: [&str; 1];
    let mut _82: &[core::fmt::rt::Argument<'_>];
    let mut _83: &[core::fmt::rt::Argument<'_>; 1];
    let _84: &[core::fmt::rt::Argument<'_>; 1];
    let _85: [core::fmt::rt::Argument<'_>; 1];
    let mut _86: core::fmt::rt::Argument<'_>;
    let mut _87: &u16;
    let _88: &u16;
    let _89: &state::spot_market::SpotMarket;
    let mut _90: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _92: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _93: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _94: isize;
    let mut _96: !;
    let mut _97: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _101: state::oracle::OraclePriceData;
    let mut _102: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::oracle::OraclePriceData>;
    let mut _103: std::result::Result<state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _104: &state::oracle::OracleSource;
    let _105: &state::oracle::OracleSource;
    let _106: &state::perp_market::PerpMarket;
    let mut _107: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _108: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _109: u64;
    let mut _110: isize;
    let mut _112: !;
    let mut _113: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _115: ();
    let mut _116: isize;
    let _118: ();
    let mut _119: &str;
    let _120: &str;
    let mut _121: &std::string::String;
    let _122: &std::string::String;
    let _123: std::string::String;
    let mut _125: std::fmt::Arguments<'_>;
    let mut _126: &[&str];
    let mut _127: &[&str; 2];
    let _128: &[&str; 2];
    let _129: [&str; 2];
    let mut _130: &[core::fmt::rt::Argument<'_>];
    let mut _131: &[core::fmt::rt::Argument<'_>; 2];
    let _132: &[core::fmt::rt::Argument<'_>; 2];
    let _133: [core::fmt::rt::Argument<'_>; 2];
    let mut _134: core::fmt::rt::Argument<'_>;
    let mut _135: &i64;
    let _136: &i64;
    let _137: &state::perp_market::PerpMarket;
    let mut _138: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _139: core::fmt::rt::Argument<'_>;
    let mut _140: &i64;
    let _141: &i64;
    let mut _142: i64;
    let mut _143: &mut state::perp_market::PerpMarket;
    let mut _144: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _145: ();
    let mut _146: isize;
    let _148: ();
    let mut _149: &str;
    let _150: &str;
    let mut _151: &std::string::String;
    let _152: &std::string::String;
    let _153: std::string::String;
    let mut _155: std::fmt::Arguments<'_>;
    let mut _156: &[&str];
    let mut _157: &[&str; 2];
    let _158: &[&str; 2];
    let _159: [&str; 2];
    let mut _160: &[core::fmt::rt::Argument<'_>];
    let mut _161: &[core::fmt::rt::Argument<'_>; 2];
    let _162: &[core::fmt::rt::Argument<'_>; 2];
    let _163: [core::fmt::rt::Argument<'_>; 2];
    let mut _164: core::fmt::rt::Argument<'_>;
    let mut _165: &i64;
    let _166: &i64;
    let _167: &state::perp_market::PerpMarket;
    let mut _168: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _169: core::fmt::rt::Argument<'_>;
    let mut _170: &i64;
    let _171: &i64;
    let mut _172: i64;
    let mut _173: &mut state::perp_market::PerpMarket;
    let mut _174: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _175: ();
    let mut _176: bool;
    let mut _177: &std::option::Option<bool>;
    let mut _178: &std::option::Option<bool>;
    let _179: std::option::Option<bool>;
    let mut _181: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _182: std::result::Result<i128, error::ErrorCode>;
    let mut _183: &state::perp_market::PerpMarket;
    let _184: &state::perp_market::PerpMarket;
    let mut _185: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _186: &state::spot_market::SpotMarket;
    let _187: &state::spot_market::SpotMarket;
    let mut _188: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _189: i64;
    let mut _190: bool;
    let mut _191: std::option::Option<bool>;
    let mut _192: isize;
    let mut _194: !;
    let mut _195: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _197: ();
    let mut _198: &str;
    let _199: &str;
    let mut _200: &std::string::String;
    let _201: &std::string::String;
    let _202: std::string::String;
    let mut _204: std::fmt::Arguments<'_>;
    let mut _205: &[&str];
    let mut _206: &[&str; 1];
    let _207: &[&str; 1];
    let _208: [&str; 1];
    let mut _209: &[core::fmt::rt::Argument<'_>];
    let mut _210: &[core::fmt::rt::Argument<'_>; 1];
    let _211: &[core::fmt::rt::Argument<'_>; 1];
    let _212: [core::fmt::rt::Argument<'_>; 1];
    let mut _213: core::fmt::rt::Argument<'_>;
    let mut _214: &u16;
    let _215: &u16;
    let _216: &state::perp_market::PerpMarket;
    let mut _217: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _218: ();
    let mut _219: &str;
    let _220: &str;
    let mut _221: &std::string::String;
    let _222: &std::string::String;
    let _223: std::string::String;
    let mut _225: std::fmt::Arguments<'_>;
    let mut _226: &[&str];
    let mut _227: &[&str; 2];
    let _228: &[&str; 2];
    let _229: [&str; 2];
    let mut _230: &[core::fmt::rt::Argument<'_>];
    let mut _231: &[core::fmt::rt::Argument<'_>; 2];
    let _232: &[core::fmt::rt::Argument<'_>; 2];
    let _233: [core::fmt::rt::Argument<'_>; 2];
    let mut _234: core::fmt::rt::Argument<'_>;
    let mut _235: &i128;
    let _236: &i128;
    let _237: &state::perp_market::PerpMarket;
    let mut _238: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _239: core::fmt::rt::Argument<'_>;
    let mut _240: &i128;
    let _241: &i128;
    let mut _243: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _244: std::result::Result<i128, error::ErrorCode>;
    let mut _245: i128;
    let mut _246: i128;
    let mut _247: &state::perp_market::PerpMarket;
    let mut _248: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _249: isize;
    let mut _251: !;
    let mut _252: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _254: ();
    let mut _255: &str;
    let _256: &str;
    let mut _257: &std::string::String;
    let _258: &std::string::String;
    let _259: std::string::String;
    let mut _261: std::fmt::Arguments<'_>;
    let mut _262: &[&str];
    let mut _263: &[&str; 2];
    let _264: &[&str; 2];
    let _265: [&str; 2];
    let mut _266: &[core::fmt::rt::Argument<'_>];
    let mut _267: &[core::fmt::rt::Argument<'_>; 2];
    let _268: &[core::fmt::rt::Argument<'_>; 2];
    let _269: [core::fmt::rt::Argument<'_>; 2];
    let mut _270: core::fmt::rt::Argument<'_>;
    let mut _271: &i128;
    let _272: &i128;
    let _273: &state::perp_market::PerpMarket;
    let mut _274: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _275: core::fmt::rt::Argument<'_>;
    let mut _276: &i128;
    let _277: &i128;
    let _278: i128;
    let mut _279: i128;
    let mut _280: &state::perp_market::PerpMarket;
    let mut _281: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _282: i128;
    let _283: ();
    let mut _284: &str;
    let _285: &str;
    let mut _286: &std::string::String;
    let _287: &std::string::String;
    let _288: std::string::String;
    let mut _290: std::fmt::Arguments<'_>;
    let mut _291: &[&str];
    let mut _292: &[&str; 2];
    let _293: &[&str; 2];
    let _294: [&str; 2];
    let mut _295: &[core::fmt::rt::Argument<'_>];
    let mut _296: &[core::fmt::rt::Argument<'_>; 2];
    let _297: &[core::fmt::rt::Argument<'_>; 2];
    let _298: [core::fmt::rt::Argument<'_>; 2];
    let mut _299: core::fmt::rt::Argument<'_>;
    let mut _300: &i128;
    let _301: &i128;
    let _302: &state::perp_market::PerpMarket;
    let mut _303: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _304: core::fmt::rt::Argument<'_>;
    let mut _305: &i128;
    let _306: &i128;
    let _307: i128;
    let mut _308: i128;
    let mut _309: &state::perp_market::PerpMarket;
    let mut _310: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _311: i128;
    let mut _312: i128;
    let mut _313: i128;
    let mut _314: &state::perp_market::PerpMarket;
    let mut _315: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _316: i128;
    let mut _317: &mut state::perp_market::PerpMarket;
    let mut _318: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _319: i128;
    let mut _320: i128;
    let mut _321: &state::perp_market::PerpMarket;
    let mut _322: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _323: i128;
    let mut _324: &mut state::perp_market::PerpMarket;
    let mut _325: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _326: i128;
    let mut _327: &mut state::perp_market::PerpMarket;
    let mut _328: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _329: ();
    let mut _330: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _331: std::result::Result<(), error::ErrorCode>;
    let mut _332: &state::perp_market::PerpMarket;
    let _333: &state::perp_market::PerpMarket;
    let mut _334: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _335: isize;
    let mut _337: !;
    let mut _338: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _340: ();
    let mut _350: &mut instructions::admin::AdminUpdatePerpMarketAmmSummaryStats<'_>;
    let mut _351: &mut instructions::admin::AdminUpdatePerpMarketAmmSummaryStats<'_>;
    let mut _352: &mut instructions::admin::AdminUpdatePerpMarketAmmSummaryStats<'_>;
    let mut _353: &mut instructions::admin::AdminUpdatePerpMarketAmmSummaryStats<'_>;
    let mut _354: &mut instructions::admin::AdminUpdatePerpMarketAmmSummaryStats<'_>;
    let mut _355: &mut instructions::admin::AdminUpdatePerpMarketAmmSummaryStats<'_>;
    let mut _356: isize;
    let mut _357: isize;
    let mut _358: isize;
    let mut _359: isize;
    let mut _360: isize;
    let mut _361: isize;
    let mut _362: isize;
    let mut _363: isize;
    let mut _364: isize;
    let mut _365: isize;
    let mut _366: isize;
    let mut _367: isize;
    let mut _368: isize;
    let mut _369: isize;
    let mut _370: isize;
    let mut _371: isize;
    let mut _372: isize;
    let mut _373: isize;
    let mut _374: isize;
    let mut _375: isize;
    let mut _376: isize;
    let mut _377: isize;
    let mut _378: isize;
    let mut _379: isize;
    let mut _380: isize;
    scope 1 {
        debug residual => _9;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _12;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _21;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _24;
        scope 8 {
        }
    }
    scope 9 {
        debug perp_market => _25;
        let _37: &mut std::cell::Ref<'_, state::spot_market::SpotMarket>;
        let _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _48: std::cell::Ref<'_, state::spot_market::SpotMarket>;
        scope 14 {
            debug spot_market => _37;
            let _55: std::string::String;
            let _76: std::string::String;
            let _91: anchor_lang::prelude::Clock;
            let _95: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
            let _98: anchor_lang::prelude::Clock;
            let mut _348: &[&str; 1];
            let mut _349: &[&str; 1];
            scope 19 {
                debug res => _55;
            }
            scope 20 {
                debug res => _76;
            }
            scope 21 {
                debug clock => _91;
                let _99: &anchor_lang::prelude::AccountInfo<'_>;
                scope 26 {
                    debug price_oracle => _99;
                    let _100: i64;
                    let _111: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _114: state::oracle::OraclePriceData;
                    scope 27 {
                        debug oracle_price => _100;
                        let _180: i128;
                        let _193: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _196: i128;
                        let _336: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _339: ();
                        let mut _345: &std::option::Option<bool>;
                        scope 32 {
                            debug quote_asset_amount_with_unsettled_lp => _117;
                            let _117: i64;
                            let _124: std::string::String;
                            let mut _347: &[&str; 2];
                            scope 33 {
                                debug res => _124;
                            }
                        }
                        scope 34 {
                            debug net_unsettled_funding_pnl => _147;
                            let _147: i64;
                            let _154: std::string::String;
                            let mut _346: &[&str; 2];
                            scope 35 {
                                debug res => _154;
                            }
                        }
                        scope 36 {
                            debug new_total_fee_minus_distributions => _180;
                            let _203: std::string::String;
                            let _224: std::string::String;
                            let _242: i128;
                            let _250: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _253: i128;
                            let mut _343: &[&str; 2];
                            let mut _344: &[&str; 1];
                            scope 41 {
                                debug res => _203;
                            }
                            scope 42 {
                                debug res => _224;
                            }
                            scope 43 {
                                debug fee_difference => _242;
                                let _260: std::string::String;
                                let _289: std::string::String;
                                let mut _341: &[&str; 2];
                                let mut _342: &[&str; 2];
                                scope 48 {
                                    debug res => _260;
                                }
                                scope 49 {
                                    debug res => _289;
                                }
                            }
                            scope 44 {
                                debug residual => _250;
                                scope 45 {
                                }
                            }
                            scope 46 {
                                debug val => _253;
                                scope 47 {
                                }
                            }
                        }
                        scope 37 {
                            debug residual => _193;
                            scope 38 {
                            }
                        }
                        scope 39 {
                            debug val => _196;
                            scope 40 {
                            }
                        }
                        scope 50 {
                            debug residual => _336;
                            scope 51 {
                            }
                        }
                        scope 52 {
                            debug val => _339;
                            scope 53 {
                            }
                        }
                    }
                    scope 28 {
                        debug residual => _111;
                        scope 29 {
                        }
                    }
                    scope 30 {
                        debug val => _114;
                        scope 31 {
                        }
                    }
                }
            }
            scope 22 {
                debug residual => _95;
                scope 23 {
                }
            }
            scope 24 {
                debug val => _98;
                scope 25 {
                }
            }
        }
        scope 15 {
            debug residual => _45;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _48;
            scope 18 {
            }
        }
    }
    scope 10 {
        debug residual => _33;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _36;
        scope 13 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _350 = deref_copy (_1.1: &mut instructions::admin::AdminUpdatePerpMarketAmmSummaryStats<'_>);
        _7 = &((*_350).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _6 = &(*_7);
        _5 = constraints::perp_market_valid(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb158];
    }

    bb2: {
        StorageDead(_5);
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_4 as Continue).0: ());
        _3 = _12;
        StorageDead(_12);
        _356 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _351 = deref_copy (_1.1: &mut instructions::admin::AdminUpdatePerpMarketAmmSummaryStats<'_>);
        _17 = &((*_351).4: anchor_lang::prelude::AccountInfo<'_>);
        _16 = &(*_17);
        StorageLive(_18);
        StorageLive(_19);
        _352 = deref_copy (_1.1: &mut instructions::admin::AdminUpdatePerpMarketAmmSummaryStats<'_>);
        _19 = &((*_352).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _18 = &(*_19);
        _15 = constraints::valid_oracle_for_perp_market(move _16, move _18) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _11) -> [return: bb6, unwind: bb163];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _374 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb147;
    }

    bb7: {
        StorageDead(_18);
        StorageDead(_16);
        _14 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _15) -> [return: bb8, unwind: bb158];
    }

    bb8: {
        StorageDead(_15);
        _20 = discriminant(_14);
        switchInt(move _20) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_24);
        _24 = ((_14 as Continue).0: ());
        _13 = _24;
        StorageDead(_24);
        _358 = discriminant(_14);
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _353 = deref_copy (_1.1: &mut instructions::admin::AdminUpdatePerpMarketAmmSummaryStats<'_>);
        _30 = &((*_353).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _29 = anchor_lang::prelude::AccountLoader::<'_, PerpMarket>::load_mut(move _30) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_21);
        _21 = move ((_14 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_23);
        _23 = move _21;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _23) -> [return: bb11, unwind: bb162];
    }

    bb11: {
        StorageDead(_23);
        StorageDead(_21);
        _372 = discriminant(_14);
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb147;
    }

    bb12: {
        StorageDead(_30);
        StorageLive(_31);
        _31 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _28 = std::result::Result::<RefMut<'_, PerpMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _29, move _31) -> [return: bb13, unwind: bb158];
    }

    bb13: {
        StorageDead(_31);
        StorageDead(_29);
        _27 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _28) -> [return: bb14, unwind: bb158];
    }

    bb14: {
        StorageDead(_28);
        _32 = discriminant(_27);
        switchInt(move _32) -> [0: bb15, 1: bb16, otherwise: bb4];
    }

    bb15: {
        StorageLive(_36);
        _36 = move ((_27 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _26 = move _36;
        StorageDead(_36);
        _25 = &mut _26;
        _362 = discriminant(_27);
        StorageDead(_27);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _354 = deref_copy (_1.1: &mut instructions::admin::AdminUpdatePerpMarketAmmSummaryStats<'_>);
        _42 = &((*_354).3: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _41 = anchor_lang::prelude::AccountLoader::<'_, SpotMarket>::load(move _42) -> [return: bb18, unwind: bb157];
    }

    bb16: {
        StorageLive(_33);
        _33 = ((_27 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_35);
        _35 = _33;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _35) -> [return: bb17, unwind: bb161];
    }

    bb17: {
        StorageDead(_35);
        StorageDead(_33);
        _360 = discriminant(_27);
        StorageDead(_27);
        goto -> bb146;
    }

    bb18: {
        StorageDead(_42);
        StorageLive(_43);
        _43 = {closure@programs/drift/src/macros.rs:70:40: 70:43};
        _40 = std::result::Result::<Ref<'_, SpotMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:70:40: 70:43}>(move _41, move _43) -> [return: bb19, unwind: bb157];
    }

    bb19: {
        StorageDead(_43);
        StorageDead(_41);
        _39 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _40) -> [return: bb20, unwind: bb157];
    }

    bb20: {
        StorageDead(_40);
        _44 = discriminant(_39);
        switchInt(move _44) -> [0: bb21, 1: bb22, otherwise: bb4];
    }

    bb21: {
        StorageLive(_48);
        _48 = move ((_39 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _38 = move _48;
        StorageDead(_48);
        _37 = &mut _38;
        _366 = discriminant(_39);
        StorageDead(_39);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _349 = const _;
        _59 = &(*_349);
        _58 = &(*_59);
        _57 = move _58 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_58);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &(*_25);
        _68 = <RefMut<'_, PerpMarket> as Deref>::deref(move _69) -> [return: bb24, unwind: bb156];
    }

    bb22: {
        StorageLive(_45);
        _45 = ((_39 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_47);
        _47 = _45;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _47) -> [return: bb23, unwind: bb160];
    }

    bb23: {
        StorageDead(_47);
        StorageDead(_45);
        _364 = discriminant(_39);
        StorageDead(_39);
        goto -> bb145;
    }

    bb24: {
        StorageDead(_69);
        _67 = &((*_68).21: u16);
        _66 = &(*_67);
        _65 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _66) -> [return: bb25, unwind: bb156];
    }

    bb25: {
        StorageDead(_66);
        _64 = [move _65];
        StorageDead(_65);
        _63 = &_64;
        _62 = &(*_63);
        _61 = move _62 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_62);
        _56 = Arguments::<'_>::new_v1(move _57, move _61) -> [return: bb26, unwind: bb156];
    }

    bb26: {
        StorageDead(_61);
        StorageDead(_57);
        _55 = format(move _56) -> [return: bb27, unwind: bb156];
    }

    bb27: {
        StorageDead(_56);
        StorageDead(_68);
        StorageDead(_67);
        StorageDead(_64);
        StorageDead(_63);
        StorageDead(_59);
        _54 = move _55;
        StorageDead(_55);
        _53 = &_54;
        _52 = &(*_53);
        _51 = <String as Deref>::deref(move _52) -> [return: bb28, unwind: bb155];
    }

    bb28: {
        _50 = &(*_51);
        StorageDead(_52);
        _49 = solana_program::log::sol_log(move _50) -> [return: bb29, unwind: bb155];
    }

    bb29: {
        StorageDead(_50);
        drop(_54) -> [return: bb30, unwind: bb156];
    }

    bb30: {
        StorageDead(_54);
        StorageDead(_53);
        StorageDead(_51);
        StorageDead(_49);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _348 = const _;
        _80 = &(*_348);
        _79 = &(*_80);
        _78 = move _79 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_79);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        _90 = &(*_37);
        _89 = <Ref<'_, SpotMarket> as Deref>::deref(move _90) -> [return: bb31, unwind: bb156];
    }

    bb31: {
        StorageDead(_90);
        _88 = &((*_89).42: u16);
        _87 = &(*_88);
        _86 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _87) -> [return: bb32, unwind: bb156];
    }

    bb32: {
        StorageDead(_87);
        _85 = [move _86];
        StorageDead(_86);
        _84 = &_85;
        _83 = &(*_84);
        _82 = move _83 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_83);
        _77 = Arguments::<'_>::new_v1(move _78, move _82) -> [return: bb33, unwind: bb156];
    }

    bb33: {
        StorageDead(_82);
        StorageDead(_78);
        _76 = format(move _77) -> [return: bb34, unwind: bb156];
    }

    bb34: {
        StorageDead(_77);
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_85);
        StorageDead(_84);
        StorageDead(_80);
        _75 = move _76;
        StorageDead(_76);
        _74 = &_75;
        _73 = &(*_74);
        _72 = <String as Deref>::deref(move _73) -> [return: bb35, unwind: bb154];
    }

    bb35: {
        _71 = &(*_72);
        StorageDead(_73);
        _70 = solana_program::log::sol_log(move _71) -> [return: bb36, unwind: bb154];
    }

    bb36: {
        StorageDead(_71);
        drop(_75) -> [return: bb37, unwind: bb156];
    }

    bb37: {
        StorageDead(_75);
        StorageDead(_74);
        StorageDead(_72);
        StorageDead(_70);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _93 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb38, unwind: bb156];
    }

    bb38: {
        _92 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _93) -> [return: bb39, unwind: bb156];
    }

    bb39: {
        StorageDead(_93);
        _94 = discriminant(_92);
        switchInt(move _94) -> [0: bb40, 1: bb41, otherwise: bb4];
    }

    bb40: {
        StorageLive(_98);
        _98 = move ((_92 as Continue).0: anchor_lang::prelude::Clock);
        _91 = move _98;
        StorageDead(_98);
        _368 = discriminant(_92);
        StorageDead(_92);
        StorageLive(_99);
        _355 = deref_copy (_1.1: &mut instructions::admin::AdminUpdatePerpMarketAmmSummaryStats<'_>);
        _99 = &((*_355).4: anchor_lang::prelude::AccountInfo<'_>);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        _107 = &(*_25);
        _106 = <RefMut<'_, PerpMarket> as Deref>::deref(move _107) -> [return: bb43, unwind: bb156];
    }

    bb41: {
        StorageLive(_95);
        _95 = move ((_92 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_97);
        _97 = move _95;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _97) -> [return: bb42, unwind: bb159];
    }

    bb42: {
        StorageDead(_97);
        StorageDead(_95);
        _370 = discriminant(_92);
        StorageDead(_92);
        goto -> bb144;
    }

    bb43: {
        StorageDead(_107);
        _105 = &(((*_106).1: state::perp_market::AMM).72: state::oracle::OracleSource);
        _104 = &(*_105);
        StorageLive(_108);
        _108 = &(*_99);
        StorageLive(_109);
        _109 = (_91.0: u64);
        _103 = get_oracle_price(move _104, move _108, move _109) -> [return: bb44, unwind: bb156];
    }

    bb44: {
        StorageDead(_109);
        StorageDead(_108);
        StorageDead(_104);
        _102 = <std::result::Result<OraclePriceData, error::ErrorCode> as Try>::branch(move _103) -> [return: bb45, unwind: bb156];
    }

    bb45: {
        StorageDead(_103);
        _110 = discriminant(_102);
        switchInt(move _110) -> [0: bb46, 1: bb47, otherwise: bb4];
    }

    bb46: {
        StorageLive(_114);
        _114 = ((_102 as Continue).0: state::oracle::OraclePriceData);
        _101 = _114;
        StorageDead(_114);
        StorageLive(_100);
        _100 = (_101.0: i64);
        StorageDead(_106);
        StorageDead(_105);
        StorageDead(_102);
        StorageDead(_101);
        StorageLive(_115);
        _116 = discriminant((_2.0: std::option::Option<i64>));
        switchInt(move _116) -> [1: bb50, otherwise: bb49];
    }

    bb47: {
        StorageLive(_111);
        _111 = ((_102 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_113);
        _113 = _111;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _113) -> [return: bb48, unwind: bb156];
    }

    bb48: {
        StorageDead(_113);
        StorageDead(_111);
        StorageDead(_106);
        StorageDead(_105);
        StorageDead(_102);
        StorageDead(_101);
        goto -> bb143;
    }

    bb49: {
        _115 = const ();
        goto -> bb60;
    }

    bb50: {
        StorageLive(_117);
        _117 = (((_2.0: std::option::Option<i64>) as Some).0: i64);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        _347 = const _;
        _128 = &(*_347);
        _127 = &(*_128);
        _126 = move _127 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_127);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        _138 = &(*_25);
        _137 = <RefMut<'_, PerpMarket> as Deref>::deref(move _138) -> [return: bb51, unwind: bb156];
    }

    bb51: {
        StorageDead(_138);
        _136 = &(((*_137).1: state::perp_market::AMM).81: i64);
        _135 = &(*_136);
        _134 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _135) -> [return: bb52, unwind: bb156];
    }

    bb52: {
        StorageDead(_135);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        _141 = &_117;
        _140 = &(*_141);
        _139 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _140) -> [return: bb53, unwind: bb156];
    }

    bb53: {
        StorageDead(_140);
        _133 = [move _134, move _139];
        StorageDead(_139);
        StorageDead(_134);
        _132 = &_133;
        _131 = &(*_132);
        _130 = move _131 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_131);
        _125 = Arguments::<'_>::new_v1(move _126, move _130) -> [return: bb54, unwind: bb156];
    }

    bb54: {
        StorageDead(_130);
        StorageDead(_126);
        _124 = format(move _125) -> [return: bb55, unwind: bb156];
    }

    bb55: {
        StorageDead(_125);
        StorageDead(_141);
        StorageDead(_137);
        StorageDead(_136);
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_128);
        _123 = move _124;
        StorageDead(_124);
        _122 = &_123;
        _121 = &(*_122);
        _120 = <String as Deref>::deref(move _121) -> [return: bb56, unwind: bb153];
    }

    bb56: {
        _119 = &(*_120);
        StorageDead(_121);
        _118 = solana_program::log::sol_log(move _119) -> [return: bb57, unwind: bb153];
    }

    bb57: {
        StorageDead(_119);
        drop(_123) -> [return: bb58, unwind: bb156];
    }

    bb58: {
        StorageDead(_123);
        StorageDead(_122);
        StorageDead(_120);
        StorageDead(_118);
        StorageLive(_142);
        _142 = _117;
        StorageLive(_143);
        StorageLive(_144);
        _144 = &mut (*_25);
        _143 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _144) -> [return: bb59, unwind: bb156];
    }

    bb59: {
        StorageDead(_144);
        (((*_143).1: state::perp_market::AMM).81: i64) = move _142;
        StorageDead(_142);
        StorageDead(_143);
        _115 = const ();
        StorageDead(_117);
        goto -> bb60;
    }

    bb60: {
        StorageDead(_115);
        StorageLive(_145);
        _146 = discriminant((_2.1: std::option::Option<i64>));
        switchInt(move _146) -> [1: bb61, otherwise: bb71];
    }

    bb61: {
        StorageLive(_147);
        _147 = (((_2.1: std::option::Option<i64>) as Some).0: i64);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        _346 = const _;
        _158 = &(*_346);
        _157 = &(*_158);
        _156 = move _157 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_157);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        _168 = &(*_25);
        _167 = <RefMut<'_, PerpMarket> as Deref>::deref(move _168) -> [return: bb62, unwind: bb156];
    }

    bb62: {
        StorageDead(_168);
        _166 = &(((*_167).1: state::perp_market::AMM).80: i64);
        _165 = &(*_166);
        _164 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _165) -> [return: bb63, unwind: bb156];
    }

    bb63: {
        StorageDead(_165);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        _171 = &_147;
        _170 = &(*_171);
        _169 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _170) -> [return: bb64, unwind: bb156];
    }

    bb64: {
        StorageDead(_170);
        _163 = [move _164, move _169];
        StorageDead(_169);
        StorageDead(_164);
        _162 = &_163;
        _161 = &(*_162);
        _160 = move _161 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_161);
        _155 = Arguments::<'_>::new_v1(move _156, move _160) -> [return: bb65, unwind: bb156];
    }

    bb65: {
        StorageDead(_160);
        StorageDead(_156);
        _154 = format(move _155) -> [return: bb66, unwind: bb156];
    }

    bb66: {
        StorageDead(_155);
        StorageDead(_171);
        StorageDead(_167);
        StorageDead(_166);
        StorageDead(_163);
        StorageDead(_162);
        StorageDead(_158);
        _153 = move _154;
        StorageDead(_154);
        _152 = &_153;
        _151 = &(*_152);
        _150 = <String as Deref>::deref(move _151) -> [return: bb67, unwind: bb152];
    }

    bb67: {
        _149 = &(*_150);
        StorageDead(_151);
        _148 = solana_program::log::sol_log(move _149) -> [return: bb68, unwind: bb152];
    }

    bb68: {
        StorageDead(_149);
        drop(_153) -> [return: bb69, unwind: bb156];
    }

    bb69: {
        StorageDead(_153);
        StorageDead(_152);
        StorageDead(_150);
        StorageDead(_148);
        StorageLive(_172);
        _172 = _147;
        StorageLive(_173);
        StorageLive(_174);
        _174 = &mut (*_25);
        _173 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _174) -> [return: bb70, unwind: bb156];
    }

    bb70: {
        StorageDead(_174);
        (((*_173).1: state::perp_market::AMM).80: i64) = move _172;
        StorageDead(_172);
        StorageDead(_173);
        _145 = const ();
        StorageDead(_147);
        goto -> bb72;
    }

    bb71: {
        _145 = const ();
        goto -> bb72;
    }

    bb72: {
        StorageDead(_145);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        _177 = &(_2.2: std::option::Option<bool>);
        StorageLive(_178);
        _345 = const _;
        _178 = &(*_345);
        _176 = <Option<bool> as PartialEq>::eq(move _177, move _178) -> [return: bb73, unwind: bb156];
    }

    bb73: {
        switchInt(move _176) -> [0: bb131, otherwise: bb74];
    }

    bb74: {
        StorageDead(_178);
        StorageDead(_177);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        _185 = &(*_25);
        _184 = <RefMut<'_, PerpMarket> as Deref>::deref(move _185) -> [return: bb75, unwind: bb156];
    }

    bb75: {
        _183 = &(*_184);
        StorageDead(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        _188 = &(*_37);
        _187 = <Ref<'_, SpotMarket> as Deref>::deref(move _188) -> [return: bb76, unwind: bb156];
    }

    bb76: {
        _186 = &(*_187);
        StorageDead(_188);
        StorageLive(_189);
        _189 = _100;
        StorageLive(_190);
        StorageLive(_191);
        _191 = (_2.3: std::option::Option<bool>);
        _190 = Option::<bool>::unwrap_or(move _191, const false) -> [return: bb77, unwind: bb156];
    }

    bb77: {
        StorageDead(_191);
        _182 = calculate_perp_market_amm_summary_stats(move _183, move _186, move _189, move _190) -> [return: bb78, unwind: bb156];
    }

    bb78: {
        StorageDead(_190);
        StorageDead(_189);
        StorageDead(_186);
        StorageDead(_183);
        _181 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _182) -> [return: bb79, unwind: bb156];
    }

    bb79: {
        StorageDead(_182);
        _192 = discriminant(_181);
        switchInt(move _192) -> [0: bb80, 1: bb81, otherwise: bb4];
    }

    bb80: {
        StorageLive(_196);
        _196 = ((_181 as Continue).0: i128);
        _180 = _196;
        StorageDead(_196);
        StorageDead(_187);
        StorageDead(_184);
        StorageDead(_181);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        _344 = const _;
        _207 = &(*_344);
        _206 = &(*_207);
        _205 = move _206 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_206);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        _217 = &(*_25);
        _216 = <RefMut<'_, PerpMarket> as Deref>::deref(move _217) -> [return: bb83, unwind: bb156];
    }

    bb81: {
        StorageLive(_193);
        _193 = ((_181 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_195);
        _195 = _193;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _195) -> [return: bb82, unwind: bb156];
    }

    bb82: {
        StorageDead(_195);
        StorageDead(_193);
        StorageDead(_187);
        StorageDead(_184);
        StorageDead(_181);
        goto -> bb141;
    }

    bb83: {
        StorageDead(_217);
        _215 = &((*_216).21: u16);
        _214 = &(*_215);
        _213 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _214) -> [return: bb84, unwind: bb156];
    }

    bb84: {
        StorageDead(_214);
        _212 = [move _213];
        StorageDead(_213);
        _211 = &_212;
        _210 = &(*_211);
        _209 = move _210 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_210);
        _204 = Arguments::<'_>::new_v1(move _205, move _209) -> [return: bb85, unwind: bb156];
    }

    bb85: {
        StorageDead(_209);
        StorageDead(_205);
        _203 = format(move _204) -> [return: bb86, unwind: bb156];
    }

    bb86: {
        StorageDead(_204);
        StorageDead(_216);
        StorageDead(_215);
        StorageDead(_212);
        StorageDead(_211);
        StorageDead(_207);
        _202 = move _203;
        StorageDead(_203);
        _201 = &_202;
        _200 = &(*_201);
        _199 = <String as Deref>::deref(move _200) -> [return: bb87, unwind: bb151];
    }

    bb87: {
        _198 = &(*_199);
        StorageDead(_200);
        _197 = solana_program::log::sol_log(move _198) -> [return: bb88, unwind: bb151];
    }

    bb88: {
        StorageDead(_198);
        drop(_202) -> [return: bb89, unwind: bb156];
    }

    bb89: {
        StorageDead(_202);
        StorageDead(_201);
        StorageDead(_199);
        StorageDead(_197);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        _343 = const _;
        _228 = &(*_343);
        _227 = &(*_228);
        _226 = move _227 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_227);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        _238 = &(*_25);
        _237 = <RefMut<'_, PerpMarket> as Deref>::deref(move _238) -> [return: bb90, unwind: bb156];
    }

    bb90: {
        StorageDead(_238);
        _236 = &(((*_237).1: state::perp_market::AMM).31: i128);
        _235 = &(*_236);
        _234 = core::fmt::rt::Argument::<'_>::new_debug::<i128>(move _235) -> [return: bb91, unwind: bb156];
    }

    bb91: {
        StorageDead(_235);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        _241 = &_180;
        _240 = &(*_241);
        _239 = core::fmt::rt::Argument::<'_>::new_debug::<i128>(move _240) -> [return: bb92, unwind: bb156];
    }

    bb92: {
        StorageDead(_240);
        _233 = [move _234, move _239];
        StorageDead(_239);
        StorageDead(_234);
        _232 = &_233;
        _231 = &(*_232);
        _230 = move _231 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_231);
        _225 = Arguments::<'_>::new_v1(move _226, move _230) -> [return: bb93, unwind: bb156];
    }

    bb93: {
        StorageDead(_230);
        StorageDead(_226);
        _224 = format(move _225) -> [return: bb94, unwind: bb156];
    }

    bb94: {
        StorageDead(_225);
        StorageDead(_241);
        StorageDead(_237);
        StorageDead(_236);
        StorageDead(_233);
        StorageDead(_232);
        StorageDead(_228);
        _223 = move _224;
        StorageDead(_224);
        _222 = &_223;
        _221 = &(*_222);
        _220 = <String as Deref>::deref(move _221) -> [return: bb95, unwind: bb150];
    }

    bb95: {
        _219 = &(*_220);
        StorageDead(_221);
        _218 = solana_program::log::sol_log(move _219) -> [return: bb96, unwind: bb150];
    }

    bb96: {
        StorageDead(_219);
        drop(_223) -> [return: bb97, unwind: bb156];
    }

    bb97: {
        StorageDead(_223);
        StorageDead(_222);
        StorageDead(_220);
        StorageDead(_218);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        _245 = _180;
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        _248 = &(*_25);
        _247 = <RefMut<'_, PerpMarket> as Deref>::deref(move _248) -> [return: bb98, unwind: bb156];
    }

    bb98: {
        StorageDead(_248);
        _246 = (((*_247).1: state::perp_market::AMM).31: i128);
        _244 = <i128 as SafeMath>::safe_sub(move _245, move _246) -> [return: bb99, unwind: bb156];
    }

    bb99: {
        StorageDead(_246);
        StorageDead(_245);
        _243 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _244) -> [return: bb100, unwind: bb156];
    }

    bb100: {
        StorageDead(_244);
        _249 = discriminant(_243);
        switchInt(move _249) -> [0: bb101, 1: bb102, otherwise: bb4];
    }

    bb101: {
        StorageLive(_253);
        _253 = ((_243 as Continue).0: i128);
        _242 = _253;
        StorageDead(_253);
        StorageDead(_247);
        StorageDead(_243);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        _342 = const _;
        _264 = &(*_342);
        _263 = &(*_264);
        _262 = move _263 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_263);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        _274 = &(*_25);
        _273 = <RefMut<'_, PerpMarket> as Deref>::deref(move _274) -> [return: bb104, unwind: bb156];
    }

    bb102: {
        StorageLive(_250);
        _250 = ((_243 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_252);
        _252 = _250;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _252) -> [return: bb103, unwind: bb156];
    }

    bb103: {
        StorageDead(_252);
        StorageDead(_250);
        StorageDead(_247);
        StorageDead(_243);
        StorageDead(_242);
        goto -> bb141;
    }

    bb104: {
        StorageDead(_274);
        _272 = &(((*_273).1: state::perp_market::AMM).28: i128);
        _271 = &(*_272);
        _270 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _271) -> [return: bb105, unwind: bb156];
    }

    bb105: {
        StorageDead(_271);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        _281 = &(*_25);
        _280 = <RefMut<'_, PerpMarket> as Deref>::deref(move _281) -> [return: bb106, unwind: bb156];
    }

    bb106: {
        StorageDead(_281);
        _279 = (((*_280).1: state::perp_market::AMM).28: i128);
        StorageLive(_282);
        _282 = _242;
        _278 = core::num::<impl i128>::saturating_add(move _279, move _282) -> [return: bb107, unwind: bb156];
    }

    bb107: {
        StorageDead(_282);
        StorageDead(_279);
        _277 = &_278;
        _276 = &(*_277);
        _275 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _276) -> [return: bb108, unwind: bb156];
    }

    bb108: {
        StorageDead(_276);
        _269 = [move _270, move _275];
        StorageDead(_275);
        StorageDead(_270);
        _268 = &_269;
        _267 = &(*_268);
        _266 = move _267 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_267);
        _261 = Arguments::<'_>::new_v1(move _262, move _266) -> [return: bb109, unwind: bb156];
    }

    bb109: {
        StorageDead(_266);
        StorageDead(_262);
        _260 = format(move _261) -> [return: bb110, unwind: bb156];
    }

    bb110: {
        StorageDead(_261);
        StorageDead(_280);
        StorageDead(_278);
        StorageDead(_277);
        StorageDead(_273);
        StorageDead(_272);
        StorageDead(_269);
        StorageDead(_268);
        StorageDead(_264);
        _259 = move _260;
        StorageDead(_260);
        _258 = &_259;
        _257 = &(*_258);
        _256 = <String as Deref>::deref(move _257) -> [return: bb111, unwind: bb149];
    }

    bb111: {
        _255 = &(*_256);
        StorageDead(_257);
        _254 = solana_program::log::sol_log(move _255) -> [return: bb112, unwind: bb149];
    }

    bb112: {
        StorageDead(_255);
        drop(_259) -> [return: bb113, unwind: bb156];
    }

    bb113: {
        StorageDead(_259);
        StorageDead(_258);
        StorageDead(_256);
        StorageDead(_254);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        _341 = const _;
        _293 = &(*_341);
        _292 = &(*_293);
        _291 = move _292 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_292);
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        _303 = &(*_25);
        _302 = <RefMut<'_, PerpMarket> as Deref>::deref(move _303) -> [return: bb114, unwind: bb156];
    }

    bb114: {
        StorageDead(_303);
        _301 = &(((*_302).1: state::perp_market::AMM).29: i128);
        _300 = &(*_301);
        _299 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _300) -> [return: bb115, unwind: bb156];
    }

    bb115: {
        StorageDead(_300);
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        _310 = &(*_25);
        _309 = <RefMut<'_, PerpMarket> as Deref>::deref(move _310) -> [return: bb116, unwind: bb156];
    }

    bb116: {
        StorageDead(_310);
        _308 = (((*_309).1: state::perp_market::AMM).29: i128);
        StorageLive(_311);
        _311 = _242;
        _307 = core::num::<impl i128>::saturating_add(move _308, move _311) -> [return: bb117, unwind: bb156];
    }

    bb117: {
        StorageDead(_311);
        StorageDead(_308);
        _306 = &_307;
        _305 = &(*_306);
        _304 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _305) -> [return: bb118, unwind: bb156];
    }

    bb118: {
        StorageDead(_305);
        _298 = [move _299, move _304];
        StorageDead(_304);
        StorageDead(_299);
        _297 = &_298;
        _296 = &(*_297);
        _295 = move _296 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_296);
        _290 = Arguments::<'_>::new_v1(move _291, move _295) -> [return: bb119, unwind: bb156];
    }

    bb119: {
        StorageDead(_295);
        StorageDead(_291);
        _289 = format(move _290) -> [return: bb120, unwind: bb156];
    }

    bb120: {
        StorageDead(_290);
        StorageDead(_309);
        StorageDead(_307);
        StorageDead(_306);
        StorageDead(_302);
        StorageDead(_301);
        StorageDead(_298);
        StorageDead(_297);
        StorageDead(_293);
        _288 = move _289;
        StorageDead(_289);
        _287 = &_288;
        _286 = &(*_287);
        _285 = <String as Deref>::deref(move _286) -> [return: bb121, unwind: bb148];
    }

    bb121: {
        _284 = &(*_285);
        StorageDead(_286);
        _283 = solana_program::log::sol_log(move _284) -> [return: bb122, unwind: bb148];
    }

    bb122: {
        StorageDead(_284);
        drop(_288) -> [return: bb123, unwind: bb156];
    }

    bb123: {
        StorageDead(_288);
        StorageDead(_287);
        StorageDead(_285);
        StorageDead(_283);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        _315 = &(*_25);
        _314 = <RefMut<'_, PerpMarket> as Deref>::deref(move _315) -> [return: bb124, unwind: bb156];
    }

    bb124: {
        StorageDead(_315);
        _313 = (((*_314).1: state::perp_market::AMM).28: i128);
        StorageLive(_316);
        _316 = _242;
        _312 = core::num::<impl i128>::saturating_add(move _313, move _316) -> [return: bb125, unwind: bb156];
    }

    bb125: {
        StorageDead(_316);
        StorageDead(_313);
        StorageLive(_317);
        StorageLive(_318);
        _318 = &mut (*_25);
        _317 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _318) -> [return: bb126, unwind: bb156];
    }

    bb126: {
        StorageDead(_318);
        (((*_317).1: state::perp_market::AMM).28: i128) = move _312;
        StorageDead(_312);
        StorageDead(_317);
        StorageDead(_314);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        _322 = &(*_25);
        _321 = <RefMut<'_, PerpMarket> as Deref>::deref(move _322) -> [return: bb127, unwind: bb156];
    }

    bb127: {
        StorageDead(_322);
        _320 = (((*_321).1: state::perp_market::AMM).29: i128);
        StorageLive(_323);
        _323 = _242;
        _319 = core::num::<impl i128>::saturating_add(move _320, move _323) -> [return: bb128, unwind: bb156];
    }

    bb128: {
        StorageDead(_323);
        StorageDead(_320);
        StorageLive(_324);
        StorageLive(_325);
        _325 = &mut (*_25);
        _324 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _325) -> [return: bb129, unwind: bb156];
    }

    bb129: {
        StorageDead(_325);
        (((*_324).1: state::perp_market::AMM).29: i128) = move _319;
        StorageDead(_319);
        StorageDead(_324);
        StorageDead(_321);
        StorageLive(_326);
        _326 = _180;
        StorageLive(_327);
        StorageLive(_328);
        _328 = &mut (*_25);
        _327 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _328) -> [return: bb130, unwind: bb156];
    }

    bb130: {
        StorageDead(_328);
        (((*_327).1: state::perp_market::AMM).31: i128) = move _326;
        StorageDead(_326);
        StorageDead(_327);
        _175 = const ();
        StorageDead(_242);
        StorageDead(_180);
        goto -> bb132;
    }

    bb131: {
        StorageDead(_178);
        StorageDead(_177);
        _175 = const ();
        goto -> bb132;
    }

    bb132: {
        StorageDead(_176);
        StorageDead(_175);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        _334 = &(*_25);
        _333 = <RefMut<'_, PerpMarket> as Deref>::deref(move _334) -> [return: bb133, unwind: bb156];
    }

    bb133: {
        _332 = &(*_333);
        StorageDead(_334);
        _331 = validate_perp_market(move _332) -> [return: bb134, unwind: bb156];
    }

    bb134: {
        StorageDead(_332);
        _330 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _331) -> [return: bb135, unwind: bb156];
    }

    bb135: {
        StorageDead(_331);
        _335 = discriminant(_330);
        switchInt(move _335) -> [0: bb136, 1: bb137, otherwise: bb4];
    }

    bb136: {
        StorageLive(_339);
        _339 = ((_330 as Continue).0: ());
        _329 = _339;
        StorageDead(_339);
        StorageDead(_333);
        StorageDead(_330);
        StorageDead(_329);
        StorageLive(_340);
        _340 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _340);
        StorageDead(_340);
        StorageDead(_100);
        StorageDead(_99);
        StorageDead(_91);
        drop(_38) -> [return: bb139, unwind: bb157];
    }

    bb137: {
        StorageLive(_336);
        _336 = ((_330 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_338);
        _338 = _336;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _338) -> [return: bb138, unwind: bb156];
    }

    bb138: {
        StorageDead(_338);
        StorageDead(_336);
        StorageDead(_333);
        StorageDead(_330);
        StorageDead(_329);
        goto -> bb142;
    }

    bb139: {
        StorageDead(_38);
        StorageDead(_37);
        drop(_26) -> [return: bb140, unwind: bb158];
    }

    bb140: {
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb147;
    }

    bb141: {
        StorageDead(_180);
        StorageDead(_176);
        StorageDead(_175);
        goto -> bb142;
    }

    bb142: {
        StorageDead(_100);
        goto -> bb143;
    }

    bb143: {
        StorageDead(_99);
        goto -> bb144;
    }

    bb144: {
        StorageDead(_91);
        drop(_38) -> [return: bb145, unwind: bb157];
    }

    bb145: {
        StorageDead(_38);
        StorageDead(_37);
        drop(_26) -> [return: bb146, unwind: bb158];
    }

    bb146: {
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb147;
    }

    bb147: {
        return;
    }

    bb148 (cleanup): {
        drop(_288) -> [return: bb156, unwind terminate(cleanup)];
    }

    bb149 (cleanup): {
        drop(_259) -> [return: bb156, unwind terminate(cleanup)];
    }

    bb150 (cleanup): {
        drop(_223) -> [return: bb156, unwind terminate(cleanup)];
    }

    bb151 (cleanup): {
        drop(_202) -> [return: bb156, unwind terminate(cleanup)];
    }

    bb152 (cleanup): {
        drop(_153) -> [return: bb156, unwind terminate(cleanup)];
    }

    bb153 (cleanup): {
        drop(_123) -> [return: bb156, unwind terminate(cleanup)];
    }

    bb154 (cleanup): {
        drop(_75) -> [return: bb156, unwind terminate(cleanup)];
    }

    bb155 (cleanup): {
        drop(_54) -> [return: bb156, unwind terminate(cleanup)];
    }

    bb156 (cleanup): {
        drop(_38) -> [return: bb157, unwind terminate(cleanup)];
    }

    bb157 (cleanup): {
        drop(_26) -> [return: bb158, unwind terminate(cleanup)];
    }

    bb158 (cleanup): {
        resume;
    }

    bb159 (cleanup): {
        _376 = discriminant(_92);
        goto -> bb156;
    }

    bb160 (cleanup): {
        _377 = discriminant(_39);
        goto -> bb157;
    }

    bb161 (cleanup): {
        _378 = discriminant(_27);
        goto -> bb158;
    }

    bb162 (cleanup): {
        _379 = discriminant(_14);
        goto -> bb158;
    }

    bb163 (cleanup): {
        _380 = discriminant(_4);
        goto -> bb158;
    }
}
