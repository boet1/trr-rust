// MIR for `if_shares_to_vault_amount` after PreCodegen

fn if_shares_to_vault_amount(_1: u128, _2: u128, _3: u64) -> std::result::Result<u64, error::ErrorCode> {
    debug n_shares => _1;
    debug total_if_shares => _2;
    debug insurance_fund_vault_balance => _3;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let _4: ();
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _6: std::result::Result<(), error::ErrorCode>;
    let mut _7: bool;
    let mut _8: u128;
    let mut _9: u128;
    let mut _10: ();
    let _11: error::ErrorCode;
    let _12: ();
    let mut _13: &str;
    let _14: &str;
    let mut _15: &std::string::String;
    let _16: &std::string::String;
    let _17: std::string::String;
    let mut _19: std::fmt::Arguments<'_>;
    let mut _20: &[&str];
    let mut _21: &[&str; 2];
    let _22: &[&str; 2];
    let _23: [&str; 2];
    let mut _24: &[core::fmt::rt::Argument<'_>];
    let mut _25: &[core::fmt::rt::Argument<'_>; 1];
    let _26: &[core::fmt::rt::Argument<'_>; 1];
    let _27: [core::fmt::rt::Argument<'_>; 1];
    let mut _28: core::fmt::rt::Argument<'_>;
    let mut _29: &error::ErrorCode;
    let _30: &error::ErrorCode;
    let _31: ();
    let mut _32: &str;
    let _33: &str;
    let mut _34: &std::string::String;
    let _35: &std::string::String;
    let _36: std::string::String;
    let mut _38: std::fmt::Arguments<'_>;
    let mut _39: &[&str];
    let mut _40: &[&str; 3];
    let _41: &[&str; 3];
    let _42: [&str; 3];
    let mut _43: &[core::fmt::rt::Argument<'_>];
    let mut _44: &[core::fmt::rt::Argument<'_>; 2];
    let _45: &[core::fmt::rt::Argument<'_>; 2];
    let _46: [core::fmt::rt::Argument<'_>; 2];
    let mut _47: core::fmt::rt::Argument<'_>;
    let mut _48: &u128;
    let _49: &u128;
    let mut _50: core::fmt::rt::Argument<'_>;
    let mut _51: &u128;
    let _52: &u128;
    let mut _53: error::ErrorCode;
    let mut _54: isize;
    let _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _56: !;
    let mut _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _58: ();
    let _59: u64;
    let mut _60: bool;
    let mut _61: u128;
    let mut _62: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _63: std::result::Result<u64, error::ErrorCode>;
    let mut _64: u128;
    let mut _65: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _66: std::result::Result<u128, error::ErrorCode>;
    let mut _67: u128;
    let mut _68: u64;
    let mut _69: u128;
    let mut _70: u128;
    let mut _71: isize;
    let _72: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _73: !;
    let mut _74: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _75: u128;
    let mut _76: isize;
    let _77: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _78: !;
    let mut _79: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _80: u64;
    let mut _81: u64;
    scope 1 {
        debug error_code => _11;
        let _18: std::string::String;
        let _37: std::string::String;
        let mut _82: &[&str; 3];
        let mut _83: &[&str; 2];
        scope 2 {
            debug res => _18;
        }
        scope 3 {
            debug res => _37;
        }
    }
    scope 4 {
        debug residual => _55;
        scope 5 {
        }
    }
    scope 6 {
        debug val => _58;
        scope 7 {
        }
    }
    scope 8 {
        debug amount => _59;
    }
    scope 9 {
        debug residual => _72;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _75;
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _77;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _80;
        scope 16 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _1;
        StorageLive(_9);
        _9 = _2;
        _7 = Le(move _8, move _9);
        switchInt(move _7) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_10);
        _10 = ();
        _6 = std::result::Result::<(), error::ErrorCode>::Ok(move _10);
        StorageDead(_10);
        goto -> bb16;
    }

    bb2: {
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_11);
        _11 = error::ErrorCode::InvalidIFSharesDetected;
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _83 = const _;
        _22 = &(*_83);
        _21 = &(*_22);
        _20 = move _21 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_21);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = &_11;
        _29 = &(*_30);
        _28 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _29) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_29);
        _27 = [move _28];
        StorageDead(_28);
        _26 = &_27;
        _25 = &(*_26);
        _24 = move _25 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_25);
        _19 = Arguments::<'_>::new_v1(move _20, move _24) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_24);
        StorageDead(_20);
        _18 = format(move _19) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_19);
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_22);
        _17 = move _18;
        StorageDead(_18);
        _16 = &_17;
        _15 = &(*_16);
        _14 = <String as Deref>::deref(move _15) -> [return: bb6, unwind: bb38];
    }

    bb6: {
        _13 = &(*_14);
        StorageDead(_15);
        _12 = solana_program::log::sol_log(move _13) -> [return: bb7, unwind: bb38];
    }

    bb7: {
        StorageDead(_13);
        drop(_17) -> [return: bb8, unwind: bb39];
    }

    bb8: {
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_12);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _82 = const _;
        _41 = &(*_82);
        _40 = &(*_41);
        _39 = move _40 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_40);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = &_1;
        _48 = &(*_49);
        _47 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _48) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_48);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = &_2;
        _51 = &(*_52);
        _50 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _51) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_51);
        _46 = [move _47, move _50];
        StorageDead(_50);
        StorageDead(_47);
        _45 = &_46;
        _44 = &(*_45);
        _43 = move _44 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_44);
        _38 = Arguments::<'_>::new_v1(move _39, move _43) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_43);
        StorageDead(_39);
        _37 = format(move _38) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_38);
        StorageDead(_52);
        StorageDead(_49);
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_41);
        _36 = move _37;
        StorageDead(_37);
        _35 = &_36;
        _34 = &(*_35);
        _33 = <String as Deref>::deref(move _34) -> [return: bb13, unwind: bb37];
    }

    bb13: {
        _32 = &(*_33);
        StorageDead(_34);
        _31 = solana_program::log::sol_log(move _32) -> [return: bb14, unwind: bb37];
    }

    bb14: {
        StorageDead(_32);
        drop(_36) -> [return: bb15, unwind: bb39];
    }

    bb15: {
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_31);
        StorageLive(_53);
        _53 = _11;
        _6 = std::result::Result::<(), error::ErrorCode>::Err(move _53);
        StorageDead(_53);
        StorageDead(_11);
        goto -> bb16;
    }

    bb16: {
        StorageDead(_7);
        _5 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _6) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_6);
        _54 = discriminant(_5);
        switchInt(move _54) -> [0: bb18, 1: bb20, otherwise: bb19];
    }

    bb18: {
        StorageLive(_58);
        _58 = ((_5 as Continue).0: ());
        _4 = _58;
        StorageDead(_58);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = _2;
        _60 = Gt(move _61, const 0_u128);
        switchInt(move _60) -> [0: bb23, otherwise: bb22];
    }

    bb19: {
        unreachable;
    }

    bb20: {
        StorageLive(_55);
        _55 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_57);
        _57 = _55;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _57) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb36;
    }

    bb22: {
        StorageDead(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = _3;
        _67 = move _68 as u128 (IntToInt);
        StorageDead(_68);
        StorageLive(_69);
        _69 = _1;
        StorageLive(_70);
        _70 = _2;
        _66 = get_proportion_u128(move _67, move _69, move _70) -> [return: bb24, unwind continue];
    }

    bb23: {
        StorageDead(_61);
        _59 = const 0_u64;
        goto -> bb34;
    }

    bb24: {
        StorageDead(_70);
        StorageDead(_69);
        StorageDead(_67);
        _65 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _66) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_66);
        _71 = discriminant(_65);
        switchInt(move _71) -> [0: bb26, 1: bb27, otherwise: bb19];
    }

    bb26: {
        StorageLive(_75);
        _75 = ((_65 as Continue).0: u128);
        _64 = _75;
        StorageDead(_75);
        _63 = <u128 as Cast>::cast::<u64>(move _64) -> [return: bb29, unwind continue];
    }

    bb27: {
        StorageLive(_72);
        _72 = ((_65 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_74);
        _74 = _72;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _74) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_74);
        StorageDead(_72);
        StorageDead(_64);
        StorageDead(_63);
        goto -> bb35;
    }

    bb29: {
        StorageDead(_64);
        _62 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _63) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_63);
        _76 = discriminant(_62);
        switchInt(move _76) -> [0: bb31, 1: bb32, otherwise: bb19];
    }

    bb31: {
        StorageLive(_80);
        _80 = ((_62 as Continue).0: u64);
        _59 = _80;
        StorageDead(_80);
        StorageDead(_65);
        StorageDead(_62);
        goto -> bb34;
    }

    bb32: {
        StorageLive(_77);
        _77 = ((_62 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_79);
        _79 = _77;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _79) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_79);
        StorageDead(_77);
        goto -> bb35;
    }

    bb34: {
        StorageDead(_60);
        StorageLive(_81);
        _81 = _59;
        _0 = std::result::Result::<u64, error::ErrorCode>::Ok(move _81);
        StorageDead(_81);
        StorageDead(_59);
        goto -> bb36;
    }

    bb35: {
        StorageDead(_65);
        StorageDead(_62);
        StorageDead(_60);
        StorageDead(_59);
        goto -> bb36;
    }

    bb36: {
        return;
    }

    bb37 (cleanup): {
        drop(_36) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_17) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        resume;
    }
}
