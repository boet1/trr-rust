// MIR for `fulfillment_params::serum::<impl at programs/drift/src/state/fulfillment_params/serum.rs:466:1: 466:70>::validate_vault_amounts` before PreCodegen

fn fulfillment_params::serum::<impl at programs/drift/src/state/fulfillment_params/serum.rs:466:1: 466:70>::validate_vault_amounts(_1: &SerumFulfillmentParams<'_, '_>, _2: &Ref<'_, SpotMarket>, _3: &Ref<'_, SpotMarket>) -> std::result::Result<(), error::ErrorCode> {
    debug self => _1;
    debug base_market => _2;
    debug quote_market => _3;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _4: i64;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _6: std::result::Result<i64, error::ErrorCode>;
    let mut _7: &state::spot_market::SpotMarket;
    let _8: &state::spot_market::SpotMarket;
    let mut _9: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _10: u64;
    let mut _11: &anchor_spl::token::spl_token::state::Account;
    let mut _12: &anchor_spl::token::TokenAccount;
    let _13: &anchor_spl::token::TokenAccount;
    let mut _14: &anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _15: isize;
    let _16: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _19: i64;
    let _20: i64;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _22: std::result::Result<i64, error::ErrorCode>;
    let mut _23: &state::spot_market::SpotMarket;
    let _24: &state::spot_market::SpotMarket;
    let mut _25: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _26: u64;
    let mut _27: &anchor_spl::token::spl_token::state::Account;
    let mut _28: &anchor_spl::token::TokenAccount;
    let _29: &anchor_spl::token::TokenAccount;
    let mut _30: &anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _31: isize;
    let _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _35: i64;
    let mut _36: ();
    let mut _37: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _38: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _39: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _40: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    scope 1 {
        debug residual => _16;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _19;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _32;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _35;
        scope 8 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &(*_2);
        _8 = <Ref<'_, SpotMarket> as Deref>::deref(move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = &(*_8);
        StorageDead(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _37 = deref_copy ((*_1).9: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>);
        _39 = (((_37.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>);
        _14 = &(*_39);
        _13 = <anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount> as Deref>::deref(move _14) -> [return: bb2, unwind continue];
    }

    bb2: {
        _12 = &(*_13);
        _11 = <anchor_spl::token::TokenAccount as Deref>::deref(move _12) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_14);
        StorageDead(_12);
        _10 = ((*_11).2: u64);
        _6 = validate_spot_market_vault_amount(move _7, move _10) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_10);
        StorageDead(_7);
        _5 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _6) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_6);
        _15 = discriminant(_5);
        switchInt(move _15) -> [0: bb6, 1: bb8, otherwise: bb7];
    }

    bb6: {
        StorageLive(_19);
        _19 = ((_5 as Continue).0: i64);
        _4 = _19;
        StorageDead(_19);
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &(*_3);
        _24 = <Ref<'_, SpotMarket> as Deref>::deref(move _25) -> [return: bb10, unwind continue];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        StorageLive(_16);
        _16 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_18);
        _18 = _16;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _18) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb18;
    }

    bb10: {
        _23 = &(*_24);
        StorageDead(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _38 = deref_copy ((*_1).10: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>);
        _40 = (((_38.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>);
        _30 = &(*_40);
        _29 = <anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount> as Deref>::deref(move _30) -> [return: bb11, unwind continue];
    }

    bb11: {
        _28 = &(*_29);
        _27 = <anchor_spl::token::TokenAccount as Deref>::deref(move _28) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_30);
        StorageDead(_28);
        _26 = ((*_27).2: u64);
        _22 = validate_spot_market_vault_amount(move _23, move _26) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_26);
        StorageDead(_23);
        _21 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _22) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_22);
        _31 = discriminant(_21);
        switchInt(move _31) -> [0: bb15, 1: bb16, otherwise: bb7];
    }

    bb15: {
        StorageLive(_35);
        _35 = ((_21 as Continue).0: i64);
        _20 = _35;
        StorageDead(_35);
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_24);
        StorageDead(_21);
        StorageDead(_20);
        StorageLive(_36);
        _36 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _36);
        StorageDead(_36);
        goto -> bb18;
    }

    bb16: {
        StorageLive(_32);
        _32 = ((_21 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_34);
        _34 = _32;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _34) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_34);
        StorageDead(_32);
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_24);
        StorageDead(_21);
        StorageDead(_20);
        goto -> bb18;
    }

    bb18: {
        return;
    }
}
