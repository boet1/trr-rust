// MIR for `admin::handle_update_perp_market_imf_factor` after PreCodegen

fn admin::handle_update_perp_market_imf_factor(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::AdminUpdatePerpMarket<'_>>, _2: u32, _3: u32) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug imf_factor => _2;
    debug unrealized_pnl_imf_factor => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: ();
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _6: std::result::Result<(), anchor_lang::error::Error>;
    let mut _7: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let _8: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _13: ();
    let _14: ();
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _16: std::result::Result<(), error::ErrorCode>;
    let mut _17: bool;
    let mut _18: u32;
    let mut _19: ();
    let _20: error::ErrorCode;
    let _21: ();
    let mut _22: &str;
    let _23: &str;
    let mut _24: &std::string::String;
    let _25: &std::string::String;
    let _26: std::string::String;
    let mut _28: std::fmt::Arguments<'_>;
    let mut _29: &[&str];
    let mut _30: &[&str; 2];
    let _31: &[&str; 2];
    let _32: [&str; 2];
    let mut _33: &[core::fmt::rt::Argument<'_>];
    let mut _34: &[core::fmt::rt::Argument<'_>; 1];
    let _35: &[core::fmt::rt::Argument<'_>; 1];
    let _36: [core::fmt::rt::Argument<'_>; 1];
    let mut _37: core::fmt::rt::Argument<'_>;
    let mut _38: &error::ErrorCode;
    let _39: &error::ErrorCode;
    let _40: ();
    let mut _41: &str;
    let _42: &str;
    let mut _43: &std::string::String;
    let _44: &std::string::String;
    let _45: std::string::String;
    let mut _47: std::fmt::Arguments<'_>;
    let mut _48: &[&str];
    let mut _49: &[&str; 1];
    let _50: &[&str; 1];
    let _51: [&str; 1];
    let mut _52: error::ErrorCode;
    let mut _53: isize;
    let _54: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _55: !;
    let mut _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _57: ();
    let _58: ();
    let mut _59: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _60: std::result::Result<(), error::ErrorCode>;
    let mut _61: bool;
    let mut _62: u32;
    let mut _63: ();
    let _64: error::ErrorCode;
    let _65: ();
    let mut _66: &str;
    let _67: &str;
    let mut _68: &std::string::String;
    let _69: &std::string::String;
    let _70: std::string::String;
    let mut _72: std::fmt::Arguments<'_>;
    let mut _73: &[&str];
    let mut _74: &[&str; 2];
    let _75: &[&str; 2];
    let _76: [&str; 2];
    let mut _77: &[core::fmt::rt::Argument<'_>];
    let mut _78: &[core::fmt::rt::Argument<'_>; 1];
    let _79: &[core::fmt::rt::Argument<'_>; 1];
    let _80: [core::fmt::rt::Argument<'_>; 1];
    let mut _81: core::fmt::rt::Argument<'_>;
    let mut _82: &error::ErrorCode;
    let _83: &error::ErrorCode;
    let _84: ();
    let mut _85: &str;
    let _86: &str;
    let mut _87: &std::string::String;
    let _88: &std::string::String;
    let _89: std::string::String;
    let mut _91: std::fmt::Arguments<'_>;
    let mut _92: &[&str];
    let mut _93: &[&str; 1];
    let _94: &[&str; 1];
    let _95: [&str; 1];
    let mut _96: error::ErrorCode;
    let mut _97: isize;
    let _98: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _99: !;
    let mut _100: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _101: ();
    let _102: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _103: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _104: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _105: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _106: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _107: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _108: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _109: isize;
    let _110: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _111: !;
    let mut _112: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _113: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _114: ();
    let mut _115: &str;
    let _116: &str;
    let mut _117: &std::string::String;
    let _118: &std::string::String;
    let _119: std::string::String;
    let mut _121: std::fmt::Arguments<'_>;
    let mut _122: &[&str];
    let mut _123: &[&str; 1];
    let _124: &[&str; 1];
    let _125: [&str; 1];
    let mut _126: &[core::fmt::rt::Argument<'_>];
    let mut _127: &[core::fmt::rt::Argument<'_>; 1];
    let _128: &[core::fmt::rt::Argument<'_>; 1];
    let _129: [core::fmt::rt::Argument<'_>; 1];
    let mut _130: core::fmt::rt::Argument<'_>;
    let mut _131: &u16;
    let _132: &u16;
    let _133: &state::perp_market::PerpMarket;
    let mut _134: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _135: ();
    let mut _136: &str;
    let _137: &str;
    let mut _138: &std::string::String;
    let _139: &std::string::String;
    let _140: std::string::String;
    let mut _142: std::fmt::Arguments<'_>;
    let mut _143: &[&str];
    let mut _144: &[&str; 2];
    let _145: &[&str; 2];
    let _146: [&str; 2];
    let mut _147: &[core::fmt::rt::Argument<'_>];
    let mut _148: &[core::fmt::rt::Argument<'_>; 2];
    let _149: &[core::fmt::rt::Argument<'_>; 2];
    let _150: [core::fmt::rt::Argument<'_>; 2];
    let mut _151: core::fmt::rt::Argument<'_>;
    let mut _152: &u32;
    let _153: &u32;
    let _154: &state::perp_market::PerpMarket;
    let mut _155: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _156: core::fmt::rt::Argument<'_>;
    let mut _157: &u32;
    let _158: &u32;
    let _159: ();
    let mut _160: &str;
    let _161: &str;
    let mut _162: &std::string::String;
    let _163: &std::string::String;
    let _164: std::string::String;
    let mut _166: std::fmt::Arguments<'_>;
    let mut _167: &[&str];
    let mut _168: &[&str; 2];
    let _169: &[&str; 2];
    let _170: [&str; 2];
    let mut _171: &[core::fmt::rt::Argument<'_>];
    let mut _172: &[core::fmt::rt::Argument<'_>; 2];
    let _173: &[core::fmt::rt::Argument<'_>; 2];
    let _174: [core::fmt::rt::Argument<'_>; 2];
    let mut _175: core::fmt::rt::Argument<'_>;
    let mut _176: &u32;
    let _177: &u32;
    let _178: &state::perp_market::PerpMarket;
    let mut _179: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _180: core::fmt::rt::Argument<'_>;
    let mut _181: &u32;
    let _182: &u32;
    let mut _183: u32;
    let mut _184: &mut state::perp_market::PerpMarket;
    let mut _185: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _186: u32;
    let mut _187: &mut state::perp_market::PerpMarket;
    let mut _188: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _189: ();
    let mut _197: &mut instructions::admin::AdminUpdatePerpMarket<'_>;
    let mut _198: &mut instructions::admin::AdminUpdatePerpMarket<'_>;
    let mut _199: isize;
    let mut _200: isize;
    let mut _201: isize;
    let mut _202: isize;
    let mut _203: isize;
    let mut _204: isize;
    let mut _205: isize;
    let mut _206: isize;
    let mut _207: isize;
    let mut _208: isize;
    scope 1 {
        debug residual => _10;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _13;
        scope 4 {
        }
    }
    scope 5 {
        debug error_code => _20;
        let _27: std::string::String;
        let _46: std::string::String;
        let mut _195: &[&str; 1];
        let mut _196: &[&str; 2];
        scope 6 {
            debug res => _27;
        }
        scope 7 {
            debug res => _46;
        }
    }
    scope 8 {
        debug residual => _54;
        scope 9 {
        }
    }
    scope 10 {
        debug val => _57;
        scope 11 {
        }
    }
    scope 12 {
        debug error_code => _64;
        let _71: std::string::String;
        let _90: std::string::String;
        let mut _193: &[&str; 1];
        let mut _194: &[&str; 2];
        scope 13 {
            debug res => _71;
        }
        scope 14 {
            debug res => _90;
        }
    }
    scope 15 {
        debug residual => _98;
        scope 16 {
        }
    }
    scope 17 {
        debug val => _101;
        scope 18 {
        }
    }
    scope 19 {
        debug perp_market => _102;
        let _120: std::string::String;
        let _141: std::string::String;
        let _165: std::string::String;
        let mut _190: &[&str; 2];
        let mut _191: &[&str; 2];
        let mut _192: &[&str; 1];
        scope 24 {
            debug res => _120;
        }
        scope 25 {
            debug res => _141;
        }
        scope 26 {
            debug res => _165;
        }
    }
    scope 20 {
        debug residual => _110;
        scope 21 {
        }
    }
    scope 22 {
        debug val => _113;
        scope 23 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _197 = deref_copy (_1.1: &mut instructions::admin::AdminUpdatePerpMarket<'_>);
        _8 = &((*_197).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _7 = &(*_8);
        _6 = constraints::perp_market_valid(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _6) -> [return: bb2, unwind: bb84];
    }

    bb2: {
        StorageDead(_6);
        _9 = discriminant(_5);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_5 as Continue).0: ());
        _4 = _13;
        StorageDead(_13);
        _199 = discriminant(_5);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = _2;
        _17 = Le(move _18, const _);
        switchInt(move _17) -> [0: bb8, otherwise: bb7];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_12);
        _12 = move _10;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _12) -> [return: bb6, unwind: bb86];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        _205 = discriminant(_5);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb75;
    }

    bb7: {
        StorageDead(_18);
        StorageLive(_19);
        _19 = ();
        _16 = std::result::Result::<(), error::ErrorCode>::Ok(move _19);
        StorageDead(_19);
        goto -> bb20;
    }

    bb8: {
        StorageDead(_18);
        StorageLive(_20);
        _20 = error::ErrorCode::DefaultError;
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _196 = const _;
        _31 = &(*_196);
        _30 = &(*_31);
        _29 = move _30 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_30);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &_20;
        _38 = &(*_39);
        _37 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _38) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_38);
        _36 = [move _37];
        StorageDead(_37);
        _35 = &_36;
        _34 = &(*_35);
        _33 = move _34 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_34);
        _28 = Arguments::<'_>::new_v1(move _29, move _33) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_33);
        StorageDead(_29);
        _27 = format(move _28) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_28);
        StorageDead(_39);
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_31);
        _26 = move _27;
        StorageDead(_27);
        _25 = &_26;
        _24 = &(*_25);
        _23 = <String as Deref>::deref(move _24) -> [return: bb12, unwind: bb83];
    }

    bb12: {
        _22 = &(*_23);
        StorageDead(_24);
        _21 = solana_program::log::sol_log(move _22) -> [return: bb13, unwind: bb83];
    }

    bb13: {
        StorageDead(_22);
        drop(_26) -> [return: bb14, unwind: bb84];
    }

    bb14: {
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_21);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _195 = const _;
        _50 = &(*_195);
        _49 = &(*_50);
        _48 = move _49 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_49);
        _47 = Arguments::<'_>::new_const(move _48) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_48);
        _46 = format(move _47) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_47);
        StorageDead(_50);
        _45 = move _46;
        StorageDead(_46);
        _44 = &_45;
        _43 = &(*_44);
        _42 = <String as Deref>::deref(move _43) -> [return: bb17, unwind: bb82];
    }

    bb17: {
        _41 = &(*_42);
        StorageDead(_43);
        _40 = solana_program::log::sol_log(move _41) -> [return: bb18, unwind: bb82];
    }

    bb18: {
        StorageDead(_41);
        drop(_45) -> [return: bb19, unwind: bb84];
    }

    bb19: {
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_42);
        StorageDead(_40);
        StorageLive(_52);
        _52 = _20;
        _16 = std::result::Result::<(), error::ErrorCode>::Err(move _52);
        StorageDead(_52);
        StorageDead(_20);
        goto -> bb20;
    }

    bb20: {
        StorageDead(_17);
        _15 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _16) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_16);
        _53 = discriminant(_15);
        switchInt(move _53) -> [0: bb22, 1: bb23, otherwise: bb4];
    }

    bb22: {
        StorageLive(_57);
        _57 = ((_15 as Continue).0: ());
        _14 = _57;
        StorageDead(_57);
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = _3;
        _61 = Le(move _62, const _);
        switchInt(move _61) -> [0: bb26, otherwise: bb25];
    }

    bb23: {
        StorageLive(_54);
        _54 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_56);
        _56 = _54;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _56) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_56);
        StorageDead(_54);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb75;
    }

    bb25: {
        StorageDead(_62);
        StorageLive(_63);
        _63 = ();
        _60 = std::result::Result::<(), error::ErrorCode>::Ok(move _63);
        StorageDead(_63);
        goto -> bb38;
    }

    bb26: {
        StorageDead(_62);
        StorageLive(_64);
        _64 = error::ErrorCode::DefaultError;
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _194 = const _;
        _75 = &(*_194);
        _74 = &(*_75);
        _73 = move _74 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_74);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _83 = &_64;
        _82 = &(*_83);
        _81 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _82) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_82);
        _80 = [move _81];
        StorageDead(_81);
        _79 = &_80;
        _78 = &(*_79);
        _77 = move _78 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_78);
        _72 = Arguments::<'_>::new_v1(move _73, move _77) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_77);
        StorageDead(_73);
        _71 = format(move _72) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_72);
        StorageDead(_83);
        StorageDead(_80);
        StorageDead(_79);
        StorageDead(_75);
        _70 = move _71;
        StorageDead(_71);
        _69 = &_70;
        _68 = &(*_69);
        _67 = <String as Deref>::deref(move _68) -> [return: bb30, unwind: bb81];
    }

    bb30: {
        _66 = &(*_67);
        StorageDead(_68);
        _65 = solana_program::log::sol_log(move _66) -> [return: bb31, unwind: bb81];
    }

    bb31: {
        StorageDead(_66);
        drop(_70) -> [return: bb32, unwind: bb84];
    }

    bb32: {
        StorageDead(_70);
        StorageDead(_69);
        StorageDead(_67);
        StorageDead(_65);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _193 = const _;
        _94 = &(*_193);
        _93 = &(*_94);
        _92 = move _93 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_93);
        _91 = Arguments::<'_>::new_const(move _92) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_92);
        _90 = format(move _91) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_91);
        StorageDead(_94);
        _89 = move _90;
        StorageDead(_90);
        _88 = &_89;
        _87 = &(*_88);
        _86 = <String as Deref>::deref(move _87) -> [return: bb35, unwind: bb80];
    }

    bb35: {
        _85 = &(*_86);
        StorageDead(_87);
        _84 = solana_program::log::sol_log(move _85) -> [return: bb36, unwind: bb80];
    }

    bb36: {
        StorageDead(_85);
        drop(_89) -> [return: bb37, unwind: bb84];
    }

    bb37: {
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_86);
        StorageDead(_84);
        StorageLive(_96);
        _96 = _64;
        _60 = std::result::Result::<(), error::ErrorCode>::Err(move _96);
        StorageDead(_96);
        StorageDead(_64);
        goto -> bb38;
    }

    bb38: {
        StorageDead(_61);
        _59 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _60) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_60);
        _97 = discriminant(_59);
        switchInt(move _97) -> [0: bb40, 1: bb41, otherwise: bb4];
    }

    bb40: {
        StorageLive(_101);
        _101 = ((_59 as Continue).0: ());
        _58 = _101;
        StorageDead(_101);
        StorageDead(_59);
        StorageDead(_58);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        _198 = deref_copy (_1.1: &mut instructions::admin::AdminUpdatePerpMarket<'_>);
        _107 = &((*_198).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _106 = anchor_lang::prelude::AccountLoader::<'_, PerpMarket>::load_mut(move _107) -> [return: bb43, unwind continue];
    }

    bb41: {
        StorageLive(_98);
        _98 = ((_59 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_100);
        _100 = _98;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _100) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_100);
        StorageDead(_98);
        StorageDead(_59);
        StorageDead(_58);
        goto -> bb75;
    }

    bb43: {
        StorageDead(_107);
        StorageLive(_108);
        _108 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _105 = std::result::Result::<RefMut<'_, PerpMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _106, move _108) -> [return: bb44, unwind: bb84];
    }

    bb44: {
        StorageDead(_108);
        StorageDead(_106);
        _104 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _105) -> [return: bb45, unwind: bb84];
    }

    bb45: {
        StorageDead(_105);
        _109 = discriminant(_104);
        switchInt(move _109) -> [0: bb46, 1: bb47, otherwise: bb4];
    }

    bb46: {
        StorageLive(_113);
        _113 = move ((_104 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _103 = move _113;
        StorageDead(_113);
        _102 = &mut _103;
        _203 = discriminant(_104);
        StorageDead(_104);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        _192 = const _;
        _124 = &(*_192);
        _123 = &(*_124);
        _122 = move _123 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_123);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        _134 = &(*_102);
        _133 = <RefMut<'_, PerpMarket> as Deref>::deref(move _134) -> [return: bb49, unwind: bb79];
    }

    bb47: {
        StorageLive(_110);
        _110 = ((_104 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_112);
        _112 = _110;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _112) -> [return: bb48, unwind: bb85];
    }

    bb48: {
        StorageDead(_112);
        StorageDead(_110);
        _201 = discriminant(_104);
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_102);
        goto -> bb75;
    }

    bb49: {
        StorageDead(_134);
        _132 = &((*_133).21: u16);
        _131 = &(*_132);
        _130 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _131) -> [return: bb50, unwind: bb79];
    }

    bb50: {
        StorageDead(_131);
        _129 = [move _130];
        StorageDead(_130);
        _128 = &_129;
        _127 = &(*_128);
        _126 = move _127 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_127);
        _121 = Arguments::<'_>::new_v1(move _122, move _126) -> [return: bb51, unwind: bb79];
    }

    bb51: {
        StorageDead(_126);
        StorageDead(_122);
        _120 = format(move _121) -> [return: bb52, unwind: bb79];
    }

    bb52: {
        StorageDead(_121);
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_129);
        StorageDead(_128);
        StorageDead(_124);
        _119 = move _120;
        StorageDead(_120);
        _118 = &_119;
        _117 = &(*_118);
        _116 = <String as Deref>::deref(move _117) -> [return: bb53, unwind: bb78];
    }

    bb53: {
        _115 = &(*_116);
        StorageDead(_117);
        _114 = solana_program::log::sol_log(move _115) -> [return: bb54, unwind: bb78];
    }

    bb54: {
        StorageDead(_115);
        drop(_119) -> [return: bb55, unwind: bb79];
    }

    bb55: {
        StorageDead(_119);
        StorageDead(_118);
        StorageDead(_116);
        StorageDead(_114);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        _191 = const _;
        _145 = &(*_191);
        _144 = &(*_145);
        _143 = move _144 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_144);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        _155 = &(*_102);
        _154 = <RefMut<'_, PerpMarket> as Deref>::deref(move _155) -> [return: bb56, unwind: bb79];
    }

    bb56: {
        StorageDead(_155);
        _153 = &((*_154).11: u32);
        _152 = &(*_153);
        _151 = core::fmt::rt::Argument::<'_>::new_debug::<u32>(move _152) -> [return: bb57, unwind: bb79];
    }

    bb57: {
        StorageDead(_152);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        _158 = &_2;
        _157 = &(*_158);
        _156 = core::fmt::rt::Argument::<'_>::new_debug::<u32>(move _157) -> [return: bb58, unwind: bb79];
    }

    bb58: {
        StorageDead(_157);
        _150 = [move _151, move _156];
        StorageDead(_156);
        StorageDead(_151);
        _149 = &_150;
        _148 = &(*_149);
        _147 = move _148 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_148);
        _142 = Arguments::<'_>::new_v1(move _143, move _147) -> [return: bb59, unwind: bb79];
    }

    bb59: {
        StorageDead(_147);
        StorageDead(_143);
        _141 = format(move _142) -> [return: bb60, unwind: bb79];
    }

    bb60: {
        StorageDead(_142);
        StorageDead(_158);
        StorageDead(_154);
        StorageDead(_153);
        StorageDead(_150);
        StorageDead(_149);
        StorageDead(_145);
        _140 = move _141;
        StorageDead(_141);
        _139 = &_140;
        _138 = &(*_139);
        _137 = <String as Deref>::deref(move _138) -> [return: bb61, unwind: bb77];
    }

    bb61: {
        _136 = &(*_137);
        StorageDead(_138);
        _135 = solana_program::log::sol_log(move _136) -> [return: bb62, unwind: bb77];
    }

    bb62: {
        StorageDead(_136);
        drop(_140) -> [return: bb63, unwind: bb79];
    }

    bb63: {
        StorageDead(_140);
        StorageDead(_139);
        StorageDead(_137);
        StorageDead(_135);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        _190 = const _;
        _169 = &(*_190);
        _168 = &(*_169);
        _167 = move _168 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_168);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        _179 = &(*_102);
        _178 = <RefMut<'_, PerpMarket> as Deref>::deref(move _179) -> [return: bb64, unwind: bb79];
    }

    bb64: {
        StorageDead(_179);
        _177 = &((*_178).12: u32);
        _176 = &(*_177);
        _175 = core::fmt::rt::Argument::<'_>::new_debug::<u32>(move _176) -> [return: bb65, unwind: bb79];
    }

    bb65: {
        StorageDead(_176);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        _182 = &_3;
        _181 = &(*_182);
        _180 = core::fmt::rt::Argument::<'_>::new_debug::<u32>(move _181) -> [return: bb66, unwind: bb79];
    }

    bb66: {
        StorageDead(_181);
        _174 = [move _175, move _180];
        StorageDead(_180);
        StorageDead(_175);
        _173 = &_174;
        _172 = &(*_173);
        _171 = move _172 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_172);
        _166 = Arguments::<'_>::new_v1(move _167, move _171) -> [return: bb67, unwind: bb79];
    }

    bb67: {
        StorageDead(_171);
        StorageDead(_167);
        _165 = format(move _166) -> [return: bb68, unwind: bb79];
    }

    bb68: {
        StorageDead(_166);
        StorageDead(_182);
        StorageDead(_178);
        StorageDead(_177);
        StorageDead(_174);
        StorageDead(_173);
        StorageDead(_169);
        _164 = move _165;
        StorageDead(_165);
        _163 = &_164;
        _162 = &(*_163);
        _161 = <String as Deref>::deref(move _162) -> [return: bb69, unwind: bb76];
    }

    bb69: {
        _160 = &(*_161);
        StorageDead(_162);
        _159 = solana_program::log::sol_log(move _160) -> [return: bb70, unwind: bb76];
    }

    bb70: {
        StorageDead(_160);
        drop(_164) -> [return: bb71, unwind: bb79];
    }

    bb71: {
        StorageDead(_164);
        StorageDead(_163);
        StorageDead(_161);
        StorageDead(_159);
        StorageLive(_183);
        _183 = _2;
        StorageLive(_184);
        StorageLive(_185);
        _185 = &mut (*_102);
        _184 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _185) -> [return: bb72, unwind: bb79];
    }

    bb72: {
        StorageDead(_185);
        ((*_184).11: u32) = move _183;
        StorageDead(_183);
        StorageDead(_184);
        StorageLive(_186);
        _186 = _3;
        StorageLive(_187);
        StorageLive(_188);
        _188 = &mut (*_102);
        _187 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _188) -> [return: bb73, unwind: bb79];
    }

    bb73: {
        StorageDead(_188);
        ((*_187).12: u32) = move _186;
        StorageDead(_186);
        StorageDead(_187);
        StorageLive(_189);
        _189 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _189);
        StorageDead(_189);
        drop(_103) -> [return: bb74, unwind: bb84];
    }

    bb74: {
        StorageDead(_103);
        StorageDead(_102);
        goto -> bb75;
    }

    bb75: {
        return;
    }

    bb76 (cleanup): {
        drop(_164) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        drop(_140) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        drop(_119) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        drop(_103) -> [return: bb84, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        drop(_89) -> [return: bb84, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        drop(_70) -> [return: bb84, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        drop(_45) -> [return: bb84, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        drop(_26) -> [return: bb84, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        resume;
    }

    bb85 (cleanup): {
        _207 = discriminant(_104);
        goto -> bb84;
    }

    bb86 (cleanup): {
        _208 = discriminant(_5);
        goto -> bb84;
    }
}
