// MIR for `state::user::<impl at programs/drift/src/state/user.rs:1263:1: 1263:11>::get_limit_price` after PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:1263:1: 1263:11>::get_limit_price(_1: &Order, _2: Option<i64>, _3: Option<u64>, _4: u64, _5: u64, _6: bool, _7: Option<ProtectedMakerParams>) -> std::result::Result<Option<u64>, error::ErrorCode> {
    debug self => _1;
    debug valid_oracle_price => _2;
    debug fallback_price => _3;
    debug slot => _4;
    debug tick_size => _5;
    debug is_prediction_market => _6;
    debug pmm_params => _7;
    let mut _0: std::result::Result<std::option::Option<u64>, error::ErrorCode>;
    let _8: std::option::Option<u64>;
    let mut _9: bool;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _11: std::result::Result<bool, error::ErrorCode>;
    let mut _12: &state::user::Order;
    let mut _13: u64;
    let mut _14: u8;
    let mut _15: u64;
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _20: bool;
    let mut _21: u64;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _23: std::result::Result<u64, error::ErrorCode>;
    let mut _24: &state::user::Order;
    let mut _25: u64;
    let mut _26: u64;
    let mut _27: std::option::Option<i64>;
    let mut _28: bool;
    let mut _29: isize;
    let _30: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _31: !;
    let mut _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _33: u64;
    let mut _34: bool;
    let mut _35: state::user::Order;
    let _36: i64;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _38: std::result::Result<i64, error::ErrorCode>;
    let mut _39: std::option::Option<i64>;
    let mut _40: {closure@programs/drift/src/state/user.rs:1290:62: 1290:64};
    let mut _41: isize;
    let _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _43: !;
    let mut _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _45: i64;
    let mut _47: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _48: std::result::Result<u64, error::ErrorCode>;
    let mut _49: i64;
    let mut _50: i64;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _52: std::result::Result<i64, error::ErrorCode>;
    let mut _53: i64;
    let mut _54: i64;
    let mut _55: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _56: std::result::Result<i64, error::ErrorCode>;
    let mut _57: i32;
    let mut _58: isize;
    let mut _60: !;
    let mut _61: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _63: isize;
    let mut _65: !;
    let mut _66: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _68: i64;
    let mut _69: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _70: std::result::Result<i64, error::ErrorCode>;
    let mut _71: u64;
    let mut _72: isize;
    let mut _74: !;
    let mut _75: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _77: isize;
    let mut _79: !;
    let mut _80: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _82: ();
    let mut _83: bool;
    let mut _84: u64;
    let mut _85: u64;
    let _86: ();
    let mut _87: isize;
    let mut _89: u64;
    let mut _90: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _91: std::result::Result<u64, error::ErrorCode>;
    let mut _92: u64;
    let mut _93: controller::position::PositionDirection;
    let mut _94: state::protected_maker_mode_config::ProtectedMakerParams;
    let mut _95: isize;
    let mut _97: !;
    let mut _98: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _100: u64;
    let mut _101: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _102: std::result::Result<u64, error::ErrorCode>;
    let mut _103: u64;
    let mut _104: u64;
    let mut _105: controller::position::PositionDirection;
    let mut _106: isize;
    let mut _108: !;
    let mut _109: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _111: bool;
    let mut _112: u64;
    let mut _113: isize;
    let _114: u64;
    let mut _115: u64;
    let mut _116: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _117: std::result::Result<u64, error::ErrorCode>;
    let mut _118: u64;
    let mut _119: u64;
    let mut _120: controller::position::PositionDirection;
    let mut _121: isize;
    let mut _123: !;
    let mut _124: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _126: u64;
    let _127: ();
    let mut _128: isize;
    let mut _130: u64;
    let mut _131: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _132: std::result::Result<u64, error::ErrorCode>;
    let mut _133: u64;
    let mut _134: controller::position::PositionDirection;
    let mut _135: state::protected_maker_mode_config::ProtectedMakerParams;
    let mut _136: isize;
    let mut _138: !;
    let mut _139: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _141: u64;
    let mut _142: std::option::Option<u64>;
    scope 1 {
        debug price => _8;
    }
    scope 2 {
        debug residual => _17;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _20;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _30;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _33;
        scope 9 {
        }
    }
    scope 10 {
        debug oracle_price => _36;
        let mut _46: u64;
        let _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _62: i64;
        let _64: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _67: i64;
        let _73: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _76: i64;
        let _78: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _81: u64;
        scope 15 {
            debug limit_price => _46;
            let _107: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _110: u64;
            scope 32 {
                debug pmm_params => _88;
                let _88: state::protected_maker_mode_config::ProtectedMakerParams;
                let _96: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _99: u64;
                scope 33 {
                    debug residual => _96;
                    scope 34 {
                    }
                }
                scope 35 {
                    debug val => _99;
                    scope 36 {
                    }
                }
            }
            scope 37 {
                debug residual => _107;
                scope 38 {
                }
            }
            scope 39 {
                debug val => _110;
                scope 40 {
                }
            }
        }
        scope 16 {
            debug residual => _59;
            scope 17 {
            }
        }
        scope 18 {
            debug val => _62;
            scope 19 {
            }
        }
        scope 20 {
            debug residual => _64;
            scope 21 {
            }
        }
        scope 22 {
            debug val => _67;
            scope 23 {
            }
        }
        scope 24 {
            debug residual => _73;
            scope 25 {
            }
        }
        scope 26 {
            debug val => _76;
            scope 27 {
            }
        }
        scope 28 {
            debug residual => _78;
            scope 29 {
            }
        }
        scope 30 {
            debug val => _81;
            scope 31 {
            }
        }
    }
    scope 11 {
        debug residual => _42;
        scope 12 {
        }
    }
    scope 13 {
        debug val => _45;
        scope 14 {
        }
    }
    scope 41 {
        debug price => _114;
        let _122: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _125: u64;
        scope 42 {
            debug residual => _122;
            scope 43 {
            }
        }
        scope 44 {
            debug val => _125;
            scope 45 {
            }
        }
    }
    scope 46 {
        debug price => _126;
        scope 47 {
            debug pmm_params => _129;
            let _129: state::protected_maker_mode_config::ProtectedMakerParams;
            let _137: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _140: u64;
            scope 48 {
                debug residual => _137;
                scope 49 {
                }
            }
            scope 50 {
                debug val => _140;
                scope 51 {
                }
            }
        }
    }

    bb0: {
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &(*_1);
        StorageLive(_13);
        _13 = ((*_1).0: u64);
        StorageLive(_14);
        _14 = ((*_1).22: u8);
        StorageLive(_15);
        _15 = _4;
        _11 = Order::has_auction_price(move _12, move _13, move _14, move _15) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        _10 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _11) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_11);
        _16 = discriminant(_10);
        switchInt(move _16) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_20);
        _20 = ((_10 as Continue).0: bool);
        _9 = _20;
        StorageDead(_20);
        switchInt(move _9) -> [0: bb8, otherwise: bb7];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_17);
        _17 = ((_10 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_19);
        _19 = _17;
        _0 = <std::result::Result<Option<u64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _19) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_10);
        goto -> bb87;
    }

    bb7: {
        StorageDead(_10);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &(*_1);
        StorageLive(_25);
        _25 = _4;
        StorageLive(_26);
        _26 = _5;
        StorageLive(_27);
        _27 = _2;
        StorageLive(_28);
        _28 = _6;
        _23 = calculate_auction_price(move _24, move _25, move _26, move _27, move _28) -> [return: bb9, unwind continue];
    }

    bb8: {
        StorageDead(_10);
        StorageLive(_34);
        StorageLive(_35);
        _35 = (*_1);
        _34 = Order::has_oracle_price_offset(move _35) -> [return: bb14, unwind continue];
    }

    bb9: {
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        _22 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _23) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_23);
        _29 = discriminant(_22);
        switchInt(move _29) -> [0: bb11, 1: bb12, otherwise: bb4];
    }

    bb11: {
        StorageLive(_33);
        _33 = ((_22 as Continue).0: u64);
        _21 = _33;
        StorageDead(_33);
        _8 = Option::<u64>::Some(move _21);
        StorageDead(_21);
        StorageDead(_22);
        goto -> bb79;
    }

    bb12: {
        StorageLive(_30);
        _30 = ((_22 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_32);
        _32 = _30;
        _0 = <std::result::Result<Option<u64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _32) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_32);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_22);
        goto -> bb87;
    }

    bb14: {
        switchInt(move _34) -> [0: bb59, otherwise: bb15];
    }

    bb15: {
        StorageDead(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = _2;
        StorageLive(_40);
        _40 = {closure@programs/drift/src/state/user.rs:1290:62: 1290:64};
        _38 = Option::<i64>::ok_or_else::<error::ErrorCode, {closure@programs/drift/src/state/user.rs:1290:62: 1290:64}>(move _39, move _40) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_40);
        StorageDead(_39);
        _37 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _38) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_38);
        _41 = discriminant(_37);
        switchInt(move _41) -> [0: bb18, 1: bb19, otherwise: bb4];
    }

    bb18: {
        StorageLive(_45);
        _45 = ((_37 as Continue).0: i64);
        _36 = _45;
        StorageDead(_45);
        StorageDead(_37);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = _36;
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = ((*_1).9: i32);
        _56 = <i32 as Cast>::cast::<i64>(move _57) -> [return: bb21, unwind continue];
    }

    bb19: {
        StorageLive(_42);
        _42 = ((_37 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_44);
        _44 = _42;
        _0 = <std::result::Result<Option<u64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _44) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_44);
        StorageDead(_42);
        StorageDead(_37);
        goto -> bb85;
    }

    bb21: {
        StorageDead(_57);
        _55 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _56) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_56);
        _58 = discriminant(_55);
        switchInt(move _58) -> [0: bb23, 1: bb24, otherwise: bb4];
    }

    bb23: {
        StorageLive(_62);
        _62 = ((_55 as Continue).0: i64);
        _54 = _62;
        StorageDead(_62);
        _52 = <i64 as SafeMath>::safe_add(move _53, move _54) -> [return: bb26, unwind continue];
    }

    bb24: {
        StorageLive(_59);
        _59 = ((_55 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_61);
        _61 = _59;
        _0 = <std::result::Result<Option<u64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _61) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_54);
        StorageDead(_53);
        StorageDead(_52);
        goto -> bb82;
    }

    bb26: {
        StorageDead(_54);
        StorageDead(_53);
        _51 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _52) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_52);
        _63 = discriminant(_51);
        switchInt(move _63) -> [0: bb28, 1: bb29, otherwise: bb4];
    }

    bb28: {
        StorageLive(_67);
        _67 = ((_51 as Continue).0: i64);
        _50 = _67;
        StorageDead(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = _5;
        _70 = <u64 as Cast>::cast::<i64>(move _71) -> [return: bb31, unwind continue];
    }

    bb29: {
        StorageLive(_64);
        _64 = ((_51 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_66);
        _66 = _64;
        _0 = <std::result::Result<Option<u64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _66) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_66);
        StorageDead(_64);
        goto -> bb82;
    }

    bb31: {
        StorageDead(_71);
        _69 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _70) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_70);
        _72 = discriminant(_69);
        switchInt(move _72) -> [0: bb33, 1: bb34, otherwise: bb4];
    }

    bb33: {
        StorageLive(_76);
        _76 = ((_69 as Continue).0: i64);
        _68 = _76;
        StorageDead(_76);
        _49 = <i64 as Ord>::max(move _50, move _68) -> [return: bb36, unwind continue];
    }

    bb34: {
        StorageLive(_73);
        _73 = ((_69 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_75);
        _75 = _73;
        _0 = <std::result::Result<Option<u64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _75) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_75);
        StorageDead(_73);
        StorageDead(_68);
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_48);
        goto -> bb81;
    }

    bb36: {
        StorageDead(_68);
        StorageDead(_50);
        _48 = <i64 as Cast>::cast::<u64>(move _49) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_49);
        _47 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _48) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_48);
        _77 = discriminant(_47);
        switchInt(move _77) -> [0: bb39, 1: bb40, otherwise: bb4];
    }

    bb39: {
        StorageLive(_81);
        _81 = ((_47 as Continue).0: u64);
        _46 = _81;
        StorageDead(_81);
        StorageDead(_69);
        StorageDead(_55);
        StorageDead(_51);
        StorageDead(_47);
        StorageLive(_82);
        StorageLive(_83);
        _83 = _6;
        switchInt(move _83) -> [0: bb43, otherwise: bb42];
    }

    bb40: {
        StorageLive(_78);
        _78 = ((_47 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_80);
        _80 = _78;
        _0 = <std::result::Result<Option<u64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _80) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_80);
        StorageDead(_78);
        goto -> bb81;
    }

    bb42: {
        StorageLive(_84);
        StorageLive(_85);
        _85 = _46;
        _84 = <u64 as Ord>::min(move _85, const _) -> [return: bb44, unwind continue];
    }

    bb43: {
        _82 = const ();
        goto -> bb45;
    }

    bb44: {
        StorageDead(_85);
        _46 = move _84;
        _82 = const ();
        StorageDead(_84);
        goto -> bb45;
    }

    bb45: {
        StorageDead(_83);
        StorageDead(_82);
        StorageLive(_86);
        _87 = discriminant(_7);
        switchInt(move _87) -> [1: bb46, otherwise: bb52];
    }

    bb46: {
        StorageLive(_88);
        _88 = ((_7 as Some).0: state::protected_maker_mode_config::ProtectedMakerParams);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _92 = _46;
        StorageLive(_93);
        _93 = ((*_1).17: controller::position::PositionDirection);
        StorageLive(_94);
        _94 = _88;
        _91 = apply_protected_maker_limit_price_offset(move _92, move _93, move _94, const false) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_94);
        StorageDead(_93);
        StorageDead(_92);
        _90 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _91) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_91);
        _95 = discriminant(_90);
        switchInt(move _95) -> [0: bb49, 1: bb50, otherwise: bb4];
    }

    bb49: {
        StorageLive(_99);
        _99 = ((_90 as Continue).0: u64);
        _89 = _99;
        StorageDead(_99);
        _46 = move _89;
        StorageDead(_89);
        StorageDead(_90);
        _86 = const ();
        StorageDead(_88);
        goto -> bb53;
    }

    bb50: {
        StorageLive(_96);
        _96 = ((_90 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_98);
        _98 = _96;
        _0 = <std::result::Result<Option<u64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _98) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_98);
        StorageDead(_96);
        StorageDead(_89);
        StorageDead(_90);
        StorageDead(_88);
        StorageDead(_86);
        goto -> bb84;
    }

    bb52: {
        _86 = const ();
        goto -> bb53;
    }

    bb53: {
        StorageDead(_86);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        _103 = _46;
        StorageLive(_104);
        _104 = _5;
        StorageLive(_105);
        _105 = ((*_1).17: controller::position::PositionDirection);
        _102 = math::orders::standardize_price(move _103, move _104, move _105) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_105);
        StorageDead(_104);
        StorageDead(_103);
        _101 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _102) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_102);
        _106 = discriminant(_101);
        switchInt(move _106) -> [0: bb56, 1: bb57, otherwise: bb4];
    }

    bb56: {
        StorageLive(_110);
        _110 = ((_101 as Continue).0: u64);
        _100 = _110;
        StorageDead(_110);
        _8 = Option::<u64>::Some(move _100);
        StorageDead(_100);
        StorageDead(_46);
        StorageDead(_36);
        StorageDead(_101);
        goto -> bb78;
    }

    bb57: {
        StorageLive(_107);
        _107 = ((_101 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_109);
        _109 = _107;
        _0 = <std::result::Result<Option<u64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _109) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_109);
        StorageDead(_107);
        StorageDead(_100);
        StorageDead(_46);
        StorageDead(_36);
        StorageDead(_101);
        goto -> bb86;
    }

    bb59: {
        StorageDead(_35);
        StorageLive(_111);
        StorageLive(_112);
        _112 = ((*_1).1: u64);
        _111 = Eq(move _112, const 0_u64);
        switchInt(move _111) -> [0: bb68, otherwise: bb60];
    }

    bb60: {
        StorageDead(_112);
        _113 = discriminant(_3);
        switchInt(move _113) -> [0: bb61, 1: bb62, otherwise: bb4];
    }

    bb61: {
        _8 = Option::<u64>::None;
        goto -> bb77;
    }

    bb62: {
        StorageLive(_114);
        _114 = ((_3 as Some).0: u64);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        _118 = _114;
        StorageLive(_119);
        _119 = _5;
        StorageLive(_120);
        _120 = ((*_1).17: controller::position::PositionDirection);
        _117 = math::orders::standardize_price(move _118, move _119, move _120) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_120);
        StorageDead(_119);
        StorageDead(_118);
        _116 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _117) -> [return: bb64, unwind continue];
    }

    bb64: {
        StorageDead(_117);
        _121 = discriminant(_116);
        switchInt(move _121) -> [0: bb65, 1: bb66, otherwise: bb4];
    }

    bb65: {
        StorageLive(_125);
        _125 = ((_116 as Continue).0: u64);
        _115 = _125;
        StorageDead(_125);
        _8 = Option::<u64>::Some(move _115);
        StorageDead(_116);
        StorageDead(_115);
        StorageDead(_114);
        goto -> bb77;
    }

    bb66: {
        StorageLive(_122);
        _122 = ((_116 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_124);
        _124 = _122;
        _0 = <std::result::Result<Option<u64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _124) -> [return: bb67, unwind continue];
    }

    bb67: {
        StorageDead(_124);
        StorageDead(_122);
        StorageDead(_116);
        StorageDead(_115);
        StorageDead(_114);
        goto -> bb80;
    }

    bb68: {
        StorageDead(_112);
        StorageLive(_126);
        _126 = ((*_1).1: u64);
        StorageLive(_127);
        _128 = discriminant(_7);
        switchInt(move _128) -> [1: bb69, otherwise: bb75];
    }

    bb69: {
        StorageLive(_129);
        _129 = ((_7 as Some).0: state::protected_maker_mode_config::ProtectedMakerParams);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        _133 = _126;
        StorageLive(_134);
        _134 = ((*_1).17: controller::position::PositionDirection);
        StorageLive(_135);
        _135 = _129;
        _132 = apply_protected_maker_limit_price_offset(move _133, move _134, move _135, const true) -> [return: bb70, unwind continue];
    }

    bb70: {
        StorageDead(_135);
        StorageDead(_134);
        StorageDead(_133);
        _131 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _132) -> [return: bb71, unwind continue];
    }

    bb71: {
        StorageDead(_132);
        _136 = discriminant(_131);
        switchInt(move _136) -> [0: bb72, 1: bb73, otherwise: bb4];
    }

    bb72: {
        StorageLive(_140);
        _140 = ((_131 as Continue).0: u64);
        _130 = _140;
        StorageDead(_140);
        _126 = move _130;
        StorageDead(_130);
        StorageDead(_131);
        _127 = const ();
        StorageDead(_129);
        goto -> bb76;
    }

    bb73: {
        StorageLive(_137);
        _137 = ((_131 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_139);
        _139 = _137;
        _0 = <std::result::Result<Option<u64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _139) -> [return: bb74, unwind continue];
    }

    bb74: {
        StorageDead(_139);
        StorageDead(_137);
        StorageDead(_130);
        StorageDead(_131);
        StorageDead(_129);
        StorageDead(_127);
        StorageDead(_126);
        goto -> bb80;
    }

    bb75: {
        _127 = const ();
        goto -> bb76;
    }

    bb76: {
        StorageDead(_127);
        StorageLive(_141);
        _141 = _126;
        _8 = Option::<u64>::Some(move _141);
        StorageDead(_141);
        StorageDead(_126);
        goto -> bb77;
    }

    bb77: {
        StorageDead(_111);
        goto -> bb78;
    }

    bb78: {
        StorageDead(_34);
        goto -> bb79;
    }

    bb79: {
        StorageDead(_9);
        StorageLive(_142);
        _142 = _8;
        _0 = std::result::Result::<Option<u64>, error::ErrorCode>::Ok(move _142);
        StorageDead(_142);
        StorageDead(_8);
        goto -> bb88;
    }

    bb80: {
        StorageDead(_111);
        goto -> bb86;
    }

    bb81: {
        StorageDead(_69);
        goto -> bb83;
    }

    bb82: {
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_48);
        goto -> bb83;
    }

    bb83: {
        StorageDead(_55);
        StorageDead(_51);
        StorageDead(_47);
        goto -> bb84;
    }

    bb84: {
        StorageDead(_46);
        goto -> bb85;
    }

    bb85: {
        StorageDead(_36);
        goto -> bb86;
    }

    bb86: {
        StorageDead(_34);
        goto -> bb87;
    }

    bb87: {
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb88;
    }

    bb88: {
        return;
    }
}
