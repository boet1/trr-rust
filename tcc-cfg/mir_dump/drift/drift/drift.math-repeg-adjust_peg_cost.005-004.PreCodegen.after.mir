// MIR for `adjust_peg_cost` after PreCodegen

fn adjust_peg_cost(_1: &PerpMarket, _2: u128) -> std::result::Result<(PerpMarket, i128), error::ErrorCode> {
    debug market => _1;
    debug new_peg_candidate => _2;
    let mut _0: std::result::Result<(state::perp_market::PerpMarket, i128), error::ErrorCode>;
    let mut _3: state::perp_market::PerpMarket;
    let mut _5: bool;
    let mut _6: u128;
    let mut _7: u128;
    let mut _9: (u128, i128);
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u128, i128)>;
    let mut _11: std::result::Result<(u128, i128), error::ErrorCode>;
    let mut _12: i128;
    let mut _13: &state::perp_market::AMM;
    let _14: &state::perp_market::AMM;
    let mut _15: isize;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _20: u128;
    let mut _23: (u128, i128);
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u128, i128)>;
    let mut _25: std::result::Result<(u128, i128), error::ErrorCode>;
    let mut _26: i128;
    let mut _27: u128;
    let mut _28: &state::perp_market::AMM;
    let _29: &state::perp_market::AMM;
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _35: (state::perp_market::PerpMarket, i128);
    let mut _36: state::perp_market::PerpMarket;
    let mut _37: i128;
    scope 1 {
        debug market_clone => _3;
        let _4: i128;
        let _8: u128;
        let _16: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _19: (u128, i128);
        scope 2 {
            debug cost => _4;
        }
        scope 3 {
            debug current_net_market_value => _8;
            let _21: u128;
            let _22: i128;
            let _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _34: (u128, i128);
            scope 8 {
                debug _new_net_market_value => _21;
                debug cost => _22;
            }
            scope 9 {
                debug residual => _31;
                scope 10 {
                }
            }
            scope 11 {
                debug val => _34;
                scope 12 {
                }
            }
        }
        scope 4 {
            debug residual => _16;
            scope 5 {
            }
        }
        scope 6 {
            debug val => _19;
            scope 7 {
            }
        }
    }

    bb0: {
        StorageLive(_3);
        _3 = (*_1);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = _2;
        StorageLive(_7);
        _7 = ((_3.1: state::perp_market::AMM).11: u128);
        _5 = Ne(move _6, move _7);
        switchInt(move _5) -> [0: bb13, otherwise: bb1];
    }

    bb1: {
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = ((_3.1: state::perp_market::AMM).15: i128);
        StorageLive(_13);
        StorageLive(_14);
        _14 = &(_3.1: state::perp_market::AMM);
        _13 = &(*_14);
        _11 = calculate_base_asset_value_and_pnl(move _12, const 0_u128, move _13) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_13);
        StorageDead(_12);
        _10 = <std::result::Result<(u128, i128), error::ErrorCode> as Try>::branch(move _11) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_11);
        _15 = discriminant(_10);
        switchInt(move _15) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_19);
        _19 = ((_10 as Continue).0: (u128, i128));
        _9 = _19;
        StorageDead(_19);
        StorageLive(_8);
        _8 = (_9.0: u128);
        StorageDead(_14);
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_20);
        _20 = _2;
        ((_3.1: state::perp_market::AMM).11: u128) = move _20;
        StorageDead(_20);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = ((_3.1: state::perp_market::AMM).15: i128);
        StorageLive(_27);
        _27 = _8;
        StorageLive(_28);
        StorageLive(_29);
        _29 = &(_3.1: state::perp_market::AMM);
        _28 = &(*_29);
        _25 = calculate_base_asset_value_and_pnl(move _26, move _27, move _28) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_16);
        _16 = ((_10 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_18);
        _18 = _16;
        _0 = <std::result::Result<(PerpMarket, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _18) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb15;
    }

    bb8: {
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        _24 = <std::result::Result<(u128, i128), error::ErrorCode> as Try>::branch(move _25) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_25);
        _30 = discriminant(_24);
        switchInt(move _30) -> [0: bb10, 1: bb11, otherwise: bb5];
    }

    bb10: {
        StorageLive(_34);
        _34 = ((_24 as Continue).0: (u128, i128));
        _23 = _34;
        StorageDead(_34);
        StorageLive(_21);
        _21 = (_23.0: u128);
        StorageLive(_22);
        _22 = (_23.1: i128);
        StorageDead(_29);
        StorageDead(_24);
        StorageDead(_23);
        _4 = _22;
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_8);
        goto -> bb14;
    }

    bb11: {
        StorageLive(_31);
        _31 = ((_24 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_33);
        _33 = _31;
        _0 = <std::result::Result<(PerpMarket, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _33) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_8);
        goto -> bb15;
    }

    bb13: {
        StorageDead(_7);
        StorageDead(_6);
        _4 = const 0_i128;
        goto -> bb14;
    }

    bb14: {
        StorageDead(_5);
        StorageLive(_35);
        StorageLive(_36);
        _36 = _3;
        StorageLive(_37);
        _37 = _4;
        _35 = (move _36, move _37);
        StorageDead(_37);
        StorageDead(_36);
        _0 = std::result::Result::<(PerpMarket, i128), error::ErrorCode>::Ok(move _35);
        StorageDead(_35);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb16;
    }

    bb15: {
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb16;
    }

    bb16: {
        return;
    }
}
