// MIR for `calculate_budgeted_k_scale` after PreCodegen

fn calculate_budgeted_k_scale(_1: &mut PerpMarket, _2: i128, _3: i128, _4: i128) -> std::result::Result<(u128, u128), error::ErrorCode> {
    debug market => _1;
    debug budget => _2;
    debug k_pct_upper_bound => _3;
    debug k_pct_lower_bound => _4;
    let mut _0: std::result::Result<(u128, u128), error::ErrorCode>;
    let _5: ();
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _7: std::result::Result<(), error::ErrorCode>;
    let mut _8: bool;
    let mut _9: i128;
    let mut _10: ();
    let _11: error::ErrorCode;
    let _12: ();
    let mut _13: &str;
    let _14: &str;
    let mut _15: &std::string::String;
    let _16: &std::string::String;
    let _17: std::string::String;
    let mut _19: std::fmt::Arguments<'_>;
    let mut _20: &[&str];
    let mut _21: &[&str; 2];
    let _22: &[&str; 2];
    let _23: [&str; 2];
    let mut _24: &[core::fmt::rt::Argument<'_>];
    let mut _25: &[core::fmt::rt::Argument<'_>; 1];
    let _26: &[core::fmt::rt::Argument<'_>; 1];
    let _27: [core::fmt::rt::Argument<'_>; 1];
    let mut _28: core::fmt::rt::Argument<'_>;
    let mut _29: &error::ErrorCode;
    let _30: &error::ErrorCode;
    let _31: ();
    let mut _32: &str;
    let _33: &str;
    let mut _34: &std::string::String;
    let _35: &std::string::String;
    let _36: std::string::String;
    let mut _38: std::fmt::Arguments<'_>;
    let mut _39: &[&str];
    let mut _40: &[&str; 2];
    let _41: &[&str; 2];
    let _42: [&str; 2];
    let mut _43: &[core::fmt::rt::Argument<'_>];
    let mut _44: &[core::fmt::rt::Argument<'_>; 2];
    let _45: &[core::fmt::rt::Argument<'_>; 2];
    let _46: [core::fmt::rt::Argument<'_>; 2];
    let mut _47: core::fmt::rt::Argument<'_>;
    let mut _48: &i128;
    let _49: &i128;
    let mut _50: core::fmt::rt::Argument<'_>;
    let mut _51: &i128;
    let _52: &i128;
    let _53: i128;
    let mut _54: error::ErrorCode;
    let mut _55: isize;
    let _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _57: !;
    let mut _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _59: ();
    let _60: ();
    let mut _61: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _62: std::result::Result<(), error::ErrorCode>;
    let mut _63: bool;
    let mut _64: &std::ops::RangeInclusive<i128>;
    let _65: std::ops::RangeInclusive<i128>;
    let mut _66: i128;
    let mut _67: (i128, bool);
    let mut _68: &i128;
    let _69: &i128;
    let mut _70: ();
    let _71: error::ErrorCode;
    let _72: ();
    let mut _73: &str;
    let _74: &str;
    let mut _75: &std::string::String;
    let _76: &std::string::String;
    let _77: std::string::String;
    let mut _79: std::fmt::Arguments<'_>;
    let mut _80: &[&str];
    let mut _81: &[&str; 2];
    let _82: &[&str; 2];
    let _83: [&str; 2];
    let mut _84: &[core::fmt::rt::Argument<'_>];
    let mut _85: &[core::fmt::rt::Argument<'_>; 1];
    let _86: &[core::fmt::rt::Argument<'_>; 1];
    let _87: [core::fmt::rt::Argument<'_>; 1];
    let mut _88: core::fmt::rt::Argument<'_>;
    let mut _89: &error::ErrorCode;
    let _90: &error::ErrorCode;
    let _91: ();
    let mut _92: &str;
    let _93: &str;
    let mut _94: &std::string::String;
    let _95: &std::string::String;
    let _96: std::string::String;
    let mut _98: std::fmt::Arguments<'_>;
    let mut _99: &[&str];
    let mut _100: &[&str; 2];
    let _101: &[&str; 2];
    let _102: [&str; 2];
    let mut _103: &[core::fmt::rt::Argument<'_>];
    let mut _104: &[core::fmt::rt::Argument<'_>; 2];
    let _105: &[core::fmt::rt::Argument<'_>; 2];
    let _106: [core::fmt::rt::Argument<'_>; 2];
    let mut _107: core::fmt::rt::Argument<'_>;
    let mut _108: &i128;
    let _109: &i128;
    let mut _110: core::fmt::rt::Argument<'_>;
    let mut _111: &i128;
    let _112: &i128;
    let _113: i128;
    let mut _114: (i128, bool);
    let mut _115: error::ErrorCode;
    let mut _116: isize;
    let _117: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _118: !;
    let mut _119: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _120: ();
    let _121: u128;
    let _122: u128;
    let mut _123: (u128, u128);
    let mut _124: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u128, u128)>;
    let mut _125: std::result::Result<(u128, u128), error::ErrorCode>;
    let mut _126: u128;
    let mut _127: u128;
    let mut _128: i128;
    let mut _129: u128;
    let mut _130: i128;
    let mut _131: i128;
    let mut _132: i128;
    let mut _133: isize;
    let _134: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _135: !;
    let mut _136: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _137: (u128, u128);
    let mut _138: (u128, u128);
    let mut _139: u128;
    let mut _140: u128;
    let mut _144: &std::ops::RangeInclusive<i128>;
    scope 1 {
        debug error_code => _11;
        let _18: std::string::String;
        let _37: std::string::String;
        let mut _145: &i128;
        let mut _146: &[&str; 2];
        let mut _147: &[&str; 2];
        scope 2 {
            debug res => _18;
        }
        scope 3 {
            debug res => _37;
        }
    }
    scope 4 {
        debug residual => _56;
        scope 5 {
        }
    }
    scope 6 {
        debug val => _59;
        scope 7 {
        }
    }
    scope 8 {
        debug error_code => _71;
        let _78: std::string::String;
        let _97: std::string::String;
        let mut _141: &i128;
        let mut _142: &[&str; 2];
        let mut _143: &[&str; 2];
        scope 9 {
            debug res => _78;
        }
        scope 10 {
            debug res => _97;
        }
    }
    scope 11 {
        debug residual => _117;
        scope 12 {
        }
    }
    scope 13 {
        debug val => _120;
        scope 14 {
        }
    }
    scope 15 {
        debug numerator => _121;
        debug denominator => _122;
    }
    scope 16 {
        debug residual => _134;
        scope 17 {
        }
    }
    scope 18 {
        debug val => _137;
        scope 19 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = _3;
        _8 = Ge(move _9, const _);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_9);
        StorageLive(_10);
        _10 = ();
        _7 = std::result::Result::<(), error::ErrorCode>::Ok(move _10);
        StorageDead(_10);
        goto -> bb16;
    }

    bb2: {
        StorageDead(_9);
        StorageLive(_11);
        _11 = error::ErrorCode::InvalidUpdateK;
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _147 = const _;
        _22 = &(*_147);
        _21 = &(*_22);
        _20 = move _21 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_21);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = &_11;
        _29 = &(*_30);
        _28 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _29) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_29);
        _27 = [move _28];
        StorageDead(_28);
        _26 = &_27;
        _25 = &(*_26);
        _24 = move _25 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_25);
        _19 = Arguments::<'_>::new_v1(move _20, move _24) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_24);
        StorageDead(_20);
        _18 = format(move _19) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_19);
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_22);
        _17 = move _18;
        StorageDead(_18);
        _16 = &_17;
        _15 = &(*_16);
        _14 = <String as Deref>::deref(move _15) -> [return: bb6, unwind: bb54];
    }

    bb6: {
        _13 = &(*_14);
        StorageDead(_15);
        _12 = solana_program::log::sol_log(move _13) -> [return: bb7, unwind: bb54];
    }

    bb7: {
        StorageDead(_13);
        drop(_17) -> [return: bb8, unwind: bb55];
    }

    bb8: {
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_12);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _146 = const _;
        _41 = &(*_146);
        _40 = &(*_41);
        _39 = move _40 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_40);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = &_3;
        _48 = &(*_49);
        _47 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _48) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_48);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _145 = const _;
        _52 = &(*_145);
        _51 = &(*_52);
        _50 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _51) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_51);
        _46 = [move _47, move _50];
        StorageDead(_50);
        StorageDead(_47);
        _45 = &_46;
        _44 = &(*_45);
        _43 = move _44 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_44);
        _38 = Arguments::<'_>::new_v1(move _39, move _43) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_43);
        StorageDead(_39);
        _37 = format(move _38) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_38);
        StorageDead(_52);
        StorageDead(_49);
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_41);
        _36 = move _37;
        StorageDead(_37);
        _35 = &_36;
        _34 = &(*_35);
        _33 = <String as Deref>::deref(move _34) -> [return: bb13, unwind: bb53];
    }

    bb13: {
        _32 = &(*_33);
        StorageDead(_34);
        _31 = solana_program::log::sol_log(move _32) -> [return: bb14, unwind: bb53];
    }

    bb14: {
        StorageDead(_32);
        drop(_36) -> [return: bb15, unwind: bb55];
    }

    bb15: {
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_31);
        StorageLive(_54);
        _54 = _11;
        _7 = std::result::Result::<(), error::ErrorCode>::Err(move _54);
        StorageDead(_54);
        StorageDead(_11);
        goto -> bb16;
    }

    bb16: {
        StorageDead(_8);
        _6 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _7) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_7);
        _55 = discriminant(_6);
        switchInt(move _55) -> [0: bb18, 1: bb20, otherwise: bb19];
    }

    bb18: {
        StorageLive(_59);
        _59 = ((_6 as Continue).0: ());
        _5 = _59;
        StorageDead(_59);
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _67 = CheckedSub(const _, const _);
        assert(!move (_67.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, const _) -> [success: bb22, unwind continue];
    }

    bb19: {
        unreachable;
    }

    bb20: {
        StorageLive(_56);
        _56 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_58);
        _58 = _56;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _58) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb50;
    }

    bb22: {
        _144 = const _;
        _64 = &(*_144);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &_4;
        _68 = &(*_69);
        _63 = RangeInclusive::<i128>::contains::<i128>(move _64, move _68) -> [return: bb23, unwind continue];
    }

    bb23: {
        switchInt(move _63) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        StorageDead(_69);
        StorageDead(_68);
        StorageDead(_64);
        StorageLive(_70);
        _70 = ();
        _62 = std::result::Result::<(), error::ErrorCode>::Ok(move _70);
        StorageDead(_70);
        goto -> bb40;
    }

    bb25: {
        StorageDead(_69);
        StorageDead(_68);
        StorageDead(_64);
        StorageLive(_71);
        _71 = error::ErrorCode::InvalidUpdateK;
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _143 = const _;
        _82 = &(*_143);
        _81 = &(*_82);
        _80 = move _81 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_81);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        _90 = &_71;
        _89 = &(*_90);
        _88 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _89) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_89);
        _87 = [move _88];
        StorageDead(_88);
        _86 = &_87;
        _85 = &(*_86);
        _84 = move _85 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_85);
        _79 = Arguments::<'_>::new_v1(move _80, move _84) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_84);
        StorageDead(_80);
        _78 = format(move _79) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_79);
        StorageDead(_90);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_82);
        _77 = move _78;
        StorageDead(_78);
        _76 = &_77;
        _75 = &(*_76);
        _74 = <String as Deref>::deref(move _75) -> [return: bb29, unwind: bb52];
    }

    bb29: {
        _73 = &(*_74);
        StorageDead(_75);
        _72 = solana_program::log::sol_log(move _73) -> [return: bb30, unwind: bb52];
    }

    bb30: {
        StorageDead(_73);
        drop(_77) -> [return: bb31, unwind: bb55];
    }

    bb31: {
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_74);
        StorageDead(_72);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _142 = const _;
        _101 = &(*_142);
        _100 = &(*_101);
        _99 = move _100 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_100);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        _109 = &_4;
        _108 = &(*_109);
        _107 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _108) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_108);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _114 = CheckedSub(const _, const _);
        assert(!move (_114.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, const _) -> [success: bb33, unwind continue];
    }

    bb33: {
        _141 = const _;
        _112 = &(*_141);
        _111 = &(*_112);
        _110 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _111) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_111);
        _106 = [move _107, move _110];
        StorageDead(_110);
        StorageDead(_107);
        _105 = &_106;
        _104 = &(*_105);
        _103 = move _104 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_104);
        _98 = Arguments::<'_>::new_v1(move _99, move _103) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_103);
        StorageDead(_99);
        _97 = format(move _98) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_98);
        StorageDead(_112);
        StorageDead(_109);
        StorageDead(_106);
        StorageDead(_105);
        StorageDead(_101);
        _96 = move _97;
        StorageDead(_97);
        _95 = &_96;
        _94 = &(*_95);
        _93 = <String as Deref>::deref(move _94) -> [return: bb37, unwind: bb51];
    }

    bb37: {
        _92 = &(*_93);
        StorageDead(_94);
        _91 = solana_program::log::sol_log(move _92) -> [return: bb38, unwind: bb51];
    }

    bb38: {
        StorageDead(_92);
        drop(_96) -> [return: bb39, unwind: bb55];
    }

    bb39: {
        StorageDead(_96);
        StorageDead(_95);
        StorageDead(_93);
        StorageDead(_91);
        StorageLive(_115);
        _115 = _71;
        _62 = std::result::Result::<(), error::ErrorCode>::Err(move _115);
        StorageDead(_115);
        StorageDead(_71);
        goto -> bb40;
    }

    bb40: {
        StorageDead(_63);
        _61 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _62) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_62);
        _116 = discriminant(_61);
        switchInt(move _116) -> [0: bb42, 1: bb43, otherwise: bb19];
    }

    bb42: {
        StorageLive(_120);
        _120 = ((_61 as Continue).0: ());
        _60 = _120;
        StorageDead(_120);
        StorageDead(_61);
        StorageDead(_60);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        _126 = (((*_1).1: state::perp_market::AMM).5: u128);
        StorageLive(_127);
        _127 = (((*_1).1: state::perp_market::AMM).6: u128);
        StorageLive(_128);
        _128 = _2;
        StorageLive(_129);
        _129 = (((*_1).1: state::perp_market::AMM).11: u128);
        StorageLive(_130);
        _130 = (((*_1).1: state::perp_market::AMM).15: i128);
        StorageLive(_131);
        _131 = _3;
        StorageLive(_132);
        _132 = _4;
        _125 = _calculate_budgeted_k_scale(move _126, move _127, move _128, move _129, move _130, move _131, move _132) -> [return: bb45, unwind continue];
    }

    bb43: {
        StorageLive(_117);
        _117 = ((_61 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_119);
        _119 = _117;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _119) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_119);
        StorageDead(_117);
        StorageDead(_61);
        StorageDead(_60);
        goto -> bb50;
    }

    bb45: {
        StorageDead(_132);
        StorageDead(_131);
        StorageDead(_130);
        StorageDead(_129);
        StorageDead(_128);
        StorageDead(_127);
        StorageDead(_126);
        _124 = <std::result::Result<(u128, u128), error::ErrorCode> as Try>::branch(move _125) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_125);
        _133 = discriminant(_124);
        switchInt(move _133) -> [0: bb47, 1: bb48, otherwise: bb19];
    }

    bb47: {
        StorageLive(_137);
        _137 = ((_124 as Continue).0: (u128, u128));
        _123 = _137;
        StorageDead(_137);
        StorageLive(_121);
        _121 = (_123.0: u128);
        StorageLive(_122);
        _122 = (_123.1: u128);
        StorageDead(_124);
        StorageDead(_123);
        StorageLive(_138);
        StorageLive(_139);
        _139 = _121;
        StorageLive(_140);
        _140 = _122;
        _138 = (move _139, move _140);
        StorageDead(_140);
        StorageDead(_139);
        _0 = std::result::Result::<(u128, u128), error::ErrorCode>::Ok(move _138);
        StorageDead(_138);
        StorageDead(_122);
        StorageDead(_121);
        goto -> bb50;
    }

    bb48: {
        StorageLive(_134);
        _134 = ((_124 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_136);
        _136 = _134;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _136) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_136);
        StorageDead(_134);
        StorageDead(_124);
        StorageDead(_123);
        goto -> bb50;
    }

    bb50: {
        return;
    }

    bb51 (cleanup): {
        drop(_96) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_77) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_36) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_17) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        resume;
    }
}
