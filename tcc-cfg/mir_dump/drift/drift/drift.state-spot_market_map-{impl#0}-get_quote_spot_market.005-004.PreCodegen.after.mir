// MIR for `spot_market_map::<impl at programs/drift/src/state/spot_market_map.rs:24:1: 24:27>::get_quote_spot_market` after PreCodegen

fn spot_market_map::<impl at programs/drift/src/state/spot_market_map.rs:24:1: 24:27>::get_quote_spot_market(_1: &SpotMarketMap<'_>) -> std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> {
    debug self => _1;
    let mut _0: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let _2: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _3: std::option::Option<&anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>>;
    let mut _4: &std::collections::BTreeMap<u16, anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>>;
    let mut _5: &u16;
    let _6: &u16;
    let _7: u16;
    let mut _8: isize;
    let _9: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _10: !;
    let _11: &std::panic::Location<'_>;
    let _12: ();
    let mut _13: &str;
    let _14: &str;
    let mut _15: &std::string::String;
    let _16: &std::string::String;
    let _17: std::string::String;
    let mut _19: std::fmt::Arguments<'_>;
    let mut _20: &[&str];
    let mut _21: &[&str; 3];
    let _22: &[&str; 3];
    let _23: [&str; 3];
    let mut _24: &[core::fmt::rt::Argument<'_>];
    let mut _25: &[core::fmt::rt::Argument<'_>; 3];
    let _26: &[core::fmt::rt::Argument<'_>; 3];
    let _27: [core::fmt::rt::Argument<'_>; 3];
    let mut _28: core::fmt::rt::Argument<'_>;
    let mut _29: &u16;
    let _30: &u16;
    let _31: u16;
    let mut _32: core::fmt::rt::Argument<'_>;
    let mut _33: &&str;
    let _34: &&str;
    let _35: &str;
    let mut _36: &std::panic::Location<'_>;
    let mut _37: core::fmt::rt::Argument<'_>;
    let mut _38: &u32;
    let _39: &u32;
    let _40: u32;
    let mut _41: &std::panic::Location<'_>;
    let mut _42: error::ErrorCode;
    let mut _43: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _44: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _45: isize;
    let mut _47: std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _50: ();
    let mut _51: &str;
    let _52: &str;
    let mut _53: &std::string::String;
    let _54: &std::string::String;
    let _55: std::string::String;
    let mut _57: std::fmt::Arguments<'_>;
    let mut _58: &[&str];
    let mut _59: &[&str; 1];
    let _60: &[&str; 1];
    let _61: [&str; 1];
    let mut _62: &[core::fmt::rt::Argument<'_>];
    let mut _63: &[core::fmt::rt::Argument<'_>; 1];
    let _64: &[core::fmt::rt::Argument<'_>; 1];
    let _65: [core::fmt::rt::Argument<'_>; 1];
    let mut _66: core::fmt::rt::Argument<'_>;
    let mut _67: &anchor_lang::error::Error;
    let _68: &anchor_lang::error::Error;
    let _69: ();
    let mut _70: &str;
    let _71: &str;
    let mut _72: &std::string::String;
    let _73: &std::string::String;
    let _74: std::string::String;
    let mut _76: std::fmt::Arguments<'_>;
    let mut _77: &[&str];
    let mut _78: &[&str; 3];
    let _79: &[&str; 3];
    let _80: [&str; 3];
    let mut _81: &[core::fmt::rt::Argument<'_>];
    let mut _82: &[core::fmt::rt::Argument<'_>; 3];
    let _83: &[core::fmt::rt::Argument<'_>; 3];
    let _84: [core::fmt::rt::Argument<'_>; 3];
    let mut _85: core::fmt::rt::Argument<'_>;
    let mut _86: &u16;
    let _87: &u16;
    let _88: u16;
    let mut _89: core::fmt::rt::Argument<'_>;
    let mut _90: &&str;
    let _91: &&str;
    let _92: &str;
    let mut _93: &std::panic::Location<'_>;
    let mut _94: core::fmt::rt::Argument<'_>;
    let mut _95: &u32;
    let _96: &u32;
    let _97: u32;
    let mut _98: &std::panic::Location<'_>;
    let mut _99: error::ErrorCode;
    let mut _105: &u16;
    let mut _106: bool;
    let mut _107: bool;
    let mut _108: isize;
    let mut _109: isize;
    let mut _110: isize;
    scope 1 {
        debug loader => _2;
        let _46: std::cell::Ref<'_, state::spot_market::SpotMarket>;
        let _48: anchor_lang::error::Error;
        scope 5 {
            debug spot_market => _46;
        }
        scope 6 {
            debug e => _48;
            let _49: &std::panic::Location<'_>;
            scope 7 {
                debug caller => _49;
                let _56: std::string::String;
                let _75: std::string::String;
                let mut _102: &u16;
                let mut _103: &[&str; 3];
                let mut _104: &[&str; 1];
                scope 8 {
                    debug res => _56;
                }
                scope 9 {
                    debug res => _75;
                }
            }
        }
    }
    scope 2 {
        debug loader => _9;
    }
    scope 3 {
        debug caller => _11;
        let _18: std::string::String;
        let mut _100: &u16;
        let mut _101: &[&str; 3];
        scope 4 {
            debug res => _18;
        }
    }

    bb0: {
        _107 = const false;
        _106 = const false;
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = &((*_1).0: std::collections::BTreeMap<u16, anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>>);
        StorageLive(_5);
        StorageLive(_6);
        _105 = const _;
        _6 = &(*_105);
        _5 = &(*_6);
        _3 = BTreeMap::<u16, anchor_lang::prelude::AccountLoader<'_, SpotMarket>>::get::<u16>(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        StorageDead(_4);
        _8 = discriminant(_3);
        switchInt(move _8) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        StorageLive(_11);
        _11 = Location::<'_>::caller() -> [return: bb5, unwind continue];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        StorageLive(_9);
        _9 = ((_3 as Some).0: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _2 = _9;
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_3);
        StorageLive(_43);
        StorageLive(_44);
        _44 = &(*_2);
        _106 = const true;
        _107 = const true;
        _43 = anchor_lang::prelude::AccountLoader::<'_, SpotMarket>::load(move _44) -> [return: bb16, unwind continue];
    }

    bb5: {
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _101 = const _;
        _22 = &(*_101);
        _21 = &(*_22);
        _20 = move _21 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_21);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _100 = const _;
        _30 = &(*_100);
        _29 = &(*_30);
        _28 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _29) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_29);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = &(*_11);
        _35 = Location::<'_>::file(move _36) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_36);
        _34 = &_35;
        _33 = &(*_34);
        _32 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _33) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_33);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = &(*_11);
        _40 = Location::<'_>::line(move _41) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_41);
        _39 = &_40;
        _38 = &(*_39);
        _37 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _38) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_38);
        _27 = [move _28, move _32, move _37];
        StorageDead(_37);
        StorageDead(_32);
        StorageDead(_28);
        _26 = &_27;
        _25 = &(*_26);
        _24 = move _25 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_25);
        _19 = Arguments::<'_>::new_v1(move _20, move _24) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_24);
        StorageDead(_20);
        _18 = format(move _19) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_19);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_22);
        _17 = move _18;
        StorageDead(_18);
        _16 = &_17;
        _15 = &(*_16);
        _14 = <String as Deref>::deref(move _15) -> [return: bb13, unwind: bb42];
    }

    bb13: {
        _13 = &(*_14);
        StorageDead(_15);
        _12 = solana_program::log::sol_log(move _13) -> [return: bb14, unwind: bb42];
    }

    bb14: {
        StorageDead(_13);
        drop(_17) -> [return: bb15, unwind: bb43];
    }

    bb15: {
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_12);
        StorageLive(_42);
        _42 = error::ErrorCode::SpotMarketNotFound;
        _0 = std::result::Result::<Ref<'_, SpotMarket>, error::ErrorCode>::Err(move _42);
        StorageDead(_42);
        StorageDead(_11);
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb38;
    }

    bb16: {
        StorageDead(_44);
        _45 = discriminant(_43);
        switchInt(move _45) -> [0: bb18, 1: bb17, otherwise: bb3];
    }

    bb17: {
        StorageLive(_48);
        _48 = move ((_43 as Err).0: anchor_lang::error::Error);
        StorageLive(_49);
        _49 = Location::<'_>::caller() -> [return: bb19, unwind: bb41];
    }

    bb18: {
        StorageLive(_46);
        _46 = move ((_43 as Ok).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        StorageLive(_47);
        _47 = move _46;
        _0 = std::result::Result::<Ref<'_, SpotMarket>, error::ErrorCode>::Ok(move _47);
        StorageDead(_47);
        StorageDead(_46);
        goto -> bb37;
    }

    bb19: {
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _104 = const _;
        _60 = &(*_104);
        _59 = &(*_60);
        _58 = move _59 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_59);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = &_48;
        _67 = &(*_68);
        _66 = core::fmt::rt::Argument::<'_>::new_debug::<anchor_lang::error::Error>(move _67) -> [return: bb20, unwind: bb41];
    }

    bb20: {
        StorageDead(_67);
        _65 = [move _66];
        StorageDead(_66);
        _64 = &_65;
        _63 = &(*_64);
        _62 = move _63 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_63);
        _57 = Arguments::<'_>::new_v1(move _58, move _62) -> [return: bb21, unwind: bb41];
    }

    bb21: {
        StorageDead(_62);
        StorageDead(_58);
        _56 = format(move _57) -> [return: bb22, unwind: bb41];
    }

    bb22: {
        StorageDead(_57);
        StorageDead(_68);
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_60);
        _55 = move _56;
        StorageDead(_56);
        _54 = &_55;
        _53 = &(*_54);
        _52 = <String as Deref>::deref(move _53) -> [return: bb23, unwind: bb40];
    }

    bb23: {
        _51 = &(*_52);
        StorageDead(_53);
        _50 = solana_program::log::sol_log(move _51) -> [return: bb24, unwind: bb40];
    }

    bb24: {
        StorageDead(_51);
        drop(_55) -> [return: bb25, unwind: bb41];
    }

    bb25: {
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_52);
        StorageDead(_50);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _103 = const _;
        _79 = &(*_103);
        _78 = &(*_79);
        _77 = move _78 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_78);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _102 = const _;
        _87 = &(*_102);
        _86 = &(*_87);
        _85 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _86) -> [return: bb26, unwind: bb41];
    }

    bb26: {
        StorageDead(_86);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _93 = &(*_49);
        _92 = Location::<'_>::file(move _93) -> [return: bb27, unwind: bb41];
    }

    bb27: {
        StorageDead(_93);
        _91 = &_92;
        _90 = &(*_91);
        _89 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _90) -> [return: bb28, unwind: bb41];
    }

    bb28: {
        StorageDead(_90);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        _98 = &(*_49);
        _97 = Location::<'_>::line(move _98) -> [return: bb29, unwind: bb41];
    }

    bb29: {
        StorageDead(_98);
        _96 = &_97;
        _95 = &(*_96);
        _94 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _95) -> [return: bb30, unwind: bb41];
    }

    bb30: {
        StorageDead(_95);
        _84 = [move _85, move _89, move _94];
        StorageDead(_94);
        StorageDead(_89);
        StorageDead(_85);
        _83 = &_84;
        _82 = &(*_83);
        _81 = move _82 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_82);
        _76 = Arguments::<'_>::new_v1(move _77, move _81) -> [return: bb31, unwind: bb41];
    }

    bb31: {
        StorageDead(_81);
        StorageDead(_77);
        _75 = format(move _76) -> [return: bb32, unwind: bb41];
    }

    bb32: {
        StorageDead(_76);
        StorageDead(_97);
        StorageDead(_96);
        StorageDead(_92);
        StorageDead(_91);
        StorageDead(_87);
        StorageDead(_84);
        StorageDead(_83);
        StorageDead(_79);
        _74 = move _75;
        StorageDead(_75);
        _73 = &_74;
        _72 = &(*_73);
        _71 = <String as Deref>::deref(move _72) -> [return: bb33, unwind: bb39];
    }

    bb33: {
        _70 = &(*_71);
        StorageDead(_72);
        _69 = solana_program::log::sol_log(move _70) -> [return: bb34, unwind: bb39];
    }

    bb34: {
        StorageDead(_70);
        drop(_74) -> [return: bb35, unwind: bb41];
    }

    bb35: {
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_71);
        StorageDead(_69);
        StorageLive(_99);
        _99 = error::ErrorCode::UnableToLoadSpotMarketAccount;
        _0 = std::result::Result::<Ref<'_, SpotMarket>, error::ErrorCode>::Err(move _99);
        StorageDead(_99);
        StorageDead(_49);
        drop(_48) -> [return: bb36, unwind: bb44];
    }

    bb36: {
        StorageDead(_48);
        goto -> bb37;
    }

    bb37: {
        StorageDead(_2);
        _108 = discriminant(_43);
        _106 = const false;
        _107 = const false;
        StorageDead(_43);
        goto -> bb38;
    }

    bb38: {
        return;
    }

    bb39 (cleanup): {
        drop(_74) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_55) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_48) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_17) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        resume;
    }

    bb44 (cleanup): {
        _110 = discriminant(_43);
        goto -> bb43;
    }
}
