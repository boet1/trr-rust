// MIR for `state::user::<impl at programs/drift/src/state/user.rs:136:1: 136:10>::increment_total_withdraws` before PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:136:1: 136:10>::increment_total_withdraws(_1: &mut User, _2: u64, _3: i64, _4: u128) -> std::result::Result<(), error::ErrorCode> {
    debug self => _1;
    debug amount => _2;
    debug price => _3;
    debug precision => _4;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _5: u64;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _7: std::result::Result<u64, error::ErrorCode>;
    let mut _8: u128;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _10: std::result::Result<u128, error::ErrorCode>;
    let mut _11: u128;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _13: std::result::Result<u128, error::ErrorCode>;
    let mut _14: u128;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _16: std::result::Result<u128, error::ErrorCode>;
    let mut _17: u64;
    let mut _18: isize;
    let _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _20: !;
    let mut _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _22: u128;
    let mut _23: u128;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _25: std::result::Result<u128, error::ErrorCode>;
    let mut _26: i64;
    let mut _27: isize;
    let _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _29: !;
    let mut _30: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _31: u128;
    let mut _32: isize;
    let _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _36: u128;
    let mut _37: u128;
    let mut _38: isize;
    let _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _40: !;
    let mut _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _42: u128;
    let mut _43: isize;
    let _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _47: u64;
    let mut _48: u64;
    let mut _49: u64;
    let mut _50: u64;
    let mut _51: ();
    scope 1 {
        debug value => _5;
    }
    scope 2 {
        debug residual => _19;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _22;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _28;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _31;
        scope 9 {
        }
    }
    scope 10 {
        debug residual => _33;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _36;
        scope 13 {
        }
    }
    scope 14 {
        debug residual => _39;
        scope 15 {
        }
    }
    scope 16 {
        debug val => _42;
        scope 17 {
        }
    }
    scope 18 {
        debug residual => _44;
        scope 19 {
        }
    }
    scope 20 {
        debug val => _47;
        scope 21 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = _2;
        _16 = <u64 as Cast>::cast::<u128>(move _17) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_17);
        _15 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _16) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_16);
        _18 = discriminant(_15);
        switchInt(move _18) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_22);
        _22 = ((_15 as Continue).0: u128);
        _14 = _22;
        StorageDead(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = _3;
        _25 = <i64 as Cast>::cast::<u128>(move _26) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_19);
        _19 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_21);
        _21 = _19;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _21) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb31;
    }

    bb7: {
        StorageDead(_26);
        _24 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _25) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_25);
        _27 = discriminant(_24);
        switchInt(move _27) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_31);
        _31 = ((_24 as Continue).0: u128);
        _23 = _31;
        StorageDead(_31);
        _13 = <u128 as SafeMath>::safe_mul(move _14, move _23) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_28);
        _28 = ((_24 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_30);
        _30 = _28;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _30) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_30);
        StorageDead(_28);
        StorageDead(_23);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb28;
    }

    bb12: {
        StorageDead(_23);
        StorageDead(_14);
        _12 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _13) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_13);
        _32 = discriminant(_12);
        switchInt(move _32) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_36);
        _36 = ((_12 as Continue).0: u128);
        _11 = _36;
        StorageDead(_36);
        StorageLive(_37);
        _37 = _4;
        _10 = <u128 as SafeMath>::safe_div(move _11, move _37) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_33);
        _33 = ((_12 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_35);
        _35 = _33;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _35) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_35);
        StorageDead(_33);
        goto -> bb28;
    }

    bb17: {
        StorageDead(_37);
        StorageDead(_11);
        _9 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _10) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_10);
        _38 = discriminant(_9);
        switchInt(move _38) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_42);
        _42 = ((_9 as Continue).0: u128);
        _8 = _42;
        StorageDead(_42);
        _7 = <u128 as Cast>::cast::<u64>(move _8) -> [return: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_39);
        _39 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_41);
        _41 = _39;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _41) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_41);
        StorageDead(_39);
        goto -> bb29;
    }

    bb22: {
        StorageDead(_8);
        _6 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _7) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_7);
        _43 = discriminant(_6);
        switchInt(move _43) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_47);
        _47 = ((_6 as Continue).0: u64);
        _5 = _47;
        StorageDead(_47);
        StorageDead(_24);
        StorageDead(_15);
        StorageDead(_12);
        StorageDead(_9);
        StorageDead(_6);
        StorageLive(_48);
        StorageLive(_49);
        _49 = ((*_1).8: u64);
        StorageLive(_50);
        _50 = _5;
        _48 = core::num::<impl u64>::saturating_add(move _49, move _50) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_44);
        _44 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_46);
        _46 = _44;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _46) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_46);
        StorageDead(_44);
        goto -> bb30;
    }

    bb27: {
        StorageDead(_50);
        StorageDead(_49);
        ((*_1).8: u64) = move _48;
        StorageDead(_48);
        StorageLive(_51);
        _51 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _51);
        StorageDead(_51);
        StorageDead(_5);
        goto -> bb32;
    }

    bb28: {
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb29;
    }

    bb29: {
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb30;
    }

    bb30: {
        StorageDead(_24);
        goto -> bb31;
    }

    bb31: {
        StorageDead(_15);
        StorageDead(_12);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb32;
    }

    bb32: {
        return;
    }
}
