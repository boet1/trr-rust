// MIR for `order_params::<impl at programs/drift/src/state/order_params.rs:47:1: 47:17>::update_perp_auction_params` after PreCodegen

fn order_params::<impl at programs/drift/src/state/order_params.rs:47:1: 47:17>::update_perp_auction_params(_1: &mut order_params::OrderParams, _2: &PerpMarket, _3: i64, _4: bool) -> std::result::Result<bool, error::ErrorCode> {
    debug self => _1;
    debug perp_market => _2;
    debug oracle_price => _3;
    debug is_signed_msg => _4;
    let mut _0: std::result::Result<bool, error::ErrorCode>;
    let _5: bool;
    let mut _6: isize;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _8: std::result::Result<bool, error::ErrorCode>;
    let mut _9: &mut state::order_params::OrderParams;
    let mut _10: &state::perp_market::PerpMarket;
    let mut _11: i64;
    let mut _12: bool;
    let mut _13: isize;
    let _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _15: !;
    let mut _16: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _17: bool;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _19: std::result::Result<bool, error::ErrorCode>;
    let mut _20: &mut state::order_params::OrderParams;
    let mut _21: &state::perp_market::PerpMarket;
    let mut _22: i64;
    let mut _23: bool;
    let mut _24: &state::user::OrderType;
    let mut _25: &state::user::OrderType;
    let _26: state::user::OrderType;
    let mut _27: bool;
    let mut _28: isize;
    let _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _30: !;
    let mut _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _32: bool;
    let mut _33: bool;
    let mut _34: &state::user::OrderType;
    scope 1 {
        debug sanitized => _5;
    }
    scope 2 {
        debug residual => _14;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _17;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _29;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _32;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_5);
        _6 = discriminant(((*_1).0: state::user::OrderType));
        switchInt(move _6) -> [0: bb9, 1: bb2, 4: bb9, otherwise: bb1];
    }

    bb1: {
        _5 = const false;
        goto -> bb16;
    }

    bb2: {
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &mut (*_1);
        StorageLive(_10);
        _10 = &(*_2);
        StorageLive(_11);
        _11 = _3;
        StorageLive(_12);
        _12 = _4;
        _8 = order_params::OrderParams::update_perp_auction_params_limit_orders(move _9, move _10, move _11, move _12) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        _7 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _8) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_8);
        _13 = discriminant(_7);
        switchInt(move _13) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_17);
        _17 = ((_7 as Continue).0: bool);
        _5 = _17;
        StorageDead(_17);
        StorageDead(_7);
        goto -> bb16;
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_14);
        _14 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_16);
        _16 = _14;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _16) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_7);
        goto -> bb17;
    }

    bb9: {
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = &mut (*_1);
        StorageLive(_21);
        _21 = &(*_2);
        StorageLive(_22);
        _22 = _3;
        StorageLive(_23);
        StorageLive(_24);
        _24 = &((*_1).0: state::user::OrderType);
        StorageLive(_25);
        _34 = const _;
        _25 = &(*_34);
        _23 = <state::user::OrderType as PartialEq>::eq(move _24, move _25) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_25);
        StorageDead(_24);
        StorageLive(_27);
        _27 = _4;
        _19 = order_params::OrderParams::update_perp_auction_params_market_and_oracle_orders(move _20, move _21, move _22, move _23, move _27) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_27);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        _18 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _19) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_19);
        _28 = discriminant(_18);
        switchInt(move _28) -> [0: bb13, 1: bb14, otherwise: bb6];
    }

    bb13: {
        StorageLive(_32);
        _32 = ((_18 as Continue).0: bool);
        _5 = _32;
        StorageDead(_32);
        StorageDead(_18);
        goto -> bb16;
    }

    bb14: {
        StorageLive(_29);
        _29 = ((_18 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_31);
        _31 = _29;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _31) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_18);
        goto -> bb17;
    }

    bb16: {
        StorageLive(_33);
        _33 = _5;
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(move _33);
        StorageDead(_33);
        StorageDead(_5);
        goto -> bb18;
    }

    bb17: {
        StorageDead(_5);
        goto -> bb18;
    }

    bb18: {
        return;
    }
}
