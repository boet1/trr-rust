digraph Mir_0_3253 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn SerumContext::&lt;'a, 'b&gt;::load_open_orders::{closure#1}(_1: Closure(DefId(0:3253 ~ drift[d311]::state::fulfillment_params::serum::{impl#1}::load_open_orders::{closure#1}), [ReErased, ReErased, i32, Binder(extern &quot;RustCall&quot; fn((&amp;ReBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon }) &amp;ReErased mut [u8],)) -&gt; &amp;ReBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon }) [u8], [Region(BrAnon)]), ()]), _2: &amp;ReErased &amp;ReErased mut [u8]) -&gt; &amp;ReErased [u8]<br align="left"/>let _3: usize;<br align="left"/>let mut _4: usize;<br align="left"/>let mut _5: &amp;ReErased [u8];<br align="left"/>let mut _6: (usize, bool);<br align="left"/>let _7: &amp;ReErased [u8];<br align="left"/>let mut _8: (&amp;ReErased [u8], &amp;ReErased [u8]);<br align="left"/>let mut _9: &amp;ReErased [u8];<br align="left"/>let _10: &amp;ReErased [u8];<br align="left"/>let mut _11: (&amp;ReErased [u8], &amp;ReErased [u8]);<br align="left"/>let mut _12: &amp;ReErased [u8];<br align="left"/>let mut _13: usize;<br align="left"/>let mut _14: &amp;ReErased mut [u8];<br align="left"/>let mut _15: &amp;ReErased mut [u8];<br align="left"/>debug data =&gt; _2;<br align="left"/>debug data_len =&gt; _3;<br align="left"/>debug rest =&gt; _7;<br align="left"/>debug mid =&gt; _10;<br align="left"/>>;
    bb0__0_3253 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>_14 = deref_copy (*_2)<br/>_5 = &amp;(*_14)<br/></td></tr><tr><td align="left">_4 = core::slice::&lt;impl [u8]&gt;::len(move _5)</td></tr></table>>];
    bb1__0_3253 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>_6 = CheckedSub(_4, const 12_usize)<br/></td></tr><tr><td align="left">assert(!move (_6.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, move _4, const 12_usize)</td></tr></table>>];
    bb2__0_3253 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_3 = move (_6.0: usize)<br/>StorageDead(_4)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_15 = deref_copy (*_2)<br/>_9 = &amp;(*_15)<br/></td></tr><tr><td align="left">_8 = core::slice::&lt;impl [u8]&gt;::split_at(move _9, const 5_usize)</td></tr></table>>];
    bb3__0_3253 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageLive(_7)<br/>_7 = (_8.1: &amp;[u8])<br/>StorageDead(_8)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>_12 = &amp;(*_7)<br/>StorageLive(_13)<br/>_13 = _3<br/></td></tr><tr><td align="left">_11 = core::slice::&lt;impl [u8]&gt;::split_at(move _12, move _13)</td></tr></table>>];
    bb4__0_3253 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>StorageDead(_12)<br/>StorageLive(_10)<br/>_10 = (_11.0: &amp;[u8])<br/>StorageDead(_11)<br/>_0 = &amp;(*_10)<br/>StorageDead(_10)<br/>StorageDead(_7)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_3253 -> bb1__0_3253 [label="return"];
    bb1__0_3253 -> bb2__0_3253 [label="success"];
    bb2__0_3253 -> bb3__0_3253 [label="return"];
    bb3__0_3253 -> bb4__0_3253 [label="return"];
}
