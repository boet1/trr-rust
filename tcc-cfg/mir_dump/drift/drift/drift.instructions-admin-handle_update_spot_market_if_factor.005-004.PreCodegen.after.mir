// MIR for `admin::handle_update_spot_market_if_factor` after PreCodegen

fn admin::handle_update_spot_market_if_factor(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::AdminUpdateSpotMarket<'_>>, _2: u16, _3: u32, _4: u32) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug spot_market_index => _2;
    debug user_if_factor => _3;
    debug total_if_factor => _4;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _5: ();
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _7: std::result::Result<(), anchor_lang::error::Error>;
    let mut _8: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let _9: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _14: ();
    let _15: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _16: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _18: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _19: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _20: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _21: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _22: isize;
    let _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _24: !;
    let mut _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _26: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _27: ();
    let mut _28: &str;
    let _29: &str;
    let mut _30: &std::string::String;
    let _31: &std::string::String;
    let _32: std::string::String;
    let mut _34: std::fmt::Arguments<'_>;
    let mut _35: &[&str];
    let mut _36: &[&str; 1];
    let _37: &[&str; 1];
    let _38: [&str; 1];
    let mut _39: &[core::fmt::rt::Argument<'_>];
    let mut _40: &[core::fmt::rt::Argument<'_>; 1];
    let _41: &[core::fmt::rt::Argument<'_>; 1];
    let _42: [core::fmt::rt::Argument<'_>; 1];
    let mut _43: core::fmt::rt::Argument<'_>;
    let mut _44: &u16;
    let _45: &u16;
    let _46: &state::spot_market::SpotMarket;
    let mut _47: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _48: ();
    let mut _49: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _50: std::result::Result<(), error::ErrorCode>;
    let mut _51: bool;
    let mut _52: u16;
    let mut _53: &state::spot_market::SpotMarket;
    let mut _54: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _55: u16;
    let mut _56: ();
    let _58: ();
    let mut _59: &str;
    let _60: &str;
    let mut _61: &std::string::String;
    let _62: &std::string::String;
    let _63: std::string::String;
    let mut _65: std::fmt::Arguments<'_>;
    let mut _66: &[&str];
    let mut _67: &[&str; 2];
    let _68: &[&str; 2];
    let _69: [&str; 2];
    let mut _70: &[core::fmt::rt::Argument<'_>];
    let mut _71: &[core::fmt::rt::Argument<'_>; 1];
    let _72: &[core::fmt::rt::Argument<'_>; 1];
    let _73: [core::fmt::rt::Argument<'_>; 1];
    let mut _74: core::fmt::rt::Argument<'_>;
    let mut _75: &error::ErrorCode;
    let _76: &error::ErrorCode;
    let _77: ();
    let mut _78: &str;
    let _79: &str;
    let mut _80: error::ErrorCode;
    let mut _81: isize;
    let mut _83: !;
    let mut _84: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _86: ();
    let mut _87: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _88: std::result::Result<(), error::ErrorCode>;
    let mut _89: bool;
    let mut _90: u32;
    let mut _91: u32;
    let mut _92: ();
    let _94: ();
    let mut _95: &str;
    let _96: &str;
    let mut _97: &std::string::String;
    let _98: &std::string::String;
    let _99: std::string::String;
    let mut _101: std::fmt::Arguments<'_>;
    let mut _102: &[&str];
    let mut _103: &[&str; 2];
    let _104: &[&str; 2];
    let _105: [&str; 2];
    let mut _106: &[core::fmt::rt::Argument<'_>];
    let mut _107: &[core::fmt::rt::Argument<'_>; 1];
    let _108: &[core::fmt::rt::Argument<'_>; 1];
    let _109: [core::fmt::rt::Argument<'_>; 1];
    let mut _110: core::fmt::rt::Argument<'_>;
    let mut _111: &error::ErrorCode;
    let _112: &error::ErrorCode;
    let _113: ();
    let mut _114: &str;
    let _115: &str;
    let mut _116: error::ErrorCode;
    let mut _117: isize;
    let mut _119: !;
    let mut _120: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _122: ();
    let mut _123: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _124: std::result::Result<(), error::ErrorCode>;
    let mut _125: bool;
    let mut _126: u32;
    let mut _127: u32;
    let mut _128: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _129: std::result::Result<u32, error::ErrorCode>;
    let mut _130: isize;
    let mut _132: !;
    let mut _133: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _135: ();
    let _137: ();
    let mut _138: &str;
    let _139: &str;
    let mut _140: &std::string::String;
    let _141: &std::string::String;
    let _142: std::string::String;
    let mut _144: std::fmt::Arguments<'_>;
    let mut _145: &[&str];
    let mut _146: &[&str; 2];
    let _147: &[&str; 2];
    let _148: [&str; 2];
    let mut _149: &[core::fmt::rt::Argument<'_>];
    let mut _150: &[core::fmt::rt::Argument<'_>; 1];
    let _151: &[core::fmt::rt::Argument<'_>; 1];
    let _152: [core::fmt::rt::Argument<'_>; 1];
    let mut _153: core::fmt::rt::Argument<'_>;
    let mut _154: &error::ErrorCode;
    let _155: &error::ErrorCode;
    let _156: ();
    let mut _157: &str;
    let _158: &str;
    let mut _159: error::ErrorCode;
    let mut _160: isize;
    let mut _162: !;
    let mut _163: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _165: ();
    let mut _166: &str;
    let _167: &str;
    let mut _168: &std::string::String;
    let _169: &std::string::String;
    let _170: std::string::String;
    let mut _172: std::fmt::Arguments<'_>;
    let mut _173: &[&str];
    let mut _174: &[&str; 2];
    let _175: &[&str; 2];
    let _176: [&str; 2];
    let mut _177: &[core::fmt::rt::Argument<'_>];
    let mut _178: &[core::fmt::rt::Argument<'_>; 2];
    let _179: &[core::fmt::rt::Argument<'_>; 2];
    let _180: [core::fmt::rt::Argument<'_>; 2];
    let mut _181: core::fmt::rt::Argument<'_>;
    let mut _182: &u32;
    let _183: &u32;
    let _184: &state::spot_market::SpotMarket;
    let mut _185: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _186: core::fmt::rt::Argument<'_>;
    let mut _187: &u32;
    let _188: &u32;
    let _189: ();
    let mut _190: &str;
    let _191: &str;
    let mut _192: &std::string::String;
    let _193: &std::string::String;
    let _194: std::string::String;
    let mut _196: std::fmt::Arguments<'_>;
    let mut _197: &[&str];
    let mut _198: &[&str; 2];
    let _199: &[&str; 2];
    let _200: [&str; 2];
    let mut _201: &[core::fmt::rt::Argument<'_>];
    let mut _202: &[core::fmt::rt::Argument<'_>; 2];
    let _203: &[core::fmt::rt::Argument<'_>; 2];
    let _204: [core::fmt::rt::Argument<'_>; 2];
    let mut _205: core::fmt::rt::Argument<'_>;
    let mut _206: &u32;
    let _207: &u32;
    let _208: &state::spot_market::SpotMarket;
    let mut _209: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _210: core::fmt::rt::Argument<'_>;
    let mut _211: &u32;
    let _212: &u32;
    let mut _213: u32;
    let mut _214: &mut state::spot_market::SpotMarket;
    let mut _215: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _216: u32;
    let mut _217: &mut state::spot_market::SpotMarket;
    let mut _218: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _219: ();
    let mut _226: &mut instructions::admin::AdminUpdateSpotMarket<'_>;
    let mut _227: &mut instructions::admin::AdminUpdateSpotMarket<'_>;
    let mut _228: isize;
    let mut _229: isize;
    let mut _230: isize;
    let mut _231: isize;
    let mut _232: isize;
    let mut _233: isize;
    let mut _234: isize;
    let mut _235: isize;
    let mut _236: isize;
    let mut _237: isize;
    scope 1 {
        debug residual => _11;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _14;
        scope 4 {
        }
    }
    scope 5 {
        debug spot_market => _15;
        let _33: std::string::String;
        let _57: error::ErrorCode;
        let _82: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _85: ();
        let _93: error::ErrorCode;
        let _118: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _121: ();
        let _131: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _134: u32;
        let _136: error::ErrorCode;
        let _161: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _164: ();
        let _171: std::string::String;
        let _195: std::string::String;
        let mut _220: &[&str; 2];
        let mut _221: &[&str; 2];
        let mut _225: &[&str; 1];
        scope 10 {
            debug res => _33;
        }
        scope 11 {
            debug error_code => _57;
            let _64: std::string::String;
            let mut _224: &[&str; 2];
            scope 12 {
                debug res => _64;
            }
        }
        scope 13 {
            debug residual => _82;
            scope 14 {
            }
        }
        scope 15 {
            debug val => _85;
            scope 16 {
            }
        }
        scope 17 {
            debug error_code => _93;
            let _100: std::string::String;
            let mut _223: &[&str; 2];
            scope 18 {
                debug res => _100;
            }
        }
        scope 19 {
            debug residual => _118;
            scope 20 {
            }
        }
        scope 21 {
            debug val => _121;
            scope 22 {
            }
        }
        scope 23 {
            debug residual => _131;
            scope 24 {
            }
        }
        scope 25 {
            debug val => _134;
            scope 26 {
            }
        }
        scope 27 {
            debug error_code => _136;
            let _143: std::string::String;
            let mut _222: &[&str; 2];
            scope 28 {
                debug res => _143;
            }
        }
        scope 29 {
            debug residual => _161;
            scope 30 {
            }
        }
        scope 31 {
            debug val => _164;
            scope 32 {
            }
        }
        scope 33 {
            debug res => _171;
        }
        scope 34 {
            debug res => _195;
        }
    }
    scope 6 {
        debug residual => _23;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _26;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _226 = deref_copy (_1.1: &mut instructions::admin::AdminUpdateSpotMarket<'_>);
        _9 = &((*_226).2: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _8 = &(*_9);
        _7 = constraints::spot_market_valid(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        _6 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _7) -> [return: bb2, unwind: bb98];
    }

    bb2: {
        StorageDead(_7);
        _10 = discriminant(_6);
        switchInt(move _10) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_14);
        _14 = ((_6 as Continue).0: ());
        _5 = _14;
        StorageDead(_14);
        _228 = discriminant(_6);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _227 = deref_copy (_1.1: &mut instructions::admin::AdminUpdateSpotMarket<'_>);
        _20 = &((*_227).2: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _19 = anchor_lang::prelude::AccountLoader::<'_, SpotMarket>::load_mut(move _20) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_11);
        _11 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_13);
        _13 = move _11;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _13) -> [return: bb6, unwind: bb100];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_11);
        _234 = discriminant(_6);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb90;
    }

    bb7: {
        StorageDead(_20);
        StorageLive(_21);
        _21 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _18 = std::result::Result::<RefMut<'_, SpotMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _19, move _21) -> [return: bb8, unwind: bb98];
    }

    bb8: {
        StorageDead(_21);
        StorageDead(_19);
        _17 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _18) -> [return: bb9, unwind: bb98];
    }

    bb9: {
        StorageDead(_18);
        _22 = discriminant(_17);
        switchInt(move _22) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_26);
        _26 = move ((_17 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _16 = move _26;
        StorageDead(_26);
        _15 = &mut _16;
        _232 = discriminant(_17);
        StorageDead(_17);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _225 = const _;
        _37 = &(*_225);
        _36 = &(*_37);
        _35 = move _36 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_36);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = &(*_15);
        _46 = <RefMut<'_, SpotMarket> as Deref>::deref(move _47) -> [return: bb13, unwind: bb97];
    }

    bb11: {
        StorageLive(_23);
        _23 = ((_17 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_25);
        _25 = _23;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _25) -> [return: bb12, unwind: bb99];
    }

    bb12: {
        StorageDead(_25);
        StorageDead(_23);
        _230 = discriminant(_17);
        StorageDead(_17);
        goto -> bb89;
    }

    bb13: {
        StorageDead(_47);
        _45 = &((*_46).42: u16);
        _44 = &(*_45);
        _43 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _44) -> [return: bb14, unwind: bb97];
    }

    bb14: {
        StorageDead(_44);
        _42 = [move _43];
        StorageDead(_43);
        _41 = &_42;
        _40 = &(*_41);
        _39 = move _40 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_40);
        _34 = Arguments::<'_>::new_v1(move _35, move _39) -> [return: bb15, unwind: bb97];
    }

    bb15: {
        StorageDead(_39);
        StorageDead(_35);
        _33 = format(move _34) -> [return: bb16, unwind: bb97];
    }

    bb16: {
        StorageDead(_34);
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_37);
        _32 = move _33;
        StorageDead(_33);
        _31 = &_32;
        _30 = &(*_31);
        _29 = <String as Deref>::deref(move _30) -> [return: bb17, unwind: bb96];
    }

    bb17: {
        _28 = &(*_29);
        StorageDead(_30);
        _27 = solana_program::log::sol_log(move _28) -> [return: bb18, unwind: bb96];
    }

    bb18: {
        StorageDead(_28);
        drop(_32) -> [return: bb19, unwind: bb97];
    }

    bb19: {
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_27);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &(*_15);
        _53 = <RefMut<'_, SpotMarket> as Deref>::deref(move _54) -> [return: bb20, unwind: bb97];
    }

    bb20: {
        StorageDead(_54);
        _52 = ((*_53).42: u16);
        StorageLive(_55);
        _55 = _2;
        _51 = Eq(move _52, move _55);
        switchInt(move _51) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_52);
        StorageLive(_56);
        _56 = ();
        _50 = std::result::Result::<(), error::ErrorCode>::Ok(move _56);
        StorageDead(_56);
        goto -> bb30;
    }

    bb22: {
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_52);
        StorageLive(_57);
        _57 = error::ErrorCode::DefaultError;
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _224 = const _;
        _68 = &(*_224);
        _67 = &(*_68);
        _66 = move _67 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_67);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _76 = &_57;
        _75 = &(*_76);
        _74 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _75) -> [return: bb23, unwind: bb97];
    }

    bb23: {
        StorageDead(_75);
        _73 = [move _74];
        StorageDead(_74);
        _72 = &_73;
        _71 = &(*_72);
        _70 = move _71 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_71);
        _65 = Arguments::<'_>::new_v1(move _66, move _70) -> [return: bb24, unwind: bb97];
    }

    bb24: {
        StorageDead(_70);
        StorageDead(_66);
        _64 = format(move _65) -> [return: bb25, unwind: bb97];
    }

    bb25: {
        StorageDead(_65);
        StorageDead(_76);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_68);
        _63 = move _64;
        StorageDead(_64);
        _62 = &_63;
        _61 = &(*_62);
        _60 = <String as Deref>::deref(move _61) -> [return: bb26, unwind: bb95];
    }

    bb26: {
        _59 = &(*_60);
        StorageDead(_61);
        _58 = solana_program::log::sol_log(move _59) -> [return: bb27, unwind: bb95];
    }

    bb27: {
        StorageDead(_59);
        drop(_63) -> [return: bb28, unwind: bb97];
    }

    bb28: {
        StorageDead(_63);
        StorageDead(_62);
        StorageDead(_60);
        StorageDead(_58);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = const "spot_market_index dne spot_market.index";
        _78 = &(*_79);
        _77 = solana_program::log::sol_log(move _78) -> [return: bb29, unwind: bb97];
    }

    bb29: {
        StorageDead(_78);
        StorageDead(_79);
        StorageDead(_77);
        StorageLive(_80);
        _80 = _57;
        _50 = std::result::Result::<(), error::ErrorCode>::Err(move _80);
        StorageDead(_80);
        StorageDead(_57);
        goto -> bb30;
    }

    bb30: {
        StorageDead(_51);
        _49 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _50) -> [return: bb31, unwind: bb97];
    }

    bb31: {
        StorageDead(_50);
        _81 = discriminant(_49);
        switchInt(move _81) -> [0: bb32, 1: bb33, otherwise: bb4];
    }

    bb32: {
        StorageLive(_85);
        _85 = ((_49 as Continue).0: ());
        _48 = _85;
        StorageDead(_85);
        StorageDead(_49);
        StorageDead(_48);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        _90 = _3;
        StorageLive(_91);
        _91 = _4;
        _89 = Le(move _90, move _91);
        switchInt(move _89) -> [0: bb36, otherwise: bb35];
    }

    bb33: {
        StorageLive(_82);
        _82 = ((_49 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_84);
        _84 = _82;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _84) -> [return: bb34, unwind: bb97];
    }

    bb34: {
        StorageDead(_84);
        StorageDead(_82);
        StorageDead(_49);
        StorageDead(_48);
        goto -> bb88;
    }

    bb35: {
        StorageDead(_91);
        StorageDead(_90);
        StorageLive(_92);
        _92 = ();
        _88 = std::result::Result::<(), error::ErrorCode>::Ok(move _92);
        StorageDead(_92);
        goto -> bb44;
    }

    bb36: {
        StorageDead(_91);
        StorageDead(_90);
        StorageLive(_93);
        _93 = error::ErrorCode::DefaultError;
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _223 = const _;
        _104 = &(*_223);
        _103 = &(*_104);
        _102 = move _103 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_103);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _112 = &_93;
        _111 = &(*_112);
        _110 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _111) -> [return: bb37, unwind: bb97];
    }

    bb37: {
        StorageDead(_111);
        _109 = [move _110];
        StorageDead(_110);
        _108 = &_109;
        _107 = &(*_108);
        _106 = move _107 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_107);
        _101 = Arguments::<'_>::new_v1(move _102, move _106) -> [return: bb38, unwind: bb97];
    }

    bb38: {
        StorageDead(_106);
        StorageDead(_102);
        _100 = format(move _101) -> [return: bb39, unwind: bb97];
    }

    bb39: {
        StorageDead(_101);
        StorageDead(_112);
        StorageDead(_109);
        StorageDead(_108);
        StorageDead(_104);
        _99 = move _100;
        StorageDead(_100);
        _98 = &_99;
        _97 = &(*_98);
        _96 = <String as Deref>::deref(move _97) -> [return: bb40, unwind: bb94];
    }

    bb40: {
        _95 = &(*_96);
        StorageDead(_97);
        _94 = solana_program::log::sol_log(move _95) -> [return: bb41, unwind: bb94];
    }

    bb41: {
        StorageDead(_95);
        drop(_99) -> [return: bb42, unwind: bb97];
    }

    bb42: {
        StorageDead(_99);
        StorageDead(_98);
        StorageDead(_96);
        StorageDead(_94);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        _115 = const "user_if_factor must be <= total_if_factor";
        _114 = &(*_115);
        _113 = solana_program::log::sol_log(move _114) -> [return: bb43, unwind: bb97];
    }

    bb43: {
        StorageDead(_114);
        StorageDead(_115);
        StorageDead(_113);
        StorageLive(_116);
        _116 = _93;
        _88 = std::result::Result::<(), error::ErrorCode>::Err(move _116);
        StorageDead(_116);
        StorageDead(_93);
        goto -> bb44;
    }

    bb44: {
        StorageDead(_89);
        _87 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _88) -> [return: bb45, unwind: bb97];
    }

    bb45: {
        StorageDead(_88);
        _117 = discriminant(_87);
        switchInt(move _117) -> [0: bb46, 1: bb47, otherwise: bb4];
    }

    bb46: {
        StorageLive(_121);
        _121 = ((_87 as Continue).0: ());
        _86 = _121;
        StorageDead(_121);
        StorageDead(_87);
        StorageDead(_86);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        _126 = _4;
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _129 = <u128 as Cast>::cast::<u32>(const _) -> [return: bb49, unwind: bb97];
    }

    bb47: {
        StorageLive(_118);
        _118 = ((_87 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_120);
        _120 = _118;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _120) -> [return: bb48, unwind: bb97];
    }

    bb48: {
        StorageDead(_120);
        StorageDead(_118);
        StorageDead(_87);
        StorageDead(_86);
        goto -> bb88;
    }

    bb49: {
        _128 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _129) -> [return: bb50, unwind: bb97];
    }

    bb50: {
        StorageDead(_129);
        _130 = discriminant(_128);
        switchInt(move _130) -> [0: bb51, 1: bb52, otherwise: bb4];
    }

    bb51: {
        StorageLive(_134);
        _134 = ((_128 as Continue).0: u32);
        _127 = _134;
        StorageDead(_134);
        _125 = Le(move _126, move _127);
        switchInt(move _125) -> [0: bb55, otherwise: bb54];
    }

    bb52: {
        StorageLive(_131);
        _131 = ((_128 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_133);
        _133 = _131;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _133) -> [return: bb53, unwind: bb97];
    }

    bb53: {
        StorageDead(_133);
        StorageDead(_131);
        StorageDead(_128);
        StorageDead(_127);
        StorageDead(_126);
        StorageDead(_125);
        StorageDead(_124);
        goto -> bb87;
    }

    bb54: {
        StorageDead(_128);
        StorageDead(_127);
        StorageDead(_126);
        StorageLive(_135);
        _135 = ();
        _124 = std::result::Result::<(), error::ErrorCode>::Ok(move _135);
        StorageDead(_135);
        goto -> bb63;
    }

    bb55: {
        StorageDead(_128);
        StorageDead(_127);
        StorageDead(_126);
        StorageLive(_136);
        _136 = error::ErrorCode::DefaultError;
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        _222 = const _;
        _147 = &(*_222);
        _146 = &(*_147);
        _145 = move _146 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_146);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        _155 = &_136;
        _154 = &(*_155);
        _153 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _154) -> [return: bb56, unwind: bb97];
    }

    bb56: {
        StorageDead(_154);
        _152 = [move _153];
        StorageDead(_153);
        _151 = &_152;
        _150 = &(*_151);
        _149 = move _150 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_150);
        _144 = Arguments::<'_>::new_v1(move _145, move _149) -> [return: bb57, unwind: bb97];
    }

    bb57: {
        StorageDead(_149);
        StorageDead(_145);
        _143 = format(move _144) -> [return: bb58, unwind: bb97];
    }

    bb58: {
        StorageDead(_144);
        StorageDead(_155);
        StorageDead(_152);
        StorageDead(_151);
        StorageDead(_147);
        _142 = move _143;
        StorageDead(_143);
        _141 = &_142;
        _140 = &(*_141);
        _139 = <String as Deref>::deref(move _140) -> [return: bb59, unwind: bb93];
    }

    bb59: {
        _138 = &(*_139);
        StorageDead(_140);
        _137 = solana_program::log::sol_log(move _138) -> [return: bb60, unwind: bb93];
    }

    bb60: {
        StorageDead(_138);
        drop(_142) -> [return: bb61, unwind: bb97];
    }

    bb61: {
        StorageDead(_142);
        StorageDead(_141);
        StorageDead(_139);
        StorageDead(_137);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        _158 = const "total_if_factor must be <= 100%";
        _157 = &(*_158);
        _156 = solana_program::log::sol_log(move _157) -> [return: bb62, unwind: bb97];
    }

    bb62: {
        StorageDead(_157);
        StorageDead(_158);
        StorageDead(_156);
        StorageLive(_159);
        _159 = _136;
        _124 = std::result::Result::<(), error::ErrorCode>::Err(move _159);
        StorageDead(_159);
        StorageDead(_136);
        goto -> bb63;
    }

    bb63: {
        StorageDead(_125);
        _123 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _124) -> [return: bb64, unwind: bb97];
    }

    bb64: {
        StorageDead(_124);
        _160 = discriminant(_123);
        switchInt(move _160) -> [0: bb65, 1: bb66, otherwise: bb4];
    }

    bb65: {
        StorageLive(_164);
        _164 = ((_123 as Continue).0: ());
        _122 = _164;
        StorageDead(_164);
        StorageDead(_123);
        StorageDead(_122);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        _221 = const _;
        _175 = &(*_221);
        _174 = &(*_175);
        _173 = move _174 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_174);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        _185 = &(*_15);
        _184 = <RefMut<'_, SpotMarket> as Deref>::deref(move _185) -> [return: bb68, unwind: bb97];
    }

    bb66: {
        StorageLive(_161);
        _161 = ((_123 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_163);
        _163 = _161;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _163) -> [return: bb67, unwind: bb97];
    }

    bb67: {
        StorageDead(_163);
        StorageDead(_161);
        goto -> bb87;
    }

    bb68: {
        StorageDead(_185);
        _183 = &(((*_184).9: state::spot_market::InsuranceFund).8: u32);
        _182 = &(*_183);
        _181 = core::fmt::rt::Argument::<'_>::new_debug::<u32>(move _182) -> [return: bb69, unwind: bb97];
    }

    bb69: {
        StorageDead(_182);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        _188 = &_3;
        _187 = &(*_188);
        _186 = core::fmt::rt::Argument::<'_>::new_debug::<u32>(move _187) -> [return: bb70, unwind: bb97];
    }

    bb70: {
        StorageDead(_187);
        _180 = [move _181, move _186];
        StorageDead(_186);
        StorageDead(_181);
        _179 = &_180;
        _178 = &(*_179);
        _177 = move _178 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_178);
        _172 = Arguments::<'_>::new_v1(move _173, move _177) -> [return: bb71, unwind: bb97];
    }

    bb71: {
        StorageDead(_177);
        StorageDead(_173);
        _171 = format(move _172) -> [return: bb72, unwind: bb97];
    }

    bb72: {
        StorageDead(_172);
        StorageDead(_188);
        StorageDead(_184);
        StorageDead(_183);
        StorageDead(_180);
        StorageDead(_179);
        StorageDead(_175);
        _170 = move _171;
        StorageDead(_171);
        _169 = &_170;
        _168 = &(*_169);
        _167 = <String as Deref>::deref(move _168) -> [return: bb73, unwind: bb92];
    }

    bb73: {
        _166 = &(*_167);
        StorageDead(_168);
        _165 = solana_program::log::sol_log(move _166) -> [return: bb74, unwind: bb92];
    }

    bb74: {
        StorageDead(_166);
        drop(_170) -> [return: bb75, unwind: bb97];
    }

    bb75: {
        StorageDead(_170);
        StorageDead(_169);
        StorageDead(_167);
        StorageDead(_165);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        _220 = const _;
        _199 = &(*_220);
        _198 = &(*_199);
        _197 = move _198 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_198);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        _209 = &(*_15);
        _208 = <RefMut<'_, SpotMarket> as Deref>::deref(move _209) -> [return: bb76, unwind: bb97];
    }

    bb76: {
        StorageDead(_209);
        _207 = &(((*_208).9: state::spot_market::InsuranceFund).7: u32);
        _206 = &(*_207);
        _205 = core::fmt::rt::Argument::<'_>::new_debug::<u32>(move _206) -> [return: bb77, unwind: bb97];
    }

    bb77: {
        StorageDead(_206);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        _212 = &_4;
        _211 = &(*_212);
        _210 = core::fmt::rt::Argument::<'_>::new_debug::<u32>(move _211) -> [return: bb78, unwind: bb97];
    }

    bb78: {
        StorageDead(_211);
        _204 = [move _205, move _210];
        StorageDead(_210);
        StorageDead(_205);
        _203 = &_204;
        _202 = &(*_203);
        _201 = move _202 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_202);
        _196 = Arguments::<'_>::new_v1(move _197, move _201) -> [return: bb79, unwind: bb97];
    }

    bb79: {
        StorageDead(_201);
        StorageDead(_197);
        _195 = format(move _196) -> [return: bb80, unwind: bb97];
    }

    bb80: {
        StorageDead(_196);
        StorageDead(_212);
        StorageDead(_208);
        StorageDead(_207);
        StorageDead(_204);
        StorageDead(_203);
        StorageDead(_199);
        _194 = move _195;
        StorageDead(_195);
        _193 = &_194;
        _192 = &(*_193);
        _191 = <String as Deref>::deref(move _192) -> [return: bb81, unwind: bb91];
    }

    bb81: {
        _190 = &(*_191);
        StorageDead(_192);
        _189 = solana_program::log::sol_log(move _190) -> [return: bb82, unwind: bb91];
    }

    bb82: {
        StorageDead(_190);
        drop(_194) -> [return: bb83, unwind: bb97];
    }

    bb83: {
        StorageDead(_194);
        StorageDead(_193);
        StorageDead(_191);
        StorageDead(_189);
        StorageLive(_213);
        _213 = _3;
        StorageLive(_214);
        StorageLive(_215);
        _215 = &mut (*_15);
        _214 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _215) -> [return: bb84, unwind: bb97];
    }

    bb84: {
        StorageDead(_215);
        (((*_214).9: state::spot_market::InsuranceFund).8: u32) = move _213;
        StorageDead(_213);
        StorageDead(_214);
        StorageLive(_216);
        _216 = _4;
        StorageLive(_217);
        StorageLive(_218);
        _218 = &mut (*_15);
        _217 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _218) -> [return: bb85, unwind: bb97];
    }

    bb85: {
        StorageDead(_218);
        (((*_217).9: state::spot_market::InsuranceFund).7: u32) = move _216;
        StorageDead(_216);
        StorageDead(_217);
        StorageLive(_219);
        _219 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _219);
        StorageDead(_219);
        drop(_16) -> [return: bb86, unwind: bb98];
    }

    bb86: {
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb90;
    }

    bb87: {
        StorageDead(_123);
        StorageDead(_122);
        goto -> bb88;
    }

    bb88: {
        drop(_16) -> [return: bb89, unwind: bb98];
    }

    bb89: {
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb90;
    }

    bb90: {
        return;
    }

    bb91 (cleanup): {
        drop(_194) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        drop(_170) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        drop(_142) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        drop(_99) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        drop(_63) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb96 (cleanup): {
        drop(_32) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        drop(_16) -> [return: bb98, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        resume;
    }

    bb99 (cleanup): {
        _236 = discriminant(_17);
        goto -> bb98;
    }

    bb100 (cleanup): {
        _237 = discriminant(_6);
        goto -> bb98;
    }
}
