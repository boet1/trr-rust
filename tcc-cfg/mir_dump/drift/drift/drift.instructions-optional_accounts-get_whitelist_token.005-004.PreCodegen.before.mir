// MIR for `get_whitelist_token` before PreCodegen

fn get_whitelist_token(_1: &mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>) -> std::result::Result<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>, error::ErrorCode> {
    debug account_info_iter => _1;
    let mut _0: std::result::Result<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>, error::ErrorCode>;
    let _2: std::option::Option<&&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _3: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let _4: ();
    let mut _5: bool;
    let mut _6: &std::option::Option<&&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _7: !;
    let _8: ();
    let mut _9: &str;
    let _10: &str;
    let mut _11: error::ErrorCode;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _14: std::result::Result<&&anchor_lang::prelude::AccountInfo<'_>, error::ErrorCode>;
    let mut _15: std::option::Option<&&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _16: isize;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _23: std::result::Result<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>, error::ErrorCode>;
    let mut _24: std::result::Result<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>, anchor_lang::error::Error>;
    let mut _25: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _26: {closure@programs/drift/src/instructions/optional_accounts.rs:196:55: 196:58};
    let mut _27: isize;
    let mut _29: !;
    let mut _30: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _32: anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _33: &anchor_lang::prelude::AccountInfo<'_>;
    scope 1 {
        debug token_account_info => _2;
        let _12: &&anchor_lang::prelude::AccountInfo<'_>;
        let _17: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _20: &&anchor_lang::prelude::AccountInfo<'_>;
        scope 2 {
            debug token_account_info => _12;
            let _21: anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
            let _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _31: anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
            scope 7 {
                debug whitelist_token => _21;
            }
            scope 8 {
                debug residual => _28;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _31;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _17;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _20;
            scope 6 {
            }
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = &mut (*_1);
        _2 = Peekable::<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>::peek(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &_2;
        _5 = Option::<&&anchor_lang::prelude::AccountInfo<'_>>::is_none(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _5) -> [0: bb5, otherwise: bb3];
    }

    bb3: {
        StorageDead(_6);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = const "Could not find whitelist token";
        _9 = &(*_10);
        _8 = solana_program::log::sol_log(move _9) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_9);
        StorageDead(_10);
        StorageDead(_8);
        StorageLive(_11);
        _11 = error::ErrorCode::InvalidWhitelistToken;
        _0 = std::result::Result::<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>, error::ErrorCode>::Err(move _11);
        StorageDead(_11);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb19;
    }

    bb5: {
        StorageDead(_6);
        _4 = const ();
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = _2;
        _14 = <Option<&&anchor_lang::prelude::AccountInfo<'_>> as SafeUnwrap>::safe_unwrap(move _15) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_15);
        _13 = <std::result::Result<&&anchor_lang::prelude::AccountInfo<'_>, error::ErrorCode> as Try>::branch(move _14) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_14);
        _16 = discriminant(_13);
        switchInt(move _16) -> [0: bb8, 1: bb10, otherwise: bb9];
    }

    bb8: {
        StorageLive(_20);
        _20 = ((_13 as Continue).0: &&anchor_lang::prelude::AccountInfo<'_>);
        _12 = _20;
        StorageDead(_20);
        StorageDead(_13);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _33 = deref_copy (*_12);
        _25 = &(*_33);
        _24 = anchor_lang::prelude::Account::<'_, anchor_spl::token::TokenAccount>::try_from(move _25) -> [return: bb12, unwind continue];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        StorageLive(_17);
        _17 = ((_13 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_19);
        _19 = _17;
        _0 = <std::result::Result<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _19) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_13);
        goto -> bb18;
    }

    bb12: {
        StorageDead(_25);
        StorageLive(_26);
        _26 = {closure@programs/drift/src/instructions/optional_accounts.rs:196:55: 196:58};
        _23 = std::result::Result::<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/instructions/optional_accounts.rs:196:55: 196:58}>(move _24, move _26) -> [return: bb13, unwind: bb21];
    }

    bb13: {
        StorageDead(_26);
        StorageDead(_24);
        _22 = <std::result::Result<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>, error::ErrorCode> as Try>::branch(move _23) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_23);
        _27 = discriminant(_22);
        switchInt(move _27) -> [0: bb15, 1: bb16, otherwise: bb9];
    }

    bb15: {
        StorageLive(_31);
        _31 = move ((_22 as Continue).0: anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>);
        _21 = move _31;
        StorageDead(_31);
        StorageDead(_22);
        StorageLive(_32);
        _32 = move _21;
        _0 = std::result::Result::<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>, error::ErrorCode>::Ok(move _32);
        StorageDead(_32);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_2);
        goto -> bb20;
    }

    bb16: {
        StorageLive(_28);
        _28 = ((_22 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_30);
        _30 = _28;
        _0 = <std::result::Result<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _30) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_30);
        StorageDead(_28);
        StorageDead(_22);
        StorageDead(_21);
        goto -> bb18;
    }

    bb18: {
        StorageDead(_12);
        goto -> bb19;
    }

    bb19: {
        StorageDead(_2);
        goto -> bb20;
    }

    bb20: {
        return;
    }

    bb21 (cleanup): {
        resume;
    }
}
