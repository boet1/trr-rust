// MIR for `calculate_fee_pool` after PreCodegen

fn calculate_fee_pool(_1: &PerpMarket) -> std::result::Result<u128, error::ErrorCode> {
    debug market => _1;
    let mut _0: std::result::Result<u128, error::ErrorCode>;
    let _2: i128;
    let mut _3: std::result::Result<i128, error::ErrorCode>;
    let mut _4: u128;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _6: std::result::Result<u128, error::ErrorCode>;
    let mut _7: u128;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _9: std::result::Result<u128, error::ErrorCode>;
    let mut _10: u128;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _12: std::result::Result<u128, error::ErrorCode>;
    let mut _13: &state::perp_market::PerpMarket;
    let mut _14: isize;
    let _15: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _16: !;
    let mut _17: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _18: u128;
    let mut _19: u128;
    let mut _20: isize;
    let _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _24: u128;
    let mut _25: u128;
    let mut _26: isize;
    let _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _28: !;
    let mut _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _30: u128;
    let mut _32: bool;
    let mut _33: i128;
    let mut _34: i128;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _36: std::result::Result<u128, error::ErrorCode>;
    let mut _37: i128;
    let mut _38: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _39: std::result::Result<i128, error::ErrorCode>;
    let mut _40: i128;
    let mut _41: i128;
    let mut _42: isize;
    let mut _44: !;
    let mut _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _47: isize;
    let mut _49: !;
    let mut _50: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _52: u128;
    scope 1 {
        debug total_fee_minus_distributions_lower_bound => _2;
        let _31: u128;
        let _43: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _46: i128;
        let _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _51: u128;
        scope 14 {
            debug fee_pool => _31;
        }
        scope 15 {
            debug residual => _43;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _46;
            scope 18 {
            }
        }
        scope 19 {
            debug residual => _48;
            scope 20 {
            }
        }
        scope 21 {
            debug val => _51;
            scope 22 {
            }
        }
    }
    scope 2 {
        debug residual => _15;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _18;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _21;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _24;
        scope 9 {
        }
    }
    scope 10 {
        debug residual => _27;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _30;
        scope 13 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &(*_1);
        _12 = get_total_fee_lower_bound(move _13) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_13);
        _11 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _12) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_12);
        _14 = discriminant(_11);
        switchInt(move _14) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_18);
        _18 = ((_11 as Continue).0: u128);
        _10 = _18;
        StorageDead(_18);
        StorageLive(_19);
        _19 = (((*_1).1: state::perp_market::AMM).33: u128);
        _9 = <u128 as SafeMath>::safe_add(move _10, move _19) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_15);
        _15 = ((_11 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_17);
        _17 = _15;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _17) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb33;
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_10);
        _8 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _9) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_9);
        _20 = discriminant(_8);
        switchInt(move _20) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_24);
        _24 = ((_8 as Continue).0: u128);
        _7 = _24;
        StorageDead(_24);
        StorageLive(_25);
        _25 = (((*_1).1: state::perp_market::AMM).32: u128);
        _6 = <u128 as SafeMath>::safe_sub(move _7, move _25) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_21);
        _21 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_23);
        _23 = _21;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _23) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_23);
        StorageDead(_21);
        goto -> bb33;
    }

    bb12: {
        StorageDead(_25);
        StorageDead(_7);
        _5 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _6) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_6);
        _26 = discriminant(_5);
        switchInt(move _26) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_30);
        _30 = ((_5 as Continue).0: u128);
        _4 = _30;
        StorageDead(_30);
        _3 = <u128 as Cast>::cast::<i128>(move _4) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_27);
        _27 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_29);
        _29 = _27;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _29) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_29);
        StorageDead(_27);
        goto -> bb34;
    }

    bb17: {
        StorageDead(_4);
        _2 = std::result::Result::<i128, error::ErrorCode>::unwrap_or(move _3, const 0_i128) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_3);
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_5);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = (((*_1).1: state::perp_market::AMM).31: i128);
        StorageLive(_34);
        _34 = _2;
        _32 = Gt(move _33, move _34);
        switchInt(move _32) -> [0: bb30, otherwise: bb19];
    }

    bb19: {
        StorageDead(_34);
        StorageDead(_33);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = (((*_1).1: state::perp_market::AMM).31: i128);
        StorageLive(_41);
        _41 = _2;
        _39 = <i128 as SafeMath>::safe_sub(move _40, move _41) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_41);
        StorageDead(_40);
        _38 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _39) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_39);
        _42 = discriminant(_38);
        switchInt(move _42) -> [0: bb22, 1: bb23, otherwise: bb4];
    }

    bb22: {
        StorageLive(_46);
        _46 = ((_38 as Continue).0: i128);
        _37 = _46;
        StorageDead(_46);
        _36 = <i128 as Cast>::cast::<u128>(move _37) -> [return: bb25, unwind continue];
    }

    bb23: {
        StorageLive(_43);
        _43 = ((_38 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_45);
        _45 = _43;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _45) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_45);
        StorageDead(_43);
        StorageDead(_37);
        StorageDead(_36);
        goto -> bb32;
    }

    bb25: {
        StorageDead(_37);
        _35 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _36) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_36);
        _47 = discriminant(_35);
        switchInt(move _47) -> [0: bb27, 1: bb28, otherwise: bb4];
    }

    bb27: {
        StorageLive(_51);
        _51 = ((_35 as Continue).0: u128);
        _31 = _51;
        StorageDead(_51);
        StorageDead(_38);
        StorageDead(_35);
        goto -> bb31;
    }

    bb28: {
        StorageLive(_48);
        _48 = ((_35 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_50);
        _50 = _48;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _50) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_50);
        StorageDead(_48);
        goto -> bb32;
    }

    bb30: {
        StorageDead(_34);
        StorageDead(_33);
        _31 = const 0_u128;
        goto -> bb31;
    }

    bb31: {
        StorageDead(_32);
        StorageLive(_52);
        _52 = _31;
        _0 = std::result::Result::<u128, error::ErrorCode>::Ok(move _52);
        StorageDead(_52);
        StorageDead(_31);
        StorageDead(_2);
        goto -> bb36;
    }

    bb32: {
        StorageDead(_38);
        StorageDead(_35);
        StorageDead(_32);
        StorageDead(_31);
        goto -> bb35;
    }

    bb33: {
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb34;
    }

    bb34: {
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_5);
        goto -> bb35;
    }

    bb35: {
        StorageDead(_2);
        goto -> bb36;
    }

    bb36: {
        return;
    }
}
