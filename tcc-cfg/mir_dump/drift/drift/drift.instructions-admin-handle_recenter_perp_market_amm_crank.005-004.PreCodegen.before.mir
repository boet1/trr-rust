// MIR for `admin::handle_recenter_perp_market_amm_crank` before PreCodegen

fn admin::handle_recenter_perp_market_amm_crank(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::AdminUpdatePerpMarketAmmSummaryStats<'_>>, _2: Option<u128>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug depth => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _5: std::result::Result<(), anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let _7: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _12: ();
    let _13: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _14: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _16: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _17: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _18: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _19: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _20: isize;
    let _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _24: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _26: std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _28: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _29: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _30: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _31: {closure@programs/drift/src/macros.rs:70:40: 70:43};
    let mut _32: isize;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _38: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _39: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _40: isize;
    let mut _42: !;
    let mut _43: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _47: state::oracle::OraclePriceData;
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::oracle::OraclePriceData>;
    let mut _49: std::result::Result<state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _50: &state::oracle::OracleSource;
    let _51: &state::oracle::OracleSource;
    let _52: &state::perp_market::PerpMarket;
    let mut _53: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _54: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _55: u64;
    let mut _56: isize;
    let mut _58: !;
    let mut _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _61: ();
    let mut _62: &str;
    let _63: &str;
    let mut _64: &std::string::String;
    let _65: &std::string::String;
    let _66: std::string::String;
    let mut _68: std::fmt::Arguments<'_>;
    let mut _69: &[&str];
    let mut _70: &[&str; 1];
    let _71: &[&str; 1];
    let _72: [&str; 1];
    let mut _73: &[core::fmt::rt::Argument<'_>];
    let mut _74: &[core::fmt::rt::Argument<'_>; 1];
    let _75: &[core::fmt::rt::Argument<'_>; 1];
    let _76: [core::fmt::rt::Argument<'_>; 1];
    let mut _77: core::fmt::rt::Argument<'_>;
    let mut _78: &u16;
    let _79: &u16;
    let _80: &state::perp_market::PerpMarket;
    let mut _81: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _83: &state::perp_market::PerpMarket;
    let mut _84: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _86: &state::perp_market::PerpMarket;
    let mut _87: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _89: &state::perp_market::PerpMarket;
    let mut _90: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _92: &state::perp_market::PerpMarket;
    let mut _93: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _95: &state::perp_market::PerpMarket;
    let mut _96: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _98: &state::perp_market::PerpMarket;
    let mut _99: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _102: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _103: std::result::Result<u128, error::ErrorCode>;
    let mut _104: i64;
    let mut _105: isize;
    let mut _107: !;
    let mut _108: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _112: (i128, i128);
    let mut _113: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (i128, i128)>;
    let mut _114: std::result::Result<(i128, i128), error::ErrorCode>;
    let mut _115: &state::perp_market::AMM;
    let _116: &state::perp_market::AMM;
    let _117: &state::perp_market::PerpMarket;
    let mut _118: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _119: isize;
    let mut _121: !;
    let mut _122: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _124: ();
    let mut _125: isize;
    let mut _128: i128;
    let mut _129: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _130: std::result::Result<i128, error::ErrorCode>;
    let mut _131: i128;
    let mut _132: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _133: std::result::Result<i128, error::ErrorCode>;
    let mut _134: i128;
    let mut _135: i128;
    let mut _136: i128;
    let mut _137: isize;
    let mut _139: !;
    let mut _140: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _142: isize;
    let mut _144: !;
    let mut _145: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _148: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _149: std::result::Result<u128, error::ErrorCode>;
    let mut _150: u128;
    let mut _151: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _152: std::result::Result<u128, error::ErrorCode>;
    let mut _153: u128;
    let mut _154: u128;
    let mut _155: isize;
    let mut _157: !;
    let mut _158: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _160: isize;
    let mut _162: !;
    let mut _163: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _165: u128;
    let mut _166: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _167: std::result::Result<u128, error::ErrorCode>;
    let mut _168: u128;
    let mut _169: u128;
    let mut _170: u128;
    let mut _171: isize;
    let mut _173: !;
    let mut _174: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _176: ();
    let mut _177: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _178: std::result::Result<(), error::ErrorCode>;
    let mut _179: &mut state::perp_market::PerpMarket;
    let mut _180: &mut state::perp_market::PerpMarket;
    let mut _181: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _182: u128;
    let mut _183: u128;
    let mut _184: isize;
    let mut _186: !;
    let mut _187: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _189: ();
    let mut _190: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _191: std::result::Result<(), error::ErrorCode>;
    let mut _192: &state::perp_market::PerpMarket;
    let _193: &state::perp_market::PerpMarket;
    let mut _194: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _195: isize;
    let mut _197: !;
    let mut _198: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _201: &state::perp_market::PerpMarket;
    let mut _202: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _204: &state::perp_market::PerpMarket;
    let mut _205: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _207: &state::perp_market::PerpMarket;
    let mut _208: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _210: &state::perp_market::PerpMarket;
    let mut _211: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _213: &state::perp_market::PerpMarket;
    let mut _214: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _216: &state::perp_market::PerpMarket;
    let mut _217: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _218: ();
    let mut _219: &str;
    let _220: &str;
    let mut _221: &std::string::String;
    let _222: &std::string::String;
    let _223: std::string::String;
    let mut _225: std::fmt::Arguments<'_>;
    let mut _226: &[&str];
    let mut _227: &[&str; 2];
    let _228: &[&str; 2];
    let _229: [&str; 2];
    let mut _230: &[core::fmt::rt::Argument<'_>];
    let mut _231: &[core::fmt::rt::Argument<'_>; 2];
    let _232: &[core::fmt::rt::Argument<'_>; 2];
    let _233: [core::fmt::rt::Argument<'_>; 2];
    let mut _234: core::fmt::rt::Argument<'_>;
    let mut _235: &u128;
    let _236: &u128;
    let mut _237: core::fmt::rt::Argument<'_>;
    let mut _238: &u128;
    let _239: &u128;
    let _240: ();
    let mut _241: &str;
    let _242: &str;
    let mut _243: &std::string::String;
    let _244: &std::string::String;
    let _245: std::string::String;
    let mut _247: std::fmt::Arguments<'_>;
    let mut _248: &[&str];
    let mut _249: &[&str; 2];
    let _250: &[&str; 2];
    let _251: [&str; 2];
    let mut _252: &[core::fmt::rt::Argument<'_>];
    let mut _253: &[core::fmt::rt::Argument<'_>; 2];
    let _254: &[core::fmt::rt::Argument<'_>; 2];
    let _255: [core::fmt::rt::Argument<'_>; 2];
    let mut _256: core::fmt::rt::Argument<'_>;
    let mut _257: &u128;
    let _258: &u128;
    let mut _259: core::fmt::rt::Argument<'_>;
    let mut _260: &u128;
    let _261: &u128;
    let _262: ();
    let mut _263: &str;
    let _264: &str;
    let mut _265: &std::string::String;
    let _266: &std::string::String;
    let _267: std::string::String;
    let mut _269: std::fmt::Arguments<'_>;
    let mut _270: &[&str];
    let mut _271: &[&str; 2];
    let _272: &[&str; 2];
    let _273: [&str; 2];
    let mut _274: &[core::fmt::rt::Argument<'_>];
    let mut _275: &[core::fmt::rt::Argument<'_>; 2];
    let _276: &[core::fmt::rt::Argument<'_>; 2];
    let _277: [core::fmt::rt::Argument<'_>; 2];
    let mut _278: core::fmt::rt::Argument<'_>;
    let mut _279: &u128;
    let _280: &u128;
    let mut _281: core::fmt::rt::Argument<'_>;
    let mut _282: &u128;
    let _283: &u128;
    let _284: ();
    let mut _285: &str;
    let _286: &str;
    let mut _287: &std::string::String;
    let _288: &std::string::String;
    let _289: std::string::String;
    let mut _291: std::fmt::Arguments<'_>;
    let mut _292: &[&str];
    let mut _293: &[&str; 2];
    let _294: &[&str; 2];
    let _295: [&str; 2];
    let mut _296: &[core::fmt::rt::Argument<'_>];
    let mut _297: &[core::fmt::rt::Argument<'_>; 2];
    let _298: &[core::fmt::rt::Argument<'_>; 2];
    let _299: [core::fmt::rt::Argument<'_>; 2];
    let mut _300: core::fmt::rt::Argument<'_>;
    let mut _301: &u128;
    let _302: &u128;
    let mut _303: core::fmt::rt::Argument<'_>;
    let mut _304: &u128;
    let _305: &u128;
    let _306: ();
    let mut _307: &str;
    let _308: &str;
    let mut _309: &std::string::String;
    let _310: &std::string::String;
    let _311: std::string::String;
    let mut _313: std::fmt::Arguments<'_>;
    let mut _314: &[&str];
    let mut _315: &[&str; 2];
    let _316: &[&str; 2];
    let _317: [&str; 2];
    let mut _318: &[core::fmt::rt::Argument<'_>];
    let mut _319: &[core::fmt::rt::Argument<'_>; 2];
    let _320: &[core::fmt::rt::Argument<'_>; 2];
    let _321: [core::fmt::rt::Argument<'_>; 2];
    let mut _322: core::fmt::rt::Argument<'_>;
    let mut _323: &u128;
    let _324: &u128;
    let mut _325: core::fmt::rt::Argument<'_>;
    let mut _326: &u128;
    let _327: &u128;
    let _328: ();
    let mut _329: &str;
    let _330: &str;
    let mut _331: &std::string::String;
    let _332: &std::string::String;
    let _333: std::string::String;
    let mut _335: std::fmt::Arguments<'_>;
    let mut _336: &[&str];
    let mut _337: &[&str; 2];
    let _338: &[&str; 2];
    let _339: [&str; 2];
    let mut _340: &[core::fmt::rt::Argument<'_>];
    let mut _341: &[core::fmt::rt::Argument<'_>; 2];
    let _342: &[core::fmt::rt::Argument<'_>; 2];
    let _343: [core::fmt::rt::Argument<'_>; 2];
    let mut _344: core::fmt::rt::Argument<'_>;
    let mut _345: &u128;
    let _346: &u128;
    let mut _347: core::fmt::rt::Argument<'_>;
    let mut _348: &u128;
    let _349: &u128;
    let mut _352: (i128, i128);
    let mut _353: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (i128, i128)>;
    let mut _354: std::result::Result<(i128, i128), error::ErrorCode>;
    let mut _355: &state::perp_market::AMM;
    let _356: &state::perp_market::AMM;
    let _357: &state::perp_market::PerpMarket;
    let mut _358: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _359: isize;
    let mut _361: !;
    let mut _362: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _364: ();
    let mut _365: &str;
    let _366: &str;
    let mut _367: &std::string::String;
    let _368: &std::string::String;
    let _369: std::string::String;
    let mut _371: std::fmt::Arguments<'_>;
    let mut _372: &[&str];
    let mut _373: &[&str; 2];
    let _374: &[&str; 2];
    let _375: [&str; 2];
    let mut _376: &[core::fmt::rt::Argument<'_>];
    let mut _377: &[core::fmt::rt::Argument<'_>; 2];
    let _378: &[core::fmt::rt::Argument<'_>; 2];
    let _379: [core::fmt::rt::Argument<'_>; 2];
    let mut _380: core::fmt::rt::Argument<'_>;
    let mut _381: &i128;
    let _382: &i128;
    let mut _383: core::fmt::rt::Argument<'_>;
    let mut _384: &i128;
    let _385: &i128;
    let _386: ();
    let mut _387: &str;
    let _388: &str;
    let mut _389: &std::string::String;
    let _390: &std::string::String;
    let _391: std::string::String;
    let mut _393: std::fmt::Arguments<'_>;
    let mut _394: &[&str];
    let mut _395: &[&str; 2];
    let _396: &[&str; 2];
    let _397: [&str; 2];
    let mut _398: &[core::fmt::rt::Argument<'_>];
    let mut _399: &[core::fmt::rt::Argument<'_>; 2];
    let _400: &[core::fmt::rt::Argument<'_>; 2];
    let _401: [core::fmt::rt::Argument<'_>; 2];
    let mut _402: core::fmt::rt::Argument<'_>;
    let mut _403: &i128;
    let _404: &i128;
    let mut _405: core::fmt::rt::Argument<'_>;
    let mut _406: &i128;
    let _407: &i128;
    let mut _408: ();
    let mut _418: &mut instructions::admin::AdminUpdatePerpMarketAmmSummaryStats<'_>;
    let mut _419: &mut instructions::admin::AdminUpdatePerpMarketAmmSummaryStats<'_>;
    let mut _420: &mut instructions::admin::AdminUpdatePerpMarketAmmSummaryStats<'_>;
    let mut _421: &mut instructions::admin::AdminUpdatePerpMarketAmmSummaryStats<'_>;
    let mut _422: isize;
    let mut _423: isize;
    let mut _424: isize;
    let mut _425: isize;
    let mut _426: isize;
    let mut _427: isize;
    let mut _428: isize;
    let mut _429: isize;
    let mut _430: isize;
    let mut _431: isize;
    let mut _432: isize;
    let mut _433: isize;
    let mut _434: isize;
    let mut _435: isize;
    let mut _436: isize;
    let mut _437: isize;
    let mut _438: isize;
    let mut _439: isize;
    let mut _440: isize;
    let mut _441: isize;
    scope 1 {
        debug residual => _9;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _12;
        scope 4 {
        }
    }
    scope 5 {
        debug perp_market => _13;
        let _25: &mut std::cell::Ref<'_, state::spot_market::SpotMarket>;
        let _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _36: std::cell::Ref<'_, state::spot_market::SpotMarket>;
        scope 10 {
            debug spot_market => _25;
            let _37: anchor_lang::prelude::Clock;
            let _41: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
            let _44: anchor_lang::prelude::Clock;
            scope 15 {
                debug clock => _37;
                let _45: &anchor_lang::prelude::AccountInfo<'_>;
                scope 20 {
                    debug price_oracle => _45;
                    let _46: i64;
                    let _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _60: state::oracle::OraclePriceData;
                    scope 21 {
                        debug oracle_price => _46;
                        let _67: std::string::String;
                        let _82: u128;
                        let mut _417: &[&str; 1];
                        scope 26 {
                            debug res => _67;
                        }
                        scope 27 {
                            debug base_asset_reserve_before => _82;
                            let _85: u128;
                            scope 28 {
                                debug quote_asset_reserve_before => _85;
                                let _88: u128;
                                scope 29 {
                                    debug sqrt_k_before => _88;
                                    let _91: u128;
                                    scope 30 {
                                        debug peg_multiplier_before => _91;
                                        let _94: u128;
                                        scope 31 {
                                            debug max_base_asset_reserve_before => _94;
                                            let _97: u128;
                                            scope 32 {
                                                debug min_base_asset_reserve_before => _97;
                                                let mut _100: u128;
                                                scope 33 {
                                                    debug sqrt_k => _100;
                                                    let _101: u128;
                                                    let _106: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _109: u128;
                                                    scope 34 {
                                                        debug peg_multiplier => _101;
                                                        let _110: i128;
                                                        let _111: i128;
                                                        let _120: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _123: (i128, i128);
                                                        scope 39 {
                                                            debug max_bids_before => _110;
                                                            debug max_asks_before => _111;
                                                            let _185: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _188: ();
                                                            let _196: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _199: ();
                                                            let _200: u128;
                                                            scope 44 {
                                                                debug depth => _126;
                                                                let _126: u128;
                                                                let _127: u128;
                                                                let _138: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _141: i128;
                                                                let _143: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _146: i128;
                                                                scope 45 {
                                                                    debug base_depth => _127;
                                                                    let _147: u128;
                                                                    let _156: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _159: u128;
                                                                    let _161: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _164: u128;
                                                                    scope 54 {
                                                                        debug quote_depth => _147;
                                                                        let _172: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _175: u128;
                                                                        scope 63 {
                                                                            debug residual => _172;
                                                                            scope 64 {
                                                                            }
                                                                        }
                                                                        scope 65 {
                                                                            debug val => _175;
                                                                            scope 66 {
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 55 {
                                                                        debug residual => _156;
                                                                        scope 56 {
                                                                        }
                                                                    }
                                                                    scope 57 {
                                                                        debug val => _159;
                                                                        scope 58 {
                                                                        }
                                                                    }
                                                                    scope 59 {
                                                                        debug residual => _161;
                                                                        scope 60 {
                                                                        }
                                                                    }
                                                                    scope 61 {
                                                                        debug val => _164;
                                                                        scope 62 {
                                                                        }
                                                                    }
                                                                }
                                                                scope 46 {
                                                                    debug residual => _138;
                                                                    scope 47 {
                                                                    }
                                                                }
                                                                scope 48 {
                                                                    debug val => _141;
                                                                    scope 49 {
                                                                    }
                                                                }
                                                                scope 50 {
                                                                    debug residual => _143;
                                                                    scope 51 {
                                                                    }
                                                                }
                                                                scope 52 {
                                                                    debug val => _146;
                                                                    scope 53 {
                                                                    }
                                                                }
                                                            }
                                                            scope 67 {
                                                                debug residual => _185;
                                                                scope 68 {
                                                                }
                                                            }
                                                            scope 69 {
                                                                debug val => _188;
                                                                scope 70 {
                                                                }
                                                            }
                                                            scope 71 {
                                                                debug residual => _196;
                                                                scope 72 {
                                                                }
                                                            }
                                                            scope 73 {
                                                                debug val => _199;
                                                                scope 74 {
                                                                }
                                                            }
                                                            scope 75 {
                                                                debug base_asset_reserve_after => _200;
                                                                let _203: u128;
                                                                scope 76 {
                                                                    debug quote_asset_reserve_after => _203;
                                                                    let _206: u128;
                                                                    scope 77 {
                                                                        debug sqrt_k_after => _206;
                                                                        let _209: u128;
                                                                        scope 78 {
                                                                            debug peg_multiplier_after => _209;
                                                                            let _212: u128;
                                                                            scope 79 {
                                                                                debug max_base_asset_reserve_after => _212;
                                                                                let _215: u128;
                                                                                scope 80 {
                                                                                    debug min_base_asset_reserve_after => _215;
                                                                                    let _224: std::string::String;
                                                                                    let _246: std::string::String;
                                                                                    let _268: std::string::String;
                                                                                    let _290: std::string::String;
                                                                                    let _312: std::string::String;
                                                                                    let _334: std::string::String;
                                                                                    let _350: i128;
                                                                                    let _351: i128;
                                                                                    let _360: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _363: (i128, i128);
                                                                                    let mut _411: &[&str; 2];
                                                                                    let mut _412: &[&str; 2];
                                                                                    let mut _413: &[&str; 2];
                                                                                    let mut _414: &[&str; 2];
                                                                                    let mut _415: &[&str; 2];
                                                                                    let mut _416: &[&str; 2];
                                                                                    scope 81 {
                                                                                        debug res => _224;
                                                                                    }
                                                                                    scope 82 {
                                                                                        debug res => _246;
                                                                                    }
                                                                                    scope 83 {
                                                                                        debug res => _268;
                                                                                    }
                                                                                    scope 84 {
                                                                                        debug res => _290;
                                                                                    }
                                                                                    scope 85 {
                                                                                        debug res => _312;
                                                                                    }
                                                                                    scope 86 {
                                                                                        debug res => _334;
                                                                                    }
                                                                                    scope 87 {
                                                                                        debug max_bids_after => _350;
                                                                                        debug max_asks_after => _351;
                                                                                        let _370: std::string::String;
                                                                                        let _392: std::string::String;
                                                                                        let mut _409: &[&str; 2];
                                                                                        let mut _410: &[&str; 2];
                                                                                        scope 92 {
                                                                                            debug res => _370;
                                                                                        }
                                                                                        scope 93 {
                                                                                            debug res => _392;
                                                                                        }
                                                                                    }
                                                                                    scope 88 {
                                                                                        debug residual => _360;
                                                                                        scope 89 {
                                                                                        }
                                                                                    }
                                                                                    scope 90 {
                                                                                        debug val => _363;
                                                                                        scope 91 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        scope 40 {
                                                            debug residual => _120;
                                                            scope 41 {
                                                            }
                                                        }
                                                        scope 42 {
                                                            debug val => _123;
                                                            scope 43 {
                                                            }
                                                        }
                                                    }
                                                    scope 35 {
                                                        debug residual => _106;
                                                        scope 36 {
                                                        }
                                                    }
                                                    scope 37 {
                                                        debug val => _109;
                                                        scope 38 {
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    scope 22 {
                        debug residual => _57;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug val => _60;
                        scope 25 {
                        }
                    }
                }
            }
            scope 16 {
                debug residual => _41;
                scope 17 {
                }
            }
            scope 18 {
                debug val => _44;
                scope 19 {
                }
            }
        }
        scope 11 {
            debug residual => _33;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _36;
            scope 14 {
            }
        }
    }
    scope 6 {
        debug residual => _21;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _24;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _418 = deref_copy (_1.1: &mut instructions::admin::AdminUpdatePerpMarketAmmSummaryStats<'_>);
        _7 = &((*_418).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _6 = &(*_7);
        _5 = constraints::perp_market_valid(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb188];
    }

    bb2: {
        StorageDead(_5);
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_4 as Continue).0: ());
        _3 = _12;
        StorageDead(_12);
        _422 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _419 = deref_copy (_1.1: &mut instructions::admin::AdminUpdatePerpMarketAmmSummaryStats<'_>);
        _18 = &((*_419).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _17 = anchor_lang::prelude::AccountLoader::<'_, PerpMarket>::load_mut(move _18) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _11) -> [return: bb6, unwind: bb192];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _436 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb176;
    }

    bb7: {
        StorageDead(_18);
        StorageLive(_19);
        _19 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _16 = std::result::Result::<RefMut<'_, PerpMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _17, move _19) -> [return: bb8, unwind: bb188];
    }

    bb8: {
        StorageDead(_19);
        StorageDead(_17);
        _15 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _16) -> [return: bb9, unwind: bb188];
    }

    bb9: {
        StorageDead(_16);
        _20 = discriminant(_15);
        switchInt(move _20) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_24);
        _24 = move ((_15 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _14 = move _24;
        StorageDead(_24);
        _13 = &mut _14;
        _426 = discriminant(_15);
        StorageDead(_15);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _420 = deref_copy (_1.1: &mut instructions::admin::AdminUpdatePerpMarketAmmSummaryStats<'_>);
        _30 = &((*_420).3: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _29 = anchor_lang::prelude::AccountLoader::<'_, SpotMarket>::load(move _30) -> [return: bb13, unwind: bb187];
    }

    bb11: {
        StorageLive(_21);
        _21 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_23);
        _23 = _21;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _23) -> [return: bb12, unwind: bb191];
    }

    bb12: {
        StorageDead(_23);
        StorageDead(_21);
        _424 = discriminant(_15);
        StorageDead(_15);
        goto -> bb175;
    }

    bb13: {
        StorageDead(_30);
        StorageLive(_31);
        _31 = {closure@programs/drift/src/macros.rs:70:40: 70:43};
        _28 = std::result::Result::<Ref<'_, SpotMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:70:40: 70:43}>(move _29, move _31) -> [return: bb14, unwind: bb187];
    }

    bb14: {
        StorageDead(_31);
        StorageDead(_29);
        _27 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _28) -> [return: bb15, unwind: bb187];
    }

    bb15: {
        StorageDead(_28);
        _32 = discriminant(_27);
        switchInt(move _32) -> [0: bb16, 1: bb17, otherwise: bb4];
    }

    bb16: {
        StorageLive(_36);
        _36 = move ((_27 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _26 = move _36;
        StorageDead(_36);
        _25 = &mut _26;
        _430 = discriminant(_27);
        StorageDead(_27);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb19, unwind: bb186];
    }

    bb17: {
        StorageLive(_33);
        _33 = ((_27 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_35);
        _35 = _33;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _35) -> [return: bb18, unwind: bb190];
    }

    bb18: {
        StorageDead(_35);
        StorageDead(_33);
        _428 = discriminant(_27);
        StorageDead(_27);
        goto -> bb174;
    }

    bb19: {
        _38 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _39) -> [return: bb20, unwind: bb186];
    }

    bb20: {
        StorageDead(_39);
        _40 = discriminant(_38);
        switchInt(move _40) -> [0: bb21, 1: bb22, otherwise: bb4];
    }

    bb21: {
        StorageLive(_44);
        _44 = move ((_38 as Continue).0: anchor_lang::prelude::Clock);
        _37 = move _44;
        StorageDead(_44);
        _432 = discriminant(_38);
        StorageDead(_38);
        StorageLive(_45);
        _421 = deref_copy (_1.1: &mut instructions::admin::AdminUpdatePerpMarketAmmSummaryStats<'_>);
        _45 = &((*_421).4: anchor_lang::prelude::AccountInfo<'_>);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = &(*_13);
        _52 = <RefMut<'_, PerpMarket> as Deref>::deref(move _53) -> [return: bb24, unwind: bb186];
    }

    bb22: {
        StorageLive(_41);
        _41 = move ((_38 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_43);
        _43 = move _41;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _43) -> [return: bb23, unwind: bb189];
    }

    bb23: {
        StorageDead(_43);
        StorageDead(_41);
        _434 = discriminant(_38);
        StorageDead(_38);
        goto -> bb173;
    }

    bb24: {
        StorageDead(_53);
        _51 = &(((*_52).1: state::perp_market::AMM).72: state::oracle::OracleSource);
        _50 = &(*_51);
        StorageLive(_54);
        _54 = &(*_45);
        StorageLive(_55);
        _55 = (_37.0: u64);
        _49 = get_oracle_price(move _50, move _54, move _55) -> [return: bb25, unwind: bb186];
    }

    bb25: {
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_50);
        _48 = <std::result::Result<OraclePriceData, error::ErrorCode> as Try>::branch(move _49) -> [return: bb26, unwind: bb186];
    }

    bb26: {
        StorageDead(_49);
        _56 = discriminant(_48);
        switchInt(move _56) -> [0: bb27, 1: bb28, otherwise: bb4];
    }

    bb27: {
        StorageLive(_60);
        _60 = ((_48 as Continue).0: state::oracle::OraclePriceData);
        _47 = _60;
        StorageDead(_60);
        StorageLive(_46);
        _46 = (_47.0: i64);
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_48);
        StorageDead(_47);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _417 = const _;
        _71 = &(*_417);
        _70 = &(*_71);
        _69 = move _70 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_70);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        _81 = &(*_13);
        _80 = <RefMut<'_, PerpMarket> as Deref>::deref(move _81) -> [return: bb30, unwind: bb186];
    }

    bb28: {
        StorageLive(_57);
        _57 = ((_48 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_59);
        _59 = _57;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _59) -> [return: bb29, unwind: bb186];
    }

    bb29: {
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_48);
        StorageDead(_47);
        goto -> bb172;
    }

    bb30: {
        StorageDead(_81);
        _79 = &((*_80).21: u16);
        _78 = &(*_79);
        _77 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _78) -> [return: bb31, unwind: bb186];
    }

    bb31: {
        StorageDead(_78);
        _76 = [move _77];
        StorageDead(_77);
        _75 = &_76;
        _74 = &(*_75);
        _73 = move _74 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_74);
        _68 = Arguments::<'_>::new_v1(move _69, move _73) -> [return: bb32, unwind: bb186];
    }

    bb32: {
        StorageDead(_73);
        StorageDead(_69);
        _67 = format(move _68) -> [return: bb33, unwind: bb186];
    }

    bb33: {
        StorageDead(_68);
        StorageDead(_80);
        StorageDead(_79);
        StorageDead(_76);
        StorageDead(_75);
        StorageDead(_71);
        _66 = move _67;
        StorageDead(_67);
        _65 = &_66;
        _64 = &(*_65);
        _63 = <String as Deref>::deref(move _64) -> [return: bb34, unwind: bb185];
    }

    bb34: {
        _62 = &(*_63);
        StorageDead(_64);
        _61 = solana_program::log::sol_log(move _62) -> [return: bb35, unwind: bb185];
    }

    bb35: {
        StorageDead(_62);
        drop(_66) -> [return: bb36, unwind: bb186];
    }

    bb36: {
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_61);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = &(*_13);
        _83 = <RefMut<'_, PerpMarket> as Deref>::deref(move _84) -> [return: bb37, unwind: bb186];
    }

    bb37: {
        StorageDead(_84);
        _82 = (((*_83).1: state::perp_market::AMM).5: u128);
        StorageDead(_83);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _87 = &(*_13);
        _86 = <RefMut<'_, PerpMarket> as Deref>::deref(move _87) -> [return: bb38, unwind: bb186];
    }

    bb38: {
        StorageDead(_87);
        _85 = (((*_86).1: state::perp_market::AMM).6: u128);
        StorageDead(_86);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        _90 = &(*_13);
        _89 = <RefMut<'_, PerpMarket> as Deref>::deref(move _90) -> [return: bb39, unwind: bb186];
    }

    bb39: {
        StorageDead(_90);
        _88 = (((*_89).1: state::perp_market::AMM).10: u128);
        StorageDead(_89);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _93 = &(*_13);
        _92 = <RefMut<'_, PerpMarket> as Deref>::deref(move _93) -> [return: bb40, unwind: bb186];
    }

    bb40: {
        StorageDead(_93);
        _91 = (((*_92).1: state::perp_market::AMM).11: u128);
        StorageDead(_92);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = &(*_13);
        _95 = <RefMut<'_, PerpMarket> as Deref>::deref(move _96) -> [return: bb41, unwind: bb186];
    }

    bb41: {
        StorageDead(_96);
        _94 = (((*_95).1: state::perp_market::AMM).9: u128);
        StorageDead(_95);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = &(*_13);
        _98 = <RefMut<'_, PerpMarket> as Deref>::deref(move _99) -> [return: bb42, unwind: bb186];
    }

    bb42: {
        StorageDead(_99);
        _97 = (((*_98).1: state::perp_market::AMM).8: u128);
        StorageDead(_98);
        StorageLive(_100);
        _100 = _88;
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _104 = _46;
        _103 = <i64 as Cast>::cast::<u128>(move _104) -> [return: bb43, unwind: bb186];
    }

    bb43: {
        StorageDead(_104);
        _102 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _103) -> [return: bb44, unwind: bb186];
    }

    bb44: {
        StorageDead(_103);
        _105 = discriminant(_102);
        switchInt(move _105) -> [0: bb45, 1: bb46, otherwise: bb4];
    }

    bb45: {
        StorageLive(_109);
        _109 = ((_102 as Continue).0: u128);
        _101 = _109;
        StorageDead(_109);
        StorageDead(_102);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        _118 = &(*_13);
        _117 = <RefMut<'_, PerpMarket> as Deref>::deref(move _118) -> [return: bb48, unwind: bb186];
    }

    bb46: {
        StorageLive(_106);
        _106 = ((_102 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_108);
        _108 = _106;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _108) -> [return: bb47, unwind: bb186];
    }

    bb47: {
        StorageDead(_108);
        StorageDead(_106);
        StorageDead(_102);
        goto -> bb171;
    }

    bb48: {
        StorageDead(_118);
        _116 = &((*_117).1: state::perp_market::AMM);
        _115 = &(*_116);
        _114 = calculate_market_open_bids_asks(move _115) -> [return: bb49, unwind: bb186];
    }

    bb49: {
        StorageDead(_115);
        _113 = <std::result::Result<(i128, i128), error::ErrorCode> as Try>::branch(move _114) -> [return: bb50, unwind: bb186];
    }

    bb50: {
        StorageDead(_114);
        _119 = discriminant(_113);
        switchInt(move _119) -> [0: bb51, 1: bb52, otherwise: bb4];
    }

    bb51: {
        StorageLive(_123);
        _123 = ((_113 as Continue).0: (i128, i128));
        _112 = _123;
        StorageDead(_123);
        StorageLive(_110);
        _110 = (_112.0: i128);
        StorageLive(_111);
        _111 = (_112.1: i128);
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_113);
        StorageDead(_112);
        StorageLive(_124);
        _125 = discriminant(_2);
        switchInt(move _125) -> [1: bb55, otherwise: bb54];
    }

    bb52: {
        StorageLive(_120);
        _120 = ((_113 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_122);
        _122 = _120;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _122) -> [return: bb53, unwind: bb186];
    }

    bb53: {
        StorageDead(_122);
        StorageDead(_120);
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_113);
        StorageDead(_112);
        goto -> bb171;
    }

    bb54: {
        _124 = const ();
        goto -> bb83;
    }

    bb55: {
        StorageLive(_126);
        _126 = ((_2 as Some).0: u128);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        _134 = _110;
        StorageLive(_135);
        StorageLive(_136);
        _136 = _111;
        _135 = core::num::<impl i128>::abs(move _136) -> [return: bb56, unwind: bb186];
    }

    bb56: {
        StorageDead(_136);
        _133 = <i128 as SafeMath>::safe_add(move _134, move _135) -> [return: bb57, unwind: bb186];
    }

    bb57: {
        StorageDead(_135);
        StorageDead(_134);
        _132 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _133) -> [return: bb58, unwind: bb186];
    }

    bb58: {
        StorageDead(_133);
        _137 = discriminant(_132);
        switchInt(move _137) -> [0: bb59, 1: bb60, otherwise: bb4];
    }

    bb59: {
        StorageLive(_141);
        _141 = ((_132 as Continue).0: i128);
        _131 = _141;
        StorageDead(_141);
        _130 = <i128 as SafeMath>::safe_div(move _131, const 2_i128) -> [return: bb62, unwind: bb186];
    }

    bb60: {
        StorageLive(_138);
        _138 = ((_132 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_140);
        _140 = _138;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _140) -> [return: bb61, unwind: bb186];
    }

    bb61: {
        StorageDead(_140);
        StorageDead(_138);
        StorageDead(_131);
        StorageDead(_130);
        goto -> bb168;
    }

    bb62: {
        StorageDead(_131);
        _129 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _130) -> [return: bb63, unwind: bb186];
    }

    bb63: {
        StorageDead(_130);
        _142 = discriminant(_129);
        switchInt(move _142) -> [0: bb64, 1: bb65, otherwise: bb4];
    }

    bb64: {
        StorageLive(_146);
        _146 = ((_129 as Continue).0: i128);
        _128 = _146;
        StorageDead(_146);
        _127 = core::num::<impl i128>::unsigned_abs(move _128) -> [return: bb67, unwind: bb186];
    }

    bb65: {
        StorageLive(_143);
        _143 = ((_129 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_145);
        _145 = _143;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _145) -> [return: bb66, unwind: bb186];
    }

    bb66: {
        StorageDead(_145);
        StorageDead(_143);
        goto -> bb168;
    }

    bb67: {
        StorageDead(_128);
        StorageDead(_132);
        StorageDead(_129);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        _153 = _127;
        StorageLive(_154);
        _154 = _101;
        _152 = <u128 as SafeMath>::safe_mul(move _153, move _154) -> [return: bb68, unwind: bb186];
    }

    bb68: {
        StorageDead(_154);
        StorageDead(_153);
        _151 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _152) -> [return: bb69, unwind: bb186];
    }

    bb69: {
        StorageDead(_152);
        _155 = discriminant(_151);
        switchInt(move _155) -> [0: bb70, 1: bb71, otherwise: bb4];
    }

    bb70: {
        StorageLive(_159);
        _159 = ((_151 as Continue).0: u128);
        _150 = _159;
        StorageDead(_159);
        _149 = <u128 as SafeMath>::safe_div(move _150, const _) -> [return: bb73, unwind: bb186];
    }

    bb71: {
        StorageLive(_156);
        _156 = ((_151 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_158);
        _158 = _156;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _158) -> [return: bb72, unwind: bb186];
    }

    bb72: {
        StorageDead(_158);
        StorageDead(_156);
        StorageDead(_150);
        StorageDead(_149);
        goto -> bb166;
    }

    bb73: {
        StorageDead(_150);
        _148 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _149) -> [return: bb74, unwind: bb186];
    }

    bb74: {
        StorageDead(_149);
        _160 = discriminant(_148);
        switchInt(move _160) -> [0: bb75, 1: bb76, otherwise: bb4];
    }

    bb75: {
        StorageLive(_164);
        _164 = ((_148 as Continue).0: u128);
        _147 = _164;
        StorageDead(_164);
        StorageDead(_151);
        StorageDead(_148);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        _168 = _100;
        StorageLive(_169);
        _169 = _126;
        StorageLive(_170);
        _170 = _147;
        _167 = get_proportion_u128(move _168, move _169, move _170) -> [return: bb78, unwind: bb186];
    }

    bb76: {
        StorageLive(_161);
        _161 = ((_148 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_163);
        _163 = _161;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _163) -> [return: bb77, unwind: bb186];
    }

    bb77: {
        StorageDead(_163);
        StorageDead(_161);
        goto -> bb166;
    }

    bb78: {
        StorageDead(_170);
        StorageDead(_169);
        StorageDead(_168);
        _166 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _167) -> [return: bb79, unwind: bb186];
    }

    bb79: {
        StorageDead(_167);
        _171 = discriminant(_166);
        switchInt(move _171) -> [0: bb80, 1: bb81, otherwise: bb4];
    }

    bb80: {
        StorageLive(_175);
        _175 = ((_166 as Continue).0: u128);
        _165 = _175;
        StorageDead(_175);
        _100 = move _165;
        StorageDead(_165);
        StorageDead(_166);
        _124 = const ();
        StorageDead(_147);
        StorageDead(_127);
        StorageDead(_126);
        goto -> bb83;
    }

    bb81: {
        StorageLive(_172);
        _172 = ((_166 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_174);
        _174 = _172;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _174) -> [return: bb82, unwind: bb186];
    }

    bb82: {
        StorageDead(_174);
        StorageDead(_172);
        StorageDead(_165);
        StorageDead(_166);
        goto -> bb167;
    }

    bb83: {
        StorageDead(_124);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        _181 = &mut (*_13);
        _180 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _181) -> [return: bb84, unwind: bb186];
    }

    bb84: {
        _179 = &mut (*_180);
        StorageDead(_181);
        StorageLive(_182);
        _182 = _101;
        StorageLive(_183);
        _183 = _100;
        _178 = controller::amm::recenter_perp_market_amm(move _179, move _182, move _183) -> [return: bb85, unwind: bb186];
    }

    bb85: {
        StorageDead(_183);
        StorageDead(_182);
        StorageDead(_179);
        _177 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _178) -> [return: bb86, unwind: bb186];
    }

    bb86: {
        StorageDead(_178);
        _184 = discriminant(_177);
        switchInt(move _184) -> [0: bb87, 1: bb88, otherwise: bb4];
    }

    bb87: {
        StorageLive(_188);
        _188 = ((_177 as Continue).0: ());
        _176 = _188;
        StorageDead(_188);
        StorageDead(_180);
        StorageDead(_177);
        StorageDead(_176);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        _194 = &(*_13);
        _193 = <RefMut<'_, PerpMarket> as Deref>::deref(move _194) -> [return: bb90, unwind: bb186];
    }

    bb88: {
        StorageLive(_185);
        _185 = ((_177 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_187);
        _187 = _185;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _187) -> [return: bb89, unwind: bb186];
    }

    bb89: {
        StorageDead(_187);
        StorageDead(_185);
        StorageDead(_180);
        StorageDead(_177);
        StorageDead(_176);
        goto -> bb170;
    }

    bb90: {
        _192 = &(*_193);
        StorageDead(_194);
        _191 = validate_perp_market(move _192) -> [return: bb91, unwind: bb186];
    }

    bb91: {
        StorageDead(_192);
        _190 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _191) -> [return: bb92, unwind: bb186];
    }

    bb92: {
        StorageDead(_191);
        _195 = discriminant(_190);
        switchInt(move _195) -> [0: bb93, 1: bb94, otherwise: bb4];
    }

    bb93: {
        StorageLive(_199);
        _199 = ((_190 as Continue).0: ());
        _189 = _199;
        StorageDead(_199);
        StorageDead(_193);
        StorageDead(_190);
        StorageDead(_189);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        _202 = &(*_13);
        _201 = <RefMut<'_, PerpMarket> as Deref>::deref(move _202) -> [return: bb96, unwind: bb186];
    }

    bb94: {
        StorageLive(_196);
        _196 = ((_190 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_198);
        _198 = _196;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _198) -> [return: bb95, unwind: bb186];
    }

    bb95: {
        StorageDead(_198);
        StorageDead(_196);
        StorageDead(_193);
        StorageDead(_190);
        StorageDead(_189);
        goto -> bb170;
    }

    bb96: {
        StorageDead(_202);
        _200 = (((*_201).1: state::perp_market::AMM).5: u128);
        StorageDead(_201);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        _205 = &(*_13);
        _204 = <RefMut<'_, PerpMarket> as Deref>::deref(move _205) -> [return: bb97, unwind: bb186];
    }

    bb97: {
        StorageDead(_205);
        _203 = (((*_204).1: state::perp_market::AMM).6: u128);
        StorageDead(_204);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        _208 = &(*_13);
        _207 = <RefMut<'_, PerpMarket> as Deref>::deref(move _208) -> [return: bb98, unwind: bb186];
    }

    bb98: {
        StorageDead(_208);
        _206 = (((*_207).1: state::perp_market::AMM).10: u128);
        StorageDead(_207);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        _211 = &(*_13);
        _210 = <RefMut<'_, PerpMarket> as Deref>::deref(move _211) -> [return: bb99, unwind: bb186];
    }

    bb99: {
        StorageDead(_211);
        _209 = (((*_210).1: state::perp_market::AMM).11: u128);
        StorageDead(_210);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        _214 = &(*_13);
        _213 = <RefMut<'_, PerpMarket> as Deref>::deref(move _214) -> [return: bb100, unwind: bb186];
    }

    bb100: {
        StorageDead(_214);
        _212 = (((*_213).1: state::perp_market::AMM).9: u128);
        StorageDead(_213);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        _217 = &(*_13);
        _216 = <RefMut<'_, PerpMarket> as Deref>::deref(move _217) -> [return: bb101, unwind: bb186];
    }

    bb101: {
        StorageDead(_217);
        _215 = (((*_216).1: state::perp_market::AMM).8: u128);
        StorageDead(_216);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        _416 = const _;
        _228 = &(*_416);
        _227 = &(*_228);
        _226 = move _227 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_227);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        _236 = &_82;
        _235 = &(*_236);
        _234 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _235) -> [return: bb102, unwind: bb186];
    }

    bb102: {
        StorageDead(_235);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        _239 = &_200;
        _238 = &(*_239);
        _237 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _238) -> [return: bb103, unwind: bb186];
    }

    bb103: {
        StorageDead(_238);
        _233 = [move _234, move _237];
        StorageDead(_237);
        StorageDead(_234);
        _232 = &_233;
        _231 = &(*_232);
        _230 = move _231 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_231);
        _225 = Arguments::<'_>::new_v1(move _226, move _230) -> [return: bb104, unwind: bb186];
    }

    bb104: {
        StorageDead(_230);
        StorageDead(_226);
        _224 = format(move _225) -> [return: bb105, unwind: bb186];
    }

    bb105: {
        StorageDead(_225);
        StorageDead(_239);
        StorageDead(_236);
        StorageDead(_233);
        StorageDead(_232);
        StorageDead(_228);
        _223 = move _224;
        StorageDead(_224);
        _222 = &_223;
        _221 = &(*_222);
        _220 = <String as Deref>::deref(move _221) -> [return: bb106, unwind: bb184];
    }

    bb106: {
        _219 = &(*_220);
        StorageDead(_221);
        _218 = solana_program::log::sol_log(move _219) -> [return: bb107, unwind: bb184];
    }

    bb107: {
        StorageDead(_219);
        drop(_223) -> [return: bb108, unwind: bb186];
    }

    bb108: {
        StorageDead(_223);
        StorageDead(_222);
        StorageDead(_220);
        StorageDead(_218);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        _415 = const _;
        _250 = &(*_415);
        _249 = &(*_250);
        _248 = move _249 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_249);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        _258 = &_85;
        _257 = &(*_258);
        _256 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _257) -> [return: bb109, unwind: bb186];
    }

    bb109: {
        StorageDead(_257);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        _261 = &_203;
        _260 = &(*_261);
        _259 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _260) -> [return: bb110, unwind: bb186];
    }

    bb110: {
        StorageDead(_260);
        _255 = [move _256, move _259];
        StorageDead(_259);
        StorageDead(_256);
        _254 = &_255;
        _253 = &(*_254);
        _252 = move _253 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_253);
        _247 = Arguments::<'_>::new_v1(move _248, move _252) -> [return: bb111, unwind: bb186];
    }

    bb111: {
        StorageDead(_252);
        StorageDead(_248);
        _246 = format(move _247) -> [return: bb112, unwind: bb186];
    }

    bb112: {
        StorageDead(_247);
        StorageDead(_261);
        StorageDead(_258);
        StorageDead(_255);
        StorageDead(_254);
        StorageDead(_250);
        _245 = move _246;
        StorageDead(_246);
        _244 = &_245;
        _243 = &(*_244);
        _242 = <String as Deref>::deref(move _243) -> [return: bb113, unwind: bb183];
    }

    bb113: {
        _241 = &(*_242);
        StorageDead(_243);
        _240 = solana_program::log::sol_log(move _241) -> [return: bb114, unwind: bb183];
    }

    bb114: {
        StorageDead(_241);
        drop(_245) -> [return: bb115, unwind: bb186];
    }

    bb115: {
        StorageDead(_245);
        StorageDead(_244);
        StorageDead(_242);
        StorageDead(_240);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        _414 = const _;
        _272 = &(*_414);
        _271 = &(*_272);
        _270 = move _271 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_271);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        _280 = &_88;
        _279 = &(*_280);
        _278 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _279) -> [return: bb116, unwind: bb186];
    }

    bb116: {
        StorageDead(_279);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        _283 = &_206;
        _282 = &(*_283);
        _281 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _282) -> [return: bb117, unwind: bb186];
    }

    bb117: {
        StorageDead(_282);
        _277 = [move _278, move _281];
        StorageDead(_281);
        StorageDead(_278);
        _276 = &_277;
        _275 = &(*_276);
        _274 = move _275 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_275);
        _269 = Arguments::<'_>::new_v1(move _270, move _274) -> [return: bb118, unwind: bb186];
    }

    bb118: {
        StorageDead(_274);
        StorageDead(_270);
        _268 = format(move _269) -> [return: bb119, unwind: bb186];
    }

    bb119: {
        StorageDead(_269);
        StorageDead(_283);
        StorageDead(_280);
        StorageDead(_277);
        StorageDead(_276);
        StorageDead(_272);
        _267 = move _268;
        StorageDead(_268);
        _266 = &_267;
        _265 = &(*_266);
        _264 = <String as Deref>::deref(move _265) -> [return: bb120, unwind: bb182];
    }

    bb120: {
        _263 = &(*_264);
        StorageDead(_265);
        _262 = solana_program::log::sol_log(move _263) -> [return: bb121, unwind: bb182];
    }

    bb121: {
        StorageDead(_263);
        drop(_267) -> [return: bb122, unwind: bb186];
    }

    bb122: {
        StorageDead(_267);
        StorageDead(_266);
        StorageDead(_264);
        StorageDead(_262);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        _413 = const _;
        _294 = &(*_413);
        _293 = &(*_294);
        _292 = move _293 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_293);
        StorageLive(_296);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        _302 = &_91;
        _301 = &(*_302);
        _300 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _301) -> [return: bb123, unwind: bb186];
    }

    bb123: {
        StorageDead(_301);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        _305 = &_209;
        _304 = &(*_305);
        _303 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _304) -> [return: bb124, unwind: bb186];
    }

    bb124: {
        StorageDead(_304);
        _299 = [move _300, move _303];
        StorageDead(_303);
        StorageDead(_300);
        _298 = &_299;
        _297 = &(*_298);
        _296 = move _297 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_297);
        _291 = Arguments::<'_>::new_v1(move _292, move _296) -> [return: bb125, unwind: bb186];
    }

    bb125: {
        StorageDead(_296);
        StorageDead(_292);
        _290 = format(move _291) -> [return: bb126, unwind: bb186];
    }

    bb126: {
        StorageDead(_291);
        StorageDead(_305);
        StorageDead(_302);
        StorageDead(_299);
        StorageDead(_298);
        StorageDead(_294);
        _289 = move _290;
        StorageDead(_290);
        _288 = &_289;
        _287 = &(*_288);
        _286 = <String as Deref>::deref(move _287) -> [return: bb127, unwind: bb181];
    }

    bb127: {
        _285 = &(*_286);
        StorageDead(_287);
        _284 = solana_program::log::sol_log(move _285) -> [return: bb128, unwind: bb181];
    }

    bb128: {
        StorageDead(_285);
        drop(_289) -> [return: bb129, unwind: bb186];
    }

    bb129: {
        StorageDead(_289);
        StorageDead(_288);
        StorageDead(_286);
        StorageDead(_284);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        StorageLive(_311);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        _412 = const _;
        _316 = &(*_412);
        _315 = &(*_316);
        _314 = move _315 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_315);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        _324 = &_94;
        _323 = &(*_324);
        _322 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _323) -> [return: bb130, unwind: bb186];
    }

    bb130: {
        StorageDead(_323);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        _327 = &_212;
        _326 = &(*_327);
        _325 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _326) -> [return: bb131, unwind: bb186];
    }

    bb131: {
        StorageDead(_326);
        _321 = [move _322, move _325];
        StorageDead(_325);
        StorageDead(_322);
        _320 = &_321;
        _319 = &(*_320);
        _318 = move _319 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_319);
        _313 = Arguments::<'_>::new_v1(move _314, move _318) -> [return: bb132, unwind: bb186];
    }

    bb132: {
        StorageDead(_318);
        StorageDead(_314);
        _312 = format(move _313) -> [return: bb133, unwind: bb186];
    }

    bb133: {
        StorageDead(_313);
        StorageDead(_327);
        StorageDead(_324);
        StorageDead(_321);
        StorageDead(_320);
        StorageDead(_316);
        _311 = move _312;
        StorageDead(_312);
        _310 = &_311;
        _309 = &(*_310);
        _308 = <String as Deref>::deref(move _309) -> [return: bb134, unwind: bb180];
    }

    bb134: {
        _307 = &(*_308);
        StorageDead(_309);
        _306 = solana_program::log::sol_log(move _307) -> [return: bb135, unwind: bb180];
    }

    bb135: {
        StorageDead(_307);
        drop(_311) -> [return: bb136, unwind: bb186];
    }

    bb136: {
        StorageDead(_311);
        StorageDead(_310);
        StorageDead(_308);
        StorageDead(_306);
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        StorageLive(_338);
        _411 = const _;
        _338 = &(*_411);
        _337 = &(*_338);
        _336 = move _337 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_337);
        StorageLive(_340);
        StorageLive(_341);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        _346 = &_97;
        _345 = &(*_346);
        _344 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _345) -> [return: bb137, unwind: bb186];
    }

    bb137: {
        StorageDead(_345);
        StorageLive(_347);
        StorageLive(_348);
        StorageLive(_349);
        _349 = &_215;
        _348 = &(*_349);
        _347 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _348) -> [return: bb138, unwind: bb186];
    }

    bb138: {
        StorageDead(_348);
        _343 = [move _344, move _347];
        StorageDead(_347);
        StorageDead(_344);
        _342 = &_343;
        _341 = &(*_342);
        _340 = move _341 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_341);
        _335 = Arguments::<'_>::new_v1(move _336, move _340) -> [return: bb139, unwind: bb186];
    }

    bb139: {
        StorageDead(_340);
        StorageDead(_336);
        _334 = format(move _335) -> [return: bb140, unwind: bb186];
    }

    bb140: {
        StorageDead(_335);
        StorageDead(_349);
        StorageDead(_346);
        StorageDead(_343);
        StorageDead(_342);
        StorageDead(_338);
        _333 = move _334;
        StorageDead(_334);
        _332 = &_333;
        _331 = &(*_332);
        _330 = <String as Deref>::deref(move _331) -> [return: bb141, unwind: bb179];
    }

    bb141: {
        _329 = &(*_330);
        StorageDead(_331);
        _328 = solana_program::log::sol_log(move _329) -> [return: bb142, unwind: bb179];
    }

    bb142: {
        StorageDead(_329);
        drop(_333) -> [return: bb143, unwind: bb186];
    }

    bb143: {
        StorageDead(_333);
        StorageDead(_332);
        StorageDead(_330);
        StorageDead(_328);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        StorageLive(_355);
        StorageLive(_356);
        StorageLive(_357);
        StorageLive(_358);
        _358 = &(*_13);
        _357 = <RefMut<'_, PerpMarket> as Deref>::deref(move _358) -> [return: bb144, unwind: bb186];
    }

    bb144: {
        StorageDead(_358);
        _356 = &((*_357).1: state::perp_market::AMM);
        _355 = &(*_356);
        _354 = calculate_market_open_bids_asks(move _355) -> [return: bb145, unwind: bb186];
    }

    bb145: {
        StorageDead(_355);
        _353 = <std::result::Result<(i128, i128), error::ErrorCode> as Try>::branch(move _354) -> [return: bb146, unwind: bb186];
    }

    bb146: {
        StorageDead(_354);
        _359 = discriminant(_353);
        switchInt(move _359) -> [0: bb147, 1: bb148, otherwise: bb4];
    }

    bb147: {
        StorageLive(_363);
        _363 = ((_353 as Continue).0: (i128, i128));
        _352 = _363;
        StorageDead(_363);
        StorageLive(_350);
        _350 = (_352.0: i128);
        StorageLive(_351);
        _351 = (_352.1: i128);
        StorageDead(_357);
        StorageDead(_356);
        StorageDead(_353);
        StorageDead(_352);
        StorageLive(_364);
        StorageLive(_365);
        StorageLive(_366);
        StorageLive(_367);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        StorageLive(_371);
        StorageLive(_372);
        StorageLive(_373);
        StorageLive(_374);
        _410 = const _;
        _374 = &(*_410);
        _373 = &(*_374);
        _372 = move _373 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_373);
        StorageLive(_376);
        StorageLive(_377);
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        StorageLive(_382);
        _382 = &_110;
        _381 = &(*_382);
        _380 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _381) -> [return: bb150, unwind: bb186];
    }

    bb148: {
        StorageLive(_360);
        _360 = ((_353 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_362);
        _362 = _360;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _362) -> [return: bb149, unwind: bb186];
    }

    bb149: {
        StorageDead(_362);
        StorageDead(_360);
        StorageDead(_357);
        StorageDead(_356);
        StorageDead(_353);
        StorageDead(_352);
        StorageDead(_215);
        StorageDead(_212);
        StorageDead(_209);
        StorageDead(_206);
        StorageDead(_203);
        StorageDead(_200);
        goto -> bb170;
    }

    bb150: {
        StorageDead(_381);
        StorageLive(_383);
        StorageLive(_384);
        StorageLive(_385);
        _385 = &_350;
        _384 = &(*_385);
        _383 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _384) -> [return: bb151, unwind: bb186];
    }

    bb151: {
        StorageDead(_384);
        _379 = [move _380, move _383];
        StorageDead(_383);
        StorageDead(_380);
        _378 = &_379;
        _377 = &(*_378);
        _376 = move _377 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_377);
        _371 = Arguments::<'_>::new_v1(move _372, move _376) -> [return: bb152, unwind: bb186];
    }

    bb152: {
        StorageDead(_376);
        StorageDead(_372);
        _370 = format(move _371) -> [return: bb153, unwind: bb186];
    }

    bb153: {
        StorageDead(_371);
        StorageDead(_385);
        StorageDead(_382);
        StorageDead(_379);
        StorageDead(_378);
        StorageDead(_374);
        _369 = move _370;
        StorageDead(_370);
        _368 = &_369;
        _367 = &(*_368);
        _366 = <String as Deref>::deref(move _367) -> [return: bb154, unwind: bb178];
    }

    bb154: {
        _365 = &(*_366);
        StorageDead(_367);
        _364 = solana_program::log::sol_log(move _365) -> [return: bb155, unwind: bb178];
    }

    bb155: {
        StorageDead(_365);
        drop(_369) -> [return: bb156, unwind: bb186];
    }

    bb156: {
        StorageDead(_369);
        StorageDead(_368);
        StorageDead(_366);
        StorageDead(_364);
        StorageLive(_386);
        StorageLive(_387);
        StorageLive(_388);
        StorageLive(_389);
        StorageLive(_390);
        StorageLive(_391);
        StorageLive(_392);
        StorageLive(_393);
        StorageLive(_394);
        StorageLive(_395);
        StorageLive(_396);
        _409 = const _;
        _396 = &(*_409);
        _395 = &(*_396);
        _394 = move _395 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_395);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        StorageLive(_401);
        StorageLive(_402);
        StorageLive(_403);
        StorageLive(_404);
        _404 = &_111;
        _403 = &(*_404);
        _402 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _403) -> [return: bb157, unwind: bb186];
    }

    bb157: {
        StorageDead(_403);
        StorageLive(_405);
        StorageLive(_406);
        StorageLive(_407);
        _407 = &_351;
        _406 = &(*_407);
        _405 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _406) -> [return: bb158, unwind: bb186];
    }

    bb158: {
        StorageDead(_406);
        _401 = [move _402, move _405];
        StorageDead(_405);
        StorageDead(_402);
        _400 = &_401;
        _399 = &(*_400);
        _398 = move _399 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_399);
        _393 = Arguments::<'_>::new_v1(move _394, move _398) -> [return: bb159, unwind: bb186];
    }

    bb159: {
        StorageDead(_398);
        StorageDead(_394);
        _392 = format(move _393) -> [return: bb160, unwind: bb186];
    }

    bb160: {
        StorageDead(_393);
        StorageDead(_407);
        StorageDead(_404);
        StorageDead(_401);
        StorageDead(_400);
        StorageDead(_396);
        _391 = move _392;
        StorageDead(_392);
        _390 = &_391;
        _389 = &(*_390);
        _388 = <String as Deref>::deref(move _389) -> [return: bb161, unwind: bb177];
    }

    bb161: {
        _387 = &(*_388);
        StorageDead(_389);
        _386 = solana_program::log::sol_log(move _387) -> [return: bb162, unwind: bb177];
    }

    bb162: {
        StorageDead(_387);
        drop(_391) -> [return: bb163, unwind: bb186];
    }

    bb163: {
        StorageDead(_391);
        StorageDead(_390);
        StorageDead(_388);
        StorageDead(_386);
        StorageLive(_408);
        _408 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _408);
        StorageDead(_408);
        StorageDead(_351);
        StorageDead(_350);
        StorageDead(_215);
        StorageDead(_212);
        StorageDead(_209);
        StorageDead(_206);
        StorageDead(_203);
        StorageDead(_200);
        StorageDead(_111);
        StorageDead(_110);
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_97);
        StorageDead(_94);
        StorageDead(_91);
        StorageDead(_88);
        StorageDead(_85);
        StorageDead(_82);
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_37);
        drop(_26) -> [return: bb164, unwind: bb187];
    }

    bb164: {
        StorageDead(_26);
        StorageDead(_25);
        drop(_14) -> [return: bb165, unwind: bb188];
    }

    bb165: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb176;
    }

    bb166: {
        StorageDead(_151);
        StorageDead(_148);
        goto -> bb167;
    }

    bb167: {
        StorageDead(_147);
        goto -> bb169;
    }

    bb168: {
        StorageDead(_128);
        StorageDead(_132);
        StorageDead(_129);
        goto -> bb169;
    }

    bb169: {
        StorageDead(_127);
        StorageDead(_126);
        StorageDead(_124);
        goto -> bb170;
    }

    bb170: {
        StorageDead(_111);
        StorageDead(_110);
        goto -> bb171;
    }

    bb171: {
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_97);
        StorageDead(_94);
        StorageDead(_91);
        StorageDead(_88);
        StorageDead(_85);
        StorageDead(_82);
        StorageDead(_46);
        goto -> bb172;
    }

    bb172: {
        StorageDead(_45);
        goto -> bb173;
    }

    bb173: {
        StorageDead(_37);
        drop(_26) -> [return: bb174, unwind: bb187];
    }

    bb174: {
        StorageDead(_26);
        StorageDead(_25);
        drop(_14) -> [return: bb175, unwind: bb188];
    }

    bb175: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb176;
    }

    bb176: {
        return;
    }

    bb177 (cleanup): {
        drop(_391) -> [return: bb186, unwind terminate(cleanup)];
    }

    bb178 (cleanup): {
        drop(_369) -> [return: bb186, unwind terminate(cleanup)];
    }

    bb179 (cleanup): {
        drop(_333) -> [return: bb186, unwind terminate(cleanup)];
    }

    bb180 (cleanup): {
        drop(_311) -> [return: bb186, unwind terminate(cleanup)];
    }

    bb181 (cleanup): {
        drop(_289) -> [return: bb186, unwind terminate(cleanup)];
    }

    bb182 (cleanup): {
        drop(_267) -> [return: bb186, unwind terminate(cleanup)];
    }

    bb183 (cleanup): {
        drop(_245) -> [return: bb186, unwind terminate(cleanup)];
    }

    bb184 (cleanup): {
        drop(_223) -> [return: bb186, unwind terminate(cleanup)];
    }

    bb185 (cleanup): {
        drop(_66) -> [return: bb186, unwind terminate(cleanup)];
    }

    bb186 (cleanup): {
        drop(_26) -> [return: bb187, unwind terminate(cleanup)];
    }

    bb187 (cleanup): {
        drop(_14) -> [return: bb188, unwind terminate(cleanup)];
    }

    bb188 (cleanup): {
        resume;
    }

    bb189 (cleanup): {
        _438 = discriminant(_38);
        goto -> bb186;
    }

    bb190 (cleanup): {
        _439 = discriminant(_27);
        goto -> bb187;
    }

    bb191 (cleanup): {
        _440 = discriminant(_15);
        goto -> bb188;
    }

    bb192 (cleanup): {
        _441 = discriminant(_4);
        goto -> bb188;
    }
}
