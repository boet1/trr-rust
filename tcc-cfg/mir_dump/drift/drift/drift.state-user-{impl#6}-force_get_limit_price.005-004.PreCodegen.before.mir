// MIR for `state::user::<impl at programs/drift/src/state/user.rs:1263:1: 1263:11>::force_get_limit_price` before PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:1263:1: 1263:11>::force_get_limit_price(_1: &Order, _2: Option<i64>, _3: Option<u64>, _4: u64, _5: u64, _6: bool, _7: Option<ProtectedMakerParams>) -> std::result::Result<u64, error::ErrorCode> {
    debug self => _1;
    debug valid_oracle_price => _2;
    debug fallback_price => _3;
    debug slot => _4;
    debug tick_size => _5;
    debug is_prediction_market => _6;
    debug pmm_params => _7;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let mut _8: std::option::Option<u64>;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::option::Option<u64>>;
    let mut _10: std::result::Result<std::option::Option<u64>, error::ErrorCode>;
    let mut _11: &state::user::Order;
    let mut _12: std::option::Option<i64>;
    let mut _13: std::option::Option<u64>;
    let mut _14: u64;
    let mut _15: u64;
    let mut _16: bool;
    let mut _17: std::option::Option<state::protected_maker_mode_config::ProtectedMakerParams>;
    let mut _18: isize;
    let _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _20: !;
    let mut _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _22: std::option::Option<u64>;
    let mut _23: isize;
    let _24: u64;
    let mut _25: u64;
    let _26: &std::panic::Location<'_>;
    let _27: ();
    let mut _28: &str;
    let _29: &str;
    let mut _30: &std::string::String;
    let _31: &std::string::String;
    let _32: std::string::String;
    let mut _34: std::fmt::Arguments<'_>;
    let mut _35: &[&str];
    let mut _36: &[&str; 2];
    let _37: &[&str; 2];
    let _38: [&str; 2];
    let mut _39: &[core::fmt::rt::Argument<'_>];
    let mut _40: &[core::fmt::rt::Argument<'_>; 2];
    let _41: &[core::fmt::rt::Argument<'_>; 2];
    let _42: [core::fmt::rt::Argument<'_>; 2];
    let mut _43: core::fmt::rt::Argument<'_>;
    let mut _44: &&str;
    let _45: &&str;
    let _46: &str;
    let mut _47: &std::panic::Location<'_>;
    let mut _48: core::fmt::rt::Argument<'_>;
    let mut _49: &u32;
    let _50: &u32;
    let _51: u32;
    let mut _52: &std::panic::Location<'_>;
    let mut _53: error::ErrorCode;
    scope 1 {
        debug residual => _19;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _22;
        scope 4 {
        }
    }
    scope 5 {
        debug price => _24;
    }
    scope 6 {
        debug caller => _26;
        let _33: std::string::String;
        let mut _54: &[&str; 2];
        scope 7 {
            debug res => _33;
        }
    }

    bb0: {
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &(*_1);
        StorageLive(_12);
        _12 = _2;
        StorageLive(_13);
        _13 = _3;
        StorageLive(_14);
        _14 = _4;
        StorageLive(_15);
        _15 = _5;
        StorageLive(_16);
        _16 = _6;
        StorageLive(_17);
        _17 = _7;
        _10 = Order::get_limit_price(move _11, move _12, move _13, move _14, move _15, move _16, move _17) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        _9 = <std::result::Result<Option<u64>, error::ErrorCode> as Try>::branch(move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        _18 = discriminant(_9);
        switchInt(move _18) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_22);
        _22 = ((_9 as Continue).0: std::option::Option<u64>);
        _8 = _22;
        StorageDead(_22);
        _23 = discriminant(_8);
        switchInt(move _23) -> [0: bb7, 1: bb8, otherwise: bb4];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_19);
        _19 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_21);
        _21 = _19;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _21) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb20;
    }

    bb7: {
        StorageLive(_26);
        _26 = Location::<'_>::caller() -> [return: bb9, unwind continue];
    }

    bb8: {
        StorageLive(_24);
        _24 = ((_8 as Some).0: u64);
        StorageLive(_25);
        _25 = _24;
        _0 = std::result::Result::<u64, error::ErrorCode>::Ok(move _25);
        StorageDead(_25);
        StorageDead(_24);
        goto -> bb19;
    }

    bb9: {
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _54 = const _;
        _37 = &(*_54);
        _36 = &(*_37);
        _35 = move _36 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_36);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = &(*_26);
        _46 = Location::<'_>::file(move _47) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_47);
        _45 = &_46;
        _44 = &(*_45);
        _43 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _44) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_44);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = &(*_26);
        _51 = Location::<'_>::line(move _52) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_52);
        _50 = &_51;
        _49 = &(*_50);
        _48 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _49) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_49);
        _42 = [move _43, move _48];
        StorageDead(_48);
        StorageDead(_43);
        _41 = &_42;
        _40 = &(*_41);
        _39 = move _40 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_40);
        _34 = Arguments::<'_>::new_v1(move _35, move _39) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_39);
        StorageDead(_35);
        _33 = format(move _34) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_34);
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_37);
        _32 = move _33;
        StorageDead(_33);
        _31 = &_32;
        _30 = &(*_31);
        _29 = <String as Deref>::deref(move _30) -> [return: bb16, unwind: bb21];
    }

    bb16: {
        _28 = &(*_29);
        StorageDead(_30);
        _27 = solana_program::log::sol_log(move _28) -> [return: bb17, unwind: bb21];
    }

    bb17: {
        StorageDead(_28);
        drop(_32) -> [return: bb18, unwind: bb22];
    }

    bb18: {
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_27);
        StorageLive(_53);
        _53 = error::ErrorCode::UnableToGetLimitPrice;
        _0 = std::result::Result::<u64, error::ErrorCode>::Err(move _53);
        StorageDead(_53);
        StorageDead(_26);
        goto -> bb19;
    }

    bb19: {
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb20;
    }

    bb20: {
        return;
    }

    bb21 (cleanup): {
        drop(_32) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        resume;
    }
}
