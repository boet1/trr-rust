// MIR for `keeper::handle_pause_spot_market_deposit_withdraw` before PreCodegen

fn keeper::handle_pause_spot_market_deposit_withdraw(_1: anchor_lang::context::Context<'_, '_, '_, '_, keeper::PauseSpotMarketDepositWithdraw<'_>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _3: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _5: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _6: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _7: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _8: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _13: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _15: &state::spot_market::SpotMarket;
    let _16: &state::spot_market::SpotMarket;
    let mut _17: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _18: u64;
    let mut _19: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _20: &anchor_spl::token_interface::TokenAccount;
    let _21: &anchor_spl::token_interface::TokenAccount;
    let mut _22: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _23: ();
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _25: std::result::Result<(), error::ErrorCode>;
    let mut _26: bool;
    let mut _27: u32;
    let mut _28: isize;
    let mut _29: ();
    let _31: ();
    let mut _32: &str;
    let _33: &str;
    let mut _34: &std::string::String;
    let _35: &std::string::String;
    let _36: std::string::String;
    let mut _38: std::fmt::Arguments<'_>;
    let mut _39: &[&str];
    let mut _40: &[&str; 2];
    let _41: &[&str; 2];
    let _42: [&str; 2];
    let mut _43: &[core::fmt::rt::Argument<'_>];
    let mut _44: &[core::fmt::rt::Argument<'_>; 1];
    let _45: &[core::fmt::rt::Argument<'_>; 1];
    let _46: [core::fmt::rt::Argument<'_>; 1];
    let mut _47: core::fmt::rt::Argument<'_>;
    let mut _48: &error::ErrorCode;
    let _49: &error::ErrorCode;
    let _50: ();
    let mut _51: &str;
    let _52: &str;
    let mut _53: error::ErrorCode;
    let mut _54: isize;
    let mut _56: !;
    let mut _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _59: u8;
    let mut _60: &state::spot_market::SpotMarket;
    let mut _61: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _62: u8;
    let mut _63: isize;
    let mut _64: (isize, bool);
    let mut _65: &mut state::spot_market::SpotMarket;
    let mut _66: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _67: u8;
    let mut _68: &state::spot_market::SpotMarket;
    let mut _69: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _70: u8;
    let mut _71: isize;
    let mut _72: (isize, bool);
    let mut _73: &mut state::spot_market::SpotMarket;
    let mut _74: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _75: ();
    let mut _77: &mut instructions::keeper::PauseSpotMarketDepositWithdraw<'_>;
    let mut _78: &mut instructions::keeper::PauseSpotMarketDepositWithdraw<'_>;
    let mut _79: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _80: isize;
    let mut _81: isize;
    let mut _82: isize;
    let mut _83: isize;
    let mut _84: isize;
    let mut _85: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug spot_market => _2;
        let _14: std::result::Result<i64, error::ErrorCode>;
        scope 6 {
            debug result => _14;
            let _30: error::ErrorCode;
            let _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _58: ();
            scope 7 {
                debug error_code => _30;
                let _37: std::string::String;
                let mut _76: &[&str; 2];
                scope 8 {
                    debug res => _37;
                }
            }
            scope 9 {
                debug residual => _55;
                scope 10 {
                }
            }
            scope 11 {
                debug val => _58;
                scope 12 {
                }
            }
        }
    }
    scope 2 {
        debug residual => _10;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _13;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _77 = deref_copy (_1.1: &mut instructions::keeper::PauseSpotMarketDepositWithdraw<'_>);
        _7 = &((*_77).2: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _6 = anchor_lang::prelude::AccountLoader::<'_, SpotMarket>::load_mut(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        StorageLive(_8);
        _8 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _5 = std::result::Result::<RefMut<'_, SpotMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _6, move _8) -> [return: bb2, unwind: bb41];
    }

    bb2: {
        StorageDead(_8);
        StorageDead(_6);
        _4 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _5) -> [return: bb3, unwind: bb41];
    }

    bb3: {
        StorageDead(_5);
        _9 = discriminant(_4);
        switchInt(move _9) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_13);
        _13 = move ((_4 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _3 = move _13;
        StorageDead(_13);
        _2 = &mut _3;
        _82 = discriminant(_4);
        StorageDead(_4);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = &(*_2);
        _16 = <RefMut<'_, SpotMarket> as Deref>::deref(move _17) -> [return: bb8, unwind: bb40];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_10);
        _10 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_12);
        _12 = _10;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _12) -> [return: bb7, unwind: bb42];
    }

    bb7: {
        StorageDead(_12);
        StorageDead(_10);
        _80 = discriminant(_4);
        StorageDead(_4);
        goto -> bb37;
    }

    bb8: {
        _15 = &(*_16);
        StorageDead(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _78 = deref_copy (_1.1: &mut instructions::keeper::PauseSpotMarketDepositWithdraw<'_>);
        _79 = deref_copy ((*_78).3: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _85 = (((_79.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _22 = &(*_85);
        _21 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _22) -> [return: bb9, unwind: bb40];
    }

    bb9: {
        _20 = &(*_21);
        _19 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _20) -> [return: bb10, unwind: bb40];
    }

    bb10: {
        StorageDead(_22);
        StorageDead(_20);
        _18 = ((*_19).2: u64);
        _14 = validate_spot_market_vault_amount(move _15, move _18) -> [return: bb11, unwind: bb40];
    }

    bb11: {
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_16);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _28 = discriminant(_14);
        switchInt(move _28) -> [1: bb13, otherwise: bb12];
    }

    bb12: {
        _26 = const false;
        goto -> bb15;
    }

    bb13: {
        _27 = discriminant(((_14 as Err).0: error::ErrorCode));
        switchInt(move _27) -> [173: bb14, otherwise: bb12];
    }

    bb14: {
        _26 = const true;
        goto -> bb15;
    }

    bb15: {
        switchInt(move _26) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        StorageLive(_29);
        _29 = ();
        _25 = std::result::Result::<(), error::ErrorCode>::Ok(move _29);
        StorageDead(_29);
        goto -> bb25;
    }

    bb17: {
        StorageLive(_30);
        _30 = error::ErrorCode::DefaultError;
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _76 = const _;
        _41 = &(*_76);
        _40 = &(*_41);
        _39 = move _40 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_40);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = &_30;
        _48 = &(*_49);
        _47 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _48) -> [return: bb18, unwind: bb40];
    }

    bb18: {
        StorageDead(_48);
        _46 = [move _47];
        StorageDead(_47);
        _45 = &_46;
        _44 = &(*_45);
        _43 = move _44 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_44);
        _38 = Arguments::<'_>::new_v1(move _39, move _43) -> [return: bb19, unwind: bb40];
    }

    bb19: {
        StorageDead(_43);
        StorageDead(_39);
        _37 = format(move _38) -> [return: bb20, unwind: bb40];
    }

    bb20: {
        StorageDead(_38);
        StorageDead(_49);
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_41);
        _36 = move _37;
        StorageDead(_37);
        _35 = &_36;
        _34 = &(*_35);
        _33 = <String as Deref>::deref(move _34) -> [return: bb21, unwind: bb39];
    }

    bb21: {
        _32 = &(*_33);
        StorageDead(_34);
        _31 = solana_program::log::sol_log(move _32) -> [return: bb22, unwind: bb39];
    }

    bb22: {
        StorageDead(_32);
        drop(_36) -> [return: bb23, unwind: bb40];
    }

    bb23: {
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_31);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = const "spot market vault amount is valid";
        _51 = &(*_52);
        _50 = solana_program::log::sol_log(move _51) -> [return: bb24, unwind: bb40];
    }

    bb24: {
        StorageDead(_51);
        StorageDead(_52);
        StorageDead(_50);
        StorageLive(_53);
        _53 = _30;
        _25 = std::result::Result::<(), error::ErrorCode>::Err(move _53);
        StorageDead(_53);
        StorageDead(_30);
        goto -> bb25;
    }

    bb25: {
        StorageDead(_26);
        _24 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _25) -> [return: bb26, unwind: bb40];
    }

    bb26: {
        StorageDead(_25);
        _54 = discriminant(_24);
        switchInt(move _54) -> [0: bb27, 1: bb28, otherwise: bb5];
    }

    bb27: {
        StorageLive(_58);
        _58 = ((_24 as Continue).0: ());
        _23 = _58;
        StorageDead(_58);
        StorageDead(_24);
        StorageDead(_23);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = &(*_2);
        _60 = <RefMut<'_, SpotMarket> as Deref>::deref(move _61) -> [return: bb30, unwind: bb40];
    }

    bb28: {
        StorageLive(_55);
        _55 = ((_24 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_57);
        _57 = _55;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _57) -> [return: bb29, unwind: bb40];
    }

    bb29: {
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_14);
        drop(_3) -> [return: bb37, unwind: bb41];
    }

    bb30: {
        StorageDead(_61);
        _59 = ((*_60).47: u8);
        StorageLive(_62);
        StorageLive(_63);
        _64 = CheckedAdd(const _, const 0_isize);
        assert(!move (_64.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 0_isize) -> [success: bb31, unwind: bb40];
    }

    bb31: {
        _63 = move (_64.0: isize);
        _62 = move _63 as u8 (IntToInt);
        StorageDead(_63);
        StorageLive(_65);
        StorageLive(_66);
        _66 = &mut (*_2);
        _65 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _66) -> [return: bb32, unwind: bb40];
    }

    bb32: {
        StorageDead(_66);
        ((*_65).47: u8) = BitOr(move _59, move _62);
        StorageDead(_62);
        StorageDead(_59);
        StorageDead(_65);
        StorageDead(_60);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &(*_2);
        _68 = <RefMut<'_, SpotMarket> as Deref>::deref(move _69) -> [return: bb33, unwind: bb40];
    }

    bb33: {
        StorageDead(_69);
        _67 = ((*_68).47: u8);
        StorageLive(_70);
        StorageLive(_71);
        _72 = CheckedAdd(const _, const 0_isize);
        assert(!move (_72.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 0_isize) -> [success: bb34, unwind: bb40];
    }

    bb34: {
        _71 = move (_72.0: isize);
        _70 = move _71 as u8 (IntToInt);
        StorageDead(_71);
        StorageLive(_73);
        StorageLive(_74);
        _74 = &mut (*_2);
        _73 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _74) -> [return: bb35, unwind: bb40];
    }

    bb35: {
        StorageDead(_74);
        ((*_73).47: u8) = BitOr(move _67, move _70);
        StorageDead(_70);
        StorageDead(_67);
        StorageDead(_73);
        StorageDead(_68);
        StorageLive(_75);
        _75 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _75);
        StorageDead(_75);
        StorageDead(_14);
        drop(_3) -> [return: bb36, unwind: bb41];
    }

    bb36: {
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb38;
    }

    bb37: {
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb38;
    }

    bb38: {
        return;
    }

    bb39 (cleanup): {
        drop(_36) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_3) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        resume;
    }

    bb42 (cleanup): {
        _84 = discriminant(_4);
        goto -> bb41;
    }
}
