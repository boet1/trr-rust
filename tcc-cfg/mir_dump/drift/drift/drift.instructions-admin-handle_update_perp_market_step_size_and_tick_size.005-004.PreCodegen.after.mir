// MIR for `admin::handle_update_perp_market_step_size_and_tick_size` after PreCodegen

fn admin::handle_update_perp_market_step_size_and_tick_size(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::AdminUpdatePerpMarket<'_>>, _2: u64, _3: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug step_size => _2;
    debug tick_size => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: ();
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _6: std::result::Result<(), anchor_lang::error::Error>;
    let mut _7: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let _8: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _13: ();
    let _14: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _15: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _17: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _18: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _19: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _20: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _21: isize;
    let _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _23: !;
    let mut _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _25: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _26: ();
    let mut _27: &str;
    let _28: &str;
    let mut _29: &std::string::String;
    let _30: &std::string::String;
    let _31: std::string::String;
    let mut _33: std::fmt::Arguments<'_>;
    let mut _34: &[&str];
    let mut _35: &[&str; 1];
    let _36: &[&str; 1];
    let _37: [&str; 1];
    let mut _38: &[core::fmt::rt::Argument<'_>];
    let mut _39: &[core::fmt::rt::Argument<'_>; 1];
    let _40: &[core::fmt::rt::Argument<'_>; 1];
    let _41: [core::fmt::rt::Argument<'_>; 1];
    let mut _42: core::fmt::rt::Argument<'_>;
    let mut _43: &u16;
    let _44: &u16;
    let _45: &state::perp_market::PerpMarket;
    let mut _46: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _47: ();
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _49: std::result::Result<(), error::ErrorCode>;
    let mut _50: bool;
    let mut _51: u64;
    let mut _52: bool;
    let mut _53: u64;
    let mut _54: ();
    let _56: ();
    let mut _57: &str;
    let _58: &str;
    let mut _59: &std::string::String;
    let _60: &std::string::String;
    let _61: std::string::String;
    let mut _63: std::fmt::Arguments<'_>;
    let mut _64: &[&str];
    let mut _65: &[&str; 2];
    let _66: &[&str; 2];
    let _67: [&str; 2];
    let mut _68: &[core::fmt::rt::Argument<'_>];
    let mut _69: &[core::fmt::rt::Argument<'_>; 1];
    let _70: &[core::fmt::rt::Argument<'_>; 1];
    let _71: [core::fmt::rt::Argument<'_>; 1];
    let mut _72: core::fmt::rt::Argument<'_>;
    let mut _73: &error::ErrorCode;
    let _74: &error::ErrorCode;
    let mut _75: error::ErrorCode;
    let mut _76: isize;
    let mut _78: !;
    let mut _79: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _81: ();
    let mut _82: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _83: std::result::Result<(), error::ErrorCode>;
    let mut _84: bool;
    let mut _85: u64;
    let mut _86: ();
    let _88: ();
    let mut _89: &str;
    let _90: &str;
    let mut _91: &std::string::String;
    let _92: &std::string::String;
    let _93: std::string::String;
    let mut _95: std::fmt::Arguments<'_>;
    let mut _96: &[&str];
    let mut _97: &[&str; 2];
    let _98: &[&str; 2];
    let _99: [&str; 2];
    let mut _100: &[core::fmt::rt::Argument<'_>];
    let mut _101: &[core::fmt::rt::Argument<'_>; 1];
    let _102: &[core::fmt::rt::Argument<'_>; 1];
    let _103: [core::fmt::rt::Argument<'_>; 1];
    let mut _104: core::fmt::rt::Argument<'_>;
    let mut _105: &error::ErrorCode;
    let _106: &error::ErrorCode;
    let mut _107: error::ErrorCode;
    let mut _108: isize;
    let mut _110: !;
    let mut _111: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _113: ();
    let mut _114: &str;
    let _115: &str;
    let mut _116: &std::string::String;
    let _117: &std::string::String;
    let _118: std::string::String;
    let mut _120: std::fmt::Arguments<'_>;
    let mut _121: &[&str];
    let mut _122: &[&str; 2];
    let _123: &[&str; 2];
    let _124: [&str; 2];
    let mut _125: &[core::fmt::rt::Argument<'_>];
    let mut _126: &[core::fmt::rt::Argument<'_>; 2];
    let _127: &[core::fmt::rt::Argument<'_>; 2];
    let _128: [core::fmt::rt::Argument<'_>; 2];
    let mut _129: core::fmt::rt::Argument<'_>;
    let mut _130: &u64;
    let _131: &u64;
    let _132: &state::perp_market::PerpMarket;
    let mut _133: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _134: core::fmt::rt::Argument<'_>;
    let mut _135: &u64;
    let _136: &u64;
    let _137: ();
    let mut _138: &str;
    let _139: &str;
    let mut _140: &std::string::String;
    let _141: &std::string::String;
    let _142: std::string::String;
    let mut _144: std::fmt::Arguments<'_>;
    let mut _145: &[&str];
    let mut _146: &[&str; 2];
    let _147: &[&str; 2];
    let _148: [&str; 2];
    let mut _149: &[core::fmt::rt::Argument<'_>];
    let mut _150: &[core::fmt::rt::Argument<'_>; 2];
    let _151: &[core::fmt::rt::Argument<'_>; 2];
    let _152: [core::fmt::rt::Argument<'_>; 2];
    let mut _153: core::fmt::rt::Argument<'_>;
    let mut _154: &u64;
    let _155: &u64;
    let _156: &state::perp_market::PerpMarket;
    let mut _157: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _158: core::fmt::rt::Argument<'_>;
    let mut _159: &u64;
    let _160: &u64;
    let mut _161: u64;
    let mut _162: &mut state::perp_market::PerpMarket;
    let mut _163: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _164: u64;
    let mut _165: &mut state::perp_market::PerpMarket;
    let mut _166: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _167: ();
    let mut _173: &mut instructions::admin::AdminUpdatePerpMarket<'_>;
    let mut _174: &mut instructions::admin::AdminUpdatePerpMarket<'_>;
    let mut _175: isize;
    let mut _176: isize;
    let mut _177: isize;
    let mut _178: isize;
    let mut _179: isize;
    let mut _180: isize;
    let mut _181: isize;
    let mut _182: isize;
    let mut _183: isize;
    let mut _184: isize;
    scope 1 {
        debug residual => _10;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _13;
        scope 4 {
        }
    }
    scope 5 {
        debug perp_market => _14;
        let _32: std::string::String;
        let _55: error::ErrorCode;
        let _77: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _80: ();
        let _87: error::ErrorCode;
        let _109: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _112: ();
        let _119: std::string::String;
        let _143: std::string::String;
        let mut _168: &[&str; 2];
        let mut _169: &[&str; 2];
        let mut _172: &[&str; 1];
        scope 10 {
            debug res => _32;
        }
        scope 11 {
            debug error_code => _55;
            let _62: std::string::String;
            let mut _171: &[&str; 2];
            scope 12 {
                debug res => _62;
            }
        }
        scope 13 {
            debug residual => _77;
            scope 14 {
            }
        }
        scope 15 {
            debug val => _80;
            scope 16 {
            }
        }
        scope 17 {
            debug error_code => _87;
            let _94: std::string::String;
            let mut _170: &[&str; 2];
            scope 18 {
                debug res => _94;
            }
        }
        scope 19 {
            debug residual => _109;
            scope 20 {
            }
        }
        scope 21 {
            debug val => _112;
            scope 22 {
            }
        }
        scope 23 {
            debug res => _119;
        }
        scope 24 {
            debug res => _143;
        }
    }
    scope 6 {
        debug residual => _22;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _25;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _173 = deref_copy (_1.1: &mut instructions::admin::AdminUpdatePerpMarket<'_>);
        _8 = &((*_173).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _7 = &(*_8);
        _6 = constraints::perp_market_valid(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _6) -> [return: bb2, unwind: bb77];
    }

    bb2: {
        StorageDead(_6);
        _9 = discriminant(_5);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_5 as Continue).0: ());
        _4 = _13;
        StorageDead(_13);
        _175 = discriminant(_5);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _174 = deref_copy (_1.1: &mut instructions::admin::AdminUpdatePerpMarket<'_>);
        _19 = &((*_174).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _18 = anchor_lang::prelude::AccountLoader::<'_, PerpMarket>::load_mut(move _19) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_12);
        _12 = move _10;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _12) -> [return: bb6, unwind: bb79];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        _181 = discriminant(_5);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb70;
    }

    bb7: {
        StorageDead(_19);
        StorageLive(_20);
        _20 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _17 = std::result::Result::<RefMut<'_, PerpMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _18, move _20) -> [return: bb8, unwind: bb77];
    }

    bb8: {
        StorageDead(_20);
        StorageDead(_18);
        _16 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _17) -> [return: bb9, unwind: bb77];
    }

    bb9: {
        StorageDead(_17);
        _21 = discriminant(_16);
        switchInt(move _21) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_25);
        _25 = move ((_16 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _15 = move _25;
        StorageDead(_25);
        _14 = &mut _15;
        _179 = discriminant(_16);
        StorageDead(_16);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _172 = const _;
        _36 = &(*_172);
        _35 = &(*_36);
        _34 = move _35 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_35);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = &(*_14);
        _45 = <RefMut<'_, PerpMarket> as Deref>::deref(move _46) -> [return: bb13, unwind: bb76];
    }

    bb11: {
        StorageLive(_22);
        _22 = ((_16 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_24);
        _24 = _22;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _24) -> [return: bb12, unwind: bb78];
    }

    bb12: {
        StorageDead(_24);
        StorageDead(_22);
        _177 = discriminant(_16);
        StorageDead(_16);
        goto -> bb69;
    }

    bb13: {
        StorageDead(_46);
        _44 = &((*_45).21: u16);
        _43 = &(*_44);
        _42 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _43) -> [return: bb14, unwind: bb76];
    }

    bb14: {
        StorageDead(_43);
        _41 = [move _42];
        StorageDead(_42);
        _40 = &_41;
        _39 = &(*_40);
        _38 = move _39 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_39);
        _33 = Arguments::<'_>::new_v1(move _34, move _38) -> [return: bb15, unwind: bb76];
    }

    bb15: {
        StorageDead(_38);
        StorageDead(_34);
        _32 = format(move _33) -> [return: bb16, unwind: bb76];
    }

    bb16: {
        StorageDead(_33);
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_36);
        _31 = move _32;
        StorageDead(_32);
        _30 = &_31;
        _29 = &(*_30);
        _28 = <String as Deref>::deref(move _29) -> [return: bb17, unwind: bb75];
    }

    bb17: {
        _27 = &(*_28);
        StorageDead(_29);
        _26 = solana_program::log::sol_log(move _27) -> [return: bb18, unwind: bb75];
    }

    bb18: {
        StorageDead(_27);
        drop(_31) -> [return: bb19, unwind: bb76];
    }

    bb19: {
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_28);
        StorageDead(_26);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = _2;
        _50 = Gt(move _51, const 0_u64);
        switchInt(move _50) -> [0: bb23, otherwise: bb20];
    }

    bb20: {
        StorageDead(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = _3;
        _52 = Gt(move _53, const 0_u64);
        switchInt(move _52) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        StorageDead(_53);
        StorageLive(_54);
        _54 = ();
        _49 = std::result::Result::<(), error::ErrorCode>::Ok(move _54);
        StorageDead(_54);
        goto -> bb31;
    }

    bb22: {
        StorageDead(_53);
        goto -> bb24;
    }

    bb23: {
        StorageDead(_51);
        goto -> bb24;
    }

    bb24: {
        StorageLive(_55);
        _55 = error::ErrorCode::DefaultError;
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _171 = const _;
        _66 = &(*_171);
        _65 = &(*_66);
        _64 = move _65 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_65);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = &_55;
        _73 = &(*_74);
        _72 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _73) -> [return: bb25, unwind: bb76];
    }

    bb25: {
        StorageDead(_73);
        _71 = [move _72];
        StorageDead(_72);
        _70 = &_71;
        _69 = &(*_70);
        _68 = move _69 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_69);
        _63 = Arguments::<'_>::new_v1(move _64, move _68) -> [return: bb26, unwind: bb76];
    }

    bb26: {
        StorageDead(_68);
        StorageDead(_64);
        _62 = format(move _63) -> [return: bb27, unwind: bb76];
    }

    bb27: {
        StorageDead(_63);
        StorageDead(_74);
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_66);
        _61 = move _62;
        StorageDead(_62);
        _60 = &_61;
        _59 = &(*_60);
        _58 = <String as Deref>::deref(move _59) -> [return: bb28, unwind: bb74];
    }

    bb28: {
        _57 = &(*_58);
        StorageDead(_59);
        _56 = solana_program::log::sol_log(move _57) -> [return: bb29, unwind: bb74];
    }

    bb29: {
        StorageDead(_57);
        drop(_61) -> [return: bb30, unwind: bb76];
    }

    bb30: {
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_56);
        StorageLive(_75);
        _75 = _55;
        _49 = std::result::Result::<(), error::ErrorCode>::Err(move _75);
        StorageDead(_75);
        StorageDead(_55);
        goto -> bb31;
    }

    bb31: {
        StorageDead(_52);
        StorageDead(_50);
        _48 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _49) -> [return: bb32, unwind: bb76];
    }

    bb32: {
        StorageDead(_49);
        _76 = discriminant(_48);
        switchInt(move _76) -> [0: bb33, 1: bb34, otherwise: bb4];
    }

    bb33: {
        StorageLive(_80);
        _80 = ((_48 as Continue).0: ());
        _47 = _80;
        StorageDead(_80);
        StorageDead(_48);
        StorageDead(_47);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = _2;
        _84 = Le(move _85, const 2000000000_u64);
        switchInt(move _84) -> [0: bb37, otherwise: bb36];
    }

    bb34: {
        StorageLive(_77);
        _77 = ((_48 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_79);
        _79 = _77;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _79) -> [return: bb35, unwind: bb76];
    }

    bb35: {
        StorageDead(_79);
        StorageDead(_77);
        StorageDead(_48);
        StorageDead(_47);
        goto -> bb68;
    }

    bb36: {
        StorageDead(_85);
        StorageLive(_86);
        _86 = ();
        _83 = std::result::Result::<(), error::ErrorCode>::Ok(move _86);
        StorageDead(_86);
        goto -> bb44;
    }

    bb37: {
        StorageDead(_85);
        StorageLive(_87);
        _87 = error::ErrorCode::DefaultError;
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        _170 = const _;
        _98 = &(*_170);
        _97 = &(*_98);
        _96 = move _97 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_97);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        _106 = &_87;
        _105 = &(*_106);
        _104 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _105) -> [return: bb38, unwind: bb76];
    }

    bb38: {
        StorageDead(_105);
        _103 = [move _104];
        StorageDead(_104);
        _102 = &_103;
        _101 = &(*_102);
        _100 = move _101 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_101);
        _95 = Arguments::<'_>::new_v1(move _96, move _100) -> [return: bb39, unwind: bb76];
    }

    bb39: {
        StorageDead(_100);
        StorageDead(_96);
        _94 = format(move _95) -> [return: bb40, unwind: bb76];
    }

    bb40: {
        StorageDead(_95);
        StorageDead(_106);
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_98);
        _93 = move _94;
        StorageDead(_94);
        _92 = &_93;
        _91 = &(*_92);
        _90 = <String as Deref>::deref(move _91) -> [return: bb41, unwind: bb73];
    }

    bb41: {
        _89 = &(*_90);
        StorageDead(_91);
        _88 = solana_program::log::sol_log(move _89) -> [return: bb42, unwind: bb73];
    }

    bb42: {
        StorageDead(_89);
        drop(_93) -> [return: bb43, unwind: bb76];
    }

    bb43: {
        StorageDead(_93);
        StorageDead(_92);
        StorageDead(_90);
        StorageDead(_88);
        StorageLive(_107);
        _107 = _87;
        _83 = std::result::Result::<(), error::ErrorCode>::Err(move _107);
        StorageDead(_107);
        StorageDead(_87);
        goto -> bb44;
    }

    bb44: {
        StorageDead(_84);
        _82 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _83) -> [return: bb45, unwind: bb76];
    }

    bb45: {
        StorageDead(_83);
        _108 = discriminant(_82);
        switchInt(move _108) -> [0: bb46, 1: bb47, otherwise: bb4];
    }

    bb46: {
        StorageLive(_112);
        _112 = ((_82 as Continue).0: ());
        _81 = _112;
        StorageDead(_112);
        StorageDead(_82);
        StorageDead(_81);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _169 = const _;
        _123 = &(*_169);
        _122 = &(*_123);
        _121 = move _122 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_122);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        _133 = &(*_14);
        _132 = <RefMut<'_, PerpMarket> as Deref>::deref(move _133) -> [return: bb49, unwind: bb76];
    }

    bb47: {
        StorageLive(_109);
        _109 = ((_82 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_111);
        _111 = _109;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _111) -> [return: bb48, unwind: bb76];
    }

    bb48: {
        StorageDead(_111);
        StorageDead(_109);
        StorageDead(_82);
        StorageDead(_81);
        goto -> bb68;
    }

    bb49: {
        StorageDead(_133);
        _131 = &(((*_132).1: state::perp_market::AMM).52: u64);
        _130 = &(*_131);
        _129 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _130) -> [return: bb50, unwind: bb76];
    }

    bb50: {
        StorageDead(_130);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        _136 = &_2;
        _135 = &(*_136);
        _134 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _135) -> [return: bb51, unwind: bb76];
    }

    bb51: {
        StorageDead(_135);
        _128 = [move _129, move _134];
        StorageDead(_134);
        StorageDead(_129);
        _127 = &_128;
        _126 = &(*_127);
        _125 = move _126 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_126);
        _120 = Arguments::<'_>::new_v1(move _121, move _125) -> [return: bb52, unwind: bb76];
    }

    bb52: {
        StorageDead(_125);
        StorageDead(_121);
        _119 = format(move _120) -> [return: bb53, unwind: bb76];
    }

    bb53: {
        StorageDead(_120);
        StorageDead(_136);
        StorageDead(_132);
        StorageDead(_131);
        StorageDead(_128);
        StorageDead(_127);
        StorageDead(_123);
        _118 = move _119;
        StorageDead(_119);
        _117 = &_118;
        _116 = &(*_117);
        _115 = <String as Deref>::deref(move _116) -> [return: bb54, unwind: bb72];
    }

    bb54: {
        _114 = &(*_115);
        StorageDead(_116);
        _113 = solana_program::log::sol_log(move _114) -> [return: bb55, unwind: bb72];
    }

    bb55: {
        StorageDead(_114);
        drop(_118) -> [return: bb56, unwind: bb76];
    }

    bb56: {
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_115);
        StorageDead(_113);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        _168 = const _;
        _147 = &(*_168);
        _146 = &(*_147);
        _145 = move _146 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_146);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        _157 = &(*_14);
        _156 = <RefMut<'_, PerpMarket> as Deref>::deref(move _157) -> [return: bb57, unwind: bb76];
    }

    bb57: {
        StorageDead(_157);
        _155 = &(((*_156).1: state::perp_market::AMM).53: u64);
        _154 = &(*_155);
        _153 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _154) -> [return: bb58, unwind: bb76];
    }

    bb58: {
        StorageDead(_154);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        _160 = &_3;
        _159 = &(*_160);
        _158 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _159) -> [return: bb59, unwind: bb76];
    }

    bb59: {
        StorageDead(_159);
        _152 = [move _153, move _158];
        StorageDead(_158);
        StorageDead(_153);
        _151 = &_152;
        _150 = &(*_151);
        _149 = move _150 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_150);
        _144 = Arguments::<'_>::new_v1(move _145, move _149) -> [return: bb60, unwind: bb76];
    }

    bb60: {
        StorageDead(_149);
        StorageDead(_145);
        _143 = format(move _144) -> [return: bb61, unwind: bb76];
    }

    bb61: {
        StorageDead(_144);
        StorageDead(_160);
        StorageDead(_156);
        StorageDead(_155);
        StorageDead(_152);
        StorageDead(_151);
        StorageDead(_147);
        _142 = move _143;
        StorageDead(_143);
        _141 = &_142;
        _140 = &(*_141);
        _139 = <String as Deref>::deref(move _140) -> [return: bb62, unwind: bb71];
    }

    bb62: {
        _138 = &(*_139);
        StorageDead(_140);
        _137 = solana_program::log::sol_log(move _138) -> [return: bb63, unwind: bb71];
    }

    bb63: {
        StorageDead(_138);
        drop(_142) -> [return: bb64, unwind: bb76];
    }

    bb64: {
        StorageDead(_142);
        StorageDead(_141);
        StorageDead(_139);
        StorageDead(_137);
        StorageLive(_161);
        _161 = _2;
        StorageLive(_162);
        StorageLive(_163);
        _163 = &mut (*_14);
        _162 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _163) -> [return: bb65, unwind: bb76];
    }

    bb65: {
        StorageDead(_163);
        (((*_162).1: state::perp_market::AMM).52: u64) = move _161;
        StorageDead(_161);
        StorageDead(_162);
        StorageLive(_164);
        _164 = _3;
        StorageLive(_165);
        StorageLive(_166);
        _166 = &mut (*_14);
        _165 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _166) -> [return: bb66, unwind: bb76];
    }

    bb66: {
        StorageDead(_166);
        (((*_165).1: state::perp_market::AMM).53: u64) = move _164;
        StorageDead(_164);
        StorageDead(_165);
        StorageLive(_167);
        _167 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _167);
        StorageDead(_167);
        drop(_15) -> [return: bb67, unwind: bb77];
    }

    bb67: {
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb70;
    }

    bb68: {
        drop(_15) -> [return: bb69, unwind: bb77];
    }

    bb69: {
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb70;
    }

    bb70: {
        return;
    }

    bb71 (cleanup): {
        drop(_142) -> [return: bb76, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        drop(_118) -> [return: bb76, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        drop(_93) -> [return: bb76, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        drop(_61) -> [return: bb76, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        drop(_31) -> [return: bb76, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        drop(_15) -> [return: bb77, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        resume;
    }

    bb78 (cleanup): {
        _183 = discriminant(_16);
        goto -> bb77;
    }

    bb79 (cleanup): {
        _184 = discriminant(_5);
        goto -> bb77;
    }
}
