// MIR for `state::user::<impl at programs/drift/src/state/user.rs:2034:23: 2034:37>::serialize` before PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:2034:23: 2034:37>::serialize(_1: &FuelOverflowStatus, _2: &mut W) -> std::result::Result<(), std::io::Error> {
    debug self => _1;
    debug writer => _2;
    let mut _0: std::result::Result<(), std::io::Error>;
    let _3: u8;
    let _4: ();
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _6: std::result::Result<(), std::io::Error>;
    let mut _7: &mut W;
    let mut _8: &[u8];
    let mut _9: &[u8; 1];
    let _10: &[u8; 1];
    let _11: [u8; 1];
    let mut _12: u8;
    let mut _13: isize;
    let mut _15: !;
    let mut _16: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _18: ();
    let mut _19: ();
    let mut _20: isize;
    let mut _21: isize;
    let mut _22: isize;
    let mut _23: isize;
    let mut _24: isize;
    scope 1 {
        debug variant_idx => _3;
        let _14: std::result::Result<std::convert::Infallible, std::io::Error>;
        let _17: ();
        scope 2 {
            debug residual => _14;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _17;
            scope 5 {
            }
        }
    }

    bb0: {
        StorageLive(_3);
        _3 = const 0_u8;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &mut (*_2);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = _3;
        _11 = core::num::<impl u8>::to_le_bytes(move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_12);
        _10 = &_11;
        _9 = &(*_10);
        _8 = move _9 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_9);
        _6 = <W as std::io::Write>::write_all(move _7, move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_8);
        StorageDead(_7);
        _5 = <std::result::Result<(), std::io::Error> as Try>::branch(move _6) -> [return: bb3, unwind: bb9];
    }

    bb3: {
        StorageDead(_6);
        _13 = discriminant(_5);
        switchInt(move _13) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_17);
        _17 = ((_5 as Continue).0: ());
        _4 = _17;
        StorageDead(_17);
        _20 = discriminant(_5);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_18);
        _18 = const ();
        StorageDead(_18);
        StorageLive(_19);
        _19 = ();
        _0 = std::result::Result::<(), std::io::Error>::Ok(move _19);
        StorageDead(_19);
        StorageDead(_3);
        goto -> bb8;
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_14);
        _14 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_16);
        _16 = move _14;
        _0 = <std::result::Result<(), std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _16) -> [return: bb7, unwind: bb10];
    }

    bb7: {
        StorageDead(_16);
        StorageDead(_14);
        _22 = discriminant(_5);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb8;
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        resume;
    }

    bb10 (cleanup): {
        _24 = discriminant(_5);
        goto -> bb9;
    }
}
