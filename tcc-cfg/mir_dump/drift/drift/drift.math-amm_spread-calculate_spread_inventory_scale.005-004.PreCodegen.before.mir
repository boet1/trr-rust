// MIR for `calculate_spread_inventory_scale` before PreCodegen

fn calculate_spread_inventory_scale(_1: i128, _2: u128, _3: u128, _4: u128, _5: u64, _6: u64) -> std::result::Result<u64, error::ErrorCode> {
    debug base_asset_amount_with_amm => _1;
    debug base_asset_reserve => _2;
    debug min_base_asset_reserve => _3;
    debug max_base_asset_reserve => _4;
    debug directional_spread => _5;
    debug max_spread => _6;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let _7: ();
    let mut _8: bool;
    let mut _9: i128;
    let mut _10: !;
    let _11: i128;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _13: std::result::Result<i128, error::ErrorCode>;
    let mut _14: i128;
    let mut _15: u128;
    let mut _16: u128;
    let mut _17: u128;
    let mut _18: isize;
    let _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _20: !;
    let mut _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _22: i128;
    let mut _24: u64;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _26: std::result::Result<u64, error::ErrorCode>;
    let mut _27: u64;
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _29: std::result::Result<u64, error::ErrorCode>;
    let mut _30: u64;
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _36: u64;
    let mut _37: u64;
    let mut _38: isize;
    let mut _40: !;
    let mut _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _44: u64;
    let mut _45: u64;
    let mut _46: std::result::Result<u64, error::ErrorCode>;
    let mut _47: u64;
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _49: std::result::Result<u64, error::ErrorCode>;
    let mut _50: u64;
    let mut _51: std::result::Result<u64, error::ErrorCode>;
    let mut _52: u64;
    let mut _53: u64;
    let mut _54: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _55: std::result::Result<u64, error::ErrorCode>;
    let mut _56: u128;
    let mut _57: i128;
    let mut _58: isize;
    let mut _60: !;
    let mut _61: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _63: u64;
    let mut _64: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _65: std::result::Result<u64, error::ErrorCode>;
    let mut _66: isize;
    let mut _68: !;
    let mut _69: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _71: isize;
    let mut _73: !;
    let mut _74: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _76: u64;
    scope 1 {
        debug amm_inventory_pct => _11;
        let _23: u64;
        let _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _35: u64;
        let _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _42: u64;
        scope 6 {
            debug inventory_scale_max => _23;
            let _43: u64;
            let _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _62: u64;
            let _67: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _70: u64;
            let _72: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _75: u64;
            scope 15 {
                debug inventory_scale_capped => _43;
            }
            scope 16 {
                debug residual => _59;
                scope 17 {
                }
            }
            scope 18 {
                debug val => _62;
                scope 19 {
                }
            }
            scope 20 {
                debug residual => _67;
                scope 21 {
                }
            }
            scope 22 {
                debug val => _70;
                scope 23 {
                }
            }
            scope 24 {
                debug residual => _72;
                scope 25 {
                }
            }
            scope 26 {
                debug val => _75;
                scope 27 {
                }
            }
        }
        scope 7 {
            debug residual => _32;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _35;
            scope 10 {
            }
        }
        scope 11 {
            debug residual => _39;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _42;
            scope 14 {
            }
        }
    }
    scope 2 {
        debug residual => _19;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _22;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = _1;
        _8 = Eq(move _9, const 0_i128);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_9);
        _0 = std::result::Result::<u64, error::ErrorCode>::Ok(const _);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb47;
    }

    bb2: {
        StorageDead(_9);
        _7 = const ();
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = _1;
        StorageLive(_15);
        _15 = _2;
        StorageLive(_16);
        _16 = _3;
        StorageLive(_17);
        _17 = _4;
        _13 = calculate_inventory_liquidity_ratio(move _14, move _15, move _16, move _17) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        _12 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _13) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_13);
        _18 = discriminant(_12);
        switchInt(move _18) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_22);
        _22 = ((_12 as Continue).0: i128);
        _11 = _22;
        StorageDead(_22);
        StorageDead(_12);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = _6;
        _29 = <u64 as SafeMath>::safe_mul(move _30, const _) -> [return: bb9, unwind continue];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_19);
        _19 = ((_12 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_21);
        _21 = _19;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _21) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_12);
        goto -> bb46;
    }

    bb9: {
        StorageDead(_30);
        _28 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _29) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_29);
        _31 = discriminant(_28);
        switchInt(move _31) -> [0: bb11, 1: bb12, otherwise: bb6];
    }

    bb11: {
        StorageLive(_35);
        _35 = ((_28 as Continue).0: u64);
        _27 = _35;
        StorageDead(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = _5;
        _36 = std::cmp::max::<u64>(move _37, const 1_u64) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_32);
        _32 = ((_28 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_34);
        _34 = _32;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _34) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_34);
        StorageDead(_32);
        StorageDead(_27);
        StorageDead(_26);
        goto -> bb44;
    }

    bb14: {
        StorageDead(_37);
        _26 = <u64 as SafeMath>::safe_div(move _27, move _36) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_36);
        StorageDead(_27);
        _25 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _26) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_26);
        _38 = discriminant(_25);
        switchInt(move _38) -> [0: bb17, 1: bb18, otherwise: bb6];
    }

    bb17: {
        StorageLive(_42);
        _42 = ((_25 as Continue).0: u64);
        _24 = _42;
        StorageDead(_42);
        _23 = <u64 as Ord>::max(const _, move _24) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_39);
        _39 = ((_25 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_41);
        _41 = _39;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _41) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_41);
        StorageDead(_39);
        goto -> bb44;
    }

    bb20: {
        StorageDead(_24);
        StorageDead(_28);
        StorageDead(_25);
        StorageLive(_43);
        StorageLive(_44);
        _44 = _23;
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = _23;
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = _11;
        _56 = core::num::<impl i128>::unsigned_abs(move _57) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_57);
        _55 = <u128 as Cast>::cast::<u64>(move _56) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_56);
        _54 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _55) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_55);
        _58 = discriminant(_54);
        switchInt(move _58) -> [0: bb24, 1: bb25, otherwise: bb6];
    }

    bb24: {
        StorageLive(_62);
        _62 = ((_54 as Continue).0: u64);
        _53 = _62;
        StorageDead(_62);
        _51 = <u64 as SafeMath>::safe_mul(move _52, move _53) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_59);
        _59 = ((_54 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_61);
        _61 = _59;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _61) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_44);
        goto -> bb43;
    }

    bb27: {
        StorageDead(_53);
        StorageDead(_52);
        _50 = std::result::Result::<u64, error::ErrorCode>::unwrap_or(move _51, const _) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_51);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = <i128 as Cast>::cast::<u64>(const _) -> [return: bb29, unwind continue];
    }

    bb29: {
        _64 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _65) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_65);
        _66 = discriminant(_64);
        switchInt(move _66) -> [0: bb31, 1: bb32, otherwise: bb6];
    }

    bb31: {
        StorageLive(_70);
        _70 = ((_64 as Continue).0: u64);
        _63 = _70;
        StorageDead(_70);
        _49 = <u64 as SafeMath>::safe_div(move _50, move _63) -> [return: bb34, unwind continue];
    }

    bb32: {
        StorageLive(_67);
        _67 = ((_64 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_69);
        _69 = _67;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _69) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_69);
        StorageDead(_67);
        StorageDead(_63);
        StorageDead(_50);
        StorageDead(_49);
        goto -> bb42;
    }

    bb34: {
        StorageDead(_63);
        StorageDead(_50);
        _48 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _49) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_49);
        _71 = discriminant(_48);
        switchInt(move _71) -> [0: bb36, 1: bb37, otherwise: bb6];
    }

    bb36: {
        StorageLive(_75);
        _75 = ((_48 as Continue).0: u64);
        _47 = _75;
        StorageDead(_75);
        _46 = <u64 as SafeMath>::safe_add(const _, move _47) -> [return: bb39, unwind continue];
    }

    bb37: {
        StorageLive(_72);
        _72 = ((_48 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_74);
        _74 = _72;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _74) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_74);
        StorageDead(_72);
        goto -> bb42;
    }

    bb39: {
        StorageDead(_47);
        _45 = std::result::Result::<u64, error::ErrorCode>::unwrap_or(move _46, const _) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_46);
        _43 = std::cmp::min::<u64>(move _44, move _45) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_64);
        StorageDead(_54);
        StorageDead(_48);
        StorageLive(_76);
        _76 = _43;
        _0 = std::result::Result::<u64, error::ErrorCode>::Ok(move _76);
        StorageDead(_76);
        StorageDead(_43);
        StorageDead(_23);
        StorageDead(_11);
        goto -> bb47;
    }

    bb42: {
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_64);
        goto -> bb43;
    }

    bb43: {
        StorageDead(_54);
        StorageDead(_48);
        StorageDead(_43);
        goto -> bb45;
    }

    bb44: {
        StorageDead(_24);
        StorageDead(_28);
        StorageDead(_25);
        goto -> bb45;
    }

    bb45: {
        StorageDead(_23);
        goto -> bb46;
    }

    bb46: {
        StorageDead(_11);
        goto -> bb47;
    }

    bb47: {
        return;
    }
}
