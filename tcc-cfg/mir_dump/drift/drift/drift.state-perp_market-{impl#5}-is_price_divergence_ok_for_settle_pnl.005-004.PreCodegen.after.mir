// MIR for `state::perp_market::<impl at programs/drift/src/state/perp_market.rs:298:1: 298:16>::is_price_divergence_ok_for_settle_pnl` after PreCodegen

fn state::perp_market::<impl at programs/drift/src/state/perp_market.rs:298:1: 298:16>::is_price_divergence_ok_for_settle_pnl(_1: &PerpMarket, _2: i64) -> std::result::Result<bool, error::ErrorCode> {
    debug self => _1;
    debug oracle_price => _2;
    let mut _0: std::result::Result<bool, error::ErrorCode>;
    let _3: u64;
    let mut _4: i64;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _6: std::result::Result<i64, error::ErrorCode>;
    let mut _7: i64;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _9: std::result::Result<i64, error::ErrorCode>;
    let mut _10: i64;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _12: std::result::Result<i64, error::ErrorCode>;
    let mut _13: i64;
    let mut _14: i64;
    let mut _15: isize;
    let _16: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _19: i64;
    let mut _20: isize;
    let _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _24: i64;
    let mut _25: i64;
    let mut _26: i64;
    let mut _27: i64;
    let mut _28: isize;
    let _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _30: !;
    let mut _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _32: i64;
    let mut _34: isize;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: bool;
    let _41: ();
    let mut _42: bool;
    let mut _43: u64;
    let mut _44: u64;
    let mut _45: !;
    let _46: ();
    let mut _47: &str;
    let _48: &str;
    let mut _49: &std::string::String;
    let _50: &std::string::String;
    let _51: std::string::String;
    let mut _53: std::fmt::Arguments<'_>;
    let mut _54: &[&str];
    let mut _55: &[&str; 3];
    let _56: &[&str; 3];
    let _57: [&str; 3];
    let mut _58: &[core::fmt::rt::Argument<'_>];
    let mut _59: &[core::fmt::rt::Argument<'_>; 3];
    let _60: &[core::fmt::rt::Argument<'_>; 3];
    let _61: [core::fmt::rt::Argument<'_>; 3];
    let mut _62: core::fmt::rt::Argument<'_>;
    let mut _63: &u16;
    let _64: &u16;
    let mut _65: core::fmt::rt::Argument<'_>;
    let mut _66: &u64;
    let _67: &u64;
    let mut _68: core::fmt::rt::Argument<'_>;
    let mut _69: &u64;
    let _70: &u64;
    let mut _72: i64;
    let mut _73: i64;
    let mut _75: i64;
    let mut _76: isize;
    let mut _77: i64;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: i64;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: i64;
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: bool;
    let mut _91: bool;
    let mut _92: i64;
    let mut _93: bool;
    let mut _94: bool;
    let mut _95: bool;
    let mut _96: bool;
    let mut _97: i64;
    let mut _98: bool;
    let mut _99: bool;
    let mut _100: bool;
    let mut _101: bool;
    let mut _102: i64;
    let mut _103: bool;
    let mut _104: bool;
    let mut _105: bool;
    let mut _106: bool;
    let _107: ();
    let mut _108: bool;
    let mut _109: u64;
    let mut _110: u64;
    let mut _111: u64;
    let mut _112: u64;
    let mut _113: !;
    let _114: ();
    let mut _115: &str;
    let _116: &str;
    let mut _117: &std::string::String;
    let _118: &std::string::String;
    let _119: std::string::String;
    let mut _121: std::fmt::Arguments<'_>;
    let mut _122: &[&str];
    let mut _123: &[&str; 3];
    let _124: &[&str; 3];
    let _125: [&str; 3];
    let mut _126: &[core::fmt::rt::Argument<'_>];
    let mut _127: &[core::fmt::rt::Argument<'_>; 3];
    let _128: &[core::fmt::rt::Argument<'_>; 3];
    let _129: [core::fmt::rt::Argument<'_>; 3];
    let mut _130: core::fmt::rt::Argument<'_>;
    let mut _131: &u16;
    let _132: &u16;
    let mut _133: core::fmt::rt::Argument<'_>;
    let mut _134: &u64;
    let _135: &u64;
    let _136: u64;
    let mut _137: u64;
    let mut _138: u64;
    let mut _139: core::fmt::rt::Argument<'_>;
    let mut _140: &u64;
    let _141: &u64;
    scope 1 {
        debug oracle_divergence => _3;
        let _33: u64;
        scope 14 {
            debug oracle_divergence_limit => _33;
            let _52: std::string::String;
            let _71: i64;
            let mut _142: &[&str; 3];
            scope 15 {
                debug res => _52;
            }
            scope 16 {
                debug min_price => _71;
                let _74: u64;
                scope 17 {
                    debug std_limit => _74;
                    let _120: std::string::String;
                    let mut _143: &[&str; 3];
                    scope 18 {
                        debug res => _120;
                    }
                }
            }
        }
    }
    scope 2 {
        debug residual => _16;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _19;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _21;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _24;
        scope 9 {
        }
    }
    scope 10 {
        debug residual => _29;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _32;
        scope 13 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = _2;
        StorageLive(_14);
        _14 = ((((*_1).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).4: i64);
        _12 = <i64 as SafeMath>::safe_sub(move _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        StorageDead(_13);
        _11 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _12) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_12);
        _15 = discriminant(_11);
        switchInt(move _15) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_19);
        _19 = ((_11 as Continue).0: i64);
        _10 = _19;
        StorageDead(_19);
        _9 = <i64 as SafeMath>::safe_mul(move _10, const _) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_16);
        _16 = ((_11 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_18);
        _18 = _16;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _18) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb76;
    }

    bb7: {
        StorageDead(_10);
        _8 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _9) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_9);
        _20 = discriminant(_8);
        switchInt(move _20) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_24);
        _24 = ((_8 as Continue).0: i64);
        _7 = _24;
        StorageDead(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = ((((*_1).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).4: i64);
        StorageLive(_27);
        _27 = _2;
        _25 = <i64 as Ord>::min(move _26, move _27) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_21);
        _21 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_23);
        _23 = _21;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _23) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_23);
        StorageDead(_21);
        goto -> bb76;
    }

    bb12: {
        StorageDead(_27);
        StorageDead(_26);
        _6 = <i64 as SafeMath>::safe_div(move _7, move _25) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_25);
        StorageDead(_7);
        _5 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _6) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_6);
        _28 = discriminant(_5);
        switchInt(move _28) -> [0: bb15, 1: bb16, otherwise: bb4];
    }

    bb15: {
        StorageLive(_32);
        _32 = ((_5 as Continue).0: i64);
        _4 = _32;
        StorageDead(_32);
        _3 = core::num::<impl i64>::unsigned_abs(move _4) -> [return: bb18, unwind continue];
    }

    bb16: {
        StorageLive(_29);
        _29 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_31);
        _31 = _29;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _31) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_31);
        StorageDead(_29);
        goto -> bb77;
    }

    bb18: {
        StorageDead(_4);
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_5);
        StorageLive(_33);
        _34 = discriminant(((*_1).24: state::perp_market::ContractTier));
        switchInt(move _34) -> [0: bb20, 1: bb22, 2: bb24, 3: bb26, 4: bb28, 5: bb19, otherwise: bb4];
    }

    bb19: {
        _40 = Eq(const 40_u64, const 0_u64);
        assert(!move _40, "attempt to divide `{}` by zero", const _) -> [success: bb30, unwind continue];
    }

    bb20: {
        _35 = Eq(const 200_u64, const 0_u64);
        assert(!move _35, "attempt to divide `{}` by zero", const _) -> [success: bb21, unwind continue];
    }

    bb21: {
        _33 = Div(const _, const 200_u64);
        goto -> bb31;
    }

    bb22: {
        _36 = Eq(const 200_u64, const 0_u64);
        assert(!move _36, "attempt to divide `{}` by zero", const _) -> [success: bb23, unwind continue];
    }

    bb23: {
        _33 = Div(const _, const 200_u64);
        goto -> bb31;
    }

    bb24: {
        _37 = Eq(const 100_u64, const 0_u64);
        assert(!move _37, "attempt to divide `{}` by zero", const _) -> [success: bb25, unwind continue];
    }

    bb25: {
        _33 = Div(const _, const 100_u64);
        goto -> bb31;
    }

    bb26: {
        _38 = Eq(const 40_u64, const 0_u64);
        assert(!move _38, "attempt to divide `{}` by zero", const _) -> [success: bb27, unwind continue];
    }

    bb27: {
        _33 = Div(const _, const 40_u64);
        goto -> bb31;
    }

    bb28: {
        _39 = Eq(const 40_u64, const 0_u64);
        assert(!move _39, "attempt to divide `{}` by zero", const _) -> [success: bb29, unwind continue];
    }

    bb29: {
        _33 = Div(const _, const 40_u64);
        goto -> bb31;
    }

    bb30: {
        _33 = Div(const _, const 40_u64);
        goto -> bb31;
    }

    bb31: {
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = _3;
        StorageLive(_44);
        _44 = _33;
        _42 = Ge(move _43, move _44);
        switchInt(move _42) -> [0: bb41, otherwise: bb32];
    }

    bb32: {
        StorageDead(_44);
        StorageDead(_43);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _142 = const _;
        _56 = &(*_142);
        _55 = &(*_56);
        _54 = move _55 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_55);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = &((*_1).21: u16);
        _63 = &(*_64);
        _62 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _63) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_63);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        _67 = &_3;
        _66 = &(*_67);
        _65 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _66) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_66);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &_33;
        _69 = &(*_70);
        _68 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _69) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_69);
        _61 = [move _62, move _65, move _68];
        StorageDead(_68);
        StorageDead(_65);
        StorageDead(_62);
        _60 = &_61;
        _59 = &(*_60);
        _58 = move _59 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_59);
        _53 = Arguments::<'_>::new_v1(move _54, move _58) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_58);
        StorageDead(_54);
        _52 = format(move _53) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_53);
        StorageDead(_70);
        StorageDead(_67);
        StorageDead(_64);
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_56);
        _51 = move _52;
        StorageDead(_52);
        _50 = &_51;
        _49 = &(*_50);
        _48 = <String as Deref>::deref(move _49) -> [return: bb38, unwind: bb81];
    }

    bb38: {
        _47 = &(*_48);
        StorageDead(_49);
        _46 = solana_program::log::sol_log(move _47) -> [return: bb39, unwind: bb81];
    }

    bb39: {
        StorageDead(_47);
        drop(_51) -> [return: bb40, unwind: bb82];
    }

    bb40: {
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_48);
        StorageDead(_46);
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(const false);
        StorageDead(_42);
        StorageDead(_41);
        goto -> bb75;
    }

    bb41: {
        StorageDead(_44);
        StorageDead(_43);
        _41 = const ();
        StorageDead(_42);
        StorageDead(_41);
        StorageLive(_71);
        StorageLive(_72);
        _72 = _2;
        StorageLive(_73);
        _73 = ((((*_1).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).4: i64);
        _71 = <i64 as Ord>::min(move _72, move _73) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_73);
        StorageDead(_72);
        StorageLive(_74);
        StorageLive(_75);
        _76 = discriminant(((*_1).24: state::perp_market::ContractTier));
        switchInt(move _76) -> [0: bb44, 1: bb47, 2: bb50, 3: bb53, 4: bb56, 5: bb43, otherwise: bb4];
    }

    bb43: {
        StorageLive(_102);
        _102 = _71;
        _103 = Eq(const 10_i64, const 0_i64);
        assert(!move _103, "attempt to divide `{}` by zero", _102) -> [success: bb59, unwind continue];
    }

    bb44: {
        StorageLive(_77);
        _77 = _71;
        _78 = Eq(const 50_i64, const 0_i64);
        assert(!move _78, "attempt to divide `{}` by zero", _77) -> [success: bb45, unwind continue];
    }

    bb45: {
        _79 = Eq(const 50_i64, const -1_i64);
        _80 = Eq(_77, const i64::MIN);
        _81 = BitAnd(move _79, move _80);
        assert(!move _81, "attempt to compute `{} / {}`, which would overflow", _77, const 50_i64) -> [success: bb46, unwind continue];
    }

    bb46: {
        _75 = Div(move _77, const 50_i64);
        StorageDead(_77);
        goto -> bb61;
    }

    bb47: {
        StorageLive(_82);
        _82 = _71;
        _83 = Eq(const 50_i64, const 0_i64);
        assert(!move _83, "attempt to divide `{}` by zero", _82) -> [success: bb48, unwind continue];
    }

    bb48: {
        _84 = Eq(const 50_i64, const -1_i64);
        _85 = Eq(_82, const i64::MIN);
        _86 = BitAnd(move _84, move _85);
        assert(!move _86, "attempt to compute `{} / {}`, which would overflow", _82, const 50_i64) -> [success: bb49, unwind continue];
    }

    bb49: {
        _75 = Div(move _82, const 50_i64);
        StorageDead(_82);
        goto -> bb61;
    }

    bb50: {
        StorageLive(_87);
        _87 = _71;
        _88 = Eq(const 20_i64, const 0_i64);
        assert(!move _88, "attempt to divide `{}` by zero", _87) -> [success: bb51, unwind continue];
    }

    bb51: {
        _89 = Eq(const 20_i64, const -1_i64);
        _90 = Eq(_87, const i64::MIN);
        _91 = BitAnd(move _89, move _90);
        assert(!move _91, "attempt to compute `{} / {}`, which would overflow", _87, const 20_i64) -> [success: bb52, unwind continue];
    }

    bb52: {
        _75 = Div(move _87, const 20_i64);
        StorageDead(_87);
        goto -> bb61;
    }

    bb53: {
        StorageLive(_92);
        _92 = _71;
        _93 = Eq(const 10_i64, const 0_i64);
        assert(!move _93, "attempt to divide `{}` by zero", _92) -> [success: bb54, unwind continue];
    }

    bb54: {
        _94 = Eq(const 10_i64, const -1_i64);
        _95 = Eq(_92, const i64::MIN);
        _96 = BitAnd(move _94, move _95);
        assert(!move _96, "attempt to compute `{} / {}`, which would overflow", _92, const 10_i64) -> [success: bb55, unwind continue];
    }

    bb55: {
        _75 = Div(move _92, const 10_i64);
        StorageDead(_92);
        goto -> bb61;
    }

    bb56: {
        StorageLive(_97);
        _97 = _71;
        _98 = Eq(const 10_i64, const 0_i64);
        assert(!move _98, "attempt to divide `{}` by zero", _97) -> [success: bb57, unwind continue];
    }

    bb57: {
        _99 = Eq(const 10_i64, const -1_i64);
        _100 = Eq(_97, const i64::MIN);
        _101 = BitAnd(move _99, move _100);
        assert(!move _101, "attempt to compute `{} / {}`, which would overflow", _97, const 10_i64) -> [success: bb58, unwind continue];
    }

    bb58: {
        _75 = Div(move _97, const 10_i64);
        StorageDead(_97);
        goto -> bb61;
    }

    bb59: {
        _104 = Eq(const 10_i64, const -1_i64);
        _105 = Eq(_102, const i64::MIN);
        _106 = BitAnd(move _104, move _105);
        assert(!move _106, "attempt to compute `{} / {}`, which would overflow", _102, const 10_i64) -> [success: bb60, unwind continue];
    }

    bb60: {
        _75 = Div(move _102, const 10_i64);
        StorageDead(_102);
        goto -> bb61;
    }

    bb61: {
        _74 = core::num::<impl i64>::unsigned_abs(move _75) -> [return: bb62, unwind continue];
    }

    bb62: {
        StorageDead(_75);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _110 = (((*_1).1: state::perp_market::AMM).61: u64);
        StorageLive(_111);
        _111 = (((*_1).1: state::perp_market::AMM).60: u64);
        _109 = <u64 as Ord>::max(move _110, move _111) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_111);
        StorageDead(_110);
        StorageLive(_112);
        _112 = _74;
        _108 = Ge(move _109, move _112);
        switchInt(move _108) -> [0: bb74, otherwise: bb64];
    }

    bb64: {
        StorageDead(_112);
        StorageDead(_109);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        _143 = const _;
        _124 = &(*_143);
        _123 = &(*_124);
        _122 = move _123 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_123);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        _132 = &((*_1).21: u16);
        _131 = &(*_132);
        _130 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _131) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_131);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        _137 = (((*_1).1: state::perp_market::AMM).61: u64);
        StorageLive(_138);
        _138 = (((*_1).1: state::perp_market::AMM).60: u64);
        _136 = <u64 as Ord>::max(move _137, move _138) -> [return: bb66, unwind continue];
    }

    bb66: {
        StorageDead(_138);
        StorageDead(_137);
        _135 = &_136;
        _134 = &(*_135);
        _133 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _134) -> [return: bb67, unwind continue];
    }

    bb67: {
        StorageDead(_134);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        _141 = &_74;
        _140 = &(*_141);
        _139 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _140) -> [return: bb68, unwind continue];
    }

    bb68: {
        StorageDead(_140);
        _129 = [move _130, move _133, move _139];
        StorageDead(_139);
        StorageDead(_133);
        StorageDead(_130);
        _128 = &_129;
        _127 = &(*_128);
        _126 = move _127 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_127);
        _121 = Arguments::<'_>::new_v1(move _122, move _126) -> [return: bb69, unwind continue];
    }

    bb69: {
        StorageDead(_126);
        StorageDead(_122);
        _120 = format(move _121) -> [return: bb70, unwind continue];
    }

    bb70: {
        StorageDead(_121);
        StorageDead(_141);
        StorageDead(_136);
        StorageDead(_135);
        StorageDead(_132);
        StorageDead(_129);
        StorageDead(_128);
        StorageDead(_124);
        _119 = move _120;
        StorageDead(_120);
        _118 = &_119;
        _117 = &(*_118);
        _116 = <String as Deref>::deref(move _117) -> [return: bb71, unwind: bb80];
    }

    bb71: {
        _115 = &(*_116);
        StorageDead(_117);
        _114 = solana_program::log::sol_log(move _115) -> [return: bb72, unwind: bb80];
    }

    bb72: {
        StorageDead(_115);
        drop(_119) -> [return: bb73, unwind: bb82];
    }

    bb73: {
        StorageDead(_119);
        StorageDead(_118);
        StorageDead(_116);
        StorageDead(_114);
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(const false);
        StorageDead(_108);
        StorageDead(_107);
        StorageDead(_74);
        StorageDead(_71);
        goto -> bb75;
    }

    bb74: {
        StorageDead(_112);
        StorageDead(_109);
        _107 = const ();
        StorageDead(_108);
        StorageDead(_107);
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(const true);
        StorageDead(_74);
        StorageDead(_71);
        StorageDead(_33);
        StorageDead(_3);
        goto -> bb79;
    }

    bb75: {
        StorageDead(_33);
        goto -> bb78;
    }

    bb76: {
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb77;
    }

    bb77: {
        StorageDead(_4);
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_5);
        goto -> bb78;
    }

    bb78: {
        StorageDead(_3);
        goto -> bb79;
    }

    bb79: {
        return;
    }

    bb80 (cleanup): {
        drop(_119) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        drop(_51) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        resume;
    }
}
