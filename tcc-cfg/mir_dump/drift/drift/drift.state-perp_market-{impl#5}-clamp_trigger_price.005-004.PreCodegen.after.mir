// MIR for `state::perp_market::<impl at programs/drift/src/state/perp_market.rs:298:1: 298:16>::clamp_trigger_price` after PreCodegen

fn state::perp_market::<impl at programs/drift/src/state/perp_market.rs:298:1: 298:16>::clamp_trigger_price(_1: &PerpMarket, _2: u64, _3: u64) -> std::result::Result<u64, error::ErrorCode> {
    debug self => _1;
    debug oracle_price => _2;
    debug median_price => _3;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let _4: u64;
    let mut _5: bool;
    let mut _6: isize;
    let mut _7: bool;
    let mut _8: isize;
    let mut _10: u64;
    let mut _11: u64;
    let mut _12: bool;
    let mut _13: u64;
    let mut _14: u64;
    let mut _15: u64;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _17: std::result::Result<u64, error::ErrorCode>;
    let mut _18: u64;
    let mut _19: u64;
    let mut _20: isize;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _25: u64;
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _27: std::result::Result<u64, error::ErrorCode>;
    let mut _28: u64;
    let mut _29: u64;
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    scope 1 {
        debug max_bps_diff => _4;
        let _9: u64;
        scope 2 {
            debug max_oracle_diff => _9;
            let _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _24: u64;
            let _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _34: u64;
            scope 3 {
                debug residual => _21;
                scope 4 {
                }
            }
            scope 5 {
                debug val => _24;
                scope 6 {
                }
            }
            scope 7 {
                debug residual => _31;
                scope 8 {
                }
            }
            scope 9 {
                debug val => _34;
                scope 10 {
                }
            }
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        _6 = discriminant(((*_1).24: state::perp_market::ContractTier));
        switchInt(move _6) -> [0: bb2, 1: bb2, otherwise: bb1];
    }

    bb1: {
        _5 = const false;
        goto -> bb3;
    }

    bb2: {
        _5 = const true;
        goto -> bb3;
    }

    bb3: {
        switchInt(move _5) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _4 = const 500_u64;
        goto -> bb12;
    }

    bb5: {
        StorageLive(_7);
        _8 = discriminant(((*_1).24: state::perp_market::ContractTier));
        switchInt(move _8) -> [2: bb7, otherwise: bb6];
    }

    bb6: {
        _7 = const false;
        goto -> bb8;
    }

    bb7: {
        _7 = const true;
        goto -> bb8;
    }

    bb8: {
        switchInt(move _7) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _4 = const 100_u64;
        goto -> bb11;
    }

    bb10: {
        _4 = const 40_u64;
        goto -> bb11;
    }

    bb11: {
        StorageDead(_7);
        goto -> bb12;
    }

    bb12: {
        StorageDead(_5);
        StorageLive(_9);
        StorageLive(_10);
        _10 = _2;
        StorageLive(_11);
        _11 = _4;
        _12 = Eq(_11, const 0_u64);
        assert(!move _12, "attempt to divide `{}` by zero", _10) -> [success: bb13, unwind continue];
    }

    bb13: {
        _9 = Div(move _10, move _11);
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_13);
        StorageLive(_14);
        _14 = _3;
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = _2;
        StorageLive(_19);
        _19 = _9;
        _17 = <u64 as SafeMath>::safe_sub(move _18, move _19) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_19);
        StorageDead(_18);
        _16 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _17) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_17);
        _20 = discriminant(_16);
        switchInt(move _20) -> [0: bb16, 1: bb18, otherwise: bb17];
    }

    bb16: {
        StorageLive(_24);
        _24 = ((_16 as Continue).0: u64);
        _15 = _24;
        StorageDead(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = _2;
        StorageLive(_29);
        _29 = _9;
        _27 = <u64 as SafeMath>::safe_add(move _28, move _29) -> [return: bb20, unwind continue];
    }

    bb17: {
        unreachable;
    }

    bb18: {
        StorageLive(_21);
        _21 = ((_16 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_23);
        _23 = _21;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _23) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_4);
        goto -> bb26;
    }

    bb20: {
        StorageDead(_29);
        StorageDead(_28);
        _26 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _27) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_27);
        _30 = discriminant(_26);
        switchInt(move _30) -> [0: bb22, 1: bb23, otherwise: bb17];
    }

    bb22: {
        StorageLive(_34);
        _34 = ((_26 as Continue).0: u64);
        _25 = _34;
        StorageDead(_34);
        _13 = <u64 as Ord>::clamp(move _14, move _15, move _25) -> [return: bb25, unwind continue];
    }

    bb23: {
        StorageLive(_31);
        _31 = ((_26 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_33);
        _33 = _31;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _33) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_25);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_4);
        StorageDead(_26);
        goto -> bb26;
    }

    bb25: {
        StorageDead(_25);
        StorageDead(_15);
        StorageDead(_14);
        _0 = std::result::Result::<u64, error::ErrorCode>::Ok(move _13);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_4);
        StorageDead(_26);
        StorageDead(_16);
        goto -> bb27;
    }

    bb26: {
        StorageDead(_16);
        goto -> bb27;
    }

    bb27: {
        return;
    }
}
