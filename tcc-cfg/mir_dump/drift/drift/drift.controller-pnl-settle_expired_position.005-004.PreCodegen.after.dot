digraph Mir_0_644 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn settle_expired_position(_1: u16, _2: &amp;ReErased mut state::user::User, _3: &amp;ReErased anchor_lang::prelude::Pubkey, _4: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;, _5: &amp;ReErased state::spot_market_map::SpotMarketMap&lt;ReErased&gt;, _6: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;, _7: &amp;ReErased anchor_lang::prelude::Clock, _8: &amp;ReErased state::state::State) -&gt; std::result::Result&lt;(), error::ErrorCode&gt;<br align="left"/>let _9: ();<br align="left"/>let mut _10: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _11: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _12: bool;<br align="left"/>let mut _13: &amp;ReErased state::user::User;<br align="left"/>let mut _14: ();<br align="left"/>let _15: error::ErrorCode;<br align="left"/>let _16: ();<br align="left"/>let mut _17: &amp;ReErased str;<br align="left"/>let _18: &amp;ReErased str;<br align="left"/>let mut _19: &amp;ReErased std::string::String;<br align="left"/>let _20: &amp;ReErased std::string::String;<br align="left"/>let _21: std::string::String;<br align="left"/>let _22: std::string::String;<br align="left"/>let mut _23: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _24: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _25: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _26: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _27: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _28: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _29: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _30: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _31: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _32: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _33: &amp;ReErased error::ErrorCode;<br align="left"/>let _34: &amp;ReErased error::ErrorCode;<br align="left"/>let mut _35: error::ErrorCode;<br align="left"/>let mut _36: isize;<br align="left"/>let _37: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _38: !;<br align="left"/>let mut _39: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _40: ();<br align="left"/>let _41: ();<br align="left"/>let mut _42: bool;<br align="left"/>let mut _43: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _44: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _45: &amp;ReErased state::user::User;<br align="left"/>let mut _46: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _47: &amp;ReErased state::spot_market_map::SpotMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _48: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;;<br align="left"/>let mut _49: isize;<br align="left"/>let _50: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _51: !;<br align="left"/>let mut _52: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _53: bool;<br align="left"/>let mut _54: !;<br align="left"/>let mut _55: error::ErrorCode;<br align="left"/>let _56: &amp;ReErased state::state::FeeStructure;<br align="left"/>let _57: i64;<br align="left"/>let _58: u64;<br align="left"/>let _59: ();<br align="left"/>let _60: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let mut _61: std::cell::RefMut&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let mut _62: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::cell::RefMut&lt;ReErased, state::spot_market::SpotMarket&gt;&gt;;<br align="left"/>let mut _63: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::spot_market::SpotMarket&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _64: &amp;ReErased state::spot_market_map::SpotMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _65: isize;<br align="left"/>let _66: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _67: !;<br align="left"/>let mut _68: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _69: std::cell::RefMut&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let _70: ();<br align="left"/>let mut _71: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _72: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _73: &amp;ReErased mut state::spot_market::SpotMarket;<br align="left"/>let mut _74: &amp;ReErased mut state::spot_market::SpotMarket;<br align="left"/>let mut _75: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let mut _76: std::option::Option&lt;&amp;ReErased state::oracle::OraclePriceData&gt;;<br align="left"/>let mut _77: i64;<br align="left"/>let mut _78: isize;<br align="left"/>let _79: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _80: !;<br align="left"/>let mut _81: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _82: ();<br align="left"/>let _83: ();<br align="left"/>let mut _84: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _85: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _86: &amp;ReErased mut state::user::User;<br align="left"/>let mut _87: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _88: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _89: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _90: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _91: std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _92: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;&gt;;<br align="left"/>let mut _93: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _94: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _95: &amp;ReErased u16;<br align="left"/>let _96: &amp;ReErased u16;<br align="left"/>let mut _97: isize;<br align="left"/>let _98: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _99: !;<br align="left"/>let mut _100: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _101: std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _102: i64;<br align="left"/>let mut _103: isize;<br align="left"/>let _104: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _105: !;<br align="left"/>let mut _106: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _107: ();<br align="left"/>let _108: std::vec::Vec&lt;u32, std::alloc::Global&gt;;<br align="left"/>let mut _109: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::vec::Vec&lt;u32, std::alloc::Global&gt;&gt;;<br align="left"/>let mut _110: std::result::Result&lt;std::vec::Vec&lt;u32, std::alloc::Global&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _111: &amp;ReErased mut state::user::User;<br align="left"/>let mut _112: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _113: std::option::Option&lt;&amp;ReErased anchor_lang::prelude::Pubkey&gt;;<br align="left"/>let mut _114: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _115: &amp;ReErased state::spot_market_map::SpotMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _116: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;;<br align="left"/>let mut _117: i64;<br align="left"/>let mut _118: u64;<br align="left"/>let mut _119: state::events::OrderActionExplanation;<br align="left"/>let mut _120: std::option::Option&lt;state::user::MarketType&gt;;<br align="left"/>let mut _121: state::user::MarketType;<br align="left"/>let mut _122: std::option::Option&lt;u16&gt;;<br align="left"/>let mut _123: u16;<br align="left"/>let mut _124: std::option::Option&lt;controller::position::PositionDirection&gt;;<br align="left"/>let mut _125: isize;<br align="left"/>let _126: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _127: !;<br align="left"/>let mut _128: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _129: std::vec::Vec&lt;u32, std::alloc::Global&gt;;<br align="left"/>let _130: usize;<br align="left"/>let mut _131: std::result::Result&lt;usize, error::ErrorCode&gt;;<br align="left"/>let mut _132: &amp;ReErased [state::user::PerpPosition; 8_usize];<br align="left"/>let _133: &amp;ReErased [state::user::PerpPosition; 8_usize];<br align="left"/>let mut _134: u16;<br align="left"/>let mut _135: isize;<br align="left"/>let _136: usize;<br align="left"/>let mut _137: !;<br align="left"/>let _138: ();<br align="left"/>let mut _139: &amp;ReErased str;<br align="left"/>let _140: &amp;ReErased str;<br align="left"/>let mut _141: &amp;ReErased std::string::String;<br align="left"/>let _142: &amp;ReErased std::string::String;<br align="left"/>let _143: std::string::String;<br align="left"/>let _144: std::string::String;<br align="left"/>let mut _145: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _146: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _147: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _148: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _149: [&amp;ReErased str; 1_usize];<br align="left"/>let mut _150: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _151: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _152: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _153: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _154: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _155: &amp;ReErased u16;<br align="left"/>let _156: &amp;ReErased u16;<br align="left"/>let mut _157: ();<br align="left"/>let _158: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let mut _159: std::cell::RefMut&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let mut _160: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::cell::RefMut&lt;ReErased, state::spot_market::SpotMarket&gt;&gt;;<br align="left"/>let mut _161: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::spot_market::SpotMarket&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _162: &amp;ReErased state::spot_market_map::SpotMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _163: isize;<br align="left"/>let _164: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _165: !;<br align="left"/>let mut _166: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _167: std::cell::RefMut&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let _168: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _169: std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _170: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;&gt;;<br align="left"/>let mut _171: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _172: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _173: &amp;ReErased u16;<br align="left"/>let _174: &amp;ReErased u16;<br align="left"/>let mut _175: isize;<br align="left"/>let _176: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _177: !;<br align="left"/>let mut _178: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _179: std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let _180: ();<br align="left"/>let mut _181: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _182: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _183: bool;<br align="left"/>let mut _184: &amp;ReErased state::perp_market::MarketStatus;<br align="left"/>let _185: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _186: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _187: &amp;ReErased state::perp_market::MarketStatus;<br align="left"/>let _188: state::perp_market::MarketStatus;<br align="left"/>let mut _189: ();<br align="left"/>let _190: error::ErrorCode;<br align="left"/>let _191: ();<br align="left"/>let mut _192: &amp;ReErased str;<br align="left"/>let _193: &amp;ReErased str;<br align="left"/>let mut _194: &amp;ReErased std::string::String;<br align="left"/>let _195: &amp;ReErased std::string::String;<br align="left"/>let _196: std::string::String;<br align="left"/>let _197: std::string::String;<br align="left"/>let mut _198: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _199: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _200: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _201: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _202: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _203: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _204: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _205: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _206: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _207: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _208: &amp;ReErased error::ErrorCode;<br align="left"/>let _209: &amp;ReErased error::ErrorCode;<br align="left"/>let _210: ();<br align="left"/>let mut _211: &amp;ReErased str;<br align="left"/>let _212: &amp;ReErased str;<br align="left"/>let mut _213: &amp;ReErased std::string::String;<br align="left"/>let _214: &amp;ReErased std::string::String;<br align="left"/>let _215: std::string::String;<br align="left"/>let _216: std::string::String;<br align="left"/>let mut _217: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _218: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _219: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _220: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _221: [&amp;ReErased str; 1_usize];<br align="left"/>let mut _222: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _223: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _224: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _225: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _226: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _227: &amp;ReErased i64;<br align="left"/>let _228: &amp;ReErased i64;<br align="left"/>let _229: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _230: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _231: error::ErrorCode;<br align="left"/>let mut _232: isize;<br align="left"/>let _233: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _234: !;<br align="left"/>let mut _235: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _236: ();<br align="left"/>let _237: i64;<br align="left"/>let mut _238: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _239: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _240: i64;<br align="left"/>let mut _241: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _242: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _243: i64;<br align="left"/>let mut _244: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _245: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _246: u16;<br align="left"/>let mut _247: isize;<br align="left"/>let _248: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _249: !;<br align="left"/>let mut _250: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _251: i64;<br align="left"/>let mut _252: isize;<br align="left"/>let _253: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _254: !;<br align="left"/>let mut _255: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _256: i64;<br align="left"/>let _257: ();<br align="left"/>let mut _258: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _259: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _260: bool;<br align="left"/>let mut _261: i64;<br align="left"/>let mut _262: i64;<br align="left"/>let mut _263: ();<br align="left"/>let _264: error::ErrorCode;<br align="left"/>let _265: ();<br align="left"/>let mut _266: &amp;ReErased str;<br align="left"/>let _267: &amp;ReErased str;<br align="left"/>let mut _268: &amp;ReErased std::string::String;<br align="left"/>let _269: &amp;ReErased std::string::String;<br align="left"/>let _270: std::string::String;<br align="left"/>let _271: std::string::String;<br align="left"/>let mut _272: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _273: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _274: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _275: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _276: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _277: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _278: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _279: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _280: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _281: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _282: &amp;ReErased error::ErrorCode;<br align="left"/>let _283: &amp;ReErased error::ErrorCode;<br align="left"/>let _284: ();<br align="left"/>let mut _285: &amp;ReErased str;<br align="left"/>let _286: &amp;ReErased str;<br align="left"/>let mut _287: &amp;ReErased std::string::String;<br align="left"/>let _288: &amp;ReErased std::string::String;<br align="left"/>let _289: std::string::String;<br align="left"/>let _290: std::string::String;<br align="left"/>let mut _291: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _292: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _293: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _294: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _295: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _296: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _297: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _298: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _299: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _300: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _301: &amp;ReErased u16;<br align="left"/>let _302: &amp;ReErased u16;<br align="left"/>let mut _303: error::ErrorCode;<br align="left"/>let mut _304: isize;<br align="left"/>let _305: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _306: !;<br align="left"/>let mut _307: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _308: ();<br align="left"/>let _309: ();<br align="left"/>let mut _310: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _311: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _312: bool;<br align="left"/>let mut _313: u8;<br align="left"/>let _314: usize;<br align="left"/>let mut _315: usize;<br align="left"/>let mut _316: bool;<br align="left"/>let mut _317: ();<br align="left"/>let _318: error::ErrorCode;<br align="left"/>let _319: ();<br align="left"/>let mut _320: &amp;ReErased str;<br align="left"/>let _321: &amp;ReErased str;<br align="left"/>let mut _322: &amp;ReErased std::string::String;<br align="left"/>let _323: &amp;ReErased std::string::String;<br align="left"/>let _324: std::string::String;<br align="left"/>let _325: std::string::String;<br align="left"/>let mut _326: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _327: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _328: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _329: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _330: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _331: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _332: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _333: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _334: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _335: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _336: &amp;ReErased error::ErrorCode;<br align="left"/>let _337: &amp;ReErased error::ErrorCode;<br align="left"/>let _338: ();<br align="left"/>let mut _339: &amp;ReErased str;<br align="left"/>let _340: &amp;ReErased str;<br align="left"/>let mut _341: error::ErrorCode;<br align="left"/>let mut _342: isize;<br align="left"/>let _343: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _344: !;<br align="left"/>let mut _345: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _346: ();<br align="left"/>let _347: i64;<br align="left"/>let mut _348: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _349: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _350: &amp;ReErased state::user::PerpPosition;<br align="left"/>let _351: &amp;ReErased state::user::PerpPosition;<br align="left"/>let _352: usize;<br align="left"/>let mut _353: usize;<br align="left"/>let mut _354: bool;<br align="left"/>let mut _355: i64;<br align="left"/>let mut _356: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _357: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _358: isize;<br align="left"/>let _359: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _360: !;<br align="left"/>let mut _361: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _362: i64;<br align="left"/>let _363: i64;<br align="left"/>let _364: usize;<br align="left"/>let mut _365: usize;<br align="left"/>let mut _366: bool;<br align="left"/>let _367: i64;<br align="left"/>let _368: usize;<br align="left"/>let mut _369: usize;<br align="left"/>let mut _370: bool;<br align="left"/>let _371: controller::position::PositionDelta;<br align="left"/>let mut _372: i64;<br align="left"/>let mut _373: i64;<br align="left"/>let mut _374: i64;<br align="left"/>let _375: usize;<br align="left"/>let mut _376: usize;<br align="left"/>let mut _377: bool;<br align="left"/>let mut _378: bool;<br align="left"/>let _379: i64;<br align="left"/>let mut _380: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _381: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _382: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let mut _383: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let _384: usize;<br align="left"/>let mut _385: usize;<br align="left"/>let mut _386: bool;<br align="left"/>let mut _387: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _388: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _389: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _390: &amp;ReErased controller::position::PositionDelta;<br align="left"/>let _391: &amp;ReErased controller::position::PositionDelta;<br align="left"/>let mut _392: isize;<br align="left"/>let _393: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _394: !;<br align="left"/>let mut _395: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _396: i64;<br align="left"/>let _397: i64;<br align="left"/>let mut _398: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _399: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _400: i64;<br align="left"/>let mut _401: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _402: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _403: i64;<br align="left"/>let mut _404: i64;<br align="left"/>let mut _405: u32;<br align="left"/>let _406: usize;<br align="left"/>let mut _407: usize;<br align="left"/>let mut _408: bool;<br align="left"/>let mut _409: isize;<br align="left"/>let _410: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _411: !;<br align="left"/>let mut _412: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _413: i64;<br align="left"/>let mut _414: i64;<br align="left"/>let mut _415: u32;<br align="left"/>let _416: usize;<br align="left"/>let mut _417: usize;<br align="left"/>let mut _418: bool;<br align="left"/>let mut _419: isize;<br align="left"/>let _420: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _421: !;<br align="left"/>let mut _422: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _423: i64;<br align="left"/>let _424: ();<br align="left"/>let mut _425: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _426: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _427: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let mut _428: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let _429: usize;<br align="left"/>let mut _430: usize;<br align="left"/>let mut _431: bool;<br align="left"/>let mut _432: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _433: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _434: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _435: i64;<br align="left"/>let mut _436: i64;<br align="left"/>let mut _437: i64;<br align="left"/>let mut _438: bool;<br align="left"/>let mut _439: isize;<br align="left"/>let _440: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _441: !;<br align="left"/>let mut _442: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _443: ();<br align="left"/>let _444: i64;<br align="left"/>let _445: usize;<br align="left"/>let mut _446: usize;<br align="left"/>let mut _447: bool;<br align="left"/>let _448: i128;<br align="left"/>let mut _449: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _450: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _451: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _452: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _453: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _454: &amp;ReErased mut state::spot_market::SpotMarket;<br align="left"/>let mut _455: &amp;ReErased mut state::spot_market::SpotMarket;<br align="left"/>let mut _456: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let mut _457: &amp;ReErased mut state::user::User;<br align="left"/>let mut _458: i128;<br align="left"/>let mut _459: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _460: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _461: i64;<br align="left"/>let mut _462: isize;<br align="left"/>let _463: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _464: !;<br align="left"/>let mut _465: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _466: i128;<br align="left"/>let mut _467: isize;<br align="left"/>let _468: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _469: !;<br align="left"/>let mut _470: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _471: i128;<br align="left"/>let _472: ();<br align="left"/>let mut _473: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _474: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _475: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let mut _476: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let _477: usize;<br align="left"/>let mut _478: usize;<br align="left"/>let mut _479: bool;<br align="left"/>let mut _480: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _481: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _482: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _483: i64;<br align="left"/>let mut _484: i64;<br align="left"/>let mut _485: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _486: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _487: i128;<br align="left"/>let mut _488: isize;<br align="left"/>let _489: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _490: !;<br align="left"/>let mut _491: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _492: i64;<br align="left"/>let mut _493: bool;<br align="left"/>let mut _494: isize;<br align="left"/>let _495: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _496: !;<br align="left"/>let mut _497: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _498: ();<br align="left"/>let _499: ();<br align="left"/>let mut _500: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _501: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _502: &amp;ReErased mut state::user::User;<br align="left"/>let mut _503: usize;<br align="left"/>let mut _504: i64;<br align="left"/>let mut _505: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _506: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _507: i128;<br align="left"/>let mut _508: isize;<br align="left"/>let _509: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _510: !;<br align="left"/>let mut _511: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _512: i64;<br align="left"/>let mut _513: isize;<br align="left"/>let _514: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _515: !;<br align="left"/>let mut _516: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _517: ();<br align="left"/>let mut _518: i128;<br align="left"/>let mut _519: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _520: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _521: i128;<br align="left"/>let mut _522: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _523: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _524: i128;<br align="left"/>let mut _525: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _526: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _527: i64;<br align="left"/>let mut _528: isize;<br align="left"/>let _529: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _530: !;<br align="left"/>let mut _531: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _532: i128;<br align="left"/>let mut _533: isize;<br align="left"/>let _534: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _535: !;<br align="left"/>let mut _536: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _537: i128;<br align="left"/>let mut _538: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _539: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let _540: i64;<br align="left"/>let _541: usize;<br align="left"/>let mut _542: usize;<br align="left"/>let mut _543: bool;<br align="left"/>let _544: ();<br align="left"/>let _545: ();<br align="left"/>let mut _546: &amp;ReErased [&amp;ReErased [u8]];<br align="left"/>let mut _547: &amp;ReErased [&amp;ReErased [u8]; 1_usize];<br align="left"/>let _548: &amp;ReErased [&amp;ReErased [u8]; 1_usize];<br align="left"/>let _549: [&amp;ReErased [u8]; 1_usize];<br align="left"/>let mut _550: &amp;ReErased [u8];<br align="left"/>let _551: &amp;ReErased [u8];<br align="left"/>let mut _552: &amp;ReErased std::vec::Vec&lt;u8, std::alloc::Global&gt;;<br align="left"/>let _553: &amp;ReErased std::vec::Vec&lt;u8, std::alloc::Global&gt;;<br align="left"/>let _554: std::vec::Vec&lt;u8, std::alloc::Global&gt;;<br align="left"/>let mut _555: &amp;ReErased state::events::SettlePnlRecord;<br align="left"/>let _556: &amp;ReErased state::events::SettlePnlRecord;<br align="left"/>let _557: state::events::SettlePnlRecord;<br align="left"/>let mut _558: i64;<br align="left"/>let mut _559: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _560: u16;<br align="left"/>let mut _561: i128;<br align="left"/>let mut _562: i64;<br align="left"/>let mut _563: i64;<br align="left"/>let mut _564: i64;<br align="left"/>let mut _565: i64;<br align="left"/>let mut _566: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _567: &amp;ReErased std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _568: state::events::SettlePnlExplanation;<br align="left"/>let _569: ();<br align="left"/>let mut _570: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _571: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _572: bool;<br align="left"/>let mut _573: &amp;ReErased state::user::PerpPosition;<br align="left"/>let _574: usize;<br align="left"/>let mut _575: usize;<br align="left"/>let mut _576: bool;<br align="left"/>let mut _577: ();<br align="left"/>let _578: error::ErrorCode;<br align="left"/>let _579: ();<br align="left"/>let mut _580: &amp;ReErased str;<br align="left"/>let _581: &amp;ReErased str;<br align="left"/>let mut _582: &amp;ReErased std::string::String;<br align="left"/>let _583: &amp;ReErased std::string::String;<br align="left"/>let _584: std::string::String;<br align="left"/>let _585: std::string::String;<br align="left"/>let mut _586: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _587: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _588: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _589: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _590: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _591: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _592: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _593: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _594: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _595: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _596: &amp;ReErased error::ErrorCode;<br align="left"/>let _597: &amp;ReErased error::ErrorCode;<br align="left"/>let _598: ();<br align="left"/>let mut _599: &amp;ReErased str;<br align="left"/>let _600: &amp;ReErased str;<br align="left"/>let mut _601: error::ErrorCode;<br align="left"/>let mut _602: isize;<br align="left"/>let _603: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _604: !;<br align="left"/>let mut _605: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _606: ();<br align="left"/>let mut _607: ();<br align="left"/>let mut _608: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let mut _609: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _610: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _611: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _612: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _613: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let mut _614: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _615: &amp;ReErased state::perp_market::MarketStatus;<br align="left"/>let mut _616: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _617: bool;<br align="left"/>let mut _618: bool;<br align="left"/>let mut _619: isize;<br align="left"/>let mut _620: isize;<br align="left"/>let mut _621: isize;<br align="left"/>let mut _622: isize;<br align="left"/>let mut _623: isize;<br align="left"/>let mut _624: isize;<br align="left"/>let mut _625: isize;<br align="left"/>let mut _626: isize;<br align="left"/>let mut _627: isize;<br align="left"/>let mut _628: isize;<br align="left"/>let mut _629: isize;<br align="left"/>let mut _630: isize;<br align="left"/>let mut _631: isize;<br align="left"/>let mut _632: isize;<br align="left"/>let mut _633: isize;<br align="left"/>let mut _634: isize;<br align="left"/>let mut _635: isize;<br align="left"/>let mut _636: isize;<br align="left"/>let mut _637: isize;<br align="left"/>let mut _638: isize;<br align="left"/>let mut _639: isize;<br align="left"/>let mut _640: isize;<br align="left"/>let mut _641: isize;<br align="left"/>let mut _642: isize;<br align="left"/>let mut _643: isize;<br align="left"/>debug perp_market_index =&gt; _1;<br align="left"/>debug user =&gt; _2;<br align="left"/>debug user_key =&gt; _3;<br align="left"/>debug perp_market_map =&gt; _4;<br align="left"/>debug spot_market_map =&gt; _5;<br align="left"/>debug oracle_map =&gt; _6;<br align="left"/>debug clock =&gt; _7;<br align="left"/>debug state =&gt; _8;<br align="left"/>debug error_code =&gt; _15;<br align="left"/>debug res =&gt; _22;<br align="left"/>debug residual =&gt; _37;<br align="left"/>debug val =&gt; _40;<br align="left"/>debug residual =&gt; _50;<br align="left"/>debug val =&gt; _53;<br align="left"/>debug fee_structure =&gt; _56;<br align="left"/>debug now =&gt; _57;<br align="left"/>debug slot =&gt; _58;<br align="left"/>debug quote_spot_market =&gt; _60;<br align="left"/>debug residual =&gt; _66;<br align="left"/>debug val =&gt; _69;<br align="left"/>debug residual =&gt; _79;<br align="left"/>debug val =&gt; _82;<br align="left"/>debug residual =&gt; _98;<br align="left"/>debug val =&gt; _101;<br align="left"/>debug residual =&gt; _104;<br align="left"/>debug val =&gt; _107;<br align="left"/>debug residual =&gt; _126;<br align="left"/>debug val =&gt; _129;<br align="left"/>debug position_index =&gt; _130;<br align="left"/>debug index =&gt; _136;<br align="left"/>debug res =&gt; _144;<br align="left"/>debug quote_spot_market =&gt; _158;<br align="left"/>debug residual =&gt; _164;<br align="left"/>debug val =&gt; _167;<br align="left"/>debug perp_market =&gt; _168;<br align="left"/>debug residual =&gt; _176;<br align="left"/>debug val =&gt; _179;<br align="left"/>debug error_code =&gt; _190;<br align="left"/>debug res =&gt; _197;<br align="left"/>debug res =&gt; _216;<br align="left"/>debug residual =&gt; _233;<br align="left"/>debug val =&gt; _236;<br align="left"/>debug position_settlement_ts =&gt; _237;<br align="left"/>debug residual =&gt; _248;<br align="left"/>debug val =&gt; _251;<br align="left"/>debug residual =&gt; _253;<br align="left"/>debug val =&gt; _256;<br align="left"/>debug error_code =&gt; _264;<br align="left"/>debug res =&gt; _271;<br align="left"/>debug res =&gt; _290;<br align="left"/>debug residual =&gt; _305;<br align="left"/>debug val =&gt; _308;<br align="left"/>debug error_code =&gt; _318;<br align="left"/>debug res =&gt; _325;<br align="left"/>debug residual =&gt; _343;<br align="left"/>debug val =&gt; _346;<br align="left"/>debug base_asset_value =&gt; _347;<br align="left"/>debug residual =&gt; _359;<br align="left"/>debug val =&gt; _362;<br align="left"/>debug base_asset_amount =&gt; _363;<br align="left"/>debug quote_entry_amount =&gt; _367;<br align="left"/>debug position_delta =&gt; _371;<br align="left"/>debug residual =&gt; _393;<br align="left"/>debug val =&gt; _396;<br align="left"/>debug fee =&gt; _397;<br align="left"/>debug residual =&gt; _410;<br align="left"/>debug val =&gt; _413;<br align="left"/>debug residual =&gt; _420;<br align="left"/>debug val =&gt; _423;<br align="left"/>debug residual =&gt; _440;<br align="left"/>debug val =&gt; _443;<br align="left"/>debug pnl =&gt; _444;<br align="left"/>debug pnl_to_settle_with_user =&gt; _448;<br align="left"/>debug residual =&gt; _463;<br align="left"/>debug val =&gt; _466;<br align="left"/>debug residual =&gt; _468;<br align="left"/>debug val =&gt; _471;<br align="left"/>debug residual =&gt; _489;<br align="left"/>debug val =&gt; _492;<br align="left"/>debug residual =&gt; _495;<br align="left"/>debug val =&gt; _498;<br align="left"/>debug residual =&gt; _509;<br align="left"/>debug val =&gt; _512;<br align="left"/>debug residual =&gt; _514;<br align="left"/>debug val =&gt; _517;<br align="left"/>debug residual =&gt; _529;<br align="left"/>debug val =&gt; _532;<br align="left"/>debug residual =&gt; _534;<br align="left"/>debug val =&gt; _537;<br align="left"/>debug quote_asset_amount_after =&gt; _540;<br align="left"/>debug error_code =&gt; _578;<br align="left"/>debug res =&gt; _585;<br align="left"/>debug residual =&gt; _603;<br align="left"/>debug val =&gt; _606;<br align="left"/>>;
    bb0__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_617 = const false<br/>_618 = const false<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>_13 = &amp;(*_2)<br/></td></tr><tr><td align="left">_12 = User::is_bankrupt(move _13)</td></tr></table>>];
    bb1__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">switchInt(move _12)</td></tr></table>>];
    bb2__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>StorageLive(_15)<br/>_15 = error::ErrorCode::UserBankrupt<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>_616 = const _<br/>_26 = &amp;(*_616)<br/>_25 = &amp;(*_26)<br/>_24 = move _25 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_25)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>_34 = &amp;_15<br/>_33 = &amp;(*_34)<br/></td></tr><tr><td align="left">_32 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _33)</td></tr></table>>];
    bb3__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>StorageLive(_14)<br/>_14 = ()<br/>_11 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _14)<br/>StorageDead(_14)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb4__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>_31 = [move _32]<br/>StorageDead(_32)<br/>_30 = &amp;_31<br/>_29 = &amp;(*_30)<br/>_28 = move _29 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_29)<br/></td></tr><tr><td align="left">_23 = Arguments::&lt;'_&gt;::new_v1(move _24, move _28)</td></tr></table>>];
    bb5__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>StorageDead(_24)<br/></td></tr><tr><td align="left">_22 = format(move _23)</td></tr></table>>];
    bb6__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageDead(_34)<br/>StorageDead(_31)<br/>StorageDead(_30)<br/>StorageDead(_26)<br/>_21 = move _22<br/>StorageDead(_22)<br/>_20 = &amp;_21<br/>_19 = &amp;(*_20)<br/></td></tr><tr><td align="left">_18 = &lt;String as Deref&gt;::deref(move _19)</td></tr></table>>];
    bb7__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_17 = &amp;(*_18)<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">_16 = solana_program::log::sol_log(move _17)</td></tr></table>>];
    bb8__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/></td></tr><tr><td align="left">drop(_21)</td></tr></table>>];
    bb9__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>StorageDead(_20)<br/>StorageDead(_18)<br/>StorageDead(_16)<br/>StorageLive(_35)<br/>_35 = _15<br/>_11 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _35)<br/>StorageDead(_35)<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/></td></tr><tr><td align="left">_10 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _11)</td></tr></table>>];
    bb11__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>_36 = discriminant(_10)<br/></td></tr><tr><td align="left">switchInt(move _36)</td></tr></table>>];
    bb12__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageLive(_40)<br/>_40 = ((_10 as Continue).0: ())<br/>_9 = _40<br/>StorageDead(_40)<br/>StorageDead(_10)<br/>StorageDead(_9)<br/>StorageLive(_41)<br/>StorageLive(_42)<br/>StorageLive(_43)<br/>StorageLive(_44)<br/>StorageLive(_45)<br/>_45 = &amp;(*_2)<br/>StorageLive(_46)<br/>_46 = &amp;(*_4)<br/>StorageLive(_47)<br/>_47 = &amp;(*_5)<br/>StorageLive(_48)<br/>_48 = &amp;mut (*_6)<br/></td></tr><tr><td align="left">_44 = meets_maintenance_margin_requirement(move _45, move _46, move _47, move _48)</td></tr></table>>];
    bb13__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb14__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageLive(_37)<br/>_37 = ((_10 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_39)<br/>_39 = _37<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _39)</td></tr></table>>];
    bb15__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_39)<br/>StorageDead(_37)<br/>StorageDead(_10)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb16__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_48)<br/>StorageDead(_47)<br/>StorageDead(_46)<br/>StorageDead(_45)<br/></td></tr><tr><td align="left">_43 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _44)</td></tr></table>>];
    bb17__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_44)<br/>_49 = discriminant(_43)<br/></td></tr><tr><td align="left">switchInt(move _49)</td></tr></table>>];
    bb18__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageLive(_53)<br/>_53 = ((_43 as Continue).0: bool)<br/>_42 = _53<br/>StorageDead(_53)<br/></td></tr><tr><td align="left">switchInt(move _42)</td></tr></table>>];
    bb19__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageLive(_50)<br/>_50 = ((_43 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_52)<br/>_52 = _50<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _52)</td></tr></table>>];
    bb20__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_52)<br/>StorageDead(_50)<br/>StorageDead(_43)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb21__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_43)<br/>_41 = const ()<br/>StorageDead(_42)<br/>StorageDead(_41)<br/>StorageLive(_56)<br/>_56 = &amp;((*_8).5: state::state::FeeStructure)<br/>StorageLive(_57)<br/>_57 = ((*_7).4: i64)<br/>StorageLive(_58)<br/>_58 = ((*_7).0: u64)<br/>StorageLive(_59)<br/>StorageLive(_60)<br/>StorageLive(_61)<br/>StorageLive(_62)<br/>StorageLive(_63)<br/>StorageLive(_64)<br/>_64 = &amp;(*_5)<br/></td></tr><tr><td align="left">_63 = SpotMarketMap::&lt;'_&gt;::get_quote_spot_market_mut(move _64)</td></tr></table>>];
    bb22__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_43)<br/>StorageLive(_55)<br/>_55 = error::ErrorCode::InsufficientCollateralForSettlingPNL<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _55)<br/>StorageDead(_55)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb23__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_64)<br/></td></tr><tr><td align="left">_62 = &lt;std::result::Result&lt;RefMut&lt;'_, SpotMarket&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _63)</td></tr></table>>];
    bb24__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_63)<br/>_65 = discriminant(_62)<br/></td></tr><tr><td align="left">switchInt(move _65)</td></tr></table>>];
    bb25__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageLive(_69)<br/>_69 = move ((_62 as Continue).0: std::cell::RefMut&lt;'_, state::spot_market::SpotMarket&gt;)<br/>_61 = move _69<br/>StorageDead(_69)<br/>_60 = &amp;mut _61<br/>_621 = discriminant(_62)<br/>StorageDead(_62)<br/>StorageLive(_70)<br/>StorageLive(_71)<br/>StorageLive(_72)<br/>StorageLive(_73)<br/>StorageLive(_74)<br/>StorageLive(_75)<br/>_75 = &amp;mut (*_60)<br/></td></tr><tr><td align="left">_74 = &lt;RefMut&lt;'_, SpotMarket&gt; as DerefMut&gt;::deref_mut(move _75)</td></tr></table>>];
    bb26__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageLive(_66)<br/>_66 = ((_62 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_68)<br/>_68 = _66<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _68)</td></tr></table>>];
    bb27__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_68)<br/>StorageDead(_66)<br/>_619 = discriminant(_62)<br/>StorageDead(_62)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb28__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">_73 = &amp;mut (*_74)<br/>StorageDead(_75)<br/>StorageLive(_76)<br/>_76 = Option::&lt;&amp;OraclePriceData&gt;::None<br/>StorageLive(_77)<br/>_77 = _57<br/></td></tr><tr><td align="left">_72 = controller::spot_balance::update_spot_market_cumulative_interest(move _73, move _76, move _77)</td></tr></table>>];
    bb29__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_77)<br/>StorageDead(_76)<br/>StorageDead(_73)<br/></td></tr><tr><td align="left">_71 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _72)</td></tr></table>>];
    bb30__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_72)<br/>_78 = discriminant(_71)<br/></td></tr><tr><td align="left">switchInt(move _78)</td></tr></table>>];
    bb31__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageLive(_82)<br/>_82 = ((_71 as Continue).0: ())<br/>_70 = _82<br/>StorageDead(_82)<br/>StorageDead(_74)<br/>StorageDead(_71)<br/>StorageDead(_70)<br/>_59 = const ()<br/></td></tr><tr><td align="left">drop(_61)</td></tr></table>>];
    bb32__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageLive(_79)<br/>_79 = ((_71 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_81)<br/>_81 = _79<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _81)</td></tr></table>>];
    bb33__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageDead(_81)<br/>StorageDead(_79)<br/>StorageDead(_74)<br/>StorageDead(_71)<br/>StorageDead(_70)<br/></td></tr><tr><td align="left">drop(_61)</td></tr></table>>];
    bb34__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_61)<br/>StorageDead(_60)<br/>StorageDead(_59)<br/>StorageLive(_83)<br/>StorageLive(_84)<br/>StorageLive(_85)<br/>StorageLive(_86)<br/>_86 = &amp;mut (*_2)<br/>StorageLive(_87)<br/>_87 = &amp;(*_3)<br/>StorageLive(_88)<br/>StorageLive(_89)<br/>StorageLive(_90)<br/>StorageLive(_91)<br/>StorageLive(_92)<br/>StorageLive(_93)<br/>StorageLive(_94)<br/>_94 = &amp;(*_4)<br/>StorageLive(_95)<br/>StorageLive(_96)<br/>_96 = &amp;_1<br/>_95 = &amp;(*_96)<br/></td></tr><tr><td align="left">_93 = PerpMarketMap::&lt;'_&gt;::get_ref_mut(move _94, move _95)</td></tr></table>>];
    bb35__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_95)<br/>StorageDead(_94)<br/></td></tr><tr><td align="left">_92 = &lt;std::result::Result&lt;RefMut&lt;'_, PerpMarket&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _93)</td></tr></table>>];
    bb36__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">_617 = const true<br/>StorageDead(_93)<br/>_97 = discriminant(_92)<br/></td></tr><tr><td align="left">switchInt(move _97)</td></tr></table>>];
    bb37__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageLive(_101)<br/>_101 = move ((_92 as Continue).0: std::cell::RefMut&lt;'_, state::perp_market::PerpMarket&gt;)<br/>_91 = move _101<br/>StorageDead(_101)<br/>_90 = &amp;mut _91<br/></td></tr><tr><td align="left">_89 = &lt;RefMut&lt;'_, PerpMarket&gt; as DerefMut&gt;::deref_mut(move _90)</td></tr></table>>];
    bb38__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageLive(_98)<br/>_98 = ((_92 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_100)<br/>_100 = _98<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _100)</td></tr></table>>];
    bb39__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageDead(_100)<br/>StorageDead(_98)<br/>StorageDead(_90)<br/>StorageDead(_88)<br/>StorageDead(_87)<br/>StorageDead(_86)<br/>StorageDead(_85)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb40__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">_88 = &amp;mut (*_89)<br/>StorageDead(_90)<br/>StorageLive(_102)<br/>_102 = _57<br/></td></tr><tr><td align="left">_85 = controller::funding::settle_funding_payment(move _86, move _87, move _88, move _102)</td></tr></table>>];
    bb41__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">StorageDead(_102)<br/>StorageDead(_88)<br/>StorageDead(_87)<br/>StorageDead(_86)<br/></td></tr><tr><td align="left">_84 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _85)</td></tr></table>>];
    bb42__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageDead(_85)<br/>_103 = discriminant(_84)<br/></td></tr><tr><td align="left">switchInt(move _103)</td></tr></table>>];
    bb43__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageLive(_107)<br/>_107 = ((_84 as Continue).0: ())<br/>_83 = _107<br/>StorageDead(_107)<br/></td></tr><tr><td align="left">drop(_91)</td></tr></table>>];
    bb44__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">StorageLive(_104)<br/>_104 = ((_84 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_106)<br/>_106 = _104<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _106)</td></tr></table>>];
    bb45__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">StorageDead(_106)<br/>StorageDead(_104)<br/></td></tr><tr><td align="left">drop(_91)</td></tr></table>>];
    bb46__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">StorageDead(_124)<br/>StorageDead(_122)<br/>StorageDead(_120)<br/>StorageDead(_119)<br/>StorageDead(_118)<br/>StorageDead(_117)<br/>StorageDead(_116)<br/>StorageDead(_115)<br/>StorageDead(_114)<br/>StorageDead(_113)<br/>StorageDead(_112)<br/>StorageDead(_111)<br/></td></tr><tr><td align="left">_109 = &lt;std::result::Result&lt;Vec&lt;u32&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _110)</td></tr></table>>];
    bb47__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left" balign="left">_618 = const true<br/>StorageDead(_110)<br/>_125 = discriminant(_109)<br/></td></tr><tr><td align="left">switchInt(move _125)</td></tr></table>>];
    bb48__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left" balign="left">StorageLive(_129)<br/>_129 = move ((_109 as Continue).0: std::vec::Vec&lt;u32&gt;)<br/>_108 = move _129<br/>StorageDead(_129)<br/></td></tr><tr><td align="left">drop(_108)</td></tr></table>>];
    bb49__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left" balign="left">StorageLive(_126)<br/>_126 = ((_109 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_128)<br/>_128 = _126<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _128)</td></tr></table>>];
    bb50__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">50</td></tr><tr><td align="left" balign="left">StorageDead(_128)<br/>StorageDead(_126)<br/>_625 = discriminant(_109)<br/>_618 = const false<br/>StorageDead(_109)<br/>StorageDead(_108)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb51__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">51</td></tr><tr><td align="left" balign="left">_627 = discriminant(_109)<br/>_618 = const false<br/>StorageDead(_109)<br/>StorageDead(_108)<br/>StorageLive(_130)<br/>StorageLive(_131)<br/>StorageLive(_132)<br/>StorageLive(_133)<br/>_133 = &amp;((*_2).4: [state::user::PerpPosition; 8])<br/>_132 = &amp;(*_133)<br/>StorageLive(_134)<br/>_134 = _1<br/></td></tr><tr><td align="left">_131 = get_position_index(move _132, move _134)</td></tr></table>>];
    bb52__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">52</td></tr><tr><td align="left" balign="left">StorageDead(_134)<br/>StorageDead(_132)<br/>_135 = discriminant(_131)<br/></td></tr><tr><td align="left">switchInt(move _135)</td></tr></table>>];
    bb53__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">53</td></tr><tr><td align="left" balign="left">StorageLive(_138)<br/>StorageLive(_139)<br/>StorageLive(_140)<br/>StorageLive(_141)<br/>StorageLive(_142)<br/>StorageLive(_143)<br/>StorageLive(_144)<br/>StorageLive(_145)<br/>StorageLive(_146)<br/>StorageLive(_147)<br/>StorageLive(_148)<br/>_608 = const _<br/>_148 = &amp;(*_608)<br/>_147 = &amp;(*_148)<br/>_146 = move _147 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_147)<br/>StorageLive(_150)<br/>StorageLive(_151)<br/>StorageLive(_152)<br/>StorageLive(_153)<br/>StorageLive(_154)<br/>StorageLive(_155)<br/>StorageLive(_156)<br/>_156 = &amp;_1<br/>_155 = &amp;(*_156)<br/></td></tr><tr><td align="left">_154 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;u16&gt;(move _155)</td></tr></table>>];
    bb54__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">54</td></tr><tr><td align="left" balign="left">StorageLive(_136)<br/>_136 = ((_131 as Ok).0: usize)<br/>_130 = _136<br/>StorageDead(_136)<br/>StorageDead(_133)<br/>StorageDead(_131)<br/>StorageLive(_158)<br/>StorageLive(_159)<br/>StorageLive(_160)<br/>StorageLive(_161)<br/>StorageLive(_162)<br/>_162 = &amp;(*_5)<br/></td></tr><tr><td align="left">_161 = SpotMarketMap::&lt;'_&gt;::get_quote_spot_market_mut(move _162)</td></tr></table>>];
    bb55__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">55</td></tr><tr><td align="left" balign="left">StorageDead(_155)<br/>_153 = [move _154]<br/>StorageDead(_154)<br/>_152 = &amp;_153<br/>_151 = &amp;(*_152)<br/>_150 = move _151 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_151)<br/></td></tr><tr><td align="left">_145 = Arguments::&lt;'_&gt;::new_v1(move _146, move _150)</td></tr></table>>];
    bb56__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">56</td></tr><tr><td align="left" balign="left">StorageDead(_150)<br/>StorageDead(_146)<br/></td></tr><tr><td align="left">_144 = format(move _145)</td></tr></table>>];
    bb57__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">57</td></tr><tr><td align="left" balign="left">StorageDead(_145)<br/>StorageDead(_156)<br/>StorageDead(_153)<br/>StorageDead(_152)<br/>StorageDead(_148)<br/>_143 = move _144<br/>StorageDead(_144)<br/>_142 = &amp;_143<br/>_141 = &amp;(*_142)<br/></td></tr><tr><td align="left">_140 = &lt;String as Deref&gt;::deref(move _141)</td></tr></table>>];
    bb58__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">58</td></tr><tr><td align="left" balign="left">_139 = &amp;(*_140)<br/>StorageDead(_141)<br/></td></tr><tr><td align="left">_138 = solana_program::log::sol_log(move _139)</td></tr></table>>];
    bb59__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">59</td></tr><tr><td align="left" balign="left">StorageDead(_139)<br/></td></tr><tr><td align="left">drop(_143)</td></tr></table>>];
    bb60__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">60</td></tr><tr><td align="left" balign="left">StorageDead(_143)<br/>StorageDead(_142)<br/>StorageDead(_140)<br/>StorageDead(_138)<br/>StorageLive(_157)<br/>_157 = ()<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _157)<br/>StorageDead(_157)<br/>StorageDead(_133)<br/>StorageDead(_131)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb61__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">61</td></tr><tr><td align="left" balign="left">StorageDead(_162)<br/></td></tr><tr><td align="left">_160 = &lt;std::result::Result&lt;RefMut&lt;'_, SpotMarket&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _161)</td></tr></table>>];
    bb62__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">62</td></tr><tr><td align="left" balign="left">StorageDead(_161)<br/>_163 = discriminant(_160)<br/></td></tr><tr><td align="left">switchInt(move _163)</td></tr></table>>];
    bb63__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">63</td></tr><tr><td align="left" balign="left">StorageLive(_167)<br/>_167 = move ((_160 as Continue).0: std::cell::RefMut&lt;'_, state::spot_market::SpotMarket&gt;)<br/>_159 = move _167<br/>StorageDead(_167)<br/>_158 = &amp;mut _159<br/>_631 = discriminant(_160)<br/>StorageDead(_160)<br/>StorageLive(_168)<br/>StorageLive(_169)<br/>StorageLive(_170)<br/>StorageLive(_171)<br/>StorageLive(_172)<br/>_172 = &amp;(*_4)<br/>StorageLive(_173)<br/>StorageLive(_174)<br/>_174 = &amp;_1<br/>_173 = &amp;(*_174)<br/></td></tr><tr><td align="left">_171 = PerpMarketMap::&lt;'_&gt;::get_ref_mut(move _172, move _173)</td></tr></table>>];
    bb64__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">64</td></tr><tr><td align="left" balign="left">StorageLive(_164)<br/>_164 = ((_160 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_166)<br/>_166 = _164<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _166)</td></tr></table>>];
    bb65__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">65</td></tr><tr><td align="left" balign="left">StorageDead(_166)<br/>StorageDead(_164)<br/>_629 = discriminant(_160)<br/>StorageDead(_160)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb66__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">66</td></tr><tr><td align="left" balign="left">StorageDead(_173)<br/>StorageDead(_172)<br/></td></tr><tr><td align="left">_170 = &lt;std::result::Result&lt;RefMut&lt;'_, PerpMarket&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _171)</td></tr></table>>];
    bb67__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">67</td></tr><tr><td align="left" balign="left">StorageDead(_171)<br/>_175 = discriminant(_170)<br/></td></tr><tr><td align="left">switchInt(move _175)</td></tr></table>>];
    bb68__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">68</td></tr><tr><td align="left" balign="left">StorageLive(_179)<br/>_179 = move ((_170 as Continue).0: std::cell::RefMut&lt;'_, state::perp_market::PerpMarket&gt;)<br/>_169 = move _179<br/>StorageDead(_179)<br/>_168 = &amp;mut _169<br/>_635 = discriminant(_170)<br/>StorageDead(_174)<br/>StorageDead(_170)<br/>StorageLive(_180)<br/>StorageLive(_181)<br/>StorageLive(_182)<br/>StorageLive(_183)<br/>StorageLive(_184)<br/>StorageLive(_185)<br/>StorageLive(_186)<br/>_186 = &amp;(*_168)<br/></td></tr><tr><td align="left">_185 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _186)</td></tr></table>>];
    bb69__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">69</td></tr><tr><td align="left" balign="left">StorageLive(_176)<br/>_176 = ((_170 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_178)<br/>_178 = _176<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _178)</td></tr></table>>];
    bb70__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">70</td></tr><tr><td align="left" balign="left">StorageDead(_178)<br/>StorageDead(_176)<br/>_633 = discriminant(_170)<br/>StorageDead(_174)<br/>StorageDead(_170)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb71__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">71</td></tr><tr><td align="left" balign="left">StorageDead(_186)<br/>_184 = &amp;((*_185).22: state::perp_market::MarketStatus)<br/>StorageLive(_187)<br/>_615 = const _<br/>_187 = &amp;(*_615)<br/></td></tr><tr><td align="left">_183 = &lt;state::perp_market::MarketStatus as PartialEq&gt;::eq(move _184, move _187)</td></tr></table>>];
    bb72__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">72</td></tr><tr><td align="left">switchInt(move _183)</td></tr></table>>];
    bb73__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">73</td></tr><tr><td align="left" balign="left">StorageDead(_187)<br/>StorageDead(_185)<br/>StorageDead(_184)<br/>StorageLive(_189)<br/>_189 = ()<br/>_182 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _189)<br/>StorageDead(_189)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb74__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">74</td></tr><tr><td align="left" balign="left">StorageDead(_187)<br/>StorageDead(_185)<br/>StorageDead(_184)<br/>StorageLive(_190)<br/>_190 = error::ErrorCode::PerpMarketNotInSettlement<br/>StorageLive(_191)<br/>StorageLive(_192)<br/>StorageLive(_193)<br/>StorageLive(_194)<br/>StorageLive(_195)<br/>StorageLive(_196)<br/>StorageLive(_197)<br/>StorageLive(_198)<br/>StorageLive(_199)<br/>StorageLive(_200)<br/>StorageLive(_201)<br/>_614 = const _<br/>_201 = &amp;(*_614)<br/>_200 = &amp;(*_201)<br/>_199 = move _200 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_200)<br/>StorageLive(_203)<br/>StorageLive(_204)<br/>StorageLive(_205)<br/>StorageLive(_206)<br/>StorageLive(_207)<br/>StorageLive(_208)<br/>StorageLive(_209)<br/>_209 = &amp;_190<br/>_208 = &amp;(*_209)<br/></td></tr><tr><td align="left">_207 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _208)</td></tr></table>>];
    bb75__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">75</td></tr><tr><td align="left" balign="left">StorageDead(_208)<br/>_206 = [move _207]<br/>StorageDead(_207)<br/>_205 = &amp;_206<br/>_204 = &amp;(*_205)<br/>_203 = move _204 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_204)<br/></td></tr><tr><td align="left">_198 = Arguments::&lt;'_&gt;::new_v1(move _199, move _203)</td></tr></table>>];
    bb76__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">76</td></tr><tr><td align="left" balign="left">StorageDead(_203)<br/>StorageDead(_199)<br/></td></tr><tr><td align="left">_197 = format(move _198)</td></tr></table>>];
    bb77__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">77</td></tr><tr><td align="left" balign="left">StorageDead(_198)<br/>StorageDead(_209)<br/>StorageDead(_206)<br/>StorageDead(_205)<br/>StorageDead(_201)<br/>_196 = move _197<br/>StorageDead(_197)<br/>_195 = &amp;_196<br/>_194 = &amp;(*_195)<br/></td></tr><tr><td align="left">_193 = &lt;String as Deref&gt;::deref(move _194)</td></tr></table>>];
    bb78__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">78</td></tr><tr><td align="left" balign="left">_192 = &amp;(*_193)<br/>StorageDead(_194)<br/></td></tr><tr><td align="left">_191 = solana_program::log::sol_log(move _192)</td></tr></table>>];
    bb79__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">79</td></tr><tr><td align="left" balign="left">StorageDead(_192)<br/></td></tr><tr><td align="left">drop(_196)</td></tr></table>>];
    bb80__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">80</td></tr><tr><td align="left" balign="left">StorageDead(_196)<br/>StorageDead(_195)<br/>StorageDead(_193)<br/>StorageDead(_191)<br/>StorageLive(_210)<br/>StorageLive(_211)<br/>StorageLive(_212)<br/>StorageLive(_213)<br/>StorageLive(_214)<br/>StorageLive(_215)<br/>StorageLive(_216)<br/>StorageLive(_217)<br/>StorageLive(_218)<br/>StorageLive(_219)<br/>StorageLive(_220)<br/>_613 = const _<br/>_220 = &amp;(*_613)<br/>_219 = &amp;(*_220)<br/>_218 = move _219 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_219)<br/>StorageLive(_222)<br/>StorageLive(_223)<br/>StorageLive(_224)<br/>StorageLive(_225)<br/>StorageLive(_226)<br/>StorageLive(_227)<br/>StorageLive(_228)<br/>StorageLive(_229)<br/>StorageLive(_230)<br/>_230 = &amp;(*_168)<br/></td></tr><tr><td align="left">_229 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _230)</td></tr></table>>];
    bb81__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">81</td></tr><tr><td align="left" balign="left">StorageDead(_230)<br/>_228 = &amp;((*_229).6: i64)<br/>_227 = &amp;(*_228)<br/></td></tr><tr><td align="left">_226 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;i64&gt;(move _227)</td></tr></table>>];
    bb82__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">82</td></tr><tr><td align="left" balign="left">StorageDead(_227)<br/>_225 = [move _226]<br/>StorageDead(_226)<br/>_224 = &amp;_225<br/>_223 = &amp;(*_224)<br/>_222 = move _223 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_223)<br/></td></tr><tr><td align="left">_217 = Arguments::&lt;'_&gt;::new_v1(move _218, move _222)</td></tr></table>>];
    bb83__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">83</td></tr><tr><td align="left" balign="left">StorageDead(_222)<br/>StorageDead(_218)<br/></td></tr><tr><td align="left">_216 = format(move _217)</td></tr></table>>];
    bb84__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">84</td></tr><tr><td align="left" balign="left">StorageDead(_217)<br/>StorageDead(_229)<br/>StorageDead(_228)<br/>StorageDead(_225)<br/>StorageDead(_224)<br/>StorageDead(_220)<br/>_215 = move _216<br/>StorageDead(_216)<br/>_214 = &amp;_215<br/>_213 = &amp;(*_214)<br/></td></tr><tr><td align="left">_212 = &lt;String as Deref&gt;::deref(move _213)</td></tr></table>>];
    bb85__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">85</td></tr><tr><td align="left" balign="left">_211 = &amp;(*_212)<br/>StorageDead(_213)<br/></td></tr><tr><td align="left">_210 = solana_program::log::sol_log(move _211)</td></tr></table>>];
    bb86__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">86</td></tr><tr><td align="left" balign="left">StorageDead(_211)<br/></td></tr><tr><td align="left">drop(_215)</td></tr></table>>];
    bb87__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">87</td></tr><tr><td align="left" balign="left">StorageDead(_215)<br/>StorageDead(_214)<br/>StorageDead(_212)<br/>StorageDead(_210)<br/>StorageLive(_231)<br/>_231 = _190<br/>_182 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _231)<br/>StorageDead(_231)<br/>StorageDead(_190)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb88__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">88</td></tr><tr><td align="left" balign="left">StorageDead(_183)<br/></td></tr><tr><td align="left">_181 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _182)</td></tr></table>>];
    bb89__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">89</td></tr><tr><td align="left" balign="left">StorageDead(_182)<br/>_232 = discriminant(_181)<br/></td></tr><tr><td align="left">switchInt(move _232)</td></tr></table>>];
    bb90__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">90</td></tr><tr><td align="left" balign="left">StorageLive(_236)<br/>_236 = ((_181 as Continue).0: ())<br/>_180 = _236<br/>StorageDead(_236)<br/>StorageDead(_181)<br/>StorageDead(_180)<br/>StorageLive(_237)<br/>StorageLive(_238)<br/>StorageLive(_239)<br/>StorageLive(_240)<br/>StorageLive(_241)<br/>StorageLive(_242)<br/>_242 = &amp;(*_168)<br/></td></tr><tr><td align="left">_241 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _242)</td></tr></table>>];
    bb91__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">91</td></tr><tr><td align="left" balign="left">StorageLive(_233)<br/>_233 = ((_181 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_235)<br/>_235 = _233<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _235)</td></tr></table>>];
    bb92__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">92</td></tr><tr><td align="left" balign="left">StorageDead(_235)<br/>StorageDead(_233)<br/>StorageDead(_181)<br/>StorageDead(_180)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb93__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">93</td></tr><tr><td align="left" balign="left">StorageDead(_242)<br/>_240 = ((*_241).6: i64)<br/>StorageLive(_243)<br/>StorageLive(_244)<br/>StorageLive(_245)<br/>StorageLive(_246)<br/>_246 = ((*_8).12: u16)<br/></td></tr><tr><td align="left">_245 = &lt;u16 as Cast&gt;::cast::&lt;i64&gt;(move _246)</td></tr></table>>];
    bb94__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">94</td></tr><tr><td align="left" balign="left">StorageDead(_246)<br/></td></tr><tr><td align="left">_244 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _245)</td></tr></table>>];
    bb95__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">95</td></tr><tr><td align="left" balign="left">StorageDead(_245)<br/>_247 = discriminant(_244)<br/></td></tr><tr><td align="left">switchInt(move _247)</td></tr></table>>];
    bb96__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">96</td></tr><tr><td align="left" balign="left">StorageLive(_251)<br/>_251 = ((_244 as Continue).0: i64)<br/>_243 = _251<br/>StorageDead(_251)<br/></td></tr><tr><td align="left">_239 = &lt;i64 as SafeMath&gt;::safe_add(move _240, move _243)</td></tr></table>>];
    bb97__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">97</td></tr><tr><td align="left" balign="left">StorageLive(_248)<br/>_248 = ((_244 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_250)<br/>_250 = _248<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _250)</td></tr></table>>];
    bb98__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">98</td></tr><tr><td align="left" balign="left">StorageDead(_250)<br/>StorageDead(_248)<br/>StorageDead(_243)<br/>StorageDead(_240)<br/>StorageDead(_239)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb99__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">99</td></tr><tr><td align="left" balign="left">StorageDead(_243)<br/>StorageDead(_240)<br/></td></tr><tr><td align="left">_238 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _239)</td></tr></table>>];
    bb100__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">100</td></tr><tr><td align="left" balign="left">StorageDead(_239)<br/>_252 = discriminant(_238)<br/></td></tr><tr><td align="left">switchInt(move _252)</td></tr></table>>];
    bb101__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">101</td></tr><tr><td align="left" balign="left">StorageLive(_256)<br/>_256 = ((_238 as Continue).0: i64)<br/>_237 = _256<br/>StorageDead(_256)<br/>StorageDead(_244)<br/>StorageDead(_241)<br/>StorageDead(_238)<br/>StorageLive(_257)<br/>StorageLive(_258)<br/>StorageLive(_259)<br/>StorageLive(_260)<br/>StorageLive(_261)<br/>_261 = _57<br/>StorageLive(_262)<br/>_262 = _237<br/>_260 = Gt(move _261, move _262)<br/></td></tr><tr><td align="left">switchInt(move _260)</td></tr></table>>];
    bb102__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">102</td></tr><tr><td align="left" balign="left">StorageLive(_253)<br/>_253 = ((_238 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_255)<br/>_255 = _253<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _255)</td></tr></table>>];
    bb103__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">103</td></tr><tr><td align="left" balign="left">StorageDead(_255)<br/>StorageDead(_253)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb104__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">104</td></tr><tr><td align="left" balign="left">StorageDead(_262)<br/>StorageDead(_261)<br/>StorageLive(_263)<br/>_263 = ()<br/>_259 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _263)<br/>StorageDead(_263)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb105__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">105</td></tr><tr><td align="left" balign="left">StorageDead(_262)<br/>StorageDead(_261)<br/>StorageLive(_264)<br/>_264 = error::ErrorCode::PerpMarketSettlementBufferNotReached<br/>StorageLive(_265)<br/>StorageLive(_266)<br/>StorageLive(_267)<br/>StorageLive(_268)<br/>StorageLive(_269)<br/>StorageLive(_270)<br/>StorageLive(_271)<br/>StorageLive(_272)<br/>StorageLive(_273)<br/>StorageLive(_274)<br/>StorageLive(_275)<br/>_612 = const _<br/>_275 = &amp;(*_612)<br/>_274 = &amp;(*_275)<br/>_273 = move _274 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_274)<br/>StorageLive(_277)<br/>StorageLive(_278)<br/>StorageLive(_279)<br/>StorageLive(_280)<br/>StorageLive(_281)<br/>StorageLive(_282)<br/>StorageLive(_283)<br/>_283 = &amp;_264<br/>_282 = &amp;(*_283)<br/></td></tr><tr><td align="left">_281 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _282)</td></tr></table>>];
    bb106__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">106</td></tr><tr><td align="left" balign="left">StorageDead(_282)<br/>_280 = [move _281]<br/>StorageDead(_281)<br/>_279 = &amp;_280<br/>_278 = &amp;(*_279)<br/>_277 = move _278 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_278)<br/></td></tr><tr><td align="left">_272 = Arguments::&lt;'_&gt;::new_v1(move _273, move _277)</td></tr></table>>];
    bb107__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">107</td></tr><tr><td align="left" balign="left">StorageDead(_277)<br/>StorageDead(_273)<br/></td></tr><tr><td align="left">_271 = format(move _272)</td></tr></table>>];
    bb108__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">108</td></tr><tr><td align="left" balign="left">StorageDead(_272)<br/>StorageDead(_283)<br/>StorageDead(_280)<br/>StorageDead(_279)<br/>StorageDead(_275)<br/>_270 = move _271<br/>StorageDead(_271)<br/>_269 = &amp;_270<br/>_268 = &amp;(*_269)<br/></td></tr><tr><td align="left">_267 = &lt;String as Deref&gt;::deref(move _268)</td></tr></table>>];
    bb109__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">109</td></tr><tr><td align="left" balign="left">_266 = &amp;(*_267)<br/>StorageDead(_268)<br/></td></tr><tr><td align="left">_265 = solana_program::log::sol_log(move _266)</td></tr></table>>];
    bb110__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">110</td></tr><tr><td align="left" balign="left">StorageDead(_266)<br/></td></tr><tr><td align="left">drop(_270)</td></tr></table>>];
    bb111__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">111</td></tr><tr><td align="left" balign="left">StorageDead(_270)<br/>StorageDead(_269)<br/>StorageDead(_267)<br/>StorageDead(_265)<br/>StorageLive(_284)<br/>StorageLive(_285)<br/>StorageLive(_286)<br/>StorageLive(_287)<br/>StorageLive(_288)<br/>StorageLive(_289)<br/>StorageLive(_290)<br/>StorageLive(_291)<br/>StorageLive(_292)<br/>StorageLive(_293)<br/>StorageLive(_294)<br/>_611 = const _<br/>_294 = &amp;(*_611)<br/>_293 = &amp;(*_294)<br/>_292 = move _293 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_293)<br/>StorageLive(_296)<br/>StorageLive(_297)<br/>StorageLive(_298)<br/>StorageLive(_299)<br/>StorageLive(_300)<br/>StorageLive(_301)<br/>StorageLive(_302)<br/>_302 = &amp;((*_8).12: u16)<br/>_301 = &amp;(*_302)<br/></td></tr><tr><td align="left">_300 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;u16&gt;(move _301)</td></tr></table>>];
    bb112__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">112</td></tr><tr><td align="left" balign="left">StorageDead(_301)<br/>_299 = [move _300]<br/>StorageDead(_300)<br/>_298 = &amp;_299<br/>_297 = &amp;(*_298)<br/>_296 = move _297 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_297)<br/></td></tr><tr><td align="left">_291 = Arguments::&lt;'_&gt;::new_v1(move _292, move _296)</td></tr></table>>];
    bb113__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">113</td></tr><tr><td align="left" balign="left">StorageDead(_296)<br/>StorageDead(_292)<br/></td></tr><tr><td align="left">_290 = format(move _291)</td></tr></table>>];
    bb114__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">114</td></tr><tr><td align="left" balign="left">StorageDead(_291)<br/>StorageDead(_302)<br/>StorageDead(_299)<br/>StorageDead(_298)<br/>StorageDead(_294)<br/>_289 = move _290<br/>StorageDead(_290)<br/>_288 = &amp;_289<br/>_287 = &amp;(*_288)<br/></td></tr><tr><td align="left">_286 = &lt;String as Deref&gt;::deref(move _287)</td></tr></table>>];
    bb115__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">115</td></tr><tr><td align="left" balign="left">_285 = &amp;(*_286)<br/>StorageDead(_287)<br/></td></tr><tr><td align="left">_284 = solana_program::log::sol_log(move _285)</td></tr></table>>];
    bb116__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">116</td></tr><tr><td align="left" balign="left">StorageDead(_285)<br/></td></tr><tr><td align="left">drop(_289)</td></tr></table>>];
    bb117__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">117</td></tr><tr><td align="left" balign="left">StorageDead(_289)<br/>StorageDead(_288)<br/>StorageDead(_286)<br/>StorageDead(_284)<br/>StorageLive(_303)<br/>_303 = _264<br/>_259 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _303)<br/>StorageDead(_303)<br/>StorageDead(_264)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb118__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">118</td></tr><tr><td align="left" balign="left">StorageDead(_260)<br/></td></tr><tr><td align="left">_258 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _259)</td></tr></table>>];
    bb119__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">119</td></tr><tr><td align="left" balign="left">StorageDead(_259)<br/>_304 = discriminant(_258)<br/></td></tr><tr><td align="left">switchInt(move _304)</td></tr></table>>];
    bb120__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">120</td></tr><tr><td align="left" balign="left">StorageLive(_308)<br/>_308 = ((_258 as Continue).0: ())<br/>_257 = _308<br/>StorageDead(_308)<br/>StorageDead(_258)<br/>StorageDead(_257)<br/>StorageLive(_309)<br/>StorageLive(_310)<br/>StorageLive(_311)<br/>StorageLive(_312)<br/>StorageLive(_313)<br/>StorageLive(_314)<br/>_314 = _130<br/>_315 = Len(((*_2).4: [state::user::PerpPosition; 8]))<br/>_316 = Lt(_314, _315)<br/></td></tr><tr><td align="left">assert(move _316, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _315, _314)</td></tr></table>>];
    bb121__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">121</td></tr><tr><td align="left" balign="left">StorageLive(_305)<br/>_305 = ((_258 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_307)<br/>_307 = _305<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _307)</td></tr></table>>];
    bb122__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">122</td></tr><tr><td align="left" balign="left">StorageDead(_307)<br/>StorageDead(_305)<br/>StorageDead(_258)<br/>StorageDead(_257)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb123__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">123</td></tr><tr><td align="left" balign="left">_313 = (((*_2).4: [state::user::PerpPosition; 8])[_314].14: u8)<br/>_312 = Eq(move _313, const 0_u8)<br/></td></tr><tr><td align="left">switchInt(move _312)</td></tr></table>>];
    bb124__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">124</td></tr><tr><td align="left" balign="left">StorageDead(_314)<br/>StorageDead(_313)<br/>StorageLive(_317)<br/>_317 = ()<br/>_311 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _317)<br/>StorageDead(_317)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb125__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">125</td></tr><tr><td align="left" balign="left">StorageDead(_314)<br/>StorageDead(_313)<br/>StorageLive(_318)<br/>_318 = error::ErrorCode::PerpMarketSettlementUserHasOpenOrders<br/>StorageLive(_319)<br/>StorageLive(_320)<br/>StorageLive(_321)<br/>StorageLive(_322)<br/>StorageLive(_323)<br/>StorageLive(_324)<br/>StorageLive(_325)<br/>StorageLive(_326)<br/>StorageLive(_327)<br/>StorageLive(_328)<br/>StorageLive(_329)<br/>_610 = const _<br/>_329 = &amp;(*_610)<br/>_328 = &amp;(*_329)<br/>_327 = move _328 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_328)<br/>StorageLive(_331)<br/>StorageLive(_332)<br/>StorageLive(_333)<br/>StorageLive(_334)<br/>StorageLive(_335)<br/>StorageLive(_336)<br/>StorageLive(_337)<br/>_337 = &amp;_318<br/>_336 = &amp;(*_337)<br/></td></tr><tr><td align="left">_335 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _336)</td></tr></table>>];
    bb126__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">126</td></tr><tr><td align="left" balign="left">StorageDead(_336)<br/>_334 = [move _335]<br/>StorageDead(_335)<br/>_333 = &amp;_334<br/>_332 = &amp;(*_333)<br/>_331 = move _332 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_332)<br/></td></tr><tr><td align="left">_326 = Arguments::&lt;'_&gt;::new_v1(move _327, move _331)</td></tr></table>>];
    bb127__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">127</td></tr><tr><td align="left" balign="left">StorageDead(_331)<br/>StorageDead(_327)<br/></td></tr><tr><td align="left">_325 = format(move _326)</td></tr></table>>];
    bb128__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">128</td></tr><tr><td align="left" balign="left">StorageDead(_326)<br/>StorageDead(_337)<br/>StorageDead(_334)<br/>StorageDead(_333)<br/>StorageDead(_329)<br/>_324 = move _325<br/>StorageDead(_325)<br/>_323 = &amp;_324<br/>_322 = &amp;(*_323)<br/></td></tr><tr><td align="left">_321 = &lt;String as Deref&gt;::deref(move _322)</td></tr></table>>];
    bb129__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">129</td></tr><tr><td align="left" balign="left">_320 = &amp;(*_321)<br/>StorageDead(_322)<br/></td></tr><tr><td align="left">_319 = solana_program::log::sol_log(move _320)</td></tr></table>>];
    bb130__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">130</td></tr><tr><td align="left" balign="left">StorageDead(_320)<br/></td></tr><tr><td align="left">drop(_324)</td></tr></table>>];
    bb131__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">131</td></tr><tr><td align="left" balign="left">StorageDead(_324)<br/>StorageDead(_323)<br/>StorageDead(_321)<br/>StorageDead(_319)<br/>StorageLive(_338)<br/>StorageLive(_339)<br/>StorageLive(_340)<br/>_340 = const &quot;User must first cancel open orders for expired market&quot;<br/>_339 = &amp;(*_340)<br/></td></tr><tr><td align="left">_338 = solana_program::log::sol_log(move _339)</td></tr></table>>];
    bb132__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">132</td></tr><tr><td align="left" balign="left">StorageDead(_339)<br/>StorageDead(_340)<br/>StorageDead(_338)<br/>StorageLive(_341)<br/>_341 = _318<br/>_311 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _341)<br/>StorageDead(_341)<br/>StorageDead(_318)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb133__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">133</td></tr><tr><td align="left" balign="left">StorageDead(_312)<br/></td></tr><tr><td align="left">_310 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _311)</td></tr></table>>];
    bb134__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">134</td></tr><tr><td align="left" balign="left">StorageDead(_311)<br/>_342 = discriminant(_310)<br/></td></tr><tr><td align="left">switchInt(move _342)</td></tr></table>>];
    bb135__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">135</td></tr><tr><td align="left" balign="left">StorageLive(_346)<br/>_346 = ((_310 as Continue).0: ())<br/>_309 = _346<br/>StorageDead(_346)<br/>StorageDead(_310)<br/>StorageDead(_309)<br/>StorageLive(_347)<br/>StorageLive(_348)<br/>StorageLive(_349)<br/>StorageLive(_350)<br/>StorageLive(_351)<br/>StorageLive(_352)<br/>_352 = _130<br/>_353 = Len(((*_2).4: [state::user::PerpPosition; 8]))<br/>_354 = Lt(_352, _353)<br/></td></tr><tr><td align="left">assert(move _354, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _353, _352)</td></tr></table>>];
    bb136__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">136</td></tr><tr><td align="left" balign="left">StorageLive(_343)<br/>_343 = ((_310 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_345)<br/>_345 = _343<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _345)</td></tr></table>>];
    bb137__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">137</td></tr><tr><td align="left" balign="left">StorageDead(_345)<br/>StorageDead(_343)<br/>StorageDead(_310)<br/>StorageDead(_309)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb138__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">138</td></tr><tr><td align="left" balign="left">_351 = &amp;((*_2).4: [state::user::PerpPosition; 8])[_352]<br/>_350 = &amp;(*_351)<br/>StorageLive(_355)<br/>StorageLive(_356)<br/>StorageLive(_357)<br/>_357 = &amp;(*_168)<br/></td></tr><tr><td align="left">_356 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _357)</td></tr></table>>];
    bb139__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">139</td></tr><tr><td align="left" balign="left">StorageDead(_357)<br/>_355 = ((*_356).7: i64)<br/></td></tr><tr><td align="left">_349 = calculate_base_asset_value_with_expiry_price(move _350, move _355)</td></tr></table>>];
    bb140__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">140</td></tr><tr><td align="left" balign="left">StorageDead(_355)<br/>StorageDead(_350)<br/></td></tr><tr><td align="left">_348 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _349)</td></tr></table>>];
    bb141__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">141</td></tr><tr><td align="left" balign="left">StorageDead(_349)<br/>_358 = discriminant(_348)<br/></td></tr><tr><td align="left">switchInt(move _358)</td></tr></table>>];
    bb142__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">142</td></tr><tr><td align="left" balign="left">StorageLive(_362)<br/>_362 = ((_348 as Continue).0: i64)<br/>_347 = _362<br/>StorageDead(_362)<br/>StorageDead(_356)<br/>StorageDead(_352)<br/>StorageDead(_351)<br/>StorageDead(_348)<br/>StorageLive(_363)<br/>StorageLive(_364)<br/>_364 = _130<br/>_365 = Len(((*_2).4: [state::user::PerpPosition; 8]))<br/>_366 = Lt(_364, _365)<br/></td></tr><tr><td align="left">assert(move _366, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _365, _364)</td></tr></table>>];
    bb143__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">143</td></tr><tr><td align="left" balign="left">StorageLive(_359)<br/>_359 = ((_348 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_361)<br/>_361 = _359<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _361)</td></tr></table>>];
    bb144__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">144</td></tr><tr><td align="left" balign="left">StorageDead(_361)<br/>StorageDead(_359)<br/>StorageDead(_356)<br/>StorageDead(_352)<br/>StorageDead(_351)<br/>StorageDead(_348)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb145__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">145</td></tr><tr><td align="left" balign="left">_363 = (((*_2).4: [state::user::PerpPosition; 8])[_364].1: i64)<br/>StorageDead(_364)<br/>StorageLive(_367)<br/>StorageLive(_368)<br/>_368 = _130<br/>_369 = Len(((*_2).4: [state::user::PerpPosition; 8]))<br/>_370 = Lt(_368, _369)<br/></td></tr><tr><td align="left">assert(move _370, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _369, _368)</td></tr></table>>];
    bb146__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">146</td></tr><tr><td align="left" balign="left">_367 = (((*_2).4: [state::user::PerpPosition; 8])[_368].4: i64)<br/>StorageDead(_368)<br/>StorageLive(_371)<br/>StorageLive(_372)<br/>_372 = _347<br/>StorageLive(_373)<br/>StorageLive(_374)<br/>StorageLive(_375)<br/>_375 = _130<br/>_376 = Len(((*_2).4: [state::user::PerpPosition; 8]))<br/>_377 = Lt(_375, _376)<br/></td></tr><tr><td align="left">assert(move _377, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _376, _375)</td></tr></table>>];
    bb147__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">147</td></tr><tr><td align="left" balign="left">_374 = (((*_2).4: [state::user::PerpPosition; 8])[_375].1: i64)<br/>_378 = Eq(_374, const i64::MIN)<br/></td></tr><tr><td align="left">assert(!move _378, &quot;attempt to negate `{}`, which would overflow&quot;, _374)</td></tr></table>>];
    bb148__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">148</td></tr><tr><td align="left" balign="left">_373 = Neg(move _374)<br/>StorageDead(_374)<br/>_371 = PositionDelta { quote_asset_amount: move _372, base_asset_amount: move _373 }<br/>StorageDead(_373)<br/>StorageDead(_372)<br/>StorageDead(_375)<br/>StorageLive(_379)<br/>StorageLive(_380)<br/>StorageLive(_381)<br/>StorageLive(_382)<br/>StorageLive(_383)<br/>StorageLive(_384)<br/>_384 = _130<br/>_385 = Len(((*_2).4: [state::user::PerpPosition; 8]))<br/>_386 = Lt(_384, _385)<br/></td></tr><tr><td align="left">assert(move _386, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _385, _384)</td></tr></table>>];
    bb149__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">149</td></tr><tr><td align="left" balign="left">_383 = &amp;mut ((*_2).4: [state::user::PerpPosition; 8])[_384]<br/>_382 = &amp;mut (*_383)<br/>StorageLive(_387)<br/>StorageLive(_388)<br/>StorageLive(_389)<br/>_389 = &amp;mut (*_168)<br/></td></tr><tr><td align="left">_388 = &lt;RefMut&lt;'_, PerpMarket&gt; as DerefMut&gt;::deref_mut(move _389)</td></tr></table>>];
    bb150__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">150</td></tr><tr><td align="left" balign="left">_387 = &amp;mut (*_388)<br/>StorageDead(_389)<br/>StorageLive(_390)<br/>StorageLive(_391)<br/>_391 = &amp;_371<br/>_390 = &amp;(*_391)<br/></td></tr><tr><td align="left">_381 = update_position_and_market(move _382, move _387, move _390)</td></tr></table>>];
    bb151__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">151</td></tr><tr><td align="left" balign="left">StorageDead(_390)<br/>StorageDead(_387)<br/>StorageDead(_382)<br/></td></tr><tr><td align="left">_380 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _381)</td></tr></table>>];
    bb152__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">152</td></tr><tr><td align="left" balign="left">StorageDead(_381)<br/>_392 = discriminant(_380)<br/></td></tr><tr><td align="left">switchInt(move _392)</td></tr></table>>];
    bb153__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">153</td></tr><tr><td align="left" balign="left">StorageLive(_396)<br/>_396 = ((_380 as Continue).0: i64)<br/>_379 = _396<br/>StorageDead(_396)<br/>StorageDead(_391)<br/>StorageDead(_388)<br/>StorageDead(_384)<br/>StorageDead(_383)<br/>StorageDead(_380)<br/>StorageDead(_379)<br/>StorageLive(_397)<br/>StorageLive(_398)<br/>StorageLive(_399)<br/>StorageLive(_400)<br/>StorageLive(_401)<br/>StorageLive(_402)<br/>StorageLive(_403)<br/>_403 = _347<br/>StorageLive(_404)<br/>StorageLive(_405)<br/>StorageLive(_406)<br/>_406 = const 0_usize<br/>_407 = Len(((*_56).0: [state::state::FeeTier; 10]))<br/>_408 = Lt(_406, _407)<br/></td></tr><tr><td align="left">assert(move _408, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _407, _406)</td></tr></table>>];
    bb154__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">154</td></tr><tr><td align="left" balign="left">StorageLive(_393)<br/>_393 = ((_380 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_395)<br/>_395 = _393<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _395)</td></tr></table>>];
    bb155__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">155</td></tr><tr><td align="left" balign="left">StorageDead(_395)<br/>StorageDead(_393)<br/>StorageDead(_391)<br/>StorageDead(_388)<br/>StorageDead(_384)<br/>StorageDead(_383)<br/>StorageDead(_380)<br/>StorageDead(_379)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb156__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">156</td></tr><tr><td align="left" balign="left">_405 = (((*_56).0: [state::state::FeeTier; 10])[_406].0: u32)<br/>_404 = move _405 as i64 (IntToInt)<br/>StorageDead(_405)<br/></td></tr><tr><td align="left">_402 = &lt;i64 as SafeMath&gt;::safe_mul(move _403, move _404)</td></tr></table>>];
    bb157__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">157</td></tr><tr><td align="left" balign="left">StorageDead(_404)<br/>StorageDead(_403)<br/></td></tr><tr><td align="left">_401 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _402)</td></tr></table>>];
    bb158__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">158</td></tr><tr><td align="left" balign="left">StorageDead(_402)<br/>_409 = discriminant(_401)<br/></td></tr><tr><td align="left">switchInt(move _409)</td></tr></table>>];
    bb159__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">159</td></tr><tr><td align="left" balign="left">StorageLive(_413)<br/>_413 = ((_401 as Continue).0: i64)<br/>_400 = _413<br/>StorageDead(_413)<br/>StorageLive(_414)<br/>StorageLive(_415)<br/>StorageLive(_416)<br/>_416 = const 0_usize<br/>_417 = Len(((*_56).0: [state::state::FeeTier; 10]))<br/>_418 = Lt(_416, _417)<br/></td></tr><tr><td align="left">assert(move _418, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _417, _416)</td></tr></table>>];
    bb160__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">160</td></tr><tr><td align="left" balign="left">StorageLive(_410)<br/>_410 = ((_401 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_412)<br/>_412 = _410<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _412)</td></tr></table>>];
    bb161__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">161</td></tr><tr><td align="left" balign="left">StorageDead(_412)<br/>StorageDead(_410)<br/>StorageDead(_400)<br/>StorageDead(_399)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb162__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">162</td></tr><tr><td align="left" balign="left">_415 = (((*_56).0: [state::state::FeeTier; 10])[_416].1: u32)<br/>_414 = move _415 as i64 (IntToInt)<br/>StorageDead(_415)<br/></td></tr><tr><td align="left">_399 = &lt;i64 as SafeMath&gt;::safe_div(move _400, move _414)</td></tr></table>>];
    bb163__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">163</td></tr><tr><td align="left" balign="left">StorageDead(_414)<br/>StorageDead(_400)<br/></td></tr><tr><td align="left">_398 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _399)</td></tr></table>>];
    bb164__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">164</td></tr><tr><td align="left" balign="left">StorageDead(_399)<br/>_419 = discriminant(_398)<br/></td></tr><tr><td align="left">switchInt(move _419)</td></tr></table>>];
    bb165__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">165</td></tr><tr><td align="left" balign="left">StorageLive(_423)<br/>_423 = ((_398 as Continue).0: i64)<br/>_397 = _423<br/>StorageDead(_423)<br/>StorageDead(_416)<br/>StorageDead(_406)<br/>StorageDead(_401)<br/>StorageDead(_398)<br/>StorageLive(_424)<br/>StorageLive(_425)<br/>StorageLive(_426)<br/>StorageLive(_427)<br/>StorageLive(_428)<br/>StorageLive(_429)<br/>_429 = _130<br/>_430 = Len(((*_2).4: [state::user::PerpPosition; 8]))<br/>_431 = Lt(_429, _430)<br/></td></tr><tr><td align="left">assert(move _431, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _430, _429)</td></tr></table>>];
    bb166__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">166</td></tr><tr><td align="left" balign="left">StorageLive(_420)<br/>_420 = ((_398 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_422)<br/>_422 = _420<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _422)</td></tr></table>>];
    bb167__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">167</td></tr><tr><td align="left" balign="left">StorageDead(_422)<br/>StorageDead(_420)<br/>StorageDead(_416)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb168__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">168</td></tr><tr><td align="left" balign="left">_428 = &amp;mut ((*_2).4: [state::user::PerpPosition; 8])[_429]<br/>_427 = &amp;mut (*_428)<br/>StorageLive(_432)<br/>StorageLive(_433)<br/>StorageLive(_434)<br/>_434 = &amp;mut (*_168)<br/></td></tr><tr><td align="left">_433 = &lt;RefMut&lt;'_, PerpMarket&gt; as DerefMut&gt;::deref_mut(move _434)</td></tr></table>>];
    bb169__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">169</td></tr><tr><td align="left" balign="left">_432 = &amp;mut (*_433)<br/>StorageDead(_434)<br/>StorageLive(_435)<br/>StorageLive(_436)<br/>StorageLive(_437)<br/>_437 = _397<br/></td></tr><tr><td align="left">_436 = core::num::&lt;impl i64&gt;::abs(move _437)</td></tr></table>>];
    bb170__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">170</td></tr><tr><td align="left" balign="left">StorageDead(_437)<br/>_438 = Eq(_436, const i64::MIN)<br/></td></tr><tr><td align="left">assert(!move _438, &quot;attempt to negate `{}`, which would overflow&quot;, _436)</td></tr></table>>];
    bb171__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">171</td></tr><tr><td align="left" balign="left">_435 = Neg(move _436)<br/>StorageDead(_436)<br/></td></tr><tr><td align="left">_426 = update_quote_asset_and_break_even_amount(move _427, move _432, move _435)</td></tr></table>>];
    bb172__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">172</td></tr><tr><td align="left" balign="left">StorageDead(_435)<br/>StorageDead(_432)<br/>StorageDead(_427)<br/></td></tr><tr><td align="left">_425 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _426)</td></tr></table>>];
    bb173__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">173</td></tr><tr><td align="left" balign="left">StorageDead(_426)<br/>_439 = discriminant(_425)<br/></td></tr><tr><td align="left">switchInt(move _439)</td></tr></table>>];
    bb174__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">174</td></tr><tr><td align="left" balign="left">StorageLive(_443)<br/>_443 = ((_425 as Continue).0: ())<br/>_424 = _443<br/>StorageDead(_443)<br/>StorageDead(_433)<br/>StorageDead(_429)<br/>StorageDead(_428)<br/>StorageDead(_425)<br/>StorageDead(_424)<br/>StorageLive(_444)<br/>StorageLive(_445)<br/>_445 = _130<br/>_446 = Len(((*_2).4: [state::user::PerpPosition; 8]))<br/>_447 = Lt(_445, _446)<br/></td></tr><tr><td align="left">assert(move _447, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _446, _445)</td></tr></table>>];
    bb175__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">175</td></tr><tr><td align="left" balign="left">StorageLive(_440)<br/>_440 = ((_425 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_442)<br/>_442 = _440<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _442)</td></tr></table>>];
    bb176__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">176</td></tr><tr><td align="left" balign="left">StorageDead(_442)<br/>StorageDead(_440)<br/>StorageDead(_433)<br/>StorageDead(_429)<br/>StorageDead(_428)<br/>StorageDead(_425)<br/>StorageDead(_424)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb177__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">177</td></tr><tr><td align="left" balign="left">_444 = (((*_2).4: [state::user::PerpPosition; 8])[_445].2: i64)<br/>StorageDead(_445)<br/>StorageLive(_448)<br/>StorageLive(_449)<br/>StorageLive(_450)<br/>StorageLive(_451)<br/>StorageLive(_452)<br/>StorageLive(_453)<br/>_453 = &amp;mut (*_168)<br/></td></tr><tr><td align="left">_452 = &lt;RefMut&lt;'_, PerpMarket&gt; as DerefMut&gt;::deref_mut(move _453)</td></tr></table>>];
    bb178__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">178</td></tr><tr><td align="left" balign="left">_451 = &amp;mut (*_452)<br/>StorageDead(_453)<br/>StorageLive(_454)<br/>StorageLive(_455)<br/>StorageLive(_456)<br/>_456 = &amp;mut (*_158)<br/></td></tr><tr><td align="left">_455 = &lt;RefMut&lt;'_, SpotMarket&gt; as DerefMut&gt;::deref_mut(move _456)</td></tr></table>>];
    bb179__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">179</td></tr><tr><td align="left" balign="left">_454 = &amp;mut (*_455)<br/>StorageDead(_456)<br/>StorageLive(_457)<br/>_457 = &amp;mut (*_2)<br/>StorageLive(_458)<br/>StorageLive(_459)<br/>StorageLive(_460)<br/>StorageLive(_461)<br/>_461 = _444<br/></td></tr><tr><td align="left">_460 = &lt;i64 as Cast&gt;::cast::&lt;i128&gt;(move _461)</td></tr></table>>];
    bb180__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">180</td></tr><tr><td align="left" balign="left">StorageDead(_461)<br/></td></tr><tr><td align="left">_459 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _460)</td></tr></table>>];
    bb181__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">181</td></tr><tr><td align="left" balign="left">StorageDead(_460)<br/>_462 = discriminant(_459)<br/></td></tr><tr><td align="left">switchInt(move _462)</td></tr></table>>];
    bb182__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">182</td></tr><tr><td align="left" balign="left">StorageLive(_466)<br/>_466 = ((_459 as Continue).0: i128)<br/>_458 = _466<br/>StorageDead(_466)<br/></td></tr><tr><td align="left">_450 = update_pnl_pool_and_user_balance(move _451, move _454, move _457, move _458)</td></tr></table>>];
    bb183__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">183</td></tr><tr><td align="left" balign="left">StorageLive(_463)<br/>_463 = ((_459 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_465)<br/>_465 = _463<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _465)</td></tr></table>>];
    bb184__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">184</td></tr><tr><td align="left" balign="left">StorageDead(_465)<br/>StorageDead(_463)<br/>StorageDead(_458)<br/>StorageDead(_457)<br/>StorageDead(_454)<br/>StorageDead(_451)<br/>StorageDead(_450)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb185__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">185</td></tr><tr><td align="left" balign="left">StorageDead(_458)<br/>StorageDead(_457)<br/>StorageDead(_454)<br/>StorageDead(_451)<br/></td></tr><tr><td align="left">_449 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _450)</td></tr></table>>];
    bb186__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">186</td></tr><tr><td align="left" balign="left">StorageDead(_450)<br/>_467 = discriminant(_449)<br/></td></tr><tr><td align="left">switchInt(move _467)</td></tr></table>>];
    bb187__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">187</td></tr><tr><td align="left" balign="left">StorageLive(_471)<br/>_471 = ((_449 as Continue).0: i128)<br/>_448 = _471<br/>StorageDead(_471)<br/>StorageDead(_459)<br/>StorageDead(_455)<br/>StorageDead(_452)<br/>StorageDead(_449)<br/>StorageLive(_472)<br/>StorageLive(_473)<br/>StorageLive(_474)<br/>StorageLive(_475)<br/>StorageLive(_476)<br/>StorageLive(_477)<br/>_477 = _130<br/>_478 = Len(((*_2).4: [state::user::PerpPosition; 8]))<br/>_479 = Lt(_477, _478)<br/></td></tr><tr><td align="left">assert(move _479, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _478, _477)</td></tr></table>>];
    bb188__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">188</td></tr><tr><td align="left" balign="left">StorageLive(_468)<br/>_468 = ((_449 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_470)<br/>_470 = _468<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _470)</td></tr></table>>];
    bb189__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">189</td></tr><tr><td align="left" balign="left">StorageDead(_470)<br/>StorageDead(_468)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb190__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">190</td></tr><tr><td align="left" balign="left">_476 = &amp;mut ((*_2).4: [state::user::PerpPosition; 8])[_477]<br/>_475 = &amp;mut (*_476)<br/>StorageLive(_480)<br/>StorageLive(_481)<br/>StorageLive(_482)<br/>_482 = &amp;mut (*_168)<br/></td></tr><tr><td align="left">_481 = &lt;RefMut&lt;'_, PerpMarket&gt; as DerefMut&gt;::deref_mut(move _482)</td></tr></table>>];
    bb191__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">191</td></tr><tr><td align="left" balign="left">_480 = &amp;mut (*_481)<br/>StorageDead(_482)<br/>StorageLive(_483)<br/>StorageLive(_484)<br/>StorageLive(_485)<br/>StorageLive(_486)<br/>StorageLive(_487)<br/>_487 = _448<br/></td></tr><tr><td align="left">_486 = &lt;i128 as Cast&gt;::cast::&lt;i64&gt;(move _487)</td></tr></table>>];
    bb192__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">192</td></tr><tr><td align="left" balign="left">StorageDead(_487)<br/></td></tr><tr><td align="left">_485 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _486)</td></tr></table>>];
    bb193__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">193</td></tr><tr><td align="left" balign="left">StorageDead(_486)<br/>_488 = discriminant(_485)<br/></td></tr><tr><td align="left">switchInt(move _488)</td></tr></table>>];
    bb194__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">194</td></tr><tr><td align="left" balign="left">StorageLive(_492)<br/>_492 = ((_485 as Continue).0: i64)<br/>_484 = _492<br/>StorageDead(_492)<br/>_493 = Eq(_484, const i64::MIN)<br/></td></tr><tr><td align="left">assert(!move _493, &quot;attempt to negate `{}`, which would overflow&quot;, _484)</td></tr></table>>];
    bb195__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">195</td></tr><tr><td align="left" balign="left">StorageLive(_489)<br/>_489 = ((_485 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_491)<br/>_491 = _489<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _491)</td></tr></table>>];
    bb196__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">196</td></tr><tr><td align="left" balign="left">StorageDead(_491)<br/>StorageDead(_489)<br/>StorageDead(_484)<br/>StorageDead(_483)<br/>StorageDead(_480)<br/>StorageDead(_475)<br/>StorageDead(_474)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb197__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">197</td></tr><tr><td align="left" balign="left">_483 = Neg(move _484)<br/>StorageDead(_484)<br/></td></tr><tr><td align="left">_474 = update_quote_asset_amount(move _475, move _480, move _483)</td></tr></table>>];
    bb198__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">198</td></tr><tr><td align="left" balign="left">StorageDead(_483)<br/>StorageDead(_480)<br/>StorageDead(_475)<br/></td></tr><tr><td align="left">_473 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _474)</td></tr></table>>];
    bb199__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">199</td></tr><tr><td align="left" balign="left">StorageDead(_474)<br/>_494 = discriminant(_473)<br/></td></tr><tr><td align="left">switchInt(move _494)</td></tr></table>>];
    bb200__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">200</td></tr><tr><td align="left" balign="left">StorageLive(_498)<br/>_498 = ((_473 as Continue).0: ())<br/>_472 = _498<br/>StorageDead(_498)<br/>StorageDead(_485)<br/>StorageDead(_481)<br/>StorageDead(_477)<br/>StorageDead(_476)<br/>StorageDead(_473)<br/>StorageDead(_472)<br/>StorageLive(_499)<br/>StorageLive(_500)<br/>StorageLive(_501)<br/>StorageLive(_502)<br/>_502 = &amp;mut (*_2)<br/>StorageLive(_503)<br/>_503 = _130<br/>StorageLive(_504)<br/>StorageLive(_505)<br/>StorageLive(_506)<br/>StorageLive(_507)<br/>_507 = _448<br/></td></tr><tr><td align="left">_506 = &lt;i128 as Cast&gt;::cast::&lt;i64&gt;(move _507)</td></tr></table>>];
    bb201__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">201</td></tr><tr><td align="left" balign="left">StorageLive(_495)<br/>_495 = ((_473 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_497)<br/>_497 = _495<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _497)</td></tr></table>>];
    bb202__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">202</td></tr><tr><td align="left" balign="left">StorageDead(_497)<br/>StorageDead(_495)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb203__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">203</td></tr><tr><td align="left" balign="left">StorageDead(_507)<br/></td></tr><tr><td align="left">_505 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _506)</td></tr></table>>];
    bb204__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">204</td></tr><tr><td align="left" balign="left">StorageDead(_506)<br/>_508 = discriminant(_505)<br/></td></tr><tr><td align="left">switchInt(move _508)</td></tr></table>>];
    bb205__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">205</td></tr><tr><td align="left" balign="left">StorageLive(_512)<br/>_512 = ((_505 as Continue).0: i64)<br/>_504 = _512<br/>StorageDead(_512)<br/></td></tr><tr><td align="left">_501 = update_settled_pnl(move _502, move _503, move _504)</td></tr></table>>];
    bb206__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">206</td></tr><tr><td align="left" balign="left">StorageLive(_509)<br/>_509 = ((_505 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_511)<br/>_511 = _509<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _511)</td></tr></table>>];
    bb207__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">207</td></tr><tr><td align="left" balign="left">StorageDead(_511)<br/>StorageDead(_509)<br/>StorageDead(_504)<br/>StorageDead(_503)<br/>StorageDead(_502)<br/>StorageDead(_501)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb208__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">208</td></tr><tr><td align="left" balign="left">StorageDead(_504)<br/>StorageDead(_503)<br/>StorageDead(_502)<br/></td></tr><tr><td align="left">_500 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _501)</td></tr></table>>];
    bb209__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">209</td></tr><tr><td align="left" balign="left">StorageDead(_501)<br/>_513 = discriminant(_500)<br/></td></tr><tr><td align="left">switchInt(move _513)</td></tr></table>>];
    bb210__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">210</td></tr><tr><td align="left" balign="left">StorageLive(_517)<br/>_517 = ((_500 as Continue).0: ())<br/>_499 = _517<br/>StorageDead(_517)<br/>StorageDead(_505)<br/>StorageDead(_500)<br/>StorageDead(_499)<br/>StorageLive(_518)<br/>StorageLive(_519)<br/>StorageLive(_520)<br/>StorageLive(_521)<br/>StorageLive(_522)<br/>StorageLive(_523)<br/>_523 = &amp;(*_168)<br/></td></tr><tr><td align="left">_522 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _523)</td></tr></table>>];
    bb211__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">211</td></tr><tr><td align="left" balign="left">StorageLive(_514)<br/>_514 = ((_500 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_516)<br/>_516 = _514<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _516)</td></tr></table>>];
    bb212__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">212</td></tr><tr><td align="left" balign="left">StorageDead(_516)<br/>StorageDead(_514)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb213__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">213</td></tr><tr><td align="left" balign="left">StorageDead(_523)<br/>_521 = (((*_522).1: state::perp_market::AMM).15: i128)<br/>StorageLive(_524)<br/>StorageLive(_525)<br/>StorageLive(_526)<br/>StorageLive(_527)<br/>_527 = (_371.1: i64)<br/></td></tr><tr><td align="left">_526 = &lt;i64 as Cast&gt;::cast::&lt;i128&gt;(move _527)</td></tr></table>>];
    bb214__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">214</td></tr><tr><td align="left" balign="left">StorageDead(_527)<br/></td></tr><tr><td align="left">_525 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _526)</td></tr></table>>];
    bb215__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">215</td></tr><tr><td align="left" balign="left">StorageDead(_526)<br/>_528 = discriminant(_525)<br/></td></tr><tr><td align="left">switchInt(move _528)</td></tr></table>>];
    bb216__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">216</td></tr><tr><td align="left" balign="left">StorageLive(_532)<br/>_532 = ((_525 as Continue).0: i128)<br/>_524 = _532<br/>StorageDead(_532)<br/></td></tr><tr><td align="left">_520 = &lt;i128 as SafeMath&gt;::safe_add(move _521, move _524)</td></tr></table>>];
    bb217__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">217</td></tr><tr><td align="left" balign="left">StorageLive(_529)<br/>_529 = ((_525 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_531)<br/>_531 = _529<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _531)</td></tr></table>>];
    bb218__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">218</td></tr><tr><td align="left" balign="left">StorageDead(_531)<br/>StorageDead(_529)<br/>StorageDead(_524)<br/>StorageDead(_521)<br/>StorageDead(_520)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb219__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">219</td></tr><tr><td align="left" balign="left">StorageDead(_524)<br/>StorageDead(_521)<br/></td></tr><tr><td align="left">_519 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _520)</td></tr></table>>];
    bb220__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">220</td></tr><tr><td align="left" balign="left">StorageDead(_520)<br/>_533 = discriminant(_519)<br/></td></tr><tr><td align="left">switchInt(move _533)</td></tr></table>>];
    bb221__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">221</td></tr><tr><td align="left" balign="left">StorageLive(_537)<br/>_537 = ((_519 as Continue).0: i128)<br/>_518 = _537<br/>StorageDead(_537)<br/>StorageLive(_538)<br/>StorageLive(_539)<br/>_539 = &amp;mut (*_168)<br/></td></tr><tr><td align="left">_538 = &lt;RefMut&lt;'_, PerpMarket&gt; as DerefMut&gt;::deref_mut(move _539)</td></tr></table>>];
    bb222__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">222</td></tr><tr><td align="left" balign="left">StorageLive(_534)<br/>_534 = ((_519 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_536)<br/>_536 = _534<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _536)</td></tr></table>>];
    bb223__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">223</td></tr><tr><td align="left" balign="left">StorageDead(_536)<br/>StorageDead(_534)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb224__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">224</td></tr><tr><td align="left" balign="left">StorageDead(_539)<br/>(((*_538).1: state::perp_market::AMM).15: i128) = move _518<br/>StorageDead(_518)<br/>StorageDead(_538)<br/>StorageDead(_525)<br/>StorageDead(_522)<br/>StorageDead(_519)<br/>StorageLive(_540)<br/>StorageLive(_541)<br/>_541 = _130<br/>_542 = Len(((*_2).4: [state::user::PerpPosition; 8]))<br/>_543 = Lt(_541, _542)<br/></td></tr><tr><td align="left">assert(move _543, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _542, _541)</td></tr></table>>];
    bb225__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">225</td></tr><tr><td align="left" balign="left">_540 = (((*_2).4: [state::user::PerpPosition; 8])[_541].2: i64)<br/>StorageDead(_541)<br/>StorageLive(_544)<br/>StorageLive(_545)<br/>StorageLive(_546)<br/>StorageLive(_547)<br/>StorageLive(_548)<br/>StorageLive(_549)<br/>StorageLive(_550)<br/>StorageLive(_551)<br/>StorageLive(_552)<br/>StorageLive(_553)<br/>StorageLive(_554)<br/>StorageLive(_555)<br/>StorageLive(_556)<br/>StorageLive(_557)<br/>StorageLive(_558)<br/>_558 = _57<br/>StorageLive(_559)<br/>_559 = (*_3)<br/>StorageLive(_560)<br/>_560 = _1<br/>StorageLive(_561)<br/>_561 = _448<br/>StorageLive(_562)<br/>_562 = _363<br/>StorageLive(_563)<br/>_563 = _540<br/>StorageLive(_564)<br/>_564 = _367<br/>StorageLive(_565)<br/>StorageLive(_566)<br/>StorageLive(_567)<br/>_567 = &amp;(*_168)<br/></td></tr><tr><td align="left">_566 = &lt;RefMut&lt;'_, PerpMarket&gt; as Deref&gt;::deref(move _567)</td></tr></table>>];
    bb226__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">226</td></tr><tr><td align="left" balign="left">StorageDead(_567)<br/>_565 = ((*_566).7: i64)<br/>StorageLive(_568)<br/>_568 = SettlePnlExplanation::ExpiredPosition<br/>_557 = SettlePnlRecord { ts: move _558, user: move _559, market_index: move _560, pnl: move _561, base_asset_amount: move _562, quote_asset_amount_after: move _563, quote_entry_amount: move _564, settle_price: move _565, explanation: move _568 }<br/>StorageDead(_568)<br/>StorageDead(_565)<br/>StorageDead(_564)<br/>StorageDead(_563)<br/>StorageDead(_562)<br/>StorageDead(_561)<br/>StorageDead(_560)<br/>StorageDead(_559)<br/>StorageDead(_558)<br/>_556 = &amp;_557<br/>_555 = &amp;(*_556)<br/></td></tr><tr><td align="left">_554 = &lt;SettlePnlRecord as anchor_lang::Event&gt;::data(move _555)</td></tr></table>>];
    bb227__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">227</td></tr><tr><td align="left" balign="left">StorageDead(_555)<br/>_553 = &amp;_554<br/>_552 = &amp;(*_553)<br/></td></tr><tr><td align="left">_551 = &lt;Vec&lt;u8&gt; as Deref&gt;::deref(move _552)</td></tr></table>>];
    bb228__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">228</td></tr><tr><td align="left" balign="left">_550 = &amp;(*_551)<br/>StorageDead(_552)<br/>_549 = [move _550]<br/>StorageDead(_550)<br/>_548 = &amp;_549<br/>_547 = &amp;(*_548)<br/>_546 = move _547 as &amp;[&amp;[u8]] (PointerCoercion(Unsize))<br/>StorageDead(_547)<br/></td></tr><tr><td align="left">_545 = solana_program::log::sol_log_data(move _546)</td></tr></table>>];
    bb229__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">229</td></tr><tr><td align="left" balign="left">StorageDead(_546)<br/></td></tr><tr><td align="left">drop(_554)</td></tr></table>>];
    bb230__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">230</td></tr><tr><td align="left" balign="left">StorageDead(_566)<br/>StorageDead(_557)<br/>StorageDead(_556)<br/>StorageDead(_554)<br/>StorageDead(_553)<br/>StorageDead(_551)<br/>StorageDead(_549)<br/>StorageDead(_548)<br/>StorageDead(_545)<br/>_544 = const ()<br/>StorageDead(_544)<br/>StorageLive(_569)<br/>StorageLive(_570)<br/>StorageLive(_571)<br/>StorageLive(_572)<br/>StorageLive(_573)<br/>StorageLive(_574)<br/>_574 = _130<br/>_575 = Len(((*_2).4: [state::user::PerpPosition; 8]))<br/>_576 = Lt(_574, _575)<br/></td></tr><tr><td align="left">assert(move _576, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _575, _574)</td></tr></table>>];
    bb231__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">231</td></tr><tr><td align="left" balign="left">_573 = &amp;((*_2).4: [state::user::PerpPosition; 8])[_574]<br/></td></tr><tr><td align="left">_572 = PerpPosition::is_available(move _573)</td></tr></table>>];
    bb232__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">232</td></tr><tr><td align="left">switchInt(move _572)</td></tr></table>>];
    bb233__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">233</td></tr><tr><td align="left" balign="left">StorageDead(_574)<br/>StorageDead(_573)<br/>StorageLive(_577)<br/>_577 = ()<br/>_571 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _577)<br/>StorageDead(_577)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb234__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">234</td></tr><tr><td align="left" balign="left">StorageDead(_574)<br/>StorageDead(_573)<br/>StorageLive(_578)<br/>_578 = error::ErrorCode::UnableToSettleExpiredUserPosition<br/>StorageLive(_579)<br/>StorageLive(_580)<br/>StorageLive(_581)<br/>StorageLive(_582)<br/>StorageLive(_583)<br/>StorageLive(_584)<br/>StorageLive(_585)<br/>StorageLive(_586)<br/>StorageLive(_587)<br/>StorageLive(_588)<br/>StorageLive(_589)<br/>_609 = const _<br/>_589 = &amp;(*_609)<br/>_588 = &amp;(*_589)<br/>_587 = move _588 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_588)<br/>StorageLive(_591)<br/>StorageLive(_592)<br/>StorageLive(_593)<br/>StorageLive(_594)<br/>StorageLive(_595)<br/>StorageLive(_596)<br/>StorageLive(_597)<br/>_597 = &amp;_578<br/>_596 = &amp;(*_597)<br/></td></tr><tr><td align="left">_595 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _596)</td></tr></table>>];
    bb235__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">235</td></tr><tr><td align="left" balign="left">StorageDead(_596)<br/>_594 = [move _595]<br/>StorageDead(_595)<br/>_593 = &amp;_594<br/>_592 = &amp;(*_593)<br/>_591 = move _592 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_592)<br/></td></tr><tr><td align="left">_586 = Arguments::&lt;'_&gt;::new_v1(move _587, move _591)</td></tr></table>>];
    bb236__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">236</td></tr><tr><td align="left" balign="left">StorageDead(_591)<br/>StorageDead(_587)<br/></td></tr><tr><td align="left">_585 = format(move _586)</td></tr></table>>];
    bb237__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">237</td></tr><tr><td align="left" balign="left">StorageDead(_586)<br/>StorageDead(_597)<br/>StorageDead(_594)<br/>StorageDead(_593)<br/>StorageDead(_589)<br/>_584 = move _585<br/>StorageDead(_585)<br/>_583 = &amp;_584<br/>_582 = &amp;(*_583)<br/></td></tr><tr><td align="left">_581 = &lt;String as Deref&gt;::deref(move _582)</td></tr></table>>];
    bb238__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">238</td></tr><tr><td align="left" balign="left">_580 = &amp;(*_581)<br/>StorageDead(_582)<br/></td></tr><tr><td align="left">_579 = solana_program::log::sol_log(move _580)</td></tr></table>>];
    bb239__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">239</td></tr><tr><td align="left" balign="left">StorageDead(_580)<br/></td></tr><tr><td align="left">drop(_584)</td></tr></table>>];
    bb240__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">240</td></tr><tr><td align="left" balign="left">StorageDead(_584)<br/>StorageDead(_583)<br/>StorageDead(_581)<br/>StorageDead(_579)<br/>StorageLive(_598)<br/>StorageLive(_599)<br/>StorageLive(_600)<br/>_600 = const &quot;Issue occurred in expired settlement&quot;<br/>_599 = &amp;(*_600)<br/></td></tr><tr><td align="left">_598 = solana_program::log::sol_log(move _599)</td></tr></table>>];
    bb241__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">241</td></tr><tr><td align="left" balign="left">StorageDead(_599)<br/>StorageDead(_600)<br/>StorageDead(_598)<br/>StorageLive(_601)<br/>_601 = _578<br/>_571 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _601)<br/>StorageDead(_601)<br/>StorageDead(_578)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb242__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">242</td></tr><tr><td align="left" balign="left">StorageDead(_572)<br/></td></tr><tr><td align="left">_570 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _571)</td></tr></table>>];
    bb243__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">243</td></tr><tr><td align="left" balign="left">StorageDead(_571)<br/>_602 = discriminant(_570)<br/></td></tr><tr><td align="left">switchInt(move _602)</td></tr></table>>];
    bb244__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">244</td></tr><tr><td align="left" balign="left">StorageLive(_606)<br/>_606 = ((_570 as Continue).0: ())<br/>_569 = _606<br/>StorageDead(_606)<br/>StorageDead(_570)<br/>StorageDead(_569)<br/>StorageLive(_607)<br/>_607 = ()<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _607)<br/>StorageDead(_607)<br/>StorageDead(_540)<br/>StorageDead(_448)<br/>StorageDead(_444)<br/>StorageDead(_397)<br/>StorageDead(_371)<br/>StorageDead(_367)<br/>StorageDead(_363)<br/>StorageDead(_347)<br/>StorageDead(_237)<br/></td></tr><tr><td align="left">drop(_169)</td></tr></table>>];
    bb245__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">245</td></tr><tr><td align="left" balign="left">StorageLive(_603)<br/>_603 = ((_570 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_605)<br/>_605 = _603<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _605)</td></tr></table>>];
    bb246__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">246</td></tr><tr><td align="left" balign="left">StorageDead(_605)<br/>StorageDead(_603)<br/>StorageDead(_570)<br/>StorageDead(_569)<br/>StorageDead(_540)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb247__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">247</td></tr><tr><td align="left" balign="left">StorageDead(_169)<br/>StorageDead(_168)<br/></td></tr><tr><td align="left">drop(_159)</td></tr></table>>];
    bb248__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">248</td></tr><tr><td align="left" balign="left">StorageDead(_159)<br/>StorageDead(_158)<br/>StorageDead(_130)<br/>StorageDead(_58)<br/>StorageDead(_57)<br/>StorageDead(_56)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb249__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">249</td></tr><tr><td align="left" balign="left">StorageDead(_518)<br/>StorageDead(_525)<br/>StorageDead(_522)<br/>StorageDead(_519)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb250__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">250</td></tr><tr><td align="left" balign="left">StorageDead(_505)<br/>StorageDead(_500)<br/>StorageDead(_499)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb251__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">251</td></tr><tr><td align="left" balign="left">StorageDead(_485)<br/>StorageDead(_481)<br/>StorageDead(_477)<br/>StorageDead(_476)<br/>StorageDead(_473)<br/>StorageDead(_472)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb252__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">252</td></tr><tr><td align="left" balign="left">StorageDead(_459)<br/>StorageDead(_455)<br/>StorageDead(_452)<br/>StorageDead(_449)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb253__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">253</td></tr><tr><td align="left" balign="left">StorageDead(_448)<br/>StorageDead(_444)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb254__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">254</td></tr><tr><td align="left" balign="left">StorageDead(_406)<br/>StorageDead(_401)<br/>StorageDead(_398)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb255__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">255</td></tr><tr><td align="left" balign="left">StorageDead(_397)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb256__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">256</td></tr><tr><td align="left" balign="left">StorageDead(_371)<br/>StorageDead(_367)<br/>StorageDead(_363)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb257__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">257</td></tr><tr><td align="left" balign="left">StorageDead(_347)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb258__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">258</td></tr><tr><td align="left" balign="left">StorageDead(_244)<br/>StorageDead(_241)<br/>StorageDead(_238)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb259__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">259</td></tr><tr><td align="left" balign="left">StorageDead(_237)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb260__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">260</td></tr><tr><td align="left">drop(_169)</td></tr></table>>];
    bb261__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">261</td></tr><tr><td align="left" balign="left">StorageDead(_169)<br/>StorageDead(_168)<br/></td></tr><tr><td align="left">drop(_159)</td></tr></table>>];
    bb262__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">262</td></tr><tr><td align="left" balign="left">StorageDead(_159)<br/>StorageDead(_158)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb263__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">263</td></tr><tr><td align="left" balign="left">StorageDead(_130)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb264__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">264</td></tr><tr><td align="left" balign="left">StorageDead(_61)<br/>StorageDead(_60)<br/>StorageDead(_59)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb265__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">265</td></tr><tr><td align="left" balign="left">StorageDead(_58)<br/>StorageDead(_57)<br/>StorageDead(_56)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb266__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">266</td></tr><tr><td align="left" balign="left">StorageDead(_42)<br/>StorageDead(_41)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb267__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">267</td></tr><tr><td align="left">return</td></tr></table>>];
    bb268__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">268 (cleanup)</td></tr><tr><td align="left">drop(_584)</td></tr></table>>];
    bb269__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">269 (cleanup)</td></tr><tr><td align="left">drop(_554)</td></tr></table>>];
    bb270__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">270 (cleanup)</td></tr><tr><td align="left">drop(_324)</td></tr></table>>];
    bb271__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">271 (cleanup)</td></tr><tr><td align="left">drop(_289)</td></tr></table>>];
    bb272__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">272 (cleanup)</td></tr><tr><td align="left">drop(_270)</td></tr></table>>];
    bb273__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">273 (cleanup)</td></tr><tr><td align="left">drop(_215)</td></tr></table>>];
    bb274__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">274 (cleanup)</td></tr><tr><td align="left">drop(_196)</td></tr></table>>];
    bb275__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">275 (cleanup)</td></tr><tr><td align="left">drop(_169)</td></tr></table>>];
    bb276__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">276 (cleanup)</td></tr><tr><td align="left">drop(_159)</td></tr></table>>];
    bb277__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">277 (cleanup)</td></tr><tr><td align="left">drop(_143)</td></tr></table>>];
    bb278__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">278 (cleanup)</td></tr><tr><td align="left">drop(_91)</td></tr></table>>];
    bb279__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">279 (cleanup)</td></tr><tr><td align="left">drop(_61)</td></tr></table>>];
    bb280__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">280 (cleanup)</td></tr><tr><td align="left">drop(_21)</td></tr></table>>];
    bb281__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">281 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb282__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">282</td></tr><tr><td align="left" balign="left">_623 = discriminant(_92)<br/>StorageDead(_96)<br/>_617 = const false<br/>StorageDead(_92)<br/>StorageDead(_91)<br/>StorageDead(_89)<br/>StorageDead(_84)<br/>StorageDead(_83)<br/>StorageLive(_108)<br/>StorageLive(_109)<br/>StorageLive(_110)<br/>StorageLive(_111)<br/>_111 = &amp;mut (*_2)<br/>StorageLive(_112)<br/>_112 = &amp;(*_3)<br/>StorageLive(_113)<br/>_113 = Option::&lt;&amp;anchor_lang::prelude::Pubkey&gt;::None<br/>StorageLive(_114)<br/>_114 = &amp;(*_4)<br/>StorageLive(_115)<br/>_115 = &amp;(*_5)<br/>StorageLive(_116)<br/>_116 = &amp;mut (*_6)<br/>StorageLive(_117)<br/>_117 = _57<br/>StorageLive(_118)<br/>_118 = _58<br/>StorageLive(_119)<br/>_119 = OrderActionExplanation::MarketExpired<br/>StorageLive(_120)<br/>StorageLive(_121)<br/>_121 = state::user::MarketType::Perp<br/>_120 = Option::&lt;state::user::MarketType&gt;::Some(move _121)<br/>StorageDead(_121)<br/>StorageLive(_122)<br/>StorageLive(_123)<br/>_123 = _1<br/>_122 = Option::&lt;u16&gt;::Some(move _123)<br/>StorageDead(_123)<br/>StorageLive(_124)<br/>_124 = Option::&lt;controller::position::PositionDirection&gt;::None<br/></td></tr><tr><td align="left">_110 = controller::orders::cancel_orders(move _111, move _112, move _113, move _114, move _115, move _116, move _117, move _118, move _119, move _120, move _122, move _124)</td></tr></table>>];
    bb283__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">283</td></tr><tr><td align="left" balign="left">_637 = discriminant(_92)<br/>StorageDead(_96)<br/>_617 = const false<br/>StorageDead(_92)<br/>StorageDead(_91)<br/>StorageDead(_89)<br/>StorageDead(_84)<br/>StorageDead(_83)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb284__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">284 (cleanup)</td></tr><tr><td align="left" balign="left">_639 = discriminant(_170)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb285__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">285 (cleanup)</td></tr><tr><td align="left" balign="left">_640 = discriminant(_160)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb286__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">286 (cleanup)</td></tr><tr><td align="left" balign="left">_641 = discriminant(_109)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb287__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">287 (cleanup)</td></tr><tr><td align="left" balign="left">_642 = discriminant(_92)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb288__0_644 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">288 (cleanup)</td></tr><tr><td align="left" balign="left">_643 = discriminant(_62)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_644 -> bb1__0_644 [label="return"];
    bb1__0_644 -> bb3__0_644 [label="0"];
    bb1__0_644 -> bb2__0_644 [label="otherwise"];
    bb2__0_644 -> bb4__0_644 [label="return"];
    bb3__0_644 -> bb10__0_644 [label=""];
    bb4__0_644 -> bb5__0_644 [label="return"];
    bb5__0_644 -> bb6__0_644 [label="return"];
    bb6__0_644 -> bb7__0_644 [label="return"];
    bb6__0_644 -> bb280__0_644 [label="unwind"];
    bb7__0_644 -> bb8__0_644 [label="return"];
    bb7__0_644 -> bb280__0_644 [label="unwind"];
    bb8__0_644 -> bb9__0_644 [label="return"];
    bb8__0_644 -> bb281__0_644 [label="unwind"];
    bb9__0_644 -> bb10__0_644 [label=""];
    bb10__0_644 -> bb11__0_644 [label="return"];
    bb11__0_644 -> bb12__0_644 [label="0"];
    bb11__0_644 -> bb14__0_644 [label="1"];
    bb11__0_644 -> bb13__0_644 [label="otherwise"];
    bb12__0_644 -> bb16__0_644 [label="return"];
    bb14__0_644 -> bb15__0_644 [label="return"];
    bb15__0_644 -> bb267__0_644 [label=""];
    bb16__0_644 -> bb17__0_644 [label="return"];
    bb17__0_644 -> bb18__0_644 [label="0"];
    bb17__0_644 -> bb19__0_644 [label="1"];
    bb17__0_644 -> bb13__0_644 [label="otherwise"];
    bb18__0_644 -> bb22__0_644 [label="0"];
    bb18__0_644 -> bb21__0_644 [label="otherwise"];
    bb19__0_644 -> bb20__0_644 [label="return"];
    bb20__0_644 -> bb266__0_644 [label=""];
    bb21__0_644 -> bb23__0_644 [label="return"];
    bb22__0_644 -> bb266__0_644 [label=""];
    bb23__0_644 -> bb24__0_644 [label="return"];
    bb23__0_644 -> bb281__0_644 [label="unwind"];
    bb24__0_644 -> bb25__0_644 [label="0"];
    bb24__0_644 -> bb26__0_644 [label="1"];
    bb24__0_644 -> bb13__0_644 [label="otherwise"];
    bb25__0_644 -> bb28__0_644 [label="return"];
    bb25__0_644 -> bb279__0_644 [label="unwind"];
    bb26__0_644 -> bb27__0_644 [label="return"];
    bb26__0_644 -> bb288__0_644 [label="unwind"];
    bb27__0_644 -> bb264__0_644 [label=""];
    bb28__0_644 -> bb29__0_644 [label="return"];
    bb28__0_644 -> bb279__0_644 [label="unwind"];
    bb29__0_644 -> bb30__0_644 [label="return"];
    bb29__0_644 -> bb279__0_644 [label="unwind"];
    bb30__0_644 -> bb31__0_644 [label="0"];
    bb30__0_644 -> bb32__0_644 [label="1"];
    bb30__0_644 -> bb13__0_644 [label="otherwise"];
    bb31__0_644 -> bb34__0_644 [label="return"];
    bb31__0_644 -> bb281__0_644 [label="unwind"];
    bb32__0_644 -> bb33__0_644 [label="return"];
    bb32__0_644 -> bb279__0_644 [label="unwind"];
    bb33__0_644 -> bb264__0_644 [label="return"];
    bb33__0_644 -> bb281__0_644 [label="unwind"];
    bb34__0_644 -> bb35__0_644 [label="return"];
    bb35__0_644 -> bb36__0_644 [label="return"];
    bb35__0_644 -> bb281__0_644 [label="unwind"];
    bb36__0_644 -> bb37__0_644 [label="0"];
    bb36__0_644 -> bb38__0_644 [label="1"];
    bb36__0_644 -> bb13__0_644 [label="otherwise"];
    bb37__0_644 -> bb40__0_644 [label="return"];
    bb37__0_644 -> bb278__0_644 [label="unwind"];
    bb38__0_644 -> bb39__0_644 [label="return"];
    bb38__0_644 -> bb287__0_644 [label="unwind"];
    bb39__0_644 -> bb283__0_644 [label=""];
    bb40__0_644 -> bb41__0_644 [label="return"];
    bb40__0_644 -> bb278__0_644 [label="unwind"];
    bb41__0_644 -> bb42__0_644 [label="return"];
    bb41__0_644 -> bb278__0_644 [label="unwind"];
    bb42__0_644 -> bb43__0_644 [label="0"];
    bb42__0_644 -> bb44__0_644 [label="1"];
    bb42__0_644 -> bb13__0_644 [label="otherwise"];
    bb43__0_644 -> bb282__0_644 [label="return"];
    bb43__0_644 -> bb287__0_644 [label="unwind"];
    bb44__0_644 -> bb45__0_644 [label="return"];
    bb44__0_644 -> bb278__0_644 [label="unwind"];
    bb45__0_644 -> bb283__0_644 [label="return"];
    bb45__0_644 -> bb287__0_644 [label="unwind"];
    bb46__0_644 -> bb47__0_644 [label="return"];
    bb46__0_644 -> bb281__0_644 [label="unwind"];
    bb47__0_644 -> bb48__0_644 [label="0"];
    bb47__0_644 -> bb49__0_644 [label="1"];
    bb47__0_644 -> bb13__0_644 [label="otherwise"];
    bb48__0_644 -> bb51__0_644 [label="return"];
    bb48__0_644 -> bb286__0_644 [label="unwind"];
    bb49__0_644 -> bb50__0_644 [label="return"];
    bb49__0_644 -> bb286__0_644 [label="unwind"];
    bb50__0_644 -> bb265__0_644 [label=""];
    bb51__0_644 -> bb52__0_644 [label="return"];
    bb52__0_644 -> bb54__0_644 [label="0"];
    bb52__0_644 -> bb53__0_644 [label="1"];
    bb52__0_644 -> bb13__0_644 [label="otherwise"];
    bb53__0_644 -> bb55__0_644 [label="return"];
    bb54__0_644 -> bb61__0_644 [label="return"];
    bb55__0_644 -> bb56__0_644 [label="return"];
    bb56__0_644 -> bb57__0_644 [label="return"];
    bb57__0_644 -> bb58__0_644 [label="return"];
    bb57__0_644 -> bb277__0_644 [label="unwind"];
    bb58__0_644 -> bb59__0_644 [label="return"];
    bb58__0_644 -> bb277__0_644 [label="unwind"];
    bb59__0_644 -> bb60__0_644 [label="return"];
    bb59__0_644 -> bb281__0_644 [label="unwind"];
    bb60__0_644 -> bb263__0_644 [label=""];
    bb61__0_644 -> bb62__0_644 [label="return"];
    bb61__0_644 -> bb281__0_644 [label="unwind"];
    bb62__0_644 -> bb63__0_644 [label="0"];
    bb62__0_644 -> bb64__0_644 [label="1"];
    bb62__0_644 -> bb13__0_644 [label="otherwise"];
    bb63__0_644 -> bb66__0_644 [label="return"];
    bb63__0_644 -> bb276__0_644 [label="unwind"];
    bb64__0_644 -> bb65__0_644 [label="return"];
    bb64__0_644 -> bb285__0_644 [label="unwind"];
    bb65__0_644 -> bb262__0_644 [label=""];
    bb66__0_644 -> bb67__0_644 [label="return"];
    bb66__0_644 -> bb276__0_644 [label="unwind"];
    bb67__0_644 -> bb68__0_644 [label="0"];
    bb67__0_644 -> bb69__0_644 [label="1"];
    bb67__0_644 -> bb13__0_644 [label="otherwise"];
    bb68__0_644 -> bb71__0_644 [label="return"];
    bb68__0_644 -> bb275__0_644 [label="unwind"];
    bb69__0_644 -> bb70__0_644 [label="return"];
    bb69__0_644 -> bb284__0_644 [label="unwind"];
    bb70__0_644 -> bb261__0_644 [label=""];
    bb71__0_644 -> bb72__0_644 [label="return"];
    bb71__0_644 -> bb275__0_644 [label="unwind"];
    bb72__0_644 -> bb74__0_644 [label="0"];
    bb72__0_644 -> bb73__0_644 [label="otherwise"];
    bb73__0_644 -> bb88__0_644 [label=""];
    bb74__0_644 -> bb75__0_644 [label="return"];
    bb74__0_644 -> bb275__0_644 [label="unwind"];
    bb75__0_644 -> bb76__0_644 [label="return"];
    bb75__0_644 -> bb275__0_644 [label="unwind"];
    bb76__0_644 -> bb77__0_644 [label="return"];
    bb76__0_644 -> bb275__0_644 [label="unwind"];
    bb77__0_644 -> bb78__0_644 [label="return"];
    bb77__0_644 -> bb274__0_644 [label="unwind"];
    bb78__0_644 -> bb79__0_644 [label="return"];
    bb78__0_644 -> bb274__0_644 [label="unwind"];
    bb79__0_644 -> bb80__0_644 [label="return"];
    bb79__0_644 -> bb275__0_644 [label="unwind"];
    bb80__0_644 -> bb81__0_644 [label="return"];
    bb80__0_644 -> bb275__0_644 [label="unwind"];
    bb81__0_644 -> bb82__0_644 [label="return"];
    bb81__0_644 -> bb275__0_644 [label="unwind"];
    bb82__0_644 -> bb83__0_644 [label="return"];
    bb82__0_644 -> bb275__0_644 [label="unwind"];
    bb83__0_644 -> bb84__0_644 [label="return"];
    bb83__0_644 -> bb275__0_644 [label="unwind"];
    bb84__0_644 -> bb85__0_644 [label="return"];
    bb84__0_644 -> bb273__0_644 [label="unwind"];
    bb85__0_644 -> bb86__0_644 [label="return"];
    bb85__0_644 -> bb273__0_644 [label="unwind"];
    bb86__0_644 -> bb87__0_644 [label="return"];
    bb86__0_644 -> bb275__0_644 [label="unwind"];
    bb87__0_644 -> bb88__0_644 [label=""];
    bb88__0_644 -> bb89__0_644 [label="return"];
    bb88__0_644 -> bb275__0_644 [label="unwind"];
    bb89__0_644 -> bb90__0_644 [label="0"];
    bb89__0_644 -> bb91__0_644 [label="1"];
    bb89__0_644 -> bb13__0_644 [label="otherwise"];
    bb90__0_644 -> bb93__0_644 [label="return"];
    bb90__0_644 -> bb275__0_644 [label="unwind"];
    bb91__0_644 -> bb92__0_644 [label="return"];
    bb91__0_644 -> bb275__0_644 [label="unwind"];
    bb92__0_644 -> bb260__0_644 [label=""];
    bb93__0_644 -> bb94__0_644 [label="return"];
    bb93__0_644 -> bb275__0_644 [label="unwind"];
    bb94__0_644 -> bb95__0_644 [label="return"];
    bb94__0_644 -> bb275__0_644 [label="unwind"];
    bb95__0_644 -> bb96__0_644 [label="0"];
    bb95__0_644 -> bb97__0_644 [label="1"];
    bb95__0_644 -> bb13__0_644 [label="otherwise"];
    bb96__0_644 -> bb99__0_644 [label="return"];
    bb96__0_644 -> bb275__0_644 [label="unwind"];
    bb97__0_644 -> bb98__0_644 [label="return"];
    bb97__0_644 -> bb275__0_644 [label="unwind"];
    bb98__0_644 -> bb258__0_644 [label=""];
    bb99__0_644 -> bb100__0_644 [label="return"];
    bb99__0_644 -> bb275__0_644 [label="unwind"];
    bb100__0_644 -> bb101__0_644 [label="0"];
    bb100__0_644 -> bb102__0_644 [label="1"];
    bb100__0_644 -> bb13__0_644 [label="otherwise"];
    bb101__0_644 -> bb105__0_644 [label="0"];
    bb101__0_644 -> bb104__0_644 [label="otherwise"];
    bb102__0_644 -> bb103__0_644 [label="return"];
    bb102__0_644 -> bb275__0_644 [label="unwind"];
    bb103__0_644 -> bb258__0_644 [label=""];
    bb104__0_644 -> bb118__0_644 [label=""];
    bb105__0_644 -> bb106__0_644 [label="return"];
    bb105__0_644 -> bb275__0_644 [label="unwind"];
    bb106__0_644 -> bb107__0_644 [label="return"];
    bb106__0_644 -> bb275__0_644 [label="unwind"];
    bb107__0_644 -> bb108__0_644 [label="return"];
    bb107__0_644 -> bb275__0_644 [label="unwind"];
    bb108__0_644 -> bb109__0_644 [label="return"];
    bb108__0_644 -> bb272__0_644 [label="unwind"];
    bb109__0_644 -> bb110__0_644 [label="return"];
    bb109__0_644 -> bb272__0_644 [label="unwind"];
    bb110__0_644 -> bb111__0_644 [label="return"];
    bb110__0_644 -> bb275__0_644 [label="unwind"];
    bb111__0_644 -> bb112__0_644 [label="return"];
    bb111__0_644 -> bb275__0_644 [label="unwind"];
    bb112__0_644 -> bb113__0_644 [label="return"];
    bb112__0_644 -> bb275__0_644 [label="unwind"];
    bb113__0_644 -> bb114__0_644 [label="return"];
    bb113__0_644 -> bb275__0_644 [label="unwind"];
    bb114__0_644 -> bb115__0_644 [label="return"];
    bb114__0_644 -> bb271__0_644 [label="unwind"];
    bb115__0_644 -> bb116__0_644 [label="return"];
    bb115__0_644 -> bb271__0_644 [label="unwind"];
    bb116__0_644 -> bb117__0_644 [label="return"];
    bb116__0_644 -> bb275__0_644 [label="unwind"];
    bb117__0_644 -> bb118__0_644 [label=""];
    bb118__0_644 -> bb119__0_644 [label="return"];
    bb118__0_644 -> bb275__0_644 [label="unwind"];
    bb119__0_644 -> bb120__0_644 [label="0"];
    bb119__0_644 -> bb121__0_644 [label="1"];
    bb119__0_644 -> bb13__0_644 [label="otherwise"];
    bb120__0_644 -> bb123__0_644 [label="success"];
    bb120__0_644 -> bb275__0_644 [label="unwind"];
    bb121__0_644 -> bb122__0_644 [label="return"];
    bb121__0_644 -> bb275__0_644 [label="unwind"];
    bb122__0_644 -> bb259__0_644 [label=""];
    bb123__0_644 -> bb125__0_644 [label="0"];
    bb123__0_644 -> bb124__0_644 [label="otherwise"];
    bb124__0_644 -> bb133__0_644 [label=""];
    bb125__0_644 -> bb126__0_644 [label="return"];
    bb125__0_644 -> bb275__0_644 [label="unwind"];
    bb126__0_644 -> bb127__0_644 [label="return"];
    bb126__0_644 -> bb275__0_644 [label="unwind"];
    bb127__0_644 -> bb128__0_644 [label="return"];
    bb127__0_644 -> bb275__0_644 [label="unwind"];
    bb128__0_644 -> bb129__0_644 [label="return"];
    bb128__0_644 -> bb270__0_644 [label="unwind"];
    bb129__0_644 -> bb130__0_644 [label="return"];
    bb129__0_644 -> bb270__0_644 [label="unwind"];
    bb130__0_644 -> bb131__0_644 [label="return"];
    bb130__0_644 -> bb275__0_644 [label="unwind"];
    bb131__0_644 -> bb132__0_644 [label="return"];
    bb131__0_644 -> bb275__0_644 [label="unwind"];
    bb132__0_644 -> bb133__0_644 [label=""];
    bb133__0_644 -> bb134__0_644 [label="return"];
    bb133__0_644 -> bb275__0_644 [label="unwind"];
    bb134__0_644 -> bb135__0_644 [label="0"];
    bb134__0_644 -> bb136__0_644 [label="1"];
    bb134__0_644 -> bb13__0_644 [label="otherwise"];
    bb135__0_644 -> bb138__0_644 [label="success"];
    bb135__0_644 -> bb275__0_644 [label="unwind"];
    bb136__0_644 -> bb137__0_644 [label="return"];
    bb136__0_644 -> bb275__0_644 [label="unwind"];
    bb137__0_644 -> bb259__0_644 [label=""];
    bb138__0_644 -> bb139__0_644 [label="return"];
    bb138__0_644 -> bb275__0_644 [label="unwind"];
    bb139__0_644 -> bb140__0_644 [label="return"];
    bb139__0_644 -> bb275__0_644 [label="unwind"];
    bb140__0_644 -> bb141__0_644 [label="return"];
    bb140__0_644 -> bb275__0_644 [label="unwind"];
    bb141__0_644 -> bb142__0_644 [label="0"];
    bb141__0_644 -> bb143__0_644 [label="1"];
    bb141__0_644 -> bb13__0_644 [label="otherwise"];
    bb142__0_644 -> bb145__0_644 [label="success"];
    bb142__0_644 -> bb275__0_644 [label="unwind"];
    bb143__0_644 -> bb144__0_644 [label="return"];
    bb143__0_644 -> bb275__0_644 [label="unwind"];
    bb144__0_644 -> bb257__0_644 [label=""];
    bb145__0_644 -> bb146__0_644 [label="success"];
    bb145__0_644 -> bb275__0_644 [label="unwind"];
    bb146__0_644 -> bb147__0_644 [label="success"];
    bb146__0_644 -> bb275__0_644 [label="unwind"];
    bb147__0_644 -> bb148__0_644 [label="success"];
    bb147__0_644 -> bb275__0_644 [label="unwind"];
    bb148__0_644 -> bb149__0_644 [label="success"];
    bb148__0_644 -> bb275__0_644 [label="unwind"];
    bb149__0_644 -> bb150__0_644 [label="return"];
    bb149__0_644 -> bb275__0_644 [label="unwind"];
    bb150__0_644 -> bb151__0_644 [label="return"];
    bb150__0_644 -> bb275__0_644 [label="unwind"];
    bb151__0_644 -> bb152__0_644 [label="return"];
    bb151__0_644 -> bb275__0_644 [label="unwind"];
    bb152__0_644 -> bb153__0_644 [label="0"];
    bb152__0_644 -> bb154__0_644 [label="1"];
    bb152__0_644 -> bb13__0_644 [label="otherwise"];
    bb153__0_644 -> bb156__0_644 [label="success"];
    bb153__0_644 -> bb275__0_644 [label="unwind"];
    bb154__0_644 -> bb155__0_644 [label="return"];
    bb154__0_644 -> bb275__0_644 [label="unwind"];
    bb155__0_644 -> bb256__0_644 [label=""];
    bb156__0_644 -> bb157__0_644 [label="return"];
    bb156__0_644 -> bb275__0_644 [label="unwind"];
    bb157__0_644 -> bb158__0_644 [label="return"];
    bb157__0_644 -> bb275__0_644 [label="unwind"];
    bb158__0_644 -> bb159__0_644 [label="0"];
    bb158__0_644 -> bb160__0_644 [label="1"];
    bb158__0_644 -> bb13__0_644 [label="otherwise"];
    bb159__0_644 -> bb162__0_644 [label="success"];
    bb159__0_644 -> bb275__0_644 [label="unwind"];
    bb160__0_644 -> bb161__0_644 [label="return"];
    bb160__0_644 -> bb275__0_644 [label="unwind"];
    bb161__0_644 -> bb254__0_644 [label=""];
    bb162__0_644 -> bb163__0_644 [label="return"];
    bb162__0_644 -> bb275__0_644 [label="unwind"];
    bb163__0_644 -> bb164__0_644 [label="return"];
    bb163__0_644 -> bb275__0_644 [label="unwind"];
    bb164__0_644 -> bb165__0_644 [label="0"];
    bb164__0_644 -> bb166__0_644 [label="1"];
    bb164__0_644 -> bb13__0_644 [label="otherwise"];
    bb165__0_644 -> bb168__0_644 [label="success"];
    bb165__0_644 -> bb275__0_644 [label="unwind"];
    bb166__0_644 -> bb167__0_644 [label="return"];
    bb166__0_644 -> bb275__0_644 [label="unwind"];
    bb167__0_644 -> bb254__0_644 [label=""];
    bb168__0_644 -> bb169__0_644 [label="return"];
    bb168__0_644 -> bb275__0_644 [label="unwind"];
    bb169__0_644 -> bb170__0_644 [label="return"];
    bb169__0_644 -> bb275__0_644 [label="unwind"];
    bb170__0_644 -> bb171__0_644 [label="success"];
    bb170__0_644 -> bb275__0_644 [label="unwind"];
    bb171__0_644 -> bb172__0_644 [label="return"];
    bb171__0_644 -> bb275__0_644 [label="unwind"];
    bb172__0_644 -> bb173__0_644 [label="return"];
    bb172__0_644 -> bb275__0_644 [label="unwind"];
    bb173__0_644 -> bb174__0_644 [label="0"];
    bb173__0_644 -> bb175__0_644 [label="1"];
    bb173__0_644 -> bb13__0_644 [label="otherwise"];
    bb174__0_644 -> bb177__0_644 [label="success"];
    bb174__0_644 -> bb275__0_644 [label="unwind"];
    bb175__0_644 -> bb176__0_644 [label="return"];
    bb175__0_644 -> bb275__0_644 [label="unwind"];
    bb176__0_644 -> bb255__0_644 [label=""];
    bb177__0_644 -> bb178__0_644 [label="return"];
    bb177__0_644 -> bb275__0_644 [label="unwind"];
    bb178__0_644 -> bb179__0_644 [label="return"];
    bb178__0_644 -> bb275__0_644 [label="unwind"];
    bb179__0_644 -> bb180__0_644 [label="return"];
    bb179__0_644 -> bb275__0_644 [label="unwind"];
    bb180__0_644 -> bb181__0_644 [label="return"];
    bb180__0_644 -> bb275__0_644 [label="unwind"];
    bb181__0_644 -> bb182__0_644 [label="0"];
    bb181__0_644 -> bb183__0_644 [label="1"];
    bb181__0_644 -> bb13__0_644 [label="otherwise"];
    bb182__0_644 -> bb185__0_644 [label="return"];
    bb182__0_644 -> bb275__0_644 [label="unwind"];
    bb183__0_644 -> bb184__0_644 [label="return"];
    bb183__0_644 -> bb275__0_644 [label="unwind"];
    bb184__0_644 -> bb252__0_644 [label=""];
    bb185__0_644 -> bb186__0_644 [label="return"];
    bb185__0_644 -> bb275__0_644 [label="unwind"];
    bb186__0_644 -> bb187__0_644 [label="0"];
    bb186__0_644 -> bb188__0_644 [label="1"];
    bb186__0_644 -> bb13__0_644 [label="otherwise"];
    bb187__0_644 -> bb190__0_644 [label="success"];
    bb187__0_644 -> bb275__0_644 [label="unwind"];
    bb188__0_644 -> bb189__0_644 [label="return"];
    bb188__0_644 -> bb275__0_644 [label="unwind"];
    bb189__0_644 -> bb252__0_644 [label=""];
    bb190__0_644 -> bb191__0_644 [label="return"];
    bb190__0_644 -> bb275__0_644 [label="unwind"];
    bb191__0_644 -> bb192__0_644 [label="return"];
    bb191__0_644 -> bb275__0_644 [label="unwind"];
    bb192__0_644 -> bb193__0_644 [label="return"];
    bb192__0_644 -> bb275__0_644 [label="unwind"];
    bb193__0_644 -> bb194__0_644 [label="0"];
    bb193__0_644 -> bb195__0_644 [label="1"];
    bb193__0_644 -> bb13__0_644 [label="otherwise"];
    bb194__0_644 -> bb197__0_644 [label="success"];
    bb194__0_644 -> bb275__0_644 [label="unwind"];
    bb195__0_644 -> bb196__0_644 [label="return"];
    bb195__0_644 -> bb275__0_644 [label="unwind"];
    bb196__0_644 -> bb251__0_644 [label=""];
    bb197__0_644 -> bb198__0_644 [label="return"];
    bb197__0_644 -> bb275__0_644 [label="unwind"];
    bb198__0_644 -> bb199__0_644 [label="return"];
    bb198__0_644 -> bb275__0_644 [label="unwind"];
    bb199__0_644 -> bb200__0_644 [label="0"];
    bb199__0_644 -> bb201__0_644 [label="1"];
    bb199__0_644 -> bb13__0_644 [label="otherwise"];
    bb200__0_644 -> bb203__0_644 [label="return"];
    bb200__0_644 -> bb275__0_644 [label="unwind"];
    bb201__0_644 -> bb202__0_644 [label="return"];
    bb201__0_644 -> bb275__0_644 [label="unwind"];
    bb202__0_644 -> bb251__0_644 [label=""];
    bb203__0_644 -> bb204__0_644 [label="return"];
    bb203__0_644 -> bb275__0_644 [label="unwind"];
    bb204__0_644 -> bb205__0_644 [label="0"];
    bb204__0_644 -> bb206__0_644 [label="1"];
    bb204__0_644 -> bb13__0_644 [label="otherwise"];
    bb205__0_644 -> bb208__0_644 [label="return"];
    bb205__0_644 -> bb275__0_644 [label="unwind"];
    bb206__0_644 -> bb207__0_644 [label="return"];
    bb206__0_644 -> bb275__0_644 [label="unwind"];
    bb207__0_644 -> bb250__0_644 [label=""];
    bb208__0_644 -> bb209__0_644 [label="return"];
    bb208__0_644 -> bb275__0_644 [label="unwind"];
    bb209__0_644 -> bb210__0_644 [label="0"];
    bb209__0_644 -> bb211__0_644 [label="1"];
    bb209__0_644 -> bb13__0_644 [label="otherwise"];
    bb210__0_644 -> bb213__0_644 [label="return"];
    bb210__0_644 -> bb275__0_644 [label="unwind"];
    bb211__0_644 -> bb212__0_644 [label="return"];
    bb211__0_644 -> bb275__0_644 [label="unwind"];
    bb212__0_644 -> bb250__0_644 [label=""];
    bb213__0_644 -> bb214__0_644 [label="return"];
    bb213__0_644 -> bb275__0_644 [label="unwind"];
    bb214__0_644 -> bb215__0_644 [label="return"];
    bb214__0_644 -> bb275__0_644 [label="unwind"];
    bb215__0_644 -> bb216__0_644 [label="0"];
    bb215__0_644 -> bb217__0_644 [label="1"];
    bb215__0_644 -> bb13__0_644 [label="otherwise"];
    bb216__0_644 -> bb219__0_644 [label="return"];
    bb216__0_644 -> bb275__0_644 [label="unwind"];
    bb217__0_644 -> bb218__0_644 [label="return"];
    bb217__0_644 -> bb275__0_644 [label="unwind"];
    bb218__0_644 -> bb249__0_644 [label=""];
    bb219__0_644 -> bb220__0_644 [label="return"];
    bb219__0_644 -> bb275__0_644 [label="unwind"];
    bb220__0_644 -> bb221__0_644 [label="0"];
    bb220__0_644 -> bb222__0_644 [label="1"];
    bb220__0_644 -> bb13__0_644 [label="otherwise"];
    bb221__0_644 -> bb224__0_644 [label="return"];
    bb221__0_644 -> bb275__0_644 [label="unwind"];
    bb222__0_644 -> bb223__0_644 [label="return"];
    bb222__0_644 -> bb275__0_644 [label="unwind"];
    bb223__0_644 -> bb249__0_644 [label=""];
    bb224__0_644 -> bb225__0_644 [label="success"];
    bb224__0_644 -> bb275__0_644 [label="unwind"];
    bb225__0_644 -> bb226__0_644 [label="return"];
    bb225__0_644 -> bb275__0_644 [label="unwind"];
    bb226__0_644 -> bb227__0_644 [label="return"];
    bb226__0_644 -> bb275__0_644 [label="unwind"];
    bb227__0_644 -> bb228__0_644 [label="return"];
    bb227__0_644 -> bb269__0_644 [label="unwind"];
    bb228__0_644 -> bb229__0_644 [label="return"];
    bb228__0_644 -> bb269__0_644 [label="unwind"];
    bb229__0_644 -> bb230__0_644 [label="return"];
    bb229__0_644 -> bb275__0_644 [label="unwind"];
    bb230__0_644 -> bb231__0_644 [label="success"];
    bb230__0_644 -> bb275__0_644 [label="unwind"];
    bb231__0_644 -> bb232__0_644 [label="return"];
    bb231__0_644 -> bb275__0_644 [label="unwind"];
    bb232__0_644 -> bb234__0_644 [label="0"];
    bb232__0_644 -> bb233__0_644 [label="otherwise"];
    bb233__0_644 -> bb242__0_644 [label=""];
    bb234__0_644 -> bb235__0_644 [label="return"];
    bb234__0_644 -> bb275__0_644 [label="unwind"];
    bb235__0_644 -> bb236__0_644 [label="return"];
    bb235__0_644 -> bb275__0_644 [label="unwind"];
    bb236__0_644 -> bb237__0_644 [label="return"];
    bb236__0_644 -> bb275__0_644 [label="unwind"];
    bb237__0_644 -> bb238__0_644 [label="return"];
    bb237__0_644 -> bb268__0_644 [label="unwind"];
    bb238__0_644 -> bb239__0_644 [label="return"];
    bb238__0_644 -> bb268__0_644 [label="unwind"];
    bb239__0_644 -> bb240__0_644 [label="return"];
    bb239__0_644 -> bb275__0_644 [label="unwind"];
    bb240__0_644 -> bb241__0_644 [label="return"];
    bb240__0_644 -> bb275__0_644 [label="unwind"];
    bb241__0_644 -> bb242__0_644 [label=""];
    bb242__0_644 -> bb243__0_644 [label="return"];
    bb242__0_644 -> bb275__0_644 [label="unwind"];
    bb243__0_644 -> bb244__0_644 [label="0"];
    bb243__0_644 -> bb245__0_644 [label="1"];
    bb243__0_644 -> bb13__0_644 [label="otherwise"];
    bb244__0_644 -> bb247__0_644 [label="return"];
    bb244__0_644 -> bb276__0_644 [label="unwind"];
    bb245__0_644 -> bb246__0_644 [label="return"];
    bb245__0_644 -> bb275__0_644 [label="unwind"];
    bb246__0_644 -> bb253__0_644 [label=""];
    bb247__0_644 -> bb248__0_644 [label="return"];
    bb247__0_644 -> bb281__0_644 [label="unwind"];
    bb248__0_644 -> bb267__0_644 [label=""];
    bb249__0_644 -> bb253__0_644 [label=""];
    bb250__0_644 -> bb253__0_644 [label=""];
    bb251__0_644 -> bb253__0_644 [label=""];
    bb252__0_644 -> bb253__0_644 [label=""];
    bb253__0_644 -> bb255__0_644 [label=""];
    bb254__0_644 -> bb255__0_644 [label=""];
    bb255__0_644 -> bb256__0_644 [label=""];
    bb256__0_644 -> bb257__0_644 [label=""];
    bb257__0_644 -> bb259__0_644 [label=""];
    bb258__0_644 -> bb259__0_644 [label=""];
    bb259__0_644 -> bb260__0_644 [label=""];
    bb260__0_644 -> bb261__0_644 [label="return"];
    bb260__0_644 -> bb276__0_644 [label="unwind"];
    bb261__0_644 -> bb262__0_644 [label="return"];
    bb261__0_644 -> bb281__0_644 [label="unwind"];
    bb262__0_644 -> bb263__0_644 [label=""];
    bb263__0_644 -> bb265__0_644 [label=""];
    bb264__0_644 -> bb265__0_644 [label=""];
    bb265__0_644 -> bb267__0_644 [label=""];
    bb266__0_644 -> bb267__0_644 [label=""];
    bb268__0_644 -> bb275__0_644 [label="return"];
    bb269__0_644 -> bb275__0_644 [label="return"];
    bb270__0_644 -> bb275__0_644 [label="return"];
    bb271__0_644 -> bb275__0_644 [label="return"];
    bb272__0_644 -> bb275__0_644 [label="return"];
    bb273__0_644 -> bb275__0_644 [label="return"];
    bb274__0_644 -> bb275__0_644 [label="return"];
    bb275__0_644 -> bb276__0_644 [label="return"];
    bb276__0_644 -> bb281__0_644 [label="return"];
    bb277__0_644 -> bb281__0_644 [label="return"];
    bb278__0_644 -> bb287__0_644 [label="return"];
    bb279__0_644 -> bb281__0_644 [label="return"];
    bb280__0_644 -> bb281__0_644 [label="return"];
    bb282__0_644 -> bb46__0_644 [label="return"];
    bb283__0_644 -> bb265__0_644 [label=""];
    bb284__0_644 -> bb276__0_644 [label=""];
    bb285__0_644 -> bb281__0_644 [label=""];
    bb286__0_644 -> bb281__0_644 [label=""];
    bb287__0_644 -> bb281__0_644 [label=""];
    bb288__0_644 -> bb281__0_644 [label=""];
}
