// MIR for `update_order_after_fill` after PreCodegen

fn update_order_after_fill(_1: &mut Order, _2: u64, _3: u64) -> std::result::Result<(), error::ErrorCode> {
    debug order => _1;
    debug base_asset_amount => _2;
    debug quote_asset_amount => _3;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let mut _4: u64;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _6: std::result::Result<u64, error::ErrorCode>;
    let mut _7: u64;
    let mut _8: u64;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _13: u64;
    let mut _14: u64;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _16: std::result::Result<u64, error::ErrorCode>;
    let mut _17: u64;
    let mut _18: u64;
    let mut _19: isize;
    let _20: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _21: !;
    let mut _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _23: u64;
    let _24: ();
    let mut _25: bool;
    let mut _26: u64;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _28: std::result::Result<u64, error::ErrorCode>;
    let mut _29: &state::user::Order;
    let mut _30: std::option::Option<i64>;
    let mut _31: isize;
    let _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _35: u64;
    let mut _36: state::user::OrderStatus;
    let mut _37: ();
    scope 1 {
        debug residual => _10;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _13;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _20;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _23;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _32;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _35;
        scope 12 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = ((*_1).3: u64);
        StorageLive(_8);
        _8 = _2;
        _6 = <u64 as SafeMath>::safe_add(move _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageDead(_7);
        _5 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        _9 = discriminant(_5);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_5 as Continue).0: u64);
        _4 = _13;
        StorageDead(_13);
        ((*_1).3: u64) = move _4;
        StorageDead(_4);
        StorageDead(_5);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = ((*_1).4: u64);
        StorageLive(_18);
        _18 = _3;
        _16 = <u64 as SafeMath>::safe_add(move _17, move _18) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_12);
        _12 = _10;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _12) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_4);
        StorageDead(_5);
        goto -> bb20;
    }

    bb7: {
        StorageDead(_18);
        StorageDead(_17);
        _15 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _16) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_16);
        _19 = discriminant(_15);
        switchInt(move _19) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_23);
        _23 = ((_15 as Continue).0: u64);
        _14 = _23;
        StorageDead(_23);
        ((*_1).4: u64) = move _14;
        StorageDead(_14);
        StorageDead(_15);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = &(*_1);
        StorageLive(_30);
        _30 = Option::<i64>::None;
        _28 = Order::get_base_asset_amount_unfilled(move _29, move _30) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_20);
        _20 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_22);
        _22 = _20;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _22) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_14);
        StorageDead(_15);
        goto -> bb20;
    }

    bb12: {
        StorageDead(_30);
        StorageDead(_29);
        _27 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _28) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_28);
        _31 = discriminant(_27);
        switchInt(move _31) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_35);
        _35 = ((_27 as Continue).0: u64);
        _26 = _35;
        StorageDead(_35);
        _25 = Eq(move _26, const 0_u64);
        switchInt(move _25) -> [0: bb18, otherwise: bb17];
    }

    bb15: {
        StorageLive(_32);
        _32 = ((_27 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_34);
        _34 = _32;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _34) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_34);
        StorageDead(_32);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        goto -> bb20;
    }

    bb17: {
        StorageDead(_27);
        StorageDead(_26);
        StorageLive(_36);
        _36 = OrderStatus::Filled;
        ((*_1).12: state::user::OrderStatus) = move _36;
        StorageDead(_36);
        _24 = const ();
        goto -> bb19;
    }

    bb18: {
        StorageDead(_27);
        StorageDead(_26);
        _24 = const ();
        goto -> bb19;
    }

    bb19: {
        StorageDead(_25);
        StorageDead(_24);
        StorageLive(_37);
        _37 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _37);
        StorageDead(_37);
        goto -> bb20;
    }

    bb20: {
        return;
    }
}
