// MIR for `if_staker::<impl at programs/drift/src/instructions/if_staker.rs:906:10: 906:18>::try_accounts` before PreCodegen

fn if_staker::<impl at programs/drift/src/instructions/if_staker.rs:906:10: 906:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut RequestRemoveInsuranceFundStakeBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<if_staker::RequestRemoveInsuranceFundStake<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<instructions::if_staker::RequestRemoveInsuranceFundStake<'_>, anchor_lang::error::Error>;
    let mut _6: &[u8];
    let mut _8: <instructions::if_staker::RequestRemoveInsuranceFundStake<'info> as anchor_lang::Accounts<'info, instructions::if_staker::RequestRemoveInsuranceFundStakeBumps>>::try_accounts::__Args;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>, <instructions::if_staker::RequestRemoveInsuranceFundStake<'info> as anchor_lang::Accounts<'info, instructions::if_staker::RequestRemoveInsuranceFundStakeBumps>>::try_accounts::__Args>;
    let mut _10: std::result::Result<<instructions::if_staker::RequestRemoveInsuranceFundStake<'info> as anchor_lang::Accounts<'info, instructions::if_staker::RequestRemoveInsuranceFundStakeBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode>;
    let mut _11: std::result::Result<<instructions::if_staker::RequestRemoveInsuranceFundStake<'info> as anchor_lang::Accounts<'info, instructions::if_staker::RequestRemoveInsuranceFundStakeBumps>>::try_accounts::__Args, std::io::Error>;
    let mut _12: &mut &[u8];
    let mut _13: &mut &[u8];
    let mut _14: {closure@programs/drift/src/instructions/if_staker.rs:906:10: 906:18};
    let mut _15: isize;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>>;
    let mut _22: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _23: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _24: &anchor_lang::prelude::Pubkey;
    let mut _25: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _26: &[u8];
    let mut _27: &mut instructions::if_staker::RequestRemoveInsuranceFundStakeBumps;
    let mut _28: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _29: {closure@programs/drift/src/instructions/if_staker.rs:906:10: 906:18};
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>>;
    let mut _37: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>, anchor_lang::error::Error>;
    let mut _38: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>, anchor_lang::error::Error>;
    let mut _39: &anchor_lang::prelude::Pubkey;
    let mut _40: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _41: &[u8];
    let mut _42: &mut instructions::if_staker::RequestRemoveInsuranceFundStakeBumps;
    let mut _43: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _44: {closure@programs/drift/src/instructions/if_staker.rs:906:10: 906:18};
    let mut _45: isize;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>;
    let mut _52: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _53: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _54: &anchor_lang::prelude::Pubkey;
    let mut _55: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _56: &[u8];
    let mut _57: &mut instructions::if_staker::RequestRemoveInsuranceFundStakeBumps;
    let mut _58: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _59: {closure@programs/drift/src/instructions/if_staker.rs:906:10: 906:18};
    let mut _60: isize;
    let mut _62: !;
    let mut _63: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _67: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _68: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _69: &anchor_lang::prelude::Pubkey;
    let mut _70: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _71: &[u8];
    let mut _72: &mut instructions::if_staker::RequestRemoveInsuranceFundStakeBumps;
    let mut _73: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _74: {closure@programs/drift/src/instructions/if_staker.rs:906:10: 906:18};
    let mut _75: isize;
    let mut _77: !;
    let mut _78: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _81: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _82: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _83: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _84: &anchor_lang::prelude::Pubkey;
    let mut _85: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _86: &[u8];
    let mut _87: &mut instructions::if_staker::RequestRemoveInsuranceFundStakeBumps;
    let mut _88: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _89: {closure@programs/drift/src/instructions/if_staker.rs:906:10: 906:18};
    let mut _90: isize;
    let mut _92: !;
    let mut _93: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _97: (anchor_lang::prelude::Pubkey, u8);
    let mut _98: &[&[u8]];
    let mut _99: &[&[u8]; 2];
    let _100: &[&[u8]; 2];
    let _101: [&[u8]; 2];
    let mut _102: &[u8];
    let mut _103: &[u8; 11];
    let _104: &[u8; 11];
    let mut _105: &[u8];
    let _106: &[u8];
    let mut _107: &[u8; 2];
    let _108: [u8; 2];
    let mut _109: u16;
    let mut _110: &anchor_lang::prelude::Pubkey;
    let _111: &&anchor_lang::prelude::Pubkey;
    let mut _112: u8;
    let _113: ();
    let mut _114: bool;
    let mut _115: &anchor_lang::prelude::Pubkey;
    let _116: anchor_lang::prelude::Pubkey;
    let mut _117: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _118: &anchor_lang::prelude::Pubkey;
    let mut _119: !;
    let mut _120: anchor_lang::error::Error;
    let mut _121: anchor_lang::error::Error;
    let mut _122: anchor_lang::error::Error;
    let mut _123: anchor_lang::error::ErrorCode;
    let mut _124: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _125: anchor_lang::prelude::Pubkey;
    let mut _126: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _127: anchor_lang::prelude::Pubkey;
    let _128: ();
    let mut _129: bool;
    let mut _130: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _131: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let _132: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _133: !;
    let mut _134: anchor_lang::error::Error;
    let mut _135: anchor_lang::error::Error;
    let mut _136: anchor_lang::error::ErrorCode;
    let _137: ();
    let mut _138: bool;
    let mut _139: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _140: &anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let _141: &anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _142: !;
    let mut _143: anchor_lang::error::Error;
    let mut _144: anchor_lang::error::Error;
    let mut _145: anchor_lang::error::ErrorCode;
    let _146: ();
    let mut _148: &state::insurance_fund_stake::InsuranceFundStake;
    let mut _149: &std::cell::Ref<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let _150: std::cell::Ref<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _151: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::insurance_fund_stake::InsuranceFundStake>>;
    let mut _152: std::result::Result<std::cell::Ref<'_, state::insurance_fund_stake::InsuranceFundStake>, anchor_lang::error::Error>;
    let mut _153: &anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _154: isize;
    let mut _156: !;
    let mut _157: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _160: &anchor_lang::prelude::Signer<'_>;
    let mut _161: bool;
    let mut _162: &anchor_lang::prelude::Pubkey;
    let mut _163: &anchor_lang::prelude::Pubkey;
    let mut _164: !;
    let mut _165: anchor_lang::error::Error;
    let mut _166: anchor_lang::error::Error;
    let mut _167: anchor_lang::error::Error;
    let mut _168: anchor_lang::error::ErrorCode;
    let mut _169: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _170: anchor_lang::prelude::Pubkey;
    let mut _171: anchor_lang::prelude::Pubkey;
    let _172: ();
    let mut _173: bool;
    let mut _174: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _175: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let _176: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _177: !;
    let mut _178: anchor_lang::error::Error;
    let mut _179: anchor_lang::error::Error;
    let mut _180: anchor_lang::error::ErrorCode;
    let _181: ();
    let mut _183: &state::user::UserStats;
    let mut _184: &std::cell::Ref<'_, state::user::UserStats>;
    let _185: std::cell::Ref<'_, state::user::UserStats>;
    let mut _186: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::user::UserStats>>;
    let mut _187: std::result::Result<std::cell::Ref<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _188: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _189: isize;
    let mut _191: !;
    let mut _192: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _195: &anchor_lang::prelude::Signer<'_>;
    let mut _196: bool;
    let mut _197: &anchor_lang::prelude::Pubkey;
    let mut _198: &anchor_lang::prelude::Pubkey;
    let mut _199: !;
    let mut _200: anchor_lang::error::Error;
    let mut _201: anchor_lang::error::Error;
    let mut _202: anchor_lang::error::Error;
    let mut _203: anchor_lang::error::ErrorCode;
    let mut _204: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _205: anchor_lang::prelude::Pubkey;
    let mut _206: anchor_lang::prelude::Pubkey;
    let mut _209: (anchor_lang::prelude::Pubkey, u8);
    let mut _210: &[&[u8]];
    let mut _211: &[&[u8]; 2];
    let _212: &[&[u8]; 2];
    let _213: [&[u8]; 2];
    let mut _214: &[u8];
    let _215: &[u8];
    let mut _216: &[u8; 20];
    let _217: &[u8; 20];
    let mut _218: &[u8];
    let _219: &[u8];
    let mut _220: &[u8; 2];
    let _221: [u8; 2];
    let mut _222: u16;
    let mut _223: &anchor_lang::prelude::Pubkey;
    let _224: &&anchor_lang::prelude::Pubkey;
    let mut _225: u8;
    let _226: ();
    let mut _227: bool;
    let mut _228: &anchor_lang::prelude::Pubkey;
    let _229: anchor_lang::prelude::Pubkey;
    let mut _230: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _231: &anchor_lang::prelude::Pubkey;
    let mut _232: !;
    let mut _233: anchor_lang::error::Error;
    let mut _234: anchor_lang::error::Error;
    let mut _235: anchor_lang::error::Error;
    let mut _236: anchor_lang::error::ErrorCode;
    let mut _237: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _238: anchor_lang::prelude::Pubkey;
    let mut _239: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _240: anchor_lang::prelude::Pubkey;
    let _241: ();
    let mut _242: bool;
    let mut _243: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _244: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _245: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _246: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _247: !;
    let mut _248: anchor_lang::error::Error;
    let mut _249: anchor_lang::error::Error;
    let mut _250: anchor_lang::error::ErrorCode;
    let mut _251: instructions::if_staker::RequestRemoveInsuranceFundStake<'_>;
    let mut _252: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _253: anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _254: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _255: anchor_lang::prelude::Signer<'_>;
    let mut _256: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _257: &anchor_lang::prelude::Pubkey;
    let mut _258: &anchor_lang::prelude::Pubkey;
    let mut _259: bool;
    let mut _260: bool;
    let mut _261: bool;
    let mut _262: bool;
    let mut _263: bool;
    let mut _264: bool;
    let mut _265: isize;
    let mut _266: isize;
    let mut _267: isize;
    let mut _268: isize;
    let mut _269: isize;
    let mut _270: isize;
    let mut _271: isize;
    let mut _272: isize;
    let mut _273: isize;
    let mut _274: isize;
    let mut _275: isize;
    let mut _276: isize;
    let mut _277: isize;
    let mut _278: isize;
    let mut _279: isize;
    let mut _280: isize;
    let mut _281: isize;
    let mut _282: isize;
    let mut _283: isize;
    let mut _284: isize;
    let mut _285: isize;
    let mut _286: isize;
    let mut _287: isize;
    let mut _288: isize;
    let mut _289: isize;
    let mut _290: isize;
    let mut _291: isize;
    let mut _292: isize;
    let mut _293: isize;
    let mut _294: isize;
    let mut _295: isize;
    let mut _296: isize;
    let mut _297: isize;
    let mut _298: isize;
    let mut _299: isize;
    let mut _300: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _301: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug __ix_data => _6;
        let _7: u16;
        let _16: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
        let _19: <instructions::if_staker::RequestRemoveInsuranceFundStake<'info> as anchor_lang::Accounts<'info, instructions::if_staker::RequestRemoveInsuranceFundStakeBumps>>::try_accounts::__Args;
        scope 2 {
            debug market_index => _7;
            let _20: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
            let _31: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _34: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
            scope 7 {
                debug spot_market => _20;
                let _35: anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>;
                let _46: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _49: anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>;
                scope 12 {
                    debug insurance_fund_stake => _35;
                    let _50: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
                    let _61: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _64: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
                    scope 17 {
                        debug user_stats => _50;
                        let _65: anchor_lang::prelude::Signer<'_>;
                        let _76: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _79: anchor_lang::prelude::Signer<'_>;
                        scope 22 {
                            debug authority => _65;
                            let _80: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                            let _91: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _94: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                            scope 27 {
                                debug insurance_fund_vault => _80;
                                let _95: anchor_lang::prelude::Pubkey;
                                let _96: u8;
                                scope 32 {
                                    debug __pda_address => _95;
                                    debug __bump => _96;
                                    let _147: anchor_lang::prelude::Pubkey;
                                    let _155: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                    let _158: std::cell::Ref<'_, state::insurance_fund_stake::InsuranceFundStake>;
                                    let _182: anchor_lang::prelude::Pubkey;
                                    let _190: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                    let _193: std::cell::Ref<'_, state::user::UserStats>;
                                    let _207: anchor_lang::prelude::Pubkey;
                                    let _208: u8;
                                    scope 33 {
                                        debug my_key => _147;
                                        let _159: anchor_lang::prelude::Pubkey;
                                        scope 38 {
                                            debug target_key => _159;
                                        }
                                    }
                                    scope 34 {
                                        debug residual => _155;
                                        scope 35 {
                                        }
                                    }
                                    scope 36 {
                                        debug val => _158;
                                        scope 37 {
                                        }
                                    }
                                    scope 39 {
                                        debug my_key => _182;
                                        let _194: anchor_lang::prelude::Pubkey;
                                        scope 44 {
                                            debug target_key => _194;
                                        }
                                    }
                                    scope 40 {
                                        debug residual => _190;
                                        scope 41 {
                                        }
                                    }
                                    scope 42 {
                                        debug val => _193;
                                        scope 43 {
                                        }
                                    }
                                    scope 45 {
                                        debug __pda_address => _207;
                                        debug __bump => _208;
                                    }
                                }
                            }
                            scope 28 {
                                debug residual => _91;
                                scope 29 {
                                }
                            }
                            scope 30 {
                                debug val => _94;
                                scope 31 {
                                }
                            }
                        }
                        scope 23 {
                            debug residual => _76;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _79;
                            scope 26 {
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _61;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _64;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _46;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _49;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _31;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _34;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _16;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _19;
            scope 6 {
            }
        }
    }

    bb0: {
        _264 = const false;
        _259 = const false;
        _263 = const false;
        _262 = const false;
        _261 = const false;
        _260 = const false;
        StorageLive(_6);
        _6 = _3;
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &mut _6;
        _12 = &mut (*_13);
        _11 = <<if_staker::RequestRemoveInsuranceFundStake<'info> as anchor_lang::Accounts<'info, RequestRemoveInsuranceFundStakeBumps>>::try_accounts::__Args as BorshDeserialize>::deserialize(move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_12);
        StorageLive(_14);
        _14 = {closure@programs/drift/src/instructions/if_staker.rs:906:10: 906:18};
        _10 = std::result::Result::<<if_staker::RequestRemoveInsuranceFundStake<'info> as anchor_lang::Accounts<'info, RequestRemoveInsuranceFundStakeBumps>>::try_accounts::__Args, std::io::Error>::map_err::<anchor_lang::error::ErrorCode, {closure@programs/drift/src/instructions/if_staker.rs:906:10: 906:18}>(move _11, move _14) -> [return: bb2, unwind: bb122];
    }

    bb2: {
        StorageDead(_14);
        StorageDead(_11);
        _9 = <std::result::Result<<if_staker::RequestRemoveInsuranceFundStake<'info> as anchor_lang::Accounts<'info, RequestRemoveInsuranceFundStakeBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode> as Try>::branch(move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_10);
        _15 = discriminant(_9);
        switchInt(move _15) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_19);
        _19 = move ((_9 as Continue).0: <instructions::if_staker::RequestRemoveInsuranceFundStake<'info> as anchor_lang::Accounts<'info, instructions::if_staker::RequestRemoveInsuranceFundStakeBumps>>::try_accounts::__Args);
        _8 = move _19;
        StorageDead(_19);
        StorageLive(_7);
        _7 = (_8.0: u16);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &(*_1);
        StorageLive(_25);
        _25 = &mut (*_2);
        StorageLive(_26);
        _26 = &(*_6);
        StorageLive(_27);
        _27 = &mut (*_4);
        StorageLive(_28);
        _28 = &mut (*_5);
        _23 = <anchor_lang::prelude::AccountLoader<'_, SpotMarket> as anchor_lang::Accounts<'_, RequestRemoveInsuranceFundStakeBumps>>::try_accounts(move _24, move _25, move _26, move _27, move _28) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_16);
        _16 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>);
        StorageLive(_18);
        _18 = _16;
        _0 = <std::result::Result<if_staker::RequestRemoveInsuranceFundStake<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::ErrorCode>>>::from_residual(move _18) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb117;
    }

    bb8: {
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageLive(_29);
        _29 = {closure@programs/drift/src/instructions/if_staker.rs:906:10: 906:18};
        _22 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, SpotMarket>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/if_staker.rs:906:10: 906:18}>(move _23, move _29) -> [return: bb9, unwind: bb122];
    }

    bb9: {
        StorageDead(_29);
        StorageDead(_23);
        _21 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, SpotMarket>, anchor_lang::error::Error> as Try>::branch(move _22) -> [return: bb10, unwind: bb122];
    }

    bb10: {
        StorageDead(_22);
        _30 = discriminant(_21);
        switchInt(move _30) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_34);
        _34 = move ((_21 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _20 = move _34;
        StorageDead(_34);
        _265 = discriminant(_21);
        StorageDead(_21);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &(*_1);
        StorageLive(_40);
        _40 = &mut (*_2);
        StorageLive(_41);
        _41 = &(*_6);
        StorageLive(_42);
        _42 = &mut (*_4);
        StorageLive(_43);
        _43 = &mut (*_5);
        _38 = <anchor_lang::prelude::AccountLoader<'_, InsuranceFundStake> as anchor_lang::Accounts<'_, RequestRemoveInsuranceFundStakeBumps>>::try_accounts(move _39, move _40, move _41, move _42, move _43) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_31);
        _31 = move ((_21 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_33);
        _33 = move _31;
        _0 = <std::result::Result<if_staker::RequestRemoveInsuranceFundStake<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _33) -> [return: bb13, unwind: bb135];
    }

    bb13: {
        StorageDead(_33);
        StorageDead(_31);
        _291 = discriminant(_21);
        StorageDead(_21);
        goto -> bb116;
    }

    bb14: {
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        StorageLive(_44);
        _44 = {closure@programs/drift/src/instructions/if_staker.rs:906:10: 906:18};
        _37 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, InsuranceFundStake>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/if_staker.rs:906:10: 906:18}>(move _38, move _44) -> [return: bb15, unwind: bb122];
    }

    bb15: {
        StorageDead(_44);
        StorageDead(_38);
        _36 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, InsuranceFundStake>, anchor_lang::error::Error> as Try>::branch(move _37) -> [return: bb16, unwind: bb122];
    }

    bb16: {
        StorageDead(_37);
        _45 = discriminant(_36);
        switchInt(move _45) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_49);
        _49 = move ((_36 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>);
        _35 = move _49;
        StorageDead(_49);
        _267 = discriminant(_36);
        StorageDead(_36);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &(*_1);
        StorageLive(_55);
        _55 = &mut (*_2);
        StorageLive(_56);
        _56 = &(*_6);
        StorageLive(_57);
        _57 = &mut (*_4);
        StorageLive(_58);
        _58 = &mut (*_5);
        _53 = <anchor_lang::prelude::AccountLoader<'_, UserStats> as anchor_lang::Accounts<'_, RequestRemoveInsuranceFundStakeBumps>>::try_accounts(move _54, move _55, move _56, move _57, move _58) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_46);
        _46 = move ((_36 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_48);
        _48 = move _46;
        _0 = <std::result::Result<if_staker::RequestRemoveInsuranceFundStake<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _48) -> [return: bb19, unwind: bb134];
    }

    bb19: {
        StorageDead(_48);
        StorageDead(_46);
        _289 = discriminant(_36);
        StorageDead(_36);
        goto -> bb115;
    }

    bb20: {
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_54);
        StorageLive(_59);
        _59 = {closure@programs/drift/src/instructions/if_staker.rs:906:10: 906:18};
        _52 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, UserStats>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/if_staker.rs:906:10: 906:18}>(move _53, move _59) -> [return: bb21, unwind: bb122];
    }

    bb21: {
        StorageDead(_59);
        StorageDead(_53);
        _51 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, UserStats>, anchor_lang::error::Error> as Try>::branch(move _52) -> [return: bb22, unwind: bb122];
    }

    bb22: {
        StorageDead(_52);
        _60 = discriminant(_51);
        switchInt(move _60) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_64);
        _64 = move ((_51 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _50 = move _64;
        StorageDead(_64);
        _269 = discriminant(_51);
        StorageDead(_51);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &(*_1);
        StorageLive(_70);
        _70 = &mut (*_2);
        StorageLive(_71);
        _71 = &(*_6);
        StorageLive(_72);
        _72 = &mut (*_4);
        StorageLive(_73);
        _73 = &mut (*_5);
        _68 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, RequestRemoveInsuranceFundStakeBumps>>::try_accounts(move _69, move _70, move _71, move _72, move _73) -> [return: bb26, unwind continue];
    }

    bb24: {
        StorageLive(_61);
        _61 = move ((_51 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_63);
        _63 = move _61;
        _0 = <std::result::Result<if_staker::RequestRemoveInsuranceFundStake<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _63) -> [return: bb25, unwind: bb133];
    }

    bb25: {
        StorageDead(_63);
        StorageDead(_61);
        _287 = discriminant(_51);
        StorageDead(_51);
        goto -> bb114;
    }

    bb26: {
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_74);
        _74 = {closure@programs/drift/src/instructions/if_staker.rs:906:10: 906:18};
        _67 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/if_staker.rs:906:10: 906:18}>(move _68, move _74) -> [return: bb27, unwind: bb122];
    }

    bb27: {
        StorageDead(_74);
        StorageDead(_68);
        _66 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _67) -> [return: bb28, unwind: bb122];
    }

    bb28: {
        StorageDead(_67);
        _75 = discriminant(_66);
        switchInt(move _75) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_79);
        _79 = move ((_66 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _65 = move _79;
        StorageDead(_79);
        _271 = discriminant(_66);
        StorageDead(_66);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = &(*_1);
        StorageLive(_85);
        _85 = &mut (*_2);
        StorageLive(_86);
        _86 = &(*_6);
        StorageLive(_87);
        _87 = &mut (*_4);
        StorageLive(_88);
        _88 = &mut (*_5);
        _83 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, RequestRemoveInsuranceFundStakeBumps>>::try_accounts(move _84, move _85, move _86, move _87, move _88) -> [return: bb32, unwind continue];
    }

    bb30: {
        StorageLive(_76);
        _76 = move ((_66 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_78);
        _78 = move _76;
        _0 = <std::result::Result<if_staker::RequestRemoveInsuranceFundStake<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _78) -> [return: bb31, unwind: bb132];
    }

    bb31: {
        StorageDead(_78);
        StorageDead(_76);
        _285 = discriminant(_66);
        StorageDead(_66);
        goto -> bb113;
    }

    bb32: {
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_84);
        StorageLive(_89);
        _89 = {closure@programs/drift/src/instructions/if_staker.rs:906:10: 906:18};
        _82 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/if_staker.rs:906:10: 906:18}>(move _83, move _89) -> [return: bb33, unwind: bb122];
    }

    bb33: {
        StorageDead(_89);
        StorageDead(_83);
        _81 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _82) -> [return: bb34, unwind: bb122];
    }

    bb34: {
        StorageDead(_82);
        _90 = discriminant(_81);
        switchInt(move _90) -> [0: bb35, 1: bb36, otherwise: bb5];
    }

    bb35: {
        StorageLive(_94);
        _94 = move ((_81 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _80 = move _94;
        StorageDead(_94);
        _273 = discriminant(_81);
        StorageDead(_81);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _104 = const b"spot_market";
        _103 = &(*_104);
        _102 = move _103 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_103);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        _109 = _7;
        _108 = core::num::<impl u16>::to_le_bytes(move _109) -> [return: bb38, unwind: bb121];
    }

    bb36: {
        StorageLive(_91);
        _91 = move ((_81 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_93);
        _93 = move _91;
        _0 = <std::result::Result<if_staker::RequestRemoveInsuranceFundStake<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _93) -> [return: bb37, unwind: bb131];
    }

    bb37: {
        StorageDead(_93);
        StorageDead(_91);
        _283 = discriminant(_81);
        StorageDead(_81);
        goto -> bb112;
    }

    bb38: {
        _107 = &_108;
        StorageDead(_109);
        _106 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _107) -> [return: bb39, unwind: bb121];
    }

    bb39: {
        _105 = &(*_106);
        StorageDead(_107);
        _101 = [move _102, move _105];
        StorageDead(_105);
        StorageDead(_102);
        _100 = &_101;
        _99 = &(*_100);
        _98 = move _99 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_99);
        StorageLive(_110);
        StorageLive(_111);
        _111 = &_1;
        _257 = deref_copy (*_111);
        _110 = &(*_257);
        _97 = anchor_lang::prelude::Pubkey::find_program_address(move _98, move _110) -> [return: bb40, unwind: bb121];
    }

    bb40: {
        StorageDead(_110);
        StorageDead(_98);
        StorageLive(_95);
        _95 = (_97.0: anchor_lang::prelude::Pubkey);
        StorageLive(_96);
        _96 = (_97.1: u8);
        StorageDead(_111);
        StorageDead(_108);
        StorageDead(_106);
        StorageDead(_104);
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_97);
        StorageLive(_112);
        _112 = _96;
        ((*_4).0: u8) = move _112;
        StorageDead(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _117 = &_20;
        _116 = <anchor_lang::prelude::AccountLoader<'_, SpotMarket> as anchor_lang::Key>::key(move _117) -> [return: bb41, unwind: bb121];
    }

    bb41: {
        _115 = &_116;
        StorageDead(_117);
        StorageLive(_118);
        _118 = &_95;
        _114 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _115, move _118) -> [return: bb42, unwind: bb121];
    }

    bb42: {
        switchInt(move _114) -> [0: bb48, otherwise: bb43];
    }

    bb43: {
        StorageDead(_118);
        StorageDead(_116);
        StorageDead(_115);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _123 = ConstraintSeeds;
        _122 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _123) -> [return: bb44, unwind: bb121];
    }

    bb44: {
        StorageDead(_123);
        _121 = anchor_lang::error::Error::with_account_name::<&str>(move _122, const "spot_market") -> [return: bb45, unwind: bb121];
    }

    bb45: {
        _264 = const true;
        StorageDead(_122);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        _126 = &_20;
        _125 = <anchor_lang::prelude::AccountLoader<'_, SpotMarket> as anchor_lang::Key>::key(move _126) -> [return: bb46, unwind: bb130];
    }

    bb46: {
        StorageDead(_126);
        StorageLive(_127);
        _127 = _95;
        _124 = (move _125, move _127);
        StorageDead(_127);
        StorageDead(_125);
        _264 = const false;
        _120 = anchor_lang::error::Error::with_pubkeys(move _121, move _124) -> [return: bb47, unwind: bb130];
    }

    bb47: {
        StorageDead(_124);
        _264 = const false;
        StorageDead(_121);
        _0 = std::result::Result::<if_staker::RequestRemoveInsuranceFundStake<'_>, anchor_lang::error::Error>::Err(move _120);
        StorageDead(_120);
        StorageDead(_114);
        StorageDead(_113);
        goto -> bb111;
    }

    bb48: {
        StorageDead(_118);
        StorageDead(_116);
        StorageDead(_115);
        _113 = const ();
        StorageDead(_114);
        StorageDead(_113);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        _132 = &_20;
        _131 = &(*_132);
        _130 = <anchor_lang::prelude::AccountLoader<'_, SpotMarket> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _131) -> [return: bb49, unwind: bb121];
    }

    bb49: {
        StorageDead(_131);
        _129 = ((*_130).6: bool);
        switchInt(move _129) -> [0: bb50, otherwise: bb53];
    }

    bb50: {
        StorageDead(_132);
        StorageDead(_130);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        _136 = ConstraintMut;
        _135 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _136) -> [return: bb51, unwind: bb121];
    }

    bb51: {
        StorageDead(_136);
        _134 = anchor_lang::error::Error::with_account_name::<&str>(move _135, const "spot_market") -> [return: bb52, unwind: bb121];
    }

    bb52: {
        StorageDead(_135);
        _0 = std::result::Result::<if_staker::RequestRemoveInsuranceFundStake<'_>, anchor_lang::error::Error>::Err(move _134);
        StorageDead(_134);
        StorageDead(_129);
        StorageDead(_128);
        goto -> bb111;
    }

    bb53: {
        StorageDead(_132);
        StorageDead(_130);
        _128 = const ();
        StorageDead(_129);
        StorageDead(_128);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        _141 = &_35;
        _140 = &(*_141);
        _139 = <anchor_lang::prelude::AccountLoader<'_, InsuranceFundStake> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _140) -> [return: bb54, unwind: bb121];
    }

    bb54: {
        StorageDead(_140);
        _138 = ((*_139).6: bool);
        switchInt(move _138) -> [0: bb55, otherwise: bb58];
    }

    bb55: {
        StorageDead(_141);
        StorageDead(_139);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        _145 = ConstraintMut;
        _144 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _145) -> [return: bb56, unwind: bb121];
    }

    bb56: {
        StorageDead(_145);
        _143 = anchor_lang::error::Error::with_account_name::<&str>(move _144, const "insurance_fund_stake") -> [return: bb57, unwind: bb121];
    }

    bb57: {
        StorageDead(_144);
        _0 = std::result::Result::<if_staker::RequestRemoveInsuranceFundStake<'_>, anchor_lang::error::Error>::Err(move _143);
        StorageDead(_143);
        StorageDead(_138);
        StorageDead(_137);
        goto -> bb111;
    }

    bb58: {
        StorageDead(_141);
        StorageDead(_139);
        _137 = const ();
        StorageDead(_138);
        StorageDead(_137);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        _153 = &_35;
        _152 = anchor_lang::prelude::AccountLoader::<'_, InsuranceFundStake>::load(move _153) -> [return: bb59, unwind: bb121];
    }

    bb59: {
        StorageDead(_153);
        _151 = <std::result::Result<Ref<'_, InsuranceFundStake>, anchor_lang::error::Error> as Try>::branch(move _152) -> [return: bb60, unwind: bb121];
    }

    bb60: {
        _262 = const true;
        _263 = const true;
        StorageDead(_152);
        _154 = discriminant(_151);
        switchInt(move _154) -> [0: bb61, 1: bb62, otherwise: bb5];
    }

    bb61: {
        StorageLive(_158);
        _158 = move ((_151 as Continue).0: std::cell::Ref<'_, state::insurance_fund_stake::InsuranceFundStake>);
        _150 = move _158;
        StorageDead(_158);
        _149 = &_150;
        _148 = <Ref<'_, InsuranceFundStake> as Deref>::deref(move _149) -> [return: bb64, unwind: bb120];
    }

    bb62: {
        StorageLive(_155);
        _155 = move ((_151 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_157);
        _157 = move _155;
        _0 = <std::result::Result<if_staker::RequestRemoveInsuranceFundStake<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _157) -> [return: bb63, unwind: bb128];
    }

    bb63: {
        StorageDead(_157);
        StorageDead(_155);
        StorageDead(_149);
        _281 = discriminant(_151);
        _262 = const false;
        _263 = const false;
        StorageDead(_151);
        StorageDead(_150);
        StorageDead(_148);
        goto -> bb110;
    }

    bb64: {
        StorageDead(_149);
        _147 = ((*_148).0: anchor_lang::prelude::Pubkey);
        drop(_150) -> [return: bb123, unwind: bb128];
    }

    bb65: {
        StorageDead(_160);
        StorageLive(_161);
        StorageLive(_162);
        _162 = &_147;
        StorageLive(_163);
        _163 = &_159;
        _161 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _162, move _163) -> [return: bb66, unwind: bb121];
    }

    bb66: {
        switchInt(move _161) -> [0: bb71, otherwise: bb67];
    }

    bb67: {
        StorageDead(_163);
        StorageDead(_162);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        _168 = ConstraintHasOne;
        _167 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _168) -> [return: bb68, unwind: bb121];
    }

    bb68: {
        StorageDead(_168);
        _166 = anchor_lang::error::Error::with_account_name::<&str>(move _167, const "insurance_fund_stake") -> [return: bb69, unwind: bb121];
    }

    bb69: {
        StorageDead(_167);
        StorageLive(_169);
        StorageLive(_170);
        _170 = _147;
        StorageLive(_171);
        _171 = _159;
        _169 = (move _170, move _171);
        StorageDead(_171);
        StorageDead(_170);
        _165 = anchor_lang::error::Error::with_pubkeys(move _166, move _169) -> [return: bb70, unwind: bb121];
    }

    bb70: {
        StorageDead(_169);
        StorageDead(_166);
        _0 = std::result::Result::<if_staker::RequestRemoveInsuranceFundStake<'_>, anchor_lang::error::Error>::Err(move _165);
        StorageDead(_165);
        StorageDead(_161);
        StorageDead(_159);
        goto -> bb110;
    }

    bb71: {
        StorageDead(_163);
        StorageDead(_162);
        _146 = const ();
        StorageDead(_161);
        StorageDead(_159);
        StorageDead(_147);
        StorageDead(_146);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        _176 = &_50;
        _175 = &(*_176);
        _174 = <anchor_lang::prelude::AccountLoader<'_, UserStats> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _175) -> [return: bb72, unwind: bb121];
    }

    bb72: {
        StorageDead(_175);
        _173 = ((*_174).6: bool);
        switchInt(move _173) -> [0: bb73, otherwise: bb76];
    }

    bb73: {
        StorageDead(_176);
        StorageDead(_174);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        _180 = ConstraintMut;
        _179 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _180) -> [return: bb74, unwind: bb121];
    }

    bb74: {
        StorageDead(_180);
        _178 = anchor_lang::error::Error::with_account_name::<&str>(move _179, const "user_stats") -> [return: bb75, unwind: bb121];
    }

    bb75: {
        StorageDead(_179);
        _0 = std::result::Result::<if_staker::RequestRemoveInsuranceFundStake<'_>, anchor_lang::error::Error>::Err(move _178);
        StorageDead(_178);
        StorageDead(_173);
        StorageDead(_172);
        goto -> bb111;
    }

    bb76: {
        StorageDead(_176);
        StorageDead(_174);
        _172 = const ();
        StorageDead(_173);
        StorageDead(_172);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        _188 = &_50;
        _187 = anchor_lang::prelude::AccountLoader::<'_, UserStats>::load(move _188) -> [return: bb77, unwind: bb121];
    }

    bb77: {
        StorageDead(_188);
        _186 = <std::result::Result<Ref<'_, UserStats>, anchor_lang::error::Error> as Try>::branch(move _187) -> [return: bb78, unwind: bb121];
    }

    bb78: {
        _260 = const true;
        _261 = const true;
        StorageDead(_187);
        _189 = discriminant(_186);
        switchInt(move _189) -> [0: bb79, 1: bb80, otherwise: bb5];
    }

    bb79: {
        StorageLive(_193);
        _193 = move ((_186 as Continue).0: std::cell::Ref<'_, state::user::UserStats>);
        _185 = move _193;
        StorageDead(_193);
        _184 = &_185;
        _183 = <Ref<'_, UserStats> as Deref>::deref(move _184) -> [return: bb82, unwind: bb119];
    }

    bb80: {
        StorageLive(_190);
        _190 = move ((_186 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_192);
        _192 = move _190;
        _0 = <std::result::Result<if_staker::RequestRemoveInsuranceFundStake<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _192) -> [return: bb81, unwind: bb127];
    }

    bb81: {
        StorageDead(_192);
        StorageDead(_190);
        StorageDead(_184);
        _279 = discriminant(_186);
        _260 = const false;
        _261 = const false;
        StorageDead(_186);
        StorageDead(_185);
        StorageDead(_183);
        goto -> bb109;
    }

    bb82: {
        StorageDead(_184);
        _182 = ((*_183).0: anchor_lang::prelude::Pubkey);
        drop(_185) -> [return: bb124, unwind: bb127];
    }

    bb83: {
        StorageDead(_195);
        StorageLive(_196);
        StorageLive(_197);
        _197 = &_182;
        StorageLive(_198);
        _198 = &_194;
        _196 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _197, move _198) -> [return: bb84, unwind: bb121];
    }

    bb84: {
        switchInt(move _196) -> [0: bb89, otherwise: bb85];
    }

    bb85: {
        StorageDead(_198);
        StorageDead(_197);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        _203 = ConstraintHasOne;
        _202 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _203) -> [return: bb86, unwind: bb121];
    }

    bb86: {
        StorageDead(_203);
        _201 = anchor_lang::error::Error::with_account_name::<&str>(move _202, const "user_stats") -> [return: bb87, unwind: bb121];
    }

    bb87: {
        StorageDead(_202);
        StorageLive(_204);
        StorageLive(_205);
        _205 = _182;
        StorageLive(_206);
        _206 = _194;
        _204 = (move _205, move _206);
        StorageDead(_206);
        StorageDead(_205);
        _200 = anchor_lang::error::Error::with_pubkeys(move _201, move _204) -> [return: bb88, unwind: bb121];
    }

    bb88: {
        StorageDead(_204);
        StorageDead(_201);
        _0 = std::result::Result::<if_staker::RequestRemoveInsuranceFundStake<'_>, anchor_lang::error::Error>::Err(move _200);
        StorageDead(_200);
        StorageDead(_196);
        StorageDead(_194);
        goto -> bb109;
    }

    bb89: {
        StorageDead(_198);
        StorageDead(_197);
        _181 = const ();
        StorageDead(_196);
        StorageDead(_194);
        StorageDead(_182);
        StorageDead(_181);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        _217 = const b"insurance_fund_vault";
        _216 = &(*_217);
        _215 = <[u8; 20] as AsRef<[u8]>>::as_ref(move _216) -> [return: bb90, unwind: bb121];
    }

    bb90: {
        _214 = &(*_215);
        StorageDead(_216);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        _222 = _7;
        _221 = core::num::<impl u16>::to_le_bytes(move _222) -> [return: bb91, unwind: bb121];
    }

    bb91: {
        _220 = &_221;
        StorageDead(_222);
        _219 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _220) -> [return: bb92, unwind: bb121];
    }

    bb92: {
        _218 = &(*_219);
        StorageDead(_220);
        _213 = [move _214, move _218];
        StorageDead(_218);
        StorageDead(_214);
        _212 = &_213;
        _211 = &(*_212);
        _210 = move _211 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_211);
        StorageLive(_223);
        StorageLive(_224);
        _224 = &_1;
        _258 = deref_copy (*_224);
        _223 = &(*_258);
        _209 = anchor_lang::prelude::Pubkey::find_program_address(move _210, move _223) -> [return: bb93, unwind: bb121];
    }

    bb93: {
        StorageDead(_223);
        StorageDead(_210);
        StorageLive(_207);
        _207 = (_209.0: anchor_lang::prelude::Pubkey);
        StorageLive(_208);
        _208 = (_209.1: u8);
        StorageDead(_224);
        StorageDead(_221);
        StorageDead(_219);
        StorageDead(_217);
        StorageDead(_215);
        StorageDead(_213);
        StorageDead(_212);
        StorageDead(_209);
        StorageLive(_225);
        _225 = _208;
        ((*_4).1: u8) = move _225;
        StorageDead(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        _300 = (((_80.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _230 = &(*_300);
        _229 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _230) -> [return: bb94, unwind: bb121];
    }

    bb94: {
        _228 = &_229;
        StorageDead(_230);
        StorageLive(_231);
        _231 = &_207;
        _227 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _228, move _231) -> [return: bb95, unwind: bb121];
    }

    bb95: {
        switchInt(move _227) -> [0: bb101, otherwise: bb96];
    }

    bb96: {
        StorageDead(_231);
        StorageDead(_229);
        StorageDead(_228);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        _236 = ConstraintSeeds;
        _235 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _236) -> [return: bb97, unwind: bb121];
    }

    bb97: {
        StorageDead(_236);
        _234 = anchor_lang::error::Error::with_account_name::<&str>(move _235, const "insurance_fund_vault") -> [return: bb98, unwind: bb121];
    }

    bb98: {
        _259 = const true;
        StorageDead(_235);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        _301 = (((_80.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _239 = &(*_301);
        _238 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _239) -> [return: bb99, unwind: bb126];
    }

    bb99: {
        StorageDead(_239);
        StorageLive(_240);
        _240 = _207;
        _237 = (move _238, move _240);
        StorageDead(_240);
        StorageDead(_238);
        _259 = const false;
        _233 = anchor_lang::error::Error::with_pubkeys(move _234, move _237) -> [return: bb100, unwind: bb126];
    }

    bb100: {
        StorageDead(_237);
        _259 = const false;
        StorageDead(_234);
        _0 = std::result::Result::<if_staker::RequestRemoveInsuranceFundStake<'_>, anchor_lang::error::Error>::Err(move _233);
        StorageDead(_233);
        StorageDead(_227);
        StorageDead(_226);
        goto -> bb108;
    }

    bb101: {
        StorageDead(_231);
        StorageDead(_229);
        StorageDead(_228);
        _226 = const ();
        StorageDead(_227);
        StorageDead(_226);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        _246 = &_80;
        _245 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _246) -> [return: bb102, unwind: bb121];
    }

    bb102: {
        _244 = &(*_245);
        StorageDead(_246);
        _243 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _244) -> [return: bb103, unwind: bb121];
    }

    bb103: {
        StorageDead(_244);
        _242 = ((*_243).6: bool);
        switchInt(move _242) -> [0: bb104, otherwise: bb107];
    }

    bb104: {
        StorageDead(_245);
        StorageDead(_243);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        _250 = ConstraintMut;
        _249 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _250) -> [return: bb105, unwind: bb121];
    }

    bb105: {
        StorageDead(_250);
        _248 = anchor_lang::error::Error::with_account_name::<&str>(move _249, const "insurance_fund_vault") -> [return: bb106, unwind: bb121];
    }

    bb106: {
        StorageDead(_249);
        _0 = std::result::Result::<if_staker::RequestRemoveInsuranceFundStake<'_>, anchor_lang::error::Error>::Err(move _248);
        StorageDead(_248);
        StorageDead(_242);
        StorageDead(_241);
        goto -> bb108;
    }

    bb107: {
        StorageDead(_245);
        StorageDead(_243);
        _241 = const ();
        StorageDead(_242);
        StorageDead(_241);
        StorageLive(_251);
        StorageLive(_252);
        _252 = move _20;
        StorageLive(_253);
        _253 = move _35;
        StorageLive(_254);
        _254 = move _50;
        StorageLive(_255);
        _255 = move _65;
        StorageLive(_256);
        _256 = move _80;
        _251 = if_staker::RequestRemoveInsuranceFundStake::<'_> { spot_market: move _252, insurance_fund_stake: move _253, user_stats: move _254, authority: move _255, insurance_fund_vault: move _256 };
        StorageDead(_256);
        StorageDead(_255);
        StorageDead(_254);
        StorageDead(_253);
        StorageDead(_252);
        _0 = std::result::Result::<if_staker::RequestRemoveInsuranceFundStake<'_>, anchor_lang::error::Error>::Ok(move _251);
        StorageDead(_251);
        StorageDead(_208);
        StorageDead(_207);
        StorageDead(_96);
        StorageDead(_95);
        StorageDead(_80);
        StorageDead(_65);
        StorageDead(_50);
        StorageDead(_35);
        StorageDead(_20);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb118;
    }

    bb108: {
        StorageDead(_208);
        StorageDead(_207);
        goto -> bb111;
    }

    bb109: {
        StorageDead(_182);
        StorageDead(_181);
        goto -> bb111;
    }

    bb110: {
        StorageDead(_147);
        StorageDead(_146);
        goto -> bb111;
    }

    bb111: {
        StorageDead(_96);
        StorageDead(_95);
        drop(_80) -> [return: bb112, unwind: bb122];
    }

    bb112: {
        StorageDead(_80);
        goto -> bb113;
    }

    bb113: {
        StorageDead(_65);
        goto -> bb114;
    }

    bb114: {
        StorageDead(_50);
        goto -> bb115;
    }

    bb115: {
        StorageDead(_35);
        goto -> bb116;
    }

    bb116: {
        StorageDead(_20);
        StorageDead(_7);
        goto -> bb117;
    }

    bb117: {
        StorageDead(_6);
        goto -> bb118;
    }

    bb118: {
        return;
    }

    bb119 (cleanup): {
        drop(_185) -> [return: bb127, unwind terminate(cleanup)];
    }

    bb120 (cleanup): {
        drop(_150) -> [return: bb128, unwind terminate(cleanup)];
    }

    bb121 (cleanup): {
        drop(_80) -> [return: bb122, unwind terminate(cleanup)];
    }

    bb122 (cleanup): {
        resume;
    }

    bb123: {
        _275 = discriminant(_151);
        _262 = const false;
        _263 = const false;
        StorageDead(_151);
        StorageDead(_150);
        StorageDead(_148);
        StorageLive(_159);
        StorageLive(_160);
        _160 = &_65;
        _159 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _160) -> [return: bb65, unwind: bb121];
    }

    bb124: {
        _277 = discriminant(_186);
        _260 = const false;
        _261 = const false;
        StorageDead(_186);
        StorageDead(_185);
        StorageDead(_183);
        StorageLive(_194);
        StorageLive(_195);
        _195 = &_65;
        _194 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _195) -> [return: bb83, unwind: bb121];
    }

    bb125 (cleanup): {
        drop(_234) -> [return: bb121, unwind terminate(cleanup)];
    }

    bb126 (cleanup): {
        switchInt(_259) -> [0: bb121, otherwise: bb125];
    }

    bb127 (cleanup): {
        _293 = discriminant(_186);
        goto -> bb121;
    }

    bb128 (cleanup): {
        _294 = discriminant(_151);
        goto -> bb121;
    }

    bb129 (cleanup): {
        drop(_121) -> [return: bb121, unwind terminate(cleanup)];
    }

    bb130 (cleanup): {
        switchInt(_264) -> [0: bb121, otherwise: bb129];
    }

    bb131 (cleanup): {
        _295 = discriminant(_81);
        goto -> bb122;
    }

    bb132 (cleanup): {
        _296 = discriminant(_66);
        goto -> bb122;
    }

    bb133 (cleanup): {
        _297 = discriminant(_51);
        goto -> bb122;
    }

    bb134 (cleanup): {
        _298 = discriminant(_36);
        goto -> bb122;
    }

    bb135 (cleanup): {
        _299 = discriminant(_21);
        goto -> bb122;
    }
}

alloc256 (size: 20, align: 1) {
    0x00 │ 69 6e 73 75 72 61 6e 63 65 5f 66 75 6e 64 5f 76 │ insurance_fund_v
    0x10 │ 61 75 6c 74                                     │ ault
}

alloc255 (size: 11, align: 1) {
    73 70 6f 74 5f 6d 61 72 6b 65 74                │ spot_market
}
