// MIR for `margin_calculation::<impl at programs/drift/src/state/margin_calculation.rs:16:23: 16:28>::fmt` after PreCodegen

fn margin_calculation::<impl at programs/drift/src/state/margin_calculation.rs:16:23: 16:28>::fmt(_1: &MarginCalculationMode, _2: &mut Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &bool;
    let mut _5: &mut std::fmt::Formatter<'_>;
    let mut _6: &str;
    let _7: &str;
    let mut _8: &str;
    let _9: &str;
    let mut _10: &dyn std::fmt::Debug;
    let mut _11: &&bool;
    let _12: &&bool;
    let _13: &std::option::Option<state::margin_calculation::MarketIdentifier>;
    let mut _14: &mut std::fmt::Formatter<'_>;
    let mut _15: &str;
    let _16: &str;
    let mut _17: &str;
    let _18: &str;
    let mut _19: &dyn std::fmt::Debug;
    let mut _20: &&std::option::Option<state::margin_calculation::MarketIdentifier>;
    let _21: &&std::option::Option<state::margin_calculation::MarketIdentifier>;
    scope 1 {
        debug __self_0 => _4;
    }
    scope 2 {
        debug __self_0 => _13;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        StorageLive(_13);
        _13 = &(((*_1) as Liquidation).0: std::option::Option<state::margin_calculation::MarketIdentifier>);
        StorageLive(_14);
        _14 = &mut (*_2);
        StorageLive(_15);
        StorageLive(_16);
        _16 = const "Liquidation";
        _15 = &(*_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = const "market_to_track_margin_requirement";
        _17 = &(*_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &_13;
        _20 = &(*_21);
        _19 = move _20 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        StorageDead(_20);
        _0 = Formatter::<'_>::debug_struct_field1_finish(move _14, move _15, move _17, move _19) -> [return: bb5, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        StorageLive(_4);
        _4 = &(((*_1) as Standard).0: bool);
        StorageLive(_5);
        _5 = &mut (*_2);
        StorageLive(_6);
        StorageLive(_7);
        _7 = const "Standard";
        _6 = &(*_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = const "track_open_orders_fraction";
        _8 = &(*_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &_4;
        _11 = &(*_12);
        _10 = move _11 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        StorageDead(_11);
        _0 = Formatter::<'_>::debug_struct_field1_finish(move _5, move _6, move _8, move _10) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb6;
    }

    bb5: {
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb6;
    }

    bb6: {
        return;
    }
}
