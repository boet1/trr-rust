// MIR for `calculate_maker_rebate` before PreCodegen

fn calculate_maker_rebate(_1: u64, _2: &state::state::FeeTier, _3: i16) -> std::result::Result<u64, error::ErrorCode> {
    debug quote_asset_amount => _1;
    debug fee_tier => _2;
    debug fee_adjustment => _3;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let mut _4: u64;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _6: std::result::Result<u64, error::ErrorCode>;
    let mut _7: u128;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _9: std::result::Result<u128, error::ErrorCode>;
    let mut _10: u128;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _12: std::result::Result<u128, error::ErrorCode>;
    let mut _13: u128;
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _15: std::result::Result<u128, error::ErrorCode>;
    let mut _16: u64;
    let mut _17: isize;
    let _18: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _21: u128;
    let mut _22: u128;
    let mut _23: u32;
    let mut _24: isize;
    let _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _26: !;
    let mut _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _28: u128;
    let mut _29: u128;
    let mut _30: u32;
    let mut _31: isize;
    let _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _35: u128;
    let mut _36: isize;
    let _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _38: !;
    let mut _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _40: u64;
    let _41: ();
    let mut _42: bool;
    let mut _43: i16;
    let mut _44: u64;
    let mut _45: u64;
    let mut _46: u64;
    let mut _47: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _48: std::result::Result<u64, error::ErrorCode>;
    let mut _49: u64;
    let mut _50: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _51: std::result::Result<u64, error::ErrorCode>;
    let mut _52: u64;
    let mut _53: u64;
    let mut _54: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _55: std::result::Result<u64, error::ErrorCode>;
    let mut _56: u16;
    let mut _57: i16;
    let mut _58: isize;
    let mut _60: !;
    let mut _61: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _63: isize;
    let mut _65: !;
    let mut _66: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _68: isize;
    let mut _70: !;
    let mut _71: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _73: bool;
    let mut _74: i16;
    let mut _75: u64;
    let mut _76: u64;
    let mut _77: u64;
    let mut _78: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _79: std::result::Result<u64, error::ErrorCode>;
    let mut _80: u64;
    let mut _81: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _82: std::result::Result<u64, error::ErrorCode>;
    let mut _83: u64;
    let mut _84: u64;
    let mut _85: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _86: std::result::Result<u64, error::ErrorCode>;
    let mut _87: i16;
    let mut _88: isize;
    let mut _90: !;
    let mut _91: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _93: isize;
    let mut _95: !;
    let mut _96: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _98: isize;
    let mut _100: !;
    let mut _101: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _103: u64;
    scope 1 {
        debug maker_fee => _4;
        let _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _62: u64;
        let _64: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _67: u64;
        let _69: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _72: u64;
        let _89: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _92: u64;
        let _94: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _97: u64;
        let _99: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _102: u64;
        scope 18 {
            debug residual => _59;
            scope 19 {
            }
        }
        scope 20 {
            debug val => _62;
            scope 21 {
            }
        }
        scope 22 {
            debug residual => _64;
            scope 23 {
            }
        }
        scope 24 {
            debug val => _67;
            scope 25 {
            }
        }
        scope 26 {
            debug residual => _69;
            scope 27 {
            }
        }
        scope 28 {
            debug val => _72;
            scope 29 {
            }
        }
        scope 30 {
            debug residual => _89;
            scope 31 {
            }
        }
        scope 32 {
            debug val => _92;
            scope 33 {
            }
        }
        scope 34 {
            debug residual => _94;
            scope 35 {
            }
        }
        scope 36 {
            debug val => _97;
            scope 37 {
            }
        }
        scope 38 {
            debug residual => _99;
            scope 39 {
            }
        }
        scope 40 {
            debug val => _102;
            scope 41 {
            }
        }
    }
    scope 2 {
        debug residual => _18;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _21;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _25;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _28;
        scope 9 {
        }
    }
    scope 10 {
        debug residual => _32;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _35;
        scope 13 {
        }
    }
    scope 14 {
        debug residual => _37;
        scope 15 {
        }
    }
    scope 16 {
        debug val => _40;
        scope 17 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = _1;
        _15 = <u64 as Cast>::cast::<u128>(move _16) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_16);
        _14 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _15) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_15);
        _17 = discriminant(_14);
        switchInt(move _17) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_21);
        _21 = ((_14 as Continue).0: u128);
        _13 = _21;
        StorageDead(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = ((*_2).2: u32);
        _22 = move _23 as u128 (IntToInt);
        StorageDead(_23);
        _12 = <u128 as SafeMath>::safe_mul(move _13, move _22) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_18);
        _18 = ((_14 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_20);
        _20 = _18;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _20) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb66;
    }

    bb7: {
        StorageDead(_22);
        StorageDead(_13);
        _11 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _12) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_12);
        _24 = discriminant(_11);
        switchInt(move _24) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_28);
        _28 = ((_11 as Continue).0: u128);
        _10 = _28;
        StorageDead(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = ((*_2).3: u32);
        _29 = move _30 as u128 (IntToInt);
        StorageDead(_30);
        _9 = <u128 as SafeMath>::safe_div(move _10, move _29) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_25);
        _25 = ((_11 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_27);
        _27 = _25;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _27) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_27);
        StorageDead(_25);
        goto -> bb66;
    }

    bb12: {
        StorageDead(_29);
        StorageDead(_10);
        _8 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _9) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_9);
        _31 = discriminant(_8);
        switchInt(move _31) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_35);
        _35 = ((_8 as Continue).0: u128);
        _7 = _35;
        StorageDead(_35);
        _6 = <u128 as Cast>::cast::<u64>(move _7) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_32);
        _32 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_34);
        _34 = _32;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _34) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_34);
        StorageDead(_32);
        goto -> bb67;
    }

    bb17: {
        StorageDead(_7);
        _5 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _6) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_6);
        _36 = discriminant(_5);
        switchInt(move _36) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_40);
        _40 = ((_5 as Continue).0: u64);
        _4 = _40;
        StorageDead(_40);
        StorageDead(_14);
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_5);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = _3;
        _42 = Lt(move _43, const 0_i16);
        switchInt(move _42) -> [0: bb23, otherwise: bb22];
    }

    bb20: {
        StorageLive(_37);
        _37 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_39);
        _39 = _37;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _39) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_39);
        StorageDead(_37);
        goto -> bb68;
    }

    bb22: {
        StorageDead(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = _4;
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = _4;
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = _3;
        _56 = core::num::<impl i16>::unsigned_abs(move _57) -> [return: bb24, unwind continue];
    }

    bb23: {
        StorageDead(_43);
        StorageLive(_73);
        StorageLive(_74);
        _74 = _3;
        _73 = Gt(move _74, const 0_i16);
        switchInt(move _73) -> [0: bb42, otherwise: bb41];
    }

    bb24: {
        StorageDead(_57);
        _55 = <u16 as Cast>::cast::<u64>(move _56) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_56);
        _54 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _55) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_55);
        _58 = discriminant(_54);
        switchInt(move _58) -> [0: bb27, 1: bb28, otherwise: bb4];
    }

    bb27: {
        StorageLive(_62);
        _62 = ((_54 as Continue).0: u64);
        _53 = _62;
        StorageDead(_62);
        _51 = <u64 as SafeMath>::safe_mul(move _52, move _53) -> [return: bb30, unwind continue];
    }

    bb28: {
        StorageLive(_59);
        _59 = ((_54 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_61);
        _61 = _59;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _61) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_51);
        goto -> bb63;
    }

    bb30: {
        StorageDead(_53);
        StorageDead(_52);
        _50 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _51) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_51);
        _63 = discriminant(_50);
        switchInt(move _63) -> [0: bb32, 1: bb33, otherwise: bb4];
    }

    bb32: {
        StorageLive(_67);
        _67 = ((_50 as Continue).0: u64);
        _49 = _67;
        StorageDead(_67);
        _48 = <u64 as SafeMath>::safe_div_ceil(move _49, const _) -> [return: bb35, unwind continue];
    }

    bb33: {
        StorageLive(_64);
        _64 = ((_50 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_66);
        _66 = _64;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _66) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_66);
        StorageDead(_64);
        goto -> bb63;
    }

    bb35: {
        StorageDead(_49);
        _47 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _48) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_48);
        _68 = discriminant(_47);
        switchInt(move _68) -> [0: bb37, 1: bb38, otherwise: bb4];
    }

    bb37: {
        StorageLive(_72);
        _72 = ((_47 as Continue).0: u64);
        _46 = _72;
        StorageDead(_72);
        _44 = core::num::<impl u64>::saturating_sub(move _45, move _46) -> [return: bb40, unwind continue];
    }

    bb38: {
        StorageLive(_69);
        _69 = ((_47 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_71);
        _71 = _69;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _71) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_71);
        StorageDead(_69);
        goto -> bb64;
    }

    bb40: {
        StorageDead(_46);
        StorageDead(_45);
        _4 = move _44;
        StorageDead(_44);
        StorageDead(_54);
        StorageDead(_50);
        StorageDead(_47);
        _41 = const ();
        goto -> bb60;
    }

    bb41: {
        StorageDead(_74);
        StorageLive(_75);
        StorageLive(_76);
        _76 = _4;
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _83 = _4;
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _87 = _3;
        _86 = <i16 as Cast>::cast::<u64>(move _87) -> [return: bb43, unwind continue];
    }

    bb42: {
        StorageDead(_74);
        _41 = const ();
        goto -> bb59;
    }

    bb43: {
        StorageDead(_87);
        _85 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _86) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_86);
        _88 = discriminant(_85);
        switchInt(move _88) -> [0: bb45, 1: bb46, otherwise: bb4];
    }

    bb45: {
        StorageLive(_92);
        _92 = ((_85 as Continue).0: u64);
        _84 = _92;
        StorageDead(_92);
        _82 = <u64 as SafeMath>::safe_mul(move _83, move _84) -> [return: bb48, unwind continue];
    }

    bb46: {
        StorageLive(_89);
        _89 = ((_85 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_91);
        _91 = _89;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _91) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_91);
        StorageDead(_89);
        StorageDead(_84);
        StorageDead(_83);
        StorageDead(_82);
        goto -> bb61;
    }

    bb48: {
        StorageDead(_84);
        StorageDead(_83);
        _81 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _82) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_82);
        _93 = discriminant(_81);
        switchInt(move _93) -> [0: bb50, 1: bb51, otherwise: bb4];
    }

    bb50: {
        StorageLive(_97);
        _97 = ((_81 as Continue).0: u64);
        _80 = _97;
        StorageDead(_97);
        _79 = <u64 as SafeMath>::safe_div(move _80, const _) -> [return: bb53, unwind continue];
    }

    bb51: {
        StorageLive(_94);
        _94 = ((_81 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_96);
        _96 = _94;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _96) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_96);
        StorageDead(_94);
        goto -> bb61;
    }

    bb53: {
        StorageDead(_80);
        _78 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _79) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_79);
        _98 = discriminant(_78);
        switchInt(move _98) -> [0: bb55, 1: bb56, otherwise: bb4];
    }

    bb55: {
        StorageLive(_102);
        _102 = ((_78 as Continue).0: u64);
        _77 = _102;
        StorageDead(_102);
        _75 = core::num::<impl u64>::saturating_add(move _76, move _77) -> [return: bb58, unwind continue];
    }

    bb56: {
        StorageLive(_99);
        _99 = ((_78 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_101);
        _101 = _99;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _101) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_101);
        StorageDead(_99);
        goto -> bb62;
    }

    bb58: {
        StorageDead(_77);
        StorageDead(_76);
        _4 = move _75;
        StorageDead(_75);
        StorageDead(_85);
        StorageDead(_81);
        StorageDead(_78);
        _41 = const ();
        goto -> bb59;
    }

    bb59: {
        StorageDead(_73);
        goto -> bb60;
    }

    bb60: {
        StorageDead(_42);
        StorageDead(_41);
        StorageLive(_103);
        _103 = _4;
        _0 = std::result::Result::<u64, error::ErrorCode>::Ok(move _103);
        StorageDead(_103);
        StorageDead(_4);
        goto -> bb70;
    }

    bb61: {
        StorageDead(_80);
        StorageDead(_79);
        goto -> bb62;
    }

    bb62: {
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_75);
        StorageDead(_85);
        StorageDead(_81);
        StorageDead(_78);
        StorageDead(_73);
        goto -> bb65;
    }

    bb63: {
        StorageDead(_49);
        StorageDead(_48);
        goto -> bb64;
    }

    bb64: {
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_54);
        StorageDead(_50);
        StorageDead(_47);
        goto -> bb65;
    }

    bb65: {
        StorageDead(_42);
        StorageDead(_41);
        goto -> bb69;
    }

    bb66: {
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb67;
    }

    bb67: {
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb68;
    }

    bb68: {
        StorageDead(_14);
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_5);
        goto -> bb69;
    }

    bb69: {
        StorageDead(_4);
        goto -> bb70;
    }

    bb70: {
        return;
    }
}
