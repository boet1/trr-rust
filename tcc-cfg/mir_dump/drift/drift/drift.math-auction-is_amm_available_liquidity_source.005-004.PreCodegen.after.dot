digraph Mir_0_1909 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn is_amm_available_liquidity_source(_1: &amp;ReErased state::user::Order, _2: u8, _3: u64, _4: state::fill_mode::FillMode) -&gt; std::result::Result&lt;bool, error::ErrorCode&gt;<br align="left"/>let _5: ();<br align="left"/>let mut _6: bool;<br align="left"/>let mut _7: &amp;ReErased state::fill_mode::FillMode;<br align="left"/>let mut _8: !;<br align="left"/>let _9: ();<br align="left"/>let mut _10: bool;<br align="left"/>let mut _11: &amp;ReErased state::user::Order;<br align="left"/>let mut _12: state::user::OrderBitFlag;<br align="left"/>let mut _13: !;<br align="left"/>let _14: ();<br align="left"/>let mut _15: bool;<br align="left"/>let mut _16: &amp;ReErased state::user::Order;<br align="left"/>let mut _17: !;<br align="left"/>let _18: u8;<br align="left"/>let mut _19: u64;<br align="left"/>let mut _20: bool;<br align="left"/>let mut _21: u8;<br align="left"/>let mut _22: u8;<br align="left"/>let mut _23: u8;<br align="left"/>let mut _24: u8;<br align="left"/>let mut _25: bool;<br align="left"/>let mut _26: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _27: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _28: u64;<br align="left"/>let mut _29: u8;<br align="left"/>let mut _30: u64;<br align="left"/>let mut _31: isize;<br align="left"/>let _32: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _33: !;<br align="left"/>let mut _34: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _35: bool;<br align="left"/>debug order =&gt; _1;<br align="left"/>debug min_auction_duration =&gt; _2;<br align="left"/>debug slot =&gt; _3;<br align="left"/>debug fill_mode =&gt; _4;<br align="left"/>debug clock_slot_tail =&gt; _18;<br align="left"/>debug residual =&gt; _32;<br align="left"/>debug val =&gt; _35;<br align="left"/>>;
    bb0__0_1909 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>_7 = &amp;_4<br/></td></tr><tr><td align="left">_6 = FillMode::is_liquidation(move _7)</td></tr></table>>];
    bb1__0_1909 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">switchInt(move _6)</td></tr></table>>];
    bb2__0_1909 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>_0 = std::result::Result::&lt;bool, error::ErrorCode&gt;::Ok(const true)<br/>StorageDead(_6)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb3__0_1909 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>_5 = const ()<br/>StorageDead(_6)<br/>StorageDead(_5)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>_11 = &amp;(*_1)<br/>StorageLive(_12)<br/>_12 = OrderBitFlag::SafeTriggerOrder<br/></td></tr><tr><td align="left">_10 = Order::is_bit_flag_set(move _11, move _12)</td></tr></table>>];
    bb4__0_1909 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">switchInt(move _10)</td></tr></table>>];
    bb5__0_1909 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_11)<br/>_0 = std::result::Result::&lt;bool, error::ErrorCode&gt;::Ok(const true)<br/>StorageDead(_10)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb6__0_1909 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_11)<br/>_9 = const ()<br/>StorageDead(_10)<br/>StorageDead(_9)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>_16 = &amp;(*_1)<br/></td></tr><tr><td align="left">_15 = Order::is_signed_msg(move _16)</td></tr></table>>];
    bb7__0_1909 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left">switchInt(move _15)</td></tr></table>>];
    bb8__0_1909 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>_19 = _3<br/></td></tr><tr><td align="left">_18 = math::orders::get_posted_slot_from_clock_slot(move _19)</td></tr></table>>];
    bb9__0_1909 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>_22 = _18<br/>StorageLive(_23)<br/>_23 = ((*_1).23: u8)<br/></td></tr><tr><td align="left">_21 = core::num::&lt;impl u8&gt;::wrapping_sub(move _22, move _23)</td></tr></table>>];
    bb10__0_1909 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageDead(_22)<br/>StorageLive(_24)<br/>_24 = _2<br/>_20 = Ge(move _21, move _24)<br/>StorageDead(_24)<br/>StorageDead(_21)<br/>_0 = std::result::Result::&lt;bool, error::ErrorCode&gt;::Ok(move _20)<br/>StorageDead(_20)<br/>StorageDead(_18)<br/>StorageDead(_15)<br/>StorageDead(_14)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb11__0_1909 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>_14 = const ()<br/>StorageDead(_15)<br/>StorageDead(_14)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>_28 = ((*_1).0: u64)<br/>StorageLive(_29)<br/>_29 = _2<br/>StorageLive(_30)<br/>_30 = _3<br/></td></tr><tr><td align="left">_27 = is_auction_complete(move _28, move _29, move _30)</td></tr></table>>];
    bb12__0_1909 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>StorageDead(_29)<br/>StorageDead(_28)<br/></td></tr><tr><td align="left">_26 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _27)</td></tr></table>>];
    bb13__0_1909 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>_31 = discriminant(_26)<br/></td></tr><tr><td align="left">switchInt(move _31)</td></tr></table>>];
    bb14__0_1909 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageLive(_35)<br/>_35 = ((_26 as Continue).0: bool)<br/>_25 = _35<br/>StorageDead(_35)<br/>_0 = std::result::Result::&lt;bool, error::ErrorCode&gt;::Ok(move _25)<br/>StorageDead(_25)<br/>StorageDead(_26)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_1909 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb16__0_1909 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageLive(_32)<br/>_32 = ((_26 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_34)<br/>_34 = _32<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _34)</td></tr></table>>];
    bb17__0_1909 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>StorageDead(_32)<br/>StorageDead(_25)<br/>StorageDead(_26)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_1909 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_1909 -> bb1__0_1909 [label="return"];
    bb1__0_1909 -> bb3__0_1909 [label="0"];
    bb1__0_1909 -> bb2__0_1909 [label="otherwise"];
    bb2__0_1909 -> bb18__0_1909 [label=""];
    bb3__0_1909 -> bb4__0_1909 [label="return"];
    bb4__0_1909 -> bb6__0_1909 [label="0"];
    bb4__0_1909 -> bb5__0_1909 [label="otherwise"];
    bb5__0_1909 -> bb18__0_1909 [label=""];
    bb6__0_1909 -> bb7__0_1909 [label="return"];
    bb7__0_1909 -> bb11__0_1909 [label="0"];
    bb7__0_1909 -> bb8__0_1909 [label="otherwise"];
    bb8__0_1909 -> bb9__0_1909 [label="return"];
    bb9__0_1909 -> bb10__0_1909 [label="return"];
    bb10__0_1909 -> bb18__0_1909 [label=""];
    bb11__0_1909 -> bb12__0_1909 [label="return"];
    bb12__0_1909 -> bb13__0_1909 [label="return"];
    bb13__0_1909 -> bb14__0_1909 [label="0"];
    bb13__0_1909 -> bb16__0_1909 [label="1"];
    bb13__0_1909 -> bb15__0_1909 [label="otherwise"];
    bb14__0_1909 -> bb18__0_1909 [label=""];
    bb16__0_1909 -> bb17__0_1909 [label="return"];
    bb17__0_1909 -> bb18__0_1909 [label=""];
}
