// MIR for `math::orders::select_margin_type_for_perp_maker` before PreCodegen

fn math::orders::select_margin_type_for_perp_maker(_1: &User, _2: i64, _3: u16) -> std::result::Result<(math::margin::MarginRequirementType, bool), error::ErrorCode> {
    debug maker => _1;
    debug base_asset_amount_filled => _2;
    debug market_index => _3;
    let mut _0: std::result::Result<(math::margin::MarginRequirementType, bool), error::ErrorCode>;
    let _4: i64;
    let mut _5: std::result::Result<&state::user::PerpPosition, error::ErrorCode>;
    let mut _6: &state::user::User;
    let mut _7: u16;
    let mut _8: {closure@programs/drift/src/math/orders.rs:1345:20: 1345:23};
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _11: std::result::Result<i64, error::ErrorCode>;
    let mut _12: i64;
    let mut _13: i64;
    let mut _14: isize;
    let mut _16: !;
    let mut _17: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _19: ();
    let mut _20: bool;
    let mut _21: i64;
    let mut _22: !;
    let mut _23: (math::margin::MarginRequirementType, bool);
    let mut _24: math::margin::MarginRequirementType;
    let _25: ();
    let mut _26: bool;
    let mut _27: i64;
    let mut _28: i64;
    let mut _29: i64;
    let mut _30: i64;
    let mut _31: bool;
    let mut _32: i64;
    let mut _33: i64;
    let mut _34: i64;
    let mut _35: i64;
    let mut _36: !;
    let mut _37: (math::margin::MarginRequirementType, bool);
    let mut _38: math::margin::MarginRequirementType;
    let mut _39: (math::margin::MarginRequirementType, bool);
    let mut _40: math::margin::MarginRequirementType;
    scope 1 {
        debug position_after_fill => _4;
        let _9: i64;
        let _15: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _18: i64;
        scope 2 {
            debug position_before => _9;
        }
        scope 3 {
            debug residual => _15;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _18;
            scope 6 {
            }
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &(*_1);
        StorageLive(_7);
        _7 = _3;
        _5 = User::get_perp_position(move _6, move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_8);
        _8 = {closure@programs/drift/src/math/orders.rs:1345:20: 1345:23};
        _4 = std::result::Result::<&PerpPosition, error::ErrorCode>::map_or::<i64, {closure@programs/drift/src/math/orders.rs:1345:20: 1345:23}>(move _5, const 0_i64, move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_8);
        StorageDead(_5);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = _4;
        StorageLive(_13);
        _13 = _2;
        _11 = <i64 as SafeMath>::safe_sub(move _12, move _13) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_13);
        StorageDead(_12);
        _10 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _11) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_11);
        _14 = discriminant(_10);
        switchInt(move _14) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_18);
        _18 = ((_10 as Continue).0: i64);
        _9 = _18;
        StorageDead(_18);
        StorageDead(_10);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = _4;
        _20 = Eq(move _21, const 0_i64);
        switchInt(move _20) -> [0: bb10, otherwise: bb9];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_15);
        _15 = ((_10 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_17);
        _17 = _15;
        _0 = <std::result::Result<(math::margin::MarginRequirementType, bool), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _17) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_10);
        goto -> bb20;
    }

    bb9: {
        StorageDead(_21);
        StorageLive(_23);
        StorageLive(_24);
        _24 = math::margin::MarginRequirementType::Maintenance;
        _23 = (move _24, const false);
        StorageDead(_24);
        _0 = std::result::Result::<(math::margin::MarginRequirementType, bool), error::ErrorCode>::Ok(move _23);
        StorageDead(_23);
        StorageDead(_20);
        StorageDead(_19);
        goto -> bb20;
    }

    bb10: {
        StorageDead(_21);
        _19 = const ();
        StorageDead(_20);
        StorageDead(_19);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = _4;
        _27 = core::num::<impl i64>::signum(move _28) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = _9;
        _29 = core::num::<impl i64>::signum(move _30) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_30);
        _26 = Eq(move _27, move _29);
        switchInt(move _26) -> [0: bb18, otherwise: bb13];
    }

    bb13: {
        StorageDead(_29);
        StorageDead(_27);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = _4;
        _32 = core::num::<impl i64>::abs(move _33) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = _9;
        _34 = core::num::<impl i64>::abs(move _35) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_35);
        _31 = Lt(move _32, move _34);
        switchInt(move _31) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        StorageDead(_34);
        StorageDead(_32);
        StorageLive(_37);
        StorageLive(_38);
        _38 = math::margin::MarginRequirementType::Maintenance;
        _37 = (move _38, const false);
        StorageDead(_38);
        _0 = std::result::Result::<(math::margin::MarginRequirementType, bool), error::ErrorCode>::Ok(move _37);
        StorageDead(_37);
        StorageDead(_31);
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb20;
    }

    bb17: {
        StorageDead(_34);
        StorageDead(_32);
        goto -> bb19;
    }

    bb18: {
        StorageDead(_29);
        StorageDead(_27);
        goto -> bb19;
    }

    bb19: {
        _25 = const ();
        StorageDead(_31);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_39);
        StorageLive(_40);
        _40 = math::margin::MarginRequirementType::Fill;
        _39 = (move _40, const true);
        StorageDead(_40);
        _0 = std::result::Result::<(math::margin::MarginRequirementType, bool), error::ErrorCode>::Ok(move _39);
        StorageDead(_39);
        StorageDead(_9);
        StorageDead(_4);
        goto -> bb21;
    }

    bb20: {
        StorageDead(_9);
        StorageDead(_4);
        goto -> bb21;
    }

    bb21: {
        return;
    }
}
