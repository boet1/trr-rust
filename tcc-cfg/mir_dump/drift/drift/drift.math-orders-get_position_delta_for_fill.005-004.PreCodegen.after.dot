digraph Mir_0_2598 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn math::orders::get_position_delta_for_fill(_1: u64, _2: u64, _3: controller::position::PositionDirection) -&gt; std::result::Result&lt;controller::position::PositionDelta, error::ErrorCode&gt;<br align="left"/>let mut _4: controller::position::PositionDelta;<br align="left"/>let mut _5: i64;<br align="left"/>let mut _6: isize;<br align="left"/>let mut _7: i64;<br align="left"/>let mut _8: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _9: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _10: u64;<br align="left"/>let mut _11: isize;<br align="left"/>let _12: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _13: !;<br align="left"/>let mut _14: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _15: i64;<br align="left"/>let mut _16: bool;<br align="left"/>let mut _17: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _18: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _19: u64;<br align="left"/>let mut _20: isize;<br align="left"/>let _21: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _22: !;<br align="left"/>let mut _23: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _24: i64;<br align="left"/>let mut _25: i64;<br align="left"/>let mut _26: isize;<br align="left"/>let mut _27: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _28: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _29: u64;<br align="left"/>let mut _30: isize;<br align="left"/>let _31: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _32: !;<br align="left"/>let mut _33: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _34: i64;<br align="left"/>let mut _35: i64;<br align="left"/>let mut _36: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _37: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _38: u64;<br align="left"/>let mut _39: isize;<br align="left"/>let _40: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _41: !;<br align="left"/>let mut _42: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _43: i64;<br align="left"/>let mut _44: bool;<br align="left"/>debug base_asset_amount =&gt; _1;<br align="left"/>debug quote_asset_amount =&gt; _2;<br align="left"/>debug direction =&gt; _3;<br align="left"/>debug residual =&gt; _12;<br align="left"/>debug val =&gt; _15;<br align="left"/>debug residual =&gt; _21;<br align="left"/>debug val =&gt; _24;<br align="left"/>debug residual =&gt; _31;<br align="left"/>debug val =&gt; _34;<br align="left"/>debug residual =&gt; _40;<br align="left"/>debug val =&gt; _43;<br align="left"/>>;
    bb0__0_2598 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>_6 = discriminant(_3)<br/></td></tr><tr><td align="left">switchInt(move _6)</td></tr></table>>];
    bb1__0_2598 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>_19 = _2<br/></td></tr><tr><td align="left">_18 = &lt;u64 as Cast&gt;::cast::&lt;i64&gt;(move _19)</td></tr></table>>];
    bb2__0_2598 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb3__0_2598 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>_10 = _2<br/></td></tr><tr><td align="left">_9 = &lt;u64 as Cast&gt;::cast::&lt;i64&gt;(move _10)</td></tr></table>>];
    bb4__0_2598 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/></td></tr><tr><td align="left">_8 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _9)</td></tr></table>>];
    bb5__0_2598 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>_11 = discriminant(_8)<br/></td></tr><tr><td align="left">switchInt(move _11)</td></tr></table>>];
    bb6__0_2598 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_15)<br/>_15 = ((_8 as Continue).0: i64)<br/>_7 = _15<br/>StorageDead(_15)<br/>_16 = Eq(_7, const i64::MIN)<br/></td></tr><tr><td align="left">assert(!move _16, &quot;attempt to negate `{}`, which would overflow&quot;, _7)</td></tr></table>>];
    bb7__0_2598 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageLive(_12)<br/>_12 = ((_8 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_14)<br/>_14 = _12<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;PositionDelta, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _14)</td></tr></table>>];
    bb8__0_2598 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageDead(_12)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_2598 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">_5 = Neg(move _7)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_2598 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/></td></tr><tr><td align="left">_17 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _18)</td></tr></table>>];
    bb11__0_2598 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>_20 = discriminant(_17)<br/></td></tr><tr><td align="left">switchInt(move _20)</td></tr></table>>];
    bb12__0_2598 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageLive(_24)<br/>_24 = ((_17 as Continue).0: i64)<br/>_5 = _24<br/>StorageDead(_24)<br/>StorageDead(_17)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_2598 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageLive(_21)<br/>_21 = ((_17 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_23)<br/>_23 = _21<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;PositionDelta, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _23)</td></tr></table>>];
    bb14__0_2598 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageDead(_21)<br/>StorageDead(_17)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_2598 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_25)<br/>_26 = discriminant(_3)<br/></td></tr><tr><td align="left">switchInt(move _26)</td></tr></table>>];
    bb16__0_2598 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageLive(_35)<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>StorageLive(_38)<br/>_38 = _1<br/></td></tr><tr><td align="left">_37 = &lt;u64 as Cast&gt;::cast::&lt;i64&gt;(move _38)</td></tr></table>>];
    bb17__0_2598 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageLive(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>_29 = _1<br/></td></tr><tr><td align="left">_28 = &lt;u64 as Cast&gt;::cast::&lt;i64&gt;(move _29)</td></tr></table>>];
    bb18__0_2598 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/></td></tr><tr><td align="left">_27 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _28)</td></tr></table>>];
    bb19__0_2598 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>_30 = discriminant(_27)<br/></td></tr><tr><td align="left">switchInt(move _30)</td></tr></table>>];
    bb20__0_2598 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageLive(_34)<br/>_34 = ((_27 as Continue).0: i64)<br/>_25 = _34<br/>StorageDead(_34)<br/>StorageDead(_27)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb21__0_2598 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageLive(_31)<br/>_31 = ((_27 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_33)<br/>_33 = _31<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;PositionDelta, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _33)</td></tr></table>>];
    bb22__0_2598 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>StorageDead(_31)<br/>StorageDead(_27)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb23__0_2598 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_38)<br/></td></tr><tr><td align="left">_36 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _37)</td></tr></table>>];
    bb24__0_2598 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/>_39 = discriminant(_36)<br/></td></tr><tr><td align="left">switchInt(move _39)</td></tr></table>>];
    bb25__0_2598 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageLive(_43)<br/>_43 = ((_36 as Continue).0: i64)<br/>_35 = _43<br/>StorageDead(_43)<br/>_44 = Eq(_35, const i64::MIN)<br/></td></tr><tr><td align="left">assert(!move _44, &quot;attempt to negate `{}`, which would overflow&quot;, _35)</td></tr></table>>];
    bb26__0_2598 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageLive(_40)<br/>_40 = ((_36 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_42)<br/>_42 = _40<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;PositionDelta, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _42)</td></tr></table>>];
    bb27__0_2598 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_42)<br/>StorageDead(_40)<br/>StorageDead(_36)<br/>StorageDead(_35)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb28__0_2598 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">_25 = Neg(move _35)<br/>StorageDead(_36)<br/>StorageDead(_35)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb29__0_2598 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">_4 = PositionDelta { quote_asset_amount: move _5, base_asset_amount: move _25 }<br/>StorageDead(_25)<br/>StorageDead(_5)<br/>_0 = std::result::Result::&lt;PositionDelta, error::ErrorCode&gt;::Ok(move _4)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb30__0_2598 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb31__0_2598 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb32__0_2598 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2598 -> bb3__0_2598 [label="0"];
    bb0__0_2598 -> bb1__0_2598 [label="1"];
    bb0__0_2598 -> bb2__0_2598 [label="otherwise"];
    bb1__0_2598 -> bb10__0_2598 [label="return"];
    bb3__0_2598 -> bb4__0_2598 [label="return"];
    bb4__0_2598 -> bb5__0_2598 [label="return"];
    bb5__0_2598 -> bb6__0_2598 [label="0"];
    bb5__0_2598 -> bb7__0_2598 [label="1"];
    bb5__0_2598 -> bb2__0_2598 [label="otherwise"];
    bb6__0_2598 -> bb9__0_2598 [label="success"];
    bb7__0_2598 -> bb8__0_2598 [label="return"];
    bb8__0_2598 -> bb31__0_2598 [label=""];
    bb9__0_2598 -> bb15__0_2598 [label=""];
    bb10__0_2598 -> bb11__0_2598 [label="return"];
    bb11__0_2598 -> bb12__0_2598 [label="0"];
    bb11__0_2598 -> bb13__0_2598 [label="1"];
    bb11__0_2598 -> bb2__0_2598 [label="otherwise"];
    bb12__0_2598 -> bb15__0_2598 [label=""];
    bb13__0_2598 -> bb14__0_2598 [label="return"];
    bb14__0_2598 -> bb31__0_2598 [label=""];
    bb15__0_2598 -> bb17__0_2598 [label="0"];
    bb15__0_2598 -> bb16__0_2598 [label="1"];
    bb15__0_2598 -> bb2__0_2598 [label="otherwise"];
    bb16__0_2598 -> bb23__0_2598 [label="return"];
    bb17__0_2598 -> bb18__0_2598 [label="return"];
    bb18__0_2598 -> bb19__0_2598 [label="return"];
    bb19__0_2598 -> bb20__0_2598 [label="0"];
    bb19__0_2598 -> bb21__0_2598 [label="1"];
    bb19__0_2598 -> bb2__0_2598 [label="otherwise"];
    bb20__0_2598 -> bb29__0_2598 [label=""];
    bb21__0_2598 -> bb22__0_2598 [label="return"];
    bb22__0_2598 -> bb30__0_2598 [label=""];
    bb23__0_2598 -> bb24__0_2598 [label="return"];
    bb24__0_2598 -> bb25__0_2598 [label="0"];
    bb24__0_2598 -> bb26__0_2598 [label="1"];
    bb24__0_2598 -> bb2__0_2598 [label="otherwise"];
    bb25__0_2598 -> bb28__0_2598 [label="success"];
    bb26__0_2598 -> bb27__0_2598 [label="return"];
    bb27__0_2598 -> bb30__0_2598 [label=""];
    bb28__0_2598 -> bb29__0_2598 [label=""];
    bb29__0_2598 -> bb32__0_2598 [label=""];
    bb30__0_2598 -> bb31__0_2598 [label=""];
    bb31__0_2598 -> bb32__0_2598 [label=""];
}
