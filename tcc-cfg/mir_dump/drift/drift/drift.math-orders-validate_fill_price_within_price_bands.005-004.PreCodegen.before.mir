// MIR for `math::orders::validate_fill_price_within_price_bands` before PreCodegen

fn math::orders::validate_fill_price_within_price_bands(_1: u64, _2: i64, _3: i64, _4: u32, _5: u64, _6: bool, _7: Option<controller::position::PositionDirection>) -> std::result::Result<(), error::ErrorCode> {
    debug fill_price => _1;
    debug oracle_price => _2;
    debug oracle_twap_5min => _3;
    debug margin_ratio_initial => _4;
    debug oracle_twap_5min_percent_divergence => _5;
    debug is_prediction_market => _6;
    debug direction => _7;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _8: ();
    let mut _9: bool;
    let mut _10: !;
    let _11: ();
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _13: std::result::Result<(), error::ErrorCode>;
    let mut _14: bool;
    let mut _15: u64;
    let mut _16: ();
    let _17: error::ErrorCode;
    let _18: ();
    let mut _19: &str;
    let _20: &str;
    let mut _21: &std::string::String;
    let _22: &std::string::String;
    let _23: std::string::String;
    let mut _25: std::fmt::Arguments<'_>;
    let mut _26: &[&str];
    let mut _27: &[&str; 2];
    let _28: &[&str; 2];
    let _29: [&str; 2];
    let mut _30: &[core::fmt::rt::Argument<'_>];
    let mut _31: &[core::fmt::rt::Argument<'_>; 1];
    let _32: &[core::fmt::rt::Argument<'_>; 1];
    let _33: [core::fmt::rt::Argument<'_>; 1];
    let mut _34: core::fmt::rt::Argument<'_>;
    let mut _35: &error::ErrorCode;
    let _36: &error::ErrorCode;
    let _37: ();
    let mut _38: &str;
    let _39: &str;
    let mut _40: &std::string::String;
    let _41: &std::string::String;
    let _42: std::string::String;
    let mut _44: std::fmt::Arguments<'_>;
    let mut _45: &[&str];
    let mut _46: &[&str; 3];
    let _47: &[&str; 3];
    let _48: [&str; 3];
    let mut _49: &[core::fmt::rt::Argument<'_>];
    let mut _50: &[core::fmt::rt::Argument<'_>; 2];
    let _51: &[core::fmt::rt::Argument<'_>; 2];
    let _52: [core::fmt::rt::Argument<'_>; 2];
    let mut _53: core::fmt::rt::Argument<'_>;
    let mut _54: &u64;
    let _55: &u64;
    let mut _56: core::fmt::rt::Argument<'_>;
    let mut _57: &u64;
    let _58: &u64;
    let _59: u64;
    let mut _60: error::ErrorCode;
    let mut _61: isize;
    let _62: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _65: ();
    let mut _66: ();
    let _67: ();
    let mut _68: isize;
    let mut _70: bool;
    let mut _71: &controller::position::PositionDirection;
    let mut _72: &controller::position::PositionDirection;
    let _73: controller::position::PositionDirection;
    let mut _74: bool;
    let mut _75: u64;
    let mut _76: u64;
    let mut _77: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _78: std::result::Result<u64, error::ErrorCode>;
    let mut _79: i64;
    let mut _80: isize;
    let mut _82: !;
    let mut _83: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _85: bool;
    let mut _86: u64;
    let mut _87: u64;
    let mut _88: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _89: std::result::Result<u64, error::ErrorCode>;
    let mut _90: i64;
    let mut _91: isize;
    let mut _93: !;
    let mut _94: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _96: !;
    let mut _97: ();
    let mut _98: bool;
    let mut _99: u64;
    let mut _100: u64;
    let mut _101: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _102: std::result::Result<u64, error::ErrorCode>;
    let mut _103: i64;
    let mut _104: isize;
    let mut _106: !;
    let mut _107: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _109: bool;
    let mut _110: u64;
    let mut _111: u64;
    let mut _112: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _113: std::result::Result<u64, error::ErrorCode>;
    let mut _114: i64;
    let mut _115: isize;
    let mut _117: !;
    let mut _118: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _120: !;
    let mut _121: ();
    let _122: u128;
    let mut _123: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _124: std::result::Result<u128, error::ErrorCode>;
    let mut _125: u32;
    let mut _126: isize;
    let _127: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _128: !;
    let mut _129: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _130: u128;
    let mut _132: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _133: std::result::Result<u128, error::ErrorCode>;
    let mut _134: u64;
    let mut _135: isize;
    let mut _137: !;
    let mut _138: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _141: i128;
    let mut _142: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _143: std::result::Result<i128, error::ErrorCode>;
    let mut _144: i128;
    let mut _145: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _146: std::result::Result<i128, error::ErrorCode>;
    let mut _147: i128;
    let mut _148: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _149: std::result::Result<i128, error::ErrorCode>;
    let mut _150: i64;
    let mut _151: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _152: std::result::Result<i64, error::ErrorCode>;
    let mut _153: i64;
    let mut _154: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _155: std::result::Result<i64, error::ErrorCode>;
    let mut _156: u64;
    let mut _157: isize;
    let mut _159: !;
    let mut _160: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _162: i64;
    let mut _163: isize;
    let mut _165: !;
    let mut _166: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _168: isize;
    let mut _170: !;
    let mut _171: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _173: isize;
    let mut _175: !;
    let mut _176: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _178: i128;
    let mut _179: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _180: std::result::Result<i128, error::ErrorCode>;
    let mut _181: i64;
    let mut _182: isize;
    let mut _184: !;
    let mut _185: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _187: isize;
    let mut _189: !;
    let mut _190: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _193: i128;
    let mut _194: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _195: std::result::Result<i128, error::ErrorCode>;
    let mut _196: i128;
    let mut _197: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _198: std::result::Result<i128, error::ErrorCode>;
    let mut _199: i128;
    let mut _200: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _201: std::result::Result<i128, error::ErrorCode>;
    let mut _202: i64;
    let mut _203: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _204: std::result::Result<i64, error::ErrorCode>;
    let mut _205: i64;
    let mut _206: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _207: std::result::Result<i64, error::ErrorCode>;
    let mut _208: u64;
    let mut _209: isize;
    let mut _211: !;
    let mut _212: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _214: i64;
    let mut _215: isize;
    let mut _217: !;
    let mut _218: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _220: isize;
    let mut _222: !;
    let mut _223: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _225: isize;
    let mut _227: !;
    let mut _228: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _230: i128;
    let mut _231: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _232: std::result::Result<i128, error::ErrorCode>;
    let mut _233: i64;
    let mut _234: isize;
    let mut _236: !;
    let mut _237: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _239: isize;
    let mut _241: !;
    let mut _242: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _244: ();
    let mut _245: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _246: std::result::Result<(), error::ErrorCode>;
    let mut _247: bool;
    let mut _248: u128;
    let mut _249: u128;
    let mut _250: ();
    let _252: ();
    let mut _253: &str;
    let _254: &str;
    let mut _255: &std::string::String;
    let _256: &std::string::String;
    let _257: std::string::String;
    let mut _259: std::fmt::Arguments<'_>;
    let mut _260: &[&str];
    let mut _261: &[&str; 2];
    let _262: &[&str; 2];
    let _263: [&str; 2];
    let mut _264: &[core::fmt::rt::Argument<'_>];
    let mut _265: &[core::fmt::rt::Argument<'_>; 1];
    let _266: &[core::fmt::rt::Argument<'_>; 1];
    let _267: [core::fmt::rt::Argument<'_>; 1];
    let mut _268: core::fmt::rt::Argument<'_>;
    let mut _269: &error::ErrorCode;
    let _270: &error::ErrorCode;
    let _271: ();
    let mut _272: &str;
    let _273: &str;
    let mut _274: &std::string::String;
    let _275: &std::string::String;
    let _276: std::string::String;
    let mut _278: std::fmt::Arguments<'_>;
    let mut _279: &[&str];
    let mut _280: &[&str; 5];
    let _281: &[&str; 5];
    let _282: [&str; 5];
    let mut _283: &[core::fmt::rt::Argument<'_>];
    let mut _284: &[core::fmt::rt::Argument<'_>; 4];
    let _285: &[core::fmt::rt::Argument<'_>; 4];
    let _286: [core::fmt::rt::Argument<'_>; 4];
    let mut _287: core::fmt::rt::Argument<'_>;
    let mut _288: &u128;
    let _289: &u128;
    let mut _290: core::fmt::rt::Argument<'_>;
    let mut _291: &u128;
    let _292: &u128;
    let mut _293: core::fmt::rt::Argument<'_>;
    let mut _294: &u64;
    let _295: &u64;
    let mut _296: core::fmt::rt::Argument<'_>;
    let mut _297: &i64;
    let _298: &i64;
    let mut _299: error::ErrorCode;
    let mut _300: isize;
    let mut _302: !;
    let mut _303: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _305: ();
    let mut _306: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _307: std::result::Result<(), error::ErrorCode>;
    let mut _308: bool;
    let mut _309: u128;
    let mut _310: u128;
    let mut _311: ();
    let _313: ();
    let mut _314: &str;
    let _315: &str;
    let mut _316: &std::string::String;
    let _317: &std::string::String;
    let _318: std::string::String;
    let mut _320: std::fmt::Arguments<'_>;
    let mut _321: &[&str];
    let mut _322: &[&str; 2];
    let _323: &[&str; 2];
    let _324: [&str; 2];
    let mut _325: &[core::fmt::rt::Argument<'_>];
    let mut _326: &[core::fmt::rt::Argument<'_>; 1];
    let _327: &[core::fmt::rt::Argument<'_>; 1];
    let _328: [core::fmt::rt::Argument<'_>; 1];
    let mut _329: core::fmt::rt::Argument<'_>;
    let mut _330: &error::ErrorCode;
    let _331: &error::ErrorCode;
    let _332: ();
    let mut _333: &str;
    let _334: &str;
    let mut _335: &std::string::String;
    let _336: &std::string::String;
    let _337: std::string::String;
    let mut _339: std::fmt::Arguments<'_>;
    let mut _340: &[&str];
    let mut _341: &[&str; 5];
    let _342: &[&str; 5];
    let _343: [&str; 5];
    let mut _344: &[core::fmt::rt::Argument<'_>];
    let mut _345: &[core::fmt::rt::Argument<'_>; 4];
    let _346: &[core::fmt::rt::Argument<'_>; 4];
    let _347: [core::fmt::rt::Argument<'_>; 4];
    let mut _348: core::fmt::rt::Argument<'_>;
    let mut _349: &u128;
    let _350: &u128;
    let mut _351: core::fmt::rt::Argument<'_>;
    let mut _352: &u128;
    let _353: &u128;
    let mut _354: core::fmt::rt::Argument<'_>;
    let mut _355: &u64;
    let _356: &u64;
    let mut _357: core::fmt::rt::Argument<'_>;
    let mut _358: &i64;
    let _359: &i64;
    let mut _360: error::ErrorCode;
    let mut _361: isize;
    let mut _363: !;
    let mut _364: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _366: ();
    scope 1 {
        debug error_code => _17;
        let _24: std::string::String;
        let _43: std::string::String;
        let mut _367: &u64;
        let mut _368: &[&str; 3];
        let mut _369: &[&str; 2];
        scope 2 {
            debug res => _24;
        }
        scope 3 {
            debug res => _43;
        }
    }
    scope 4 {
        debug residual => _62;
        scope 5 {
        }
    }
    scope 6 {
        debug val => _65;
        scope 7 {
        }
    }
    scope 8 {
        debug direction => _69;
        let _69: controller::position::PositionDirection;
        let _81: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _84: u64;
        let _92: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _95: u64;
        let _105: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _108: u64;
        let _116: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _119: u64;
        let mut _374: &controller::position::PositionDirection;
        scope 9 {
            debug residual => _81;
            scope 10 {
            }
        }
        scope 11 {
            debug val => _84;
            scope 12 {
            }
        }
        scope 13 {
            debug residual => _92;
            scope 14 {
            }
        }
        scope 15 {
            debug val => _95;
            scope 16 {
            }
        }
        scope 17 {
            debug residual => _105;
            scope 18 {
            }
        }
        scope 19 {
            debug val => _108;
            scope 20 {
            }
        }
        scope 21 {
            debug residual => _116;
            scope 22 {
            }
        }
        scope 23 {
            debug val => _119;
            scope 24 {
            }
        }
    }
    scope 25 {
        debug max_oracle_diff => _122;
        let _131: u128;
        let _136: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _139: u128;
        scope 30 {
            debug max_oracle_twap_diff => _131;
            let _140: u128;
            let _158: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _161: i64;
            let _164: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _167: i64;
            let _169: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _172: i128;
            let _174: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _177: i128;
            let _183: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _186: i128;
            let _188: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _191: i128;
            scope 35 {
                debug percent_diff => _140;
                let _192: u128;
                let _210: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _213: i64;
                let _216: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _219: i64;
                let _221: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _224: i128;
                let _226: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _229: i128;
                let _235: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _238: i128;
                let _240: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _243: i128;
                scope 60 {
                    debug percent_diff_twap => _192;
                    let _251: error::ErrorCode;
                    let _301: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _304: ();
                    let _312: error::ErrorCode;
                    let _362: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _365: ();
                    scope 85 {
                        debug error_code => _251;
                        let _258: std::string::String;
                        let _277: std::string::String;
                        let mut _372: &[&str; 5];
                        let mut _373: &[&str; 2];
                        scope 86 {
                            debug res => _258;
                        }
                        scope 87 {
                            debug res => _277;
                        }
                    }
                    scope 88 {
                        debug residual => _301;
                        scope 89 {
                        }
                    }
                    scope 90 {
                        debug val => _304;
                        scope 91 {
                        }
                    }
                    scope 92 {
                        debug error_code => _312;
                        let _319: std::string::String;
                        let _338: std::string::String;
                        let mut _370: &[&str; 5];
                        let mut _371: &[&str; 2];
                        scope 93 {
                            debug res => _319;
                        }
                        scope 94 {
                            debug res => _338;
                        }
                    }
                    scope 95 {
                        debug residual => _362;
                        scope 96 {
                        }
                    }
                    scope 97 {
                        debug val => _365;
                        scope 98 {
                        }
                    }
                }
                scope 61 {
                    debug residual => _210;
                    scope 62 {
                    }
                }
                scope 63 {
                    debug val => _213;
                    scope 64 {
                    }
                }
                scope 65 {
                    debug residual => _216;
                    scope 66 {
                    }
                }
                scope 67 {
                    debug val => _219;
                    scope 68 {
                    }
                }
                scope 69 {
                    debug residual => _221;
                    scope 70 {
                    }
                }
                scope 71 {
                    debug val => _224;
                    scope 72 {
                    }
                }
                scope 73 {
                    debug residual => _226;
                    scope 74 {
                    }
                }
                scope 75 {
                    debug val => _229;
                    scope 76 {
                    }
                }
                scope 77 {
                    debug residual => _235;
                    scope 78 {
                    }
                }
                scope 79 {
                    debug val => _238;
                    scope 80 {
                    }
                }
                scope 81 {
                    debug residual => _240;
                    scope 82 {
                    }
                }
                scope 83 {
                    debug val => _243;
                    scope 84 {
                    }
                }
            }
            scope 36 {
                debug residual => _158;
                scope 37 {
                }
            }
            scope 38 {
                debug val => _161;
                scope 39 {
                }
            }
            scope 40 {
                debug residual => _164;
                scope 41 {
                }
            }
            scope 42 {
                debug val => _167;
                scope 43 {
                }
            }
            scope 44 {
                debug residual => _169;
                scope 45 {
                }
            }
            scope 46 {
                debug val => _172;
                scope 47 {
                }
            }
            scope 48 {
                debug residual => _174;
                scope 49 {
                }
            }
            scope 50 {
                debug val => _177;
                scope 51 {
                }
            }
            scope 52 {
                debug residual => _183;
                scope 53 {
                }
            }
            scope 54 {
                debug val => _186;
                scope 55 {
                }
            }
            scope 56 {
                debug residual => _188;
                scope 57 {
                }
            }
            scope 58 {
                debug val => _191;
                scope 59 {
                }
            }
        }
        scope 31 {
            debug residual => _136;
            scope 32 {
            }
        }
        scope 33 {
            debug val => _139;
            scope 34 {
            }
        }
    }
    scope 26 {
        debug residual => _127;
        scope 27 {
        }
    }
    scope 28 {
        debug val => _130;
        scope 29 {
        }
    }

    bb0: {
        StorageLive(_8);
        StorageLive(_9);
        _9 = _6;
        switchInt(move _9) -> [0: bb23, otherwise: bb1];
    }

    bb1: {
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = _1;
        _14 = Le(move _15, const _);
        switchInt(move _14) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_15);
        StorageLive(_16);
        _16 = ();
        _13 = std::result::Result::<(), error::ErrorCode>::Ok(move _16);
        StorageDead(_16);
        goto -> bb17;
    }

    bb3: {
        StorageDead(_15);
        StorageLive(_17);
        _17 = error::ErrorCode::PriceBandsBreached;
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _369 = const _;
        _28 = &(*_369);
        _27 = &(*_28);
        _26 = move _27 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_27);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = &_17;
        _35 = &(*_36);
        _34 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _35) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_35);
        _33 = [move _34];
        StorageDead(_34);
        _32 = &_33;
        _31 = &(*_32);
        _30 = move _31 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_31);
        _25 = Arguments::<'_>::new_v1(move _26, move _30) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_30);
        StorageDead(_26);
        _24 = format(move _25) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_25);
        StorageDead(_36);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_28);
        _23 = move _24;
        StorageDead(_24);
        _22 = &_23;
        _21 = &(*_22);
        _20 = <String as Deref>::deref(move _21) -> [return: bb7, unwind: bb203];
    }

    bb7: {
        _19 = &(*_20);
        StorageDead(_21);
        _18 = solana_program::log::sol_log(move _19) -> [return: bb8, unwind: bb203];
    }

    bb8: {
        StorageDead(_19);
        drop(_23) -> [return: bb9, unwind: bb204];
    }

    bb9: {
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_18);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _368 = const _;
        _47 = &(*_368);
        _46 = &(*_47);
        _45 = move _46 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_46);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &_1;
        _54 = &(*_55);
        _53 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _54) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_54);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _367 = const _;
        _58 = &(*_367);
        _57 = &(*_58);
        _56 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _57) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_57);
        _52 = [move _53, move _56];
        StorageDead(_56);
        StorageDead(_53);
        _51 = &_52;
        _50 = &(*_51);
        _49 = move _50 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_50);
        _44 = Arguments::<'_>::new_v1(move _45, move _49) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_49);
        StorageDead(_45);
        _43 = format(move _44) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_44);
        StorageDead(_58);
        StorageDead(_55);
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_47);
        _42 = move _43;
        StorageDead(_43);
        _41 = &_42;
        _40 = &(*_41);
        _39 = <String as Deref>::deref(move _40) -> [return: bb14, unwind: bb202];
    }

    bb14: {
        _38 = &(*_39);
        StorageDead(_40);
        _37 = solana_program::log::sol_log(move _38) -> [return: bb15, unwind: bb202];
    }

    bb15: {
        StorageDead(_38);
        drop(_42) -> [return: bb16, unwind: bb204];
    }

    bb16: {
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_39);
        StorageDead(_37);
        StorageLive(_60);
        _60 = _17;
        _13 = std::result::Result::<(), error::ErrorCode>::Err(move _60);
        StorageDead(_60);
        StorageDead(_17);
        goto -> bb17;
    }

    bb17: {
        StorageDead(_14);
        _12 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _13) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_13);
        _61 = discriminant(_12);
        switchInt(move _61) -> [0: bb19, 1: bb21, otherwise: bb20];
    }

    bb19: {
        StorageLive(_65);
        _65 = ((_12 as Continue).0: ());
        _11 = _65;
        StorageDead(_65);
        StorageDead(_12);
        StorageDead(_11);
        StorageLive(_66);
        _66 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _66);
        StorageDead(_66);
        goto -> bb196;
    }

    bb20: {
        unreachable;
    }

    bb21: {
        StorageLive(_62);
        _62 = ((_12 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_64);
        _64 = _62;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _64) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_64);
        StorageDead(_62);
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb196;
    }

    bb23: {
        _8 = const ();
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_67);
        _68 = discriminant(_7);
        switchInt(move _68) -> [1: bb25, otherwise: bb24];
    }

    bb24: {
        _67 = const ();
        goto -> bb60;
    }

    bb25: {
        StorageLive(_69);
        _69 = ((_7 as Some).0: controller::position::PositionDirection);
        StorageLive(_70);
        StorageLive(_71);
        _71 = &_69;
        StorageLive(_72);
        _374 = const _;
        _72 = &(*_374);
        _70 = <controller::position::PositionDirection as PartialEq>::eq(move _71, move _72) -> [return: bb26, unwind continue];
    }

    bb26: {
        switchInt(move _70) -> [0: bb43, otherwise: bb27];
    }

    bb27: {
        StorageDead(_72);
        StorageDead(_71);
        StorageLive(_74);
        StorageLive(_75);
        _75 = _1;
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = _2;
        _78 = <i64 as Cast>::cast::<u64>(move _79) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_79);
        _77 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _78) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_78);
        _80 = discriminant(_77);
        switchInt(move _80) -> [0: bb30, 1: bb31, otherwise: bb20];
    }

    bb30: {
        StorageLive(_84);
        _84 = ((_77 as Continue).0: u64);
        _76 = _84;
        StorageDead(_84);
        _74 = Lt(move _75, move _76);
        switchInt(move _74) -> [0: bb34, otherwise: bb33];
    }

    bb31: {
        StorageLive(_81);
        _81 = ((_77 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_83);
        _83 = _81;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _83) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_83);
        StorageDead(_81);
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_75);
        goto -> bb194;
    }

    bb33: {
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_75);
        StorageLive(_85);
        StorageLive(_86);
        _86 = _1;
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        _90 = _3;
        _89 = <i64 as Cast>::cast::<u64>(move _90) -> [return: bb35, unwind continue];
    }

    bb34: {
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_75);
        goto -> bb42;
    }

    bb35: {
        StorageDead(_90);
        _88 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _89) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_89);
        _91 = discriminant(_88);
        switchInt(move _91) -> [0: bb37, 1: bb38, otherwise: bb20];
    }

    bb37: {
        StorageLive(_95);
        _95 = ((_88 as Continue).0: u64);
        _87 = _95;
        StorageDead(_95);
        _85 = Lt(move _86, move _87);
        switchInt(move _85) -> [0: bb41, otherwise: bb40];
    }

    bb38: {
        StorageLive(_92);
        _92 = ((_88 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_94);
        _94 = _92;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _94) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_94);
        StorageDead(_92);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        goto -> bb193;
    }

    bb40: {
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        StorageLive(_97);
        _97 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _97);
        StorageDead(_97);
        goto -> bb193;
    }

    bb41: {
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        goto -> bb42;
    }

    bb42: {
        _67 = const ();
        StorageDead(_85);
        StorageDead(_74);
        goto -> bb59;
    }

    bb43: {
        StorageDead(_72);
        StorageDead(_71);
        StorageLive(_98);
        StorageLive(_99);
        _99 = _1;
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        _103 = _2;
        _102 = <i64 as Cast>::cast::<u64>(move _103) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_103);
        _101 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _102) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_102);
        _104 = discriminant(_101);
        switchInt(move _104) -> [0: bb46, 1: bb47, otherwise: bb20];
    }

    bb46: {
        StorageLive(_108);
        _108 = ((_101 as Continue).0: u64);
        _100 = _108;
        StorageDead(_108);
        _98 = Gt(move _99, move _100);
        switchInt(move _98) -> [0: bb50, otherwise: bb49];
    }

    bb47: {
        StorageLive(_105);
        _105 = ((_101 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_107);
        _107 = _105;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _107) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_107);
        StorageDead(_105);
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_99);
        goto -> bb192;
    }

    bb49: {
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_99);
        StorageLive(_109);
        StorageLive(_110);
        _110 = _1;
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        _114 = _3;
        _113 = <i64 as Cast>::cast::<u64>(move _114) -> [return: bb51, unwind continue];
    }

    bb50: {
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_99);
        goto -> bb58;
    }

    bb51: {
        StorageDead(_114);
        _112 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _113) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_113);
        _115 = discriminant(_112);
        switchInt(move _115) -> [0: bb53, 1: bb54, otherwise: bb20];
    }

    bb53: {
        StorageLive(_119);
        _119 = ((_112 as Continue).0: u64);
        _111 = _119;
        StorageDead(_119);
        _109 = Gt(move _110, move _111);
        switchInt(move _109) -> [0: bb57, otherwise: bb56];
    }

    bb54: {
        StorageLive(_116);
        _116 = ((_112 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_118);
        _118 = _116;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _118) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_118);
        StorageDead(_116);
        StorageDead(_112);
        StorageDead(_111);
        StorageDead(_110);
        goto -> bb191;
    }

    bb56: {
        StorageDead(_112);
        StorageDead(_111);
        StorageDead(_110);
        StorageLive(_121);
        _121 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _121);
        StorageDead(_121);
        goto -> bb191;
    }

    bb57: {
        StorageDead(_112);
        StorageDead(_111);
        StorageDead(_110);
        goto -> bb58;
    }

    bb58: {
        _67 = const ();
        StorageDead(_109);
        StorageDead(_98);
        goto -> bb59;
    }

    bb59: {
        StorageDead(_70);
        StorageDead(_69);
        goto -> bb60;
    }

    bb60: {
        StorageDead(_67);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _125 = _4;
        _124 = <u32 as Cast>::cast::<u128>(move _125) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_125);
        _123 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _124) -> [return: bb62, unwind continue];
    }

    bb62: {
        StorageDead(_124);
        _126 = discriminant(_123);
        switchInt(move _126) -> [0: bb63, 1: bb64, otherwise: bb20];
    }

    bb63: {
        StorageLive(_130);
        _130 = ((_123 as Continue).0: u128);
        _122 = _130;
        StorageDead(_130);
        StorageDead(_123);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        _134 = _5;
        _133 = <u64 as Cast>::cast::<u128>(move _134) -> [return: bb66, unwind continue];
    }

    bb64: {
        StorageLive(_127);
        _127 = ((_123 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_129);
        _129 = _127;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _129) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_129);
        StorageDead(_127);
        StorageDead(_123);
        goto -> bb190;
    }

    bb66: {
        StorageDead(_134);
        _132 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _133) -> [return: bb67, unwind continue];
    }

    bb67: {
        StorageDead(_133);
        _135 = discriminant(_132);
        switchInt(move _135) -> [0: bb68, 1: bb69, otherwise: bb20];
    }

    bb68: {
        StorageLive(_139);
        _139 = ((_132 as Continue).0: u128);
        _131 = _139;
        StorageDead(_139);
        StorageDead(_132);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        _156 = _1;
        _155 = <u64 as Cast>::cast::<i64>(move _156) -> [return: bb71, unwind continue];
    }

    bb69: {
        StorageLive(_136);
        _136 = ((_132 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_138);
        _138 = _136;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _138) -> [return: bb70, unwind continue];
    }

    bb70: {
        StorageDead(_138);
        StorageDead(_136);
        StorageDead(_132);
        goto -> bb189;
    }

    bb71: {
        StorageDead(_156);
        _154 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _155) -> [return: bb72, unwind continue];
    }

    bb72: {
        StorageDead(_155);
        _157 = discriminant(_154);
        switchInt(move _157) -> [0: bb73, 1: bb74, otherwise: bb20];
    }

    bb73: {
        StorageLive(_161);
        _161 = ((_154 as Continue).0: i64);
        _153 = _161;
        StorageDead(_161);
        StorageLive(_162);
        _162 = _2;
        _152 = <i64 as SafeMath>::safe_sub(move _153, move _162) -> [return: bb76, unwind continue];
    }

    bb74: {
        StorageLive(_158);
        _158 = ((_154 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_160);
        _160 = _158;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _160) -> [return: bb75, unwind continue];
    }

    bb75: {
        StorageDead(_160);
        StorageDead(_158);
        StorageDead(_153);
        StorageDead(_152);
        goto -> bb184;
    }

    bb76: {
        StorageDead(_162);
        StorageDead(_153);
        _151 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _152) -> [return: bb77, unwind continue];
    }

    bb77: {
        StorageDead(_152);
        _163 = discriminant(_151);
        switchInt(move _163) -> [0: bb78, 1: bb79, otherwise: bb20];
    }

    bb78: {
        StorageLive(_167);
        _167 = ((_151 as Continue).0: i64);
        _150 = _167;
        StorageDead(_167);
        _149 = <i64 as Cast>::cast::<i128>(move _150) -> [return: bb81, unwind continue];
    }

    bb79: {
        StorageLive(_164);
        _164 = ((_151 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_166);
        _166 = _164;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _166) -> [return: bb80, unwind continue];
    }

    bb80: {
        StorageDead(_166);
        StorageDead(_164);
        goto -> bb184;
    }

    bb81: {
        StorageDead(_150);
        _148 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _149) -> [return: bb82, unwind continue];
    }

    bb82: {
        StorageDead(_149);
        _168 = discriminant(_148);
        switchInt(move _168) -> [0: bb83, 1: bb84, otherwise: bb20];
    }

    bb83: {
        StorageLive(_172);
        _172 = ((_148 as Continue).0: i128);
        _147 = _172;
        StorageDead(_172);
        _146 = <i128 as SafeMath>::safe_mul(move _147, const _) -> [return: bb86, unwind continue];
    }

    bb84: {
        StorageLive(_169);
        _169 = ((_148 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_171);
        _171 = _169;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _171) -> [return: bb85, unwind continue];
    }

    bb85: {
        StorageDead(_171);
        StorageDead(_169);
        goto -> bb185;
    }

    bb86: {
        StorageDead(_147);
        _145 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _146) -> [return: bb87, unwind continue];
    }

    bb87: {
        StorageDead(_146);
        _173 = discriminant(_145);
        switchInt(move _173) -> [0: bb88, 1: bb89, otherwise: bb20];
    }

    bb88: {
        StorageLive(_177);
        _177 = ((_145 as Continue).0: i128);
        _144 = _177;
        StorageDead(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        _181 = _2;
        _180 = <i64 as Cast>::cast::<i128>(move _181) -> [return: bb91, unwind continue];
    }

    bb89: {
        StorageLive(_174);
        _174 = ((_145 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_176);
        _176 = _174;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _176) -> [return: bb90, unwind continue];
    }

    bb90: {
        StorageDead(_176);
        StorageDead(_174);
        goto -> bb186;
    }

    bb91: {
        StorageDead(_181);
        _179 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _180) -> [return: bb92, unwind continue];
    }

    bb92: {
        StorageDead(_180);
        _182 = discriminant(_179);
        switchInt(move _182) -> [0: bb93, 1: bb94, otherwise: bb20];
    }

    bb93: {
        StorageLive(_186);
        _186 = ((_179 as Continue).0: i128);
        _178 = _186;
        StorageDead(_186);
        _143 = <i128 as SafeMath>::safe_div(move _144, move _178) -> [return: bb96, unwind continue];
    }

    bb94: {
        StorageLive(_183);
        _183 = ((_179 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_185);
        _185 = _183;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _185) -> [return: bb95, unwind continue];
    }

    bb95: {
        StorageDead(_185);
        StorageDead(_183);
        StorageDead(_178);
        StorageDead(_144);
        StorageDead(_143);
        goto -> bb183;
    }

    bb96: {
        StorageDead(_178);
        StorageDead(_144);
        _142 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _143) -> [return: bb97, unwind continue];
    }

    bb97: {
        StorageDead(_143);
        _187 = discriminant(_142);
        switchInt(move _187) -> [0: bb98, 1: bb99, otherwise: bb20];
    }

    bb98: {
        StorageLive(_191);
        _191 = ((_142 as Continue).0: i128);
        _141 = _191;
        StorageDead(_191);
        _140 = core::num::<impl i128>::unsigned_abs(move _141) -> [return: bb101, unwind continue];
    }

    bb99: {
        StorageLive(_188);
        _188 = ((_142 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_190);
        _190 = _188;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _190) -> [return: bb100, unwind continue];
    }

    bb100: {
        StorageDead(_190);
        StorageDead(_188);
        goto -> bb183;
    }

    bb101: {
        StorageDead(_141);
        StorageDead(_179);
        StorageDead(_154);
        StorageDead(_151);
        StorageDead(_148);
        StorageDead(_145);
        StorageDead(_142);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        _208 = _1;
        _207 = <u64 as Cast>::cast::<i64>(move _208) -> [return: bb102, unwind continue];
    }

    bb102: {
        StorageDead(_208);
        _206 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _207) -> [return: bb103, unwind continue];
    }

    bb103: {
        StorageDead(_207);
        _209 = discriminant(_206);
        switchInt(move _209) -> [0: bb104, 1: bb105, otherwise: bb20];
    }

    bb104: {
        StorageLive(_213);
        _213 = ((_206 as Continue).0: i64);
        _205 = _213;
        StorageDead(_213);
        StorageLive(_214);
        _214 = _3;
        _204 = <i64 as SafeMath>::safe_sub(move _205, move _214) -> [return: bb107, unwind continue];
    }

    bb105: {
        StorageLive(_210);
        _210 = ((_206 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_212);
        _212 = _210;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _212) -> [return: bb106, unwind continue];
    }

    bb106: {
        StorageDead(_212);
        StorageDead(_210);
        StorageDead(_205);
        StorageDead(_204);
        goto -> bb178;
    }

    bb107: {
        StorageDead(_214);
        StorageDead(_205);
        _203 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _204) -> [return: bb108, unwind continue];
    }

    bb108: {
        StorageDead(_204);
        _215 = discriminant(_203);
        switchInt(move _215) -> [0: bb109, 1: bb110, otherwise: bb20];
    }

    bb109: {
        StorageLive(_219);
        _219 = ((_203 as Continue).0: i64);
        _202 = _219;
        StorageDead(_219);
        _201 = <i64 as Cast>::cast::<i128>(move _202) -> [return: bb112, unwind continue];
    }

    bb110: {
        StorageLive(_216);
        _216 = ((_203 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_218);
        _218 = _216;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _218) -> [return: bb111, unwind continue];
    }

    bb111: {
        StorageDead(_218);
        StorageDead(_216);
        goto -> bb178;
    }

    bb112: {
        StorageDead(_202);
        _200 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _201) -> [return: bb113, unwind continue];
    }

    bb113: {
        StorageDead(_201);
        _220 = discriminant(_200);
        switchInt(move _220) -> [0: bb114, 1: bb115, otherwise: bb20];
    }

    bb114: {
        StorageLive(_224);
        _224 = ((_200 as Continue).0: i128);
        _199 = _224;
        StorageDead(_224);
        _198 = <i128 as SafeMath>::safe_mul(move _199, const _) -> [return: bb117, unwind continue];
    }

    bb115: {
        StorageLive(_221);
        _221 = ((_200 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_223);
        _223 = _221;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _223) -> [return: bb116, unwind continue];
    }

    bb116: {
        StorageDead(_223);
        StorageDead(_221);
        goto -> bb179;
    }

    bb117: {
        StorageDead(_199);
        _197 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _198) -> [return: bb118, unwind continue];
    }

    bb118: {
        StorageDead(_198);
        _225 = discriminant(_197);
        switchInt(move _225) -> [0: bb119, 1: bb120, otherwise: bb20];
    }

    bb119: {
        StorageLive(_229);
        _229 = ((_197 as Continue).0: i128);
        _196 = _229;
        StorageDead(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        _233 = _3;
        _232 = <i64 as Cast>::cast::<i128>(move _233) -> [return: bb122, unwind continue];
    }

    bb120: {
        StorageLive(_226);
        _226 = ((_197 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_228);
        _228 = _226;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _228) -> [return: bb121, unwind continue];
    }

    bb121: {
        StorageDead(_228);
        StorageDead(_226);
        goto -> bb180;
    }

    bb122: {
        StorageDead(_233);
        _231 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _232) -> [return: bb123, unwind continue];
    }

    bb123: {
        StorageDead(_232);
        _234 = discriminant(_231);
        switchInt(move _234) -> [0: bb124, 1: bb125, otherwise: bb20];
    }

    bb124: {
        StorageLive(_238);
        _238 = ((_231 as Continue).0: i128);
        _230 = _238;
        StorageDead(_238);
        _195 = <i128 as SafeMath>::safe_div(move _196, move _230) -> [return: bb127, unwind continue];
    }

    bb125: {
        StorageLive(_235);
        _235 = ((_231 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_237);
        _237 = _235;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _237) -> [return: bb126, unwind continue];
    }

    bb126: {
        StorageDead(_237);
        StorageDead(_235);
        StorageDead(_230);
        StorageDead(_196);
        StorageDead(_195);
        goto -> bb177;
    }

    bb127: {
        StorageDead(_230);
        StorageDead(_196);
        _194 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _195) -> [return: bb128, unwind continue];
    }

    bb128: {
        StorageDead(_195);
        _239 = discriminant(_194);
        switchInt(move _239) -> [0: bb129, 1: bb130, otherwise: bb20];
    }

    bb129: {
        StorageLive(_243);
        _243 = ((_194 as Continue).0: i128);
        _193 = _243;
        StorageDead(_243);
        _192 = core::num::<impl i128>::unsigned_abs(move _193) -> [return: bb132, unwind continue];
    }

    bb130: {
        StorageLive(_240);
        _240 = ((_194 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_242);
        _242 = _240;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _242) -> [return: bb131, unwind continue];
    }

    bb131: {
        StorageDead(_242);
        StorageDead(_240);
        goto -> bb177;
    }

    bb132: {
        StorageDead(_193);
        StorageDead(_231);
        StorageDead(_206);
        StorageDead(_203);
        StorageDead(_200);
        StorageDead(_197);
        StorageDead(_194);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        _248 = _140;
        StorageLive(_249);
        _249 = _122;
        _247 = Lt(move _248, move _249);
        switchInt(move _247) -> [0: bb134, otherwise: bb133];
    }

    bb133: {
        StorageDead(_249);
        StorageDead(_248);
        StorageLive(_250);
        _250 = ();
        _246 = std::result::Result::<(), error::ErrorCode>::Ok(move _250);
        StorageDead(_250);
        goto -> bb150;
    }

    bb134: {
        StorageDead(_249);
        StorageDead(_248);
        StorageLive(_251);
        _251 = error::ErrorCode::PriceBandsBreached;
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        _373 = const _;
        _262 = &(*_373);
        _261 = &(*_262);
        _260 = move _261 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_261);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        _270 = &_251;
        _269 = &(*_270);
        _268 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _269) -> [return: bb135, unwind continue];
    }

    bb135: {
        StorageDead(_269);
        _267 = [move _268];
        StorageDead(_268);
        _266 = &_267;
        _265 = &(*_266);
        _264 = move _265 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_265);
        _259 = Arguments::<'_>::new_v1(move _260, move _264) -> [return: bb136, unwind continue];
    }

    bb136: {
        StorageDead(_264);
        StorageDead(_260);
        _258 = format(move _259) -> [return: bb137, unwind continue];
    }

    bb137: {
        StorageDead(_259);
        StorageDead(_270);
        StorageDead(_267);
        StorageDead(_266);
        StorageDead(_262);
        _257 = move _258;
        StorageDead(_258);
        _256 = &_257;
        _255 = &(*_256);
        _254 = <String as Deref>::deref(move _255) -> [return: bb138, unwind: bb201];
    }

    bb138: {
        _253 = &(*_254);
        StorageDead(_255);
        _252 = solana_program::log::sol_log(move _253) -> [return: bb139, unwind: bb201];
    }

    bb139: {
        StorageDead(_253);
        drop(_257) -> [return: bb140, unwind: bb204];
    }

    bb140: {
        StorageDead(_257);
        StorageDead(_256);
        StorageDead(_254);
        StorageDead(_252);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        _372 = const _;
        _281 = &(*_372);
        _280 = &(*_281);
        _279 = move _280 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_280);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        _289 = &_122;
        _288 = &(*_289);
        _287 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _288) -> [return: bb141, unwind continue];
    }

    bb141: {
        StorageDead(_288);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        _292 = &_140;
        _291 = &(*_292);
        _290 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _291) -> [return: bb142, unwind continue];
    }

    bb142: {
        StorageDead(_291);
        StorageLive(_293);
        StorageLive(_294);
        StorageLive(_295);
        _295 = &_1;
        _294 = &(*_295);
        _293 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _294) -> [return: bb143, unwind continue];
    }

    bb143: {
        StorageDead(_294);
        StorageLive(_296);
        StorageLive(_297);
        StorageLive(_298);
        _298 = &_2;
        _297 = &(*_298);
        _296 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _297) -> [return: bb144, unwind continue];
    }

    bb144: {
        StorageDead(_297);
        _286 = [move _287, move _290, move _293, move _296];
        StorageDead(_296);
        StorageDead(_293);
        StorageDead(_290);
        StorageDead(_287);
        _285 = &_286;
        _284 = &(*_285);
        _283 = move _284 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_284);
        _278 = Arguments::<'_>::new_v1(move _279, move _283) -> [return: bb145, unwind continue];
    }

    bb145: {
        StorageDead(_283);
        StorageDead(_279);
        _277 = format(move _278) -> [return: bb146, unwind continue];
    }

    bb146: {
        StorageDead(_278);
        StorageDead(_298);
        StorageDead(_295);
        StorageDead(_292);
        StorageDead(_289);
        StorageDead(_286);
        StorageDead(_285);
        StorageDead(_281);
        _276 = move _277;
        StorageDead(_277);
        _275 = &_276;
        _274 = &(*_275);
        _273 = <String as Deref>::deref(move _274) -> [return: bb147, unwind: bb200];
    }

    bb147: {
        _272 = &(*_273);
        StorageDead(_274);
        _271 = solana_program::log::sol_log(move _272) -> [return: bb148, unwind: bb200];
    }

    bb148: {
        StorageDead(_272);
        drop(_276) -> [return: bb149, unwind: bb204];
    }

    bb149: {
        StorageDead(_276);
        StorageDead(_275);
        StorageDead(_273);
        StorageDead(_271);
        StorageLive(_299);
        _299 = _251;
        _246 = std::result::Result::<(), error::ErrorCode>::Err(move _299);
        StorageDead(_299);
        StorageDead(_251);
        goto -> bb150;
    }

    bb150: {
        StorageDead(_247);
        _245 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _246) -> [return: bb151, unwind continue];
    }

    bb151: {
        StorageDead(_246);
        _300 = discriminant(_245);
        switchInt(move _300) -> [0: bb152, 1: bb153, otherwise: bb20];
    }

    bb152: {
        StorageLive(_304);
        _304 = ((_245 as Continue).0: ());
        _244 = _304;
        StorageDead(_304);
        StorageDead(_245);
        StorageDead(_244);
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        _309 = _192;
        StorageLive(_310);
        _310 = _131;
        _308 = Lt(move _309, move _310);
        switchInt(move _308) -> [0: bb156, otherwise: bb155];
    }

    bb153: {
        StorageLive(_301);
        _301 = ((_245 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_303);
        _303 = _301;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _303) -> [return: bb154, unwind continue];
    }

    bb154: {
        StorageDead(_303);
        StorageDead(_301);
        StorageDead(_245);
        StorageDead(_244);
        goto -> bb182;
    }

    bb155: {
        StorageDead(_310);
        StorageDead(_309);
        StorageLive(_311);
        _311 = ();
        _307 = std::result::Result::<(), error::ErrorCode>::Ok(move _311);
        StorageDead(_311);
        goto -> bb172;
    }

    bb156: {
        StorageDead(_310);
        StorageDead(_309);
        StorageLive(_312);
        _312 = error::ErrorCode::PriceBandsBreached;
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        StorageLive(_323);
        _371 = const _;
        _323 = &(*_371);
        _322 = &(*_323);
        _321 = move _322 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_322);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        _331 = &_312;
        _330 = &(*_331);
        _329 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _330) -> [return: bb157, unwind continue];
    }

    bb157: {
        StorageDead(_330);
        _328 = [move _329];
        StorageDead(_329);
        _327 = &_328;
        _326 = &(*_327);
        _325 = move _326 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_326);
        _320 = Arguments::<'_>::new_v1(move _321, move _325) -> [return: bb158, unwind continue];
    }

    bb158: {
        StorageDead(_325);
        StorageDead(_321);
        _319 = format(move _320) -> [return: bb159, unwind continue];
    }

    bb159: {
        StorageDead(_320);
        StorageDead(_331);
        StorageDead(_328);
        StorageDead(_327);
        StorageDead(_323);
        _318 = move _319;
        StorageDead(_319);
        _317 = &_318;
        _316 = &(*_317);
        _315 = <String as Deref>::deref(move _316) -> [return: bb160, unwind: bb199];
    }

    bb160: {
        _314 = &(*_315);
        StorageDead(_316);
        _313 = solana_program::log::sol_log(move _314) -> [return: bb161, unwind: bb199];
    }

    bb161: {
        StorageDead(_314);
        drop(_318) -> [return: bb162, unwind: bb204];
    }

    bb162: {
        StorageDead(_318);
        StorageDead(_317);
        StorageDead(_315);
        StorageDead(_313);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        StorageLive(_338);
        StorageLive(_339);
        StorageLive(_340);
        StorageLive(_341);
        StorageLive(_342);
        _370 = const _;
        _342 = &(*_370);
        _341 = &(*_342);
        _340 = move _341 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_341);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        StorageLive(_349);
        StorageLive(_350);
        _350 = &_131;
        _349 = &(*_350);
        _348 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _349) -> [return: bb163, unwind continue];
    }

    bb163: {
        StorageDead(_349);
        StorageLive(_351);
        StorageLive(_352);
        StorageLive(_353);
        _353 = &_140;
        _352 = &(*_353);
        _351 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _352) -> [return: bb164, unwind continue];
    }

    bb164: {
        StorageDead(_352);
        StorageLive(_354);
        StorageLive(_355);
        StorageLive(_356);
        _356 = &_1;
        _355 = &(*_356);
        _354 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _355) -> [return: bb165, unwind continue];
    }

    bb165: {
        StorageDead(_355);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        _359 = &_3;
        _358 = &(*_359);
        _357 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _358) -> [return: bb166, unwind continue];
    }

    bb166: {
        StorageDead(_358);
        _347 = [move _348, move _351, move _354, move _357];
        StorageDead(_357);
        StorageDead(_354);
        StorageDead(_351);
        StorageDead(_348);
        _346 = &_347;
        _345 = &(*_346);
        _344 = move _345 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_345);
        _339 = Arguments::<'_>::new_v1(move _340, move _344) -> [return: bb167, unwind continue];
    }

    bb167: {
        StorageDead(_344);
        StorageDead(_340);
        _338 = format(move _339) -> [return: bb168, unwind continue];
    }

    bb168: {
        StorageDead(_339);
        StorageDead(_359);
        StorageDead(_356);
        StorageDead(_353);
        StorageDead(_350);
        StorageDead(_347);
        StorageDead(_346);
        StorageDead(_342);
        _337 = move _338;
        StorageDead(_338);
        _336 = &_337;
        _335 = &(*_336);
        _334 = <String as Deref>::deref(move _335) -> [return: bb169, unwind: bb198];
    }

    bb169: {
        _333 = &(*_334);
        StorageDead(_335);
        _332 = solana_program::log::sol_log(move _333) -> [return: bb170, unwind: bb198];
    }

    bb170: {
        StorageDead(_333);
        drop(_337) -> [return: bb171, unwind: bb204];
    }

    bb171: {
        StorageDead(_337);
        StorageDead(_336);
        StorageDead(_334);
        StorageDead(_332);
        StorageLive(_360);
        _360 = _312;
        _307 = std::result::Result::<(), error::ErrorCode>::Err(move _360);
        StorageDead(_360);
        StorageDead(_312);
        goto -> bb172;
    }

    bb172: {
        StorageDead(_308);
        _306 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _307) -> [return: bb173, unwind continue];
    }

    bb173: {
        StorageDead(_307);
        _361 = discriminant(_306);
        switchInt(move _361) -> [0: bb174, 1: bb175, otherwise: bb20];
    }

    bb174: {
        StorageLive(_365);
        _365 = ((_306 as Continue).0: ());
        _305 = _365;
        StorageDead(_365);
        StorageDead(_306);
        StorageDead(_305);
        StorageLive(_366);
        _366 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _366);
        StorageDead(_366);
        StorageDead(_192);
        StorageDead(_140);
        StorageDead(_131);
        StorageDead(_122);
        goto -> bb197;
    }

    bb175: {
        StorageLive(_362);
        _362 = ((_306 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_364);
        _364 = _362;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _364) -> [return: bb176, unwind continue];
    }

    bb176: {
        StorageDead(_364);
        StorageDead(_362);
        StorageDead(_306);
        StorageDead(_305);
        goto -> bb182;
    }

    bb177: {
        StorageDead(_193);
        StorageDead(_231);
        goto -> bb181;
    }

    bb178: {
        StorageDead(_202);
        StorageDead(_201);
        goto -> bb179;
    }

    bb179: {
        StorageDead(_199);
        StorageDead(_198);
        goto -> bb180;
    }

    bb180: {
        StorageDead(_196);
        StorageDead(_195);
        StorageDead(_193);
        goto -> bb181;
    }

    bb181: {
        StorageDead(_206);
        StorageDead(_203);
        StorageDead(_200);
        StorageDead(_197);
        StorageDead(_194);
        goto -> bb182;
    }

    bb182: {
        StorageDead(_192);
        goto -> bb188;
    }

    bb183: {
        StorageDead(_141);
        StorageDead(_179);
        goto -> bb187;
    }

    bb184: {
        StorageDead(_150);
        StorageDead(_149);
        goto -> bb185;
    }

    bb185: {
        StorageDead(_147);
        StorageDead(_146);
        goto -> bb186;
    }

    bb186: {
        StorageDead(_144);
        StorageDead(_143);
        StorageDead(_141);
        goto -> bb187;
    }

    bb187: {
        StorageDead(_154);
        StorageDead(_151);
        StorageDead(_148);
        StorageDead(_145);
        StorageDead(_142);
        goto -> bb188;
    }

    bb188: {
        StorageDead(_140);
        goto -> bb189;
    }

    bb189: {
        StorageDead(_131);
        goto -> bb190;
    }

    bb190: {
        StorageDead(_122);
        goto -> bb197;
    }

    bb191: {
        StorageDead(_109);
        goto -> bb192;
    }

    bb192: {
        StorageDead(_98);
        goto -> bb195;
    }

    bb193: {
        StorageDead(_85);
        goto -> bb194;
    }

    bb194: {
        StorageDead(_74);
        goto -> bb195;
    }

    bb195: {
        StorageDead(_70);
        StorageDead(_69);
        StorageDead(_67);
        goto -> bb197;
    }

    bb196: {
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb197;
    }

    bb197: {
        return;
    }

    bb198 (cleanup): {
        drop(_337) -> [return: bb204, unwind terminate(cleanup)];
    }

    bb199 (cleanup): {
        drop(_318) -> [return: bb204, unwind terminate(cleanup)];
    }

    bb200 (cleanup): {
        drop(_276) -> [return: bb204, unwind terminate(cleanup)];
    }

    bb201 (cleanup): {
        drop(_257) -> [return: bb204, unwind terminate(cleanup)];
    }

    bb202 (cleanup): {
        drop(_42) -> [return: bb204, unwind terminate(cleanup)];
    }

    bb203 (cleanup): {
        drop(_23) -> [return: bb204, unwind terminate(cleanup)];
    }

    bb204 (cleanup): {
        resume;
    }
}
