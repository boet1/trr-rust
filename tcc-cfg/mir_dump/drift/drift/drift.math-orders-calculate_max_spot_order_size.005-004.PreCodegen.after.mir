// MIR for `math::orders::calculate_max_spot_order_size` after PreCodegen

fn math::orders::calculate_max_spot_order_size(_1: &User, _2: u16, _3: controller::position::PositionDirection, _4: &PerpMarketMap<'_>, _5: &SpotMarketMap<'_>, _6: &mut OracleMap<'_>) -> std::result::Result<u64, error::ErrorCode> {
    debug user => _1;
    debug market_index => _2;
    debug direction => _3;
    debug perp_market_map => _4;
    debug spot_market_map => _5;
    debug oracle_map => _6;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let _7: u128;
    let _8: i128;
    let mut _9: state::margin_calculation::MarginCalculation;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::margin_calculation::MarginCalculation>;
    let mut _11: std::result::Result<state::margin_calculation::MarginCalculation, error::ErrorCode>;
    let mut _12: &state::user::User;
    let mut _13: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _14: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _15: &mut state::oracle_map::OracleMap<'_>;
    let mut _16: state::margin_calculation::MarginContext;
    let mut _17: state::margin_calculation::MarginContext;
    let mut _18: math::margin::MarginRequirementType;
    let mut _19: isize;
    let _20: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _21: !;
    let mut _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _23: state::margin_calculation::MarginCalculation;
    let mut _26: u32;
    let mut _28: u32;
    let mut _31: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _32: std::result::Result<i128, error::ErrorCode>;
    let mut _33: i128;
    let mut _34: i128;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _36: std::result::Result<i128, error::ErrorCode>;
    let mut _37: u128;
    let mut _38: isize;
    let mut _40: !;
    let mut _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _43: isize;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _49: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _50: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _51: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _52: &u16;
    let _53: &u16;
    let mut _54: isize;
    let mut _56: !;
    let mut _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _60: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _61: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _62: &mut state::oracle_map::OracleMap<'_>;
    let mut _63: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _64: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _65: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _66: &state::spot_market::SpotMarket;
    let _67: &state::spot_market::SpotMarket;
    let mut _68: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _69: isize;
    let mut _71: !;
    let mut _72: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _75: &state::spot_market::SpotMarket;
    let mut _76: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _78: i64;
    let mut _79: i64;
    let mut _81: &state::oracle::StrictOraclePrice;
    let mut _83: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::user::SpotPosition>;
    let mut _84: std::result::Result<&state::user::SpotPosition, error::ErrorCode>;
    let mut _85: &state::user::User;
    let mut _86: u16;
    let mut _87: isize;
    let mut _89: !;
    let mut _90: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _93: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _94: std::result::Result<i128, error::ErrorCode>;
    let mut _95: &state::user::SpotPosition;
    let mut _96: &state::spot_market::SpotMarket;
    let _97: &state::spot_market::SpotMarket;
    let mut _98: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _99: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _100: isize;
    let mut _102: !;
    let mut _103: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _107: [state::user::OrderFillSimulation; 2];
    let mut _108: [state::user::OrderFillSimulation; 2];
    let mut _109: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, [state::user::OrderFillSimulation; 2]>;
    let mut _110: std::result::Result<[state::user::OrderFillSimulation; 2], error::ErrorCode>;
    let mut _111: &state::user::SpotPosition;
    let mut _112: &state::spot_market::SpotMarket;
    let _113: &state::spot_market::SpotMarket;
    let mut _114: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _115: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _116: &state::oracle::StrictOraclePrice;
    let _117: &state::oracle::StrictOraclePrice;
    let mut _118: std::option::Option<i128>;
    let mut _119: i128;
    let mut _120: math::margin::MarginRequirementType;
    let mut _121: isize;
    let mut _123: !;
    let mut _124: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _126: {closure@programs/drift/src/math/orders.rs:996:14: 996:26};
    let mut _127: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _128: &state::oracle::StrictOraclePrice;
    let mut _129: &u32;
    let mut _131: state::user::OrderFillSimulation;
    let mut _132: state::user::OrderFillSimulation;
    let mut _133: state::user::OrderFillSimulation;
    let _134: ();
    let mut _135: bool;
    let mut _136: i128;
    let mut _137: bool;
    let mut _138: &controller::position::PositionDirection;
    let mut _139: &controller::position::PositionDirection;
    let _140: controller::position::PositionDirection;
    let mut _142: i128;
    let mut _143: i128;
    let mut _144: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _145: std::result::Result<i128, error::ErrorCode>;
    let mut _146: i128;
    let mut _147: i128;
    let mut _148: isize;
    let mut _150: !;
    let mut _151: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _154: ();
    let mut _155: bool;
    let mut _156: i128;
    let mut _158: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _159: std::result::Result<i128, error::ErrorCode>;
    let mut _160: i128;
    let mut _161: u32;
    let mut _162: &state::spot_market::SpotMarket;
    let mut _163: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _164: &state::oracle::StrictOraclePrice;
    let _165: &state::oracle::StrictOraclePrice;
    let mut _166: isize;
    let mut _168: !;
    let mut _169: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _172: u32;
    let mut _173: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _174: std::result::Result<u32, error::ErrorCode>;
    let mut _175: &state::spot_market::SpotMarket;
    let _176: &state::spot_market::SpotMarket;
    let mut _177: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _178: u128;
    let mut _179: i128;
    let mut _180: &math::margin::MarginRequirementType;
    let _181: &math::margin::MarginRequirementType;
    let _182: math::margin::MarginRequirementType;
    let mut _183: isize;
    let mut _185: !;
    let mut _186: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _188: u32;
    let mut _190: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _191: std::result::Result<i128, error::ErrorCode>;
    let mut _192: i128;
    let mut _193: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _194: std::result::Result<i128, error::ErrorCode>;
    let mut _195: i128;
    let mut _196: i128;
    let mut _197: i128;
    let mut _198: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _199: std::result::Result<i128, error::ErrorCode>;
    let mut _200: u32;
    let mut _201: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _202: std::result::Result<u32, error::ErrorCode>;
    let mut _203: u32;
    let mut _204: isize;
    let mut _206: !;
    let mut _207: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _209: isize;
    let mut _211: !;
    let mut _212: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _214: isize;
    let mut _216: !;
    let mut _217: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _219: isize;
    let mut _221: !;
    let mut _222: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _224: i128;
    let mut _225: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _226: std::result::Result<i128, error::ErrorCode>;
    let mut _227: i128;
    let mut _228: i128;
    let mut _229: isize;
    let mut _231: !;
    let mut _232: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _234: u64;
    let mut _235: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _236: std::result::Result<u64, error::ErrorCode>;
    let mut _237: i128;
    let mut _238: i128;
    let mut _239: isize;
    let mut _241: !;
    let mut _242: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _245: u32;
    let mut _246: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _247: std::result::Result<u32, error::ErrorCode>;
    let mut _248: &state::spot_market::SpotMarket;
    let _249: &state::spot_market::SpotMarket;
    let mut _250: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _251: u128;
    let mut _252: i128;
    let mut _253: i64;
    let mut _254: &math::margin::MarginRequirementType;
    let _255: &math::margin::MarginRequirementType;
    let _256: math::margin::MarginRequirementType;
    let mut _257: isize;
    let mut _259: !;
    let mut _260: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _262: u32;
    let mut _264: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _265: std::result::Result<i128, error::ErrorCode>;
    let mut _266: i128;
    let mut _267: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _268: std::result::Result<i128, error::ErrorCode>;
    let mut _269: i128;
    let mut _270: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _271: std::result::Result<i128, error::ErrorCode>;
    let mut _272: i128;
    let mut _273: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _274: std::result::Result<i128, error::ErrorCode>;
    let mut _275: i128;
    let mut _276: i128;
    let mut _277: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _278: std::result::Result<i128, error::ErrorCode>;
    let mut _279: i128;
    let mut _280: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _281: std::result::Result<i128, error::ErrorCode>;
    let mut _282: u32;
    let mut _283: isize;
    let mut _285: !;
    let mut _286: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _288: isize;
    let mut _290: !;
    let mut _291: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _293: i128;
    let mut _294: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _295: std::result::Result<i128, error::ErrorCode>;
    let mut _296: i64;
    let mut _297: isize;
    let mut _299: !;
    let mut _300: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _302: isize;
    let mut _304: !;
    let mut _305: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _307: isize;
    let mut _309: !;
    let mut _310: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _312: isize;
    let mut _314: !;
    let mut _315: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _317: isize;
    let mut _319: !;
    let mut _320: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _322: u64;
    let mut _323: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _324: std::result::Result<u64, error::ErrorCode>;
    let mut _325: u64;
    let mut _326: u64;
    let mut _327: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _328: std::result::Result<u64, error::ErrorCode>;
    let mut _329: i128;
    let mut _330: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _331: std::result::Result<i128, error::ErrorCode>;
    let mut _332: i128;
    let mut _333: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _334: std::result::Result<i128, error::ErrorCode>;
    let mut _335: i128;
    let mut _336: i128;
    let mut _337: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _338: std::result::Result<i128, error::ErrorCode>;
    let mut _339: u64;
    let mut _340: state::spot_market::SpotMarket;
    let mut _341: &state::spot_market::SpotMarket;
    let mut _342: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _343: isize;
    let mut _345: !;
    let mut _346: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _348: isize;
    let mut _350: !;
    let mut _351: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _353: i128;
    let mut _354: isize;
    let mut _356: !;
    let mut _357: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _359: isize;
    let mut _361: !;
    let mut _362: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _364: isize;
    let mut _366: !;
    let mut _367: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _369: i128;
    let mut _370: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _371: std::result::Result<i128, error::ErrorCode>;
    let mut _372: i128;
    let mut _373: i128;
    let mut _374: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _375: std::result::Result<i128, error::ErrorCode>;
    let mut _376: u64;
    let mut _377: isize;
    let mut _379: !;
    let mut _380: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _382: isize;
    let mut _384: !;
    let mut _385: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _387: bool;
    let mut _388: i128;
    let mut _389: bool;
    let mut _390: &controller::position::PositionDirection;
    let mut _391: &controller::position::PositionDirection;
    let _392: controller::position::PositionDirection;
    let mut _394: i128;
    let mut _395: i128;
    let mut _396: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _397: std::result::Result<i128, error::ErrorCode>;
    let mut _398: i128;
    let mut _399: i128;
    let mut _400: isize;
    let mut _402: !;
    let mut _403: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _406: ();
    let mut _407: bool;
    let mut _408: i128;
    let mut _410: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _411: std::result::Result<i128, error::ErrorCode>;
    let mut _412: i128;
    let mut _413: u32;
    let mut _414: &state::spot_market::SpotMarket;
    let mut _415: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _416: &state::oracle::StrictOraclePrice;
    let _417: &state::oracle::StrictOraclePrice;
    let mut _418: isize;
    let mut _420: !;
    let mut _421: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _424: u32;
    let mut _425: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _426: std::result::Result<u32, error::ErrorCode>;
    let mut _427: &state::spot_market::SpotMarket;
    let _428: &state::spot_market::SpotMarket;
    let mut _429: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _430: u128;
    let mut _431: i128;
    let mut _432: i64;
    let mut _433: &math::margin::MarginRequirementType;
    let _434: &math::margin::MarginRequirementType;
    let _435: math::margin::MarginRequirementType;
    let mut _436: isize;
    let mut _438: !;
    let mut _439: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _441: u32;
    let mut _443: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _444: std::result::Result<i128, error::ErrorCode>;
    let mut _445: i128;
    let mut _446: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _447: std::result::Result<i128, error::ErrorCode>;
    let mut _448: i128;
    let mut _449: i128;
    let mut _450: i128;
    let mut _451: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _452: std::result::Result<i128, error::ErrorCode>;
    let mut _453: u32;
    let mut _454: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _455: std::result::Result<u32, error::ErrorCode>;
    let mut _456: u32;
    let mut _457: isize;
    let mut _459: !;
    let mut _460: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _462: isize;
    let mut _464: !;
    let mut _465: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _467: isize;
    let mut _469: !;
    let mut _470: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _472: isize;
    let mut _474: !;
    let mut _475: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _477: i128;
    let mut _478: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _479: std::result::Result<i128, error::ErrorCode>;
    let mut _480: i128;
    let mut _481: i128;
    let mut _482: isize;
    let mut _484: !;
    let mut _485: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _487: u64;
    let mut _488: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _489: std::result::Result<u64, error::ErrorCode>;
    let mut _490: i128;
    let mut _491: i128;
    let mut _492: isize;
    let mut _494: !;
    let mut _495: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _498: u32;
    let mut _499: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _500: std::result::Result<u32, error::ErrorCode>;
    let mut _501: &state::spot_market::SpotMarket;
    let _502: &state::spot_market::SpotMarket;
    let mut _503: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _504: u128;
    let mut _505: i128;
    let mut _506: &math::margin::MarginRequirementType;
    let _507: &math::margin::MarginRequirementType;
    let _508: math::margin::MarginRequirementType;
    let mut _509: isize;
    let mut _511: !;
    let mut _512: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _514: u32;
    let mut _516: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _517: std::result::Result<i128, error::ErrorCode>;
    let mut _518: i128;
    let mut _519: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _520: std::result::Result<i128, error::ErrorCode>;
    let mut _521: i128;
    let mut _522: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _523: std::result::Result<i128, error::ErrorCode>;
    let mut _524: i128;
    let mut _525: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _526: std::result::Result<i128, error::ErrorCode>;
    let mut _527: i128;
    let mut _528: i128;
    let mut _529: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _530: std::result::Result<i128, error::ErrorCode>;
    let mut _531: i128;
    let mut _532: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _533: std::result::Result<i128, error::ErrorCode>;
    let mut _534: u32;
    let mut _535: isize;
    let mut _537: !;
    let mut _538: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _540: isize;
    let mut _542: !;
    let mut _543: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _545: i128;
    let mut _546: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _547: std::result::Result<i128, error::ErrorCode>;
    let mut _548: i64;
    let mut _549: isize;
    let mut _551: !;
    let mut _552: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _554: isize;
    let mut _556: !;
    let mut _557: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _559: isize;
    let mut _561: !;
    let mut _562: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _564: isize;
    let mut _566: !;
    let mut _567: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _569: isize;
    let mut _571: !;
    let mut _572: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _574: u64;
    let mut _575: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _576: std::result::Result<u64, error::ErrorCode>;
    let mut _577: u64;
    let mut _578: u64;
    let mut _579: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _580: std::result::Result<u64, error::ErrorCode>;
    let mut _581: i128;
    let mut _582: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _583: std::result::Result<i128, error::ErrorCode>;
    let mut _584: i128;
    let mut _585: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _586: std::result::Result<i128, error::ErrorCode>;
    let mut _587: i128;
    let mut _588: i128;
    let mut _589: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _590: std::result::Result<i128, error::ErrorCode>;
    let mut _591: u64;
    let mut _592: state::spot_market::SpotMarket;
    let mut _593: &state::spot_market::SpotMarket;
    let mut _594: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _595: isize;
    let mut _597: !;
    let mut _598: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _600: isize;
    let mut _602: !;
    let mut _603: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _605: i128;
    let mut _606: isize;
    let mut _608: !;
    let mut _609: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _611: isize;
    let mut _613: !;
    let mut _614: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _616: isize;
    let mut _618: !;
    let mut _619: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _621: i128;
    let mut _622: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _623: std::result::Result<i128, error::ErrorCode>;
    let mut _624: i128;
    let mut _625: i128;
    let mut _626: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _627: std::result::Result<i128, error::ErrorCode>;
    let mut _628: u64;
    let mut _629: isize;
    let mut _631: !;
    let mut _632: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _634: isize;
    let mut _636: !;
    let mut _637: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _639: ();
    let mut _640: bool;
    let mut _641: i128;
    let mut _642: !;
    let mut _643: u64;
    let mut _644: u64;
    let mut _645: &state::spot_market::SpotMarket;
    let mut _646: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _648: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _649: std::result::Result<u32, error::ErrorCode>;
    let mut _650: &state::spot_market::SpotMarket;
    let _651: &state::spot_market::SpotMarket;
    let mut _652: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _653: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _654: u128;
    let mut _655: i128;
    let mut _656: &state::oracle::StrictOraclePrice;
    let _657: &state::oracle::StrictOraclePrice;
    let mut _658: controller::position::PositionDirection;
    let mut _659: u32;
    let mut _660: u32;
    let mut _661: isize;
    let mut _663: !;
    let mut _664: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _668: (i128, i128);
    let mut _669: bool;
    let mut _670: u32;
    let mut _671: &state::spot_market::SpotMarket;
    let mut _672: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _673: i128;
    let mut _674: u32;
    let mut _675: u32;
    let mut _676: &state::spot_market::SpotMarket;
    let mut _677: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _678: (u32, bool);
    let mut _679: i128;
    let mut _680: u32;
    let mut _681: u32;
    let mut _682: &state::spot_market::SpotMarket;
    let mut _683: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _684: (u32, bool);
    let mut _686: &i128;
    let mut _687: &i128;
    let mut _688: &i128;
    let mut _689: &i64;
    let mut _690: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _691: &i128;
    let mut _692: &state::oracle::StrictOraclePrice;
    let mut _693: &controller::position::PositionDirection;
    let mut _694: &u32;
    let mut _695: &u32;
    let _698: ();
    let mut _699: std::ops::Range<i32>;
    let mut _700: std::ops::Range<i32>;
    let mut _702: ();
    let _703: ();
    let mut _704: std::option::Option<i32>;
    let mut _705: &mut std::ops::Range<i32>;
    let mut _706: &mut std::ops::Range<i32>;
    let mut _707: isize;
    let mut _708: !;
    let mut _711: (u64, u32);
    let mut _712: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u64, u32)>;
    let mut _713: std::result::Result<(u64, u32), error::ErrorCode>;
    let mut _714: &{closure@programs/drift/src/math/orders.rs:1144:58: 1144:86};
    let mut _715: (u32,);
    let mut _716: u32;
    let mut _717: isize;
    let mut _719: !;
    let mut _720: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _722: u64;
    let mut _723: u32;
    let mut _724: bool;
    let mut _725: u32;
    let mut _726: u32;
    let mut _727: !;
    let mut _728: u64;
    let mut _729: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _730: std::result::Result<u64, error::ErrorCode>;
    let mut _731: u64;
    let mut _732: u64;
    let mut _733: isize;
    let mut _735: !;
    let mut _736: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _738: u64;
    let mut _739: &state::spot_market::SpotMarket;
    let mut _740: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _747: isize;
    let mut _748: isize;
    let mut _749: isize;
    let mut _750: isize;
    let mut _751: isize;
    scope 1 {
        debug margin_requirement => _7;
        debug total_collateral => _8;
        let _24: u32;
        scope 6 {
            debug user_custom_margin_ratio => _24;
            let _25: u32;
            scope 7 {
                debug user_custom_liability_weight => _25;
                let _27: u32;
                scope 8 {
                    debug user_custom_asset_weight => _27;
                    let mut _29: u64;
                    scope 9 {
                        debug order_size_to_flip => _29;
                        let _30: i128;
                        let _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _42: i128;
                        let _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _47: i128;
                        scope 10 {
                            debug free_collateral => _30;
                            let _48: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                            let _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _58: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                            scope 19 {
                                debug spot_market => _48;
                                let _59: &state::oracle::OraclePriceData;
                                let _70: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _73: &state::oracle::OraclePriceData;
                                scope 24 {
                                    debug oracle_price_data => _59;
                                    let _74: i64;
                                    scope 29 {
                                        debug twap => _74;
                                        let _77: state::oracle::StrictOraclePrice;
                                        scope 30 {
                                            debug strict_oracle_price => _77;
                                            let _80: i64;
                                            scope 31 {
                                                debug max_oracle_price => _80;
                                                let _82: &state::user::SpotPosition;
                                                let _88: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _91: &state::user::SpotPosition;
                                                scope 32 {
                                                    debug spot_position => _82;
                                                    let _92: i128;
                                                    let _101: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _104: i128;
                                                    scope 37 {
                                                        debug signed_token_amount => _92;
                                                        let _105: state::user::OrderFillSimulation;
                                                        let _106: state::user::OrderFillSimulation;
                                                        let _122: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _125: [state::user::OrderFillSimulation; 2];
                                                        scope 42 {
                                                            debug bid_simulation => _105;
                                                            debug ask_simulation => _106;
                                                            let mut _130: i128;
                                                            scope 47 {
                                                                debug worst_case_token_amount => _130;
                                                                let mut _141: i128;
                                                                let _149: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _152: i128;
                                                                let mut _393: i128;
                                                                let _401: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _404: i128;
                                                                let _647: u32;
                                                                let _662: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _665: u32;
                                                                let mut _745: &controller::position::PositionDirection;
                                                                let mut _746: &controller::position::PositionDirection;
                                                                scope 48 {
                                                                    debug free_collateral_difference => _141;
                                                                    let mut _153: i128;
                                                                    scope 53 {
                                                                        debug token_amount => _153;
                                                                        let _157: i128;
                                                                        let _167: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _170: i128;
                                                                        let _244: u32;
                                                                        let _258: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _261: u32;
                                                                        let mut _741: &math::margin::MarginRequirementType;
                                                                        scope 54 {
                                                                            debug token_value => _157;
                                                                            let _171: u32;
                                                                            let _184: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _187: u32;
                                                                            let mut _742: &math::margin::MarginRequirementType;
                                                                            scope 59 {
                                                                                debug liability_weight => _171;
                                                                                let _189: i128;
                                                                                let _205: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _208: u32;
                                                                                let _210: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _213: i128;
                                                                                let _215: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _218: i128;
                                                                                let _220: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _223: i128;
                                                                                scope 64 {
                                                                                    debug free_collateral_regained => _189;
                                                                                    let _230: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _233: i128;
                                                                                    let _240: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _243: u64;
                                                                                    scope 81 {
                                                                                        debug residual => _230;
                                                                                        scope 82 {
                                                                                        }
                                                                                    }
                                                                                    scope 83 {
                                                                                        debug val => _233;
                                                                                        scope 84 {
                                                                                        }
                                                                                    }
                                                                                    scope 85 {
                                                                                        debug residual => _240;
                                                                                        scope 86 {
                                                                                        }
                                                                                    }
                                                                                    scope 87 {
                                                                                        debug val => _243;
                                                                                        scope 88 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                                scope 65 {
                                                                                    debug residual => _205;
                                                                                    scope 66 {
                                                                                    }
                                                                                }
                                                                                scope 67 {
                                                                                    debug val => _208;
                                                                                    scope 68 {
                                                                                    }
                                                                                }
                                                                                scope 69 {
                                                                                    debug residual => _210;
                                                                                    scope 70 {
                                                                                    }
                                                                                }
                                                                                scope 71 {
                                                                                    debug val => _213;
                                                                                    scope 72 {
                                                                                    }
                                                                                }
                                                                                scope 73 {
                                                                                    debug residual => _215;
                                                                                    scope 74 {
                                                                                    }
                                                                                }
                                                                                scope 75 {
                                                                                    debug val => _218;
                                                                                    scope 76 {
                                                                                    }
                                                                                }
                                                                                scope 77 {
                                                                                    debug residual => _220;
                                                                                    scope 78 {
                                                                                    }
                                                                                }
                                                                                scope 79 {
                                                                                    debug val => _223;
                                                                                    scope 80 {
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 60 {
                                                                                debug residual => _184;
                                                                                scope 61 {
                                                                                }
                                                                            }
                                                                            scope 62 {
                                                                                debug val => _187;
                                                                                scope 63 {
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 55 {
                                                                            debug residual => _167;
                                                                            scope 56 {
                                                                            }
                                                                        }
                                                                        scope 57 {
                                                                            debug val => _170;
                                                                            scope 58 {
                                                                            }
                                                                        }
                                                                        scope 89 {
                                                                            debug weight => _244;
                                                                            let _263: i128;
                                                                            let _284: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _287: i128;
                                                                            let _289: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _292: i128;
                                                                            let _298: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _301: i128;
                                                                            let _303: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _306: i128;
                                                                            let _308: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _311: i128;
                                                                            let _313: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _316: i128;
                                                                            let _318: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _321: i128;
                                                                            scope 94 {
                                                                                debug free_collateral_delta_per_order => _263;
                                                                                let _344: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _347: i128;
                                                                                let _349: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _352: i128;
                                                                                let _355: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _358: i128;
                                                                                let _360: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _363: u64;
                                                                                let _365: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _368: u64;
                                                                                let _378: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _381: i128;
                                                                                let _383: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _386: i128;
                                                                                scope 123 {
                                                                                    debug residual => _344;
                                                                                    scope 124 {
                                                                                    }
                                                                                }
                                                                                scope 125 {
                                                                                    debug val => _347;
                                                                                    scope 126 {
                                                                                    }
                                                                                }
                                                                                scope 127 {
                                                                                    debug residual => _349;
                                                                                    scope 128 {
                                                                                    }
                                                                                }
                                                                                scope 129 {
                                                                                    debug val => _352;
                                                                                    scope 130 {
                                                                                    }
                                                                                }
                                                                                scope 131 {
                                                                                    debug residual => _355;
                                                                                    scope 132 {
                                                                                    }
                                                                                }
                                                                                scope 133 {
                                                                                    debug val => _358;
                                                                                    scope 134 {
                                                                                    }
                                                                                }
                                                                                scope 135 {
                                                                                    debug residual => _360;
                                                                                    scope 136 {
                                                                                    }
                                                                                }
                                                                                scope 137 {
                                                                                    debug val => _363;
                                                                                    scope 138 {
                                                                                    }
                                                                                }
                                                                                scope 139 {
                                                                                    debug residual => _365;
                                                                                    scope 140 {
                                                                                    }
                                                                                }
                                                                                scope 141 {
                                                                                    debug val => _368;
                                                                                    scope 142 {
                                                                                    }
                                                                                }
                                                                                scope 143 {
                                                                                    debug residual => _378;
                                                                                    scope 144 {
                                                                                    }
                                                                                }
                                                                                scope 145 {
                                                                                    debug val => _381;
                                                                                    scope 146 {
                                                                                    }
                                                                                }
                                                                                scope 147 {
                                                                                    debug residual => _383;
                                                                                    scope 148 {
                                                                                    }
                                                                                }
                                                                                scope 149 {
                                                                                    debug val => _386;
                                                                                    scope 150 {
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 95 {
                                                                                debug residual => _284;
                                                                                scope 96 {
                                                                                }
                                                                            }
                                                                            scope 97 {
                                                                                debug val => _287;
                                                                                scope 98 {
                                                                                }
                                                                            }
                                                                            scope 99 {
                                                                                debug residual => _289;
                                                                                scope 100 {
                                                                                }
                                                                            }
                                                                            scope 101 {
                                                                                debug val => _292;
                                                                                scope 102 {
                                                                                }
                                                                            }
                                                                            scope 103 {
                                                                                debug residual => _298;
                                                                                scope 104 {
                                                                                }
                                                                            }
                                                                            scope 105 {
                                                                                debug val => _301;
                                                                                scope 106 {
                                                                                }
                                                                            }
                                                                            scope 107 {
                                                                                debug residual => _303;
                                                                                scope 108 {
                                                                                }
                                                                            }
                                                                            scope 109 {
                                                                                debug val => _306;
                                                                                scope 110 {
                                                                                }
                                                                            }
                                                                            scope 111 {
                                                                                debug residual => _308;
                                                                                scope 112 {
                                                                                }
                                                                            }
                                                                            scope 113 {
                                                                                debug val => _311;
                                                                                scope 114 {
                                                                                }
                                                                            }
                                                                            scope 115 {
                                                                                debug residual => _313;
                                                                                scope 116 {
                                                                                }
                                                                            }
                                                                            scope 117 {
                                                                                debug val => _316;
                                                                                scope 118 {
                                                                                }
                                                                            }
                                                                            scope 119 {
                                                                                debug residual => _318;
                                                                                scope 120 {
                                                                                }
                                                                            }
                                                                            scope 121 {
                                                                                debug val => _321;
                                                                                scope 122 {
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 90 {
                                                                            debug residual => _258;
                                                                            scope 91 {
                                                                            }
                                                                        }
                                                                        scope 92 {
                                                                            debug val => _261;
                                                                            scope 93 {
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                scope 49 {
                                                                    debug residual => _149;
                                                                    scope 50 {
                                                                    }
                                                                }
                                                                scope 51 {
                                                                    debug val => _152;
                                                                    scope 52 {
                                                                    }
                                                                }
                                                                scope 151 {
                                                                    debug free_collateral_difference => _393;
                                                                    let mut _405: i128;
                                                                    scope 156 {
                                                                        debug token_amount => _405;
                                                                        let _409: i128;
                                                                        let _419: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _422: i128;
                                                                        let _497: u32;
                                                                        let _510: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _513: u32;
                                                                        let mut _743: &math::margin::MarginRequirementType;
                                                                        scope 157 {
                                                                            debug token_value => _409;
                                                                            let _423: u32;
                                                                            let _437: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _440: u32;
                                                                            let mut _744: &math::margin::MarginRequirementType;
                                                                            scope 162 {
                                                                                debug asset_weight => _423;
                                                                                let _442: i128;
                                                                                let _458: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _461: u32;
                                                                                let _463: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _466: i128;
                                                                                let _468: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _471: i128;
                                                                                let _473: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _476: i128;
                                                                                scope 167 {
                                                                                    debug free_collateral_regained => _442;
                                                                                    let _483: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _486: i128;
                                                                                    let _493: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _496: u64;
                                                                                    scope 184 {
                                                                                        debug residual => _483;
                                                                                        scope 185 {
                                                                                        }
                                                                                    }
                                                                                    scope 186 {
                                                                                        debug val => _486;
                                                                                        scope 187 {
                                                                                        }
                                                                                    }
                                                                                    scope 188 {
                                                                                        debug residual => _493;
                                                                                        scope 189 {
                                                                                        }
                                                                                    }
                                                                                    scope 190 {
                                                                                        debug val => _496;
                                                                                        scope 191 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                                scope 168 {
                                                                                    debug residual => _458;
                                                                                    scope 169 {
                                                                                    }
                                                                                }
                                                                                scope 170 {
                                                                                    debug val => _461;
                                                                                    scope 171 {
                                                                                    }
                                                                                }
                                                                                scope 172 {
                                                                                    debug residual => _463;
                                                                                    scope 173 {
                                                                                    }
                                                                                }
                                                                                scope 174 {
                                                                                    debug val => _466;
                                                                                    scope 175 {
                                                                                    }
                                                                                }
                                                                                scope 176 {
                                                                                    debug residual => _468;
                                                                                    scope 177 {
                                                                                    }
                                                                                }
                                                                                scope 178 {
                                                                                    debug val => _471;
                                                                                    scope 179 {
                                                                                    }
                                                                                }
                                                                                scope 180 {
                                                                                    debug residual => _473;
                                                                                    scope 181 {
                                                                                    }
                                                                                }
                                                                                scope 182 {
                                                                                    debug val => _476;
                                                                                    scope 183 {
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 163 {
                                                                                debug residual => _437;
                                                                                scope 164 {
                                                                                }
                                                                            }
                                                                            scope 165 {
                                                                                debug val => _440;
                                                                                scope 166 {
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 158 {
                                                                            debug residual => _419;
                                                                            scope 159 {
                                                                            }
                                                                        }
                                                                        scope 160 {
                                                                            debug val => _422;
                                                                            scope 161 {
                                                                            }
                                                                        }
                                                                        scope 192 {
                                                                            debug weight => _497;
                                                                            let _515: i128;
                                                                            let _536: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _539: i128;
                                                                            let _541: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _544: i128;
                                                                            let _550: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _553: i128;
                                                                            let _555: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _558: i128;
                                                                            let _560: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _563: i128;
                                                                            let _565: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _568: i128;
                                                                            let _570: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _573: i128;
                                                                            scope 197 {
                                                                                debug free_collateral_delta_per_order => _515;
                                                                                let _596: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _599: i128;
                                                                                let _601: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _604: i128;
                                                                                let _607: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _610: i128;
                                                                                let _612: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _615: u64;
                                                                                let _617: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _620: u64;
                                                                                let _630: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _633: i128;
                                                                                let _635: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _638: i128;
                                                                                scope 226 {
                                                                                    debug residual => _596;
                                                                                    scope 227 {
                                                                                    }
                                                                                }
                                                                                scope 228 {
                                                                                    debug val => _599;
                                                                                    scope 229 {
                                                                                    }
                                                                                }
                                                                                scope 230 {
                                                                                    debug residual => _601;
                                                                                    scope 231 {
                                                                                    }
                                                                                }
                                                                                scope 232 {
                                                                                    debug val => _604;
                                                                                    scope 233 {
                                                                                    }
                                                                                }
                                                                                scope 234 {
                                                                                    debug residual => _607;
                                                                                    scope 235 {
                                                                                    }
                                                                                }
                                                                                scope 236 {
                                                                                    debug val => _610;
                                                                                    scope 237 {
                                                                                    }
                                                                                }
                                                                                scope 238 {
                                                                                    debug residual => _612;
                                                                                    scope 239 {
                                                                                    }
                                                                                }
                                                                                scope 240 {
                                                                                    debug val => _615;
                                                                                    scope 241 {
                                                                                    }
                                                                                }
                                                                                scope 242 {
                                                                                    debug residual => _617;
                                                                                    scope 243 {
                                                                                    }
                                                                                }
                                                                                scope 244 {
                                                                                    debug val => _620;
                                                                                    scope 245 {
                                                                                    }
                                                                                }
                                                                                scope 246 {
                                                                                    debug residual => _630;
                                                                                    scope 247 {
                                                                                    }
                                                                                }
                                                                                scope 248 {
                                                                                    debug val => _633;
                                                                                    scope 249 {
                                                                                    }
                                                                                }
                                                                                scope 250 {
                                                                                    debug residual => _635;
                                                                                    scope 251 {
                                                                                    }
                                                                                }
                                                                                scope 252 {
                                                                                    debug val => _638;
                                                                                    scope 253 {
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 198 {
                                                                                debug residual => _536;
                                                                                scope 199 {
                                                                                }
                                                                            }
                                                                            scope 200 {
                                                                                debug val => _539;
                                                                                scope 201 {
                                                                                }
                                                                            }
                                                                            scope 202 {
                                                                                debug residual => _541;
                                                                                scope 203 {
                                                                                }
                                                                            }
                                                                            scope 204 {
                                                                                debug val => _544;
                                                                                scope 205 {
                                                                                }
                                                                            }
                                                                            scope 206 {
                                                                                debug residual => _550;
                                                                                scope 207 {
                                                                                }
                                                                            }
                                                                            scope 208 {
                                                                                debug val => _553;
                                                                                scope 209 {
                                                                                }
                                                                            }
                                                                            scope 210 {
                                                                                debug residual => _555;
                                                                                scope 211 {
                                                                                }
                                                                            }
                                                                            scope 212 {
                                                                                debug val => _558;
                                                                                scope 213 {
                                                                                }
                                                                            }
                                                                            scope 214 {
                                                                                debug residual => _560;
                                                                                scope 215 {
                                                                                }
                                                                            }
                                                                            scope 216 {
                                                                                debug val => _563;
                                                                                scope 217 {
                                                                                }
                                                                            }
                                                                            scope 218 {
                                                                                debug residual => _565;
                                                                                scope 219 {
                                                                                }
                                                                            }
                                                                            scope 220 {
                                                                                debug val => _568;
                                                                                scope 221 {
                                                                                }
                                                                            }
                                                                            scope 222 {
                                                                                debug residual => _570;
                                                                                scope 223 {
                                                                                }
                                                                            }
                                                                            scope 224 {
                                                                                debug val => _573;
                                                                                scope 225 {
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 193 {
                                                                            debug residual => _510;
                                                                            scope 194 {
                                                                            }
                                                                        }
                                                                        scope 195 {
                                                                            debug val => _513;
                                                                            scope 196 {
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                scope 152 {
                                                                    debug residual => _401;
                                                                    scope 153 {
                                                                    }
                                                                }
                                                                scope 154 {
                                                                    debug val => _404;
                                                                    scope 155 {
                                                                    }
                                                                }
                                                                scope 254 {
                                                                    debug free_collateral_delta => _647;
                                                                    let _666: i128;
                                                                    let _667: i128;
                                                                    scope 259 {
                                                                        debug numerator_scale => _666;
                                                                        debug denominator_scale => _667;
                                                                        let _685: {closure@programs/drift/src/math/orders.rs:1144:58: 1144:86};
                                                                        scope 260 {
                                                                            debug calculate_order_size_and_free_collateral_delta => _685;
                                                                            let mut _696: u64;
                                                                            scope 261 {
                                                                                debug order_size => _696;
                                                                                let mut _697: u32;
                                                                                scope 262 {
                                                                                    debug updated_free_collateral_delta => _697;
                                                                                    let mut _701: std::ops::Range<i32>;
                                                                                    let _734: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _737: u64;
                                                                                    scope 263 {
                                                                                        debug iter => _701;
                                                                                        let _709: u64;
                                                                                        let _710: u32;
                                                                                        let _718: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _721: (u64, u32);
                                                                                        scope 264 {
                                                                                            debug new_order_size => _709;
                                                                                            debug new_free_collateral_delta => _710;
                                                                                        }
                                                                                        scope 265 {
                                                                                            debug residual => _718;
                                                                                            scope 266 {
                                                                                            }
                                                                                        }
                                                                                        scope 267 {
                                                                                            debug val => _721;
                                                                                            scope 268 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    scope 269 {
                                                                                        debug residual => _734;
                                                                                        scope 270 {
                                                                                        }
                                                                                    }
                                                                                    scope 271 {
                                                                                        debug val => _737;
                                                                                        scope 272 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                scope 255 {
                                                                    debug residual => _662;
                                                                    scope 256 {
                                                                    }
                                                                }
                                                                scope 257 {
                                                                    debug val => _665;
                                                                    scope 258 {
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        scope 43 {
                                                            debug residual => _122;
                                                            scope 44 {
                                                            }
                                                        }
                                                        scope 45 {
                                                            debug val => _125;
                                                            scope 46 {
                                                            }
                                                        }
                                                    }
                                                    scope 38 {
                                                        debug residual => _101;
                                                        scope 39 {
                                                        }
                                                    }
                                                    scope 40 {
                                                        debug val => _104;
                                                        scope 41 {
                                                        }
                                                    }
                                                }
                                                scope 33 {
                                                    debug residual => _88;
                                                    scope 34 {
                                                    }
                                                }
                                                scope 35 {
                                                    debug val => _91;
                                                    scope 36 {
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                scope 25 {
                                    debug residual => _70;
                                    scope 26 {
                                    }
                                }
                                scope 27 {
                                    debug val => _73;
                                    scope 28 {
                                    }
                                }
                            }
                            scope 20 {
                                debug residual => _55;
                                scope 21 {
                                }
                            }
                            scope 22 {
                                debug val => _58;
                                scope 23 {
                                }
                            }
                        }
                        scope 11 {
                            debug residual => _39;
                            scope 12 {
                            }
                        }
                        scope 13 {
                            debug val => _42;
                            scope 14 {
                            }
                        }
                        scope 15 {
                            debug residual => _44;
                            scope 16 {
                            }
                        }
                        scope 17 {
                            debug val => _47;
                            scope 18 {
                            }
                        }
                    }
                }
            }
        }
    }
    scope 2 {
        debug residual => _20;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _23;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &(*_1);
        StorageLive(_13);
        _13 = &(*_4);
        StorageLive(_14);
        _14 = &(*_5);
        StorageLive(_15);
        _15 = &mut (*_6);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = math::margin::MarginRequirementType::Initial;
        _17 = MarginContext::standard(move _18) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_18);
        _16 = MarginContext::strict(move _17, const true) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_17);
        _11 = math::margin::calculate_margin_requirement_and_total_collateral_and_liability_info(move _12, move _13, move _14, move _15, move _16) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        _10 = <std::result::Result<MarginCalculation, error::ErrorCode> as Try>::branch(move _11) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_11);
        _19 = discriminant(_10);
        switchInt(move _19) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_23);
        _23 = ((_10 as Continue).0: state::margin_calculation::MarginCalculation);
        _9 = _23;
        StorageDead(_23);
        StorageLive(_7);
        _7 = (_9.3: u128);
        StorageLive(_8);
        _8 = (_9.1: i128);
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_24);
        _24 = ((*_1).16: u32);
        StorageLive(_25);
        StorageLive(_26);
        _26 = ((*_1).16: u32);
        _25 = core::num::<impl u32>::saturating_add(move _26, const _) -> [return: bb9, unwind continue];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_20);
        _20 = ((_10 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_22);
        _22 = _20;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _22) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb437;
    }

    bb9: {
        StorageDead(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = _24;
        _27 = core::num::<impl u32>::saturating_sub(const _, move _28) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_28);
        StorageLive(_29);
        _29 = const 0_u64;
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = _8;
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = _7;
        _36 = <u128 as Cast>::cast::<i128>(move _37) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_37);
        _35 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _36) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_36);
        _38 = discriminant(_35);
        switchInt(move _38) -> [0: bb13, 1: bb14, otherwise: bb6];
    }

    bb13: {
        StorageLive(_42);
        _42 = ((_35 as Continue).0: i128);
        _34 = _42;
        StorageDead(_42);
        _32 = <i128 as SafeMath>::safe_sub(move _33, move _34) -> [return: bb16, unwind continue];
    }

    bb14: {
        StorageLive(_39);
        _39 = ((_35 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_41);
        _41 = _39;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _41) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_41);
        StorageDead(_39);
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_32);
        goto -> bb435;
    }

    bb16: {
        StorageDead(_34);
        StorageDead(_33);
        _31 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _32) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_32);
        _43 = discriminant(_31);
        switchInt(move _43) -> [0: bb18, 1: bb19, otherwise: bb6];
    }

    bb18: {
        StorageLive(_47);
        _47 = ((_31 as Continue).0: i128);
        _30 = _47;
        StorageDead(_47);
        StorageDead(_35);
        StorageDead(_31);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = &(*_5);
        StorageLive(_52);
        StorageLive(_53);
        _53 = &_2;
        _52 = &(*_53);
        _50 = SpotMarketMap::<'_>::get_ref(move _51, move _52) -> [return: bb21, unwind continue];
    }

    bb19: {
        StorageLive(_44);
        _44 = ((_31 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_46);
        _46 = _44;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _46) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_46);
        StorageDead(_44);
        goto -> bb435;
    }

    bb21: {
        StorageDead(_52);
        StorageDead(_51);
        _49 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _50) -> [return: bb22, unwind: bb439];
    }

    bb22: {
        StorageDead(_50);
        _54 = discriminant(_49);
        switchInt(move _54) -> [0: bb23, 1: bb24, otherwise: bb6];
    }

    bb23: {
        StorageLive(_58);
        _58 = move ((_49 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _48 = move _58;
        StorageDead(_58);
        _749 = discriminant(_49);
        StorageDead(_53);
        StorageDead(_49);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = &mut (*_6);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = &_48;
        _67 = <Ref<'_, SpotMarket> as Deref>::deref(move _68) -> [return: bb26, unwind: bb438];
    }

    bb24: {
        StorageLive(_55);
        _55 = ((_49 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_57);
        _57 = _55;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _57) -> [return: bb25, unwind: bb440];
    }

    bb25: {
        StorageDead(_57);
        StorageDead(_55);
        _747 = discriminant(_49);
        StorageDead(_53);
        StorageDead(_49);
        goto -> bb434;
    }

    bb26: {
        _66 = &(*_67);
        StorageDead(_68);
        _65 = SpotMarket::oracle_id(move _66) -> [return: bb27, unwind: bb438];
    }

    bb27: {
        StorageDead(_66);
        _64 = &_65;
        _63 = &(*_64);
        _61 = OracleMap::<'_>::get_price_data(move _62, move _63) -> [return: bb28, unwind: bb438];
    }

    bb28: {
        StorageDead(_63);
        StorageDead(_62);
        _60 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _61) -> [return: bb29, unwind: bb438];
    }

    bb29: {
        StorageDead(_61);
        _69 = discriminant(_60);
        switchInt(move _69) -> [0: bb30, 1: bb31, otherwise: bb6];
    }

    bb30: {
        StorageLive(_73);
        _73 = ((_60 as Continue).0: &state::oracle::OraclePriceData);
        _59 = _73;
        StorageDead(_73);
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_60);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _76 = &_48;
        _75 = <Ref<'_, SpotMarket> as Deref>::deref(move _76) -> [return: bb33, unwind: bb438];
    }

    bb31: {
        StorageLive(_70);
        _70 = ((_60 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_72);
        _72 = _70;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _72) -> [return: bb32, unwind: bb438];
    }

    bb32: {
        StorageDead(_72);
        StorageDead(_70);
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_60);
        goto -> bb433;
    }

    bb33: {
        StorageDead(_76);
        _74 = (((*_75).5: state::oracle::HistoricalOracleData).4: i64);
        StorageDead(_75);
        StorageLive(_77);
        StorageLive(_78);
        _78 = ((*_59).0: i64);
        StorageLive(_79);
        _79 = _74;
        _77 = StrictOraclePrice::new(move _78, move _79, const true) -> [return: bb34, unwind: bb438];
    }

    bb34: {
        StorageDead(_79);
        StorageDead(_78);
        StorageLive(_80);
        StorageLive(_81);
        _81 = &_77;
        _80 = StrictOraclePrice::max(move _81) -> [return: bb35, unwind: bb438];
    }

    bb35: {
        StorageDead(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &(*_1);
        StorageLive(_86);
        _86 = _2;
        _84 = User::get_spot_position(move _85, move _86) -> [return: bb36, unwind: bb438];
    }

    bb36: {
        StorageDead(_86);
        StorageDead(_85);
        _83 = <std::result::Result<&SpotPosition, error::ErrorCode> as Try>::branch(move _84) -> [return: bb37, unwind: bb438];
    }

    bb37: {
        StorageDead(_84);
        _87 = discriminant(_83);
        switchInt(move _87) -> [0: bb38, 1: bb39, otherwise: bb6];
    }

    bb38: {
        StorageLive(_91);
        _91 = ((_83 as Continue).0: &state::user::SpotPosition);
        _82 = _91;
        StorageDead(_91);
        StorageDead(_83);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        _95 = &(*_82);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = &_48;
        _98 = &(*_99);
        _97 = <Ref<'_, SpotMarket> as Deref>::deref(move _98) -> [return: bb41, unwind: bb438];
    }

    bb39: {
        StorageLive(_88);
        _88 = ((_83 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_90);
        _90 = _88;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _90) -> [return: bb40, unwind: bb438];
    }

    bb40: {
        StorageDead(_90);
        StorageDead(_88);
        StorageDead(_83);
        goto -> bb432;
    }

    bb41: {
        _96 = &(*_97);
        StorageDead(_98);
        _94 = SpotPosition::get_signed_token_amount(move _95, move _96) -> [return: bb42, unwind: bb438];
    }

    bb42: {
        StorageDead(_96);
        StorageDead(_95);
        _93 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _94) -> [return: bb43, unwind: bb438];
    }

    bb43: {
        StorageDead(_94);
        _100 = discriminant(_93);
        switchInt(move _100) -> [0: bb44, 1: bb45, otherwise: bb6];
    }

    bb44: {
        StorageLive(_104);
        _104 = ((_93 as Continue).0: i128);
        _92 = _104;
        StorageDead(_104);
        StorageDead(_99);
        StorageDead(_97);
        StorageDead(_93);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        _111 = &(*_82);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        _115 = &_48;
        _114 = &(*_115);
        _113 = <Ref<'_, SpotMarket> as Deref>::deref(move _114) -> [return: bb47, unwind: bb438];
    }

    bb45: {
        StorageLive(_101);
        _101 = ((_93 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_103);
        _103 = _101;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _103) -> [return: bb46, unwind: bb438];
    }

    bb46: {
        StorageDead(_103);
        StorageDead(_101);
        StorageDead(_99);
        StorageDead(_97);
        StorageDead(_93);
        goto -> bb431;
    }

    bb47: {
        _112 = &(*_113);
        StorageDead(_114);
        StorageLive(_116);
        StorageLive(_117);
        _117 = &_77;
        _116 = &(*_117);
        StorageLive(_118);
        StorageLive(_119);
        _119 = _92;
        _118 = Option::<i128>::Some(move _119);
        StorageDead(_119);
        StorageLive(_120);
        _120 = math::margin::MarginRequirementType::Initial;
        _110 = SpotPosition::simulate_fills_both_sides(move _111, move _112, move _116, move _118, move _120) -> [return: bb48, unwind: bb438];
    }

    bb48: {
        StorageDead(_120);
        StorageDead(_118);
        StorageDead(_116);
        StorageDead(_112);
        StorageDead(_111);
        _109 = <std::result::Result<[OrderFillSimulation; 2], error::ErrorCode> as Try>::branch(move _110) -> [return: bb49, unwind: bb438];
    }

    bb49: {
        StorageDead(_110);
        _121 = discriminant(_109);
        switchInt(move _121) -> [0: bb50, 1: bb51, otherwise: bb6];
    }

    bb50: {
        StorageLive(_125);
        _125 = ((_109 as Continue).0: [state::user::OrderFillSimulation; 2]);
        _108 = _125;
        StorageDead(_125);
        StorageLive(_126);
        StorageLive(_127);
        _127 = &_48;
        StorageLive(_128);
        _128 = &_77;
        StorageLive(_129);
        _129 = &_24;
        _126 = {closure@programs/drift/src/math/orders.rs:996:14: 996:26} { spot_market: move _127, strict_oracle_price: move _128, user_custom_margin_ratio: move _129 };
        StorageDead(_129);
        StorageDead(_128);
        StorageDead(_127);
        _107 = std::array::<impl [OrderFillSimulation; 2]>::map::<{closure@programs/drift/src/math/orders.rs:996:14: 996:26}, OrderFillSimulation>(move _108, move _126) -> [return: bb53, unwind: bb438];
    }

    bb51: {
        StorageLive(_122);
        _122 = ((_109 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_124);
        _124 = _122;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _124) -> [return: bb52, unwind: bb438];
    }

    bb52: {
        StorageDead(_124);
        StorageDead(_122);
        StorageDead(_108);
        StorageDead(_117);
        StorageDead(_115);
        StorageDead(_113);
        StorageDead(_109);
        StorageDead(_107);
        goto -> bb431;
    }

    bb53: {
        StorageDead(_126);
        StorageDead(_108);
        StorageLive(_105);
        _105 = _107[0 of 2];
        StorageLive(_106);
        _106 = _107[1 of 2];
        StorageDead(_117);
        StorageDead(_115);
        StorageDead(_113);
        StorageDead(_109);
        StorageDead(_107);
        StorageLive(_131);
        StorageLive(_132);
        _132 = _106;
        StorageLive(_133);
        _133 = _105;
        _131 = OrderFillSimulation::riskier_side(move _132, move _133) -> [return: bb54, unwind: bb438];
    }

    bb54: {
        StorageDead(_133);
        StorageDead(_132);
        StorageLive(_130);
        _130 = (_131.0: i128);
        StorageDead(_131);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        _136 = _130;
        _135 = Lt(move _136, const 0_i128);
        switchInt(move _135) -> [0: bb196, otherwise: bb55];
    }

    bb55: {
        StorageDead(_136);
        StorageLive(_137);
        StorageLive(_138);
        _138 = &_3;
        StorageLive(_139);
        _746 = const _;
        _139 = &(*_746);
        _137 = <controller::position::PositionDirection as PartialEq>::eq(move _138, move _139) -> [return: bb56, unwind: bb438];
    }

    bb56: {
        switchInt(move _137) -> [0: bb195, otherwise: bb57];
    }

    bb57: {
        StorageDead(_139);
        StorageDead(_138);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        _146 = (_105.4: i128);
        StorageLive(_147);
        _147 = (_106.4: i128);
        _145 = <i128 as SafeMath>::safe_sub(move _146, move _147) -> [return: bb58, unwind: bb438];
    }

    bb58: {
        StorageDead(_147);
        StorageDead(_146);
        _144 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _145) -> [return: bb59, unwind: bb438];
    }

    bb59: {
        StorageDead(_145);
        _148 = discriminant(_144);
        switchInt(move _148) -> [0: bb60, 1: bb61, otherwise: bb6];
    }

    bb60: {
        StorageLive(_152);
        _152 = ((_144 as Continue).0: i128);
        _143 = _152;
        StorageDead(_152);
        _142 = <i128 as Ord>::max(move _143, const 0_i128) -> [return: bb63, unwind: bb438];
    }

    bb61: {
        StorageLive(_149);
        _149 = ((_144 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_151);
        _151 = _149;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _151) -> [return: bb62, unwind: bb438];
    }

    bb62: {
        StorageDead(_151);
        StorageDead(_149);
        StorageDead(_143);
        StorageDead(_142);
        StorageDead(_144);
        goto -> bb428;
    }

    bb63: {
        StorageDead(_143);
        _141 = core::num::<impl i128>::abs(move _142) -> [return: bb64, unwind: bb438];
    }

    bb64: {
        StorageDead(_142);
        StorageDead(_144);
        StorageLive(_153);
        _153 = (_105.0: i128);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        _156 = _153;
        _155 = Lt(move _156, const 0_i128);
        switchInt(move _155) -> [0: bb112, otherwise: bb65];
    }

    bb65: {
        StorageDead(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        _160 = _153;
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        _163 = &_48;
        _162 = <Ref<'_, SpotMarket> as Deref>::deref(move _163) -> [return: bb66, unwind: bb438];
    }

    bb66: {
        StorageDead(_163);
        _161 = ((*_162).41: u32);
        StorageLive(_164);
        StorageLive(_165);
        _165 = &_77;
        _164 = &(*_165);
        _159 = get_strict_token_value(move _160, move _161, move _164) -> [return: bb67, unwind: bb438];
    }

    bb67: {
        StorageDead(_164);
        StorageDead(_161);
        StorageDead(_160);
        _158 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _159) -> [return: bb68, unwind: bb438];
    }

    bb68: {
        StorageDead(_159);
        _166 = discriminant(_158);
        switchInt(move _166) -> [0: bb69, 1: bb70, otherwise: bb6];
    }

    bb69: {
        StorageLive(_170);
        _170 = ((_158 as Continue).0: i128);
        _157 = _170;
        StorageDead(_170);
        StorageDead(_165);
        StorageDead(_162);
        StorageDead(_158);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        _177 = &_48;
        _176 = <Ref<'_, SpotMarket> as Deref>::deref(move _177) -> [return: bb72, unwind: bb438];
    }

    bb70: {
        StorageLive(_167);
        _167 = ((_158 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_169);
        _169 = _167;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _169) -> [return: bb71, unwind: bb438];
    }

    bb71: {
        StorageDead(_169);
        StorageDead(_167);
        StorageDead(_165);
        StorageDead(_162);
        StorageDead(_158);
        goto -> bb426;
    }

    bb72: {
        _175 = &(*_176);
        StorageDead(_177);
        StorageLive(_178);
        StorageLive(_179);
        _179 = _153;
        _178 = core::num::<impl i128>::unsigned_abs(move _179) -> [return: bb73, unwind: bb438];
    }

    bb73: {
        StorageDead(_179);
        StorageLive(_180);
        StorageLive(_181);
        _742 = const _;
        _181 = &(*_742);
        _180 = &(*_181);
        _174 = SpotMarket::get_liability_weight(move _175, move _178, move _180) -> [return: bb74, unwind: bb438];
    }

    bb74: {
        StorageDead(_180);
        StorageDead(_178);
        StorageDead(_175);
        _173 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _174) -> [return: bb75, unwind: bb438];
    }

    bb75: {
        StorageDead(_174);
        _183 = discriminant(_173);
        switchInt(move _183) -> [0: bb76, 1: bb77, otherwise: bb6];
    }

    bb76: {
        StorageLive(_187);
        _187 = ((_173 as Continue).0: u32);
        _172 = _187;
        StorageDead(_187);
        StorageLive(_188);
        _188 = _25;
        _171 = <u32 as Ord>::max(move _172, move _188) -> [return: bb79, unwind: bb438];
    }

    bb77: {
        StorageLive(_184);
        _184 = ((_173 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_186);
        _186 = _184;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _186) -> [return: bb78, unwind: bb438];
    }

    bb78: {
        StorageDead(_186);
        StorageDead(_184);
        StorageDead(_172);
        StorageDead(_181);
        StorageDead(_176);
        StorageDead(_173);
        goto -> bb425;
    }

    bb79: {
        StorageDead(_188);
        StorageDead(_172);
        StorageDead(_181);
        StorageDead(_176);
        StorageDead(_173);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        _196 = _157;
        _195 = core::num::<impl i128>::abs(move _196) -> [return: bb80, unwind: bb438];
    }

    bb80: {
        StorageDead(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        _203 = _171;
        _202 = <u32 as SafeMath>::safe_sub(move _203, const _) -> [return: bb81, unwind: bb438];
    }

    bb81: {
        StorageDead(_203);
        _201 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _202) -> [return: bb82, unwind: bb438];
    }

    bb82: {
        StorageDead(_202);
        _204 = discriminant(_201);
        switchInt(move _204) -> [0: bb83, 1: bb84, otherwise: bb6];
    }

    bb83: {
        StorageLive(_208);
        _208 = ((_201 as Continue).0: u32);
        _200 = _208;
        StorageDead(_208);
        _199 = <u32 as Cast>::cast::<i128>(move _200) -> [return: bb86, unwind: bb438];
    }

    bb84: {
        StorageLive(_205);
        _205 = ((_201 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_207);
        _207 = _205;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _207) -> [return: bb85, unwind: bb438];
    }

    bb85: {
        StorageDead(_207);
        StorageDead(_205);
        StorageDead(_200);
        StorageDead(_199);
        goto -> bb421;
    }

    bb86: {
        StorageDead(_200);
        _198 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _199) -> [return: bb87, unwind: bb438];
    }

    bb87: {
        StorageDead(_199);
        _209 = discriminant(_198);
        switchInt(move _209) -> [0: bb88, 1: bb89, otherwise: bb6];
    }

    bb88: {
        StorageLive(_213);
        _213 = ((_198 as Continue).0: i128);
        _197 = _213;
        StorageDead(_213);
        _194 = <i128 as SafeMath>::safe_mul(move _195, move _197) -> [return: bb91, unwind: bb438];
    }

    bb89: {
        StorageLive(_210);
        _210 = ((_198 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_212);
        _212 = _210;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _212) -> [return: bb90, unwind: bb438];
    }

    bb90: {
        StorageDead(_212);
        StorageDead(_210);
        goto -> bb421;
    }

    bb91: {
        StorageDead(_197);
        StorageDead(_195);
        _193 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _194) -> [return: bb92, unwind: bb438];
    }

    bb92: {
        StorageDead(_194);
        _214 = discriminant(_193);
        switchInt(move _214) -> [0: bb93, 1: bb94, otherwise: bb6];
    }

    bb93: {
        StorageLive(_218);
        _218 = ((_193 as Continue).0: i128);
        _192 = _218;
        StorageDead(_218);
        _191 = <i128 as SafeMath>::safe_div(move _192, const _) -> [return: bb96, unwind: bb438];
    }

    bb94: {
        StorageLive(_215);
        _215 = ((_193 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_217);
        _217 = _215;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _217) -> [return: bb95, unwind: bb438];
    }

    bb95: {
        StorageDead(_217);
        StorageDead(_215);
        goto -> bb422;
    }

    bb96: {
        StorageDead(_192);
        _190 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _191) -> [return: bb97, unwind: bb438];
    }

    bb97: {
        StorageDead(_191);
        _219 = discriminant(_190);
        switchInt(move _219) -> [0: bb98, 1: bb99, otherwise: bb6];
    }

    bb98: {
        StorageLive(_223);
        _223 = ((_190 as Continue).0: i128);
        _189 = _223;
        StorageDead(_223);
        StorageDead(_201);
        StorageDead(_198);
        StorageDead(_193);
        StorageDead(_190);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        _227 = _141;
        StorageLive(_228);
        _228 = _189;
        _226 = <i128 as SafeMath>::safe_add(move _227, move _228) -> [return: bb101, unwind: bb438];
    }

    bb99: {
        StorageLive(_220);
        _220 = ((_190 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_222);
        _222 = _220;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _222) -> [return: bb100, unwind: bb438];
    }

    bb100: {
        StorageDead(_222);
        StorageDead(_220);
        goto -> bb423;
    }

    bb101: {
        StorageDead(_228);
        StorageDead(_227);
        _225 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _226) -> [return: bb102, unwind: bb438];
    }

    bb102: {
        StorageDead(_226);
        _229 = discriminant(_225);
        switchInt(move _229) -> [0: bb103, 1: bb104, otherwise: bb6];
    }

    bb103: {
        StorageLive(_233);
        _233 = ((_225 as Continue).0: i128);
        _224 = _233;
        StorageDead(_233);
        _141 = move _224;
        StorageDead(_224);
        StorageDead(_225);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        _238 = _153;
        _237 = core::num::<impl i128>::abs(move _238) -> [return: bb106, unwind: bb438];
    }

    bb104: {
        StorageLive(_230);
        _230 = ((_225 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_232);
        _232 = _230;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _232) -> [return: bb105, unwind: bb438];
    }

    bb105: {
        StorageDead(_232);
        StorageDead(_230);
        StorageDead(_224);
        StorageDead(_225);
        goto -> bb424;
    }

    bb106: {
        StorageDead(_238);
        _236 = <i128 as Cast>::cast::<u64>(move _237) -> [return: bb107, unwind: bb438];
    }

    bb107: {
        StorageDead(_237);
        _235 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _236) -> [return: bb108, unwind: bb438];
    }

    bb108: {
        StorageDead(_236);
        _239 = discriminant(_235);
        switchInt(move _239) -> [0: bb109, 1: bb110, otherwise: bb6];
    }

    bb109: {
        StorageLive(_243);
        _243 = ((_235 as Continue).0: u64);
        _234 = _243;
        StorageDead(_243);
        _29 = move _234;
        StorageDead(_234);
        StorageDead(_235);
        _153 = const 0_i128;
        _154 = const ();
        StorageDead(_189);
        StorageDead(_171);
        StorageDead(_157);
        goto -> bb113;
    }

    bb110: {
        StorageLive(_240);
        _240 = ((_235 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_242);
        _242 = _240;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _242) -> [return: bb111, unwind: bb438];
    }

    bb111: {
        StorageDead(_242);
        StorageDead(_240);
        StorageDead(_234);
        StorageDead(_235);
        goto -> bb424;
    }

    bb112: {
        StorageDead(_156);
        _154 = const ();
        goto -> bb113;
    }

    bb113: {
        StorageDead(_155);
        StorageDead(_154);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        _250 = &_48;
        _249 = <Ref<'_, SpotMarket> as Deref>::deref(move _250) -> [return: bb114, unwind: bb438];
    }

    bb114: {
        _248 = &(*_249);
        StorageDead(_250);
        StorageLive(_251);
        StorageLive(_252);
        _252 = _153;
        _251 = core::num::<impl i128>::unsigned_abs(move _252) -> [return: bb115, unwind: bb438];
    }

    bb115: {
        StorageDead(_252);
        StorageLive(_253);
        _253 = (_77.0: i64);
        StorageLive(_254);
        StorageLive(_255);
        _741 = const _;
        _255 = &(*_741);
        _254 = &(*_255);
        _247 = SpotMarket::get_asset_weight(move _248, move _251, move _253, move _254) -> [return: bb116, unwind: bb438];
    }

    bb116: {
        StorageDead(_254);
        StorageDead(_253);
        StorageDead(_251);
        StorageDead(_248);
        _246 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _247) -> [return: bb117, unwind: bb438];
    }

    bb117: {
        StorageDead(_247);
        _257 = discriminant(_246);
        switchInt(move _257) -> [0: bb118, 1: bb119, otherwise: bb6];
    }

    bb118: {
        StorageLive(_261);
        _261 = ((_246 as Continue).0: u32);
        _245 = _261;
        StorageDead(_261);
        StorageLive(_262);
        _262 = _27;
        _244 = <u32 as Ord>::min(move _245, move _262) -> [return: bb121, unwind: bb438];
    }

    bb119: {
        StorageLive(_258);
        _258 = ((_246 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_260);
        _260 = _258;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _260) -> [return: bb120, unwind: bb438];
    }

    bb120: {
        StorageDead(_260);
        StorageDead(_258);
        StorageDead(_245);
        StorageDead(_255);
        StorageDead(_249);
        StorageDead(_246);
        goto -> bb420;
    }

    bb121: {
        StorageDead(_262);
        StorageDead(_245);
        StorageDead(_255);
        StorageDead(_249);
        StorageDead(_246);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        _282 = _244;
        _281 = <u32 as Cast>::cast::<i128>(move _282) -> [return: bb122, unwind: bb438];
    }

    bb122: {
        StorageDead(_282);
        _280 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _281) -> [return: bb123, unwind: bb438];
    }

    bb123: {
        StorageDead(_281);
        _283 = discriminant(_280);
        switchInt(move _283) -> [0: bb124, 1: bb125, otherwise: bb6];
    }

    bb124: {
        StorageLive(_287);
        _287 = ((_280 as Continue).0: i128);
        _279 = _287;
        StorageDead(_287);
        _278 = <i128 as SafeMath>::safe_sub(move _279, const _) -> [return: bb127, unwind: bb438];
    }

    bb125: {
        StorageLive(_284);
        _284 = ((_280 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_286);
        _286 = _284;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _286) -> [return: bb126, unwind: bb438];
    }

    bb126: {
        StorageDead(_286);
        StorageDead(_284);
        StorageDead(_279);
        StorageDead(_278);
        goto -> bb417;
    }

    bb127: {
        StorageDead(_279);
        _277 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _278) -> [return: bb128, unwind: bb438];
    }

    bb128: {
        StorageDead(_278);
        _288 = discriminant(_277);
        switchInt(move _288) -> [0: bb129, 1: bb130, otherwise: bb6];
    }

    bb129: {
        StorageLive(_292);
        _292 = ((_277 as Continue).0: i128);
        _276 = _292;
        StorageDead(_292);
        _275 = core::num::<impl i128>::abs(move _276) -> [return: bb132, unwind: bb438];
    }

    bb130: {
        StorageLive(_289);
        _289 = ((_277 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_291);
        _291 = _289;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _291) -> [return: bb131, unwind: bb438];
    }

    bb131: {
        StorageDead(_291);
        StorageDead(_289);
        goto -> bb417;
    }

    bb132: {
        StorageDead(_276);
        StorageLive(_293);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        _296 = _80;
        _295 = <i64 as Cast>::cast::<i128>(move _296) -> [return: bb133, unwind: bb438];
    }

    bb133: {
        StorageDead(_296);
        _294 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _295) -> [return: bb134, unwind: bb438];
    }

    bb134: {
        StorageDead(_295);
        _297 = discriminant(_294);
        switchInt(move _297) -> [0: bb135, 1: bb136, otherwise: bb6];
    }

    bb135: {
        StorageLive(_301);
        _301 = ((_294 as Continue).0: i128);
        _293 = _301;
        StorageDead(_301);
        _274 = <i128 as SafeMath>::safe_mul(move _275, move _293) -> [return: bb138, unwind: bb438];
    }

    bb136: {
        StorageLive(_298);
        _298 = ((_294 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_300);
        _300 = _298;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _300) -> [return: bb137, unwind: bb438];
    }

    bb137: {
        StorageDead(_300);
        StorageDead(_298);
        StorageDead(_293);
        StorageDead(_275);
        StorageDead(_274);
        goto -> bb413;
    }

    bb138: {
        StorageDead(_293);
        StorageDead(_275);
        _273 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _274) -> [return: bb139, unwind: bb438];
    }

    bb139: {
        StorageDead(_274);
        _302 = discriminant(_273);
        switchInt(move _302) -> [0: bb140, 1: bb141, otherwise: bb6];
    }

    bb140: {
        StorageLive(_306);
        _306 = ((_273 as Continue).0: i128);
        _272 = _306;
        StorageDead(_306);
        _271 = <i128 as SafeMath>::safe_div(move _272, const _) -> [return: bb143, unwind: bb438];
    }

    bb141: {
        StorageLive(_303);
        _303 = ((_273 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_305);
        _305 = _303;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _305) -> [return: bb142, unwind: bb438];
    }

    bb142: {
        StorageDead(_305);
        StorageDead(_303);
        goto -> bb413;
    }

    bb143: {
        StorageDead(_272);
        _270 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _271) -> [return: bb144, unwind: bb438];
    }

    bb144: {
        StorageDead(_271);
        _307 = discriminant(_270);
        switchInt(move _307) -> [0: bb145, 1: bb146, otherwise: bb6];
    }

    bb145: {
        StorageLive(_311);
        _311 = ((_270 as Continue).0: i128);
        _269 = _311;
        StorageDead(_311);
        _268 = <i128 as SafeMath>::safe_mul(move _269, const _) -> [return: bb148, unwind: bb438];
    }

    bb146: {
        StorageLive(_308);
        _308 = ((_270 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_310);
        _310 = _308;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _310) -> [return: bb147, unwind: bb438];
    }

    bb147: {
        StorageDead(_310);
        StorageDead(_308);
        goto -> bb414;
    }

    bb148: {
        StorageDead(_269);
        _267 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _268) -> [return: bb149, unwind: bb438];
    }

    bb149: {
        StorageDead(_268);
        _312 = discriminant(_267);
        switchInt(move _312) -> [0: bb150, 1: bb151, otherwise: bb6];
    }

    bb150: {
        StorageLive(_316);
        _316 = ((_267 as Continue).0: i128);
        _266 = _316;
        StorageDead(_316);
        _265 = <i128 as SafeMath>::safe_div(move _266, const _) -> [return: bb153, unwind: bb438];
    }

    bb151: {
        StorageLive(_313);
        _313 = ((_267 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_315);
        _315 = _313;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _315) -> [return: bb152, unwind: bb438];
    }

    bb152: {
        StorageDead(_315);
        StorageDead(_313);
        goto -> bb415;
    }

    bb153: {
        StorageDead(_266);
        _264 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _265) -> [return: bb154, unwind: bb438];
    }

    bb154: {
        StorageDead(_265);
        _317 = discriminant(_264);
        switchInt(move _317) -> [0: bb155, 1: bb156, otherwise: bb6];
    }

    bb155: {
        StorageLive(_321);
        _321 = ((_264 as Continue).0: i128);
        _263 = _321;
        StorageDead(_321);
        StorageDead(_294);
        StorageDead(_280);
        StorageDead(_277);
        StorageDead(_273);
        StorageDead(_270);
        StorageDead(_267);
        StorageDead(_264);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        StorageLive(_325);
        _325 = _29;
        StorageLive(_326);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        _335 = _141;
        StorageLive(_336);
        StorageLive(_337);
        StorageLive(_338);
        StorageLive(_339);
        StorageLive(_340);
        StorageLive(_341);
        StorageLive(_342);
        _342 = &_48;
        _341 = <Ref<'_, SpotMarket> as Deref>::deref(move _342) -> [return: bb158, unwind: bb438];
    }

    bb156: {
        StorageLive(_318);
        _318 = ((_264 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_320);
        _320 = _318;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _320) -> [return: bb157, unwind: bb438];
    }

    bb157: {
        StorageDead(_320);
        StorageDead(_318);
        goto -> bb416;
    }

    bb158: {
        _340 = (*_341);
        StorageDead(_342);
        _339 = SpotMarket::get_precision(move _340) -> [return: bb159, unwind: bb438];
    }

    bb159: {
        StorageDead(_340);
        _338 = <u64 as Cast>::cast::<i128>(move _339) -> [return: bb160, unwind: bb438];
    }

    bb160: {
        StorageDead(_339);
        _337 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _338) -> [return: bb161, unwind: bb438];
    }

    bb161: {
        StorageDead(_338);
        _343 = discriminant(_337);
        switchInt(move _343) -> [0: bb162, 1: bb163, otherwise: bb6];
    }

    bb162: {
        StorageLive(_347);
        _347 = ((_337 as Continue).0: i128);
        _336 = _347;
        StorageDead(_347);
        _334 = <i128 as SafeMath>::safe_mul(move _335, move _336) -> [return: bb165, unwind: bb438];
    }

    bb163: {
        StorageLive(_344);
        _344 = ((_337 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_346);
        _346 = _344;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _346) -> [return: bb164, unwind: bb438];
    }

    bb164: {
        StorageDead(_346);
        StorageDead(_344);
        StorageDead(_336);
        StorageDead(_335);
        StorageDead(_334);
        goto -> bb409;
    }

    bb165: {
        StorageDead(_336);
        StorageDead(_335);
        _333 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _334) -> [return: bb166, unwind: bb438];
    }

    bb166: {
        StorageDead(_334);
        _348 = discriminant(_333);
        switchInt(move _348) -> [0: bb167, 1: bb168, otherwise: bb6];
    }

    bb167: {
        StorageLive(_352);
        _352 = ((_333 as Continue).0: i128);
        _332 = _352;
        StorageDead(_352);
        StorageLive(_353);
        _353 = _263;
        _331 = <i128 as SafeMath>::safe_div(move _332, move _353) -> [return: bb170, unwind: bb438];
    }

    bb168: {
        StorageLive(_349);
        _349 = ((_333 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_351);
        _351 = _349;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _351) -> [return: bb169, unwind: bb438];
    }

    bb169: {
        StorageDead(_351);
        StorageDead(_349);
        goto -> bb409;
    }

    bb170: {
        StorageDead(_353);
        StorageDead(_332);
        _330 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _331) -> [return: bb171, unwind: bb438];
    }

    bb171: {
        StorageDead(_331);
        _354 = discriminant(_330);
        switchInt(move _354) -> [0: bb172, 1: bb173, otherwise: bb6];
    }

    bb172: {
        StorageLive(_358);
        _358 = ((_330 as Continue).0: i128);
        _329 = _358;
        StorageDead(_358);
        _328 = <i128 as Cast>::cast::<u64>(move _329) -> [return: bb175, unwind: bb438];
    }

    bb173: {
        StorageLive(_355);
        _355 = ((_330 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_357);
        _357 = _355;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _357) -> [return: bb174, unwind: bb438];
    }

    bb174: {
        StorageDead(_357);
        StorageDead(_355);
        goto -> bb410;
    }

    bb175: {
        StorageDead(_329);
        _327 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _328) -> [return: bb176, unwind: bb438];
    }

    bb176: {
        StorageDead(_328);
        _359 = discriminant(_327);
        switchInt(move _359) -> [0: bb177, 1: bb178, otherwise: bb6];
    }

    bb177: {
        StorageLive(_363);
        _363 = ((_327 as Continue).0: u64);
        _326 = _363;
        StorageDead(_363);
        _324 = <u64 as SafeMath>::safe_add(move _325, move _326) -> [return: bb180, unwind: bb438];
    }

    bb178: {
        StorageLive(_360);
        _360 = ((_327 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_362);
        _362 = _360;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _362) -> [return: bb179, unwind: bb438];
    }

    bb179: {
        StorageDead(_362);
        StorageDead(_360);
        goto -> bb411;
    }

    bb180: {
        StorageDead(_326);
        StorageDead(_325);
        _323 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _324) -> [return: bb181, unwind: bb438];
    }

    bb181: {
        StorageDead(_324);
        _364 = discriminant(_323);
        switchInt(move _364) -> [0: bb182, 1: bb183, otherwise: bb6];
    }

    bb182: {
        StorageLive(_368);
        _368 = ((_323 as Continue).0: u64);
        _322 = _368;
        StorageDead(_368);
        _29 = move _322;
        StorageDead(_322);
        StorageDead(_341);
        StorageDead(_337);
        StorageDead(_333);
        StorageDead(_330);
        StorageDead(_327);
        StorageDead(_323);
        StorageLive(_369);
        StorageLive(_370);
        StorageLive(_371);
        StorageLive(_372);
        _372 = _153;
        StorageLive(_373);
        StorageLive(_374);
        StorageLive(_375);
        StorageLive(_376);
        _376 = _29;
        _375 = <u64 as Cast>::cast::<i128>(move _376) -> [return: bb185, unwind: bb438];
    }

    bb183: {
        StorageLive(_365);
        _365 = ((_323 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_367);
        _367 = _365;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _367) -> [return: bb184, unwind: bb438];
    }

    bb184: {
        StorageDead(_367);
        StorageDead(_365);
        goto -> bb412;
    }

    bb185: {
        StorageDead(_376);
        _374 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _375) -> [return: bb186, unwind: bb438];
    }

    bb186: {
        StorageDead(_375);
        _377 = discriminant(_374);
        switchInt(move _377) -> [0: bb187, 1: bb188, otherwise: bb6];
    }

    bb187: {
        StorageLive(_381);
        _381 = ((_374 as Continue).0: i128);
        _373 = _381;
        StorageDead(_381);
        _371 = <i128 as SafeMath>::safe_sub(move _372, move _373) -> [return: bb190, unwind: bb438];
    }

    bb188: {
        StorageLive(_378);
        _378 = ((_374 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_380);
        _380 = _378;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _380) -> [return: bb189, unwind: bb438];
    }

    bb189: {
        StorageDead(_380);
        StorageDead(_378);
        StorageDead(_373);
        StorageDead(_372);
        StorageDead(_371);
        goto -> bb408;
    }

    bb190: {
        StorageDead(_373);
        StorageDead(_372);
        _370 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _371) -> [return: bb191, unwind: bb438];
    }

    bb191: {
        StorageDead(_371);
        _382 = discriminant(_370);
        switchInt(move _382) -> [0: bb192, 1: bb193, otherwise: bb6];
    }

    bb192: {
        StorageLive(_386);
        _386 = ((_370 as Continue).0: i128);
        _369 = _386;
        StorageDead(_386);
        _130 = move _369;
        StorageDead(_369);
        StorageDead(_374);
        StorageDead(_370);
        _134 = const ();
        StorageDead(_263);
        StorageDead(_244);
        StorageDead(_153);
        StorageDead(_141);
        goto -> bb342;
    }

    bb193: {
        StorageLive(_383);
        _383 = ((_370 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_385);
        _385 = _383;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _385) -> [return: bb194, unwind: bb438];
    }

    bb194: {
        StorageDead(_385);
        StorageDead(_383);
        goto -> bb408;
    }

    bb195: {
        StorageDead(_139);
        StorageDead(_138);
        goto -> bb197;
    }

    bb196: {
        StorageDead(_136);
        goto -> bb197;
    }

    bb197: {
        StorageLive(_387);
        StorageLive(_388);
        _388 = _130;
        _387 = Gt(move _388, const 0_i128);
        switchInt(move _387) -> [0: bb339, otherwise: bb198];
    }

    bb198: {
        StorageDead(_388);
        StorageLive(_389);
        StorageLive(_390);
        _390 = &_3;
        StorageLive(_391);
        _745 = const _;
        _391 = &(*_745);
        _389 = <controller::position::PositionDirection as PartialEq>::eq(move _390, move _391) -> [return: bb199, unwind: bb438];
    }

    bb199: {
        switchInt(move _389) -> [0: bb338, otherwise: bb200];
    }

    bb200: {
        StorageDead(_391);
        StorageDead(_390);
        StorageLive(_393);
        StorageLive(_394);
        StorageLive(_395);
        StorageLive(_396);
        StorageLive(_397);
        StorageLive(_398);
        _398 = (_106.4: i128);
        StorageLive(_399);
        _399 = (_105.4: i128);
        _397 = <i128 as SafeMath>::safe_sub(move _398, move _399) -> [return: bb201, unwind: bb438];
    }

    bb201: {
        StorageDead(_399);
        StorageDead(_398);
        _396 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _397) -> [return: bb202, unwind: bb438];
    }

    bb202: {
        StorageDead(_397);
        _400 = discriminant(_396);
        switchInt(move _400) -> [0: bb203, 1: bb204, otherwise: bb6];
    }

    bb203: {
        StorageLive(_404);
        _404 = ((_396 as Continue).0: i128);
        _395 = _404;
        StorageDead(_404);
        _394 = <i128 as Ord>::max(move _395, const 0_i128) -> [return: bb206, unwind: bb438];
    }

    bb204: {
        StorageLive(_401);
        _401 = ((_396 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_403);
        _403 = _401;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _403) -> [return: bb205, unwind: bb438];
    }

    bb205: {
        StorageDead(_403);
        StorageDead(_401);
        StorageDead(_395);
        StorageDead(_394);
        StorageDead(_396);
        goto -> bb407;
    }

    bb206: {
        StorageDead(_395);
        _393 = core::num::<impl i128>::abs(move _394) -> [return: bb207, unwind: bb438];
    }

    bb207: {
        StorageDead(_394);
        StorageDead(_396);
        StorageLive(_405);
        _405 = (_106.0: i128);
        StorageLive(_406);
        StorageLive(_407);
        StorageLive(_408);
        _408 = _405;
        _407 = Gt(move _408, const 0_i128);
        switchInt(move _407) -> [0: bb255, otherwise: bb208];
    }

    bb208: {
        StorageDead(_408);
        StorageLive(_409);
        StorageLive(_410);
        StorageLive(_411);
        StorageLive(_412);
        _412 = _405;
        StorageLive(_413);
        StorageLive(_414);
        StorageLive(_415);
        _415 = &_48;
        _414 = <Ref<'_, SpotMarket> as Deref>::deref(move _415) -> [return: bb209, unwind: bb438];
    }

    bb209: {
        StorageDead(_415);
        _413 = ((*_414).41: u32);
        StorageLive(_416);
        StorageLive(_417);
        _417 = &_77;
        _416 = &(*_417);
        _411 = get_strict_token_value(move _412, move _413, move _416) -> [return: bb210, unwind: bb438];
    }

    bb210: {
        StorageDead(_416);
        StorageDead(_413);
        StorageDead(_412);
        _410 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _411) -> [return: bb211, unwind: bb438];
    }

    bb211: {
        StorageDead(_411);
        _418 = discriminant(_410);
        switchInt(move _418) -> [0: bb212, 1: bb213, otherwise: bb6];
    }

    bb212: {
        StorageLive(_422);
        _422 = ((_410 as Continue).0: i128);
        _409 = _422;
        StorageDead(_422);
        StorageDead(_417);
        StorageDead(_414);
        StorageDead(_410);
        StorageLive(_423);
        StorageLive(_424);
        StorageLive(_425);
        StorageLive(_426);
        StorageLive(_427);
        StorageLive(_428);
        StorageLive(_429);
        _429 = &_48;
        _428 = <Ref<'_, SpotMarket> as Deref>::deref(move _429) -> [return: bb215, unwind: bb438];
    }

    bb213: {
        StorageLive(_419);
        _419 = ((_410 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_421);
        _421 = _419;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _421) -> [return: bb214, unwind: bb438];
    }

    bb214: {
        StorageDead(_421);
        StorageDead(_419);
        StorageDead(_417);
        StorageDead(_414);
        StorageDead(_410);
        goto -> bb405;
    }

    bb215: {
        _427 = &(*_428);
        StorageDead(_429);
        StorageLive(_430);
        StorageLive(_431);
        _431 = _405;
        _430 = core::num::<impl i128>::unsigned_abs(move _431) -> [return: bb216, unwind: bb438];
    }

    bb216: {
        StorageDead(_431);
        StorageLive(_432);
        _432 = (_77.0: i64);
        StorageLive(_433);
        StorageLive(_434);
        _744 = const _;
        _434 = &(*_744);
        _433 = &(*_434);
        _426 = SpotMarket::get_asset_weight(move _427, move _430, move _432, move _433) -> [return: bb217, unwind: bb438];
    }

    bb217: {
        StorageDead(_433);
        StorageDead(_432);
        StorageDead(_430);
        StorageDead(_427);
        _425 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _426) -> [return: bb218, unwind: bb438];
    }

    bb218: {
        StorageDead(_426);
        _436 = discriminant(_425);
        switchInt(move _436) -> [0: bb219, 1: bb220, otherwise: bb6];
    }

    bb219: {
        StorageLive(_440);
        _440 = ((_425 as Continue).0: u32);
        _424 = _440;
        StorageDead(_440);
        StorageLive(_441);
        _441 = _27;
        _423 = <u32 as Ord>::min(move _424, move _441) -> [return: bb222, unwind: bb438];
    }

    bb220: {
        StorageLive(_437);
        _437 = ((_425 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_439);
        _439 = _437;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _439) -> [return: bb221, unwind: bb438];
    }

    bb221: {
        StorageDead(_439);
        StorageDead(_437);
        StorageDead(_424);
        StorageDead(_434);
        StorageDead(_428);
        StorageDead(_425);
        goto -> bb404;
    }

    bb222: {
        StorageDead(_441);
        StorageDead(_424);
        StorageDead(_434);
        StorageDead(_428);
        StorageDead(_425);
        StorageLive(_442);
        StorageLive(_443);
        StorageLive(_444);
        StorageLive(_445);
        StorageLive(_446);
        StorageLive(_447);
        StorageLive(_448);
        StorageLive(_449);
        _449 = _409;
        _448 = core::num::<impl i128>::abs(move _449) -> [return: bb223, unwind: bb438];
    }

    bb223: {
        StorageDead(_449);
        StorageLive(_450);
        StorageLive(_451);
        StorageLive(_452);
        StorageLive(_453);
        StorageLive(_454);
        StorageLive(_455);
        StorageLive(_456);
        _456 = _423;
        _455 = <u32 as SafeMath>::safe_sub(const _, move _456) -> [return: bb224, unwind: bb438];
    }

    bb224: {
        StorageDead(_456);
        _454 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _455) -> [return: bb225, unwind: bb438];
    }

    bb225: {
        StorageDead(_455);
        _457 = discriminant(_454);
        switchInt(move _457) -> [0: bb226, 1: bb227, otherwise: bb6];
    }

    bb226: {
        StorageLive(_461);
        _461 = ((_454 as Continue).0: u32);
        _453 = _461;
        StorageDead(_461);
        _452 = <u32 as Cast>::cast::<i128>(move _453) -> [return: bb229, unwind: bb438];
    }

    bb227: {
        StorageLive(_458);
        _458 = ((_454 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_460);
        _460 = _458;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _460) -> [return: bb228, unwind: bb438];
    }

    bb228: {
        StorageDead(_460);
        StorageDead(_458);
        StorageDead(_453);
        StorageDead(_452);
        goto -> bb400;
    }

    bb229: {
        StorageDead(_453);
        _451 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _452) -> [return: bb230, unwind: bb438];
    }

    bb230: {
        StorageDead(_452);
        _462 = discriminant(_451);
        switchInt(move _462) -> [0: bb231, 1: bb232, otherwise: bb6];
    }

    bb231: {
        StorageLive(_466);
        _466 = ((_451 as Continue).0: i128);
        _450 = _466;
        StorageDead(_466);
        _447 = <i128 as SafeMath>::safe_mul(move _448, move _450) -> [return: bb234, unwind: bb438];
    }

    bb232: {
        StorageLive(_463);
        _463 = ((_451 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_465);
        _465 = _463;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _465) -> [return: bb233, unwind: bb438];
    }

    bb233: {
        StorageDead(_465);
        StorageDead(_463);
        goto -> bb400;
    }

    bb234: {
        StorageDead(_450);
        StorageDead(_448);
        _446 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _447) -> [return: bb235, unwind: bb438];
    }

    bb235: {
        StorageDead(_447);
        _467 = discriminant(_446);
        switchInt(move _467) -> [0: bb236, 1: bb237, otherwise: bb6];
    }

    bb236: {
        StorageLive(_471);
        _471 = ((_446 as Continue).0: i128);
        _445 = _471;
        StorageDead(_471);
        _444 = <i128 as SafeMath>::safe_div(move _445, const _) -> [return: bb239, unwind: bb438];
    }

    bb237: {
        StorageLive(_468);
        _468 = ((_446 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_470);
        _470 = _468;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _470) -> [return: bb238, unwind: bb438];
    }

    bb238: {
        StorageDead(_470);
        StorageDead(_468);
        goto -> bb401;
    }

    bb239: {
        StorageDead(_445);
        _443 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _444) -> [return: bb240, unwind: bb438];
    }

    bb240: {
        StorageDead(_444);
        _472 = discriminant(_443);
        switchInt(move _472) -> [0: bb241, 1: bb242, otherwise: bb6];
    }

    bb241: {
        StorageLive(_476);
        _476 = ((_443 as Continue).0: i128);
        _442 = _476;
        StorageDead(_476);
        StorageDead(_454);
        StorageDead(_451);
        StorageDead(_446);
        StorageDead(_443);
        StorageLive(_477);
        StorageLive(_478);
        StorageLive(_479);
        StorageLive(_480);
        _480 = _393;
        StorageLive(_481);
        _481 = _442;
        _479 = <i128 as SafeMath>::safe_add(move _480, move _481) -> [return: bb244, unwind: bb438];
    }

    bb242: {
        StorageLive(_473);
        _473 = ((_443 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_475);
        _475 = _473;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _475) -> [return: bb243, unwind: bb438];
    }

    bb243: {
        StorageDead(_475);
        StorageDead(_473);
        goto -> bb402;
    }

    bb244: {
        StorageDead(_481);
        StorageDead(_480);
        _478 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _479) -> [return: bb245, unwind: bb438];
    }

    bb245: {
        StorageDead(_479);
        _482 = discriminant(_478);
        switchInt(move _482) -> [0: bb246, 1: bb247, otherwise: bb6];
    }

    bb246: {
        StorageLive(_486);
        _486 = ((_478 as Continue).0: i128);
        _477 = _486;
        StorageDead(_486);
        _393 = move _477;
        StorageDead(_477);
        StorageDead(_478);
        StorageLive(_487);
        StorageLive(_488);
        StorageLive(_489);
        StorageLive(_490);
        StorageLive(_491);
        _491 = _405;
        _490 = core::num::<impl i128>::abs(move _491) -> [return: bb249, unwind: bb438];
    }

    bb247: {
        StorageLive(_483);
        _483 = ((_478 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_485);
        _485 = _483;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _485) -> [return: bb248, unwind: bb438];
    }

    bb248: {
        StorageDead(_485);
        StorageDead(_483);
        StorageDead(_477);
        StorageDead(_478);
        goto -> bb403;
    }

    bb249: {
        StorageDead(_491);
        _489 = <i128 as Cast>::cast::<u64>(move _490) -> [return: bb250, unwind: bb438];
    }

    bb250: {
        StorageDead(_490);
        _488 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _489) -> [return: bb251, unwind: bb438];
    }

    bb251: {
        StorageDead(_489);
        _492 = discriminant(_488);
        switchInt(move _492) -> [0: bb252, 1: bb253, otherwise: bb6];
    }

    bb252: {
        StorageLive(_496);
        _496 = ((_488 as Continue).0: u64);
        _487 = _496;
        StorageDead(_496);
        _29 = move _487;
        StorageDead(_487);
        StorageDead(_488);
        _405 = const 0_i128;
        _406 = const ();
        StorageDead(_442);
        StorageDead(_423);
        StorageDead(_409);
        goto -> bb256;
    }

    bb253: {
        StorageLive(_493);
        _493 = ((_488 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_495);
        _495 = _493;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _495) -> [return: bb254, unwind: bb438];
    }

    bb254: {
        StorageDead(_495);
        StorageDead(_493);
        StorageDead(_487);
        StorageDead(_488);
        goto -> bb403;
    }

    bb255: {
        StorageDead(_408);
        _406 = const ();
        goto -> bb256;
    }

    bb256: {
        StorageDead(_407);
        StorageDead(_406);
        StorageLive(_497);
        StorageLive(_498);
        StorageLive(_499);
        StorageLive(_500);
        StorageLive(_501);
        StorageLive(_502);
        StorageLive(_503);
        _503 = &_48;
        _502 = <Ref<'_, SpotMarket> as Deref>::deref(move _503) -> [return: bb257, unwind: bb438];
    }

    bb257: {
        _501 = &(*_502);
        StorageDead(_503);
        StorageLive(_504);
        StorageLive(_505);
        _505 = _405;
        _504 = core::num::<impl i128>::unsigned_abs(move _505) -> [return: bb258, unwind: bb438];
    }

    bb258: {
        StorageDead(_505);
        StorageLive(_506);
        StorageLive(_507);
        _743 = const _;
        _507 = &(*_743);
        _506 = &(*_507);
        _500 = SpotMarket::get_liability_weight(move _501, move _504, move _506) -> [return: bb259, unwind: bb438];
    }

    bb259: {
        StorageDead(_506);
        StorageDead(_504);
        StorageDead(_501);
        _499 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _500) -> [return: bb260, unwind: bb438];
    }

    bb260: {
        StorageDead(_500);
        _509 = discriminant(_499);
        switchInt(move _509) -> [0: bb261, 1: bb262, otherwise: bb6];
    }

    bb261: {
        StorageLive(_513);
        _513 = ((_499 as Continue).0: u32);
        _498 = _513;
        StorageDead(_513);
        StorageLive(_514);
        _514 = _25;
        _497 = <u32 as Ord>::max(move _498, move _514) -> [return: bb264, unwind: bb438];
    }

    bb262: {
        StorageLive(_510);
        _510 = ((_499 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_512);
        _512 = _510;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _512) -> [return: bb263, unwind: bb438];
    }

    bb263: {
        StorageDead(_512);
        StorageDead(_510);
        StorageDead(_498);
        StorageDead(_507);
        StorageDead(_502);
        StorageDead(_499);
        goto -> bb399;
    }

    bb264: {
        StorageDead(_514);
        StorageDead(_498);
        StorageDead(_507);
        StorageDead(_502);
        StorageDead(_499);
        StorageLive(_515);
        StorageLive(_516);
        StorageLive(_517);
        StorageLive(_518);
        StorageLive(_519);
        StorageLive(_520);
        StorageLive(_521);
        StorageLive(_522);
        StorageLive(_523);
        StorageLive(_524);
        StorageLive(_525);
        StorageLive(_526);
        StorageLive(_527);
        StorageLive(_528);
        StorageLive(_529);
        StorageLive(_530);
        StorageLive(_531);
        StorageLive(_532);
        StorageLive(_533);
        StorageLive(_534);
        _534 = _497;
        _533 = <u32 as Cast>::cast::<i128>(move _534) -> [return: bb265, unwind: bb438];
    }

    bb265: {
        StorageDead(_534);
        _532 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _533) -> [return: bb266, unwind: bb438];
    }

    bb266: {
        StorageDead(_533);
        _535 = discriminant(_532);
        switchInt(move _535) -> [0: bb267, 1: bb268, otherwise: bb6];
    }

    bb267: {
        StorageLive(_539);
        _539 = ((_532 as Continue).0: i128);
        _531 = _539;
        StorageDead(_539);
        _530 = <i128 as SafeMath>::safe_sub(move _531, const _) -> [return: bb270, unwind: bb438];
    }

    bb268: {
        StorageLive(_536);
        _536 = ((_532 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_538);
        _538 = _536;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _538) -> [return: bb269, unwind: bb438];
    }

    bb269: {
        StorageDead(_538);
        StorageDead(_536);
        StorageDead(_531);
        StorageDead(_530);
        goto -> bb396;
    }

    bb270: {
        StorageDead(_531);
        _529 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _530) -> [return: bb271, unwind: bb438];
    }

    bb271: {
        StorageDead(_530);
        _540 = discriminant(_529);
        switchInt(move _540) -> [0: bb272, 1: bb273, otherwise: bb6];
    }

    bb272: {
        StorageLive(_544);
        _544 = ((_529 as Continue).0: i128);
        _528 = _544;
        StorageDead(_544);
        _527 = core::num::<impl i128>::abs(move _528) -> [return: bb275, unwind: bb438];
    }

    bb273: {
        StorageLive(_541);
        _541 = ((_529 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_543);
        _543 = _541;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _543) -> [return: bb274, unwind: bb438];
    }

    bb274: {
        StorageDead(_543);
        StorageDead(_541);
        goto -> bb396;
    }

    bb275: {
        StorageDead(_528);
        StorageLive(_545);
        StorageLive(_546);
        StorageLive(_547);
        StorageLive(_548);
        _548 = _80;
        _547 = <i64 as Cast>::cast::<i128>(move _548) -> [return: bb276, unwind: bb438];
    }

    bb276: {
        StorageDead(_548);
        _546 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _547) -> [return: bb277, unwind: bb438];
    }

    bb277: {
        StorageDead(_547);
        _549 = discriminant(_546);
        switchInt(move _549) -> [0: bb278, 1: bb279, otherwise: bb6];
    }

    bb278: {
        StorageLive(_553);
        _553 = ((_546 as Continue).0: i128);
        _545 = _553;
        StorageDead(_553);
        _526 = <i128 as SafeMath>::safe_mul(move _527, move _545) -> [return: bb281, unwind: bb438];
    }

    bb279: {
        StorageLive(_550);
        _550 = ((_546 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_552);
        _552 = _550;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _552) -> [return: bb280, unwind: bb438];
    }

    bb280: {
        StorageDead(_552);
        StorageDead(_550);
        StorageDead(_545);
        StorageDead(_527);
        StorageDead(_526);
        goto -> bb392;
    }

    bb281: {
        StorageDead(_545);
        StorageDead(_527);
        _525 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _526) -> [return: bb282, unwind: bb438];
    }

    bb282: {
        StorageDead(_526);
        _554 = discriminant(_525);
        switchInt(move _554) -> [0: bb283, 1: bb284, otherwise: bb6];
    }

    bb283: {
        StorageLive(_558);
        _558 = ((_525 as Continue).0: i128);
        _524 = _558;
        StorageDead(_558);
        _523 = <i128 as SafeMath>::safe_div(move _524, const _) -> [return: bb286, unwind: bb438];
    }

    bb284: {
        StorageLive(_555);
        _555 = ((_525 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_557);
        _557 = _555;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _557) -> [return: bb285, unwind: bb438];
    }

    bb285: {
        StorageDead(_557);
        StorageDead(_555);
        goto -> bb392;
    }

    bb286: {
        StorageDead(_524);
        _522 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _523) -> [return: bb287, unwind: bb438];
    }

    bb287: {
        StorageDead(_523);
        _559 = discriminant(_522);
        switchInt(move _559) -> [0: bb288, 1: bb289, otherwise: bb6];
    }

    bb288: {
        StorageLive(_563);
        _563 = ((_522 as Continue).0: i128);
        _521 = _563;
        StorageDead(_563);
        _520 = <i128 as SafeMath>::safe_mul(move _521, const _) -> [return: bb291, unwind: bb438];
    }

    bb289: {
        StorageLive(_560);
        _560 = ((_522 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_562);
        _562 = _560;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _562) -> [return: bb290, unwind: bb438];
    }

    bb290: {
        StorageDead(_562);
        StorageDead(_560);
        goto -> bb393;
    }

    bb291: {
        StorageDead(_521);
        _519 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _520) -> [return: bb292, unwind: bb438];
    }

    bb292: {
        StorageDead(_520);
        _564 = discriminant(_519);
        switchInt(move _564) -> [0: bb293, 1: bb294, otherwise: bb6];
    }

    bb293: {
        StorageLive(_568);
        _568 = ((_519 as Continue).0: i128);
        _518 = _568;
        StorageDead(_568);
        _517 = <i128 as SafeMath>::safe_div(move _518, const _) -> [return: bb296, unwind: bb438];
    }

    bb294: {
        StorageLive(_565);
        _565 = ((_519 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_567);
        _567 = _565;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _567) -> [return: bb295, unwind: bb438];
    }

    bb295: {
        StorageDead(_567);
        StorageDead(_565);
        goto -> bb394;
    }

    bb296: {
        StorageDead(_518);
        _516 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _517) -> [return: bb297, unwind: bb438];
    }

    bb297: {
        StorageDead(_517);
        _569 = discriminant(_516);
        switchInt(move _569) -> [0: bb298, 1: bb299, otherwise: bb6];
    }

    bb298: {
        StorageLive(_573);
        _573 = ((_516 as Continue).0: i128);
        _515 = _573;
        StorageDead(_573);
        StorageDead(_546);
        StorageDead(_532);
        StorageDead(_529);
        StorageDead(_525);
        StorageDead(_522);
        StorageDead(_519);
        StorageDead(_516);
        StorageLive(_574);
        StorageLive(_575);
        StorageLive(_576);
        StorageLive(_577);
        _577 = _29;
        StorageLive(_578);
        StorageLive(_579);
        StorageLive(_580);
        StorageLive(_581);
        StorageLive(_582);
        StorageLive(_583);
        StorageLive(_584);
        StorageLive(_585);
        StorageLive(_586);
        StorageLive(_587);
        _587 = _393;
        StorageLive(_588);
        StorageLive(_589);
        StorageLive(_590);
        StorageLive(_591);
        StorageLive(_592);
        StorageLive(_593);
        StorageLive(_594);
        _594 = &_48;
        _593 = <Ref<'_, SpotMarket> as Deref>::deref(move _594) -> [return: bb301, unwind: bb438];
    }

    bb299: {
        StorageLive(_570);
        _570 = ((_516 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_572);
        _572 = _570;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _572) -> [return: bb300, unwind: bb438];
    }

    bb300: {
        StorageDead(_572);
        StorageDead(_570);
        goto -> bb395;
    }

    bb301: {
        _592 = (*_593);
        StorageDead(_594);
        _591 = SpotMarket::get_precision(move _592) -> [return: bb302, unwind: bb438];
    }

    bb302: {
        StorageDead(_592);
        _590 = <u64 as Cast>::cast::<i128>(move _591) -> [return: bb303, unwind: bb438];
    }

    bb303: {
        StorageDead(_591);
        _589 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _590) -> [return: bb304, unwind: bb438];
    }

    bb304: {
        StorageDead(_590);
        _595 = discriminant(_589);
        switchInt(move _595) -> [0: bb305, 1: bb306, otherwise: bb6];
    }

    bb305: {
        StorageLive(_599);
        _599 = ((_589 as Continue).0: i128);
        _588 = _599;
        StorageDead(_599);
        _586 = <i128 as SafeMath>::safe_mul(move _587, move _588) -> [return: bb308, unwind: bb438];
    }

    bb306: {
        StorageLive(_596);
        _596 = ((_589 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_598);
        _598 = _596;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _598) -> [return: bb307, unwind: bb438];
    }

    bb307: {
        StorageDead(_598);
        StorageDead(_596);
        StorageDead(_588);
        StorageDead(_587);
        StorageDead(_586);
        goto -> bb388;
    }

    bb308: {
        StorageDead(_588);
        StorageDead(_587);
        _585 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _586) -> [return: bb309, unwind: bb438];
    }

    bb309: {
        StorageDead(_586);
        _600 = discriminant(_585);
        switchInt(move _600) -> [0: bb310, 1: bb311, otherwise: bb6];
    }

    bb310: {
        StorageLive(_604);
        _604 = ((_585 as Continue).0: i128);
        _584 = _604;
        StorageDead(_604);
        StorageLive(_605);
        _605 = _515;
        _583 = <i128 as SafeMath>::safe_div(move _584, move _605) -> [return: bb313, unwind: bb438];
    }

    bb311: {
        StorageLive(_601);
        _601 = ((_585 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_603);
        _603 = _601;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _603) -> [return: bb312, unwind: bb438];
    }

    bb312: {
        StorageDead(_603);
        StorageDead(_601);
        goto -> bb388;
    }

    bb313: {
        StorageDead(_605);
        StorageDead(_584);
        _582 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _583) -> [return: bb314, unwind: bb438];
    }

    bb314: {
        StorageDead(_583);
        _606 = discriminant(_582);
        switchInt(move _606) -> [0: bb315, 1: bb316, otherwise: bb6];
    }

    bb315: {
        StorageLive(_610);
        _610 = ((_582 as Continue).0: i128);
        _581 = _610;
        StorageDead(_610);
        _580 = <i128 as Cast>::cast::<u64>(move _581) -> [return: bb318, unwind: bb438];
    }

    bb316: {
        StorageLive(_607);
        _607 = ((_582 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_609);
        _609 = _607;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _609) -> [return: bb317, unwind: bb438];
    }

    bb317: {
        StorageDead(_609);
        StorageDead(_607);
        goto -> bb389;
    }

    bb318: {
        StorageDead(_581);
        _579 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _580) -> [return: bb319, unwind: bb438];
    }

    bb319: {
        StorageDead(_580);
        _611 = discriminant(_579);
        switchInt(move _611) -> [0: bb320, 1: bb321, otherwise: bb6];
    }

    bb320: {
        StorageLive(_615);
        _615 = ((_579 as Continue).0: u64);
        _578 = _615;
        StorageDead(_615);
        _576 = <u64 as SafeMath>::safe_add(move _577, move _578) -> [return: bb323, unwind: bb438];
    }

    bb321: {
        StorageLive(_612);
        _612 = ((_579 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_614);
        _614 = _612;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _614) -> [return: bb322, unwind: bb438];
    }

    bb322: {
        StorageDead(_614);
        StorageDead(_612);
        goto -> bb390;
    }

    bb323: {
        StorageDead(_578);
        StorageDead(_577);
        _575 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _576) -> [return: bb324, unwind: bb438];
    }

    bb324: {
        StorageDead(_576);
        _616 = discriminant(_575);
        switchInt(move _616) -> [0: bb325, 1: bb326, otherwise: bb6];
    }

    bb325: {
        StorageLive(_620);
        _620 = ((_575 as Continue).0: u64);
        _574 = _620;
        StorageDead(_620);
        _29 = move _574;
        StorageDead(_574);
        StorageDead(_593);
        StorageDead(_589);
        StorageDead(_585);
        StorageDead(_582);
        StorageDead(_579);
        StorageDead(_575);
        StorageLive(_621);
        StorageLive(_622);
        StorageLive(_623);
        StorageLive(_624);
        _624 = _405;
        StorageLive(_625);
        StorageLive(_626);
        StorageLive(_627);
        StorageLive(_628);
        _628 = _29;
        _627 = <u64 as Cast>::cast::<i128>(move _628) -> [return: bb328, unwind: bb438];
    }

    bb326: {
        StorageLive(_617);
        _617 = ((_575 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_619);
        _619 = _617;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _619) -> [return: bb327, unwind: bb438];
    }

    bb327: {
        StorageDead(_619);
        StorageDead(_617);
        goto -> bb391;
    }

    bb328: {
        StorageDead(_628);
        _626 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _627) -> [return: bb329, unwind: bb438];
    }

    bb329: {
        StorageDead(_627);
        _629 = discriminant(_626);
        switchInt(move _629) -> [0: bb330, 1: bb331, otherwise: bb6];
    }

    bb330: {
        StorageLive(_633);
        _633 = ((_626 as Continue).0: i128);
        _625 = _633;
        StorageDead(_633);
        _623 = <i128 as SafeMath>::safe_sub(move _624, move _625) -> [return: bb333, unwind: bb438];
    }

    bb331: {
        StorageLive(_630);
        _630 = ((_626 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_632);
        _632 = _630;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _632) -> [return: bb332, unwind: bb438];
    }

    bb332: {
        StorageDead(_632);
        StorageDead(_630);
        StorageDead(_625);
        StorageDead(_624);
        StorageDead(_623);
        goto -> bb387;
    }

    bb333: {
        StorageDead(_625);
        StorageDead(_624);
        _622 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _623) -> [return: bb334, unwind: bb438];
    }

    bb334: {
        StorageDead(_623);
        _634 = discriminant(_622);
        switchInt(move _634) -> [0: bb335, 1: bb336, otherwise: bb6];
    }

    bb335: {
        StorageLive(_638);
        _638 = ((_622 as Continue).0: i128);
        _621 = _638;
        StorageDead(_638);
        _130 = move _621;
        StorageDead(_621);
        StorageDead(_626);
        StorageDead(_622);
        _134 = const ();
        StorageDead(_515);
        StorageDead(_497);
        StorageDead(_405);
        StorageDead(_393);
        goto -> bb341;
    }

    bb336: {
        StorageLive(_635);
        _635 = ((_622 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_637);
        _637 = _635;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _637) -> [return: bb337, unwind: bb438];
    }

    bb337: {
        StorageDead(_637);
        StorageDead(_635);
        goto -> bb387;
    }

    bb338: {
        StorageDead(_391);
        StorageDead(_390);
        goto -> bb340;
    }

    bb339: {
        StorageDead(_388);
        goto -> bb340;
    }

    bb340: {
        _134 = const ();
        goto -> bb341;
    }

    bb341: {
        StorageDead(_389);
        StorageDead(_387);
        goto -> bb342;
    }

    bb342: {
        StorageDead(_137);
        StorageDead(_135);
        StorageDead(_134);
        StorageLive(_639);
        StorageLive(_640);
        StorageLive(_641);
        _641 = _30;
        _640 = Le(move _641, const 0_i128);
        switchInt(move _640) -> [0: bb346, otherwise: bb343];
    }

    bb343: {
        StorageDead(_641);
        StorageLive(_643);
        _643 = _29;
        StorageLive(_644);
        StorageLive(_645);
        StorageLive(_646);
        _646 = &_48;
        _645 = <Ref<'_, SpotMarket> as Deref>::deref(move _646) -> [return: bb344, unwind: bb438];
    }

    bb344: {
        StorageDead(_646);
        _644 = ((*_645).25: u64);
        _0 = math::orders::standardize_base_asset_amount(move _643, move _644) -> [return: bb345, unwind: bb438];
    }

    bb345: {
        StorageDead(_644);
        StorageDead(_643);
        StorageDead(_645);
        StorageDead(_640);
        StorageDead(_639);
        goto -> bb430;
    }

    bb346: {
        StorageDead(_641);
        _639 = const ();
        StorageDead(_640);
        StorageDead(_639);
        StorageLive(_647);
        StorageLive(_648);
        StorageLive(_649);
        StorageLive(_650);
        StorageLive(_651);
        StorageLive(_652);
        StorageLive(_653);
        _653 = &_48;
        _652 = &(*_653);
        _651 = <Ref<'_, SpotMarket> as Deref>::deref(move _652) -> [return: bb347, unwind: bb438];
    }

    bb347: {
        _650 = &(*_651);
        StorageDead(_652);
        StorageLive(_654);
        StorageLive(_655);
        _655 = _130;
        _654 = core::num::<impl i128>::unsigned_abs(move _655) -> [return: bb348, unwind: bb438];
    }

    bb348: {
        StorageDead(_655);
        StorageLive(_656);
        StorageLive(_657);
        _657 = &_77;
        _656 = &(*_657);
        StorageLive(_658);
        _658 = _3;
        StorageLive(_659);
        _659 = _25;
        StorageLive(_660);
        _660 = _27;
        _649 = calculate_free_collateral_delta_for_spot(move _650, move _654, move _656, move _658, move _659, move _660) -> [return: bb349, unwind: bb438];
    }

    bb349: {
        StorageDead(_660);
        StorageDead(_659);
        StorageDead(_658);
        StorageDead(_656);
        StorageDead(_654);
        StorageDead(_650);
        _648 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _649) -> [return: bb350, unwind: bb438];
    }

    bb350: {
        StorageDead(_649);
        _661 = discriminant(_648);
        switchInt(move _661) -> [0: bb351, 1: bb352, otherwise: bb6];
    }

    bb351: {
        StorageLive(_665);
        _665 = ((_648 as Continue).0: u32);
        _647 = _665;
        StorageDead(_665);
        StorageDead(_657);
        StorageDead(_653);
        StorageDead(_651);
        StorageDead(_648);
        StorageLive(_668);
        StorageLive(_669);
        StorageLive(_670);
        StorageLive(_671);
        StorageLive(_672);
        _672 = &_48;
        _671 = <Ref<'_, SpotMarket> as Deref>::deref(move _672) -> [return: bb354, unwind: bb438];
    }

    bb352: {
        StorageLive(_662);
        _662 = ((_648 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_664);
        _664 = _662;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _664) -> [return: bb353, unwind: bb438];
    }

    bb353: {
        StorageDead(_664);
        StorageDead(_662);
        StorageDead(_657);
        StorageDead(_653);
        StorageDead(_651);
        StorageDead(_648);
        goto -> bb386;
    }

    bb354: {
        StorageDead(_672);
        _670 = ((*_671).41: u32);
        _669 = Gt(move _670, const 6_u32);
        switchInt(move _669) -> [0: bb359, otherwise: bb355];
    }

    bb355: {
        StorageDead(_671);
        StorageDead(_670);
        StorageLive(_673);
        StorageLive(_674);
        StorageLive(_675);
        StorageLive(_676);
        StorageLive(_677);
        _677 = &_48;
        _676 = <Ref<'_, SpotMarket> as Deref>::deref(move _677) -> [return: bb356, unwind: bb438];
    }

    bb356: {
        StorageDead(_677);
        _675 = ((*_676).41: u32);
        _678 = CheckedSub(_675, const 6_u32);
        assert(!move (_678.1: bool), "attempt to compute `{} - {}`, which would overflow", move _675, const 6_u32) -> [success: bb357, unwind: bb438];
    }

    bb357: {
        _674 = move (_678.0: u32);
        StorageDead(_675);
        _673 = core::num::<impl i128>::pow(const 10_i128, move _674) -> [return: bb358, unwind: bb438];
    }

    bb358: {
        StorageDead(_674);
        _668 = (move _673, const 1_i128);
        StorageDead(_673);
        StorageDead(_676);
        goto -> bb363;
    }

    bb359: {
        StorageDead(_671);
        StorageDead(_670);
        StorageLive(_679);
        StorageLive(_680);
        StorageLive(_681);
        StorageLive(_682);
        StorageLive(_683);
        _683 = &_48;
        _682 = <Ref<'_, SpotMarket> as Deref>::deref(move _683) -> [return: bb360, unwind: bb438];
    }

    bb360: {
        StorageDead(_683);
        _681 = ((*_682).41: u32);
        _684 = CheckedSub(const 6_u32, _681);
        assert(!move (_684.1: bool), "attempt to compute `{} - {}`, which would overflow", const 6_u32, move _681) -> [success: bb361, unwind: bb438];
    }

    bb361: {
        _680 = move (_684.0: u32);
        StorageDead(_681);
        _679 = core::num::<impl i128>::pow(const 10_i128, move _680) -> [return: bb362, unwind: bb438];
    }

    bb362: {
        StorageDead(_680);
        _668 = (const 1_i128, move _679);
        StorageDead(_679);
        StorageDead(_682);
        goto -> bb363;
    }

    bb363: {
        StorageDead(_669);
        StorageLive(_666);
        _666 = (_668.0: i128);
        StorageLive(_667);
        _667 = (_668.1: i128);
        StorageDead(_668);
        StorageLive(_685);
        StorageLive(_686);
        _686 = &_30;
        StorageLive(_687);
        _687 = &_666;
        StorageLive(_688);
        _688 = &_667;
        StorageLive(_689);
        _689 = &_80;
        StorageLive(_690);
        _690 = &_48;
        StorageLive(_691);
        _691 = &_130;
        StorageLive(_692);
        _692 = &_77;
        StorageLive(_693);
        _693 = &_3;
        StorageLive(_694);
        _694 = &_25;
        StorageLive(_695);
        _695 = &_27;
        _685 = {closure@programs/drift/src/math/orders.rs:1144:58: 1144:86} { free_collateral: move _686, numerator_scale: move _687, denominator_scale: move _688, max_oracle_price: move _689, spot_market: move _690, worst_case_token_amount: move _691, strict_oracle_price: move _692, direction: move _693, user_custom_liability_weight: move _694, user_custom_asset_weight: move _695 };
        StorageDead(_695);
        StorageDead(_694);
        StorageDead(_693);
        StorageDead(_692);
        StorageDead(_691);
        StorageDead(_690);
        StorageDead(_689);
        StorageDead(_688);
        StorageDead(_687);
        StorageDead(_686);
        StorageLive(_696);
        _696 = const 0_u64;
        StorageLive(_697);
        _697 = _647;
        StorageLive(_698);
        StorageLive(_699);
        StorageLive(_700);
        _700 = std::ops::Range::<i32> { start: const 0_i32, end: const 6_i32 };
        _699 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _700) -> [return: bb364, unwind: bb438];
    }

    bb364: {
        StorageDead(_700);
        StorageLive(_701);
        _701 = move _699;
        goto -> bb365;
    }

    bb365: {
        StorageLive(_703);
        StorageLive(_704);
        StorageLive(_705);
        StorageLive(_706);
        _706 = &mut _701;
        _705 = &mut (*_706);
        _704 = <std::ops::Range<i32> as Iterator>::next(move _705) -> [return: bb366, unwind: bb438];
    }

    bb366: {
        StorageDead(_705);
        _707 = discriminant(_704);
        switchInt(move _707) -> [0: bb368, 1: bb367, otherwise: bb6];
    }

    bb367: {
        StorageLive(_711);
        StorageLive(_712);
        StorageLive(_713);
        StorageLive(_714);
        _714 = &_685;
        StorageLive(_715);
        StorageLive(_716);
        _716 = _697;
        _715 = (move _716,);
        _713 = <{closure@programs/drift/src/math/orders.rs:1144:58: 1144:86} as Fn<(u32,)>>::call(move _714, move _715) -> [return: bb369, unwind: bb438];
    }

    bb368: {
        _698 = const ();
        goto -> bb376;
    }

    bb369: {
        StorageDead(_716);
        StorageDead(_715);
        StorageDead(_714);
        _712 = <std::result::Result<(u64, u32), error::ErrorCode> as Try>::branch(move _713) -> [return: bb370, unwind: bb438];
    }

    bb370: {
        StorageDead(_713);
        _717 = discriminant(_712);
        switchInt(move _717) -> [0: bb371, 1: bb372, otherwise: bb6];
    }

    bb371: {
        StorageLive(_721);
        _721 = ((_712 as Continue).0: (u64, u32));
        _711 = _721;
        StorageDead(_721);
        StorageLive(_709);
        _709 = (_711.0: u64);
        StorageLive(_710);
        _710 = (_711.1: u32);
        StorageDead(_712);
        StorageDead(_711);
        StorageLive(_722);
        _722 = _709;
        _696 = move _722;
        StorageDead(_722);
        StorageLive(_723);
        _723 = _710;
        _697 = move _723;
        StorageDead(_723);
        StorageLive(_724);
        StorageLive(_725);
        _725 = _697;
        StorageLive(_726);
        _726 = _647;
        _724 = Eq(move _725, move _726);
        switchInt(move _724) -> [0: bb375, otherwise: bb374];
    }

    bb372: {
        StorageLive(_718);
        _718 = ((_712 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_720);
        _720 = _718;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _720) -> [return: bb373, unwind: bb438];
    }

    bb373: {
        StorageDead(_720);
        StorageDead(_718);
        StorageDead(_712);
        StorageDead(_711);
        StorageDead(_706);
        StorageDead(_704);
        StorageDead(_703);
        StorageDead(_701);
        StorageDead(_699);
        StorageDead(_698);
        StorageDead(_697);
        StorageDead(_696);
        StorageDead(_685);
        StorageDead(_667);
        StorageDead(_666);
        goto -> bb386;
    }

    bb374: {
        StorageDead(_726);
        StorageDead(_725);
        _698 = const ();
        StorageDead(_724);
        StorageDead(_710);
        StorageDead(_709);
        goto -> bb376;
    }

    bb375: {
        StorageDead(_726);
        StorageDead(_725);
        _703 = const ();
        StorageDead(_724);
        StorageDead(_710);
        StorageDead(_709);
        StorageDead(_706);
        StorageDead(_704);
        StorageDead(_703);
        _702 = const ();
        goto -> bb365;
    }

    bb376: {
        StorageDead(_706);
        StorageDead(_704);
        StorageDead(_703);
        StorageDead(_701);
        StorageDead(_699);
        StorageDead(_698);
        StorageLive(_728);
        StorageLive(_729);
        StorageLive(_730);
        StorageLive(_731);
        _731 = _696;
        StorageLive(_732);
        _732 = _29;
        _730 = <u64 as SafeMath>::safe_add(move _731, move _732) -> [return: bb377, unwind: bb438];
    }

    bb377: {
        StorageDead(_732);
        StorageDead(_731);
        _729 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _730) -> [return: bb378, unwind: bb438];
    }

    bb378: {
        StorageDead(_730);
        _733 = discriminant(_729);
        switchInt(move _733) -> [0: bb379, 1: bb380, otherwise: bb6];
    }

    bb379: {
        StorageLive(_737);
        _737 = ((_729 as Continue).0: u64);
        _728 = _737;
        StorageDead(_737);
        StorageLive(_738);
        StorageLive(_739);
        StorageLive(_740);
        _740 = &_48;
        _739 = <Ref<'_, SpotMarket> as Deref>::deref(move _740) -> [return: bb382, unwind: bb438];
    }

    bb380: {
        StorageLive(_734);
        _734 = ((_729 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_736);
        _736 = _734;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _736) -> [return: bb381, unwind: bb438];
    }

    bb381: {
        StorageDead(_736);
        StorageDead(_734);
        StorageDead(_728);
        StorageDead(_697);
        StorageDead(_696);
        StorageDead(_685);
        StorageDead(_667);
        StorageDead(_666);
        StorageDead(_647);
        StorageDead(_130);
        StorageDead(_106);
        StorageDead(_105);
        StorageDead(_92);
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_77);
        StorageDead(_74);
        StorageDead(_59);
        drop(_48) -> [return: bb385, unwind: bb439];
    }

    bb382: {
        StorageDead(_740);
        _738 = ((*_739).25: u64);
        _0 = math::orders::standardize_base_asset_amount(move _728, move _738) -> [return: bb383, unwind: bb438];
    }

    bb383: {
        StorageDead(_738);
        StorageDead(_728);
        StorageDead(_697);
        StorageDead(_696);
        StorageDead(_685);
        StorageDead(_667);
        StorageDead(_666);
        StorageDead(_647);
        StorageDead(_130);
        StorageDead(_106);
        StorageDead(_105);
        StorageDead(_92);
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_77);
        StorageDead(_74);
        StorageDead(_59);
        drop(_48) -> [return: bb384, unwind: bb439];
    }

    bb384: {
        StorageDead(_48);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_739);
        StorageDead(_729);
        goto -> bb437;
    }

    bb385: {
        StorageDead(_48);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_729);
        goto -> bb437;
    }

    bb386: {
        StorageDead(_647);
        goto -> bb430;
    }

    bb387: {
        StorageDead(_621);
        StorageDead(_626);
        StorageDead(_622);
        goto -> bb398;
    }

    bb388: {
        StorageDead(_584);
        StorageDead(_583);
        goto -> bb389;
    }

    bb389: {
        StorageDead(_581);
        StorageDead(_580);
        goto -> bb390;
    }

    bb390: {
        StorageDead(_578);
        StorageDead(_577);
        StorageDead(_576);
        goto -> bb391;
    }

    bb391: {
        StorageDead(_574);
        StorageDead(_593);
        StorageDead(_589);
        StorageDead(_585);
        StorageDead(_582);
        StorageDead(_579);
        StorageDead(_575);
        goto -> bb398;
    }

    bb392: {
        StorageDead(_524);
        StorageDead(_523);
        goto -> bb393;
    }

    bb393: {
        StorageDead(_521);
        StorageDead(_520);
        goto -> bb394;
    }

    bb394: {
        StorageDead(_518);
        StorageDead(_517);
        goto -> bb395;
    }

    bb395: {
        StorageDead(_546);
        goto -> bb397;
    }

    bb396: {
        StorageDead(_528);
        StorageDead(_527);
        StorageDead(_526);
        StorageDead(_524);
        StorageDead(_523);
        StorageDead(_521);
        StorageDead(_520);
        StorageDead(_518);
        StorageDead(_517);
        goto -> bb397;
    }

    bb397: {
        StorageDead(_532);
        StorageDead(_529);
        StorageDead(_525);
        StorageDead(_522);
        StorageDead(_519);
        StorageDead(_516);
        goto -> bb398;
    }

    bb398: {
        StorageDead(_515);
        goto -> bb399;
    }

    bb399: {
        StorageDead(_497);
        goto -> bb406;
    }

    bb400: {
        StorageDead(_450);
        StorageDead(_448);
        StorageDead(_447);
        goto -> bb401;
    }

    bb401: {
        StorageDead(_445);
        StorageDead(_444);
        goto -> bb402;
    }

    bb402: {
        StorageDead(_454);
        StorageDead(_451);
        StorageDead(_446);
        StorageDead(_443);
        goto -> bb403;
    }

    bb403: {
        StorageDead(_442);
        goto -> bb404;
    }

    bb404: {
        StorageDead(_423);
        goto -> bb405;
    }

    bb405: {
        StorageDead(_409);
        StorageDead(_407);
        StorageDead(_406);
        goto -> bb406;
    }

    bb406: {
        StorageDead(_405);
        goto -> bb407;
    }

    bb407: {
        StorageDead(_393);
        StorageDead(_389);
        StorageDead(_387);
        goto -> bb429;
    }

    bb408: {
        StorageDead(_369);
        StorageDead(_374);
        StorageDead(_370);
        goto -> bb419;
    }

    bb409: {
        StorageDead(_332);
        StorageDead(_331);
        goto -> bb410;
    }

    bb410: {
        StorageDead(_329);
        StorageDead(_328);
        goto -> bb411;
    }

    bb411: {
        StorageDead(_326);
        StorageDead(_325);
        StorageDead(_324);
        goto -> bb412;
    }

    bb412: {
        StorageDead(_322);
        StorageDead(_341);
        StorageDead(_337);
        StorageDead(_333);
        StorageDead(_330);
        StorageDead(_327);
        StorageDead(_323);
        goto -> bb419;
    }

    bb413: {
        StorageDead(_272);
        StorageDead(_271);
        goto -> bb414;
    }

    bb414: {
        StorageDead(_269);
        StorageDead(_268);
        goto -> bb415;
    }

    bb415: {
        StorageDead(_266);
        StorageDead(_265);
        goto -> bb416;
    }

    bb416: {
        StorageDead(_294);
        goto -> bb418;
    }

    bb417: {
        StorageDead(_276);
        StorageDead(_275);
        StorageDead(_274);
        StorageDead(_272);
        StorageDead(_271);
        StorageDead(_269);
        StorageDead(_268);
        StorageDead(_266);
        StorageDead(_265);
        goto -> bb418;
    }

    bb418: {
        StorageDead(_280);
        StorageDead(_277);
        StorageDead(_273);
        StorageDead(_270);
        StorageDead(_267);
        StorageDead(_264);
        goto -> bb419;
    }

    bb419: {
        StorageDead(_263);
        goto -> bb420;
    }

    bb420: {
        StorageDead(_244);
        goto -> bb427;
    }

    bb421: {
        StorageDead(_197);
        StorageDead(_195);
        StorageDead(_194);
        goto -> bb422;
    }

    bb422: {
        StorageDead(_192);
        StorageDead(_191);
        goto -> bb423;
    }

    bb423: {
        StorageDead(_201);
        StorageDead(_198);
        StorageDead(_193);
        StorageDead(_190);
        goto -> bb424;
    }

    bb424: {
        StorageDead(_189);
        goto -> bb425;
    }

    bb425: {
        StorageDead(_171);
        goto -> bb426;
    }

    bb426: {
        StorageDead(_157);
        StorageDead(_155);
        StorageDead(_154);
        goto -> bb427;
    }

    bb427: {
        StorageDead(_153);
        goto -> bb428;
    }

    bb428: {
        StorageDead(_141);
        goto -> bb429;
    }

    bb429: {
        StorageDead(_137);
        StorageDead(_135);
        StorageDead(_134);
        goto -> bb430;
    }

    bb430: {
        StorageDead(_130);
        StorageDead(_106);
        StorageDead(_105);
        goto -> bb431;
    }

    bb431: {
        StorageDead(_92);
        goto -> bb432;
    }

    bb432: {
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_77);
        StorageDead(_74);
        goto -> bb433;
    }

    bb433: {
        StorageDead(_59);
        drop(_48) -> [return: bb434, unwind: bb439];
    }

    bb434: {
        StorageDead(_48);
        goto -> bb436;
    }

    bb435: {
        StorageDead(_35);
        StorageDead(_31);
        goto -> bb436;
    }

    bb436: {
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb437;
    }

    bb437: {
        return;
    }

    bb438 (cleanup): {
        drop(_48) -> [return: bb439, unwind terminate(cleanup)];
    }

    bb439 (cleanup): {
        resume;
    }

    bb440 (cleanup): {
        _751 = discriminant(_49);
        goto -> bb439;
    }
}
