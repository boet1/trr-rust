// MIR for `margin_calculation::<impl at programs/drift/src/state/margin_calculation.rs:208:1: 208:23>::add_total_collateral` after PreCodegen

fn margin_calculation::<impl at programs/drift/src/state/margin_calculation.rs:208:1: 208:23>::add_total_collateral(_1: &mut MarginCalculation, _2: i128) -> std::result::Result<(), error::ErrorCode> {
    debug self => _1;
    debug total_collateral => _2;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let mut _3: i128;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _5: std::result::Result<i128, error::ErrorCode>;
    let mut _6: i128;
    let mut _7: i128;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _12: i128;
    let _13: ();
    let mut _14: bool;
    let mut _15: u128;
    let mut _16: bool;
    let mut _17: i128;
    let mut _18: i128;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _20: std::result::Result<i128, error::ErrorCode>;
    let mut _21: i128;
    let mut _22: i128;
    let mut _23: i128;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _25: std::result::Result<i128, error::ErrorCode>;
    let mut _26: i128;
    let mut _27: i128;
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _29: std::result::Result<i128, error::ErrorCode>;
    let mut _30: u128;
    let mut _31: isize;
    let _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _35: i128;
    let mut _36: isize;
    let _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _38: !;
    let mut _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _40: i128;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: isize;
    let _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _49: i128;
    let mut _50: ();
    scope 1 {
        debug residual => _9;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _12;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _32;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _35;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _37;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _40;
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _46;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _49;
        scope 16 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = ((*_1).1: i128);
        StorageLive(_7);
        _7 = _2;
        _5 = <i128 as SafeMath>::safe_add(move _6, move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        StorageDead(_6);
        _4 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_5);
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_4 as Continue).0: i128);
        _3 = _12;
        StorageDead(_12);
        ((*_1).1: i128) = move _3;
        StorageDead(_3);
        StorageDead(_4);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = (((*_1).0: state::margin_calculation::MarginContext).4: u128);
        _14 = Gt(move _15, const 0_u128);
        switchInt(move _14) -> [0: bb8, otherwise: bb7];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_11);
        _11 = _9;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _11) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_3);
        StorageDead(_4);
        goto -> bb32;
    }

    bb7: {
        StorageDead(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = _2;
        _16 = Lt(move _17, const 0_i128);
        switchInt(move _16) -> [0: bb27, otherwise: bb9];
    }

    bb8: {
        StorageDead(_15);
        goto -> bb28;
    }

    bb9: {
        StorageDead(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = ((*_1).2: i128);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = _2;
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = (((*_1).0: state::margin_calculation::MarginContext).4: u128);
        _29 = <u128 as Cast>::cast::<i128>(move _30) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_30);
        _28 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _29) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_29);
        _31 = discriminant(_28);
        switchInt(move _31) -> [0: bb12, 1: bb13, otherwise: bb4];
    }

    bb12: {
        StorageLive(_35);
        _35 = ((_28 as Continue).0: i128);
        _27 = _35;
        StorageDead(_35);
        _25 = <i128 as SafeMath>::safe_mul(move _26, move _27) -> [return: bb15, unwind continue];
    }

    bb13: {
        StorageLive(_32);
        _32 = ((_28 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_34);
        _34 = _32;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _34) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_34);
        StorageDead(_32);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb30;
    }

    bb15: {
        StorageDead(_27);
        StorageDead(_26);
        _24 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _25) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_25);
        _36 = discriminant(_24);
        switchInt(move _36) -> [0: bb17, 1: bb18, otherwise: bb4];
    }

    bb17: {
        StorageLive(_40);
        _40 = ((_24 as Continue).0: i128);
        _23 = _40;
        StorageDead(_40);
        _41 = Eq(const _, const 0_i128);
        assert(!move _41, "attempt to divide `{}` by zero", _23) -> [success: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_37);
        _37 = ((_24 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_39);
        _39 = _37;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _39) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_39);
        StorageDead(_37);
        goto -> bb30;
    }

    bb20: {
        _42 = Eq(const _, const -1_i128);
        _43 = Eq(_23, const i128::MIN);
        _44 = BitAnd(move _42, move _43);
        assert(!move _44, "attempt to compute `{} / {}`, which would overflow", _23, const _) -> [success: bb21, unwind continue];
    }

    bb21: {
        _22 = Div(move _23, const _);
        StorageDead(_23);
        _20 = <i128 as SafeMath>::safe_add(move _21, move _22) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_22);
        StorageDead(_21);
        _19 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _20) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_20);
        _45 = discriminant(_19);
        switchInt(move _45) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_49);
        _49 = ((_19 as Continue).0: i128);
        _18 = _49;
        StorageDead(_49);
        ((*_1).2: i128) = move _18;
        StorageDead(_18);
        StorageDead(_28);
        StorageDead(_24);
        StorageDead(_19);
        _13 = const ();
        goto -> bb29;
    }

    bb25: {
        StorageLive(_46);
        _46 = ((_19 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_48);
        _48 = _46;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _48) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_48);
        StorageDead(_46);
        goto -> bb31;
    }

    bb27: {
        StorageDead(_17);
        goto -> bb28;
    }

    bb28: {
        _13 = const ();
        goto -> bb29;
    }

    bb29: {
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_50);
        _50 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _50);
        StorageDead(_50);
        goto -> bb32;
    }

    bb30: {
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        goto -> bb31;
    }

    bb31: {
        StorageDead(_18);
        StorageDead(_28);
        StorageDead(_24);
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb32;
    }

    bb32: {
        return;
    }
}
