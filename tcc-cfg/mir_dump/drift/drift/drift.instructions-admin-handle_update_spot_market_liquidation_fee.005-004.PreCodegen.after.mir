// MIR for `admin::handle_update_spot_market_liquidation_fee` after PreCodegen

fn admin::handle_update_spot_market_liquidation_fee(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::AdminUpdateSpotMarket<'_>>, _2: u32, _3: u32) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug liquidator_fee => _2;
    debug if_liquidation_fee => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: ();
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _6: std::result::Result<(), anchor_lang::error::Error>;
    let mut _7: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let _8: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _13: ();
    let _14: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _15: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _17: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _18: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _19: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _20: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _21: isize;
    let _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _23: !;
    let mut _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _25: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _26: ();
    let mut _27: &str;
    let _28: &str;
    let mut _29: &std::string::String;
    let _30: &std::string::String;
    let _31: std::string::String;
    let mut _33: std::fmt::Arguments<'_>;
    let mut _34: &[&str];
    let mut _35: &[&str; 2];
    let _36: &[&str; 2];
    let _37: [&str; 2];
    let mut _38: &[core::fmt::rt::Argument<'_>];
    let mut _39: &[core::fmt::rt::Argument<'_>; 1];
    let _40: &[core::fmt::rt::Argument<'_>; 1];
    let _41: [core::fmt::rt::Argument<'_>; 1];
    let mut _42: core::fmt::rt::Argument<'_>;
    let mut _43: &u16;
    let _44: &u16;
    let _45: &state::spot_market::SpotMarket;
    let mut _46: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _47: ();
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _49: std::result::Result<(), error::ErrorCode>;
    let mut _50: bool;
    let mut _51: u32;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _53: std::result::Result<u32, error::ErrorCode>;
    let mut _54: u32;
    let mut _55: u32;
    let mut _56: isize;
    let mut _58: !;
    let mut _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _61: ();
    let _63: ();
    let mut _64: &str;
    let _65: &str;
    let mut _66: &std::string::String;
    let _67: &std::string::String;
    let _68: std::string::String;
    let mut _70: std::fmt::Arguments<'_>;
    let mut _71: &[&str];
    let mut _72: &[&str; 2];
    let _73: &[&str; 2];
    let _74: [&str; 2];
    let mut _75: &[core::fmt::rt::Argument<'_>];
    let mut _76: &[core::fmt::rt::Argument<'_>; 1];
    let _77: &[core::fmt::rt::Argument<'_>; 1];
    let _78: [core::fmt::rt::Argument<'_>; 1];
    let mut _79: core::fmt::rt::Argument<'_>;
    let mut _80: &error::ErrorCode;
    let _81: &error::ErrorCode;
    let _82: ();
    let mut _83: &str;
    let _84: &str;
    let mut _85: error::ErrorCode;
    let mut _86: isize;
    let mut _88: !;
    let mut _89: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _91: ();
    let mut _92: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _93: std::result::Result<(), error::ErrorCode>;
    let mut _94: bool;
    let mut _95: u32;
    let mut _96: u32;
    let mut _97: bool;
    let mut _98: ();
    let _100: ();
    let mut _101: &str;
    let _102: &str;
    let mut _103: &std::string::String;
    let _104: &std::string::String;
    let _105: std::string::String;
    let mut _107: std::fmt::Arguments<'_>;
    let mut _108: &[&str];
    let mut _109: &[&str; 2];
    let _110: &[&str; 2];
    let _111: [&str; 2];
    let mut _112: &[core::fmt::rt::Argument<'_>];
    let mut _113: &[core::fmt::rt::Argument<'_>; 1];
    let _114: &[core::fmt::rt::Argument<'_>; 1];
    let _115: [core::fmt::rt::Argument<'_>; 1];
    let mut _116: core::fmt::rt::Argument<'_>;
    let mut _117: &error::ErrorCode;
    let _118: &error::ErrorCode;
    let _119: ();
    let mut _120: &str;
    let _121: &str;
    let mut _122: error::ErrorCode;
    let mut _123: isize;
    let mut _125: !;
    let mut _126: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _128: ();
    let mut _129: &str;
    let _130: &str;
    let mut _131: &std::string::String;
    let _132: &std::string::String;
    let _133: std::string::String;
    let mut _135: std::fmt::Arguments<'_>;
    let mut _136: &[&str];
    let mut _137: &[&str; 2];
    let _138: &[&str; 2];
    let _139: [&str; 2];
    let mut _140: &[core::fmt::rt::Argument<'_>];
    let mut _141: &[core::fmt::rt::Argument<'_>; 2];
    let _142: &[core::fmt::rt::Argument<'_>; 2];
    let _143: [core::fmt::rt::Argument<'_>; 2];
    let mut _144: core::fmt::rt::Argument<'_>;
    let mut _145: &u32;
    let _146: &u32;
    let _147: &state::spot_market::SpotMarket;
    let mut _148: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _149: core::fmt::rt::Argument<'_>;
    let mut _150: &u32;
    let _151: &u32;
    let _152: ();
    let mut _153: &str;
    let _154: &str;
    let mut _155: &std::string::String;
    let _156: &std::string::String;
    let _157: std::string::String;
    let mut _159: std::fmt::Arguments<'_>;
    let mut _160: &[&str];
    let mut _161: &[&str; 2];
    let _162: &[&str; 2];
    let _163: [&str; 2];
    let mut _164: &[core::fmt::rt::Argument<'_>];
    let mut _165: &[core::fmt::rt::Argument<'_>; 2];
    let _166: &[core::fmt::rt::Argument<'_>; 2];
    let _167: [core::fmt::rt::Argument<'_>; 2];
    let mut _168: core::fmt::rt::Argument<'_>;
    let mut _169: &u32;
    let _170: &u32;
    let _171: &state::spot_market::SpotMarket;
    let mut _172: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _173: core::fmt::rt::Argument<'_>;
    let mut _174: &u32;
    let _175: &u32;
    let mut _176: u32;
    let mut _177: &mut state::spot_market::SpotMarket;
    let mut _178: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _179: u32;
    let mut _180: &mut state::spot_market::SpotMarket;
    let mut _181: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _182: ();
    let mut _188: &mut instructions::admin::AdminUpdateSpotMarket<'_>;
    let mut _189: &mut instructions::admin::AdminUpdateSpotMarket<'_>;
    let mut _190: isize;
    let mut _191: isize;
    let mut _192: isize;
    let mut _193: isize;
    let mut _194: isize;
    let mut _195: isize;
    let mut _196: isize;
    let mut _197: isize;
    let mut _198: isize;
    let mut _199: isize;
    scope 1 {
        debug residual => _10;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _13;
        scope 4 {
        }
    }
    scope 5 {
        debug spot_market => _14;
        let _32: std::string::String;
        let _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _60: u32;
        let _62: error::ErrorCode;
        let _87: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _90: ();
        let _99: error::ErrorCode;
        let _124: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _127: ();
        let _134: std::string::String;
        let _158: std::string::String;
        let mut _183: &[&str; 2];
        let mut _184: &[&str; 2];
        let mut _187: &[&str; 2];
        scope 10 {
            debug res => _32;
        }
        scope 11 {
            debug residual => _57;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _60;
            scope 14 {
            }
        }
        scope 15 {
            debug error_code => _62;
            let _69: std::string::String;
            let mut _186: &[&str; 2];
            scope 16 {
                debug res => _69;
            }
        }
        scope 17 {
            debug residual => _87;
            scope 18 {
            }
        }
        scope 19 {
            debug val => _90;
            scope 20 {
            }
        }
        scope 21 {
            debug error_code => _99;
            let _106: std::string::String;
            let mut _185: &[&str; 2];
            scope 22 {
                debug res => _106;
            }
        }
        scope 23 {
            debug residual => _124;
            scope 24 {
            }
        }
        scope 25 {
            debug val => _127;
            scope 26 {
            }
        }
        scope 27 {
            debug res => _134;
        }
        scope 28 {
            debug res => _158;
        }
    }
    scope 6 {
        debug residual => _22;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _25;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _188 = deref_copy (_1.1: &mut instructions::admin::AdminUpdateSpotMarket<'_>);
        _8 = &((*_188).2: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _7 = &(*_8);
        _6 = constraints::spot_market_valid(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _6) -> [return: bb2, unwind: bb83];
    }

    bb2: {
        StorageDead(_6);
        _9 = discriminant(_5);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_5 as Continue).0: ());
        _4 = _13;
        StorageDead(_13);
        _190 = discriminant(_5);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _189 = deref_copy (_1.1: &mut instructions::admin::AdminUpdateSpotMarket<'_>);
        _19 = &((*_189).2: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _18 = anchor_lang::prelude::AccountLoader::<'_, SpotMarket>::load_mut(move _19) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_12);
        _12 = move _10;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _12) -> [return: bb6, unwind: bb85];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        _196 = discriminant(_5);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb76;
    }

    bb7: {
        StorageDead(_19);
        StorageLive(_20);
        _20 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _17 = std::result::Result::<RefMut<'_, SpotMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _18, move _20) -> [return: bb8, unwind: bb83];
    }

    bb8: {
        StorageDead(_20);
        StorageDead(_18);
        _16 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _17) -> [return: bb9, unwind: bb83];
    }

    bb9: {
        StorageDead(_17);
        _21 = discriminant(_16);
        switchInt(move _21) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_25);
        _25 = move ((_16 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _15 = move _25;
        StorageDead(_25);
        _14 = &mut _15;
        _194 = discriminant(_16);
        StorageDead(_16);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _187 = const _;
        _36 = &(*_187);
        _35 = &(*_36);
        _34 = move _35 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_35);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = &(*_14);
        _45 = <RefMut<'_, SpotMarket> as Deref>::deref(move _46) -> [return: bb13, unwind: bb82];
    }

    bb11: {
        StorageLive(_22);
        _22 = ((_16 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_24);
        _24 = _22;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _24) -> [return: bb12, unwind: bb84];
    }

    bb12: {
        StorageDead(_24);
        StorageDead(_22);
        _192 = discriminant(_16);
        StorageDead(_16);
        goto -> bb75;
    }

    bb13: {
        StorageDead(_46);
        _44 = &((*_45).42: u16);
        _43 = &(*_44);
        _42 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _43) -> [return: bb14, unwind: bb82];
    }

    bb14: {
        StorageDead(_43);
        _41 = [move _42];
        StorageDead(_42);
        _40 = &_41;
        _39 = &(*_40);
        _38 = move _39 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_39);
        _33 = Arguments::<'_>::new_v1(move _34, move _38) -> [return: bb15, unwind: bb82];
    }

    bb15: {
        StorageDead(_38);
        StorageDead(_34);
        _32 = format(move _33) -> [return: bb16, unwind: bb82];
    }

    bb16: {
        StorageDead(_33);
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_36);
        _31 = move _32;
        StorageDead(_32);
        _30 = &_31;
        _29 = &(*_30);
        _28 = <String as Deref>::deref(move _29) -> [return: bb17, unwind: bb81];
    }

    bb17: {
        _27 = &(*_28);
        StorageDead(_29);
        _26 = solana_program::log::sol_log(move _27) -> [return: bb18, unwind: bb81];
    }

    bb18: {
        StorageDead(_27);
        drop(_31) -> [return: bb19, unwind: bb82];
    }

    bb19: {
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_28);
        StorageDead(_26);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = _2;
        StorageLive(_55);
        _55 = _3;
        _53 = <u32 as SafeMath>::safe_add(move _54, move _55) -> [return: bb20, unwind: bb82];
    }

    bb20: {
        StorageDead(_55);
        StorageDead(_54);
        _52 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _53) -> [return: bb21, unwind: bb82];
    }

    bb21: {
        StorageDead(_53);
        _56 = discriminant(_52);
        switchInt(move _56) -> [0: bb22, 1: bb23, otherwise: bb4];
    }

    bb22: {
        StorageLive(_60);
        _60 = ((_52 as Continue).0: u32);
        _51 = _60;
        StorageDead(_60);
        _50 = Lt(move _51, const _);
        switchInt(move _50) -> [0: bb26, otherwise: bb25];
    }

    bb23: {
        StorageLive(_57);
        _57 = ((_52 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_59);
        _59 = _57;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _59) -> [return: bb24, unwind: bb82];
    }

    bb24: {
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_49);
        goto -> bb73;
    }

    bb25: {
        StorageDead(_52);
        StorageDead(_51);
        StorageLive(_61);
        _61 = ();
        _49 = std::result::Result::<(), error::ErrorCode>::Ok(move _61);
        StorageDead(_61);
        goto -> bb34;
    }

    bb26: {
        StorageDead(_52);
        StorageDead(_51);
        StorageLive(_62);
        _62 = error::ErrorCode::DefaultError;
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _186 = const _;
        _73 = &(*_186);
        _72 = &(*_73);
        _71 = move _72 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_72);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        _81 = &_62;
        _80 = &(*_81);
        _79 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _80) -> [return: bb27, unwind: bb82];
    }

    bb27: {
        StorageDead(_80);
        _78 = [move _79];
        StorageDead(_79);
        _77 = &_78;
        _76 = &(*_77);
        _75 = move _76 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_76);
        _70 = Arguments::<'_>::new_v1(move _71, move _75) -> [return: bb28, unwind: bb82];
    }

    bb28: {
        StorageDead(_75);
        StorageDead(_71);
        _69 = format(move _70) -> [return: bb29, unwind: bb82];
    }

    bb29: {
        StorageDead(_70);
        StorageDead(_81);
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_73);
        _68 = move _69;
        StorageDead(_69);
        _67 = &_68;
        _66 = &(*_67);
        _65 = <String as Deref>::deref(move _66) -> [return: bb30, unwind: bb80];
    }

    bb30: {
        _64 = &(*_65);
        StorageDead(_66);
        _63 = solana_program::log::sol_log(move _64) -> [return: bb31, unwind: bb80];
    }

    bb31: {
        StorageDead(_64);
        drop(_68) -> [return: bb32, unwind: bb82];
    }

    bb32: {
        StorageDead(_68);
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_63);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = const "Total liquidation fee must be less than 100%";
        _83 = &(*_84);
        _82 = solana_program::log::sol_log(move _83) -> [return: bb33, unwind: bb82];
    }

    bb33: {
        StorageDead(_83);
        StorageDead(_84);
        StorageDead(_82);
        StorageLive(_85);
        _85 = _62;
        _49 = std::result::Result::<(), error::ErrorCode>::Err(move _85);
        StorageDead(_85);
        StorageDead(_62);
        goto -> bb34;
    }

    bb34: {
        StorageDead(_50);
        _48 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _49) -> [return: bb35, unwind: bb82];
    }

    bb35: {
        StorageDead(_49);
        _86 = discriminant(_48);
        switchInt(move _86) -> [0: bb36, 1: bb37, otherwise: bb4];
    }

    bb36: {
        StorageLive(_90);
        _90 = ((_48 as Continue).0: ());
        _47 = _90;
        StorageDead(_90);
        StorageDead(_48);
        StorageDead(_47);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        _95 = _3;
        StorageLive(_96);
        _97 = Eq(const 10_u32, const 0_u32);
        assert(!move _97, "attempt to divide `{}` by zero", const _) -> [success: bb39, unwind: bb82];
    }

    bb37: {
        StorageLive(_87);
        _87 = ((_48 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_89);
        _89 = _87;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _89) -> [return: bb38, unwind: bb82];
    }

    bb38: {
        StorageDead(_89);
        StorageDead(_87);
        goto -> bb73;
    }

    bb39: {
        _96 = Div(const _, const 10_u32);
        _94 = Le(move _95, move _96);
        switchInt(move _94) -> [0: bb41, otherwise: bb40];
    }

    bb40: {
        StorageDead(_96);
        StorageDead(_95);
        StorageLive(_98);
        _98 = ();
        _93 = std::result::Result::<(), error::ErrorCode>::Ok(move _98);
        StorageDead(_98);
        goto -> bb49;
    }

    bb41: {
        StorageDead(_96);
        StorageDead(_95);
        StorageLive(_99);
        _99 = error::ErrorCode::DefaultError;
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _185 = const _;
        _110 = &(*_185);
        _109 = &(*_110);
        _108 = move _109 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_109);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        _118 = &_99;
        _117 = &(*_118);
        _116 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _117) -> [return: bb42, unwind: bb82];
    }

    bb42: {
        StorageDead(_117);
        _115 = [move _116];
        StorageDead(_116);
        _114 = &_115;
        _113 = &(*_114);
        _112 = move _113 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_113);
        _107 = Arguments::<'_>::new_v1(move _108, move _112) -> [return: bb43, unwind: bb82];
    }

    bb43: {
        StorageDead(_112);
        StorageDead(_108);
        _106 = format(move _107) -> [return: bb44, unwind: bb82];
    }

    bb44: {
        StorageDead(_107);
        StorageDead(_118);
        StorageDead(_115);
        StorageDead(_114);
        StorageDead(_110);
        _105 = move _106;
        StorageDead(_106);
        _104 = &_105;
        _103 = &(*_104);
        _102 = <String as Deref>::deref(move _103) -> [return: bb45, unwind: bb79];
    }

    bb45: {
        _101 = &(*_102);
        StorageDead(_103);
        _100 = solana_program::log::sol_log(move _101) -> [return: bb46, unwind: bb79];
    }

    bb46: {
        StorageDead(_101);
        drop(_105) -> [return: bb47, unwind: bb82];
    }

    bb47: {
        StorageDead(_105);
        StorageDead(_104);
        StorageDead(_102);
        StorageDead(_100);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        _121 = const "if_liquidation_fee must be <= 10%";
        _120 = &(*_121);
        _119 = solana_program::log::sol_log(move _120) -> [return: bb48, unwind: bb82];
    }

    bb48: {
        StorageDead(_120);
        StorageDead(_121);
        StorageDead(_119);
        StorageLive(_122);
        _122 = _99;
        _93 = std::result::Result::<(), error::ErrorCode>::Err(move _122);
        StorageDead(_122);
        StorageDead(_99);
        goto -> bb49;
    }

    bb49: {
        StorageDead(_94);
        _92 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _93) -> [return: bb50, unwind: bb82];
    }

    bb50: {
        StorageDead(_93);
        _123 = discriminant(_92);
        switchInt(move _123) -> [0: bb51, 1: bb52, otherwise: bb4];
    }

    bb51: {
        StorageLive(_127);
        _127 = ((_92 as Continue).0: ());
        _91 = _127;
        StorageDead(_127);
        StorageDead(_92);
        StorageDead(_91);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        _184 = const _;
        _138 = &(*_184);
        _137 = &(*_138);
        _136 = move _137 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_137);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        _148 = &(*_14);
        _147 = <RefMut<'_, SpotMarket> as Deref>::deref(move _148) -> [return: bb54, unwind: bb82];
    }

    bb52: {
        StorageLive(_124);
        _124 = ((_92 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_126);
        _126 = _124;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _126) -> [return: bb53, unwind: bb82];
    }

    bb53: {
        StorageDead(_126);
        StorageDead(_124);
        StorageDead(_92);
        StorageDead(_91);
        goto -> bb74;
    }

    bb54: {
        StorageDead(_148);
        _146 = &((*_147).36: u32);
        _145 = &(*_146);
        _144 = core::fmt::rt::Argument::<'_>::new_debug::<u32>(move _145) -> [return: bb55, unwind: bb82];
    }

    bb55: {
        StorageDead(_145);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        _151 = &_2;
        _150 = &(*_151);
        _149 = core::fmt::rt::Argument::<'_>::new_debug::<u32>(move _150) -> [return: bb56, unwind: bb82];
    }

    bb56: {
        StorageDead(_150);
        _143 = [move _144, move _149];
        StorageDead(_149);
        StorageDead(_144);
        _142 = &_143;
        _141 = &(*_142);
        _140 = move _141 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_141);
        _135 = Arguments::<'_>::new_v1(move _136, move _140) -> [return: bb57, unwind: bb82];
    }

    bb57: {
        StorageDead(_140);
        StorageDead(_136);
        _134 = format(move _135) -> [return: bb58, unwind: bb82];
    }

    bb58: {
        StorageDead(_135);
        StorageDead(_151);
        StorageDead(_147);
        StorageDead(_146);
        StorageDead(_143);
        StorageDead(_142);
        StorageDead(_138);
        _133 = move _134;
        StorageDead(_134);
        _132 = &_133;
        _131 = &(*_132);
        _130 = <String as Deref>::deref(move _131) -> [return: bb59, unwind: bb78];
    }

    bb59: {
        _129 = &(*_130);
        StorageDead(_131);
        _128 = solana_program::log::sol_log(move _129) -> [return: bb60, unwind: bb78];
    }

    bb60: {
        StorageDead(_129);
        drop(_133) -> [return: bb61, unwind: bb82];
    }

    bb61: {
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_130);
        StorageDead(_128);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        _183 = const _;
        _162 = &(*_183);
        _161 = &(*_162);
        _160 = move _161 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_161);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        _172 = &(*_14);
        _171 = <RefMut<'_, SpotMarket> as Deref>::deref(move _172) -> [return: bb62, unwind: bb82];
    }

    bb62: {
        StorageDead(_172);
        _170 = &((*_171).37: u32);
        _169 = &(*_170);
        _168 = core::fmt::rt::Argument::<'_>::new_debug::<u32>(move _169) -> [return: bb63, unwind: bb82];
    }

    bb63: {
        StorageDead(_169);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        _175 = &_3;
        _174 = &(*_175);
        _173 = core::fmt::rt::Argument::<'_>::new_debug::<u32>(move _174) -> [return: bb64, unwind: bb82];
    }

    bb64: {
        StorageDead(_174);
        _167 = [move _168, move _173];
        StorageDead(_173);
        StorageDead(_168);
        _166 = &_167;
        _165 = &(*_166);
        _164 = move _165 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_165);
        _159 = Arguments::<'_>::new_v1(move _160, move _164) -> [return: bb65, unwind: bb82];
    }

    bb65: {
        StorageDead(_164);
        StorageDead(_160);
        _158 = format(move _159) -> [return: bb66, unwind: bb82];
    }

    bb66: {
        StorageDead(_159);
        StorageDead(_175);
        StorageDead(_171);
        StorageDead(_170);
        StorageDead(_167);
        StorageDead(_166);
        StorageDead(_162);
        _157 = move _158;
        StorageDead(_158);
        _156 = &_157;
        _155 = &(*_156);
        _154 = <String as Deref>::deref(move _155) -> [return: bb67, unwind: bb77];
    }

    bb67: {
        _153 = &(*_154);
        StorageDead(_155);
        _152 = solana_program::log::sol_log(move _153) -> [return: bb68, unwind: bb77];
    }

    bb68: {
        StorageDead(_153);
        drop(_157) -> [return: bb69, unwind: bb82];
    }

    bb69: {
        StorageDead(_157);
        StorageDead(_156);
        StorageDead(_154);
        StorageDead(_152);
        StorageLive(_176);
        _176 = _2;
        StorageLive(_177);
        StorageLive(_178);
        _178 = &mut (*_14);
        _177 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _178) -> [return: bb70, unwind: bb82];
    }

    bb70: {
        StorageDead(_178);
        ((*_177).36: u32) = move _176;
        StorageDead(_176);
        StorageDead(_177);
        StorageLive(_179);
        _179 = _3;
        StorageLive(_180);
        StorageLive(_181);
        _181 = &mut (*_14);
        _180 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _181) -> [return: bb71, unwind: bb82];
    }

    bb71: {
        StorageDead(_181);
        ((*_180).37: u32) = move _179;
        StorageDead(_179);
        StorageDead(_180);
        StorageLive(_182);
        _182 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _182);
        StorageDead(_182);
        drop(_15) -> [return: bb72, unwind: bb83];
    }

    bb72: {
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb76;
    }

    bb73: {
        StorageDead(_48);
        StorageDead(_47);
        goto -> bb74;
    }

    bb74: {
        drop(_15) -> [return: bb75, unwind: bb83];
    }

    bb75: {
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb76;
    }

    bb76: {
        return;
    }

    bb77 (cleanup): {
        drop(_157) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        drop(_133) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        drop(_105) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        drop(_68) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        drop(_31) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        drop(_15) -> [return: bb83, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        resume;
    }

    bb84 (cleanup): {
        _198 = discriminant(_16);
        goto -> bb83;
    }

    bb85 (cleanup): {
        _199 = discriminant(_5);
        goto -> bb83;
    }
}
