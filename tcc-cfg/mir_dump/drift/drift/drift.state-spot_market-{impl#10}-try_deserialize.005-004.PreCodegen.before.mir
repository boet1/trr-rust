// MIR for `state::spot_market::<impl at programs/drift/src/state/spot_market.rs:32:1: 32:30>::try_deserialize` before PreCodegen

fn state::spot_market::<impl at programs/drift/src/state/spot_market.rs:32:1: 32:30>::try_deserialize(_1: &mut &[u8]) -> std::result::Result<SpotMarket, anchor_lang::error::Error> {
    debug buf => _1;
    let mut _0: std::result::Result<state::spot_market::SpotMarket, anchor_lang::error::Error>;
    let _2: ();
    let mut _3: bool;
    let mut _4: usize;
    let mut _5: &[u8];
    let mut _6: usize;
    let mut _7: &[i32];
    let mut _8: &[i32; 8];
    let _9: [i32; 8];
    let mut _10: !;
    let mut _11: anchor_lang::error::Error;
    let mut _12: anchor_lang::error::ErrorCode;
    let _13: &[u8];
    let _14: &[u8];
    let mut _15: &[u8];
    let mut _16: std::ops::RangeTo<usize>;
    let _17: ();
    let mut _18: bool;
    let mut _19: &&[u8; 8];
    let _20: &[u8; 8];
    let _21: [u8; 8];
    let mut _22: &&[u8];
    let mut _23: !;
    let mut _24: anchor_lang::error::Error;
    let mut _25: anchor_lang::error::Error;
    let mut _26: anchor_lang::error::AnchorError;
    let mut _27: std::string::String;
    let mut _28: &anchor_lang::error::ErrorCode;
    let _29: anchor_lang::error::ErrorCode;
    let mut _30: u32;
    let mut _31: anchor_lang::error::ErrorCode;
    let mut _32: std::string::String;
    let mut _33: &anchor_lang::error::ErrorCode;
    let _34: anchor_lang::error::ErrorCode;
    let mut _35: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _36: anchor_lang::error::ErrorOrigin;
    let mut _37: anchor_lang::error::Source;
    let mut _38: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _39: &mut &[u8];
    let mut _43: &[i32; 8];
    let mut _44: &[u8];
    let mut _45: &[u8];
    scope 1 {
        debug given_disc => _13;
        let mut _40: &anchor_lang::error::ErrorCode;
        let mut _41: &anchor_lang::error::ErrorCode;
        let mut _42: &&[u8; 8];
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _44 = deref_copy (*_1);
        _5 = &(*_44);
        _4 = core::slice::<impl [u8]>::len(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _43 = const _;
        _8 = &(*_43);
        _7 = move _8 as &[i32] (PointerCoercion(Unsize));
        StorageDead(_8);
        _6 = core::slice::<impl [i32]>::len(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        _3 = Lt(move _4, move _6);
        switchInt(move _3) -> [0: bb5, otherwise: bb3];
    }

    bb3: {
        StorageDead(_6);
        StorageDead(_4);
        StorageLive(_11);
        StorageLive(_12);
        _12 = AccountDiscriminatorNotFound;
        _11 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _12) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_12);
        _0 = std::result::Result::<SpotMarket, anchor_lang::error::Error>::Err(move _11);
        StorageDead(_11);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb16;
    }

    bb5: {
        StorageDead(_6);
        StorageDead(_4);
        _2 = const ();
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _45 = deref_copy (*_1);
        _15 = &(*_45);
        StorageLive(_16);
        _16 = RangeTo::<usize> { end: const 8_usize };
        _14 = <[u8] as Index<RangeTo<usize>>>::index(move _15, move _16) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_16);
        StorageDead(_15);
        _13 = &(*_14);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _42 = const _;
        _19 = &(*_42);
        StorageLive(_22);
        _22 = &_13;
        _18 = <&[u8; 8] as PartialEq<&[u8]>>::ne(move _19, move _22) -> [return: bb7, unwind continue];
    }

    bb7: {
        switchInt(move _18) -> [0: bb14, otherwise: bb8];
    }

    bb8: {
        StorageDead(_22);
        StorageDead(_19);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _41 = const _;
        _28 = &(*_41);
        _27 = anchor_lang::error::ErrorCode::name(move _28) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_28);
        StorageLive(_30);
        StorageLive(_31);
        _31 = AccountDiscriminatorMismatch;
        _30 = <anchor_lang::error::ErrorCode as Into<u32>>::into(move _31) -> [return: bb10, unwind: bb17];
    }

    bb10: {
        StorageDead(_31);
        StorageLive(_32);
        StorageLive(_33);
        _40 = const _;
        _33 = &(*_40);
        _32 = <anchor_lang::error::ErrorCode as ToString>::to_string(move _33) -> [return: bb11, unwind: bb17];
    }

    bb11: {
        StorageDead(_33);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = anchor_lang::error::Source { filename: const "programs/drift/src/state/spot_market.rs", line: const 32_u32 };
        _36 = anchor_lang::error::ErrorOrigin::Source(move _37);
        StorageDead(_37);
        _35 = Option::<ErrorOrigin>::Some(move _36);
        StorageDead(_36);
        StorageLive(_38);
        _38 = Option::<ComparedValues>::None;
        _26 = anchor_lang::error::AnchorError { error_name: move _27, error_code_number: move _30, error_msg: move _32, error_origin: move _35, compared_values: move _38 };
        StorageDead(_38);
        StorageDead(_35);
        StorageDead(_32);
        StorageDead(_30);
        StorageDead(_27);
        _25 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _26) -> [return: bb12, unwind: bb18];
    }

    bb12: {
        StorageDead(_26);
        _24 = anchor_lang::error::Error::with_account_name::<&str>(move _25, const "SpotMarket") -> [return: bb13, unwind: bb18];
    }

    bb13: {
        StorageDead(_25);
        _0 = std::result::Result::<SpotMarket, anchor_lang::error::Error>::Err(move _24);
        StorageDead(_24);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb16;
    }

    bb14: {
        StorageDead(_22);
        StorageDead(_19);
        _17 = const ();
        StorageDead(_18);
        StorageDead(_17);
        StorageLive(_39);
        _39 = &mut (*_1);
        _0 = <SpotMarket as anchor_lang::AccountDeserialize>::try_deserialize_unchecked(move _39) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_39);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb16;
    }

    bb16: {
        return;
    }

    bb17 (cleanup): {
        drop(_27) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        resume;
    }
}
