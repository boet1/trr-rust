// MIR for `keeper::handle_update_user_fuel_bonus::{closure#0}` after PreCodegen

fn keeper::handle_update_user_fuel_bonus::{closure#0}(_1: {closure@programs/drift/src/macros.rs:58:44: 58:47}, _2: anchor_lang::error::Error) -> error::ErrorCode {
    debug e => _2;
    let mut _0: error::ErrorCode;
    let _3: ();
    let mut _4: &str;
    let _5: &str;
    let mut _6: &std::string::String;
    let _7: &std::string::String;
    let _8: std::string::String;
    let _9: std::string::String;
    let mut _10: std::fmt::Arguments<'_>;
    let mut _11: &[&str];
    let mut _12: &[&str; 1];
    let _13: &[&str; 1];
    let _14: [&str; 1];
    let mut _15: &[core::fmt::rt::Argument<'_>];
    let mut _16: &[core::fmt::rt::Argument<'_>; 1];
    let _17: &[core::fmt::rt::Argument<'_>; 1];
    let _18: [core::fmt::rt::Argument<'_>; 1];
    let mut _19: core::fmt::rt::Argument<'_>;
    let mut _20: &anchor_lang::error::Error;
    let _21: &anchor_lang::error::Error;
    let _22: error::ErrorCode;
    let _23: ();
    let mut _24: &str;
    let _25: &str;
    let mut _26: &std::string::String;
    let _27: &std::string::String;
    let _28: std::string::String;
    let mut _30: std::fmt::Arguments<'_>;
    let mut _31: &[&str];
    let mut _32: &[&str; 2];
    let _33: &[&str; 2];
    let _34: [&str; 2];
    let mut _35: &[core::fmt::rt::Argument<'_>];
    let mut _36: &[core::fmt::rt::Argument<'_>; 1];
    let _37: &[core::fmt::rt::Argument<'_>; 1];
    let _38: [core::fmt::rt::Argument<'_>; 1];
    let mut _39: core::fmt::rt::Argument<'_>;
    let mut _40: &error::ErrorCode;
    let _41: &error::ErrorCode;
    let mut _43: &[&str; 1];
    scope 1 {
        debug res => _9;
    }
    scope 2 {
        debug error_code => _22;
        let _29: std::string::String;
        let mut _42: &[&str; 2];
        scope 3 {
            debug res => _29;
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _43 = const _;
        _13 = &(*_43);
        _12 = &(*_13);
        _11 = move _12 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_12);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &_2;
        _20 = &(*_21);
        _19 = core::fmt::rt::Argument::<'_>::new_debug::<anchor_lang::error::Error>(move _20) -> [return: bb1, unwind: bb16];
    }

    bb1: {
        StorageDead(_20);
        _18 = [move _19];
        StorageDead(_19);
        _17 = &_18;
        _16 = &(*_17);
        _15 = move _16 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_16);
        _10 = Arguments::<'_>::new_v1(move _11, move _15) -> [return: bb2, unwind: bb16];
    }

    bb2: {
        StorageDead(_15);
        StorageDead(_11);
        _9 = format(move _10) -> [return: bb3, unwind: bb16];
    }

    bb3: {
        StorageDead(_10);
        StorageDead(_21);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_13);
        _8 = move _9;
        StorageDead(_9);
        _7 = &_8;
        _6 = &(*_7);
        _5 = <String as Deref>::deref(move _6) -> [return: bb4, unwind: bb15];
    }

    bb4: {
        _4 = &(*_5);
        StorageDead(_6);
        _3 = solana_program::log::sol_log(move _4) -> [return: bb5, unwind: bb15];
    }

    bb5: {
        StorageDead(_4);
        drop(_8) -> [return: bb6, unwind: bb16];
    }

    bb6: {
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_3);
        StorageLive(_22);
        _22 = error::ErrorCode::UnableToLoadAccountLoader;
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _42 = const _;
        _33 = &(*_42);
        _32 = &(*_33);
        _31 = move _32 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_32);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = &_22;
        _40 = &(*_41);
        _39 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _40) -> [return: bb7, unwind: bb16];
    }

    bb7: {
        StorageDead(_40);
        _38 = [move _39];
        StorageDead(_39);
        _37 = &_38;
        _36 = &(*_37);
        _35 = move _36 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_36);
        _30 = Arguments::<'_>::new_v1(move _31, move _35) -> [return: bb8, unwind: bb16];
    }

    bb8: {
        StorageDead(_35);
        StorageDead(_31);
        _29 = format(move _30) -> [return: bb9, unwind: bb16];
    }

    bb9: {
        StorageDead(_30);
        StorageDead(_41);
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_33);
        _28 = move _29;
        StorageDead(_29);
        _27 = &_28;
        _26 = &(*_27);
        _25 = <String as Deref>::deref(move _26) -> [return: bb10, unwind: bb14];
    }

    bb10: {
        _24 = &(*_25);
        StorageDead(_26);
        _23 = solana_program::log::sol_log(move _24) -> [return: bb11, unwind: bb14];
    }

    bb11: {
        StorageDead(_24);
        drop(_28) -> [return: bb12, unwind: bb16];
    }

    bb12: {
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_23);
        _0 = _22;
        StorageDead(_22);
        drop(_2) -> [return: bb13, unwind: bb17];
    }

    bb13: {
        return;
    }

    bb14 (cleanup): {
        drop(_28) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        drop(_8) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        drop(_2) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        resume;
    }
}
