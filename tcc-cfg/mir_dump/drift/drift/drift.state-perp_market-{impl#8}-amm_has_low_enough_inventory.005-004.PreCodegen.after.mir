// MIR for `state::perp_market::<impl at programs/drift/src/state/perp_market.rs:1269:1: 1269:9>::amm_has_low_enough_inventory` after PreCodegen

fn state::perp_market::<impl at programs/drift/src/state/perp_market.rs:1269:1: 1269:9>::amm_has_low_enough_inventory(_1: &AMM, _2: bool) -> std::result::Result<bool, error::ErrorCode> {
    debug self => _1;
    debug amm_wants_to_jit_make => _2;
    let mut _0: std::result::Result<bool, error::ErrorCode>;
    let mut _3: bool;
    let _4: i128;
    let _5: i128;
    let mut _6: (i128, i128);
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (i128, i128)>;
    let mut _8: std::result::Result<(i128, i128), error::ErrorCode>;
    let mut _9: u128;
    let mut _10: u128;
    let mut _11: u128;
    let mut _12: isize;
    let _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _14: !;
    let mut _15: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _16: (i128, i128);
    let mut _18: i128;
    let mut _19: i128;
    let mut _20: i128;
    let mut _21: bool;
    let mut _22: i128;
    let mut _23: i128;
    let mut _24: i128;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _26: std::result::Result<i128, error::ErrorCode>;
    let mut _27: i128;
    let mut _28: isize;
    let mut _30: !;
    let mut _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    scope 1 {
        debug max_bids => _4;
        debug max_asks => _5;
        let _17: i128;
        scope 6 {
            debug protocol_owned_min_side_liquidity => _17;
            let _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _32: i128;
            scope 7 {
                debug residual => _29;
                scope 8 {
                }
            }
            scope 9 {
                debug val => _32;
                scope 10 {
                }
            }
        }
    }
    scope 2 {
        debug residual => _13;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _16;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_3);
        _3 = _2;
        switchInt(move _3) -> [0: bb16, otherwise: bb1];
    }

    bb1: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = ((*_1).5: u128);
        StorageLive(_10);
        _10 = ((*_1).8: u128);
        StorageLive(_11);
        _11 = ((*_1).9: u128);
        _8 = _calculate_market_open_bids_asks(move _9, move _10, move _11) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        _7 = <std::result::Result<(i128, i128), error::ErrorCode> as Try>::branch(move _8) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_8);
        _12 = discriminant(_7);
        switchInt(move _12) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_16);
        _16 = ((_7 as Continue).0: (i128, i128));
        _6 = _16;
        StorageDead(_16);
        StorageLive(_4);
        _4 = (_6.0: i128);
        StorageLive(_5);
        _5 = (_6.1: i128);
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_17);
        StorageLive(_18);
        _18 = _4;
        StorageLive(_19);
        StorageLive(_20);
        _20 = _5;
        _19 = core::num::<impl i128>::abs(move _20) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_13);
        _13 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_15);
        _15 = _13;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _15) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb18;
    }

    bb8: {
        StorageDead(_20);
        _17 = <i128 as Ord>::min(move _18, move _19) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_19);
        StorageDead(_18);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = ((*_1).15: i128);
        _22 = core::num::<impl i128>::abs(move _23) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = _17;
        _26 = <i128 as SafeMath>::safe_div(move _27, const 10_i128) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_27);
        _25 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _26) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_26);
        _28 = discriminant(_25);
        switchInt(move _28) -> [0: bb13, 1: bb14, otherwise: bb5];
    }

    bb13: {
        StorageLive(_32);
        _32 = ((_25 as Continue).0: i128);
        _24 = _32;
        StorageDead(_32);
        _21 = Lt(move _22, move _24);
        StorageDead(_24);
        StorageDead(_22);
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(move _21);
        StorageDead(_21);
        StorageDead(_17);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_25);
        goto -> bb17;
    }

    bb14: {
        StorageLive(_29);
        _29 = ((_25 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_31);
        _31 = _29;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _31) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_17);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_25);
        goto -> bb18;
    }

    bb16: {
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(const true);
        goto -> bb17;
    }

    bb17: {
        StorageDead(_3);
        goto -> bb19;
    }

    bb18: {
        StorageDead(_3);
        goto -> bb19;
    }

    bb19: {
        return;
    }
}
