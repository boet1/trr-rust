// MIR for `instructions::user::handle_initialize_user_stats` after PreCodegen

fn instructions::user::handle_initialize_user_stats(_1: anchor_lang::context::Context<'_, '_, '_, '_, instructions::user::InitializeUserStats<'_>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: anchor_lang::prelude::Clock;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _4: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _7: !;
    let mut _8: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _9: anchor_lang::prelude::Clock;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _12: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, error::ErrorCode>;
    let mut _13: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _14: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _15: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, error::ErrorCode>;
    let mut _16: error::ErrorCode;
    let mut _17: isize;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _22: state::user::UserStats;
    let mut _23: anchor_lang::prelude::Pubkey;
    let mut _24: &anchor_lang::prelude::Signer<'_>;
    let mut _25: i64;
    let mut _26: i64;
    let mut _27: i64;
    let mut _28: u32;
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _30: std::result::Result<u32, error::ErrorCode>;
    let mut _31: i64;
    let mut _32: isize;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _37: state::user::UserStats;
    let mut _38: &mut state::user::UserStats;
    let mut _39: &mut std::cell::RefMut<'_, state::user::UserStats>;
    let _41: ();
    let mut _42: u64;
    let mut _43: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _44: std::result::Result<u64, error::ErrorCode>;
    let mut _45: std::option::Option<u64>;
    let mut _46: u64;
    let mut _47: &state::state::State;
    let mut _48: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _49: {closure@programs/drift/src/error.rs:658:9: 658:11};
    let mut _50: isize;
    let mut _52: !;
    let mut _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _55: &mut state::state::State;
    let mut _56: &mut anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _58: &state::state::State;
    let _59: &state::state::State;
    let mut _60: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _61: ();
    let mut _62: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _63: std::result::Result<(), error::ErrorCode>;
    let mut _64: bool;
    let mut _65: u64;
    let mut _66: bool;
    let mut _67: u64;
    let mut _68: &state::state::State;
    let mut _69: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _70: u64;
    let mut _71: ();
    let _73: ();
    let mut _74: &str;
    let _75: &str;
    let mut _76: &std::string::String;
    let _77: &std::string::String;
    let _78: std::string::String;
    let mut _80: std::fmt::Arguments<'_>;
    let mut _81: &[&str];
    let mut _82: &[&str; 2];
    let _83: &[&str; 2];
    let _84: [&str; 2];
    let mut _85: &[core::fmt::rt::Argument<'_>];
    let mut _86: &[core::fmt::rt::Argument<'_>; 1];
    let _87: &[core::fmt::rt::Argument<'_>; 1];
    let _88: [core::fmt::rt::Argument<'_>; 1];
    let mut _89: core::fmt::rt::Argument<'_>;
    let mut _90: &error::ErrorCode;
    let _91: &error::ErrorCode;
    let mut _92: error::ErrorCode;
    let mut _93: isize;
    let mut _95: !;
    let mut _96: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _98: ();
    let mut _100: &mut instructions::user::InitializeUserStats<'_>;
    let mut _101: &mut instructions::user::InitializeUserStats<'_>;
    let mut _102: &mut instructions::user::InitializeUserStats<'_>;
    let mut _103: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _104: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _105: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _106: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _107: isize;
    let mut _108: isize;
    let mut _109: isize;
    let mut _110: isize;
    let mut _111: isize;
    let mut _112: isize;
    let mut _113: isize;
    let mut _114: isize;
    let mut _115: isize;
    let mut _116: isize;
    let mut _117: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _118: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _119: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _120: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug clock => _2;
        let mut _10: std::cell::RefMut<'_, state::user::UserStats>;
        let _18: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _21: std::cell::RefMut<'_, state::user::UserStats>;
        scope 6 {
            debug user_stats => _10;
            let _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _36: u32;
            let _40: &mut std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
            scope 11 {
                debug residual => _33;
                scope 12 {
                }
            }
            scope 13 {
                debug val => _36;
                scope 14 {
                }
            }
            scope 15 {
                debug state => _40;
                let _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _54: u64;
                let _57: u64;
                scope 16 {
                    debug residual => _51;
                    scope 17 {
                    }
                }
                scope 18 {
                    debug val => _54;
                    scope 19 {
                    }
                }
                scope 20 {
                    debug max_number_of_sub_accounts => _57;
                    let _72: error::ErrorCode;
                    let _94: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _97: ();
                    scope 21 {
                        debug error_code => _72;
                        let _79: std::string::String;
                        let mut _99: &[&str; 2];
                        scope 22 {
                            debug res => _79;
                        }
                    }
                    scope 23 {
                        debug residual => _94;
                        scope 24 {
                        }
                    }
                    scope 25 {
                        debug val => _97;
                        scope 26 {
                        }
                    }
                }
            }
        }
        scope 7 {
            debug residual => _18;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _21;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _6;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _9;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _4) -> [return: bb2, unwind: bb55];
    }

    bb2: {
        StorageDead(_4);
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_9);
        _9 = move ((_3 as Continue).0: anchor_lang::prelude::Clock);
        _2 = move _9;
        StorageDead(_9);
        _107 = discriminant(_3);
        StorageDead(_3);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _100 = deref_copy (_1.1: &mut instructions::user::InitializeUserStats<'_>);
        _14 = &((*_100).0: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _13 = anchor_lang::prelude::AccountLoader::<'_, UserStats>::load_init(move _14) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_6);
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_8);
        _8 = move _6;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _8) -> [return: bb6, unwind: bb57];
    }

    bb6: {
        StorageDead(_8);
        StorageDead(_6);
        _113 = discriminant(_3);
        StorageDead(_3);
        goto -> bb51;
    }

    bb7: {
        StorageDead(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = error::ErrorCode::UnableToLoadAccountLoader;
        _15 = std::result::Result::<RefMut<'_, UserStats>, error::ErrorCode>::Err(move _16);
        StorageDead(_16);
        _12 = std::result::Result::<RefMut<'_, UserStats>, anchor_lang::error::Error>::or::<error::ErrorCode>(move _13, move _15) -> [return: bb8, unwind: bb55];
    }

    bb8: {
        StorageDead(_15);
        StorageDead(_13);
        _11 = <std::result::Result<RefMut<'_, UserStats>, error::ErrorCode> as Try>::branch(move _12) -> [return: bb9, unwind: bb55];
    }

    bb9: {
        StorageDead(_12);
        _17 = discriminant(_11);
        switchInt(move _17) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_21);
        _21 = move ((_11 as Continue).0: std::cell::RefMut<'_, state::user::UserStats>);
        _10 = move _21;
        StorageDead(_21);
        _111 = discriminant(_11);
        StorageDead(_11);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _101 = deref_copy (_1.1: &mut instructions::user::InitializeUserStats<'_>);
        _24 = &((*_101).2: anchor_lang::prelude::Signer<'_>);
        _23 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _24) -> [return: bb13, unwind: bb54];
    }

    bb11: {
        StorageLive(_18);
        _18 = ((_11 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_20);
        _20 = _18;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _20) -> [return: bb12, unwind: bb56];
    }

    bb12: {
        StorageDead(_20);
        StorageDead(_18);
        _109 = discriminant(_11);
        StorageDead(_11);
        goto -> bb50;
    }

    bb13: {
        StorageDead(_24);
        StorageLive(_25);
        _25 = (_2.4: i64);
        StorageLive(_26);
        _26 = (_2.4: i64);
        StorageLive(_27);
        _27 = (_2.4: i64);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = (_2.4: i64);
        _30 = <i64 as Cast>::cast::<u32>(move _31) -> [return: bb14, unwind: bb54];
    }

    bb14: {
        StorageDead(_31);
        _29 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _30) -> [return: bb15, unwind: bb54];
    }

    bb15: {
        StorageDead(_30);
        _32 = discriminant(_29);
        switchInt(move _32) -> [0: bb16, 1: bb17, otherwise: bb4];
    }

    bb16: {
        StorageLive(_36);
        _36 = ((_29 as Continue).0: u32);
        _28 = _36;
        StorageDead(_36);
        StorageLive(_37);
        _37 = <UserStats as Default>::default() -> [return: bb19, unwind: bb54];
    }

    bb17: {
        StorageLive(_33);
        _33 = ((_29 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_35);
        _35 = _33;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _35) -> [return: bb18, unwind: bb54];
    }

    bb18: {
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_29);
        goto -> bb49;
    }

    bb19: {
        _22 = UserStats { authority: move _23, referrer: (_37.1: anchor_lang::prelude::Pubkey), fees: (_37.2: state::user::UserFees), next_epoch_ts: (_37.3: i64), maker_volume_30d: (_37.4: u64), taker_volume_30d: (_37.5: u64), filler_volume_30d: (_37.6: u64), last_maker_volume_30d_ts: move _26, last_taker_volume_30d_ts: move _25, last_filler_volume_30d_ts: move _27, if_staked_quote_asset_amount: (_37.10: u64), number_of_sub_accounts: const 0_u16, number_of_sub_accounts_created: (_37.12: u16), referrer_status: (_37.13: u8), disable_update_perp_bid_ask_twap: (_37.14: bool), padding1: (_37.15: [u8; 1]), fuel_overflow_status: (_37.16: u8), fuel_insurance: (_37.17: u32), fuel_deposits: (_37.18: u32), fuel_borrows: (_37.19: u32), fuel_positions: (_37.20: u32), fuel_taker: (_37.21: u32), fuel_maker: (_37.22: u32), if_staked_gov_token_amount: (_37.23: u64), last_fuel_if_bonus_update_ts: move _28, padding: (_37.25: [u8; 12]) };
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_23);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &mut _10;
        _38 = <RefMut<'_, UserStats> as DerefMut>::deref_mut(move _39) -> [return: bb20, unwind: bb54];
    }

    bb20: {
        StorageDead(_39);
        (*_38) = move _22;
        StorageDead(_22);
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_29);
        StorageLive(_40);
        _102 = deref_copy (_1.1: &mut instructions::user::InitializeUserStats<'_>);
        _40 = &mut ((*_102).1: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _103 = deref_copy (*_40);
        _117 = (((_103.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _48 = &(*_117);
        _47 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _48) -> [return: bb21, unwind: bb54];
    }

    bb21: {
        StorageDead(_48);
        _46 = ((*_47).8: u64);
        _45 = core::num::<impl u64>::checked_add(move _46, const 1_u64) -> [return: bb22, unwind: bb54];
    }

    bb22: {
        StorageDead(_46);
        StorageLive(_49);
        _49 = {closure@programs/drift/src/error.rs:658:9: 658:11};
        _44 = Option::<u64>::ok_or_else::<error::ErrorCode, {closure@programs/drift/src/error.rs:658:9: 658:11}>(move _45, move _49) -> [return: bb23, unwind: bb54];
    }

    bb23: {
        StorageDead(_49);
        StorageDead(_45);
        _43 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _44) -> [return: bb24, unwind: bb54];
    }

    bb24: {
        StorageDead(_44);
        _50 = discriminant(_43);
        switchInt(move _50) -> [0: bb25, 1: bb26, otherwise: bb4];
    }

    bb25: {
        StorageLive(_54);
        _54 = ((_43 as Continue).0: u64);
        _42 = _54;
        StorageDead(_54);
        StorageLive(_55);
        StorageLive(_56);
        _104 = deref_copy (*_40);
        _118 = (((_104.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _56 = &mut (*_118);
        _55 = <anchor_lang::prelude::Account<'_, state::state::State> as DerefMut>::deref_mut(move _56) -> [return: bb28, unwind: bb54];
    }

    bb26: {
        StorageLive(_51);
        _51 = ((_43 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_53);
        _53 = _51;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _53) -> [return: bb27, unwind: bb54];
    }

    bb27: {
        StorageDead(_53);
        StorageDead(_51);
        StorageDead(_42);
        StorageDead(_47);
        StorageDead(_43);
        StorageDead(_41);
        goto -> bb48;
    }

    bb28: {
        StorageDead(_56);
        ((*_55).8: u64) = move _42;
        _41 = const ();
        StorageDead(_42);
        StorageDead(_55);
        StorageDead(_47);
        StorageDead(_43);
        StorageDead(_41);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _105 = deref_copy (*_40);
        _119 = (((_105.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _60 = &(*_119);
        _59 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _60) -> [return: bb29, unwind: bb54];
    }

    bb29: {
        _58 = &(*_59);
        StorageDead(_60);
        _57 = state::state::State::max_number_of_sub_accounts(move _58) -> [return: bb30, unwind: bb54];
    }

    bb30: {
        StorageDead(_58);
        StorageDead(_59);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = _57;
        _64 = Eq(move _65, const 0_u64);
        switchInt(move _64) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        StorageDead(_65);
        goto -> bb34;
    }

    bb32: {
        StorageDead(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _106 = deref_copy (*_40);
        _120 = (((_106.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _69 = &(*_120);
        _68 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _69) -> [return: bb33, unwind: bb54];
    }

    bb33: {
        StorageDead(_69);
        _67 = ((*_68).8: u64);
        StorageLive(_70);
        _70 = _57;
        _66 = Le(move _67, move _70);
        switchInt(move _66) -> [0: bb35, otherwise: bb34];
    }

    bb34: {
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_67);
        StorageLive(_71);
        _71 = ();
        _63 = std::result::Result::<(), error::ErrorCode>::Ok(move _71);
        StorageDead(_71);
        goto -> bb42;
    }

    bb35: {
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_67);
        StorageLive(_72);
        _72 = error::ErrorCode::MaxNumberOfUsers;
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _99 = const _;
        _83 = &(*_99);
        _82 = &(*_83);
        _81 = move _82 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_82);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = &_72;
        _90 = &(*_91);
        _89 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _90) -> [return: bb36, unwind: bb54];
    }

    bb36: {
        StorageDead(_90);
        _88 = [move _89];
        StorageDead(_89);
        _87 = &_88;
        _86 = &(*_87);
        _85 = move _86 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_86);
        _80 = Arguments::<'_>::new_v1(move _81, move _85) -> [return: bb37, unwind: bb54];
    }

    bb37: {
        StorageDead(_85);
        StorageDead(_81);
        _79 = format(move _80) -> [return: bb38, unwind: bb54];
    }

    bb38: {
        StorageDead(_80);
        StorageDead(_91);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_83);
        _78 = move _79;
        StorageDead(_79);
        _77 = &_78;
        _76 = &(*_77);
        _75 = <String as Deref>::deref(move _76) -> [return: bb39, unwind: bb53];
    }

    bb39: {
        _74 = &(*_75);
        StorageDead(_76);
        _73 = solana_program::log::sol_log(move _74) -> [return: bb40, unwind: bb53];
    }

    bb40: {
        StorageDead(_74);
        drop(_78) -> [return: bb41, unwind: bb54];
    }

    bb41: {
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_75);
        StorageDead(_73);
        StorageLive(_92);
        _92 = _72;
        _63 = std::result::Result::<(), error::ErrorCode>::Err(move _92);
        StorageDead(_92);
        StorageDead(_72);
        goto -> bb42;
    }

    bb42: {
        StorageDead(_66);
        StorageDead(_64);
        _62 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _63) -> [return: bb43, unwind: bb54];
    }

    bb43: {
        StorageDead(_63);
        _93 = discriminant(_62);
        switchInt(move _93) -> [0: bb44, 1: bb45, otherwise: bb4];
    }

    bb44: {
        StorageLive(_97);
        _97 = ((_62 as Continue).0: ());
        _61 = _97;
        StorageDead(_97);
        StorageDead(_62);
        StorageDead(_61);
        StorageLive(_98);
        _98 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _98);
        StorageDead(_98);
        StorageDead(_57);
        StorageDead(_40);
        drop(_10) -> [return: bb47, unwind: bb55];
    }

    bb45: {
        StorageLive(_94);
        _94 = ((_62 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_96);
        _96 = _94;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _96) -> [return: bb46, unwind: bb54];
    }

    bb46: {
        StorageDead(_96);
        StorageDead(_94);
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_57);
        goto -> bb48;
    }

    bb47: {
        StorageDead(_10);
        StorageDead(_2);
        goto -> bb52;
    }

    bb48: {
        StorageDead(_40);
        goto -> bb49;
    }

    bb49: {
        drop(_10) -> [return: bb50, unwind: bb55];
    }

    bb50: {
        StorageDead(_10);
        goto -> bb51;
    }

    bb51: {
        StorageDead(_2);
        goto -> bb52;
    }

    bb52: {
        return;
    }

    bb53 (cleanup): {
        drop(_78) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_10) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        resume;
    }

    bb56 (cleanup): {
        _115 = discriminant(_11);
        goto -> bb55;
    }

    bb57 (cleanup): {
        _116 = discriminant(_3);
        goto -> bb55;
    }
}
