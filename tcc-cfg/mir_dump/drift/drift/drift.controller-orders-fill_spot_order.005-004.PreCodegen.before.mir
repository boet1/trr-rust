// MIR for `controller::orders::fill_spot_order` before PreCodegen

fn controller::orders::fill_spot_order(_1: u32, _2: &state::state::State, _3: &anchor_lang::prelude::AccountLoader<'_, User>, _4: &anchor_lang::prelude::AccountLoader<'_, UserStats>, _5: &SpotMarketMap<'_>, _6: &PerpMarketMap<'_>, _7: &mut OracleMap<'_>, _8: &anchor_lang::prelude::AccountLoader<'_, User>, _9: &anchor_lang::prelude::AccountLoader<'_, UserStats>, _10: &UserMap<'_>, _11: &UserStatsMap<'_>, _12: Option<u32>, _13: &anchor_lang::prelude::Clock, _14: &mut dyn SpotFulfillmentParams) -> std::result::Result<u64, error::ErrorCode> {
    debug order_id => _1;
    debug state => _2;
    debug user => _3;
    debug user_stats => _4;
    debug spot_market_map => _5;
    debug perp_market_map => _6;
    debug oracle_map => _7;
    debug filler => _8;
    debug filler_stats => _9;
    debug makers_and_referrer => _10;
    debug makers_and_referrer_stats => _11;
    debug jit_maker_order_id => _12;
    debug clock => _13;
    debug fulfillment_params => _14;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let _15: i64;
    let mut _18: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _20: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _22: std::cell::RefMut<'_, state::user::User>;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _24: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _25: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _26: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _27: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _28: isize;
    let mut _30: !;
    let mut _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _34: std::cell::RefMut<'_, state::user::UserStats>;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _36: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, error::ErrorCode>;
    let mut _37: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _38: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _39: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _40: isize;
    let mut _42: !;
    let mut _43: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _46: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, usize>;
    let mut _47: std::result::Result<usize, error::ErrorCode>;
    let mut _48: std::option::Option<usize>;
    let mut _49: &mut std::slice::Iter<'_, state::user::Order>;
    let mut _50: std::slice::Iter<'_, state::user::Order>;
    let mut _51: &[state::user::Order];
    let mut _52: &[state::user::Order; 32];
    let _53: &state::user::User;
    let mut _54: &std::cell::RefMut<'_, state::user::User>;
    let mut _55: {closure@programs/drift/src/controller/orders.rs:3716:19: 3716:26};
    let mut _56: &u32;
    let mut _57: {closure@programs/drift/src/error.rs:647:9: 647:11};
    let mut _58: isize;
    let mut _60: !;
    let mut _61: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _67: (state::user::OrderStatus, u16, state::user::MarketType, controller::position::PositionDirection);
    let mut _68: state::user::OrderStatus;
    let mut _69: &state::user::User;
    let mut _70: &std::cell::RefMut<'_, state::user::User>;
    let _71: usize;
    let mut _72: usize;
    let mut _73: bool;
    let mut _74: u16;
    let mut _75: &state::user::User;
    let mut _76: &std::cell::RefMut<'_, state::user::User>;
    let _77: usize;
    let mut _78: usize;
    let mut _79: bool;
    let mut _80: state::user::MarketType;
    let mut _81: &state::user::User;
    let mut _82: &std::cell::RefMut<'_, state::user::User>;
    let _83: usize;
    let mut _84: usize;
    let mut _85: bool;
    let mut _86: controller::position::PositionDirection;
    let mut _87: &state::user::User;
    let mut _88: &std::cell::RefMut<'_, state::user::User>;
    let _89: usize;
    let mut _90: usize;
    let mut _91: bool;
    let _92: ();
    let mut _94: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _95: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _96: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _97: &u16;
    let _98: &u16;
    let mut _99: isize;
    let mut _101: !;
    let mut _102: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _104: ();
    let mut _105: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _106: std::result::Result<(), error::ErrorCode>;
    let mut _107: bool;
    let mut _108: &state::spot_market::SpotMarket;
    let _109: &state::spot_market::SpotMarket;
    let mut _110: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _111: ();
    let _113: ();
    let mut _114: &str;
    let _115: &str;
    let mut _116: &std::string::String;
    let _117: &std::string::String;
    let _118: std::string::String;
    let mut _120: std::fmt::Arguments<'_>;
    let mut _121: &[&str];
    let mut _122: &[&str; 2];
    let _123: &[&str; 2];
    let _124: [&str; 2];
    let mut _125: &[core::fmt::rt::Argument<'_>];
    let mut _126: &[core::fmt::rt::Argument<'_>; 1];
    let _127: &[core::fmt::rt::Argument<'_>; 1];
    let _128: [core::fmt::rt::Argument<'_>; 1];
    let mut _129: core::fmt::rt::Argument<'_>;
    let mut _130: &error::ErrorCode;
    let _131: &error::ErrorCode;
    let _132: ();
    let mut _133: &str;
    let _134: &str;
    let mut _135: error::ErrorCode;
    let mut _136: isize;
    let mut _138: !;
    let mut _139: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _141: ();
    let mut _142: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _143: std::result::Result<(), error::ErrorCode>;
    let mut _144: bool;
    let mut _145: &state::user::MarketType;
    let mut _146: &state::user::MarketType;
    let _147: state::user::MarketType;
    let mut _148: ();
    let _150: ();
    let mut _151: &str;
    let _152: &str;
    let mut _153: &std::string::String;
    let _154: &std::string::String;
    let _155: std::string::String;
    let mut _157: std::fmt::Arguments<'_>;
    let mut _158: &[&str];
    let mut _159: &[&str; 2];
    let _160: &[&str; 2];
    let _161: [&str; 2];
    let mut _162: &[core::fmt::rt::Argument<'_>];
    let mut _163: &[core::fmt::rt::Argument<'_>; 1];
    let _164: &[core::fmt::rt::Argument<'_>; 1];
    let _165: [core::fmt::rt::Argument<'_>; 1];
    let mut _166: core::fmt::rt::Argument<'_>;
    let mut _167: &error::ErrorCode;
    let _168: &error::ErrorCode;
    let _169: ();
    let mut _170: &str;
    let _171: &str;
    let mut _172: error::ErrorCode;
    let mut _173: isize;
    let mut _175: !;
    let mut _176: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _178: ();
    let mut _179: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _180: std::result::Result<(), error::ErrorCode>;
    let mut _181: bool;
    let mut _182: &state::user::OrderStatus;
    let mut _183: &state::user::OrderStatus;
    let _184: state::user::OrderStatus;
    let mut _185: ();
    let _187: ();
    let mut _188: &str;
    let _189: &str;
    let mut _190: &std::string::String;
    let _191: &std::string::String;
    let _192: std::string::String;
    let mut _194: std::fmt::Arguments<'_>;
    let mut _195: &[&str];
    let mut _196: &[&str; 2];
    let _197: &[&str; 2];
    let _198: [&str; 2];
    let mut _199: &[core::fmt::rt::Argument<'_>];
    let mut _200: &[core::fmt::rt::Argument<'_>; 1];
    let _201: &[core::fmt::rt::Argument<'_>; 1];
    let _202: [core::fmt::rt::Argument<'_>; 1];
    let mut _203: core::fmt::rt::Argument<'_>;
    let mut _204: &error::ErrorCode;
    let _205: &error::ErrorCode;
    let _206: ();
    let mut _207: &str;
    let _208: &str;
    let mut _209: error::ErrorCode;
    let mut _210: isize;
    let mut _212: !;
    let mut _213: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _215: ();
    let mut _216: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _217: std::result::Result<(), error::ErrorCode>;
    let mut _218: bool;
    let mut _219: &state::user::Order;
    let _220: &state::user::User;
    let mut _221: &std::cell::RefMut<'_, state::user::User>;
    let _222: usize;
    let mut _223: usize;
    let mut _224: bool;
    let mut _225: bool;
    let mut _226: &state::user::Order;
    let _227: &state::user::User;
    let mut _228: &std::cell::RefMut<'_, state::user::User>;
    let _229: usize;
    let mut _230: usize;
    let mut _231: bool;
    let mut _232: ();
    let _234: ();
    let mut _235: &str;
    let _236: &str;
    let mut _237: &std::string::String;
    let _238: &std::string::String;
    let _239: std::string::String;
    let mut _241: std::fmt::Arguments<'_>;
    let mut _242: &[&str];
    let mut _243: &[&str; 2];
    let _244: &[&str; 2];
    let _245: [&str; 2];
    let mut _246: &[core::fmt::rt::Argument<'_>];
    let mut _247: &[core::fmt::rt::Argument<'_>; 1];
    let _248: &[core::fmt::rt::Argument<'_>; 1];
    let _249: [core::fmt::rt::Argument<'_>; 1];
    let mut _250: core::fmt::rt::Argument<'_>;
    let mut _251: &error::ErrorCode;
    let _252: &error::ErrorCode;
    let _253: ();
    let mut _254: &str;
    let _255: &str;
    let mut _256: error::ErrorCode;
    let mut _257: isize;
    let mut _259: !;
    let mut _260: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _262: ();
    let mut _263: bool;
    let mut _264: &state::user::User;
    let _265: &state::user::User;
    let mut _266: &std::cell::RefMut<'_, state::user::User>;
    let mut _267: !;
    let _268: ();
    let mut _269: &str;
    let _270: &str;
    let _271: ();
    let mut _272: std::result::Result<(), error::ErrorCode>;
    let mut _273: &mut state::user::User;
    let mut _274: &mut state::user::User;
    let mut _275: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _276: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _277: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _278: &mut state::oracle_map::OracleMap<'_>;
    let mut _279: u32;
    let mut _280: isize;
    let mut _281: !;
    let _282: ();
    let mut _283: &str;
    let _284: &str;
    let mut _286: &anchor_lang::prelude::Pubkey;
    let mut _287: &anchor_lang::prelude::Pubkey;
    let mut _289: &std::collections::BTreeMap<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _290: &anchor_lang::prelude::Pubkey;
    let _291: &anchor_lang::prelude::Pubkey;
    let mut _294: (std::option::Option<std::cell::RefMut<'_, state::user::User>>, std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>);
    let mut _295: bool;
    let mut _296: bool;
    let mut _298: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _299: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _300: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _301: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _302: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _303: isize;
    let mut _305: !;
    let mut _306: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _308: ();
    let mut _309: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _310: std::result::Result<(), error::ErrorCode>;
    let mut _311: bool;
    let mut _312: u8;
    let mut _313: &state::user::User;
    let mut _314: &std::cell::RefMut<'_, state::user::User>;
    let mut _315: ();
    let _317: ();
    let mut _318: &str;
    let _319: &str;
    let mut _320: &std::string::String;
    let _321: &std::string::String;
    let _322: std::string::String;
    let mut _324: std::fmt::Arguments<'_>;
    let mut _325: &[&str];
    let mut _326: &[&str; 2];
    let _327: &[&str; 2];
    let _328: [&str; 2];
    let mut _329: &[core::fmt::rt::Argument<'_>];
    let mut _330: &[core::fmt::rt::Argument<'_>; 1];
    let _331: &[core::fmt::rt::Argument<'_>; 1];
    let _332: [core::fmt::rt::Argument<'_>; 1];
    let mut _333: core::fmt::rt::Argument<'_>;
    let mut _334: &error::ErrorCode;
    let _335: &error::ErrorCode;
    let _336: ();
    let mut _337: &str;
    let _338: &str;
    let mut _339: &std::string::String;
    let _340: &std::string::String;
    let _341: std::string::String;
    let mut _343: std::fmt::Arguments<'_>;
    let mut _344: &[&str];
    let mut _345: &[&str; 2];
    let _346: &[&str; 2];
    let _347: [&str; 2];
    let mut _348: &[core::fmt::rt::Argument<'_>];
    let mut _349: &[core::fmt::rt::Argument<'_>; 1];
    let _350: &[core::fmt::rt::Argument<'_>; 1];
    let _351: [core::fmt::rt::Argument<'_>; 1];
    let mut _352: core::fmt::rt::Argument<'_>;
    let mut _353: &u8;
    let _354: &u8;
    let _355: &state::user::User;
    let mut _356: &std::cell::RefMut<'_, state::user::User>;
    let mut _357: error::ErrorCode;
    let mut _358: isize;
    let mut _360: !;
    let mut _361: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _363: bool;
    let mut _364: &anchor_lang::prelude::Pubkey;
    let _365: &state::user::User;
    let mut _366: &std::cell::RefMut<'_, state::user::User>;
    let mut _367: &anchor_lang::prelude::Pubkey;
    let _368: &state::user::User;
    let mut _369: &std::cell::RefMut<'_, state::user::User>;
    let mut _370: std::option::Option<std::cell::RefMut<'_, state::user::User>>;
    let mut _371: std::cell::RefMut<'_, state::user::User>;
    let mut _372: std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _373: std::cell::RefMut<'_, state::user::UserStats>;
    let mut _374: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _375: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, error::ErrorCode>;
    let mut _376: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _377: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _378: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _379: isize;
    let mut _381: !;
    let mut _382: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _384: std::option::Option<std::cell::RefMut<'_, state::user::User>>;
    let mut _385: std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _386: std::option::Option<std::cell::RefMut<'_, state::user::User>>;
    let mut _387: std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _389: &state::oracle::OraclePriceData;
    let mut _390: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _391: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _392: &mut state::oracle_map::OracleMap<'_>;
    let mut _393: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _394: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _395: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _396: &state::spot_market::SpotMarket;
    let _397: &state::spot_market::SpotMarket;
    let mut _398: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _399: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _400: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _401: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _402: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _403: &u16;
    let _404: &u16;
    let mut _405: isize;
    let mut _407: !;
    let mut _408: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _410: isize;
    let mut _412: !;
    let mut _413: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _416: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::vec::Vec<(anchor_lang::prelude::Pubkey, usize, u64)>>;
    let mut _417: std::result::Result<std::vec::Vec<(anchor_lang::prelude::Pubkey, usize, u64)>, error::ErrorCode>;
    let mut _418: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _419: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _420: &mut state::oracle_map::OracleMap<'_>;
    let mut _421: &state::user_map::UserMap<'_>;
    let mut _422: &anchor_lang::prelude::Pubkey;
    let _423: &anchor_lang::prelude::Pubkey;
    let mut _424: &state::user::Order;
    let _425: &state::user::Order;
    let _426: &state::user::User;
    let mut _427: &std::cell::RefMut<'_, state::user::User>;
    let _428: usize;
    let mut _429: usize;
    let mut _430: bool;
    let mut _431: &mut std::option::Option<&mut state::user::User>;
    let mut _432: &mut std::option::Option<&mut state::user::User>;
    let mut _433: std::option::Option<&mut state::user::User>;
    let mut _434: &mut std::option::Option<std::cell::RefMut<'_, state::user::User>>;
    let mut _435: &anchor_lang::prelude::Pubkey;
    let _436: &anchor_lang::prelude::Pubkey;
    let mut _437: u64;
    let mut _438: i64;
    let mut _439: std::option::Option<u32>;
    let mut _440: i64;
    let mut _441: u64;
    let mut _442: isize;
    let mut _444: !;
    let mut _445: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _448: ();
    let mut _450: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _451: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _452: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _453: isize;
    let mut _455: !;
    let mut _456: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _459: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _460: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _461: &mut state::oracle_map::OracleMap<'_>;
    let mut _462: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _463: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _464: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _465: &state::spot_market::SpotMarket;
    let _466: &state::spot_market::SpotMarket;
    let mut _467: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _468: isize;
    let mut _470: !;
    let mut _471: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _473: ();
    let mut _474: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _475: std::result::Result<(), error::ErrorCode>;
    let mut _476: &mut state::spot_market::SpotMarket;
    let mut _477: &mut state::spot_market::SpotMarket;
    let mut _478: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _479: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _480: std::option::Option<&state::oracle::OraclePriceData>;
    let mut _481: &state::oracle::OraclePriceData;
    let mut _482: i64;
    let mut _483: isize;
    let mut _485: !;
    let mut _486: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _489: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _490: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _491: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _492: &u16;
    let _493: &u16;
    let mut _494: isize;
    let mut _496: !;
    let mut _497: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _500: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _501: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _502: &mut state::oracle_map::OracleMap<'_>;
    let mut _503: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _504: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _505: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _506: &state::spot_market::SpotMarket;
    let _507: &state::spot_market::SpotMarket;
    let mut _508: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _509: isize;
    let mut _511: !;
    let mut _512: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _514: ();
    let mut _515: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _516: std::result::Result<(), error::ErrorCode>;
    let mut _517: &mut state::spot_market::SpotMarket;
    let mut _518: &mut state::spot_market::SpotMarket;
    let mut _519: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _520: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _521: std::option::Option<&state::oracle::OraclePriceData>;
    let mut _522: &state::oracle::OraclePriceData;
    let mut _523: i64;
    let mut _524: isize;
    let mut _526: !;
    let mut _527: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _529: i64;
    let mut _530: i64;
    let _531: ();
    let mut _532: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _533: std::result::Result<(), error::ErrorCode>;
    let mut _534: &dyn state::spot_fulfillment_params::SpotFulfillmentParams;
    let mut _535: &state::spot_market::SpotMarket;
    let _536: &state::spot_market::SpotMarket;
    let mut _537: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _538: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _539: &state::spot_market::SpotMarket;
    let _540: &state::spot_market::SpotMarket;
    let mut _541: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _542: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _543: isize;
    let mut _545: !;
    let mut _546: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _549: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _550: std::result::Result<bool, error::ErrorCode>;
    let mut _551: i64;
    let mut _552: i64;
    let mut _553: &state::spot_market::SpotMarket;
    let mut _554: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _555: i64;
    let mut _556: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _557: std::result::Result<i64, error::ErrorCode>;
    let mut _558: u64;
    let mut _559: &state::state::OracleGuardRails;
    let mut _560: isize;
    let mut _562: !;
    let mut _563: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _565: isize;
    let mut _567: !;
    let mut _568: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _570: bool;
    let mut _571: !;
    let _572: ();
    let mut _573: std::option::Option<&mut std::cell::RefMut<'_, state::user::User>>;
    let mut _574: &mut std::option::Option<std::cell::RefMut<'_, state::user::User>>;
    let mut _575: isize;
    let _577: ();
    let mut _578: &mut state::user::User;
    let mut _579: &mut state::user::User;
    let mut _580: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _581: u64;
    let mut _583: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _584: std::result::Result<bool, error::ErrorCode>;
    let mut _585: &state::user::User;
    let _586: &state::user::User;
    let mut _587: &std::cell::RefMut<'_, state::user::User>;
    let mut _588: usize;
    let mut _589: i64;
    let mut _590: isize;
    let mut _592: !;
    let mut _593: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _596: bool;
    let mut _597: &state::user::User;
    let mut _598: &std::cell::RefMut<'_, state::user::User>;
    let _599: usize;
    let mut _600: usize;
    let mut _601: bool;
    let mut _603: &state::user::User;
    let mut _604: &std::cell::RefMut<'_, state::user::User>;
    let _605: usize;
    let mut _606: usize;
    let mut _607: bool;
    let mut _609: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, usize>;
    let mut _610: std::result::Result<usize, error::ErrorCode>;
    let mut _611: &state::user::User;
    let _612: &state::user::User;
    let mut _613: &std::cell::RefMut<'_, state::user::User>;
    let mut _614: u16;
    let mut _615: isize;
    let mut _617: !;
    let mut _618: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _621: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _622: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _623: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _624: &u16;
    let _625: &u16;
    let mut _626: isize;
    let mut _628: !;
    let mut _629: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _632: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _633: std::result::Result<i128, error::ErrorCode>;
    let mut _634: &state::user::SpotPosition;
    let _635: &state::user::User;
    let mut _636: &std::cell::RefMut<'_, state::user::User>;
    let _637: usize;
    let mut _638: usize;
    let mut _639: bool;
    let mut _640: &state::spot_market::SpotMarket;
    let _641: &state::spot_market::SpotMarket;
    let mut _642: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _643: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _644: isize;
    let mut _646: !;
    let mut _647: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _649: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _650: std::result::Result<bool, error::ErrorCode>;
    let mut _651: &state::user::Order;
    let _652: &state::user::Order;
    let _653: &state::user::User;
    let mut _654: &std::cell::RefMut<'_, state::user::User>;
    let _655: usize;
    let mut _656: usize;
    let mut _657: bool;
    let mut _658: i64;
    let mut _659: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _660: std::result::Result<i64, error::ErrorCode>;
    let mut _661: i128;
    let mut _662: isize;
    let mut _664: !;
    let mut _665: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _667: u64;
    let mut _668: &state::spot_market::SpotMarket;
    let mut _669: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _670: isize;
    let mut _672: !;
    let mut _673: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _675: ();
    let mut _676: bool;
    let mut _677: bool;
    let mut _678: !;
    let mut _681: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _682: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _683: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _684: isize;
    let mut _686: !;
    let mut _687: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _689: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _690: std::result::Result<u64, error::ErrorCode>;
    let mut _691: &mut state::user::User;
    let mut _692: &mut state::user::User;
    let mut _693: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _694: std::option::Option<&mut state::user::User>;
    let mut _695: &mut std::option::Option<std::cell::RefMut<'_, state::user::User>>;
    let mut _696: &mut state::spot_market::SpotMarket;
    let mut _697: &mut state::spot_market::SpotMarket;
    let mut _698: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _699: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _700: u64;
    let mut _701: u64;
    let mut _702: isize;
    let mut _704: !;
    let mut _705: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _708: bool;
    let _709: ();
    let mut _710: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _711: std::result::Result<(), error::ErrorCode>;
    let mut _712: usize;
    let mut _713: &mut state::user::User;
    let mut _714: &mut state::user::User;
    let mut _715: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _716: &anchor_lang::prelude::Pubkey;
    let _717: &anchor_lang::prelude::Pubkey;
    let mut _718: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _719: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _720: &mut state::oracle_map::OracleMap<'_>;
    let mut _721: i64;
    let mut _722: u64;
    let mut _723: state::events::OrderActionExplanation;
    let mut _724: std::option::Option<&anchor_lang::prelude::Pubkey>;
    let mut _725: &anchor_lang::prelude::Pubkey;
    let _726: &anchor_lang::prelude::Pubkey;
    let mut _727: u64;
    let mut _728: isize;
    let mut _730: !;
    let mut _731: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _733: ();
    let mut _734: bool;
    let mut _735: &dyn state::spot_fulfillment_params::SpotFulfillmentParams;
    let mut _737: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, enumflags2::BitFlags<state::state::ExchangeStatus>>;
    let mut _738: std::result::Result<enumflags2::BitFlags<state::state::ExchangeStatus>, error::ErrorCode>;
    let mut _739: &state::state::State;
    let mut _740: isize;
    let mut _742: !;
    let mut _743: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _745: ();
    let mut _746: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _747: std::result::Result<(), error::ErrorCode>;
    let mut _748: bool;
    let mut _749: enumflags2::BitFlags<state::state::ExchangeStatus>;
    let mut _750: enumflags2::BitFlags<state::state::ExchangeStatus>;
    let mut _751: state::state::ExchangeStatus;
    let mut _752: state::state::ExchangeStatus;
    let mut _753: ();
    let _755: ();
    let mut _756: &str;
    let _757: &str;
    let mut _758: &std::string::String;
    let _759: &std::string::String;
    let _760: std::string::String;
    let mut _762: std::fmt::Arguments<'_>;
    let mut _763: &[&str];
    let mut _764: &[&str; 2];
    let _765: &[&str; 2];
    let _766: [&str; 2];
    let mut _767: &[core::fmt::rt::Argument<'_>];
    let mut _768: &[core::fmt::rt::Argument<'_>; 1];
    let _769: &[core::fmt::rt::Argument<'_>; 1];
    let _770: [core::fmt::rt::Argument<'_>; 1];
    let mut _771: core::fmt::rt::Argument<'_>;
    let mut _772: &error::ErrorCode;
    let _773: &error::ErrorCode;
    let mut _774: error::ErrorCode;
    let mut _775: isize;
    let mut _777: !;
    let mut _778: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _782: (u64, u64);
    let mut _783: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u64, u64)>;
    let mut _784: std::result::Result<(u64, u64), error::ErrorCode>;
    let mut _785: &mut state::user::User;
    let mut _786: &mut state::user::User;
    let mut _787: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _788: usize;
    let mut _789: &anchor_lang::prelude::Pubkey;
    let _790: &anchor_lang::prelude::Pubkey;
    let mut _791: &mut state::user::UserStats;
    let mut _792: &mut state::user::UserStats;
    let mut _793: &mut std::cell::RefMut<'_, state::user::UserStats>;
    let mut _794: &state::user_map::UserMap<'_>;
    let mut _795: &state::user_map::UserStatsMap<'_>;
    let mut _796: &[(anchor_lang::prelude::Pubkey, usize, u64)];
    let _797: &[(anchor_lang::prelude::Pubkey, usize, u64)];
    let mut _798: &std::vec::Vec<(anchor_lang::prelude::Pubkey, usize, u64)>;
    let _799: &std::vec::Vec<(anchor_lang::prelude::Pubkey, usize, u64)>;
    let mut _800: &mut std::option::Option<&mut state::user::User>;
    let mut _801: &mut std::option::Option<&mut state::user::User>;
    let mut _802: std::option::Option<&mut state::user::User>;
    let mut _803: &mut std::option::Option<std::cell::RefMut<'_, state::user::User>>;
    let mut _804: &anchor_lang::prelude::Pubkey;
    let _805: &anchor_lang::prelude::Pubkey;
    let mut _806: &mut std::option::Option<&mut state::user::UserStats>;
    let mut _807: &mut std::option::Option<&mut state::user::UserStats>;
    let mut _808: std::option::Option<&mut state::user::UserStats>;
    let mut _809: &mut std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _810: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _811: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _812: &mut state::oracle_map::OracleMap<'_>;
    let mut _813: i64;
    let mut _814: u64;
    let mut _815: &state::state::FeeStructure;
    let _816: &state::state::FeeStructure;
    let mut _817: &mut dyn state::spot_fulfillment_params::SpotFulfillmentParams;
    let mut _818: &mut dyn state::spot_fulfillment_params::SpotFulfillmentParams;
    let mut _819: bool;
    let mut _820: isize;
    let mut _822: !;
    let mut _823: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _825: ();
    let mut _826: bool;
    let mut _827: u64;
    let mut _829: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _830: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _831: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _832: &u16;
    let _833: &u16;
    let mut _834: isize;
    let mut _836: !;
    let mut _837: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _840: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _841: std::result::Result<u64, error::ErrorCode>;
    let mut _842: u64;
    let mut _843: u64;
    let mut _844: u64;
    let mut _845: state::spot_market::SpotMarket;
    let mut _846: &state::spot_market::SpotMarket;
    let mut _847: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _848: isize;
    let mut _850: !;
    let mut _851: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _854: &state::oracle::OraclePriceData;
    let mut _855: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _856: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _857: &mut state::oracle_map::OracleMap<'_>;
    let mut _858: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _859: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _860: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _861: &state::spot_market::SpotMarket;
    let _862: &state::spot_market::SpotMarket;
    let mut _863: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _864: isize;
    let mut _866: !;
    let mut _867: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _870: &state::spot_market::SpotMarket;
    let mut _871: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _872: ();
    let mut _873: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _874: std::result::Result<(), error::ErrorCode>;
    let mut _875: u64;
    let mut _876: i64;
    let mut _877: i64;
    let mut _878: u32;
    let mut _879: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _880: std::result::Result<u32, error::ErrorCode>;
    let mut _881: &state::spot_market::SpotMarket;
    let _882: &state::spot_market::SpotMarket;
    let mut _883: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _884: &math::margin::MarginRequirementType;
    let _885: &math::margin::MarginRequirementType;
    let _886: math::margin::MarginRequirementType;
    let mut _887: isize;
    let mut _889: !;
    let mut _890: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _892: u64;
    let mut _893: &state::state::OracleGuardRails;
    let mut _894: std::option::Option<controller::position::PositionDirection>;
    let mut _895: bool;
    let mut _896: &dyn state::spot_fulfillment_params::SpotFulfillmentParams;
    let mut _897: controller::position::PositionDirection;
    let mut _898: isize;
    let mut _900: !;
    let mut _901: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _904: &state::user::OrderStatus;
    let _905: &state::user::User;
    let mut _906: &std::cell::RefMut<'_, state::user::User>;
    let _907: usize;
    let mut _908: usize;
    let mut _909: bool;
    let mut _910: &state::user::OrderStatus;
    let _911: state::user::OrderStatus;
    let mut _913: &state::user::User;
    let mut _914: &std::cell::RefMut<'_, state::user::User>;
    let _915: usize;
    let mut _916: usize;
    let mut _917: bool;
    let mut _919: bool;
    let mut _920: bool;
    let mut _922: &state::user::User;
    let mut _923: &std::cell::RefMut<'_, state::user::User>;
    let _924: usize;
    let mut _925: usize;
    let mut _926: bool;
    let mut _928: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, usize>;
    let mut _929: std::result::Result<usize, error::ErrorCode>;
    let mut _930: &state::user::User;
    let _931: &state::user::User;
    let mut _932: &std::cell::RefMut<'_, state::user::User>;
    let mut _933: u16;
    let mut _934: isize;
    let mut _936: !;
    let mut _937: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _940: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _941: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _942: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _943: &u16;
    let _944: &u16;
    let mut _945: isize;
    let mut _947: !;
    let mut _948: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _951: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _952: std::result::Result<i128, error::ErrorCode>;
    let mut _953: &state::user::SpotPosition;
    let _954: &state::user::User;
    let mut _955: &std::cell::RefMut<'_, state::user::User>;
    let _956: usize;
    let mut _957: usize;
    let mut _958: bool;
    let mut _959: &state::spot_market::SpotMarket;
    let _960: &state::spot_market::SpotMarket;
    let mut _961: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _962: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _963: isize;
    let mut _965: !;
    let mut _966: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _968: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _969: std::result::Result<bool, error::ErrorCode>;
    let mut _970: &state::user::Order;
    let _971: &state::user::Order;
    let _972: &state::user::User;
    let mut _973: &std::cell::RefMut<'_, state::user::User>;
    let _974: usize;
    let mut _975: usize;
    let mut _976: bool;
    let mut _977: i64;
    let mut _978: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _979: std::result::Result<i64, error::ErrorCode>;
    let mut _980: i128;
    let mut _981: isize;
    let mut _983: !;
    let mut _984: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _986: u64;
    let mut _987: &state::spot_market::SpotMarket;
    let mut _988: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _989: isize;
    let mut _991: !;
    let mut _992: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _995: bool;
    let mut _997: &state::user::User;
    let mut _998: &std::cell::RefMut<'_, state::user::User>;
    let _999: usize;
    let mut _1000: usize;
    let mut _1001: bool;
    let mut _1003: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _1004: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _1005: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _1006: &u16;
    let _1007: &u16;
    let mut _1008: isize;
    let mut _1010: !;
    let mut _1011: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1014: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _1015: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _1016: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _1017: isize;
    let mut _1019: !;
    let mut _1020: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1024: (std::option::Option<u64>, std::option::Option<u64>);
    let mut _1025: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (std::option::Option<u64>, std::option::Option<u64>)>;
    let mut _1026: std::result::Result<(std::option::Option<u64>, std::option::Option<u64>), error::ErrorCode>;
    let mut _1027: &state::user::User;
    let _1028: &state::user::User;
    let mut _1029: &std::cell::RefMut<'_, state::user::User>;
    let mut _1030: usize;
    let mut _1031: &state::spot_market::SpotMarket;
    let _1032: &state::spot_market::SpotMarket;
    let mut _1033: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _1034: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _1035: &state::spot_market::SpotMarket;
    let _1036: &state::spot_market::SpotMarket;
    let mut _1037: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _1038: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _1039: isize;
    let mut _1041: !;
    let mut _1042: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1044: bool;
    let mut _1045: &std::option::Option<u64>;
    let mut _1046: &std::option::Option<u64>;
    let _1047: std::option::Option<u64>;
    let mut _1048: &std::option::Option<u64>;
    let mut _1049: &std::option::Option<u64>;
    let _1050: std::option::Option<u64>;
    let _1051: ();
    let mut _1052: bool;
    let mut _1053: bool;
    let mut _1056: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _1057: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _1058: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _1059: isize;
    let mut _1061: !;
    let mut _1062: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1064: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _1065: std::result::Result<u64, error::ErrorCode>;
    let mut _1066: &mut state::user::User;
    let mut _1067: &mut state::user::User;
    let mut _1068: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _1069: std::option::Option<&mut state::user::User>;
    let mut _1070: &mut std::option::Option<std::cell::RefMut<'_, state::user::User>>;
    let mut _1071: &mut state::spot_market::SpotMarket;
    let mut _1072: &mut state::spot_market::SpotMarket;
    let mut _1073: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1074: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _1075: u64;
    let mut _1076: u64;
    let mut _1077: isize;
    let mut _1079: !;
    let mut _1080: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1083: bool;
    let mut _1084: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1085: std::result::Result<(), error::ErrorCode>;
    let mut _1086: usize;
    let mut _1087: &mut state::user::User;
    let mut _1088: &mut state::user::User;
    let mut _1089: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _1090: &anchor_lang::prelude::Pubkey;
    let _1091: &anchor_lang::prelude::Pubkey;
    let mut _1092: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _1093: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _1094: &mut state::oracle_map::OracleMap<'_>;
    let mut _1095: i64;
    let mut _1096: u64;
    let mut _1097: state::events::OrderActionExplanation;
    let mut _1098: std::option::Option<&anchor_lang::prelude::Pubkey>;
    let mut _1099: &anchor_lang::prelude::Pubkey;
    let _1100: &anchor_lang::prelude::Pubkey;
    let mut _1101: u64;
    let mut _1102: isize;
    let mut _1104: !;
    let mut _1105: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1107: ();
    let mut _1108: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1109: std::result::Result<(), error::ErrorCode>;
    let mut _1110: &state::spot_market::SpotMarket;
    let _1111: &state::spot_market::SpotMarket;
    let mut _1112: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _1113: std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _1114: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _1115: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _1116: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _1117: &u16;
    let _1118: &u16;
    let mut _1119: isize;
    let mut _1121: !;
    let mut _1122: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1124: isize;
    let mut _1126: !;
    let mut _1127: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1129: ();
    let mut _1130: &mut state::user::User;
    let mut _1131: &mut state::user::User;
    let mut _1132: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _1133: u64;
    let mut _1134: u64;
    let mut _1148: bool;
    let mut _1149: bool;
    let mut _1150: bool;
    let mut _1151: isize;
    let mut _1152: isize;
    let mut _1153: isize;
    let mut _1154: isize;
    let mut _1155: isize;
    let mut _1156: isize;
    let mut _1157: isize;
    let mut _1158: isize;
    let mut _1159: isize;
    let mut _1160: isize;
    let mut _1161: isize;
    let mut _1162: isize;
    let mut _1163: isize;
    let mut _1164: isize;
    let mut _1165: isize;
    let mut _1166: isize;
    let mut _1167: isize;
    let mut _1168: isize;
    let mut _1169: isize;
    let mut _1170: isize;
    let mut _1171: isize;
    let mut _1172: isize;
    let mut _1173: isize;
    let mut _1174: isize;
    let mut _1175: isize;
    let mut _1176: isize;
    let mut _1177: isize;
    let mut _1178: isize;
    let mut _1179: isize;
    let mut _1180: isize;
    let mut _1181: isize;
    let mut _1182: isize;
    let mut _1183: isize;
    let mut _1184: isize;
    let mut _1185: isize;
    let mut _1186: isize;
    let mut _1187: isize;
    let mut _1188: isize;
    let mut _1189: isize;
    let mut _1190: isize;
    let mut _1191: isize;
    let mut _1192: isize;
    let mut _1193: isize;
    let mut _1194: isize;
    let mut _1195: isize;
    let mut _1196: isize;
    let mut _1197: isize;
    let mut _1198: isize;
    let mut _1199: isize;
    let mut _1200: isize;
    let mut _1201: isize;
    let mut _1202: isize;
    let mut _1203: isize;
    let mut _1204: isize;
    let mut _1205: isize;
    let mut _1206: isize;
    let mut _1207: isize;
    let mut _1208: isize;
    let mut _1209: isize;
    let mut _1210: isize;
    let mut _1211: isize;
    let mut _1212: isize;
    let mut _1213: isize;
    let mut _1214: isize;
    let mut _1215: isize;
    let mut _1216: isize;
    let mut _1217: isize;
    let mut _1218: isize;
    let mut _1219: isize;
    let mut _1220: isize;
    let mut _1221: isize;
    let mut _1222: isize;
    let mut _1223: isize;
    let mut _1224: isize;
    let mut _1225: isize;
    let mut _1226: isize;
    let mut _1227: isize;
    let mut _1228: isize;
    let mut _1229: isize;
    let mut _1230: isize;
    let mut _1231: isize;
    let mut _1232: isize;
    let mut _1233: isize;
    let mut _1234: isize;
    let mut _1235: isize;
    scope 1 {
        debug now => _15;
        let _16: u64;
        scope 2 {
            debug slot => _16;
            let _17: anchor_lang::prelude::Pubkey;
            scope 3 {
                debug filler_key => _17;
                let _19: anchor_lang::prelude::Pubkey;
                scope 4 {
                    debug user_key => _19;
                    let _21: &mut std::cell::RefMut<'_, state::user::User>;
                    let _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _32: std::cell::RefMut<'_, state::user::User>;
                    scope 5 {
                        debug user => _21;
                        let _33: &mut std::cell::RefMut<'_, state::user::UserStats>;
                        let _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _44: std::cell::RefMut<'_, state::user::UserStats>;
                        scope 10 {
                            debug user_stats => _33;
                            let _45: usize;
                            let _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _62: usize;
                            scope 15 {
                                debug order_index => _45;
                                let _63: state::user::OrderStatus;
                                let _64: u16;
                                let _65: state::user::MarketType;
                                let _66: controller::position::PositionDirection;
                                scope 20 {
                                    debug order_status => _63;
                                    debug order_market_index => _64;
                                    debug order_market_type => _65;
                                    debug order_direction => _66;
                                    let _93: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                    let _100: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _103: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                    let _149: error::ErrorCode;
                                    let _174: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _177: ();
                                    let _186: error::ErrorCode;
                                    let _211: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _214: ();
                                    let _233: error::ErrorCode;
                                    let _258: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _261: ();
                                    let _285: bool;
                                    let mut _1144: &state::user::OrderStatus;
                                    let mut _1146: &state::user::MarketType;
                                    scope 21 {
                                        debug spot_market => _93;
                                        let _112: error::ErrorCode;
                                        let _137: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _140: ();
                                        scope 26 {
                                            debug error_code => _112;
                                            let _119: std::string::String;
                                            let mut _1147: &[&str; 2];
                                            scope 27 {
                                                debug res => _119;
                                            }
                                        }
                                        scope 28 {
                                            debug residual => _137;
                                            scope 29 {
                                            }
                                        }
                                        scope 30 {
                                            debug val => _140;
                                            scope 31 {
                                            }
                                        }
                                    }
                                    scope 22 {
                                        debug residual => _100;
                                        scope 23 {
                                        }
                                    }
                                    scope 24 {
                                        debug val => _103;
                                        scope 25 {
                                        }
                                    }
                                    scope 32 {
                                        debug error_code => _149;
                                        let _156: std::string::String;
                                        let mut _1145: &[&str; 2];
                                        scope 33 {
                                            debug res => _156;
                                        }
                                    }
                                    scope 34 {
                                        debug residual => _174;
                                        scope 35 {
                                        }
                                    }
                                    scope 36 {
                                        debug val => _177;
                                        scope 37 {
                                        }
                                    }
                                    scope 38 {
                                        debug error_code => _186;
                                        let _193: std::string::String;
                                        let mut _1143: &[&str; 2];
                                        scope 39 {
                                            debug res => _193;
                                        }
                                    }
                                    scope 40 {
                                        debug residual => _211;
                                        scope 41 {
                                        }
                                    }
                                    scope 42 {
                                        debug val => _214;
                                        scope 43 {
                                        }
                                    }
                                    scope 44 {
                                        debug error_code => _233;
                                        let _240: std::string::String;
                                        let mut _1142: &[&str; 2];
                                        scope 45 {
                                            debug res => _240;
                                        }
                                    }
                                    scope 46 {
                                        debug residual => _258;
                                        scope 47 {
                                        }
                                    }
                                    scope 48 {
                                        debug val => _261;
                                        scope 49 {
                                        }
                                    }
                                    scope 50 {
                                        debug is_filler_taker => _285;
                                        let _288: bool;
                                        scope 51 {
                                            debug is_filler_maker => _288;
                                            let mut _292: std::option::Option<std::cell::RefMut<'_, state::user::User>>;
                                            let mut _293: std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>;
                                            let _297: std::cell::RefMut<'_, state::user::User>;
                                            let _304: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _307: std::cell::RefMut<'_, state::user::User>;
                                            scope 52 {
                                                debug filler => _292;
                                                debug filler_stats => _293;
                                                let _388: i64;
                                                let _406: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _409: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                let _411: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _414: &state::oracle::OraclePriceData;
                                                scope 69 {
                                                    debug oracle_price => _388;
                                                    let _415: std::vec::Vec<(anchor_lang::prelude::Pubkey, usize, u64)>;
                                                    let _443: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _446: std::vec::Vec<(anchor_lang::prelude::Pubkey, usize, u64)>;
                                                    scope 78 {
                                                        debug maker_order_info => _415;
                                                        let _447: bool;
                                                        scope 83 {
                                                            debug oracle_stale_for_margin => _447;
                                                            let mut _449: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                            let _454: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _457: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                            let _582: bool;
                                                            let _591: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _594: bool;
                                                            scope 84 {
                                                                debug quote_market => _449;
                                                                let _458: &state::oracle::OraclePriceData;
                                                                let _469: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _472: &state::oracle::OraclePriceData;
                                                                scope 89 {
                                                                    debug oracle_price_data => _458;
                                                                    let _484: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _487: ();
                                                                    let mut _488: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                                    let _495: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _498: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                                    scope 94 {
                                                                        debug residual => _484;
                                                                        scope 95 {
                                                                        }
                                                                    }
                                                                    scope 96 {
                                                                        debug val => _487;
                                                                        scope 97 {
                                                                        }
                                                                    }
                                                                    scope 98 {
                                                                        debug base_market => _488;
                                                                        let _499: &state::oracle::OraclePriceData;
                                                                        let _510: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _513: &state::oracle::OraclePriceData;
                                                                        scope 103 {
                                                                            debug oracle_price_data => _499;
                                                                            let _525: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _528: ();
                                                                            let _544: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _547: ();
                                                                            let _548: bool;
                                                                            let _561: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _564: i64;
                                                                            let _566: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _569: bool;
                                                                            scope 108 {
                                                                                debug residual => _525;
                                                                                scope 109 {
                                                                                }
                                                                            }
                                                                            scope 110 {
                                                                                debug val => _528;
                                                                                scope 111 {
                                                                                }
                                                                            }
                                                                            scope 112 {
                                                                                debug residual => _544;
                                                                                scope 113 {
                                                                                }
                                                                            }
                                                                            scope 114 {
                                                                                debug val => _547;
                                                                                scope 115 {
                                                                                }
                                                                            }
                                                                            scope 116 {
                                                                                debug oracle_too_divergent_with_twap_5min => _548;
                                                                                scope 125 {
                                                                                    debug filler => _576;
                                                                                    let _576: &mut std::cell::RefMut<'_, state::user::User>;
                                                                                }
                                                                            }
                                                                            scope 117 {
                                                                                debug residual => _561;
                                                                                scope 118 {
                                                                                }
                                                                            }
                                                                            scope 119 {
                                                                                debug val => _564;
                                                                                scope 120 {
                                                                                }
                                                                            }
                                                                            scope 121 {
                                                                                debug residual => _566;
                                                                                scope 122 {
                                                                                }
                                                                            }
                                                                            scope 123 {
                                                                                debug val => _569;
                                                                                scope 124 {
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 104 {
                                                                            debug residual => _510;
                                                                            scope 105 {
                                                                            }
                                                                        }
                                                                        scope 106 {
                                                                            debug val => _513;
                                                                            scope 107 {
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 99 {
                                                                        debug residual => _495;
                                                                        scope 100 {
                                                                        }
                                                                    }
                                                                    scope 101 {
                                                                        debug val => _498;
                                                                        scope 102 {
                                                                        }
                                                                    }
                                                                }
                                                                scope 90 {
                                                                    debug residual => _469;
                                                                    scope 91 {
                                                                    }
                                                                }
                                                                scope 92 {
                                                                    debug val => _472;
                                                                    scope 93 {
                                                                    }
                                                                }
                                                            }
                                                            scope 85 {
                                                                debug residual => _454;
                                                                scope 86 {
                                                                }
                                                            }
                                                            scope 87 {
                                                                debug val => _457;
                                                                scope 88 {
                                                                }
                                                            }
                                                            scope 126 {
                                                                debug should_expire_order => _582;
                                                                let _595: bool;
                                                                let _602: u16;
                                                                scope 131 {
                                                                    debug should_cancel_reduce_only => _595;
                                                                    let _679: u64;
                                                                    let mut _680: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                                    let _685: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _688: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                                    let _736: enumflags2::BitFlags<state::state::ExchangeStatus>;
                                                                    let _741: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _744: enumflags2::BitFlags<state::state::ExchangeStatus>;
                                                                    let _780: u64;
                                                                    let _781: u64;
                                                                    let _821: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _824: (u64, u64);
                                                                    scope 156 {
                                                                        debug filler_reward => _679;
                                                                        let _707: state::events::OrderActionExplanation;
                                                                        scope 166 {
                                                                            debug explanation => _707;
                                                                            let _729: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _732: ();
                                                                            scope 167 {
                                                                                debug residual => _729;
                                                                                scope 168 {
                                                                                }
                                                                            }
                                                                            scope 169 {
                                                                                debug val => _732;
                                                                                scope 170 {
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 157 {
                                                                        debug quote_market => _680;
                                                                        let _703: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _706: u64;
                                                                        scope 162 {
                                                                            debug residual => _703;
                                                                            scope 163 {
                                                                            }
                                                                        }
                                                                        scope 164 {
                                                                            debug val => _706;
                                                                            scope 165 {
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 158 {
                                                                        debug residual => _685;
                                                                        scope 159 {
                                                                        }
                                                                    }
                                                                    scope 160 {
                                                                        debug val => _688;
                                                                        scope 161 {
                                                                        }
                                                                    }
                                                                    scope 171 {
                                                                        debug exchange_status => _736;
                                                                        let _754: error::ErrorCode;
                                                                        let _776: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _779: ();
                                                                        scope 176 {
                                                                            debug error_code => _754;
                                                                            let _761: std::string::String;
                                                                            let mut _1139: &[&str; 2];
                                                                            scope 177 {
                                                                                debug res => _761;
                                                                            }
                                                                        }
                                                                        scope 178 {
                                                                            debug residual => _776;
                                                                            scope 179 {
                                                                            }
                                                                        }
                                                                        scope 180 {
                                                                            debug val => _779;
                                                                            scope 181 {
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 172 {
                                                                        debug residual => _741;
                                                                        scope 173 {
                                                                        }
                                                                    }
                                                                    scope 174 {
                                                                        debug val => _744;
                                                                        scope 175 {
                                                                        }
                                                                    }
                                                                    scope 182 {
                                                                        debug base_asset_amount => _780;
                                                                        debug quote_asset_amount => _781;
                                                                        let _828: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                                                        let _835: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _838: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                                                        let _903: bool;
                                                                        let mut _1137: &state::user::OrderStatus;
                                                                        scope 187 {
                                                                            debug spot_market => _828;
                                                                            let _839: u64;
                                                                            let _849: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _852: u64;
                                                                            scope 192 {
                                                                                debug fill_price => _839;
                                                                                let _853: i64;
                                                                                let _865: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _868: &state::oracle::OraclePriceData;
                                                                                scope 197 {
                                                                                    debug oracle_price => _853;
                                                                                    let _869: i64;
                                                                                    scope 202 {
                                                                                        debug oracle_twap_5min => _869;
                                                                                        let _888: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _891: u32;
                                                                                        let _899: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _902: ();
                                                                                        let mut _1138: &math::margin::MarginRequirementType;
                                                                                        scope 203 {
                                                                                            debug residual => _888;
                                                                                            scope 204 {
                                                                                            }
                                                                                        }
                                                                                        scope 205 {
                                                                                            debug val => _891;
                                                                                            scope 206 {
                                                                                            }
                                                                                        }
                                                                                        scope 207 {
                                                                                            debug residual => _899;
                                                                                            scope 208 {
                                                                                            }
                                                                                        }
                                                                                        scope 209 {
                                                                                            debug val => _902;
                                                                                            scope 210 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                scope 198 {
                                                                                    debug residual => _865;
                                                                                    scope 199 {
                                                                                    }
                                                                                }
                                                                                scope 200 {
                                                                                    debug val => _868;
                                                                                    scope 201 {
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 193 {
                                                                                debug residual => _849;
                                                                                scope 194 {
                                                                                }
                                                                            }
                                                                            scope 195 {
                                                                                debug val => _852;
                                                                                scope 196 {
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 188 {
                                                                            debug residual => _835;
                                                                            scope 189 {
                                                                            }
                                                                        }
                                                                        scope 190 {
                                                                            debug val => _838;
                                                                            scope 191 {
                                                                            }
                                                                        }
                                                                        scope 211 {
                                                                            debug is_open => _903;
                                                                            let _912: bool;
                                                                            scope 212 {
                                                                                debug is_reduce_only => _912;
                                                                                let _918: bool;
                                                                                let _921: u16;
                                                                                scope 213 {
                                                                                    debug should_cancel_reduce_only => _918;
                                                                                    let _994: bool;
                                                                                    let _996: u16;
                                                                                    scope 238 {
                                                                                        debug should_cancel_for_no_borrow_liquidity => _994;
                                                                                        let _1054: u64;
                                                                                        let mut _1055: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                                                        let _1060: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _1063: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                                                        let _1120: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _1123: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                                                                        let _1125: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _1128: ();
                                                                                        scope 255 {
                                                                                            debug filler_reward => _1054;
                                                                                            let _1082: state::events::OrderActionExplanation;
                                                                                            scope 265 {
                                                                                                debug explanation => _1082;
                                                                                                let _1103: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                let _1106: ();
                                                                                                scope 266 {
                                                                                                    debug residual => _1103;
                                                                                                    scope 267 {
                                                                                                    }
                                                                                                }
                                                                                                scope 268 {
                                                                                                    debug val => _1106;
                                                                                                    scope 269 {
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 256 {
                                                                                            debug quote_market => _1055;
                                                                                            let _1078: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                            let _1081: u64;
                                                                                            scope 261 {
                                                                                                debug residual => _1078;
                                                                                                scope 262 {
                                                                                                }
                                                                                            }
                                                                                            scope 263 {
                                                                                                debug val => _1081;
                                                                                                scope 264 {
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 257 {
                                                                                            debug residual => _1060;
                                                                                            scope 258 {
                                                                                            }
                                                                                        }
                                                                                        scope 259 {
                                                                                            debug val => _1063;
                                                                                            scope 260 {
                                                                                            }
                                                                                        }
                                                                                        scope 270 {
                                                                                            debug residual => _1120;
                                                                                            scope 271 {
                                                                                            }
                                                                                        }
                                                                                        scope 272 {
                                                                                            debug val => _1123;
                                                                                            scope 273 {
                                                                                            }
                                                                                        }
                                                                                        scope 274 {
                                                                                            debug residual => _1125;
                                                                                            scope 275 {
                                                                                            }
                                                                                        }
                                                                                        scope 276 {
                                                                                            debug val => _1128;
                                                                                            scope 277 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    scope 239 {
                                                                                        debug market_index => _996;
                                                                                        let _1002: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                                                                        let _1009: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _1012: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                                                                        scope 240 {
                                                                                            debug base_market => _1002;
                                                                                            let _1013: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                                                                            let _1018: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                            let _1021: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                                                                            scope 245 {
                                                                                                debug quote_market => _1013;
                                                                                                let _1022: std::option::Option<u64>;
                                                                                                let _1023: std::option::Option<u64>;
                                                                                                let _1040: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                let _1043: (std::option::Option<u64>, std::option::Option<u64>);
                                                                                                scope 250 {
                                                                                                    debug max_base_asset_amount => _1022;
                                                                                                    debug max_quote_asset_amount => _1023;
                                                                                                    let mut _1135: &std::option::Option<u64>;
                                                                                                    let mut _1136: &std::option::Option<u64>;
                                                                                                }
                                                                                                scope 251 {
                                                                                                    debug residual => _1040;
                                                                                                    scope 252 {
                                                                                                    }
                                                                                                }
                                                                                                scope 253 {
                                                                                                    debug val => _1043;
                                                                                                    scope 254 {
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            scope 246 {
                                                                                                debug residual => _1018;
                                                                                                scope 247 {
                                                                                                }
                                                                                            }
                                                                                            scope 248 {
                                                                                                debug val => _1021;
                                                                                                scope 249 {
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 241 {
                                                                                            debug residual => _1009;
                                                                                            scope 242 {
                                                                                            }
                                                                                        }
                                                                                        scope 243 {
                                                                                            debug val => _1012;
                                                                                            scope 244 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                scope 214 {
                                                                                    debug market_index => _921;
                                                                                    let _927: usize;
                                                                                    let _935: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _938: usize;
                                                                                    scope 215 {
                                                                                        debug position_index => _927;
                                                                                        let _939: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                                                                        let _946: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _949: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                                                                        scope 220 {
                                                                                            debug spot_market => _939;
                                                                                            let _950: i128;
                                                                                            let _964: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                            let _967: i128;
                                                                                            scope 225 {
                                                                                                debug signed_token_amount => _950;
                                                                                                let _982: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                let _985: i64;
                                                                                                let _990: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                let _993: bool;
                                                                                                scope 230 {
                                                                                                    debug residual => _982;
                                                                                                    scope 231 {
                                                                                                    }
                                                                                                }
                                                                                                scope 232 {
                                                                                                    debug val => _985;
                                                                                                    scope 233 {
                                                                                                    }
                                                                                                }
                                                                                                scope 234 {
                                                                                                    debug residual => _990;
                                                                                                    scope 235 {
                                                                                                    }
                                                                                                }
                                                                                                scope 236 {
                                                                                                    debug val => _993;
                                                                                                    scope 237 {
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            scope 226 {
                                                                                                debug residual => _964;
                                                                                                scope 227 {
                                                                                                }
                                                                                            }
                                                                                            scope 228 {
                                                                                                debug val => _967;
                                                                                                scope 229 {
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 221 {
                                                                                            debug residual => _946;
                                                                                            scope 222 {
                                                                                            }
                                                                                        }
                                                                                        scope 223 {
                                                                                            debug val => _949;
                                                                                            scope 224 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    scope 216 {
                                                                                        debug residual => _935;
                                                                                        scope 217 {
                                                                                        }
                                                                                    }
                                                                                    scope 218 {
                                                                                        debug val => _938;
                                                                                        scope 219 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 183 {
                                                                        debug residual => _821;
                                                                        scope 184 {
                                                                        }
                                                                    }
                                                                    scope 185 {
                                                                        debug val => _824;
                                                                        scope 186 {
                                                                        }
                                                                    }
                                                                }
                                                                scope 132 {
                                                                    debug market_index => _602;
                                                                    let _608: usize;
                                                                    let _616: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _619: usize;
                                                                    scope 133 {
                                                                        debug position_index => _608;
                                                                        let _620: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                                                        let _627: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _630: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                                                        scope 138 {
                                                                            debug spot_market => _620;
                                                                            let _631: i128;
                                                                            let _645: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _648: i128;
                                                                            scope 143 {
                                                                                debug signed_token_amount => _631;
                                                                                let _663: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _666: i64;
                                                                                let _671: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _674: bool;
                                                                                scope 148 {
                                                                                    debug residual => _663;
                                                                                    scope 149 {
                                                                                    }
                                                                                }
                                                                                scope 150 {
                                                                                    debug val => _666;
                                                                                    scope 151 {
                                                                                    }
                                                                                }
                                                                                scope 152 {
                                                                                    debug residual => _671;
                                                                                    scope 153 {
                                                                                    }
                                                                                }
                                                                                scope 154 {
                                                                                    debug val => _674;
                                                                                    scope 155 {
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 144 {
                                                                                debug residual => _645;
                                                                                scope 145 {
                                                                                }
                                                                            }
                                                                            scope 146 {
                                                                                debug val => _648;
                                                                                scope 147 {
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 139 {
                                                                            debug residual => _627;
                                                                            scope 140 {
                                                                            }
                                                                        }
                                                                        scope 141 {
                                                                            debug val => _630;
                                                                            scope 142 {
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 134 {
                                                                        debug residual => _616;
                                                                        scope 135 {
                                                                        }
                                                                    }
                                                                    scope 136 {
                                                                        debug val => _619;
                                                                        scope 137 {
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            scope 127 {
                                                                debug residual => _591;
                                                                scope 128 {
                                                                }
                                                            }
                                                            scope 129 {
                                                                debug val => _594;
                                                                scope 130 {
                                                                }
                                                            }
                                                        }
                                                    }
                                                    scope 79 {
                                                        debug residual => _443;
                                                        scope 80 {
                                                        }
                                                    }
                                                    scope 81 {
                                                        debug val => _446;
                                                        scope 82 {
                                                        }
                                                    }
                                                }
                                                scope 70 {
                                                    debug residual => _406;
                                                    scope 71 {
                                                    }
                                                }
                                                scope 72 {
                                                    debug val => _409;
                                                    scope 73 {
                                                    }
                                                }
                                                scope 74 {
                                                    debug residual => _411;
                                                    scope 75 {
                                                    }
                                                }
                                                scope 76 {
                                                    debug val => _414;
                                                    scope 77 {
                                                    }
                                                }
                                            }
                                            scope 53 {
                                                debug filler => _297;
                                                let _316: error::ErrorCode;
                                                let _359: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _362: ();
                                                let _380: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _383: std::cell::RefMut<'_, state::user::UserStats>;
                                                scope 58 {
                                                    debug error_code => _316;
                                                    let _323: std::string::String;
                                                    let _342: std::string::String;
                                                    let mut _1140: &[&str; 2];
                                                    let mut _1141: &[&str; 2];
                                                    scope 59 {
                                                        debug res => _323;
                                                    }
                                                    scope 60 {
                                                        debug res => _342;
                                                    }
                                                }
                                                scope 61 {
                                                    debug residual => _359;
                                                    scope 62 {
                                                    }
                                                }
                                                scope 63 {
                                                    debug val => _362;
                                                    scope 64 {
                                                    }
                                                }
                                                scope 65 {
                                                    debug residual => _380;
                                                    scope 66 {
                                                    }
                                                }
                                                scope 67 {
                                                    debug val => _383;
                                                    scope 68 {
                                                    }
                                                }
                                            }
                                            scope 54 {
                                                debug residual => _304;
                                                scope 55 {
                                                }
                                            }
                                            scope 56 {
                                                debug val => _307;
                                                scope 57 {
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            scope 16 {
                                debug residual => _59;
                                scope 17 {
                                }
                            }
                            scope 18 {
                                debug val => _62;
                                scope 19 {
                                }
                            }
                        }
                        scope 11 {
                            debug residual => _41;
                            scope 12 {
                            }
                        }
                        scope 13 {
                            debug val => _44;
                            scope 14 {
                            }
                        }
                    }
                    scope 6 {
                        debug residual => _29;
                        scope 7 {
                        }
                    }
                    scope 8 {
                        debug val => _32;
                        scope 9 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1148 = const false;
        _1150 = const false;
        _1149 = const false;
        StorageLive(_15);
        _15 = ((*_13).4: i64);
        StorageLive(_16);
        _16 = ((*_13).0: u64);
        StorageLive(_17);
        StorageLive(_18);
        _18 = &(*_8);
        _17 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _18) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = &(*_3);
        _19 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _20) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = &(*_3);
        _25 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _26) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_26);
        StorageLive(_27);
        _27 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _24 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _25, move _27) -> [return: bb4, unwind: bb588];
    }

    bb4: {
        StorageDead(_27);
        StorageDead(_25);
        _23 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _24) -> [return: bb5, unwind: bb588];
    }

    bb5: {
        StorageDead(_24);
        _28 = discriminant(_23);
        switchInt(move _28) -> [0: bb6, 1: bb8, otherwise: bb7];
    }

    bb6: {
        StorageLive(_32);
        _32 = move ((_23 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _22 = move _32;
        StorageDead(_32);
        _21 = &mut _22;
        _1153 = discriminant(_23);
        StorageDead(_23);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = &(*_4);
        _37 = anchor_lang::prelude::AccountLoader::<'_, UserStats>::load_mut(move _38) -> [return: bb10, unwind: bb587];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        StorageLive(_29);
        _29 = ((_23 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_31);
        _31 = _29;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _31) -> [return: bb9, unwind: bb614];
    }

    bb9: {
        StorageDead(_31);
        StorageDead(_29);
        _1151 = discriminant(_23);
        StorageDead(_23);
        goto -> bb560;
    }

    bb10: {
        StorageDead(_38);
        StorageLive(_39);
        _39 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _36 = std::result::Result::<RefMut<'_, UserStats>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _37, move _39) -> [return: bb11, unwind: bb587];
    }

    bb11: {
        StorageDead(_39);
        StorageDead(_37);
        _35 = <std::result::Result<RefMut<'_, UserStats>, error::ErrorCode> as Try>::branch(move _36) -> [return: bb12, unwind: bb587];
    }

    bb12: {
        StorageDead(_36);
        _40 = discriminant(_35);
        switchInt(move _40) -> [0: bb13, 1: bb14, otherwise: bb7];
    }

    bb13: {
        StorageLive(_44);
        _44 = move ((_35 as Continue).0: std::cell::RefMut<'_, state::user::UserStats>);
        _34 = move _44;
        StorageDead(_44);
        _33 = &mut _34;
        _1157 = discriminant(_35);
        StorageDead(_35);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &(*_21);
        _53 = <RefMut<'_, User> as Deref>::deref(move _54) -> [return: bb16, unwind: bb586];
    }

    bb14: {
        StorageLive(_41);
        _41 = ((_35 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_43);
        _43 = _41;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _43) -> [return: bb15, unwind: bb613];
    }

    bb15: {
        StorageDead(_43);
        StorageDead(_41);
        _1155 = discriminant(_35);
        StorageDead(_35);
        goto -> bb559;
    }

    bb16: {
        StorageDead(_54);
        _52 = &((*_53).5: [state::user::Order; 32]);
        _51 = move _52 as &[state::user::Order] (PointerCoercion(Unsize));
        StorageDead(_52);
        _50 = core::slice::<impl [Order]>::iter(move _51) -> [return: bb17, unwind: bb586];
    }

    bb17: {
        _49 = &mut _50;
        StorageDead(_51);
        StorageLive(_55);
        StorageLive(_56);
        _56 = &_1;
        _55 = {closure@programs/drift/src/controller/orders.rs:3716:19: 3716:26} { order_id: move _56 };
        StorageDead(_56);
        _48 = <std::slice::Iter<'_, Order> as Iterator>::position::<{closure@programs/drift/src/controller/orders.rs:3716:19: 3716:26}>(move _49, move _55) -> [return: bb18, unwind: bb586];
    }

    bb18: {
        StorageDead(_55);
        StorageDead(_49);
        StorageLive(_57);
        _57 = {closure@programs/drift/src/error.rs:647:9: 647:11};
        _47 = Option::<usize>::ok_or_else::<error::ErrorCode, {closure@programs/drift/src/error.rs:647:9: 647:11}>(move _48, move _57) -> [return: bb19, unwind: bb586];
    }

    bb19: {
        StorageDead(_57);
        StorageDead(_48);
        _46 = <std::result::Result<usize, error::ErrorCode> as Try>::branch(move _47) -> [return: bb20, unwind: bb586];
    }

    bb20: {
        StorageDead(_47);
        _58 = discriminant(_46);
        switchInt(move _58) -> [0: bb21, 1: bb22, otherwise: bb7];
    }

    bb21: {
        StorageLive(_62);
        _62 = ((_46 as Continue).0: usize);
        _45 = _62;
        StorageDead(_62);
        StorageDead(_53);
        StorageDead(_50);
        StorageDead(_46);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &(*_21);
        _69 = <RefMut<'_, User> as Deref>::deref(move _70) -> [return: bb24, unwind: bb586];
    }

    bb22: {
        StorageLive(_59);
        _59 = ((_46 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_61);
        _61 = _59;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _61) -> [return: bb23, unwind: bb586];
    }

    bb23: {
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_53);
        StorageDead(_50);
        StorageDead(_46);
        goto -> bb558;
    }

    bb24: {
        StorageDead(_70);
        StorageLive(_71);
        _71 = _45;
        _72 = Len(((*_69).5: [state::user::Order; 32]));
        _73 = Lt(_71, _72);
        assert(move _73, "index out of bounds: the length is {} but the index is {}", move _72, _71) -> [success: bb25, unwind: bb586];
    }

    bb25: {
        _68 = (((*_69).5: [state::user::Order; 32])[_71].12: state::user::OrderStatus);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _76 = &(*_21);
        _75 = <RefMut<'_, User> as Deref>::deref(move _76) -> [return: bb26, unwind: bb586];
    }

    bb26: {
        StorageDead(_76);
        StorageLive(_77);
        _77 = _45;
        _78 = Len(((*_75).5: [state::user::Order; 32]));
        _79 = Lt(_77, _78);
        assert(move _79, "index out of bounds: the length is {} but the index is {}", move _78, _77) -> [success: bb27, unwind: bb586];
    }

    bb27: {
        _74 = (((*_75).5: [state::user::Order; 32])[_77].11: u16);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = &(*_21);
        _81 = <RefMut<'_, User> as Deref>::deref(move _82) -> [return: bb28, unwind: bb586];
    }

    bb28: {
        StorageDead(_82);
        StorageLive(_83);
        _83 = _45;
        _84 = Len(((*_81).5: [state::user::Order; 32]));
        _85 = Lt(_83, _84);
        assert(move _85, "index out of bounds: the length is {} but the index is {}", move _84, _83) -> [success: bb29, unwind: bb586];
    }

    bb29: {
        _80 = (((*_81).5: [state::user::Order; 32])[_83].14: state::user::MarketType);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _88 = &(*_21);
        _87 = <RefMut<'_, User> as Deref>::deref(move _88) -> [return: bb30, unwind: bb586];
    }

    bb30: {
        StorageDead(_88);
        StorageLive(_89);
        _89 = _45;
        _90 = Len(((*_87).5: [state::user::Order; 32]));
        _91 = Lt(_89, _90);
        assert(move _91, "index out of bounds: the length is {} but the index is {}", move _90, _89) -> [success: bb31, unwind: bb586];
    }

    bb31: {
        _86 = (((*_87).5: [state::user::Order; 32])[_89].17: controller::position::PositionDirection);
        _67 = (move _68, move _74, move _80, move _86);
        StorageDead(_86);
        StorageDead(_80);
        StorageDead(_74);
        StorageDead(_68);
        StorageLive(_63);
        _63 = (_67.0: state::user::OrderStatus);
        StorageLive(_64);
        _64 = (_67.1: u16);
        StorageLive(_65);
        _65 = (_67.2: state::user::MarketType);
        StorageLive(_66);
        _66 = (_67.3: controller::position::PositionDirection);
        StorageDead(_89);
        StorageDead(_87);
        StorageDead(_83);
        StorageDead(_81);
        StorageDead(_77);
        StorageDead(_75);
        StorageDead(_71);
        StorageDead(_69);
        StorageDead(_67);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = &(*_5);
        StorageLive(_97);
        StorageLive(_98);
        _98 = &_64;
        _97 = &(*_98);
        _95 = SpotMarketMap::<'_>::get_ref(move _96, move _97) -> [return: bb32, unwind: bb586];
    }

    bb32: {
        StorageDead(_97);
        StorageDead(_96);
        _94 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _95) -> [return: bb33, unwind: bb586];
    }

    bb33: {
        StorageDead(_95);
        _99 = discriminant(_94);
        switchInt(move _99) -> [0: bb34, 1: bb35, otherwise: bb7];
    }

    bb34: {
        StorageLive(_103);
        _103 = move ((_94 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _93 = move _103;
        StorageDead(_103);
        _1161 = discriminant(_94);
        StorageDead(_98);
        StorageDead(_94);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _110 = &_93;
        _109 = <Ref<'_, SpotMarket> as Deref>::deref(move _110) -> [return: bb37, unwind: bb585];
    }

    bb35: {
        StorageLive(_100);
        _100 = ((_94 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_102);
        _102 = _100;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _102) -> [return: bb36, unwind: bb612];
    }

    bb36: {
        StorageDead(_102);
        StorageDead(_100);
        _1159 = discriminant(_94);
        StorageDead(_98);
        StorageDead(_94);
        goto -> bb556;
    }

    bb37: {
        _108 = &(*_109);
        StorageDead(_110);
        _107 = SpotMarket::fills_enabled(move _108) -> [return: bb38, unwind: bb585];
    }

    bb38: {
        switchInt(move _107) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        StorageDead(_109);
        StorageDead(_108);
        StorageLive(_111);
        _111 = ();
        _106 = std::result::Result::<(), error::ErrorCode>::Ok(move _111);
        StorageDead(_111);
        goto -> bb48;
    }

    bb40: {
        StorageDead(_109);
        StorageDead(_108);
        StorageLive(_112);
        _112 = error::ErrorCode::MarketFillOrderPaused;
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _1147 = const _;
        _123 = &(*_1147);
        _122 = &(*_123);
        _121 = move _122 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_122);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        _131 = &_112;
        _130 = &(*_131);
        _129 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _130) -> [return: bb41, unwind: bb585];
    }

    bb41: {
        StorageDead(_130);
        _128 = [move _129];
        StorageDead(_129);
        _127 = &_128;
        _126 = &(*_127);
        _125 = move _126 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_126);
        _120 = Arguments::<'_>::new_v1(move _121, move _125) -> [return: bb42, unwind: bb585];
    }

    bb42: {
        StorageDead(_125);
        StorageDead(_121);
        _119 = format(move _120) -> [return: bb43, unwind: bb585];
    }

    bb43: {
        StorageDead(_120);
        StorageDead(_131);
        StorageDead(_128);
        StorageDead(_127);
        StorageDead(_123);
        _118 = move _119;
        StorageDead(_119);
        _117 = &_118;
        _116 = &(*_117);
        _115 = <String as Deref>::deref(move _116) -> [return: bb44, unwind: bb584];
    }

    bb44: {
        _114 = &(*_115);
        StorageDead(_116);
        _113 = solana_program::log::sol_log(move _114) -> [return: bb45, unwind: bb584];
    }

    bb45: {
        StorageDead(_114);
        drop(_118) -> [return: bb46, unwind: bb585];
    }

    bb46: {
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_115);
        StorageDead(_113);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        _134 = const "Market unavailable for fills";
        _133 = &(*_134);
        _132 = solana_program::log::sol_log(move _133) -> [return: bb47, unwind: bb585];
    }

    bb47: {
        StorageDead(_133);
        StorageDead(_134);
        StorageDead(_132);
        StorageLive(_135);
        _135 = _112;
        _106 = std::result::Result::<(), error::ErrorCode>::Err(move _135);
        StorageDead(_135);
        StorageDead(_112);
        goto -> bb48;
    }

    bb48: {
        StorageDead(_107);
        _105 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _106) -> [return: bb49, unwind: bb585];
    }

    bb49: {
        StorageDead(_106);
        _136 = discriminant(_105);
        switchInt(move _136) -> [0: bb50, 1: bb51, otherwise: bb7];
    }

    bb50: {
        StorageLive(_140);
        _140 = ((_105 as Continue).0: ());
        _104 = _140;
        StorageDead(_140);
        StorageDead(_105);
        StorageDead(_104);
        _92 = const ();
        drop(_93) -> [return: bb53, unwind: bb586];
    }

    bb51: {
        StorageLive(_137);
        _137 = ((_105 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_139);
        _139 = _137;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _139) -> [return: bb52, unwind: bb585];
    }

    bb52: {
        StorageDead(_139);
        StorageDead(_137);
        StorageDead(_105);
        StorageDead(_104);
        drop(_93) -> [return: bb556, unwind: bb586];
    }

    bb53: {
        StorageDead(_93);
        StorageDead(_92);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        _145 = &_65;
        StorageLive(_146);
        _1146 = const _;
        _146 = &(*_1146);
        _144 = <state::user::MarketType as PartialEq>::eq(move _145, move _146) -> [return: bb54, unwind: bb586];
    }

    bb54: {
        switchInt(move _144) -> [0: bb56, otherwise: bb55];
    }

    bb55: {
        StorageDead(_146);
        StorageDead(_145);
        StorageLive(_148);
        _148 = ();
        _143 = std::result::Result::<(), error::ErrorCode>::Ok(move _148);
        StorageDead(_148);
        goto -> bb64;
    }

    bb56: {
        StorageDead(_146);
        StorageDead(_145);
        StorageLive(_149);
        _149 = error::ErrorCode::InvalidOrderMarketType;
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        _1145 = const _;
        _160 = &(*_1145);
        _159 = &(*_160);
        _158 = move _159 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_159);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        _168 = &_149;
        _167 = &(*_168);
        _166 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _167) -> [return: bb57, unwind: bb586];
    }

    bb57: {
        StorageDead(_167);
        _165 = [move _166];
        StorageDead(_166);
        _164 = &_165;
        _163 = &(*_164);
        _162 = move _163 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_163);
        _157 = Arguments::<'_>::new_v1(move _158, move _162) -> [return: bb58, unwind: bb586];
    }

    bb58: {
        StorageDead(_162);
        StorageDead(_158);
        _156 = format(move _157) -> [return: bb59, unwind: bb586];
    }

    bb59: {
        StorageDead(_157);
        StorageDead(_168);
        StorageDead(_165);
        StorageDead(_164);
        StorageDead(_160);
        _155 = move _156;
        StorageDead(_156);
        _154 = &_155;
        _153 = &(*_154);
        _152 = <String as Deref>::deref(move _153) -> [return: bb60, unwind: bb583];
    }

    bb60: {
        _151 = &(*_152);
        StorageDead(_153);
        _150 = solana_program::log::sol_log(move _151) -> [return: bb61, unwind: bb583];
    }

    bb61: {
        StorageDead(_151);
        drop(_155) -> [return: bb62, unwind: bb586];
    }

    bb62: {
        StorageDead(_155);
        StorageDead(_154);
        StorageDead(_152);
        StorageDead(_150);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        _171 = const "must be spot order";
        _170 = &(*_171);
        _169 = solana_program::log::sol_log(move _170) -> [return: bb63, unwind: bb586];
    }

    bb63: {
        StorageDead(_170);
        StorageDead(_171);
        StorageDead(_169);
        StorageLive(_172);
        _172 = _149;
        _143 = std::result::Result::<(), error::ErrorCode>::Err(move _172);
        StorageDead(_172);
        StorageDead(_149);
        goto -> bb64;
    }

    bb64: {
        StorageDead(_144);
        _142 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _143) -> [return: bb65, unwind: bb586];
    }

    bb65: {
        StorageDead(_143);
        _173 = discriminant(_142);
        switchInt(move _173) -> [0: bb66, 1: bb67, otherwise: bb7];
    }

    bb66: {
        StorageLive(_177);
        _177 = ((_142 as Continue).0: ());
        _141 = _177;
        StorageDead(_177);
        StorageDead(_142);
        StorageDead(_141);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        _182 = &_63;
        StorageLive(_183);
        _1144 = const _;
        _183 = &(*_1144);
        _181 = <OrderStatus as PartialEq>::eq(move _182, move _183) -> [return: bb69, unwind: bb586];
    }

    bb67: {
        StorageLive(_174);
        _174 = ((_142 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_176);
        _176 = _174;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _176) -> [return: bb68, unwind: bb586];
    }

    bb68: {
        StorageDead(_176);
        StorageDead(_174);
        StorageDead(_142);
        StorageDead(_141);
        goto -> bb557;
    }

    bb69: {
        switchInt(move _181) -> [0: bb71, otherwise: bb70];
    }

    bb70: {
        StorageDead(_183);
        StorageDead(_182);
        StorageLive(_185);
        _185 = ();
        _180 = std::result::Result::<(), error::ErrorCode>::Ok(move _185);
        StorageDead(_185);
        goto -> bb79;
    }

    bb71: {
        StorageDead(_183);
        StorageDead(_182);
        StorageLive(_186);
        _186 = error::ErrorCode::OrderNotOpen;
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        _1143 = const _;
        _197 = &(*_1143);
        _196 = &(*_197);
        _195 = move _196 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_196);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        _205 = &_186;
        _204 = &(*_205);
        _203 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _204) -> [return: bb72, unwind: bb586];
    }

    bb72: {
        StorageDead(_204);
        _202 = [move _203];
        StorageDead(_203);
        _201 = &_202;
        _200 = &(*_201);
        _199 = move _200 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_200);
        _194 = Arguments::<'_>::new_v1(move _195, move _199) -> [return: bb73, unwind: bb586];
    }

    bb73: {
        StorageDead(_199);
        StorageDead(_195);
        _193 = format(move _194) -> [return: bb74, unwind: bb586];
    }

    bb74: {
        StorageDead(_194);
        StorageDead(_205);
        StorageDead(_202);
        StorageDead(_201);
        StorageDead(_197);
        _192 = move _193;
        StorageDead(_193);
        _191 = &_192;
        _190 = &(*_191);
        _189 = <String as Deref>::deref(move _190) -> [return: bb75, unwind: bb582];
    }

    bb75: {
        _188 = &(*_189);
        StorageDead(_190);
        _187 = solana_program::log::sol_log(move _188) -> [return: bb76, unwind: bb582];
    }

    bb76: {
        StorageDead(_188);
        drop(_192) -> [return: bb77, unwind: bb586];
    }

    bb77: {
        StorageDead(_192);
        StorageDead(_191);
        StorageDead(_189);
        StorageDead(_187);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        _208 = const "Order not open";
        _207 = &(*_208);
        _206 = solana_program::log::sol_log(move _207) -> [return: bb78, unwind: bb586];
    }

    bb78: {
        StorageDead(_207);
        StorageDead(_208);
        StorageDead(_206);
        StorageLive(_209);
        _209 = _186;
        _180 = std::result::Result::<(), error::ErrorCode>::Err(move _209);
        StorageDead(_209);
        StorageDead(_186);
        goto -> bb79;
    }

    bb79: {
        StorageDead(_181);
        _179 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _180) -> [return: bb80, unwind: bb586];
    }

    bb80: {
        StorageDead(_180);
        _210 = discriminant(_179);
        switchInt(move _210) -> [0: bb81, 1: bb82, otherwise: bb7];
    }

    bb81: {
        StorageLive(_214);
        _214 = ((_179 as Continue).0: ());
        _178 = _214;
        StorageDead(_214);
        StorageDead(_179);
        StorageDead(_178);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        _221 = &(*_21);
        _220 = <RefMut<'_, User> as Deref>::deref(move _221) -> [return: bb84, unwind: bb586];
    }

    bb82: {
        StorageLive(_211);
        _211 = ((_179 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_213);
        _213 = _211;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _213) -> [return: bb83, unwind: bb586];
    }

    bb83: {
        StorageDead(_213);
        StorageDead(_211);
        StorageDead(_179);
        StorageDead(_178);
        goto -> bb557;
    }

    bb84: {
        StorageDead(_221);
        StorageLive(_222);
        _222 = _45;
        _223 = Len(((*_220).5: [state::user::Order; 32]));
        _224 = Lt(_222, _223);
        assert(move _224, "index out of bounds: the length is {} but the index is {}", move _223, _222) -> [success: bb85, unwind: bb586];
    }

    bb85: {
        _219 = &((*_220).5: [state::user::Order; 32])[_222];
        _218 = Order::must_be_triggered(move _219) -> [return: bb86, unwind: bb586];
    }

    bb86: {
        switchInt(move _218) -> [0: bb88, otherwise: bb87];
    }

    bb87: {
        StorageDead(_219);
        StorageDead(_222);
        StorageDead(_220);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        _228 = &(*_21);
        _227 = <RefMut<'_, User> as Deref>::deref(move _228) -> [return: bb89, unwind: bb586];
    }

    bb88: {
        StorageDead(_219);
        StorageDead(_222);
        StorageDead(_220);
        goto -> bb92;
    }

    bb89: {
        StorageDead(_228);
        StorageLive(_229);
        _229 = _45;
        _230 = Len(((*_227).5: [state::user::Order; 32]));
        _231 = Lt(_229, _230);
        assert(move _231, "index out of bounds: the length is {} but the index is {}", move _230, _229) -> [success: bb90, unwind: bb586];
    }

    bb90: {
        _226 = &((*_227).5: [state::user::Order; 32])[_229];
        _225 = Order::triggered(move _226) -> [return: bb91, unwind: bb586];
    }

    bb91: {
        switchInt(move _225) -> [0: bb93, otherwise: bb92];
    }

    bb92: {
        StorageDead(_229);
        StorageDead(_227);
        StorageDead(_226);
        StorageLive(_232);
        _232 = ();
        _217 = std::result::Result::<(), error::ErrorCode>::Ok(move _232);
        StorageDead(_232);
        goto -> bb101;
    }

    bb93: {
        StorageDead(_229);
        StorageDead(_227);
        StorageDead(_226);
        StorageLive(_233);
        _233 = error::ErrorCode::OrderMustBeTriggeredFirst;
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        _1142 = const _;
        _244 = &(*_1142);
        _243 = &(*_244);
        _242 = move _243 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_243);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        _252 = &_233;
        _251 = &(*_252);
        _250 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _251) -> [return: bb94, unwind: bb586];
    }

    bb94: {
        StorageDead(_251);
        _249 = [move _250];
        StorageDead(_250);
        _248 = &_249;
        _247 = &(*_248);
        _246 = move _247 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_247);
        _241 = Arguments::<'_>::new_v1(move _242, move _246) -> [return: bb95, unwind: bb586];
    }

    bb95: {
        StorageDead(_246);
        StorageDead(_242);
        _240 = format(move _241) -> [return: bb96, unwind: bb586];
    }

    bb96: {
        StorageDead(_241);
        StorageDead(_252);
        StorageDead(_249);
        StorageDead(_248);
        StorageDead(_244);
        _239 = move _240;
        StorageDead(_240);
        _238 = &_239;
        _237 = &(*_238);
        _236 = <String as Deref>::deref(move _237) -> [return: bb97, unwind: bb581];
    }

    bb97: {
        _235 = &(*_236);
        StorageDead(_237);
        _234 = solana_program::log::sol_log(move _235) -> [return: bb98, unwind: bb581];
    }

    bb98: {
        StorageDead(_235);
        drop(_239) -> [return: bb99, unwind: bb586];
    }

    bb99: {
        StorageDead(_239);
        StorageDead(_238);
        StorageDead(_236);
        StorageDead(_234);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        _255 = const "Order must be triggered first";
        _254 = &(*_255);
        _253 = solana_program::log::sol_log(move _254) -> [return: bb100, unwind: bb586];
    }

    bb100: {
        StorageDead(_254);
        StorageDead(_255);
        StorageDead(_253);
        StorageLive(_256);
        _256 = _233;
        _217 = std::result::Result::<(), error::ErrorCode>::Err(move _256);
        StorageDead(_256);
        StorageDead(_233);
        goto -> bb101;
    }

    bb101: {
        StorageDead(_225);
        StorageDead(_218);
        _216 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _217) -> [return: bb102, unwind: bb586];
    }

    bb102: {
        StorageDead(_217);
        _257 = discriminant(_216);
        switchInt(move _257) -> [0: bb103, 1: bb104, otherwise: bb7];
    }

    bb103: {
        StorageLive(_261);
        _261 = ((_216 as Continue).0: ());
        _215 = _261;
        StorageDead(_261);
        StorageDead(_216);
        StorageDead(_215);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        _266 = &(*_21);
        _265 = <RefMut<'_, User> as Deref>::deref(move _266) -> [return: bb106, unwind: bb586];
    }

    bb104: {
        StorageLive(_258);
        _258 = ((_216 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_260);
        _260 = _258;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _260) -> [return: bb105, unwind: bb586];
    }

    bb105: {
        StorageDead(_260);
        StorageDead(_258);
        StorageDead(_216);
        StorageDead(_215);
        goto -> bb557;
    }

    bb106: {
        _264 = &(*_265);
        StorageDead(_266);
        _263 = User::is_bankrupt(move _264) -> [return: bb107, unwind: bb586];
    }

    bb107: {
        switchInt(move _263) -> [0: bb110, otherwise: bb108];
    }

    bb108: {
        StorageDead(_265);
        StorageDead(_264);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        _270 = const "User is bankrupt";
        _269 = &(*_270);
        _268 = solana_program::log::sol_log(move _269) -> [return: bb109, unwind: bb586];
    }

    bb109: {
        StorageDead(_269);
        StorageDead(_270);
        StorageDead(_268);
        _0 = std::result::Result::<u64, error::ErrorCode>::Ok(const 0_u64);
        StorageDead(_263);
        StorageDead(_262);
        goto -> bb557;
    }

    bb110: {
        StorageDead(_265);
        StorageDead(_264);
        _262 = const ();
        StorageDead(_263);
        StorageDead(_262);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        _275 = &mut (*_21);
        _274 = <RefMut<'_, User> as DerefMut>::deref_mut(move _275) -> [return: bb111, unwind: bb586];
    }

    bb111: {
        _273 = &mut (*_274);
        StorageDead(_275);
        StorageLive(_276);
        _276 = &(*_6);
        StorageLive(_277);
        _277 = &(*_5);
        StorageLive(_278);
        _278 = &mut (*_7);
        StorageLive(_279);
        _279 = ((*_2).11: u32);
        _272 = validate_user_not_being_liquidated(move _273, move _276, move _277, move _278, move _279) -> [return: bb112, unwind: bb586];
    }

    bb112: {
        StorageDead(_279);
        StorageDead(_278);
        StorageDead(_277);
        StorageDead(_276);
        StorageDead(_273);
        _280 = discriminant(_272);
        switchInt(move _280) -> [0: bb114, 1: bb113, otherwise: bb7];
    }

    bb113: {
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        _284 = const "User is being liquidated";
        _283 = &(*_284);
        _282 = solana_program::log::sol_log(move _283) -> [return: bb115, unwind: bb586];
    }

    bb114: {
        _271 = const ();
        StorageDead(_274);
        StorageDead(_272);
        StorageDead(_271);
        StorageLive(_285);
        StorageLive(_286);
        _286 = &_19;
        StorageLive(_287);
        _287 = &_17;
        _285 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _286, move _287) -> [return: bb116, unwind: bb586];
    }

    bb115: {
        StorageDead(_283);
        StorageDead(_284);
        StorageDead(_282);
        _0 = std::result::Result::<u64, error::ErrorCode>::Ok(const 0_u64);
        StorageDead(_274);
        StorageDead(_272);
        StorageDead(_271);
        goto -> bb557;
    }

    bb116: {
        StorageDead(_287);
        StorageDead(_286);
        StorageLive(_288);
        StorageLive(_289);
        _289 = &((*_10).0: std::collections::BTreeMap<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, state::user::User>>);
        StorageLive(_290);
        StorageLive(_291);
        _291 = &_17;
        _290 = &(*_291);
        _288 = BTreeMap::<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountLoader<'_, User>>::contains_key::<anchor_lang::prelude::Pubkey>(move _289, move _290) -> [return: bb117, unwind: bb586];
    }

    bb117: {
        StorageDead(_290);
        StorageDead(_289);
        StorageDead(_291);
        StorageLive(_294);
        StorageLive(_295);
        _295 = _288;
        switchInt(move _295) -> [0: bb118, otherwise: bb160];
    }

    bb118: {
        StorageLive(_296);
        _296 = _285;
        switchInt(move _296) -> [0: bb119, otherwise: bb160];
    }

    bb119: {
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        _301 = &(*_8);
        _300 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _301) -> [return: bb120, unwind: bb586];
    }

    bb120: {
        StorageDead(_301);
        StorageLive(_302);
        _302 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _299 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _300, move _302) -> [return: bb121, unwind: bb586];
    }

    bb121: {
        StorageDead(_302);
        StorageDead(_300);
        _298 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _299) -> [return: bb122, unwind: bb586];
    }

    bb122: {
        StorageDead(_299);
        _303 = discriminant(_298);
        switchInt(move _303) -> [0: bb123, 1: bb124, otherwise: bb7];
    }

    bb123: {
        StorageLive(_307);
        _307 = move ((_298 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _1148 = const true;
        _297 = move _307;
        StorageDead(_307);
        _1165 = discriminant(_298);
        StorageDead(_298);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        StorageLive(_311);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        _314 = &_297;
        _313 = <RefMut<'_, User> as Deref>::deref(move _314) -> [return: bb126, unwind: bb610];
    }

    bb124: {
        StorageLive(_304);
        _304 = ((_298 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_306);
        _306 = _304;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _306) -> [return: bb125, unwind: bb611];
    }

    bb125: {
        StorageDead(_306);
        StorageDead(_304);
        _1163 = discriminant(_298);
        StorageDead(_298);
        goto -> bb554;
    }

    bb126: {
        StorageDead(_314);
        _312 = ((*_313).27: u8);
        _311 = Eq(move _312, const 0_u8);
        switchInt(move _311) -> [0: bb128, otherwise: bb127];
    }

    bb127: {
        StorageDead(_313);
        StorageDead(_312);
        StorageLive(_315);
        _315 = ();
        _310 = std::result::Result::<(), error::ErrorCode>::Ok(move _315);
        StorageDead(_315);
        goto -> bb142;
    }

    bb128: {
        StorageDead(_313);
        StorageDead(_312);
        StorageLive(_316);
        _316 = error::ErrorCode::InvalidPoolId;
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        _1141 = const _;
        _327 = &(*_1141);
        _326 = &(*_327);
        _325 = move _326 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_326);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        _335 = &_316;
        _334 = &(*_335);
        _333 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _334) -> [return: bb129, unwind: bb610];
    }

    bb129: {
        StorageDead(_334);
        _332 = [move _333];
        StorageDead(_333);
        _331 = &_332;
        _330 = &(*_331);
        _329 = move _330 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_330);
        _324 = Arguments::<'_>::new_v1(move _325, move _329) -> [return: bb130, unwind: bb610];
    }

    bb130: {
        StorageDead(_329);
        StorageDead(_325);
        _323 = format(move _324) -> [return: bb131, unwind: bb610];
    }

    bb131: {
        StorageDead(_324);
        StorageDead(_335);
        StorageDead(_332);
        StorageDead(_331);
        StorageDead(_327);
        _322 = move _323;
        StorageDead(_323);
        _321 = &_322;
        _320 = &(*_321);
        _319 = <String as Deref>::deref(move _320) -> [return: bb132, unwind: bb580];
    }

    bb132: {
        _318 = &(*_319);
        StorageDead(_320);
        _317 = solana_program::log::sol_log(move _318) -> [return: bb133, unwind: bb580];
    }

    bb133: {
        StorageDead(_318);
        drop(_322) -> [return: bb134, unwind: bb610];
    }

    bb134: {
        StorageDead(_322);
        StorageDead(_321);
        StorageDead(_319);
        StorageDead(_317);
        StorageLive(_336);
        StorageLive(_337);
        StorageLive(_338);
        StorageLive(_339);
        StorageLive(_340);
        StorageLive(_341);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        _1140 = const _;
        _346 = &(*_1140);
        _345 = &(*_346);
        _344 = move _345 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_345);
        StorageLive(_348);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        StorageLive(_355);
        StorageLive(_356);
        _356 = &_297;
        _355 = <RefMut<'_, User> as Deref>::deref(move _356) -> [return: bb135, unwind: bb610];
    }

    bb135: {
        StorageDead(_356);
        _354 = &((*_355).27: u8);
        _353 = &(*_354);
        _352 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _353) -> [return: bb136, unwind: bb610];
    }

    bb136: {
        StorageDead(_353);
        _351 = [move _352];
        StorageDead(_352);
        _350 = &_351;
        _349 = &(*_350);
        _348 = move _349 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_349);
        _343 = Arguments::<'_>::new_v1(move _344, move _348) -> [return: bb137, unwind: bb610];
    }

    bb137: {
        StorageDead(_348);
        StorageDead(_344);
        _342 = format(move _343) -> [return: bb138, unwind: bb610];
    }

    bb138: {
        StorageDead(_343);
        StorageDead(_355);
        StorageDead(_354);
        StorageDead(_351);
        StorageDead(_350);
        StorageDead(_346);
        _341 = move _342;
        StorageDead(_342);
        _340 = &_341;
        _339 = &(*_340);
        _338 = <String as Deref>::deref(move _339) -> [return: bb139, unwind: bb579];
    }

    bb139: {
        _337 = &(*_338);
        StorageDead(_339);
        _336 = solana_program::log::sol_log(move _337) -> [return: bb140, unwind: bb579];
    }

    bb140: {
        StorageDead(_337);
        drop(_341) -> [return: bb141, unwind: bb610];
    }

    bb141: {
        StorageDead(_341);
        StorageDead(_340);
        StorageDead(_338);
        StorageDead(_336);
        StorageLive(_357);
        _357 = _316;
        _310 = std::result::Result::<(), error::ErrorCode>::Err(move _357);
        StorageDead(_357);
        StorageDead(_316);
        goto -> bb142;
    }

    bb142: {
        StorageDead(_311);
        _309 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _310) -> [return: bb143, unwind: bb610];
    }

    bb143: {
        StorageDead(_310);
        _358 = discriminant(_309);
        switchInt(move _358) -> [0: bb144, 1: bb145, otherwise: bb7];
    }

    bb144: {
        StorageLive(_362);
        _362 = ((_309 as Continue).0: ());
        _308 = _362;
        StorageDead(_362);
        StorageDead(_309);
        StorageDead(_308);
        StorageLive(_363);
        StorageLive(_364);
        StorageLive(_365);
        StorageLive(_366);
        _366 = &_297;
        _365 = <RefMut<'_, User> as Deref>::deref(move _366) -> [return: bb147, unwind: bb610];
    }

    bb145: {
        StorageLive(_359);
        _359 = ((_309 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_361);
        _361 = _359;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _361) -> [return: bb146, unwind: bb610];
    }

    bb146: {
        StorageDead(_361);
        StorageDead(_359);
        StorageDead(_309);
        StorageDead(_308);
        goto -> bb595;
    }

    bb147: {
        StorageDead(_366);
        _364 = &((*_365).0: anchor_lang::prelude::Pubkey);
        StorageLive(_367);
        StorageLive(_368);
        StorageLive(_369);
        _369 = &(*_21);
        _368 = <RefMut<'_, User> as Deref>::deref(move _369) -> [return: bb148, unwind: bb610];
    }

    bb148: {
        StorageDead(_369);
        _367 = &((*_368).0: anchor_lang::prelude::Pubkey);
        _363 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _364, move _367) -> [return: bb149, unwind: bb610];
    }

    bb149: {
        switchInt(move _363) -> [0: bb157, otherwise: bb150];
    }

    bb150: {
        StorageDead(_368);
        StorageDead(_367);
        StorageDead(_365);
        StorageDead(_364);
        StorageLive(_370);
        StorageLive(_371);
        _1148 = const false;
        _371 = move _297;
        _370 = Option::<RefMut<'_, User>>::Some(move _371);
        StorageDead(_371);
        StorageLive(_372);
        StorageLive(_373);
        StorageLive(_374);
        StorageLive(_375);
        StorageLive(_376);
        StorageLive(_377);
        _377 = &(*_9);
        _376 = anchor_lang::prelude::AccountLoader::<'_, UserStats>::load_mut(move _377) -> [return: bb151, unwind: bb578];
    }

    bb151: {
        StorageDead(_377);
        StorageLive(_378);
        _378 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _375 = std::result::Result::<RefMut<'_, UserStats>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _376, move _378) -> [return: bb152, unwind: bb578];
    }

    bb152: {
        StorageDead(_378);
        StorageDead(_376);
        _374 = <std::result::Result<RefMut<'_, UserStats>, error::ErrorCode> as Try>::branch(move _375) -> [return: bb153, unwind: bb578];
    }

    bb153: {
        StorageDead(_375);
        _379 = discriminant(_374);
        switchInt(move _379) -> [0: bb154, 1: bb155, otherwise: bb7];
    }

    bb154: {
        StorageLive(_383);
        _383 = move ((_374 as Continue).0: std::cell::RefMut<'_, state::user::UserStats>);
        _373 = move _383;
        StorageDead(_383);
        _372 = Option::<RefMut<'_, UserStats>>::Some(move _373);
        StorageDead(_373);
        _294 = (move _370, move _372);
        StorageDead(_372);
        StorageDead(_370);
        _1167 = discriminant(_374);
        StorageDead(_374);
        goto -> bb158;
    }

    bb155: {
        StorageLive(_380);
        _380 = ((_374 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_382);
        _382 = _380;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _382) -> [return: bb156, unwind: bb577];
    }

    bb156: {
        StorageDead(_382);
        StorageDead(_380);
        StorageDead(_373);
        StorageDead(_372);
        drop(_370) -> [return: bb553, unwind: bb608];
    }

    bb157: {
        StorageDead(_368);
        StorageDead(_367);
        StorageDead(_365);
        StorageDead(_364);
        StorageLive(_384);
        _384 = Option::<RefMut<'_, User>>::None;
        StorageLive(_385);
        _385 = Option::<RefMut<'_, UserStats>>::None;
        _294 = (move _384, move _385);
        StorageDead(_385);
        StorageDead(_384);
        goto -> bb158;
    }

    bb158: {
        StorageDead(_363);
        switchInt(_1148) -> [0: bb159, otherwise: bb589];
    }

    bb159: {
        _1148 = const false;
        StorageDead(_297);
        goto -> bb161;
    }

    bb160: {
        StorageLive(_386);
        _386 = Option::<RefMut<'_, User>>::None;
        StorageLive(_387);
        _387 = Option::<RefMut<'_, UserStats>>::None;
        _294 = (move _386, move _387);
        StorageDead(_387);
        StorageDead(_386);
        goto -> bb161;
    }

    bb161: {
        StorageDead(_296);
        StorageDead(_295);
        StorageLive(_292);
        _292 = move (_294.0: std::option::Option<std::cell::RefMut<'_, state::user::User>>);
        StorageLive(_293);
        _293 = move (_294.1: std::option::Option<std::cell::RefMut<'_, state::user::UserStats>>);
        StorageDead(_294);
        StorageLive(_388);
        StorageLive(_389);
        StorageLive(_390);
        StorageLive(_391);
        StorageLive(_392);
        _392 = &mut (*_7);
        StorageLive(_393);
        StorageLive(_394);
        StorageLive(_395);
        StorageLive(_396);
        StorageLive(_397);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        StorageLive(_401);
        StorageLive(_402);
        _402 = &(*_5);
        StorageLive(_403);
        StorageLive(_404);
        _404 = &_64;
        _403 = &(*_404);
        _401 = SpotMarketMap::<'_>::get_ref_mut(move _402, move _403) -> [return: bb162, unwind: bb575];
    }

    bb162: {
        StorageDead(_403);
        StorageDead(_402);
        _400 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _401) -> [return: bb163, unwind: bb575];
    }

    bb163: {
        _1150 = const true;
        StorageDead(_401);
        _405 = discriminant(_400);
        switchInt(move _405) -> [0: bb164, 1: bb165, otherwise: bb7];
    }

    bb164: {
        StorageLive(_409);
        _409 = move ((_400 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _399 = move _409;
        StorageDead(_409);
        _398 = &_399;
        _397 = <RefMut<'_, SpotMarket> as Deref>::deref(move _398) -> [return: bb167, unwind: bb574];
    }

    bb165: {
        StorageLive(_406);
        _406 = ((_400 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_408);
        _408 = _406;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _408) -> [return: bb166, unwind: bb607];
    }

    bb166: {
        StorageDead(_408);
        StorageDead(_406);
        StorageDead(_398);
        StorageDead(_396);
        StorageDead(_393);
        StorageDead(_392);
        StorageDead(_391);
        goto -> bb593;
    }

    bb167: {
        _396 = &(*_397);
        StorageDead(_398);
        _395 = SpotMarket::oracle_id(move _396) -> [return: bb168, unwind: bb574];
    }

    bb168: {
        StorageDead(_396);
        _394 = &_395;
        _393 = &(*_394);
        _391 = OracleMap::<'_>::get_price_data(move _392, move _393) -> [return: bb169, unwind: bb574];
    }

    bb169: {
        StorageDead(_393);
        StorageDead(_392);
        _390 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _391) -> [return: bb170, unwind: bb574];
    }

    bb170: {
        StorageDead(_391);
        _410 = discriminant(_390);
        switchInt(move _410) -> [0: bb171, 1: bb172, otherwise: bb7];
    }

    bb171: {
        StorageLive(_414);
        _414 = ((_390 as Continue).0: &state::oracle::OraclePriceData);
        _389 = _414;
        StorageDead(_414);
        _388 = ((*_389).0: i64);
        drop(_399) -> [return: bb590, unwind: bb607];
    }

    bb172: {
        StorageLive(_411);
        _411 = ((_390 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_413);
        _413 = _411;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _413) -> [return: bb173, unwind: bb574];
    }

    bb173: {
        StorageDead(_413);
        StorageDead(_411);
        drop(_399) -> [return: bb593, unwind: bb607];
    }

    bb174: {
        StorageDead(_427);
        StorageLive(_428);
        _428 = _45;
        _429 = Len(((*_426).5: [state::user::Order; 32]));
        _430 = Lt(_428, _429);
        assert(move _430, "index out of bounds: the length is {} but the index is {}", move _429, _428) -> [success: bb175, unwind: bb575];
    }

    bb175: {
        _425 = &((*_426).5: [state::user::Order; 32])[_428];
        _424 = &(*_425);
        StorageLive(_431);
        StorageLive(_432);
        StorageLive(_433);
        StorageLive(_434);
        _434 = &mut _292;
        _433 = Option::<RefMut<'_, User>>::as_deref_mut(move _434) -> [return: bb176, unwind: bb575];
    }

    bb176: {
        StorageDead(_434);
        _432 = &mut _433;
        _431 = &mut (*_432);
        StorageLive(_435);
        StorageLive(_436);
        _436 = &_17;
        _435 = &(*_436);
        StorageLive(_437);
        _437 = (((*_2).6: state::state::FeeStructure).3: u64);
        StorageLive(_438);
        _438 = _388;
        StorageLive(_439);
        _439 = _12;
        StorageLive(_440);
        _440 = _15;
        StorageLive(_441);
        _441 = _16;
        _417 = get_spot_maker_orders_info(move _418, move _419, move _420, move _421, move _422, move _424, move _431, move _435, move _437, move _438, move _439, move _440, move _441) -> [return: bb177, unwind: bb575];
    }

    bb177: {
        StorageDead(_441);
        StorageDead(_440);
        StorageDead(_439);
        StorageDead(_438);
        StorageDead(_437);
        StorageDead(_435);
        StorageDead(_431);
        StorageDead(_424);
        StorageDead(_422);
        StorageDead(_421);
        StorageDead(_420);
        StorageDead(_419);
        StorageDead(_418);
        _416 = <std::result::Result<Vec<(anchor_lang::prelude::Pubkey, usize, u64)>, error::ErrorCode> as Try>::branch(move _417) -> [return: bb178, unwind: bb575];
    }

    bb178: {
        StorageDead(_417);
        _442 = discriminant(_416);
        switchInt(move _442) -> [0: bb179, 1: bb180, otherwise: bb7];
    }

    bb179: {
        StorageLive(_446);
        _446 = move ((_416 as Continue).0: std::vec::Vec<(anchor_lang::prelude::Pubkey, usize, u64)>);
        _415 = move _446;
        StorageDead(_446);
        _1173 = discriminant(_416);
        StorageDead(_436);
        StorageDead(_433);
        StorageDead(_432);
        StorageDead(_428);
        StorageDead(_426);
        StorageDead(_425);
        StorageDead(_423);
        StorageDead(_416);
        StorageLive(_447);
        StorageLive(_448);
        StorageLive(_449);
        StorageLive(_450);
        StorageLive(_451);
        StorageLive(_452);
        _452 = &(*_5);
        _451 = SpotMarketMap::<'_>::get_quote_spot_market_mut(move _452) -> [return: bb182, unwind: bb573];
    }

    bb180: {
        StorageLive(_443);
        _443 = ((_416 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_445);
        _445 = _443;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _445) -> [return: bb181, unwind: bb606];
    }

    bb181: {
        StorageDead(_445);
        StorageDead(_443);
        _1171 = discriminant(_416);
        StorageDead(_436);
        StorageDead(_433);
        StorageDead(_432);
        StorageDead(_428);
        StorageDead(_426);
        StorageDead(_425);
        StorageDead(_423);
        StorageDead(_416);
        goto -> bb549;
    }

    bb182: {
        StorageDead(_452);
        _450 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _451) -> [return: bb183, unwind: bb573];
    }

    bb183: {
        StorageDead(_451);
        _453 = discriminant(_450);
        switchInt(move _453) -> [0: bb184, 1: bb185, otherwise: bb7];
    }

    bb184: {
        StorageLive(_457);
        _457 = move ((_450 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _449 = move _457;
        StorageDead(_457);
        _1177 = discriminant(_450);
        StorageDead(_450);
        StorageLive(_458);
        StorageLive(_459);
        StorageLive(_460);
        StorageLive(_461);
        _461 = &mut (*_7);
        StorageLive(_462);
        StorageLive(_463);
        StorageLive(_464);
        StorageLive(_465);
        StorageLive(_466);
        StorageLive(_467);
        _467 = &_449;
        _466 = <RefMut<'_, SpotMarket> as Deref>::deref(move _467) -> [return: bb187, unwind: bb572];
    }

    bb185: {
        StorageLive(_454);
        _454 = ((_450 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_456);
        _456 = _454;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _456) -> [return: bb186, unwind: bb605];
    }

    bb186: {
        StorageDead(_456);
        StorageDead(_454);
        _1175 = discriminant(_450);
        StorageDead(_450);
        goto -> bb547;
    }

    bb187: {
        _465 = &(*_466);
        StorageDead(_467);
        _464 = SpotMarket::oracle_id(move _465) -> [return: bb188, unwind: bb572];
    }

    bb188: {
        StorageDead(_465);
        _463 = &_464;
        _462 = &(*_463);
        _460 = OracleMap::<'_>::get_price_data(move _461, move _462) -> [return: bb189, unwind: bb572];
    }

    bb189: {
        StorageDead(_462);
        StorageDead(_461);
        _459 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _460) -> [return: bb190, unwind: bb572];
    }

    bb190: {
        StorageDead(_460);
        _468 = discriminant(_459);
        switchInt(move _468) -> [0: bb191, 1: bb192, otherwise: bb7];
    }

    bb191: {
        StorageLive(_472);
        _472 = ((_459 as Continue).0: &state::oracle::OraclePriceData);
        _458 = _472;
        StorageDead(_472);
        StorageDead(_466);
        StorageDead(_464);
        StorageDead(_463);
        StorageDead(_459);
        StorageLive(_473);
        StorageLive(_474);
        StorageLive(_475);
        StorageLive(_476);
        StorageLive(_477);
        StorageLive(_478);
        StorageLive(_479);
        _479 = &mut _449;
        _478 = &mut (*_479);
        _477 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _478) -> [return: bb194, unwind: bb572];
    }

    bb192: {
        StorageLive(_469);
        _469 = ((_459 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_471);
        _471 = _469;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _471) -> [return: bb193, unwind: bb572];
    }

    bb193: {
        StorageDead(_471);
        StorageDead(_469);
        StorageDead(_466);
        StorageDead(_464);
        StorageDead(_463);
        StorageDead(_459);
        goto -> bb546;
    }

    bb194: {
        _476 = &mut (*_477);
        StorageDead(_478);
        StorageLive(_480);
        StorageLive(_481);
        _481 = &(*_458);
        _480 = Option::<&OraclePriceData>::Some(move _481);
        StorageDead(_481);
        StorageLive(_482);
        _482 = _15;
        _475 = controller::spot_balance::update_spot_market_cumulative_interest(move _476, move _480, move _482) -> [return: bb195, unwind: bb572];
    }

    bb195: {
        StorageDead(_482);
        StorageDead(_480);
        StorageDead(_476);
        _474 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _475) -> [return: bb196, unwind: bb572];
    }

    bb196: {
        StorageDead(_475);
        _483 = discriminant(_474);
        switchInt(move _483) -> [0: bb197, 1: bb198, otherwise: bb7];
    }

    bb197: {
        StorageLive(_487);
        _487 = ((_474 as Continue).0: ());
        _473 = _487;
        StorageDead(_487);
        StorageDead(_479);
        StorageDead(_477);
        StorageDead(_474);
        StorageDead(_473);
        StorageLive(_488);
        StorageLive(_489);
        StorageLive(_490);
        StorageLive(_491);
        _491 = &(*_5);
        StorageLive(_492);
        StorageLive(_493);
        _493 = &_64;
        _492 = &(*_493);
        _490 = SpotMarketMap::<'_>::get_ref_mut(move _491, move _492) -> [return: bb200, unwind: bb572];
    }

    bb198: {
        StorageLive(_484);
        _484 = ((_474 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_486);
        _486 = _484;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _486) -> [return: bb199, unwind: bb572];
    }

    bb199: {
        StorageDead(_486);
        StorageDead(_484);
        StorageDead(_479);
        StorageDead(_477);
        StorageDead(_474);
        StorageDead(_473);
        goto -> bb546;
    }

    bb200: {
        StorageDead(_492);
        StorageDead(_491);
        _489 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _490) -> [return: bb201, unwind: bb572];
    }

    bb201: {
        StorageDead(_490);
        _494 = discriminant(_489);
        switchInt(move _494) -> [0: bb202, 1: bb203, otherwise: bb7];
    }

    bb202: {
        StorageLive(_498);
        _498 = move ((_489 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _488 = move _498;
        StorageDead(_498);
        _1181 = discriminant(_489);
        StorageDead(_493);
        StorageDead(_489);
        StorageLive(_499);
        StorageLive(_500);
        StorageLive(_501);
        StorageLive(_502);
        _502 = &mut (*_7);
        StorageLive(_503);
        StorageLive(_504);
        StorageLive(_505);
        StorageLive(_506);
        StorageLive(_507);
        StorageLive(_508);
        _508 = &_488;
        _507 = <RefMut<'_, SpotMarket> as Deref>::deref(move _508) -> [return: bb205, unwind: bb571];
    }

    bb203: {
        StorageLive(_495);
        _495 = ((_489 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_497);
        _497 = _495;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _497) -> [return: bb204, unwind: bb604];
    }

    bb204: {
        StorageDead(_497);
        StorageDead(_495);
        _1179 = discriminant(_489);
        StorageDead(_493);
        StorageDead(_489);
        goto -> bb545;
    }

    bb205: {
        _506 = &(*_507);
        StorageDead(_508);
        _505 = SpotMarket::oracle_id(move _506) -> [return: bb206, unwind: bb571];
    }

    bb206: {
        StorageDead(_506);
        _504 = &_505;
        _503 = &(*_504);
        _501 = OracleMap::<'_>::get_price_data(move _502, move _503) -> [return: bb207, unwind: bb571];
    }

    bb207: {
        StorageDead(_503);
        StorageDead(_502);
        _500 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _501) -> [return: bb208, unwind: bb571];
    }

    bb208: {
        StorageDead(_501);
        _509 = discriminant(_500);
        switchInt(move _509) -> [0: bb209, 1: bb210, otherwise: bb7];
    }

    bb209: {
        StorageLive(_513);
        _513 = ((_500 as Continue).0: &state::oracle::OraclePriceData);
        _499 = _513;
        StorageDead(_513);
        StorageDead(_507);
        StorageDead(_505);
        StorageDead(_504);
        StorageDead(_500);
        StorageLive(_514);
        StorageLive(_515);
        StorageLive(_516);
        StorageLive(_517);
        StorageLive(_518);
        StorageLive(_519);
        StorageLive(_520);
        _520 = &mut _488;
        _519 = &mut (*_520);
        _518 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _519) -> [return: bb212, unwind: bb571];
    }

    bb210: {
        StorageLive(_510);
        _510 = ((_500 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_512);
        _512 = _510;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _512) -> [return: bb211, unwind: bb571];
    }

    bb211: {
        StorageDead(_512);
        StorageDead(_510);
        StorageDead(_507);
        StorageDead(_505);
        StorageDead(_504);
        StorageDead(_500);
        goto -> bb544;
    }

    bb212: {
        _517 = &mut (*_518);
        StorageDead(_519);
        StorageLive(_521);
        StorageLive(_522);
        _522 = &(*_499);
        _521 = Option::<&OraclePriceData>::Some(move _522);
        StorageDead(_522);
        StorageLive(_523);
        _523 = _15;
        _516 = controller::spot_balance::update_spot_market_cumulative_interest(move _517, move _521, move _523) -> [return: bb213, unwind: bb571];
    }

    bb213: {
        StorageDead(_523);
        StorageDead(_521);
        StorageDead(_517);
        _515 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _516) -> [return: bb214, unwind: bb571];
    }

    bb214: {
        StorageDead(_516);
        _524 = discriminant(_515);
        switchInt(move _524) -> [0: bb215, 1: bb216, otherwise: bb7];
    }

    bb215: {
        StorageLive(_528);
        _528 = ((_515 as Continue).0: ());
        _514 = _528;
        StorageDead(_528);
        StorageDead(_520);
        StorageDead(_518);
        StorageDead(_515);
        StorageDead(_514);
        StorageLive(_529);
        _529 = ((*_499).2: i64);
        StorageLive(_530);
        _530 = ((((*_2).7: state::state::OracleGuardRails).1: state::state::ValidityGuardRails).1: i64);
        _447 = Gt(move _529, move _530);
        StorageDead(_530);
        StorageDead(_529);
        StorageLive(_531);
        StorageLive(_532);
        StorageLive(_533);
        StorageLive(_534);
        _534 = &(*_14);
        StorageLive(_535);
        StorageLive(_536);
        StorageLive(_537);
        StorageLive(_538);
        _538 = &_488;
        _537 = &(*_538);
        _536 = <RefMut<'_, SpotMarket> as Deref>::deref(move _537) -> [return: bb218, unwind: bb571];
    }

    bb216: {
        StorageLive(_525);
        _525 = ((_515 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_527);
        _527 = _525;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _527) -> [return: bb217, unwind: bb571];
    }

    bb217: {
        StorageDead(_527);
        StorageDead(_525);
        StorageDead(_520);
        StorageDead(_518);
        StorageDead(_515);
        StorageDead(_514);
        goto -> bb544;
    }

    bb218: {
        _535 = &(*_536);
        StorageDead(_537);
        StorageLive(_539);
        StorageLive(_540);
        StorageLive(_541);
        StorageLive(_542);
        _542 = &_449;
        _541 = &(*_542);
        _540 = <RefMut<'_, SpotMarket> as Deref>::deref(move _541) -> [return: bb219, unwind: bb571];
    }

    bb219: {
        _539 = &(*_540);
        StorageDead(_541);
        _533 = <dyn SpotFulfillmentParams as SpotFulfillmentParams>::validate_markets(move _534, move _535, move _539) -> [return: bb220, unwind: bb571];
    }

    bb220: {
        StorageDead(_539);
        StorageDead(_535);
        StorageDead(_534);
        _532 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _533) -> [return: bb221, unwind: bb571];
    }

    bb221: {
        StorageDead(_533);
        _543 = discriminant(_532);
        switchInt(move _543) -> [0: bb222, 1: bb223, otherwise: bb7];
    }

    bb222: {
        StorageLive(_547);
        _547 = ((_532 as Continue).0: ());
        _531 = _547;
        StorageDead(_547);
        StorageDead(_542);
        StorageDead(_540);
        StorageDead(_538);
        StorageDead(_536);
        StorageDead(_532);
        StorageDead(_531);
        StorageLive(_548);
        StorageLive(_549);
        StorageLive(_550);
        StorageLive(_551);
        _551 = ((*_499).0: i64);
        StorageLive(_552);
        StorageLive(_553);
        StorageLive(_554);
        _554 = &_488;
        _553 = <RefMut<'_, SpotMarket> as Deref>::deref(move _554) -> [return: bb225, unwind: bb571];
    }

    bb223: {
        StorageLive(_544);
        _544 = ((_532 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_546);
        _546 = _544;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _546) -> [return: bb224, unwind: bb571];
    }

    bb224: {
        StorageDead(_546);
        StorageDead(_544);
        StorageDead(_542);
        StorageDead(_540);
        StorageDead(_538);
        StorageDead(_536);
        StorageDead(_532);
        StorageDead(_531);
        goto -> bb544;
    }

    bb225: {
        StorageDead(_554);
        _552 = (((*_553).5: state::oracle::HistoricalOracleData).4: i64);
        StorageLive(_555);
        StorageLive(_556);
        StorageLive(_557);
        StorageLive(_558);
        StorageLive(_559);
        _559 = &((*_2).7: state::state::OracleGuardRails);
        _558 = state::state::OracleGuardRails::max_oracle_twap_5min_percent_divergence(move _559) -> [return: bb226, unwind: bb571];
    }

    bb226: {
        StorageDead(_559);
        _557 = <u64 as Cast>::cast::<i64>(move _558) -> [return: bb227, unwind: bb571];
    }

    bb227: {
        StorageDead(_558);
        _556 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _557) -> [return: bb228, unwind: bb571];
    }

    bb228: {
        StorageDead(_557);
        _560 = discriminant(_556);
        switchInt(move _560) -> [0: bb229, 1: bb230, otherwise: bb7];
    }

    bb229: {
        StorageLive(_564);
        _564 = ((_556 as Continue).0: i64);
        _555 = _564;
        StorageDead(_564);
        _550 = math::orders::is_oracle_too_divergent_with_twap_5min(move _551, move _552, move _555) -> [return: bb232, unwind: bb571];
    }

    bb230: {
        StorageLive(_561);
        _561 = ((_556 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_563);
        _563 = _561;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _563) -> [return: bb231, unwind: bb571];
    }

    bb231: {
        StorageDead(_563);
        StorageDead(_561);
        StorageDead(_555);
        StorageDead(_552);
        StorageDead(_551);
        StorageDead(_550);
        goto -> bb542;
    }

    bb232: {
        StorageDead(_555);
        StorageDead(_552);
        StorageDead(_551);
        _549 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _550) -> [return: bb233, unwind: bb571];
    }

    bb233: {
        StorageDead(_550);
        _565 = discriminant(_549);
        switchInt(move _565) -> [0: bb234, 1: bb235, otherwise: bb7];
    }

    bb234: {
        StorageLive(_569);
        _569 = ((_549 as Continue).0: bool);
        _548 = _569;
        StorageDead(_569);
        StorageDead(_556);
        StorageDead(_553);
        StorageDead(_549);
        StorageLive(_570);
        _570 = _548;
        switchInt(move _570) -> [0: bb238, otherwise: bb237];
    }

    bb235: {
        StorageLive(_566);
        _566 = ((_549 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_568);
        _568 = _566;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _568) -> [return: bb236, unwind: bb571];
    }

    bb236: {
        StorageDead(_568);
        StorageDead(_566);
        goto -> bb542;
    }

    bb237: {
        StorageLive(_572);
        StorageLive(_573);
        StorageLive(_574);
        _574 = &mut _292;
        _573 = Option::<RefMut<'_, User>>::as_mut(move _574) -> [return: bb239, unwind: bb571];
    }

    bb238: {
        _448 = const ();
        StorageDead(_570);
        StorageDead(_548);
        StorageDead(_499);
        drop(_488) -> [return: bb245, unwind: bb572];
    }

    bb239: {
        StorageDead(_574);
        _575 = discriminant(_573);
        switchInt(move _575) -> [1: bb240, otherwise: bb243];
    }

    bb240: {
        StorageLive(_576);
        _576 = move ((_573 as Some).0: &mut std::cell::RefMut<'_, state::user::User>);
        StorageLive(_577);
        StorageLive(_578);
        StorageLive(_579);
        StorageLive(_580);
        _580 = &mut (*_576);
        _579 = <RefMut<'_, User> as DerefMut>::deref_mut(move _580) -> [return: bb241, unwind: bb571];
    }

    bb241: {
        _578 = &mut (*_579);
        StorageDead(_580);
        StorageLive(_581);
        _581 = _16;
        _577 = User::update_last_active_slot(move _578, move _581) -> [return: bb242, unwind: bb571];
    }

    bb242: {
        StorageDead(_581);
        StorageDead(_578);
        StorageDead(_579);
        StorageDead(_577);
        _572 = const ();
        StorageDead(_576);
        goto -> bb244;
    }

    bb243: {
        _572 = const ();
        goto -> bb244;
    }

    bb244: {
        StorageDead(_573);
        StorageDead(_572);
        _0 = std::result::Result::<u64, error::ErrorCode>::Ok(const 0_u64);
        StorageDead(_570);
        goto -> bb543;
    }

    bb245: {
        StorageDead(_488);
        StorageDead(_458);
        drop(_449) -> [return: bb246, unwind: bb573];
    }

    bb246: {
        StorageDead(_449);
        StorageDead(_448);
        StorageLive(_582);
        StorageLive(_583);
        StorageLive(_584);
        StorageLive(_585);
        StorageLive(_586);
        StorageLive(_587);
        _587 = &(*_21);
        _586 = <RefMut<'_, User> as Deref>::deref(move _587) -> [return: bb247, unwind: bb573];
    }

    bb247: {
        _585 = &(*_586);
        StorageDead(_587);
        StorageLive(_588);
        _588 = _45;
        StorageLive(_589);
        _589 = _15;
        _584 = math::orders::should_expire_order_before_fill(move _585, move _588, move _589) -> [return: bb248, unwind: bb573];
    }

    bb248: {
        StorageDead(_589);
        StorageDead(_588);
        StorageDead(_585);
        _583 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _584) -> [return: bb249, unwind: bb573];
    }

    bb249: {
        StorageDead(_584);
        _590 = discriminant(_583);
        switchInt(move _590) -> [0: bb250, 1: bb251, otherwise: bb7];
    }

    bb250: {
        StorageLive(_594);
        _594 = ((_583 as Continue).0: bool);
        _582 = _594;
        StorageDead(_594);
        StorageDead(_586);
        StorageDead(_583);
        StorageLive(_595);
        StorageLive(_596);
        StorageLive(_597);
        StorageLive(_598);
        _598 = &(*_21);
        _597 = <RefMut<'_, User> as Deref>::deref(move _598) -> [return: bb253, unwind: bb573];
    }

    bb251: {
        StorageLive(_591);
        _591 = ((_583 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_593);
        _593 = _591;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _593) -> [return: bb252, unwind: bb573];
    }

    bb252: {
        StorageDead(_593);
        StorageDead(_591);
        StorageDead(_586);
        StorageDead(_583);
        goto -> bb541;
    }

    bb253: {
        StorageDead(_598);
        StorageLive(_599);
        _599 = _45;
        _600 = Len(((*_597).5: [state::user::Order; 32]));
        _601 = Lt(_599, _600);
        assert(move _601, "index out of bounds: the length is {} but the index is {}", move _600, _599) -> [success: bb254, unwind: bb573];
    }

    bb254: {
        _596 = (((*_597).5: [state::user::Order; 32])[_599].18: bool);
        switchInt(move _596) -> [0: bb291, otherwise: bb255];
    }

    bb255: {
        StorageDead(_599);
        StorageDead(_597);
        StorageLive(_602);
        StorageLive(_603);
        StorageLive(_604);
        _604 = &(*_21);
        _603 = <RefMut<'_, User> as Deref>::deref(move _604) -> [return: bb256, unwind: bb573];
    }

    bb256: {
        StorageDead(_604);
        StorageLive(_605);
        _605 = _45;
        _606 = Len(((*_603).5: [state::user::Order; 32]));
        _607 = Lt(_605, _606);
        assert(move _607, "index out of bounds: the length is {} but the index is {}", move _606, _605) -> [success: bb257, unwind: bb573];
    }

    bb257: {
        _602 = (((*_603).5: [state::user::Order; 32])[_605].11: u16);
        StorageDead(_605);
        StorageDead(_603);
        StorageLive(_608);
        StorageLive(_609);
        StorageLive(_610);
        StorageLive(_611);
        StorageLive(_612);
        StorageLive(_613);
        _613 = &(*_21);
        _612 = <RefMut<'_, User> as Deref>::deref(move _613) -> [return: bb258, unwind: bb573];
    }

    bb258: {
        _611 = &(*_612);
        StorageDead(_613);
        StorageLive(_614);
        _614 = _602;
        _610 = User::get_spot_position_index(move _611, move _614) -> [return: bb259, unwind: bb573];
    }

    bb259: {
        StorageDead(_614);
        StorageDead(_611);
        _609 = <std::result::Result<usize, error::ErrorCode> as Try>::branch(move _610) -> [return: bb260, unwind: bb573];
    }

    bb260: {
        StorageDead(_610);
        _615 = discriminant(_609);
        switchInt(move _615) -> [0: bb261, 1: bb262, otherwise: bb7];
    }

    bb261: {
        StorageLive(_619);
        _619 = ((_609 as Continue).0: usize);
        _608 = _619;
        StorageDead(_619);
        StorageDead(_612);
        StorageDead(_609);
        StorageLive(_620);
        StorageLive(_621);
        StorageLive(_622);
        StorageLive(_623);
        _623 = &(*_5);
        StorageLive(_624);
        StorageLive(_625);
        _625 = &_602;
        _624 = &(*_625);
        _622 = SpotMarketMap::<'_>::get_ref(move _623, move _624) -> [return: bb264, unwind: bb573];
    }

    bb262: {
        StorageLive(_616);
        _616 = ((_609 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_618);
        _618 = _616;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _618) -> [return: bb263, unwind: bb573];
    }

    bb263: {
        StorageDead(_618);
        StorageDead(_616);
        StorageDead(_612);
        StorageDead(_609);
        goto -> bb538;
    }

    bb264: {
        StorageDead(_624);
        StorageDead(_623);
        _621 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _622) -> [return: bb265, unwind: bb573];
    }

    bb265: {
        StorageDead(_622);
        _626 = discriminant(_621);
        switchInt(move _626) -> [0: bb266, 1: bb267, otherwise: bb7];
    }

    bb266: {
        StorageLive(_630);
        _630 = move ((_621 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _620 = move _630;
        StorageDead(_630);
        _1185 = discriminant(_621);
        StorageDead(_625);
        StorageDead(_621);
        StorageLive(_631);
        StorageLive(_632);
        StorageLive(_633);
        StorageLive(_634);
        StorageLive(_635);
        StorageLive(_636);
        _636 = &(*_21);
        _635 = <RefMut<'_, User> as Deref>::deref(move _636) -> [return: bb269, unwind: bb570];
    }

    bb267: {
        StorageLive(_627);
        _627 = ((_621 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_629);
        _629 = _627;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _629) -> [return: bb268, unwind: bb603];
    }

    bb268: {
        StorageDead(_629);
        StorageDead(_627);
        _1183 = discriminant(_621);
        StorageDead(_625);
        StorageDead(_621);
        goto -> bb537;
    }

    bb269: {
        StorageDead(_636);
        StorageLive(_637);
        _637 = _608;
        _638 = Len(((*_635).3: [state::user::SpotPosition; 8]));
        _639 = Lt(_637, _638);
        assert(move _639, "index out of bounds: the length is {} but the index is {}", move _638, _637) -> [success: bb270, unwind: bb570];
    }

    bb270: {
        _634 = &((*_635).3: [state::user::SpotPosition; 8])[_637];
        StorageLive(_640);
        StorageLive(_641);
        StorageLive(_642);
        StorageLive(_643);
        _643 = &_620;
        _642 = &(*_643);
        _641 = <Ref<'_, SpotMarket> as Deref>::deref(move _642) -> [return: bb271, unwind: bb570];
    }

    bb271: {
        _640 = &(*_641);
        StorageDead(_642);
        _633 = SpotPosition::get_signed_token_amount(move _634, move _640) -> [return: bb272, unwind: bb570];
    }

    bb272: {
        StorageDead(_640);
        StorageDead(_634);
        _632 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _633) -> [return: bb273, unwind: bb570];
    }

    bb273: {
        StorageDead(_633);
        _644 = discriminant(_632);
        switchInt(move _644) -> [0: bb274, 1: bb275, otherwise: bb7];
    }

    bb274: {
        StorageLive(_648);
        _648 = ((_632 as Continue).0: i128);
        _631 = _648;
        StorageDead(_648);
        StorageDead(_643);
        StorageDead(_641);
        StorageDead(_637);
        StorageDead(_635);
        StorageDead(_632);
        StorageLive(_649);
        StorageLive(_650);
        StorageLive(_651);
        StorageLive(_652);
        StorageLive(_653);
        StorageLive(_654);
        _654 = &(*_21);
        _653 = <RefMut<'_, User> as Deref>::deref(move _654) -> [return: bb277, unwind: bb570];
    }

    bb275: {
        StorageLive(_645);
        _645 = ((_632 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_647);
        _647 = _645;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _647) -> [return: bb276, unwind: bb570];
    }

    bb276: {
        StorageDead(_647);
        StorageDead(_645);
        StorageDead(_643);
        StorageDead(_641);
        StorageDead(_637);
        StorageDead(_635);
        StorageDead(_632);
        StorageDead(_631);
        drop(_620) -> [return: bb537, unwind: bb573];
    }

    bb277: {
        StorageDead(_654);
        StorageLive(_655);
        _655 = _45;
        _656 = Len(((*_653).5: [state::user::Order; 32]));
        _657 = Lt(_655, _656);
        assert(move _657, "index out of bounds: the length is {} but the index is {}", move _656, _655) -> [success: bb278, unwind: bb570];
    }

    bb278: {
        _652 = &((*_653).5: [state::user::Order; 32])[_655];
        _651 = &(*_652);
        StorageLive(_658);
        StorageLive(_659);
        StorageLive(_660);
        StorageLive(_661);
        _661 = _631;
        _660 = <i128 as Cast>::cast::<i64>(move _661) -> [return: bb279, unwind: bb570];
    }

    bb279: {
        StorageDead(_661);
        _659 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _660) -> [return: bb280, unwind: bb570];
    }

    bb280: {
        StorageDead(_660);
        _662 = discriminant(_659);
        switchInt(move _662) -> [0: bb281, 1: bb282, otherwise: bb7];
    }

    bb281: {
        StorageLive(_666);
        _666 = ((_659 as Continue).0: i64);
        _658 = _666;
        StorageDead(_666);
        StorageLive(_667);
        StorageLive(_668);
        StorageLive(_669);
        _669 = &_620;
        _668 = <Ref<'_, SpotMarket> as Deref>::deref(move _669) -> [return: bb284, unwind: bb570];
    }

    bb282: {
        StorageLive(_663);
        _663 = ((_659 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_665);
        _665 = _663;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _665) -> [return: bb283, unwind: bb570];
    }

    bb283: {
        StorageDead(_665);
        StorageDead(_663);
        StorageDead(_658);
        StorageDead(_651);
        StorageDead(_650);
        StorageDead(_631);
        drop(_620) -> [return: bb535, unwind: bb573];
    }

    bb284: {
        StorageDead(_669);
        _667 = ((*_668).25: u64);
        _650 = math::orders::should_cancel_reduce_only_order(move _651, move _658, move _667) -> [return: bb285, unwind: bb570];
    }

    bb285: {
        StorageDead(_667);
        StorageDead(_658);
        StorageDead(_651);
        _649 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _650) -> [return: bb286, unwind: bb570];
    }

    bb286: {
        StorageDead(_650);
        _670 = discriminant(_649);
        switchInt(move _670) -> [0: bb287, 1: bb288, otherwise: bb7];
    }

    bb287: {
        StorageLive(_674);
        _674 = ((_649 as Continue).0: bool);
        _595 = _674;
        StorageDead(_674);
        StorageDead(_631);
        drop(_620) -> [return: bb290, unwind: bb573];
    }

    bb288: {
        StorageLive(_671);
        _671 = ((_649 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_673);
        _673 = _671;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _673) -> [return: bb289, unwind: bb570];
    }

    bb289: {
        StorageDead(_673);
        StorageDead(_671);
        StorageDead(_631);
        drop(_620) -> [return: bb534, unwind: bb573];
    }

    bb290: {
        StorageDead(_620);
        StorageDead(_608);
        StorageDead(_602);
        StorageDead(_668);
        StorageDead(_659);
        StorageDead(_655);
        StorageDead(_653);
        StorageDead(_652);
        StorageDead(_649);
        goto -> bb292;
    }

    bb291: {
        StorageDead(_599);
        StorageDead(_597);
        _595 = const false;
        goto -> bb292;
    }

    bb292: {
        StorageDead(_596);
        StorageLive(_675);
        StorageLive(_676);
        _676 = _582;
        switchInt(move _676) -> [0: bb293, otherwise: bb294];
    }

    bb293: {
        StorageLive(_677);
        _677 = _595;
        switchInt(move _677) -> [0: bb318, otherwise: bb294];
    }

    bb294: {
        StorageLive(_679);
        StorageLive(_680);
        StorageLive(_681);
        StorageLive(_682);
        StorageLive(_683);
        _683 = &(*_5);
        _682 = SpotMarketMap::<'_>::get_quote_spot_market_mut(move _683) -> [return: bb295, unwind: bb573];
    }

    bb295: {
        StorageDead(_683);
        _681 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _682) -> [return: bb296, unwind: bb573];
    }

    bb296: {
        StorageDead(_682);
        _684 = discriminant(_681);
        switchInt(move _684) -> [0: bb297, 1: bb298, otherwise: bb7];
    }

    bb297: {
        StorageLive(_688);
        _688 = move ((_681 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _680 = move _688;
        StorageDead(_688);
        _1189 = discriminant(_681);
        StorageDead(_681);
        StorageLive(_689);
        StorageLive(_690);
        StorageLive(_691);
        StorageLive(_692);
        StorageLive(_693);
        _693 = &mut (*_21);
        _692 = <RefMut<'_, User> as DerefMut>::deref_mut(move _693) -> [return: bb300, unwind: bb569];
    }

    bb298: {
        StorageLive(_685);
        _685 = ((_681 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_687);
        _687 = _685;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _687) -> [return: bb299, unwind: bb602];
    }

    bb299: {
        StorageDead(_687);
        StorageDead(_685);
        _1187 = discriminant(_681);
        StorageDead(_681);
        StorageDead(_680);
        goto -> bb533;
    }

    bb300: {
        _691 = &mut (*_692);
        StorageDead(_693);
        StorageLive(_694);
        StorageLive(_695);
        _695 = &mut _292;
        _694 = Option::<RefMut<'_, User>>::as_deref_mut(move _695) -> [return: bb301, unwind: bb569];
    }

    bb301: {
        StorageDead(_695);
        StorageLive(_696);
        StorageLive(_697);
        StorageLive(_698);
        StorageLive(_699);
        _699 = &mut _680;
        _698 = &mut (*_699);
        _697 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _698) -> [return: bb302, unwind: bb569];
    }

    bb302: {
        _696 = &mut (*_697);
        StorageDead(_698);
        StorageLive(_700);
        _700 = (((*_2).6: state::state::FeeStructure).3: u64);
        StorageLive(_701);
        _701 = _16;
        _690 = pay_keeper_flat_reward_for_spot(move _691, move _694, move _696, move _700, move _701) -> [return: bb303, unwind: bb569];
    }

    bb303: {
        StorageDead(_701);
        StorageDead(_700);
        StorageDead(_696);
        StorageDead(_694);
        StorageDead(_691);
        _689 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _690) -> [return: bb304, unwind: bb569];
    }

    bb304: {
        StorageDead(_690);
        _702 = discriminant(_689);
        switchInt(move _702) -> [0: bb305, 1: bb306, otherwise: bb7];
    }

    bb305: {
        StorageLive(_706);
        _706 = ((_689 as Continue).0: u64);
        _679 = _706;
        StorageDead(_706);
        drop(_680) -> [return: bb308, unwind: bb573];
    }

    bb306: {
        StorageLive(_703);
        _703 = ((_689 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_705);
        _705 = _703;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _705) -> [return: bb307, unwind: bb569];
    }

    bb307: {
        StorageDead(_705);
        StorageDead(_703);
        drop(_680) -> [return: bb532, unwind: bb573];
    }

    bb308: {
        StorageDead(_680);
        StorageDead(_699);
        StorageDead(_697);
        StorageDead(_692);
        StorageDead(_689);
        StorageLive(_707);
        StorageLive(_708);
        _708 = _582;
        switchInt(move _708) -> [0: bb310, otherwise: bb309];
    }

    bb309: {
        _707 = OrderActionExplanation::OrderExpired;
        goto -> bb311;
    }

    bb310: {
        _707 = OrderActionExplanation::ReduceOnlyOrderIncreasedPosition;
        goto -> bb311;
    }

    bb311: {
        StorageDead(_708);
        StorageLive(_709);
        StorageLive(_710);
        StorageLive(_711);
        StorageLive(_712);
        _712 = _45;
        StorageLive(_713);
        StorageLive(_714);
        StorageLive(_715);
        _715 = &mut (*_21);
        _714 = <RefMut<'_, User> as DerefMut>::deref_mut(move _715) -> [return: bb312, unwind: bb573];
    }

    bb312: {
        _713 = &mut (*_714);
        StorageDead(_715);
        StorageLive(_716);
        StorageLive(_717);
        _717 = &_19;
        _716 = &(*_717);
        StorageLive(_718);
        _718 = &(*_6);
        StorageLive(_719);
        _719 = &(*_5);
        StorageLive(_720);
        _720 = &mut (*_7);
        StorageLive(_721);
        _721 = _15;
        StorageLive(_722);
        _722 = _16;
        StorageLive(_723);
        _723 = _707;
        StorageLive(_724);
        StorageLive(_725);
        StorageLive(_726);
        _726 = &_17;
        _725 = &(*_726);
        _724 = Option::<&anchor_lang::prelude::Pubkey>::Some(move _725);
        StorageDead(_725);
        StorageLive(_727);
        _727 = _679;
        _711 = controller::orders::cancel_order(move _712, move _713, move _716, move _718, move _719, move _720, move _721, move _722, move _723, move _724, move _727, const false) -> [return: bb313, unwind: bb573];
    }

    bb313: {
        StorageDead(_727);
        StorageDead(_724);
        StorageDead(_723);
        StorageDead(_722);
        StorageDead(_721);
        StorageDead(_720);
        StorageDead(_719);
        StorageDead(_718);
        StorageDead(_716);
        StorageDead(_713);
        StorageDead(_712);
        _710 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _711) -> [return: bb314, unwind: bb573];
    }

    bb314: {
        StorageDead(_711);
        _728 = discriminant(_710);
        switchInt(move _728) -> [0: bb315, 1: bb316, otherwise: bb7];
    }

    bb315: {
        StorageLive(_732);
        _732 = ((_710 as Continue).0: ());
        _709 = _732;
        StorageDead(_732);
        StorageDead(_726);
        StorageDead(_717);
        StorageDead(_714);
        StorageDead(_710);
        StorageDead(_709);
        _0 = std::result::Result::<u64, error::ErrorCode>::Ok(const 0_u64);
        goto -> bb531;
    }

    bb316: {
        StorageLive(_729);
        _729 = ((_710 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_731);
        _731 = _729;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _731) -> [return: bb317, unwind: bb573];
    }

    bb317: {
        StorageDead(_731);
        StorageDead(_729);
        StorageDead(_726);
        StorageDead(_717);
        StorageDead(_714);
        StorageDead(_710);
        StorageDead(_709);
        goto -> bb531;
    }

    bb318: {
        _675 = const ();
        StorageDead(_677);
        StorageDead(_676);
        StorageDead(_675);
        StorageLive(_733);
        StorageLive(_734);
        StorageLive(_735);
        _735 = &(*_14);
        _734 = <dyn SpotFulfillmentParams as SpotFulfillmentParams>::is_external(move _735) -> [return: bb319, unwind: bb573];
    }

    bb319: {
        switchInt(move _734) -> [0: bb341, otherwise: bb320];
    }

    bb320: {
        StorageDead(_735);
        StorageLive(_736);
        StorageLive(_737);
        StorageLive(_738);
        StorageLive(_739);
        _739 = &(*_2);
        _738 = state::state::State::get_exchange_status(move _739) -> [return: bb321, unwind: bb573];
    }

    bb321: {
        StorageDead(_739);
        _737 = <std::result::Result<BitFlags<state::state::ExchangeStatus>, error::ErrorCode> as Try>::branch(move _738) -> [return: bb322, unwind: bb573];
    }

    bb322: {
        StorageDead(_738);
        _740 = discriminant(_737);
        switchInt(move _740) -> [0: bb323, 1: bb324, otherwise: bb7];
    }

    bb323: {
        StorageLive(_744);
        _744 = ((_737 as Continue).0: enumflags2::BitFlags<state::state::ExchangeStatus>);
        _736 = _744;
        StorageDead(_744);
        StorageDead(_737);
        StorageLive(_745);
        StorageLive(_746);
        StorageLive(_747);
        StorageLive(_748);
        StorageLive(_749);
        _749 = _736;
        StorageLive(_750);
        StorageLive(_751);
        _751 = state::state::ExchangeStatus::DepositPaused;
        StorageLive(_752);
        _752 = state::state::ExchangeStatus::WithdrawPaused;
        _750 = <state::state::ExchangeStatus as BitOr>::bitor(move _751, move _752) -> [return: bb326, unwind: bb573];
    }

    bb324: {
        StorageLive(_741);
        _741 = ((_737 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_743);
        _743 = _741;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _743) -> [return: bb325, unwind: bb573];
    }

    bb325: {
        StorageDead(_743);
        StorageDead(_741);
        StorageDead(_737);
        goto -> bb530;
    }

    bb326: {
        StorageDead(_752);
        StorageDead(_751);
        _748 = BitFlags::<state::state::ExchangeStatus>::contains::<BitFlags<state::state::ExchangeStatus>>(move _749, move _750) -> [return: bb327, unwind: bb573];
    }

    bb327: {
        switchInt(move _748) -> [0: bb329, otherwise: bb328];
    }

    bb328: {
        StorageDead(_750);
        StorageDead(_749);
        StorageLive(_754);
        _754 = error::ErrorCode::ExchangePaused;
        StorageLive(_755);
        StorageLive(_756);
        StorageLive(_757);
        StorageLive(_758);
        StorageLive(_759);
        StorageLive(_760);
        StorageLive(_761);
        StorageLive(_762);
        StorageLive(_763);
        StorageLive(_764);
        StorageLive(_765);
        _1139 = const _;
        _765 = &(*_1139);
        _764 = &(*_765);
        _763 = move _764 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_764);
        StorageLive(_767);
        StorageLive(_768);
        StorageLive(_769);
        StorageLive(_770);
        StorageLive(_771);
        StorageLive(_772);
        StorageLive(_773);
        _773 = &_754;
        _772 = &(*_773);
        _771 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _772) -> [return: bb330, unwind: bb573];
    }

    bb329: {
        StorageDead(_750);
        StorageDead(_749);
        StorageLive(_753);
        _753 = ();
        _747 = std::result::Result::<(), error::ErrorCode>::Ok(move _753);
        StorageDead(_753);
        goto -> bb336;
    }

    bb330: {
        StorageDead(_772);
        _770 = [move _771];
        StorageDead(_771);
        _769 = &_770;
        _768 = &(*_769);
        _767 = move _768 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_768);
        _762 = Arguments::<'_>::new_v1(move _763, move _767) -> [return: bb331, unwind: bb573];
    }

    bb331: {
        StorageDead(_767);
        StorageDead(_763);
        _761 = format(move _762) -> [return: bb332, unwind: bb573];
    }

    bb332: {
        StorageDead(_762);
        StorageDead(_773);
        StorageDead(_770);
        StorageDead(_769);
        StorageDead(_765);
        _760 = move _761;
        StorageDead(_761);
        _759 = &_760;
        _758 = &(*_759);
        _757 = <String as Deref>::deref(move _758) -> [return: bb333, unwind: bb568];
    }

    bb333: {
        _756 = &(*_757);
        StorageDead(_758);
        _755 = solana_program::log::sol_log(move _756) -> [return: bb334, unwind: bb568];
    }

    bb334: {
        StorageDead(_756);
        drop(_760) -> [return: bb335, unwind: bb573];
    }

    bb335: {
        StorageDead(_760);
        StorageDead(_759);
        StorageDead(_757);
        StorageDead(_755);
        StorageLive(_774);
        _774 = _754;
        _747 = std::result::Result::<(), error::ErrorCode>::Err(move _774);
        StorageDead(_774);
        StorageDead(_754);
        goto -> bb336;
    }

    bb336: {
        StorageDead(_748);
        _746 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _747) -> [return: bb337, unwind: bb573];
    }

    bb337: {
        StorageDead(_747);
        _775 = discriminant(_746);
        switchInt(move _775) -> [0: bb338, 1: bb339, otherwise: bb7];
    }

    bb338: {
        StorageLive(_779);
        _779 = ((_746 as Continue).0: ());
        _745 = _779;
        StorageDead(_779);
        StorageDead(_746);
        StorageDead(_745);
        _733 = const ();
        StorageDead(_736);
        goto -> bb342;
    }

    bb339: {
        StorageLive(_776);
        _776 = ((_746 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_778);
        _778 = _776;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _778) -> [return: bb340, unwind: bb573];
    }

    bb340: {
        StorageDead(_778);
        StorageDead(_776);
        StorageDead(_746);
        StorageDead(_745);
        goto -> bb530;
    }

    bb341: {
        StorageDead(_735);
        _733 = const ();
        goto -> bb342;
    }

    bb342: {
        StorageDead(_734);
        StorageDead(_733);
        StorageLive(_782);
        StorageLive(_783);
        StorageLive(_784);
        StorageLive(_785);
        StorageLive(_786);
        StorageLive(_787);
        _787 = &mut (*_21);
        _786 = <RefMut<'_, User> as DerefMut>::deref_mut(move _787) -> [return: bb343, unwind: bb573];
    }

    bb343: {
        _785 = &mut (*_786);
        StorageDead(_787);
        StorageLive(_788);
        _788 = _45;
        StorageLive(_789);
        StorageLive(_790);
        _790 = &_19;
        _789 = &(*_790);
        StorageLive(_791);
        StorageLive(_792);
        StorageLive(_793);
        _793 = &mut (*_33);
        _792 = <RefMut<'_, UserStats> as DerefMut>::deref_mut(move _793) -> [return: bb344, unwind: bb573];
    }

    bb344: {
        _791 = &mut (*_792);
        StorageDead(_793);
        StorageLive(_794);
        _794 = &(*_10);
        StorageLive(_795);
        _795 = &(*_11);
        StorageLive(_796);
        StorageLive(_797);
        StorageLive(_798);
        StorageLive(_799);
        _799 = &_415;
        _798 = &(*_799);
        _797 = <Vec<(anchor_lang::prelude::Pubkey, usize, u64)> as Deref>::deref(move _798) -> [return: bb345, unwind: bb573];
    }

    bb345: {
        _796 = &(*_797);
        StorageDead(_798);
        StorageLive(_800);
        StorageLive(_801);
        StorageLive(_802);
        StorageLive(_803);
        _803 = &mut _292;
        _802 = Option::<RefMut<'_, User>>::as_deref_mut(move _803) -> [return: bb346, unwind: bb573];
    }

    bb346: {
        StorageDead(_803);
        _801 = &mut _802;
        _800 = &mut (*_801);
        StorageLive(_804);
        StorageLive(_805);
        _805 = &_17;
        _804 = &(*_805);
        StorageLive(_806);
        StorageLive(_807);
        StorageLive(_808);
        StorageLive(_809);
        _809 = &mut _293;
        _808 = Option::<RefMut<'_, UserStats>>::as_deref_mut(move _809) -> [return: bb347, unwind: bb573];
    }

    bb347: {
        StorageDead(_809);
        _807 = &mut _808;
        _806 = &mut (*_807);
        StorageLive(_810);
        _810 = &(*_5);
        StorageLive(_811);
        _811 = &(*_6);
        StorageLive(_812);
        _812 = &mut (*_7);
        StorageLive(_813);
        _813 = _15;
        StorageLive(_814);
        _814 = _16;
        StorageLive(_815);
        StorageLive(_816);
        _816 = &((*_2).6: state::state::FeeStructure);
        _815 = &(*_816);
        StorageLive(_817);
        StorageLive(_818);
        _818 = &mut (*_14);
        _817 = move _818 as &mut dyn state::spot_fulfillment_params::SpotFulfillmentParams (PointerCoercion(Unsize));
        StorageDead(_818);
        StorageLive(_819);
        _819 = _447;
        _784 = fulfill_spot_order(move _785, move _788, move _789, move _791, move _794, move _795, move _796, move _800, move _804, move _806, move _810, move _811, move _812, move _813, move _814, move _815, move _817, move _819) -> [return: bb348, unwind: bb573];
    }

    bb348: {
        StorageDead(_819);
        StorageDead(_817);
        StorageDead(_815);
        StorageDead(_814);
        StorageDead(_813);
        StorageDead(_812);
        StorageDead(_811);
        StorageDead(_810);
        StorageDead(_806);
        StorageDead(_804);
        StorageDead(_800);
        StorageDead(_796);
        StorageDead(_795);
        StorageDead(_794);
        StorageDead(_791);
        StorageDead(_789);
        StorageDead(_788);
        StorageDead(_785);
        _783 = <std::result::Result<(u64, u64), error::ErrorCode> as Try>::branch(move _784) -> [return: bb349, unwind: bb573];
    }

    bb349: {
        StorageDead(_784);
        _820 = discriminant(_783);
        switchInt(move _820) -> [0: bb350, 1: bb351, otherwise: bb7];
    }

    bb350: {
        StorageLive(_824);
        _824 = ((_783 as Continue).0: (u64, u64));
        _782 = _824;
        StorageDead(_824);
        StorageLive(_780);
        _780 = (_782.0: u64);
        StorageLive(_781);
        _781 = (_782.1: u64);
        StorageDead(_816);
        StorageDead(_808);
        StorageDead(_807);
        StorageDead(_805);
        StorageDead(_802);
        StorageDead(_801);
        StorageDead(_799);
        StorageDead(_797);
        StorageDead(_792);
        StorageDead(_790);
        StorageDead(_786);
        StorageDead(_783);
        StorageDead(_782);
        StorageLive(_825);
        StorageLive(_826);
        StorageLive(_827);
        _827 = _780;
        _826 = Ne(move _827, const 0_u64);
        switchInt(move _826) -> [0: bb354, otherwise: bb353];
    }

    bb351: {
        StorageLive(_821);
        _821 = ((_783 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_823);
        _823 = _821;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _823) -> [return: bb352, unwind: bb573];
    }

    bb352: {
        StorageDead(_823);
        StorageDead(_821);
        StorageDead(_816);
        StorageDead(_808);
        StorageDead(_807);
        StorageDead(_805);
        StorageDead(_802);
        StorageDead(_801);
        StorageDead(_799);
        StorageDead(_797);
        StorageDead(_792);
        StorageDead(_790);
        StorageDead(_786);
        StorageDead(_783);
        StorageDead(_782);
        goto -> bb540;
    }

    bb353: {
        StorageDead(_827);
        StorageLive(_828);
        StorageLive(_829);
        StorageLive(_830);
        StorageLive(_831);
        _831 = &(*_5);
        StorageLive(_832);
        StorageLive(_833);
        _833 = &_64;
        _832 = &(*_833);
        _830 = SpotMarketMap::<'_>::get_ref(move _831, move _832) -> [return: bb355, unwind: bb573];
    }

    bb354: {
        StorageDead(_827);
        _825 = const ();
        goto -> bb392;
    }

    bb355: {
        StorageDead(_832);
        StorageDead(_831);
        _829 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _830) -> [return: bb356, unwind: bb573];
    }

    bb356: {
        StorageDead(_830);
        _834 = discriminant(_829);
        switchInt(move _834) -> [0: bb357, 1: bb358, otherwise: bb7];
    }

    bb357: {
        StorageLive(_838);
        _838 = move ((_829 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _828 = move _838;
        StorageDead(_838);
        _1193 = discriminant(_829);
        StorageDead(_833);
        StorageDead(_829);
        StorageLive(_839);
        StorageLive(_840);
        StorageLive(_841);
        StorageLive(_842);
        _842 = _781;
        StorageLive(_843);
        _843 = _780;
        StorageLive(_844);
        StorageLive(_845);
        StorageLive(_846);
        StorageLive(_847);
        _847 = &_828;
        _846 = <Ref<'_, SpotMarket> as Deref>::deref(move _847) -> [return: bb360, unwind: bb567];
    }

    bb358: {
        StorageLive(_835);
        _835 = ((_829 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_837);
        _837 = _835;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _837) -> [return: bb359, unwind: bb601];
    }

    bb359: {
        StorageDead(_837);
        StorageDead(_835);
        _1191 = discriminant(_829);
        StorageDead(_833);
        StorageDead(_829);
        goto -> bb528;
    }

    bb360: {
        _845 = (*_846);
        StorageDead(_847);
        _844 = SpotMarket::get_precision(move _845) -> [return: bb361, unwind: bb567];
    }

    bb361: {
        StorageDead(_845);
        _841 = math::orders::calculate_fill_price(move _842, move _843, move _844) -> [return: bb362, unwind: bb567];
    }

    bb362: {
        StorageDead(_844);
        StorageDead(_843);
        StorageDead(_842);
        _840 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _841) -> [return: bb363, unwind: bb567];
    }

    bb363: {
        StorageDead(_841);
        _848 = discriminant(_840);
        switchInt(move _848) -> [0: bb364, 1: bb365, otherwise: bb7];
    }

    bb364: {
        StorageLive(_852);
        _852 = ((_840 as Continue).0: u64);
        _839 = _852;
        StorageDead(_852);
        StorageDead(_846);
        StorageDead(_840);
        StorageLive(_853);
        StorageLive(_854);
        StorageLive(_855);
        StorageLive(_856);
        StorageLive(_857);
        _857 = &mut (*_7);
        StorageLive(_858);
        StorageLive(_859);
        StorageLive(_860);
        StorageLive(_861);
        StorageLive(_862);
        StorageLive(_863);
        _863 = &_828;
        _862 = <Ref<'_, SpotMarket> as Deref>::deref(move _863) -> [return: bb367, unwind: bb567];
    }

    bb365: {
        StorageLive(_849);
        _849 = ((_840 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_851);
        _851 = _849;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _851) -> [return: bb366, unwind: bb567];
    }

    bb366: {
        StorageDead(_851);
        StorageDead(_849);
        StorageDead(_846);
        StorageDead(_840);
        goto -> bb527;
    }

    bb367: {
        _861 = &(*_862);
        StorageDead(_863);
        _860 = SpotMarket::oracle_id(move _861) -> [return: bb368, unwind: bb567];
    }

    bb368: {
        StorageDead(_861);
        _859 = &_860;
        _858 = &(*_859);
        _856 = OracleMap::<'_>::get_price_data(move _857, move _858) -> [return: bb369, unwind: bb567];
    }

    bb369: {
        StorageDead(_858);
        StorageDead(_857);
        _855 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _856) -> [return: bb370, unwind: bb567];
    }

    bb370: {
        StorageDead(_856);
        _864 = discriminant(_855);
        switchInt(move _864) -> [0: bb371, 1: bb372, otherwise: bb7];
    }

    bb371: {
        StorageLive(_868);
        _868 = ((_855 as Continue).0: &state::oracle::OraclePriceData);
        _854 = _868;
        StorageDead(_868);
        _853 = ((*_854).0: i64);
        StorageDead(_862);
        StorageDead(_860);
        StorageDead(_859);
        StorageDead(_855);
        StorageDead(_854);
        StorageLive(_869);
        StorageLive(_870);
        StorageLive(_871);
        _871 = &_828;
        _870 = <Ref<'_, SpotMarket> as Deref>::deref(move _871) -> [return: bb374, unwind: bb567];
    }

    bb372: {
        StorageLive(_865);
        _865 = ((_855 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_867);
        _867 = _865;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _867) -> [return: bb373, unwind: bb567];
    }

    bb373: {
        StorageDead(_867);
        StorageDead(_865);
        StorageDead(_862);
        StorageDead(_860);
        StorageDead(_859);
        StorageDead(_855);
        StorageDead(_854);
        goto -> bb526;
    }

    bb374: {
        StorageDead(_871);
        _869 = (((*_870).5: state::oracle::HistoricalOracleData).4: i64);
        StorageDead(_870);
        StorageLive(_872);
        StorageLive(_873);
        StorageLive(_874);
        StorageLive(_875);
        _875 = _839;
        StorageLive(_876);
        _876 = _853;
        StorageLive(_877);
        _877 = _869;
        StorageLive(_878);
        StorageLive(_879);
        StorageLive(_880);
        StorageLive(_881);
        StorageLive(_882);
        StorageLive(_883);
        _883 = &_828;
        _882 = <Ref<'_, SpotMarket> as Deref>::deref(move _883) -> [return: bb375, unwind: bb567];
    }

    bb375: {
        _881 = &(*_882);
        StorageDead(_883);
        StorageLive(_884);
        StorageLive(_885);
        _1138 = const _;
        _885 = &(*_1138);
        _884 = &(*_885);
        _880 = SpotMarket::get_margin_ratio(move _881, move _884) -> [return: bb376, unwind: bb567];
    }

    bb376: {
        StorageDead(_884);
        StorageDead(_881);
        _879 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _880) -> [return: bb377, unwind: bb567];
    }

    bb377: {
        StorageDead(_880);
        _887 = discriminant(_879);
        switchInt(move _887) -> [0: bb378, 1: bb379, otherwise: bb7];
    }

    bb378: {
        StorageLive(_891);
        _891 = ((_879 as Continue).0: u32);
        _878 = _891;
        StorageDead(_891);
        StorageLive(_892);
        StorageLive(_893);
        _893 = &((*_2).7: state::state::OracleGuardRails);
        _892 = state::state::OracleGuardRails::max_oracle_twap_5min_percent_divergence(move _893) -> [return: bb381, unwind: bb567];
    }

    bb379: {
        StorageLive(_888);
        _888 = ((_879 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_890);
        _890 = _888;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _890) -> [return: bb380, unwind: bb567];
    }

    bb380: {
        StorageDead(_890);
        StorageDead(_888);
        StorageDead(_878);
        StorageDead(_877);
        StorageDead(_876);
        StorageDead(_875);
        StorageDead(_874);
        goto -> bb525;
    }

    bb381: {
        StorageDead(_893);
        StorageLive(_894);
        StorageLive(_895);
        StorageLive(_896);
        _896 = &(*_14);
        _895 = <dyn SpotFulfillmentParams as SpotFulfillmentParams>::is_external(move _896) -> [return: bb382, unwind: bb567];
    }

    bb382: {
        switchInt(move _895) -> [0: bb384, otherwise: bb383];
    }

    bb383: {
        StorageDead(_896);
        StorageLive(_897);
        _897 = _66;
        _894 = Option::<controller::position::PositionDirection>::Some(move _897);
        StorageDead(_897);
        goto -> bb385;
    }

    bb384: {
        StorageDead(_896);
        _894 = Option::<controller::position::PositionDirection>::None;
        goto -> bb385;
    }

    bb385: {
        StorageDead(_895);
        _874 = math::orders::validate_fill_price_within_price_bands(move _875, move _876, move _877, move _878, move _892, const false, move _894) -> [return: bb386, unwind: bb567];
    }

    bb386: {
        StorageDead(_894);
        StorageDead(_892);
        StorageDead(_878);
        StorageDead(_877);
        StorageDead(_876);
        StorageDead(_875);
        _873 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _874) -> [return: bb387, unwind: bb567];
    }

    bb387: {
        StorageDead(_874);
        _898 = discriminant(_873);
        switchInt(move _898) -> [0: bb388, 1: bb389, otherwise: bb7];
    }

    bb388: {
        StorageLive(_902);
        _902 = ((_873 as Continue).0: ());
        _872 = _902;
        StorageDead(_902);
        StorageDead(_885);
        StorageDead(_882);
        StorageDead(_879);
        StorageDead(_873);
        StorageDead(_872);
        _825 = const ();
        StorageDead(_869);
        StorageDead(_853);
        StorageDead(_839);
        drop(_828) -> [return: bb391, unwind: bb573];
    }

    bb389: {
        StorageLive(_899);
        _899 = ((_873 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_901);
        _901 = _899;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _901) -> [return: bb390, unwind: bb567];
    }

    bb390: {
        StorageDead(_901);
        StorageDead(_899);
        goto -> bb525;
    }

    bb391: {
        StorageDead(_828);
        goto -> bb392;
    }

    bb392: {
        StorageDead(_826);
        StorageDead(_825);
        StorageLive(_903);
        StorageLive(_904);
        StorageLive(_905);
        StorageLive(_906);
        _906 = &(*_21);
        _905 = <RefMut<'_, User> as Deref>::deref(move _906) -> [return: bb393, unwind: bb573];
    }

    bb393: {
        StorageDead(_906);
        StorageLive(_907);
        _907 = _45;
        _908 = Len(((*_905).5: [state::user::Order; 32]));
        _909 = Lt(_907, _908);
        assert(move _909, "index out of bounds: the length is {} but the index is {}", move _908, _907) -> [success: bb394, unwind: bb573];
    }

    bb394: {
        _904 = &(((*_905).5: [state::user::Order; 32])[_907].12: state::user::OrderStatus);
        StorageLive(_910);
        _1137 = const _;
        _910 = &(*_1137);
        _903 = <OrderStatus as PartialEq>::eq(move _904, move _910) -> [return: bb395, unwind: bb573];
    }

    bb395: {
        StorageDead(_910);
        StorageDead(_904);
        StorageDead(_907);
        StorageDead(_905);
        StorageLive(_912);
        StorageLive(_913);
        StorageLive(_914);
        _914 = &(*_21);
        _913 = <RefMut<'_, User> as Deref>::deref(move _914) -> [return: bb396, unwind: bb573];
    }

    bb396: {
        StorageDead(_914);
        StorageLive(_915);
        _915 = _45;
        _916 = Len(((*_913).5: [state::user::Order; 32]));
        _917 = Lt(_915, _916);
        assert(move _917, "index out of bounds: the length is {} but the index is {}", move _916, _915) -> [success: bb397, unwind: bb573];
    }

    bb397: {
        _912 = (((*_913).5: [state::user::Order; 32])[_915].18: bool);
        StorageDead(_915);
        StorageDead(_913);
        StorageLive(_918);
        StorageLive(_919);
        _919 = _903;
        switchInt(move _919) -> [0: bb435, otherwise: bb398];
    }

    bb398: {
        StorageLive(_920);
        _920 = _912;
        switchInt(move _920) -> [0: bb435, otherwise: bb399];
    }

    bb399: {
        StorageLive(_921);
        StorageLive(_922);
        StorageLive(_923);
        _923 = &(*_21);
        _922 = <RefMut<'_, User> as Deref>::deref(move _923) -> [return: bb400, unwind: bb573];
    }

    bb400: {
        StorageDead(_923);
        StorageLive(_924);
        _924 = _45;
        _925 = Len(((*_922).5: [state::user::Order; 32]));
        _926 = Lt(_924, _925);
        assert(move _926, "index out of bounds: the length is {} but the index is {}", move _925, _924) -> [success: bb401, unwind: bb573];
    }

    bb401: {
        _921 = (((*_922).5: [state::user::Order; 32])[_924].11: u16);
        StorageDead(_924);
        StorageDead(_922);
        StorageLive(_927);
        StorageLive(_928);
        StorageLive(_929);
        StorageLive(_930);
        StorageLive(_931);
        StorageLive(_932);
        _932 = &(*_21);
        _931 = <RefMut<'_, User> as Deref>::deref(move _932) -> [return: bb402, unwind: bb573];
    }

    bb402: {
        _930 = &(*_931);
        StorageDead(_932);
        StorageLive(_933);
        _933 = _921;
        _929 = User::get_spot_position_index(move _930, move _933) -> [return: bb403, unwind: bb573];
    }

    bb403: {
        StorageDead(_933);
        StorageDead(_930);
        _928 = <std::result::Result<usize, error::ErrorCode> as Try>::branch(move _929) -> [return: bb404, unwind: bb573];
    }

    bb404: {
        StorageDead(_929);
        _934 = discriminant(_928);
        switchInt(move _934) -> [0: bb405, 1: bb406, otherwise: bb7];
    }

    bb405: {
        StorageLive(_938);
        _938 = ((_928 as Continue).0: usize);
        _927 = _938;
        StorageDead(_938);
        StorageDead(_931);
        StorageDead(_928);
        StorageLive(_939);
        StorageLive(_940);
        StorageLive(_941);
        StorageLive(_942);
        _942 = &(*_5);
        StorageLive(_943);
        StorageLive(_944);
        _944 = &_921;
        _943 = &(*_944);
        _941 = SpotMarketMap::<'_>::get_ref(move _942, move _943) -> [return: bb408, unwind: bb573];
    }

    bb406: {
        StorageLive(_935);
        _935 = ((_928 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_937);
        _937 = _935;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _937) -> [return: bb407, unwind: bb573];
    }

    bb407: {
        StorageDead(_937);
        StorageDead(_935);
        StorageDead(_931);
        StorageDead(_928);
        goto -> bb522;
    }

    bb408: {
        StorageDead(_943);
        StorageDead(_942);
        _940 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _941) -> [return: bb409, unwind: bb573];
    }

    bb409: {
        StorageDead(_941);
        _945 = discriminant(_940);
        switchInt(move _945) -> [0: bb410, 1: bb411, otherwise: bb7];
    }

    bb410: {
        StorageLive(_949);
        _949 = move ((_940 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _939 = move _949;
        StorageDead(_949);
        _1197 = discriminant(_940);
        StorageDead(_944);
        StorageDead(_940);
        StorageLive(_950);
        StorageLive(_951);
        StorageLive(_952);
        StorageLive(_953);
        StorageLive(_954);
        StorageLive(_955);
        _955 = &(*_21);
        _954 = <RefMut<'_, User> as Deref>::deref(move _955) -> [return: bb413, unwind: bb566];
    }

    bb411: {
        StorageLive(_946);
        _946 = ((_940 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_948);
        _948 = _946;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _948) -> [return: bb412, unwind: bb600];
    }

    bb412: {
        StorageDead(_948);
        StorageDead(_946);
        _1195 = discriminant(_940);
        StorageDead(_944);
        StorageDead(_940);
        goto -> bb521;
    }

    bb413: {
        StorageDead(_955);
        StorageLive(_956);
        _956 = _927;
        _957 = Len(((*_954).3: [state::user::SpotPosition; 8]));
        _958 = Lt(_956, _957);
        assert(move _958, "index out of bounds: the length is {} but the index is {}", move _957, _956) -> [success: bb414, unwind: bb566];
    }

    bb414: {
        _953 = &((*_954).3: [state::user::SpotPosition; 8])[_956];
        StorageLive(_959);
        StorageLive(_960);
        StorageLive(_961);
        StorageLive(_962);
        _962 = &_939;
        _961 = &(*_962);
        _960 = <Ref<'_, SpotMarket> as Deref>::deref(move _961) -> [return: bb415, unwind: bb566];
    }

    bb415: {
        _959 = &(*_960);
        StorageDead(_961);
        _952 = SpotPosition::get_signed_token_amount(move _953, move _959) -> [return: bb416, unwind: bb566];
    }

    bb416: {
        StorageDead(_959);
        StorageDead(_953);
        _951 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _952) -> [return: bb417, unwind: bb566];
    }

    bb417: {
        StorageDead(_952);
        _963 = discriminant(_951);
        switchInt(move _963) -> [0: bb418, 1: bb419, otherwise: bb7];
    }

    bb418: {
        StorageLive(_967);
        _967 = ((_951 as Continue).0: i128);
        _950 = _967;
        StorageDead(_967);
        StorageDead(_962);
        StorageDead(_960);
        StorageDead(_956);
        StorageDead(_954);
        StorageDead(_951);
        StorageLive(_968);
        StorageLive(_969);
        StorageLive(_970);
        StorageLive(_971);
        StorageLive(_972);
        StorageLive(_973);
        _973 = &(*_21);
        _972 = <RefMut<'_, User> as Deref>::deref(move _973) -> [return: bb421, unwind: bb566];
    }

    bb419: {
        StorageLive(_964);
        _964 = ((_951 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_966);
        _966 = _964;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _966) -> [return: bb420, unwind: bb566];
    }

    bb420: {
        StorageDead(_966);
        StorageDead(_964);
        StorageDead(_962);
        StorageDead(_960);
        StorageDead(_956);
        StorageDead(_954);
        StorageDead(_951);
        StorageDead(_950);
        drop(_939) -> [return: bb521, unwind: bb573];
    }

    bb421: {
        StorageDead(_973);
        StorageLive(_974);
        _974 = _45;
        _975 = Len(((*_972).5: [state::user::Order; 32]));
        _976 = Lt(_974, _975);
        assert(move _976, "index out of bounds: the length is {} but the index is {}", move _975, _974) -> [success: bb422, unwind: bb566];
    }

    bb422: {
        _971 = &((*_972).5: [state::user::Order; 32])[_974];
        _970 = &(*_971);
        StorageLive(_977);
        StorageLive(_978);
        StorageLive(_979);
        StorageLive(_980);
        _980 = _950;
        _979 = <i128 as Cast>::cast::<i64>(move _980) -> [return: bb423, unwind: bb566];
    }

    bb423: {
        StorageDead(_980);
        _978 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _979) -> [return: bb424, unwind: bb566];
    }

    bb424: {
        StorageDead(_979);
        _981 = discriminant(_978);
        switchInt(move _981) -> [0: bb425, 1: bb426, otherwise: bb7];
    }

    bb425: {
        StorageLive(_985);
        _985 = ((_978 as Continue).0: i64);
        _977 = _985;
        StorageDead(_985);
        StorageLive(_986);
        StorageLive(_987);
        StorageLive(_988);
        _988 = &_939;
        _987 = <Ref<'_, SpotMarket> as Deref>::deref(move _988) -> [return: bb428, unwind: bb566];
    }

    bb426: {
        StorageLive(_982);
        _982 = ((_978 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_984);
        _984 = _982;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _984) -> [return: bb427, unwind: bb566];
    }

    bb427: {
        StorageDead(_984);
        StorageDead(_982);
        StorageDead(_977);
        StorageDead(_970);
        StorageDead(_969);
        StorageDead(_950);
        drop(_939) -> [return: bb519, unwind: bb573];
    }

    bb428: {
        StorageDead(_988);
        _986 = ((*_987).25: u64);
        _969 = math::orders::should_cancel_reduce_only_order(move _970, move _977, move _986) -> [return: bb429, unwind: bb566];
    }

    bb429: {
        StorageDead(_986);
        StorageDead(_977);
        StorageDead(_970);
        _968 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _969) -> [return: bb430, unwind: bb566];
    }

    bb430: {
        StorageDead(_969);
        _989 = discriminant(_968);
        switchInt(move _989) -> [0: bb431, 1: bb432, otherwise: bb7];
    }

    bb431: {
        StorageLive(_993);
        _993 = ((_968 as Continue).0: bool);
        _918 = _993;
        StorageDead(_993);
        StorageDead(_950);
        drop(_939) -> [return: bb434, unwind: bb573];
    }

    bb432: {
        StorageLive(_990);
        _990 = ((_968 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_992);
        _992 = _990;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _992) -> [return: bb433, unwind: bb566];
    }

    bb433: {
        StorageDead(_992);
        StorageDead(_990);
        StorageDead(_950);
        drop(_939) -> [return: bb518, unwind: bb573];
    }

    bb434: {
        StorageDead(_939);
        StorageDead(_927);
        StorageDead(_921);
        StorageDead(_987);
        StorageDead(_978);
        StorageDead(_974);
        StorageDead(_972);
        StorageDead(_971);
        StorageDead(_968);
        goto -> bb436;
    }

    bb435: {
        _918 = const false;
        goto -> bb436;
    }

    bb436: {
        StorageDead(_920);
        StorageDead(_919);
        StorageLive(_994);
        StorageLive(_995);
        _995 = _903;
        switchInt(move _995) -> [0: bb465, otherwise: bb437];
    }

    bb437: {
        StorageLive(_996);
        StorageLive(_997);
        StorageLive(_998);
        _998 = &(*_21);
        _997 = <RefMut<'_, User> as Deref>::deref(move _998) -> [return: bb438, unwind: bb573];
    }

    bb438: {
        StorageDead(_998);
        StorageLive(_999);
        _999 = _45;
        _1000 = Len(((*_997).5: [state::user::Order; 32]));
        _1001 = Lt(_999, _1000);
        assert(move _1001, "index out of bounds: the length is {} but the index is {}", move _1000, _999) -> [success: bb439, unwind: bb573];
    }

    bb439: {
        _996 = (((*_997).5: [state::user::Order; 32])[_999].11: u16);
        StorageDead(_999);
        StorageDead(_997);
        StorageLive(_1002);
        StorageLive(_1003);
        StorageLive(_1004);
        StorageLive(_1005);
        _1005 = &(*_5);
        StorageLive(_1006);
        StorageLive(_1007);
        _1007 = &_996;
        _1006 = &(*_1007);
        _1004 = SpotMarketMap::<'_>::get_ref(move _1005, move _1006) -> [return: bb440, unwind: bb573];
    }

    bb440: {
        StorageDead(_1006);
        StorageDead(_1005);
        _1003 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _1004) -> [return: bb441, unwind: bb573];
    }

    bb441: {
        StorageDead(_1004);
        _1008 = discriminant(_1003);
        switchInt(move _1008) -> [0: bb442, 1: bb443, otherwise: bb7];
    }

    bb442: {
        StorageLive(_1012);
        _1012 = move ((_1003 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _1002 = move _1012;
        StorageDead(_1012);
        _1201 = discriminant(_1003);
        StorageDead(_1007);
        StorageDead(_1003);
        StorageLive(_1013);
        StorageLive(_1014);
        StorageLive(_1015);
        StorageLive(_1016);
        _1016 = &(*_5);
        _1015 = SpotMarketMap::<'_>::get_quote_spot_market(move _1016) -> [return: bb445, unwind: bb565];
    }

    bb443: {
        StorageLive(_1009);
        _1009 = ((_1003 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1011);
        _1011 = _1009;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1011) -> [return: bb444, unwind: bb599];
    }

    bb444: {
        StorageDead(_1011);
        StorageDead(_1009);
        _1199 = discriminant(_1003);
        StorageDead(_1007);
        StorageDead(_1003);
        goto -> bb516;
    }

    bb445: {
        StorageDead(_1016);
        _1014 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _1015) -> [return: bb446, unwind: bb565];
    }

    bb446: {
        StorageDead(_1015);
        _1017 = discriminant(_1014);
        switchInt(move _1017) -> [0: bb447, 1: bb448, otherwise: bb7];
    }

    bb447: {
        StorageLive(_1021);
        _1021 = move ((_1014 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _1013 = move _1021;
        StorageDead(_1021);
        _1205 = discriminant(_1014);
        StorageDead(_1014);
        StorageLive(_1024);
        StorageLive(_1025);
        StorageLive(_1026);
        StorageLive(_1027);
        StorageLive(_1028);
        StorageLive(_1029);
        _1029 = &(*_21);
        _1028 = <RefMut<'_, User> as Deref>::deref(move _1029) -> [return: bb450, unwind: bb564];
    }

    bb448: {
        StorageLive(_1018);
        _1018 = ((_1014 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1020);
        _1020 = _1018;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1020) -> [return: bb449, unwind: bb598];
    }

    bb449: {
        StorageDead(_1020);
        StorageDead(_1018);
        _1203 = discriminant(_1014);
        StorageDead(_1014);
        goto -> bb515;
    }

    bb450: {
        _1027 = &(*_1028);
        StorageDead(_1029);
        StorageLive(_1030);
        _1030 = _45;
        StorageLive(_1031);
        StorageLive(_1032);
        StorageLive(_1033);
        StorageLive(_1034);
        _1034 = &_1002;
        _1033 = &(*_1034);
        _1032 = <Ref<'_, SpotMarket> as Deref>::deref(move _1033) -> [return: bb451, unwind: bb564];
    }

    bb451: {
        _1031 = &(*_1032);
        StorageDead(_1033);
        StorageLive(_1035);
        StorageLive(_1036);
        StorageLive(_1037);
        StorageLive(_1038);
        _1038 = &_1013;
        _1037 = &(*_1038);
        _1036 = <Ref<'_, SpotMarket> as Deref>::deref(move _1037) -> [return: bb452, unwind: bb564];
    }

    bb452: {
        _1035 = &(*_1036);
        StorageDead(_1037);
        _1026 = math::orders::get_max_fill_amounts(move _1027, move _1030, move _1031, move _1035, const false) -> [return: bb453, unwind: bb564];
    }

    bb453: {
        StorageDead(_1035);
        StorageDead(_1031);
        StorageDead(_1030);
        StorageDead(_1027);
        _1025 = <std::result::Result<(Option<u64>, Option<u64>), error::ErrorCode> as Try>::branch(move _1026) -> [return: bb454, unwind: bb564];
    }

    bb454: {
        StorageDead(_1026);
        _1039 = discriminant(_1025);
        switchInt(move _1039) -> [0: bb455, 1: bb456, otherwise: bb7];
    }

    bb455: {
        StorageLive(_1043);
        _1043 = ((_1025 as Continue).0: (std::option::Option<u64>, std::option::Option<u64>));
        _1024 = _1043;
        StorageDead(_1043);
        StorageLive(_1022);
        _1022 = (_1024.0: std::option::Option<u64>);
        StorageLive(_1023);
        _1023 = (_1024.1: std::option::Option<u64>);
        StorageDead(_1038);
        StorageDead(_1036);
        StorageDead(_1034);
        StorageDead(_1032);
        StorageDead(_1028);
        StorageDead(_1025);
        StorageDead(_1024);
        StorageLive(_1044);
        StorageLive(_1045);
        _1045 = &_1022;
        StorageLive(_1046);
        _1136 = const _;
        _1046 = &(*_1136);
        _1044 = <Option<u64> as PartialEq>::eq(move _1045, move _1046) -> [return: bb458, unwind: bb564];
    }

    bb456: {
        StorageLive(_1040);
        _1040 = ((_1025 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1042);
        _1042 = _1040;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1042) -> [return: bb457, unwind: bb564];
    }

    bb457: {
        StorageDead(_1042);
        StorageDead(_1040);
        StorageDead(_1038);
        StorageDead(_1036);
        StorageDead(_1034);
        StorageDead(_1032);
        StorageDead(_1028);
        StorageDead(_1025);
        StorageDead(_1024);
        drop(_1013) -> [return: bb515, unwind: bb565];
    }

    bb458: {
        switchInt(move _1044) -> [0: bb460, otherwise: bb459];
    }

    bb459: {
        StorageDead(_1046);
        StorageDead(_1045);
        _994 = const true;
        goto -> bb462;
    }

    bb460: {
        StorageDead(_1046);
        StorageDead(_1045);
        StorageLive(_1048);
        _1048 = &_1023;
        StorageLive(_1049);
        _1135 = const _;
        _1049 = &(*_1135);
        _994 = <Option<u64> as PartialEq>::eq(move _1048, move _1049) -> [return: bb461, unwind: bb564];
    }

    bb461: {
        StorageDead(_1049);
        StorageDead(_1048);
        goto -> bb462;
    }

    bb462: {
        StorageDead(_1044);
        StorageDead(_1023);
        StorageDead(_1022);
        drop(_1013) -> [return: bb463, unwind: bb565];
    }

    bb463: {
        StorageDead(_1013);
        drop(_1002) -> [return: bb464, unwind: bb573];
    }

    bb464: {
        StorageDead(_1002);
        StorageDead(_996);
        goto -> bb466;
    }

    bb465: {
        _994 = const false;
        goto -> bb466;
    }

    bb466: {
        StorageDead(_995);
        StorageLive(_1051);
        StorageLive(_1052);
        _1052 = _918;
        switchInt(move _1052) -> [0: bb467, otherwise: bb468];
    }

    bb467: {
        StorageLive(_1053);
        _1053 = _994;
        switchInt(move _1053) -> [0: bb492, otherwise: bb468];
    }

    bb468: {
        StorageLive(_1054);
        StorageLive(_1055);
        StorageLive(_1056);
        StorageLive(_1057);
        StorageLive(_1058);
        _1058 = &(*_5);
        _1057 = SpotMarketMap::<'_>::get_quote_spot_market_mut(move _1058) -> [return: bb469, unwind: bb573];
    }

    bb469: {
        StorageDead(_1058);
        _1056 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _1057) -> [return: bb470, unwind: bb573];
    }

    bb470: {
        StorageDead(_1057);
        _1059 = discriminant(_1056);
        switchInt(move _1059) -> [0: bb471, 1: bb472, otherwise: bb7];
    }

    bb471: {
        StorageLive(_1063);
        _1063 = move ((_1056 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _1055 = move _1063;
        StorageDead(_1063);
        _1209 = discriminant(_1056);
        StorageDead(_1056);
        StorageLive(_1064);
        StorageLive(_1065);
        StorageLive(_1066);
        StorageLive(_1067);
        StorageLive(_1068);
        _1068 = &mut (*_21);
        _1067 = <RefMut<'_, User> as DerefMut>::deref_mut(move _1068) -> [return: bb474, unwind: bb563];
    }

    bb472: {
        StorageLive(_1060);
        _1060 = ((_1056 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1062);
        _1062 = _1060;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1062) -> [return: bb473, unwind: bb597];
    }

    bb473: {
        StorageDead(_1062);
        StorageDead(_1060);
        _1207 = discriminant(_1056);
        StorageDead(_1056);
        StorageDead(_1055);
        goto -> bb513;
    }

    bb474: {
        _1066 = &mut (*_1067);
        StorageDead(_1068);
        StorageLive(_1069);
        StorageLive(_1070);
        _1070 = &mut _292;
        _1069 = Option::<RefMut<'_, User>>::as_deref_mut(move _1070) -> [return: bb475, unwind: bb563];
    }

    bb475: {
        StorageDead(_1070);
        StorageLive(_1071);
        StorageLive(_1072);
        StorageLive(_1073);
        StorageLive(_1074);
        _1074 = &mut _1055;
        _1073 = &mut (*_1074);
        _1072 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _1073) -> [return: bb476, unwind: bb563];
    }

    bb476: {
        _1071 = &mut (*_1072);
        StorageDead(_1073);
        StorageLive(_1075);
        _1075 = (((*_2).6: state::state::FeeStructure).3: u64);
        StorageLive(_1076);
        _1076 = _16;
        _1065 = pay_keeper_flat_reward_for_spot(move _1066, move _1069, move _1071, move _1075, move _1076) -> [return: bb477, unwind: bb563];
    }

    bb477: {
        StorageDead(_1076);
        StorageDead(_1075);
        StorageDead(_1071);
        StorageDead(_1069);
        StorageDead(_1066);
        _1064 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _1065) -> [return: bb478, unwind: bb563];
    }

    bb478: {
        StorageDead(_1065);
        _1077 = discriminant(_1064);
        switchInt(move _1077) -> [0: bb479, 1: bb480, otherwise: bb7];
    }

    bb479: {
        StorageLive(_1081);
        _1081 = ((_1064 as Continue).0: u64);
        _1054 = _1081;
        StorageDead(_1081);
        drop(_1055) -> [return: bb482, unwind: bb573];
    }

    bb480: {
        StorageLive(_1078);
        _1078 = ((_1064 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1080);
        _1080 = _1078;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1080) -> [return: bb481, unwind: bb563];
    }

    bb481: {
        StorageDead(_1080);
        StorageDead(_1078);
        drop(_1055) -> [return: bb512, unwind: bb573];
    }

    bb482: {
        StorageDead(_1055);
        StorageDead(_1074);
        StorageDead(_1072);
        StorageDead(_1067);
        StorageDead(_1064);
        StorageLive(_1082);
        StorageLive(_1083);
        _1083 = _918;
        switchInt(move _1083) -> [0: bb484, otherwise: bb483];
    }

    bb483: {
        _1082 = OrderActionExplanation::ReduceOnlyOrderIncreasedPosition;
        goto -> bb485;
    }

    bb484: {
        _1082 = OrderActionExplanation::NoBorrowLiquidity;
        goto -> bb485;
    }

    bb485: {
        StorageDead(_1083);
        StorageLive(_1084);
        StorageLive(_1085);
        StorageLive(_1086);
        _1086 = _45;
        StorageLive(_1087);
        StorageLive(_1088);
        StorageLive(_1089);
        _1089 = &mut (*_21);
        _1088 = <RefMut<'_, User> as DerefMut>::deref_mut(move _1089) -> [return: bb486, unwind: bb573];
    }

    bb486: {
        _1087 = &mut (*_1088);
        StorageDead(_1089);
        StorageLive(_1090);
        StorageLive(_1091);
        _1091 = &_19;
        _1090 = &(*_1091);
        StorageLive(_1092);
        _1092 = &(*_6);
        StorageLive(_1093);
        _1093 = &(*_5);
        StorageLive(_1094);
        _1094 = &mut (*_7);
        StorageLive(_1095);
        _1095 = _15;
        StorageLive(_1096);
        _1096 = _16;
        StorageLive(_1097);
        _1097 = _1082;
        StorageLive(_1098);
        StorageLive(_1099);
        StorageLive(_1100);
        _1100 = &_17;
        _1099 = &(*_1100);
        _1098 = Option::<&anchor_lang::prelude::Pubkey>::Some(move _1099);
        StorageDead(_1099);
        StorageLive(_1101);
        _1101 = _1054;
        _1085 = controller::orders::cancel_order(move _1086, move _1087, move _1090, move _1092, move _1093, move _1094, move _1095, move _1096, move _1097, move _1098, move _1101, const false) -> [return: bb487, unwind: bb573];
    }

    bb487: {
        StorageDead(_1101);
        StorageDead(_1098);
        StorageDead(_1097);
        StorageDead(_1096);
        StorageDead(_1095);
        StorageDead(_1094);
        StorageDead(_1093);
        StorageDead(_1092);
        StorageDead(_1090);
        StorageDead(_1087);
        StorageDead(_1086);
        _1084 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1085) -> [return: bb488, unwind: bb573];
    }

    bb488: {
        StorageDead(_1085);
        _1102 = discriminant(_1084);
        switchInt(move _1102) -> [0: bb489, 1: bb490, otherwise: bb7];
    }

    bb489: {
        StorageLive(_1106);
        _1106 = ((_1084 as Continue).0: ());
        _1051 = _1106;
        StorageDead(_1106);
        StorageDead(_1082);
        StorageDead(_1054);
        StorageDead(_1100);
        StorageDead(_1091);
        StorageDead(_1088);
        StorageDead(_1084);
        goto -> bb493;
    }

    bb490: {
        StorageLive(_1103);
        _1103 = ((_1084 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1105);
        _1105 = _1103;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1105) -> [return: bb491, unwind: bb573];
    }

    bb491: {
        StorageDead(_1105);
        StorageDead(_1103);
        StorageDead(_1082);
        StorageDead(_1054);
        StorageDead(_1100);
        StorageDead(_1091);
        StorageDead(_1088);
        StorageDead(_1084);
        goto -> bb514;
    }

    bb492: {
        _1051 = const ();
        goto -> bb493;
    }

    bb493: {
        StorageDead(_1053);
        StorageDead(_1052);
        StorageDead(_1051);
        StorageLive(_1107);
        StorageLive(_1108);
        StorageLive(_1109);
        StorageLive(_1110);
        StorageLive(_1111);
        StorageLive(_1112);
        StorageLive(_1113);
        StorageLive(_1114);
        StorageLive(_1115);
        StorageLive(_1116);
        _1116 = &(*_5);
        StorageLive(_1117);
        StorageLive(_1118);
        _1118 = &_64;
        _1117 = &(*_1118);
        _1115 = SpotMarketMap::<'_>::get_ref(move _1116, move _1117) -> [return: bb494, unwind: bb573];
    }

    bb494: {
        StorageDead(_1117);
        StorageDead(_1116);
        _1114 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _1115) -> [return: bb495, unwind: bb573];
    }

    bb495: {
        _1149 = const true;
        StorageDead(_1115);
        _1119 = discriminant(_1114);
        switchInt(move _1119) -> [0: bb496, 1: bb497, otherwise: bb7];
    }

    bb496: {
        StorageLive(_1123);
        _1123 = move ((_1114 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _1113 = move _1123;
        StorageDead(_1123);
        _1112 = &_1113;
        _1111 = <Ref<'_, SpotMarket> as Deref>::deref(move _1112) -> [return: bb499, unwind: bb562];
    }

    bb497: {
        StorageLive(_1120);
        _1120 = ((_1114 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1122);
        _1122 = _1120;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1122) -> [return: bb498, unwind: bb596];
    }

    bb498: {
        StorageDead(_1122);
        StorageDead(_1120);
        StorageDead(_1112);
        StorageDead(_1110);
        StorageDead(_1109);
        goto -> bb592;
    }

    bb499: {
        _1110 = &(*_1111);
        StorageDead(_1112);
        _1109 = SpotMarket::validate_max_token_deposits_and_borrows(move _1110, const false) -> [return: bb500, unwind: bb562];
    }

    bb500: {
        StorageDead(_1110);
        _1108 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1109) -> [return: bb501, unwind: bb562];
    }

    bb501: {
        StorageDead(_1109);
        _1124 = discriminant(_1108);
        switchInt(move _1124) -> [0: bb502, 1: bb503, otherwise: bb7];
    }

    bb502: {
        StorageLive(_1128);
        _1128 = ((_1108 as Continue).0: ());
        _1107 = _1128;
        StorageDead(_1128);
        drop(_1113) -> [return: bb591, unwind: bb596];
    }

    bb503: {
        StorageLive(_1125);
        _1125 = ((_1108 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1127);
        _1127 = _1125;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1127) -> [return: bb504, unwind: bb562];
    }

    bb504: {
        StorageDead(_1127);
        StorageDead(_1125);
        drop(_1113) -> [return: bb592, unwind: bb596];
    }

    bb505: {
        _1130 = &mut (*_1131);
        StorageDead(_1132);
        StorageLive(_1133);
        _1133 = _16;
        _1129 = User::update_last_active_slot(move _1130, move _1133) -> [return: bb506, unwind: bb573];
    }

    bb506: {
        StorageDead(_1133);
        StorageDead(_1130);
        StorageDead(_1131);
        StorageDead(_1129);
        StorageLive(_1134);
        _1134 = _780;
        _0 = std::result::Result::<u64, error::ErrorCode>::Ok(move _1134);
        StorageDead(_1134);
        StorageDead(_994);
        StorageDead(_918);
        StorageDead(_912);
        StorageDead(_903);
        StorageDead(_781);
        StorageDead(_780);
        StorageDead(_595);
        StorageDead(_582);
        StorageDead(_447);
        drop(_415) -> [return: bb507, unwind: bb575];
    }

    bb507: {
        StorageDead(_415);
        StorageDead(_388);
        drop(_293) -> [return: bb508, unwind: bb576];
    }

    bb508: {
        StorageDead(_293);
        drop(_292) -> [return: bb509, unwind: bb586];
    }

    bb509: {
        StorageDead(_292);
        StorageDead(_288);
        StorageDead(_285);
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_63);
        StorageDead(_45);
        drop(_34) -> [return: bb510, unwind: bb587];
    }

    bb510: {
        StorageDead(_34);
        StorageDead(_33);
        drop(_22) -> [return: bb511, unwind: bb588];
    }

    bb511: {
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb561;
    }

    bb512: {
        StorageDead(_1055);
        StorageDead(_1074);
        StorageDead(_1072);
        StorageDead(_1067);
        StorageDead(_1064);
        goto -> bb513;
    }

    bb513: {
        StorageDead(_1054);
        goto -> bb514;
    }

    bb514: {
        StorageDead(_1053);
        StorageDead(_1052);
        StorageDead(_1051);
        goto -> bb517;
    }

    bb515: {
        StorageDead(_1013);
        drop(_1002) -> [return: bb516, unwind: bb573];
    }

    bb516: {
        StorageDead(_1002);
        StorageDead(_996);
        StorageDead(_995);
        goto -> bb517;
    }

    bb517: {
        StorageDead(_994);
        goto -> bb524;
    }

    bb518: {
        StorageDead(_939);
        StorageDead(_927);
        StorageDead(_921);
        StorageDead(_987);
        goto -> bb520;
    }

    bb519: {
        StorageDead(_939);
        StorageDead(_927);
        StorageDead(_921);
        goto -> bb520;
    }

    bb520: {
        StorageDead(_978);
        StorageDead(_974);
        StorageDead(_972);
        StorageDead(_971);
        StorageDead(_968);
        goto -> bb523;
    }

    bb521: {
        StorageDead(_939);
        goto -> bb522;
    }

    bb522: {
        StorageDead(_927);
        StorageDead(_921);
        goto -> bb523;
    }

    bb523: {
        StorageDead(_920);
        StorageDead(_919);
        goto -> bb524;
    }

    bb524: {
        StorageDead(_918);
        StorageDead(_912);
        StorageDead(_903);
        goto -> bb529;
    }

    bb525: {
        StorageDead(_885);
        StorageDead(_882);
        StorageDead(_879);
        StorageDead(_873);
        StorageDead(_872);
        StorageDead(_869);
        goto -> bb526;
    }

    bb526: {
        StorageDead(_853);
        goto -> bb527;
    }

    bb527: {
        StorageDead(_839);
        drop(_828) -> [return: bb528, unwind: bb573];
    }

    bb528: {
        StorageDead(_828);
        StorageDead(_826);
        StorageDead(_825);
        goto -> bb529;
    }

    bb529: {
        StorageDead(_781);
        StorageDead(_780);
        goto -> bb540;
    }

    bb530: {
        StorageDead(_736);
        StorageDead(_734);
        StorageDead(_733);
        goto -> bb540;
    }

    bb531: {
        StorageDead(_707);
        goto -> bb533;
    }

    bb532: {
        StorageDead(_680);
        StorageDead(_699);
        StorageDead(_697);
        StorageDead(_692);
        StorageDead(_689);
        goto -> bb533;
    }

    bb533: {
        StorageDead(_679);
        StorageDead(_677);
        StorageDead(_676);
        StorageDead(_675);
        goto -> bb540;
    }

    bb534: {
        StorageDead(_620);
        StorageDead(_608);
        StorageDead(_602);
        StorageDead(_668);
        goto -> bb536;
    }

    bb535: {
        StorageDead(_620);
        StorageDead(_608);
        StorageDead(_602);
        goto -> bb536;
    }

    bb536: {
        StorageDead(_659);
        StorageDead(_655);
        StorageDead(_653);
        StorageDead(_652);
        StorageDead(_649);
        goto -> bb539;
    }

    bb537: {
        StorageDead(_620);
        goto -> bb538;
    }

    bb538: {
        StorageDead(_608);
        StorageDead(_602);
        goto -> bb539;
    }

    bb539: {
        StorageDead(_596);
        goto -> bb540;
    }

    bb540: {
        StorageDead(_595);
        goto -> bb541;
    }

    bb541: {
        StorageDead(_582);
        goto -> bb548;
    }

    bb542: {
        StorageDead(_556);
        StorageDead(_553);
        StorageDead(_549);
        goto -> bb543;
    }

    bb543: {
        StorageDead(_548);
        goto -> bb544;
    }

    bb544: {
        StorageDead(_499);
        drop(_488) -> [return: bb545, unwind: bb572];
    }

    bb545: {
        StorageDead(_488);
        goto -> bb546;
    }

    bb546: {
        StorageDead(_458);
        drop(_449) -> [return: bb547, unwind: bb573];
    }

    bb547: {
        StorageDead(_449);
        StorageDead(_448);
        goto -> bb548;
    }

    bb548: {
        StorageDead(_447);
        drop(_415) -> [return: bb549, unwind: bb575];
    }

    bb549: {
        StorageDead(_415);
        goto -> bb550;
    }

    bb550: {
        StorageDead(_388);
        drop(_293) -> [return: bb551, unwind: bb576];
    }

    bb551: {
        StorageDead(_293);
        drop(_292) -> [return: bb552, unwind: bb586];
    }

    bb552: {
        StorageDead(_292);
        goto -> bb555;
    }

    bb553: {
        StorageDead(_370);
        _1217 = discriminant(_374);
        StorageDead(_374);
        StorageDead(_363);
        goto -> bb595;
    }

    bb554: {
        _1148 = const false;
        StorageDead(_297);
        StorageDead(_296);
        StorageDead(_295);
        StorageDead(_294);
        goto -> bb555;
    }

    bb555: {
        StorageDead(_288);
        StorageDead(_285);
        goto -> bb557;
    }

    bb556: {
        StorageDead(_93);
        StorageDead(_92);
        goto -> bb557;
    }

    bb557: {
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_63);
        goto -> bb558;
    }

    bb558: {
        StorageDead(_45);
        drop(_34) -> [return: bb559, unwind: bb587];
    }

    bb559: {
        StorageDead(_34);
        StorageDead(_33);
        drop(_22) -> [return: bb560, unwind: bb588];
    }

    bb560: {
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb561;
    }

    bb561: {
        return;
    }

    bb562 (cleanup): {
        drop(_1113) -> [return: bb596, unwind terminate(cleanup)];
    }

    bb563 (cleanup): {
        drop(_1055) -> [return: bb573, unwind terminate(cleanup)];
    }

    bb564 (cleanup): {
        drop(_1013) -> [return: bb565, unwind terminate(cleanup)];
    }

    bb565 (cleanup): {
        drop(_1002) -> [return: bb573, unwind terminate(cleanup)];
    }

    bb566 (cleanup): {
        drop(_939) -> [return: bb573, unwind terminate(cleanup)];
    }

    bb567 (cleanup): {
        drop(_828) -> [return: bb573, unwind terminate(cleanup)];
    }

    bb568 (cleanup): {
        drop(_760) -> [return: bb573, unwind terminate(cleanup)];
    }

    bb569 (cleanup): {
        drop(_680) -> [return: bb573, unwind terminate(cleanup)];
    }

    bb570 (cleanup): {
        drop(_620) -> [return: bb573, unwind terminate(cleanup)];
    }

    bb571 (cleanup): {
        drop(_488) -> [return: bb572, unwind terminate(cleanup)];
    }

    bb572 (cleanup): {
        drop(_449) -> [return: bb573, unwind terminate(cleanup)];
    }

    bb573 (cleanup): {
        drop(_415) -> [return: bb575, unwind terminate(cleanup)];
    }

    bb574 (cleanup): {
        drop(_399) -> [return: bb607, unwind terminate(cleanup)];
    }

    bb575 (cleanup): {
        drop(_293) -> [return: bb576, unwind terminate(cleanup)];
    }

    bb576 (cleanup): {
        drop(_292) -> [return: bb586, unwind terminate(cleanup)];
    }

    bb577 (cleanup): {
        drop(_370) -> [return: bb608, unwind terminate(cleanup)];
    }

    bb578 (cleanup): {
        drop(_370) -> [return: bb610, unwind terminate(cleanup)];
    }

    bb579 (cleanup): {
        drop(_341) -> [return: bb610, unwind terminate(cleanup)];
    }

    bb580 (cleanup): {
        drop(_322) -> [return: bb610, unwind terminate(cleanup)];
    }

    bb581 (cleanup): {
        drop(_239) -> [return: bb586, unwind terminate(cleanup)];
    }

    bb582 (cleanup): {
        drop(_192) -> [return: bb586, unwind terminate(cleanup)];
    }

    bb583 (cleanup): {
        drop(_155) -> [return: bb586, unwind terminate(cleanup)];
    }

    bb584 (cleanup): {
        drop(_118) -> [return: bb585, unwind terminate(cleanup)];
    }

    bb585 (cleanup): {
        drop(_93) -> [return: bb586, unwind terminate(cleanup)];
    }

    bb586 (cleanup): {
        drop(_34) -> [return: bb587, unwind terminate(cleanup)];
    }

    bb587 (cleanup): {
        drop(_22) -> [return: bb588, unwind terminate(cleanup)];
    }

    bb588 (cleanup): {
        resume;
    }

    bb589: {
        drop(_297) -> [return: bb159, unwind: bb586];
    }

    bb590: {
        _1169 = discriminant(_400);
        StorageDead(_404);
        _1150 = const false;
        StorageDead(_400);
        StorageDead(_399);
        StorageDead(_397);
        StorageDead(_395);
        StorageDead(_394);
        StorageDead(_390);
        StorageDead(_389);
        StorageLive(_415);
        StorageLive(_416);
        StorageLive(_417);
        StorageLive(_418);
        _418 = &(*_6);
        StorageLive(_419);
        _419 = &(*_5);
        StorageLive(_420);
        _420 = &mut (*_7);
        StorageLive(_421);
        _421 = &(*_10);
        StorageLive(_422);
        StorageLive(_423);
        _423 = &_19;
        _422 = &(*_423);
        StorageLive(_424);
        StorageLive(_425);
        StorageLive(_426);
        StorageLive(_427);
        _427 = &(*_21);
        _426 = <RefMut<'_, User> as Deref>::deref(move _427) -> [return: bb174, unwind: bb575];
    }

    bb591: {
        _1211 = discriminant(_1114);
        StorageDead(_1118);
        _1149 = const false;
        StorageDead(_1114);
        StorageDead(_1113);
        StorageDead(_1111);
        StorageDead(_1108);
        StorageDead(_1107);
        StorageLive(_1129);
        StorageLive(_1130);
        StorageLive(_1131);
        StorageLive(_1132);
        _1132 = &mut (*_21);
        _1131 = <RefMut<'_, User> as DerefMut>::deref_mut(move _1132) -> [return: bb505, unwind: bb573];
    }

    bb592: {
        _1213 = discriminant(_1114);
        StorageDead(_1118);
        _1149 = const false;
        StorageDead(_1114);
        StorageDead(_1113);
        StorageDead(_1111);
        StorageDead(_1108);
        StorageDead(_1107);
        goto -> bb517;
    }

    bb593: {
        _1215 = discriminant(_400);
        StorageDead(_404);
        _1150 = const false;
        StorageDead(_400);
        StorageDead(_399);
        StorageDead(_397);
        StorageDead(_395);
        StorageDead(_394);
        StorageDead(_390);
        StorageDead(_389);
        goto -> bb550;
    }

    bb594: {
        drop(_297) -> [return: bb554, unwind: bb586];
    }

    bb595: {
        switchInt(_1148) -> [0: bb554, otherwise: bb594];
    }

    bb596 (cleanup): {
        _1219 = discriminant(_1114);
        goto -> bb573;
    }

    bb597 (cleanup): {
        _1220 = discriminant(_1056);
        goto -> bb573;
    }

    bb598 (cleanup): {
        _1221 = discriminant(_1014);
        goto -> bb565;
    }

    bb599 (cleanup): {
        _1222 = discriminant(_1003);
        goto -> bb573;
    }

    bb600 (cleanup): {
        _1223 = discriminant(_940);
        goto -> bb573;
    }

    bb601 (cleanup): {
        _1224 = discriminant(_829);
        goto -> bb573;
    }

    bb602 (cleanup): {
        _1225 = discriminant(_681);
        goto -> bb573;
    }

    bb603 (cleanup): {
        _1226 = discriminant(_621);
        goto -> bb573;
    }

    bb604 (cleanup): {
        _1227 = discriminant(_489);
        goto -> bb572;
    }

    bb605 (cleanup): {
        _1228 = discriminant(_450);
        goto -> bb573;
    }

    bb606 (cleanup): {
        _1229 = discriminant(_416);
        goto -> bb575;
    }

    bb607 (cleanup): {
        _1230 = discriminant(_400);
        goto -> bb575;
    }

    bb608 (cleanup): {
        _1231 = discriminant(_374);
        goto -> bb610;
    }

    bb609 (cleanup): {
        drop(_297) -> [return: bb586, unwind terminate(cleanup)];
    }

    bb610 (cleanup): {
        switchInt(_1148) -> [0: bb586, otherwise: bb609];
    }

    bb611 (cleanup): {
        _1232 = discriminant(_298);
        goto -> bb586;
    }

    bb612 (cleanup): {
        _1233 = discriminant(_94);
        goto -> bb586;
    }

    bb613 (cleanup): {
        _1234 = discriminant(_35);
        goto -> bb587;
    }

    bb614 (cleanup): {
        _1235 = discriminant(_23);
        goto -> bb588;
    }
}
