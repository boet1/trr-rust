// MIR for `state::state::<impl at programs/drift/src/state/state.rs:16:1: 16:11>::deserialize_reader` after PreCodegen

fn state::state::<impl at programs/drift/src/state/state.rs:16:1: 16:11>::deserialize_reader(_1: &mut R) -> std::result::Result<state::state::State, std::io::Error> {
    debug reader => _1;
    let mut _0: std::result::Result<state::state::State, std::io::Error>;
    let mut _2: state::state::State;
    let mut _3: anchor_lang::prelude::Pubkey;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, anchor_lang::prelude::Pubkey>;
    let mut _5: std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error>;
    let mut _6: &mut R;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _11: anchor_lang::prelude::Pubkey;
    let mut _12: anchor_lang::prelude::Pubkey;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, anchor_lang::prelude::Pubkey>;
    let mut _14: std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error>;
    let mut _15: &mut R;
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _20: anchor_lang::prelude::Pubkey;
    let mut _21: anchor_lang::prelude::Pubkey;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, anchor_lang::prelude::Pubkey>;
    let mut _23: std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error>;
    let mut _24: &mut R;
    let mut _25: isize;
    let _26: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _27: !;
    let mut _28: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _29: anchor_lang::prelude::Pubkey;
    let mut _30: anchor_lang::prelude::Pubkey;
    let mut _31: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, anchor_lang::prelude::Pubkey>;
    let mut _32: std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error>;
    let mut _33: &mut R;
    let mut _34: isize;
    let _35: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _36: !;
    let mut _37: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _38: anchor_lang::prelude::Pubkey;
    let mut _39: anchor_lang::prelude::Pubkey;
    let mut _40: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, anchor_lang::prelude::Pubkey>;
    let mut _41: std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error>;
    let mut _42: &mut R;
    let mut _43: isize;
    let _44: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _47: anchor_lang::prelude::Pubkey;
    let mut _48: state::state::FeeStructure;
    let mut _49: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, state::state::FeeStructure>;
    let mut _50: std::result::Result<state::state::FeeStructure, std::io::Error>;
    let mut _51: &mut R;
    let mut _52: isize;
    let _53: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _54: !;
    let mut _55: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _56: state::state::FeeStructure;
    let mut _57: state::state::FeeStructure;
    let mut _58: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, state::state::FeeStructure>;
    let mut _59: std::result::Result<state::state::FeeStructure, std::io::Error>;
    let mut _60: &mut R;
    let mut _61: isize;
    let _62: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _65: state::state::FeeStructure;
    let mut _66: state::state::OracleGuardRails;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, state::state::OracleGuardRails>;
    let mut _68: std::result::Result<state::state::OracleGuardRails, std::io::Error>;
    let mut _69: &mut R;
    let mut _70: isize;
    let _71: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _72: !;
    let mut _73: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _74: state::state::OracleGuardRails;
    let mut _75: u64;
    let mut _76: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _77: std::result::Result<u64, std::io::Error>;
    let mut _78: &mut R;
    let mut _79: isize;
    let _80: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _81: !;
    let mut _82: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _83: u64;
    let mut _84: u64;
    let mut _85: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _86: std::result::Result<u64, std::io::Error>;
    let mut _87: &mut R;
    let mut _88: isize;
    let _89: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _90: !;
    let mut _91: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _92: u64;
    let mut _93: u64;
    let mut _94: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _95: std::result::Result<u64, std::io::Error>;
    let mut _96: &mut R;
    let mut _97: isize;
    let _98: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _99: !;
    let mut _100: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _101: u64;
    let mut _102: u32;
    let mut _103: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u32>;
    let mut _104: std::result::Result<u32, std::io::Error>;
    let mut _105: &mut R;
    let mut _106: isize;
    let _107: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _108: !;
    let mut _109: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _110: u32;
    let mut _111: u16;
    let mut _112: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u16>;
    let mut _113: std::result::Result<u16, std::io::Error>;
    let mut _114: &mut R;
    let mut _115: isize;
    let _116: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _117: !;
    let mut _118: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _119: u16;
    let mut _120: u16;
    let mut _121: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u16>;
    let mut _122: std::result::Result<u16, std::io::Error>;
    let mut _123: &mut R;
    let mut _124: isize;
    let _125: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _126: !;
    let mut _127: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _128: u16;
    let mut _129: u16;
    let mut _130: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u16>;
    let mut _131: std::result::Result<u16, std::io::Error>;
    let mut _132: &mut R;
    let mut _133: isize;
    let _134: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _135: !;
    let mut _136: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _137: u16;
    let mut _138: u8;
    let mut _139: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u8>;
    let mut _140: std::result::Result<u8, std::io::Error>;
    let mut _141: &mut R;
    let mut _142: isize;
    let _143: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _144: !;
    let mut _145: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _146: u8;
    let mut _147: u8;
    let mut _148: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u8>;
    let mut _149: std::result::Result<u8, std::io::Error>;
    let mut _150: &mut R;
    let mut _151: isize;
    let _152: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _153: !;
    let mut _154: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _155: u8;
    let mut _156: u8;
    let mut _157: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u8>;
    let mut _158: std::result::Result<u8, std::io::Error>;
    let mut _159: &mut R;
    let mut _160: isize;
    let _161: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _162: !;
    let mut _163: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _164: u8;
    let mut _165: u8;
    let mut _166: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u8>;
    let mut _167: std::result::Result<u8, std::io::Error>;
    let mut _168: &mut R;
    let mut _169: isize;
    let _170: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _171: !;
    let mut _172: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _173: u8;
    let mut _174: u8;
    let mut _175: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u8>;
    let mut _176: std::result::Result<u8, std::io::Error>;
    let mut _177: &mut R;
    let mut _178: isize;
    let _179: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _180: !;
    let mut _181: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _182: u8;
    let mut _183: u8;
    let mut _184: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u8>;
    let mut _185: std::result::Result<u8, std::io::Error>;
    let mut _186: &mut R;
    let mut _187: isize;
    let _188: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _189: !;
    let mut _190: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _191: u8;
    let mut _192: u16;
    let mut _193: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u16>;
    let mut _194: std::result::Result<u16, std::io::Error>;
    let mut _195: &mut R;
    let mut _196: isize;
    let _197: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _198: !;
    let mut _199: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _200: u16;
    let mut _201: u16;
    let mut _202: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u16>;
    let mut _203: std::result::Result<u16, std::io::Error>;
    let mut _204: &mut R;
    let mut _205: isize;
    let _206: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _207: !;
    let mut _208: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _209: u16;
    let mut _210: u16;
    let mut _211: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u16>;
    let mut _212: std::result::Result<u16, std::io::Error>;
    let mut _213: &mut R;
    let mut _214: isize;
    let _215: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _216: !;
    let mut _217: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _218: u16;
    let mut _219: u8;
    let mut _220: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u8>;
    let mut _221: std::result::Result<u8, std::io::Error>;
    let mut _222: &mut R;
    let mut _223: isize;
    let _224: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _225: !;
    let mut _226: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _227: u8;
    let mut _228: [u8; 9];
    let mut _229: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, [u8; 9]>;
    let mut _230: std::result::Result<[u8; 9], std::io::Error>;
    let mut _231: &mut R;
    let mut _232: isize;
    let _233: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _234: !;
    let mut _235: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _236: [u8; 9];
    let mut _237: bool;
    let mut _238: bool;
    let mut _239: bool;
    let mut _240: bool;
    let mut _241: bool;
    let mut _242: bool;
    let mut _243: bool;
    let mut _244: bool;
    let mut _245: bool;
    let mut _246: bool;
    let mut _247: bool;
    let mut _248: bool;
    let mut _249: bool;
    let mut _250: bool;
    let mut _251: bool;
    let mut _252: bool;
    let mut _253: bool;
    let mut _254: bool;
    let mut _255: bool;
    let mut _256: bool;
    let mut _257: bool;
    let mut _258: bool;
    let mut _259: bool;
    let mut _260: bool;
    let mut _261: bool;
    let mut _262: bool;
    let mut _263: bool;
    let mut _264: isize;
    let mut _265: isize;
    let mut _266: isize;
    let mut _267: isize;
    let mut _268: isize;
    let mut _269: isize;
    let mut _270: isize;
    let mut _271: isize;
    let mut _272: isize;
    let mut _273: isize;
    let mut _274: isize;
    let mut _275: isize;
    let mut _276: isize;
    let mut _277: isize;
    let mut _278: isize;
    let mut _279: isize;
    let mut _280: isize;
    let mut _281: isize;
    let mut _282: isize;
    let mut _283: isize;
    let mut _284: isize;
    let mut _285: isize;
    let mut _286: isize;
    let mut _287: isize;
    let mut _288: isize;
    let mut _289: isize;
    let mut _290: isize;
    let mut _291: isize;
    let mut _292: isize;
    let mut _293: isize;
    let mut _294: isize;
    let mut _295: isize;
    let mut _296: isize;
    let mut _297: isize;
    let mut _298: isize;
    let mut _299: isize;
    let mut _300: isize;
    let mut _301: isize;
    let mut _302: isize;
    let mut _303: isize;
    let mut _304: isize;
    let mut _305: isize;
    let mut _306: isize;
    let mut _307: isize;
    let mut _308: isize;
    let mut _309: isize;
    let mut _310: isize;
    let mut _311: isize;
    let mut _312: isize;
    let mut _313: isize;
    let mut _314: isize;
    let mut _315: isize;
    let mut _316: isize;
    let mut _317: isize;
    let mut _318: isize;
    let mut _319: isize;
    let mut _320: isize;
    let mut _321: isize;
    let mut _322: isize;
    let mut _323: isize;
    let mut _324: isize;
    let mut _325: isize;
    let mut _326: isize;
    let mut _327: isize;
    let mut _328: isize;
    let mut _329: isize;
    let mut _330: isize;
    let mut _331: isize;
    let mut _332: isize;
    let mut _333: isize;
    let mut _334: isize;
    let mut _335: isize;
    let mut _336: isize;
    let mut _337: isize;
    let mut _338: isize;
    let mut _339: isize;
    let mut _340: isize;
    let mut _341: isize;
    let mut _342: isize;
    let mut _343: isize;
    let mut _344: isize;
    let mut _345: isize;
    let mut _346: isize;
    let mut _347: isize;
    let mut _348: isize;
    let mut _349: isize;
    let mut _350: isize;
    let mut _351: isize;
    let mut _352: isize;
    let mut _353: isize;
    let mut _354: isize;
    let mut _355: isize;
    let mut _356: isize;
    let mut _357: isize;
    let mut _358: isize;
    let mut _359: isize;
    let mut _360: isize;
    let mut _361: isize;
    let mut _362: isize;
    let mut _363: isize;
    let mut _364: isize;
    let mut _365: isize;
    let mut _366: isize;
    let mut _367: isize;
    let mut _368: isize;
    let mut _369: isize;
    let mut _370: isize;
    let mut _371: isize;
    let mut _372: isize;
    let mut _373: isize;
    let mut _374: isize;
    let mut _375: isize;
    let mut _376: isize;
    let mut _377: isize;
    let mut _378: isize;
    let mut _379: isize;
    let mut _380: isize;
    let mut _381: isize;
    let mut _382: isize;
    let mut _383: isize;
    let mut _384: isize;
    let mut _385: isize;
    let mut _386: isize;
    let mut _387: isize;
    let mut _388: isize;
    let mut _389: isize;
    let mut _390: isize;
    let mut _391: isize;
    let mut _392: isize;
    let mut _393: isize;
    scope 1 {
        debug residual => _8;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _11;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _17;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _20;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _26;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _29;
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _35;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _38;
        scope 16 {
        }
    }
    scope 17 {
        debug residual => _44;
        scope 18 {
        }
    }
    scope 19 {
        debug val => _47;
        scope 20 {
        }
    }
    scope 21 {
        debug residual => _53;
        scope 22 {
        }
    }
    scope 23 {
        debug val => _56;
        scope 24 {
        }
    }
    scope 25 {
        debug residual => _62;
        scope 26 {
        }
    }
    scope 27 {
        debug val => _65;
        scope 28 {
        }
    }
    scope 29 {
        debug residual => _71;
        scope 30 {
        }
    }
    scope 31 {
        debug val => _74;
        scope 32 {
        }
    }
    scope 33 {
        debug residual => _80;
        scope 34 {
        }
    }
    scope 35 {
        debug val => _83;
        scope 36 {
        }
    }
    scope 37 {
        debug residual => _89;
        scope 38 {
        }
    }
    scope 39 {
        debug val => _92;
        scope 40 {
        }
    }
    scope 41 {
        debug residual => _98;
        scope 42 {
        }
    }
    scope 43 {
        debug val => _101;
        scope 44 {
        }
    }
    scope 45 {
        debug residual => _107;
        scope 46 {
        }
    }
    scope 47 {
        debug val => _110;
        scope 48 {
        }
    }
    scope 49 {
        debug residual => _116;
        scope 50 {
        }
    }
    scope 51 {
        debug val => _119;
        scope 52 {
        }
    }
    scope 53 {
        debug residual => _125;
        scope 54 {
        }
    }
    scope 55 {
        debug val => _128;
        scope 56 {
        }
    }
    scope 57 {
        debug residual => _134;
        scope 58 {
        }
    }
    scope 59 {
        debug val => _137;
        scope 60 {
        }
    }
    scope 61 {
        debug residual => _143;
        scope 62 {
        }
    }
    scope 63 {
        debug val => _146;
        scope 64 {
        }
    }
    scope 65 {
        debug residual => _152;
        scope 66 {
        }
    }
    scope 67 {
        debug val => _155;
        scope 68 {
        }
    }
    scope 69 {
        debug residual => _161;
        scope 70 {
        }
    }
    scope 71 {
        debug val => _164;
        scope 72 {
        }
    }
    scope 73 {
        debug residual => _170;
        scope 74 {
        }
    }
    scope 75 {
        debug val => _173;
        scope 76 {
        }
    }
    scope 77 {
        debug residual => _179;
        scope 78 {
        }
    }
    scope 79 {
        debug val => _182;
        scope 80 {
        }
    }
    scope 81 {
        debug residual => _188;
        scope 82 {
        }
    }
    scope 83 {
        debug val => _191;
        scope 84 {
        }
    }
    scope 85 {
        debug residual => _197;
        scope 86 {
        }
    }
    scope 87 {
        debug val => _200;
        scope 88 {
        }
    }
    scope 89 {
        debug residual => _206;
        scope 90 {
        }
    }
    scope 91 {
        debug val => _209;
        scope 92 {
        }
    }
    scope 93 {
        debug residual => _215;
        scope 94 {
        }
    }
    scope 95 {
        debug val => _218;
        scope 96 {
        }
    }
    scope 97 {
        debug residual => _224;
        scope 98 {
        }
    }
    scope 99 {
        debug val => _227;
        scope 100 {
        }
    }
    scope 101 {
        debug residual => _233;
        scope 102 {
        }
    }
    scope 103 {
        debug val => _236;
        scope 104 {
        }
    }

    bb0: {
        _263 = const false;
        _262 = const false;
        _261 = const false;
        _260 = const false;
        _259 = const false;
        _258 = const false;
        _257 = const false;
        _256 = const false;
        _255 = const false;
        _254 = const false;
        _253 = const false;
        _252 = const false;
        _251 = const false;
        _250 = const false;
        _249 = const false;
        _248 = const false;
        _247 = const false;
        _246 = const false;
        _245 = const false;
        _244 = const false;
        _243 = const false;
        _242 = const false;
        _241 = const false;
        _240 = const false;
        _239 = const false;
        _238 = const false;
        _237 = const false;
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &mut (*_1);
        _5 = <anchor_lang::prelude::Pubkey as BorshDeserialize>::deserialize_reader::<R>(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb133];
    }

    bb2: {
        _263 = const true;
        StorageDead(_5);
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = ((_4 as Continue).0: anchor_lang::prelude::Pubkey);
        _3 = _11;
        StorageDead(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &mut (*_1);
        _14 = <anchor_lang::prelude::Pubkey as BorshDeserialize>::deserialize_reader::<R>(move _15) -> [return: bb7, unwind: bb184];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_10);
        _10 = move _8;
        _0 = <std::result::Result<state::state::State, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _10) -> [return: bb6, unwind: bb184];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb158;
    }

    bb7: {
        StorageDead(_15);
        _13 = <std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error> as Try>::branch(move _14) -> [return: bb8, unwind: bb184];
    }

    bb8: {
        _262 = const true;
        StorageDead(_14);
        _16 = discriminant(_13);
        switchInt(move _16) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_20);
        _20 = ((_13 as Continue).0: anchor_lang::prelude::Pubkey);
        _12 = _20;
        StorageDead(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &mut (*_1);
        _23 = <anchor_lang::prelude::Pubkey as BorshDeserialize>::deserialize_reader::<R>(move _24) -> [return: bb12, unwind: bb183];
    }

    bb10: {
        StorageLive(_17);
        _17 = move ((_13 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<state::state::State, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _19) -> [return: bb11, unwind: bb183];
    }

    bb11: {
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb157;
    }

    bb12: {
        StorageDead(_24);
        _22 = <std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error> as Try>::branch(move _23) -> [return: bb13, unwind: bb183];
    }

    bb13: {
        _261 = const true;
        StorageDead(_23);
        _25 = discriminant(_22);
        switchInt(move _25) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_29);
        _29 = ((_22 as Continue).0: anchor_lang::prelude::Pubkey);
        _21 = _29;
        StorageDead(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &mut (*_1);
        _32 = <anchor_lang::prelude::Pubkey as BorshDeserialize>::deserialize_reader::<R>(move _33) -> [return: bb17, unwind: bb182];
    }

    bb15: {
        StorageLive(_26);
        _26 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_28);
        _28 = move _26;
        _0 = <std::result::Result<state::state::State, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _28) -> [return: bb16, unwind: bb182];
    }

    bb16: {
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb156;
    }

    bb17: {
        StorageDead(_33);
        _31 = <std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error> as Try>::branch(move _32) -> [return: bb18, unwind: bb182];
    }

    bb18: {
        _260 = const true;
        StorageDead(_32);
        _34 = discriminant(_31);
        switchInt(move _34) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_38);
        _38 = ((_31 as Continue).0: anchor_lang::prelude::Pubkey);
        _30 = _38;
        StorageDead(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = &mut (*_1);
        _41 = <anchor_lang::prelude::Pubkey as BorshDeserialize>::deserialize_reader::<R>(move _42) -> [return: bb22, unwind: bb181];
    }

    bb20: {
        StorageLive(_35);
        _35 = move ((_31 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_37);
        _37 = move _35;
        _0 = <std::result::Result<state::state::State, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _37) -> [return: bb21, unwind: bb181];
    }

    bb21: {
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb155;
    }

    bb22: {
        StorageDead(_42);
        _40 = <std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error> as Try>::branch(move _41) -> [return: bb23, unwind: bb181];
    }

    bb23: {
        _259 = const true;
        StorageDead(_41);
        _43 = discriminant(_40);
        switchInt(move _43) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_47);
        _47 = ((_40 as Continue).0: anchor_lang::prelude::Pubkey);
        _39 = _47;
        StorageDead(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = &mut (*_1);
        _50 = <state::state::FeeStructure as BorshDeserialize>::deserialize_reader::<R>(move _51) -> [return: bb27, unwind: bb180];
    }

    bb25: {
        StorageLive(_44);
        _44 = move ((_40 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_46);
        _46 = move _44;
        _0 = <std::result::Result<state::state::State, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _46) -> [return: bb26, unwind: bb180];
    }

    bb26: {
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb154;
    }

    bb27: {
        StorageDead(_51);
        _49 = <std::result::Result<state::state::FeeStructure, std::io::Error> as Try>::branch(move _50) -> [return: bb28, unwind: bb180];
    }

    bb28: {
        _257 = const true;
        _258 = const true;
        StorageDead(_50);
        _52 = discriminant(_49);
        switchInt(move _52) -> [0: bb29, 1: bb30, otherwise: bb4];
    }

    bb29: {
        StorageLive(_56);
        _56 = move ((_49 as Continue).0: state::state::FeeStructure);
        _48 = move _56;
        StorageDead(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = &mut (*_1);
        _59 = <state::state::FeeStructure as BorshDeserialize>::deserialize_reader::<R>(move _60) -> [return: bb32, unwind: bb179];
    }

    bb30: {
        StorageLive(_53);
        _53 = move ((_49 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_55);
        _55 = move _53;
        _0 = <std::result::Result<state::state::State, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _55) -> [return: bb31, unwind: bb179];
    }

    bb31: {
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb153;
    }

    bb32: {
        StorageDead(_60);
        _58 = <std::result::Result<state::state::FeeStructure, std::io::Error> as Try>::branch(move _59) -> [return: bb33, unwind: bb179];
    }

    bb33: {
        _255 = const true;
        _256 = const true;
        StorageDead(_59);
        _61 = discriminant(_58);
        switchInt(move _61) -> [0: bb34, 1: bb35, otherwise: bb4];
    }

    bb34: {
        StorageLive(_65);
        _65 = move ((_58 as Continue).0: state::state::FeeStructure);
        _57 = move _65;
        StorageDead(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &mut (*_1);
        _68 = <state::state::OracleGuardRails as BorshDeserialize>::deserialize_reader::<R>(move _69) -> [return: bb37, unwind: bb178];
    }

    bb35: {
        StorageLive(_62);
        _62 = move ((_58 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_64);
        _64 = move _62;
        _0 = <std::result::Result<state::state::State, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _64) -> [return: bb36, unwind: bb178];
    }

    bb36: {
        StorageDead(_64);
        StorageDead(_62);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb152;
    }

    bb37: {
        StorageDead(_69);
        _67 = <std::result::Result<state::state::OracleGuardRails, std::io::Error> as Try>::branch(move _68) -> [return: bb38, unwind: bb178];
    }

    bb38: {
        _254 = const true;
        StorageDead(_68);
        _70 = discriminant(_67);
        switchInt(move _70) -> [0: bb39, 1: bb40, otherwise: bb4];
    }

    bb39: {
        StorageLive(_74);
        _74 = ((_67 as Continue).0: state::state::OracleGuardRails);
        _66 = _74;
        StorageDead(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = &mut (*_1);
        _77 = <u64 as BorshDeserialize>::deserialize_reader::<R>(move _78) -> [return: bb42, unwind: bb177];
    }

    bb40: {
        StorageLive(_71);
        _71 = move ((_67 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_73);
        _73 = move _71;
        _0 = <std::result::Result<state::state::State, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _73) -> [return: bb41, unwind: bb177];
    }

    bb41: {
        StorageDead(_73);
        StorageDead(_71);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb151;
    }

    bb42: {
        StorageDead(_78);
        _76 = <std::result::Result<u64, std::io::Error> as Try>::branch(move _77) -> [return: bb43, unwind: bb177];
    }

    bb43: {
        _253 = const true;
        StorageDead(_77);
        _79 = discriminant(_76);
        switchInt(move _79) -> [0: bb44, 1: bb45, otherwise: bb4];
    }

    bb44: {
        StorageLive(_83);
        _83 = ((_76 as Continue).0: u64);
        _75 = _83;
        StorageDead(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _87 = &mut (*_1);
        _86 = <u64 as BorshDeserialize>::deserialize_reader::<R>(move _87) -> [return: bb47, unwind: bb176];
    }

    bb45: {
        StorageLive(_80);
        _80 = move ((_76 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_82);
        _82 = move _80;
        _0 = <std::result::Result<state::state::State, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _82) -> [return: bb46, unwind: bb176];
    }

    bb46: {
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb150;
    }

    bb47: {
        StorageDead(_87);
        _85 = <std::result::Result<u64, std::io::Error> as Try>::branch(move _86) -> [return: bb48, unwind: bb176];
    }

    bb48: {
        _252 = const true;
        StorageDead(_86);
        _88 = discriminant(_85);
        switchInt(move _88) -> [0: bb49, 1: bb50, otherwise: bb4];
    }

    bb49: {
        StorageLive(_92);
        _92 = ((_85 as Continue).0: u64);
        _84 = _92;
        StorageDead(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = &mut (*_1);
        _95 = <u64 as BorshDeserialize>::deserialize_reader::<R>(move _96) -> [return: bb52, unwind: bb175];
    }

    bb50: {
        StorageLive(_89);
        _89 = move ((_85 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_91);
        _91 = move _89;
        _0 = <std::result::Result<state::state::State, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _91) -> [return: bb51, unwind: bb175];
    }

    bb51: {
        StorageDead(_91);
        StorageDead(_89);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb149;
    }

    bb52: {
        StorageDead(_96);
        _94 = <std::result::Result<u64, std::io::Error> as Try>::branch(move _95) -> [return: bb53, unwind: bb175];
    }

    bb53: {
        _251 = const true;
        StorageDead(_95);
        _97 = discriminant(_94);
        switchInt(move _97) -> [0: bb54, 1: bb55, otherwise: bb4];
    }

    bb54: {
        StorageLive(_101);
        _101 = ((_94 as Continue).0: u64);
        _93 = _101;
        StorageDead(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _105 = &mut (*_1);
        _104 = <u32 as BorshDeserialize>::deserialize_reader::<R>(move _105) -> [return: bb57, unwind: bb174];
    }

    bb55: {
        StorageLive(_98);
        _98 = move ((_94 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_100);
        _100 = move _98;
        _0 = <std::result::Result<state::state::State, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _100) -> [return: bb56, unwind: bb174];
    }

    bb56: {
        StorageDead(_100);
        StorageDead(_98);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb148;
    }

    bb57: {
        StorageDead(_105);
        _103 = <std::result::Result<u32, std::io::Error> as Try>::branch(move _104) -> [return: bb58, unwind: bb174];
    }

    bb58: {
        _250 = const true;
        StorageDead(_104);
        _106 = discriminant(_103);
        switchInt(move _106) -> [0: bb59, 1: bb60, otherwise: bb4];
    }

    bb59: {
        StorageLive(_110);
        _110 = ((_103 as Continue).0: u32);
        _102 = _110;
        StorageDead(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        _114 = &mut (*_1);
        _113 = <u16 as BorshDeserialize>::deserialize_reader::<R>(move _114) -> [return: bb62, unwind: bb173];
    }

    bb60: {
        StorageLive(_107);
        _107 = move ((_103 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_109);
        _109 = move _107;
        _0 = <std::result::Result<state::state::State, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _109) -> [return: bb61, unwind: bb173];
    }

    bb61: {
        StorageDead(_109);
        StorageDead(_107);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb147;
    }

    bb62: {
        StorageDead(_114);
        _112 = <std::result::Result<u16, std::io::Error> as Try>::branch(move _113) -> [return: bb63, unwind: bb173];
    }

    bb63: {
        _249 = const true;
        StorageDead(_113);
        _115 = discriminant(_112);
        switchInt(move _115) -> [0: bb64, 1: bb65, otherwise: bb4];
    }

    bb64: {
        StorageLive(_119);
        _119 = ((_112 as Continue).0: u16);
        _111 = _119;
        StorageDead(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _123 = &mut (*_1);
        _122 = <u16 as BorshDeserialize>::deserialize_reader::<R>(move _123) -> [return: bb67, unwind: bb172];
    }

    bb65: {
        StorageLive(_116);
        _116 = move ((_112 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_118);
        _118 = move _116;
        _0 = <std::result::Result<state::state::State, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _118) -> [return: bb66, unwind: bb172];
    }

    bb66: {
        StorageDead(_118);
        StorageDead(_116);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb146;
    }

    bb67: {
        StorageDead(_123);
        _121 = <std::result::Result<u16, std::io::Error> as Try>::branch(move _122) -> [return: bb68, unwind: bb172];
    }

    bb68: {
        _248 = const true;
        StorageDead(_122);
        _124 = discriminant(_121);
        switchInt(move _124) -> [0: bb69, 1: bb70, otherwise: bb4];
    }

    bb69: {
        StorageLive(_128);
        _128 = ((_121 as Continue).0: u16);
        _120 = _128;
        StorageDead(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        _132 = &mut (*_1);
        _131 = <u16 as BorshDeserialize>::deserialize_reader::<R>(move _132) -> [return: bb72, unwind: bb171];
    }

    bb70: {
        StorageLive(_125);
        _125 = move ((_121 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_127);
        _127 = move _125;
        _0 = <std::result::Result<state::state::State, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _127) -> [return: bb71, unwind: bb171];
    }

    bb71: {
        StorageDead(_127);
        StorageDead(_125);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb145;
    }

    bb72: {
        StorageDead(_132);
        _130 = <std::result::Result<u16, std::io::Error> as Try>::branch(move _131) -> [return: bb73, unwind: bb171];
    }

    bb73: {
        _247 = const true;
        StorageDead(_131);
        _133 = discriminant(_130);
        switchInt(move _133) -> [0: bb74, 1: bb75, otherwise: bb4];
    }

    bb74: {
        StorageLive(_137);
        _137 = ((_130 as Continue).0: u16);
        _129 = _137;
        StorageDead(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        _141 = &mut (*_1);
        _140 = <u8 as BorshDeserialize>::deserialize_reader::<R>(move _141) -> [return: bb77, unwind: bb170];
    }

    bb75: {
        StorageLive(_134);
        _134 = move ((_130 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_136);
        _136 = move _134;
        _0 = <std::result::Result<state::state::State, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _136) -> [return: bb76, unwind: bb170];
    }

    bb76: {
        StorageDead(_136);
        StorageDead(_134);
        StorageDead(_129);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb144;
    }

    bb77: {
        StorageDead(_141);
        _139 = <std::result::Result<u8, std::io::Error> as Try>::branch(move _140) -> [return: bb78, unwind: bb170];
    }

    bb78: {
        _246 = const true;
        StorageDead(_140);
        _142 = discriminant(_139);
        switchInt(move _142) -> [0: bb79, 1: bb80, otherwise: bb4];
    }

    bb79: {
        StorageLive(_146);
        _146 = ((_139 as Continue).0: u8);
        _138 = _146;
        StorageDead(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        _150 = &mut (*_1);
        _149 = <u8 as BorshDeserialize>::deserialize_reader::<R>(move _150) -> [return: bb82, unwind: bb169];
    }

    bb80: {
        StorageLive(_143);
        _143 = move ((_139 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_145);
        _145 = move _143;
        _0 = <std::result::Result<state::state::State, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _145) -> [return: bb81, unwind: bb169];
    }

    bb81: {
        StorageDead(_145);
        StorageDead(_143);
        StorageDead(_138);
        StorageDead(_129);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb143;
    }

    bb82: {
        StorageDead(_150);
        _148 = <std::result::Result<u8, std::io::Error> as Try>::branch(move _149) -> [return: bb83, unwind: bb169];
    }

    bb83: {
        _245 = const true;
        StorageDead(_149);
        _151 = discriminant(_148);
        switchInt(move _151) -> [0: bb84, 1: bb85, otherwise: bb4];
    }

    bb84: {
        StorageLive(_155);
        _155 = ((_148 as Continue).0: u8);
        _147 = _155;
        StorageDead(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        _159 = &mut (*_1);
        _158 = <u8 as BorshDeserialize>::deserialize_reader::<R>(move _159) -> [return: bb87, unwind: bb168];
    }

    bb85: {
        StorageLive(_152);
        _152 = move ((_148 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_154);
        _154 = move _152;
        _0 = <std::result::Result<state::state::State, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _154) -> [return: bb86, unwind: bb168];
    }

    bb86: {
        StorageDead(_154);
        StorageDead(_152);
        StorageDead(_147);
        StorageDead(_138);
        StorageDead(_129);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb142;
    }

    bb87: {
        StorageDead(_159);
        _157 = <std::result::Result<u8, std::io::Error> as Try>::branch(move _158) -> [return: bb88, unwind: bb168];
    }

    bb88: {
        _244 = const true;
        StorageDead(_158);
        _160 = discriminant(_157);
        switchInt(move _160) -> [0: bb89, 1: bb90, otherwise: bb4];
    }

    bb89: {
        StorageLive(_164);
        _164 = ((_157 as Continue).0: u8);
        _156 = _164;
        StorageDead(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        _168 = &mut (*_1);
        _167 = <u8 as BorshDeserialize>::deserialize_reader::<R>(move _168) -> [return: bb92, unwind: bb167];
    }

    bb90: {
        StorageLive(_161);
        _161 = move ((_157 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_163);
        _163 = move _161;
        _0 = <std::result::Result<state::state::State, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _163) -> [return: bb91, unwind: bb167];
    }

    bb91: {
        StorageDead(_163);
        StorageDead(_161);
        StorageDead(_156);
        StorageDead(_147);
        StorageDead(_138);
        StorageDead(_129);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb141;
    }

    bb92: {
        StorageDead(_168);
        _166 = <std::result::Result<u8, std::io::Error> as Try>::branch(move _167) -> [return: bb93, unwind: bb167];
    }

    bb93: {
        _243 = const true;
        StorageDead(_167);
        _169 = discriminant(_166);
        switchInt(move _169) -> [0: bb94, 1: bb95, otherwise: bb4];
    }

    bb94: {
        StorageLive(_173);
        _173 = ((_166 as Continue).0: u8);
        _165 = _173;
        StorageDead(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        _177 = &mut (*_1);
        _176 = <u8 as BorshDeserialize>::deserialize_reader::<R>(move _177) -> [return: bb97, unwind: bb166];
    }

    bb95: {
        StorageLive(_170);
        _170 = move ((_166 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_172);
        _172 = move _170;
        _0 = <std::result::Result<state::state::State, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _172) -> [return: bb96, unwind: bb166];
    }

    bb96: {
        StorageDead(_172);
        StorageDead(_170);
        StorageDead(_165);
        StorageDead(_156);
        StorageDead(_147);
        StorageDead(_138);
        StorageDead(_129);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb140;
    }

    bb97: {
        StorageDead(_177);
        _175 = <std::result::Result<u8, std::io::Error> as Try>::branch(move _176) -> [return: bb98, unwind: bb166];
    }

    bb98: {
        _242 = const true;
        StorageDead(_176);
        _178 = discriminant(_175);
        switchInt(move _178) -> [0: bb99, 1: bb100, otherwise: bb4];
    }

    bb99: {
        StorageLive(_182);
        _182 = ((_175 as Continue).0: u8);
        _174 = _182;
        StorageDead(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        _186 = &mut (*_1);
        _185 = <u8 as BorshDeserialize>::deserialize_reader::<R>(move _186) -> [return: bb102, unwind: bb165];
    }

    bb100: {
        StorageLive(_179);
        _179 = move ((_175 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_181);
        _181 = move _179;
        _0 = <std::result::Result<state::state::State, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _181) -> [return: bb101, unwind: bb165];
    }

    bb101: {
        StorageDead(_181);
        StorageDead(_179);
        StorageDead(_174);
        StorageDead(_165);
        StorageDead(_156);
        StorageDead(_147);
        StorageDead(_138);
        StorageDead(_129);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb139;
    }

    bb102: {
        StorageDead(_186);
        _184 = <std::result::Result<u8, std::io::Error> as Try>::branch(move _185) -> [return: bb103, unwind: bb165];
    }

    bb103: {
        _241 = const true;
        StorageDead(_185);
        _187 = discriminant(_184);
        switchInt(move _187) -> [0: bb104, 1: bb105, otherwise: bb4];
    }

    bb104: {
        StorageLive(_191);
        _191 = ((_184 as Continue).0: u8);
        _183 = _191;
        StorageDead(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        _195 = &mut (*_1);
        _194 = <u16 as BorshDeserialize>::deserialize_reader::<R>(move _195) -> [return: bb107, unwind: bb164];
    }

    bb105: {
        StorageLive(_188);
        _188 = move ((_184 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_190);
        _190 = move _188;
        _0 = <std::result::Result<state::state::State, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _190) -> [return: bb106, unwind: bb164];
    }

    bb106: {
        StorageDead(_190);
        StorageDead(_188);
        StorageDead(_183);
        StorageDead(_174);
        StorageDead(_165);
        StorageDead(_156);
        StorageDead(_147);
        StorageDead(_138);
        StorageDead(_129);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb138;
    }

    bb107: {
        StorageDead(_195);
        _193 = <std::result::Result<u16, std::io::Error> as Try>::branch(move _194) -> [return: bb108, unwind: bb164];
    }

    bb108: {
        _240 = const true;
        StorageDead(_194);
        _196 = discriminant(_193);
        switchInt(move _196) -> [0: bb109, 1: bb110, otherwise: bb4];
    }

    bb109: {
        StorageLive(_200);
        _200 = ((_193 as Continue).0: u16);
        _192 = _200;
        StorageDead(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        _204 = &mut (*_1);
        _203 = <u16 as BorshDeserialize>::deserialize_reader::<R>(move _204) -> [return: bb112, unwind: bb163];
    }

    bb110: {
        StorageLive(_197);
        _197 = move ((_193 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_199);
        _199 = move _197;
        _0 = <std::result::Result<state::state::State, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _199) -> [return: bb111, unwind: bb163];
    }

    bb111: {
        StorageDead(_199);
        StorageDead(_197);
        StorageDead(_192);
        StorageDead(_183);
        StorageDead(_174);
        StorageDead(_165);
        StorageDead(_156);
        StorageDead(_147);
        StorageDead(_138);
        StorageDead(_129);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb137;
    }

    bb112: {
        StorageDead(_204);
        _202 = <std::result::Result<u16, std::io::Error> as Try>::branch(move _203) -> [return: bb113, unwind: bb163];
    }

    bb113: {
        _239 = const true;
        StorageDead(_203);
        _205 = discriminant(_202);
        switchInt(move _205) -> [0: bb114, 1: bb115, otherwise: bb4];
    }

    bb114: {
        StorageLive(_209);
        _209 = ((_202 as Continue).0: u16);
        _201 = _209;
        StorageDead(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        _213 = &mut (*_1);
        _212 = <u16 as BorshDeserialize>::deserialize_reader::<R>(move _213) -> [return: bb117, unwind: bb162];
    }

    bb115: {
        StorageLive(_206);
        _206 = move ((_202 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_208);
        _208 = move _206;
        _0 = <std::result::Result<state::state::State, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _208) -> [return: bb116, unwind: bb162];
    }

    bb116: {
        StorageDead(_208);
        StorageDead(_206);
        StorageDead(_201);
        StorageDead(_192);
        StorageDead(_183);
        StorageDead(_174);
        StorageDead(_165);
        StorageDead(_156);
        StorageDead(_147);
        StorageDead(_138);
        StorageDead(_129);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb136;
    }

    bb117: {
        StorageDead(_213);
        _211 = <std::result::Result<u16, std::io::Error> as Try>::branch(move _212) -> [return: bb118, unwind: bb162];
    }

    bb118: {
        _238 = const true;
        StorageDead(_212);
        _214 = discriminant(_211);
        switchInt(move _214) -> [0: bb119, 1: bb120, otherwise: bb4];
    }

    bb119: {
        StorageLive(_218);
        _218 = ((_211 as Continue).0: u16);
        _210 = _218;
        StorageDead(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        _222 = &mut (*_1);
        _221 = <u8 as BorshDeserialize>::deserialize_reader::<R>(move _222) -> [return: bb122, unwind: bb161];
    }

    bb120: {
        StorageLive(_215);
        _215 = move ((_211 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_217);
        _217 = move _215;
        _0 = <std::result::Result<state::state::State, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _217) -> [return: bb121, unwind: bb161];
    }

    bb121: {
        StorageDead(_217);
        StorageDead(_215);
        StorageDead(_210);
        StorageDead(_201);
        StorageDead(_192);
        StorageDead(_183);
        StorageDead(_174);
        StorageDead(_165);
        StorageDead(_156);
        StorageDead(_147);
        StorageDead(_138);
        StorageDead(_129);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb135;
    }

    bb122: {
        StorageDead(_222);
        _220 = <std::result::Result<u8, std::io::Error> as Try>::branch(move _221) -> [return: bb123, unwind: bb161];
    }

    bb123: {
        _237 = const true;
        StorageDead(_221);
        _223 = discriminant(_220);
        switchInt(move _223) -> [0: bb124, 1: bb125, otherwise: bb4];
    }

    bb124: {
        StorageLive(_227);
        _227 = ((_220 as Continue).0: u8);
        _219 = _227;
        StorageDead(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        _231 = &mut (*_1);
        _230 = <[u8; 9] as BorshDeserialize>::deserialize_reader::<R>(move _231) -> [return: bb127, unwind: bb160];
    }

    bb125: {
        StorageLive(_224);
        _224 = move ((_220 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_226);
        _226 = move _224;
        _0 = <std::result::Result<state::state::State, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _226) -> [return: bb126, unwind: bb160];
    }

    bb126: {
        StorageDead(_226);
        StorageDead(_224);
        StorageDead(_219);
        StorageDead(_210);
        StorageDead(_201);
        StorageDead(_192);
        StorageDead(_183);
        StorageDead(_174);
        StorageDead(_165);
        StorageDead(_156);
        StorageDead(_147);
        StorageDead(_138);
        StorageDead(_129);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb134;
    }

    bb127: {
        StorageDead(_231);
        _229 = <std::result::Result<[u8; 9], std::io::Error> as Try>::branch(move _230) -> [return: bb128, unwind: bb160];
    }

    bb128: {
        StorageDead(_230);
        _232 = discriminant(_229);
        switchInt(move _232) -> [0: bb129, 1: bb130, otherwise: bb4];
    }

    bb129: {
        StorageLive(_236);
        _236 = ((_229 as Continue).0: [u8; 9]);
        _228 = _236;
        StorageDead(_236);
        _2 = state::state::State { admin: move _3, whitelist_mint: move _12, discount_mint: move _21, signer: move _30, srm_vault: move _39, perp_fee_structure: move _48, spot_fee_structure: move _57, oracle_guard_rails: move _66, number_of_authorities: move _75, number_of_sub_accounts: move _84, lp_cooldown_time: move _93, liquidation_margin_buffer_ratio: move _102, settlement_duration: move _111, number_of_markets: move _120, number_of_spot_markets: move _129, signer_nonce: move _138, min_perp_auction_duration: move _147, default_market_order_time_in_force: move _156, default_spot_auction_duration: move _165, exchange_status: move _174, liquidation_duration: move _183, initial_pct_to_liquidate: move _192, max_number_of_sub_accounts: move _201, max_initialize_user_fee: move _210, feature_bit_flags: move _219, padding: move _228 };
        StorageDead(_228);
        StorageDead(_219);
        StorageDead(_210);
        StorageDead(_201);
        StorageDead(_192);
        StorageDead(_183);
        StorageDead(_174);
        StorageDead(_165);
        StorageDead(_156);
        StorageDead(_147);
        StorageDead(_138);
        StorageDead(_129);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        _0 = std::result::Result::<state::state::State, std::io::Error>::Ok(move _2);
        StorageDead(_2);
        _264 = discriminant(_229);
        StorageDead(_229);
        _266 = discriminant(_220);
        _237 = const false;
        StorageDead(_220);
        _268 = discriminant(_211);
        _238 = const false;
        StorageDead(_211);
        _270 = discriminant(_202);
        _239 = const false;
        StorageDead(_202);
        _272 = discriminant(_193);
        _240 = const false;
        StorageDead(_193);
        _274 = discriminant(_184);
        _241 = const false;
        StorageDead(_184);
        _276 = discriminant(_175);
        _242 = const false;
        StorageDead(_175);
        _278 = discriminant(_166);
        _243 = const false;
        StorageDead(_166);
        _280 = discriminant(_157);
        _244 = const false;
        StorageDead(_157);
        _282 = discriminant(_148);
        _245 = const false;
        StorageDead(_148);
        _284 = discriminant(_139);
        _246 = const false;
        StorageDead(_139);
        _286 = discriminant(_130);
        _247 = const false;
        StorageDead(_130);
        _288 = discriminant(_121);
        _248 = const false;
        StorageDead(_121);
        _290 = discriminant(_112);
        _249 = const false;
        StorageDead(_112);
        _292 = discriminant(_103);
        _250 = const false;
        StorageDead(_103);
        _294 = discriminant(_94);
        _251 = const false;
        StorageDead(_94);
        _296 = discriminant(_85);
        _252 = const false;
        StorageDead(_85);
        _298 = discriminant(_76);
        _253 = const false;
        StorageDead(_76);
        _300 = discriminant(_67);
        _254 = const false;
        StorageDead(_67);
        _302 = discriminant(_58);
        _255 = const false;
        _256 = const false;
        StorageDead(_58);
        _304 = discriminant(_49);
        _257 = const false;
        _258 = const false;
        StorageDead(_49);
        _306 = discriminant(_40);
        _259 = const false;
        StorageDead(_40);
        _308 = discriminant(_31);
        _260 = const false;
        StorageDead(_31);
        _310 = discriminant(_22);
        _261 = const false;
        StorageDead(_22);
        _312 = discriminant(_13);
        _262 = const false;
        StorageDead(_13);
        _314 = discriminant(_4);
        _263 = const false;
        StorageDead(_4);
        goto -> bb132;
    }

    bb130: {
        StorageLive(_233);
        _233 = move ((_229 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_235);
        _235 = move _233;
        _0 = <std::result::Result<state::state::State, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _235) -> [return: bb131, unwind: bb159];
    }

    bb131: {
        StorageDead(_235);
        StorageDead(_233);
        StorageDead(_228);
        StorageDead(_219);
        StorageDead(_210);
        StorageDead(_201);
        StorageDead(_192);
        StorageDead(_183);
        StorageDead(_174);
        StorageDead(_165);
        StorageDead(_156);
        StorageDead(_147);
        StorageDead(_138);
        StorageDead(_129);
        StorageDead(_120);
        StorageDead(_111);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        _316 = discriminant(_229);
        StorageDead(_229);
        goto -> bb134;
    }

    bb132: {
        return;
    }

    bb133 (cleanup): {
        resume;
    }

    bb134: {
        _318 = discriminant(_220);
        _237 = const false;
        StorageDead(_220);
        goto -> bb135;
    }

    bb135: {
        _320 = discriminant(_211);
        _238 = const false;
        StorageDead(_211);
        goto -> bb136;
    }

    bb136: {
        _322 = discriminant(_202);
        _239 = const false;
        StorageDead(_202);
        goto -> bb137;
    }

    bb137: {
        _324 = discriminant(_193);
        _240 = const false;
        StorageDead(_193);
        goto -> bb138;
    }

    bb138: {
        _326 = discriminant(_184);
        _241 = const false;
        StorageDead(_184);
        goto -> bb139;
    }

    bb139: {
        _328 = discriminant(_175);
        _242 = const false;
        StorageDead(_175);
        goto -> bb140;
    }

    bb140: {
        _330 = discriminant(_166);
        _243 = const false;
        StorageDead(_166);
        goto -> bb141;
    }

    bb141: {
        _332 = discriminant(_157);
        _244 = const false;
        StorageDead(_157);
        goto -> bb142;
    }

    bb142: {
        _334 = discriminant(_148);
        _245 = const false;
        StorageDead(_148);
        goto -> bb143;
    }

    bb143: {
        _336 = discriminant(_139);
        _246 = const false;
        StorageDead(_139);
        goto -> bb144;
    }

    bb144: {
        _338 = discriminant(_130);
        _247 = const false;
        StorageDead(_130);
        goto -> bb145;
    }

    bb145: {
        _340 = discriminant(_121);
        _248 = const false;
        StorageDead(_121);
        goto -> bb146;
    }

    bb146: {
        _342 = discriminant(_112);
        _249 = const false;
        StorageDead(_112);
        goto -> bb147;
    }

    bb147: {
        _344 = discriminant(_103);
        _250 = const false;
        StorageDead(_103);
        goto -> bb148;
    }

    bb148: {
        _346 = discriminant(_94);
        _251 = const false;
        StorageDead(_94);
        goto -> bb149;
    }

    bb149: {
        _348 = discriminant(_85);
        _252 = const false;
        StorageDead(_85);
        goto -> bb150;
    }

    bb150: {
        _350 = discriminant(_76);
        _253 = const false;
        StorageDead(_76);
        goto -> bb151;
    }

    bb151: {
        _352 = discriminant(_67);
        _254 = const false;
        StorageDead(_67);
        goto -> bb152;
    }

    bb152: {
        _354 = discriminant(_58);
        _255 = const false;
        _256 = const false;
        StorageDead(_58);
        goto -> bb153;
    }

    bb153: {
        _356 = discriminant(_49);
        _257 = const false;
        _258 = const false;
        StorageDead(_49);
        goto -> bb154;
    }

    bb154: {
        _358 = discriminant(_40);
        _259 = const false;
        StorageDead(_40);
        goto -> bb155;
    }

    bb155: {
        _360 = discriminant(_31);
        _260 = const false;
        StorageDead(_31);
        goto -> bb156;
    }

    bb156: {
        _362 = discriminant(_22);
        _261 = const false;
        StorageDead(_22);
        goto -> bb157;
    }

    bb157: {
        _364 = discriminant(_13);
        _262 = const false;
        StorageDead(_13);
        goto -> bb158;
    }

    bb158: {
        _366 = discriminant(_4);
        _263 = const false;
        StorageDead(_4);
        goto -> bb132;
    }

    bb159 (cleanup): {
        _368 = discriminant(_229);
        goto -> bb160;
    }

    bb160 (cleanup): {
        _369 = discriminant(_220);
        goto -> bb161;
    }

    bb161 (cleanup): {
        _370 = discriminant(_211);
        goto -> bb162;
    }

    bb162 (cleanup): {
        _371 = discriminant(_202);
        goto -> bb163;
    }

    bb163 (cleanup): {
        _372 = discriminant(_193);
        goto -> bb164;
    }

    bb164 (cleanup): {
        _373 = discriminant(_184);
        goto -> bb165;
    }

    bb165 (cleanup): {
        _374 = discriminant(_175);
        goto -> bb166;
    }

    bb166 (cleanup): {
        _375 = discriminant(_166);
        goto -> bb167;
    }

    bb167 (cleanup): {
        _376 = discriminant(_157);
        goto -> bb168;
    }

    bb168 (cleanup): {
        _377 = discriminant(_148);
        goto -> bb169;
    }

    bb169 (cleanup): {
        _378 = discriminant(_139);
        goto -> bb170;
    }

    bb170 (cleanup): {
        _379 = discriminant(_130);
        goto -> bb171;
    }

    bb171 (cleanup): {
        _380 = discriminant(_121);
        goto -> bb172;
    }

    bb172 (cleanup): {
        _381 = discriminant(_112);
        goto -> bb173;
    }

    bb173 (cleanup): {
        _382 = discriminant(_103);
        goto -> bb174;
    }

    bb174 (cleanup): {
        _383 = discriminant(_94);
        goto -> bb175;
    }

    bb175 (cleanup): {
        _384 = discriminant(_85);
        goto -> bb176;
    }

    bb176 (cleanup): {
        _385 = discriminant(_76);
        goto -> bb177;
    }

    bb177 (cleanup): {
        _386 = discriminant(_67);
        goto -> bb178;
    }

    bb178 (cleanup): {
        _387 = discriminant(_58);
        goto -> bb179;
    }

    bb179 (cleanup): {
        _388 = discriminant(_49);
        goto -> bb180;
    }

    bb180 (cleanup): {
        _389 = discriminant(_40);
        goto -> bb181;
    }

    bb181 (cleanup): {
        _390 = discriminant(_31);
        goto -> bb182;
    }

    bb182 (cleanup): {
        _391 = discriminant(_22);
        goto -> bb183;
    }

    bb183 (cleanup): {
        _392 = discriminant(_13);
        goto -> bb184;
    }

    bb184 (cleanup): {
        _393 = discriminant(_4);
        goto -> bb133;
    }
}
