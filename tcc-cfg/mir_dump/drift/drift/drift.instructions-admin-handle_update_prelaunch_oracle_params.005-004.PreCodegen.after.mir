// MIR for `admin::handle_update_prelaunch_oracle_params` after PreCodegen

fn admin::handle_update_prelaunch_oracle_params(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::UpdatePrelaunchOracleParams<'_>>, _2: state::oracle::PrelaunchOracleParams) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug params => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let mut _3: std::cell::RefMut<'_, state::oracle::PrelaunchOracle>;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::oracle::PrelaunchOracle>>;
    let mut _5: std::result::Result<std::cell::RefMut<'_, state::oracle::PrelaunchOracle>, anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::AccountLoader<'_, state::oracle::PrelaunchOracle>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _11: std::cell::RefMut<'_, state::oracle::PrelaunchOracle>;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _14: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _15: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _16: isize;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _21: ();
    let mut _22: &str;
    let _23: &str;
    let mut _24: &std::string::String;
    let _25: &std::string::String;
    let _26: std::string::String;
    let mut _28: std::fmt::Arguments<'_>;
    let mut _29: &[&str];
    let mut _30: &[&str; 1];
    let _31: &[&str; 1];
    let _32: [&str; 1];
    let mut _33: &[core::fmt::rt::Argument<'_>];
    let mut _34: &[core::fmt::rt::Argument<'_>; 1];
    let _35: &[core::fmt::rt::Argument<'_>; 1];
    let _36: [core::fmt::rt::Argument<'_>; 1];
    let mut _37: core::fmt::rt::Argument<'_>;
    let mut _38: &u16;
    let _39: &u16;
    let _40: &state::perp_market::PerpMarket;
    let mut _41: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _43: anchor_lang::prelude::Clock;
    let mut _44: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _45: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _51: ();
    let mut _52: isize;
    let mut _54: i64;
    let mut _55: &mut state::oracle::PrelaunchOracle;
    let mut _56: &mut std::cell::RefMut<'_, state::oracle::PrelaunchOracle>;
    let _57: ();
    let mut _58: &str;
    let _59: &str;
    let mut _60: &std::string::String;
    let _61: &std::string::String;
    let _62: std::string::String;
    let mut _64: std::fmt::Arguments<'_>;
    let mut _65: &[&str];
    let mut _66: &[&str; 5];
    let _67: &[&str; 5];
    let _68: [&str; 5];
    let mut _69: &[core::fmt::rt::Argument<'_>];
    let mut _70: &[core::fmt::rt::Argument<'_>; 5];
    let _71: &[core::fmt::rt::Argument<'_>; 5];
    let _72: [core::fmt::rt::Argument<'_>; 5];
    let mut _73: core::fmt::rt::Argument<'_>;
    let mut _74: &i64;
    let _75: &i64;
    let _76: &state::perp_market::PerpMarket;
    let mut _77: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _78: core::fmt::rt::Argument<'_>;
    let mut _79: &u64;
    let _80: &u64;
    let _81: &state::perp_market::PerpMarket;
    let mut _82: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _83: core::fmt::rt::Argument<'_>;
    let mut _84: &u64;
    let _85: &u64;
    let _86: &state::perp_market::PerpMarket;
    let mut _87: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _88: core::fmt::rt::Argument<'_>;
    let mut _89: &u64;
    let _90: &u64;
    let _91: &state::perp_market::PerpMarket;
    let mut _92: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _93: core::fmt::rt::Argument<'_>;
    let mut _94: &u64;
    let _95: &u64;
    let _96: &state::perp_market::PerpMarket;
    let mut _97: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _98: i64;
    let mut _99: &mut state::perp_market::PerpMarket;
    let mut _100: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _101: u64;
    let mut _102: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _103: std::result::Result<u64, error::ErrorCode>;
    let mut _104: i64;
    let mut _105: isize;
    let mut _107: !;
    let mut _108: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _110: &mut state::perp_market::PerpMarket;
    let mut _111: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _112: u64;
    let mut _113: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _114: std::result::Result<u64, error::ErrorCode>;
    let mut _115: i64;
    let mut _116: isize;
    let mut _118: !;
    let mut _119: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _121: &mut state::perp_market::PerpMarket;
    let mut _122: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _123: u64;
    let mut _124: u64;
    let mut _125: &state::perp_market::PerpMarket;
    let mut _126: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _127: u64;
    let mut _128: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _129: std::result::Result<u64, error::ErrorCode>;
    let mut _130: i64;
    let mut _131: isize;
    let mut _133: !;
    let mut _134: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _136: &mut state::perp_market::PerpMarket;
    let mut _137: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _138: u64;
    let mut _139: u64;
    let mut _140: &state::perp_market::PerpMarket;
    let mut _141: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _142: u64;
    let mut _143: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _144: std::result::Result<u64, error::ErrorCode>;
    let mut _145: i64;
    let mut _146: isize;
    let mut _148: !;
    let mut _149: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _151: &mut state::perp_market::PerpMarket;
    let mut _152: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _153: ();
    let mut _154: &str;
    let _155: &str;
    let mut _156: &std::string::String;
    let _157: &std::string::String;
    let _158: std::string::String;
    let mut _160: std::fmt::Arguments<'_>;
    let mut _161: &[&str];
    let mut _162: &[&str; 5];
    let _163: &[&str; 5];
    let _164: [&str; 5];
    let mut _165: &[core::fmt::rt::Argument<'_>];
    let mut _166: &[core::fmt::rt::Argument<'_>; 5];
    let _167: &[core::fmt::rt::Argument<'_>; 5];
    let _168: [core::fmt::rt::Argument<'_>; 5];
    let mut _169: core::fmt::rt::Argument<'_>;
    let mut _170: &i64;
    let _171: &i64;
    let _172: &state::perp_market::PerpMarket;
    let mut _173: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _174: core::fmt::rt::Argument<'_>;
    let mut _175: &u64;
    let _176: &u64;
    let _177: &state::perp_market::PerpMarket;
    let mut _178: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _179: core::fmt::rt::Argument<'_>;
    let mut _180: &u64;
    let _181: &u64;
    let _182: &state::perp_market::PerpMarket;
    let mut _183: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _184: core::fmt::rt::Argument<'_>;
    let mut _185: &u64;
    let _186: &u64;
    let _187: &state::perp_market::PerpMarket;
    let mut _188: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _189: core::fmt::rt::Argument<'_>;
    let mut _190: &u64;
    let _191: &u64;
    let _192: &state::perp_market::PerpMarket;
    let mut _193: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _194: ();
    let mut _195: &str;
    let _196: &str;
    let _197: ();
    let mut _198: isize;
    let _200: ();
    let mut _201: &str;
    let _202: &str;
    let mut _203: &std::string::String;
    let _204: &std::string::String;
    let _205: std::string::String;
    let mut _207: std::fmt::Arguments<'_>;
    let mut _208: &[&str];
    let mut _209: &[&str; 2];
    let _210: &[&str; 2];
    let _211: [&str; 2];
    let mut _212: &[core::fmt::rt::Argument<'_>];
    let mut _213: &[core::fmt::rt::Argument<'_>; 2];
    let _214: &[core::fmt::rt::Argument<'_>; 2];
    let _215: [core::fmt::rt::Argument<'_>; 2];
    let mut _216: core::fmt::rt::Argument<'_>;
    let mut _217: &i64;
    let _218: &i64;
    let _219: &state::oracle::PrelaunchOracle;
    let mut _220: &std::cell::RefMut<'_, state::oracle::PrelaunchOracle>;
    let mut _221: core::fmt::rt::Argument<'_>;
    let mut _222: &i64;
    let _223: &i64;
    let mut _224: i64;
    let mut _225: &mut state::oracle::PrelaunchOracle;
    let mut _226: &mut std::cell::RefMut<'_, state::oracle::PrelaunchOracle>;
    let mut _227: &str;
    let _228: &str;
    let _229: ();
    let mut _230: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _231: std::result::Result<(), error::ErrorCode>;
    let mut _232: &state::oracle::PrelaunchOracle;
    let _233: &state::oracle::PrelaunchOracle;
    let mut _234: &std::cell::RefMut<'_, state::oracle::PrelaunchOracle>;
    let mut _235: isize;
    let mut _237: !;
    let mut _238: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _240: ();
    let mut _245: &mut instructions::admin::UpdatePrelaunchOracleParams<'_>;
    let mut _246: &mut instructions::admin::UpdatePrelaunchOracleParams<'_>;
    let mut _247: isize;
    let mut _248: isize;
    let mut _249: isize;
    let mut _250: isize;
    let mut _251: isize;
    let mut _252: isize;
    let mut _253: isize;
    let mut _254: isize;
    let mut _255: isize;
    let mut _256: isize;
    let mut _257: isize;
    let mut _258: isize;
    let mut _259: isize;
    let mut _260: isize;
    let mut _261: isize;
    scope 1 {
        debug oracle => _3;
        let mut _12: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
        let _17: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _20: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
        scope 6 {
            debug perp_market => _12;
            let _27: std::string::String;
            let _42: i64;
            let _47: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
            let _50: anchor_lang::prelude::Clock;
            let mut _244: &[&str; 1];
            scope 11 {
                debug res => _27;
            }
            scope 12 {
                debug now => _42;
                let _236: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _239: ();
                scope 17 {
                    debug price => _53;
                    let _53: i64;
                    let _63: std::string::String;
                    let _106: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _109: u64;
                    let _117: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _120: u64;
                    let _132: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _135: u64;
                    let _147: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _150: u64;
                    let _159: std::string::String;
                    let mut _242: &[&str; 5];
                    let mut _243: &[&str; 5];
                    scope 18 {
                        debug res => _63;
                    }
                    scope 19 {
                        debug residual => _106;
                        scope 20 {
                        }
                    }
                    scope 21 {
                        debug val => _109;
                        scope 22 {
                        }
                    }
                    scope 23 {
                        debug residual => _117;
                        scope 24 {
                        }
                    }
                    scope 25 {
                        debug val => _120;
                        scope 26 {
                        }
                    }
                    scope 27 {
                        debug residual => _132;
                        scope 28 {
                        }
                    }
                    scope 29 {
                        debug val => _135;
                        scope 30 {
                        }
                    }
                    scope 31 {
                        debug residual => _147;
                        scope 32 {
                        }
                    }
                    scope 33 {
                        debug val => _150;
                        scope 34 {
                        }
                    }
                    scope 35 {
                        debug res => _159;
                    }
                }
                scope 36 {
                    debug max_price => _199;
                    let _199: i64;
                    let _206: std::string::String;
                    let mut _241: &[&str; 2];
                    scope 37 {
                        debug res => _206;
                    }
                }
                scope 38 {
                    debug residual => _236;
                    scope 39 {
                    }
                }
                scope 40 {
                    debug val => _239;
                    scope 41 {
                    }
                }
            }
            scope 13 {
                debug residual => _47;
                scope 14 {
                }
            }
            scope 15 {
                debug val => _50;
                scope 16 {
                }
            }
        }
        scope 7 {
            debug residual => _17;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _20;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _8;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _11;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _245 = deref_copy (_1.1: &mut instructions::admin::UpdatePrelaunchOracleParams<'_>);
        _6 = &((*_245).1: anchor_lang::prelude::AccountLoader<'_, state::oracle::PrelaunchOracle>);
        _5 = anchor_lang::prelude::AccountLoader::<'_, PrelaunchOracle>::load_mut(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<RefMut<'_, PrelaunchOracle>, anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb120];
    }

    bb2: {
        StorageDead(_5);
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = move ((_4 as Continue).0: std::cell::RefMut<'_, state::oracle::PrelaunchOracle>);
        _3 = move _11;
        StorageDead(_11);
        _247 = discriminant(_4);
        StorageDead(_4);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _246 = deref_copy (_1.1: &mut instructions::admin::UpdatePrelaunchOracleParams<'_>);
        _15 = &((*_246).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _14 = anchor_lang::prelude::AccountLoader::<'_, PerpMarket>::load_mut(move _15) -> [return: bb7, unwind: bb119];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_10);
        _10 = move _8;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _10) -> [return: bb6, unwind: bb123];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        _257 = discriminant(_4);
        StorageDead(_4);
        goto -> bb112;
    }

    bb7: {
        StorageDead(_15);
        _13 = <std::result::Result<RefMut<'_, PerpMarket>, anchor_lang::error::Error> as Try>::branch(move _14) -> [return: bb8, unwind: bb119];
    }

    bb8: {
        StorageDead(_14);
        _16 = discriminant(_13);
        switchInt(move _16) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_20);
        _20 = move ((_13 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _12 = move _20;
        StorageDead(_20);
        _249 = discriminant(_13);
        StorageDead(_13);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _244 = const _;
        _31 = &(*_244);
        _30 = &(*_31);
        _29 = move _30 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_30);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = &_12;
        _40 = <RefMut<'_, PerpMarket> as Deref>::deref(move _41) -> [return: bb12, unwind: bb118];
    }

    bb10: {
        StorageLive(_17);
        _17 = move ((_13 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _19) -> [return: bb11, unwind: bb122];
    }

    bb11: {
        StorageDead(_19);
        StorageDead(_17);
        _255 = discriminant(_13);
        StorageDead(_13);
        goto -> bb111;
    }

    bb12: {
        StorageDead(_41);
        _39 = &((*_40).21: u16);
        _38 = &(*_39);
        _37 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _38) -> [return: bb13, unwind: bb118];
    }

    bb13: {
        StorageDead(_38);
        _36 = [move _37];
        StorageDead(_37);
        _35 = &_36;
        _34 = &(*_35);
        _33 = move _34 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_34);
        _28 = Arguments::<'_>::new_v1(move _29, move _33) -> [return: bb14, unwind: bb118];
    }

    bb14: {
        StorageDead(_33);
        StorageDead(_29);
        _27 = format(move _28) -> [return: bb15, unwind: bb118];
    }

    bb15: {
        StorageDead(_28);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_31);
        _26 = move _27;
        StorageDead(_27);
        _25 = &_26;
        _24 = &(*_25);
        _23 = <String as Deref>::deref(move _24) -> [return: bb16, unwind: bb117];
    }

    bb16: {
        _22 = &(*_23);
        StorageDead(_24);
        _21 = solana_program::log::sol_log(move _22) -> [return: bb17, unwind: bb117];
    }

    bb17: {
        StorageDead(_22);
        drop(_26) -> [return: bb18, unwind: bb118];
    }

    bb18: {
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_21);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb19, unwind: bb118];
    }

    bb19: {
        _44 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _45) -> [return: bb20, unwind: bb118];
    }

    bb20: {
        StorageDead(_45);
        _46 = discriminant(_44);
        switchInt(move _46) -> [0: bb21, 1: bb22, otherwise: bb4];
    }

    bb21: {
        StorageLive(_50);
        _50 = move ((_44 as Continue).0: anchor_lang::prelude::Clock);
        _43 = move _50;
        StorageDead(_50);
        _42 = (_43.4: i64);
        _251 = discriminant(_44);
        StorageDead(_44);
        StorageDead(_43);
        StorageLive(_51);
        _52 = discriminant((_2.1: std::option::Option<i64>));
        switchInt(move _52) -> [1: bb24, otherwise: bb85];
    }

    bb22: {
        StorageLive(_47);
        _47 = move ((_44 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_49);
        _49 = move _47;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _49) -> [return: bb23, unwind: bb121];
    }

    bb23: {
        StorageDead(_49);
        StorageDead(_47);
        _253 = discriminant(_44);
        StorageDead(_44);
        StorageDead(_43);
        goto -> bb110;
    }

    bb24: {
        StorageLive(_53);
        _53 = (((_2.1: std::option::Option<i64>) as Some).0: i64);
        StorageLive(_54);
        _54 = _53;
        StorageLive(_55);
        StorageLive(_56);
        _56 = &mut _3;
        _55 = <RefMut<'_, PrelaunchOracle> as DerefMut>::deref_mut(move _56) -> [return: bb25, unwind: bb118];
    }

    bb25: {
        StorageDead(_56);
        ((*_55).0: i64) = move _54;
        StorageDead(_54);
        StorageDead(_55);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        _243 = const _;
        _67 = &(*_243);
        _66 = &(*_67);
        _65 = move _66 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_66);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _77 = &_12;
        _76 = <RefMut<'_, PerpMarket> as Deref>::deref(move _77) -> [return: bb26, unwind: bb118];
    }

    bb26: {
        StorageDead(_77);
        _75 = &(((*_76).1: state::perp_market::AMM).62: i64);
        _74 = &(*_75);
        _73 = core::fmt::rt::Argument::<'_>::new_debug::<i64>(move _74) -> [return: bb27, unwind: bb118];
    }

    bb27: {
        StorageDead(_74);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = &_12;
        _81 = <RefMut<'_, PerpMarket> as Deref>::deref(move _82) -> [return: bb28, unwind: bb118];
    }

    bb28: {
        StorageDead(_82);
        _80 = &(((*_81).1: state::perp_market::AMM).45: u64);
        _79 = &(*_80);
        _78 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _79) -> [return: bb29, unwind: bb118];
    }

    bb29: {
        StorageDead(_79);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _87 = &_12;
        _86 = <RefMut<'_, PerpMarket> as Deref>::deref(move _87) -> [return: bb30, unwind: bb118];
    }

    bb30: {
        StorageDead(_87);
        _85 = &(((*_86).1: state::perp_market::AMM).46: u64);
        _84 = &(*_85);
        _83 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _84) -> [return: bb31, unwind: bb118];
    }

    bb31: {
        StorageDead(_84);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _92 = &_12;
        _91 = <RefMut<'_, PerpMarket> as Deref>::deref(move _92) -> [return: bb32, unwind: bb118];
    }

    bb32: {
        StorageDead(_92);
        _90 = &(((*_91).1: state::perp_market::AMM).43: u64);
        _89 = &(*_90);
        _88 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _89) -> [return: bb33, unwind: bb118];
    }

    bb33: {
        StorageDead(_89);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = &_12;
        _96 = <RefMut<'_, PerpMarket> as Deref>::deref(move _97) -> [return: bb34, unwind: bb118];
    }

    bb34: {
        StorageDead(_97);
        _95 = &(((*_96).1: state::perp_market::AMM).44: u64);
        _94 = &(*_95);
        _93 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _94) -> [return: bb35, unwind: bb118];
    }

    bb35: {
        StorageDead(_94);
        _72 = [move _73, move _78, move _83, move _88, move _93];
        StorageDead(_93);
        StorageDead(_88);
        StorageDead(_83);
        StorageDead(_78);
        StorageDead(_73);
        _71 = &_72;
        _70 = &(*_71);
        _69 = move _70 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_70);
        _64 = Arguments::<'_>::new_v1(move _65, move _69) -> [return: bb36, unwind: bb118];
    }

    bb36: {
        StorageDead(_69);
        StorageDead(_65);
        _63 = format(move _64) -> [return: bb37, unwind: bb118];
    }

    bb37: {
        StorageDead(_64);
        StorageDead(_96);
        StorageDead(_95);
        StorageDead(_91);
        StorageDead(_90);
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_76);
        StorageDead(_75);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_67);
        _62 = move _63;
        StorageDead(_63);
        _61 = &_62;
        _60 = &(*_61);
        _59 = <String as Deref>::deref(move _60) -> [return: bb38, unwind: bb116];
    }

    bb38: {
        _58 = &(*_59);
        StorageDead(_60);
        _57 = solana_program::log::sol_log(move _58) -> [return: bb39, unwind: bb116];
    }

    bb39: {
        StorageDead(_58);
        drop(_62) -> [return: bb40, unwind: bb118];
    }

    bb40: {
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_57);
        StorageLive(_98);
        _98 = _42;
        StorageLive(_99);
        StorageLive(_100);
        _100 = &mut _12;
        _99 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _100) -> [return: bb41, unwind: bb118];
    }

    bb41: {
        StorageDead(_100);
        (((*_99).1: state::perp_market::AMM).62: i64) = move _98;
        StorageDead(_98);
        StorageDead(_99);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _104 = _53;
        _103 = <i64 as Cast>::cast::<u64>(move _104) -> [return: bb42, unwind: bb118];
    }

    bb42: {
        StorageDead(_104);
        _102 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _103) -> [return: bb43, unwind: bb118];
    }

    bb43: {
        StorageDead(_103);
        _105 = discriminant(_102);
        switchInt(move _105) -> [0: bb44, 1: bb45, otherwise: bb4];
    }

    bb44: {
        StorageLive(_109);
        _109 = ((_102 as Continue).0: u64);
        _101 = _109;
        StorageDead(_109);
        StorageLive(_110);
        StorageLive(_111);
        _111 = &mut _12;
        _110 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _111) -> [return: bb47, unwind: bb118];
    }

    bb45: {
        StorageLive(_106);
        _106 = ((_102 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_108);
        _108 = _106;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _108) -> [return: bb46, unwind: bb118];
    }

    bb46: {
        StorageDead(_108);
        StorageDead(_106);
        StorageDead(_101);
        StorageDead(_102);
        goto -> bb109;
    }

    bb47: {
        StorageDead(_111);
        (((*_110).1: state::perp_market::AMM).45: u64) = move _101;
        StorageDead(_101);
        StorageDead(_110);
        StorageDead(_102);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        _115 = _53;
        _114 = <i64 as Cast>::cast::<u64>(move _115) -> [return: bb48, unwind: bb118];
    }

    bb48: {
        StorageDead(_115);
        _113 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _114) -> [return: bb49, unwind: bb118];
    }

    bb49: {
        StorageDead(_114);
        _116 = discriminant(_113);
        switchInt(move _116) -> [0: bb50, 1: bb51, otherwise: bb4];
    }

    bb50: {
        StorageLive(_120);
        _120 = ((_113 as Continue).0: u64);
        _112 = _120;
        StorageDead(_120);
        StorageLive(_121);
        StorageLive(_122);
        _122 = &mut _12;
        _121 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _122) -> [return: bb53, unwind: bb118];
    }

    bb51: {
        StorageLive(_117);
        _117 = ((_113 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_119);
        _119 = _117;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _119) -> [return: bb52, unwind: bb118];
    }

    bb52: {
        StorageDead(_119);
        StorageDead(_117);
        StorageDead(_112);
        StorageDead(_113);
        goto -> bb109;
    }

    bb53: {
        StorageDead(_122);
        (((*_121).1: state::perp_market::AMM).46: u64) = move _112;
        StorageDead(_112);
        StorageDead(_121);
        StorageDead(_113);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        _126 = &_12;
        _125 = <RefMut<'_, PerpMarket> as Deref>::deref(move _126) -> [return: bb54, unwind: bb118];
    }

    bb54: {
        StorageDead(_126);
        _124 = (((*_125).1: state::perp_market::AMM).43: u64);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _130 = _53;
        _129 = <i64 as Cast>::cast::<u64>(move _130) -> [return: bb55, unwind: bb118];
    }

    bb55: {
        StorageDead(_130);
        _128 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _129) -> [return: bb56, unwind: bb118];
    }

    bb56: {
        StorageDead(_129);
        _131 = discriminant(_128);
        switchInt(move _131) -> [0: bb57, 1: bb58, otherwise: bb4];
    }

    bb57: {
        StorageLive(_135);
        _135 = ((_128 as Continue).0: u64);
        _127 = _135;
        StorageDead(_135);
        _123 = <u64 as Ord>::min(move _124, move _127) -> [return: bb60, unwind: bb118];
    }

    bb58: {
        StorageLive(_132);
        _132 = ((_128 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_134);
        _134 = _132;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _134) -> [return: bb59, unwind: bb118];
    }

    bb59: {
        StorageDead(_134);
        StorageDead(_132);
        StorageDead(_127);
        StorageDead(_124);
        StorageDead(_123);
        StorageDead(_128);
        StorageDead(_125);
        goto -> bb109;
    }

    bb60: {
        StorageDead(_127);
        StorageDead(_124);
        StorageLive(_136);
        StorageLive(_137);
        _137 = &mut _12;
        _136 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _137) -> [return: bb61, unwind: bb118];
    }

    bb61: {
        StorageDead(_137);
        (((*_136).1: state::perp_market::AMM).43: u64) = move _123;
        StorageDead(_123);
        StorageDead(_136);
        StorageDead(_128);
        StorageDead(_125);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        _141 = &_12;
        _140 = <RefMut<'_, PerpMarket> as Deref>::deref(move _141) -> [return: bb62, unwind: bb118];
    }

    bb62: {
        StorageDead(_141);
        _139 = (((*_140).1: state::perp_market::AMM).44: u64);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        _145 = _53;
        _144 = <i64 as Cast>::cast::<u64>(move _145) -> [return: bb63, unwind: bb118];
    }

    bb63: {
        StorageDead(_145);
        _143 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _144) -> [return: bb64, unwind: bb118];
    }

    bb64: {
        StorageDead(_144);
        _146 = discriminant(_143);
        switchInt(move _146) -> [0: bb65, 1: bb66, otherwise: bb4];
    }

    bb65: {
        StorageLive(_150);
        _150 = ((_143 as Continue).0: u64);
        _142 = _150;
        StorageDead(_150);
        _138 = <u64 as Ord>::max(move _139, move _142) -> [return: bb68, unwind: bb118];
    }

    bb66: {
        StorageLive(_147);
        _147 = ((_143 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_149);
        _149 = _147;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _149) -> [return: bb67, unwind: bb118];
    }

    bb67: {
        StorageDead(_149);
        StorageDead(_147);
        StorageDead(_142);
        StorageDead(_139);
        StorageDead(_138);
        StorageDead(_143);
        StorageDead(_140);
        goto -> bb109;
    }

    bb68: {
        StorageDead(_142);
        StorageDead(_139);
        StorageLive(_151);
        StorageLive(_152);
        _152 = &mut _12;
        _151 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _152) -> [return: bb69, unwind: bb118];
    }

    bb69: {
        StorageDead(_152);
        (((*_151).1: state::perp_market::AMM).44: u64) = move _138;
        StorageDead(_138);
        StorageDead(_151);
        StorageDead(_143);
        StorageDead(_140);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        _242 = const _;
        _163 = &(*_242);
        _162 = &(*_163);
        _161 = move _162 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_162);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        _173 = &_12;
        _172 = <RefMut<'_, PerpMarket> as Deref>::deref(move _173) -> [return: bb70, unwind: bb118];
    }

    bb70: {
        StorageDead(_173);
        _171 = &(((*_172).1: state::perp_market::AMM).62: i64);
        _170 = &(*_171);
        _169 = core::fmt::rt::Argument::<'_>::new_debug::<i64>(move _170) -> [return: bb71, unwind: bb118];
    }

    bb71: {
        StorageDead(_170);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        _178 = &_12;
        _177 = <RefMut<'_, PerpMarket> as Deref>::deref(move _178) -> [return: bb72, unwind: bb118];
    }

    bb72: {
        StorageDead(_178);
        _176 = &(((*_177).1: state::perp_market::AMM).45: u64);
        _175 = &(*_176);
        _174 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _175) -> [return: bb73, unwind: bb118];
    }

    bb73: {
        StorageDead(_175);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        _183 = &_12;
        _182 = <RefMut<'_, PerpMarket> as Deref>::deref(move _183) -> [return: bb74, unwind: bb118];
    }

    bb74: {
        StorageDead(_183);
        _181 = &(((*_182).1: state::perp_market::AMM).46: u64);
        _180 = &(*_181);
        _179 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _180) -> [return: bb75, unwind: bb118];
    }

    bb75: {
        StorageDead(_180);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        _188 = &_12;
        _187 = <RefMut<'_, PerpMarket> as Deref>::deref(move _188) -> [return: bb76, unwind: bb118];
    }

    bb76: {
        StorageDead(_188);
        _186 = &(((*_187).1: state::perp_market::AMM).43: u64);
        _185 = &(*_186);
        _184 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _185) -> [return: bb77, unwind: bb118];
    }

    bb77: {
        StorageDead(_185);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        _193 = &_12;
        _192 = <RefMut<'_, PerpMarket> as Deref>::deref(move _193) -> [return: bb78, unwind: bb118];
    }

    bb78: {
        StorageDead(_193);
        _191 = &(((*_192).1: state::perp_market::AMM).44: u64);
        _190 = &(*_191);
        _189 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _190) -> [return: bb79, unwind: bb118];
    }

    bb79: {
        StorageDead(_190);
        _168 = [move _169, move _174, move _179, move _184, move _189];
        StorageDead(_189);
        StorageDead(_184);
        StorageDead(_179);
        StorageDead(_174);
        StorageDead(_169);
        _167 = &_168;
        _166 = &(*_167);
        _165 = move _166 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_166);
        _160 = Arguments::<'_>::new_v1(move _161, move _165) -> [return: bb80, unwind: bb118];
    }

    bb80: {
        StorageDead(_165);
        StorageDead(_161);
        _159 = format(move _160) -> [return: bb81, unwind: bb118];
    }

    bb81: {
        StorageDead(_160);
        StorageDead(_192);
        StorageDead(_191);
        StorageDead(_187);
        StorageDead(_186);
        StorageDead(_182);
        StorageDead(_181);
        StorageDead(_177);
        StorageDead(_176);
        StorageDead(_172);
        StorageDead(_171);
        StorageDead(_168);
        StorageDead(_167);
        StorageDead(_163);
        _158 = move _159;
        StorageDead(_159);
        _157 = &_158;
        _156 = &(*_157);
        _155 = <String as Deref>::deref(move _156) -> [return: bb82, unwind: bb115];
    }

    bb82: {
        _154 = &(*_155);
        StorageDead(_156);
        _153 = solana_program::log::sol_log(move _154) -> [return: bb83, unwind: bb115];
    }

    bb83: {
        StorageDead(_154);
        drop(_158) -> [return: bb84, unwind: bb118];
    }

    bb84: {
        StorageDead(_158);
        StorageDead(_157);
        StorageDead(_155);
        StorageDead(_153);
        _51 = const ();
        StorageDead(_53);
        goto -> bb87;
    }

    bb85: {
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        _196 = const "mark twap ts, mark twap, mark twap 5min, bid twap, ask twap: unchanged";
        _195 = &(*_196);
        _194 = solana_program::log::sol_log(move _195) -> [return: bb86, unwind: bb118];
    }

    bb86: {
        StorageDead(_195);
        StorageDead(_196);
        StorageDead(_194);
        _51 = const ();
        goto -> bb87;
    }

    bb87: {
        StorageDead(_51);
        StorageLive(_197);
        _198 = discriminant((_2.2: std::option::Option<i64>));
        switchInt(move _198) -> [1: bb88, otherwise: bb98];
    }

    bb88: {
        StorageLive(_199);
        _199 = (((_2.2: std::option::Option<i64>) as Some).0: i64);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        _241 = const _;
        _210 = &(*_241);
        _209 = &(*_210);
        _208 = move _209 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_209);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        _220 = &_3;
        _219 = <RefMut<'_, PrelaunchOracle> as Deref>::deref(move _220) -> [return: bb89, unwind: bb118];
    }

    bb89: {
        StorageDead(_220);
        _218 = &((*_219).1: i64);
        _217 = &(*_218);
        _216 = core::fmt::rt::Argument::<'_>::new_debug::<i64>(move _217) -> [return: bb90, unwind: bb118];
    }

    bb90: {
        StorageDead(_217);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        _223 = &_199;
        _222 = &(*_223);
        _221 = core::fmt::rt::Argument::<'_>::new_debug::<i64>(move _222) -> [return: bb91, unwind: bb118];
    }

    bb91: {
        StorageDead(_222);
        _215 = [move _216, move _221];
        StorageDead(_221);
        StorageDead(_216);
        _214 = &_215;
        _213 = &(*_214);
        _212 = move _213 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_213);
        _207 = Arguments::<'_>::new_v1(move _208, move _212) -> [return: bb92, unwind: bb118];
    }

    bb92: {
        StorageDead(_212);
        StorageDead(_208);
        _206 = format(move _207) -> [return: bb93, unwind: bb118];
    }

    bb93: {
        StorageDead(_207);
        StorageDead(_223);
        StorageDead(_219);
        StorageDead(_218);
        StorageDead(_215);
        StorageDead(_214);
        StorageDead(_210);
        _205 = move _206;
        StorageDead(_206);
        _204 = &_205;
        _203 = &(*_204);
        _202 = <String as Deref>::deref(move _203) -> [return: bb94, unwind: bb114];
    }

    bb94: {
        _201 = &(*_202);
        StorageDead(_203);
        _200 = solana_program::log::sol_log(move _201) -> [return: bb95, unwind: bb114];
    }

    bb95: {
        StorageDead(_201);
        drop(_205) -> [return: bb96, unwind: bb118];
    }

    bb96: {
        StorageDead(_205);
        StorageDead(_204);
        StorageDead(_202);
        StorageDead(_200);
        StorageLive(_224);
        _224 = _199;
        StorageLive(_225);
        StorageLive(_226);
        _226 = &mut _3;
        _225 = <RefMut<'_, PrelaunchOracle> as DerefMut>::deref_mut(move _226) -> [return: bb97, unwind: bb118];
    }

    bb97: {
        StorageDead(_226);
        ((*_225).1: i64) = move _224;
        StorageDead(_224);
        StorageDead(_225);
        _197 = const ();
        StorageDead(_199);
        goto -> bb100;
    }

    bb98: {
        StorageLive(_227);
        StorageLive(_228);
        _228 = const "max price: unchanged";
        _227 = &(*_228);
        _197 = solana_program::log::sol_log(move _227) -> [return: bb99, unwind: bb118];
    }

    bb99: {
        StorageDead(_227);
        StorageDead(_228);
        goto -> bb100;
    }

    bb100: {
        StorageDead(_197);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        _234 = &_3;
        _233 = <RefMut<'_, PrelaunchOracle> as Deref>::deref(move _234) -> [return: bb101, unwind: bb118];
    }

    bb101: {
        _232 = &(*_233);
        StorageDead(_234);
        _231 = PrelaunchOracle::validate(move _232) -> [return: bb102, unwind: bb118];
    }

    bb102: {
        StorageDead(_232);
        _230 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _231) -> [return: bb103, unwind: bb118];
    }

    bb103: {
        StorageDead(_231);
        _235 = discriminant(_230);
        switchInt(move _235) -> [0: bb104, 1: bb105, otherwise: bb4];
    }

    bb104: {
        StorageLive(_239);
        _239 = ((_230 as Continue).0: ());
        _229 = _239;
        StorageDead(_239);
        StorageDead(_233);
        StorageDead(_230);
        StorageDead(_229);
        StorageLive(_240);
        _240 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _240);
        StorageDead(_240);
        StorageDead(_42);
        drop(_12) -> [return: bb107, unwind: bb119];
    }

    bb105: {
        StorageLive(_236);
        _236 = ((_230 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_238);
        _238 = _236;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _238) -> [return: bb106, unwind: bb118];
    }

    bb106: {
        StorageDead(_238);
        StorageDead(_236);
        StorageDead(_233);
        StorageDead(_230);
        StorageDead(_229);
        goto -> bb110;
    }

    bb107: {
        StorageDead(_12);
        drop(_3) -> [return: bb108, unwind: bb120];
    }

    bb108: {
        StorageDead(_3);
        goto -> bb113;
    }

    bb109: {
        StorageDead(_53);
        StorageDead(_51);
        goto -> bb110;
    }

    bb110: {
        StorageDead(_42);
        drop(_12) -> [return: bb111, unwind: bb119];
    }

    bb111: {
        StorageDead(_12);
        drop(_3) -> [return: bb112, unwind: bb120];
    }

    bb112: {
        StorageDead(_3);
        goto -> bb113;
    }

    bb113: {
        return;
    }

    bb114 (cleanup): {
        drop(_205) -> [return: bb118, unwind terminate(cleanup)];
    }

    bb115 (cleanup): {
        drop(_158) -> [return: bb118, unwind terminate(cleanup)];
    }

    bb116 (cleanup): {
        drop(_62) -> [return: bb118, unwind terminate(cleanup)];
    }

    bb117 (cleanup): {
        drop(_26) -> [return: bb118, unwind terminate(cleanup)];
    }

    bb118 (cleanup): {
        drop(_12) -> [return: bb119, unwind terminate(cleanup)];
    }

    bb119 (cleanup): {
        drop(_3) -> [return: bb120, unwind terminate(cleanup)];
    }

    bb120 (cleanup): {
        resume;
    }

    bb121 (cleanup): {
        _259 = discriminant(_44);
        goto -> bb118;
    }

    bb122 (cleanup): {
        _260 = discriminant(_13);
        goto -> bb119;
    }

    bb123 (cleanup): {
        _261 = discriminant(_4);
        goto -> bb120;
    }
}
