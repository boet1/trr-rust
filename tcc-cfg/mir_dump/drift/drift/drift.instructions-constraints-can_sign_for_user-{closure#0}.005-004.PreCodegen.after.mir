// MIR for `constraints::can_sign_for_user::{closure#0}` after PreCodegen

fn constraints::can_sign_for_user::{closure#0}(_1: {closure@programs/drift/src/instructions/constraints.rs:16:21: 16:27}, _2: Ref<'_, User>) -> bool {
    debug user => _2;
    debug signer => (*(_1.0: &&anchor_lang::prelude::Signer<'_>));
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: &anchor_lang::prelude::Pubkey;
    let _5: &state::user::User;
    let mut _6: &std::cell::Ref<'_, state::user::User>;
    let mut _7: &anchor_lang::prelude::Pubkey;
    let _8: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _9: &anchor_lang::prelude::Signer<'_>;
    let mut _10: bool;
    let mut _11: &anchor_lang::prelude::Pubkey;
    let _12: &state::user::User;
    let mut _13: &std::cell::Ref<'_, state::user::User>;
    let mut _14: &anchor_lang::prelude::Pubkey;
    let _15: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _16: &anchor_lang::prelude::Signer<'_>;
    let mut _17: bool;
    let mut _18: &anchor_lang::prelude::Pubkey;
    let _19: &state::user::User;
    let mut _20: &std::cell::Ref<'_, state::user::User>;
    let mut _21: &anchor_lang::prelude::Pubkey;
    let _22: &anchor_lang::prelude::Pubkey;
    let _23: anchor_lang::prelude::Pubkey;
    let mut _24: &&anchor_lang::prelude::Signer<'_>;
    let mut _25: &anchor_lang::prelude::Signer<'_>;
    let mut _26: &anchor_lang::prelude::Pubkey;
    let mut _27: &&anchor_lang::prelude::Signer<'_>;
    let mut _28: &anchor_lang::prelude::Signer<'_>;
    let mut _29: &anchor_lang::prelude::Pubkey;

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &_2;
        _5 = <Ref<'_, User> as Deref>::deref(move _6) -> [return: bb1, unwind: bb17];
    }

    bb1: {
        StorageDead(_6);
        _4 = &((*_5).0: anchor_lang::prelude::Pubkey);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _24 = deref_copy (_1.0: &&anchor_lang::prelude::Signer<'_>);
        _25 = deref_copy (*_24);
        _9 = &(*_25);
        _8 = <anchor_lang::prelude::Signer<'_> as Deref>::deref(move _9) -> [return: bb2, unwind: bb17];
    }

    bb2: {
        StorageDead(_9);
        _26 = deref_copy ((*_8).0: &anchor_lang::prelude::Pubkey);
        _7 = &(*_26);
        _3 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _4, move _7) -> [return: bb3, unwind: bb17];
    }

    bb3: {
        switchInt(move _3) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_4);
        _0 = const true;
        goto -> bb15;
    }

    bb5: {
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &_2;
        _12 = <Ref<'_, User> as Deref>::deref(move _13) -> [return: bb6, unwind: bb17];
    }

    bb6: {
        StorageDead(_13);
        _11 = &((*_12).1: anchor_lang::prelude::Pubkey);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _27 = deref_copy (_1.0: &&anchor_lang::prelude::Signer<'_>);
        _28 = deref_copy (*_27);
        _16 = &(*_28);
        _15 = <anchor_lang::prelude::Signer<'_> as Deref>::deref(move _16) -> [return: bb7, unwind: bb17];
    }

    bb7: {
        StorageDead(_16);
        _29 = deref_copy ((*_15).0: &anchor_lang::prelude::Pubkey);
        _14 = &(*_29);
        _10 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _11, move _14) -> [return: bb8, unwind: bb17];
    }

    bb8: {
        switchInt(move _10) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_11);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = &_2;
        _19 = <Ref<'_, User> as Deref>::deref(move _20) -> [return: bb11, unwind: bb17];
    }

    bb10: {
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_11);
        _0 = const false;
        goto -> bb14;
    }

    bb11: {
        StorageDead(_20);
        _18 = &((*_19).1: anchor_lang::prelude::Pubkey);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb12, unwind: bb17];
    }

    bb12: {
        _22 = &_23;
        _21 = &(*_22);
        _17 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _18, move _21) -> [return: bb13, unwind: bb17];
    }

    bb13: {
        StorageDead(_21);
        StorageDead(_18);
        _0 = Not(move _17);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_19);
        StorageDead(_17);
        goto -> bb14;
    }

    bb14: {
        StorageDead(_10);
        goto -> bb15;
    }

    bb15: {
        StorageDead(_3);
        drop(_2) -> [return: bb16, unwind: bb18];
    }

    bb16: {
        return;
    }

    bb17 (cleanup): {
        drop(_2) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        resume;
    }
}
