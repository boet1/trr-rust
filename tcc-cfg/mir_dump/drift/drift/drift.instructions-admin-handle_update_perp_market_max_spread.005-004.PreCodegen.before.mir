// MIR for `admin::handle_update_perp_market_max_spread` before PreCodegen

fn admin::handle_update_perp_market_max_spread(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::AdminUpdatePerpMarket<'_>>, _2: u32) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug max_spread => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _5: std::result::Result<(), anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let _7: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _12: ();
    let _13: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _14: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _16: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _17: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _18: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _19: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _20: isize;
    let _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _24: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _25: ();
    let mut _26: &str;
    let _27: &str;
    let mut _28: &std::string::String;
    let _29: &std::string::String;
    let _30: std::string::String;
    let mut _32: std::fmt::Arguments<'_>;
    let mut _33: &[&str];
    let mut _34: &[&str; 1];
    let _35: &[&str; 1];
    let _36: [&str; 1];
    let mut _37: &[core::fmt::rt::Argument<'_>];
    let mut _38: &[core::fmt::rt::Argument<'_>; 1];
    let _39: &[core::fmt::rt::Argument<'_>; 1];
    let _40: [core::fmt::rt::Argument<'_>; 1];
    let mut _41: core::fmt::rt::Argument<'_>;
    let mut _42: &u16;
    let _43: &u16;
    let _44: &state::perp_market::PerpMarket;
    let mut _45: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _46: ();
    let mut _47: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _48: std::result::Result<(), error::ErrorCode>;
    let mut _49: bool;
    let mut _50: u32;
    let mut _51: u32;
    let mut _52: &state::perp_market::PerpMarket;
    let mut _53: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _54: ();
    let _56: ();
    let mut _57: &str;
    let _58: &str;
    let mut _59: &std::string::String;
    let _60: &std::string::String;
    let _61: std::string::String;
    let mut _63: std::fmt::Arguments<'_>;
    let mut _64: &[&str];
    let mut _65: &[&str; 2];
    let _66: &[&str; 2];
    let _67: [&str; 2];
    let mut _68: &[core::fmt::rt::Argument<'_>];
    let mut _69: &[core::fmt::rt::Argument<'_>; 1];
    let _70: &[core::fmt::rt::Argument<'_>; 1];
    let _71: [core::fmt::rt::Argument<'_>; 1];
    let mut _72: core::fmt::rt::Argument<'_>;
    let mut _73: &error::ErrorCode;
    let _74: &error::ErrorCode;
    let _75: ();
    let mut _76: &str;
    let _77: &str;
    let mut _78: &std::string::String;
    let _79: &std::string::String;
    let _80: std::string::String;
    let mut _82: std::fmt::Arguments<'_>;
    let mut _83: &[&str];
    let mut _84: &[&str; 1];
    let _85: &[&str; 1];
    let _86: [&str; 1];
    let mut _87: error::ErrorCode;
    let mut _88: isize;
    let mut _90: !;
    let mut _91: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _93: ();
    let mut _94: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _95: std::result::Result<(), error::ErrorCode>;
    let mut _96: bool;
    let mut _97: u32;
    let mut _98: u32;
    let mut _99: u32;
    let mut _100: &state::perp_market::PerpMarket;
    let mut _101: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _102: (u32, bool);
    let mut _103: ();
    let _105: ();
    let mut _106: &str;
    let _107: &str;
    let mut _108: &std::string::String;
    let _109: &std::string::String;
    let _110: std::string::String;
    let mut _112: std::fmt::Arguments<'_>;
    let mut _113: &[&str];
    let mut _114: &[&str; 2];
    let _115: &[&str; 2];
    let _116: [&str; 2];
    let mut _117: &[core::fmt::rt::Argument<'_>];
    let mut _118: &[core::fmt::rt::Argument<'_>; 1];
    let _119: &[core::fmt::rt::Argument<'_>; 1];
    let _120: [core::fmt::rt::Argument<'_>; 1];
    let mut _121: core::fmt::rt::Argument<'_>;
    let mut _122: &error::ErrorCode;
    let _123: &error::ErrorCode;
    let _124: ();
    let mut _125: &str;
    let _126: &str;
    let mut _127: &std::string::String;
    let _128: &std::string::String;
    let _129: std::string::String;
    let mut _131: std::fmt::Arguments<'_>;
    let mut _132: &[&str];
    let mut _133: &[&str; 1];
    let _134: &[&str; 1];
    let _135: [&str; 1];
    let mut _136: error::ErrorCode;
    let mut _137: isize;
    let mut _139: !;
    let mut _140: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _142: ();
    let mut _143: &str;
    let _144: &str;
    let mut _145: &std::string::String;
    let _146: &std::string::String;
    let _147: std::string::String;
    let mut _149: std::fmt::Arguments<'_>;
    let mut _150: &[&str];
    let mut _151: &[&str; 2];
    let _152: &[&str; 2];
    let _153: [&str; 2];
    let mut _154: &[core::fmt::rt::Argument<'_>];
    let mut _155: &[core::fmt::rt::Argument<'_>; 2];
    let _156: &[core::fmt::rt::Argument<'_>; 2];
    let _157: [core::fmt::rt::Argument<'_>; 2];
    let mut _158: core::fmt::rt::Argument<'_>;
    let mut _159: &u32;
    let _160: &u32;
    let _161: &state::perp_market::PerpMarket;
    let mut _162: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _163: core::fmt::rt::Argument<'_>;
    let mut _164: &u32;
    let _165: &u32;
    let mut _166: u32;
    let mut _167: &mut state::perp_market::PerpMarket;
    let mut _168: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _169: ();
    let mut _176: &mut instructions::admin::AdminUpdatePerpMarket<'_>;
    let mut _177: &mut instructions::admin::AdminUpdatePerpMarket<'_>;
    let mut _178: isize;
    let mut _179: isize;
    let mut _180: isize;
    let mut _181: isize;
    let mut _182: isize;
    let mut _183: isize;
    let mut _184: isize;
    let mut _185: isize;
    let mut _186: isize;
    let mut _187: isize;
    scope 1 {
        debug residual => _9;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _12;
        scope 4 {
        }
    }
    scope 5 {
        debug perp_market => _13;
        let _31: std::string::String;
        let _55: error::ErrorCode;
        let _89: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _92: ();
        let _104: error::ErrorCode;
        let _138: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _141: ();
        let _148: std::string::String;
        let mut _170: &[&str; 2];
        let mut _175: &[&str; 1];
        scope 10 {
            debug res => _31;
        }
        scope 11 {
            debug error_code => _55;
            let _62: std::string::String;
            let _81: std::string::String;
            let mut _173: &[&str; 1];
            let mut _174: &[&str; 2];
            scope 12 {
                debug res => _62;
            }
            scope 13 {
                debug res => _81;
            }
        }
        scope 14 {
            debug residual => _89;
            scope 15 {
            }
        }
        scope 16 {
            debug val => _92;
            scope 17 {
            }
        }
        scope 18 {
            debug error_code => _104;
            let _111: std::string::String;
            let _130: std::string::String;
            let mut _171: &[&str; 1];
            let mut _172: &[&str; 2];
            scope 19 {
                debug res => _111;
            }
            scope 20 {
                debug res => _130;
            }
        }
        scope 21 {
            debug residual => _138;
            scope 22 {
            }
        }
        scope 23 {
            debug val => _141;
            scope 24 {
            }
        }
        scope 25 {
            debug res => _148;
        }
    }
    scope 6 {
        debug residual => _21;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _24;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _176 = deref_copy (_1.1: &mut instructions::admin::AdminUpdatePerpMarket<'_>);
        _7 = &((*_176).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _6 = &(*_7);
        _5 = constraints::perp_market_valid(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb79];
    }

    bb2: {
        StorageDead(_5);
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_4 as Continue).0: ());
        _3 = _12;
        StorageDead(_12);
        _178 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _177 = deref_copy (_1.1: &mut instructions::admin::AdminUpdatePerpMarket<'_>);
        _18 = &((*_177).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _17 = anchor_lang::prelude::AccountLoader::<'_, PerpMarket>::load_mut(move _18) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _11) -> [return: bb6, unwind: bb81];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _184 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb71;
    }

    bb7: {
        StorageDead(_18);
        StorageLive(_19);
        _19 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _16 = std::result::Result::<RefMut<'_, PerpMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _17, move _19) -> [return: bb8, unwind: bb79];
    }

    bb8: {
        StorageDead(_19);
        StorageDead(_17);
        _15 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _16) -> [return: bb9, unwind: bb79];
    }

    bb9: {
        StorageDead(_16);
        _20 = discriminant(_15);
        switchInt(move _20) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_24);
        _24 = move ((_15 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _14 = move _24;
        StorageDead(_24);
        _13 = &mut _14;
        _182 = discriminant(_15);
        StorageDead(_15);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _175 = const _;
        _35 = &(*_175);
        _34 = &(*_35);
        _33 = move _34 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_34);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = &(*_13);
        _44 = <RefMut<'_, PerpMarket> as Deref>::deref(move _45) -> [return: bb13, unwind: bb78];
    }

    bb11: {
        StorageLive(_21);
        _21 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_23);
        _23 = _21;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _23) -> [return: bb12, unwind: bb80];
    }

    bb12: {
        StorageDead(_23);
        StorageDead(_21);
        _180 = discriminant(_15);
        StorageDead(_15);
        goto -> bb70;
    }

    bb13: {
        StorageDead(_45);
        _43 = &((*_44).21: u16);
        _42 = &(*_43);
        _41 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _42) -> [return: bb14, unwind: bb78];
    }

    bb14: {
        StorageDead(_42);
        _40 = [move _41];
        StorageDead(_41);
        _39 = &_40;
        _38 = &(*_39);
        _37 = move _38 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_38);
        _32 = Arguments::<'_>::new_v1(move _33, move _37) -> [return: bb15, unwind: bb78];
    }

    bb15: {
        StorageDead(_37);
        StorageDead(_33);
        _31 = format(move _32) -> [return: bb16, unwind: bb78];
    }

    bb16: {
        StorageDead(_32);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_35);
        _30 = move _31;
        StorageDead(_31);
        _29 = &_30;
        _28 = &(*_29);
        _27 = <String as Deref>::deref(move _28) -> [return: bb17, unwind: bb77];
    }

    bb17: {
        _26 = &(*_27);
        StorageDead(_28);
        _25 = solana_program::log::sol_log(move _26) -> [return: bb18, unwind: bb77];
    }

    bb18: {
        StorageDead(_26);
        drop(_30) -> [return: bb19, unwind: bb78];
    }

    bb19: {
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_25);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = _2;
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = &(*_13);
        _52 = <RefMut<'_, PerpMarket> as Deref>::deref(move _53) -> [return: bb20, unwind: bb78];
    }

    bb20: {
        StorageDead(_53);
        _51 = (((*_52).1: state::perp_market::AMM).63: u32);
        _49 = Ge(move _50, move _51);
        switchInt(move _49) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_50);
        StorageLive(_54);
        _54 = ();
        _48 = std::result::Result::<(), error::ErrorCode>::Ok(move _54);
        StorageDead(_54);
        goto -> bb34;
    }

    bb22: {
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_50);
        StorageLive(_55);
        _55 = error::ErrorCode::DefaultError;
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _174 = const _;
        _66 = &(*_174);
        _65 = &(*_66);
        _64 = move _65 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_65);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = &_55;
        _73 = &(*_74);
        _72 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _73) -> [return: bb23, unwind: bb78];
    }

    bb23: {
        StorageDead(_73);
        _71 = [move _72];
        StorageDead(_72);
        _70 = &_71;
        _69 = &(*_70);
        _68 = move _69 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_69);
        _63 = Arguments::<'_>::new_v1(move _64, move _68) -> [return: bb24, unwind: bb78];
    }

    bb24: {
        StorageDead(_68);
        StorageDead(_64);
        _62 = format(move _63) -> [return: bb25, unwind: bb78];
    }

    bb25: {
        StorageDead(_63);
        StorageDead(_74);
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_66);
        _61 = move _62;
        StorageDead(_62);
        _60 = &_61;
        _59 = &(*_60);
        _58 = <String as Deref>::deref(move _59) -> [return: bb26, unwind: bb76];
    }

    bb26: {
        _57 = &(*_58);
        StorageDead(_59);
        _56 = solana_program::log::sol_log(move _57) -> [return: bb27, unwind: bb76];
    }

    bb27: {
        StorageDead(_57);
        drop(_61) -> [return: bb28, unwind: bb78];
    }

    bb28: {
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_56);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _173 = const _;
        _85 = &(*_173);
        _84 = &(*_85);
        _83 = move _84 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_84);
        _82 = Arguments::<'_>::new_const(move _83) -> [return: bb29, unwind: bb78];
    }

    bb29: {
        StorageDead(_83);
        _81 = format(move _82) -> [return: bb30, unwind: bb78];
    }

    bb30: {
        StorageDead(_82);
        StorageDead(_85);
        _80 = move _81;
        StorageDead(_81);
        _79 = &_80;
        _78 = &(*_79);
        _77 = <String as Deref>::deref(move _78) -> [return: bb31, unwind: bb75];
    }

    bb31: {
        _76 = &(*_77);
        StorageDead(_78);
        _75 = solana_program::log::sol_log(move _76) -> [return: bb32, unwind: bb75];
    }

    bb32: {
        StorageDead(_76);
        drop(_80) -> [return: bb33, unwind: bb78];
    }

    bb33: {
        StorageDead(_80);
        StorageDead(_79);
        StorageDead(_77);
        StorageDead(_75);
        StorageLive(_87);
        _87 = _55;
        _48 = std::result::Result::<(), error::ErrorCode>::Err(move _87);
        StorageDead(_87);
        StorageDead(_55);
        goto -> bb34;
    }

    bb34: {
        StorageDead(_49);
        _47 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _48) -> [return: bb35, unwind: bb78];
    }

    bb35: {
        StorageDead(_48);
        _88 = discriminant(_47);
        switchInt(move _88) -> [0: bb36, 1: bb37, otherwise: bb4];
    }

    bb36: {
        StorageLive(_92);
        _92 = ((_47 as Continue).0: ());
        _46 = _92;
        StorageDead(_92);
        StorageDead(_47);
        StorageDead(_46);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = _2;
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _101 = &(*_13);
        _100 = <RefMut<'_, PerpMarket> as Deref>::deref(move _101) -> [return: bb39, unwind: bb78];
    }

    bb37: {
        StorageLive(_89);
        _89 = ((_47 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_91);
        _91 = _89;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _91) -> [return: bb38, unwind: bb78];
    }

    bb38: {
        StorageDead(_91);
        StorageDead(_89);
        StorageDead(_47);
        StorageDead(_46);
        goto -> bb69;
    }

    bb39: {
        StorageDead(_101);
        _99 = ((*_100).15: u32);
        _102 = CheckedMul(_99, const 100_u32);
        assert(!move (_102.1: bool), "attempt to compute `{} * {}`, which would overflow", move _99, const 100_u32) -> [success: bb40, unwind: bb78];
    }

    bb40: {
        _98 = move (_102.0: u32);
        StorageDead(_99);
        _96 = Le(move _97, move _98);
        switchInt(move _96) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        StorageDead(_100);
        StorageDead(_98);
        StorageDead(_97);
        StorageLive(_103);
        _103 = ();
        _95 = std::result::Result::<(), error::ErrorCode>::Ok(move _103);
        StorageDead(_103);
        goto -> bb54;
    }

    bb42: {
        StorageDead(_100);
        StorageDead(_98);
        StorageDead(_97);
        StorageLive(_104);
        _104 = error::ErrorCode::DefaultError;
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        _172 = const _;
        _115 = &(*_172);
        _114 = &(*_115);
        _113 = move _114 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_114);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _123 = &_104;
        _122 = &(*_123);
        _121 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _122) -> [return: bb43, unwind: bb78];
    }

    bb43: {
        StorageDead(_122);
        _120 = [move _121];
        StorageDead(_121);
        _119 = &_120;
        _118 = &(*_119);
        _117 = move _118 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_118);
        _112 = Arguments::<'_>::new_v1(move _113, move _117) -> [return: bb44, unwind: bb78];
    }

    bb44: {
        StorageDead(_117);
        StorageDead(_113);
        _111 = format(move _112) -> [return: bb45, unwind: bb78];
    }

    bb45: {
        StorageDead(_112);
        StorageDead(_123);
        StorageDead(_120);
        StorageDead(_119);
        StorageDead(_115);
        _110 = move _111;
        StorageDead(_111);
        _109 = &_110;
        _108 = &(*_109);
        _107 = <String as Deref>::deref(move _108) -> [return: bb46, unwind: bb74];
    }

    bb46: {
        _106 = &(*_107);
        StorageDead(_108);
        _105 = solana_program::log::sol_log(move _106) -> [return: bb47, unwind: bb74];
    }

    bb47: {
        StorageDead(_106);
        drop(_110) -> [return: bb48, unwind: bb78];
    }

    bb48: {
        StorageDead(_110);
        StorageDead(_109);
        StorageDead(_107);
        StorageDead(_105);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        _171 = const _;
        _134 = &(*_171);
        _133 = &(*_134);
        _132 = move _133 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_133);
        _131 = Arguments::<'_>::new_const(move _132) -> [return: bb49, unwind: bb78];
    }

    bb49: {
        StorageDead(_132);
        _130 = format(move _131) -> [return: bb50, unwind: bb78];
    }

    bb50: {
        StorageDead(_131);
        StorageDead(_134);
        _129 = move _130;
        StorageDead(_130);
        _128 = &_129;
        _127 = &(*_128);
        _126 = <String as Deref>::deref(move _127) -> [return: bb51, unwind: bb73];
    }

    bb51: {
        _125 = &(*_126);
        StorageDead(_127);
        _124 = solana_program::log::sol_log(move _125) -> [return: bb52, unwind: bb73];
    }

    bb52: {
        StorageDead(_125);
        drop(_129) -> [return: bb53, unwind: bb78];
    }

    bb53: {
        StorageDead(_129);
        StorageDead(_128);
        StorageDead(_126);
        StorageDead(_124);
        StorageLive(_136);
        _136 = _104;
        _95 = std::result::Result::<(), error::ErrorCode>::Err(move _136);
        StorageDead(_136);
        StorageDead(_104);
        goto -> bb54;
    }

    bb54: {
        StorageDead(_96);
        _94 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _95) -> [return: bb55, unwind: bb78];
    }

    bb55: {
        StorageDead(_95);
        _137 = discriminant(_94);
        switchInt(move _137) -> [0: bb56, 1: bb57, otherwise: bb4];
    }

    bb56: {
        StorageLive(_141);
        _141 = ((_94 as Continue).0: ());
        _93 = _141;
        StorageDead(_141);
        StorageDead(_94);
        StorageDead(_93);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        _170 = const _;
        _152 = &(*_170);
        _151 = &(*_152);
        _150 = move _151 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_151);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        _162 = &(*_13);
        _161 = <RefMut<'_, PerpMarket> as Deref>::deref(move _162) -> [return: bb59, unwind: bb78];
    }

    bb57: {
        StorageLive(_138);
        _138 = ((_94 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_140);
        _140 = _138;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _140) -> [return: bb58, unwind: bb78];
    }

    bb58: {
        StorageDead(_140);
        StorageDead(_138);
        StorageDead(_94);
        StorageDead(_93);
        goto -> bb69;
    }

    bb59: {
        StorageDead(_162);
        _160 = &(((*_161).1: state::perp_market::AMM).64: u32);
        _159 = &(*_160);
        _158 = core::fmt::rt::Argument::<'_>::new_debug::<u32>(move _159) -> [return: bb60, unwind: bb78];
    }

    bb60: {
        StorageDead(_159);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        _165 = &_2;
        _164 = &(*_165);
        _163 = core::fmt::rt::Argument::<'_>::new_debug::<u32>(move _164) -> [return: bb61, unwind: bb78];
    }

    bb61: {
        StorageDead(_164);
        _157 = [move _158, move _163];
        StorageDead(_163);
        StorageDead(_158);
        _156 = &_157;
        _155 = &(*_156);
        _154 = move _155 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_155);
        _149 = Arguments::<'_>::new_v1(move _150, move _154) -> [return: bb62, unwind: bb78];
    }

    bb62: {
        StorageDead(_154);
        StorageDead(_150);
        _148 = format(move _149) -> [return: bb63, unwind: bb78];
    }

    bb63: {
        StorageDead(_149);
        StorageDead(_165);
        StorageDead(_161);
        StorageDead(_160);
        StorageDead(_157);
        StorageDead(_156);
        StorageDead(_152);
        _147 = move _148;
        StorageDead(_148);
        _146 = &_147;
        _145 = &(*_146);
        _144 = <String as Deref>::deref(move _145) -> [return: bb64, unwind: bb72];
    }

    bb64: {
        _143 = &(*_144);
        StorageDead(_145);
        _142 = solana_program::log::sol_log(move _143) -> [return: bb65, unwind: bb72];
    }

    bb65: {
        StorageDead(_143);
        drop(_147) -> [return: bb66, unwind: bb78];
    }

    bb66: {
        StorageDead(_147);
        StorageDead(_146);
        StorageDead(_144);
        StorageDead(_142);
        StorageLive(_166);
        _166 = _2;
        StorageLive(_167);
        StorageLive(_168);
        _168 = &mut (*_13);
        _167 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _168) -> [return: bb67, unwind: bb78];
    }

    bb67: {
        StorageDead(_168);
        (((*_167).1: state::perp_market::AMM).64: u32) = move _166;
        StorageDead(_166);
        StorageDead(_167);
        StorageLive(_169);
        _169 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _169);
        StorageDead(_169);
        drop(_14) -> [return: bb68, unwind: bb79];
    }

    bb68: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb71;
    }

    bb69: {
        drop(_14) -> [return: bb70, unwind: bb79];
    }

    bb70: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb71;
    }

    bb71: {
        return;
    }

    bb72 (cleanup): {
        drop(_147) -> [return: bb78, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        drop(_129) -> [return: bb78, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        drop(_110) -> [return: bb78, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        drop(_80) -> [return: bb78, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        drop(_61) -> [return: bb78, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        drop(_30) -> [return: bb78, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        drop(_14) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        resume;
    }

    bb80 (cleanup): {
        _186 = discriminant(_15);
        goto -> bb79;
    }

    bb81 (cleanup): {
        _187 = discriminant(_4);
        goto -> bb79;
    }
}
