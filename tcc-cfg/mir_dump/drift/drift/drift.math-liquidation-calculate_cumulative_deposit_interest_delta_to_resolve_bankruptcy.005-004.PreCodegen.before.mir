// MIR for `calculate_cumulative_deposit_interest_delta_to_resolve_bankruptcy` before PreCodegen

fn calculate_cumulative_deposit_interest_delta_to_resolve_bankruptcy(_1: u128, _2: &SpotMarket) -> std::result::Result<u128, error::ErrorCode> {
    debug borrow => _1;
    debug spot_market => _2;
    let mut _0: std::result::Result<u128, error::ErrorCode>;
    let _3: u128;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _5: std::result::Result<u128, error::ErrorCode>;
    let mut _6: u128;
    let mut _7: &state::spot_market::SpotMarket;
    let mut _8: &state::spot_market::SpotBalanceType;
    let _9: &state::spot_market::SpotBalanceType;
    let _10: state::spot_market::SpotBalanceType;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _15: u128;
    let mut _16: std::result::Result<u128, error::ErrorCode>;
    let mut _17: u128;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _19: std::result::Result<u128, error::ErrorCode>;
    let mut _20: u128;
    let mut _21: u128;
    let mut _22: isize;
    let mut _24: !;
    let mut _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _27: u128;
    let mut _28: std::result::Result<u128, error::ErrorCode>;
    let mut _29: &state::spot_market::SpotBalanceType;
    scope 1 {
        debug total_deposits => _3;
        let _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _26: u128;
        scope 6 {
            debug residual => _23;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _26;
            scope 9 {
            }
        }
    }
    scope 2 {
        debug residual => _12;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _15;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = ((*_2).11: u128);
        StorageLive(_7);
        _7 = &(*_2);
        StorageLive(_8);
        StorageLive(_9);
        _29 = const _;
        _9 = &(*_29);
        _8 = &(*_9);
        _5 = get_token_amount(move _6, move _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        _4 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_5);
        _11 = discriminant(_4);
        switchInt(move _11) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_15);
        _15 = ((_4 as Continue).0: u128);
        _3 = _15;
        StorageDead(_15);
        StorageDead(_9);
        StorageDead(_4);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = ((*_2).13: u128);
        StorageLive(_21);
        _21 = _1;
        _19 = <u128 as SafeMath>::safe_mul(move _20, move _21) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_12);
        _12 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_9);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb14;
    }

    bb7: {
        StorageDead(_21);
        StorageDead(_20);
        _18 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _19) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_19);
        _22 = discriminant(_18);
        switchInt(move _22) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_26);
        _26 = ((_18 as Continue).0: u128);
        _17 = _26;
        StorageDead(_26);
        StorageLive(_27);
        _27 = _3;
        _16 = <u128 as SafeMath>::safe_div_ceil(move _17, move _27) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_23);
        _23 = ((_18 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_25);
        _25 = _23;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _25) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_3);
        StorageDead(_18);
        goto -> bb14;
    }

    bb12: {
        StorageDead(_27);
        StorageDead(_17);
        StorageLive(_28);
        _28 = std::result::Result::<u128, error::ErrorCode>::Ok(const 0_u128);
        _0 = std::result::Result::<u128, error::ErrorCode>::or::<error::ErrorCode>(move _16, move _28) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_28);
        StorageDead(_16);
        StorageDead(_3);
        StorageDead(_18);
        goto -> bb14;
    }

    bb14: {
        return;
    }
}
