// MIR for `signed_msg_user::<impl at programs/drift/src/state/signed_msg_user.rs:59:1: 59:25>::validate` before PreCodegen

fn signed_msg_user::<impl at programs/drift/src/state/signed_msg_user.rs:59:1: 59:25>::validate(_1: &SignedMsgUserOrders) -> std::result::Result<(), error::ErrorCode> {
    debug self => _1;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _2: ();
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _4: std::result::Result<(), error::ErrorCode>;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: &std::vec::Vec<state::signed_msg_user::SignedMsgOrderId>;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: &std::vec::Vec<state::signed_msg_user::SignedMsgOrderId>;
    let mut _11: ();
    let _12: error::ErrorCode;
    let _13: ();
    let mut _14: &str;
    let _15: &str;
    let mut _16: &std::string::String;
    let _17: &std::string::String;
    let _18: std::string::String;
    let mut _20: std::fmt::Arguments<'_>;
    let mut _21: &[&str];
    let mut _22: &[&str; 2];
    let _23: &[&str; 2];
    let _24: [&str; 2];
    let mut _25: &[core::fmt::rt::Argument<'_>];
    let mut _26: &[core::fmt::rt::Argument<'_>; 1];
    let _27: &[core::fmt::rt::Argument<'_>; 1];
    let _28: [core::fmt::rt::Argument<'_>; 1];
    let mut _29: core::fmt::rt::Argument<'_>;
    let mut _30: &error::ErrorCode;
    let _31: &error::ErrorCode;
    let _32: ();
    let mut _33: &str;
    let _34: &str;
    let mut _35: error::ErrorCode;
    let mut _36: isize;
    let _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _38: !;
    let mut _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _40: ();
    let mut _41: ();
    scope 1 {
        debug error_code => _12;
        let _19: std::string::String;
        let mut _42: &[&str; 2];
        scope 2 {
            debug res => _19;
        }
    }
    scope 3 {
        debug residual => _37;
        scope 4 {
        }
    }
    scope 5 {
        debug val => _40;
        scope 6 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &((*_1).2: std::vec::Vec<state::signed_msg_user::SignedMsgOrderId>);
        _6 = Vec::<SignedMsgOrderId>::len(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = Ge(move _6, const 1_usize);
        switchInt(move _5) -> [0: bb6, otherwise: bb2];
    }

    bb2: {
        StorageDead(_6);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &((*_1).2: std::vec::Vec<state::signed_msg_user::SignedMsgOrderId>);
        _9 = Vec::<SignedMsgOrderId>::len(move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_10);
        _8 = Le(move _9, const 128_usize);
        switchInt(move _8) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        StorageDead(_9);
        StorageLive(_11);
        _11 = ();
        _4 = std::result::Result::<(), error::ErrorCode>::Ok(move _11);
        StorageDead(_11);
        goto -> bb15;
    }

    bb5: {
        StorageDead(_9);
        goto -> bb7;
    }

    bb6: {
        StorageDead(_6);
        goto -> bb7;
    }

    bb7: {
        StorageLive(_12);
        _12 = error::ErrorCode::DefaultError;
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _42 = const _;
        _23 = &(*_42);
        _22 = &(*_23);
        _21 = move _22 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_22);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = &_12;
        _30 = &(*_31);
        _29 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _30) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_30);
        _28 = [move _29];
        StorageDead(_29);
        _27 = &_28;
        _26 = &(*_27);
        _25 = move _26 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_26);
        _20 = Arguments::<'_>::new_v1(move _21, move _25) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_25);
        StorageDead(_21);
        _19 = format(move _20) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_20);
        StorageDead(_31);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_23);
        _18 = move _19;
        StorageDead(_19);
        _17 = &_18;
        _16 = &(*_17);
        _15 = <String as Deref>::deref(move _16) -> [return: bb11, unwind: bb22];
    }

    bb11: {
        _14 = &(*_15);
        StorageDead(_16);
        _13 = solana_program::log::sol_log(move _14) -> [return: bb12, unwind: bb22];
    }

    bb12: {
        StorageDead(_14);
        drop(_18) -> [return: bb13, unwind: bb23];
    }

    bb13: {
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_13);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = const "SignedMsgUserOrders len must be between 1 and 128";
        _33 = &(*_34);
        _32 = solana_program::log::sol_log(move _33) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_33);
        StorageDead(_34);
        StorageDead(_32);
        StorageLive(_35);
        _35 = _12;
        _4 = std::result::Result::<(), error::ErrorCode>::Err(move _35);
        StorageDead(_35);
        StorageDead(_12);
        goto -> bb15;
    }

    bb15: {
        StorageDead(_8);
        StorageDead(_5);
        _3 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _4) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_4);
        _36 = discriminant(_3);
        switchInt(move _36) -> [0: bb17, 1: bb19, otherwise: bb18];
    }

    bb17: {
        StorageLive(_40);
        _40 = ((_3 as Continue).0: ());
        _2 = _40;
        StorageDead(_40);
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_41);
        _41 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _41);
        StorageDead(_41);
        goto -> bb21;
    }

    bb18: {
        unreachable;
    }

    bb19: {
        StorageLive(_37);
        _37 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_39);
        _39 = _37;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _39) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb21;
    }

    bb21: {
        return;
    }

    bb22 (cleanup): {
        drop(_18) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        resume;
    }
}
