// MIR for `controller::insurance::settle_revenue_to_insurance_fund` after PreCodegen

fn controller::insurance::settle_revenue_to_insurance_fund(_1: u64, _2: u64, _3: &mut SpotMarket, _4: i64, _5: bool) -> std::result::Result<u64, error::ErrorCode> {
    debug spot_market_vault_amount => _1;
    debug insurance_vault_amount => _2;
    debug spot_market => _3;
    debug now => _4;
    debug check_invariants => _5;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let _6: ();
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _8: std::result::Result<(), error::ErrorCode>;
    let mut _9: &mut state::spot_market::SpotMarket;
    let mut _10: std::option::Option<&state::oracle::OraclePriceData>;
    let mut _11: i64;
    let mut _12: isize;
    let _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _14: !;
    let mut _15: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _16: ();
    let _17: ();
    let mut _18: bool;
    let mut _19: i64;
    let mut _20: !;
    let _21: ();
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _23: std::result::Result<(), error::ErrorCode>;
    let mut _24: bool;
    let mut _25: u32;
    let mut _26: u32;
    let mut _27: ();
    let _28: error::ErrorCode;
    let _29: ();
    let mut _30: &str;
    let _31: &str;
    let mut _32: &std::string::String;
    let _33: &std::string::String;
    let _34: std::string::String;
    let mut _36: std::fmt::Arguments<'_>;
    let mut _37: &[&str];
    let mut _38: &[&str; 2];
    let _39: &[&str; 2];
    let _40: [&str; 2];
    let mut _41: &[core::fmt::rt::Argument<'_>];
    let mut _42: &[core::fmt::rt::Argument<'_>; 1];
    let _43: &[core::fmt::rt::Argument<'_>; 1];
    let _44: [core::fmt::rt::Argument<'_>; 1];
    let mut _45: core::fmt::rt::Argument<'_>;
    let mut _46: &error::ErrorCode;
    let _47: &error::ErrorCode;
    let _48: ();
    let mut _49: &str;
    let _50: &str;
    let mut _51: error::ErrorCode;
    let mut _52: isize;
    let _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _54: !;
    let mut _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _56: ();
    let _57: i64;
    let mut _58: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _59: std::result::Result<i64, error::ErrorCode>;
    let mut _60: &state::spot_market::SpotMarket;
    let mut _61: u64;
    let mut _62: isize;
    let _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _64: !;
    let mut _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _66: i64;
    let mut _68: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _69: std::result::Result<u128, error::ErrorCode>;
    let mut _70: u128;
    let mut _71: &state::spot_market::SpotMarket;
    let mut _72: &state::spot_market::SpotBalanceType;
    let _73: &state::spot_market::SpotBalanceType;
    let _74: state::spot_market::SpotBalanceType;
    let mut _75: isize;
    let mut _77: !;
    let mut _78: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _80: ();
    let mut _81: bool;
    let mut _82: i64;
    let mut _83: i64;
    let mut _84: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _85: std::result::Result<i64, error::ErrorCode>;
    let mut _86: u128;
    let mut _87: isize;
    let mut _89: !;
    let mut _90: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _92: u128;
    let mut _93: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _94: std::result::Result<u128, error::ErrorCode>;
    let mut _95: u128;
    let mut _96: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _97: std::result::Result<u128, error::ErrorCode>;
    let mut _98: i64;
    let mut _99: i64;
    let mut _100: isize;
    let mut _102: !;
    let mut _103: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _105: isize;
    let mut _107: !;
    let mut _108: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _110: ();
    let mut _111: bool;
    let mut _112: u128;
    let mut _114: bool;
    let mut _115: u16;
    let mut _117: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _118: std::result::Result<u128, error::ErrorCode>;
    let mut _119: u128;
    let mut _120: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _121: std::result::Result<u128, error::ErrorCode>;
    let mut _122: u128;
    let mut _123: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _124: std::result::Result<u128, error::ErrorCode>;
    let mut _125: u128;
    let mut _126: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _127: std::result::Result<u128, error::ErrorCode>;
    let mut _128: u64;
    let mut _129: isize;
    let mut _131: !;
    let mut _132: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _134: u128;
    let mut _135: isize;
    let mut _137: !;
    let mut _138: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _140: isize;
    let mut _142: !;
    let mut _143: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _145: u128;
    let mut _146: u128;
    let mut _147: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _148: std::result::Result<u128, error::ErrorCode>;
    let mut _149: u128;
    let mut _150: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _151: std::result::Result<u128, error::ErrorCode>;
    let mut _152: i64;
    let mut _153: isize;
    let mut _155: !;
    let mut _156: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _158: isize;
    let mut _160: !;
    let mut _161: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _163: isize;
    let mut _165: !;
    let mut _166: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _169: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _170: std::result::Result<u128, error::ErrorCode>;
    let mut _171: u128;
    let mut _172: isize;
    let mut _174: !;
    let mut _175: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _177: u128;
    let mut _178: u128;
    let mut _179: u128;
    let mut _181: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _182: std::result::Result<u64, error::ErrorCode>;
    let mut _183: u128;
    let mut _184: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _185: std::result::Result<u128, error::ErrorCode>;
    let mut _186: u128;
    let mut _187: isize;
    let mut _189: !;
    let mut _190: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _192: isize;
    let mut _194: !;
    let mut _195: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _197: ();
    let mut _198: bool;
    let _199: ();
    let mut _200: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _201: std::result::Result<(), error::ErrorCode>;
    let mut _202: bool;
    let mut _203: u64;
    let mut _204: ();
    let _206: ();
    let mut _207: &str;
    let _208: &str;
    let mut _209: &std::string::String;
    let _210: &std::string::String;
    let _211: std::string::String;
    let mut _213: std::fmt::Arguments<'_>;
    let mut _214: &[&str];
    let mut _215: &[&str; 2];
    let _216: &[&str; 2];
    let _217: [&str; 2];
    let mut _218: &[core::fmt::rt::Argument<'_>];
    let mut _219: &[core::fmt::rt::Argument<'_>; 1];
    let _220: &[core::fmt::rt::Argument<'_>; 1];
    let _221: [core::fmt::rt::Argument<'_>; 1];
    let mut _222: core::fmt::rt::Argument<'_>;
    let mut _223: &error::ErrorCode;
    let _224: &error::ErrorCode;
    let _225: ();
    let mut _226: &str;
    let _227: &str;
    let mut _228: error::ErrorCode;
    let mut _229: isize;
    let mut _231: !;
    let mut _232: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _234: i64;
    let mut _236: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _237: std::result::Result<u32, error::ErrorCode>;
    let mut _238: u32;
    let mut _239: u32;
    let mut _240: isize;
    let mut _242: !;
    let mut _243: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _245: ();
    let mut _246: bool;
    let mut _247: u32;
    let mut _249: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _250: std::result::Result<u128, error::ErrorCode>;
    let mut _251: u64;
    let mut _252: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _253: std::result::Result<u64, error::ErrorCode>;
    let mut _254: u64;
    let mut _255: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _256: std::result::Result<u64, error::ErrorCode>;
    let mut _257: u64;
    let mut _258: u64;
    let mut _259: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _260: std::result::Result<u64, error::ErrorCode>;
    let mut _261: u32;
    let mut _262: isize;
    let mut _264: !;
    let mut _265: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _267: isize;
    let mut _269: !;
    let mut _270: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _272: u64;
    let mut _273: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _274: std::result::Result<u64, error::ErrorCode>;
    let mut _275: u32;
    let mut _276: isize;
    let mut _278: !;
    let mut _279: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _281: isize;
    let mut _283: !;
    let mut _284: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _286: u128;
    let mut _287: u64;
    let mut _288: isize;
    let mut _290: !;
    let mut _291: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _293: u128;
    let mut _294: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _295: std::result::Result<u128, error::ErrorCode>;
    let mut _296: u128;
    let mut _297: u128;
    let mut _298: isize;
    let mut _300: !;
    let mut _301: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _304: ();
    let mut _305: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _306: std::result::Result<(), error::ErrorCode>;
    let mut _307: u128;
    let mut _308: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _309: std::result::Result<u128, error::ErrorCode>;
    let mut _310: u64;
    let mut _311: isize;
    let mut _313: !;
    let mut _314: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _316: &state::spot_market::SpotBalanceType;
    let _317: &state::spot_market::SpotBalanceType;
    let _318: state::spot_market::SpotBalanceType;
    let mut _319: &mut state::spot_market::SpotMarket;
    let mut _320: isize;
    let mut _322: !;
    let mut _323: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _325: ();
    let _326: ();
    let mut _327: &[&[u8]];
    let mut _328: &[&[u8]; 1];
    let _329: &[&[u8]; 1];
    let _330: [&[u8]; 1];
    let mut _331: &[u8];
    let _332: &[u8];
    let mut _333: &std::vec::Vec<u8>;
    let _334: &std::vec::Vec<u8>;
    let _335: std::vec::Vec<u8>;
    let mut _336: &state::events::InsuranceFundRecord;
    let _337: &state::events::InsuranceFundRecord;
    let _338: state::events::InsuranceFundRecord;
    let mut _339: i64;
    let mut _340: u16;
    let mut _341: i64;
    let mut _342: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _343: std::result::Result<i64, error::ErrorCode>;
    let mut _344: u64;
    let mut _345: isize;
    let mut _347: !;
    let mut _348: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _350: u32;
    let mut _351: u32;
    let mut _352: u64;
    let mut _353: u64;
    let mut _354: u128;
    let mut _355: u128;
    let mut _356: u64;
    scope 1 {
        debug residual => _13;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _16;
        scope 4 {
        }
    }
    scope 5 {
        debug error_code => _28;
        let _35: std::string::String;
        let mut _360: &[&str; 2];
        scope 6 {
            debug res => _35;
        }
    }
    scope 7 {
        debug residual => _53;
        scope 8 {
        }
    }
    scope 9 {
        debug val => _56;
        scope 10 {
        }
    }
    scope 11 {
        debug depositors_claim => _57;
        let mut _67: u128;
        let _76: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _79: u128;
        let mut _359: &state::spot_market::SpotBalanceType;
        scope 16 {
            debug token_amount => _67;
            let _88: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _91: i64;
            let _101: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _104: u128;
            let _106: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _109: u128;
            let _113: u128;
            let _180: u64;
            let _188: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _191: u128;
            let _193: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _196: u64;
            scope 21 {
                debug residual => _88;
                scope 22 {
                }
            }
            scope 23 {
                debug val => _91;
                scope 24 {
                }
            }
            scope 25 {
                debug residual => _101;
                scope 26 {
                }
            }
            scope 27 {
                debug val => _104;
                scope 28 {
                }
            }
            scope 29 {
                debug residual => _106;
                scope 30 {
                }
            }
            scope 31 {
                debug val => _109;
                scope 32 {
                }
            }
            scope 33 {
                debug max_apr_per_revenue_settle => _113;
                let _116: u128;
                let _130: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _133: u128;
                let _136: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _139: u128;
                let _141: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _144: u128;
                let _154: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _157: u128;
                let _159: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _162: u128;
                let _164: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _167: u128;
                scope 34 {
                    debug capped_apr_amount => _116;
                    let _168: u128;
                    let _173: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _176: u128;
                    scope 59 {
                        debug capped_token_pct_amount => _168;
                    }
                    scope 60 {
                        debug residual => _173;
                        scope 61 {
                        }
                    }
                    scope 62 {
                        debug val => _176;
                        scope 63 {
                        }
                    }
                }
                scope 35 {
                    debug residual => _130;
                    scope 36 {
                    }
                }
                scope 37 {
                    debug val => _133;
                    scope 38 {
                    }
                }
                scope 39 {
                    debug residual => _136;
                    scope 40 {
                    }
                }
                scope 41 {
                    debug val => _139;
                    scope 42 {
                    }
                }
                scope 43 {
                    debug residual => _141;
                    scope 44 {
                    }
                }
                scope 45 {
                    debug val => _144;
                    scope 46 {
                    }
                }
                scope 47 {
                    debug residual => _154;
                    scope 48 {
                    }
                }
                scope 49 {
                    debug val => _157;
                    scope 50 {
                    }
                }
                scope 51 {
                    debug residual => _159;
                    scope 52 {
                    }
                }
                scope 53 {
                    debug val => _162;
                    scope 54 {
                    }
                }
                scope 55 {
                    debug residual => _164;
                    scope 56 {
                    }
                }
                scope 57 {
                    debug val => _167;
                    scope 58 {
                    }
                }
            }
            scope 64 {
                debug insurance_fund_token_amount => _180;
                let _205: error::ErrorCode;
                let _230: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _233: ();
                let _235: u32;
                let _241: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _244: u32;
                scope 73 {
                    debug error_code => _205;
                    let _212: std::string::String;
                    let mut _358: &[&str; 2];
                    scope 74 {
                        debug res => _212;
                    }
                }
                scope 75 {
                    debug residual => _230;
                    scope 76 {
                    }
                }
                scope 77 {
                    debug val => _233;
                    scope 78 {
                    }
                }
                scope 79 {
                    debug protocol_if_factor => _235;
                    let _248: u128;
                    let _263: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _266: u64;
                    let _268: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _271: u64;
                    let _277: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _280: u64;
                    let _282: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _285: u64;
                    let _289: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _292: u128;
                    let _303: u128;
                    scope 84 {
                        debug n_shares => _248;
                        let _299: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _302: u128;
                        scope 105 {
                            debug residual => _299;
                            scope 106 {
                            }
                        }
                        scope 107 {
                            debug val => _302;
                            scope 108 {
                            }
                        }
                    }
                    scope 85 {
                        debug residual => _263;
                        scope 86 {
                        }
                    }
                    scope 87 {
                        debug val => _266;
                        scope 88 {
                        }
                    }
                    scope 89 {
                        debug residual => _268;
                        scope 90 {
                        }
                    }
                    scope 91 {
                        debug val => _271;
                        scope 92 {
                        }
                    }
                    scope 93 {
                        debug residual => _277;
                        scope 94 {
                        }
                    }
                    scope 95 {
                        debug val => _280;
                        scope 96 {
                        }
                    }
                    scope 97 {
                        debug residual => _282;
                        scope 98 {
                        }
                    }
                    scope 99 {
                        debug val => _285;
                        scope 100 {
                        }
                    }
                    scope 101 {
                        debug residual => _289;
                        scope 102 {
                        }
                    }
                    scope 103 {
                        debug val => _292;
                        scope 104 {
                        }
                    }
                    scope 109 {
                        debug total_if_shares_before => _303;
                        let _312: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _315: u128;
                        let _321: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _324: ();
                        let _346: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _349: i64;
                        let mut _357: &state::spot_market::SpotBalanceType;
                        scope 110 {
                            debug residual => _312;
                            scope 111 {
                            }
                        }
                        scope 112 {
                            debug val => _315;
                            scope 113 {
                            }
                        }
                        scope 114 {
                            debug residual => _321;
                            scope 115 {
                            }
                        }
                        scope 116 {
                            debug val => _324;
                            scope 117 {
                            }
                        }
                        scope 118 {
                            debug residual => _346;
                            scope 119 {
                            }
                        }
                        scope 120 {
                            debug val => _349;
                            scope 121 {
                            }
                        }
                    }
                }
                scope 80 {
                    debug residual => _241;
                    scope 81 {
                    }
                }
                scope 82 {
                    debug val => _244;
                    scope 83 {
                    }
                }
            }
            scope 65 {
                debug residual => _188;
                scope 66 {
                }
            }
            scope 67 {
                debug val => _191;
                scope 68 {
                }
            }
            scope 69 {
                debug residual => _193;
                scope 70 {
                }
            }
            scope 71 {
                debug val => _196;
                scope 72 {
                }
            }
        }
        scope 17 {
            debug residual => _76;
            scope 18 {
            }
        }
        scope 19 {
            debug val => _79;
            scope 20 {
            }
        }
    }
    scope 12 {
        debug residual => _63;
        scope 13 {
        }
    }
    scope 14 {
        debug val => _66;
        scope 15 {
        }
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &mut (*_3);
        StorageLive(_10);
        _10 = Option::<&OraclePriceData>::None;
        StorageLive(_11);
        _11 = _4;
        _8 = controller::spot_balance::update_spot_market_cumulative_interest(move _9, move _10, move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        _7 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_8);
        _12 = discriminant(_7);
        switchInt(move _12) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_16);
        _16 = ((_7 as Continue).0: ());
        _6 = _16;
        StorageDead(_16);
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = (((*_3).9: state::spot_market::InsuranceFund).6: i64);
        _18 = Eq(move _19, const 0_i64);
        switchInt(move _18) -> [0: bb8, otherwise: bb7];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_13);
        _13 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_15);
        _15 = _13;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _15) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb200;
    }

    bb7: {
        StorageDead(_19);
        _0 = std::result::Result::<u64, error::ErrorCode>::Ok(const 0_u64);
        StorageDead(_18);
        StorageDead(_17);
        goto -> bb200;
    }

    bb8: {
        StorageDead(_19);
        _17 = const ();
        StorageDead(_18);
        StorageDead(_17);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = (((*_3).9: state::spot_market::InsuranceFund).8: u32);
        StorageLive(_26);
        _26 = (((*_3).9: state::spot_market::InsuranceFund).7: u32);
        _24 = Le(move _25, move _26);
        switchInt(move _24) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_27);
        _27 = ();
        _23 = std::result::Result::<(), error::ErrorCode>::Ok(move _27);
        StorageDead(_27);
        goto -> bb18;
    }

    bb10: {
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_28);
        _28 = error::ErrorCode::RevenueSettingsCannotSettleToIF;
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _360 = const _;
        _39 = &(*_360);
        _38 = &(*_39);
        _37 = move _38 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_38);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = &_28;
        _46 = &(*_47);
        _45 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _46) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_46);
        _44 = [move _45];
        StorageDead(_45);
        _43 = &_44;
        _42 = &(*_43);
        _41 = move _42 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_42);
        _36 = Arguments::<'_>::new_v1(move _37, move _41) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_41);
        StorageDead(_37);
        _35 = format(move _36) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_36);
        StorageDead(_47);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_39);
        _34 = move _35;
        StorageDead(_35);
        _33 = &_34;
        _32 = &(*_33);
        _31 = <String as Deref>::deref(move _32) -> [return: bb14, unwind: bb203];
    }

    bb14: {
        _30 = &(*_31);
        StorageDead(_32);
        _29 = solana_program::log::sol_log(move _30) -> [return: bb15, unwind: bb203];
    }

    bb15: {
        StorageDead(_30);
        drop(_34) -> [return: bb16, unwind: bb204];
    }

    bb16: {
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_29);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = const "invalid if_factor settings on spot market";
        _49 = &(*_50);
        _48 = solana_program::log::sol_log(move _49) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_49);
        StorageDead(_50);
        StorageDead(_48);
        StorageLive(_51);
        _51 = _28;
        _23 = std::result::Result::<(), error::ErrorCode>::Err(move _51);
        StorageDead(_51);
        StorageDead(_28);
        goto -> bb18;
    }

    bb18: {
        StorageDead(_24);
        _22 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _23) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_23);
        _52 = discriminant(_22);
        switchInt(move _52) -> [0: bb20, 1: bb21, otherwise: bb4];
    }

    bb20: {
        StorageLive(_56);
        _56 = ((_22 as Continue).0: ());
        _21 = _56;
        StorageDead(_56);
        StorageDead(_22);
        StorageDead(_21);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = &(*_3);
        StorageLive(_61);
        _61 = _1;
        _59 = validate_spot_market_vault_amount(move _60, move _61) -> [return: bb23, unwind continue];
    }

    bb21: {
        StorageLive(_53);
        _53 = ((_22 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_55);
        _55 = _53;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _55) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_22);
        StorageDead(_21);
        goto -> bb200;
    }

    bb23: {
        StorageDead(_61);
        StorageDead(_60);
        _58 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _59) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_59);
        _62 = discriminant(_58);
        switchInt(move _62) -> [0: bb25, 1: bb26, otherwise: bb4];
    }

    bb25: {
        StorageLive(_66);
        _66 = ((_58 as Continue).0: i64);
        _57 = _66;
        StorageDead(_66);
        StorageDead(_58);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = (((*_3).7: state::perp_market::PoolBalance).0: u128);
        StorageLive(_71);
        _71 = &(*_3);
        StorageLive(_72);
        StorageLive(_73);
        _359 = const _;
        _73 = &(*_359);
        _72 = &(*_73);
        _69 = get_token_amount(move _70, move _71, move _72) -> [return: bb28, unwind continue];
    }

    bb26: {
        StorageLive(_63);
        _63 = ((_58 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_65);
        _65 = _63;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _65) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_58);
        goto -> bb199;
    }

    bb28: {
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        _68 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _69) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_69);
        _75 = discriminant(_68);
        switchInt(move _75) -> [0: bb30, 1: bb31, otherwise: bb4];
    }

    bb30: {
        StorageLive(_79);
        _79 = ((_68 as Continue).0: u128);
        _67 = _79;
        StorageDead(_79);
        StorageDead(_73);
        StorageDead(_68);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = _57;
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = _67;
        _85 = <u128 as Cast>::cast::<i64>(move _86) -> [return: bb33, unwind continue];
    }

    bb31: {
        StorageLive(_76);
        _76 = ((_68 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_78);
        _78 = _76;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _78) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_78);
        StorageDead(_76);
        StorageDead(_73);
        StorageDead(_68);
        goto -> bb198;
    }

    bb33: {
        StorageDead(_86);
        _84 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _85) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_85);
        _87 = discriminant(_84);
        switchInt(move _87) -> [0: bb35, 1: bb36, otherwise: bb4];
    }

    bb35: {
        StorageLive(_91);
        _91 = ((_84 as Continue).0: i64);
        _83 = _91;
        StorageDead(_91);
        _81 = Lt(move _82, move _83);
        switchInt(move _81) -> [0: bb39, otherwise: bb38];
    }

    bb36: {
        StorageLive(_88);
        _88 = ((_84 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_90);
        _90 = _88;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _90) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_90);
        StorageDead(_88);
        StorageDead(_84);
        StorageDead(_83);
        StorageDead(_82);
        goto -> bb197;
    }

    bb38: {
        StorageDead(_84);
        StorageDead(_83);
        StorageDead(_82);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = _57;
        _98 = <i64 as Ord>::max(move _99, const 0_i64) -> [return: bb40, unwind continue];
    }

    bb39: {
        StorageDead(_84);
        StorageDead(_83);
        StorageDead(_82);
        _80 = const ();
        goto -> bb51;
    }

    bb40: {
        StorageDead(_99);
        _97 = <i64 as Cast>::cast::<u128>(move _98) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_98);
        _96 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _97) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_97);
        _100 = discriminant(_96);
        switchInt(move _100) -> [0: bb43, 1: bb44, otherwise: bb4];
    }

    bb43: {
        StorageLive(_104);
        _104 = ((_96 as Continue).0: u128);
        _95 = _104;
        StorageDead(_104);
        _94 = <u128 as SafeMath>::safe_div(move _95, const 2_u128) -> [return: bb46, unwind continue];
    }

    bb44: {
        StorageLive(_101);
        _101 = ((_96 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_103);
        _103 = _101;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _103) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_103);
        StorageDead(_101);
        StorageDead(_95);
        StorageDead(_94);
        goto -> bb196;
    }

    bb46: {
        StorageDead(_95);
        _93 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _94) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_94);
        _105 = discriminant(_93);
        switchInt(move _105) -> [0: bb48, 1: bb49, otherwise: bb4];
    }

    bb48: {
        StorageLive(_109);
        _109 = ((_93 as Continue).0: u128);
        _92 = _109;
        StorageDead(_109);
        _67 = move _92;
        StorageDead(_92);
        StorageDead(_96);
        StorageDead(_93);
        _80 = const ();
        goto -> bb51;
    }

    bb49: {
        StorageLive(_106);
        _106 = ((_93 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_108);
        _108 = _106;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _108) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_108);
        StorageDead(_106);
        goto -> bb196;
    }

    bb51: {
        StorageDead(_81);
        StorageDead(_80);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _112 = (((*_3).9: state::spot_market::InsuranceFund).2: u128);
        _111 = Gt(move _112, const 0_u128);
        switchInt(move _111) -> [0: bb93, otherwise: bb52];
    }

    bb52: {
        StorageDead(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        _115 = ((*_3).42: u16);
        _114 = Eq(move _115, const _);
        switchInt(move _114) -> [0: bb54, otherwise: bb53];
    }

    bb53: {
        StorageDead(_115);
        _113 = const _;
        goto -> bb55;
    }

    bb54: {
        StorageDead(_115);
        _113 = const _;
        goto -> bb55;
    }

    bb55: {
        StorageDead(_114);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        _128 = _2;
        _127 = <u64 as Cast>::cast::<u128>(move _128) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_128);
        _126 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _127) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_127);
        _129 = discriminant(_126);
        switchInt(move _129) -> [0: bb58, 1: bb59, otherwise: bb4];
    }

    bb58: {
        StorageLive(_133);
        _133 = ((_126 as Continue).0: u128);
        _125 = _133;
        StorageDead(_133);
        StorageLive(_134);
        _134 = _113;
        _124 = <u128 as SafeMath>::safe_mul(move _125, move _134) -> [return: bb61, unwind continue];
    }

    bb59: {
        StorageLive(_130);
        _130 = ((_126 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_132);
        _132 = _130;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _132) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_132);
        StorageDead(_130);
        StorageDead(_125);
        StorageDead(_124);
        goto -> bb192;
    }

    bb61: {
        StorageDead(_134);
        StorageDead(_125);
        _123 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _124) -> [return: bb62, unwind continue];
    }

    bb62: {
        StorageDead(_124);
        _135 = discriminant(_123);
        switchInt(move _135) -> [0: bb63, 1: bb64, otherwise: bb4];
    }

    bb63: {
        StorageLive(_139);
        _139 = ((_123 as Continue).0: u128);
        _122 = _139;
        StorageDead(_139);
        _121 = <u128 as SafeMath>::safe_div(move _122, const _) -> [return: bb66, unwind continue];
    }

    bb64: {
        StorageLive(_136);
        _136 = ((_123 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_138);
        _138 = _136;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _138) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_138);
        StorageDead(_136);
        goto -> bb192;
    }

    bb66: {
        StorageDead(_122);
        _120 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _121) -> [return: bb67, unwind continue];
    }

    bb67: {
        StorageDead(_121);
        _140 = discriminant(_120);
        switchInt(move _140) -> [0: bb68, 1: bb69, otherwise: bb4];
    }

    bb68: {
        StorageLive(_144);
        _144 = ((_120 as Continue).0: u128);
        _119 = _144;
        StorageDead(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        _152 = (((*_3).9: state::spot_market::InsuranceFund).6: i64);
        _151 = <i64 as Cast>::cast::<u128>(move _152) -> [return: bb71, unwind continue];
    }

    bb69: {
        StorageLive(_141);
        _141 = ((_120 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_143);
        _143 = _141;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _143) -> [return: bb70, unwind continue];
    }

    bb70: {
        StorageDead(_143);
        StorageDead(_141);
        goto -> bb193;
    }

    bb71: {
        StorageDead(_152);
        _150 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _151) -> [return: bb72, unwind continue];
    }

    bb72: {
        StorageDead(_151);
        _153 = discriminant(_150);
        switchInt(move _153) -> [0: bb73, 1: bb74, otherwise: bb4];
    }

    bb73: {
        StorageLive(_157);
        _157 = ((_150 as Continue).0: u128);
        _149 = _157;
        StorageDead(_157);
        _148 = <u128 as SafeMath>::safe_div(const _, move _149) -> [return: bb76, unwind continue];
    }

    bb74: {
        StorageLive(_154);
        _154 = ((_150 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_156);
        _156 = _154;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _156) -> [return: bb75, unwind continue];
    }

    bb75: {
        StorageDead(_156);
        StorageDead(_154);
        StorageDead(_149);
        StorageDead(_148);
        goto -> bb190;
    }

    bb76: {
        StorageDead(_149);
        _147 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _148) -> [return: bb77, unwind continue];
    }

    bb77: {
        StorageDead(_148);
        _158 = discriminant(_147);
        switchInt(move _158) -> [0: bb78, 1: bb79, otherwise: bb4];
    }

    bb78: {
        StorageLive(_162);
        _162 = ((_147 as Continue).0: u128);
        _146 = _162;
        StorageDead(_162);
        _145 = <u128 as Ord>::max(move _146, const 1_u128) -> [return: bb81, unwind continue];
    }

    bb79: {
        StorageLive(_159);
        _159 = ((_147 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_161);
        _161 = _159;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _161) -> [return: bb80, unwind continue];
    }

    bb80: {
        StorageDead(_161);
        StorageDead(_159);
        goto -> bb190;
    }

    bb81: {
        StorageDead(_146);
        _118 = <u128 as SafeMath>::safe_div(move _119, move _145) -> [return: bb82, unwind continue];
    }

    bb82: {
        StorageDead(_145);
        StorageDead(_119);
        _117 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _118) -> [return: bb83, unwind continue];
    }

    bb83: {
        StorageDead(_118);
        _163 = discriminant(_117);
        switchInt(move _163) -> [0: bb84, 1: bb85, otherwise: bb4];
    }

    bb84: {
        StorageLive(_167);
        _167 = ((_117 as Continue).0: u128);
        _116 = _167;
        StorageDead(_167);
        StorageDead(_150);
        StorageDead(_147);
        StorageDead(_126);
        StorageDead(_123);
        StorageDead(_120);
        StorageDead(_117);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        _171 = _67;
        _170 = <u128 as SafeMath>::safe_div(move _171, const 10_u128) -> [return: bb87, unwind continue];
    }

    bb85: {
        StorageLive(_164);
        _164 = ((_117 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_166);
        _166 = _164;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _166) -> [return: bb86, unwind continue];
    }

    bb86: {
        StorageDead(_166);
        StorageDead(_164);
        goto -> bb191;
    }

    bb87: {
        StorageDead(_171);
        _169 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _170) -> [return: bb88, unwind continue];
    }

    bb88: {
        StorageDead(_170);
        _172 = discriminant(_169);
        switchInt(move _172) -> [0: bb89, 1: bb90, otherwise: bb4];
    }

    bb89: {
        StorageLive(_176);
        _176 = ((_169 as Continue).0: u128);
        _168 = _176;
        StorageDead(_176);
        StorageDead(_169);
        StorageLive(_177);
        StorageLive(_178);
        _178 = _168;
        StorageLive(_179);
        _179 = _116;
        _177 = <u128 as Ord>::min(move _178, move _179) -> [return: bb92, unwind continue];
    }

    bb90: {
        StorageLive(_173);
        _173 = ((_169 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_175);
        _175 = _173;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _175) -> [return: bb91, unwind continue];
    }

    bb91: {
        StorageDead(_175);
        StorageDead(_173);
        StorageDead(_169);
        StorageDead(_168);
        goto -> bb195;
    }

    bb92: {
        StorageDead(_179);
        StorageDead(_178);
        _67 = move _177;
        StorageDead(_177);
        _110 = const ();
        StorageDead(_168);
        StorageDead(_116);
        StorageDead(_113);
        goto -> bb94;
    }

    bb93: {
        StorageDead(_112);
        _110 = const ();
        goto -> bb94;
    }

    bb94: {
        StorageDead(_111);
        StorageDead(_110);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        _186 = _67;
        _185 = get_proportion_u128(move _186, const _, const _) -> [return: bb95, unwind continue];
    }

    bb95: {
        StorageDead(_186);
        _184 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _185) -> [return: bb96, unwind continue];
    }

    bb96: {
        StorageDead(_185);
        _187 = discriminant(_184);
        switchInt(move _187) -> [0: bb97, 1: bb98, otherwise: bb4];
    }

    bb97: {
        StorageLive(_191);
        _191 = ((_184 as Continue).0: u128);
        _183 = _191;
        StorageDead(_191);
        _182 = <u128 as Cast>::cast::<u64>(move _183) -> [return: bb100, unwind continue];
    }

    bb98: {
        StorageLive(_188);
        _188 = ((_184 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_190);
        _190 = _188;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _190) -> [return: bb99, unwind continue];
    }

    bb99: {
        StorageDead(_190);
        StorageDead(_188);
        StorageDead(_183);
        StorageDead(_182);
        goto -> bb188;
    }

    bb100: {
        StorageDead(_183);
        _181 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _182) -> [return: bb101, unwind continue];
    }

    bb101: {
        StorageDead(_182);
        _192 = discriminant(_181);
        switchInt(move _192) -> [0: bb102, 1: bb103, otherwise: bb4];
    }

    bb102: {
        StorageLive(_196);
        _196 = ((_181 as Continue).0: u64);
        _180 = _196;
        StorageDead(_196);
        StorageDead(_184);
        StorageDead(_181);
        StorageLive(_197);
        StorageLive(_198);
        _198 = _5;
        switchInt(move _198) -> [0: bb106, otherwise: bb105];
    }

    bb103: {
        StorageLive(_193);
        _193 = ((_181 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_195);
        _195 = _193;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _195) -> [return: bb104, unwind continue];
    }

    bb104: {
        StorageDead(_195);
        StorageDead(_193);
        goto -> bb188;
    }

    bb105: {
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        _203 = _180;
        _202 = Ne(move _203, const 0_u64);
        switchInt(move _202) -> [0: bb108, otherwise: bb107];
    }

    bb106: {
        _197 = const ();
        goto -> bb121;
    }

    bb107: {
        StorageDead(_203);
        StorageLive(_204);
        _204 = ();
        _201 = std::result::Result::<(), error::ErrorCode>::Ok(move _204);
        StorageDead(_204);
        goto -> bb116;
    }

    bb108: {
        StorageDead(_203);
        StorageLive(_205);
        _205 = error::ErrorCode::NoRevenueToSettleToIF;
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        _358 = const _;
        _216 = &(*_358);
        _215 = &(*_216);
        _214 = move _215 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_215);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        _224 = &_205;
        _223 = &(*_224);
        _222 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _223) -> [return: bb109, unwind continue];
    }

    bb109: {
        StorageDead(_223);
        _221 = [move _222];
        StorageDead(_222);
        _220 = &_221;
        _219 = &(*_220);
        _218 = move _219 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_219);
        _213 = Arguments::<'_>::new_v1(move _214, move _218) -> [return: bb110, unwind continue];
    }

    bb110: {
        StorageDead(_218);
        StorageDead(_214);
        _212 = format(move _213) -> [return: bb111, unwind continue];
    }

    bb111: {
        StorageDead(_213);
        StorageDead(_224);
        StorageDead(_221);
        StorageDead(_220);
        StorageDead(_216);
        _211 = move _212;
        StorageDead(_212);
        _210 = &_211;
        _209 = &(*_210);
        _208 = <String as Deref>::deref(move _209) -> [return: bb112, unwind: bb202];
    }

    bb112: {
        _207 = &(*_208);
        StorageDead(_209);
        _206 = solana_program::log::sol_log(move _207) -> [return: bb113, unwind: bb202];
    }

    bb113: {
        StorageDead(_207);
        drop(_211) -> [return: bb114, unwind: bb204];
    }

    bb114: {
        StorageDead(_211);
        StorageDead(_210);
        StorageDead(_208);
        StorageDead(_206);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        _227 = const "no amount to settle to insurance fund";
        _226 = &(*_227);
        _225 = solana_program::log::sol_log(move _226) -> [return: bb115, unwind continue];
    }

    bb115: {
        StorageDead(_226);
        StorageDead(_227);
        StorageDead(_225);
        StorageLive(_228);
        _228 = _205;
        _201 = std::result::Result::<(), error::ErrorCode>::Err(move _228);
        StorageDead(_228);
        StorageDead(_205);
        goto -> bb116;
    }

    bb116: {
        StorageDead(_202);
        _200 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _201) -> [return: bb117, unwind continue];
    }

    bb117: {
        StorageDead(_201);
        _229 = discriminant(_200);
        switchInt(move _229) -> [0: bb118, 1: bb119, otherwise: bb4];
    }

    bb118: {
        StorageLive(_233);
        _233 = ((_200 as Continue).0: ());
        _199 = _233;
        StorageDead(_233);
        StorageDead(_200);
        StorageDead(_199);
        _197 = const ();
        goto -> bb121;
    }

    bb119: {
        StorageLive(_230);
        _230 = ((_200 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_232);
        _232 = _230;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _232) -> [return: bb120, unwind continue];
    }

    bb120: {
        StorageDead(_232);
        StorageDead(_230);
        StorageDead(_200);
        StorageDead(_199);
        StorageDead(_198);
        StorageDead(_197);
        goto -> bb189;
    }

    bb121: {
        StorageDead(_198);
        StorageDead(_197);
        StorageLive(_234);
        _234 = _4;
        (((*_3).9: state::spot_market::InsuranceFund).5: i64) = move _234;
        StorageDead(_234);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        _238 = (((*_3).9: state::spot_market::InsuranceFund).7: u32);
        StorageLive(_239);
        _239 = (((*_3).9: state::spot_market::InsuranceFund).8: u32);
        _237 = <u32 as SafeMath>::safe_sub(move _238, move _239) -> [return: bb122, unwind continue];
    }

    bb122: {
        StorageDead(_239);
        StorageDead(_238);
        _236 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _237) -> [return: bb123, unwind continue];
    }

    bb123: {
        StorageDead(_237);
        _240 = discriminant(_236);
        switchInt(move _240) -> [0: bb124, 1: bb125, otherwise: bb4];
    }

    bb124: {
        StorageLive(_244);
        _244 = ((_236 as Continue).0: u32);
        _235 = _244;
        StorageDead(_244);
        StorageDead(_236);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        _247 = _235;
        _246 = Gt(move _247, const 0_u32);
        switchInt(move _246) -> [0: bb128, otherwise: bb127];
    }

    bb125: {
        StorageLive(_241);
        _241 = ((_236 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_243);
        _243 = _241;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _243) -> [return: bb126, unwind continue];
    }

    bb126: {
        StorageDead(_243);
        StorageDead(_241);
        StorageDead(_236);
        goto -> bb187;
    }

    bb127: {
        StorageDead(_247);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        _257 = _180;
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        _261 = _235;
        _260 = <u32 as Cast>::cast::<u64>(move _261) -> [return: bb129, unwind continue];
    }

    bb128: {
        StorageDead(_247);
        _245 = const ();
        goto -> bb159;
    }

    bb129: {
        StorageDead(_261);
        _259 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _260) -> [return: bb130, unwind continue];
    }

    bb130: {
        StorageDead(_260);
        _262 = discriminant(_259);
        switchInt(move _262) -> [0: bb131, 1: bb132, otherwise: bb4];
    }

    bb131: {
        StorageLive(_266);
        _266 = ((_259 as Continue).0: u64);
        _258 = _266;
        StorageDead(_266);
        _256 = <u64 as SafeMath>::safe_mul(move _257, move _258) -> [return: bb134, unwind continue];
    }

    bb132: {
        StorageLive(_263);
        _263 = ((_259 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_265);
        _265 = _263;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _265) -> [return: bb133, unwind continue];
    }

    bb133: {
        StorageDead(_265);
        StorageDead(_263);
        StorageDead(_258);
        StorageDead(_257);
        StorageDead(_256);
        goto -> bb184;
    }

    bb134: {
        StorageDead(_258);
        StorageDead(_257);
        _255 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _256) -> [return: bb135, unwind continue];
    }

    bb135: {
        StorageDead(_256);
        _267 = discriminant(_255);
        switchInt(move _267) -> [0: bb136, 1: bb137, otherwise: bb4];
    }

    bb136: {
        StorageLive(_271);
        _271 = ((_255 as Continue).0: u64);
        _254 = _271;
        StorageDead(_271);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        _275 = (((*_3).9: state::spot_market::InsuranceFund).7: u32);
        _274 = <u32 as Cast>::cast::<u64>(move _275) -> [return: bb139, unwind continue];
    }

    bb137: {
        StorageLive(_268);
        _268 = ((_255 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_270);
        _270 = _268;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _270) -> [return: bb138, unwind continue];
    }

    bb138: {
        StorageDead(_270);
        StorageDead(_268);
        goto -> bb184;
    }

    bb139: {
        StorageDead(_275);
        _273 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _274) -> [return: bb140, unwind continue];
    }

    bb140: {
        StorageDead(_274);
        _276 = discriminant(_273);
        switchInt(move _276) -> [0: bb141, 1: bb142, otherwise: bb4];
    }

    bb141: {
        StorageLive(_280);
        _280 = ((_273 as Continue).0: u64);
        _272 = _280;
        StorageDead(_280);
        _253 = <u64 as SafeMath>::safe_div(move _254, move _272) -> [return: bb144, unwind continue];
    }

    bb142: {
        StorageLive(_277);
        _277 = ((_273 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_279);
        _279 = _277;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _279) -> [return: bb143, unwind continue];
    }

    bb143: {
        StorageDead(_279);
        StorageDead(_277);
        StorageDead(_272);
        StorageDead(_254);
        StorageDead(_253);
        goto -> bb182;
    }

    bb144: {
        StorageDead(_272);
        StorageDead(_254);
        _252 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _253) -> [return: bb145, unwind continue];
    }

    bb145: {
        StorageDead(_253);
        _281 = discriminant(_252);
        switchInt(move _281) -> [0: bb146, 1: bb147, otherwise: bb4];
    }

    bb146: {
        StorageLive(_285);
        _285 = ((_252 as Continue).0: u64);
        _251 = _285;
        StorageDead(_285);
        StorageLive(_286);
        _286 = (((*_3).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_287);
        _287 = _2;
        _250 = vault_amount_to_if_shares(move _251, move _286, move _287) -> [return: bb149, unwind continue];
    }

    bb147: {
        StorageLive(_282);
        _282 = ((_252 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_284);
        _284 = _282;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _284) -> [return: bb148, unwind continue];
    }

    bb148: {
        StorageDead(_284);
        StorageDead(_282);
        goto -> bb182;
    }

    bb149: {
        StorageDead(_287);
        StorageDead(_286);
        StorageDead(_251);
        _249 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _250) -> [return: bb150, unwind continue];
    }

    bb150: {
        StorageDead(_250);
        _288 = discriminant(_249);
        switchInt(move _288) -> [0: bb151, 1: bb152, otherwise: bb4];
    }

    bb151: {
        StorageLive(_292);
        _292 = ((_249 as Continue).0: u128);
        _248 = _292;
        StorageDead(_292);
        StorageDead(_273);
        StorageDead(_259);
        StorageDead(_255);
        StorageDead(_252);
        StorageDead(_249);
        StorageLive(_293);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        _296 = (((*_3).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_297);
        _297 = _248;
        _295 = <u128 as SafeMath>::safe_add(move _296, move _297) -> [return: bb154, unwind continue];
    }

    bb152: {
        StorageLive(_289);
        _289 = ((_249 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_291);
        _291 = _289;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _291) -> [return: bb153, unwind continue];
    }

    bb153: {
        StorageDead(_291);
        StorageDead(_289);
        goto -> bb183;
    }

    bb154: {
        StorageDead(_297);
        StorageDead(_296);
        _294 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _295) -> [return: bb155, unwind continue];
    }

    bb155: {
        StorageDead(_295);
        _298 = discriminant(_294);
        switchInt(move _298) -> [0: bb156, 1: bb157, otherwise: bb4];
    }

    bb156: {
        StorageLive(_302);
        _302 = ((_294 as Continue).0: u128);
        _293 = _302;
        StorageDead(_302);
        (((*_3).9: state::spot_market::InsuranceFund).1: u128) = move _293;
        StorageDead(_293);
        StorageDead(_294);
        _245 = const ();
        StorageDead(_248);
        goto -> bb159;
    }

    bb157: {
        StorageLive(_299);
        _299 = ((_294 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_301);
        _301 = _299;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _301) -> [return: bb158, unwind continue];
    }

    bb158: {
        StorageDead(_301);
        StorageDead(_299);
        StorageDead(_293);
        StorageDead(_294);
        goto -> bb186;
    }

    bb159: {
        StorageDead(_246);
        StorageDead(_245);
        StorageLive(_303);
        _303 = (((*_3).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        _310 = _180;
        _309 = <u64 as Cast>::cast::<u128>(move _310) -> [return: bb160, unwind continue];
    }

    bb160: {
        StorageDead(_310);
        _308 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _309) -> [return: bb161, unwind continue];
    }

    bb161: {
        StorageDead(_309);
        _311 = discriminant(_308);
        switchInt(move _311) -> [0: bb162, 1: bb163, otherwise: bb4];
    }

    bb162: {
        StorageLive(_315);
        _315 = ((_308 as Continue).0: u128);
        _307 = _315;
        StorageDead(_315);
        StorageLive(_316);
        StorageLive(_317);
        _357 = const _;
        _317 = &(*_357);
        _316 = &(*_317);
        StorageLive(_319);
        _319 = &mut (*_3);
        _306 = update_revenue_pool_balances(move _307, move _316, move _319) -> [return: bb165, unwind continue];
    }

    bb163: {
        StorageLive(_312);
        _312 = ((_308 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_314);
        _314 = _312;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _314) -> [return: bb164, unwind continue];
    }

    bb164: {
        StorageDead(_314);
        StorageDead(_312);
        StorageDead(_307);
        StorageDead(_306);
        goto -> bb180;
    }

    bb165: {
        StorageDead(_319);
        StorageDead(_316);
        StorageDead(_307);
        _305 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _306) -> [return: bb166, unwind continue];
    }

    bb166: {
        StorageDead(_306);
        _320 = discriminant(_305);
        switchInt(move _320) -> [0: bb167, 1: bb168, otherwise: bb4];
    }

    bb167: {
        StorageLive(_324);
        _324 = ((_305 as Continue).0: ());
        _304 = _324;
        StorageDead(_324);
        StorageDead(_317);
        StorageDead(_308);
        StorageDead(_305);
        StorageDead(_304);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        StorageLive(_338);
        StorageLive(_339);
        _339 = _4;
        StorageLive(_340);
        _340 = ((*_3).42: u16);
        StorageLive(_341);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        _344 = _180;
        _343 = <u64 as Cast>::cast::<i64>(move _344) -> [return: bb170, unwind continue];
    }

    bb168: {
        StorageLive(_321);
        _321 = ((_305 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_323);
        _323 = _321;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _323) -> [return: bb169, unwind continue];
    }

    bb169: {
        StorageDead(_323);
        StorageDead(_321);
        StorageDead(_317);
        goto -> bb180;
    }

    bb170: {
        StorageDead(_344);
        _342 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _343) -> [return: bb171, unwind continue];
    }

    bb171: {
        StorageDead(_343);
        _345 = discriminant(_342);
        switchInt(move _345) -> [0: bb172, 1: bb173, otherwise: bb4];
    }

    bb172: {
        StorageLive(_349);
        _349 = ((_342 as Continue).0: i64);
        _341 = _349;
        StorageDead(_349);
        StorageLive(_350);
        _350 = (((*_3).9: state::spot_market::InsuranceFund).8: u32);
        StorageLive(_351);
        _351 = (((*_3).9: state::spot_market::InsuranceFund).7: u32);
        StorageLive(_352);
        _352 = _1;
        StorageLive(_353);
        _353 = _2;
        StorageLive(_354);
        _354 = _303;
        StorageLive(_355);
        _355 = (((*_3).9: state::spot_market::InsuranceFund).1: u128);
        _338 = InsuranceFundRecord { ts: move _339, spot_market_index: move _340, perp_market_index: const 0_u16, user_if_factor: move _350, total_if_factor: move _351, vault_amount_before: move _352, insurance_vault_amount_before: move _353, total_if_shares_before: move _354, total_if_shares_after: move _355, amount: move _341 };
        StorageDead(_355);
        StorageDead(_354);
        StorageDead(_353);
        StorageDead(_352);
        StorageDead(_351);
        StorageDead(_350);
        StorageDead(_341);
        StorageDead(_340);
        StorageDead(_339);
        _337 = &_338;
        _336 = &(*_337);
        _335 = <InsuranceFundRecord as anchor_lang::Event>::data(move _336) -> [return: bb175, unwind continue];
    }

    bb173: {
        StorageLive(_346);
        _346 = ((_342 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_348);
        _348 = _346;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _348) -> [return: bb174, unwind continue];
    }

    bb174: {
        StorageDead(_348);
        StorageDead(_346);
        StorageDead(_341);
        StorageDead(_340);
        StorageDead(_339);
        StorageDead(_336);
        StorageDead(_333);
        StorageDead(_331);
        StorageDead(_328);
        StorageDead(_327);
        StorageDead(_342);
        StorageDead(_338);
        StorageDead(_337);
        StorageDead(_335);
        StorageDead(_334);
        StorageDead(_332);
        StorageDead(_330);
        StorageDead(_329);
        StorageDead(_326);
        StorageDead(_325);
        goto -> bb181;
    }

    bb175: {
        StorageDead(_336);
        _334 = &_335;
        _333 = &(*_334);
        _332 = <Vec<u8> as Deref>::deref(move _333) -> [return: bb176, unwind: bb201];
    }

    bb176: {
        _331 = &(*_332);
        StorageDead(_333);
        _330 = [move _331];
        StorageDead(_331);
        _329 = &_330;
        _328 = &(*_329);
        _327 = move _328 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_328);
        _326 = solana_program::log::sol_log_data(move _327) -> [return: bb177, unwind: bb201];
    }

    bb177: {
        StorageDead(_327);
        drop(_335) -> [return: bb178, unwind: bb204];
    }

    bb178: {
        StorageDead(_342);
        StorageDead(_338);
        StorageDead(_337);
        StorageDead(_335);
        StorageDead(_334);
        StorageDead(_332);
        StorageDead(_330);
        StorageDead(_329);
        StorageDead(_326);
        _325 = const ();
        StorageDead(_325);
        StorageLive(_356);
        _356 = _180;
        _0 = <u64 as Cast>::cast::<u64>(move _356) -> [return: bb179, unwind continue];
    }

    bb179: {
        StorageDead(_356);
        StorageDead(_303);
        StorageDead(_235);
        StorageDead(_180);
        StorageDead(_67);
        StorageDead(_57);
        goto -> bb200;
    }

    bb180: {
        StorageDead(_308);
        StorageDead(_305);
        StorageDead(_304);
        goto -> bb181;
    }

    bb181: {
        StorageDead(_303);
        goto -> bb187;
    }

    bb182: {
        StorageDead(_251);
        StorageDead(_250);
        goto -> bb183;
    }

    bb183: {
        StorageDead(_273);
        goto -> bb185;
    }

    bb184: {
        StorageDead(_254);
        StorageDead(_253);
        StorageDead(_251);
        StorageDead(_250);
        goto -> bb185;
    }

    bb185: {
        StorageDead(_259);
        StorageDead(_255);
        StorageDead(_252);
        StorageDead(_249);
        goto -> bb186;
    }

    bb186: {
        StorageDead(_248);
        StorageDead(_246);
        StorageDead(_245);
        goto -> bb187;
    }

    bb187: {
        StorageDead(_235);
        goto -> bb189;
    }

    bb188: {
        StorageDead(_184);
        StorageDead(_181);
        goto -> bb189;
    }

    bb189: {
        StorageDead(_180);
        goto -> bb198;
    }

    bb190: {
        StorageDead(_146);
        StorageDead(_145);
        StorageDead(_119);
        StorageDead(_118);
        goto -> bb191;
    }

    bb191: {
        StorageDead(_150);
        StorageDead(_147);
        goto -> bb194;
    }

    bb192: {
        StorageDead(_122);
        StorageDead(_121);
        goto -> bb193;
    }

    bb193: {
        StorageDead(_119);
        StorageDead(_118);
        goto -> bb194;
    }

    bb194: {
        StorageDead(_126);
        StorageDead(_123);
        StorageDead(_120);
        StorageDead(_117);
        goto -> bb195;
    }

    bb195: {
        StorageDead(_116);
        StorageDead(_113);
        StorageDead(_111);
        StorageDead(_110);
        goto -> bb198;
    }

    bb196: {
        StorageDead(_92);
        StorageDead(_96);
        StorageDead(_93);
        goto -> bb197;
    }

    bb197: {
        StorageDead(_81);
        StorageDead(_80);
        goto -> bb198;
    }

    bb198: {
        StorageDead(_67);
        goto -> bb199;
    }

    bb199: {
        StorageDead(_57);
        goto -> bb200;
    }

    bb200: {
        return;
    }

    bb201 (cleanup): {
        drop(_335) -> [return: bb204, unwind terminate(cleanup)];
    }

    bb202 (cleanup): {
        drop(_211) -> [return: bb204, unwind terminate(cleanup)];
    }

    bb203 (cleanup): {
        drop(_34) -> [return: bb204, unwind terminate(cleanup)];
    }

    bb204 (cleanup): {
        resume;
    }
}
