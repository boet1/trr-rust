// MIR for `account::<impl at programs/openbook_v2/src/account.rs:286:1: 286:14>::is_expired` before PreCodegen

fn account::<impl at programs/openbook_v2/src/account.rs:286:1: 286:14>::is_expired(_1: &LeafNode, _2: u64) -> bool {
    debug self => _1;
    debug now_ts => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: u16;
    let mut _5: u64;
    let mut _6: u64;
    let mut _7: u64;
    let mut _8: u64;
    let mut _9: u16;
    let mut _10: (u64, bool);

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = ((*_1).2: u16);
        _3 = Gt(move _4, const 0_u16);
        switchInt(move _3) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_4);
        StorageLive(_5);
        _5 = _2;
        StorageLive(_6);
        StorageLive(_7);
        _7 = ((*_1).7: u64);
        StorageLive(_8);
        StorageLive(_9);
        _9 = ((*_1).2: u16);
        _8 = move _9 as u64 (IntToInt);
        StorageDead(_9);
        _10 = CheckedAdd(_7, _8);
        assert(!move (_10.1: bool), "attempt to compute `{} + {}`, which would overflow", move _7, move _8) -> [success: bb3, unwind continue];
    }

    bb2: {
        StorageDead(_4);
        _0 = const false;
        goto -> bb4;
    }

    bb3: {
        _6 = move (_10.0: u64);
        StorageDead(_8);
        StorageDead(_7);
        _0 = Ge(move _5, move _6);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb4;
    }

    bb4: {
        StorageDead(_3);
        return;
    }
}
