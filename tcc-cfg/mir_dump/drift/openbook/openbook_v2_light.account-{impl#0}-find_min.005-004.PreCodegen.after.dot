digraph Mir_0_13 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn BookSide::find_min(_1: &amp;ReErased account::BookSide) -&gt; std::option::Option&lt;u64&gt;<br align="left"/>let mut _2: u64;<br align="left"/>let _3: ();<br align="left"/>let mut _4: std::slice::Iter&lt;ReErased, account::AnyNode&gt;;<br align="left"/>let mut _5: std::slice::Iter&lt;ReErased, account::AnyNode&gt;;<br align="left"/>let mut _6: &amp;ReErased [account::AnyNode];<br align="left"/>let mut _7: &amp;ReErased [account::AnyNode; 1024_usize];<br align="left"/>let mut _8: std::slice::Iter&lt;ReErased, account::AnyNode&gt;;<br align="left"/>let mut _9: ();<br align="left"/>let _10: ();<br align="left"/>let mut _11: std::option::Option&lt;&amp;ReErased account::AnyNode&gt;;<br align="left"/>let mut _12: &amp;ReErased mut std::slice::Iter&lt;ReErased, account::AnyNode&gt;;<br align="left"/>let mut _13: &amp;ReErased mut std::slice::Iter&lt;ReErased, account::AnyNode&gt;;<br align="left"/>let mut _14: isize;<br align="left"/>let mut _15: !;<br align="left"/>let _16: &amp;ReErased account::AnyNode;<br align="left"/>let mut _17: bool;<br align="left"/>let mut _18: u8;<br align="left"/>let _19: u64;<br align="left"/>let mut _20: u128;<br align="left"/>let mut _21: u128;<br align="left"/>let mut _22: std::result::Result&lt;u128, std::io::Error&gt;;<br align="left"/>let mut _23: &amp;ReErased [u8];<br align="left"/>let _24: &amp;ReErased [u8];<br align="left"/>let _25: &amp;ReErased [u8];<br align="left"/>let mut _26: &amp;ReErased [u8; 79_usize];<br align="left"/>let mut _27: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _28: u32;<br align="left"/>let mut _29: bool;<br align="left"/>let mut _30: bool;<br align="left"/>let mut _31: u64;<br align="left"/>let mut _32: u64;<br align="left"/>let mut _33: bool;<br align="left"/>let mut _34: u64;<br align="left"/>let mut _35: u64;<br align="left"/>let _36: ();<br align="left"/>let mut _37: bool;<br align="left"/>let mut _38: u64;<br align="left"/>let mut _39: !;<br align="left"/>let mut _40: u64;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug p =&gt; _2;<br align="left"/>debug iter =&gt; _8;<br align="left"/>debug node =&gt; _16;<br align="left"/>debug price =&gt; _19;<br align="left"/>>;
    bb0__0_13 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>_2 = const 0_u64<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>_7 = &amp;(((*_1).3: account::OrderTreeNodes).6: [account::AnyNode; 1024])<br/>_6 = move _7 as &amp;[account::AnyNode] (PointerCoercion(Unsize))<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">_5 = core::slice::&lt;impl [AnyNode]&gt;::iter(move _6)</td></tr></table>>];
    bb1__0_13 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/></td></tr><tr><td align="left">_4 = &lt;std::slice::Iter&lt;'_, AnyNode&gt; as IntoIterator&gt;::into_iter(move _5)</td></tr></table>>];
    bb2__0_13 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageLive(_8)<br/>_8 = move _4<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb3__0_13 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>_13 = &amp;mut _8<br/>_12 = &amp;mut (*_13)<br/></td></tr><tr><td align="left">_11 = &lt;std::slice::Iter&lt;'_, AnyNode&gt; as Iterator&gt;::next(move _12)</td></tr></table>>];
    bb4__0_13 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>_14 = discriminant(_11)<br/></td></tr><tr><td align="left">switchInt(move _14)</td></tr></table>>];
    bb5__0_13 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_16)<br/>_16 = ((_11 as Some).0: &amp;account::AnyNode)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>_18 = ((*_16).0: u8)<br/>_17 = Eq(move _18, const _)<br/></td></tr><tr><td align="left">switchInt(move _17)</td></tr></table>>];
    bb6__0_13 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb7__0_13 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_3 = const ()<br/>StorageDead(_13)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/>StorageDead(_8)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>StorageLive(_38)<br/>_38 = _2<br/>_37 = Gt(move _38, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _37)</td></tr></table>>];
    bb8__0_13 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>_26 = &amp;((*_16).1: [u8; 79])<br/>StorageLive(_27)<br/>_27 = std::ops::Range::&lt;usize&gt; { start: const 7_usize, end: const 23_usize }<br/></td></tr><tr><td align="left">_25 = &lt;[u8; 79] as Index&lt;std::ops::Range&lt;usize&gt;&gt;&gt;::index(move _26, move _27)</td></tr></table>>];
    bb9__0_13 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>StorageDead(_26)<br/>_24 = &amp;(*_25)<br/>_23 = &amp;(*_24)<br/></td></tr><tr><td align="left">_22 = &lt;u128 as anchor_lang::AnchorDeserialize&gt;::try_from_slice(move _23)</td></tr></table>>];
    bb10__0_13 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/></td></tr><tr><td align="left">_21 = std::result::Result::&lt;u128, std::io::Error&gt;::unwrap(move _22)</td></tr></table>>];
    bb11__0_13 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_22)<br/>_28 = const 64_i32 as u32 (IntToInt)<br/>_29 = Lt(move _28, const 128_u32)<br/></td></tr><tr><td align="left">assert(move _29, &quot;attempt to shift right by `{}`, which would overflow&quot;, const 64_i32)</td></tr></table>>];
    bb12__0_13 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">_20 = Shr(move _21, const 64_i32)<br/>StorageDead(_21)<br/>_19 = move _20 as u64 (IntToInt)<br/>StorageDead(_20)<br/>StorageDead(_25)<br/>StorageDead(_24)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>_31 = _19<br/>StorageLive(_32)<br/>_32 = _2<br/>_30 = Lt(move _31, move _32)<br/></td></tr><tr><td align="left">switchInt(move _30)</td></tr></table>>];
    bb13__0_13 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_32)<br/>StorageDead(_31)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_13 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_32)<br/>StorageDead(_31)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>_34 = _2<br/>_33 = Eq(move _34, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _33)</td></tr></table>>];
    bb15__0_13 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>StorageLive(_35)<br/>_35 = _19<br/>_2 = move _35<br/>StorageDead(_35)<br/>_10 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb16__0_13 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>_10 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_13 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>StorageDead(_30)<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_13 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>_10 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb19__0_13 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageDead(_16)<br/>StorageDead(_13)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/>_9 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_13 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_38)<br/>StorageLive(_40)<br/>_40 = _2<br/>_0 = Option::&lt;u64&gt;::Some(move _40)<br/>StorageDead(_40)<br/>StorageDead(_37)<br/>StorageDead(_36)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb21__0_13 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_38)<br/>_36 = const ()<br/>StorageDead(_37)<br/>StorageDead(_36)<br/>_0 = Option::&lt;u64&gt;::None<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb22__0_13 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left">return</td></tr></table>>];
    bb23__0_13 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">23 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_13 -> bb1__0_13 [label="return"];
    bb1__0_13 -> bb2__0_13 [label="return"];
    bb2__0_13 -> bb3__0_13 [label=""];
    bb3__0_13 -> bb4__0_13 [label="return"];
    bb4__0_13 -> bb7__0_13 [label="0"];
    bb4__0_13 -> bb5__0_13 [label="1"];
    bb4__0_13 -> bb6__0_13 [label="otherwise"];
    bb5__0_13 -> bb18__0_13 [label="0"];
    bb5__0_13 -> bb8__0_13 [label="otherwise"];
    bb7__0_13 -> bb21__0_13 [label="0"];
    bb7__0_13 -> bb20__0_13 [label="otherwise"];
    bb8__0_13 -> bb9__0_13 [label="return"];
    bb9__0_13 -> bb10__0_13 [label="return"];
    bb10__0_13 -> bb11__0_13 [label="return"];
    bb10__0_13 -> bb23__0_13 [label="unwind"];
    bb11__0_13 -> bb12__0_13 [label="success"];
    bb12__0_13 -> bb14__0_13 [label="0"];
    bb12__0_13 -> bb13__0_13 [label="otherwise"];
    bb13__0_13 -> bb15__0_13 [label=""];
    bb14__0_13 -> bb16__0_13 [label="0"];
    bb14__0_13 -> bb15__0_13 [label="otherwise"];
    bb15__0_13 -> bb17__0_13 [label=""];
    bb16__0_13 -> bb17__0_13 [label=""];
    bb17__0_13 -> bb19__0_13 [label=""];
    bb18__0_13 -> bb19__0_13 [label=""];
    bb19__0_13 -> bb3__0_13 [label=""];
    bb20__0_13 -> bb22__0_13 [label=""];
    bb21__0_13 -> bb22__0_13 [label=""];
}
