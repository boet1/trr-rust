// MIR for `context::<impl at programs/openbook_v2/src/context.rs:28:10: 28:18>::try_accounts` after PreCodegen

fn context::<impl at programs/openbook_v2/src/context.rs:28:10: 28:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut ConsumeEventsBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<context::ConsumeEvents<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<context::ConsumeEvents<'_>, anchor_lang::error::Error>;
    let _6: anchor_lang::prelude::Signer<'_>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _8: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _9: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _10: &anchor_lang::prelude::Pubkey;
    let mut _11: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _12: &[u8];
    let mut _13: &mut context::ConsumeEventsBumps;
    let mut _14: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _15: {closure@programs/openbook_v2/src/context.rs:28:10: 28:18};
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _20: anchor_lang::prelude::Signer<'_>;
    let mut _21: context::ConsumeEvents<'_>;
    let mut _22: anchor_lang::prelude::Signer<'_>;
    let mut _23: isize;
    let mut _24: isize;
    let mut _25: isize;
    let mut _26: isize;
    let mut _27: isize;
    scope 1 {
        debug dummy_authority => _6;
    }
    scope 2 {
        debug residual => _17;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _20;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_1);
        StorageLive(_11);
        _11 = &mut (*_2);
        StorageLive(_12);
        _12 = &(*_3);
        StorageLive(_13);
        _13 = &mut (*_4);
        StorageLive(_14);
        _14 = &mut (*_5);
        _9 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, ConsumeEventsBumps>>::try_accounts(move _10, move _11, move _12, move _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_15);
        _15 = {closure@programs/openbook_v2/src/context.rs:28:10: 28:18};
        _8 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/openbook_v2/src/context.rs:28:10: 28:18}>(move _9, move _15) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        StorageDead(_15);
        StorageDead(_9);
        _7 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _8) -> [return: bb3, unwind: bb9];
    }

    bb3: {
        StorageDead(_8);
        _16 = discriminant(_7);
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_20);
        _20 = move ((_7 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _6 = move _20;
        StorageDead(_20);
        _23 = discriminant(_7);
        StorageDead(_7);
        StorageLive(_21);
        StorageLive(_22);
        _22 = move _6;
        _21 = context::ConsumeEvents::<'_> { dummy_authority: move _22 };
        StorageDead(_22);
        _0 = std::result::Result::<context::ConsumeEvents<'_>, anchor_lang::error::Error>::Ok(move _21);
        StorageDead(_21);
        StorageDead(_6);
        goto -> bb8;
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_17);
        _17 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<context::ConsumeEvents<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _19) -> [return: bb7, unwind: bb10];
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_17);
        _25 = discriminant(_7);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb8;
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        resume;
    }

    bb10 (cleanup): {
        _27 = discriminant(_7);
        goto -> bb9;
    }
}
