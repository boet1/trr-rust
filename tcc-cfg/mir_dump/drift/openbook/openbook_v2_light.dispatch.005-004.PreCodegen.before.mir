// MIR for `dispatch` before PreCodegen

fn dispatch(_1: &anchor_lang::prelude::Pubkey, _2: &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8]) -> std::result::Result<(), anchor_lang::error::Error> {
    debug program_id => _1;
    debug accounts => _2;
    debug data => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let mut _4: &[u8];
    let _7: ();
    let mut _8: &mut [u8];
    let mut _9: &mut [u8; 8];
    let mut _10: &[u8];
    let _11: &[u8];
    let _12: &[u8];
    let mut _13: &[u8];
    let mut _14: std::ops::RangeTo<usize>;
    let mut _15: &[u8];
    let _16: &[u8];
    let _17: &[u8];
    let mut _18: &[u8];
    let mut _19: std::ops::RangeFrom<usize>;
    let mut _20: &anchor_lang::prelude::Pubkey;
    let mut _21: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _22: &[u8];
    let mut _23: &anchor_lang::prelude::Pubkey;
    let mut _24: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _25: &[u8];
    let mut _26: &anchor_lang::prelude::Pubkey;
    let mut _27: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _28: &[u8];
    let mut _29: &anchor_lang::prelude::Pubkey;
    let mut _30: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _31: &[u8];
    let mut _32: &anchor_lang::prelude::Pubkey;
    let mut _33: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _34: &[u8];
    let mut _35: &anchor_lang::prelude::Pubkey;
    let mut _36: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _37: &[u8];
    let mut _38: &anchor_lang::prelude::Pubkey;
    let mut _39: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _40: &[u8];
    let _41: &&[u8];
    let mut _42: anchor_lang::error::Error;
    let mut _43: anchor_lang::error::ErrorCode;
    let mut _44: anchor_lang::error::Error;
    let mut _45: anchor_lang::error::ErrorCode;
    let mut _46: &[u8];
    scope 1 {
        debug ix_data => _4;
        let _5: [u8; 8];
        let mut _6: [u8; 8];
        scope 2 {
            debug sighash => _5;
        }
        scope 3 {
            debug sighash => _6;
        }
    }

    bb0: {
        StorageLive(_4);
        _4 = &(*_3);
        StorageLive(_5);
        StorageLive(_6);
        _6 = [const 0_u8; 8];
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &mut _6;
        _8 = move _9 as &mut [u8] (PointerCoercion(Unsize));
        StorageDead(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &(*_4);
        StorageLive(_14);
        _14 = RangeTo::<usize> { end: const 8_usize };
        _12 = <[u8] as Index<RangeTo<usize>>>::index(move _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        StorageDead(_13);
        _11 = &(*_12);
        _10 = &(*_11);
        _7 = core::slice::<impl [u8]>::copy_from_slice(move _8, move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_7);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = &(*_4);
        StorageLive(_19);
        _19 = RangeFrom::<usize> { start: const 8_usize };
        _17 = <[u8] as Index<RangeFrom<usize>>>::index(move _18, move _19) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_19);
        StorageDead(_18);
        _16 = &(*_17);
        _15 = &(*_16);
        _4 = move _15;
        StorageDead(_15);
        StorageDead(_17);
        StorageDead(_16);
        _5 = _6;
        StorageDead(_6);
        switchInt(_5[0 of 8]) -> [3: bb4, 103: bb12, 64: bb19, 204: bb32, 51: bb39, 221: bb46, 228: bb53, otherwise: bb11];
    }

    bb4: {
        switchInt(_5[1 of 8]) -> [44: bb5, otherwise: bb11];
    }

    bb5: {
        switchInt(_5[2 of 8]) -> [71: bb6, otherwise: bb11];
    }

    bb6: {
        switchInt(_5[3 of 8]) -> [3: bb7, otherwise: bb11];
    }

    bb7: {
        switchInt(_5[4 of 8]) -> [26: bb8, otherwise: bb11];
    }

    bb8: {
        switchInt(_5[5 of 8]) -> [199: bb9, otherwise: bb11];
    }

    bb9: {
        switchInt(_5[6 of 8]) -> [203: bb10, otherwise: bb11];
    }

    bb10: {
        switchInt(_5[7 of 8]) -> [85: bb60, otherwise: bb11];
    }

    bb11: {
        StorageLive(_44);
        StorageLive(_45);
        _45 = InstructionFallbackNotFound;
        _44 = <ErrorCode as Into<anchor_lang::error::Error>>::into(move _45) -> [return: bb76, unwind continue];
    }

    bb12: {
        switchInt(_5[1 of 8]) -> [226: bb13, otherwise: bb11];
    }

    bb13: {
        switchInt(_5[2 of 8]) -> [97: bb14, otherwise: bb11];
    }

    bb14: {
        switchInt(_5[3 of 8]) -> [235: bb15, otherwise: bb11];
    }

    bb15: {
        switchInt(_5[4 of 8]) -> [200: bb16, otherwise: bb11];
    }

    bb16: {
        switchInt(_5[5 of 8]) -> [188: bb17, otherwise: bb11];
    }

    bb17: {
        switchInt(_5[6 of 8]) -> [251: bb18, otherwise: bb11];
    }

    bb18: {
        switchInt(_5[7 of 8]) -> [254: bb62, otherwise: bb11];
    }

    bb19: {
        switchInt(_5[1 of 8]) -> [64: bb20, 244: bb26, otherwise: bb11];
    }

    bb20: {
        switchInt(_5[2 of 8]) -> [153: bb21, otherwise: bb11];
    }

    bb21: {
        switchInt(_5[3 of 8]) -> [255: bb22, otherwise: bb11];
    }

    bb22: {
        switchInt(_5[4 of 8]) -> [217: bb23, otherwise: bb11];
    }

    bb23: {
        switchInt(_5[5 of 8]) -> [71: bb24, otherwise: bb11];
    }

    bb24: {
        switchInt(_5[6 of 8]) -> [249: bb25, otherwise: bb11];
    }

    bb25: {
        switchInt(_5[7 of 8]) -> [133: bb64, otherwise: bb11];
    }

    bb26: {
        switchInt(_5[2 of 8]) -> [188: bb27, otherwise: bb11];
    }

    bb27: {
        switchInt(_5[3 of 8]) -> [120: bb28, otherwise: bb11];
    }

    bb28: {
        switchInt(_5[4 of 8]) -> [167: bb29, otherwise: bb11];
    }

    bb29: {
        switchInt(_5[5 of 8]) -> [233: bb30, otherwise: bb11];
    }

    bb30: {
        switchInt(_5[6 of 8]) -> [105: bb31, otherwise: bb11];
    }

    bb31: {
        switchInt(_5[7 of 8]) -> [10: bb72, otherwise: bb11];
    }

    bb32: {
        switchInt(_5[1 of 8]) -> [181: bb33, otherwise: bb11];
    }

    bb33: {
        switchInt(_5[2 of 8]) -> [175: bb34, otherwise: bb11];
    }

    bb34: {
        switchInt(_5[3 of 8]) -> [222: bb35, otherwise: bb11];
    }

    bb35: {
        switchInt(_5[4 of 8]) -> [40: bb36, otherwise: bb11];
    }

    bb36: {
        switchInt(_5[5 of 8]) -> [125: bb37, otherwise: bb11];
    }

    bb37: {
        switchInt(_5[6 of 8]) -> [188: bb38, otherwise: bb11];
    }

    bb38: {
        switchInt(_5[7 of 8]) -> [71: bb66, otherwise: bb11];
    }

    bb39: {
        switchInt(_5[1 of 8]) -> [194: bb40, otherwise: bb11];
    }

    bb40: {
        switchInt(_5[2 of 8]) -> [155: bb41, otherwise: bb11];
    }

    bb41: {
        switchInt(_5[3 of 8]) -> [175: bb42, otherwise: bb11];
    }

    bb42: {
        switchInt(_5[4 of 8]) -> [109: bb43, otherwise: bb11];
    }

    bb43: {
        switchInt(_5[5 of 8]) -> [130: bb44, otherwise: bb11];
    }

    bb44: {
        switchInt(_5[6 of 8]) -> [96: bb45, otherwise: bb11];
    }

    bb45: {
        switchInt(_5[7 of 8]) -> [106: bb68, otherwise: bb11];
    }

    bb46: {
        switchInt(_5[1 of 8]) -> [145: bb47, otherwise: bb11];
    }

    bb47: {
        switchInt(_5[2 of 8]) -> [177: bb48, otherwise: bb11];
    }

    bb48: {
        switchInt(_5[3 of 8]) -> [52: bb49, otherwise: bb11];
    }

    bb49: {
        switchInt(_5[4 of 8]) -> [31: bb50, otherwise: bb11];
    }

    bb50: {
        switchInt(_5[5 of 8]) -> [47: bb51, otherwise: bb11];
    }

    bb51: {
        switchInt(_5[6 of 8]) -> [63: bb52, otherwise: bb11];
    }

    bb52: {
        switchInt(_5[7 of 8]) -> [201: bb70, otherwise: bb11];
    }

    bb53: {
        switchInt(_5[1 of 8]) -> [69: bb54, otherwise: bb11];
    }

    bb54: {
        switchInt(_5[2 of 8]) -> [165: bb55, otherwise: bb11];
    }

    bb55: {
        switchInt(_5[3 of 8]) -> [46: bb56, otherwise: bb11];
    }

    bb56: {
        switchInt(_5[4 of 8]) -> [81: bb57, otherwise: bb11];
    }

    bb57: {
        switchInt(_5[5 of 8]) -> [203: bb58, otherwise: bb11];
    }

    bb58: {
        switchInt(_5[6 of 8]) -> [154: bb59, otherwise: bb11];
    }

    bb59: {
        switchInt(_5[7 of 8]) -> [29: bb74, otherwise: bb11];
    }

    bb60: {
        StorageLive(_20);
        _20 = &(*_1);
        StorageLive(_21);
        _21 = &(*_2);
        StorageLive(_22);
        _22 = &(*_4);
        _0 = __global::place_take_order(move _20, move _21, move _22) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        goto -> bb77;
    }

    bb62: {
        StorageLive(_23);
        _23 = &(*_1);
        StorageLive(_24);
        _24 = &(*_2);
        StorageLive(_25);
        _25 = &(*_4);
        _0 = __global::create_market(move _23, move _24, move _25) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb77;
    }

    bb64: {
        StorageLive(_26);
        _26 = &(*_1);
        StorageLive(_27);
        _27 = &(*_2);
        StorageLive(_28);
        _28 = &(*_4);
        _0 = __global::create_open_orders_indexer(move _26, move _27, move _28) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        goto -> bb77;
    }

    bb66: {
        StorageLive(_29);
        _29 = &(*_1);
        StorageLive(_30);
        _30 = &(*_2);
        StorageLive(_31);
        _31 = &(*_4);
        _0 = __global::create_open_orders_account(move _29, move _30, move _31) -> [return: bb67, unwind continue];
    }

    bb67: {
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_29);
        goto -> bb77;
    }

    bb68: {
        StorageLive(_32);
        _32 = &(*_1);
        StorageLive(_33);
        _33 = &(*_2);
        StorageLive(_34);
        _34 = &(*_4);
        _0 = __global::place_order(move _32, move _33, move _34) -> [return: bb69, unwind continue];
    }

    bb69: {
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_32);
        goto -> bb77;
    }

    bb70: {
        StorageLive(_35);
        _35 = &(*_1);
        StorageLive(_36);
        _36 = &(*_2);
        StorageLive(_37);
        _37 = &(*_4);
        _0 = __global::consume_events(move _35, move _36, move _37) -> [return: bb71, unwind continue];
    }

    bb71: {
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_35);
        goto -> bb77;
    }

    bb72: {
        StorageLive(_38);
        _38 = &(*_1);
        StorageLive(_39);
        _39 = &(*_2);
        StorageLive(_40);
        StorageLive(_41);
        _41 = &_4;
        _46 = deref_copy (*_41);
        _40 = &(*_46);
        _0 = __idl_dispatch(move _38, move _39, move _40) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_41);
        goto -> bb77;
    }

    bb74: {
        StorageLive(_42);
        StorageLive(_43);
        _43 = EventInstructionStub;
        _42 = <ErrorCode as Into<anchor_lang::error::Error>>::into(move _43) -> [return: bb75, unwind continue];
    }

    bb75: {
        StorageDead(_43);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _42);
        StorageDead(_42);
        goto -> bb77;
    }

    bb76: {
        StorageDead(_45);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _44);
        StorageDead(_44);
        goto -> bb77;
    }

    bb77: {
        StorageDead(_5);
        StorageDead(_4);
        return;
    }
}
