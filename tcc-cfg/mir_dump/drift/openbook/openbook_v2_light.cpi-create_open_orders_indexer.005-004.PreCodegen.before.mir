// MIR for `cpi::create_open_orders_indexer` before PreCodegen

fn cpi::create_open_orders_indexer(_1: CpiContext<'_, '_, '_, '_, context::__cpi_client_accounts_create_open_orders_indexer::CreateOpenOrdersIndexer<'_>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: anchor_lang::solana_program::instruction::Instruction;
    let _3: instruction::CreateOpenOrdersIndexer;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>, std::vec::Vec<u8>>;
    let mut _6: std::result::Result<std::vec::Vec<u8>, anchor_lang::error::ErrorCode>;
    let mut _7: std::result::Result<std::vec::Vec<u8>, std::io::Error>;
    let mut _8: &instruction::CreateOpenOrdersIndexer;
    let _9: &instruction::CreateOpenOrdersIndexer;
    let mut _10: {closure@programs/openbook_v2/src/lib.rs:19:1: 19:11};
    let mut _11: isize;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
    let mut _17: &[u8];
    let mut _18: &[u8; 8];
    let _19: [u8; 8];
    let _20: ();
    let mut _21: &mut std::vec::Vec<u8>;
    let mut _22: &mut std::vec::Vec<u8>;
    let mut _23: &mut std::vec::Vec<u8>;
    let mut _25: &anchor_lang::context::CpiContext<'_, '_, '_, '_, context::__cpi_client_accounts_create_open_orders_indexer::CreateOpenOrdersIndexer<'_>>;
    let mut _26: std::option::Option<bool>;
    let mut _27: anchor_lang::prelude::Pubkey;
    let mut _28: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _29: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _30: std::vec::Vec<u8>;
    let mut _32: &anchor_lang::context::CpiContext<'_, '_, '_, '_, context::__cpi_client_accounts_create_open_orders_indexer::CreateOpenOrdersIndexer<'_>>;
    let mut _33: std::result::Result<(), anchor_lang::prelude::ProgramError>;
    let mut _34: &anchor_lang::solana_program::instruction::Instruction;
    let _35: &anchor_lang::solana_program::instruction::Instruction;
    let mut _36: &[anchor_lang::prelude::AccountInfo<'_>];
    let _37: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _38: &std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>;
    let _39: &std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _40: &[&[&[u8]]];
    let mut _41: {closure@programs/openbook_v2/src/lib.rs:19:1: 19:11};
    let mut _42: {closure@programs/openbook_v2/src/lib.rs:19:1: 19:11};
    let mut _44: &[&[&[u8]]];
    let mut _45: isize;
    let mut _46: isize;
    let mut _47: isize;
    let mut _48: isize;
    let mut _49: isize;
    scope 1 {
        debug ix => _2;
        let mut _31: std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>;
        scope 10 {
            debug acc_infos => _31;
        }
    }
    scope 2 {
        debug ix => _3;
        let mut _4: std::vec::Vec<u8>;
        let _12: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
        let _15: std::vec::Vec<u8>;
        scope 3 {
            debug ix_data => _4;
            let mut _16: std::vec::Vec<u8>;
            let mut _43: &[u8; 8];
            scope 8 {
                debug data => _16;
                let _24: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
                scope 9 {
                    debug accounts => _24;
                }
            }
        }
        scope 4 {
            debug residual => _12;
            scope 5 {
            }
        }
        scope 6 {
            debug val => _15;
            scope 7 {
            }
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = instruction::CreateOpenOrdersIndexer;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &_3;
        _8 = &(*_9);
        _7 = <instruction::CreateOpenOrdersIndexer as anchor_lang::AnchorSerialize>::try_to_vec(move _8) -> [return: bb1, unwind: bb25];
    }

    bb1: {
        StorageDead(_8);
        StorageLive(_10);
        _10 = {closure@programs/openbook_v2/src/lib.rs:19:1: 19:11};
        _6 = std::result::Result::<Vec<u8>, std::io::Error>::map_err::<ErrorCode, {closure@programs/openbook_v2/src/lib.rs:19:1: 19:11}>(move _7, move _10) -> [return: bb2, unwind: bb25];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_7);
        _5 = <std::result::Result<Vec<u8>, ErrorCode> as Try>::branch(move _6) -> [return: bb3, unwind: bb25];
    }

    bb3: {
        StorageDead(_6);
        _11 = discriminant(_5);
        switchInt(move _11) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_15);
        _15 = move ((_5 as Continue).0: std::vec::Vec<u8>);
        _4 = move _15;
        StorageDead(_15);
        _47 = discriminant(_5);
        StorageDead(_9);
        StorageDead(_5);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _43 = const _;
        _18 = &(*_43);
        _17 = move _18 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_18);
        _16 = std::slice::<impl [u8]>::to_vec(move _17) -> [return: bb8, unwind: bb24];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_12);
        _12 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, ErrorCode>>>::from_residual(move _14) -> [return: bb7, unwind: bb27];
    }

    bb7: {
        StorageDead(_14);
        StorageDead(_12);
        _45 = discriminant(_5);
        StorageDead(_9);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        drop(_1) -> [return: bb19, unwind: bb26];
    }

    bb8: {
        StorageDead(_17);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &mut _16;
        StorageLive(_22);
        StorageLive(_23);
        _23 = &mut _4;
        _22 = &mut (*_23);
        _20 = Vec::<u8>::append(move _21, move _22) -> [return: bb9, unwind: bb23];
    }

    bb9: {
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_23);
        StorageDead(_20);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &_1;
        StorageLive(_26);
        _26 = Option::<bool>::None;
        _24 = <CpiContext<'_, '_, '_, '_, context::__cpi_client_accounts_create_open_orders_indexer::CreateOpenOrdersIndexer<'_>> as anchor_lang::ToAccountMetas>::to_account_metas(move _25, move _26) -> [return: bb10, unwind: bb23];
    }

    bb10: {
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &(_1.2: anchor_lang::prelude::AccountInfo<'_>);
        _27 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _28) -> [return: bb11, unwind: bb22];
    }

    bb11: {
        StorageDead(_28);
        StorageLive(_29);
        _29 = move _24;
        StorageLive(_30);
        _30 = move _16;
        _2 = Instruction { program_id: move _27, accounts: move _29, data: move _30 };
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_24);
        StorageDead(_16);
        drop(_4) -> [return: bb12, unwind: bb25];
    }

    bb12: {
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_31);
        StorageLive(_32);
        _32 = &_1;
        _31 = <CpiContext<'_, '_, '_, '_, context::__cpi_client_accounts_create_open_orders_indexer::CreateOpenOrdersIndexer<'_>> as anchor_lang::ToAccountInfos<'_>>::to_account_infos(move _32) -> [return: bb13, unwind: bb21];
    }

    bb13: {
        StorageDead(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = &_2;
        _34 = &(*_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &_31;
        _38 = &(*_39);
        _37 = <Vec<anchor_lang::prelude::AccountInfo<'_>> as Deref>::deref(move _38) -> [return: bb14, unwind: bb20];
    }

    bb14: {
        _36 = &(*_37);
        StorageDead(_38);
        StorageLive(_40);
        _44 = deref_copy (_1.3: &[&[&[u8]]]);
        _40 = &(*_44);
        _33 = invoke_signed(move _34, move _36, move _40) -> [return: bb15, unwind: bb20];
    }

    bb15: {
        StorageDead(_40);
        StorageDead(_36);
        StorageDead(_34);
        StorageLive(_41);
        _41 = {closure@programs/openbook_v2/src/lib.rs:19:1: 19:11};
        StorageLive(_42);
        _42 = {closure@programs/openbook_v2/src/lib.rs:19:1: 19:11};
        _0 = std::result::Result::<(), anchor_lang::prelude::ProgramError>::map_or_else::<std::result::Result<(), anchor_lang::error::Error>, {closure@programs/openbook_v2/src/lib.rs:19:1: 19:11}, {closure@programs/openbook_v2/src/lib.rs:19:1: 19:11}>(move _33, move _41, move _42) -> [return: bb16, unwind: bb20];
    }

    bb16: {
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_33);
        drop(_31) -> [return: bb17, unwind: bb21];
    }

    bb17: {
        StorageDead(_31);
        drop(_2) -> [return: bb18, unwind: bb25];
    }

    bb18: {
        StorageDead(_2);
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_35);
        drop(_1) -> [return: bb19, unwind: bb26];
    }

    bb19: {
        return;
    }

    bb20 (cleanup): {
        drop(_31) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_2) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop(_24) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        drop(_16) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_4) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_1) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        resume;
    }

    bb27 (cleanup): {
        _49 = discriminant(_5);
        goto -> bb25;
    }
}
