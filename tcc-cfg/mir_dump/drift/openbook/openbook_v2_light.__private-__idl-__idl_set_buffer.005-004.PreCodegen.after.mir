// MIR for `__idl_set_buffer` after PreCodegen

fn __idl_set_buffer(_1: &anchor_lang::prelude::Pubkey, _2: &mut __idl::IdlSetBuffer<'_>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug program_id => _1;
    debug accounts => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: &str;
    let _5: &str;
    let mut _6: u32;
    let mut _7: &__private::__idl::IdlAccount;
    let mut _8: &anchor_lang::prelude::Account<'_, __private::__idl::IdlAccount>;
    let mut _9: &mut __private::__idl::IdlAccount;
    let mut _10: &mut anchor_lang::prelude::Account<'_, __private::__idl::IdlAccount>;
    let _11: usize;
    let mut _12: std::result::Result<usize, std::num::TryFromIntError>;
    let mut _13: u32;
    let mut _14: &__private::__idl::IdlAccount;
    let mut _15: &anchor_lang::prelude::Account<'_, __private::__idl::IdlAccount>;
    let mut _17: &anchor_lang::prelude::Account<'_, __private::__idl::IdlAccount>;
    let _19: &[u8];
    let mut _20: &[u8];
    let _21: &[u8];
    let mut _22: &std::cell::Ref<'_, [u8]>;
    let _23: std::cell::Ref<'_, [u8]>;
    let mut _24: &anchor_lang::prelude::Account<'_, __private::__idl::IdlAccount>;
    let mut _25: std::ops::RangeTo<usize>;
    let mut _26: usize;
    let _27: ();
    let mut _28: bool;
    let mut _29: usize;
    let mut _30: &[u8];
    let _31: &[u8];
    let mut _32: &std::cell::RefMut<'_, [u8]>;
    let mut _33: usize;
    let mut _34: !;
    let mut _35: anchor_lang::error::Error;
    let mut _36: anchor_lang::error::Error;
    let mut _37: anchor_lang::error::AnchorError;
    let mut _38: std::string::String;
    let mut _39: &anchor_lang::error::ErrorCode;
    let _40: anchor_lang::error::ErrorCode;
    let mut _41: u32;
    let mut _42: anchor_lang::error::ErrorCode;
    let mut _43: std::string::String;
    let mut _44: &anchor_lang::error::ErrorCode;
    let _45: anchor_lang::error::ErrorCode;
    let mut _46: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _47: anchor_lang::error::ErrorOrigin;
    let mut _48: anchor_lang::error::Source;
    let mut _49: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _50: (usize, usize);
    let mut _51: usize;
    let mut _52: &[u8];
    let _53: &[u8];
    let mut _54: &std::cell::RefMut<'_, [u8]>;
    let mut _55: usize;
    let _56: ();
    let mut _57: &mut [u8];
    let mut _58: &mut [u8];
    let mut _59: &mut [u8];
    let mut _60: &mut [u8];
    let mut _61: &mut std::cell::RefMut<'_, [u8]>;
    let mut _62: std::ops::RangeTo<usize>;
    let mut _63: usize;
    let mut _64: &[u8];
    let mut _65: ();
    let mut _68: bool;
    scope 1 {
        debug buffer_len => _11;
        let mut _16: std::cell::RefMut<'_, [u8]>;
        scope 2 {
            debug target => _16;
            let _18: &[u8];
            scope 3 {
                debug source => _18;
                let mut _66: &anchor_lang::error::ErrorCode;
                let mut _67: &anchor_lang::error::ErrorCode;
            }
        }
    }

    bb0: {
        _68 = const false;
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = const "Instruction: IdlSetBuffer";
        _4 = &(*_5);
        _3 = anchor_lang::solana_program::log::sol_log(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_4);
        StorageDead(_5);
        StorageDead(_3);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &((*_2).0: anchor_lang::prelude::Account<'_, __private::__idl::IdlAccount>);
        _7 = <anchor_lang::prelude::Account<'_, __idl::IdlAccount> as Deref>::deref(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_8);
        _6 = ((*_7).1: u32);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &mut ((*_2).1: anchor_lang::prelude::Account<'_, __private::__idl::IdlAccount>);
        _9 = <anchor_lang::prelude::Account<'_, __idl::IdlAccount> as DerefMut>::deref_mut(move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_10);
        ((*_9).1: u32) = move _6;
        StorageDead(_6);
        StorageDead(_9);
        StorageDead(_7);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &((*_2).0: anchor_lang::prelude::Account<'_, __private::__idl::IdlAccount>);
        _14 = <anchor_lang::prelude::Account<'_, __idl::IdlAccount> as Deref>::deref(move _15) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_15);
        _13 = ((*_14).1: u32);
        _12 = <u32 as TryInto<usize>>::try_into(move _13) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_13);
        _11 = std::result::Result::<usize, TryFromIntError>::unwrap(move _12) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_14);
        StorageLive(_16);
        StorageLive(_17);
        _17 = &((*_2).1: anchor_lang::prelude::Account<'_, __private::__idl::IdlAccount>);
        _16 = <&anchor_lang::prelude::Account<'_, __idl::IdlAccount> as IdlTrailingData<'_>>::trailing_data_mut(move _17) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &((*_2).0: anchor_lang::prelude::Account<'_, __private::__idl::IdlAccount>);
        _23 = <&anchor_lang::prelude::Account<'_, __idl::IdlAccount> as IdlTrailingData<'_>>::trailing_data(move _24) -> [return: bb8, unwind: bb32];
    }

    bb8: {
        _22 = &_23;
        _21 = <Ref<'_, [u8]> as Deref>::deref(move _22) -> [return: bb9, unwind: bb31];
    }

    bb9: {
        _20 = &(*_21);
        StorageDead(_24);
        StorageDead(_22);
        StorageLive(_25);
        StorageLive(_26);
        _26 = _11;
        _25 = RangeTo::<usize> { end: move _26 };
        StorageDead(_26);
        _19 = <[u8] as Index<RangeTo<usize>>>::index(move _20, move _25) -> [return: bb10, unwind: bb31];
    }

    bb10: {
        StorageDead(_25);
        StorageDead(_20);
        _18 = &(*_19);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = &_16;
        _31 = <RefMut<'_, [u8]> as Deref>::deref(move _32) -> [return: bb11, unwind: bb31];
    }

    bb11: {
        _30 = &(*_31);
        StorageDead(_32);
        _29 = core::slice::<impl [u8]>::len(move _30) -> [return: bb12, unwind: bb31];
    }

    bb12: {
        StorageDead(_30);
        StorageLive(_33);
        _33 = _11;
        _28 = Lt(move _29, move _33);
        switchInt(move _28) -> [0: bb21, otherwise: bb13];
    }

    bb13: {
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_29);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _67 = const _;
        _39 = &(*_67);
        _38 = ErrorCode::name(move _39) -> [return: bb14, unwind: bb31];
    }

    bb14: {
        StorageDead(_39);
        StorageLive(_41);
        StorageLive(_42);
        _42 = RequireGteViolated;
        _41 = <ErrorCode as Into<u32>>::into(move _42) -> [return: bb15, unwind: bb30];
    }

    bb15: {
        StorageDead(_42);
        StorageLive(_43);
        StorageLive(_44);
        _66 = const _;
        _44 = &(*_66);
        _43 = <ErrorCode as ToString>::to_string(move _44) -> [return: bb16, unwind: bb30];
    }

    bb16: {
        StorageDead(_44);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = anchor_lang::error::Source { filename: const "programs/openbook_v2/src/lib.rs", line: const 19_u32 };
        _47 = anchor_lang::error::ErrorOrigin::Source(move _48);
        StorageDead(_48);
        _46 = Option::<ErrorOrigin>::Some(move _47);
        StorageDead(_47);
        StorageLive(_49);
        _49 = Option::<ComparedValues>::None;
        _37 = anchor_lang::error::AnchorError { error_name: move _38, error_code_number: move _41, error_msg: move _43, error_origin: move _46, compared_values: move _49 };
        StorageDead(_49);
        StorageDead(_46);
        StorageDead(_43);
        StorageDead(_41);
        StorageDead(_38);
        _36 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _37) -> [return: bb17, unwind: bb31];
    }

    bb17: {
        _68 = const true;
        StorageDead(_37);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &_16;
        _53 = <RefMut<'_, [u8]> as Deref>::deref(move _54) -> [return: bb18, unwind: bb35];
    }

    bb18: {
        _52 = &(*_53);
        StorageDead(_54);
        _51 = core::slice::<impl [u8]>::len(move _52) -> [return: bb19, unwind: bb35];
    }

    bb19: {
        StorageDead(_52);
        StorageLive(_55);
        _55 = _11;
        _50 = (move _51, move _55);
        StorageDead(_55);
        StorageDead(_51);
        _68 = const false;
        _35 = anchor_lang::error::Error::with_values::<usize, usize>(move _36, move _50) -> [return: bb20, unwind: bb35];
    }

    bb20: {
        StorageDead(_50);
        _68 = const false;
        StorageDead(_36);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _35);
        StorageDead(_35);
        StorageDead(_53);
        StorageDead(_28);
        StorageDead(_27);
        drop(_23) -> [return: bb27, unwind: bb32];
    }

    bb21: {
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_29);
        _27 = const ();
        StorageDead(_28);
        StorageDead(_27);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = &mut _16;
        _60 = <RefMut<'_, [u8]> as DerefMut>::deref_mut(move _61) -> [return: bb22, unwind: bb31];
    }

    bb22: {
        _59 = &mut (*_60);
        StorageDead(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = _11;
        _62 = RangeTo::<usize> { end: move _63 };
        StorageDead(_63);
        _58 = <[u8] as IndexMut<RangeTo<usize>>>::index_mut(move _59, move _62) -> [return: bb23, unwind: bb31];
    }

    bb23: {
        _57 = &mut (*_58);
        StorageDead(_62);
        StorageDead(_59);
        StorageLive(_64);
        _64 = &(*_18);
        _56 = core::slice::<impl [u8]>::copy_from_slice(move _57, move _64) -> [return: bb24, unwind: bb31];
    }

    bb24: {
        StorageDead(_64);
        StorageDead(_57);
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_56);
        StorageLive(_65);
        _65 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _65);
        StorageDead(_65);
        drop(_23) -> [return: bb25, unwind: bb32];
    }

    bb25: {
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_18);
        drop(_16) -> [return: bb26, unwind: bb33];
    }

    bb26: {
        StorageDead(_16);
        StorageDead(_11);
        goto -> bb29;
    }

    bb27: {
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_18);
        drop(_16) -> [return: bb28, unwind: bb33];
    }

    bb28: {
        StorageDead(_16);
        StorageDead(_11);
        goto -> bb29;
    }

    bb29: {
        return;
    }

    bb30 (cleanup): {
        drop(_38) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_23) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_16) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        resume;
    }

    bb34 (cleanup): {
        drop(_36) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        switchInt(_68) -> [0: bb31, otherwise: bb34];
    }
}
