// MIR for `__idl_resize_account` before PreCodegen

fn __idl_resize_account(_1: &anchor_lang::prelude::Pubkey, _2: &mut __idl::IdlResizeAccount<'_>, _3: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug program_id => _1;
    debug accounts => _2;
    debug data_len => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: ();
    let mut _5: &str;
    let _6: &str;
    let _7: usize;
    let mut _8: u64;
    let _9: ();
    let mut _10: bool;
    let mut _11: u32;
    let mut _12: &__private::__idl::IdlAccount;
    let mut _13: &anchor_lang::prelude::Account<'_, __private::__idl::IdlAccount>;
    let mut _14: !;
    let mut _15: anchor_lang::error::Error;
    let mut _16: anchor_lang::error::ErrorCode;
    let mut _18: &anchor_lang::prelude::Account<'_, __private::__idl::IdlAccount>;
    let _19: &anchor_lang::prelude::Account<'_, __private::__idl::IdlAccount>;
    let mut _21: std::option::Option<usize>;
    let mut _22: usize;
    let mut _23: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _24: usize;
    let mut _25: usize;
    let mut _26: std::option::Option<usize>;
    let mut _27: usize;
    let mut _28: usize;
    let mut _29: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _30: &str;
    let _31: &str;
    let _32: ();
    let mut _33: bool;
    let mut _34: usize;
    let mut _35: usize;
    let mut _36: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _38: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Rent>;
    let mut _39: std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError>;
    let mut _40: isize;
    let mut _42: !;
    let mut _43: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _46: &anchor_lang::prelude::Rent;
    let mut _47: usize;
    let _48: ();
    let mut _49: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _50: std::result::Result<(), anchor_lang::error::Error>;
    let mut _51: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
    let mut _52: anchor_lang::prelude::AccountInfo<'_>;
    let mut _53: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _54: anchor_lang::system_program::Transfer<'_>;
    let mut _55: anchor_lang::prelude::AccountInfo<'_>;
    let mut _56: &anchor_lang::prelude::Signer<'_>;
    let mut _57: anchor_lang::prelude::AccountInfo<'_>;
    let mut _58: &anchor_lang::prelude::AccountInfo<'_>;
    let _59: anchor_lang::prelude::AccountInfo<'_>;
    let mut _60: &anchor_lang::prelude::Account<'_, __private::__idl::IdlAccount>;
    let mut _61: u64;
    let mut _62: std::option::Option<u64>;
    let mut _63: u64;
    let mut _64: u64;
    let mut _65: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _66: isize;
    let mut _68: !;
    let mut _69: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _71: ();
    let mut _72: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>>;
    let mut _73: std::result::Result<(), anchor_lang::prelude::ProgramError>;
    let mut _74: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _75: usize;
    let mut _76: isize;
    let mut _78: !;
    let mut _79: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _81: ();
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: isize;
    let mut _85: isize;
    let mut _86: isize;
    let mut _87: isize;
    let mut _88: isize;
    let mut _89: isize;
    let mut _90: isize;
    let mut _91: isize;
    let mut _92: isize;
    let mut _93: isize;
    let mut _94: isize;
    let mut _95: isize;
    let mut _96: isize;
    let mut _97: isize;
    let mut _98: isize;
    scope 1 {
        debug data_len => _7;
        let _17: &anchor_lang::prelude::AccountInfo<'_>;
        scope 2 {
            debug idl_ref => _17;
            let _20: usize;
            scope 3 {
                debug new_account_space => _20;
                let _37: anchor_lang::prelude::Rent;
                let _41: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                let _44: anchor_lang::prelude::Rent;
                scope 4 {
                    debug sysvar_rent => _37;
                    let _45: u64;
                    scope 9 {
                        debug new_rent_minimum => _45;
                        let _67: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _70: ();
                        let _77: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                        let _80: ();
                        scope 10 {
                            debug residual => _67;
                            scope 11 {
                            }
                        }
                        scope 12 {
                            debug val => _70;
                            scope 13 {
                            }
                        }
                        scope 14 {
                            debug residual => _77;
                            scope 15 {
                            }
                        }
                        scope 16 {
                            debug val => _80;
                            scope 17 {
                            }
                        }
                    }
                }
                scope 5 {
                    debug residual => _41;
                    scope 6 {
                    }
                }
                scope 7 {
                    debug val => _44;
                    scope 8 {
                    }
                }
            }
        }
    }

    bb0: {
        _82 = const false;
        _83 = const false;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = const "Instruction: IdlResizeAccount";
        _5 = &(*_6);
        _4 = anchor_lang::solana_program::log::sol_log(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        StorageDead(_6);
        StorageDead(_4);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _3;
        _7 = move _8 as usize (IntToInt);
        StorageDead(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &((*_2).0: anchor_lang::prelude::Account<'_, __private::__idl::IdlAccount>);
        _12 = <anchor_lang::prelude::Account<'_, __idl::IdlAccount> as Deref>::deref(move _13) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_13);
        _11 = ((*_12).1: u32);
        _10 = Ne(move _11, const 0_u32);
        switchInt(move _10) -> [0: bb5, otherwise: bb3];
    }

    bb3: {
        StorageDead(_12);
        StorageDead(_11);
        StorageLive(_15);
        StorageLive(_16);
        _16 = IdlAccountNotEmpty;
        _15 = <ErrorCode as Into<anchor_lang::error::Error>>::into(move _16) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_16);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _15);
        StorageDead(_15);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb47;
    }

    bb5: {
        StorageDead(_12);
        StorageDead(_11);
        _9 = const ();
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &((*_2).0: anchor_lang::prelude::Account<'_, __private::__idl::IdlAccount>);
        _18 = &(*_19);
        _17 = <anchor_lang::prelude::Account<'_, __idl::IdlAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _18) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_18);
        StorageDead(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = &(*_17);
        _22 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _23) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = _7;
        StorageLive(_28);
        StorageLive(_29);
        _29 = &(*_17);
        _28 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _29) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_29);
        _26 = core::num::<impl usize>::checked_sub(move _27, move _28) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_28);
        StorageDead(_27);
        StorageLive(_30);
        StorageLive(_31);
        _31 = const "data_len should always be >= the current account space";
        _30 = &(*_31);
        _25 = Option::<usize>::expect(move _26, move _30) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_30);
        StorageDead(_26);
        _24 = std::cmp::min::<usize>(move _25, const 10000_usize) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_25);
        _21 = core::num::<impl usize>::checked_add(move _22, move _24) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_24);
        StorageDead(_22);
        _20 = Option::<usize>::unwrap(move _21) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_21);
        StorageDead(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = _20;
        StorageLive(_35);
        StorageLive(_36);
        _36 = &(*_17);
        _35 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _36) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_36);
        _33 = Gt(move _34, move _35);
        switchInt(move _33) -> [0: bb42, otherwise: bb15];
    }

    bb15: {
        StorageDead(_35);
        StorageDead(_34);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = <anchor_lang::prelude::Rent as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb16, unwind continue];
    }

    bb16: {
        _38 = <std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError> as Try>::branch(move _39) -> [return: bb17, unwind: bb53];
    }

    bb17: {
        StorageDead(_39);
        _40 = discriminant(_38);
        switchInt(move _40) -> [0: bb18, 1: bb20, otherwise: bb19];
    }

    bb18: {
        StorageLive(_44);
        _44 = ((_38 as Continue).0: anchor_lang::prelude::Rent);
        _37 = _44;
        StorageDead(_44);
        _84 = discriminant(_38);
        StorageDead(_38);
        StorageLive(_45);
        StorageLive(_46);
        _46 = &_37;
        StorageLive(_47);
        _47 = _20;
        _45 = anchor_lang::prelude::Rent::minimum_balance(move _46, move _47) -> [return: bb22, unwind continue];
    }

    bb19: {
        unreachable;
    }

    bb20: {
        StorageLive(_41);
        _41 = move ((_38 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_43);
        _43 = move _41;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _43) -> [return: bb21, unwind: bb60];
    }

    bb21: {
        StorageDead(_43);
        StorageDead(_41);
        _94 = discriminant(_38);
        StorageDead(_38);
        goto -> bb46;
    }

    bb22: {
        StorageDead(_47);
        StorageDead(_46);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = &((*_2).2: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>);
        _83 = const true;
        _52 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _53) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = &((*_2).1: anchor_lang::prelude::Signer<'_>);
        _55 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _56) -> [return: bb24, unwind: bb52];
    }

    bb24: {
        StorageDead(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = &((*_2).0: anchor_lang::prelude::Account<'_, __private::__idl::IdlAccount>);
        _59 = <anchor_lang::prelude::Account<'_, __idl::IdlAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _60) -> [return: bb25, unwind: bb51];
    }

    bb25: {
        _58 = &_59;
        StorageDead(_60);
        _57 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _58) -> [return: bb26, unwind: bb49];
    }

    bb26: {
        StorageDead(_58);
        _54 = anchor_lang::system_program::Transfer::<'_> { from: move _55, to: move _57 };
        StorageDead(_57);
        StorageDead(_55);
        _83 = const false;
        _51 = CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>::new(move _52, move _54) -> [return: bb27, unwind: bb59];
    }

    bb27: {
        _82 = const true;
        StorageDead(_54);
        _83 = const false;
        StorageDead(_52);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = _45;
        StorageLive(_64);
        StorageLive(_65);
        _65 = &(*_17);
        _64 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _65) -> [return: bb28, unwind: bb57];
    }

    bb28: {
        StorageDead(_65);
        _62 = core::num::<impl u64>::checked_sub(move _63, move _64) -> [return: bb29, unwind: bb57];
    }

    bb29: {
        StorageDead(_64);
        StorageDead(_63);
        _61 = Option::<u64>::unwrap(move _62) -> [return: bb30, unwind: bb57];
    }

    bb30: {
        StorageDead(_62);
        _82 = const false;
        _50 = anchor_lang::system_program::transfer(move _51, move _61) -> [return: bb31, unwind: bb57];
    }

    bb31: {
        StorageDead(_61);
        _82 = const false;
        StorageDead(_51);
        _49 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _50) -> [return: bb32, unwind: bb50];
    }

    bb32: {
        StorageDead(_50);
        _66 = discriminant(_49);
        switchInt(move _66) -> [0: bb33, 1: bb34, otherwise: bb19];
    }

    bb33: {
        StorageLive(_70);
        _70 = ((_49 as Continue).0: ());
        _48 = _70;
        StorageDead(_70);
        _86 = discriminant(_49);
        drop(_59) -> [return: bb36, unwind: bb53];
    }

    bb34: {
        StorageLive(_67);
        _67 = move ((_49 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_69);
        _69 = move _67;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _69) -> [return: bb35, unwind: bb55];
    }

    bb35: {
        StorageDead(_69);
        StorageDead(_67);
        _92 = discriminant(_49);
        drop(_59) -> [return: bb44, unwind: bb53];
    }

    bb36: {
        StorageDead(_59);
        StorageDead(_49);
        StorageDead(_48);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = &(*_17);
        StorageLive(_75);
        _75 = _20;
        _73 = anchor_lang::prelude::AccountInfo::<'_>::realloc(move _74, move _75, const false) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_75);
        StorageDead(_74);
        _72 = <std::result::Result<(), anchor_lang::prelude::ProgramError> as Try>::branch(move _73) -> [return: bb38, unwind: bb53];
    }

    bb38: {
        StorageDead(_73);
        _76 = discriminant(_72);
        switchInt(move _76) -> [0: bb39, 1: bb40, otherwise: bb19];
    }

    bb39: {
        StorageLive(_80);
        _80 = ((_72 as Continue).0: ());
        _71 = _80;
        StorageDead(_80);
        _88 = discriminant(_72);
        StorageDead(_72);
        StorageDead(_71);
        _32 = const ();
        StorageDead(_45);
        StorageDead(_37);
        goto -> bb43;
    }

    bb40: {
        StorageLive(_77);
        _77 = move ((_72 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_79);
        _79 = move _77;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _79) -> [return: bb41, unwind: bb54];
    }

    bb41: {
        StorageDead(_79);
        StorageDead(_77);
        _90 = discriminant(_72);
        StorageDead(_72);
        StorageDead(_71);
        goto -> bb45;
    }

    bb42: {
        StorageDead(_35);
        StorageDead(_34);
        _32 = const ();
        goto -> bb43;
    }

    bb43: {
        StorageDead(_33);
        StorageDead(_32);
        StorageLive(_81);
        _81 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _81);
        StorageDead(_81);
        StorageDead(_20);
        StorageDead(_17);
        StorageDead(_7);
        goto -> bb48;
    }

    bb44: {
        StorageDead(_59);
        StorageDead(_49);
        StorageDead(_48);
        goto -> bb45;
    }

    bb45: {
        StorageDead(_45);
        goto -> bb46;
    }

    bb46: {
        StorageDead(_37);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_20);
        StorageDead(_17);
        goto -> bb47;
    }

    bb47: {
        StorageDead(_7);
        goto -> bb48;
    }

    bb48: {
        return;
    }

    bb49 (cleanup): {
        drop(_55) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_59) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_55) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_52) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        resume;
    }

    bb54 (cleanup): {
        _96 = discriminant(_72);
        goto -> bb53;
    }

    bb55 (cleanup): {
        _97 = discriminant(_49);
        goto -> bb50;
    }

    bb56 (cleanup): {
        drop(_51) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        switchInt(_82) -> [0: bb50, otherwise: bb56];
    }

    bb58 (cleanup): {
        drop(_52) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        switchInt(_83) -> [0: bb50, otherwise: bb58];
    }

    bb60 (cleanup): {
        _98 = discriminant(_38);
        goto -> bb53;
    }
}
