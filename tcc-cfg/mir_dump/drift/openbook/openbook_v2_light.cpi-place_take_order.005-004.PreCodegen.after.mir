// MIR for `cpi::place_take_order` after PreCodegen

fn cpi::place_take_order(_1: CpiContext<'_, '_, '_, '_, context::__cpi_client_accounts_place_take_order::PlaceTakeOrder<'_>>, _2: account::Side, _3: i64, _4: i64, _5: i64, _6: account::PlaceOrderType, _7: u8) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug side => _2;
    debug price_lots => _3;
    debug max_base_lots => _4;
    debug max_quote_lots_including_fees => _5;
    debug order_type => _6;
    debug limit => _7;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _8: anchor_lang::solana_program::instruction::Instruction;
    let _9: instruction::PlaceTakeOrder;
    let mut _10: account::Side;
    let mut _11: i64;
    let mut _12: i64;
    let mut _13: i64;
    let mut _14: account::PlaceOrderType;
    let mut _15: u8;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>, std::vec::Vec<u8>>;
    let mut _18: std::result::Result<std::vec::Vec<u8>, anchor_lang::error::ErrorCode>;
    let mut _19: std::result::Result<std::vec::Vec<u8>, std::io::Error>;
    let mut _20: &instruction::PlaceTakeOrder;
    let _21: &instruction::PlaceTakeOrder;
    let mut _22: {closure@programs/openbook_v2/src/lib.rs:19:1: 19:11};
    let mut _23: isize;
    let mut _25: !;
    let mut _26: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
    let mut _29: &[u8];
    let mut _30: &[u8; 8];
    let _31: [u8; 8];
    let _32: ();
    let mut _33: &mut std::vec::Vec<u8>;
    let mut _34: &mut std::vec::Vec<u8>;
    let mut _35: &mut std::vec::Vec<u8>;
    let mut _37: &anchor_lang::context::CpiContext<'_, '_, '_, '_, context::__cpi_client_accounts_place_take_order::PlaceTakeOrder<'_>>;
    let mut _38: std::option::Option<bool>;
    let mut _39: anchor_lang::prelude::Pubkey;
    let mut _40: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _41: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _42: std::vec::Vec<u8>;
    let mut _44: &anchor_lang::context::CpiContext<'_, '_, '_, '_, context::__cpi_client_accounts_place_take_order::PlaceTakeOrder<'_>>;
    let mut _45: std::result::Result<(), anchor_lang::prelude::ProgramError>;
    let mut _46: &anchor_lang::solana_program::instruction::Instruction;
    let _47: &anchor_lang::solana_program::instruction::Instruction;
    let mut _48: &[anchor_lang::prelude::AccountInfo<'_>];
    let _49: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _50: &std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>;
    let _51: &std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _52: &[&[&[u8]]];
    let mut _53: {closure@programs/openbook_v2/src/lib.rs:19:1: 19:11};
    let mut _54: {closure@programs/openbook_v2/src/lib.rs:19:1: 19:11};
    let mut _56: &[&[&[u8]]];
    let mut _57: isize;
    let mut _58: isize;
    let mut _59: isize;
    let mut _60: isize;
    let mut _61: isize;
    scope 1 {
        debug ix => _8;
        let mut _43: std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>;
        scope 10 {
            debug acc_infos => _43;
        }
    }
    scope 2 {
        debug ix => _9;
        let mut _16: std::vec::Vec<u8>;
        let _24: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
        let _27: std::vec::Vec<u8>;
        scope 3 {
            debug ix_data => _16;
            let mut _28: std::vec::Vec<u8>;
            let mut _55: &[u8; 8];
            scope 8 {
                debug data => _28;
                let _36: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
                scope 9 {
                    debug accounts => _36;
                }
            }
        }
        scope 4 {
            debug residual => _24;
            scope 5 {
            }
        }
        scope 6 {
            debug val => _27;
            scope 7 {
            }
        }
    }

    bb0: {
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = move _2;
        StorageLive(_11);
        _11 = _3;
        StorageLive(_12);
        _12 = _4;
        StorageLive(_13);
        _13 = _5;
        StorageLive(_14);
        _14 = move _6;
        StorageLive(_15);
        _15 = _7;
        _9 = instruction::PlaceTakeOrder { side: move _10, price_lots: move _11, max_base_lots: move _12, max_quote_lots_including_fees: move _13, order_type: move _14, limit: move _15 };
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &_9;
        _20 = &(*_21);
        _19 = <instruction::PlaceTakeOrder as anchor_lang::AnchorSerialize>::try_to_vec(move _20) -> [return: bb1, unwind: bb25];
    }

    bb1: {
        StorageDead(_20);
        StorageLive(_22);
        _22 = {closure@programs/openbook_v2/src/lib.rs:19:1: 19:11};
        _18 = std::result::Result::<Vec<u8>, std::io::Error>::map_err::<ErrorCode, {closure@programs/openbook_v2/src/lib.rs:19:1: 19:11}>(move _19, move _22) -> [return: bb2, unwind: bb25];
    }

    bb2: {
        StorageDead(_22);
        StorageDead(_19);
        _17 = <std::result::Result<Vec<u8>, ErrorCode> as Try>::branch(move _18) -> [return: bb3, unwind: bb25];
    }

    bb3: {
        StorageDead(_18);
        _23 = discriminant(_17);
        switchInt(move _23) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_27);
        _27 = move ((_17 as Continue).0: std::vec::Vec<u8>);
        _16 = move _27;
        StorageDead(_27);
        _59 = discriminant(_17);
        StorageDead(_21);
        StorageDead(_17);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _55 = const _;
        _30 = &(*_55);
        _29 = move _30 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_30);
        _28 = std::slice::<impl [u8]>::to_vec(move _29) -> [return: bb8, unwind: bb24];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_24);
        _24 = ((_17 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>);
        StorageLive(_26);
        _26 = _24;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, ErrorCode>>>::from_residual(move _26) -> [return: bb7, unwind: bb27];
    }

    bb7: {
        StorageDead(_26);
        StorageDead(_24);
        _57 = discriminant(_17);
        StorageDead(_21);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_9);
        StorageDead(_8);
        drop(_1) -> [return: bb19, unwind: bb26];
    }

    bb8: {
        StorageDead(_29);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &mut _28;
        StorageLive(_34);
        StorageLive(_35);
        _35 = &mut _16;
        _34 = &mut (*_35);
        _32 = Vec::<u8>::append(move _33, move _34) -> [return: bb9, unwind: bb23];
    }

    bb9: {
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_35);
        StorageDead(_32);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &_1;
        StorageLive(_38);
        _38 = Option::<bool>::None;
        _36 = <CpiContext<'_, '_, '_, '_, context::__cpi_client_accounts_place_take_order::PlaceTakeOrder<'_>> as anchor_lang::ToAccountMetas>::to_account_metas(move _37, move _38) -> [return: bb10, unwind: bb23];
    }

    bb10: {
        StorageDead(_38);
        StorageDead(_37);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &(_1.2: anchor_lang::prelude::AccountInfo<'_>);
        _39 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _40) -> [return: bb11, unwind: bb22];
    }

    bb11: {
        StorageDead(_40);
        StorageLive(_41);
        _41 = move _36;
        StorageLive(_42);
        _42 = move _28;
        _8 = Instruction { program_id: move _39, accounts: move _41, data: move _42 };
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_39);
        StorageDead(_36);
        StorageDead(_28);
        drop(_16) -> [return: bb12, unwind: bb25];
    }

    bb12: {
        StorageDead(_16);
        StorageDead(_9);
        StorageLive(_43);
        StorageLive(_44);
        _44 = &_1;
        _43 = <CpiContext<'_, '_, '_, '_, context::__cpi_client_accounts_place_take_order::PlaceTakeOrder<'_>> as anchor_lang::ToAccountInfos<'_>>::to_account_infos(move _44) -> [return: bb13, unwind: bb21];
    }

    bb13: {
        StorageDead(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = &_8;
        _46 = &(*_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = &_43;
        _50 = &(*_51);
        _49 = <Vec<anchor_lang::prelude::AccountInfo<'_>> as Deref>::deref(move _50) -> [return: bb14, unwind: bb20];
    }

    bb14: {
        _48 = &(*_49);
        StorageDead(_50);
        StorageLive(_52);
        _56 = deref_copy (_1.3: &[&[&[u8]]]);
        _52 = &(*_56);
        _45 = invoke_signed(move _46, move _48, move _52) -> [return: bb15, unwind: bb20];
    }

    bb15: {
        StorageDead(_52);
        StorageDead(_48);
        StorageDead(_46);
        StorageLive(_53);
        _53 = {closure@programs/openbook_v2/src/lib.rs:19:1: 19:11};
        StorageLive(_54);
        _54 = {closure@programs/openbook_v2/src/lib.rs:19:1: 19:11};
        _0 = std::result::Result::<(), anchor_lang::prelude::ProgramError>::map_or_else::<std::result::Result<(), anchor_lang::error::Error>, {closure@programs/openbook_v2/src/lib.rs:19:1: 19:11}, {closure@programs/openbook_v2/src/lib.rs:19:1: 19:11}>(move _45, move _53, move _54) -> [return: bb16, unwind: bb20];
    }

    bb16: {
        StorageDead(_54);
        StorageDead(_53);
        StorageDead(_45);
        drop(_43) -> [return: bb17, unwind: bb21];
    }

    bb17: {
        StorageDead(_43);
        drop(_8) -> [return: bb18, unwind: bb25];
    }

    bb18: {
        StorageDead(_8);
        StorageDead(_51);
        StorageDead(_49);
        StorageDead(_47);
        drop(_1) -> [return: bb19, unwind: bb26];
    }

    bb19: {
        return;
    }

    bb20 (cleanup): {
        drop(_43) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_8) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop(_36) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        drop(_28) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_16) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_1) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        resume;
    }

    bb27 (cleanup): {
        _61 = discriminant(_17);
        goto -> bb25;
    }
}
