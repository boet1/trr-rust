// MIR for `context::__client_accounts_create_market::<impl at programs/openbook_v2/src/context.rs:8:10: 8:18>::to_account_metas` before PreCodegen

fn context::__client_accounts_create_market::<impl at programs/openbook_v2/src/context.rs:8:10: 8:18>::to_account_metas(_1: &context::__client_accounts_create_market::CreateMarket, _2: Option<bool>) -> Vec<AccountMeta> {
    debug self => _1;
    debug is_signer => _2;
    let mut _0: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _3: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let _4: ();
    let mut _5: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _6: anchor_lang::prelude::AccountMeta;
    let mut _7: anchor_lang::prelude::Pubkey;
    scope 1 {
        debug account_metas => _3;
    }

    bb0: {
        StorageLive(_3);
        _3 = Vec::<AccountMeta>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_4);
        StorageLive(_5);
        _5 = &mut _3;
        StorageLive(_6);
        StorageLive(_7);
        _7 = ((*_1).0: anchor_lang::prelude::Pubkey);
        _6 = AccountMeta::new_readonly(move _7, const true) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        StorageDead(_7);
        _4 = Vec::<AccountMeta>::push(move _5, move _6) -> [return: bb3, unwind: bb4];
    }

    bb3: {
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        _0 = move _3;
        StorageDead(_3);
        return;
    }

    bb4 (cleanup): {
        drop(_3) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb5 (cleanup): {
        resume;
    }
}
