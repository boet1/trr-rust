// MIR for `cpi::place_order` before PreCodegen

fn cpi::place_order(_1: CpiContext<'_, '_, '_, '_, context::__cpi_client_accounts_place_order::PlaceOrder<'_>>, _2: account::Side, _3: i64, _4: i64, _5: i64, _6: u64, _7: account::PlaceOrderType, _8: u64, _9: account::SelfTradeBehavior, _10: u8) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug side => _2;
    debug price_lots => _3;
    debug max_base_lots => _4;
    debug max_quote_lots_including_fees => _5;
    debug client_order_id => _6;
    debug order_type => _7;
    debug expiry_timestamp => _8;
    debug self_trade_behavior => _9;
    debug limit => _10;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _11: anchor_lang::solana_program::instruction::Instruction;
    let _12: instruction::PlaceOrder;
    let mut _13: account::Side;
    let mut _14: i64;
    let mut _15: i64;
    let mut _16: i64;
    let mut _17: u64;
    let mut _18: account::PlaceOrderType;
    let mut _19: u64;
    let mut _20: account::SelfTradeBehavior;
    let mut _21: u8;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>, std::vec::Vec<u8>>;
    let mut _24: std::result::Result<std::vec::Vec<u8>, anchor_lang::error::ErrorCode>;
    let mut _25: std::result::Result<std::vec::Vec<u8>, std::io::Error>;
    let mut _26: &instruction::PlaceOrder;
    let _27: &instruction::PlaceOrder;
    let mut _28: {closure@programs/openbook_v2/src/lib.rs:19:1: 19:11};
    let mut _29: isize;
    let mut _31: !;
    let mut _32: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
    let mut _35: &[u8];
    let mut _36: &[u8; 8];
    let _37: [u8; 8];
    let _38: ();
    let mut _39: &mut std::vec::Vec<u8>;
    let mut _40: &mut std::vec::Vec<u8>;
    let mut _41: &mut std::vec::Vec<u8>;
    let mut _43: &anchor_lang::context::CpiContext<'_, '_, '_, '_, context::__cpi_client_accounts_place_order::PlaceOrder<'_>>;
    let mut _44: std::option::Option<bool>;
    let mut _45: anchor_lang::prelude::Pubkey;
    let mut _46: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _47: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _48: std::vec::Vec<u8>;
    let mut _50: &anchor_lang::context::CpiContext<'_, '_, '_, '_, context::__cpi_client_accounts_place_order::PlaceOrder<'_>>;
    let mut _51: std::result::Result<(), anchor_lang::prelude::ProgramError>;
    let mut _52: &anchor_lang::solana_program::instruction::Instruction;
    let _53: &anchor_lang::solana_program::instruction::Instruction;
    let mut _54: &[anchor_lang::prelude::AccountInfo<'_>];
    let _55: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _56: &std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>;
    let _57: &std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _58: &[&[&[u8]]];
    let mut _59: {closure@programs/openbook_v2/src/lib.rs:19:1: 19:11};
    let mut _60: {closure@programs/openbook_v2/src/lib.rs:19:1: 19:11};
    let mut _62: &[&[&[u8]]];
    let mut _63: isize;
    let mut _64: isize;
    let mut _65: isize;
    let mut _66: isize;
    let mut _67: isize;
    scope 1 {
        debug ix => _11;
        let mut _49: std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>;
        scope 10 {
            debug acc_infos => _49;
        }
    }
    scope 2 {
        debug ix => _12;
        let mut _22: std::vec::Vec<u8>;
        let _30: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
        let _33: std::vec::Vec<u8>;
        scope 3 {
            debug ix_data => _22;
            let mut _34: std::vec::Vec<u8>;
            let mut _61: &[u8; 8];
            scope 8 {
                debug data => _34;
                let _42: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
                scope 9 {
                    debug accounts => _42;
                }
            }
        }
        scope 4 {
            debug residual => _30;
            scope 5 {
            }
        }
        scope 6 {
            debug val => _33;
            scope 7 {
            }
        }
    }

    bb0: {
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = move _2;
        StorageLive(_14);
        _14 = _3;
        StorageLive(_15);
        _15 = _4;
        StorageLive(_16);
        _16 = _5;
        StorageLive(_17);
        _17 = _6;
        StorageLive(_18);
        _18 = move _7;
        StorageLive(_19);
        _19 = _8;
        StorageLive(_20);
        _20 = move _9;
        StorageLive(_21);
        _21 = _10;
        _12 = instruction::PlaceOrder { side: move _13, price_lots: move _14, max_base_lots: move _15, max_quote_lots_including_fees: move _16, client_order_id: move _17, order_type: move _18, expiry_timestamp: move _19, self_trade_behavior: move _20, limit: move _21 };
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &_12;
        _26 = &(*_27);
        _25 = <instruction::PlaceOrder as anchor_lang::AnchorSerialize>::try_to_vec(move _26) -> [return: bb1, unwind: bb25];
    }

    bb1: {
        StorageDead(_26);
        StorageLive(_28);
        _28 = {closure@programs/openbook_v2/src/lib.rs:19:1: 19:11};
        _24 = std::result::Result::<Vec<u8>, std::io::Error>::map_err::<ErrorCode, {closure@programs/openbook_v2/src/lib.rs:19:1: 19:11}>(move _25, move _28) -> [return: bb2, unwind: bb25];
    }

    bb2: {
        StorageDead(_28);
        StorageDead(_25);
        _23 = <std::result::Result<Vec<u8>, ErrorCode> as Try>::branch(move _24) -> [return: bb3, unwind: bb25];
    }

    bb3: {
        StorageDead(_24);
        _29 = discriminant(_23);
        switchInt(move _29) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_33);
        _33 = move ((_23 as Continue).0: std::vec::Vec<u8>);
        _22 = move _33;
        StorageDead(_33);
        _65 = discriminant(_23);
        StorageDead(_27);
        StorageDead(_23);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _61 = const _;
        _36 = &(*_61);
        _35 = move _36 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_36);
        _34 = std::slice::<impl [u8]>::to_vec(move _35) -> [return: bb8, unwind: bb24];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_30);
        _30 = ((_23 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>);
        StorageLive(_32);
        _32 = _30;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, ErrorCode>>>::from_residual(move _32) -> [return: bb7, unwind: bb27];
    }

    bb7: {
        StorageDead(_32);
        StorageDead(_30);
        _63 = discriminant(_23);
        StorageDead(_27);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_12);
        StorageDead(_11);
        drop(_1) -> [return: bb19, unwind: bb26];
    }

    bb8: {
        StorageDead(_35);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &mut _34;
        StorageLive(_40);
        StorageLive(_41);
        _41 = &mut _22;
        _40 = &mut (*_41);
        _38 = Vec::<u8>::append(move _39, move _40) -> [return: bb9, unwind: bb23];
    }

    bb9: {
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_41);
        StorageDead(_38);
        StorageLive(_42);
        StorageLive(_43);
        _43 = &_1;
        StorageLive(_44);
        _44 = Option::<bool>::None;
        _42 = <CpiContext<'_, '_, '_, '_, context::__cpi_client_accounts_place_order::PlaceOrder<'_>> as anchor_lang::ToAccountMetas>::to_account_metas(move _43, move _44) -> [return: bb10, unwind: bb23];
    }

    bb10: {
        StorageDead(_44);
        StorageDead(_43);
        StorageLive(_45);
        StorageLive(_46);
        _46 = &(_1.2: anchor_lang::prelude::AccountInfo<'_>);
        _45 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _46) -> [return: bb11, unwind: bb22];
    }

    bb11: {
        StorageDead(_46);
        StorageLive(_47);
        _47 = move _42;
        StorageLive(_48);
        _48 = move _34;
        _11 = Instruction { program_id: move _45, accounts: move _47, data: move _48 };
        StorageDead(_48);
        StorageDead(_47);
        StorageDead(_45);
        StorageDead(_42);
        StorageDead(_34);
        drop(_22) -> [return: bb12, unwind: bb25];
    }

    bb12: {
        StorageDead(_22);
        StorageDead(_12);
        StorageLive(_49);
        StorageLive(_50);
        _50 = &_1;
        _49 = <CpiContext<'_, '_, '_, '_, context::__cpi_client_accounts_place_order::PlaceOrder<'_>> as anchor_lang::ToAccountInfos<'_>>::to_account_infos(move _50) -> [return: bb13, unwind: bb21];
    }

    bb13: {
        StorageDead(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = &_11;
        _52 = &(*_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = &_49;
        _56 = &(*_57);
        _55 = <Vec<anchor_lang::prelude::AccountInfo<'_>> as Deref>::deref(move _56) -> [return: bb14, unwind: bb20];
    }

    bb14: {
        _54 = &(*_55);
        StorageDead(_56);
        StorageLive(_58);
        _62 = deref_copy (_1.3: &[&[&[u8]]]);
        _58 = &(*_62);
        _51 = invoke_signed(move _52, move _54, move _58) -> [return: bb15, unwind: bb20];
    }

    bb15: {
        StorageDead(_58);
        StorageDead(_54);
        StorageDead(_52);
        StorageLive(_59);
        _59 = {closure@programs/openbook_v2/src/lib.rs:19:1: 19:11};
        StorageLive(_60);
        _60 = {closure@programs/openbook_v2/src/lib.rs:19:1: 19:11};
        _0 = std::result::Result::<(), anchor_lang::prelude::ProgramError>::map_or_else::<std::result::Result<(), anchor_lang::error::Error>, {closure@programs/openbook_v2/src/lib.rs:19:1: 19:11}, {closure@programs/openbook_v2/src/lib.rs:19:1: 19:11}>(move _51, move _59, move _60) -> [return: bb16, unwind: bb20];
    }

    bb16: {
        StorageDead(_60);
        StorageDead(_59);
        StorageDead(_51);
        drop(_49) -> [return: bb17, unwind: bb21];
    }

    bb17: {
        StorageDead(_49);
        drop(_11) -> [return: bb18, unwind: bb25];
    }

    bb18: {
        StorageDead(_11);
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_53);
        drop(_1) -> [return: bb19, unwind: bb26];
    }

    bb19: {
        return;
    }

    bb20 (cleanup): {
        drop(_49) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_11) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop(_42) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        drop(_34) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_22) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_1) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        resume;
    }

    bb27 (cleanup): {
        _67 = discriminant(_23);
        goto -> bb25;
    }
}
