// MIR for `cpi::<impl at programs/openbook_v2/src/lib.rs:19:1: 19:11>::get` after PreCodegen

fn cpi::<impl at programs/openbook_v2/src/lib.rs:19:1: 19:11>::get(_1: &Return<T>) -> T {
    debug self => _1;
    let mut _0: T;
    let _2: anchor_lang::prelude::Pubkey;
    let _3: std::vec::Vec<u8>;
    let mut _4: (anchor_lang::prelude::Pubkey, std::vec::Vec<u8>);
    let mut _5: std::option::Option<(anchor_lang::prelude::Pubkey, std::vec::Vec<u8>)>;
    let mut _6: std::result::Result<T, std::io::Error>;
    let mut _7: &[u8];
    let _8: &[u8];
    let mut _9: &std::vec::Vec<u8>;
    let _10: &std::vec::Vec<u8>;
    scope 1 {
        debug _key => _2;
        debug data => _3;
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        _5 = get_return_data() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = Option::<(anchor_lang::prelude::Pubkey, Vec<u8>)>::unwrap(move _5) -> [return: bb2, unwind: bb8];
    }

    bb2: {
        StorageDead(_5);
        StorageLive(_2);
        _2 = (_4.0: anchor_lang::prelude::Pubkey);
        StorageLive(_3);
        _3 = move (_4.1: std::vec::Vec<u8>);
        StorageDead(_4);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &_3;
        _9 = &(*_10);
        _8 = <Vec<u8> as Deref>::deref(move _9) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _7 = &(*_8);
        StorageDead(_9);
        _6 = <T as anchor_lang::AnchorDeserialize>::try_from_slice(move _7) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        StorageDead(_7);
        _0 = std::result::Result::<T, std::io::Error>::unwrap(move _6) -> [return: bb5, unwind: bb7];
    }

    bb5: {
        StorageDead(_6);
        drop(_3) -> [return: bb6, unwind: bb8];
    }

    bb6: {
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_10);
        StorageDead(_8);
        return;
    }

    bb7 (cleanup): {
        drop(_3) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        resume;
    }
}
