// MIR for `process_donate_to_reserve` after PreCodegen

fn process_donate_to_reserve(_1: &Pubkey, _2: u64, _3: &[AccountInfo<'_>]) -> Result<(), ProgramError> {
    debug program_id => _1;
    debug liquidity_amount => _2;
    debug accounts => _3;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _4: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _5: std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _6: &[solana_program::account_info::AccountInfo<'_>];
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _9: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _10: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _11: isize;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _18: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _19: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _20: isize;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _27: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _28: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _29: isize;
    let mut _31: !;
    let mut _32: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _36: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _37: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _38: isize;
    let mut _40: !;
    let mut _41: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _44: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _45: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _46: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _47: isize;
    let mut _49: !;
    let mut _50: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _53: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _54: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _55: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _56: isize;
    let mut _58: !;
    let mut _59: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _62: solana_program::clock::Clock;
    let mut _63: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solana_program::clock::Clock>;
    let mut _64: std::result::Result<solana_program::clock::Clock, solana_program::program_error::ProgramError>;
    let mut _65: isize;
    let mut _67: !;
    let mut _68: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _71: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::state::LendingMarket>;
    let mut _72: std::result::Result<solend_sdk::state::LendingMarket, solana_program::program_error::ProgramError>;
    let mut _73: &[u8];
    let _74: &&mut [u8];
    let mut _75: &std::cell::Ref<'_, &mut [u8]>;
    let _76: &std::cell::Ref<'_, &mut [u8]>;
    let _77: std::cell::Ref<'_, &mut [u8]>;
    let mut _78: &std::cell::RefCell<&mut [u8]>;
    let _79: &std::cell::RefCell<&mut [u8]>;
    let mut _80: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _81: isize;
    let mut _83: !;
    let mut _84: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _86: ();
    let mut _87: bool;
    let mut _88: &&solana_program::pubkey::Pubkey;
    let mut _89: &&solana_program::pubkey::Pubkey;
    let mut _90: !;
    let _91: ();
    let mut _92: &str;
    let _93: &str;
    let mut _94: solana_program::program_error::ProgramError;
    let mut _95: solend_sdk::error::LendingError;
    let _96: ();
    let mut _97: bool;
    let mut _98: &&solana_program::pubkey::Pubkey;
    let _99: &solana_program::pubkey::Pubkey;
    let mut _100: &&solana_program::pubkey::Pubkey;
    let mut _101: !;
    let _102: ();
    let mut _103: &str;
    let _104: &str;
    let mut _105: solana_program::program_error::ProgramError;
    let mut _106: solend_sdk::error::LendingError;
    let _107: ();
    let mut _108: bool;
    let mut _109: &&solana_program::pubkey::Pubkey;
    let mut _110: &&solana_program::pubkey::Pubkey;
    let mut _111: !;
    let _112: ();
    let mut _113: &str;
    let _114: &str;
    let mut _115: solana_program::program_error::ProgramError;
    let mut _116: solend_sdk::error::LendingError;
    let mut _118: solend_sdk::state::Reserve;
    let mut _119: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::state::Reserve>;
    let mut _120: std::result::Result<solend_sdk::state::Reserve, solana_program::program_error::ProgramError>;
    let mut _121: &[u8];
    let _122: &&mut [u8];
    let mut _123: &std::cell::Ref<'_, &mut [u8]>;
    let _124: &std::cell::Ref<'_, &mut [u8]>;
    let _125: std::cell::Ref<'_, &mut [u8]>;
    let mut _126: &std::cell::RefCell<&mut [u8]>;
    let _127: &std::cell::RefCell<&mut [u8]>;
    let mut _128: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _129: isize;
    let mut _131: !;
    let mut _132: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _134: ();
    let mut _135: bool;
    let mut _136: &&solana_program::pubkey::Pubkey;
    let _137: &solana_program::pubkey::Pubkey;
    let mut _138: &&solana_program::pubkey::Pubkey;
    let mut _139: !;
    let _140: ();
    let mut _141: &str;
    let _142: &str;
    let mut _143: solana_program::program_error::ProgramError;
    let mut _144: solend_sdk::error::LendingError;
    let _145: ();
    let mut _146: bool;
    let mut _147: &&solana_program::pubkey::Pubkey;
    let _148: &solana_program::pubkey::Pubkey;
    let mut _149: &&solana_program::pubkey::Pubkey;
    let mut _150: !;
    let _151: ();
    let mut _152: &str;
    let _153: &str;
    let mut _154: solana_program::program_error::ProgramError;
    let mut _155: solend_sdk::error::LendingError;
    let _156: ();
    let mut _157: bool;
    let mut _158: &&solana_program::pubkey::Pubkey;
    let _159: &solana_program::pubkey::Pubkey;
    let mut _160: &&solana_program::pubkey::Pubkey;
    let mut _161: !;
    let _162: ();
    let mut _163: &str;
    let _164: &str;
    let mut _165: solana_program::program_error::ProgramError;
    let mut _166: solend_sdk::error::LendingError;
    let _167: ();
    let mut _168: bool;
    let mut _169: &solana_program::pubkey::Pubkey;
    let mut _170: &solana_program::pubkey::Pubkey;
    let _171: solana_program::pubkey::Pubkey;
    let mut _172: [u8; 32];
    let mut _173: !;
    let _174: ();
    let mut _175: &str;
    let _176: &str;
    let mut _177: solana_program::program_error::ProgramError;
    let mut _178: solend_sdk::error::LendingError;
    let _179: ();
    let mut _180: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _181: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _182: &solana_program::pubkey::Pubkey;
    let mut _183: &solana_program::account_info::AccountInfo<'_>;
    let mut _184: &solana_program::clock::Clock;
    let mut _185: isize;
    let mut _187: !;
    let mut _188: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _190: ();
    let mut _191: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _192: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _193: &mut solend_sdk::state::ReserveLiquidity;
    let mut _194: u64;
    let mut _195: isize;
    let mut _197: !;
    let mut _198: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _200: ();
    let mut _201: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _202: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _203: processor::TokenTransferParams<'_, '_>;
    let mut _204: solana_program::account_info::AccountInfo<'_>;
    let mut _205: &solana_program::account_info::AccountInfo<'_>;
    let mut _206: solana_program::account_info::AccountInfo<'_>;
    let mut _207: &solana_program::account_info::AccountInfo<'_>;
    let mut _208: u64;
    let mut _209: solana_program::account_info::AccountInfo<'_>;
    let mut _210: &solana_program::account_info::AccountInfo<'_>;
    let mut _211: &[&[u8]];
    let mut _212: &[&[u8]; 0];
    let _213: &[&[u8]; 0];
    let _214: [&[u8]; 0];
    let mut _215: solana_program::account_info::AccountInfo<'_>;
    let mut _216: &solana_program::account_info::AccountInfo<'_>;
    let mut _217: isize;
    let mut _219: !;
    let mut _220: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _222: ();
    let mut _223: &mut solend_sdk::state::LastUpdate;
    let _224: ();
    let mut _225: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _226: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _227: solend_sdk::state::Reserve;
    let mut _228: &mut [u8];
    let mut _229: &mut &mut [u8];
    let mut _230: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _231: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _232: std::cell::RefMut<'_, &mut [u8]>;
    let mut _233: &std::cell::RefCell<&mut [u8]>;
    let _234: &std::cell::RefCell<&mut [u8]>;
    let mut _235: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _236: isize;
    let mut _238: !;
    let mut _239: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _241: ();
    let mut _243: &mut [u8];
    let mut _244: &mut [u8];
    let mut _245: &solana_program::pubkey::Pubkey;
    let mut _246: &mut [u8];
    let mut _247: bool;
    let mut _248: bool;
    let mut _249: isize;
    let mut _250: isize;
    let mut _251: isize;
    let mut _252: isize;
    let mut _253: isize;
    let mut _254: isize;
    let mut _255: isize;
    let mut _256: isize;
    let mut _257: isize;
    let mut _258: isize;
    let mut _259: isize;
    let mut _260: isize;
    let mut _261: isize;
    let mut _262: isize;
    let mut _263: isize;
    let mut _264: isize;
    let mut _265: isize;
    let mut _266: isize;
    let mut _267: isize;
    let mut _268: isize;
    let mut _269: isize;
    let mut _270: isize;
    let mut _271: isize;
    let mut _272: isize;
    let mut _273: isize;
    let mut _274: isize;
    let mut _275: isize;
    let mut _276: isize;
    let mut _277: isize;
    let mut _278: isize;
    let mut _279: isize;
    let mut _280: isize;
    let mut _281: isize;
    let mut _282: isize;
    let mut _283: isize;
    let mut _284: isize;
    let mut _285: isize;
    let mut _286: isize;
    let mut _287: isize;
    let mut _288: isize;
    let mut _289: isize;
    let mut _290: isize;
    let mut _291: isize;
    let mut _292: isize;
    let mut _293: isize;
    let mut _294: isize;
    let mut _295: isize;
    let mut _296: isize;
    let mut _297: isize;
    let mut _298: isize;
    let mut _299: isize;
    let mut _300: isize;
    let mut _301: isize;
    let mut _302: isize;
    let mut _303: isize;
    let mut _304: isize;
    let mut _305: isize;
    let mut _306: isize;
    let mut _307: isize;
    let mut _308: isize;
    let mut _309: isize;
    let mut _310: isize;
    let mut _311: isize;
    let mut _312: isize;
    let mut _313: isize;
    let mut _314: *const solend_sdk::state::Reserve;
    let mut _315: *const solend_sdk::state::Reserve;
    let mut _316: *const solend_sdk::state::Reserve;
    let mut _317: *const solend_sdk::state::Reserve;
    let mut _318: *const solend_sdk::state::Reserve;
    let mut _319: *const solend_sdk::state::Reserve;
    scope 1 {
        debug account_info_iter => _4;
        let _7: &solana_program::account_info::AccountInfo<'_>;
        let _12: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _15: &solana_program::account_info::AccountInfo<'_>;
        scope 2 {
            debug source_liquidity_info => _7;
            let _16: &solana_program::account_info::AccountInfo<'_>;
            let _21: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
            let _24: &solana_program::account_info::AccountInfo<'_>;
            scope 7 {
                debug destination_liquidity_info => _16;
                let _25: &solana_program::account_info::AccountInfo<'_>;
                let _30: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                let _33: &solana_program::account_info::AccountInfo<'_>;
                scope 12 {
                    debug reserve_info => _25;
                    let _34: &solana_program::account_info::AccountInfo<'_>;
                    let _39: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                    let _42: &solana_program::account_info::AccountInfo<'_>;
                    scope 17 {
                        debug lending_market_info => _34;
                        let _43: &solana_program::account_info::AccountInfo<'_>;
                        let _48: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                        let _51: &solana_program::account_info::AccountInfo<'_>;
                        scope 22 {
                            debug user_transfer_authority_info => _43;
                            let _52: &solana_program::account_info::AccountInfo<'_>;
                            let _57: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                            let _60: &solana_program::account_info::AccountInfo<'_>;
                            scope 27 {
                                debug token_program_id => _52;
                                let _61: &solana_program::clock::Clock;
                                let _66: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                let _69: solana_program::clock::Clock;
                                scope 32 {
                                    debug clock => _61;
                                    let _70: solend_sdk::state::LendingMarket;
                                    let _82: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                    let _85: solend_sdk::state::LendingMarket;
                                    scope 37 {
                                        debug lending_market => _70;
                                        let mut _117: std::boxed::Box<solend_sdk::state::Reserve>;
                                        let _130: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                        let _133: solend_sdk::state::Reserve;
                                        scope 42 {
                                            debug reserve => _117;
                                            let _186: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                            let _189: ();
                                            let _196: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                            let _199: ();
                                            let _218: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                            let _221: ();
                                            let _237: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                            let _240: ();
                                            let mut _242: &[&[u8]; 0];
                                            let mut _320: *const ();
                                            let mut _321: usize;
                                            let mut _322: usize;
                                            let mut _323: usize;
                                            let mut _324: usize;
                                            let mut _325: bool;
                                            scope 47 {
                                                debug residual => _186;
                                                scope 48 {
                                                }
                                            }
                                            scope 49 {
                                                debug val => _189;
                                                scope 50 {
                                                }
                                            }
                                            scope 51 {
                                                debug residual => _196;
                                                scope 52 {
                                                }
                                            }
                                            scope 53 {
                                                debug val => _199;
                                                scope 54 {
                                                }
                                            }
                                            scope 55 {
                                                debug residual => _218;
                                                scope 56 {
                                                }
                                            }
                                            scope 57 {
                                                debug val => _221;
                                                scope 58 {
                                                }
                                            }
                                            scope 59 {
                                                debug residual => _237;
                                                scope 60 {
                                                }
                                            }
                                            scope 61 {
                                                debug val => _240;
                                                scope 62 {
                                                }
                                            }
                                        }
                                        scope 43 {
                                            debug residual => _130;
                                            scope 44 {
                                            }
                                        }
                                        scope 45 {
                                            debug val => _133;
                                            scope 46 {
                                            }
                                        }
                                    }
                                    scope 38 {
                                        debug residual => _82;
                                        scope 39 {
                                        }
                                    }
                                    scope 40 {
                                        debug val => _85;
                                        scope 41 {
                                        }
                                    }
                                }
                                scope 33 {
                                    debug residual => _66;
                                    scope 34 {
                                    }
                                }
                                scope 35 {
                                    debug val => _69;
                                    scope 36 {
                                    }
                                }
                            }
                            scope 28 {
                                debug residual => _57;
                                scope 29 {
                                }
                            }
                            scope 30 {
                                debug val => _60;
                                scope 31 {
                                }
                            }
                        }
                        scope 23 {
                            debug residual => _48;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _51;
                            scope 26 {
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _39;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _42;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _30;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _33;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _21;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _24;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _12;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _15;
            scope 6 {
            }
        }
    }

    bb0: {
        _248 = const false;
        _247 = const false;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &(*_3);
        _5 = bytemuck::core::slice::<impl [AccountInfo<'_>]>::iter(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = &mut _5;
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &mut (*_4);
        _9 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        _8 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _9) -> [return: bb3, unwind: bb144];
    }

    bb3: {
        StorageDead(_9);
        _11 = discriminant(_8);
        switchInt(move _11) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_15);
        _15 = ((_8 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _7 = _15;
        StorageDead(_15);
        _249 = discriminant(_8);
        StorageDead(_8);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &mut (*_4);
        _18 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _19) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_12);
        _12 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_14);
        _14 = move _12;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _14) -> [return: bb7, unwind: bb157];
    }

    bb7: {
        StorageDead(_14);
        StorageDead(_12);
        _299 = discriminant(_8);
        StorageDead(_8);
        goto -> bb135;
    }

    bb8: {
        StorageDead(_19);
        _17 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _18) -> [return: bb9, unwind: bb144];
    }

    bb9: {
        StorageDead(_18);
        _20 = discriminant(_17);
        switchInt(move _20) -> [0: bb10, 1: bb11, otherwise: bb5];
    }

    bb10: {
        StorageLive(_24);
        _24 = ((_17 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _16 = _24;
        StorageDead(_24);
        _251 = discriminant(_17);
        StorageDead(_17);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &mut (*_4);
        _27 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _28) -> [return: bb13, unwind continue];
    }

    bb11: {
        StorageLive(_21);
        _21 = move ((_17 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_23);
        _23 = move _21;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _23) -> [return: bb12, unwind: bb156];
    }

    bb12: {
        StorageDead(_23);
        StorageDead(_21);
        _297 = discriminant(_17);
        StorageDead(_17);
        goto -> bb134;
    }

    bb13: {
        StorageDead(_28);
        _26 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _27) -> [return: bb14, unwind: bb144];
    }

    bb14: {
        StorageDead(_27);
        _29 = discriminant(_26);
        switchInt(move _29) -> [0: bb15, 1: bb16, otherwise: bb5];
    }

    bb15: {
        StorageLive(_33);
        _33 = ((_26 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _25 = _33;
        StorageDead(_33);
        _253 = discriminant(_26);
        StorageDead(_26);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &mut (*_4);
        _36 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _37) -> [return: bb18, unwind continue];
    }

    bb16: {
        StorageLive(_30);
        _30 = move ((_26 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_32);
        _32 = move _30;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _32) -> [return: bb17, unwind: bb155];
    }

    bb17: {
        StorageDead(_32);
        StorageDead(_30);
        _295 = discriminant(_26);
        StorageDead(_26);
        goto -> bb133;
    }

    bb18: {
        StorageDead(_37);
        _35 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _36) -> [return: bb19, unwind: bb144];
    }

    bb19: {
        StorageDead(_36);
        _38 = discriminant(_35);
        switchInt(move _38) -> [0: bb20, 1: bb21, otherwise: bb5];
    }

    bb20: {
        StorageLive(_42);
        _42 = ((_35 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _34 = _42;
        StorageDead(_42);
        _255 = discriminant(_35);
        StorageDead(_35);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = &mut (*_4);
        _45 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _46) -> [return: bb23, unwind continue];
    }

    bb21: {
        StorageLive(_39);
        _39 = move ((_35 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_41);
        _41 = move _39;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _41) -> [return: bb22, unwind: bb154];
    }

    bb22: {
        StorageDead(_41);
        StorageDead(_39);
        _293 = discriminant(_35);
        StorageDead(_35);
        goto -> bb132;
    }

    bb23: {
        StorageDead(_46);
        _44 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _45) -> [return: bb24, unwind: bb144];
    }

    bb24: {
        StorageDead(_45);
        _47 = discriminant(_44);
        switchInt(move _47) -> [0: bb25, 1: bb26, otherwise: bb5];
    }

    bb25: {
        StorageLive(_51);
        _51 = ((_44 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _43 = _51;
        StorageDead(_51);
        _257 = discriminant(_44);
        StorageDead(_44);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &mut (*_4);
        _54 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _55) -> [return: bb28, unwind continue];
    }

    bb26: {
        StorageLive(_48);
        _48 = move ((_44 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_50);
        _50 = move _48;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _50) -> [return: bb27, unwind: bb153];
    }

    bb27: {
        StorageDead(_50);
        StorageDead(_48);
        _291 = discriminant(_44);
        StorageDead(_44);
        goto -> bb131;
    }

    bb28: {
        StorageDead(_55);
        _53 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _54) -> [return: bb29, unwind: bb144];
    }

    bb29: {
        StorageDead(_54);
        _56 = discriminant(_53);
        switchInt(move _56) -> [0: bb30, 1: bb31, otherwise: bb5];
    }

    bb30: {
        StorageLive(_60);
        _60 = ((_53 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _52 = _60;
        StorageDead(_60);
        _259 = discriminant(_53);
        StorageDead(_53);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = <Clock as Sysvar>::get() -> [return: bb33, unwind continue];
    }

    bb31: {
        StorageLive(_57);
        _57 = move ((_53 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_59);
        _59 = move _57;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _59) -> [return: bb32, unwind: bb152];
    }

    bb32: {
        StorageDead(_59);
        StorageDead(_57);
        _289 = discriminant(_53);
        StorageDead(_53);
        goto -> bb130;
    }

    bb33: {
        _63 = <Result<Clock, ProgramError> as Try>::branch(move _64) -> [return: bb34, unwind: bb144];
    }

    bb34: {
        StorageDead(_64);
        _65 = discriminant(_63);
        switchInt(move _65) -> [0: bb35, 1: bb36, otherwise: bb5];
    }

    bb35: {
        StorageLive(_69);
        _69 = move ((_63 as Continue).0: solana_program::clock::Clock);
        _62 = move _69;
        StorageDead(_69);
        _61 = &_62;
        _261 = discriminant(_63);
        StorageDead(_63);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _80 = &((*_34).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _79 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _80) -> [return: bb38, unwind continue];
    }

    bb36: {
        StorageLive(_66);
        _66 = move ((_63 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_68);
        _68 = move _66;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _68) -> [return: bb37, unwind: bb151];
    }

    bb37: {
        StorageDead(_68);
        StorageDead(_66);
        _287 = discriminant(_63);
        StorageDead(_63);
        goto -> bb129;
    }

    bb38: {
        _78 = &(*_79);
        StorageDead(_80);
        _77 = RefCell::<&mut [u8]>::borrow(move _78) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_78);
        _76 = &_77;
        _75 = &(*_76);
        _74 = <Ref<'_, &mut [u8]> as Deref>::deref(move _75) -> [return: bb40, unwind: bb143];
    }

    bb40: {
        _243 = deref_copy (*_74);
        _73 = &(*_243);
        StorageDead(_75);
        _72 = <LendingMarket as Pack>::unpack(move _73) -> [return: bb41, unwind: bb143];
    }

    bb41: {
        StorageDead(_73);
        _71 = <Result<LendingMarket, ProgramError> as Try>::branch(move _72) -> [return: bb42, unwind: bb143];
    }

    bb42: {
        StorageDead(_72);
        _81 = discriminant(_71);
        switchInt(move _81) -> [0: bb43, 1: bb44, otherwise: bb5];
    }

    bb43: {
        StorageLive(_85);
        _85 = move ((_71 as Continue).0: solend_sdk::state::LendingMarket);
        _70 = move _85;
        StorageDead(_85);
        _263 = discriminant(_71);
        drop(_77) -> [return: bb46, unwind: bb144];
    }

    bb44: {
        StorageLive(_82);
        _82 = move ((_71 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_84);
        _84 = move _82;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _84) -> [return: bb45, unwind: bb150];
    }

    bb45: {
        StorageDead(_84);
        StorageDead(_82);
        _285 = discriminant(_71);
        drop(_77) -> [return: bb127, unwind: bb144];
    }

    bb46: {
        StorageDead(_79);
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_74);
        StorageDead(_71);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _88 = &((*_34).3: &solana_program::pubkey::Pubkey);
        StorageLive(_89);
        _89 = &_1;
        _87 = <&Pubkey as PartialEq>::ne(move _88, move _89) -> [return: bb47, unwind continue];
    }

    bb47: {
        switchInt(move _87) -> [0: bb51, otherwise: bb48];
    }

    bb48: {
        StorageDead(_89);
        StorageDead(_88);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _93 = const "Lending market provided is not owned by the lending program";
        _92 = &(*_93);
        _91 = solana_program::log::sol_log(move _92) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_92);
        StorageDead(_93);
        StorageDead(_91);
        StorageLive(_94);
        StorageLive(_95);
        _95 = solend_sdk::error::LendingError::InvalidAccountOwner;
        _94 = <LendingError as Into<ProgramError>>::into(move _95) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_95);
        _0 = Result::<(), ProgramError>::Err(move _94);
        StorageDead(_94);
        StorageDead(_87);
        StorageDead(_86);
        goto -> bb128;
    }

    bb51: {
        StorageDead(_89);
        StorageDead(_88);
        _86 = const ();
        StorageDead(_87);
        StorageDead(_86);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = &(_70.4: solana_program::pubkey::Pubkey);
        _98 = &_99;
        StorageLive(_100);
        _100 = &((*_52).0: &solana_program::pubkey::Pubkey);
        _97 = <&Pubkey as PartialEq>::ne(move _98, move _100) -> [return: bb52, unwind continue];
    }

    bb52: {
        switchInt(move _97) -> [0: bb56, otherwise: bb53];
    }

    bb53: {
        StorageDead(_100);
        StorageDead(_99);
        StorageDead(_98);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _104 = const "Lending market token program does not match the token program provided";
        _103 = &(*_104);
        _102 = solana_program::log::sol_log(move _103) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_103);
        StorageDead(_104);
        StorageDead(_102);
        StorageLive(_105);
        StorageLive(_106);
        _106 = InvalidTokenProgram;
        _105 = <LendingError as Into<ProgramError>>::into(move _106) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_106);
        _0 = Result::<(), ProgramError>::Err(move _105);
        StorageDead(_105);
        StorageDead(_97);
        StorageDead(_96);
        goto -> bb128;
    }

    bb56: {
        StorageDead(_100);
        StorageDead(_99);
        StorageDead(_98);
        _96 = const ();
        StorageDead(_97);
        StorageDead(_96);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        _109 = &((*_25).3: &solana_program::pubkey::Pubkey);
        StorageLive(_110);
        _110 = &_1;
        _108 = <&Pubkey as PartialEq>::ne(move _109, move _110) -> [return: bb57, unwind continue];
    }

    bb57: {
        switchInt(move _108) -> [0: bb61, otherwise: bb58];
    }

    bb58: {
        StorageDead(_110);
        StorageDead(_109);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        _114 = const "Lending market provided is not owned by the lending program";
        _113 = &(*_114);
        _112 = solana_program::log::sol_log(move _113) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_113);
        StorageDead(_114);
        StorageDead(_112);
        StorageLive(_115);
        StorageLive(_116);
        _116 = solend_sdk::error::LendingError::InvalidAccountOwner;
        _115 = <LendingError as Into<ProgramError>>::into(move _116) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_116);
        _0 = Result::<(), ProgramError>::Err(move _115);
        StorageDead(_115);
        StorageDead(_108);
        StorageDead(_107);
        goto -> bb128;
    }

    bb61: {
        StorageDead(_110);
        StorageDead(_109);
        _107 = const ();
        StorageDead(_108);
        StorageDead(_107);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        _128 = &((*_25).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _127 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _128) -> [return: bb62, unwind continue];
    }

    bb62: {
        _126 = &(*_127);
        StorageDead(_128);
        _125 = RefCell::<&mut [u8]>::borrow(move _126) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_126);
        _124 = &_125;
        _123 = &(*_124);
        _122 = <Ref<'_, &mut [u8]> as Deref>::deref(move _123) -> [return: bb64, unwind: bb142];
    }

    bb64: {
        _244 = deref_copy (*_122);
        _121 = &(*_244);
        StorageDead(_123);
        _120 = <Reserve as Pack>::unpack(move _121) -> [return: bb65, unwind: bb142];
    }

    bb65: {
        StorageDead(_121);
        _119 = <Result<Reserve, ProgramError> as Try>::branch(move _120) -> [return: bb66, unwind: bb142];
    }

    bb66: {
        _247 = const true;
        _248 = const true;
        StorageDead(_120);
        _129 = discriminant(_119);
        switchInt(move _129) -> [0: bb67, 1: bb68, otherwise: bb5];
    }

    bb67: {
        StorageLive(_133);
        _133 = move ((_119 as Continue).0: solend_sdk::state::Reserve);
        _118 = move _133;
        StorageDead(_133);
        _117 = Box::<Reserve>::new(move _118) -> [return: bb70, unwind: bb149];
    }

    bb68: {
        StorageLive(_130);
        _130 = move ((_119 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_132);
        _132 = move _130;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _132) -> [return: bb69, unwind: bb149];
    }

    bb69: {
        StorageDead(_132);
        StorageDead(_130);
        StorageDead(_118);
        _283 = discriminant(_119);
        drop(_125) -> [return: bb125, unwind: bb144];
    }

    bb70: {
        StorageDead(_118);
        _265 = discriminant(_119);
        drop(_125) -> [return: bb71, unwind: bb141];
    }

    bb71: {
        StorageDead(_127);
        StorageDead(_125);
        StorageDead(_124);
        StorageDead(_122);
        _247 = const false;
        _248 = const false;
        StorageDead(_119);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        _314 = (((_117.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _137 = &((*_314).2: solana_program::pubkey::Pubkey);
        _136 = &_137;
        StorageLive(_138);
        _138 = &((*_34).0: &solana_program::pubkey::Pubkey);
        _135 = <&Pubkey as PartialEq>::ne(move _136, move _138) -> [return: bb72, unwind: bb141];
    }

    bb72: {
        switchInt(move _135) -> [0: bb76, otherwise: bb73];
    }

    bb73: {
        StorageDead(_138);
        StorageDead(_137);
        StorageDead(_136);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        _142 = const "Reserve lending market does not match the lending market provided";
        _141 = &(*_142);
        _140 = solana_program::log::sol_log(move _141) -> [return: bb74, unwind: bb141];
    }

    bb74: {
        StorageDead(_141);
        StorageDead(_142);
        StorageDead(_140);
        StorageLive(_143);
        StorageLive(_144);
        _144 = InvalidAccountInput;
        _143 = <LendingError as Into<ProgramError>>::into(move _144) -> [return: bb75, unwind: bb141];
    }

    bb75: {
        StorageDead(_144);
        _0 = Result::<(), ProgramError>::Err(move _143);
        StorageDead(_143);
        StorageDead(_135);
        StorageDead(_134);
        goto -> bb124;
    }

    bb76: {
        StorageDead(_138);
        StorageDead(_137);
        StorageDead(_136);
        _134 = const ();
        StorageDead(_135);
        StorageDead(_134);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        _315 = (((_117.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _148 = &(((*_315).3: solend_sdk::state::ReserveLiquidity).2: solana_program::pubkey::Pubkey);
        _147 = &_148;
        StorageLive(_149);
        _149 = &((*_16).0: &solana_program::pubkey::Pubkey);
        _146 = <&Pubkey as PartialEq>::ne(move _147, move _149) -> [return: bb77, unwind: bb141];
    }

    bb77: {
        switchInt(move _146) -> [0: bb81, otherwise: bb78];
    }

    bb78: {
        StorageDead(_149);
        StorageDead(_148);
        StorageDead(_147);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        _153 = const "Reserve liquidity supply does not match the reserve liquidity supply provided";
        _152 = &(*_153);
        _151 = solana_program::log::sol_log(move _152) -> [return: bb79, unwind: bb141];
    }

    bb79: {
        StorageDead(_152);
        StorageDead(_153);
        StorageDead(_151);
        StorageLive(_154);
        StorageLive(_155);
        _155 = InvalidAccountInput;
        _154 = <LendingError as Into<ProgramError>>::into(move _155) -> [return: bb80, unwind: bb141];
    }

    bb80: {
        StorageDead(_155);
        _0 = Result::<(), ProgramError>::Err(move _154);
        StorageDead(_154);
        StorageDead(_146);
        StorageDead(_145);
        goto -> bb124;
    }

    bb81: {
        StorageDead(_149);
        StorageDead(_148);
        StorageDead(_147);
        _145 = const ();
        StorageDead(_146);
        StorageDead(_145);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        _316 = (((_117.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _159 = &(((*_316).3: solend_sdk::state::ReserveLiquidity).2: solana_program::pubkey::Pubkey);
        _158 = &_159;
        StorageLive(_160);
        _160 = &((*_7).0: &solana_program::pubkey::Pubkey);
        _157 = <&Pubkey as PartialEq>::eq(move _158, move _160) -> [return: bb82, unwind: bb141];
    }

    bb82: {
        switchInt(move _157) -> [0: bb86, otherwise: bb83];
    }

    bb83: {
        StorageDead(_160);
        StorageDead(_159);
        StorageDead(_158);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        _164 = const "Reserve liquidity supply cannot be used as the source liquidity provided";
        _163 = &(*_164);
        _162 = solana_program::log::sol_log(move _163) -> [return: bb84, unwind: bb141];
    }

    bb84: {
        StorageDead(_163);
        StorageDead(_164);
        StorageDead(_162);
        StorageLive(_165);
        StorageLive(_166);
        _166 = InvalidAccountInput;
        _165 = <LendingError as Into<ProgramError>>::into(move _166) -> [return: bb85, unwind: bb141];
    }

    bb85: {
        StorageDead(_166);
        _0 = Result::<(), ProgramError>::Err(move _165);
        StorageDead(_165);
        StorageDead(_157);
        StorageDead(_156);
        goto -> bb124;
    }

    bb86: {
        StorageDead(_160);
        StorageDead(_159);
        StorageDead(_158);
        _156 = const ();
        StorageDead(_157);
        StorageDead(_156);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        _245 = deref_copy ((*_25).0: &solana_program::pubkey::Pubkey);
        _169 = &(*_245);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        _172 = [const 79_u8, const 68_u8, const 7_u8, const 231_u8, const 220_u8, const 197_u8, const 175_u8, const 35_u8, const 164_u8, const 161_u8, const 161_u8, const 117_u8, const 201_u8, const 99_u8, const 231_u8, const 17_u8, const 172_u8, const 182_u8, const 57_u8, const 205_u8, const 37_u8, const 14_u8, const 6_u8, const 130_u8, const 16_u8, const 236_u8, const 85_u8, const 253_u8, const 23_u8, const 48_u8, const 112_u8, const 121_u8];
        _171 = Pubkey::new_from_array(move _172) -> [return: bb87, unwind: bb141];
    }

    bb87: {
        _170 = &_171;
        StorageDead(_172);
        _168 = <Pubkey as PartialEq>::ne(move _169, move _170) -> [return: bb88, unwind: bb141];
    }

    bb88: {
        switchInt(move _168) -> [0: bb92, otherwise: bb89];
    }

    bb89: {
        StorageDead(_171);
        StorageDead(_170);
        StorageDead(_169);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        _176 = const "Donate function is currently limited to JUP pool usdc";
        _175 = &(*_176);
        _174 = solana_program::log::sol_log(move _175) -> [return: bb90, unwind: bb141];
    }

    bb90: {
        StorageDead(_175);
        StorageDead(_176);
        StorageDead(_174);
        StorageLive(_177);
        StorageLive(_178);
        _178 = InvalidAccountInput;
        _177 = <LendingError as Into<ProgramError>>::into(move _178) -> [return: bb91, unwind: bb141];
    }

    bb91: {
        StorageDead(_178);
        _0 = Result::<(), ProgramError>::Err(move _177);
        StorageDead(_177);
        StorageDead(_168);
        StorageDead(_167);
        goto -> bb124;
    }

    bb92: {
        StorageDead(_171);
        StorageDead(_170);
        StorageDead(_169);
        _167 = const ();
        StorageDead(_168);
        StorageDead(_167);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        _182 = &(*_1);
        StorageLive(_183);
        _183 = &(*_25);
        StorageLive(_184);
        _184 = &(*_61);
        _181 = _refresh_reserve_interest(move _182, move _183, move _184) -> [return: bb93, unwind: bb141];
    }

    bb93: {
        StorageDead(_184);
        StorageDead(_183);
        StorageDead(_182);
        _180 = <Result<(), ProgramError> as Try>::branch(move _181) -> [return: bb94, unwind: bb141];
    }

    bb94: {
        StorageDead(_181);
        _185 = discriminant(_180);
        switchInt(move _185) -> [0: bb95, 1: bb96, otherwise: bb5];
    }

    bb95: {
        StorageLive(_189);
        _189 = ((_180 as Continue).0: ());
        _179 = _189;
        StorageDead(_189);
        _267 = discriminant(_180);
        StorageDead(_180);
        StorageDead(_179);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        _317 = (((_117.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _193 = &mut ((*_317).3: solend_sdk::state::ReserveLiquidity);
        StorageLive(_194);
        _194 = _2;
        _192 = ReserveLiquidity::donate(move _193, move _194) -> [return: bb98, unwind: bb141];
    }

    bb96: {
        StorageLive(_186);
        _186 = move ((_180 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_188);
        _188 = move _186;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _188) -> [return: bb97, unwind: bb148];
    }

    bb97: {
        StorageDead(_188);
        StorageDead(_186);
        _281 = discriminant(_180);
        StorageDead(_180);
        StorageDead(_179);
        goto -> bb124;
    }

    bb98: {
        StorageDead(_194);
        StorageDead(_193);
        _191 = <Result<(), ProgramError> as Try>::branch(move _192) -> [return: bb99, unwind: bb141];
    }

    bb99: {
        StorageDead(_192);
        _195 = discriminant(_191);
        switchInt(move _195) -> [0: bb100, 1: bb101, otherwise: bb5];
    }

    bb100: {
        StorageLive(_199);
        _199 = ((_191 as Continue).0: ());
        _190 = _199;
        StorageDead(_199);
        _269 = discriminant(_191);
        StorageDead(_191);
        StorageDead(_190);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        _205 = &(*_7);
        _204 = <AccountInfo<'_> as Clone>::clone(move _205) -> [return: bb103, unwind: bb141];
    }

    bb101: {
        StorageLive(_196);
        _196 = move ((_191 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_198);
        _198 = move _196;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _198) -> [return: bb102, unwind: bb147];
    }

    bb102: {
        StorageDead(_198);
        StorageDead(_196);
        _279 = discriminant(_191);
        StorageDead(_191);
        StorageDead(_190);
        goto -> bb124;
    }

    bb103: {
        StorageDead(_205);
        StorageLive(_206);
        StorageLive(_207);
        _207 = &(*_16);
        _206 = <AccountInfo<'_> as Clone>::clone(move _207) -> [return: bb104, unwind: bb140];
    }

    bb104: {
        StorageDead(_207);
        StorageLive(_208);
        _208 = _2;
        StorageLive(_209);
        StorageLive(_210);
        _210 = &(*_43);
        _209 = <AccountInfo<'_> as Clone>::clone(move _210) -> [return: bb105, unwind: bb139];
    }

    bb105: {
        StorageDead(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        _242 = const _;
        _213 = &(*_242);
        _212 = &(*_213);
        _211 = move _212 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_212);
        StorageLive(_215);
        StorageLive(_216);
        _216 = &(*_52);
        _215 = <AccountInfo<'_> as Clone>::clone(move _216) -> [return: bb106, unwind: bb138];
    }

    bb106: {
        StorageDead(_216);
        _203 = TokenTransferParams::<'_, '_> { source: move _204, destination: move _206, amount: move _208, authority: move _209, authority_signer_seeds: move _211, token_program: move _215 };
        StorageDead(_215);
        StorageDead(_211);
        StorageDead(_209);
        StorageDead(_208);
        StorageDead(_206);
        StorageDead(_204);
        _202 = spl_token_transfer(move _203) -> [return: bb107, unwind: bb141];
    }

    bb107: {
        StorageDead(_203);
        _201 = <Result<(), ProgramError> as Try>::branch(move _202) -> [return: bb108, unwind: bb141];
    }

    bb108: {
        StorageDead(_202);
        _217 = discriminant(_201);
        switchInt(move _217) -> [0: bb109, 1: bb110, otherwise: bb5];
    }

    bb109: {
        StorageLive(_221);
        _221 = ((_201 as Continue).0: ());
        _200 = _221;
        StorageDead(_221);
        _271 = discriminant(_201);
        StorageDead(_213);
        StorageDead(_201);
        StorageDead(_200);
        StorageLive(_222);
        StorageLive(_223);
        _318 = (((_117.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _223 = &mut ((*_318).1: solend_sdk::state::LastUpdate);
        _222 = LastUpdate::mark_stale(move _223) -> [return: bb112, unwind: bb141];
    }

    bb110: {
        StorageLive(_218);
        _218 = move ((_201 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_220);
        _220 = move _218;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _220) -> [return: bb111, unwind: bb146];
    }

    bb111: {
        StorageDead(_220);
        StorageDead(_218);
        _277 = discriminant(_201);
        StorageDead(_213);
        StorageDead(_201);
        StorageDead(_200);
        goto -> bb124;
    }

    bb112: {
        StorageDead(_223);
        StorageDead(_222);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        _319 = (((_117.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _320 = _319 as *const () (PtrToPtr);
        _321 = _320 as usize (Transmute);
        _322 = AlignOf(solend_sdk::state::Reserve);
        _323 = Sub(_322, const 1_usize);
        _324 = BitAnd(_321, _323);
        _325 = Eq(_324, const 0_usize);
        assert(_325, "misaligned pointer dereference: address must be a multiple of {} but is {}", _322, _321) -> [success: bb158, unwind unreachable];
    }

    bb113: {
        _233 = &(*_234);
        StorageDead(_235);
        _232 = RefCell::<&mut [u8]>::borrow_mut(move _233) -> [return: bb114, unwind: bb141];
    }

    bb114: {
        StorageDead(_233);
        _231 = &mut _232;
        _230 = &mut (*_231);
        _229 = <RefMut<'_, &mut [u8]> as DerefMut>::deref_mut(move _230) -> [return: bb115, unwind: bb137];
    }

    bb115: {
        _246 = deref_copy (*_229);
        _228 = &mut (*_246);
        StorageDead(_230);
        _226 = <Reserve as Pack>::pack(move _227, move _228) -> [return: bb116, unwind: bb137];
    }

    bb116: {
        StorageDead(_228);
        StorageDead(_227);
        _225 = <Result<(), ProgramError> as Try>::branch(move _226) -> [return: bb117, unwind: bb137];
    }

    bb117: {
        StorageDead(_226);
        _236 = discriminant(_225);
        switchInt(move _236) -> [0: bb118, 1: bb119, otherwise: bb5];
    }

    bb118: {
        StorageLive(_240);
        _240 = ((_225 as Continue).0: ());
        _224 = _240;
        StorageDead(_240);
        _273 = discriminant(_225);
        drop(_232) -> [return: bb121, unwind: bb141];
    }

    bb119: {
        StorageLive(_237);
        _237 = move ((_225 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_239);
        _239 = move _237;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _239) -> [return: bb120, unwind: bb145];
    }

    bb120: {
        StorageDead(_239);
        StorageDead(_237);
        _275 = discriminant(_225);
        drop(_232) -> [return: bb123, unwind: bb141];
    }

    bb121: {
        StorageDead(_234);
        StorageDead(_232);
        StorageDead(_231);
        StorageDead(_229);
        StorageDead(_225);
        StorageDead(_224);
        StorageLive(_241);
        _241 = ();
        _0 = Result::<(), ProgramError>::Ok(move _241);
        StorageDead(_241);
        drop(_117) -> [return: bb122, unwind: bb144];
    }

    bb122: {
        StorageDead(_117);
        StorageDead(_70);
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_52);
        StorageDead(_43);
        StorageDead(_34);
        StorageDead(_25);
        StorageDead(_16);
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb136;
    }

    bb123: {
        StorageDead(_234);
        StorageDead(_232);
        StorageDead(_231);
        StorageDead(_229);
        StorageDead(_225);
        StorageDead(_224);
        goto -> bb124;
    }

    bb124: {
        drop(_117) -> [return: bb126, unwind: bb144];
    }

    bb125: {
        StorageDead(_127);
        StorageDead(_125);
        StorageDead(_124);
        StorageDead(_122);
        _247 = const false;
        _248 = const false;
        StorageDead(_119);
        goto -> bb126;
    }

    bb126: {
        StorageDead(_117);
        goto -> bb128;
    }

    bb127: {
        StorageDead(_79);
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_74);
        StorageDead(_71);
        goto -> bb128;
    }

    bb128: {
        StorageDead(_70);
        goto -> bb129;
    }

    bb129: {
        StorageDead(_62);
        StorageDead(_61);
        goto -> bb130;
    }

    bb130: {
        StorageDead(_52);
        goto -> bb131;
    }

    bb131: {
        StorageDead(_43);
        goto -> bb132;
    }

    bb132: {
        StorageDead(_34);
        goto -> bb133;
    }

    bb133: {
        StorageDead(_25);
        goto -> bb134;
    }

    bb134: {
        StorageDead(_16);
        goto -> bb135;
    }

    bb135: {
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb136;
    }

    bb136: {
        return;
    }

    bb137 (cleanup): {
        drop(_232) -> [return: bb141, unwind terminate(cleanup)];
    }

    bb138 (cleanup): {
        drop(_209) -> [return: bb139, unwind terminate(cleanup)];
    }

    bb139 (cleanup): {
        drop(_206) -> [return: bb140, unwind terminate(cleanup)];
    }

    bb140 (cleanup): {
        drop(_204) -> [return: bb141, unwind terminate(cleanup)];
    }

    bb141 (cleanup): {
        drop(_117) -> [return: bb144, unwind terminate(cleanup)];
    }

    bb142 (cleanup): {
        drop(_125) -> [return: bb144, unwind terminate(cleanup)];
    }

    bb143 (cleanup): {
        drop(_77) -> [return: bb144, unwind terminate(cleanup)];
    }

    bb144 (cleanup): {
        resume;
    }

    bb145 (cleanup): {
        _301 = discriminant(_225);
        goto -> bb137;
    }

    bb146 (cleanup): {
        _302 = discriminant(_201);
        goto -> bb141;
    }

    bb147 (cleanup): {
        _303 = discriminant(_191);
        goto -> bb141;
    }

    bb148 (cleanup): {
        _304 = discriminant(_180);
        goto -> bb141;
    }

    bb149 (cleanup): {
        _305 = discriminant(_119);
        goto -> bb142;
    }

    bb150 (cleanup): {
        _306 = discriminant(_71);
        goto -> bb143;
    }

    bb151 (cleanup): {
        _307 = discriminant(_63);
        goto -> bb144;
    }

    bb152 (cleanup): {
        _308 = discriminant(_53);
        goto -> bb144;
    }

    bb153 (cleanup): {
        _309 = discriminant(_44);
        goto -> bb144;
    }

    bb154 (cleanup): {
        _310 = discriminant(_35);
        goto -> bb144;
    }

    bb155 (cleanup): {
        _311 = discriminant(_26);
        goto -> bb144;
    }

    bb156 (cleanup): {
        _312 = discriminant(_17);
        goto -> bb144;
    }

    bb157 (cleanup): {
        _313 = discriminant(_8);
        goto -> bb144;
    }

    bb158: {
        _227 = move (*_319);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        _235 = &((*_25).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _234 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _235) -> [return: bb113, unwind: bb141];
    }
}
