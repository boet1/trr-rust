// MIR for `is_cpi_call` after PreCodegen

fn is_cpi_call(_1: &Pubkey, _2: usize, _3: &AccountInfo<'_>) -> Result<bool, ProgramError> {
    debug program_id => _1;
    debug current_index => _2;
    debug sysvar_info => _3;
    let mut _0: std::result::Result<bool, solana_program::program_error::ProgramError>;
    let _4: solana_program::instruction::Instruction;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solana_program::instruction::Instruction>;
    let mut _6: std::result::Result<solana_program::instruction::Instruction, solana_program::program_error::ProgramError>;
    let mut _7: usize;
    let mut _8: &solana_program::account_info::AccountInfo<'_>;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _13: solana_program::instruction::Instruction;
    let _14: ();
    let mut _15: bool;
    let mut _16: &solana_program::pubkey::Pubkey;
    let mut _17: &solana_program::pubkey::Pubkey;
    let mut _18: !;
    let _19: ();
    let mut _20: bool;
    let mut _21: usize;
    let mut _22: !;
    let mut _23: isize;
    let mut _24: isize;
    let mut _25: isize;
    let mut _26: isize;
    let mut _27: isize;
    scope 1 {
        debug current_ixn => _4;
    }
    scope 2 {
        debug residual => _10;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _13;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = _2;
        StorageLive(_8);
        _8 = &(*_3);
        _6 = load_instruction_at_checked(move _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageDead(_7);
        _5 = <Result<Instruction, ProgramError> as Try>::branch(move _6) -> [return: bb2, unwind: bb18];
    }

    bb2: {
        StorageDead(_6);
        _9 = discriminant(_5);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = move ((_5 as Continue).0: solana_program::instruction::Instruction);
        _4 = move _13;
        StorageDead(_13);
        _23 = discriminant(_5);
        StorageDead(_5);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &(*_1);
        StorageLive(_17);
        _17 = &(_4.0: solana_program::pubkey::Pubkey);
        _15 = <Pubkey as PartialEq>::ne(move _16, move _17) -> [return: bb7, unwind: bb17];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_12);
        _12 = move _10;
        _0 = <Result<bool, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _12) -> [return: bb6, unwind: bb19];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        _25 = discriminant(_5);
        StorageDead(_5);
        goto -> bb15;
    }

    bb7: {
        switchInt(move _15) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        StorageDead(_17);
        StorageDead(_16);
        _0 = Result::<bool, ProgramError>::Ok(const true);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb14;
    }

    bb9: {
        StorageDead(_17);
        StorageDead(_16);
        _14 = const ();
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = get_stack_height() -> [return: bb10, unwind: bb17];
    }

    bb10: {
        _20 = Gt(move _21, const _);
        switchInt(move _20) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        StorageDead(_21);
        _0 = Result::<bool, ProgramError>::Ok(const true);
        StorageDead(_20);
        StorageDead(_19);
        goto -> bb14;
    }

    bb12: {
        StorageDead(_21);
        _19 = const ();
        StorageDead(_20);
        StorageDead(_19);
        _0 = Result::<bool, ProgramError>::Ok(const false);
        drop(_4) -> [return: bb13, unwind: bb18];
    }

    bb13: {
        StorageDead(_4);
        goto -> bb16;
    }

    bb14: {
        drop(_4) -> [return: bb15, unwind: bb18];
    }

    bb15: {
        StorageDead(_4);
        goto -> bb16;
    }

    bb16: {
        return;
    }

    bb17 (cleanup): {
        drop(_4) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        resume;
    }

    bb19 (cleanup): {
        _27 = discriminant(_5);
        goto -> bb18;
    }
}
