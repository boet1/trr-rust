// MIR for `_refresh_reserve_interest` before PreCodegen

fn _refresh_reserve_interest(_1: &Pubkey, _2: &AccountInfo<'_>, _3: &Clock) -> Result<(), ProgramError> {
    debug program_id => _1;
    debug reserve_info => _2;
    debug clock => _3;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _4: std::boxed::Box<solend_sdk::state::Reserve>;
    let mut _5: solend_sdk::state::Reserve;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::state::Reserve>;
    let mut _7: std::result::Result<solend_sdk::state::Reserve, solana_program::program_error::ProgramError>;
    let mut _8: &[u8];
    let _9: &&mut [u8];
    let mut _10: &std::cell::Ref<'_, &mut [u8]>;
    let _11: &std::cell::Ref<'_, &mut [u8]>;
    let _12: std::cell::Ref<'_, &mut [u8]>;
    let mut _13: &std::cell::RefCell<&mut [u8]>;
    let _14: &std::cell::RefCell<&mut [u8]>;
    let mut _15: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _20: solend_sdk::state::Reserve;
    let _21: ();
    let mut _22: bool;
    let mut _23: &&solana_program::pubkey::Pubkey;
    let mut _24: &&solana_program::pubkey::Pubkey;
    let mut _25: !;
    let _26: ();
    let mut _27: &str;
    let _28: &str;
    let mut _29: solana_program::program_error::ProgramError;
    let mut _30: solend_sdk::error::LendingError;
    let _31: ();
    let mut _32: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _33: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _34: &mut solend_sdk::state::Reserve;
    let mut _35: u64;
    let mut _36: isize;
    let mut _38: !;
    let mut _39: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _41: ();
    let mut _42: &mut solend_sdk::state::LastUpdate;
    let mut _43: u64;
    let _44: ();
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _46: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _47: solend_sdk::state::Reserve;
    let mut _48: &mut [u8];
    let mut _49: &mut &mut [u8];
    let mut _50: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _51: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _52: std::cell::RefMut<'_, &mut [u8]>;
    let mut _53: &std::cell::RefCell<&mut [u8]>;
    let _54: &std::cell::RefCell<&mut [u8]>;
    let mut _55: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _56: isize;
    let mut _58: !;
    let mut _59: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _61: ();
    let mut _62: &mut [u8];
    let mut _63: &mut [u8];
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: isize;
    let mut _67: isize;
    let mut _68: isize;
    let mut _69: isize;
    let mut _70: isize;
    let mut _71: isize;
    let mut _72: isize;
    let mut _73: isize;
    let mut _74: isize;
    let mut _75: isize;
    let mut _76: isize;
    let mut _77: isize;
    let mut _78: isize;
    let mut _79: isize;
    let mut _80: isize;
    let mut _81: *const solend_sdk::state::Reserve;
    let mut _82: *const solend_sdk::state::Reserve;
    let mut _83: *const solend_sdk::state::Reserve;
    scope 1 {
        debug reserve => _4;
        let _37: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _40: ();
        let _57: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _60: ();
        let mut _84: *const ();
        let mut _85: usize;
        let mut _86: usize;
        let mut _87: usize;
        let mut _88: usize;
        let mut _89: bool;
        scope 6 {
            debug residual => _37;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _40;
            scope 9 {
            }
        }
        scope 10 {
            debug residual => _57;
            scope 11 {
            }
        }
        scope 12 {
            debug val => _60;
            scope 13 {
            }
        }
    }
    scope 2 {
        debug residual => _17;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _20;
        scope 5 {
        }
    }

    bb0: {
        _65 = const false;
        _64 = const false;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &((*_2).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _14 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _15) -> [return: bb1, unwind continue];
    }

    bb1: {
        _13 = &(*_14);
        StorageDead(_15);
        _12 = RefCell::<&mut [u8]>::borrow(move _13) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_13);
        _11 = &_12;
        _10 = &(*_11);
        _9 = <Ref<'_, &mut [u8]> as Deref>::deref(move _10) -> [return: bb3, unwind: bb40];
    }

    bb3: {
        _62 = deref_copy (*_9);
        _8 = &(*_62);
        StorageDead(_10);
        _7 = <Reserve as Pack>::unpack(move _8) -> [return: bb4, unwind: bb40];
    }

    bb4: {
        StorageDead(_8);
        _6 = <Result<Reserve, ProgramError> as Try>::branch(move _7) -> [return: bb5, unwind: bb40];
    }

    bb5: {
        _64 = const true;
        _65 = const true;
        StorageDead(_7);
        _16 = discriminant(_6);
        switchInt(move _16) -> [0: bb6, 1: bb8, otherwise: bb7];
    }

    bb6: {
        StorageLive(_20);
        _20 = move ((_6 as Continue).0: solend_sdk::state::Reserve);
        _5 = move _20;
        StorageDead(_20);
        _4 = Box::<Reserve>::new(move _5) -> [return: bb10, unwind: bb44];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        StorageLive(_17);
        _17 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _19) -> [return: bb9, unwind: bb44];
    }

    bb9: {
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_5);
        _76 = discriminant(_6);
        drop(_12) -> [return: bb35, unwind: bb41];
    }

    bb10: {
        StorageDead(_5);
        _66 = discriminant(_6);
        drop(_12) -> [return: bb11, unwind: bb39];
    }

    bb11: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_9);
        _64 = const false;
        _65 = const false;
        StorageDead(_6);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = &((*_2).3: &solana_program::pubkey::Pubkey);
        StorageLive(_24);
        _24 = &_1;
        _22 = <&Pubkey as PartialEq>::ne(move _23, move _24) -> [return: bb12, unwind: bb39];
    }

    bb12: {
        switchInt(move _22) -> [0: bb16, otherwise: bb13];
    }

    bb13: {
        StorageDead(_24);
        StorageDead(_23);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = const "Reserve provided is not owned by the lending program";
        _27 = &(*_28);
        _26 = solana_program::log::sol_log(move _27) -> [return: bb14, unwind: bb39];
    }

    bb14: {
        StorageDead(_27);
        StorageDead(_28);
        StorageDead(_26);
        StorageLive(_29);
        StorageLive(_30);
        _30 = solend_sdk::error::LendingError::InvalidAccountOwner;
        _29 = <LendingError as Into<ProgramError>>::into(move _30) -> [return: bb15, unwind: bb39];
    }

    bb15: {
        StorageDead(_30);
        _0 = Result::<(), ProgramError>::Err(move _29);
        StorageDead(_29);
        StorageDead(_22);
        StorageDead(_21);
        goto -> bb34;
    }

    bb16: {
        StorageDead(_24);
        StorageDead(_23);
        _21 = const ();
        StorageDead(_22);
        StorageDead(_21);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _81 = (((_4.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _34 = &mut (*_81);
        StorageLive(_35);
        _35 = ((*_3).0: u64);
        _33 = Reserve::accrue_interest(move _34, move _35) -> [return: bb17, unwind: bb39];
    }

    bb17: {
        StorageDead(_35);
        StorageDead(_34);
        _32 = <Result<(), ProgramError> as Try>::branch(move _33) -> [return: bb18, unwind: bb39];
    }

    bb18: {
        StorageDead(_33);
        _36 = discriminant(_32);
        switchInt(move _36) -> [0: bb19, 1: bb20, otherwise: bb7];
    }

    bb19: {
        StorageLive(_40);
        _40 = ((_32 as Continue).0: ());
        _31 = _40;
        StorageDead(_40);
        _68 = discriminant(_32);
        StorageDead(_32);
        StorageDead(_31);
        StorageLive(_41);
        StorageLive(_42);
        _82 = (((_4.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _42 = &mut ((*_82).1: solend_sdk::state::LastUpdate);
        StorageLive(_43);
        _43 = ((*_3).0: u64);
        _41 = LastUpdate::update_slot(move _42, move _43) -> [return: bb22, unwind: bb39];
    }

    bb20: {
        StorageLive(_37);
        _37 = move ((_32 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_39);
        _39 = move _37;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _39) -> [return: bb21, unwind: bb43];
    }

    bb21: {
        StorageDead(_39);
        StorageDead(_37);
        _74 = discriminant(_32);
        StorageDead(_32);
        StorageDead(_31);
        goto -> bb34;
    }

    bb22: {
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _83 = (((_4.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _84 = _83 as *const () (PtrToPtr);
        _85 = _84 as usize (Transmute);
        _86 = AlignOf(solend_sdk::state::Reserve);
        _87 = Sub(_86, const 1_usize);
        _88 = BitAnd(_85, _87);
        _89 = Eq(_88, const 0_usize);
        assert(_89, "misaligned pointer dereference: address must be a multiple of {} but is {}", _86, _85) -> [success: bb45, unwind unreachable];
    }

    bb23: {
        _53 = &(*_54);
        StorageDead(_55);
        _52 = RefCell::<&mut [u8]>::borrow_mut(move _53) -> [return: bb24, unwind: bb39];
    }

    bb24: {
        StorageDead(_53);
        _51 = &mut _52;
        _50 = &mut (*_51);
        _49 = <RefMut<'_, &mut [u8]> as DerefMut>::deref_mut(move _50) -> [return: bb25, unwind: bb38];
    }

    bb25: {
        _63 = deref_copy (*_49);
        _48 = &mut (*_63);
        StorageDead(_50);
        _46 = <Reserve as Pack>::pack(move _47, move _48) -> [return: bb26, unwind: bb38];
    }

    bb26: {
        StorageDead(_48);
        StorageDead(_47);
        _45 = <Result<(), ProgramError> as Try>::branch(move _46) -> [return: bb27, unwind: bb38];
    }

    bb27: {
        StorageDead(_46);
        _56 = discriminant(_45);
        switchInt(move _56) -> [0: bb28, 1: bb29, otherwise: bb7];
    }

    bb28: {
        StorageLive(_60);
        _60 = ((_45 as Continue).0: ());
        _44 = _60;
        StorageDead(_60);
        _70 = discriminant(_45);
        drop(_52) -> [return: bb31, unwind: bb39];
    }

    bb29: {
        StorageLive(_57);
        _57 = move ((_45 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_59);
        _59 = move _57;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _59) -> [return: bb30, unwind: bb42];
    }

    bb30: {
        StorageDead(_59);
        StorageDead(_57);
        _72 = discriminant(_45);
        drop(_52) -> [return: bb33, unwind: bb39];
    }

    bb31: {
        StorageDead(_54);
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_49);
        StorageDead(_45);
        StorageDead(_44);
        StorageLive(_61);
        _61 = ();
        _0 = Result::<(), ProgramError>::Ok(move _61);
        StorageDead(_61);
        drop(_4) -> [return: bb32, unwind: bb41];
    }

    bb32: {
        StorageDead(_4);
        goto -> bb37;
    }

    bb33: {
        StorageDead(_54);
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_49);
        StorageDead(_45);
        StorageDead(_44);
        goto -> bb34;
    }

    bb34: {
        drop(_4) -> [return: bb36, unwind: bb41];
    }

    bb35: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_9);
        _64 = const false;
        _65 = const false;
        StorageDead(_6);
        goto -> bb36;
    }

    bb36: {
        StorageDead(_4);
        goto -> bb37;
    }

    bb37: {
        return;
    }

    bb38 (cleanup): {
        drop(_52) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_4) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_12) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        resume;
    }

    bb42 (cleanup): {
        _78 = discriminant(_45);
        goto -> bb38;
    }

    bb43 (cleanup): {
        _79 = discriminant(_32);
        goto -> bb39;
    }

    bb44 (cleanup): {
        _80 = discriminant(_6);
        goto -> bb40;
    }

    bb45: {
        _47 = move (*_83);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &((*_2).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _54 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _55) -> [return: bb23, unwind: bb39];
    }
}
