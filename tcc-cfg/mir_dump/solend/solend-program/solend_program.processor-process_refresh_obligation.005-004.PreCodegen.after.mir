// MIR for `process_refresh_obligation` after PreCodegen

fn process_refresh_obligation(_1: &Pubkey, _2: &[AccountInfo<'_>]) -> Result<(), ProgramError> {
    debug program_id => _1;
    debug accounts => _2;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _3: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _4: std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _5: &[solana_program::account_info::AccountInfo<'_>];
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _8: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _9: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _10: isize;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _16: solana_program::clock::Clock;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solana_program::clock::Clock>;
    let mut _18: std::result::Result<solana_program::clock::Clock, solana_program::program_error::ProgramError>;
    let mut _19: isize;
    let mut _21: !;
    let mut _22: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::state::Obligation>;
    let mut _26: std::result::Result<solend_sdk::state::Obligation, solana_program::program_error::ProgramError>;
    let mut _27: &[u8];
    let _28: &&mut [u8];
    let mut _29: &std::cell::Ref<'_, &mut [u8]>;
    let _30: &std::cell::Ref<'_, &mut [u8]>;
    let _31: std::cell::Ref<'_, &mut [u8]>;
    let mut _32: &std::cell::RefCell<&mut [u8]>;
    let _33: &std::cell::RefCell<&mut [u8]>;
    let mut _34: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _35: isize;
    let mut _37: !;
    let mut _38: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _40: ();
    let mut _41: bool;
    let mut _42: &&solana_program::pubkey::Pubkey;
    let mut _43: &&solana_program::pubkey::Pubkey;
    let mut _44: !;
    let _45: ();
    let mut _46: &str;
    let _47: &str;
    let mut _48: solana_program::program_error::ProgramError;
    let mut _49: solend_sdk::error::LendingError;
    let _57: ();
    let mut _58: std::iter::Enumerate<std::slice::IterMut<'_, solend_sdk::state::ObligationCollateral>>;
    let mut _59: std::iter::Enumerate<std::slice::IterMut<'_, solend_sdk::state::ObligationCollateral>>;
    let mut _60: std::slice::IterMut<'_, solend_sdk::state::ObligationCollateral>;
    let mut _61: &mut [solend_sdk::state::ObligationCollateral];
    let mut _62: &mut [solend_sdk::state::ObligationCollateral];
    let mut _63: &mut std::vec::Vec<solend_sdk::state::ObligationCollateral>;
    let mut _65: ();
    let _66: ();
    let mut _67: std::option::Option<(usize, &mut solend_sdk::state::ObligationCollateral)>;
    let mut _68: &mut std::iter::Enumerate<std::slice::IterMut<'_, solend_sdk::state::ObligationCollateral>>;
    let mut _69: &mut std::iter::Enumerate<std::slice::IterMut<'_, solend_sdk::state::ObligationCollateral>>;
    let mut _70: isize;
    let mut _71: !;
    let mut _75: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _76: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _77: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _78: isize;
    let mut _80: !;
    let mut _81: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _83: ();
    let mut _84: bool;
    let mut _85: &&solana_program::pubkey::Pubkey;
    let mut _86: &&solana_program::pubkey::Pubkey;
    let mut _87: !;
    let _88: ();
    let mut _89: &str;
    let _90: &str;
    let mut _91: &std::string::String;
    let _92: &std::string::String;
    let _93: std::string::String;
    let mut _95: std::fmt::Arguments<'_>;
    let mut _96: &[&str];
    let mut _97: &[&str; 2];
    let _98: &[&str; 2];
    let _99: [&str; 2];
    let mut _100: &[bytemuck::core::fmt::rt::Argument<'_>];
    let mut _101: &[bytemuck::core::fmt::rt::Argument<'_>; 1];
    let _102: &[bytemuck::core::fmt::rt::Argument<'_>; 1];
    let _103: [bytemuck::core::fmt::rt::Argument<'_>; 1];
    let mut _104: bytemuck::core::fmt::rt::Argument<'_>;
    let mut _105: &usize;
    let _106: &usize;
    let mut _107: solana_program::program_error::ProgramError;
    let mut _108: solend_sdk::error::LendingError;
    let _109: ();
    let mut _110: bool;
    let mut _111: &solana_program::pubkey::Pubkey;
    let mut _112: &solana_program::pubkey::Pubkey;
    let mut _113: !;
    let _114: ();
    let mut _115: &str;
    let _116: &str;
    let mut _117: &std::string::String;
    let _118: &std::string::String;
    let _119: std::string::String;
    let mut _121: std::fmt::Arguments<'_>;
    let mut _122: &[&str];
    let mut _123: &[&str; 2];
    let _124: &[&str; 2];
    let _125: [&str; 2];
    let mut _126: &[bytemuck::core::fmt::rt::Argument<'_>];
    let mut _127: &[bytemuck::core::fmt::rt::Argument<'_>; 1];
    let _128: &[bytemuck::core::fmt::rt::Argument<'_>; 1];
    let _129: [bytemuck::core::fmt::rt::Argument<'_>; 1];
    let mut _130: bytemuck::core::fmt::rt::Argument<'_>;
    let mut _131: &usize;
    let _132: &usize;
    let mut _133: solana_program::program_error::ProgramError;
    let mut _134: solend_sdk::error::LendingError;
    let mut _136: solend_sdk::state::Reserve;
    let mut _137: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::state::Reserve>;
    let mut _138: std::result::Result<solend_sdk::state::Reserve, solana_program::program_error::ProgramError>;
    let mut _139: &[u8];
    let _140: &&mut [u8];
    let mut _141: &std::cell::Ref<'_, &mut [u8]>;
    let _142: &std::cell::Ref<'_, &mut [u8]>;
    let _143: std::cell::Ref<'_, &mut [u8]>;
    let mut _144: &std::cell::RefCell<&mut [u8]>;
    let _145: &std::cell::RefCell<&mut [u8]>;
    let mut _146: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _147: isize;
    let mut _149: !;
    let mut _150: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _152: ();
    let mut _153: bool;
    let mut _154: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, bool>;
    let mut _155: std::result::Result<bool, solana_program::program_error::ProgramError>;
    let mut _156: &solend_sdk::state::LastUpdate;
    let mut _157: u64;
    let mut _158: isize;
    let mut _160: !;
    let mut _161: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _163: !;
    let _164: ();
    let mut _165: &str;
    let _166: &str;
    let mut _167: &std::string::String;
    let _168: &std::string::String;
    let _169: std::string::String;
    let mut _171: std::fmt::Arguments<'_>;
    let mut _172: &[&str];
    let mut _173: &[&str; 2];
    let _174: &[&str; 2];
    let _175: [&str; 2];
    let mut _176: &[bytemuck::core::fmt::rt::Argument<'_>];
    let mut _177: &[bytemuck::core::fmt::rt::Argument<'_>; 1];
    let _178: &[bytemuck::core::fmt::rt::Argument<'_>; 1];
    let _179: [bytemuck::core::fmt::rt::Argument<'_>; 1];
    let mut _180: bytemuck::core::fmt::rt::Argument<'_>;
    let mut _181: &usize;
    let _182: &usize;
    let mut _183: solana_program::program_error::ProgramError;
    let mut _184: solend_sdk::error::LendingError;
    let mut _186: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::math::Decimal>;
    let mut _187: std::result::Result<solend_sdk::math::Decimal, solana_program::program_error::ProgramError>;
    let mut _188: &solend_sdk::state::CollateralExchangeRate;
    let _189: solend_sdk::state::CollateralExchangeRate;
    let mut _190: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::state::CollateralExchangeRate>;
    let mut _191: std::result::Result<solend_sdk::state::CollateralExchangeRate, solana_program::program_error::ProgramError>;
    let mut _192: &solend_sdk::state::Reserve;
    let mut _193: isize;
    let mut _195: !;
    let mut _196: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _198: solend_sdk::math::Decimal;
    let mut _199: u64;
    let mut _200: isize;
    let mut _202: !;
    let mut _203: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _206: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::math::Decimal>;
    let mut _207: std::result::Result<solend_sdk::math::Decimal, solana_program::program_error::ProgramError>;
    let mut _208: &solend_sdk::state::Reserve;
    let mut _209: solend_sdk::math::Decimal;
    let mut _210: isize;
    let mut _212: !;
    let mut _213: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _216: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::math::Decimal>;
    let mut _217: std::result::Result<solend_sdk::math::Decimal, solana_program::program_error::ProgramError>;
    let mut _218: &solend_sdk::state::Reserve;
    let mut _219: solend_sdk::math::Decimal;
    let mut _220: isize;
    let mut _222: !;
    let mut _223: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _226: u8;
    let mut _228: u8;
    let mut _230: u8;
    let mut _231: solend_sdk::math::Decimal;
    let mut _232: solend_sdk::math::Decimal;
    let mut _233: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::math::Decimal>;
    let mut _234: std::result::Result<solend_sdk::math::Decimal, solana_program::program_error::ProgramError>;
    let mut _235: solend_sdk::math::Decimal;
    let mut _236: solend_sdk::math::Decimal;
    let mut _237: isize;
    let mut _239: !;
    let mut _240: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _242: solend_sdk::math::Decimal;
    let mut _243: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::math::Decimal>;
    let mut _244: std::result::Result<solend_sdk::math::Decimal, solana_program::program_error::ProgramError>;
    let mut _245: solend_sdk::math::Decimal;
    let mut _246: solend_sdk::math::Decimal;
    let mut _247: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::math::Decimal>;
    let mut _248: std::result::Result<solend_sdk::math::Decimal, solana_program::program_error::ProgramError>;
    let mut _249: solend_sdk::math::Decimal;
    let mut _250: solend_sdk::math::Rate;
    let mut _251: isize;
    let mut _253: !;
    let mut _254: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _256: isize;
    let mut _258: !;
    let mut _259: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _261: solend_sdk::math::Decimal;
    let mut _262: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::math::Decimal>;
    let mut _263: std::result::Result<solend_sdk::math::Decimal, solana_program::program_error::ProgramError>;
    let mut _264: solend_sdk::math::Decimal;
    let mut _265: solend_sdk::math::Decimal;
    let mut _266: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::math::Decimal>;
    let mut _267: std::result::Result<solend_sdk::math::Decimal, solana_program::program_error::ProgramError>;
    let mut _268: solend_sdk::math::Decimal;
    let mut _269: solend_sdk::math::Rate;
    let mut _270: isize;
    let mut _272: !;
    let mut _273: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _275: isize;
    let mut _277: !;
    let mut _278: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _280: solend_sdk::math::Decimal;
    let mut _281: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::math::Decimal>;
    let mut _282: std::result::Result<solend_sdk::math::Decimal, solana_program::program_error::ProgramError>;
    let mut _283: solend_sdk::math::Decimal;
    let mut _284: solend_sdk::math::Decimal;
    let mut _285: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::math::Decimal>;
    let mut _286: std::result::Result<solend_sdk::math::Decimal, solana_program::program_error::ProgramError>;
    let mut _287: solend_sdk::math::Decimal;
    let mut _288: solend_sdk::math::Rate;
    let mut _289: isize;
    let mut _291: !;
    let mut _292: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _294: isize;
    let mut _296: !;
    let mut _297: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _301: ();
    let mut _302: std::iter::Enumerate<std::slice::IterMut<'_, solend_sdk::state::ObligationLiquidity>>;
    let mut _303: std::iter::Enumerate<std::slice::IterMut<'_, solend_sdk::state::ObligationLiquidity>>;
    let mut _304: std::slice::IterMut<'_, solend_sdk::state::ObligationLiquidity>;
    let mut _305: &mut [solend_sdk::state::ObligationLiquidity];
    let mut _306: &mut [solend_sdk::state::ObligationLiquidity];
    let mut _307: &mut std::vec::Vec<solend_sdk::state::ObligationLiquidity>;
    let _309: ();
    let mut _310: std::option::Option<(usize, &mut solend_sdk::state::ObligationLiquidity)>;
    let mut _311: &mut std::iter::Enumerate<std::slice::IterMut<'_, solend_sdk::state::ObligationLiquidity>>;
    let mut _312: &mut std::iter::Enumerate<std::slice::IterMut<'_, solend_sdk::state::ObligationLiquidity>>;
    let mut _313: isize;
    let mut _314: !;
    let mut _318: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _319: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _320: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _321: isize;
    let mut _323: !;
    let mut _324: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _326: ();
    let mut _327: bool;
    let mut _328: &&solana_program::pubkey::Pubkey;
    let mut _329: &&solana_program::pubkey::Pubkey;
    let mut _330: !;
    let _331: ();
    let mut _332: &str;
    let _333: &str;
    let mut _334: &std::string::String;
    let _335: &std::string::String;
    let _336: std::string::String;
    let mut _338: std::fmt::Arguments<'_>;
    let mut _339: &[&str];
    let mut _340: &[&str; 2];
    let _341: &[&str; 2];
    let _342: [&str; 2];
    let mut _343: &[bytemuck::core::fmt::rt::Argument<'_>];
    let mut _344: &[bytemuck::core::fmt::rt::Argument<'_>; 1];
    let _345: &[bytemuck::core::fmt::rt::Argument<'_>; 1];
    let _346: [bytemuck::core::fmt::rt::Argument<'_>; 1];
    let mut _347: bytemuck::core::fmt::rt::Argument<'_>;
    let mut _348: &usize;
    let _349: &usize;
    let mut _350: solana_program::program_error::ProgramError;
    let mut _351: solend_sdk::error::LendingError;
    let _352: ();
    let mut _353: bool;
    let mut _354: &solana_program::pubkey::Pubkey;
    let mut _355: &solana_program::pubkey::Pubkey;
    let mut _356: !;
    let _357: ();
    let mut _358: &str;
    let _359: &str;
    let mut _360: &std::string::String;
    let _361: &std::string::String;
    let _362: std::string::String;
    let mut _364: std::fmt::Arguments<'_>;
    let mut _365: &[&str];
    let mut _366: &[&str; 2];
    let _367: &[&str; 2];
    let _368: [&str; 2];
    let mut _369: &[bytemuck::core::fmt::rt::Argument<'_>];
    let mut _370: &[bytemuck::core::fmt::rt::Argument<'_>; 1];
    let _371: &[bytemuck::core::fmt::rt::Argument<'_>; 1];
    let _372: [bytemuck::core::fmt::rt::Argument<'_>; 1];
    let mut _373: bytemuck::core::fmt::rt::Argument<'_>;
    let mut _374: &usize;
    let _375: &usize;
    let mut _376: solana_program::program_error::ProgramError;
    let mut _377: solend_sdk::error::LendingError;
    let mut _379: solend_sdk::state::Reserve;
    let mut _380: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::state::Reserve>;
    let mut _381: std::result::Result<solend_sdk::state::Reserve, solana_program::program_error::ProgramError>;
    let mut _382: &[u8];
    let _383: &&mut [u8];
    let mut _384: &std::cell::Ref<'_, &mut [u8]>;
    let _385: &std::cell::Ref<'_, &mut [u8]>;
    let _386: std::cell::Ref<'_, &mut [u8]>;
    let mut _387: &std::cell::RefCell<&mut [u8]>;
    let _388: &std::cell::RefCell<&mut [u8]>;
    let mut _389: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _390: isize;
    let mut _392: !;
    let mut _393: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _395: ();
    let mut _396: bool;
    let mut _397: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, bool>;
    let mut _398: std::result::Result<bool, solana_program::program_error::ProgramError>;
    let mut _399: &solend_sdk::state::LastUpdate;
    let mut _400: u64;
    let mut _401: isize;
    let mut _403: !;
    let mut _404: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _406: !;
    let _407: ();
    let mut _408: &str;
    let _409: &str;
    let mut _410: &std::string::String;
    let _411: &std::string::String;
    let _412: std::string::String;
    let mut _414: std::fmt::Arguments<'_>;
    let mut _415: &[&str];
    let mut _416: &[&str; 2];
    let _417: &[&str; 2];
    let _418: [&str; 2];
    let mut _419: &[bytemuck::core::fmt::rt::Argument<'_>];
    let mut _420: &[bytemuck::core::fmt::rt::Argument<'_>; 1];
    let _421: &[bytemuck::core::fmt::rt::Argument<'_>; 1];
    let _422: [bytemuck::core::fmt::rt::Argument<'_>; 1];
    let mut _423: bytemuck::core::fmt::rt::Argument<'_>;
    let mut _424: &usize;
    let _425: &usize;
    let mut _426: solana_program::program_error::ProgramError;
    let mut _427: solend_sdk::error::LendingError;
    let _428: ();
    let mut _429: bool;
    let mut _430: &solend_sdk::state::ReserveType;
    let mut _431: &solend_sdk::state::ReserveType;
    let _432: solend_sdk::state::ReserveType;
    let _433: ();
    let mut _434: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _435: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _436: &mut solend_sdk::state::ObligationLiquidity;
    let mut _437: solend_sdk::math::Decimal;
    let mut _438: isize;
    let mut _440: !;
    let mut _441: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _444: u64;
    let mut _445: &solana_program::pubkey::Pubkey;
    let mut _446: std::option::Option<((u64, &solana_program::pubkey::Pubkey), usize)>;
    let mut _447: isize;
    let mut _448: bool;
    let mut _449: &solend_sdk::math::Decimal;
    let mut _450: &solend_sdk::math::Decimal;
    let _451: solend_sdk::math::Decimal;
    let mut _452: ((u64, &solana_program::pubkey::Pubkey), usize);
    let mut _453: (u64, &solana_program::pubkey::Pubkey);
    let mut _454: usize;
    let mut _456: bool;
    let mut _457: &solend_sdk::math::Decimal;
    let mut _458: &solend_sdk::math::Decimal;
    let _459: solend_sdk::math::Decimal;
    let mut _460: bool;
    let mut _461: &(u64, &solana_program::pubkey::Pubkey);
    let mut _462: &(u64, &solana_program::pubkey::Pubkey);
    let mut _463: ((u64, &solana_program::pubkey::Pubkey), usize);
    let mut _464: (u64, &solana_program::pubkey::Pubkey);
    let mut _465: usize;
    let mut _467: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::math::Decimal>;
    let mut _468: std::result::Result<solend_sdk::math::Decimal, solana_program::program_error::ProgramError>;
    let mut _469: &solend_sdk::state::Reserve;
    let mut _470: solend_sdk::math::Decimal;
    let mut _471: isize;
    let mut _473: !;
    let mut _474: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _477: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::math::Decimal>;
    let mut _478: std::result::Result<solend_sdk::math::Decimal, solana_program::program_error::ProgramError>;
    let mut _479: &solend_sdk::state::Reserve;
    let mut _480: solend_sdk::math::Decimal;
    let mut _481: isize;
    let mut _483: !;
    let mut _484: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _486: solend_sdk::math::Decimal;
    let mut _487: solend_sdk::math::Decimal;
    let mut _488: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::math::Decimal>;
    let mut _489: std::result::Result<solend_sdk::math::Decimal, solana_program::program_error::ProgramError>;
    let mut _490: solend_sdk::math::Decimal;
    let mut _491: solend_sdk::math::Decimal;
    let mut _492: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::math::Decimal>;
    let mut _493: std::result::Result<solend_sdk::math::Decimal, solana_program::program_error::ProgramError>;
    let mut _494: solend_sdk::math::Decimal;
    let mut _495: solend_sdk::math::Decimal;
    let mut _496: &solend_sdk::state::Reserve;
    let mut _497: isize;
    let mut _499: !;
    let mut _500: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _502: isize;
    let mut _504: !;
    let mut _505: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _507: solend_sdk::math::Decimal;
    let mut _508: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::math::Decimal>;
    let mut _509: std::result::Result<solend_sdk::math::Decimal, solana_program::program_error::ProgramError>;
    let mut _510: solend_sdk::math::Decimal;
    let mut _511: solend_sdk::math::Decimal;
    let mut _512: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::math::Decimal>;
    let mut _513: std::result::Result<solend_sdk::math::Decimal, solana_program::program_error::ProgramError>;
    let mut _514: solend_sdk::math::Decimal;
    let mut _515: solend_sdk::math::Decimal;
    let mut _516: &solend_sdk::state::Reserve;
    let mut _517: isize;
    let mut _519: !;
    let mut _520: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _522: isize;
    let mut _524: !;
    let mut _525: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _527: solend_sdk::math::Decimal;
    let mut _528: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::math::Decimal>;
    let mut _529: std::result::Result<solend_sdk::math::Decimal, solana_program::program_error::ProgramError>;
    let mut _530: solend_sdk::math::Decimal;
    let mut _531: solend_sdk::math::Decimal;
    let mut _532: isize;
    let mut _534: !;
    let mut _535: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _537: ();
    let mut _538: bool;
    let mut _539: &std::option::Option<&solana_program::account_info::AccountInfo<'_>>;
    let _540: std::option::Option<&solana_program::account_info::AccountInfo<'_>>;
    let mut _541: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _542: !;
    let _543: ();
    let mut _544: &str;
    let _545: &str;
    let mut _546: solana_program::program_error::ProgramError;
    let mut _547: solend_sdk::error::LendingError;
    let mut _548: solend_sdk::math::Decimal;
    let mut _549: solend_sdk::math::Decimal;
    let mut _550: solend_sdk::math::Decimal;
    let mut _551: solend_sdk::math::Decimal;
    let mut _552: bool;
    let mut _555: solend_sdk::math::Decimal;
    let mut _556: solend_sdk::math::Decimal;
    let mut _557: solend_sdk::math::Decimal;
    let mut _558: solend_sdk::math::Decimal;
    let mut _559: solend_sdk::math::Decimal;
    let mut _560: solend_sdk::math::Decimal;
    let mut _561: solend_sdk::math::Decimal;
    let mut _562: solend_sdk::math::Decimal;
    let mut _563: solend_sdk::math::Decimal;
    let _564: ();
    let mut _565: &mut solend_sdk::state::LastUpdate;
    let mut _566: u64;
    let mut _568: (std::option::Option<solana_program::pubkey::Pubkey>, std::option::Option<solana_program::pubkey::Pubkey>);
    let mut _569: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, (std::option::Option<solana_program::pubkey::Pubkey>, std::option::Option<solana_program::pubkey::Pubkey>)>;
    let mut _570: std::result::Result<(std::option::Option<solana_program::pubkey::Pubkey>, std::option::Option<solana_program::pubkey::Pubkey>), solana_program::program_error::ProgramError>;
    let mut _571: &mut solend_sdk::state::Obligation;
    let mut _572: &mut solend_sdk::state::Obligation;
    let mut _573: &[solana_program::account_info::AccountInfo<'_>];
    let _574: &[solana_program::account_info::AccountInfo<'_>];
    let _575: &[solana_program::account_info::AccountInfo<'_>];
    let mut _576: &[solana_program::account_info::AccountInfo<'_>];
    let mut _577: std::ops::RangeFrom<usize>;
    let mut _578: isize;
    let mut _580: !;
    let mut _581: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _583: ();
    let mut _584: bool;
    let mut _585: &std::option::Option<solana_program::pubkey::Pubkey>;
    let _586: ();
    let mut _587: isize;
    let _589: ();
    let mut _590: &mut [solend_sdk::state::ObligationLiquidity];
    let mut _591: &mut [solend_sdk::state::ObligationLiquidity];
    let mut _592: &mut std::vec::Vec<solend_sdk::state::ObligationLiquidity>;
    let mut _593: usize;
    let _594: ();
    let mut _595: &mut std::vec::Vec<solend_sdk::state::ObligationCollateral>;
    let mut _596: {closure@token-lending\program\src\processor.rs:1145:17: 1145:29};
    let _597: ();
    let mut _598: &mut std::vec::Vec<solend_sdk::state::ObligationLiquidity>;
    let mut _599: {closure@token-lending\program\src\processor.rs:1148:17: 1148:28};
    let _600: ();
    let mut _601: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _602: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _603: solend_sdk::state::Obligation;
    let mut _604: &mut [u8];
    let mut _605: &mut &mut [u8];
    let mut _606: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _607: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _608: std::cell::RefMut<'_, &mut [u8]>;
    let mut _609: &std::cell::RefCell<&mut [u8]>;
    let _610: &std::cell::RefCell<&mut [u8]>;
    let mut _611: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _612: isize;
    let mut _614: !;
    let mut _615: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _617: ();
    let mut _625: &mut [u8];
    let mut _626: &solana_program::pubkey::Pubkey;
    let mut _627: &mut [u8];
    let mut _628: &solana_program::pubkey::Pubkey;
    let mut _629: &mut [u8];
    let mut _630: &mut [u8];
    let mut _631: bool;
    let mut _632: bool;
    let mut _633: bool;
    let mut _634: bool;
    let mut _635: bool;
    let mut _636: bool;
    let mut _637: bool;
    let mut _638: bool;
    let mut _639: bool;
    let mut _640: bool;
    let mut _641: bool;
    let mut _642: bool;
    let mut _643: isize;
    let mut _644: isize;
    let mut _645: isize;
    let mut _646: isize;
    let mut _647: isize;
    let mut _648: isize;
    let mut _649: isize;
    let mut _650: isize;
    let mut _651: isize;
    let mut _652: isize;
    let mut _653: isize;
    let mut _654: isize;
    let mut _655: isize;
    let mut _656: isize;
    let mut _657: isize;
    let mut _658: isize;
    let mut _659: isize;
    let mut _660: isize;
    let mut _661: isize;
    let mut _662: isize;
    let mut _663: isize;
    let mut _664: isize;
    let mut _665: isize;
    let mut _666: isize;
    let mut _667: isize;
    let mut _668: isize;
    let mut _669: isize;
    let mut _670: isize;
    let mut _671: isize;
    let mut _672: isize;
    let mut _673: isize;
    let mut _674: isize;
    let mut _675: isize;
    let mut _676: isize;
    let mut _677: isize;
    let mut _678: isize;
    let mut _679: isize;
    let mut _680: isize;
    let mut _681: isize;
    let mut _682: isize;
    let mut _683: isize;
    let mut _684: isize;
    let mut _685: isize;
    let mut _686: isize;
    let mut _687: isize;
    let mut _688: isize;
    let mut _689: isize;
    let mut _690: isize;
    let mut _691: isize;
    let mut _692: isize;
    let mut _693: isize;
    let mut _694: isize;
    let mut _695: isize;
    let mut _696: isize;
    let mut _697: isize;
    let mut _698: isize;
    let mut _699: isize;
    let mut _700: isize;
    let mut _701: isize;
    let mut _702: isize;
    let mut _703: isize;
    let mut _704: isize;
    let mut _705: isize;
    let mut _706: isize;
    let mut _707: isize;
    let mut _708: isize;
    let mut _709: isize;
    let mut _710: isize;
    let mut _711: isize;
    let mut _712: isize;
    let mut _713: isize;
    let mut _714: isize;
    let mut _715: isize;
    let mut _716: isize;
    let mut _717: isize;
    let mut _718: isize;
    let mut _719: isize;
    let mut _720: isize;
    let mut _721: isize;
    let mut _722: isize;
    let mut _723: isize;
    let mut _724: isize;
    let mut _725: isize;
    let mut _726: isize;
    let mut _727: isize;
    let mut _728: isize;
    let mut _729: isize;
    let mut _730: isize;
    let mut _731: isize;
    let mut _732: isize;
    let mut _733: isize;
    let mut _734: isize;
    let mut _735: isize;
    let mut _736: isize;
    let mut _737: isize;
    let mut _738: isize;
    let mut _739: isize;
    let mut _740: isize;
    let mut _741: isize;
    let mut _742: isize;
    let mut _743: isize;
    let mut _744: isize;
    let mut _745: isize;
    let mut _746: isize;
    let mut _747: isize;
    let mut _748: isize;
    let mut _749: isize;
    let mut _750: isize;
    let mut _751: isize;
    let mut _752: isize;
    let mut _753: isize;
    let mut _754: isize;
    let mut _755: isize;
    let mut _756: isize;
    let mut _757: isize;
    let mut _758: isize;
    let mut _759: isize;
    let mut _760: isize;
    let mut _761: isize;
    let mut _762: isize;
    let mut _763: isize;
    let mut _764: isize;
    let mut _765: isize;
    let mut _766: isize;
    let mut _767: isize;
    let mut _768: isize;
    let mut _769: isize;
    let mut _770: isize;
    let mut _771: isize;
    let mut _772: isize;
    let mut _773: isize;
    let mut _774: isize;
    let mut _775: isize;
    let mut _776: isize;
    let mut _777: isize;
    let mut _778: isize;
    let mut _779: isize;
    let mut _780: isize;
    let mut _781: isize;
    let mut _782: isize;
    let mut _783: isize;
    let mut _784: isize;
    let mut _785: isize;
    let mut _786: isize;
    let mut _787: isize;
    let mut _788: isize;
    let mut _789: isize;
    let mut _790: isize;
    let mut _791: isize;
    let mut _792: isize;
    let mut _793: isize;
    let mut _794: isize;
    let mut _795: isize;
    let mut _796: isize;
    let mut _797: *const solend_sdk::state::Reserve;
    let mut _798: *const solend_sdk::state::Reserve;
    let mut _799: *const solend_sdk::state::Reserve;
    let mut _800: *const solend_sdk::state::Reserve;
    let mut _801: *const solend_sdk::state::Reserve;
    let mut _802: *const solend_sdk::state::Reserve;
    let mut _803: *const solend_sdk::state::Reserve;
    let mut _804: *const solend_sdk::state::Reserve;
    let mut _805: *const solend_sdk::state::Reserve;
    let mut _806: *const solend_sdk::state::Reserve;
    let mut _807: *const solend_sdk::state::Reserve;
    let mut _808: *const solend_sdk::state::Reserve;
    let mut _809: *const solend_sdk::state::Reserve;
    let mut _810: *const solend_sdk::state::Reserve;
    let mut _811: *const solend_sdk::state::Reserve;
    scope 1 {
        debug account_info_iter => _3;
        let _6: &solana_program::account_info::AccountInfo<'_>;
        let _11: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _14: &solana_program::account_info::AccountInfo<'_>;
        scope 2 {
            debug obligation_info => _6;
            let _15: &solana_program::clock::Clock;
            let _20: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
            let _23: solana_program::clock::Clock;
            scope 7 {
                debug clock => _15;
                let mut _24: solend_sdk::state::Obligation;
                let _36: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                let _39: solend_sdk::state::Obligation;
                scope 12 {
                    debug obligation => _24;
                    let mut _50: solend_sdk::math::Decimal;
                    scope 17 {
                        debug deposited_value => _50;
                        let mut _51: solend_sdk::math::Decimal;
                        scope 18 {
                            debug borrowed_value => _51;
                            let mut _52: solend_sdk::math::Decimal;
                            scope 19 {
                                debug unweighted_borrowed_value => _52;
                                let mut _53: solend_sdk::math::Decimal;
                                scope 20 {
                                    debug borrowed_value_upper_bound => _53;
                                    let mut _54: solend_sdk::math::Decimal;
                                    scope 21 {
                                        debug allowed_borrow_value => _54;
                                        let mut _55: solend_sdk::math::Decimal;
                                        scope 22 {
                                            debug unhealthy_borrow_value => _55;
                                            let mut _56: solend_sdk::math::Decimal;
                                            scope 23 {
                                                debug super_unhealthy_borrow_value => _56;
                                                let mut _64: std::iter::Enumerate<std::slice::IterMut<'_, solend_sdk::state::ObligationCollateral>>;
                                                let mut _299: bool;
                                                scope 24 {
                                                    debug iter => _64;
                                                    let _72: usize;
                                                    let _73: &mut solend_sdk::state::ObligationCollateral;
                                                    scope 25 {
                                                        debug index => _72;
                                                        debug collateral => _73;
                                                        let _74: &solana_program::account_info::AccountInfo<'_>;
                                                        let _79: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                        let _82: &solana_program::account_info::AccountInfo<'_>;
                                                        scope 26 {
                                                            debug deposit_reserve_info => _74;
                                                            let _94: std::string::String;
                                                            let _120: std::string::String;
                                                            let _135: std::boxed::Box<solend_sdk::state::Reserve>;
                                                            let _148: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                            let _151: solend_sdk::state::Reserve;
                                                            let mut _618: &[&str; 2];
                                                            let mut _619: &[&str; 2];
                                                            scope 31 {
                                                                debug res => _94;
                                                            }
                                                            scope 32 {
                                                                debug res => _120;
                                                            }
                                                            scope 33 {
                                                                debug deposit_reserve => _135;
                                                                let _159: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                let _162: bool;
                                                                let _170: std::string::String;
                                                                let _185: solend_sdk::math::Decimal;
                                                                let _194: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                let _197: solend_sdk::state::CollateralExchangeRate;
                                                                let _201: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                let _204: solend_sdk::math::Decimal;
                                                                let mut _620: &[&str; 2];
                                                                scope 38 {
                                                                    debug residual => _159;
                                                                    scope 39 {
                                                                    }
                                                                }
                                                                scope 40 {
                                                                    debug val => _162;
                                                                    scope 41 {
                                                                    }
                                                                }
                                                                scope 42 {
                                                                    debug res => _170;
                                                                }
                                                                scope 43 {
                                                                    debug liquidity_amount => _185;
                                                                    let _205: solend_sdk::math::Decimal;
                                                                    let _211: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                    let _214: solend_sdk::math::Decimal;
                                                                    scope 52 {
                                                                        debug market_value => _205;
                                                                        let _215: solend_sdk::math::Decimal;
                                                                        let _221: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                        let _224: solend_sdk::math::Decimal;
                                                                        scope 57 {
                                                                            debug market_value_lower_bound => _215;
                                                                            let _225: solend_sdk::math::Rate;
                                                                            let mut _836: *const ();
                                                                            let mut _837: usize;
                                                                            let mut _838: usize;
                                                                            let mut _839: usize;
                                                                            let mut _840: usize;
                                                                            let mut _841: bool;
                                                                            scope 62 {
                                                                                debug loan_to_value_rate => _225;
                                                                                let _227: solend_sdk::math::Rate;
                                                                                let mut _830: *const ();
                                                                                let mut _831: usize;
                                                                                let mut _832: usize;
                                                                                let mut _833: usize;
                                                                                let mut _834: usize;
                                                                                let mut _835: bool;
                                                                                scope 63 {
                                                                                    debug liquidation_threshold_rate => _227;
                                                                                    let _229: solend_sdk::math::Rate;
                                                                                    let mut _824: *const ();
                                                                                    let mut _825: usize;
                                                                                    let mut _826: usize;
                                                                                    let mut _827: usize;
                                                                                    let mut _828: usize;
                                                                                    let mut _829: bool;
                                                                                    scope 64 {
                                                                                        debug max_liquidation_threshold_rate => _229;
                                                                                        let _238: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                                        let _241: solend_sdk::math::Decimal;
                                                                                        let _252: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                                        let _255: solend_sdk::math::Decimal;
                                                                                        let _257: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                                        let _260: solend_sdk::math::Decimal;
                                                                                        let _271: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                                        let _274: solend_sdk::math::Decimal;
                                                                                        let _276: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                                        let _279: solend_sdk::math::Decimal;
                                                                                        let _290: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                                        let _293: solend_sdk::math::Decimal;
                                                                                        let _295: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                                        let _298: solend_sdk::math::Decimal;
                                                                                        scope 65 {
                                                                                            debug residual => _238;
                                                                                            scope 66 {
                                                                                            }
                                                                                        }
                                                                                        scope 67 {
                                                                                            debug val => _241;
                                                                                            scope 68 {
                                                                                            }
                                                                                        }
                                                                                        scope 69 {
                                                                                            debug residual => _252;
                                                                                            scope 70 {
                                                                                            }
                                                                                        }
                                                                                        scope 71 {
                                                                                            debug val => _255;
                                                                                            scope 72 {
                                                                                            }
                                                                                        }
                                                                                        scope 73 {
                                                                                            debug residual => _257;
                                                                                            scope 74 {
                                                                                            }
                                                                                        }
                                                                                        scope 75 {
                                                                                            debug val => _260;
                                                                                            scope 76 {
                                                                                            }
                                                                                        }
                                                                                        scope 77 {
                                                                                            debug residual => _271;
                                                                                            scope 78 {
                                                                                            }
                                                                                        }
                                                                                        scope 79 {
                                                                                            debug val => _274;
                                                                                            scope 80 {
                                                                                            }
                                                                                        }
                                                                                        scope 81 {
                                                                                            debug residual => _276;
                                                                                            scope 82 {
                                                                                            }
                                                                                        }
                                                                                        scope 83 {
                                                                                            debug val => _279;
                                                                                            scope 84 {
                                                                                            }
                                                                                        }
                                                                                        scope 85 {
                                                                                            debug residual => _290;
                                                                                            scope 86 {
                                                                                            }
                                                                                        }
                                                                                        scope 87 {
                                                                                            debug val => _293;
                                                                                            scope 88 {
                                                                                            }
                                                                                        }
                                                                                        scope 89 {
                                                                                            debug residual => _295;
                                                                                            scope 90 {
                                                                                            }
                                                                                        }
                                                                                        scope 91 {
                                                                                            debug val => _298;
                                                                                            scope 92 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 58 {
                                                                            debug residual => _221;
                                                                            scope 59 {
                                                                            }
                                                                        }
                                                                        scope 60 {
                                                                            debug val => _224;
                                                                            scope 61 {
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 53 {
                                                                        debug residual => _211;
                                                                        scope 54 {
                                                                        }
                                                                    }
                                                                    scope 55 {
                                                                        debug val => _214;
                                                                        scope 56 {
                                                                        }
                                                                    }
                                                                }
                                                                scope 44 {
                                                                    debug residual => _194;
                                                                    scope 45 {
                                                                    }
                                                                }
                                                                scope 46 {
                                                                    debug val => _197;
                                                                    scope 47 {
                                                                    }
                                                                }
                                                                scope 48 {
                                                                    debug residual => _201;
                                                                    scope 49 {
                                                                    }
                                                                }
                                                                scope 50 {
                                                                    debug val => _204;
                                                                    scope 51 {
                                                                    }
                                                                }
                                                            }
                                                            scope 34 {
                                                                debug residual => _148;
                                                                scope 35 {
                                                                }
                                                            }
                                                            scope 36 {
                                                                debug val => _151;
                                                                scope 37 {
                                                                }
                                                            }
                                                        }
                                                        scope 27 {
                                                            debug residual => _79;
                                                            scope 28 {
                                                            }
                                                        }
                                                        scope 29 {
                                                            debug val => _82;
                                                            scope 30 {
                                                            }
                                                        }
                                                    }
                                                }
                                                scope 93 {
                                                    debug borrowing_isolated_asset => _299;
                                                    let mut _300: std::option::Option<((u64, &solana_program::pubkey::Pubkey), usize)>;
                                                    scope 94 {
                                                        debug max_borrow_weight => _300;
                                                        let mut _308: std::iter::Enumerate<std::slice::IterMut<'_, solend_sdk::state::ObligationLiquidity>>;
                                                        let _553: solend_sdk::math::Decimal;
                                                        scope 95 {
                                                            debug iter => _308;
                                                            let _315: usize;
                                                            let _316: &mut solend_sdk::state::ObligationLiquidity;
                                                            scope 96 {
                                                                debug index => _315;
                                                                debug liquidity => _316;
                                                                let _317: &solana_program::account_info::AccountInfo<'_>;
                                                                let _322: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                let _325: &solana_program::account_info::AccountInfo<'_>;
                                                                scope 97 {
                                                                    debug borrow_reserve_info => _317;
                                                                    let _337: std::string::String;
                                                                    let _363: std::string::String;
                                                                    let _378: std::boxed::Box<solend_sdk::state::Reserve>;
                                                                    let _391: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                    let _394: solend_sdk::state::Reserve;
                                                                    let mut _621: &[&str; 2];
                                                                    let mut _622: &[&str; 2];
                                                                    scope 102 {
                                                                        debug res => _337;
                                                                    }
                                                                    scope 103 {
                                                                        debug res => _363;
                                                                    }
                                                                    scope 104 {
                                                                        debug borrow_reserve => _378;
                                                                        let _402: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                        let _405: bool;
                                                                        let _413: std::string::String;
                                                                        let _439: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                        let _442: ();
                                                                        let _443: (u64, &solana_program::pubkey::Pubkey);
                                                                        let mut _623: &[&str; 2];
                                                                        let mut _624: &solend_sdk::state::ReserveType;
                                                                        let mut _812: *const ();
                                                                        let mut _813: usize;
                                                                        let mut _814: usize;
                                                                        let mut _815: usize;
                                                                        let mut _816: usize;
                                                                        let mut _817: bool;
                                                                        let mut _818: *const ();
                                                                        let mut _819: usize;
                                                                        let mut _820: usize;
                                                                        let mut _821: usize;
                                                                        let mut _822: usize;
                                                                        let mut _823: bool;
                                                                        scope 109 {
                                                                            debug residual => _402;
                                                                            scope 110 {
                                                                            }
                                                                        }
                                                                        scope 111 {
                                                                            debug val => _405;
                                                                            scope 112 {
                                                                            }
                                                                        }
                                                                        scope 113 {
                                                                            debug res => _413;
                                                                        }
                                                                        scope 114 {
                                                                            debug residual => _439;
                                                                            scope 115 {
                                                                            }
                                                                        }
                                                                        scope 116 {
                                                                            debug val => _442;
                                                                            scope 117 {
                                                                            }
                                                                        }
                                                                        scope 118 {
                                                                            debug borrow_weight_and_pubkey => _443;
                                                                            let _455: (u64, &solana_program::pubkey::Pubkey);
                                                                            let _466: solend_sdk::math::Decimal;
                                                                            let _472: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                            let _475: solend_sdk::math::Decimal;
                                                                            scope 119 {
                                                                                debug max_borrow_weight_and_pubkey => _455;
                                                                            }
                                                                            scope 120 {
                                                                                debug market_value => _466;
                                                                                let _476: solend_sdk::math::Decimal;
                                                                                let _482: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                                let _485: solend_sdk::math::Decimal;
                                                                                scope 125 {
                                                                                    debug market_value_upper_bound => _476;
                                                                                    let _498: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                                    let _501: solend_sdk::math::Decimal;
                                                                                    let _503: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                                    let _506: solend_sdk::math::Decimal;
                                                                                    let _518: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                                    let _521: solend_sdk::math::Decimal;
                                                                                    let _523: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                                    let _526: solend_sdk::math::Decimal;
                                                                                    let _533: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                                    let _536: solend_sdk::math::Decimal;
                                                                                    scope 130 {
                                                                                        debug residual => _498;
                                                                                        scope 131 {
                                                                                        }
                                                                                    }
                                                                                    scope 132 {
                                                                                        debug val => _501;
                                                                                        scope 133 {
                                                                                        }
                                                                                    }
                                                                                    scope 134 {
                                                                                        debug residual => _503;
                                                                                        scope 135 {
                                                                                        }
                                                                                    }
                                                                                    scope 136 {
                                                                                        debug val => _506;
                                                                                        scope 137 {
                                                                                        }
                                                                                    }
                                                                                    scope 138 {
                                                                                        debug residual => _518;
                                                                                        scope 139 {
                                                                                        }
                                                                                    }
                                                                                    scope 140 {
                                                                                        debug val => _521;
                                                                                        scope 141 {
                                                                                        }
                                                                                    }
                                                                                    scope 142 {
                                                                                        debug residual => _523;
                                                                                        scope 143 {
                                                                                        }
                                                                                    }
                                                                                    scope 144 {
                                                                                        debug val => _526;
                                                                                        scope 145 {
                                                                                        }
                                                                                    }
                                                                                    scope 146 {
                                                                                        debug residual => _533;
                                                                                        scope 147 {
                                                                                        }
                                                                                    }
                                                                                    scope 148 {
                                                                                        debug val => _536;
                                                                                        scope 149 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                                scope 126 {
                                                                                    debug residual => _482;
                                                                                    scope 127 {
                                                                                    }
                                                                                }
                                                                                scope 128 {
                                                                                    debug val => _485;
                                                                                    scope 129 {
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 121 {
                                                                                debug residual => _472;
                                                                                scope 122 {
                                                                                }
                                                                            }
                                                                            scope 123 {
                                                                                debug val => _475;
                                                                                scope 124 {
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 105 {
                                                                        debug residual => _391;
                                                                        scope 106 {
                                                                        }
                                                                    }
                                                                    scope 107 {
                                                                        debug val => _394;
                                                                        scope 108 {
                                                                        }
                                                                    }
                                                                }
                                                                scope 98 {
                                                                    debug residual => _322;
                                                                    scope 99 {
                                                                    }
                                                                }
                                                                scope 100 {
                                                                    debug val => _325;
                                                                    scope 101 {
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        scope 150 {
                                                            debug global_unhealthy_borrow_value => _553;
                                                            let _554: solend_sdk::math::Decimal;
                                                            scope 151 {
                                                                debug global_allowed_borrow_value => _554;
                                                                let _567: std::option::Option<solana_program::pubkey::Pubkey>;
                                                                let _579: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                let _582: (std::option::Option<solana_program::pubkey::Pubkey>, std::option::Option<solana_program::pubkey::Pubkey>);
                                                                scope 152 {
                                                                    debug close_exceeded => _567;
                                                                    let _613: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                    let _616: ();
                                                                    scope 157 {
                                                                        debug max_borrow_weight_index => _588;
                                                                        let _588: usize;
                                                                    }
                                                                    scope 158 {
                                                                        debug residual => _613;
                                                                        scope 159 {
                                                                        }
                                                                    }
                                                                    scope 160 {
                                                                        debug val => _616;
                                                                        scope 161 {
                                                                        }
                                                                    }
                                                                }
                                                                scope 153 {
                                                                    debug residual => _579;
                                                                    scope 154 {
                                                                    }
                                                                }
                                                                scope 155 {
                                                                    debug val => _582;
                                                                    scope 156 {
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                scope 13 {
                    debug residual => _36;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _39;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _20;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _23;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _11;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _14;
            scope 6 {
            }
        }
    }

    bb0: {
        _637 = const false;
        _638 = const false;
        _642 = const false;
        _641 = const false;
        _636 = const false;
        _635 = const false;
        _634 = const false;
        _633 = const false;
        _640 = const false;
        _639 = const false;
        _632 = const false;
        _631 = const false;
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &(*_2);
        _4 = bytemuck::core::slice::<impl [AccountInfo<'_>]>::iter(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        _3 = &mut _4;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &mut (*_3);
        _8 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_9);
        _7 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _8) -> [return: bb3, unwind: bb350];
    }

    bb3: {
        StorageDead(_8);
        _10 = discriminant(_7);
        switchInt(move _10) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_14);
        _14 = ((_7 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _6 = _14;
        StorageDead(_14);
        _643 = discriminant(_7);
        StorageDead(_7);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = <Clock as Sysvar>::get() -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_11);
        _11 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_13);
        _13 = move _11;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _13) -> [return: bb7, unwind: bb390];
    }

    bb7: {
        StorageDead(_13);
        StorageDead(_11);
        _765 = discriminant(_7);
        StorageDead(_7);
        goto -> bb335;
    }

    bb8: {
        _17 = <Result<Clock, ProgramError> as Try>::branch(move _18) -> [return: bb9, unwind: bb350];
    }

    bb9: {
        StorageDead(_18);
        _19 = discriminant(_17);
        switchInt(move _19) -> [0: bb10, 1: bb11, otherwise: bb5];
    }

    bb10: {
        StorageLive(_23);
        _23 = move ((_17 as Continue).0: solana_program::clock::Clock);
        _16 = move _23;
        StorageDead(_23);
        _15 = &_16;
        _645 = discriminant(_17);
        StorageDead(_17);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &((*_6).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _33 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _34) -> [return: bb13, unwind continue];
    }

    bb11: {
        StorageLive(_20);
        _20 = move ((_17 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_22);
        _22 = move _20;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _22) -> [return: bb12, unwind: bb389];
    }

    bb12: {
        StorageDead(_22);
        StorageDead(_20);
        _763 = discriminant(_17);
        StorageDead(_17);
        goto -> bb334;
    }

    bb13: {
        _32 = &(*_33);
        StorageDead(_34);
        _31 = RefCell::<&mut [u8]>::borrow(move _32) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_32);
        _30 = &_31;
        _29 = &(*_30);
        _28 = <Ref<'_, &mut [u8]> as Deref>::deref(move _29) -> [return: bb15, unwind: bb349];
    }

    bb15: {
        _625 = deref_copy (*_28);
        _27 = &(*_625);
        StorageDead(_29);
        _26 = <Obligation as Pack>::unpack(move _27) -> [return: bb16, unwind: bb349];
    }

    bb16: {
        StorageDead(_27);
        _25 = <Result<Obligation, ProgramError> as Try>::branch(move _26) -> [return: bb17, unwind: bb349];
    }

    bb17: {
        StorageDead(_26);
        _35 = discriminant(_25);
        switchInt(move _35) -> [0: bb18, 1: bb19, otherwise: bb5];
    }

    bb18: {
        StorageLive(_39);
        _39 = move ((_25 as Continue).0: solend_sdk::state::Obligation);
        _637 = const true;
        _24 = move _39;
        StorageDead(_39);
        _647 = discriminant(_25);
        drop(_31) -> [return: bb21, unwind: bb387];
    }

    bb19: {
        StorageLive(_36);
        _36 = move ((_25 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_38);
        _38 = move _36;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _38) -> [return: bb20, unwind: bb388];
    }

    bb20: {
        StorageDead(_38);
        StorageDead(_36);
        _761 = discriminant(_25);
        drop(_31) -> [return: bb332, unwind: bb350];
    }

    bb21: {
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_28);
        StorageDead(_25);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = &((*_6).3: &solana_program::pubkey::Pubkey);
        StorageLive(_43);
        _43 = &_1;
        _41 = <&Pubkey as PartialEq>::ne(move _42, move _43) -> [return: bb22, unwind: bb387];
    }

    bb22: {
        switchInt(move _41) -> [0: bb26, otherwise: bb23];
    }

    bb23: {
        StorageDead(_43);
        StorageDead(_42);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = const "Obligation provided is not owned by the lending program";
        _46 = &(*_47);
        _45 = solana_program::log::sol_log(move _46) -> [return: bb24, unwind: bb387];
    }

    bb24: {
        StorageDead(_46);
        StorageDead(_47);
        StorageDead(_45);
        StorageLive(_48);
        StorageLive(_49);
        _49 = solend_sdk::error::LendingError::InvalidAccountOwner;
        _48 = <LendingError as Into<ProgramError>>::into(move _49) -> [return: bb25, unwind: bb387];
    }

    bb25: {
        StorageDead(_49);
        _0 = Result::<(), ProgramError>::Err(move _48);
        StorageDead(_48);
        StorageDead(_41);
        StorageDead(_40);
        goto -> bb356;
    }

    bb26: {
        StorageDead(_43);
        StorageDead(_42);
        _40 = const ();
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_50);
        _50 = Decimal::zero() -> [return: bb27, unwind: bb387];
    }

    bb27: {
        StorageLive(_51);
        _51 = Decimal::zero() -> [return: bb28, unwind: bb387];
    }

    bb28: {
        StorageLive(_52);
        _52 = Decimal::zero() -> [return: bb29, unwind: bb387];
    }

    bb29: {
        StorageLive(_53);
        _53 = Decimal::zero() -> [return: bb30, unwind: bb387];
    }

    bb30: {
        StorageLive(_54);
        _54 = Decimal::zero() -> [return: bb31, unwind: bb387];
    }

    bb31: {
        StorageLive(_55);
        _55 = Decimal::zero() -> [return: bb32, unwind: bb387];
    }

    bb32: {
        StorageLive(_56);
        _56 = Decimal::zero() -> [return: bb33, unwind: bb387];
    }

    bb33: {
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = &mut (_24.4: std::vec::Vec<solend_sdk::state::ObligationCollateral>);
        _62 = <Vec<ObligationCollateral> as DerefMut>::deref_mut(move _63) -> [return: bb34, unwind: bb387];
    }

    bb34: {
        _61 = &mut (*_62);
        StorageDead(_63);
        _60 = bytemuck::core::slice::<impl [ObligationCollateral]>::iter_mut(move _61) -> [return: bb35, unwind: bb387];
    }

    bb35: {
        StorageDead(_61);
        _59 = <std::slice::IterMut<'_, ObligationCollateral> as Iterator>::enumerate(move _60) -> [return: bb36, unwind: bb387];
    }

    bb36: {
        StorageDead(_60);
        _58 = <Enumerate<std::slice::IterMut<'_, ObligationCollateral>> as IntoIterator>::into_iter(move _59) -> [return: bb37, unwind: bb387];
    }

    bb37: {
        StorageDead(_59);
        StorageLive(_64);
        _64 = move _58;
        goto -> bb38;
    }

    bb38: {
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &mut _64;
        _68 = &mut (*_69);
        _67 = <Enumerate<std::slice::IterMut<'_, ObligationCollateral>> as Iterator>::next(move _68) -> [return: bb39, unwind: bb387];
    }

    bb39: {
        StorageDead(_68);
        _70 = discriminant(_67);
        switchInt(move _70) -> [0: bb41, 1: bb40, otherwise: bb5];
    }

    bb40: {
        StorageLive(_72);
        _72 = (((_67 as Some).0: (usize, &mut solend_sdk::state::ObligationCollateral)).0: usize);
        StorageLive(_73);
        _73 = move (((_67 as Some).0: (usize, &mut solend_sdk::state::ObligationCollateral)).1: &mut solend_sdk::state::ObligationCollateral);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _77 = &mut (*_3);
        _76 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _77) -> [return: bb42, unwind: bb387];
    }

    bb41: {
        _57 = const ();
        StorageDead(_69);
        StorageDead(_67);
        StorageDead(_66);
        StorageDead(_64);
        StorageDead(_62);
        StorageDead(_58);
        StorageDead(_57);
        StorageLive(_299);
        _299 = const false;
        StorageLive(_300);
        _300 = Option::<((u64, &Pubkey), usize)>::None;
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        _307 = &mut (_24.5: std::vec::Vec<solend_sdk::state::ObligationLiquidity>);
        _306 = <Vec<ObligationLiquidity> as DerefMut>::deref_mut(move _307) -> [return: bb149, unwind: bb387];
    }

    bb42: {
        StorageDead(_77);
        _75 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _76) -> [return: bb43, unwind: bb387];
    }

    bb43: {
        StorageDead(_76);
        _78 = discriminant(_75);
        switchInt(move _78) -> [0: bb44, 1: bb45, otherwise: bb5];
    }

    bb44: {
        StorageLive(_82);
        _82 = ((_75 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _74 = _82;
        StorageDead(_82);
        _649 = discriminant(_75);
        StorageDead(_75);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &((*_74).3: &solana_program::pubkey::Pubkey);
        StorageLive(_86);
        _86 = &_1;
        _84 = <&Pubkey as PartialEq>::ne(move _85, move _86) -> [return: bb47, unwind: bb387];
    }

    bb45: {
        StorageLive(_79);
        _79 = move ((_75 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_81);
        _81 = move _79;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _81) -> [return: bb46, unwind: bb385];
    }

    bb46: {
        StorageDead(_81);
        StorageDead(_79);
        _759 = discriminant(_75);
        StorageDead(_75);
        goto -> bb330;
    }

    bb47: {
        switchInt(move _84) -> [0: bb56, otherwise: bb48];
    }

    bb48: {
        StorageDead(_86);
        StorageDead(_85);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        _618 = const _;
        _98 = &(*_618);
        _97 = &(*_98);
        _96 = move _97 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_97);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        _106 = &_72;
        _105 = &(*_106);
        _104 = bytemuck::core::fmt::rt::Argument::<'_>::new_display::<usize>(move _105) -> [return: bb49, unwind: bb387];
    }

    bb49: {
        StorageDead(_105);
        _103 = [move _104];
        StorageDead(_104);
        _102 = &_103;
        _101 = &(*_102);
        _100 = move _101 as &[bytemuck::core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_101);
        _95 = Arguments::<'_>::new_v1(move _96, move _100) -> [return: bb50, unwind: bb387];
    }

    bb50: {
        StorageDead(_100);
        StorageDead(_96);
        _94 = format(move _95) -> [return: bb51, unwind: bb387];
    }

    bb51: {
        StorageDead(_95);
        StorageDead(_106);
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_98);
        _93 = move _94;
        StorageDead(_94);
        _92 = &_93;
        _91 = &(*_92);
        _90 = <String as Deref>::deref(move _91) -> [return: bb52, unwind: bb348];
    }

    bb52: {
        _89 = &(*_90);
        StorageDead(_91);
        _88 = solana_program::log::sol_log(move _89) -> [return: bb53, unwind: bb348];
    }

    bb53: {
        StorageDead(_89);
        drop(_93) -> [return: bb54, unwind: bb387];
    }

    bb54: {
        StorageDead(_93);
        StorageDead(_92);
        StorageDead(_90);
        StorageDead(_88);
        StorageLive(_107);
        StorageLive(_108);
        _108 = solend_sdk::error::LendingError::InvalidAccountOwner;
        _107 = <LendingError as Into<ProgramError>>::into(move _108) -> [return: bb55, unwind: bb387];
    }

    bb55: {
        StorageDead(_108);
        _0 = Result::<(), ProgramError>::Err(move _107);
        StorageDead(_107);
        StorageDead(_84);
        StorageDead(_83);
        goto -> bb330;
    }

    bb56: {
        StorageDead(_86);
        StorageDead(_85);
        _83 = const ();
        StorageDead(_84);
        StorageDead(_83);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        _111 = &((*_73).0: solana_program::pubkey::Pubkey);
        StorageLive(_112);
        _626 = deref_copy ((*_74).0: &solana_program::pubkey::Pubkey);
        _112 = &(*_626);
        _110 = <Pubkey as PartialEq>::ne(move _111, move _112) -> [return: bb57, unwind: bb387];
    }

    bb57: {
        switchInt(move _110) -> [0: bb66, otherwise: bb58];
    }

    bb58: {
        StorageDead(_112);
        StorageDead(_111);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        _619 = const _;
        _124 = &(*_619);
        _123 = &(*_124);
        _122 = move _123 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_123);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        _132 = &_72;
        _131 = &(*_132);
        _130 = bytemuck::core::fmt::rt::Argument::<'_>::new_display::<usize>(move _131) -> [return: bb59, unwind: bb387];
    }

    bb59: {
        StorageDead(_131);
        _129 = [move _130];
        StorageDead(_130);
        _128 = &_129;
        _127 = &(*_128);
        _126 = move _127 as &[bytemuck::core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_127);
        _121 = Arguments::<'_>::new_v1(move _122, move _126) -> [return: bb60, unwind: bb387];
    }

    bb60: {
        StorageDead(_126);
        StorageDead(_122);
        _120 = format(move _121) -> [return: bb61, unwind: bb387];
    }

    bb61: {
        StorageDead(_121);
        StorageDead(_132);
        StorageDead(_129);
        StorageDead(_128);
        StorageDead(_124);
        _119 = move _120;
        StorageDead(_120);
        _118 = &_119;
        _117 = &(*_118);
        _116 = <String as Deref>::deref(move _117) -> [return: bb62, unwind: bb347];
    }

    bb62: {
        _115 = &(*_116);
        StorageDead(_117);
        _114 = solana_program::log::sol_log(move _115) -> [return: bb63, unwind: bb347];
    }

    bb63: {
        StorageDead(_115);
        drop(_119) -> [return: bb64, unwind: bb387];
    }

    bb64: {
        StorageDead(_119);
        StorageDead(_118);
        StorageDead(_116);
        StorageDead(_114);
        StorageLive(_133);
        StorageLive(_134);
        _134 = InvalidAccountInput;
        _133 = <LendingError as Into<ProgramError>>::into(move _134) -> [return: bb65, unwind: bb387];
    }

    bb65: {
        StorageDead(_134);
        _0 = Result::<(), ProgramError>::Err(move _133);
        StorageDead(_133);
        StorageDead(_110);
        StorageDead(_109);
        goto -> bb330;
    }

    bb66: {
        StorageDead(_112);
        StorageDead(_111);
        _109 = const ();
        StorageDead(_110);
        StorageDead(_109);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        _146 = &((*_74).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _145 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _146) -> [return: bb67, unwind: bb387];
    }

    bb67: {
        _144 = &(*_145);
        StorageDead(_146);
        _143 = RefCell::<&mut [u8]>::borrow(move _144) -> [return: bb68, unwind: bb387];
    }

    bb68: {
        StorageDead(_144);
        _142 = &_143;
        _141 = &(*_142);
        _140 = <Ref<'_, &mut [u8]> as Deref>::deref(move _141) -> [return: bb69, unwind: bb346];
    }

    bb69: {
        _627 = deref_copy (*_140);
        _139 = &(*_627);
        StorageDead(_141);
        _138 = <Reserve as Pack>::unpack(move _139) -> [return: bb70, unwind: bb346];
    }

    bb70: {
        StorageDead(_139);
        _137 = <Result<Reserve, ProgramError> as Try>::branch(move _138) -> [return: bb71, unwind: bb346];
    }

    bb71: {
        _641 = const true;
        _642 = const true;
        StorageDead(_138);
        _147 = discriminant(_137);
        switchInt(move _147) -> [0: bb72, 1: bb73, otherwise: bb5];
    }

    bb72: {
        StorageLive(_151);
        _151 = move ((_137 as Continue).0: solend_sdk::state::Reserve);
        _136 = move _151;
        StorageDead(_151);
        _135 = Box::<Reserve>::new(move _136) -> [return: bb75, unwind: bb384];
    }

    bb73: {
        StorageLive(_148);
        _148 = move ((_137 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_150);
        _150 = move _148;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _150) -> [return: bb74, unwind: bb384];
    }

    bb74: {
        StorageDead(_150);
        StorageDead(_148);
        StorageDead(_136);
        _757 = discriminant(_137);
        drop(_143) -> [return: bb328, unwind: bb387];
    }

    bb75: {
        StorageDead(_136);
        _651 = discriminant(_137);
        drop(_143) -> [return: bb76, unwind: bb345];
    }

    bb76: {
        StorageDead(_145);
        StorageDead(_143);
        StorageDead(_142);
        StorageDead(_140);
        _641 = const false;
        _642 = const false;
        StorageDead(_137);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        _797 = (((_135.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _156 = &((*_797).1: solend_sdk::state::LastUpdate);
        StorageLive(_157);
        _157 = ((*_15).0: u64);
        _155 = LastUpdate::is_stale(move _156, move _157) -> [return: bb77, unwind: bb345];
    }

    bb77: {
        StorageDead(_157);
        StorageDead(_156);
        _154 = <Result<bool, ProgramError> as Try>::branch(move _155) -> [return: bb78, unwind: bb345];
    }

    bb78: {
        StorageDead(_155);
        _158 = discriminant(_154);
        switchInt(move _158) -> [0: bb79, 1: bb80, otherwise: bb5];
    }

    bb79: {
        StorageLive(_162);
        _162 = ((_154 as Continue).0: bool);
        _153 = _162;
        StorageDead(_162);
        switchInt(move _153) -> [0: bb352, otherwise: bb351];
    }

    bb80: {
        StorageLive(_159);
        _159 = move ((_154 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_161);
        _161 = move _159;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _161) -> [return: bb81, unwind: bb383];
    }

    bb81: {
        StorageDead(_161);
        StorageDead(_159);
        _755 = discriminant(_154);
        StorageDead(_154);
        goto -> bb326;
    }

    bb82: {
        StorageDead(_181);
        _179 = [move _180];
        StorageDead(_180);
        _178 = &_179;
        _177 = &(*_178);
        _176 = move _177 as &[bytemuck::core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_177);
        _171 = Arguments::<'_>::new_v1(move _172, move _176) -> [return: bb83, unwind: bb345];
    }

    bb83: {
        StorageDead(_176);
        StorageDead(_172);
        _170 = format(move _171) -> [return: bb84, unwind: bb345];
    }

    bb84: {
        StorageDead(_171);
        StorageDead(_182);
        StorageDead(_179);
        StorageDead(_178);
        StorageDead(_174);
        _169 = move _170;
        StorageDead(_170);
        _168 = &_169;
        _167 = &(*_168);
        _166 = <String as Deref>::deref(move _167) -> [return: bb85, unwind: bb344];
    }

    bb85: {
        _165 = &(*_166);
        StorageDead(_167);
        _164 = solana_program::log::sol_log(move _165) -> [return: bb86, unwind: bb344];
    }

    bb86: {
        StorageDead(_165);
        drop(_169) -> [return: bb87, unwind: bb345];
    }

    bb87: {
        StorageDead(_169);
        StorageDead(_168);
        StorageDead(_166);
        StorageDead(_164);
        StorageLive(_183);
        StorageLive(_184);
        _184 = ReserveStale;
        _183 = <LendingError as Into<ProgramError>>::into(move _184) -> [return: bb88, unwind: bb345];
    }

    bb88: {
        StorageDead(_184);
        _0 = Result::<(), ProgramError>::Err(move _183);
        StorageDead(_183);
        goto -> bb326;
    }

    bb89: {
        StorageDead(_192);
        _190 = <Result<CollateralExchangeRate, ProgramError> as Try>::branch(move _191) -> [return: bb90, unwind: bb345];
    }

    bb90: {
        _636 = const true;
        StorageDead(_191);
        _193 = discriminant(_190);
        switchInt(move _193) -> [0: bb91, 1: bb92, otherwise: bb5];
    }

    bb91: {
        StorageLive(_197);
        _197 = ((_190 as Continue).0: solend_sdk::state::CollateralExchangeRate);
        _189 = _197;
        StorageDead(_197);
        _188 = &_189;
        StorageLive(_198);
        StorageLive(_199);
        _199 = ((*_73).1: u64);
        _198 = <u64 as Into<Decimal>>::into(move _199) -> [return: bb94, unwind: bb382];
    }

    bb92: {
        StorageLive(_194);
        _194 = move ((_190 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_196);
        _196 = move _194;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _196) -> [return: bb93, unwind: bb382];
    }

    bb93: {
        StorageDead(_196);
        StorageDead(_194);
        StorageDead(_188);
        StorageDead(_187);
        goto -> bb324;
    }

    bb94: {
        StorageDead(_199);
        _187 = CollateralExchangeRate::decimal_collateral_to_liquidity(move _188, move _198) -> [return: bb95, unwind: bb382];
    }

    bb95: {
        StorageDead(_198);
        StorageDead(_188);
        _186 = <Result<Decimal, ProgramError> as Try>::branch(move _187) -> [return: bb96, unwind: bb382];
    }

    bb96: {
        StorageDead(_187);
        _200 = discriminant(_186);
        switchInt(move _200) -> [0: bb97, 1: bb98, otherwise: bb5];
    }

    bb97: {
        StorageLive(_204);
        _204 = ((_186 as Continue).0: solend_sdk::math::Decimal);
        _185 = _204;
        StorageDead(_204);
        _657 = discriminant(_186);
        _659 = discriminant(_190);
        _636 = const false;
        StorageDead(_190);
        StorageDead(_189);
        StorageDead(_186);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        _799 = (((_135.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _208 = &(*_799);
        StorageLive(_209);
        _209 = _185;
        _207 = Reserve::market_value(move _208, move _209) -> [return: bb100, unwind: bb345];
    }

    bb98: {
        StorageLive(_201);
        _201 = move ((_186 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_203);
        _203 = move _201;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _203) -> [return: bb99, unwind: bb381];
    }

    bb99: {
        StorageDead(_203);
        StorageDead(_201);
        _751 = discriminant(_186);
        goto -> bb324;
    }

    bb100: {
        StorageDead(_209);
        StorageDead(_208);
        _206 = <Result<Decimal, ProgramError> as Try>::branch(move _207) -> [return: bb101, unwind: bb345];
    }

    bb101: {
        StorageDead(_207);
        _210 = discriminant(_206);
        switchInt(move _210) -> [0: bb102, 1: bb103, otherwise: bb5];
    }

    bb102: {
        StorageLive(_214);
        _214 = ((_206 as Continue).0: solend_sdk::math::Decimal);
        _205 = _214;
        StorageDead(_214);
        _661 = discriminant(_206);
        StorageDead(_206);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        _800 = (((_135.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _218 = &(*_800);
        StorageLive(_219);
        _219 = _185;
        _217 = Reserve::market_value_lower_bound(move _218, move _219) -> [return: bb105, unwind: bb345];
    }

    bb103: {
        StorageLive(_211);
        _211 = move ((_206 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_213);
        _213 = move _211;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _213) -> [return: bb104, unwind: bb380];
    }

    bb104: {
        StorageDead(_213);
        StorageDead(_211);
        _749 = discriminant(_206);
        StorageDead(_206);
        goto -> bb323;
    }

    bb105: {
        StorageDead(_219);
        StorageDead(_218);
        _216 = <Result<Decimal, ProgramError> as Try>::branch(move _217) -> [return: bb106, unwind: bb345];
    }

    bb106: {
        StorageDead(_217);
        _220 = discriminant(_216);
        switchInt(move _220) -> [0: bb107, 1: bb108, otherwise: bb5];
    }

    bb107: {
        StorageLive(_224);
        _224 = ((_216 as Continue).0: solend_sdk::math::Decimal);
        _215 = _224;
        StorageDead(_224);
        _663 = discriminant(_216);
        StorageDead(_216);
        StorageLive(_225);
        StorageLive(_226);
        _801 = (((_135.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _836 = _801 as *const () (PtrToPtr);
        _837 = _836 as usize (Transmute);
        _838 = AlignOf(solend_sdk::state::Reserve);
        _839 = Sub(_838, const 1_usize);
        _840 = BitAnd(_837, _839);
        _841 = Eq(_840, const 0_usize);
        assert(_841, "misaligned pointer dereference: address must be a multiple of {} but is {}", _838, _837) -> [success: bb395, unwind unreachable];
    }

    bb108: {
        StorageLive(_221);
        _221 = move ((_216 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_223);
        _223 = move _221;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _223) -> [return: bb109, unwind: bb379];
    }

    bb109: {
        StorageDead(_223);
        StorageDead(_221);
        _747 = discriminant(_216);
        StorageDead(_216);
        goto -> bb322;
    }

    bb110: {
        StorageDead(_226);
        StorageLive(_227);
        StorageLive(_228);
        _802 = (((_135.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _830 = _802 as *const () (PtrToPtr);
        _831 = _830 as usize (Transmute);
        _832 = AlignOf(solend_sdk::state::Reserve);
        _833 = Sub(_832, const 1_usize);
        _834 = BitAnd(_831, _833);
        _835 = Eq(_834, const 0_usize);
        assert(_835, "misaligned pointer dereference: address must be a multiple of {} but is {}", _832, _831) -> [success: bb394, unwind unreachable];
    }

    bb111: {
        StorageDead(_228);
        StorageLive(_229);
        StorageLive(_230);
        _803 = (((_135.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _824 = _803 as *const () (PtrToPtr);
        _825 = _824 as usize (Transmute);
        _826 = AlignOf(solend_sdk::state::Reserve);
        _827 = Sub(_826, const 1_usize);
        _828 = BitAnd(_825, _827);
        _829 = Eq(_828, const 0_usize);
        assert(_829, "misaligned pointer dereference: address must be a multiple of {} but is {}", _826, _825) -> [success: bb393, unwind unreachable];
    }

    bb112: {
        StorageDead(_230);
        StorageLive(_231);
        _231 = _205;
        ((*_73).2: solend_sdk::math::Decimal) = move _231;
        StorageDead(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        _235 = _50;
        StorageLive(_236);
        _236 = _205;
        _234 = <Decimal as TryAdd>::try_add(move _235, move _236) -> [return: bb113, unwind: bb345];
    }

    bb113: {
        StorageDead(_236);
        StorageDead(_235);
        _233 = <Result<Decimal, ProgramError> as Try>::branch(move _234) -> [return: bb114, unwind: bb345];
    }

    bb114: {
        StorageDead(_234);
        _237 = discriminant(_233);
        switchInt(move _237) -> [0: bb115, 1: bb116, otherwise: bb5];
    }

    bb115: {
        StorageLive(_241);
        _241 = ((_233 as Continue).0: solend_sdk::math::Decimal);
        _232 = _241;
        StorageDead(_241);
        _50 = move _232;
        StorageDead(_232);
        _665 = discriminant(_233);
        StorageDead(_233);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        _245 = _54;
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        _249 = _215;
        StorageLive(_250);
        _250 = _225;
        _248 = <Decimal as TryMul<Rate>>::try_mul(move _249, move _250) -> [return: bb118, unwind: bb345];
    }

    bb116: {
        StorageLive(_238);
        _238 = move ((_233 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_240);
        _240 = move _238;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _240) -> [return: bb117, unwind: bb378];
    }

    bb117: {
        StorageDead(_240);
        StorageDead(_238);
        StorageDead(_232);
        _745 = discriminant(_233);
        StorageDead(_233);
        goto -> bb321;
    }

    bb118: {
        StorageDead(_250);
        StorageDead(_249);
        _247 = <Result<Decimal, ProgramError> as Try>::branch(move _248) -> [return: bb119, unwind: bb345];
    }

    bb119: {
        _635 = const true;
        StorageDead(_248);
        _251 = discriminant(_247);
        switchInt(move _251) -> [0: bb120, 1: bb121, otherwise: bb5];
    }

    bb120: {
        StorageLive(_255);
        _255 = ((_247 as Continue).0: solend_sdk::math::Decimal);
        _246 = _255;
        StorageDead(_255);
        _244 = <Decimal as TryAdd>::try_add(move _245, move _246) -> [return: bb123, unwind: bb377];
    }

    bb121: {
        StorageLive(_252);
        _252 = move ((_247 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_254);
        _254 = move _252;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _254) -> [return: bb122, unwind: bb377];
    }

    bb122: {
        StorageDead(_254);
        StorageDead(_252);
        StorageDead(_246);
        StorageDead(_245);
        StorageDead(_244);
        StorageDead(_242);
        goto -> bb320;
    }

    bb123: {
        StorageDead(_246);
        StorageDead(_245);
        _243 = <Result<Decimal, ProgramError> as Try>::branch(move _244) -> [return: bb124, unwind: bb377];
    }

    bb124: {
        StorageDead(_244);
        _256 = discriminant(_243);
        switchInt(move _256) -> [0: bb125, 1: bb126, otherwise: bb5];
    }

    bb125: {
        StorageLive(_260);
        _260 = ((_243 as Continue).0: solend_sdk::math::Decimal);
        _242 = _260;
        StorageDead(_260);
        _54 = move _242;
        StorageDead(_242);
        _667 = discriminant(_243);
        _669 = discriminant(_247);
        _635 = const false;
        StorageDead(_247);
        StorageDead(_243);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        _264 = _55;
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        _268 = _205;
        StorageLive(_269);
        _269 = _227;
        _267 = <Decimal as TryMul<Rate>>::try_mul(move _268, move _269) -> [return: bb128, unwind: bb345];
    }

    bb126: {
        StorageLive(_257);
        _257 = move ((_243 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_259);
        _259 = move _257;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _259) -> [return: bb127, unwind: bb376];
    }

    bb127: {
        StorageDead(_259);
        StorageDead(_257);
        StorageDead(_242);
        _741 = discriminant(_243);
        goto -> bb320;
    }

    bb128: {
        StorageDead(_269);
        StorageDead(_268);
        _266 = <Result<Decimal, ProgramError> as Try>::branch(move _267) -> [return: bb129, unwind: bb345];
    }

    bb129: {
        _634 = const true;
        StorageDead(_267);
        _270 = discriminant(_266);
        switchInt(move _270) -> [0: bb130, 1: bb131, otherwise: bb5];
    }

    bb130: {
        StorageLive(_274);
        _274 = ((_266 as Continue).0: solend_sdk::math::Decimal);
        _265 = _274;
        StorageDead(_274);
        _263 = <Decimal as TryAdd>::try_add(move _264, move _265) -> [return: bb133, unwind: bb375];
    }

    bb131: {
        StorageLive(_271);
        _271 = move ((_266 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_273);
        _273 = move _271;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _273) -> [return: bb132, unwind: bb375];
    }

    bb132: {
        StorageDead(_273);
        StorageDead(_271);
        StorageDead(_265);
        StorageDead(_264);
        StorageDead(_263);
        StorageDead(_261);
        goto -> bb319;
    }

    bb133: {
        StorageDead(_265);
        StorageDead(_264);
        _262 = <Result<Decimal, ProgramError> as Try>::branch(move _263) -> [return: bb134, unwind: bb375];
    }

    bb134: {
        StorageDead(_263);
        _275 = discriminant(_262);
        switchInt(move _275) -> [0: bb135, 1: bb136, otherwise: bb5];
    }

    bb135: {
        StorageLive(_279);
        _279 = ((_262 as Continue).0: solend_sdk::math::Decimal);
        _261 = _279;
        StorageDead(_279);
        _55 = move _261;
        StorageDead(_261);
        _671 = discriminant(_262);
        _673 = discriminant(_266);
        _634 = const false;
        StorageDead(_266);
        StorageDead(_262);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        _283 = _56;
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        _287 = _205;
        StorageLive(_288);
        _288 = _229;
        _286 = <Decimal as TryMul<Rate>>::try_mul(move _287, move _288) -> [return: bb138, unwind: bb345];
    }

    bb136: {
        StorageLive(_276);
        _276 = move ((_262 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_278);
        _278 = move _276;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _278) -> [return: bb137, unwind: bb374];
    }

    bb137: {
        StorageDead(_278);
        StorageDead(_276);
        StorageDead(_261);
        _737 = discriminant(_262);
        goto -> bb319;
    }

    bb138: {
        StorageDead(_288);
        StorageDead(_287);
        _285 = <Result<Decimal, ProgramError> as Try>::branch(move _286) -> [return: bb139, unwind: bb345];
    }

    bb139: {
        _633 = const true;
        StorageDead(_286);
        _289 = discriminant(_285);
        switchInt(move _289) -> [0: bb140, 1: bb141, otherwise: bb5];
    }

    bb140: {
        StorageLive(_293);
        _293 = ((_285 as Continue).0: solend_sdk::math::Decimal);
        _284 = _293;
        StorageDead(_293);
        _282 = <Decimal as TryAdd>::try_add(move _283, move _284) -> [return: bb143, unwind: bb373];
    }

    bb141: {
        StorageLive(_290);
        _290 = move ((_285 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_292);
        _292 = move _290;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _292) -> [return: bb142, unwind: bb373];
    }

    bb142: {
        StorageDead(_292);
        StorageDead(_290);
        StorageDead(_284);
        StorageDead(_283);
        StorageDead(_282);
        StorageDead(_280);
        goto -> bb318;
    }

    bb143: {
        StorageDead(_284);
        StorageDead(_283);
        _281 = <Result<Decimal, ProgramError> as Try>::branch(move _282) -> [return: bb144, unwind: bb373];
    }

    bb144: {
        StorageDead(_282);
        _294 = discriminant(_281);
        switchInt(move _294) -> [0: bb145, 1: bb146, otherwise: bb5];
    }

    bb145: {
        StorageLive(_298);
        _298 = ((_281 as Continue).0: solend_sdk::math::Decimal);
        _280 = _298;
        StorageDead(_298);
        _56 = move _280;
        StorageDead(_280);
        _675 = discriminant(_281);
        _677 = discriminant(_285);
        _633 = const false;
        StorageDead(_285);
        StorageDead(_281);
        _66 = const ();
        StorageDead(_229);
        StorageDead(_227);
        StorageDead(_225);
        StorageDead(_215);
        StorageDead(_205);
        StorageDead(_185);
        drop(_135) -> [return: bb148, unwind: bb387];
    }

    bb146: {
        StorageLive(_295);
        _295 = move ((_281 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_297);
        _297 = move _295;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _297) -> [return: bb147, unwind: bb372];
    }

    bb147: {
        StorageDead(_297);
        StorageDead(_295);
        StorageDead(_280);
        _733 = discriminant(_281);
        goto -> bb318;
    }

    bb148: {
        StorageDead(_135);
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_69);
        StorageDead(_67);
        StorageDead(_66);
        _65 = const ();
        goto -> bb38;
    }

    bb149: {
        _305 = &mut (*_306);
        StorageDead(_307);
        _304 = bytemuck::core::slice::<impl [ObligationLiquidity]>::iter_mut(move _305) -> [return: bb150, unwind: bb387];
    }

    bb150: {
        StorageDead(_305);
        _303 = <std::slice::IterMut<'_, ObligationLiquidity> as Iterator>::enumerate(move _304) -> [return: bb151, unwind: bb387];
    }

    bb151: {
        StorageDead(_304);
        _302 = <Enumerate<std::slice::IterMut<'_, ObligationLiquidity>> as IntoIterator>::into_iter(move _303) -> [return: bb152, unwind: bb387];
    }

    bb152: {
        StorageDead(_303);
        StorageLive(_308);
        _308 = move _302;
        goto -> bb153;
    }

    bb153: {
        StorageLive(_309);
        StorageLive(_310);
        StorageLive(_311);
        StorageLive(_312);
        _312 = &mut _308;
        _311 = &mut (*_312);
        _310 = <Enumerate<std::slice::IterMut<'_, ObligationLiquidity>> as Iterator>::next(move _311) -> [return: bb154, unwind: bb387];
    }

    bb154: {
        StorageDead(_311);
        _313 = discriminant(_310);
        switchInt(move _313) -> [0: bb156, 1: bb155, otherwise: bb5];
    }

    bb155: {
        StorageLive(_315);
        _315 = (((_310 as Some).0: (usize, &mut solend_sdk::state::ObligationLiquidity)).0: usize);
        StorageLive(_316);
        _316 = move (((_310 as Some).0: (usize, &mut solend_sdk::state::ObligationLiquidity)).1: &mut solend_sdk::state::ObligationLiquidity);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        _320 = &mut (*_3);
        _319 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _320) -> [return: bb157, unwind: bb387];
    }

    bb156: {
        _301 = const ();
        StorageDead(_312);
        StorageDead(_310);
        StorageDead(_309);
        StorageDead(_308);
        StorageDead(_306);
        StorageDead(_302);
        StorageDead(_301);
        StorageLive(_537);
        StorageLive(_538);
        StorageLive(_539);
        StorageLive(_540);
        StorageLive(_541);
        _541 = &mut (*_3);
        _540 = <std::slice::Iter<'_, AccountInfo<'_>> as Iterator>::next(move _541) -> [return: bb268, unwind: bb387];
    }

    bb157: {
        StorageDead(_320);
        _318 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _319) -> [return: bb158, unwind: bb387];
    }

    bb158: {
        StorageDead(_319);
        _321 = discriminant(_318);
        switchInt(move _321) -> [0: bb159, 1: bb160, otherwise: bb5];
    }

    bb159: {
        StorageLive(_325);
        _325 = ((_318 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _317 = _325;
        StorageDead(_325);
        _679 = discriminant(_318);
        StorageDead(_318);
        StorageLive(_326);
        StorageLive(_327);
        StorageLive(_328);
        _328 = &((*_317).3: &solana_program::pubkey::Pubkey);
        StorageLive(_329);
        _329 = &_1;
        _327 = <&Pubkey as PartialEq>::ne(move _328, move _329) -> [return: bb162, unwind: bb387];
    }

    bb160: {
        StorageLive(_322);
        _322 = move ((_318 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_324);
        _324 = move _322;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _324) -> [return: bb161, unwind: bb371];
    }

    bb161: {
        StorageDead(_324);
        StorageDead(_322);
        _731 = discriminant(_318);
        StorageDead(_318);
        goto -> bb316;
    }

    bb162: {
        switchInt(move _327) -> [0: bb171, otherwise: bb163];
    }

    bb163: {
        StorageDead(_329);
        StorageDead(_328);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        StorageLive(_338);
        StorageLive(_339);
        StorageLive(_340);
        StorageLive(_341);
        _621 = const _;
        _341 = &(*_621);
        _340 = &(*_341);
        _339 = move _340 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_340);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        StorageLive(_349);
        _349 = &_315;
        _348 = &(*_349);
        _347 = bytemuck::core::fmt::rt::Argument::<'_>::new_display::<usize>(move _348) -> [return: bb164, unwind: bb387];
    }

    bb164: {
        StorageDead(_348);
        _346 = [move _347];
        StorageDead(_347);
        _345 = &_346;
        _344 = &(*_345);
        _343 = move _344 as &[bytemuck::core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_344);
        _338 = Arguments::<'_>::new_v1(move _339, move _343) -> [return: bb165, unwind: bb387];
    }

    bb165: {
        StorageDead(_343);
        StorageDead(_339);
        _337 = format(move _338) -> [return: bb166, unwind: bb387];
    }

    bb166: {
        StorageDead(_338);
        StorageDead(_349);
        StorageDead(_346);
        StorageDead(_345);
        StorageDead(_341);
        _336 = move _337;
        StorageDead(_337);
        _335 = &_336;
        _334 = &(*_335);
        _333 = <String as Deref>::deref(move _334) -> [return: bb167, unwind: bb343];
    }

    bb167: {
        _332 = &(*_333);
        StorageDead(_334);
        _331 = solana_program::log::sol_log(move _332) -> [return: bb168, unwind: bb343];
    }

    bb168: {
        StorageDead(_332);
        drop(_336) -> [return: bb169, unwind: bb387];
    }

    bb169: {
        StorageDead(_336);
        StorageDead(_335);
        StorageDead(_333);
        StorageDead(_331);
        StorageLive(_350);
        StorageLive(_351);
        _351 = solend_sdk::error::LendingError::InvalidAccountOwner;
        _350 = <LendingError as Into<ProgramError>>::into(move _351) -> [return: bb170, unwind: bb387];
    }

    bb170: {
        StorageDead(_351);
        _0 = Result::<(), ProgramError>::Err(move _350);
        StorageDead(_350);
        StorageDead(_327);
        StorageDead(_326);
        goto -> bb316;
    }

    bb171: {
        StorageDead(_329);
        StorageDead(_328);
        _326 = const ();
        StorageDead(_327);
        StorageDead(_326);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        _354 = &((*_316).0: solana_program::pubkey::Pubkey);
        StorageLive(_355);
        _628 = deref_copy ((*_317).0: &solana_program::pubkey::Pubkey);
        _355 = &(*_628);
        _353 = <Pubkey as PartialEq>::ne(move _354, move _355) -> [return: bb172, unwind: bb387];
    }

    bb172: {
        switchInt(move _353) -> [0: bb181, otherwise: bb173];
    }

    bb173: {
        StorageDead(_355);
        StorageDead(_354);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        StorageLive(_360);
        StorageLive(_361);
        StorageLive(_362);
        StorageLive(_363);
        StorageLive(_364);
        StorageLive(_365);
        StorageLive(_366);
        StorageLive(_367);
        _622 = const _;
        _367 = &(*_622);
        _366 = &(*_367);
        _365 = move _366 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_366);
        StorageLive(_369);
        StorageLive(_370);
        StorageLive(_371);
        StorageLive(_372);
        StorageLive(_373);
        StorageLive(_374);
        StorageLive(_375);
        _375 = &_315;
        _374 = &(*_375);
        _373 = bytemuck::core::fmt::rt::Argument::<'_>::new_display::<usize>(move _374) -> [return: bb174, unwind: bb387];
    }

    bb174: {
        StorageDead(_374);
        _372 = [move _373];
        StorageDead(_373);
        _371 = &_372;
        _370 = &(*_371);
        _369 = move _370 as &[bytemuck::core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_370);
        _364 = Arguments::<'_>::new_v1(move _365, move _369) -> [return: bb175, unwind: bb387];
    }

    bb175: {
        StorageDead(_369);
        StorageDead(_365);
        _363 = format(move _364) -> [return: bb176, unwind: bb387];
    }

    bb176: {
        StorageDead(_364);
        StorageDead(_375);
        StorageDead(_372);
        StorageDead(_371);
        StorageDead(_367);
        _362 = move _363;
        StorageDead(_363);
        _361 = &_362;
        _360 = &(*_361);
        _359 = <String as Deref>::deref(move _360) -> [return: bb177, unwind: bb342];
    }

    bb177: {
        _358 = &(*_359);
        StorageDead(_360);
        _357 = solana_program::log::sol_log(move _358) -> [return: bb178, unwind: bb342];
    }

    bb178: {
        StorageDead(_358);
        drop(_362) -> [return: bb179, unwind: bb387];
    }

    bb179: {
        StorageDead(_362);
        StorageDead(_361);
        StorageDead(_359);
        StorageDead(_357);
        StorageLive(_376);
        StorageLive(_377);
        _377 = InvalidAccountInput;
        _376 = <LendingError as Into<ProgramError>>::into(move _377) -> [return: bb180, unwind: bb387];
    }

    bb180: {
        StorageDead(_377);
        _0 = Result::<(), ProgramError>::Err(move _376);
        StorageDead(_376);
        StorageDead(_353);
        StorageDead(_352);
        goto -> bb316;
    }

    bb181: {
        StorageDead(_355);
        StorageDead(_354);
        _352 = const ();
        StorageDead(_353);
        StorageDead(_352);
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        StorageLive(_382);
        StorageLive(_383);
        StorageLive(_384);
        StorageLive(_385);
        StorageLive(_386);
        StorageLive(_387);
        StorageLive(_388);
        StorageLive(_389);
        _389 = &((*_317).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _388 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _389) -> [return: bb182, unwind: bb387];
    }

    bb182: {
        _387 = &(*_388);
        StorageDead(_389);
        _386 = RefCell::<&mut [u8]>::borrow(move _387) -> [return: bb183, unwind: bb387];
    }

    bb183: {
        StorageDead(_387);
        _385 = &_386;
        _384 = &(*_385);
        _383 = <Ref<'_, &mut [u8]> as Deref>::deref(move _384) -> [return: bb184, unwind: bb341];
    }

    bb184: {
        _629 = deref_copy (*_383);
        _382 = &(*_629);
        StorageDead(_384);
        _381 = <Reserve as Pack>::unpack(move _382) -> [return: bb185, unwind: bb341];
    }

    bb185: {
        StorageDead(_382);
        _380 = <Result<Reserve, ProgramError> as Try>::branch(move _381) -> [return: bb186, unwind: bb341];
    }

    bb186: {
        _639 = const true;
        _640 = const true;
        StorageDead(_381);
        _390 = discriminant(_380);
        switchInt(move _390) -> [0: bb187, 1: bb188, otherwise: bb5];
    }

    bb187: {
        StorageLive(_394);
        _394 = move ((_380 as Continue).0: solend_sdk::state::Reserve);
        _379 = move _394;
        StorageDead(_394);
        _378 = Box::<Reserve>::new(move _379) -> [return: bb190, unwind: bb370];
    }

    bb188: {
        StorageLive(_391);
        _391 = move ((_380 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_393);
        _393 = move _391;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _393) -> [return: bb189, unwind: bb370];
    }

    bb189: {
        StorageDead(_393);
        StorageDead(_391);
        StorageDead(_379);
        _729 = discriminant(_380);
        drop(_386) -> [return: bb314, unwind: bb387];
    }

    bb190: {
        StorageDead(_379);
        _681 = discriminant(_380);
        drop(_386) -> [return: bb191, unwind: bb340];
    }

    bb191: {
        StorageDead(_388);
        StorageDead(_386);
        StorageDead(_385);
        StorageDead(_383);
        _639 = const false;
        _640 = const false;
        StorageDead(_380);
        StorageLive(_395);
        StorageLive(_396);
        StorageLive(_397);
        StorageLive(_398);
        StorageLive(_399);
        _804 = (((_378.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _399 = &((*_804).1: solend_sdk::state::LastUpdate);
        StorageLive(_400);
        _400 = ((*_15).0: u64);
        _398 = LastUpdate::is_stale(move _399, move _400) -> [return: bb192, unwind: bb340];
    }

    bb192: {
        StorageDead(_400);
        StorageDead(_399);
        _397 = <Result<bool, ProgramError> as Try>::branch(move _398) -> [return: bb193, unwind: bb340];
    }

    bb193: {
        StorageDead(_398);
        _401 = discriminant(_397);
        switchInt(move _401) -> [0: bb194, 1: bb195, otherwise: bb5];
    }

    bb194: {
        StorageLive(_405);
        _405 = ((_397 as Continue).0: bool);
        _396 = _405;
        StorageDead(_405);
        switchInt(move _396) -> [0: bb354, otherwise: bb353];
    }

    bb195: {
        StorageLive(_402);
        _402 = move ((_397 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_404);
        _404 = move _402;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _404) -> [return: bb196, unwind: bb369];
    }

    bb196: {
        StorageDead(_404);
        StorageDead(_402);
        _727 = discriminant(_397);
        StorageDead(_397);
        goto -> bb312;
    }

    bb197: {
        StorageDead(_424);
        _422 = [move _423];
        StorageDead(_423);
        _421 = &_422;
        _420 = &(*_421);
        _419 = move _420 as &[bytemuck::core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_420);
        _414 = Arguments::<'_>::new_v1(move _415, move _419) -> [return: bb198, unwind: bb340];
    }

    bb198: {
        StorageDead(_419);
        StorageDead(_415);
        _413 = format(move _414) -> [return: bb199, unwind: bb340];
    }

    bb199: {
        StorageDead(_414);
        StorageDead(_425);
        StorageDead(_422);
        StorageDead(_421);
        StorageDead(_417);
        _412 = move _413;
        StorageDead(_413);
        _411 = &_412;
        _410 = &(*_411);
        _409 = <String as Deref>::deref(move _410) -> [return: bb200, unwind: bb339];
    }

    bb200: {
        _408 = &(*_409);
        StorageDead(_410);
        _407 = solana_program::log::sol_log(move _408) -> [return: bb201, unwind: bb339];
    }

    bb201: {
        StorageDead(_408);
        drop(_412) -> [return: bb202, unwind: bb340];
    }

    bb202: {
        StorageDead(_412);
        StorageDead(_411);
        StorageDead(_409);
        StorageDead(_407);
        StorageLive(_426);
        StorageLive(_427);
        _427 = ReserveStale;
        _426 = <LendingError as Into<ProgramError>>::into(move _427) -> [return: bb203, unwind: bb340];
    }

    bb203: {
        StorageDead(_427);
        _0 = Result::<(), ProgramError>::Err(move _426);
        StorageDead(_426);
        goto -> bb312;
    }

    bb204: {
        switchInt(move _429) -> [0: bb206, otherwise: bb205];
    }

    bb205: {
        StorageDead(_431);
        StorageDead(_430);
        _299 = const true;
        _428 = const ();
        goto -> bb207;
    }

    bb206: {
        StorageDead(_431);
        StorageDead(_430);
        _428 = const ();
        goto -> bb207;
    }

    bb207: {
        StorageDead(_429);
        StorageDead(_428);
        StorageLive(_433);
        StorageLive(_434);
        StorageLive(_435);
        StorageLive(_436);
        _436 = &mut (*_316);
        StorageLive(_437);
        _806 = (((_378.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _818 = _806 as *const () (PtrToPtr);
        _819 = _818 as usize (Transmute);
        _820 = AlignOf(solend_sdk::state::Reserve);
        _821 = Sub(_820, const 1_usize);
        _822 = BitAnd(_819, _821);
        _823 = Eq(_822, const 0_usize);
        assert(_823, "misaligned pointer dereference: address must be a multiple of {} but is {}", _820, _819) -> [success: bb392, unwind unreachable];
    }

    bb208: {
        StorageDead(_437);
        StorageDead(_436);
        _434 = <Result<(), ProgramError> as Try>::branch(move _435) -> [return: bb209, unwind: bb340];
    }

    bb209: {
        StorageDead(_435);
        _438 = discriminant(_434);
        switchInt(move _438) -> [0: bb210, 1: bb211, otherwise: bb5];
    }

    bb210: {
        StorageLive(_442);
        _442 = ((_434 as Continue).0: ());
        _433 = _442;
        StorageDead(_442);
        _687 = discriminant(_434);
        StorageDead(_434);
        StorageDead(_433);
        StorageLive(_443);
        StorageLive(_444);
        _807 = (((_378.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _812 = _807 as *const () (PtrToPtr);
        _813 = _812 as usize (Transmute);
        _814 = AlignOf(solend_sdk::state::Reserve);
        _815 = Sub(_814, const 1_usize);
        _816 = BitAnd(_813, _815);
        _817 = Eq(_816, const 0_usize);
        assert(_817, "misaligned pointer dereference: address must be a multiple of {} but is {}", _814, _813) -> [success: bb391, unwind unreachable];
    }

    bb211: {
        StorageLive(_439);
        _439 = move ((_434 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_441);
        _441 = move _439;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _441) -> [return: bb212, unwind: bb368];
    }

    bb212: {
        StorageDead(_441);
        StorageDead(_439);
        _725 = discriminant(_434);
        StorageDead(_434);
        StorageDead(_433);
        goto -> bb313;
    }

    bb213: {
        StorageLive(_455);
        _455 = (((_300 as Some).0: ((u64, &solana_program::pubkey::Pubkey), usize)).0: (u64, &solana_program::pubkey::Pubkey));
        StorageLive(_456);
        StorageLive(_457);
        _457 = &((*_316).2: solend_sdk::math::Decimal);
        StorageLive(_458);
        StorageLive(_459);
        _459 = Decimal::zero() -> [return: bb220, unwind: bb340];
    }

    bb214: {
        StorageLive(_448);
        StorageLive(_449);
        _449 = &((*_316).2: solend_sdk::math::Decimal);
        StorageLive(_450);
        StorageLive(_451);
        _451 = Decimal::zero() -> [return: bb215, unwind: bb340];
    }

    bb215: {
        _450 = &_451;
        _448 = <Decimal as PartialOrd>::gt(move _449, move _450) -> [return: bb216, unwind: bb340];
    }

    bb216: {
        switchInt(move _448) -> [0: bb218, otherwise: bb217];
    }

    bb217: {
        StorageDead(_451);
        StorageDead(_450);
        StorageDead(_449);
        StorageLive(_452);
        StorageLive(_453);
        _453 = _443;
        StorageLive(_454);
        _454 = _315;
        _452 = (move _453, move _454);
        StorageDead(_454);
        StorageDead(_453);
        _446 = Option::<((u64, &Pubkey), usize)>::Some(move _452);
        StorageDead(_452);
        goto -> bb219;
    }

    bb218: {
        StorageDead(_451);
        StorageDead(_450);
        StorageDead(_449);
        _446 = Option::<((u64, &Pubkey), usize)>::None;
        goto -> bb219;
    }

    bb219: {
        StorageDead(_448);
        goto -> bb229;
    }

    bb220: {
        _458 = &_459;
        _456 = <Decimal as PartialOrd>::gt(move _457, move _458) -> [return: bb221, unwind: bb340];
    }

    bb221: {
        switchInt(move _456) -> [0: bb226, otherwise: bb222];
    }

    bb222: {
        StorageDead(_459);
        StorageDead(_458);
        StorageDead(_457);
        StorageLive(_460);
        StorageLive(_461);
        _461 = &_443;
        StorageLive(_462);
        _462 = &_455;
        _460 = <(u64, &Pubkey) as PartialOrd>::gt(move _461, move _462) -> [return: bb223, unwind: bb340];
    }

    bb223: {
        switchInt(move _460) -> [0: bb225, otherwise: bb224];
    }

    bb224: {
        StorageDead(_462);
        StorageDead(_461);
        StorageLive(_463);
        StorageLive(_464);
        _464 = _443;
        StorageLive(_465);
        _465 = _315;
        _463 = (move _464, move _465);
        StorageDead(_465);
        StorageDead(_464);
        _446 = Option::<((u64, &Pubkey), usize)>::Some(move _463);
        StorageDead(_463);
        goto -> bb228;
    }

    bb225: {
        StorageDead(_462);
        StorageDead(_461);
        goto -> bb227;
    }

    bb226: {
        StorageDead(_459);
        StorageDead(_458);
        StorageDead(_457);
        goto -> bb227;
    }

    bb227: {
        _446 = _300;
        goto -> bb228;
    }

    bb228: {
        StorageDead(_460);
        StorageDead(_456);
        StorageDead(_455);
        goto -> bb229;
    }

    bb229: {
        _300 = move _446;
        StorageDead(_446);
        StorageLive(_466);
        StorageLive(_467);
        StorageLive(_468);
        StorageLive(_469);
        _808 = (((_378.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _469 = &(*_808);
        StorageLive(_470);
        _470 = ((*_316).2: solend_sdk::math::Decimal);
        _468 = Reserve::market_value(move _469, move _470) -> [return: bb230, unwind: bb340];
    }

    bb230: {
        StorageDead(_470);
        StorageDead(_469);
        _467 = <Result<Decimal, ProgramError> as Try>::branch(move _468) -> [return: bb231, unwind: bb340];
    }

    bb231: {
        StorageDead(_468);
        _471 = discriminant(_467);
        switchInt(move _471) -> [0: bb232, 1: bb233, otherwise: bb5];
    }

    bb232: {
        StorageLive(_475);
        _475 = ((_467 as Continue).0: solend_sdk::math::Decimal);
        _466 = _475;
        StorageDead(_475);
        _689 = discriminant(_467);
        StorageDead(_467);
        StorageLive(_476);
        StorageLive(_477);
        StorageLive(_478);
        StorageLive(_479);
        _809 = (((_378.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _479 = &(*_809);
        StorageLive(_480);
        _480 = ((*_316).2: solend_sdk::math::Decimal);
        _478 = Reserve::market_value_upper_bound(move _479, move _480) -> [return: bb235, unwind: bb340];
    }

    bb233: {
        StorageLive(_472);
        _472 = move ((_467 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_474);
        _474 = move _472;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _474) -> [return: bb234, unwind: bb367];
    }

    bb234: {
        StorageDead(_474);
        StorageDead(_472);
        _723 = discriminant(_467);
        StorageDead(_467);
        goto -> bb311;
    }

    bb235: {
        StorageDead(_480);
        StorageDead(_479);
        _477 = <Result<Decimal, ProgramError> as Try>::branch(move _478) -> [return: bb236, unwind: bb340];
    }

    bb236: {
        StorageDead(_478);
        _481 = discriminant(_477);
        switchInt(move _481) -> [0: bb237, 1: bb238, otherwise: bb5];
    }

    bb237: {
        StorageLive(_485);
        _485 = ((_477 as Continue).0: solend_sdk::math::Decimal);
        _476 = _485;
        StorageDead(_485);
        _691 = discriminant(_477);
        StorageDead(_477);
        StorageLive(_486);
        _486 = _466;
        ((*_316).3: solend_sdk::math::Decimal) = move _486;
        StorageDead(_486);
        StorageLive(_487);
        StorageLive(_488);
        StorageLive(_489);
        StorageLive(_490);
        _490 = _51;
        StorageLive(_491);
        StorageLive(_492);
        StorageLive(_493);
        StorageLive(_494);
        _494 = _466;
        StorageLive(_495);
        StorageLive(_496);
        _810 = (((_378.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _496 = &(*_810);
        _495 = Reserve::borrow_weight(move _496) -> [return: bb240, unwind: bb340];
    }

    bb238: {
        StorageLive(_482);
        _482 = move ((_477 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_484);
        _484 = move _482;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _484) -> [return: bb239, unwind: bb366];
    }

    bb239: {
        StorageDead(_484);
        StorageDead(_482);
        _721 = discriminant(_477);
        StorageDead(_477);
        goto -> bb310;
    }

    bb240: {
        StorageDead(_496);
        _493 = <Decimal as TryMul<Decimal>>::try_mul(move _494, move _495) -> [return: bb241, unwind: bb340];
    }

    bb241: {
        StorageDead(_495);
        StorageDead(_494);
        _492 = <Result<Decimal, ProgramError> as Try>::branch(move _493) -> [return: bb242, unwind: bb340];
    }

    bb242: {
        _632 = const true;
        StorageDead(_493);
        _497 = discriminant(_492);
        switchInt(move _497) -> [0: bb243, 1: bb244, otherwise: bb5];
    }

    bb243: {
        StorageLive(_501);
        _501 = ((_492 as Continue).0: solend_sdk::math::Decimal);
        _491 = _501;
        StorageDead(_501);
        _489 = <Decimal as TryAdd>::try_add(move _490, move _491) -> [return: bb246, unwind: bb365];
    }

    bb244: {
        StorageLive(_498);
        _498 = move ((_492 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_500);
        _500 = move _498;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _500) -> [return: bb245, unwind: bb365];
    }

    bb245: {
        StorageDead(_500);
        StorageDead(_498);
        StorageDead(_491);
        StorageDead(_490);
        StorageDead(_489);
        StorageDead(_487);
        goto -> bb309;
    }

    bb246: {
        StorageDead(_491);
        StorageDead(_490);
        _488 = <Result<Decimal, ProgramError> as Try>::branch(move _489) -> [return: bb247, unwind: bb365];
    }

    bb247: {
        StorageDead(_489);
        _502 = discriminant(_488);
        switchInt(move _502) -> [0: bb248, 1: bb249, otherwise: bb5];
    }

    bb248: {
        StorageLive(_506);
        _506 = ((_488 as Continue).0: solend_sdk::math::Decimal);
        _487 = _506;
        StorageDead(_506);
        _51 = move _487;
        StorageDead(_487);
        _693 = discriminant(_488);
        _695 = discriminant(_492);
        _632 = const false;
        StorageDead(_492);
        StorageDead(_488);
        StorageLive(_507);
        StorageLive(_508);
        StorageLive(_509);
        StorageLive(_510);
        _510 = _53;
        StorageLive(_511);
        StorageLive(_512);
        StorageLive(_513);
        StorageLive(_514);
        _514 = _476;
        StorageLive(_515);
        StorageLive(_516);
        _811 = (((_378.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _516 = &(*_811);
        _515 = Reserve::borrow_weight(move _516) -> [return: bb251, unwind: bb340];
    }

    bb249: {
        StorageLive(_503);
        _503 = move ((_488 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_505);
        _505 = move _503;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _505) -> [return: bb250, unwind: bb364];
    }

    bb250: {
        StorageDead(_505);
        StorageDead(_503);
        StorageDead(_487);
        _717 = discriminant(_488);
        goto -> bb309;
    }

    bb251: {
        StorageDead(_516);
        _513 = <Decimal as TryMul<Decimal>>::try_mul(move _514, move _515) -> [return: bb252, unwind: bb340];
    }

    bb252: {
        StorageDead(_515);
        StorageDead(_514);
        _512 = <Result<Decimal, ProgramError> as Try>::branch(move _513) -> [return: bb253, unwind: bb340];
    }

    bb253: {
        _631 = const true;
        StorageDead(_513);
        _517 = discriminant(_512);
        switchInt(move _517) -> [0: bb254, 1: bb255, otherwise: bb5];
    }

    bb254: {
        StorageLive(_521);
        _521 = ((_512 as Continue).0: solend_sdk::math::Decimal);
        _511 = _521;
        StorageDead(_521);
        _509 = <Decimal as TryAdd>::try_add(move _510, move _511) -> [return: bb257, unwind: bb363];
    }

    bb255: {
        StorageLive(_518);
        _518 = move ((_512 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_520);
        _520 = move _518;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _520) -> [return: bb256, unwind: bb363];
    }

    bb256: {
        StorageDead(_520);
        StorageDead(_518);
        StorageDead(_511);
        StorageDead(_510);
        StorageDead(_509);
        StorageDead(_507);
        goto -> bb308;
    }

    bb257: {
        StorageDead(_511);
        StorageDead(_510);
        _508 = <Result<Decimal, ProgramError> as Try>::branch(move _509) -> [return: bb258, unwind: bb363];
    }

    bb258: {
        StorageDead(_509);
        _522 = discriminant(_508);
        switchInt(move _522) -> [0: bb259, 1: bb260, otherwise: bb5];
    }

    bb259: {
        StorageLive(_526);
        _526 = ((_508 as Continue).0: solend_sdk::math::Decimal);
        _507 = _526;
        StorageDead(_526);
        _53 = move _507;
        StorageDead(_507);
        _697 = discriminant(_508);
        _699 = discriminant(_512);
        _631 = const false;
        StorageDead(_512);
        StorageDead(_508);
        StorageLive(_527);
        StorageLive(_528);
        StorageLive(_529);
        StorageLive(_530);
        _530 = _52;
        StorageLive(_531);
        _531 = _466;
        _529 = <Decimal as TryAdd>::try_add(move _530, move _531) -> [return: bb262, unwind: bb340];
    }

    bb260: {
        StorageLive(_523);
        _523 = move ((_508 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_525);
        _525 = move _523;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _525) -> [return: bb261, unwind: bb362];
    }

    bb261: {
        StorageDead(_525);
        StorageDead(_523);
        StorageDead(_507);
        _713 = discriminant(_508);
        goto -> bb308;
    }

    bb262: {
        StorageDead(_531);
        StorageDead(_530);
        _528 = <Result<Decimal, ProgramError> as Try>::branch(move _529) -> [return: bb263, unwind: bb340];
    }

    bb263: {
        StorageDead(_529);
        _532 = discriminant(_528);
        switchInt(move _532) -> [0: bb264, 1: bb265, otherwise: bb5];
    }

    bb264: {
        StorageLive(_536);
        _536 = ((_528 as Continue).0: solend_sdk::math::Decimal);
        _527 = _536;
        StorageDead(_536);
        _52 = move _527;
        StorageDead(_527);
        _701 = discriminant(_528);
        StorageDead(_528);
        _309 = const ();
        StorageDead(_476);
        StorageDead(_466);
        StorageDead(_443);
        drop(_378) -> [return: bb267, unwind: bb387];
    }

    bb265: {
        StorageLive(_533);
        _533 = move ((_528 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_535);
        _535 = move _533;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _535) -> [return: bb266, unwind: bb361];
    }

    bb266: {
        StorageDead(_535);
        StorageDead(_533);
        StorageDead(_527);
        _711 = discriminant(_528);
        StorageDead(_528);
        goto -> bb310;
    }

    bb267: {
        StorageDead(_378);
        StorageDead(_317);
        StorageDead(_316);
        StorageDead(_315);
        StorageDead(_312);
        StorageDead(_310);
        StorageDead(_309);
        _65 = const ();
        goto -> bb153;
    }

    bb268: {
        _539 = &_540;
        StorageDead(_541);
        _538 = Option::<&AccountInfo<'_>>::is_some(move _539) -> [return: bb269, unwind: bb387];
    }

    bb269: {
        switchInt(move _538) -> [0: bb273, otherwise: bb270];
    }

    bb270: {
        StorageDead(_540);
        StorageDead(_539);
        StorageLive(_543);
        StorageLive(_544);
        StorageLive(_545);
        _545 = const "Too many obligation deposit or borrow reserves provided";
        _544 = &(*_545);
        _543 = solana_program::log::sol_log(move _544) -> [return: bb271, unwind: bb387];
    }

    bb271: {
        StorageDead(_544);
        StorageDead(_545);
        StorageDead(_543);
        StorageLive(_546);
        StorageLive(_547);
        _547 = InvalidAccountInput;
        _546 = <LendingError as Into<ProgramError>>::into(move _547) -> [return: bb272, unwind: bb387];
    }

    bb272: {
        StorageDead(_547);
        _0 = Result::<(), ProgramError>::Err(move _546);
        StorageDead(_546);
        StorageDead(_538);
        StorageDead(_537);
        goto -> bb317;
    }

    bb273: {
        StorageDead(_540);
        StorageDead(_539);
        _537 = const ();
        StorageDead(_538);
        StorageDead(_537);
        StorageLive(_548);
        _548 = _50;
        (_24.6: solend_sdk::math::Decimal) = move _548;
        StorageDead(_548);
        StorageLive(_549);
        _549 = _51;
        (_24.7: solend_sdk::math::Decimal) = move _549;
        StorageDead(_549);
        StorageLive(_550);
        _550 = _52;
        (_24.8: solend_sdk::math::Decimal) = move _550;
        StorageDead(_550);
        StorageLive(_551);
        _551 = _53;
        (_24.9: solend_sdk::math::Decimal) = move _551;
        StorageDead(_551);
        StorageLive(_552);
        _552 = _299;
        (_24.13: bool) = move _552;
        StorageDead(_552);
        StorageLive(_553);
        _553 = <Decimal as From<u64>>::from(const 70000000_u64) -> [return: bb274, unwind: bb387];
    }

    bb274: {
        StorageLive(_554);
        _554 = <Decimal as From<u64>>::from(const 65000000_u64) -> [return: bb275, unwind: bb387];
    }

    bb275: {
        StorageLive(_555);
        StorageLive(_556);
        _556 = _54;
        StorageLive(_557);
        _557 = _554;
        _555 = std::cmp::min::<Decimal>(move _556, move _557) -> [return: bb276, unwind: bb387];
    }

    bb276: {
        StorageDead(_557);
        StorageDead(_556);
        (_24.10: solend_sdk::math::Decimal) = move _555;
        StorageDead(_555);
        StorageLive(_558);
        StorageLive(_559);
        _559 = _55;
        StorageLive(_560);
        _560 = _553;
        _558 = std::cmp::min::<Decimal>(move _559, move _560) -> [return: bb277, unwind: bb387];
    }

    bb277: {
        StorageDead(_560);
        StorageDead(_559);
        (_24.11: solend_sdk::math::Decimal) = move _558;
        StorageDead(_558);
        StorageLive(_561);
        StorageLive(_562);
        _562 = _56;
        StorageLive(_563);
        _563 = _553;
        _561 = std::cmp::min::<Decimal>(move _562, move _563) -> [return: bb278, unwind: bb387];
    }

    bb278: {
        StorageDead(_563);
        StorageDead(_562);
        (_24.12: solend_sdk::math::Decimal) = move _561;
        StorageDead(_561);
        StorageLive(_564);
        StorageLive(_565);
        _565 = &mut (_24.1: solend_sdk::state::LastUpdate);
        StorageLive(_566);
        _566 = ((*_15).0: u64);
        _564 = LastUpdate::update_slot(move _565, move _566) -> [return: bb279, unwind: bb387];
    }

    bb279: {
        StorageDead(_566);
        StorageDead(_565);
        StorageDead(_564);
        StorageLive(_568);
        StorageLive(_569);
        StorageLive(_570);
        StorageLive(_571);
        StorageLive(_572);
        _572 = &mut _24;
        _571 = &mut (*_572);
        StorageLive(_573);
        StorageLive(_574);
        StorageLive(_575);
        StorageLive(_576);
        _576 = &(*_2);
        StorageLive(_577);
        _577 = RangeFrom::<usize> { start: const 1_usize };
        _575 = <[AccountInfo<'_>] as Index<RangeFrom<usize>>>::index(move _576, move _577) -> [return: bb280, unwind: bb387];
    }

    bb280: {
        StorageDead(_577);
        StorageDead(_576);
        _574 = &(*_575);
        _573 = &(*_574);
        _570 = update_borrow_attribution_values(move _571, move _573) -> [return: bb281, unwind: bb387];
    }

    bb281: {
        StorageDead(_573);
        StorageDead(_571);
        _569 = <Result<(Option<Pubkey>, Option<Pubkey>), ProgramError> as Try>::branch(move _570) -> [return: bb282, unwind: bb387];
    }

    bb282: {
        StorageDead(_570);
        _578 = discriminant(_569);
        switchInt(move _578) -> [0: bb283, 1: bb284, otherwise: bb5];
    }

    bb283: {
        StorageLive(_582);
        _582 = ((_569 as Continue).0: (std::option::Option<solana_program::pubkey::Pubkey>, std::option::Option<solana_program::pubkey::Pubkey>));
        _568 = _582;
        StorageDead(_582);
        StorageLive(_567);
        _567 = (_568.1: std::option::Option<solana_program::pubkey::Pubkey>);
        _703 = discriminant(_569);
        StorageDead(_575);
        StorageDead(_574);
        StorageDead(_572);
        StorageDead(_569);
        StorageDead(_568);
        StorageLive(_583);
        StorageLive(_584);
        StorageLive(_585);
        _585 = &_567;
        _584 = Option::<Pubkey>::is_none(move _585) -> [return: bb286, unwind: bb387];
    }

    bb284: {
        StorageLive(_579);
        _579 = move ((_569 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_581);
        _581 = move _579;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _581) -> [return: bb285, unwind: bb360];
    }

    bb285: {
        StorageDead(_581);
        StorageDead(_579);
        _709 = discriminant(_569);
        StorageDead(_575);
        StorageDead(_574);
        StorageDead(_572);
        StorageDead(_569);
        StorageDead(_568);
        goto -> bb307;
    }

    bb286: {
        switchInt(move _584) -> [0: bb288, otherwise: bb287];
    }

    bb287: {
        StorageDead(_585);
        (_24.14: bool) = const false;
        _583 = const ();
        goto -> bb289;
    }

    bb288: {
        StorageDead(_585);
        _583 = const ();
        goto -> bb289;
    }

    bb289: {
        StorageDead(_584);
        StorageDead(_583);
        StorageLive(_586);
        _587 = discriminant(_300);
        switchInt(move _587) -> [1: bb290, otherwise: bb293];
    }

    bb290: {
        StorageLive(_588);
        _588 = (((_300 as Some).0: ((u64, &solana_program::pubkey::Pubkey), usize)).1: usize);
        StorageLive(_589);
        StorageLive(_590);
        StorageLive(_591);
        StorageLive(_592);
        _592 = &mut (_24.5: std::vec::Vec<solend_sdk::state::ObligationLiquidity>);
        _591 = <Vec<ObligationLiquidity> as DerefMut>::deref_mut(move _592) -> [return: bb291, unwind: bb387];
    }

    bb291: {
        _590 = &mut (*_591);
        StorageDead(_592);
        StorageLive(_593);
        _593 = _588;
        _589 = bytemuck::core::slice::<impl [ObligationLiquidity]>::swap(move _590, const 0_usize, move _593) -> [return: bb292, unwind: bb387];
    }

    bb292: {
        StorageDead(_593);
        StorageDead(_590);
        StorageDead(_591);
        StorageDead(_589);
        _586 = const ();
        StorageDead(_588);
        goto -> bb294;
    }

    bb293: {
        _586 = const ();
        goto -> bb294;
    }

    bb294: {
        StorageDead(_586);
        StorageLive(_594);
        StorageLive(_595);
        _595 = &mut (_24.4: std::vec::Vec<solend_sdk::state::ObligationCollateral>);
        StorageLive(_596);
        _596 = {closure@token-lending\program\src\processor.rs:1145:17: 1145:29};
        _594 = Vec::<ObligationCollateral>::retain::<{closure@token-lending\program\src\processor.rs:1145:17: 1145:29}>(move _595, move _596) -> [return: bb295, unwind: bb387];
    }

    bb295: {
        StorageDead(_596);
        StorageDead(_595);
        StorageDead(_594);
        StorageLive(_597);
        StorageLive(_598);
        _598 = &mut (_24.5: std::vec::Vec<solend_sdk::state::ObligationLiquidity>);
        StorageLive(_599);
        _599 = {closure@token-lending\program\src\processor.rs:1148:17: 1148:28};
        _597 = Vec::<ObligationLiquidity>::retain::<{closure@token-lending\program\src\processor.rs:1148:17: 1148:28}>(move _598, move _599) -> [return: bb296, unwind: bb387];
    }

    bb296: {
        StorageDead(_599);
        StorageDead(_598);
        StorageDead(_597);
        StorageLive(_600);
        StorageLive(_601);
        StorageLive(_602);
        StorageLive(_603);
        _637 = const false;
        _638 = const true;
        _603 = move _24;
        StorageLive(_604);
        StorageLive(_605);
        StorageLive(_606);
        StorageLive(_607);
        StorageLive(_608);
        StorageLive(_609);
        StorageLive(_610);
        StorageLive(_611);
        _611 = &((*_6).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _610 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _611) -> [return: bb297, unwind: bb338];
    }

    bb297: {
        _609 = &(*_610);
        StorageDead(_611);
        _608 = RefCell::<&mut [u8]>::borrow_mut(move _609) -> [return: bb298, unwind: bb338];
    }

    bb298: {
        StorageDead(_609);
        _607 = &mut _608;
        _606 = &mut (*_607);
        _605 = <RefMut<'_, &mut [u8]> as DerefMut>::deref_mut(move _606) -> [return: bb299, unwind: bb359];
    }

    bb299: {
        _630 = deref_copy (*_605);
        _604 = &mut (*_630);
        StorageDead(_606);
        _638 = const false;
        _602 = <Obligation as Pack>::pack(move _603, move _604) -> [return: bb300, unwind: bb359];
    }

    bb300: {
        StorageDead(_604);
        _638 = const false;
        StorageDead(_603);
        _601 = <Result<(), ProgramError> as Try>::branch(move _602) -> [return: bb301, unwind: bb337];
    }

    bb301: {
        StorageDead(_602);
        _612 = discriminant(_601);
        switchInt(move _612) -> [0: bb302, 1: bb303, otherwise: bb5];
    }

    bb302: {
        StorageLive(_616);
        _616 = ((_601 as Continue).0: ());
        _600 = _616;
        StorageDead(_616);
        _705 = discriminant(_601);
        drop(_608) -> [return: bb305, unwind: bb387];
    }

    bb303: {
        StorageLive(_613);
        _613 = move ((_601 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_615);
        _615 = move _613;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _615) -> [return: bb304, unwind: bb357];
    }

    bb304: {
        StorageDead(_615);
        StorageDead(_613);
        _707 = discriminant(_601);
        drop(_608) -> [return: bb306, unwind: bb387];
    }

    bb305: {
        StorageDead(_610);
        StorageDead(_608);
        StorageDead(_607);
        StorageDead(_605);
        StorageDead(_601);
        StorageDead(_600);
        StorageLive(_617);
        _617 = ();
        _0 = Result::<(), ProgramError>::Ok(move _617);
        StorageDead(_617);
        StorageDead(_567);
        StorageDead(_554);
        StorageDead(_553);
        StorageDead(_300);
        StorageDead(_299);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_50);
        _637 = const false;
        StorageDead(_24);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_6);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb336;
    }

    bb306: {
        StorageDead(_610);
        StorageDead(_608);
        StorageDead(_607);
        StorageDead(_605);
        StorageDead(_601);
        StorageDead(_600);
        StorageDead(_567);
        goto -> bb307;
    }

    bb307: {
        StorageDead(_554);
        StorageDead(_553);
        goto -> bb317;
    }

    bb308: {
        _715 = discriminant(_512);
        _631 = const false;
        StorageDead(_512);
        StorageDead(_508);
        goto -> bb310;
    }

    bb309: {
        _719 = discriminant(_492);
        _632 = const false;
        StorageDead(_492);
        StorageDead(_488);
        goto -> bb310;
    }

    bb310: {
        StorageDead(_476);
        goto -> bb311;
    }

    bb311: {
        StorageDead(_466);
        StorageDead(_443);
        goto -> bb313;
    }

    bb312: {
        StorageDead(_396);
        StorageDead(_395);
        goto -> bb313;
    }

    bb313: {
        drop(_378) -> [return: bb315, unwind: bb387];
    }

    bb314: {
        StorageDead(_388);
        StorageDead(_386);
        StorageDead(_385);
        StorageDead(_383);
        _639 = const false;
        _640 = const false;
        StorageDead(_380);
        goto -> bb315;
    }

    bb315: {
        StorageDead(_378);
        goto -> bb316;
    }

    bb316: {
        StorageDead(_317);
        StorageDead(_316);
        StorageDead(_315);
        StorageDead(_312);
        StorageDead(_310);
        StorageDead(_309);
        StorageDead(_308);
        StorageDead(_306);
        StorageDead(_302);
        StorageDead(_301);
        goto -> bb317;
    }

    bb317: {
        StorageDead(_300);
        StorageDead(_299);
        goto -> bb331;
    }

    bb318: {
        _735 = discriminant(_285);
        _633 = const false;
        StorageDead(_285);
        StorageDead(_281);
        goto -> bb321;
    }

    bb319: {
        _739 = discriminant(_266);
        _634 = const false;
        StorageDead(_266);
        StorageDead(_262);
        goto -> bb321;
    }

    bb320: {
        _743 = discriminant(_247);
        _635 = const false;
        StorageDead(_247);
        StorageDead(_243);
        goto -> bb321;
    }

    bb321: {
        StorageDead(_229);
        StorageDead(_227);
        StorageDead(_225);
        goto -> bb322;
    }

    bb322: {
        StorageDead(_215);
        goto -> bb323;
    }

    bb323: {
        StorageDead(_205);
        goto -> bb325;
    }

    bb324: {
        _753 = discriminant(_190);
        _636 = const false;
        StorageDead(_190);
        StorageDead(_189);
        StorageDead(_186);
        goto -> bb325;
    }

    bb325: {
        StorageDead(_185);
        goto -> bb327;
    }

    bb326: {
        StorageDead(_153);
        StorageDead(_152);
        goto -> bb327;
    }

    bb327: {
        drop(_135) -> [return: bb329, unwind: bb387];
    }

    bb328: {
        StorageDead(_145);
        StorageDead(_143);
        StorageDead(_142);
        StorageDead(_140);
        _641 = const false;
        _642 = const false;
        StorageDead(_137);
        goto -> bb329;
    }

    bb329: {
        StorageDead(_135);
        goto -> bb330;
    }

    bb330: {
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_69);
        StorageDead(_67);
        StorageDead(_66);
        StorageDead(_64);
        StorageDead(_62);
        StorageDead(_58);
        StorageDead(_57);
        goto -> bb331;
    }

    bb331: {
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_50);
        goto -> bb356;
    }

    bb332: {
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_28);
        StorageDead(_25);
        goto -> bb333;
    }

    bb333: {
        _637 = const false;
        StorageDead(_24);
        goto -> bb334;
    }

    bb334: {
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb335;
    }

    bb335: {
        StorageDead(_6);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb336;
    }

    bb336: {
        return;
    }

    bb337 (cleanup): {
        drop(_608) -> [return: bb387, unwind terminate(cleanup)];
    }

    bb338 (cleanup): {
        drop(_603) -> [return: bb387, unwind terminate(cleanup)];
    }

    bb339 (cleanup): {
        drop(_412) -> [return: bb340, unwind terminate(cleanup)];
    }

    bb340 (cleanup): {
        drop(_378) -> [return: bb387, unwind terminate(cleanup)];
    }

    bb341 (cleanup): {
        drop(_386) -> [return: bb387, unwind terminate(cleanup)];
    }

    bb342 (cleanup): {
        drop(_362) -> [return: bb387, unwind terminate(cleanup)];
    }

    bb343 (cleanup): {
        drop(_336) -> [return: bb387, unwind terminate(cleanup)];
    }

    bb344 (cleanup): {
        drop(_169) -> [return: bb345, unwind terminate(cleanup)];
    }

    bb345 (cleanup): {
        drop(_135) -> [return: bb387, unwind terminate(cleanup)];
    }

    bb346 (cleanup): {
        drop(_143) -> [return: bb387, unwind terminate(cleanup)];
    }

    bb347 (cleanup): {
        drop(_119) -> [return: bb387, unwind terminate(cleanup)];
    }

    bb348 (cleanup): {
        drop(_93) -> [return: bb387, unwind terminate(cleanup)];
    }

    bb349 (cleanup): {
        drop(_31) -> [return: bb350, unwind terminate(cleanup)];
    }

    bb350 (cleanup): {
        resume;
    }

    bb351: {
        _653 = discriminant(_154);
        StorageDead(_154);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        _620 = const _;
        _174 = &(*_620);
        _173 = &(*_174);
        _172 = move _173 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_173);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        _182 = &_72;
        _181 = &(*_182);
        _180 = bytemuck::core::fmt::rt::Argument::<'_>::new_display::<usize>(move _181) -> [return: bb82, unwind: bb345];
    }

    bb352: {
        _655 = discriminant(_154);
        StorageDead(_154);
        _152 = const ();
        StorageDead(_153);
        StorageDead(_152);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        _798 = (((_135.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _192 = &(*_798);
        _191 = Reserve::collateral_exchange_rate(move _192) -> [return: bb89, unwind: bb345];
    }

    bb353: {
        _683 = discriminant(_397);
        StorageDead(_397);
        StorageLive(_407);
        StorageLive(_408);
        StorageLive(_409);
        StorageLive(_410);
        StorageLive(_411);
        StorageLive(_412);
        StorageLive(_413);
        StorageLive(_414);
        StorageLive(_415);
        StorageLive(_416);
        StorageLive(_417);
        _623 = const _;
        _417 = &(*_623);
        _416 = &(*_417);
        _415 = move _416 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_416);
        StorageLive(_419);
        StorageLive(_420);
        StorageLive(_421);
        StorageLive(_422);
        StorageLive(_423);
        StorageLive(_424);
        StorageLive(_425);
        _425 = &_315;
        _424 = &(*_425);
        _423 = bytemuck::core::fmt::rt::Argument::<'_>::new_display::<usize>(move _424) -> [return: bb197, unwind: bb340];
    }

    bb354: {
        _685 = discriminant(_397);
        StorageDead(_397);
        _395 = const ();
        StorageDead(_396);
        StorageDead(_395);
        StorageLive(_428);
        StorageLive(_429);
        StorageLive(_430);
        _805 = (((_378.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _430 = &(((*_805).5: solend_sdk::state::ReserveConfig).18: solend_sdk::state::ReserveType);
        StorageLive(_431);
        _624 = const _;
        _431 = &(*_624);
        _429 = <ReserveType as PartialEq>::eq(move _430, move _431) -> [return: bb204, unwind: bb340];
    }

    bb355: {
        drop(_24) -> [return: bb333, unwind: bb350];
    }

    bb356: {
        switchInt(_637) -> [0: bb333, otherwise: bb355];
    }

    bb357 (cleanup): {
        _767 = discriminant(_601);
        goto -> bb337;
    }

    bb358 (cleanup): {
        drop(_603) -> [return: bb337, unwind terminate(cleanup)];
    }

    bb359 (cleanup): {
        switchInt(_638) -> [0: bb337, otherwise: bb358];
    }

    bb360 (cleanup): {
        _768 = discriminant(_569);
        goto -> bb387;
    }

    bb361 (cleanup): {
        _769 = discriminant(_528);
        goto -> bb340;
    }

    bb362 (cleanup): {
        _770 = discriminant(_508);
        goto -> bb363;
    }

    bb363 (cleanup): {
        _771 = discriminant(_512);
        goto -> bb340;
    }

    bb364 (cleanup): {
        _772 = discriminant(_488);
        goto -> bb365;
    }

    bb365 (cleanup): {
        _773 = discriminant(_492);
        goto -> bb340;
    }

    bb366 (cleanup): {
        _774 = discriminant(_477);
        goto -> bb340;
    }

    bb367 (cleanup): {
        _775 = discriminant(_467);
        goto -> bb340;
    }

    bb368 (cleanup): {
        _776 = discriminant(_434);
        goto -> bb340;
    }

    bb369 (cleanup): {
        _777 = discriminant(_397);
        goto -> bb340;
    }

    bb370 (cleanup): {
        _778 = discriminant(_380);
        goto -> bb341;
    }

    bb371 (cleanup): {
        _779 = discriminant(_318);
        goto -> bb387;
    }

    bb372 (cleanup): {
        _780 = discriminant(_281);
        goto -> bb373;
    }

    bb373 (cleanup): {
        _781 = discriminant(_285);
        goto -> bb345;
    }

    bb374 (cleanup): {
        _782 = discriminant(_262);
        goto -> bb375;
    }

    bb375 (cleanup): {
        _783 = discriminant(_266);
        goto -> bb345;
    }

    bb376 (cleanup): {
        _784 = discriminant(_243);
        goto -> bb377;
    }

    bb377 (cleanup): {
        _785 = discriminant(_247);
        goto -> bb345;
    }

    bb378 (cleanup): {
        _786 = discriminant(_233);
        goto -> bb345;
    }

    bb379 (cleanup): {
        _787 = discriminant(_216);
        goto -> bb345;
    }

    bb380 (cleanup): {
        _788 = discriminant(_206);
        goto -> bb345;
    }

    bb381 (cleanup): {
        _789 = discriminant(_186);
        goto -> bb382;
    }

    bb382 (cleanup): {
        _790 = discriminant(_190);
        goto -> bb345;
    }

    bb383 (cleanup): {
        _791 = discriminant(_154);
        goto -> bb345;
    }

    bb384 (cleanup): {
        _792 = discriminant(_137);
        goto -> bb346;
    }

    bb385 (cleanup): {
        _793 = discriminant(_75);
        goto -> bb387;
    }

    bb386 (cleanup): {
        drop(_24) -> [return: bb350, unwind terminate(cleanup)];
    }

    bb387 (cleanup): {
        switchInt(_637) -> [0: bb350, otherwise: bb386];
    }

    bb388 (cleanup): {
        _794 = discriminant(_25);
        goto -> bb349;
    }

    bb389 (cleanup): {
        _795 = discriminant(_17);
        goto -> bb350;
    }

    bb390 (cleanup): {
        _796 = discriminant(_7);
        goto -> bb350;
    }

    bb391: {
        _444 = (((*_807).5: solend_sdk::state::ReserveConfig).17: u64);
        StorageLive(_445);
        _445 = ((*_317).0: &solana_program::pubkey::Pubkey);
        _443 = (move _444, move _445);
        StorageDead(_445);
        StorageDead(_444);
        StorageLive(_446);
        _447 = discriminant(_300);
        switchInt(move _447) -> [0: bb214, 1: bb213, otherwise: bb5];
    }

    bb392: {
        _437 = (((*_806).3: solend_sdk::state::ReserveLiquidity).7: solend_sdk::math::Decimal);
        _435 = ObligationLiquidity::accrue_interest(move _436, move _437) -> [return: bb208, unwind: bb340];
    }

    bb393: {
        _230 = (((*_803).5: solend_sdk::state::ReserveConfig).6: u8);
        _229 = Rate::from_percent(move _230) -> [return: bb112, unwind: bb345];
    }

    bb394: {
        _228 = (((*_802).5: solend_sdk::state::ReserveConfig).5: u8);
        _227 = Rate::from_percent(move _228) -> [return: bb111, unwind: bb345];
    }

    bb395: {
        _226 = (((*_801).5: solend_sdk::state::ReserveConfig).2: u8);
        _225 = Rate::from_percent(move _226) -> [return: bb110, unwind: bb345];
    }
}
