// MIR for `process_init_lending_market` after PreCodegen

fn process_init_lending_market(_1: &Pubkey, _2: Pubkey, _3: [u8; 32], _4: &[AccountInfo<'_>]) -> Result<(), ProgramError> {
    debug program_id => _1;
    debug owner => _2;
    debug quote_currency => _3;
    debug accounts => _4;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _5: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _6: std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _7: &[solana_program::account_info::AccountInfo<'_>];
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _10: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _11: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _12: isize;
    let mut _14: !;
    let mut _15: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _18: solana_program::rent::Rent;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solana_program::rent::Rent>;
    let mut _20: std::result::Result<solana_program::rent::Rent, solana_program::program_error::ProgramError>;
    let mut _21: &solana_program::account_info::AccountInfo<'_>;
    let _22: &solana_program::account_info::AccountInfo<'_>;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _24: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _25: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _26: isize;
    let mut _28: !;
    let mut _29: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _38: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _39: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _40: isize;
    let mut _42: !;
    let mut _43: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _46: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _47: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _48: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _49: isize;
    let mut _51: !;
    let mut _52: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _55: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _56: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _57: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _58: isize;
    let mut _60: !;
    let mut _61: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _63: ();
    let mut _64: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _65: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _66: &solana_program::rent::Rent;
    let mut _67: &solana_program::account_info::AccountInfo<'_>;
    let mut _68: isize;
    let mut _70: !;
    let mut _71: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _74: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::state::LendingMarket>;
    let mut _75: std::result::Result<solend_sdk::state::LendingMarket, solana_program::program_error::ProgramError>;
    let mut _76: &solana_program::account_info::AccountInfo<'_>;
    let mut _77: isize;
    let mut _79: !;
    let mut _80: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _82: ();
    let mut _83: bool;
    let mut _84: &&solana_program::pubkey::Pubkey;
    let mut _85: &&solana_program::pubkey::Pubkey;
    let mut _86: !;
    let _87: ();
    let mut _88: &str;
    let _89: &str;
    let mut _90: solana_program::program_error::ProgramError;
    let mut _91: solend_sdk::error::LendingError;
    let _92: ();
    let mut _93: &mut solend_sdk::state::LendingMarket;
    let mut _94: solend_sdk::state::InitLendingMarketParams;
    let mut _95: u8;
    let mut _96: (solana_program::pubkey::Pubkey, u8);
    let mut _97: &[&[u8]];
    let mut _98: &[&[u8]; 1];
    let _99: &[&[u8]; 1];
    let _100: [&[u8]; 1];
    let mut _101: &[u8];
    let _102: &[u8];
    let mut _103: &solana_program::pubkey::Pubkey;
    let mut _104: &solana_program::pubkey::Pubkey;
    let mut _105: solana_program::pubkey::Pubkey;
    let mut _106: [u8; 32];
    let mut _107: solana_program::pubkey::Pubkey;
    let mut _108: solana_program::pubkey::Pubkey;
    let mut _109: solana_program::pubkey::Pubkey;
    let _110: ();
    let mut _111: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _112: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _113: solend_sdk::state::LendingMarket;
    let mut _114: &mut [u8];
    let mut _115: &mut &mut [u8];
    let mut _116: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _117: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _118: std::cell::RefMut<'_, &mut [u8]>;
    let mut _119: &std::cell::RefCell<&mut [u8]>;
    let _120: &std::cell::RefCell<&mut [u8]>;
    let mut _121: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _122: isize;
    let mut _124: !;
    let mut _125: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _127: ();
    let mut _128: &solana_program::pubkey::Pubkey;
    let mut _129: &solana_program::pubkey::Pubkey;
    let mut _130: &solana_program::pubkey::Pubkey;
    let mut _131: &solana_program::pubkey::Pubkey;
    let mut _132: &mut [u8];
    let mut _133: bool;
    let mut _134: isize;
    let mut _135: isize;
    let mut _136: isize;
    let mut _137: isize;
    let mut _138: isize;
    let mut _139: isize;
    let mut _140: isize;
    let mut _141: isize;
    let mut _142: isize;
    let mut _143: isize;
    let mut _144: isize;
    let mut _145: isize;
    let mut _146: isize;
    let mut _147: isize;
    let mut _148: isize;
    let mut _149: isize;
    let mut _150: isize;
    let mut _151: isize;
    let mut _152: isize;
    let mut _153: isize;
    let mut _154: isize;
    let mut _155: isize;
    let mut _156: isize;
    let mut _157: isize;
    let mut _158: isize;
    let mut _159: isize;
    let mut _160: isize;
    let mut _161: isize;
    let mut _162: isize;
    let mut _163: isize;
    let mut _164: isize;
    let mut _165: isize;
    let mut _166: isize;
    let mut _167: isize;
    let mut _168: isize;
    let mut _169: isize;
    let mut _170: isize;
    let mut _171: isize;
    let mut _172: isize;
    let mut _173: isize;
    let mut _174: isize;
    let mut _175: isize;
    let mut _176: isize;
    let mut _177: isize;
    let mut _178: isize;
    scope 1 {
        debug account_info_iter => _5;
        let _8: &solana_program::account_info::AccountInfo<'_>;
        let _13: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _16: &solana_program::account_info::AccountInfo<'_>;
        scope 2 {
            debug lending_market_info => _8;
            let _17: &solana_program::rent::Rent;
            let _27: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
            let _30: &solana_program::account_info::AccountInfo<'_>;
            let _32: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
            let _35: solana_program::rent::Rent;
            scope 7 {
                debug rent => _17;
                let _36: &solana_program::account_info::AccountInfo<'_>;
                let _41: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                let _44: &solana_program::account_info::AccountInfo<'_>;
                scope 16 {
                    debug token_program_id => _36;
                    let _45: &solana_program::account_info::AccountInfo<'_>;
                    let _50: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                    let _53: &solana_program::account_info::AccountInfo<'_>;
                    scope 21 {
                        debug oracle_program_id => _45;
                        let _54: &solana_program::account_info::AccountInfo<'_>;
                        let _59: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                        let _62: &solana_program::account_info::AccountInfo<'_>;
                        scope 26 {
                            debug switchboard_oracle_program_id => _54;
                            let _69: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                            let _72: ();
                            let mut _73: solend_sdk::state::LendingMarket;
                            let _78: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                            let _81: solend_sdk::state::LendingMarket;
                            scope 31 {
                                debug residual => _69;
                                scope 32 {
                                }
                            }
                            scope 33 {
                                debug val => _72;
                                scope 34 {
                                }
                            }
                            scope 35 {
                                debug lending_market => _73;
                                let _123: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                let _126: ();
                                scope 40 {
                                    debug residual => _123;
                                    scope 41 {
                                    }
                                }
                                scope 42 {
                                    debug val => _126;
                                    scope 43 {
                                    }
                                }
                            }
                            scope 36 {
                                debug residual => _78;
                                scope 37 {
                                }
                            }
                            scope 38 {
                                debug val => _81;
                                scope 39 {
                                }
                            }
                        }
                        scope 27 {
                            debug residual => _59;
                            scope 28 {
                            }
                        }
                        scope 29 {
                            debug val => _62;
                            scope 30 {
                            }
                        }
                    }
                    scope 22 {
                        debug residual => _50;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug val => _53;
                        scope 25 {
                        }
                    }
                }
                scope 17 {
                    debug residual => _41;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _44;
                    scope 20 {
                    }
                }
            }
            scope 8 {
                debug residual => _27;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _30;
                scope 11 {
                }
            }
            scope 12 {
                debug residual => _32;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _35;
                scope 15 {
                }
            }
        }
        scope 3 {
            debug residual => _13;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _16;
            scope 6 {
            }
        }
    }

    bb0: {
        _133 = const false;
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &(*_4);
        _6 = bytemuck::core::slice::<impl [AccountInfo<'_>]>::iter(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = &mut _6;
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &mut (*_5);
        _10 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _11) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_11);
        _9 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _10) -> [return: bb3, unwind: bb70];
    }

    bb3: {
        StorageDead(_10);
        _12 = discriminant(_9);
        switchInt(move _12) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_16);
        _16 = ((_9 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _8 = _16;
        StorageDead(_16);
        _134 = discriminant(_9);
        StorageDead(_9);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &mut (*_5);
        _24 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _25) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_13);
        _13 = move ((_9 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_15);
        _15 = move _13;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _15) -> [return: bb7, unwind: bb79];
    }

    bb7: {
        StorageDead(_15);
        StorageDead(_13);
        _168 = discriminant(_9);
        StorageDead(_9);
        goto -> bb67;
    }

    bb8: {
        StorageDead(_25);
        _23 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _24) -> [return: bb9, unwind: bb70];
    }

    bb9: {
        _133 = const true;
        StorageDead(_24);
        _26 = discriminant(_23);
        switchInt(move _26) -> [0: bb10, 1: bb11, otherwise: bb5];
    }

    bb10: {
        StorageLive(_30);
        _30 = ((_23 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _22 = &(*_30);
        StorageDead(_30);
        _21 = &(*_22);
        _20 = <Rent as Sysvar>::from_account_info(move _21) -> [return: bb13, unwind: bb78];
    }

    bb11: {
        StorageLive(_27);
        _27 = move ((_23 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_29);
        _29 = move _27;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _29) -> [return: bb12, unwind: bb78];
    }

    bb12: {
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_21);
        StorageDead(_20);
        goto -> bb65;
    }

    bb13: {
        StorageDead(_21);
        _19 = <Result<Rent, ProgramError> as Try>::branch(move _20) -> [return: bb14, unwind: bb78];
    }

    bb14: {
        StorageDead(_20);
        _31 = discriminant(_19);
        switchInt(move _31) -> [0: bb15, 1: bb16, otherwise: bb5];
    }

    bb15: {
        StorageLive(_35);
        _35 = ((_19 as Continue).0: solana_program::rent::Rent);
        _18 = _35;
        StorageDead(_35);
        _17 = &_18;
        _136 = discriminant(_19);
        _138 = discriminant(_23);
        _133 = const false;
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_19);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &mut (*_5);
        _38 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _39) -> [return: bb18, unwind continue];
    }

    bb16: {
        StorageLive(_32);
        _32 = move ((_19 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_34);
        _34 = move _32;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _34) -> [return: bb17, unwind: bb77];
    }

    bb17: {
        StorageDead(_34);
        StorageDead(_32);
        _164 = discriminant(_19);
        goto -> bb65;
    }

    bb18: {
        StorageDead(_39);
        _37 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _38) -> [return: bb19, unwind: bb70];
    }

    bb19: {
        StorageDead(_38);
        _40 = discriminant(_37);
        switchInt(move _40) -> [0: bb20, 1: bb21, otherwise: bb5];
    }

    bb20: {
        StorageLive(_44);
        _44 = ((_37 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _36 = _44;
        StorageDead(_44);
        _140 = discriminant(_37);
        StorageDead(_37);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = &mut (*_5);
        _47 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _48) -> [return: bb23, unwind continue];
    }

    bb21: {
        StorageLive(_41);
        _41 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_43);
        _43 = move _41;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _43) -> [return: bb22, unwind: bb76];
    }

    bb22: {
        StorageDead(_43);
        StorageDead(_41);
        _162 = discriminant(_37);
        StorageDead(_37);
        goto -> bb64;
    }

    bb23: {
        StorageDead(_48);
        _46 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _47) -> [return: bb24, unwind: bb70];
    }

    bb24: {
        StorageDead(_47);
        _49 = discriminant(_46);
        switchInt(move _49) -> [0: bb25, 1: bb26, otherwise: bb5];
    }

    bb25: {
        StorageLive(_53);
        _53 = ((_46 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _45 = _53;
        StorageDead(_53);
        _142 = discriminant(_46);
        StorageDead(_46);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = &mut (*_5);
        _56 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _57) -> [return: bb28, unwind continue];
    }

    bb26: {
        StorageLive(_50);
        _50 = move ((_46 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_52);
        _52 = move _50;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _52) -> [return: bb27, unwind: bb75];
    }

    bb27: {
        StorageDead(_52);
        StorageDead(_50);
        _160 = discriminant(_46);
        StorageDead(_46);
        goto -> bb63;
    }

    bb28: {
        StorageDead(_57);
        _55 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _56) -> [return: bb29, unwind: bb70];
    }

    bb29: {
        StorageDead(_56);
        _58 = discriminant(_55);
        switchInt(move _58) -> [0: bb30, 1: bb31, otherwise: bb5];
    }

    bb30: {
        StorageLive(_62);
        _62 = ((_55 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _54 = _62;
        StorageDead(_62);
        _144 = discriminant(_55);
        StorageDead(_55);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _66 = &(*_17);
        StorageLive(_67);
        _67 = &(*_8);
        _65 = assert_rent_exempt(move _66, move _67) -> [return: bb33, unwind continue];
    }

    bb31: {
        StorageLive(_59);
        _59 = move ((_55 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_61);
        _61 = move _59;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _61) -> [return: bb32, unwind: bb74];
    }

    bb32: {
        StorageDead(_61);
        StorageDead(_59);
        _158 = discriminant(_55);
        StorageDead(_55);
        goto -> bb62;
    }

    bb33: {
        StorageDead(_67);
        StorageDead(_66);
        _64 = <Result<(), ProgramError> as Try>::branch(move _65) -> [return: bb34, unwind: bb70];
    }

    bb34: {
        StorageDead(_65);
        _68 = discriminant(_64);
        switchInt(move _68) -> [0: bb35, 1: bb36, otherwise: bb5];
    }

    bb35: {
        StorageLive(_72);
        _72 = ((_64 as Continue).0: ());
        _63 = _72;
        StorageDead(_72);
        _146 = discriminant(_64);
        StorageDead(_64);
        StorageDead(_63);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _76 = &(*_8);
        _75 = assert_uninitialized::<LendingMarket>(move _76) -> [return: bb38, unwind continue];
    }

    bb36: {
        StorageLive(_69);
        _69 = move ((_64 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_71);
        _71 = move _69;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _71) -> [return: bb37, unwind: bb73];
    }

    bb37: {
        StorageDead(_71);
        StorageDead(_69);
        _156 = discriminant(_64);
        StorageDead(_64);
        StorageDead(_63);
        goto -> bb62;
    }

    bb38: {
        StorageDead(_76);
        _74 = <Result<LendingMarket, ProgramError> as Try>::branch(move _75) -> [return: bb39, unwind: bb70];
    }

    bb39: {
        StorageDead(_75);
        _77 = discriminant(_74);
        switchInt(move _77) -> [0: bb40, 1: bb41, otherwise: bb5];
    }

    bb40: {
        StorageLive(_81);
        _81 = move ((_74 as Continue).0: solend_sdk::state::LendingMarket);
        _73 = move _81;
        StorageDead(_81);
        _148 = discriminant(_74);
        StorageDead(_74);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = &((*_8).3: &solana_program::pubkey::Pubkey);
        StorageLive(_85);
        _85 = &_1;
        _83 = <&Pubkey as PartialEq>::ne(move _84, move _85) -> [return: bb43, unwind continue];
    }

    bb41: {
        StorageLive(_78);
        _78 = move ((_74 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_80);
        _80 = move _78;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _80) -> [return: bb42, unwind: bb72];
    }

    bb42: {
        StorageDead(_80);
        StorageDead(_78);
        _154 = discriminant(_74);
        StorageDead(_74);
        goto -> bb61;
    }

    bb43: {
        switchInt(move _83) -> [0: bb47, otherwise: bb44];
    }

    bb44: {
        StorageDead(_85);
        StorageDead(_84);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = const "Lending market provided is not owned by the lending program";
        _88 = &(*_89);
        _87 = solana_program::log::sol_log(move _88) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_88);
        StorageDead(_89);
        StorageDead(_87);
        StorageLive(_90);
        StorageLive(_91);
        _91 = solend_sdk::error::LendingError::InvalidAccountOwner;
        _90 = <LendingError as Into<ProgramError>>::into(move _91) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_91);
        _0 = Result::<(), ProgramError>::Err(move _90);
        StorageDead(_90);
        StorageDead(_83);
        StorageDead(_82);
        goto -> bb61;
    }

    bb47: {
        StorageDead(_85);
        StorageDead(_84);
        _82 = const ();
        StorageDead(_83);
        StorageDead(_82);
        StorageLive(_92);
        StorageLive(_93);
        _93 = &mut _73;
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        _128 = deref_copy ((*_8).0: &solana_program::pubkey::Pubkey);
        _103 = &(*_128);
        _102 = <Pubkey as AsRef<[u8]>>::as_ref(move _103) -> [return: bb48, unwind continue];
    }

    bb48: {
        _101 = &(*_102);
        StorageDead(_103);
        _100 = [move _101];
        StorageDead(_101);
        _99 = &_100;
        _98 = &(*_99);
        _97 = move _98 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_98);
        StorageLive(_104);
        _104 = &(*_1);
        _96 = Pubkey::find_program_address(move _97, move _104) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_104);
        StorageDead(_97);
        _95 = (_96.1: u8);
        StorageLive(_105);
        _105 = _2;
        StorageLive(_106);
        _106 = _3;
        StorageLive(_107);
        _129 = deref_copy ((*_36).0: &solana_program::pubkey::Pubkey);
        _107 = (*_129);
        StorageLive(_108);
        _130 = deref_copy ((*_45).0: &solana_program::pubkey::Pubkey);
        _108 = (*_130);
        StorageLive(_109);
        _131 = deref_copy ((*_54).0: &solana_program::pubkey::Pubkey);
        _109 = (*_131);
        _94 = InitLendingMarketParams { bump_seed: move _95, owner: move _105, quote_currency: move _106, token_program_id: move _107, oracle_program_id: move _108, switchboard_oracle_program_id: move _109 };
        StorageDead(_109);
        StorageDead(_108);
        StorageDead(_107);
        StorageDead(_106);
        StorageDead(_105);
        StorageDead(_95);
        _92 = LendingMarket::init(move _93, move _94) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_94);
        StorageDead(_93);
        StorageDead(_102);
        StorageDead(_100);
        StorageDead(_99);
        StorageDead(_96);
        StorageDead(_92);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        _113 = move _73;
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        _121 = &((*_8).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _120 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _121) -> [return: bb51, unwind continue];
    }

    bb51: {
        _119 = &(*_120);
        StorageDead(_121);
        _118 = RefCell::<&mut [u8]>::borrow_mut(move _119) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_119);
        _117 = &mut _118;
        _116 = &mut (*_117);
        _115 = <RefMut<'_, &mut [u8]> as DerefMut>::deref_mut(move _116) -> [return: bb53, unwind: bb69];
    }

    bb53: {
        _132 = deref_copy (*_115);
        _114 = &mut (*_132);
        StorageDead(_116);
        _112 = <LendingMarket as Pack>::pack(move _113, move _114) -> [return: bb54, unwind: bb69];
    }

    bb54: {
        StorageDead(_114);
        StorageDead(_113);
        _111 = <Result<(), ProgramError> as Try>::branch(move _112) -> [return: bb55, unwind: bb69];
    }

    bb55: {
        StorageDead(_112);
        _122 = discriminant(_111);
        switchInt(move _122) -> [0: bb56, 1: bb57, otherwise: bb5];
    }

    bb56: {
        StorageLive(_126);
        _126 = ((_111 as Continue).0: ());
        _110 = _126;
        StorageDead(_126);
        _150 = discriminant(_111);
        drop(_118) -> [return: bb59, unwind: bb70];
    }

    bb57: {
        StorageLive(_123);
        _123 = move ((_111 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_125);
        _125 = move _123;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _125) -> [return: bb58, unwind: bb71];
    }

    bb58: {
        StorageDead(_125);
        StorageDead(_123);
        _152 = discriminant(_111);
        drop(_118) -> [return: bb60, unwind: bb70];
    }

    bb59: {
        StorageDead(_120);
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_115);
        StorageDead(_111);
        StorageDead(_110);
        StorageLive(_127);
        _127 = ();
        _0 = Result::<(), ProgramError>::Ok(move _127);
        StorageDead(_127);
        StorageDead(_73);
        StorageDead(_54);
        StorageDead(_45);
        StorageDead(_36);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_8);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb68;
    }

    bb60: {
        StorageDead(_120);
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_115);
        StorageDead(_111);
        StorageDead(_110);
        goto -> bb61;
    }

    bb61: {
        StorageDead(_73);
        goto -> bb62;
    }

    bb62: {
        StorageDead(_54);
        goto -> bb63;
    }

    bb63: {
        StorageDead(_45);
        goto -> bb64;
    }

    bb64: {
        StorageDead(_36);
        goto -> bb66;
    }

    bb65: {
        _166 = discriminant(_23);
        _133 = const false;
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_19);
        goto -> bb66;
    }

    bb66: {
        StorageDead(_18);
        StorageDead(_17);
        goto -> bb67;
    }

    bb67: {
        StorageDead(_8);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb68;
    }

    bb68: {
        return;
    }

    bb69 (cleanup): {
        drop(_118) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        resume;
    }

    bb71 (cleanup): {
        _170 = discriminant(_111);
        goto -> bb69;
    }

    bb72 (cleanup): {
        _171 = discriminant(_74);
        goto -> bb70;
    }

    bb73 (cleanup): {
        _172 = discriminant(_64);
        goto -> bb70;
    }

    bb74 (cleanup): {
        _173 = discriminant(_55);
        goto -> bb70;
    }

    bb75 (cleanup): {
        _174 = discriminant(_46);
        goto -> bb70;
    }

    bb76 (cleanup): {
        _175 = discriminant(_37);
        goto -> bb70;
    }

    bb77 (cleanup): {
        _176 = discriminant(_19);
        goto -> bb78;
    }

    bb78 (cleanup): {
        _177 = discriminant(_23);
        goto -> bb70;
    }

    bb79 (cleanup): {
        _178 = discriminant(_9);
        goto -> bb70;
    }
}
