// MIR for `validate_extra_oracle` before PreCodegen

fn validate_extra_oracle(_1: Pubkey, _2: &AccountInfo<'_>) -> Result<(), ProgramError> {
    debug extra_oracle_pubkey => _1;
    debug extra_oracle_info => _2;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _3: ();
    let mut _4: bool;
    let mut _5: &solana_program::pubkey::Pubkey;
    let mut _6: &solana_program::pubkey::Pubkey;
    let _7: solana_program::pubkey::Pubkey;
    let mut _8: !;
    let _9: ();
    let mut _10: &str;
    let _11: &str;
    let mut _12: solana_program::program_error::ProgramError;
    let mut _13: solend_sdk::error::LendingError;
    let _14: ();
    let mut _15: bool;
    let mut _16: &&solana_program::pubkey::Pubkey;
    let mut _17: &&solana_program::pubkey::Pubkey;
    let _18: &solana_program::pubkey::Pubkey;
    let mut _19: !;
    let _20: ();
    let mut _21: &str;
    let _22: &str;
    let mut _23: solana_program::program_error::ProgramError;
    let mut _24: solend_sdk::error::LendingError;
    let _25: ();
    let mut _26: oracles::OracleType;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, oracles::OracleType>;
    let mut _28: std::result::Result<oracles::OracleType, solana_program::program_error::ProgramError>;
    let mut _29: &solana_program::account_info::AccountInfo<'_>;
    let mut _30: isize;
    let _31: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _34: oracles::OracleType;
    let mut _35: isize;
    let _36: ();
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _38: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _39: &solana_program::account_info::AccountInfo<'_>;
    let mut _40: isize;
    let _41: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _42: !;
    let mut _43: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _44: ();
    let _45: ();
    let mut _46: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _47: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _48: &solana_program::account_info::AccountInfo<'_>;
    let mut _49: isize;
    let _50: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _51: !;
    let mut _52: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _53: ();
    let _54: ();
    let mut _55: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _56: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _57: &solana_program::account_info::AccountInfo<'_>;
    let mut _58: isize;
    let _59: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _60: !;
    let mut _61: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _62: ();
    let _63: ();
    let mut _64: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _65: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _66: &solana_program::account_info::AccountInfo<'_>;
    let mut _67: isize;
    let _68: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _69: !;
    let mut _70: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _71: ();
    let mut _72: ();
    let mut _73: &solana_program::pubkey::Pubkey;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: isize;
    let mut _77: isize;
    let mut _78: isize;
    let mut _79: isize;
    let mut _80: isize;
    let mut _81: isize;
    let mut _82: isize;
    let mut _83: isize;
    let mut _84: isize;
    let mut _85: isize;
    let mut _86: isize;
    let mut _87: isize;
    let mut _88: isize;
    let mut _89: isize;
    let mut _90: isize;
    let mut _91: isize;
    let mut _92: isize;
    let mut _93: isize;
    let mut _94: isize;
    let mut _95: isize;
    let mut _96: isize;
    let mut _97: isize;
    let mut _98: isize;
    let mut _99: isize;
    let mut _100: isize;
    scope 1 {
        debug residual => _31;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _34;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _41;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _44;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _50;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _53;
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _59;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _62;
        scope 16 {
        }
    }
    scope 17 {
        debug residual => _68;
        scope 18 {
        }
    }
    scope 19 {
        debug val => _71;
        scope 20 {
        }
    }

    bb0: {
        _75 = const false;
        _74 = const false;
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &_1;
        StorageLive(_6);
        _73 = const _;
        _6 = &(*_73);
        _4 = <Pubkey as PartialEq>::eq(move _5, move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _4) -> [0: bb5, otherwise: bb2];
    }

    bb2: {
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = const "Extra oracle cannot equal the null pubkey";
        _10 = &(*_11);
        _9 = solana_program::log::sol_log(move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_10);
        StorageDead(_11);
        StorageDead(_9);
        StorageLive(_12);
        StorageLive(_13);
        _13 = InvalidOracleConfig;
        _12 = <LendingError as Into<ProgramError>>::into(move _13) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_13);
        _0 = Result::<(), ProgramError>::Err(move _12);
        StorageDead(_12);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb41;
    }

    bb5: {
        StorageDead(_6);
        StorageDead(_5);
        _3 = const ();
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &((*_2).0: &solana_program::pubkey::Pubkey);
        StorageLive(_17);
        StorageLive(_18);
        _18 = &_1;
        _17 = &_18;
        _15 = <&Pubkey as PartialEq>::ne(move _16, move _17) -> [return: bb6, unwind continue];
    }

    bb6: {
        switchInt(move _15) -> [0: bb10, otherwise: bb7];
    }

    bb7: {
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = const "Extra oracle provided does not match the extra oracle pubkey in the config";
        _21 = &(*_22);
        _20 = solana_program::log::sol_log(move _21) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_21);
        StorageDead(_22);
        StorageDead(_20);
        StorageLive(_23);
        StorageLive(_24);
        _24 = InvalidOracleConfig;
        _23 = <LendingError as Into<ProgramError>>::into(move _24) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_24);
        _0 = Result::<(), ProgramError>::Err(move _23);
        StorageDead(_23);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb41;
    }

    bb10: {
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        _14 = const ();
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = &(*_2);
        _28 = get_oracle_type(move _29) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_29);
        _27 = <Result<OracleType, ProgramError> as Try>::branch(move _28) -> [return: bb12, unwind: bb42];
    }

    bb12: {
        _74 = const true;
        _75 = const true;
        StorageDead(_28);
        _30 = discriminant(_27);
        switchInt(move _30) -> [0: bb13, 1: bb15, otherwise: bb14];
    }

    bb13: {
        StorageLive(_34);
        _34 = move ((_27 as Continue).0: oracles::OracleType);
        _26 = move _34;
        StorageDead(_34);
        _35 = discriminant(_26);
        switchInt(move _35) -> [0: bb18, 1: bb30, 2: bb24, 3: bb17, otherwise: bb14];
    }

    bb14: {
        unreachable;
    }

    bb15: {
        StorageLive(_31);
        _31 = move ((_27 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_33);
        _33 = move _31;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _33) -> [return: bb16, unwind: bb49];
    }

    bb16: {
        StorageDead(_33);
        StorageDead(_31);
        goto -> bb44;
    }

    bb17: {
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _66 = &(*_2);
        _65 = validate_sb_on_demand_keys(move _66) -> [return: bb36, unwind: bb49];
    }

    bb18: {
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &(*_2);
        _38 = validate_pyth_price_account_info(move _39) -> [return: bb19, unwind: bb49];
    }

    bb19: {
        StorageDead(_39);
        _37 = <Result<(), ProgramError> as Try>::branch(move _38) -> [return: bb20, unwind: bb49];
    }

    bb20: {
        StorageDead(_38);
        _40 = discriminant(_37);
        switchInt(move _40) -> [0: bb21, 1: bb22, otherwise: bb14];
    }

    bb21: {
        StorageLive(_44);
        _44 = ((_37 as Continue).0: ());
        _36 = _44;
        StorageDead(_44);
        _76 = discriminant(_37);
        StorageDead(_37);
        StorageDead(_36);
        _25 = const ();
        goto -> bb43;
    }

    bb22: {
        StorageLive(_41);
        _41 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_43);
        _43 = move _41;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _43) -> [return: bb23, unwind: bb48];
    }

    bb23: {
        StorageDead(_43);
        StorageDead(_41);
        _92 = discriminant(_37);
        StorageDead(_37);
        StorageDead(_36);
        goto -> bb44;
    }

    bb24: {
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = &(*_2);
        _47 = validate_pyth_price_account_info(move _48) -> [return: bb25, unwind: bb49];
    }

    bb25: {
        StorageDead(_48);
        _46 = <Result<(), ProgramError> as Try>::branch(move _47) -> [return: bb26, unwind: bb49];
    }

    bb26: {
        StorageDead(_47);
        _49 = discriminant(_46);
        switchInt(move _49) -> [0: bb27, 1: bb28, otherwise: bb14];
    }

    bb27: {
        StorageLive(_53);
        _53 = ((_46 as Continue).0: ());
        _45 = _53;
        StorageDead(_53);
        _78 = discriminant(_46);
        StorageDead(_46);
        StorageDead(_45);
        _25 = const ();
        goto -> bb43;
    }

    bb28: {
        StorageLive(_50);
        _50 = move ((_46 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_52);
        _52 = move _50;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _52) -> [return: bb29, unwind: bb47];
    }

    bb29: {
        StorageDead(_52);
        StorageDead(_50);
        _90 = discriminant(_46);
        StorageDead(_46);
        StorageDead(_45);
        goto -> bb44;
    }

    bb30: {
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = &(*_2);
        _56 = validate_switchboard_keys(move _57) -> [return: bb31, unwind: bb49];
    }

    bb31: {
        StorageDead(_57);
        _55 = <Result<(), ProgramError> as Try>::branch(move _56) -> [return: bb32, unwind: bb49];
    }

    bb32: {
        StorageDead(_56);
        _58 = discriminant(_55);
        switchInt(move _58) -> [0: bb33, 1: bb34, otherwise: bb14];
    }

    bb33: {
        StorageLive(_62);
        _62 = ((_55 as Continue).0: ());
        _54 = _62;
        StorageDead(_62);
        _80 = discriminant(_55);
        StorageDead(_55);
        StorageDead(_54);
        _25 = const ();
        goto -> bb43;
    }

    bb34: {
        StorageLive(_59);
        _59 = move ((_55 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_61);
        _61 = move _59;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _61) -> [return: bb35, unwind: bb46];
    }

    bb35: {
        StorageDead(_61);
        StorageDead(_59);
        _88 = discriminant(_55);
        StorageDead(_55);
        StorageDead(_54);
        goto -> bb44;
    }

    bb36: {
        StorageDead(_66);
        _64 = <Result<(), ProgramError> as Try>::branch(move _65) -> [return: bb37, unwind: bb49];
    }

    bb37: {
        StorageDead(_65);
        _67 = discriminant(_64);
        switchInt(move _67) -> [0: bb38, 1: bb39, otherwise: bb14];
    }

    bb38: {
        StorageLive(_71);
        _71 = ((_64 as Continue).0: ());
        _63 = _71;
        StorageDead(_71);
        _82 = discriminant(_64);
        StorageDead(_64);
        StorageDead(_63);
        _25 = const ();
        goto -> bb43;
    }

    bb39: {
        StorageLive(_68);
        _68 = move ((_64 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_70);
        _70 = move _68;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _70) -> [return: bb40, unwind: bb45];
    }

    bb40: {
        StorageDead(_70);
        StorageDead(_68);
        _86 = discriminant(_64);
        StorageDead(_64);
        StorageDead(_63);
        goto -> bb44;
    }

    bb41: {
        return;
    }

    bb42 (cleanup): {
        resume;
    }

    bb43: {
        _84 = discriminant(_27);
        _74 = const false;
        _75 = const false;
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_72);
        _72 = ();
        _0 = Result::<(), ProgramError>::Ok(move _72);
        StorageDead(_72);
        goto -> bb41;
    }

    bb44: {
        _94 = discriminant(_27);
        _74 = const false;
        _75 = const false;
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb41;
    }

    bb45 (cleanup): {
        _96 = discriminant(_64);
        goto -> bb49;
    }

    bb46 (cleanup): {
        _97 = discriminant(_55);
        goto -> bb49;
    }

    bb47 (cleanup): {
        _98 = discriminant(_46);
        goto -> bb49;
    }

    bb48 (cleanup): {
        _99 = discriminant(_37);
        goto -> bb49;
    }

    bb49 (cleanup): {
        _100 = discriminant(_27);
        goto -> bb42;
    }
}
