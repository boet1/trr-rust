// MIR for `process_forgive_debt` before PreCodegen

fn process_forgive_debt(_1: &Pubkey, _2: u64, _3: &[AccountInfo<'_>]) -> Result<(), ProgramError> {
    debug program_id => _1;
    debug liquidity_amount => _2;
    debug accounts => _3;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _4: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _5: std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _6: &[solana_program::account_info::AccountInfo<'_>];
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _9: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _10: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _11: isize;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _18: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _19: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _20: isize;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _27: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _28: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _29: isize;
    let mut _31: !;
    let mut _32: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _36: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _37: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _38: isize;
    let mut _40: !;
    let mut _41: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _44: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::state::LendingMarket>;
    let mut _45: std::result::Result<solend_sdk::state::LendingMarket, solana_program::program_error::ProgramError>;
    let mut _46: &[u8];
    let _47: &&mut [u8];
    let mut _48: &std::cell::Ref<'_, &mut [u8]>;
    let _49: &std::cell::Ref<'_, &mut [u8]>;
    let _50: std::cell::Ref<'_, &mut [u8]>;
    let mut _51: &std::cell::RefCell<&mut [u8]>;
    let _52: &std::cell::RefCell<&mut [u8]>;
    let mut _53: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _54: isize;
    let mut _56: !;
    let mut _57: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _59: ();
    let mut _60: bool;
    let mut _61: &&solana_program::pubkey::Pubkey;
    let mut _62: &&solana_program::pubkey::Pubkey;
    let mut _63: !;
    let _64: ();
    let mut _65: &str;
    let _66: &str;
    let mut _67: &std::string::String;
    let _68: &std::string::String;
    let _69: std::string::String;
    let mut _71: std::fmt::Arguments<'_>;
    let mut _72: &[&str];
    let mut _73: &[&str; 2];
    let _74: &[&str; 2];
    let _75: [&str; 2];
    let mut _76: &[bytemuck::core::fmt::rt::Argument<'_>];
    let mut _77: &[bytemuck::core::fmt::rt::Argument<'_>; 2];
    let _78: &[bytemuck::core::fmt::rt::Argument<'_>; 2];
    let _79: [bytemuck::core::fmt::rt::Argument<'_>; 2];
    let mut _80: bytemuck::core::fmt::rt::Argument<'_>;
    let mut _81: &&std::string::String;
    let _82: &&std::string::String;
    let _83: &std::string::String;
    let _84: std::string::String;
    let mut _85: &solana_program::pubkey::Pubkey;
    let mut _86: bytemuck::core::fmt::rt::Argument<'_>;
    let mut _87: &&std::string::String;
    let _88: &&std::string::String;
    let _89: &std::string::String;
    let _90: std::string::String;
    let mut _91: &solana_program::pubkey::Pubkey;
    let mut _92: solana_program::program_error::ProgramError;
    let mut _93: solend_sdk::error::LendingError;
    let _94: ();
    let mut _95: bool;
    let mut _96: &&solana_program::pubkey::Pubkey;
    let _97: &solana_program::pubkey::Pubkey;
    let mut _98: &&solana_program::pubkey::Pubkey;
    let mut _99: !;
    let _100: ();
    let mut _101: &str;
    let _102: &str;
    let mut _103: solana_program::program_error::ProgramError;
    let mut _104: solend_sdk::error::LendingError;
    let _105: ();
    let mut _106: bool;
    let mut _107: !;
    let _108: ();
    let mut _109: &str;
    let _110: &str;
    let mut _111: solana_program::program_error::ProgramError;
    let mut _112: solend_sdk::error::LendingError;
    let mut _114: solend_sdk::state::Reserve;
    let mut _115: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::state::Reserve>;
    let mut _116: std::result::Result<solend_sdk::state::Reserve, solana_program::program_error::ProgramError>;
    let mut _117: &[u8];
    let _118: &&mut [u8];
    let mut _119: &std::cell::Ref<'_, &mut [u8]>;
    let _120: &std::cell::Ref<'_, &mut [u8]>;
    let _121: std::cell::Ref<'_, &mut [u8]>;
    let mut _122: &std::cell::RefCell<&mut [u8]>;
    let _123: &std::cell::RefCell<&mut [u8]>;
    let mut _124: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _125: isize;
    let mut _127: !;
    let mut _128: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _130: ();
    let mut _131: bool;
    let mut _132: &&solana_program::pubkey::Pubkey;
    let mut _133: &&solana_program::pubkey::Pubkey;
    let mut _134: !;
    let _135: ();
    let mut _136: &str;
    let _137: &str;
    let mut _138: solana_program::program_error::ProgramError;
    let mut _139: solend_sdk::error::LendingError;
    let _140: ();
    let mut _141: bool;
    let mut _142: &&solana_program::pubkey::Pubkey;
    let _143: &solana_program::pubkey::Pubkey;
    let mut _144: &&solana_program::pubkey::Pubkey;
    let mut _145: !;
    let _146: ();
    let mut _147: &str;
    let _148: &str;
    let mut _149: solana_program::program_error::ProgramError;
    let mut _150: solend_sdk::error::LendingError;
    let _151: ();
    let mut _152: bool;
    let mut _153: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, bool>;
    let mut _154: std::result::Result<bool, solana_program::program_error::ProgramError>;
    let mut _155: &solend_sdk::state::LastUpdate;
    let mut _156: u64;
    let mut _157: solana_program::clock::Clock;
    let mut _158: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solana_program::clock::Clock>;
    let mut _159: std::result::Result<solana_program::clock::Clock, solana_program::program_error::ProgramError>;
    let mut _160: isize;
    let mut _162: !;
    let mut _163: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _165: isize;
    let mut _167: !;
    let mut _168: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _170: !;
    let _171: ();
    let mut _172: &str;
    let _173: &str;
    let mut _174: solana_program::program_error::ProgramError;
    let mut _175: solend_sdk::error::LendingError;
    let mut _177: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::state::Obligation>;
    let mut _178: std::result::Result<solend_sdk::state::Obligation, solana_program::program_error::ProgramError>;
    let mut _179: &[u8];
    let _180: &&mut [u8];
    let mut _181: &std::cell::Ref<'_, &mut [u8]>;
    let _182: &std::cell::Ref<'_, &mut [u8]>;
    let _183: std::cell::Ref<'_, &mut [u8]>;
    let mut _184: &std::cell::RefCell<&mut [u8]>;
    let _185: &std::cell::RefCell<&mut [u8]>;
    let mut _186: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _187: isize;
    let mut _189: !;
    let mut _190: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _192: ();
    let mut _193: bool;
    let mut _194: &&solana_program::pubkey::Pubkey;
    let mut _195: &&solana_program::pubkey::Pubkey;
    let mut _196: !;
    let _197: ();
    let mut _198: &str;
    let _199: &str;
    let mut _200: solana_program::program_error::ProgramError;
    let mut _201: solend_sdk::error::LendingError;
    let _202: ();
    let mut _203: bool;
    let mut _204: &&solana_program::pubkey::Pubkey;
    let _205: &solana_program::pubkey::Pubkey;
    let mut _206: &&solana_program::pubkey::Pubkey;
    let mut _207: !;
    let _208: ();
    let mut _209: &str;
    let _210: &str;
    let mut _211: solana_program::program_error::ProgramError;
    let mut _212: solend_sdk::error::LendingError;
    let _213: ();
    let mut _214: bool;
    let mut _215: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, bool>;
    let mut _216: std::result::Result<bool, solana_program::program_error::ProgramError>;
    let mut _217: &solend_sdk::state::LastUpdate;
    let mut _218: u64;
    let mut _219: solana_program::clock::Clock;
    let mut _220: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solana_program::clock::Clock>;
    let mut _221: std::result::Result<solana_program::clock::Clock, solana_program::program_error::ProgramError>;
    let mut _222: isize;
    let mut _224: !;
    let mut _225: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _227: isize;
    let mut _229: !;
    let mut _230: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _232: !;
    let _233: ();
    let mut _234: &str;
    let _235: &str;
    let mut _236: solana_program::program_error::ProgramError;
    let mut _237: solend_sdk::error::LendingError;
    let _238: ();
    let mut _239: bool;
    let mut _240: &std::vec::Vec<solend_sdk::state::ObligationCollateral>;
    let mut _241: !;
    let _242: ();
    let mut _243: &str;
    let _244: &str;
    let mut _245: solana_program::program_error::ProgramError;
    let mut _246: solend_sdk::error::LendingError;
    let mut _248: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::math::Decimal>;
    let mut _249: std::result::Result<solend_sdk::math::Decimal, solana_program::program_error::ProgramError>;
    let mut _250: solend_sdk::math::Decimal;
    let mut _251: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::math::Decimal>;
    let mut _252: std::result::Result<solend_sdk::math::Decimal, solana_program::program_error::ProgramError>;
    let mut _253: &solend_sdk::state::ReserveLiquidity;
    let mut _254: isize;
    let mut _256: !;
    let mut _257: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _259: solend_sdk::math::Decimal;
    let mut _260: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::math::Decimal>;
    let mut _261: std::result::Result<solend_sdk::math::Decimal, solana_program::program_error::ProgramError>;
    let mut _262: solend_sdk::math::Decimal;
    let mut _263: u64;
    let mut _264: solend_sdk::math::Decimal;
    let mut _265: isize;
    let mut _267: !;
    let mut _268: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _270: isize;
    let mut _272: !;
    let mut _273: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _277: (&solend_sdk::state::ObligationLiquidity, usize);
    let mut _278: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, (&solend_sdk::state::ObligationLiquidity, usize)>;
    let mut _279: std::result::Result<(&solend_sdk::state::ObligationLiquidity, usize), solana_program::program_error::ProgramError>;
    let mut _280: &solend_sdk::state::Obligation;
    let mut _281: solana_program::pubkey::Pubkey;
    let mut _282: isize;
    let mut _284: !;
    let mut _285: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _288: solend_sdk::math::Decimal;
    let mut _289: u64;
    let mut _290: solend_sdk::math::Decimal;
    let mut _291: solend_sdk::math::Decimal;
    let mut _292: solend_sdk::math::Decimal;
    let _293: ();
    let mut _294: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _295: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _296: &mut solend_sdk::state::ReserveLiquidity;
    let mut _297: solend_sdk::math::Decimal;
    let mut _298: isize;
    let mut _300: !;
    let mut _301: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _303: ();
    let mut _304: &mut solend_sdk::state::LastUpdate;
    let _305: ();
    let mut _306: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _307: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _308: solend_sdk::state::Reserve;
    let mut _309: &mut [u8];
    let mut _310: &mut &mut [u8];
    let mut _311: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _312: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _313: std::cell::RefMut<'_, &mut [u8]>;
    let mut _314: &std::cell::RefCell<&mut [u8]>;
    let _315: &std::cell::RefCell<&mut [u8]>;
    let mut _316: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _317: isize;
    let mut _319: !;
    let mut _320: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _322: ();
    let mut _323: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _324: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _325: &mut solend_sdk::state::Obligation;
    let mut _326: solend_sdk::math::Decimal;
    let mut _327: usize;
    let mut _328: isize;
    let mut _330: !;
    let mut _331: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _333: ();
    let mut _334: &mut solend_sdk::state::LastUpdate;
    let _335: ();
    let mut _336: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _337: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _338: solend_sdk::state::Obligation;
    let mut _339: &mut [u8];
    let mut _340: &mut &mut [u8];
    let mut _341: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _342: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _343: std::cell::RefMut<'_, &mut [u8]>;
    let mut _344: &std::cell::RefCell<&mut [u8]>;
    let _345: &std::cell::RefCell<&mut [u8]>;
    let mut _346: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _347: isize;
    let mut _349: !;
    let mut _350: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _352: ();
    let mut _354: &mut [u8];
    let mut _355: &solana_program::pubkey::Pubkey;
    let mut _356: &mut [u8];
    let mut _357: &mut [u8];
    let mut _358: &solana_program::pubkey::Pubkey;
    let mut _359: &mut [u8];
    let mut _360: &mut [u8];
    let mut _361: bool;
    let mut _362: bool;
    let mut _363: bool;
    let mut _364: bool;
    let mut _365: bool;
    let mut _366: bool;
    let mut _367: bool;
    let mut _368: bool;
    let mut _369: bool;
    let mut _370: bool;
    let mut _371: isize;
    let mut _372: isize;
    let mut _373: isize;
    let mut _374: isize;
    let mut _375: isize;
    let mut _376: isize;
    let mut _377: isize;
    let mut _378: isize;
    let mut _379: isize;
    let mut _380: isize;
    let mut _381: isize;
    let mut _382: isize;
    let mut _383: isize;
    let mut _384: isize;
    let mut _385: isize;
    let mut _386: isize;
    let mut _387: isize;
    let mut _388: isize;
    let mut _389: isize;
    let mut _390: isize;
    let mut _391: isize;
    let mut _392: isize;
    let mut _393: isize;
    let mut _394: isize;
    let mut _395: isize;
    let mut _396: isize;
    let mut _397: isize;
    let mut _398: isize;
    let mut _399: isize;
    let mut _400: isize;
    let mut _401: isize;
    let mut _402: isize;
    let mut _403: isize;
    let mut _404: isize;
    let mut _405: isize;
    let mut _406: isize;
    let mut _407: isize;
    let mut _408: isize;
    let mut _409: isize;
    let mut _410: isize;
    let mut _411: isize;
    let mut _412: isize;
    let mut _413: isize;
    let mut _414: isize;
    let mut _415: isize;
    let mut _416: isize;
    let mut _417: isize;
    let mut _418: isize;
    let mut _419: isize;
    let mut _420: isize;
    let mut _421: isize;
    let mut _422: isize;
    let mut _423: isize;
    let mut _424: isize;
    let mut _425: isize;
    let mut _426: isize;
    let mut _427: isize;
    let mut _428: isize;
    let mut _429: isize;
    let mut _430: isize;
    let mut _431: isize;
    let mut _432: isize;
    let mut _433: isize;
    let mut _434: isize;
    let mut _435: isize;
    let mut _436: isize;
    let mut _437: isize;
    let mut _438: isize;
    let mut _439: isize;
    let mut _440: isize;
    let mut _441: isize;
    let mut _442: isize;
    let mut _443: isize;
    let mut _444: isize;
    let mut _445: isize;
    let mut _446: isize;
    let mut _447: isize;
    let mut _448: isize;
    let mut _449: isize;
    let mut _450: isize;
    let mut _451: isize;
    let mut _452: isize;
    let mut _453: isize;
    let mut _454: isize;
    let mut _455: isize;
    let mut _456: isize;
    let mut _457: isize;
    let mut _458: isize;
    let mut _459: isize;
    let mut _460: isize;
    let mut _461: isize;
    let mut _462: isize;
    let mut _463: isize;
    let mut _464: isize;
    let mut _465: isize;
    let mut _466: isize;
    let mut _467: isize;
    let mut _468: isize;
    let mut _469: isize;
    let mut _470: isize;
    let mut _471: isize;
    let mut _472: isize;
    let mut _473: isize;
    let mut _474: *const solend_sdk::state::Reserve;
    let mut _475: *const solend_sdk::state::Reserve;
    let mut _476: *const solend_sdk::state::Reserve;
    let mut _477: *const solend_sdk::state::Reserve;
    let mut _478: *const solend_sdk::state::Reserve;
    let mut _479: *const solend_sdk::state::Reserve;
    let mut _480: *const solend_sdk::state::Reserve;
    scope 1 {
        debug account_info_iter => _4;
        let _7: &solana_program::account_info::AccountInfo<'_>;
        let _12: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _15: &solana_program::account_info::AccountInfo<'_>;
        scope 2 {
            debug obligation_info => _7;
            let _16: &solana_program::account_info::AccountInfo<'_>;
            let _21: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
            let _24: &solana_program::account_info::AccountInfo<'_>;
            scope 7 {
                debug reserve_info => _16;
                let _25: &solana_program::account_info::AccountInfo<'_>;
                let _30: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                let _33: &solana_program::account_info::AccountInfo<'_>;
                scope 12 {
                    debug lending_market_info => _25;
                    let _34: &solana_program::account_info::AccountInfo<'_>;
                    let _39: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                    let _42: &solana_program::account_info::AccountInfo<'_>;
                    scope 17 {
                        debug lending_market_owner_info => _34;
                        let _43: solend_sdk::state::LendingMarket;
                        let _55: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                        let _58: solend_sdk::state::LendingMarket;
                        scope 22 {
                            debug lending_market => _43;
                            let _70: std::string::String;
                            let mut _113: std::boxed::Box<solend_sdk::state::Reserve>;
                            let _126: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                            let _129: solend_sdk::state::Reserve;
                            let mut _353: &[&str; 2];
                            scope 27 {
                                debug res => _70;
                            }
                            scope 28 {
                                debug reserve => _113;
                                let _161: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                let _164: solana_program::clock::Clock;
                                let _166: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                let _169: bool;
                                let mut _176: solend_sdk::state::Obligation;
                                let _188: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                let _191: solend_sdk::state::Obligation;
                                scope 33 {
                                    debug residual => _161;
                                    scope 34 {
                                    }
                                }
                                scope 35 {
                                    debug val => _164;
                                    scope 36 {
                                    }
                                }
                                scope 37 {
                                    debug residual => _166;
                                    scope 38 {
                                    }
                                }
                                scope 39 {
                                    debug val => _169;
                                    scope 40 {
                                    }
                                }
                                scope 41 {
                                    debug obligation => _176;
                                    let _223: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                    let _226: solana_program::clock::Clock;
                                    let _228: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                    let _231: bool;
                                    let _247: solend_sdk::math::Decimal;
                                    let _255: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                    let _258: solend_sdk::math::Decimal;
                                    let _266: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                    let _269: solend_sdk::math::Decimal;
                                    let _271: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                    let _274: solend_sdk::math::Decimal;
                                    let mut _487: *const ();
                                    let mut _488: usize;
                                    let mut _489: usize;
                                    let mut _490: usize;
                                    let mut _491: usize;
                                    let mut _492: bool;
                                    scope 46 {
                                        debug residual => _223;
                                        scope 47 {
                                        }
                                    }
                                    scope 48 {
                                        debug val => _226;
                                        scope 49 {
                                        }
                                    }
                                    scope 50 {
                                        debug residual => _228;
                                        scope 51 {
                                        }
                                    }
                                    scope 52 {
                                        debug val => _231;
                                        scope 53 {
                                        }
                                    }
                                    scope 54 {
                                        debug max_forgive_amount => _247;
                                        let _275: &solend_sdk::state::ObligationLiquidity;
                                        let _276: usize;
                                        let _283: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                        let _286: (&solend_sdk::state::ObligationLiquidity, usize);
                                        scope 67 {
                                            debug liquidity => _275;
                                            debug liquidity_index => _276;
                                            let _287: solend_sdk::math::Decimal;
                                            scope 72 {
                                                debug forgive_amount => _287;
                                                let _299: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                let _302: ();
                                                let _318: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                let _321: ();
                                                let _329: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                let _332: ();
                                                let _348: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                let _351: ();
                                                let mut _481: *const ();
                                                let mut _482: usize;
                                                let mut _483: usize;
                                                let mut _484: usize;
                                                let mut _485: usize;
                                                let mut _486: bool;
                                                scope 73 {
                                                    debug residual => _299;
                                                    scope 74 {
                                                    }
                                                }
                                                scope 75 {
                                                    debug val => _302;
                                                    scope 76 {
                                                    }
                                                }
                                                scope 77 {
                                                    debug residual => _318;
                                                    scope 78 {
                                                    }
                                                }
                                                scope 79 {
                                                    debug val => _321;
                                                    scope 80 {
                                                    }
                                                }
                                                scope 81 {
                                                    debug residual => _329;
                                                    scope 82 {
                                                    }
                                                }
                                                scope 83 {
                                                    debug val => _332;
                                                    scope 84 {
                                                    }
                                                }
                                                scope 85 {
                                                    debug residual => _348;
                                                    scope 86 {
                                                    }
                                                }
                                                scope 87 {
                                                    debug val => _351;
                                                    scope 88 {
                                                    }
                                                }
                                            }
                                        }
                                        scope 68 {
                                            debug residual => _283;
                                            scope 69 {
                                            }
                                        }
                                        scope 70 {
                                            debug val => _286;
                                            scope 71 {
                                            }
                                        }
                                    }
                                    scope 55 {
                                        debug residual => _255;
                                        scope 56 {
                                        }
                                    }
                                    scope 57 {
                                        debug val => _258;
                                        scope 58 {
                                        }
                                    }
                                    scope 59 {
                                        debug residual => _266;
                                        scope 60 {
                                        }
                                    }
                                    scope 61 {
                                        debug val => _269;
                                        scope 62 {
                                        }
                                    }
                                    scope 63 {
                                        debug residual => _271;
                                        scope 64 {
                                        }
                                    }
                                    scope 65 {
                                        debug val => _274;
                                        scope 66 {
                                        }
                                    }
                                }
                                scope 42 {
                                    debug residual => _188;
                                    scope 43 {
                                    }
                                }
                                scope 44 {
                                    debug val => _191;
                                    scope 45 {
                                    }
                                }
                            }
                            scope 29 {
                                debug residual => _126;
                                scope 30 {
                                }
                            }
                            scope 31 {
                                debug val => _129;
                                scope 32 {
                                }
                            }
                        }
                        scope 23 {
                            debug residual => _55;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _58;
                            scope 26 {
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _39;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _42;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _30;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _33;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _21;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _24;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _12;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _15;
            scope 6 {
            }
        }
    }

    bb0: {
        _365 = const false;
        _368 = const false;
        _370 = const false;
        _369 = const false;
        _367 = const false;
        _366 = const false;
        _364 = const false;
        _363 = const false;
        _362 = const false;
        _361 = const false;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &(*_3);
        _5 = bytemuck::core::slice::<impl [AccountInfo<'_>]>::iter(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = &mut _5;
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &mut (*_4);
        _9 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        _8 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _9) -> [return: bb3, unwind: bb213];
    }

    bb3: {
        StorageDead(_9);
        _11 = discriminant(_8);
        switchInt(move _11) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_15);
        _15 = ((_8 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _7 = _15;
        StorageDead(_15);
        _371 = discriminant(_8);
        StorageDead(_8);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &mut (*_4);
        _18 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _19) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_12);
        _12 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_14);
        _14 = move _12;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _14) -> [return: bb7, unwind: bb243];
    }

    bb7: {
        StorageDead(_14);
        StorageDead(_12);
        _453 = discriminant(_8);
        StorageDead(_8);
        goto -> bb199;
    }

    bb8: {
        StorageDead(_19);
        _17 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _18) -> [return: bb9, unwind: bb213];
    }

    bb9: {
        StorageDead(_18);
        _20 = discriminant(_17);
        switchInt(move _20) -> [0: bb10, 1: bb11, otherwise: bb5];
    }

    bb10: {
        StorageLive(_24);
        _24 = ((_17 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _16 = _24;
        StorageDead(_24);
        _373 = discriminant(_17);
        StorageDead(_17);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &mut (*_4);
        _27 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _28) -> [return: bb13, unwind continue];
    }

    bb11: {
        StorageLive(_21);
        _21 = move ((_17 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_23);
        _23 = move _21;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _23) -> [return: bb12, unwind: bb242];
    }

    bb12: {
        StorageDead(_23);
        StorageDead(_21);
        _451 = discriminant(_17);
        StorageDead(_17);
        goto -> bb198;
    }

    bb13: {
        StorageDead(_28);
        _26 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _27) -> [return: bb14, unwind: bb213];
    }

    bb14: {
        StorageDead(_27);
        _29 = discriminant(_26);
        switchInt(move _29) -> [0: bb15, 1: bb16, otherwise: bb5];
    }

    bb15: {
        StorageLive(_33);
        _33 = ((_26 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _25 = _33;
        StorageDead(_33);
        _375 = discriminant(_26);
        StorageDead(_26);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &mut (*_4);
        _36 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _37) -> [return: bb18, unwind continue];
    }

    bb16: {
        StorageLive(_30);
        _30 = move ((_26 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_32);
        _32 = move _30;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _32) -> [return: bb17, unwind: bb241];
    }

    bb17: {
        StorageDead(_32);
        StorageDead(_30);
        _449 = discriminant(_26);
        StorageDead(_26);
        goto -> bb197;
    }

    bb18: {
        StorageDead(_37);
        _35 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _36) -> [return: bb19, unwind: bb213];
    }

    bb19: {
        StorageDead(_36);
        _38 = discriminant(_35);
        switchInt(move _38) -> [0: bb20, 1: bb21, otherwise: bb5];
    }

    bb20: {
        StorageLive(_42);
        _42 = ((_35 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _34 = _42;
        StorageDead(_42);
        _377 = discriminant(_35);
        StorageDead(_35);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = &((*_25).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _52 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _53) -> [return: bb23, unwind continue];
    }

    bb21: {
        StorageLive(_39);
        _39 = move ((_35 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_41);
        _41 = move _39;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _41) -> [return: bb22, unwind: bb240];
    }

    bb22: {
        StorageDead(_41);
        StorageDead(_39);
        _447 = discriminant(_35);
        StorageDead(_35);
        goto -> bb196;
    }

    bb23: {
        _51 = &(*_52);
        StorageDead(_53);
        _50 = RefCell::<&mut [u8]>::borrow(move _51) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_51);
        _49 = &_50;
        _48 = &(*_49);
        _47 = <Ref<'_, &mut [u8]> as Deref>::deref(move _48) -> [return: bb25, unwind: bb212];
    }

    bb25: {
        _354 = deref_copy (*_47);
        _46 = &(*_354);
        StorageDead(_48);
        _45 = <LendingMarket as Pack>::unpack(move _46) -> [return: bb26, unwind: bb212];
    }

    bb26: {
        StorageDead(_46);
        _44 = <Result<LendingMarket, ProgramError> as Try>::branch(move _45) -> [return: bb27, unwind: bb212];
    }

    bb27: {
        StorageDead(_45);
        _54 = discriminant(_44);
        switchInt(move _54) -> [0: bb28, 1: bb29, otherwise: bb5];
    }

    bb28: {
        StorageLive(_58);
        _58 = move ((_44 as Continue).0: solend_sdk::state::LendingMarket);
        _43 = move _58;
        StorageDead(_58);
        _379 = discriminant(_44);
        drop(_50) -> [return: bb31, unwind: bb213];
    }

    bb29: {
        StorageLive(_55);
        _55 = move ((_44 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_57);
        _57 = move _55;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _57) -> [return: bb30, unwind: bb239];
    }

    bb30: {
        StorageDead(_57);
        StorageDead(_55);
        _445 = discriminant(_44);
        drop(_50) -> [return: bb194, unwind: bb213];
    }

    bb31: {
        StorageDead(_52);
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_44);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = &((*_25).3: &solana_program::pubkey::Pubkey);
        StorageLive(_62);
        _62 = &_1;
        _60 = <&Pubkey as PartialEq>::ne(move _61, move _62) -> [return: bb32, unwind continue];
    }

    bb32: {
        switchInt(move _60) -> [0: bb46, otherwise: bb33];
    }

    bb33: {
        StorageDead(_62);
        StorageDead(_61);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _353 = const _;
        _74 = &(*_353);
        _73 = &(*_74);
        _72 = move _73 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_73);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _355 = deref_copy ((*_25).3: &solana_program::pubkey::Pubkey);
        _85 = &(*_355);
        _84 = <Pubkey as ToString>::to_string(move _85) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_85);
        _83 = &_84;
        _82 = &_83;
        _81 = &(*_82);
        _80 = bytemuck::core::fmt::rt::Argument::<'_>::new_display::<&String>(move _81) -> [return: bb35, unwind: bb211];
    }

    bb35: {
        StorageDead(_81);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = &(*_1);
        _90 = <Pubkey as ToString>::to_string(move _91) -> [return: bb36, unwind: bb211];
    }

    bb36: {
        StorageDead(_91);
        _89 = &_90;
        _88 = &_89;
        _87 = &(*_88);
        _86 = bytemuck::core::fmt::rt::Argument::<'_>::new_display::<&String>(move _87) -> [return: bb37, unwind: bb210];
    }

    bb37: {
        StorageDead(_87);
        _79 = [move _80, move _86];
        StorageDead(_86);
        StorageDead(_80);
        _78 = &_79;
        _77 = &(*_78);
        _76 = move _77 as &[bytemuck::core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_77);
        _71 = Arguments::<'_>::new_v1(move _72, move _76) -> [return: bb38, unwind: bb210];
    }

    bb38: {
        StorageDead(_76);
        StorageDead(_72);
        _70 = format(move _71) -> [return: bb39, unwind: bb210];
    }

    bb39: {
        StorageDead(_71);
        drop(_90) -> [return: bb40, unwind: bb208];
    }

    bb40: {
        StorageDead(_90);
        StorageDead(_89);
        StorageDead(_88);
        drop(_84) -> [return: bb41, unwind: bb209];
    }

    bb41: {
        StorageDead(_84);
        StorageDead(_83);
        StorageDead(_82);
        StorageDead(_79);
        StorageDead(_78);
        StorageDead(_74);
        _69 = move _70;
        StorageDead(_70);
        _68 = &_69;
        _67 = &(*_68);
        _66 = <String as Deref>::deref(move _67) -> [return: bb42, unwind: bb207];
    }

    bb42: {
        _65 = &(*_66);
        StorageDead(_67);
        _64 = solana_program::log::sol_log(move _65) -> [return: bb43, unwind: bb207];
    }

    bb43: {
        StorageDead(_65);
        drop(_69) -> [return: bb44, unwind: bb213];
    }

    bb44: {
        StorageDead(_69);
        StorageDead(_68);
        StorageDead(_66);
        StorageDead(_64);
        StorageLive(_92);
        StorageLive(_93);
        _93 = solend_sdk::error::LendingError::InvalidAccountOwner;
        _92 = <LendingError as Into<ProgramError>>::into(move _93) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_93);
        _0 = Result::<(), ProgramError>::Err(move _92);
        StorageDead(_92);
        StorageDead(_60);
        StorageDead(_59);
        goto -> bb195;
    }

    bb46: {
        StorageDead(_62);
        StorageDead(_61);
        _59 = const ();
        StorageDead(_60);
        StorageDead(_59);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = &(_43.2: solana_program::pubkey::Pubkey);
        _96 = &_97;
        StorageLive(_98);
        _98 = &((*_34).0: &solana_program::pubkey::Pubkey);
        _95 = <&Pubkey as PartialEq>::ne(move _96, move _98) -> [return: bb47, unwind continue];
    }

    bb47: {
        switchInt(move _95) -> [0: bb51, otherwise: bb48];
    }

    bb48: {
        StorageDead(_98);
        StorageDead(_97);
        StorageDead(_96);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _102 = const "Lending market owner does not match the lending market owner provided";
        _101 = &(*_102);
        _100 = solana_program::log::sol_log(move _101) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_101);
        StorageDead(_102);
        StorageDead(_100);
        StorageLive(_103);
        StorageLive(_104);
        _104 = InvalidMarketOwner;
        _103 = <LendingError as Into<ProgramError>>::into(move _104) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_104);
        _0 = Result::<(), ProgramError>::Err(move _103);
        StorageDead(_103);
        StorageDead(_95);
        StorageDead(_94);
        goto -> bb195;
    }

    bb51: {
        StorageDead(_98);
        StorageDead(_97);
        StorageDead(_96);
        _94 = const ();
        StorageDead(_95);
        StorageDead(_94);
        StorageLive(_105);
        StorageLive(_106);
        _106 = ((*_34).5: bool);
        switchInt(move _106) -> [0: bb53, otherwise: bb52];
    }

    bb52: {
        _105 = const ();
        StorageDead(_106);
        StorageDead(_105);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        _124 = &((*_16).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _123 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _124) -> [return: bb56, unwind continue];
    }

    bb53: {
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _110 = const "Lending market owner provided must be a signer";
        _109 = &(*_110);
        _108 = solana_program::log::sol_log(move _109) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_109);
        StorageDead(_110);
        StorageDead(_108);
        StorageLive(_111);
        StorageLive(_112);
        _112 = InvalidSigner;
        _111 = <LendingError as Into<ProgramError>>::into(move _112) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_112);
        _0 = Result::<(), ProgramError>::Err(move _111);
        StorageDead(_111);
        StorageDead(_106);
        StorageDead(_105);
        goto -> bb195;
    }

    bb56: {
        _122 = &(*_123);
        StorageDead(_124);
        _121 = RefCell::<&mut [u8]>::borrow(move _122) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_122);
        _120 = &_121;
        _119 = &(*_120);
        _118 = <Ref<'_, &mut [u8]> as Deref>::deref(move _119) -> [return: bb58, unwind: bb206];
    }

    bb58: {
        _356 = deref_copy (*_118);
        _117 = &(*_356);
        StorageDead(_119);
        _116 = <Reserve as Pack>::unpack(move _117) -> [return: bb59, unwind: bb206];
    }

    bb59: {
        StorageDead(_117);
        _115 = <Result<Reserve, ProgramError> as Try>::branch(move _116) -> [return: bb60, unwind: bb206];
    }

    bb60: {
        _369 = const true;
        _370 = const true;
        StorageDead(_116);
        _125 = discriminant(_115);
        switchInt(move _125) -> [0: bb61, 1: bb62, otherwise: bb5];
    }

    bb61: {
        StorageLive(_129);
        _129 = move ((_115 as Continue).0: solend_sdk::state::Reserve);
        _114 = move _129;
        StorageDead(_129);
        _113 = Box::<Reserve>::new(move _114) -> [return: bb64, unwind: bb238];
    }

    bb62: {
        StorageLive(_126);
        _126 = move ((_115 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_128);
        _128 = move _126;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _128) -> [return: bb63, unwind: bb238];
    }

    bb63: {
        StorageDead(_128);
        StorageDead(_126);
        StorageDead(_114);
        _443 = discriminant(_115);
        drop(_121) -> [return: bb192, unwind: bb213];
    }

    bb64: {
        StorageDead(_114);
        _381 = discriminant(_115);
        drop(_121) -> [return: bb65, unwind: bb205];
    }

    bb65: {
        StorageDead(_123);
        StorageDead(_121);
        StorageDead(_120);
        StorageDead(_118);
        _369 = const false;
        _370 = const false;
        StorageDead(_115);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        _132 = &((*_16).3: &solana_program::pubkey::Pubkey);
        StorageLive(_133);
        _133 = &_1;
        _131 = <&Pubkey as PartialEq>::ne(move _132, move _133) -> [return: bb66, unwind: bb205];
    }

    bb66: {
        switchInt(move _131) -> [0: bb70, otherwise: bb67];
    }

    bb67: {
        StorageDead(_133);
        StorageDead(_132);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        _137 = const "Reserve provided is not owned by the lending program";
        _136 = &(*_137);
        _135 = solana_program::log::sol_log(move _136) -> [return: bb68, unwind: bb205];
    }

    bb68: {
        StorageDead(_136);
        StorageDead(_137);
        StorageDead(_135);
        StorageLive(_138);
        StorageLive(_139);
        _139 = solend_sdk::error::LendingError::InvalidAccountOwner;
        _138 = <LendingError as Into<ProgramError>>::into(move _139) -> [return: bb69, unwind: bb205];
    }

    bb69: {
        StorageDead(_139);
        _0 = Result::<(), ProgramError>::Err(move _138);
        StorageDead(_138);
        StorageDead(_131);
        StorageDead(_130);
        goto -> bb191;
    }

    bb70: {
        StorageDead(_133);
        StorageDead(_132);
        _130 = const ();
        StorageDead(_131);
        StorageDead(_130);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        _474 = (((_113.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _143 = &((*_474).2: solana_program::pubkey::Pubkey);
        _142 = &_143;
        StorageLive(_144);
        _144 = &((*_25).0: &solana_program::pubkey::Pubkey);
        _141 = <&Pubkey as PartialEq>::ne(move _142, move _144) -> [return: bb71, unwind: bb205];
    }

    bb71: {
        switchInt(move _141) -> [0: bb75, otherwise: bb72];
    }

    bb72: {
        StorageDead(_144);
        StorageDead(_143);
        StorageDead(_142);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        _148 = const "Reserve lending market does not match the lending market provided";
        _147 = &(*_148);
        _146 = solana_program::log::sol_log(move _147) -> [return: bb73, unwind: bb205];
    }

    bb73: {
        StorageDead(_147);
        StorageDead(_148);
        StorageDead(_146);
        StorageLive(_149);
        StorageLive(_150);
        _150 = InvalidAccountInput;
        _149 = <LendingError as Into<ProgramError>>::into(move _150) -> [return: bb74, unwind: bb205];
    }

    bb74: {
        StorageDead(_150);
        _0 = Result::<(), ProgramError>::Err(move _149);
        StorageDead(_149);
        StorageDead(_141);
        StorageDead(_140);
        goto -> bb191;
    }

    bb75: {
        StorageDead(_144);
        StorageDead(_143);
        StorageDead(_142);
        _140 = const ();
        StorageDead(_141);
        StorageDead(_140);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        _475 = (((_113.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _155 = &((*_475).1: solend_sdk::state::LastUpdate);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        _159 = <Clock as Sysvar>::get() -> [return: bb76, unwind: bb205];
    }

    bb76: {
        _158 = <Result<Clock, ProgramError> as Try>::branch(move _159) -> [return: bb77, unwind: bb205];
    }

    bb77: {
        _366 = const true;
        _367 = const true;
        StorageDead(_159);
        _160 = discriminant(_158);
        switchInt(move _160) -> [0: bb78, 1: bb79, otherwise: bb5];
    }

    bb78: {
        StorageLive(_164);
        _164 = move ((_158 as Continue).0: solana_program::clock::Clock);
        _157 = move _164;
        StorageDead(_164);
        _156 = (_157.0: u64);
        _154 = LastUpdate::is_stale(move _155, move _156) -> [return: bb81, unwind: bb237];
    }

    bb79: {
        StorageLive(_161);
        _161 = move ((_158 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_163);
        _163 = move _161;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _163) -> [return: bb80, unwind: bb237];
    }

    bb80: {
        StorageDead(_163);
        StorageDead(_161);
        StorageDead(_156);
        StorageDead(_155);
        StorageDead(_154);
        goto -> bb189;
    }

    bb81: {
        StorageDead(_156);
        StorageDead(_155);
        _153 = <Result<bool, ProgramError> as Try>::branch(move _154) -> [return: bb82, unwind: bb237];
    }

    bb82: {
        StorageDead(_154);
        _165 = discriminant(_153);
        switchInt(move _165) -> [0: bb83, 1: bb84, otherwise: bb5];
    }

    bb83: {
        StorageLive(_169);
        _169 = ((_153 as Continue).0: bool);
        _152 = _169;
        StorageDead(_169);
        switchInt(move _152) -> [0: bb215, otherwise: bb214];
    }

    bb84: {
        StorageLive(_166);
        _166 = move ((_153 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_168);
        _168 = move _166;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _168) -> [return: bb85, unwind: bb236];
    }

    bb85: {
        StorageDead(_168);
        StorageDead(_166);
        _439 = discriminant(_153);
        goto -> bb189;
    }

    bb86: {
        StorageDead(_172);
        StorageDead(_173);
        StorageDead(_171);
        StorageLive(_174);
        StorageLive(_175);
        _175 = ReserveStale;
        _174 = <LendingError as Into<ProgramError>>::into(move _175) -> [return: bb87, unwind: bb205];
    }

    bb87: {
        StorageDead(_175);
        _0 = Result::<(), ProgramError>::Err(move _174);
        StorageDead(_174);
        goto -> bb190;
    }

    bb88: {
        _184 = &(*_185);
        StorageDead(_186);
        _183 = RefCell::<&mut [u8]>::borrow(move _184) -> [return: bb89, unwind: bb205];
    }

    bb89: {
        StorageDead(_184);
        _182 = &_183;
        _181 = &(*_182);
        _180 = <Ref<'_, &mut [u8]> as Deref>::deref(move _181) -> [return: bb90, unwind: bb204];
    }

    bb90: {
        _357 = deref_copy (*_180);
        _179 = &(*_357);
        StorageDead(_181);
        _178 = <Obligation as Pack>::unpack(move _179) -> [return: bb91, unwind: bb204];
    }

    bb91: {
        StorageDead(_179);
        _177 = <Result<Obligation, ProgramError> as Try>::branch(move _178) -> [return: bb92, unwind: bb204];
    }

    bb92: {
        StorageDead(_178);
        _187 = discriminant(_177);
        switchInt(move _187) -> [0: bb93, 1: bb94, otherwise: bb5];
    }

    bb93: {
        StorageLive(_191);
        _191 = move ((_177 as Continue).0: solend_sdk::state::Obligation);
        _365 = const true;
        _176 = move _191;
        StorageDead(_191);
        _391 = discriminant(_177);
        drop(_183) -> [return: bb96, unwind: bb234];
    }

    bb94: {
        StorageLive(_188);
        _188 = move ((_177 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_190);
        _190 = move _188;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _190) -> [return: bb95, unwind: bb235];
    }

    bb95: {
        StorageDead(_190);
        StorageDead(_188);
        _437 = discriminant(_177);
        drop(_183) -> [return: bb187, unwind: bb205];
    }

    bb96: {
        StorageDead(_185);
        StorageDead(_183);
        StorageDead(_182);
        StorageDead(_180);
        StorageDead(_177);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        _194 = &((*_7).3: &solana_program::pubkey::Pubkey);
        StorageLive(_195);
        _195 = &_1;
        _193 = <&Pubkey as PartialEq>::ne(move _194, move _195) -> [return: bb97, unwind: bb234];
    }

    bb97: {
        switchInt(move _193) -> [0: bb101, otherwise: bb98];
    }

    bb98: {
        StorageDead(_195);
        StorageDead(_194);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        _199 = const "Obligation provided is not owned by the lending program";
        _198 = &(*_199);
        _197 = solana_program::log::sol_log(move _198) -> [return: bb99, unwind: bb234];
    }

    bb99: {
        StorageDead(_198);
        StorageDead(_199);
        StorageDead(_197);
        StorageLive(_200);
        StorageLive(_201);
        _201 = solend_sdk::error::LendingError::InvalidAccountOwner;
        _200 = <LendingError as Into<ProgramError>>::into(move _201) -> [return: bb100, unwind: bb234];
    }

    bb100: {
        StorageDead(_201);
        _0 = Result::<(), ProgramError>::Err(move _200);
        StorageDead(_200);
        StorageDead(_193);
        StorageDead(_192);
        goto -> bb220;
    }

    bb101: {
        StorageDead(_195);
        StorageDead(_194);
        _192 = const ();
        StorageDead(_193);
        StorageDead(_192);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        _205 = &(_176.2: solana_program::pubkey::Pubkey);
        _204 = &_205;
        StorageLive(_206);
        _206 = &((*_25).0: &solana_program::pubkey::Pubkey);
        _203 = <&Pubkey as PartialEq>::ne(move _204, move _206) -> [return: bb102, unwind: bb234];
    }

    bb102: {
        switchInt(move _203) -> [0: bb106, otherwise: bb103];
    }

    bb103: {
        StorageDead(_206);
        StorageDead(_205);
        StorageDead(_204);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        _210 = const "Obligation lending market does not match the lending market provided";
        _209 = &(*_210);
        _208 = solana_program::log::sol_log(move _209) -> [return: bb104, unwind: bb234];
    }

    bb104: {
        StorageDead(_209);
        StorageDead(_210);
        StorageDead(_208);
        StorageLive(_211);
        StorageLive(_212);
        _212 = InvalidAccountInput;
        _211 = <LendingError as Into<ProgramError>>::into(move _212) -> [return: bb105, unwind: bb234];
    }

    bb105: {
        StorageDead(_212);
        _0 = Result::<(), ProgramError>::Err(move _211);
        StorageDead(_211);
        StorageDead(_203);
        StorageDead(_202);
        goto -> bb220;
    }

    bb106: {
        StorageDead(_206);
        StorageDead(_205);
        StorageDead(_204);
        _202 = const ();
        StorageDead(_203);
        StorageDead(_202);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        _217 = &(_176.1: solend_sdk::state::LastUpdate);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        _221 = <Clock as Sysvar>::get() -> [return: bb107, unwind: bb234];
    }

    bb107: {
        _220 = <Result<Clock, ProgramError> as Try>::branch(move _221) -> [return: bb108, unwind: bb234];
    }

    bb108: {
        _363 = const true;
        _364 = const true;
        StorageDead(_221);
        _222 = discriminant(_220);
        switchInt(move _222) -> [0: bb109, 1: bb110, otherwise: bb5];
    }

    bb109: {
        StorageLive(_226);
        _226 = move ((_220 as Continue).0: solana_program::clock::Clock);
        _219 = move _226;
        StorageDead(_226);
        _218 = (_219.0: u64);
        _216 = LastUpdate::is_stale(move _217, move _218) -> [return: bb112, unwind: bb232];
    }

    bb110: {
        StorageLive(_223);
        _223 = move ((_220 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_225);
        _225 = move _223;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _225) -> [return: bb111, unwind: bb232];
    }

    bb111: {
        StorageDead(_225);
        StorageDead(_223);
        StorageDead(_218);
        StorageDead(_217);
        StorageDead(_216);
        goto -> bb185;
    }

    bb112: {
        StorageDead(_218);
        StorageDead(_217);
        _215 = <Result<bool, ProgramError> as Try>::branch(move _216) -> [return: bb113, unwind: bb232];
    }

    bb113: {
        StorageDead(_216);
        _227 = discriminant(_215);
        switchInt(move _227) -> [0: bb114, 1: bb115, otherwise: bb5];
    }

    bb114: {
        StorageLive(_231);
        _231 = ((_215 as Continue).0: bool);
        _214 = _231;
        StorageDead(_231);
        switchInt(move _214) -> [0: bb217, otherwise: bb216];
    }

    bb115: {
        StorageLive(_228);
        _228 = move ((_215 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_230);
        _230 = move _228;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _230) -> [return: bb116, unwind: bb231];
    }

    bb116: {
        StorageDead(_230);
        StorageDead(_228);
        _433 = discriminant(_215);
        goto -> bb185;
    }

    bb117: {
        StorageDead(_234);
        StorageDead(_235);
        StorageDead(_233);
        StorageLive(_236);
        StorageLive(_237);
        _237 = ObligationStale;
        _236 = <LendingError as Into<ProgramError>>::into(move _237) -> [return: bb118, unwind: bb234];
    }

    bb118: {
        StorageDead(_237);
        _0 = Result::<(), ProgramError>::Err(move _236);
        StorageDead(_236);
        goto -> bb186;
    }

    bb119: {
        switchInt(move _239) -> [0: bb121, otherwise: bb120];
    }

    bb120: {
        StorageDead(_240);
        _238 = const ();
        StorageDead(_239);
        StorageDead(_238);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        _476 = (((_113.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _253 = &((*_476).3: solend_sdk::state::ReserveLiquidity);
        _252 = ReserveLiquidity::total_supply(move _253) -> [return: bb124, unwind: bb234];
    }

    bb121: {
        StorageDead(_240);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        _244 = const "Obligation hasn't been fully liquidated!";
        _243 = &(*_244);
        _242 = solana_program::log::sol_log(move _243) -> [return: bb122, unwind: bb234];
    }

    bb122: {
        StorageDead(_243);
        StorageDead(_244);
        StorageDead(_242);
        StorageLive(_245);
        StorageLive(_246);
        _246 = InvalidAccountInput;
        _245 = <LendingError as Into<ProgramError>>::into(move _246) -> [return: bb123, unwind: bb234];
    }

    bb123: {
        StorageDead(_246);
        _0 = Result::<(), ProgramError>::Err(move _245);
        StorageDead(_245);
        StorageDead(_239);
        StorageDead(_238);
        goto -> bb220;
    }

    bb124: {
        StorageDead(_253);
        _251 = <Result<Decimal, ProgramError> as Try>::branch(move _252) -> [return: bb125, unwind: bb234];
    }

    bb125: {
        _362 = const true;
        StorageDead(_252);
        _254 = discriminant(_251);
        switchInt(move _254) -> [0: bb126, 1: bb127, otherwise: bb5];
    }

    bb126: {
        StorageLive(_258);
        _258 = ((_251 as Continue).0: solend_sdk::math::Decimal);
        _250 = _258;
        StorageDead(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        _477 = (((_113.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _487 = _477 as *const () (PtrToPtr);
        _488 = _487 as usize (Transmute);
        _489 = AlignOf(solend_sdk::state::Reserve);
        _490 = Sub(_489, const 1_usize);
        _491 = BitAnd(_488, _490);
        _492 = Eq(_491, const 0_usize);
        assert(_492, "misaligned pointer dereference: address must be a multiple of {} but is {}", _489, _488) -> [success: bb245, unwind unreachable];
    }

    bb127: {
        StorageLive(_255);
        _255 = move ((_251 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_257);
        _257 = move _255;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _257) -> [return: bb128, unwind: bb230];
    }

    bb128: {
        StorageDead(_257);
        StorageDead(_255);
        StorageDead(_250);
        StorageDead(_249);
        goto -> bb218;
    }

    bb129: {
        StorageDead(_263);
        StorageLive(_264);
        _264 = Decimal::from_percent(const _) -> [return: bb130, unwind: bb230];
    }

    bb130: {
        _261 = <Decimal as TryMul<Decimal>>::try_mul(move _262, move _264) -> [return: bb131, unwind: bb230];
    }

    bb131: {
        StorageDead(_264);
        StorageDead(_262);
        _260 = <Result<Decimal, ProgramError> as Try>::branch(move _261) -> [return: bb132, unwind: bb230];
    }

    bb132: {
        _361 = const true;
        StorageDead(_261);
        _265 = discriminant(_260);
        switchInt(move _265) -> [0: bb133, 1: bb134, otherwise: bb5];
    }

    bb133: {
        StorageLive(_269);
        _269 = ((_260 as Continue).0: solend_sdk::math::Decimal);
        _259 = _269;
        StorageDead(_269);
        _249 = <Decimal as TrySub>::try_sub(move _250, move _259) -> [return: bb136, unwind: bb229];
    }

    bb134: {
        StorageLive(_266);
        _266 = move ((_260 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_268);
        _268 = move _266;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _268) -> [return: bb135, unwind: bb229];
    }

    bb135: {
        StorageDead(_268);
        StorageDead(_266);
        StorageDead(_259);
        StorageDead(_250);
        StorageDead(_249);
        goto -> bb183;
    }

    bb136: {
        StorageDead(_259);
        StorageDead(_250);
        _248 = <Result<Decimal, ProgramError> as Try>::branch(move _249) -> [return: bb137, unwind: bb229];
    }

    bb137: {
        StorageDead(_249);
        _270 = discriminant(_248);
        switchInt(move _270) -> [0: bb138, 1: bb139, otherwise: bb5];
    }

    bb138: {
        StorageLive(_274);
        _274 = ((_248 as Continue).0: solend_sdk::math::Decimal);
        _247 = _274;
        StorageDead(_274);
        _401 = discriminant(_248);
        _403 = discriminant(_260);
        _361 = const false;
        StorageDead(_260);
        _405 = discriminant(_251);
        _362 = const false;
        StorageDead(_251);
        StorageDead(_248);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        _280 = &_176;
        StorageLive(_281);
        _358 = deref_copy ((*_16).0: &solana_program::pubkey::Pubkey);
        _281 = (*_358);
        _279 = Obligation::find_liquidity_in_borrows(move _280, move _281) -> [return: bb141, unwind: bb234];
    }

    bb139: {
        StorageLive(_271);
        _271 = move ((_248 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_273);
        _273 = move _271;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _273) -> [return: bb140, unwind: bb228];
    }

    bb140: {
        StorageDead(_273);
        StorageDead(_271);
        _427 = discriminant(_248);
        goto -> bb183;
    }

    bb141: {
        StorageDead(_281);
        StorageDead(_280);
        _278 = <Result<(&ObligationLiquidity, usize), ProgramError> as Try>::branch(move _279) -> [return: bb142, unwind: bb234];
    }

    bb142: {
        StorageDead(_279);
        _282 = discriminant(_278);
        switchInt(move _282) -> [0: bb143, 1: bb144, otherwise: bb5];
    }

    bb143: {
        StorageLive(_286);
        _286 = ((_278 as Continue).0: (&solend_sdk::state::ObligationLiquidity, usize));
        _277 = _286;
        StorageDead(_286);
        StorageLive(_275);
        _275 = (_277.0: &solend_sdk::state::ObligationLiquidity);
        StorageLive(_276);
        _276 = (_277.1: usize);
        _407 = discriminant(_278);
        StorageDead(_278);
        StorageDead(_277);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        _289 = _2;
        _288 = <Decimal as From<u64>>::from(move _289) -> [return: bb146, unwind: bb234];
    }

    bb144: {
        StorageLive(_283);
        _283 = move ((_278 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_285);
        _285 = move _283;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _285) -> [return: bb145, unwind: bb227];
    }

    bb145: {
        StorageDead(_285);
        StorageDead(_283);
        _425 = discriminant(_278);
        StorageDead(_278);
        StorageDead(_277);
        goto -> bb184;
    }

    bb146: {
        StorageDead(_289);
        StorageLive(_290);
        StorageLive(_291);
        _291 = ((*_275).2: solend_sdk::math::Decimal);
        StorageLive(_292);
        _292 = _247;
        _290 = std::cmp::min::<Decimal>(move _291, move _292) -> [return: bb147, unwind: bb234];
    }

    bb147: {
        StorageDead(_292);
        StorageDead(_291);
        _287 = std::cmp::min::<Decimal>(move _288, move _290) -> [return: bb148, unwind: bb234];
    }

    bb148: {
        StorageDead(_290);
        StorageDead(_288);
        StorageLive(_293);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        _478 = (((_113.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _296 = &mut ((*_478).3: solend_sdk::state::ReserveLiquidity);
        StorageLive(_297);
        _297 = _287;
        _295 = ReserveLiquidity::forgive_debt(move _296, move _297) -> [return: bb149, unwind: bb234];
    }

    bb149: {
        StorageDead(_297);
        StorageDead(_296);
        _294 = <Result<(), ProgramError> as Try>::branch(move _295) -> [return: bb150, unwind: bb234];
    }

    bb150: {
        StorageDead(_295);
        _298 = discriminant(_294);
        switchInt(move _298) -> [0: bb151, 1: bb152, otherwise: bb5];
    }

    bb151: {
        StorageLive(_302);
        _302 = ((_294 as Continue).0: ());
        _293 = _302;
        StorageDead(_302);
        _409 = discriminant(_294);
        StorageDead(_294);
        StorageDead(_293);
        StorageLive(_303);
        StorageLive(_304);
        _479 = (((_113.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _304 = &mut ((*_479).1: solend_sdk::state::LastUpdate);
        _303 = LastUpdate::mark_stale(move _304) -> [return: bb154, unwind: bb234];
    }

    bb152: {
        StorageLive(_299);
        _299 = move ((_294 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_301);
        _301 = move _299;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _301) -> [return: bb153, unwind: bb226];
    }

    bb153: {
        StorageDead(_301);
        StorageDead(_299);
        _423 = discriminant(_294);
        StorageDead(_294);
        StorageDead(_293);
        goto -> bb182;
    }

    bb154: {
        StorageDead(_304);
        StorageDead(_303);
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        _480 = (((_113.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _481 = _480 as *const () (PtrToPtr);
        _482 = _481 as usize (Transmute);
        _483 = AlignOf(solend_sdk::state::Reserve);
        _484 = Sub(_483, const 1_usize);
        _485 = BitAnd(_482, _484);
        _486 = Eq(_485, const 0_usize);
        assert(_486, "misaligned pointer dereference: address must be a multiple of {} but is {}", _483, _482) -> [success: bb244, unwind unreachable];
    }

    bb155: {
        _314 = &(*_315);
        StorageDead(_316);
        _313 = RefCell::<&mut [u8]>::borrow_mut(move _314) -> [return: bb156, unwind: bb234];
    }

    bb156: {
        StorageDead(_314);
        _312 = &mut _313;
        _311 = &mut (*_312);
        _310 = <RefMut<'_, &mut [u8]> as DerefMut>::deref_mut(move _311) -> [return: bb157, unwind: bb203];
    }

    bb157: {
        _359 = deref_copy (*_310);
        _309 = &mut (*_359);
        StorageDead(_311);
        _307 = <Reserve as Pack>::pack(move _308, move _309) -> [return: bb158, unwind: bb203];
    }

    bb158: {
        StorageDead(_309);
        StorageDead(_308);
        _306 = <Result<(), ProgramError> as Try>::branch(move _307) -> [return: bb159, unwind: bb203];
    }

    bb159: {
        StorageDead(_307);
        _317 = discriminant(_306);
        switchInt(move _317) -> [0: bb160, 1: bb161, otherwise: bb5];
    }

    bb160: {
        StorageLive(_321);
        _321 = ((_306 as Continue).0: ());
        _305 = _321;
        StorageDead(_321);
        _411 = discriminant(_306);
        drop(_313) -> [return: bb163, unwind: bb234];
    }

    bb161: {
        StorageLive(_318);
        _318 = move ((_306 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_320);
        _320 = move _318;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _320) -> [return: bb162, unwind: bb225];
    }

    bb162: {
        StorageDead(_320);
        StorageDead(_318);
        _421 = discriminant(_306);
        drop(_313) -> [return: bb181, unwind: bb234];
    }

    bb163: {
        StorageDead(_315);
        StorageDead(_313);
        StorageDead(_312);
        StorageDead(_310);
        StorageDead(_306);
        StorageDead(_305);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        StorageLive(_325);
        _325 = &mut _176;
        StorageLive(_326);
        _326 = _287;
        StorageLive(_327);
        _327 = _276;
        _324 = Obligation::repay(move _325, move _326, move _327) -> [return: bb164, unwind: bb234];
    }

    bb164: {
        StorageDead(_327);
        StorageDead(_326);
        StorageDead(_325);
        _323 = <Result<(), ProgramError> as Try>::branch(move _324) -> [return: bb165, unwind: bb234];
    }

    bb165: {
        StorageDead(_324);
        _328 = discriminant(_323);
        switchInt(move _328) -> [0: bb166, 1: bb167, otherwise: bb5];
    }

    bb166: {
        StorageLive(_332);
        _332 = ((_323 as Continue).0: ());
        _322 = _332;
        StorageDead(_332);
        _413 = discriminant(_323);
        StorageDead(_323);
        StorageDead(_322);
        StorageLive(_333);
        StorageLive(_334);
        _334 = &mut (_176.1: solend_sdk::state::LastUpdate);
        _333 = LastUpdate::mark_stale(move _334) -> [return: bb169, unwind: bb234];
    }

    bb167: {
        StorageLive(_329);
        _329 = move ((_323 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_331);
        _331 = move _329;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _331) -> [return: bb168, unwind: bb224];
    }

    bb168: {
        StorageDead(_331);
        StorageDead(_329);
        _419 = discriminant(_323);
        StorageDead(_323);
        StorageDead(_322);
        goto -> bb182;
    }

    bb169: {
        StorageDead(_334);
        StorageDead(_333);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        StorageLive(_338);
        _365 = const false;
        _368 = const true;
        _338 = move _176;
        StorageLive(_339);
        StorageLive(_340);
        StorageLive(_341);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        _346 = &((*_7).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _345 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _346) -> [return: bb170, unwind: bb202];
    }

    bb170: {
        _344 = &(*_345);
        StorageDead(_346);
        _343 = RefCell::<&mut [u8]>::borrow_mut(move _344) -> [return: bb171, unwind: bb202];
    }

    bb171: {
        StorageDead(_344);
        _342 = &mut _343;
        _341 = &mut (*_342);
        _340 = <RefMut<'_, &mut [u8]> as DerefMut>::deref_mut(move _341) -> [return: bb172, unwind: bb223];
    }

    bb172: {
        _360 = deref_copy (*_340);
        _339 = &mut (*_360);
        StorageDead(_341);
        _368 = const false;
        _337 = <Obligation as Pack>::pack(move _338, move _339) -> [return: bb173, unwind: bb223];
    }

    bb173: {
        StorageDead(_339);
        _368 = const false;
        StorageDead(_338);
        _336 = <Result<(), ProgramError> as Try>::branch(move _337) -> [return: bb174, unwind: bb201];
    }

    bb174: {
        StorageDead(_337);
        _347 = discriminant(_336);
        switchInt(move _347) -> [0: bb175, 1: bb176, otherwise: bb5];
    }

    bb175: {
        StorageLive(_351);
        _351 = ((_336 as Continue).0: ());
        _335 = _351;
        StorageDead(_351);
        _415 = discriminant(_336);
        drop(_343) -> [return: bb178, unwind: bb234];
    }

    bb176: {
        StorageLive(_348);
        _348 = move ((_336 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_350);
        _350 = move _348;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _350) -> [return: bb177, unwind: bb221];
    }

    bb177: {
        StorageDead(_350);
        StorageDead(_348);
        _417 = discriminant(_336);
        drop(_343) -> [return: bb180, unwind: bb234];
    }

    bb178: {
        StorageDead(_345);
        StorageDead(_343);
        StorageDead(_342);
        StorageDead(_340);
        StorageDead(_336);
        StorageDead(_335);
        StorageLive(_352);
        _352 = ();
        _0 = Result::<(), ProgramError>::Ok(move _352);
        StorageDead(_352);
        StorageDead(_287);
        StorageDead(_276);
        StorageDead(_275);
        StorageDead(_247);
        _365 = const false;
        StorageDead(_176);
        drop(_113) -> [return: bb179, unwind: bb213];
    }

    bb179: {
        StorageDead(_113);
        StorageDead(_43);
        StorageDead(_34);
        StorageDead(_25);
        StorageDead(_16);
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb200;
    }

    bb180: {
        StorageDead(_345);
        StorageDead(_343);
        StorageDead(_342);
        StorageDead(_340);
        StorageDead(_336);
        StorageDead(_335);
        goto -> bb182;
    }

    bb181: {
        StorageDead(_315);
        StorageDead(_313);
        StorageDead(_312);
        StorageDead(_310);
        StorageDead(_306);
        StorageDead(_305);
        goto -> bb182;
    }

    bb182: {
        StorageDead(_287);
        StorageDead(_276);
        StorageDead(_275);
        goto -> bb184;
    }

    bb183: {
        _429 = discriminant(_260);
        _361 = const false;
        StorageDead(_260);
        goto -> bb218;
    }

    bb184: {
        StorageDead(_247);
        goto -> bb220;
    }

    bb185: {
        _435 = discriminant(_220);
        _363 = const false;
        _364 = const false;
        StorageDead(_220);
        StorageDead(_219);
        StorageDead(_215);
        goto -> bb186;
    }

    bb186: {
        StorageDead(_214);
        StorageDead(_213);
        goto -> bb220;
    }

    bb187: {
        StorageDead(_185);
        StorageDead(_183);
        StorageDead(_182);
        StorageDead(_180);
        StorageDead(_177);
        goto -> bb188;
    }

    bb188: {
        _365 = const false;
        StorageDead(_176);
        goto -> bb191;
    }

    bb189: {
        _441 = discriminant(_158);
        _366 = const false;
        _367 = const false;
        StorageDead(_158);
        StorageDead(_157);
        StorageDead(_153);
        goto -> bb190;
    }

    bb190: {
        StorageDead(_152);
        StorageDead(_151);
        goto -> bb191;
    }

    bb191: {
        drop(_113) -> [return: bb193, unwind: bb213];
    }

    bb192: {
        StorageDead(_123);
        StorageDead(_121);
        StorageDead(_120);
        StorageDead(_118);
        _369 = const false;
        _370 = const false;
        StorageDead(_115);
        goto -> bb193;
    }

    bb193: {
        StorageDead(_113);
        goto -> bb195;
    }

    bb194: {
        StorageDead(_52);
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_44);
        goto -> bb195;
    }

    bb195: {
        StorageDead(_43);
        goto -> bb196;
    }

    bb196: {
        StorageDead(_34);
        goto -> bb197;
    }

    bb197: {
        StorageDead(_25);
        goto -> bb198;
    }

    bb198: {
        StorageDead(_16);
        goto -> bb199;
    }

    bb199: {
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb200;
    }

    bb200: {
        return;
    }

    bb201 (cleanup): {
        drop(_343) -> [return: bb234, unwind terminate(cleanup)];
    }

    bb202 (cleanup): {
        drop(_338) -> [return: bb234, unwind terminate(cleanup)];
    }

    bb203 (cleanup): {
        drop(_313) -> [return: bb234, unwind terminate(cleanup)];
    }

    bb204 (cleanup): {
        drop(_183) -> [return: bb205, unwind terminate(cleanup)];
    }

    bb205 (cleanup): {
        drop(_113) -> [return: bb213, unwind terminate(cleanup)];
    }

    bb206 (cleanup): {
        drop(_121) -> [return: bb213, unwind terminate(cleanup)];
    }

    bb207 (cleanup): {
        drop(_69) -> [return: bb213, unwind terminate(cleanup)];
    }

    bb208 (cleanup): {
        drop(_84) -> [return: bb209, unwind terminate(cleanup)];
    }

    bb209 (cleanup): {
        drop(_70) -> [return: bb213, unwind terminate(cleanup)];
    }

    bb210 (cleanup): {
        drop(_90) -> [return: bb211, unwind terminate(cleanup)];
    }

    bb211 (cleanup): {
        drop(_84) -> [return: bb213, unwind terminate(cleanup)];
    }

    bb212 (cleanup): {
        drop(_50) -> [return: bb213, unwind terminate(cleanup)];
    }

    bb213 (cleanup): {
        resume;
    }

    bb214: {
        _383 = discriminant(_153);
        _387 = discriminant(_158);
        _366 = const false;
        _367 = const false;
        StorageDead(_158);
        StorageDead(_157);
        StorageDead(_153);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        _173 = const "Reserve is stale and must be refreshed in the current slot";
        _172 = &(*_173);
        _171 = solana_program::log::sol_log(move _172) -> [return: bb86, unwind: bb205];
    }

    bb215: {
        _385 = discriminant(_153);
        _389 = discriminant(_158);
        _366 = const false;
        _367 = const false;
        StorageDead(_158);
        StorageDead(_157);
        StorageDead(_153);
        _151 = const ();
        StorageDead(_152);
        StorageDead(_151);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        _186 = &((*_7).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _185 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _186) -> [return: bb88, unwind: bb205];
    }

    bb216: {
        _393 = discriminant(_215);
        _397 = discriminant(_220);
        _363 = const false;
        _364 = const false;
        StorageDead(_220);
        StorageDead(_219);
        StorageDead(_215);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        _235 = const "Obligation is stale and must be refreshed in the current slot";
        _234 = &(*_235);
        _233 = solana_program::log::sol_log(move _234) -> [return: bb117, unwind: bb234];
    }

    bb217: {
        _395 = discriminant(_215);
        _399 = discriminant(_220);
        _363 = const false;
        _364 = const false;
        StorageDead(_220);
        StorageDead(_219);
        StorageDead(_215);
        _213 = const ();
        StorageDead(_214);
        StorageDead(_213);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        _240 = &(_176.4: std::vec::Vec<solend_sdk::state::ObligationCollateral>);
        _239 = Vec::<ObligationCollateral>::is_empty(move _240) -> [return: bb119, unwind: bb234];
    }

    bb218: {
        _431 = discriminant(_251);
        _362 = const false;
        StorageDead(_251);
        StorageDead(_248);
        goto -> bb184;
    }

    bb219: {
        drop(_176) -> [return: bb188, unwind: bb205];
    }

    bb220: {
        switchInt(_365) -> [0: bb188, otherwise: bb219];
    }

    bb221 (cleanup): {
        _455 = discriminant(_336);
        goto -> bb201;
    }

    bb222 (cleanup): {
        drop(_338) -> [return: bb201, unwind terminate(cleanup)];
    }

    bb223 (cleanup): {
        switchInt(_368) -> [0: bb201, otherwise: bb222];
    }

    bb224 (cleanup): {
        _456 = discriminant(_323);
        goto -> bb234;
    }

    bb225 (cleanup): {
        _457 = discriminant(_306);
        goto -> bb203;
    }

    bb226 (cleanup): {
        _458 = discriminant(_294);
        goto -> bb234;
    }

    bb227 (cleanup): {
        _459 = discriminant(_278);
        goto -> bb234;
    }

    bb228 (cleanup): {
        _460 = discriminant(_248);
        goto -> bb229;
    }

    bb229 (cleanup): {
        _461 = discriminant(_260);
        goto -> bb230;
    }

    bb230 (cleanup): {
        _462 = discriminant(_251);
        goto -> bb234;
    }

    bb231 (cleanup): {
        _463 = discriminant(_215);
        goto -> bb232;
    }

    bb232 (cleanup): {
        _464 = discriminant(_220);
        goto -> bb234;
    }

    bb233 (cleanup): {
        drop(_176) -> [return: bb205, unwind terminate(cleanup)];
    }

    bb234 (cleanup): {
        switchInt(_365) -> [0: bb205, otherwise: bb233];
    }

    bb235 (cleanup): {
        _465 = discriminant(_177);
        goto -> bb204;
    }

    bb236 (cleanup): {
        _466 = discriminant(_153);
        goto -> bb237;
    }

    bb237 (cleanup): {
        _467 = discriminant(_158);
        goto -> bb205;
    }

    bb238 (cleanup): {
        _468 = discriminant(_115);
        goto -> bb206;
    }

    bb239 (cleanup): {
        _469 = discriminant(_44);
        goto -> bb212;
    }

    bb240 (cleanup): {
        _470 = discriminant(_35);
        goto -> bb213;
    }

    bb241 (cleanup): {
        _471 = discriminant(_26);
        goto -> bb213;
    }

    bb242 (cleanup): {
        _472 = discriminant(_17);
        goto -> bb213;
    }

    bb243 (cleanup): {
        _473 = discriminant(_8);
        goto -> bb213;
    }

    bb244: {
        _308 = move (*_480);
        StorageLive(_309);
        StorageLive(_310);
        StorageLive(_311);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        _316 = &((*_16).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _315 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _316) -> [return: bb155, unwind: bb234];
    }

    bb245: {
        _263 = (((*_477).4: solend_sdk::state::ReserveCollateral).1: u64);
        _262 = <Decimal as From<u64>>::from(move _263) -> [return: bb129, unwind: bb230];
    }
}
