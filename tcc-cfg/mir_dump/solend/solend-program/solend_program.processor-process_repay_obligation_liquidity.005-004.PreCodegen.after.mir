// MIR for `process_repay_obligation_liquidity` after PreCodegen

fn process_repay_obligation_liquidity(_1: &Pubkey, _2: u64, _3: &[AccountInfo<'_>]) -> Result<(), ProgramError> {
    debug program_id => _1;
    debug liquidity_amount => _2;
    debug accounts => _3;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _4: ();
    let mut _5: bool;
    let mut _6: u64;
    let mut _7: !;
    let _8: ();
    let mut _9: &str;
    let _10: &str;
    let mut _11: solana_program::program_error::ProgramError;
    let mut _12: solend_sdk::error::LendingError;
    let _13: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _14: std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _15: &[solana_program::account_info::AccountInfo<'_>];
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _18: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _19: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _20: isize;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _27: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _28: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _29: isize;
    let mut _31: !;
    let mut _32: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _36: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _37: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _38: isize;
    let mut _40: !;
    let mut _41: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _44: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _45: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _46: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _47: isize;
    let mut _49: !;
    let mut _50: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _53: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _54: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _55: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _56: isize;
    let mut _58: !;
    let mut _59: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _62: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _63: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _64: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _65: isize;
    let mut _67: !;
    let mut _68: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _71: solana_program::clock::Clock;
    let mut _72: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solana_program::clock::Clock>;
    let mut _73: std::result::Result<solana_program::clock::Clock, solana_program::program_error::ProgramError>;
    let mut _74: isize;
    let mut _76: !;
    let mut _77: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _80: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _81: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _82: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _83: isize;
    let mut _85: !;
    let mut _86: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _89: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::state::LendingMarket>;
    let mut _90: std::result::Result<solend_sdk::state::LendingMarket, solana_program::program_error::ProgramError>;
    let mut _91: &[u8];
    let _92: &&mut [u8];
    let mut _93: &std::cell::Ref<'_, &mut [u8]>;
    let _94: &std::cell::Ref<'_, &mut [u8]>;
    let _95: std::cell::Ref<'_, &mut [u8]>;
    let mut _96: &std::cell::RefCell<&mut [u8]>;
    let _97: &std::cell::RefCell<&mut [u8]>;
    let mut _98: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _99: isize;
    let mut _101: !;
    let mut _102: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _104: ();
    let mut _105: bool;
    let mut _106: &&solana_program::pubkey::Pubkey;
    let mut _107: &&solana_program::pubkey::Pubkey;
    let mut _108: !;
    let _109: ();
    let mut _110: &str;
    let _111: &str;
    let mut _112: solana_program::program_error::ProgramError;
    let mut _113: solend_sdk::error::LendingError;
    let _114: ();
    let mut _115: bool;
    let mut _116: &&solana_program::pubkey::Pubkey;
    let _117: &solana_program::pubkey::Pubkey;
    let mut _118: &&solana_program::pubkey::Pubkey;
    let mut _119: !;
    let _120: ();
    let mut _121: &str;
    let _122: &str;
    let mut _123: solana_program::program_error::ProgramError;
    let mut _124: solend_sdk::error::LendingError;
    let _125: ();
    let mut _126: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _127: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _128: &solana_program::pubkey::Pubkey;
    let mut _129: &solana_program::account_info::AccountInfo<'_>;
    let mut _130: &solana_program::clock::Clock;
    let mut _131: isize;
    let mut _133: !;
    let mut _134: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _137: solend_sdk::state::Reserve;
    let mut _138: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::state::Reserve>;
    let mut _139: std::result::Result<solend_sdk::state::Reserve, solana_program::program_error::ProgramError>;
    let mut _140: &[u8];
    let _141: &&mut [u8];
    let mut _142: &std::cell::Ref<'_, &mut [u8]>;
    let _143: &std::cell::Ref<'_, &mut [u8]>;
    let _144: std::cell::Ref<'_, &mut [u8]>;
    let mut _145: &std::cell::RefCell<&mut [u8]>;
    let _146: &std::cell::RefCell<&mut [u8]>;
    let mut _147: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _148: isize;
    let mut _150: !;
    let mut _151: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _153: ();
    let mut _154: bool;
    let mut _155: &&solana_program::pubkey::Pubkey;
    let mut _156: &&solana_program::pubkey::Pubkey;
    let mut _157: !;
    let _158: ();
    let mut _159: &str;
    let _160: &str;
    let mut _161: solana_program::program_error::ProgramError;
    let mut _162: solend_sdk::error::LendingError;
    let _163: ();
    let mut _164: bool;
    let mut _165: &&solana_program::pubkey::Pubkey;
    let _166: &solana_program::pubkey::Pubkey;
    let mut _167: &&solana_program::pubkey::Pubkey;
    let mut _168: !;
    let _169: ();
    let mut _170: &str;
    let _171: &str;
    let mut _172: solana_program::program_error::ProgramError;
    let mut _173: solend_sdk::error::LendingError;
    let _174: ();
    let mut _175: bool;
    let mut _176: &&solana_program::pubkey::Pubkey;
    let _177: &solana_program::pubkey::Pubkey;
    let mut _178: &&solana_program::pubkey::Pubkey;
    let mut _179: !;
    let _180: ();
    let mut _181: &str;
    let _182: &str;
    let mut _183: solana_program::program_error::ProgramError;
    let mut _184: solend_sdk::error::LendingError;
    let _185: ();
    let mut _186: bool;
    let mut _187: &&solana_program::pubkey::Pubkey;
    let _188: &solana_program::pubkey::Pubkey;
    let mut _189: &&solana_program::pubkey::Pubkey;
    let mut _190: !;
    let _191: ();
    let mut _192: &str;
    let _193: &str;
    let mut _194: solana_program::program_error::ProgramError;
    let mut _195: solend_sdk::error::LendingError;
    let _196: ();
    let mut _197: bool;
    let mut _198: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, bool>;
    let mut _199: std::result::Result<bool, solana_program::program_error::ProgramError>;
    let mut _200: &solend_sdk::state::LastUpdate;
    let mut _201: u64;
    let mut _202: isize;
    let mut _204: !;
    let mut _205: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _207: !;
    let _208: ();
    let mut _209: &str;
    let _210: &str;
    let mut _211: solana_program::program_error::ProgramError;
    let mut _212: solend_sdk::error::LendingError;
    let mut _214: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::state::Obligation>;
    let mut _215: std::result::Result<solend_sdk::state::Obligation, solana_program::program_error::ProgramError>;
    let mut _216: &[u8];
    let _217: &&mut [u8];
    let mut _218: &std::cell::Ref<'_, &mut [u8]>;
    let _219: &std::cell::Ref<'_, &mut [u8]>;
    let _220: std::cell::Ref<'_, &mut [u8]>;
    let mut _221: &std::cell::RefCell<&mut [u8]>;
    let _222: &std::cell::RefCell<&mut [u8]>;
    let mut _223: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _224: isize;
    let mut _226: !;
    let mut _227: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _229: ();
    let mut _230: bool;
    let mut _231: &&solana_program::pubkey::Pubkey;
    let mut _232: &&solana_program::pubkey::Pubkey;
    let mut _233: !;
    let _234: ();
    let mut _235: &str;
    let _236: &str;
    let mut _237: solana_program::program_error::ProgramError;
    let mut _238: solend_sdk::error::LendingError;
    let _239: ();
    let mut _240: bool;
    let mut _241: &&solana_program::pubkey::Pubkey;
    let _242: &solana_program::pubkey::Pubkey;
    let mut _243: &&solana_program::pubkey::Pubkey;
    let mut _244: !;
    let _245: ();
    let mut _246: &str;
    let _247: &str;
    let mut _248: solana_program::program_error::ProgramError;
    let mut _249: solend_sdk::error::LendingError;
    let mut _252: (&mut solend_sdk::state::ObligationLiquidity, usize);
    let mut _253: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, (&mut solend_sdk::state::ObligationLiquidity, usize)>;
    let mut _254: std::result::Result<(&mut solend_sdk::state::ObligationLiquidity, usize), solana_program::program_error::ProgramError>;
    let mut _255: &mut solend_sdk::state::Obligation;
    let mut _256: solana_program::pubkey::Pubkey;
    let mut _257: isize;
    let mut _259: !;
    let mut _260: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _262: ();
    let mut _263: bool;
    let mut _264: &solend_sdk::math::Decimal;
    let mut _265: &solend_sdk::math::Decimal;
    let _266: solend_sdk::math::Decimal;
    let mut _267: !;
    let _268: ();
    let mut _269: &str;
    let _270: &str;
    let mut _271: solana_program::program_error::ProgramError;
    let mut _272: solend_sdk::error::LendingError;
    let _273: ();
    let mut _274: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _275: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _276: &mut solend_sdk::state::ObligationLiquidity;
    let mut _277: solend_sdk::math::Decimal;
    let mut _278: isize;
    let mut _280: !;
    let mut _281: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _285: solend_sdk::state::CalculateRepayResult;
    let mut _286: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::state::CalculateRepayResult>;
    let mut _287: std::result::Result<solend_sdk::state::CalculateRepayResult, solana_program::program_error::ProgramError>;
    let mut _288: &solend_sdk::state::Reserve;
    let mut _289: u64;
    let mut _290: solend_sdk::math::Decimal;
    let mut _291: isize;
    let mut _293: !;
    let mut _294: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _296: ();
    let mut _297: bool;
    let mut _298: u64;
    let mut _299: !;
    let _300: ();
    let mut _301: &str;
    let _302: &str;
    let mut _303: solana_program::program_error::ProgramError;
    let mut _304: solend_sdk::error::LendingError;
    let _305: ();
    let mut _306: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _307: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _308: &mut solend_sdk::state::ReserveLiquidity;
    let mut _309: u64;
    let mut _310: solend_sdk::math::Decimal;
    let mut _311: isize;
    let mut _313: !;
    let mut _314: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _316: ();
    let mut _317: &mut solend_sdk::state::LastUpdate;
    let _318: ();
    let mut _319: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _320: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _321: solend_sdk::state::Reserve;
    let mut _322: &mut [u8];
    let mut _323: &mut &mut [u8];
    let mut _324: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _325: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _326: std::cell::RefMut<'_, &mut [u8]>;
    let mut _327: &std::cell::RefCell<&mut [u8]>;
    let _328: &std::cell::RefCell<&mut [u8]>;
    let mut _329: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _330: isize;
    let mut _332: !;
    let mut _333: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _335: ();
    let mut _336: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _337: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _338: &mut solend_sdk::state::Obligation;
    let mut _339: solend_sdk::math::Decimal;
    let mut _340: usize;
    let mut _341: isize;
    let mut _343: !;
    let mut _344: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _346: ();
    let mut _347: &mut solend_sdk::state::LastUpdate;
    let _348: ();
    let mut _349: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _350: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _351: solend_sdk::state::Obligation;
    let mut _352: &mut [u8];
    let mut _353: &mut &mut [u8];
    let mut _354: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _355: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _356: std::cell::RefMut<'_, &mut [u8]>;
    let mut _357: &std::cell::RefCell<&mut [u8]>;
    let _358: &std::cell::RefCell<&mut [u8]>;
    let mut _359: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _360: isize;
    let mut _362: !;
    let mut _363: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _365: ();
    let mut _366: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _367: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _368: processor::TokenTransferParams<'_, '_>;
    let mut _369: solana_program::account_info::AccountInfo<'_>;
    let mut _370: &solana_program::account_info::AccountInfo<'_>;
    let mut _371: solana_program::account_info::AccountInfo<'_>;
    let mut _372: &solana_program::account_info::AccountInfo<'_>;
    let mut _373: u64;
    let mut _374: solana_program::account_info::AccountInfo<'_>;
    let mut _375: &solana_program::account_info::AccountInfo<'_>;
    let mut _376: &[&[u8]];
    let mut _377: &[&[u8]; 0];
    let _378: &[&[u8]; 0];
    let _379: [&[u8]; 0];
    let mut _380: solana_program::account_info::AccountInfo<'_>;
    let mut _381: &solana_program::account_info::AccountInfo<'_>;
    let mut _382: isize;
    let mut _384: !;
    let mut _385: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _387: ();
    let mut _389: &mut [u8];
    let mut _390: &mut [u8];
    let mut _391: &mut [u8];
    let mut _392: &solana_program::pubkey::Pubkey;
    let mut _393: &mut [u8];
    let mut _394: &mut [u8];
    let mut _395: bool;
    let mut _396: bool;
    let mut _397: bool;
    let mut _398: bool;
    let mut _399: isize;
    let mut _400: isize;
    let mut _401: isize;
    let mut _402: isize;
    let mut _403: isize;
    let mut _404: isize;
    let mut _405: isize;
    let mut _406: isize;
    let mut _407: isize;
    let mut _408: isize;
    let mut _409: isize;
    let mut _410: isize;
    let mut _411: isize;
    let mut _412: isize;
    let mut _413: isize;
    let mut _414: isize;
    let mut _415: isize;
    let mut _416: isize;
    let mut _417: isize;
    let mut _418: isize;
    let mut _419: isize;
    let mut _420: isize;
    let mut _421: isize;
    let mut _422: isize;
    let mut _423: isize;
    let mut _424: isize;
    let mut _425: isize;
    let mut _426: isize;
    let mut _427: isize;
    let mut _428: isize;
    let mut _429: isize;
    let mut _430: isize;
    let mut _431: isize;
    let mut _432: isize;
    let mut _433: isize;
    let mut _434: isize;
    let mut _435: isize;
    let mut _436: isize;
    let mut _437: isize;
    let mut _438: isize;
    let mut _439: isize;
    let mut _440: isize;
    let mut _441: isize;
    let mut _442: isize;
    let mut _443: isize;
    let mut _444: isize;
    let mut _445: isize;
    let mut _446: isize;
    let mut _447: isize;
    let mut _448: isize;
    let mut _449: isize;
    let mut _450: isize;
    let mut _451: isize;
    let mut _452: isize;
    let mut _453: isize;
    let mut _454: isize;
    let mut _455: isize;
    let mut _456: isize;
    let mut _457: isize;
    let mut _458: isize;
    let mut _459: isize;
    let mut _460: isize;
    let mut _461: isize;
    let mut _462: isize;
    let mut _463: isize;
    let mut _464: isize;
    let mut _465: isize;
    let mut _466: isize;
    let mut _467: isize;
    let mut _468: isize;
    let mut _469: isize;
    let mut _470: isize;
    let mut _471: isize;
    let mut _472: isize;
    let mut _473: isize;
    let mut _474: isize;
    let mut _475: isize;
    let mut _476: isize;
    let mut _477: isize;
    let mut _478: isize;
    let mut _479: isize;
    let mut _480: isize;
    let mut _481: isize;
    let mut _482: isize;
    let mut _483: isize;
    let mut _484: isize;
    let mut _485: isize;
    let mut _486: isize;
    let mut _487: isize;
    let mut _488: isize;
    let mut _489: isize;
    let mut _490: isize;
    let mut _491: isize;
    let mut _492: isize;
    let mut _493: isize;
    let mut _494: isize;
    let mut _495: isize;
    let mut _496: isize;
    let mut _497: isize;
    let mut _498: isize;
    let mut _499: isize;
    let mut _500: isize;
    let mut _501: isize;
    let mut _502: isize;
    let mut _503: isize;
    let mut _504: isize;
    let mut _505: isize;
    let mut _506: *const solend_sdk::state::Reserve;
    let mut _507: *const solend_sdk::state::Reserve;
    let mut _508: *const solend_sdk::state::Reserve;
    let mut _509: *const solend_sdk::state::Reserve;
    let mut _510: *const solend_sdk::state::Reserve;
    let mut _511: *const solend_sdk::state::Reserve;
    let mut _512: *const solend_sdk::state::Reserve;
    let mut _513: *const solend_sdk::state::Reserve;
    let mut _514: *const solend_sdk::state::Reserve;
    scope 1 {
        debug account_info_iter => _13;
        let _16: &solana_program::account_info::AccountInfo<'_>;
        let _21: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _24: &solana_program::account_info::AccountInfo<'_>;
        scope 2 {
            debug source_liquidity_info => _16;
            let _25: &solana_program::account_info::AccountInfo<'_>;
            let _30: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
            let _33: &solana_program::account_info::AccountInfo<'_>;
            scope 7 {
                debug destination_liquidity_info => _25;
                let _34: &solana_program::account_info::AccountInfo<'_>;
                let _39: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                let _42: &solana_program::account_info::AccountInfo<'_>;
                scope 12 {
                    debug repay_reserve_info => _34;
                    let _43: &solana_program::account_info::AccountInfo<'_>;
                    let _48: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                    let _51: &solana_program::account_info::AccountInfo<'_>;
                    scope 17 {
                        debug obligation_info => _43;
                        let _52: &solana_program::account_info::AccountInfo<'_>;
                        let _57: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                        let _60: &solana_program::account_info::AccountInfo<'_>;
                        scope 22 {
                            debug lending_market_info => _52;
                            let _61: &solana_program::account_info::AccountInfo<'_>;
                            let _66: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                            let _69: &solana_program::account_info::AccountInfo<'_>;
                            scope 27 {
                                debug user_transfer_authority_info => _61;
                                let _70: &solana_program::clock::Clock;
                                let _75: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                let _78: solana_program::clock::Clock;
                                scope 32 {
                                    debug clock => _70;
                                    let _79: &solana_program::account_info::AccountInfo<'_>;
                                    let _84: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                    let _87: &solana_program::account_info::AccountInfo<'_>;
                                    scope 37 {
                                        debug token_program_id => _79;
                                        let _88: solend_sdk::state::LendingMarket;
                                        let _100: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                        let _103: solend_sdk::state::LendingMarket;
                                        scope 42 {
                                            debug lending_market => _88;
                                            let _132: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                            let _135: ();
                                            let mut _136: std::boxed::Box<solend_sdk::state::Reserve>;
                                            let _149: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                            let _152: solend_sdk::state::Reserve;
                                            scope 47 {
                                                debug residual => _132;
                                                scope 48 {
                                                }
                                            }
                                            scope 49 {
                                                debug val => _135;
                                                scope 50 {
                                                }
                                            }
                                            scope 51 {
                                                debug repay_reserve => _136;
                                                let _203: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                let _206: bool;
                                                let mut _213: solend_sdk::state::Obligation;
                                                let _225: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                let _228: solend_sdk::state::Obligation;
                                                scope 56 {
                                                    debug residual => _203;
                                                    scope 57 {
                                                    }
                                                }
                                                scope 58 {
                                                    debug val => _206;
                                                    scope 59 {
                                                    }
                                                }
                                                scope 60 {
                                                    debug obligation => _213;
                                                    let _250: &mut solend_sdk::state::ObligationLiquidity;
                                                    let _251: usize;
                                                    let _258: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                    let _261: (&mut solend_sdk::state::ObligationLiquidity, usize);
                                                    scope 65 {
                                                        debug liquidity => _250;
                                                        debug liquidity_index => _251;
                                                        let _279: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                        let _282: ();
                                                        let _283: solend_sdk::math::Decimal;
                                                        let _284: u64;
                                                        let _292: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                        let _295: solend_sdk::state::CalculateRepayResult;
                                                        let mut _521: *const ();
                                                        let mut _522: usize;
                                                        let mut _523: usize;
                                                        let mut _524: usize;
                                                        let mut _525: usize;
                                                        let mut _526: bool;
                                                        scope 70 {
                                                            debug residual => _279;
                                                            scope 71 {
                                                            }
                                                        }
                                                        scope 72 {
                                                            debug val => _282;
                                                            scope 73 {
                                                            }
                                                        }
                                                        scope 74 {
                                                            debug settle_amount => _283;
                                                            debug repay_amount => _284;
                                                            let _312: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                            let _315: ();
                                                            let _331: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                            let _334: ();
                                                            let _342: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                            let _345: ();
                                                            let _361: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                            let _364: ();
                                                            let _383: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                            let _386: ();
                                                            let mut _388: &[&[u8]; 0];
                                                            let mut _515: *const ();
                                                            let mut _516: usize;
                                                            let mut _517: usize;
                                                            let mut _518: usize;
                                                            let mut _519: usize;
                                                            let mut _520: bool;
                                                            scope 79 {
                                                                debug residual => _312;
                                                                scope 80 {
                                                                }
                                                            }
                                                            scope 81 {
                                                                debug val => _315;
                                                                scope 82 {
                                                                }
                                                            }
                                                            scope 83 {
                                                                debug residual => _331;
                                                                scope 84 {
                                                                }
                                                            }
                                                            scope 85 {
                                                                debug val => _334;
                                                                scope 86 {
                                                                }
                                                            }
                                                            scope 87 {
                                                                debug residual => _342;
                                                                scope 88 {
                                                                }
                                                            }
                                                            scope 89 {
                                                                debug val => _345;
                                                                scope 90 {
                                                                }
                                                            }
                                                            scope 91 {
                                                                debug residual => _361;
                                                                scope 92 {
                                                                }
                                                            }
                                                            scope 93 {
                                                                debug val => _364;
                                                                scope 94 {
                                                                }
                                                            }
                                                            scope 95 {
                                                                debug residual => _383;
                                                                scope 96 {
                                                                }
                                                            }
                                                            scope 97 {
                                                                debug val => _386;
                                                                scope 98 {
                                                                }
                                                            }
                                                        }
                                                        scope 75 {
                                                            debug residual => _292;
                                                            scope 76 {
                                                            }
                                                        }
                                                        scope 77 {
                                                            debug val => _295;
                                                            scope 78 {
                                                            }
                                                        }
                                                    }
                                                    scope 66 {
                                                        debug residual => _258;
                                                        scope 67 {
                                                        }
                                                    }
                                                    scope 68 {
                                                        debug val => _261;
                                                        scope 69 {
                                                        }
                                                    }
                                                }
                                                scope 61 {
                                                    debug residual => _225;
                                                    scope 62 {
                                                    }
                                                }
                                                scope 63 {
                                                    debug val => _228;
                                                    scope 64 {
                                                    }
                                                }
                                            }
                                            scope 52 {
                                                debug residual => _149;
                                                scope 53 {
                                                }
                                            }
                                            scope 54 {
                                                debug val => _152;
                                                scope 55 {
                                                }
                                            }
                                        }
                                        scope 43 {
                                            debug residual => _100;
                                            scope 44 {
                                            }
                                        }
                                        scope 45 {
                                            debug val => _103;
                                            scope 46 {
                                            }
                                        }
                                    }
                                    scope 38 {
                                        debug residual => _84;
                                        scope 39 {
                                        }
                                    }
                                    scope 40 {
                                        debug val => _87;
                                        scope 41 {
                                        }
                                    }
                                }
                                scope 33 {
                                    debug residual => _75;
                                    scope 34 {
                                    }
                                }
                                scope 35 {
                                    debug val => _78;
                                    scope 36 {
                                    }
                                }
                            }
                            scope 28 {
                                debug residual => _66;
                                scope 29 {
                                }
                            }
                            scope 30 {
                                debug val => _69;
                                scope 31 {
                                }
                            }
                        }
                        scope 23 {
                            debug residual => _57;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _60;
                            scope 26 {
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _48;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _51;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _39;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _42;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _30;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _33;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _21;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _24;
            scope 6 {
            }
        }
    }

    bb0: {
        _395 = const false;
        _396 = const false;
        _398 = const false;
        _397 = const false;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = _2;
        _5 = Eq(move _6, const 0_u64);
        switchInt(move _5) -> [0: bb4, otherwise: bb1];
    }

    bb1: {
        StorageDead(_6);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = const "Liquidity amount provided cannot be zero";
        _9 = &(*_10);
        _8 = solana_program::log::sol_log(move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_9);
        StorageDead(_10);
        StorageDead(_8);
        StorageLive(_11);
        StorageLive(_12);
        _12 = InvalidAmount;
        _11 = <LendingError as Into<ProgramError>>::into(move _12) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_12);
        _0 = Result::<(), ProgramError>::Err(move _11);
        StorageDead(_11);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb212;
    }

    bb4: {
        StorageDead(_6);
        _4 = const ();
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &(*_3);
        _14 = bytemuck::core::slice::<impl [AccountInfo<'_>]>::iter(move _15) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_15);
        _13 = &mut _14;
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &mut (*_13);
        _18 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _19) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_19);
        _17 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _18) -> [return: bb7, unwind: bb223];
    }

    bb7: {
        StorageDead(_18);
        _20 = discriminant(_17);
        switchInt(move _20) -> [0: bb8, 1: bb10, otherwise: bb9];
    }

    bb8: {
        StorageLive(_24);
        _24 = ((_17 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _16 = _24;
        StorageDead(_24);
        _399 = discriminant(_17);
        StorageDead(_17);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &mut (*_13);
        _27 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _28) -> [return: bb12, unwind continue];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        StorageLive(_21);
        _21 = move ((_17 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_23);
        _23 = move _21;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _23) -> [return: bb11, unwind: bb252];
    }

    bb11: {
        StorageDead(_23);
        StorageDead(_21);
        _483 = discriminant(_17);
        StorageDead(_17);
        goto -> bb211;
    }

    bb12: {
        StorageDead(_28);
        _26 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _27) -> [return: bb13, unwind: bb223];
    }

    bb13: {
        StorageDead(_27);
        _29 = discriminant(_26);
        switchInt(move _29) -> [0: bb14, 1: bb15, otherwise: bb9];
    }

    bb14: {
        StorageLive(_33);
        _33 = ((_26 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _25 = _33;
        StorageDead(_33);
        _401 = discriminant(_26);
        StorageDead(_26);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &mut (*_13);
        _36 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _37) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_30);
        _30 = move ((_26 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_32);
        _32 = move _30;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _32) -> [return: bb16, unwind: bb251];
    }

    bb16: {
        StorageDead(_32);
        StorageDead(_30);
        _481 = discriminant(_26);
        StorageDead(_26);
        goto -> bb210;
    }

    bb17: {
        StorageDead(_37);
        _35 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _36) -> [return: bb18, unwind: bb223];
    }

    bb18: {
        StorageDead(_36);
        _38 = discriminant(_35);
        switchInt(move _38) -> [0: bb19, 1: bb20, otherwise: bb9];
    }

    bb19: {
        StorageLive(_42);
        _42 = ((_35 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _34 = _42;
        StorageDead(_42);
        _403 = discriminant(_35);
        StorageDead(_35);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = &mut (*_13);
        _45 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _46) -> [return: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_39);
        _39 = move ((_35 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_41);
        _41 = move _39;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _41) -> [return: bb21, unwind: bb250];
    }

    bb21: {
        StorageDead(_41);
        StorageDead(_39);
        _479 = discriminant(_35);
        StorageDead(_35);
        goto -> bb209;
    }

    bb22: {
        StorageDead(_46);
        _44 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _45) -> [return: bb23, unwind: bb223];
    }

    bb23: {
        StorageDead(_45);
        _47 = discriminant(_44);
        switchInt(move _47) -> [0: bb24, 1: bb25, otherwise: bb9];
    }

    bb24: {
        StorageLive(_51);
        _51 = ((_44 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _43 = _51;
        StorageDead(_51);
        _405 = discriminant(_44);
        StorageDead(_44);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &mut (*_13);
        _54 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _55) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_48);
        _48 = move ((_44 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_50);
        _50 = move _48;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _50) -> [return: bb26, unwind: bb249];
    }

    bb26: {
        StorageDead(_50);
        StorageDead(_48);
        _477 = discriminant(_44);
        StorageDead(_44);
        goto -> bb208;
    }

    bb27: {
        StorageDead(_55);
        _53 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _54) -> [return: bb28, unwind: bb223];
    }

    bb28: {
        StorageDead(_54);
        _56 = discriminant(_53);
        switchInt(move _56) -> [0: bb29, 1: bb30, otherwise: bb9];
    }

    bb29: {
        StorageLive(_60);
        _60 = ((_53 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _52 = _60;
        StorageDead(_60);
        _407 = discriminant(_53);
        StorageDead(_53);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = &mut (*_13);
        _63 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _64) -> [return: bb32, unwind continue];
    }

    bb30: {
        StorageLive(_57);
        _57 = move ((_53 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_59);
        _59 = move _57;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _59) -> [return: bb31, unwind: bb248];
    }

    bb31: {
        StorageDead(_59);
        StorageDead(_57);
        _475 = discriminant(_53);
        StorageDead(_53);
        goto -> bb207;
    }

    bb32: {
        StorageDead(_64);
        _62 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _63) -> [return: bb33, unwind: bb223];
    }

    bb33: {
        StorageDead(_63);
        _65 = discriminant(_62);
        switchInt(move _65) -> [0: bb34, 1: bb35, otherwise: bb9];
    }

    bb34: {
        StorageLive(_69);
        _69 = ((_62 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _61 = _69;
        StorageDead(_69);
        _409 = discriminant(_62);
        StorageDead(_62);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _73 = <Clock as Sysvar>::get() -> [return: bb37, unwind continue];
    }

    bb35: {
        StorageLive(_66);
        _66 = move ((_62 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_68);
        _68 = move _66;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _68) -> [return: bb36, unwind: bb247];
    }

    bb36: {
        StorageDead(_68);
        StorageDead(_66);
        _473 = discriminant(_62);
        StorageDead(_62);
        goto -> bb206;
    }

    bb37: {
        _72 = <Result<Clock, ProgramError> as Try>::branch(move _73) -> [return: bb38, unwind: bb223];
    }

    bb38: {
        StorageDead(_73);
        _74 = discriminant(_72);
        switchInt(move _74) -> [0: bb39, 1: bb40, otherwise: bb9];
    }

    bb39: {
        StorageLive(_78);
        _78 = move ((_72 as Continue).0: solana_program::clock::Clock);
        _71 = move _78;
        StorageDead(_78);
        _70 = &_71;
        _411 = discriminant(_72);
        StorageDead(_72);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = &mut (*_13);
        _81 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _82) -> [return: bb42, unwind continue];
    }

    bb40: {
        StorageLive(_75);
        _75 = move ((_72 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_77);
        _77 = move _75;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _77) -> [return: bb41, unwind: bb246];
    }

    bb41: {
        StorageDead(_77);
        StorageDead(_75);
        _471 = discriminant(_72);
        StorageDead(_72);
        goto -> bb205;
    }

    bb42: {
        StorageDead(_82);
        _80 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _81) -> [return: bb43, unwind: bb223];
    }

    bb43: {
        StorageDead(_81);
        _83 = discriminant(_80);
        switchInt(move _83) -> [0: bb44, 1: bb45, otherwise: bb9];
    }

    bb44: {
        StorageLive(_87);
        _87 = ((_80 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _79 = _87;
        StorageDead(_87);
        _413 = discriminant(_80);
        StorageDead(_80);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        _98 = &((*_52).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _97 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _98) -> [return: bb47, unwind continue];
    }

    bb45: {
        StorageLive(_84);
        _84 = move ((_80 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_86);
        _86 = move _84;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _86) -> [return: bb46, unwind: bb245];
    }

    bb46: {
        StorageDead(_86);
        StorageDead(_84);
        _469 = discriminant(_80);
        StorageDead(_80);
        goto -> bb204;
    }

    bb47: {
        _96 = &(*_97);
        StorageDead(_98);
        _95 = RefCell::<&mut [u8]>::borrow(move _96) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_96);
        _94 = &_95;
        _93 = &(*_94);
        _92 = <Ref<'_, &mut [u8]> as Deref>::deref(move _93) -> [return: bb49, unwind: bb222];
    }

    bb49: {
        _389 = deref_copy (*_92);
        _91 = &(*_389);
        StorageDead(_93);
        _90 = <LendingMarket as Pack>::unpack(move _91) -> [return: bb50, unwind: bb222];
    }

    bb50: {
        StorageDead(_91);
        _89 = <Result<LendingMarket, ProgramError> as Try>::branch(move _90) -> [return: bb51, unwind: bb222];
    }

    bb51: {
        StorageDead(_90);
        _99 = discriminant(_89);
        switchInt(move _99) -> [0: bb52, 1: bb53, otherwise: bb9];
    }

    bb52: {
        StorageLive(_103);
        _103 = move ((_89 as Continue).0: solend_sdk::state::LendingMarket);
        _88 = move _103;
        StorageDead(_103);
        _415 = discriminant(_89);
        drop(_95) -> [return: bb55, unwind: bb223];
    }

    bb53: {
        StorageLive(_100);
        _100 = move ((_89 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_102);
        _102 = move _100;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _102) -> [return: bb54, unwind: bb244];
    }

    bb54: {
        StorageDead(_102);
        StorageDead(_100);
        _467 = discriminant(_89);
        drop(_95) -> [return: bb202, unwind: bb223];
    }

    bb55: {
        StorageDead(_97);
        StorageDead(_95);
        StorageDead(_94);
        StorageDead(_92);
        StorageDead(_89);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        _106 = &((*_52).3: &solana_program::pubkey::Pubkey);
        StorageLive(_107);
        _107 = &_1;
        _105 = <&Pubkey as PartialEq>::ne(move _106, move _107) -> [return: bb56, unwind continue];
    }

    bb56: {
        switchInt(move _105) -> [0: bb60, otherwise: bb57];
    }

    bb57: {
        StorageDead(_107);
        StorageDead(_106);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        _111 = const "Lending market provided is not owned by the lending program";
        _110 = &(*_111);
        _109 = solana_program::log::sol_log(move _110) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_110);
        StorageDead(_111);
        StorageDead(_109);
        StorageLive(_112);
        StorageLive(_113);
        _113 = solend_sdk::error::LendingError::InvalidAccountOwner;
        _112 = <LendingError as Into<ProgramError>>::into(move _113) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_113);
        _0 = Result::<(), ProgramError>::Err(move _112);
        StorageDead(_112);
        StorageDead(_105);
        StorageDead(_104);
        goto -> bb203;
    }

    bb60: {
        StorageDead(_107);
        StorageDead(_106);
        _104 = const ();
        StorageDead(_105);
        StorageDead(_104);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _117 = &(_88.4: solana_program::pubkey::Pubkey);
        _116 = &_117;
        StorageLive(_118);
        _118 = &((*_79).0: &solana_program::pubkey::Pubkey);
        _115 = <&Pubkey as PartialEq>::ne(move _116, move _118) -> [return: bb61, unwind continue];
    }

    bb61: {
        switchInt(move _115) -> [0: bb65, otherwise: bb62];
    }

    bb62: {
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_116);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        _122 = const "Lending market token program does not match the token program provided";
        _121 = &(*_122);
        _120 = solana_program::log::sol_log(move _121) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_121);
        StorageDead(_122);
        StorageDead(_120);
        StorageLive(_123);
        StorageLive(_124);
        _124 = InvalidTokenProgram;
        _123 = <LendingError as Into<ProgramError>>::into(move _124) -> [return: bb64, unwind continue];
    }

    bb64: {
        StorageDead(_124);
        _0 = Result::<(), ProgramError>::Err(move _123);
        StorageDead(_123);
        StorageDead(_115);
        StorageDead(_114);
        goto -> bb203;
    }

    bb65: {
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_116);
        _114 = const ();
        StorageDead(_115);
        StorageDead(_114);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        _128 = &(*_1);
        StorageLive(_129);
        _129 = &(*_34);
        StorageLive(_130);
        _130 = &(*_70);
        _127 = _refresh_reserve_interest(move _128, move _129, move _130) -> [return: bb66, unwind continue];
    }

    bb66: {
        StorageDead(_130);
        StorageDead(_129);
        StorageDead(_128);
        _126 = <Result<(), ProgramError> as Try>::branch(move _127) -> [return: bb67, unwind: bb223];
    }

    bb67: {
        StorageDead(_127);
        _131 = discriminant(_126);
        switchInt(move _131) -> [0: bb68, 1: bb69, otherwise: bb9];
    }

    bb68: {
        StorageLive(_135);
        _135 = ((_126 as Continue).0: ());
        _125 = _135;
        StorageDead(_135);
        _417 = discriminant(_126);
        StorageDead(_126);
        StorageDead(_125);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        _147 = &((*_34).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _146 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _147) -> [return: bb71, unwind continue];
    }

    bb69: {
        StorageLive(_132);
        _132 = move ((_126 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_134);
        _134 = move _132;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _134) -> [return: bb70, unwind: bb243];
    }

    bb70: {
        StorageDead(_134);
        StorageDead(_132);
        _465 = discriminant(_126);
        StorageDead(_126);
        StorageDead(_125);
        goto -> bb203;
    }

    bb71: {
        _145 = &(*_146);
        StorageDead(_147);
        _144 = RefCell::<&mut [u8]>::borrow(move _145) -> [return: bb72, unwind continue];
    }

    bb72: {
        StorageDead(_145);
        _143 = &_144;
        _142 = &(*_143);
        _141 = <Ref<'_, &mut [u8]> as Deref>::deref(move _142) -> [return: bb73, unwind: bb221];
    }

    bb73: {
        _390 = deref_copy (*_141);
        _140 = &(*_390);
        StorageDead(_142);
        _139 = <Reserve as Pack>::unpack(move _140) -> [return: bb74, unwind: bb221];
    }

    bb74: {
        StorageDead(_140);
        _138 = <Result<Reserve, ProgramError> as Try>::branch(move _139) -> [return: bb75, unwind: bb221];
    }

    bb75: {
        _397 = const true;
        _398 = const true;
        StorageDead(_139);
        _148 = discriminant(_138);
        switchInt(move _148) -> [0: bb76, 1: bb77, otherwise: bb9];
    }

    bb76: {
        StorageLive(_152);
        _152 = move ((_138 as Continue).0: solend_sdk::state::Reserve);
        _137 = move _152;
        StorageDead(_152);
        _136 = Box::<Reserve>::new(move _137) -> [return: bb79, unwind: bb242];
    }

    bb77: {
        StorageLive(_149);
        _149 = move ((_138 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_151);
        _151 = move _149;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _151) -> [return: bb78, unwind: bb242];
    }

    bb78: {
        StorageDead(_151);
        StorageDead(_149);
        StorageDead(_137);
        _463 = discriminant(_138);
        drop(_144) -> [return: bb200, unwind: bb223];
    }

    bb79: {
        StorageDead(_137);
        _419 = discriminant(_138);
        drop(_144) -> [return: bb80, unwind: bb220];
    }

    bb80: {
        StorageDead(_146);
        StorageDead(_144);
        StorageDead(_143);
        StorageDead(_141);
        _397 = const false;
        _398 = const false;
        StorageDead(_138);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        _155 = &((*_34).3: &solana_program::pubkey::Pubkey);
        StorageLive(_156);
        _156 = &_1;
        _154 = <&Pubkey as PartialEq>::ne(move _155, move _156) -> [return: bb81, unwind: bb220];
    }

    bb81: {
        switchInt(move _154) -> [0: bb85, otherwise: bb82];
    }

    bb82: {
        StorageDead(_156);
        StorageDead(_155);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        _160 = const "Repay reserve provided is not owned by the lending program";
        _159 = &(*_160);
        _158 = solana_program::log::sol_log(move _159) -> [return: bb83, unwind: bb220];
    }

    bb83: {
        StorageDead(_159);
        StorageDead(_160);
        StorageDead(_158);
        StorageLive(_161);
        StorageLive(_162);
        _162 = solend_sdk::error::LendingError::InvalidAccountOwner;
        _161 = <LendingError as Into<ProgramError>>::into(move _162) -> [return: bb84, unwind: bb220];
    }

    bb84: {
        StorageDead(_162);
        _0 = Result::<(), ProgramError>::Err(move _161);
        StorageDead(_161);
        StorageDead(_154);
        StorageDead(_153);
        goto -> bb199;
    }

    bb85: {
        StorageDead(_156);
        StorageDead(_155);
        _153 = const ();
        StorageDead(_154);
        StorageDead(_153);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        _506 = (((_136.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _166 = &((*_506).2: solana_program::pubkey::Pubkey);
        _165 = &_166;
        StorageLive(_167);
        _167 = &((*_52).0: &solana_program::pubkey::Pubkey);
        _164 = <&Pubkey as PartialEq>::ne(move _165, move _167) -> [return: bb86, unwind: bb220];
    }

    bb86: {
        switchInt(move _164) -> [0: bb90, otherwise: bb87];
    }

    bb87: {
        StorageDead(_167);
        StorageDead(_166);
        StorageDead(_165);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        _171 = const "Repay reserve lending market does not match the lending market provided";
        _170 = &(*_171);
        _169 = solana_program::log::sol_log(move _170) -> [return: bb88, unwind: bb220];
    }

    bb88: {
        StorageDead(_170);
        StorageDead(_171);
        StorageDead(_169);
        StorageLive(_172);
        StorageLive(_173);
        _173 = InvalidAccountInput;
        _172 = <LendingError as Into<ProgramError>>::into(move _173) -> [return: bb89, unwind: bb220];
    }

    bb89: {
        StorageDead(_173);
        _0 = Result::<(), ProgramError>::Err(move _172);
        StorageDead(_172);
        StorageDead(_164);
        StorageDead(_163);
        goto -> bb199;
    }

    bb90: {
        StorageDead(_167);
        StorageDead(_166);
        StorageDead(_165);
        _163 = const ();
        StorageDead(_164);
        StorageDead(_163);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        _507 = (((_136.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _177 = &(((*_507).3: solend_sdk::state::ReserveLiquidity).2: solana_program::pubkey::Pubkey);
        _176 = &_177;
        StorageLive(_178);
        _178 = &((*_16).0: &solana_program::pubkey::Pubkey);
        _175 = <&Pubkey as PartialEq>::eq(move _176, move _178) -> [return: bb91, unwind: bb220];
    }

    bb91: {
        switchInt(move _175) -> [0: bb95, otherwise: bb92];
    }

    bb92: {
        StorageDead(_178);
        StorageDead(_177);
        StorageDead(_176);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        _182 = const "Repay reserve liquidity supply cannot be used as the source liquidity provided";
        _181 = &(*_182);
        _180 = solana_program::log::sol_log(move _181) -> [return: bb93, unwind: bb220];
    }

    bb93: {
        StorageDead(_181);
        StorageDead(_182);
        StorageDead(_180);
        StorageLive(_183);
        StorageLive(_184);
        _184 = InvalidAccountInput;
        _183 = <LendingError as Into<ProgramError>>::into(move _184) -> [return: bb94, unwind: bb220];
    }

    bb94: {
        StorageDead(_184);
        _0 = Result::<(), ProgramError>::Err(move _183);
        StorageDead(_183);
        StorageDead(_175);
        StorageDead(_174);
        goto -> bb199;
    }

    bb95: {
        StorageDead(_178);
        StorageDead(_177);
        StorageDead(_176);
        _174 = const ();
        StorageDead(_175);
        StorageDead(_174);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        _508 = (((_136.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _188 = &(((*_508).3: solend_sdk::state::ReserveLiquidity).2: solana_program::pubkey::Pubkey);
        _187 = &_188;
        StorageLive(_189);
        _189 = &((*_25).0: &solana_program::pubkey::Pubkey);
        _186 = <&Pubkey as PartialEq>::ne(move _187, move _189) -> [return: bb96, unwind: bb220];
    }

    bb96: {
        switchInt(move _186) -> [0: bb100, otherwise: bb97];
    }

    bb97: {
        StorageDead(_189);
        StorageDead(_188);
        StorageDead(_187);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        _193 = const "Repay reserve liquidity supply must be used as the destination liquidity provided";
        _192 = &(*_193);
        _191 = solana_program::log::sol_log(move _192) -> [return: bb98, unwind: bb220];
    }

    bb98: {
        StorageDead(_192);
        StorageDead(_193);
        StorageDead(_191);
        StorageLive(_194);
        StorageLive(_195);
        _195 = InvalidAccountInput;
        _194 = <LendingError as Into<ProgramError>>::into(move _195) -> [return: bb99, unwind: bb220];
    }

    bb99: {
        StorageDead(_195);
        _0 = Result::<(), ProgramError>::Err(move _194);
        StorageDead(_194);
        StorageDead(_186);
        StorageDead(_185);
        goto -> bb199;
    }

    bb100: {
        StorageDead(_189);
        StorageDead(_188);
        StorageDead(_187);
        _185 = const ();
        StorageDead(_186);
        StorageDead(_185);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        _509 = (((_136.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _200 = &((*_509).1: solend_sdk::state::LastUpdate);
        StorageLive(_201);
        _201 = ((*_70).0: u64);
        _199 = LastUpdate::is_stale(move _200, move _201) -> [return: bb101, unwind: bb220];
    }

    bb101: {
        StorageDead(_201);
        StorageDead(_200);
        _198 = <Result<bool, ProgramError> as Try>::branch(move _199) -> [return: bb102, unwind: bb220];
    }

    bb102: {
        StorageDead(_199);
        _202 = discriminant(_198);
        switchInt(move _202) -> [0: bb103, 1: bb104, otherwise: bb9];
    }

    bb103: {
        StorageLive(_206);
        _206 = ((_198 as Continue).0: bool);
        _197 = _206;
        StorageDead(_206);
        switchInt(move _197) -> [0: bb225, otherwise: bb224];
    }

    bb104: {
        StorageLive(_203);
        _203 = move ((_198 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_205);
        _205 = move _203;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _205) -> [return: bb105, unwind: bb241];
    }

    bb105: {
        StorageDead(_205);
        StorageDead(_203);
        _461 = discriminant(_198);
        StorageDead(_198);
        goto -> bb198;
    }

    bb106: {
        StorageDead(_209);
        StorageDead(_210);
        StorageDead(_208);
        StorageLive(_211);
        StorageLive(_212);
        _212 = ReserveStale;
        _211 = <LendingError as Into<ProgramError>>::into(move _212) -> [return: bb107, unwind: bb220];
    }

    bb107: {
        StorageDead(_212);
        _0 = Result::<(), ProgramError>::Err(move _211);
        StorageDead(_211);
        goto -> bb198;
    }

    bb108: {
        _221 = &(*_222);
        StorageDead(_223);
        _220 = RefCell::<&mut [u8]>::borrow(move _221) -> [return: bb109, unwind: bb220];
    }

    bb109: {
        StorageDead(_221);
        _219 = &_220;
        _218 = &(*_219);
        _217 = <Ref<'_, &mut [u8]> as Deref>::deref(move _218) -> [return: bb110, unwind: bb219];
    }

    bb110: {
        _391 = deref_copy (*_217);
        _216 = &(*_391);
        StorageDead(_218);
        _215 = <Obligation as Pack>::unpack(move _216) -> [return: bb111, unwind: bb219];
    }

    bb111: {
        StorageDead(_216);
        _214 = <Result<Obligation, ProgramError> as Try>::branch(move _215) -> [return: bb112, unwind: bb219];
    }

    bb112: {
        StorageDead(_215);
        _224 = discriminant(_214);
        switchInt(move _224) -> [0: bb113, 1: bb114, otherwise: bb9];
    }

    bb113: {
        StorageLive(_228);
        _228 = move ((_214 as Continue).0: solend_sdk::state::Obligation);
        _395 = const true;
        _213 = move _228;
        StorageDead(_228);
        _425 = discriminant(_214);
        drop(_220) -> [return: bb116, unwind: bb239];
    }

    bb114: {
        StorageLive(_225);
        _225 = move ((_214 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_227);
        _227 = move _225;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _227) -> [return: bb115, unwind: bb240];
    }

    bb115: {
        StorageDead(_227);
        StorageDead(_225);
        _459 = discriminant(_214);
        drop(_220) -> [return: bb196, unwind: bb220];
    }

    bb116: {
        StorageDead(_222);
        StorageDead(_220);
        StorageDead(_219);
        StorageDead(_217);
        StorageDead(_214);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        _231 = &((*_43).3: &solana_program::pubkey::Pubkey);
        StorageLive(_232);
        _232 = &_1;
        _230 = <&Pubkey as PartialEq>::ne(move _231, move _232) -> [return: bb117, unwind: bb239];
    }

    bb117: {
        switchInt(move _230) -> [0: bb121, otherwise: bb118];
    }

    bb118: {
        StorageDead(_232);
        StorageDead(_231);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        _236 = const "Obligation provided is not owned by the lending program";
        _235 = &(*_236);
        _234 = solana_program::log::sol_log(move _235) -> [return: bb119, unwind: bb239];
    }

    bb119: {
        StorageDead(_235);
        StorageDead(_236);
        StorageDead(_234);
        StorageLive(_237);
        StorageLive(_238);
        _238 = solend_sdk::error::LendingError::InvalidAccountOwner;
        _237 = <LendingError as Into<ProgramError>>::into(move _238) -> [return: bb120, unwind: bb239];
    }

    bb120: {
        StorageDead(_238);
        _0 = Result::<(), ProgramError>::Err(move _237);
        StorageDead(_237);
        StorageDead(_230);
        StorageDead(_229);
        goto -> bb227;
    }

    bb121: {
        StorageDead(_232);
        StorageDead(_231);
        _229 = const ();
        StorageDead(_230);
        StorageDead(_229);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        _242 = &(_213.2: solana_program::pubkey::Pubkey);
        _241 = &_242;
        StorageLive(_243);
        _243 = &((*_52).0: &solana_program::pubkey::Pubkey);
        _240 = <&Pubkey as PartialEq>::ne(move _241, move _243) -> [return: bb122, unwind: bb239];
    }

    bb122: {
        switchInt(move _240) -> [0: bb126, otherwise: bb123];
    }

    bb123: {
        StorageDead(_243);
        StorageDead(_242);
        StorageDead(_241);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        _247 = const "Obligation lending market does not match the lending market provided";
        _246 = &(*_247);
        _245 = solana_program::log::sol_log(move _246) -> [return: bb124, unwind: bb239];
    }

    bb124: {
        StorageDead(_246);
        StorageDead(_247);
        StorageDead(_245);
        StorageLive(_248);
        StorageLive(_249);
        _249 = InvalidAccountInput;
        _248 = <LendingError as Into<ProgramError>>::into(move _249) -> [return: bb125, unwind: bb239];
    }

    bb125: {
        StorageDead(_249);
        _0 = Result::<(), ProgramError>::Err(move _248);
        StorageDead(_248);
        StorageDead(_240);
        StorageDead(_239);
        goto -> bb227;
    }

    bb126: {
        StorageDead(_243);
        StorageDead(_242);
        StorageDead(_241);
        _239 = const ();
        StorageDead(_240);
        StorageDead(_239);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        _255 = &mut _213;
        StorageLive(_256);
        _392 = deref_copy ((*_34).0: &solana_program::pubkey::Pubkey);
        _256 = (*_392);
        _254 = Obligation::find_liquidity_in_borrows_mut(move _255, move _256) -> [return: bb127, unwind: bb239];
    }

    bb127: {
        StorageDead(_256);
        StorageDead(_255);
        _253 = <Result<(&mut ObligationLiquidity, usize), ProgramError> as Try>::branch(move _254) -> [return: bb128, unwind: bb239];
    }

    bb128: {
        StorageDead(_254);
        _257 = discriminant(_253);
        switchInt(move _257) -> [0: bb129, 1: bb130, otherwise: bb9];
    }

    bb129: {
        StorageLive(_261);
        _261 = move ((_253 as Continue).0: (&mut solend_sdk::state::ObligationLiquidity, usize));
        _252 = move _261;
        StorageDead(_261);
        StorageLive(_250);
        _250 = move (_252.0: &mut solend_sdk::state::ObligationLiquidity);
        StorageLive(_251);
        _251 = (_252.1: usize);
        _427 = discriminant(_253);
        StorageDead(_253);
        StorageDead(_252);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        _264 = &((*_250).2: solend_sdk::math::Decimal);
        StorageLive(_265);
        StorageLive(_266);
        _266 = Decimal::zero() -> [return: bb132, unwind: bb239];
    }

    bb130: {
        StorageLive(_258);
        _258 = move ((_253 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_260);
        _260 = move _258;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _260) -> [return: bb131, unwind: bb237];
    }

    bb131: {
        StorageDead(_260);
        StorageDead(_258);
        _457 = discriminant(_253);
        StorageDead(_253);
        StorageDead(_252);
        goto -> bb227;
    }

    bb132: {
        _265 = &_266;
        _263 = <Decimal as PartialEq>::eq(move _264, move _265) -> [return: bb133, unwind: bb239];
    }

    bb133: {
        switchInt(move _263) -> [0: bb137, otherwise: bb134];
    }

    bb134: {
        StorageDead(_266);
        StorageDead(_265);
        StorageDead(_264);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        _270 = const "Liquidity borrowed amount is zero";
        _269 = &(*_270);
        _268 = solana_program::log::sol_log(move _269) -> [return: bb135, unwind: bb239];
    }

    bb135: {
        StorageDead(_269);
        StorageDead(_270);
        StorageDead(_268);
        StorageLive(_271);
        StorageLive(_272);
        _272 = ObligationLiquidityEmpty;
        _271 = <LendingError as Into<ProgramError>>::into(move _272) -> [return: bb136, unwind: bb239];
    }

    bb136: {
        StorageDead(_272);
        _0 = Result::<(), ProgramError>::Err(move _271);
        StorageDead(_271);
        StorageDead(_263);
        StorageDead(_262);
        goto -> bb195;
    }

    bb137: {
        StorageDead(_266);
        StorageDead(_265);
        StorageDead(_264);
        _262 = const ();
        StorageDead(_263);
        StorageDead(_262);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        _276 = &mut (*_250);
        StorageLive(_277);
        _510 = (((_136.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _521 = _510 as *const () (PtrToPtr);
        _522 = _521 as usize (Transmute);
        _523 = AlignOf(solend_sdk::state::Reserve);
        _524 = Sub(_523, const 1_usize);
        _525 = BitAnd(_522, _524);
        _526 = Eq(_525, const 0_usize);
        assert(_526, "misaligned pointer dereference: address must be a multiple of {} but is {}", _523, _522) -> [success: bb254, unwind unreachable];
    }

    bb138: {
        StorageDead(_277);
        StorageDead(_276);
        _274 = <Result<(), ProgramError> as Try>::branch(move _275) -> [return: bb139, unwind: bb239];
    }

    bb139: {
        StorageDead(_275);
        _278 = discriminant(_274);
        switchInt(move _278) -> [0: bb140, 1: bb141, otherwise: bb9];
    }

    bb140: {
        StorageLive(_282);
        _282 = ((_274 as Continue).0: ());
        _273 = _282;
        StorageDead(_282);
        _429 = discriminant(_274);
        StorageDead(_274);
        StorageDead(_273);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        _511 = (((_136.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _288 = &(*_511);
        StorageLive(_289);
        _289 = _2;
        StorageLive(_290);
        _290 = ((*_250).2: solend_sdk::math::Decimal);
        _287 = Reserve::calculate_repay(move _288, move _289, move _290) -> [return: bb143, unwind: bb239];
    }

    bb141: {
        StorageLive(_279);
        _279 = move ((_274 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_281);
        _281 = move _279;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _281) -> [return: bb142, unwind: bb236];
    }

    bb142: {
        StorageDead(_281);
        StorageDead(_279);
        _455 = discriminant(_274);
        StorageDead(_274);
        StorageDead(_273);
        goto -> bb195;
    }

    bb143: {
        StorageDead(_290);
        StorageDead(_289);
        StorageDead(_288);
        _286 = <Result<CalculateRepayResult, ProgramError> as Try>::branch(move _287) -> [return: bb144, unwind: bb239];
    }

    bb144: {
        StorageDead(_287);
        _291 = discriminant(_286);
        switchInt(move _291) -> [0: bb145, 1: bb146, otherwise: bb9];
    }

    bb145: {
        StorageLive(_295);
        _295 = move ((_286 as Continue).0: solend_sdk::state::CalculateRepayResult);
        _285 = move _295;
        StorageDead(_295);
        StorageLive(_283);
        _283 = (_285.0: solend_sdk::math::Decimal);
        StorageLive(_284);
        _284 = (_285.1: u64);
        _431 = discriminant(_286);
        StorageDead(_286);
        StorageDead(_285);
        StorageLive(_296);
        StorageLive(_297);
        StorageLive(_298);
        _298 = _284;
        _297 = Eq(move _298, const 0_u64);
        switchInt(move _297) -> [0: bb151, otherwise: bb148];
    }

    bb146: {
        StorageLive(_292);
        _292 = move ((_286 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_294);
        _294 = move _292;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _294) -> [return: bb147, unwind: bb235];
    }

    bb147: {
        StorageDead(_294);
        StorageDead(_292);
        _453 = discriminant(_286);
        StorageDead(_286);
        StorageDead(_285);
        goto -> bb195;
    }

    bb148: {
        StorageDead(_298);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        _302 = const "Repay amount is too small to transfer liquidity";
        _301 = &(*_302);
        _300 = solana_program::log::sol_log(move _301) -> [return: bb149, unwind: bb239];
    }

    bb149: {
        StorageDead(_301);
        StorageDead(_302);
        StorageDead(_300);
        StorageLive(_303);
        StorageLive(_304);
        _304 = RepayTooSmall;
        _303 = <LendingError as Into<ProgramError>>::into(move _304) -> [return: bb150, unwind: bb239];
    }

    bb150: {
        StorageDead(_304);
        _0 = Result::<(), ProgramError>::Err(move _303);
        StorageDead(_303);
        StorageDead(_297);
        StorageDead(_296);
        goto -> bb194;
    }

    bb151: {
        StorageDead(_298);
        _296 = const ();
        StorageDead(_297);
        StorageDead(_296);
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        _512 = (((_136.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _308 = &mut ((*_512).3: solend_sdk::state::ReserveLiquidity);
        StorageLive(_309);
        _309 = _284;
        StorageLive(_310);
        _310 = _283;
        _307 = ReserveLiquidity::repay(move _308, move _309, move _310) -> [return: bb152, unwind: bb239];
    }

    bb152: {
        StorageDead(_310);
        StorageDead(_309);
        StorageDead(_308);
        _306 = <Result<(), ProgramError> as Try>::branch(move _307) -> [return: bb153, unwind: bb239];
    }

    bb153: {
        StorageDead(_307);
        _311 = discriminant(_306);
        switchInt(move _311) -> [0: bb154, 1: bb155, otherwise: bb9];
    }

    bb154: {
        StorageLive(_315);
        _315 = ((_306 as Continue).0: ());
        _305 = _315;
        StorageDead(_315);
        _433 = discriminant(_306);
        StorageDead(_306);
        StorageDead(_305);
        StorageLive(_316);
        StorageLive(_317);
        _513 = (((_136.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _317 = &mut ((*_513).1: solend_sdk::state::LastUpdate);
        _316 = LastUpdate::mark_stale(move _317) -> [return: bb157, unwind: bb239];
    }

    bb155: {
        StorageLive(_312);
        _312 = move ((_306 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_314);
        _314 = move _312;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _314) -> [return: bb156, unwind: bb234];
    }

    bb156: {
        StorageDead(_314);
        StorageDead(_312);
        _451 = discriminant(_306);
        StorageDead(_306);
        StorageDead(_305);
        goto -> bb194;
    }

    bb157: {
        StorageDead(_317);
        StorageDead(_316);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        _514 = (((_136.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _515 = _514 as *const () (PtrToPtr);
        _516 = _515 as usize (Transmute);
        _517 = AlignOf(solend_sdk::state::Reserve);
        _518 = Sub(_517, const 1_usize);
        _519 = BitAnd(_516, _518);
        _520 = Eq(_519, const 0_usize);
        assert(_520, "misaligned pointer dereference: address must be a multiple of {} but is {}", _517, _516) -> [success: bb253, unwind unreachable];
    }

    bb158: {
        _327 = &(*_328);
        StorageDead(_329);
        _326 = RefCell::<&mut [u8]>::borrow_mut(move _327) -> [return: bb159, unwind: bb239];
    }

    bb159: {
        StorageDead(_327);
        _325 = &mut _326;
        _324 = &mut (*_325);
        _323 = <RefMut<'_, &mut [u8]> as DerefMut>::deref_mut(move _324) -> [return: bb160, unwind: bb218];
    }

    bb160: {
        _393 = deref_copy (*_323);
        _322 = &mut (*_393);
        StorageDead(_324);
        _320 = <Reserve as Pack>::pack(move _321, move _322) -> [return: bb161, unwind: bb218];
    }

    bb161: {
        StorageDead(_322);
        StorageDead(_321);
        _319 = <Result<(), ProgramError> as Try>::branch(move _320) -> [return: bb162, unwind: bb218];
    }

    bb162: {
        StorageDead(_320);
        _330 = discriminant(_319);
        switchInt(move _330) -> [0: bb163, 1: bb164, otherwise: bb9];
    }

    bb163: {
        StorageLive(_334);
        _334 = ((_319 as Continue).0: ());
        _318 = _334;
        StorageDead(_334);
        _435 = discriminant(_319);
        drop(_326) -> [return: bb166, unwind: bb239];
    }

    bb164: {
        StorageLive(_331);
        _331 = move ((_319 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_333);
        _333 = move _331;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _333) -> [return: bb165, unwind: bb233];
    }

    bb165: {
        StorageDead(_333);
        StorageDead(_331);
        _449 = discriminant(_319);
        drop(_326) -> [return: bb193, unwind: bb239];
    }

    bb166: {
        StorageDead(_328);
        StorageDead(_326);
        StorageDead(_325);
        StorageDead(_323);
        StorageDead(_319);
        StorageDead(_318);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        StorageLive(_338);
        _338 = &mut _213;
        StorageLive(_339);
        _339 = _283;
        StorageLive(_340);
        _340 = _251;
        _337 = Obligation::repay(move _338, move _339, move _340) -> [return: bb167, unwind: bb239];
    }

    bb167: {
        StorageDead(_340);
        StorageDead(_339);
        StorageDead(_338);
        _336 = <Result<(), ProgramError> as Try>::branch(move _337) -> [return: bb168, unwind: bb239];
    }

    bb168: {
        StorageDead(_337);
        _341 = discriminant(_336);
        switchInt(move _341) -> [0: bb169, 1: bb170, otherwise: bb9];
    }

    bb169: {
        StorageLive(_345);
        _345 = ((_336 as Continue).0: ());
        _335 = _345;
        StorageDead(_345);
        _437 = discriminant(_336);
        StorageDead(_336);
        StorageDead(_335);
        StorageLive(_346);
        StorageLive(_347);
        _347 = &mut (_213.1: solend_sdk::state::LastUpdate);
        _346 = LastUpdate::mark_stale(move _347) -> [return: bb172, unwind: bb239];
    }

    bb170: {
        StorageLive(_342);
        _342 = move ((_336 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_344);
        _344 = move _342;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _344) -> [return: bb171, unwind: bb232];
    }

    bb171: {
        StorageDead(_344);
        StorageDead(_342);
        _447 = discriminant(_336);
        StorageDead(_336);
        StorageDead(_335);
        goto -> bb194;
    }

    bb172: {
        StorageDead(_347);
        StorageDead(_346);
        StorageLive(_348);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        _395 = const false;
        _396 = const true;
        _351 = move _213;
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        StorageLive(_355);
        StorageLive(_356);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        _359 = &((*_43).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _358 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _359) -> [return: bb173, unwind: bb217];
    }

    bb173: {
        _357 = &(*_358);
        StorageDead(_359);
        _356 = RefCell::<&mut [u8]>::borrow_mut(move _357) -> [return: bb174, unwind: bb217];
    }

    bb174: {
        StorageDead(_357);
        _355 = &mut _356;
        _354 = &mut (*_355);
        _353 = <RefMut<'_, &mut [u8]> as DerefMut>::deref_mut(move _354) -> [return: bb175, unwind: bb231];
    }

    bb175: {
        _394 = deref_copy (*_353);
        _352 = &mut (*_394);
        StorageDead(_354);
        _396 = const false;
        _350 = <Obligation as Pack>::pack(move _351, move _352) -> [return: bb176, unwind: bb231];
    }

    bb176: {
        StorageDead(_352);
        _396 = const false;
        StorageDead(_351);
        _349 = <Result<(), ProgramError> as Try>::branch(move _350) -> [return: bb177, unwind: bb216];
    }

    bb177: {
        StorageDead(_350);
        _360 = discriminant(_349);
        switchInt(move _360) -> [0: bb178, 1: bb179, otherwise: bb9];
    }

    bb178: {
        StorageLive(_364);
        _364 = ((_349 as Continue).0: ());
        _348 = _364;
        StorageDead(_364);
        _439 = discriminant(_349);
        drop(_356) -> [return: bb181, unwind: bb239];
    }

    bb179: {
        StorageLive(_361);
        _361 = move ((_349 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_363);
        _363 = move _361;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _363) -> [return: bb180, unwind: bb229];
    }

    bb180: {
        StorageDead(_363);
        StorageDead(_361);
        _445 = discriminant(_349);
        drop(_356) -> [return: bb192, unwind: bb239];
    }

    bb181: {
        StorageDead(_358);
        StorageDead(_356);
        StorageDead(_355);
        StorageDead(_353);
        StorageDead(_349);
        StorageDead(_348);
        StorageLive(_365);
        StorageLive(_366);
        StorageLive(_367);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        _370 = &(*_16);
        _369 = <AccountInfo<'_> as Clone>::clone(move _370) -> [return: bb182, unwind: bb239];
    }

    bb182: {
        StorageDead(_370);
        StorageLive(_371);
        StorageLive(_372);
        _372 = &(*_25);
        _371 = <AccountInfo<'_> as Clone>::clone(move _372) -> [return: bb183, unwind: bb215];
    }

    bb183: {
        StorageDead(_372);
        StorageLive(_373);
        _373 = _284;
        StorageLive(_374);
        StorageLive(_375);
        _375 = &(*_61);
        _374 = <AccountInfo<'_> as Clone>::clone(move _375) -> [return: bb184, unwind: bb214];
    }

    bb184: {
        StorageDead(_375);
        StorageLive(_376);
        StorageLive(_377);
        StorageLive(_378);
        _388 = const _;
        _378 = &(*_388);
        _377 = &(*_378);
        _376 = move _377 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_377);
        StorageLive(_380);
        StorageLive(_381);
        _381 = &(*_79);
        _380 = <AccountInfo<'_> as Clone>::clone(move _381) -> [return: bb185, unwind: bb213];
    }

    bb185: {
        StorageDead(_381);
        _368 = TokenTransferParams::<'_, '_> { source: move _369, destination: move _371, amount: move _373, authority: move _374, authority_signer_seeds: move _376, token_program: move _380 };
        StorageDead(_380);
        StorageDead(_376);
        StorageDead(_374);
        StorageDead(_373);
        StorageDead(_371);
        StorageDead(_369);
        _367 = spl_token_transfer(move _368) -> [return: bb186, unwind: bb239];
    }

    bb186: {
        StorageDead(_368);
        _366 = <Result<(), ProgramError> as Try>::branch(move _367) -> [return: bb187, unwind: bb239];
    }

    bb187: {
        StorageDead(_367);
        _382 = discriminant(_366);
        switchInt(move _382) -> [0: bb188, 1: bb189, otherwise: bb9];
    }

    bb188: {
        StorageLive(_386);
        _386 = ((_366 as Continue).0: ());
        _365 = _386;
        StorageDead(_386);
        _441 = discriminant(_366);
        StorageDead(_378);
        StorageDead(_366);
        StorageDead(_365);
        StorageLive(_387);
        _387 = ();
        _0 = Result::<(), ProgramError>::Ok(move _387);
        StorageDead(_387);
        StorageDead(_284);
        StorageDead(_283);
        StorageDead(_251);
        StorageDead(_250);
        _395 = const false;
        StorageDead(_213);
        drop(_136) -> [return: bb191, unwind: bb223];
    }

    bb189: {
        StorageLive(_383);
        _383 = move ((_366 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_385);
        _385 = move _383;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _385) -> [return: bb190, unwind: bb228];
    }

    bb190: {
        StorageDead(_385);
        StorageDead(_383);
        _443 = discriminant(_366);
        StorageDead(_378);
        StorageDead(_366);
        StorageDead(_365);
        goto -> bb194;
    }

    bb191: {
        StorageDead(_136);
        StorageDead(_88);
        StorageDead(_79);
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_61);
        StorageDead(_52);
        StorageDead(_43);
        StorageDead(_34);
        StorageDead(_25);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb212;
    }

    bb192: {
        StorageDead(_358);
        StorageDead(_356);
        StorageDead(_355);
        StorageDead(_353);
        StorageDead(_349);
        StorageDead(_348);
        goto -> bb194;
    }

    bb193: {
        StorageDead(_328);
        StorageDead(_326);
        StorageDead(_325);
        StorageDead(_323);
        StorageDead(_319);
        StorageDead(_318);
        goto -> bb194;
    }

    bb194: {
        StorageDead(_284);
        StorageDead(_283);
        goto -> bb195;
    }

    bb195: {
        StorageDead(_251);
        StorageDead(_250);
        goto -> bb227;
    }

    bb196: {
        StorageDead(_222);
        StorageDead(_220);
        StorageDead(_219);
        StorageDead(_217);
        StorageDead(_214);
        goto -> bb197;
    }

    bb197: {
        _395 = const false;
        StorageDead(_213);
        goto -> bb199;
    }

    bb198: {
        StorageDead(_197);
        StorageDead(_196);
        goto -> bb199;
    }

    bb199: {
        drop(_136) -> [return: bb201, unwind: bb223];
    }

    bb200: {
        StorageDead(_146);
        StorageDead(_144);
        StorageDead(_143);
        StorageDead(_141);
        _397 = const false;
        _398 = const false;
        StorageDead(_138);
        goto -> bb201;
    }

    bb201: {
        StorageDead(_136);
        goto -> bb203;
    }

    bb202: {
        StorageDead(_97);
        StorageDead(_95);
        StorageDead(_94);
        StorageDead(_92);
        StorageDead(_89);
        goto -> bb203;
    }

    bb203: {
        StorageDead(_88);
        goto -> bb204;
    }

    bb204: {
        StorageDead(_79);
        goto -> bb205;
    }

    bb205: {
        StorageDead(_71);
        StorageDead(_70);
        goto -> bb206;
    }

    bb206: {
        StorageDead(_61);
        goto -> bb207;
    }

    bb207: {
        StorageDead(_52);
        goto -> bb208;
    }

    bb208: {
        StorageDead(_43);
        goto -> bb209;
    }

    bb209: {
        StorageDead(_34);
        goto -> bb210;
    }

    bb210: {
        StorageDead(_25);
        goto -> bb211;
    }

    bb211: {
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb212;
    }

    bb212: {
        return;
    }

    bb213 (cleanup): {
        drop(_374) -> [return: bb214, unwind terminate(cleanup)];
    }

    bb214 (cleanup): {
        drop(_371) -> [return: bb215, unwind terminate(cleanup)];
    }

    bb215 (cleanup): {
        drop(_369) -> [return: bb239, unwind terminate(cleanup)];
    }

    bb216 (cleanup): {
        drop(_356) -> [return: bb239, unwind terminate(cleanup)];
    }

    bb217 (cleanup): {
        drop(_351) -> [return: bb239, unwind terminate(cleanup)];
    }

    bb218 (cleanup): {
        drop(_326) -> [return: bb239, unwind terminate(cleanup)];
    }

    bb219 (cleanup): {
        drop(_220) -> [return: bb220, unwind terminate(cleanup)];
    }

    bb220 (cleanup): {
        drop(_136) -> [return: bb223, unwind terminate(cleanup)];
    }

    bb221 (cleanup): {
        drop(_144) -> [return: bb223, unwind terminate(cleanup)];
    }

    bb222 (cleanup): {
        drop(_95) -> [return: bb223, unwind terminate(cleanup)];
    }

    bb223 (cleanup): {
        resume;
    }

    bb224: {
        _421 = discriminant(_198);
        StorageDead(_198);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        _210 = const "Repay reserve is stale and must be refreshed in the current slot";
        _209 = &(*_210);
        _208 = solana_program::log::sol_log(move _209) -> [return: bb106, unwind: bb220];
    }

    bb225: {
        _423 = discriminant(_198);
        StorageDead(_198);
        _196 = const ();
        StorageDead(_197);
        StorageDead(_196);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        _223 = &((*_43).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _222 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _223) -> [return: bb108, unwind: bb220];
    }

    bb226: {
        drop(_213) -> [return: bb197, unwind: bb220];
    }

    bb227: {
        switchInt(_395) -> [0: bb197, otherwise: bb226];
    }

    bb228 (cleanup): {
        _485 = discriminant(_366);
        goto -> bb239;
    }

    bb229 (cleanup): {
        _486 = discriminant(_349);
        goto -> bb216;
    }

    bb230 (cleanup): {
        drop(_351) -> [return: bb216, unwind terminate(cleanup)];
    }

    bb231 (cleanup): {
        switchInt(_396) -> [0: bb216, otherwise: bb230];
    }

    bb232 (cleanup): {
        _487 = discriminant(_336);
        goto -> bb239;
    }

    bb233 (cleanup): {
        _488 = discriminant(_319);
        goto -> bb218;
    }

    bb234 (cleanup): {
        _489 = discriminant(_306);
        goto -> bb239;
    }

    bb235 (cleanup): {
        _490 = discriminant(_286);
        goto -> bb239;
    }

    bb236 (cleanup): {
        _491 = discriminant(_274);
        goto -> bb239;
    }

    bb237 (cleanup): {
        _492 = discriminant(_253);
        goto -> bb239;
    }

    bb238 (cleanup): {
        drop(_213) -> [return: bb220, unwind terminate(cleanup)];
    }

    bb239 (cleanup): {
        switchInt(_395) -> [0: bb220, otherwise: bb238];
    }

    bb240 (cleanup): {
        _493 = discriminant(_214);
        goto -> bb219;
    }

    bb241 (cleanup): {
        _494 = discriminant(_198);
        goto -> bb220;
    }

    bb242 (cleanup): {
        _495 = discriminant(_138);
        goto -> bb221;
    }

    bb243 (cleanup): {
        _496 = discriminant(_126);
        goto -> bb223;
    }

    bb244 (cleanup): {
        _497 = discriminant(_89);
        goto -> bb222;
    }

    bb245 (cleanup): {
        _498 = discriminant(_80);
        goto -> bb223;
    }

    bb246 (cleanup): {
        _499 = discriminant(_72);
        goto -> bb223;
    }

    bb247 (cleanup): {
        _500 = discriminant(_62);
        goto -> bb223;
    }

    bb248 (cleanup): {
        _501 = discriminant(_53);
        goto -> bb223;
    }

    bb249 (cleanup): {
        _502 = discriminant(_44);
        goto -> bb223;
    }

    bb250 (cleanup): {
        _503 = discriminant(_35);
        goto -> bb223;
    }

    bb251 (cleanup): {
        _504 = discriminant(_26);
        goto -> bb223;
    }

    bb252 (cleanup): {
        _505 = discriminant(_17);
        goto -> bb223;
    }

    bb253: {
        _321 = move (*_514);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        _329 = &((*_34).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _328 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _329) -> [return: bb158, unwind: bb239];
    }

    bb254: {
        _277 = (((*_510).3: solend_sdk::state::ReserveLiquidity).7: solend_sdk::math::Decimal);
        _275 = ObligationLiquidity::accrue_interest(move _276, move _277) -> [return: bb138, unwind: bb239];
    }
}
