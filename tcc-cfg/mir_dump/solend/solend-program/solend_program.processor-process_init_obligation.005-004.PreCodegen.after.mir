// MIR for `process_init_obligation` after PreCodegen

fn process_init_obligation(_1: &Pubkey, _2: &[AccountInfo<'_>]) -> Result<(), ProgramError> {
    debug program_id => _1;
    debug accounts => _2;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _3: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _4: std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _5: &[solana_program::account_info::AccountInfo<'_>];
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _8: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _9: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _10: isize;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _17: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _18: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _19: isize;
    let mut _21: !;
    let mut _22: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _26: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _27: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _28: isize;
    let mut _30: !;
    let mut _31: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _34: solana_program::clock::Clock;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solana_program::clock::Clock>;
    let mut _36: std::result::Result<solana_program::clock::Clock, solana_program::program_error::ProgramError>;
    let mut _37: isize;
    let mut _39: !;
    let mut _40: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _43: solana_program::rent::Rent;
    let mut _44: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solana_program::rent::Rent>;
    let mut _45: std::result::Result<solana_program::rent::Rent, solana_program::program_error::ProgramError>;
    let mut _46: &solana_program::account_info::AccountInfo<'_>;
    let _47: &solana_program::account_info::AccountInfo<'_>;
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _49: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _50: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _51: isize;
    let mut _53: !;
    let mut _54: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _56: isize;
    let mut _58: !;
    let mut _59: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _62: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _63: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _64: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _65: isize;
    let mut _67: !;
    let mut _68: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _70: ();
    let mut _71: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _72: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _73: &solana_program::rent::Rent;
    let mut _74: &solana_program::account_info::AccountInfo<'_>;
    let mut _75: isize;
    let mut _77: !;
    let mut _78: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _81: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::state::Obligation>;
    let mut _82: std::result::Result<solend_sdk::state::Obligation, solana_program::program_error::ProgramError>;
    let mut _83: &solana_program::account_info::AccountInfo<'_>;
    let mut _84: isize;
    let mut _86: !;
    let mut _87: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _89: ();
    let mut _90: bool;
    let mut _91: &&solana_program::pubkey::Pubkey;
    let mut _92: &&solana_program::pubkey::Pubkey;
    let mut _93: !;
    let _94: ();
    let mut _95: &str;
    let _96: &str;
    let mut _97: solana_program::program_error::ProgramError;
    let mut _98: solend_sdk::error::LendingError;
    let mut _100: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::state::LendingMarket>;
    let mut _101: std::result::Result<solend_sdk::state::LendingMarket, solana_program::program_error::ProgramError>;
    let mut _102: &[u8];
    let _103: &&mut [u8];
    let mut _104: &std::cell::Ref<'_, &mut [u8]>;
    let _105: &std::cell::Ref<'_, &mut [u8]>;
    let _106: std::cell::Ref<'_, &mut [u8]>;
    let mut _107: &std::cell::RefCell<&mut [u8]>;
    let _108: &std::cell::RefCell<&mut [u8]>;
    let mut _109: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _110: isize;
    let mut _112: !;
    let mut _113: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _115: ();
    let mut _116: bool;
    let mut _117: &&solana_program::pubkey::Pubkey;
    let mut _118: &&solana_program::pubkey::Pubkey;
    let mut _119: !;
    let _120: ();
    let mut _121: &str;
    let _122: &str;
    let mut _123: solana_program::program_error::ProgramError;
    let mut _124: solend_sdk::error::LendingError;
    let _125: ();
    let mut _126: bool;
    let mut _127: &&solana_program::pubkey::Pubkey;
    let _128: &solana_program::pubkey::Pubkey;
    let mut _129: &&solana_program::pubkey::Pubkey;
    let mut _130: !;
    let _131: ();
    let mut _132: &str;
    let _133: &str;
    let mut _134: solana_program::program_error::ProgramError;
    let mut _135: solend_sdk::error::LendingError;
    let _136: ();
    let mut _137: bool;
    let mut _138: !;
    let _139: ();
    let mut _140: &str;
    let _141: &str;
    let mut _142: solana_program::program_error::ProgramError;
    let mut _143: solend_sdk::error::LendingError;
    let _144: ();
    let mut _145: &mut solend_sdk::state::Obligation;
    let mut _146: solend_sdk::state::InitObligationParams;
    let mut _147: u64;
    let mut _148: solana_program::pubkey::Pubkey;
    let mut _149: solana_program::pubkey::Pubkey;
    let mut _150: std::vec::Vec<solend_sdk::state::ObligationCollateral>;
    let mut _151: std::vec::Vec<solend_sdk::state::ObligationLiquidity>;
    let _152: ();
    let mut _153: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _154: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _155: solend_sdk::state::Obligation;
    let mut _156: &mut [u8];
    let mut _157: &mut &mut [u8];
    let mut _158: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _159: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _160: std::cell::RefMut<'_, &mut [u8]>;
    let mut _161: &std::cell::RefCell<&mut [u8]>;
    let _162: &std::cell::RefCell<&mut [u8]>;
    let mut _163: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _164: isize;
    let mut _166: !;
    let mut _167: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _169: ();
    let mut _170: &mut [u8];
    let mut _171: &solana_program::pubkey::Pubkey;
    let mut _172: &solana_program::pubkey::Pubkey;
    let mut _173: &mut [u8];
    let mut _174: bool;
    let mut _175: bool;
    let mut _176: bool;
    let mut _177: isize;
    let mut _178: isize;
    let mut _179: isize;
    let mut _180: isize;
    let mut _181: isize;
    let mut _182: isize;
    let mut _183: isize;
    let mut _184: isize;
    let mut _185: isize;
    let mut _186: isize;
    let mut _187: isize;
    let mut _188: isize;
    let mut _189: isize;
    let mut _190: isize;
    let mut _191: isize;
    let mut _192: isize;
    let mut _193: isize;
    let mut _194: isize;
    let mut _195: isize;
    let mut _196: isize;
    let mut _197: isize;
    let mut _198: isize;
    let mut _199: isize;
    let mut _200: isize;
    let mut _201: isize;
    let mut _202: isize;
    let mut _203: isize;
    let mut _204: isize;
    let mut _205: isize;
    let mut _206: isize;
    let mut _207: isize;
    let mut _208: isize;
    let mut _209: isize;
    let mut _210: isize;
    let mut _211: isize;
    let mut _212: isize;
    let mut _213: isize;
    let mut _214: isize;
    let mut _215: isize;
    let mut _216: isize;
    let mut _217: isize;
    let mut _218: isize;
    let mut _219: isize;
    let mut _220: isize;
    let mut _221: isize;
    let mut _222: isize;
    let mut _223: isize;
    let mut _224: isize;
    let mut _225: isize;
    let mut _226: isize;
    let mut _227: isize;
    let mut _228: isize;
    let mut _229: isize;
    let mut _230: isize;
    let mut _231: isize;
    scope 1 {
        debug account_info_iter => _3;
        let _6: &solana_program::account_info::AccountInfo<'_>;
        let _11: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _14: &solana_program::account_info::AccountInfo<'_>;
        scope 2 {
            debug obligation_info => _6;
            let _15: &solana_program::account_info::AccountInfo<'_>;
            let _20: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
            let _23: &solana_program::account_info::AccountInfo<'_>;
            scope 7 {
                debug lending_market_info => _15;
                let _24: &solana_program::account_info::AccountInfo<'_>;
                let _29: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                let _32: &solana_program::account_info::AccountInfo<'_>;
                scope 12 {
                    debug obligation_owner_info => _24;
                    let _33: &solana_program::clock::Clock;
                    let _38: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                    let _41: solana_program::clock::Clock;
                    scope 17 {
                        debug clock => _33;
                        let _42: &solana_program::rent::Rent;
                        let _52: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                        let _55: &solana_program::account_info::AccountInfo<'_>;
                        let _57: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                        let _60: solana_program::rent::Rent;
                        scope 22 {
                            debug rent => _42;
                            let _61: &solana_program::account_info::AccountInfo<'_>;
                            let _66: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                            let _69: &solana_program::account_info::AccountInfo<'_>;
                            scope 31 {
                                debug token_program_id => _61;
                                let _76: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                let _79: ();
                                let mut _80: solend_sdk::state::Obligation;
                                let _85: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                let _88: solend_sdk::state::Obligation;
                                scope 36 {
                                    debug residual => _76;
                                    scope 37 {
                                    }
                                }
                                scope 38 {
                                    debug val => _79;
                                    scope 39 {
                                    }
                                }
                                scope 40 {
                                    debug obligation => _80;
                                    let _99: solend_sdk::state::LendingMarket;
                                    let _111: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                    let _114: solend_sdk::state::LendingMarket;
                                    scope 45 {
                                        debug lending_market => _99;
                                        let _165: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                        let _168: ();
                                        scope 50 {
                                            debug residual => _165;
                                            scope 51 {
                                            }
                                        }
                                        scope 52 {
                                            debug val => _168;
                                            scope 53 {
                                            }
                                        }
                                    }
                                    scope 46 {
                                        debug residual => _111;
                                        scope 47 {
                                        }
                                    }
                                    scope 48 {
                                        debug val => _114;
                                        scope 49 {
                                        }
                                    }
                                }
                                scope 41 {
                                    debug residual => _85;
                                    scope 42 {
                                    }
                                }
                                scope 43 {
                                    debug val => _88;
                                    scope 44 {
                                    }
                                }
                            }
                            scope 32 {
                                debug residual => _66;
                                scope 33 {
                                }
                            }
                            scope 34 {
                                debug val => _69;
                                scope 35 {
                                }
                            }
                        }
                        scope 23 {
                            debug residual => _52;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _55;
                            scope 26 {
                            }
                        }
                        scope 27 {
                            debug residual => _57;
                            scope 28 {
                            }
                        }
                        scope 29 {
                            debug val => _60;
                            scope 30 {
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _38;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _41;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _29;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _32;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _20;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _23;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _11;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _14;
            scope 6 {
            }
        }
    }

    bb0: {
        _174 = const false;
        _176 = const false;
        _175 = const false;
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &(*_2);
        _4 = bytemuck::core::slice::<impl [AccountInfo<'_>]>::iter(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        _3 = &mut _4;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &mut (*_3);
        _8 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_9);
        _7 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _8) -> [return: bb3, unwind: bb104];
    }

    bb3: {
        StorageDead(_8);
        _10 = discriminant(_7);
        switchInt(move _10) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_14);
        _14 = ((_7 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _6 = _14;
        StorageDead(_14);
        _177 = discriminant(_7);
        StorageDead(_7);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = &mut (*_3);
        _17 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _18) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_11);
        _11 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_13);
        _13 = move _11;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _13) -> [return: bb7, unwind: bb121];
    }

    bb7: {
        StorageDead(_13);
        StorageDead(_11);
        _219 = discriminant(_7);
        StorageDead(_7);
        goto -> bb98;
    }

    bb8: {
        StorageDead(_18);
        _16 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _17) -> [return: bb9, unwind: bb104];
    }

    bb9: {
        StorageDead(_17);
        _19 = discriminant(_16);
        switchInt(move _19) -> [0: bb10, 1: bb11, otherwise: bb5];
    }

    bb10: {
        StorageLive(_23);
        _23 = ((_16 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _15 = _23;
        StorageDead(_23);
        _179 = discriminant(_16);
        StorageDead(_16);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &mut (*_3);
        _26 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _27) -> [return: bb13, unwind continue];
    }

    bb11: {
        StorageLive(_20);
        _20 = move ((_16 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_22);
        _22 = move _20;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _22) -> [return: bb12, unwind: bb120];
    }

    bb12: {
        StorageDead(_22);
        StorageDead(_20);
        _217 = discriminant(_16);
        StorageDead(_16);
        goto -> bb97;
    }

    bb13: {
        StorageDead(_27);
        _25 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _26) -> [return: bb14, unwind: bb104];
    }

    bb14: {
        StorageDead(_26);
        _28 = discriminant(_25);
        switchInt(move _28) -> [0: bb15, 1: bb16, otherwise: bb5];
    }

    bb15: {
        StorageLive(_32);
        _32 = ((_25 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _24 = _32;
        StorageDead(_32);
        _181 = discriminant(_25);
        StorageDead(_25);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = <Clock as Sysvar>::get() -> [return: bb18, unwind continue];
    }

    bb16: {
        StorageLive(_29);
        _29 = move ((_25 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_31);
        _31 = move _29;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _31) -> [return: bb17, unwind: bb119];
    }

    bb17: {
        StorageDead(_31);
        StorageDead(_29);
        _215 = discriminant(_25);
        StorageDead(_25);
        goto -> bb96;
    }

    bb18: {
        _35 = <Result<Clock, ProgramError> as Try>::branch(move _36) -> [return: bb19, unwind: bb104];
    }

    bb19: {
        StorageDead(_36);
        _37 = discriminant(_35);
        switchInt(move _37) -> [0: bb20, 1: bb21, otherwise: bb5];
    }

    bb20: {
        StorageLive(_41);
        _41 = move ((_35 as Continue).0: solana_program::clock::Clock);
        _34 = move _41;
        StorageDead(_41);
        _33 = &_34;
        _183 = discriminant(_35);
        StorageDead(_35);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = &mut (*_3);
        _49 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _50) -> [return: bb23, unwind continue];
    }

    bb21: {
        StorageLive(_38);
        _38 = move ((_35 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_40);
        _40 = move _38;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _40) -> [return: bb22, unwind: bb118];
    }

    bb22: {
        StorageDead(_40);
        StorageDead(_38);
        _213 = discriminant(_35);
        StorageDead(_35);
        goto -> bb95;
    }

    bb23: {
        StorageDead(_50);
        _48 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _49) -> [return: bb24, unwind: bb104];
    }

    bb24: {
        _175 = const true;
        StorageDead(_49);
        _51 = discriminant(_48);
        switchInt(move _51) -> [0: bb25, 1: bb26, otherwise: bb5];
    }

    bb25: {
        StorageLive(_55);
        _55 = ((_48 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _47 = &(*_55);
        StorageDead(_55);
        _46 = &(*_47);
        _45 = <Rent as Sysvar>::from_account_info(move _46) -> [return: bb28, unwind: bb117];
    }

    bb26: {
        StorageLive(_52);
        _52 = move ((_48 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_54);
        _54 = move _52;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _54) -> [return: bb27, unwind: bb117];
    }

    bb27: {
        StorageDead(_54);
        StorageDead(_52);
        StorageDead(_46);
        StorageDead(_45);
        goto -> bb93;
    }

    bb28: {
        StorageDead(_46);
        _44 = <Result<Rent, ProgramError> as Try>::branch(move _45) -> [return: bb29, unwind: bb117];
    }

    bb29: {
        StorageDead(_45);
        _56 = discriminant(_44);
        switchInt(move _56) -> [0: bb30, 1: bb31, otherwise: bb5];
    }

    bb30: {
        StorageLive(_60);
        _60 = ((_44 as Continue).0: solana_program::rent::Rent);
        _43 = _60;
        StorageDead(_60);
        _42 = &_43;
        _185 = discriminant(_44);
        _187 = discriminant(_48);
        _175 = const false;
        StorageDead(_48);
        StorageDead(_47);
        StorageDead(_44);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = &mut (*_3);
        _63 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _64) -> [return: bb33, unwind continue];
    }

    bb31: {
        StorageLive(_57);
        _57 = move ((_44 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_59);
        _59 = move _57;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _59) -> [return: bb32, unwind: bb116];
    }

    bb32: {
        StorageDead(_59);
        StorageDead(_57);
        _209 = discriminant(_44);
        goto -> bb93;
    }

    bb33: {
        StorageDead(_64);
        _62 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _63) -> [return: bb34, unwind: bb104];
    }

    bb34: {
        StorageDead(_63);
        _65 = discriminant(_62);
        switchInt(move _65) -> [0: bb35, 1: bb36, otherwise: bb5];
    }

    bb35: {
        StorageLive(_69);
        _69 = ((_62 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _61 = _69;
        StorageDead(_69);
        _189 = discriminant(_62);
        StorageDead(_62);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _73 = &(*_42);
        StorageLive(_74);
        _74 = &(*_6);
        _72 = assert_rent_exempt(move _73, move _74) -> [return: bb38, unwind continue];
    }

    bb36: {
        StorageLive(_66);
        _66 = move ((_62 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_68);
        _68 = move _66;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _68) -> [return: bb37, unwind: bb115];
    }

    bb37: {
        StorageDead(_68);
        StorageDead(_66);
        _207 = discriminant(_62);
        StorageDead(_62);
        goto -> bb92;
    }

    bb38: {
        StorageDead(_74);
        StorageDead(_73);
        _71 = <Result<(), ProgramError> as Try>::branch(move _72) -> [return: bb39, unwind: bb104];
    }

    bb39: {
        StorageDead(_72);
        _75 = discriminant(_71);
        switchInt(move _75) -> [0: bb40, 1: bb41, otherwise: bb5];
    }

    bb40: {
        StorageLive(_79);
        _79 = ((_71 as Continue).0: ());
        _70 = _79;
        StorageDead(_79);
        _191 = discriminant(_71);
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _83 = &(*_6);
        _82 = assert_uninitialized::<Obligation>(move _83) -> [return: bb43, unwind continue];
    }

    bb41: {
        StorageLive(_76);
        _76 = move ((_71 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_78);
        _78 = move _76;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _78) -> [return: bb42, unwind: bb114];
    }

    bb42: {
        StorageDead(_78);
        StorageDead(_76);
        _205 = discriminant(_71);
        StorageDead(_71);
        StorageDead(_70);
        goto -> bb92;
    }

    bb43: {
        StorageDead(_83);
        _81 = <Result<Obligation, ProgramError> as Try>::branch(move _82) -> [return: bb44, unwind: bb104];
    }

    bb44: {
        StorageDead(_82);
        _84 = discriminant(_81);
        switchInt(move _84) -> [0: bb45, 1: bb46, otherwise: bb5];
    }

    bb45: {
        StorageLive(_88);
        _88 = move ((_81 as Continue).0: solend_sdk::state::Obligation);
        _174 = const true;
        _80 = move _88;
        StorageDead(_88);
        _193 = discriminant(_81);
        StorageDead(_81);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = &((*_6).3: &solana_program::pubkey::Pubkey);
        StorageLive(_92);
        _92 = &_1;
        _90 = <&Pubkey as PartialEq>::ne(move _91, move _92) -> [return: bb48, unwind: bb112];
    }

    bb46: {
        StorageLive(_85);
        _85 = move ((_81 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_87);
        _87 = move _85;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _87) -> [return: bb47, unwind: bb113];
    }

    bb47: {
        StorageDead(_87);
        StorageDead(_85);
        _203 = discriminant(_81);
        StorageDead(_81);
        goto -> bb91;
    }

    bb48: {
        switchInt(move _90) -> [0: bb52, otherwise: bb49];
    }

    bb49: {
        StorageDead(_92);
        StorageDead(_91);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = const "Obligation provided is not owned by the lending program";
        _95 = &(*_96);
        _94 = solana_program::log::sol_log(move _95) -> [return: bb50, unwind: bb112];
    }

    bb50: {
        StorageDead(_95);
        StorageDead(_96);
        StorageDead(_94);
        StorageLive(_97);
        StorageLive(_98);
        _98 = solend_sdk::error::LendingError::InvalidAccountOwner;
        _97 = <LendingError as Into<ProgramError>>::into(move _98) -> [return: bb51, unwind: bb112];
    }

    bb51: {
        StorageDead(_98);
        _0 = Result::<(), ProgramError>::Err(move _97);
        StorageDead(_97);
        StorageDead(_90);
        StorageDead(_89);
        goto -> bb106;
    }

    bb52: {
        StorageDead(_92);
        StorageDead(_91);
        _89 = const ();
        StorageDead(_90);
        StorageDead(_89);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        _109 = &((*_15).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _108 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _109) -> [return: bb53, unwind: bb112];
    }

    bb53: {
        _107 = &(*_108);
        StorageDead(_109);
        _106 = RefCell::<&mut [u8]>::borrow(move _107) -> [return: bb54, unwind: bb112];
    }

    bb54: {
        StorageDead(_107);
        _105 = &_106;
        _104 = &(*_105);
        _103 = <Ref<'_, &mut [u8]> as Deref>::deref(move _104) -> [return: bb55, unwind: bb103];
    }

    bb55: {
        _170 = deref_copy (*_103);
        _102 = &(*_170);
        StorageDead(_104);
        _101 = <LendingMarket as Pack>::unpack(move _102) -> [return: bb56, unwind: bb103];
    }

    bb56: {
        StorageDead(_102);
        _100 = <Result<LendingMarket, ProgramError> as Try>::branch(move _101) -> [return: bb57, unwind: bb103];
    }

    bb57: {
        StorageDead(_101);
        _110 = discriminant(_100);
        switchInt(move _110) -> [0: bb58, 1: bb59, otherwise: bb5];
    }

    bb58: {
        StorageLive(_114);
        _114 = move ((_100 as Continue).0: solend_sdk::state::LendingMarket);
        _99 = move _114;
        StorageDead(_114);
        _195 = discriminant(_100);
        drop(_106) -> [return: bb61, unwind: bb112];
    }

    bb59: {
        StorageLive(_111);
        _111 = move ((_100 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_113);
        _113 = move _111;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _113) -> [return: bb60, unwind: bb110];
    }

    bb60: {
        StorageDead(_113);
        StorageDead(_111);
        _201 = discriminant(_100);
        drop(_106) -> [return: bb89, unwind: bb112];
    }

    bb61: {
        StorageDead(_108);
        StorageDead(_106);
        StorageDead(_105);
        StorageDead(_103);
        StorageDead(_100);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _117 = &((*_15).3: &solana_program::pubkey::Pubkey);
        StorageLive(_118);
        _118 = &_1;
        _116 = <&Pubkey as PartialEq>::ne(move _117, move _118) -> [return: bb62, unwind: bb112];
    }

    bb62: {
        switchInt(move _116) -> [0: bb66, otherwise: bb63];
    }

    bb63: {
        StorageDead(_118);
        StorageDead(_117);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        _122 = const "Lending market provided is not owned by the lending program";
        _121 = &(*_122);
        _120 = solana_program::log::sol_log(move _121) -> [return: bb64, unwind: bb112];
    }

    bb64: {
        StorageDead(_121);
        StorageDead(_122);
        StorageDead(_120);
        StorageLive(_123);
        StorageLive(_124);
        _124 = solend_sdk::error::LendingError::InvalidAccountOwner;
        _123 = <LendingError as Into<ProgramError>>::into(move _124) -> [return: bb65, unwind: bb112];
    }

    bb65: {
        StorageDead(_124);
        _0 = Result::<(), ProgramError>::Err(move _123);
        StorageDead(_123);
        StorageDead(_116);
        StorageDead(_115);
        goto -> bb90;
    }

    bb66: {
        StorageDead(_118);
        StorageDead(_117);
        _115 = const ();
        StorageDead(_116);
        StorageDead(_115);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        _128 = &(_99.4: solana_program::pubkey::Pubkey);
        _127 = &_128;
        StorageLive(_129);
        _129 = &((*_61).0: &solana_program::pubkey::Pubkey);
        _126 = <&Pubkey as PartialEq>::ne(move _127, move _129) -> [return: bb67, unwind: bb112];
    }

    bb67: {
        switchInt(move _126) -> [0: bb71, otherwise: bb68];
    }

    bb68: {
        StorageDead(_129);
        StorageDead(_128);
        StorageDead(_127);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        _133 = const "Lending market token program does not match the token program provided";
        _132 = &(*_133);
        _131 = solana_program::log::sol_log(move _132) -> [return: bb69, unwind: bb112];
    }

    bb69: {
        StorageDead(_132);
        StorageDead(_133);
        StorageDead(_131);
        StorageLive(_134);
        StorageLive(_135);
        _135 = InvalidTokenProgram;
        _134 = <LendingError as Into<ProgramError>>::into(move _135) -> [return: bb70, unwind: bb112];
    }

    bb70: {
        StorageDead(_135);
        _0 = Result::<(), ProgramError>::Err(move _134);
        StorageDead(_134);
        StorageDead(_126);
        StorageDead(_125);
        goto -> bb90;
    }

    bb71: {
        StorageDead(_129);
        StorageDead(_128);
        StorageDead(_127);
        _125 = const ();
        StorageDead(_126);
        StorageDead(_125);
        StorageLive(_136);
        StorageLive(_137);
        _137 = ((*_24).5: bool);
        switchInt(move _137) -> [0: bb73, otherwise: bb72];
    }

    bb72: {
        _136 = const ();
        StorageDead(_137);
        StorageDead(_136);
        StorageLive(_144);
        StorageLive(_145);
        _145 = &mut _80;
        StorageLive(_146);
        StorageLive(_147);
        _147 = ((*_33).0: u64);
        StorageLive(_148);
        _171 = deref_copy ((*_15).0: &solana_program::pubkey::Pubkey);
        _148 = (*_171);
        StorageLive(_149);
        _172 = deref_copy ((*_24).0: &solana_program::pubkey::Pubkey);
        _149 = (*_172);
        StorageLive(_150);
        _150 = Vec::<ObligationCollateral>::new() -> [return: bb76, unwind: bb112];
    }

    bb73: {
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        _141 = const "Obligation owner provided must be a signer";
        _140 = &(*_141);
        _139 = solana_program::log::sol_log(move _140) -> [return: bb74, unwind: bb112];
    }

    bb74: {
        StorageDead(_140);
        StorageDead(_141);
        StorageDead(_139);
        StorageLive(_142);
        StorageLive(_143);
        _143 = InvalidSigner;
        _142 = <LendingError as Into<ProgramError>>::into(move _143) -> [return: bb75, unwind: bb112];
    }

    bb75: {
        StorageDead(_143);
        _0 = Result::<(), ProgramError>::Err(move _142);
        StorageDead(_142);
        StorageDead(_137);
        StorageDead(_136);
        goto -> bb90;
    }

    bb76: {
        StorageLive(_151);
        _151 = Vec::<ObligationLiquidity>::new() -> [return: bb77, unwind: bb102];
    }

    bb77: {
        _146 = InitObligationParams { current_slot: move _147, lending_market: move _148, owner: move _149, deposits: move _150, borrows: move _151 };
        StorageDead(_151);
        StorageDead(_150);
        StorageDead(_149);
        StorageDead(_148);
        StorageDead(_147);
        _144 = Obligation::init(move _145, move _146) -> [return: bb78, unwind: bb112];
    }

    bb78: {
        StorageDead(_146);
        StorageDead(_145);
        StorageDead(_144);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        _174 = const false;
        _176 = const true;
        _155 = move _80;
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        _163 = &((*_6).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _162 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _163) -> [return: bb79, unwind: bb101];
    }

    bb79: {
        _161 = &(*_162);
        StorageDead(_163);
        _160 = RefCell::<&mut [u8]>::borrow_mut(move _161) -> [return: bb80, unwind: bb101];
    }

    bb80: {
        StorageDead(_161);
        _159 = &mut _160;
        _158 = &mut (*_159);
        _157 = <RefMut<'_, &mut [u8]> as DerefMut>::deref_mut(move _158) -> [return: bb81, unwind: bb109];
    }

    bb81: {
        _173 = deref_copy (*_157);
        _156 = &mut (*_173);
        StorageDead(_158);
        _176 = const false;
        _154 = <Obligation as Pack>::pack(move _155, move _156) -> [return: bb82, unwind: bb109];
    }

    bb82: {
        StorageDead(_156);
        _176 = const false;
        StorageDead(_155);
        _153 = <Result<(), ProgramError> as Try>::branch(move _154) -> [return: bb83, unwind: bb100];
    }

    bb83: {
        StorageDead(_154);
        _164 = discriminant(_153);
        switchInt(move _164) -> [0: bb84, 1: bb85, otherwise: bb5];
    }

    bb84: {
        StorageLive(_168);
        _168 = ((_153 as Continue).0: ());
        _152 = _168;
        StorageDead(_168);
        _197 = discriminant(_153);
        drop(_160) -> [return: bb87, unwind: bb112];
    }

    bb85: {
        StorageLive(_165);
        _165 = move ((_153 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_167);
        _167 = move _165;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _167) -> [return: bb86, unwind: bb107];
    }

    bb86: {
        StorageDead(_167);
        StorageDead(_165);
        _199 = discriminant(_153);
        drop(_160) -> [return: bb88, unwind: bb112];
    }

    bb87: {
        StorageDead(_162);
        StorageDead(_160);
        StorageDead(_159);
        StorageDead(_157);
        StorageDead(_153);
        StorageDead(_152);
        StorageLive(_169);
        _169 = ();
        _0 = Result::<(), ProgramError>::Ok(move _169);
        StorageDead(_169);
        StorageDead(_99);
        _174 = const false;
        StorageDead(_80);
        StorageDead(_61);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_24);
        StorageDead(_15);
        StorageDead(_6);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb99;
    }

    bb88: {
        StorageDead(_162);
        StorageDead(_160);
        StorageDead(_159);
        StorageDead(_157);
        StorageDead(_153);
        StorageDead(_152);
        goto -> bb90;
    }

    bb89: {
        StorageDead(_108);
        StorageDead(_106);
        StorageDead(_105);
        StorageDead(_103);
        StorageDead(_100);
        goto -> bb90;
    }

    bb90: {
        StorageDead(_99);
        goto -> bb106;
    }

    bb91: {
        _174 = const false;
        StorageDead(_80);
        goto -> bb92;
    }

    bb92: {
        StorageDead(_61);
        goto -> bb94;
    }

    bb93: {
        _211 = discriminant(_48);
        _175 = const false;
        StorageDead(_48);
        StorageDead(_47);
        StorageDead(_44);
        goto -> bb94;
    }

    bb94: {
        StorageDead(_43);
        StorageDead(_42);
        goto -> bb95;
    }

    bb95: {
        StorageDead(_34);
        StorageDead(_33);
        goto -> bb96;
    }

    bb96: {
        StorageDead(_24);
        goto -> bb97;
    }

    bb97: {
        StorageDead(_15);
        goto -> bb98;
    }

    bb98: {
        StorageDead(_6);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb99;
    }

    bb99: {
        return;
    }

    bb100 (cleanup): {
        drop(_160) -> [return: bb112, unwind terminate(cleanup)];
    }

    bb101 (cleanup): {
        drop(_155) -> [return: bb112, unwind terminate(cleanup)];
    }

    bb102 (cleanup): {
        drop(_150) -> [return: bb112, unwind terminate(cleanup)];
    }

    bb103 (cleanup): {
        drop(_106) -> [return: bb112, unwind terminate(cleanup)];
    }

    bb104 (cleanup): {
        resume;
    }

    bb105: {
        drop(_80) -> [return: bb91, unwind: bb104];
    }

    bb106: {
        switchInt(_174) -> [0: bb91, otherwise: bb105];
    }

    bb107 (cleanup): {
        _221 = discriminant(_153);
        goto -> bb100;
    }

    bb108 (cleanup): {
        drop(_155) -> [return: bb100, unwind terminate(cleanup)];
    }

    bb109 (cleanup): {
        switchInt(_176) -> [0: bb100, otherwise: bb108];
    }

    bb110 (cleanup): {
        _222 = discriminant(_100);
        goto -> bb103;
    }

    bb111 (cleanup): {
        drop(_80) -> [return: bb104, unwind terminate(cleanup)];
    }

    bb112 (cleanup): {
        switchInt(_174) -> [0: bb104, otherwise: bb111];
    }

    bb113 (cleanup): {
        _223 = discriminant(_81);
        goto -> bb104;
    }

    bb114 (cleanup): {
        _224 = discriminant(_71);
        goto -> bb104;
    }

    bb115 (cleanup): {
        _225 = discriminant(_62);
        goto -> bb104;
    }

    bb116 (cleanup): {
        _226 = discriminant(_44);
        goto -> bb117;
    }

    bb117 (cleanup): {
        _227 = discriminant(_48);
        goto -> bb104;
    }

    bb118 (cleanup): {
        _228 = discriminant(_35);
        goto -> bb104;
    }

    bb119 (cleanup): {
        _229 = discriminant(_25);
        goto -> bb104;
    }

    bb120 (cleanup): {
        _230 = discriminant(_16);
        goto -> bb104;
    }

    bb121 (cleanup): {
        _231 = discriminant(_7);
        goto -> bb104;
    }
}
