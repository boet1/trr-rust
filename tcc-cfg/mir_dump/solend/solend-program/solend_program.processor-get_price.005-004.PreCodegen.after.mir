// MIR for `get_price` after PreCodegen

fn get_price(_1: Option<&AccountInfo<'_>>, _2: &AccountInfo<'_>, _3: &Clock) -> Result<(Decimal, Option<Decimal>), ProgramError> {
    debug secondary_price_account_info => _1;
    debug main_price_account_info => _2;
    debug clock => _3;
    let mut _0: std::result::Result<(solend_sdk::math::Decimal, std::option::Option<solend_sdk::math::Decimal>), solana_program::program_error::ProgramError>;
    let _4: ();
    let mut _5: std::result::Result<(solend_sdk::math::Decimal, std::option::Option<solend_sdk::math::Decimal>), solana_program::program_error::ProgramError>;
    let mut _6: &solana_program::account_info::AccountInfo<'_>;
    let mut _7: &solana_program::clock::Clock;
    let mut _8: isize;
    let mut _10: !;
    let mut _11: (solend_sdk::math::Decimal, std::option::Option<solend_sdk::math::Decimal>);
    let mut _12: solend_sdk::math::Decimal;
    let mut _13: std::option::Option<solend_sdk::math::Decimal>;
    let _14: ();
    let mut _15: isize;
    let mut _17: std::result::Result<(solend_sdk::math::Decimal, std::option::Option<solend_sdk::math::Decimal>), solana_program::program_error::ProgramError>;
    let mut _18: &solana_program::account_info::AccountInfo<'_>;
    let mut _19: &solana_program::clock::Clock;
    let mut _20: isize;
    let mut _22: !;
    let mut _23: (solend_sdk::math::Decimal, std::option::Option<solend_sdk::math::Decimal>);
    let mut _24: solend_sdk::math::Decimal;
    let mut _25: std::option::Option<solend_sdk::math::Decimal>;
    let mut _26: solana_program::program_error::ProgramError;
    let mut _27: solend_sdk::error::LendingError;
    scope 1 {
        debug prices => _9;
        let _9: (solend_sdk::math::Decimal, std::option::Option<solend_sdk::math::Decimal>);
    }
    scope 2 {
        debug secondary_price_account_info_unwrapped => _16;
        let _16: &solana_program::account_info::AccountInfo<'_>;
        scope 3 {
            debug prices => _21;
            let _21: (solend_sdk::math::Decimal, std::option::Option<solend_sdk::math::Decimal>);
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &(*_2);
        StorageLive(_7);
        _7 = &(*_3);
        _5 = get_single_price(move _6, move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        StorageDead(_6);
        _8 = discriminant(_5);
        switchInt(move _8) -> [0: bb2, otherwise: bb3];
    }

    bb2: {
        StorageLive(_9);
        _9 = ((_5 as Ok).0: (solend_sdk::math::Decimal, std::option::Option<solend_sdk::math::Decimal>));
        StorageLive(_11);
        StorageLive(_12);
        _12 = (_9.0: solend_sdk::math::Decimal);
        StorageLive(_13);
        _13 = (_9.1: std::option::Option<solend_sdk::math::Decimal>);
        _11 = (move _12, move _13);
        StorageDead(_13);
        StorageDead(_12);
        _0 = Result::<(Decimal, Option<Decimal>), ProgramError>::Ok(move _11);
        StorageDead(_11);
        StorageDead(_9);
        drop(_5) -> [return: bb14, unwind: bb16];
    }

    bb3: {
        _4 = const ();
        drop(_5) -> [return: bb4, unwind: bb16];
    }

    bb4: {
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_14);
        _15 = discriminant(_1);
        switchInt(move _15) -> [1: bb5, otherwise: bb10];
    }

    bb5: {
        StorageLive(_16);
        _16 = ((_1 as Some).0: &solana_program::account_info::AccountInfo<'_>);
        StorageLive(_17);
        StorageLive(_18);
        _18 = &(*_16);
        StorageLive(_19);
        _19 = &(*_3);
        _17 = get_single_price(move _18, move _19) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_19);
        StorageDead(_18);
        _20 = discriminant(_17);
        switchInt(move _20) -> [0: bb7, otherwise: bb8];
    }

    bb7: {
        StorageLive(_21);
        _21 = ((_17 as Ok).0: (solend_sdk::math::Decimal, std::option::Option<solend_sdk::math::Decimal>));
        StorageLive(_23);
        StorageLive(_24);
        _24 = (_21.0: solend_sdk::math::Decimal);
        StorageLive(_25);
        _25 = (_21.1: std::option::Option<solend_sdk::math::Decimal>);
        _23 = (move _24, move _25);
        StorageDead(_25);
        StorageDead(_24);
        _0 = Result::<(Decimal, Option<Decimal>), ProgramError>::Ok(move _23);
        StorageDead(_23);
        StorageDead(_21);
        drop(_17) -> [return: bb13, unwind: bb16];
    }

    bb8: {
        _14 = const ();
        drop(_17) -> [return: bb9, unwind: bb16];
    }

    bb9: {
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb11;
    }

    bb10: {
        _14 = const ();
        goto -> bb11;
    }

    bb11: {
        StorageDead(_14);
        StorageLive(_26);
        StorageLive(_27);
        _27 = InvalidOracleConfig;
        _26 = <LendingError as Into<ProgramError>>::into(move _27) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_27);
        _0 = Result::<(Decimal, Option<Decimal>), ProgramError>::Err(move _26);
        StorageDead(_26);
        goto -> bb15;
    }

    bb13: {
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_14);
        goto -> bb15;
    }

    bb14: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb15;
    }

    bb15: {
        return;
    }

    bb16 (cleanup): {
        resume;
    }
}
