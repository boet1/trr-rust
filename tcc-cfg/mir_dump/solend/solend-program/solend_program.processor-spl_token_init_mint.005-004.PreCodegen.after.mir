// MIR for `spl_token_init_mint` after PreCodegen

fn spl_token_init_mint(_1: TokenInitializeMintParams<'_, '_>) -> Result<(), ProgramError> {
    debug params => _1;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _2: solana_program::account_info::AccountInfo<'_>;
    let _3: solana_program::account_info::AccountInfo<'_>;
    let _4: &solana_program::pubkey::Pubkey;
    let _5: solana_program::account_info::AccountInfo<'_>;
    let _6: u8;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solana_program::instruction::Instruction>;
    let mut _9: std::result::Result<solana_program::instruction::Instruction, solana_program::program_error::ProgramError>;
    let mut _10: &solana_program::pubkey::Pubkey;
    let mut _11: &solana_program::pubkey::Pubkey;
    let mut _12: &solana_program::pubkey::Pubkey;
    let mut _13: std::option::Option<&solana_program::pubkey::Pubkey>;
    let mut _14: u8;
    let mut _15: isize;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _21: &solana_program::instruction::Instruction;
    let _22: &solana_program::instruction::Instruction;
    let mut _23: &[solana_program::account_info::AccountInfo<'_>];
    let mut _24: &[solana_program::account_info::AccountInfo<'_>; 3];
    let _25: &[solana_program::account_info::AccountInfo<'_>; 3];
    let _26: [solana_program::account_info::AccountInfo<'_>; 3];
    let mut _27: solana_program::account_info::AccountInfo<'_>;
    let mut _28: solana_program::account_info::AccountInfo<'_>;
    let mut _29: solana_program::account_info::AccountInfo<'_>;
    let mut _30: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _31: {closure@token-lending\program\src\processor.rs:3352:20: 3352:23};
    let mut _32: &solana_program::pubkey::Pubkey;
    let mut _33: &solana_program::pubkey::Pubkey;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: isize;
    let mut _39: isize;
    let mut _40: isize;
    let mut _41: isize;
    let mut _42: isize;
    scope 1 {
        debug mint => _2;
        debug rent => _3;
        debug authority => _4;
        debug token_program => _5;
        debug decimals => _6;
        let _7: solana_program::instruction::Instruction;
        let _16: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _19: solana_program::instruction::Instruction;
        scope 2 {
            debug ix => _7;
            let _20: std::result::Result<(), solana_program::program_error::ProgramError>;
            scope 7 {
                debug result => _20;
            }
        }
        scope 3 {
            debug residual => _16;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _19;
            scope 6 {
            }
        }
    }

    bb0: {
        _37 = const false;
        _36 = const false;
        _35 = const false;
        _34 = const false;
        StorageLive(_2);
        _37 = const true;
        _2 = move (_1.0: solana_program::account_info::AccountInfo<'_>);
        StorageLive(_3);
        _36 = const true;
        _3 = move (_1.1: solana_program::account_info::AccountInfo<'_>);
        StorageLive(_4);
        _4 = (_1.2: &solana_program::pubkey::Pubkey);
        StorageLive(_5);
        _35 = const true;
        _5 = move (_1.4: solana_program::account_info::AccountInfo<'_>);
        StorageLive(_6);
        _6 = (_1.3: u8);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _32 = deref_copy (_5.0: &solana_program::pubkey::Pubkey);
        _10 = &(*_32);
        StorageLive(_11);
        _33 = deref_copy (_2.0: &solana_program::pubkey::Pubkey);
        _11 = &(*_33);
        StorageLive(_12);
        _12 = &(*_4);
        StorageLive(_13);
        _13 = Option::<&Pubkey>::None;
        StorageLive(_14);
        _14 = _6;
        _9 = initialize_mint(move _10, move _11, move _12, move _13, move _14) -> [return: bb1, unwind: bb22];
    }

    bb1: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        _8 = <Result<Instruction, ProgramError> as Try>::branch(move _9) -> [return: bb2, unwind: bb22];
    }

    bb2: {
        StorageDead(_9);
        _15 = discriminant(_8);
        switchInt(move _15) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_19);
        _19 = move ((_8 as Continue).0: solana_program::instruction::Instruction);
        _7 = move _19;
        StorageDead(_19);
        _38 = discriminant(_8);
        StorageDead(_8);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = &_7;
        _21 = &(*_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _37 = const false;
        _27 = move _2;
        StorageLive(_28);
        _36 = const false;
        _28 = move _3;
        StorageLive(_29);
        _35 = const false;
        _29 = move _5;
        _26 = [move _27, move _28, move _29];
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        _25 = &_26;
        _24 = &(*_25);
        _23 = move _24 as &[solana_program::account_info::AccountInfo<'_>] (PointerCoercion(Unsize));
        StorageDead(_24);
        _20 = invoke(move _21, move _23) -> [return: bb7, unwind: bb15];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_16);
        _16 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_18);
        _18 = move _16;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _18) -> [return: bb6, unwind: bb20];
    }

    bb6: {
        StorageDead(_18);
        StorageDead(_16);
        _40 = discriminant(_8);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        drop(_5) -> [return: bb11, unwind: bb24];
    }

    bb7: {
        _34 = const true;
        StorageDead(_23);
        StorageDead(_21);
        drop(_26) -> [return: bb8, unwind: bb19];
    }

    bb8: {
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_22);
        StorageLive(_30);
        _34 = const false;
        _30 = move _20;
        StorageLive(_31);
        _31 = {closure@token-lending\program\src\processor.rs:3352:20: 3352:23};
        _0 = Result::<(), ProgramError>::map_err::<ProgramError, {closure@token-lending\program\src\processor.rs:3352:20: 3352:23}>(move _30, move _31) -> [return: bb9, unwind: bb19];
    }

    bb9: {
        StorageDead(_31);
        StorageDead(_30);
        _34 = const false;
        StorageDead(_20);
        drop(_7) -> [return: bb10, unwind: bb22];
    }

    bb10: {
        StorageDead(_7);
        StorageDead(_6);
        _35 = const false;
        StorageDead(_5);
        StorageDead(_4);
        _36 = const false;
        StorageDead(_3);
        _37 = const false;
        StorageDead(_2);
        goto -> bb14;
    }

    bb11: {
        _35 = const false;
        StorageDead(_5);
        StorageDead(_4);
        drop(_3) -> [return: bb12, unwind: bb26];
    }

    bb12: {
        _36 = const false;
        StorageDead(_3);
        drop(_2) -> [return: bb13, unwind: bb17];
    }

    bb13: {
        _37 = const false;
        StorageDead(_2);
        goto -> bb14;
    }

    bb14: {
        return;
    }

    bb15 (cleanup): {
        drop(_26) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        drop(_7) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        resume;
    }

    bb18 (cleanup): {
        drop(_20) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        switchInt(_34) -> [0: bb16, otherwise: bb18];
    }

    bb20 (cleanup): {
        _42 = discriminant(_8);
        goto -> bb22;
    }

    bb21 (cleanup): {
        drop(_5) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        switchInt(_35) -> [0: bb24, otherwise: bb21];
    }

    bb23 (cleanup): {
        drop(_3) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        switchInt(_36) -> [0: bb26, otherwise: bb23];
    }

    bb25 (cleanup): {
        drop(_2) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        switchInt(_37) -> [0: bb17, otherwise: bb25];
    }
}
