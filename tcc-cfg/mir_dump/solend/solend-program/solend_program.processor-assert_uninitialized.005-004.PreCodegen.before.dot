digraph Mir_0_136 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn assert_uninitialized(_1: &amp;ReErased solana_program::account_info::AccountInfo&lt;ReErased&gt;) -&gt; std::result::Result&lt;T/#0, solana_program::program_error::ProgramError&gt;<br align="left"/>let _2: T/#0;<br align="left"/>let mut _3: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;, T/#0&gt;;<br align="left"/>let mut _4: std::result::Result&lt;T/#0, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _5: &amp;ReErased [u8];<br align="left"/>let _6: &amp;ReErased &amp;ReErased mut [u8];<br align="left"/>let mut _7: &amp;ReErased std::cell::Ref&lt;ReErased, &amp;ReErased mut [u8]&gt;;<br align="left"/>let _8: &amp;ReErased std::cell::Ref&lt;ReErased, &amp;ReErased mut [u8]&gt;;<br align="left"/>let _9: std::cell::Ref&lt;ReErased, &amp;ReErased mut [u8]&gt;;<br align="left"/>let mut _10: &amp;ReErased std::cell::RefCell&lt;&amp;ReErased mut [u8]&gt;;<br align="left"/>let _11: &amp;ReErased std::cell::RefCell&lt;&amp;ReErased mut [u8]&gt;;<br align="left"/>let mut _12: &amp;ReErased std::rc::Rc&lt;std::cell::RefCell&lt;&amp;ReErased mut [u8]&gt;, std::alloc::Global&gt;;<br align="left"/>let mut _13: isize;<br align="left"/>let _14: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _15: !;<br align="left"/>let mut _16: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let _17: T/#0;<br align="left"/>let mut _18: bool;<br align="left"/>let mut _19: &amp;ReErased T/#0;<br align="left"/>let mut _20: solana_program::program_error::ProgramError;<br align="left"/>let mut _21: solend_sdk::error::LendingError;<br align="left"/>let mut _22: T/#0;<br align="left"/>let mut _23: &amp;ReErased mut [u8];<br align="left"/>let mut _24: bool;<br align="left"/>let mut _25: isize;<br align="left"/>let mut _26: isize;<br align="left"/>let mut _27: isize;<br align="left"/>let mut _28: isize;<br align="left"/>let mut _29: isize;<br align="left"/>debug account_info =&gt; _1;<br align="left"/>debug account =&gt; _2;<br align="left"/>debug residual =&gt; _14;<br align="left"/>debug val =&gt; _17;<br align="left"/>>;
    bb0__0_136 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_24 = const false<br/>StorageLive(_2)<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>_12 = &amp;((*_1).2: std::rc::Rc&lt;std::cell::RefCell&lt;&amp;mut [u8]&gt;&gt;)<br/></td></tr><tr><td align="left">_11 = &lt;Rc&lt;RefCell&lt;&amp;mut [u8]&gt;&gt; as Deref&gt;::deref(move _12)</td></tr></table>>];
    bb1__0_136 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_10 = &amp;(*_11)<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">_9 = RefCell::&lt;&amp;mut [u8]&gt;::borrow(move _10)</td></tr></table>>];
    bb2__0_136 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>_8 = &amp;_9<br/>_7 = &amp;(*_8)<br/></td></tr><tr><td align="left">_6 = &lt;Ref&lt;'_, &amp;mut [u8]&gt; as Deref&gt;::deref(move _7)</td></tr></table>>];
    bb3__0_136 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_23 = deref_copy (*_6)<br/>_5 = &amp;(*_23)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">_4 = &lt;T as Pack&gt;::unpack_unchecked(move _5)</td></tr></table>>];
    bb4__0_136 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/></td></tr><tr><td align="left">_3 = &lt;Result&lt;T, ProgramError&gt; as Try&gt;::branch(move _4)</td></tr></table>>];
    bb5__0_136 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>_13 = discriminant(_3)<br/></td></tr><tr><td align="left">switchInt(move _13)</td></tr></table>>];
    bb6__0_136 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_17)<br/>_17 = move ((_3 as Continue).0: T)<br/>_24 = const true<br/>_2 = move _17<br/>StorageDead(_17)<br/>_25 = discriminant(_3)<br/></td></tr><tr><td align="left">drop(_9)</td></tr></table>>];
    bb7__0_136 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb8__0_136 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageLive(_14)<br/>_14 = move ((_3 as Break).0: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;)<br/>StorageLive(_16)<br/>_16 = move _14<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;T, ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, ProgramError&gt;&gt;&gt;::from_residual(move _16)</td></tr></table>>];
    bb9__0_136 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageDead(_14)<br/>_27 = discriminant(_3)<br/></td></tr><tr><td align="left">drop(_9)</td></tr></table>>];
    bb10__0_136 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/>StorageDead(_6)<br/>StorageDead(_3)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>_19 = &amp;_2<br/></td></tr><tr><td align="left">_18 = &lt;T as IsInitialized&gt;::is_initialized(move _19)</td></tr></table>>];
    bb11__0_136 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left">switchInt(move _18)</td></tr></table>>];
    bb12__0_136 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>_21 = AlreadyInitialized<br/></td></tr><tr><td align="left">_20 = &lt;LendingError as Into&lt;ProgramError&gt;&gt;::into(move _21)</td></tr></table>>];
    bb13__0_136 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>_0 = Result::&lt;T, ProgramError&gt;::Err(move _20)<br/>StorageDead(_20)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_136 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageLive(_22)<br/>_24 = const false<br/>_22 = move _2<br/>_0 = Result::&lt;T, ProgramError&gt;::Ok(move _22)<br/>StorageDead(_22)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_136 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/></td></tr><tr><td align="left">switchInt(_24)</td></tr></table>>];
    bb16__0_136 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">_24 = const false<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_136 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/>StorageDead(_6)<br/>StorageDead(_3)<br/>_24 = const false<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_136 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left">return</td></tr></table>>];
    bb19__0_136 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">19 (cleanup)</td></tr><tr><td align="left">drop(_2)</td></tr></table>>];
    bb20__0_136 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">20 (cleanup)</td></tr><tr><td align="left">drop(_9)</td></tr></table>>];
    bb21__0_136 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">21 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb22__0_136 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left">drop(_2)</td></tr></table>>];
    bb23__0_136 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">23 (cleanup)</td></tr><tr><td align="left" balign="left">_29 = discriminant(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_136 -> bb1__0_136 [label="return"];
    bb1__0_136 -> bb2__0_136 [label="return"];
    bb2__0_136 -> bb3__0_136 [label="return"];
    bb2__0_136 -> bb20__0_136 [label="unwind"];
    bb3__0_136 -> bb4__0_136 [label="return"];
    bb3__0_136 -> bb20__0_136 [label="unwind"];
    bb4__0_136 -> bb5__0_136 [label="return"];
    bb4__0_136 -> bb20__0_136 [label="unwind"];
    bb5__0_136 -> bb6__0_136 [label="0"];
    bb5__0_136 -> bb8__0_136 [label="1"];
    bb5__0_136 -> bb7__0_136 [label="otherwise"];
    bb6__0_136 -> bb10__0_136 [label="return"];
    bb6__0_136 -> bb19__0_136 [label="unwind"];
    bb8__0_136 -> bb9__0_136 [label="return"];
    bb8__0_136 -> bb23__0_136 [label="unwind"];
    bb9__0_136 -> bb17__0_136 [label="return"];
    bb9__0_136 -> bb21__0_136 [label="unwind"];
    bb10__0_136 -> bb11__0_136 [label="return"];
    bb10__0_136 -> bb19__0_136 [label="unwind"];
    bb11__0_136 -> bb14__0_136 [label="0"];
    bb11__0_136 -> bb12__0_136 [label="otherwise"];
    bb12__0_136 -> bb13__0_136 [label="return"];
    bb12__0_136 -> bb19__0_136 [label="unwind"];
    bb13__0_136 -> bb15__0_136 [label=""];
    bb14__0_136 -> bb15__0_136 [label=""];
    bb15__0_136 -> bb16__0_136 [label="0"];
    bb15__0_136 -> bb22__0_136 [label="otherwise"];
    bb16__0_136 -> bb18__0_136 [label=""];
    bb17__0_136 -> bb18__0_136 [label=""];
    bb19__0_136 -> bb21__0_136 [label="return"];
    bb20__0_136 -> bb21__0_136 [label="return"];
    bb22__0_136 -> bb16__0_136 [label="return"];
    bb22__0_136 -> bb21__0_136 [label="unwind"];
    bb23__0_136 -> bb20__0_136 [label=""];
}
