digraph Mir_0_152 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn is_cpi_call(_1: &amp;ReErased solana_program::pubkey::Pubkey, _2: usize, _3: &amp;ReErased solana_program::account_info::AccountInfo&lt;ReErased&gt;) -&gt; std::result::Result&lt;bool, solana_program::program_error::ProgramError&gt;<br align="left"/>let _4: solana_program::instruction::Instruction;<br align="left"/>let mut _5: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;, solana_program::instruction::Instruction&gt;;<br align="left"/>let mut _6: std::result::Result&lt;solana_program::instruction::Instruction, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _7: usize;<br align="left"/>let mut _8: &amp;ReErased solana_program::account_info::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _9: isize;<br align="left"/>let _10: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _11: !;<br align="left"/>let mut _12: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let _13: solana_program::instruction::Instruction;<br align="left"/>let _14: ();<br align="left"/>let mut _15: bool;<br align="left"/>let mut _16: &amp;ReErased solana_program::pubkey::Pubkey;<br align="left"/>let mut _17: &amp;ReErased solana_program::pubkey::Pubkey;<br align="left"/>let mut _18: !;<br align="left"/>let _19: ();<br align="left"/>let mut _20: bool;<br align="left"/>let mut _21: usize;<br align="left"/>let mut _22: !;<br align="left"/>let mut _23: isize;<br align="left"/>let mut _24: isize;<br align="left"/>let mut _25: isize;<br align="left"/>let mut _26: isize;<br align="left"/>let mut _27: isize;<br align="left"/>debug program_id =&gt; _1;<br align="left"/>debug current_index =&gt; _2;<br align="left"/>debug sysvar_info =&gt; _3;<br align="left"/>debug current_ixn =&gt; _4;<br align="left"/>debug residual =&gt; _10;<br align="left"/>debug val =&gt; _13;<br align="left"/>>;
    bb0__0_152 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>_7 = _2<br/>StorageLive(_8)<br/>_8 = &amp;(*_3)<br/></td></tr><tr><td align="left">_6 = load_instruction_at_checked(move _7, move _8)</td></tr></table>>];
    bb1__0_152 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">_5 = &lt;Result&lt;Instruction, ProgramError&gt; as Try&gt;::branch(move _6)</td></tr></table>>];
    bb2__0_152 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>_9 = discriminant(_5)<br/></td></tr><tr><td align="left">switchInt(move _9)</td></tr></table>>];
    bb3__0_152 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_13)<br/>_13 = move ((_5 as Continue).0: solana_program::instruction::Instruction)<br/>_4 = move _13<br/>StorageDead(_13)<br/>_23 = discriminant(_5)<br/>StorageDead(_5)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>_16 = &amp;(*_1)<br/>StorageLive(_17)<br/>_17 = &amp;(_4.0: solana_program::pubkey::Pubkey)<br/></td></tr><tr><td align="left">_15 = &lt;Pubkey as PartialEq&gt;::ne(move _16, move _17)</td></tr></table>>];
    bb4__0_152 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_152 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_10)<br/>_10 = move ((_5 as Break).0: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;)<br/>StorageLive(_12)<br/>_12 = move _10<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;bool, ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, ProgramError&gt;&gt;&gt;::from_residual(move _12)</td></tr></table>>];
    bb6__0_152 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_10)<br/>_25 = discriminant(_5)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_152 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left">switchInt(move _15)</td></tr></table>>];
    bb8__0_152 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageDead(_16)<br/>_0 = Result::&lt;bool, ProgramError&gt;::Ok(const true)<br/>StorageDead(_15)<br/>StorageDead(_14)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_152 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageDead(_16)<br/>_14 = const ()<br/>StorageDead(_15)<br/>StorageDead(_14)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/></td></tr><tr><td align="left">_21 = get_stack_height()</td></tr></table>>];
    bb10__0_152 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">_20 = Gt(move _21, const _)<br/></td></tr><tr><td align="left">switchInt(move _20)</td></tr></table>>];
    bb11__0_152 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>_0 = Result::&lt;bool, ProgramError&gt;::Ok(const true)<br/>StorageDead(_20)<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_152 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>_19 = const ()<br/>StorageDead(_20)<br/>StorageDead(_19)<br/>_0 = Result::&lt;bool, ProgramError&gt;::Ok(const false)<br/></td></tr><tr><td align="left">drop(_4)</td></tr></table>>];
    bb13__0_152 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_152 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left">drop(_4)</td></tr></table>>];
    bb15__0_152 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb16__0_152 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left">return</td></tr></table>>];
    bb17__0_152 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">17 (cleanup)</td></tr><tr><td align="left">drop(_4)</td></tr></table>>];
    bb18__0_152 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">18 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb19__0_152 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">19 (cleanup)</td></tr><tr><td align="left" balign="left">_27 = discriminant(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_152 -> bb1__0_152 [label="return"];
    bb1__0_152 -> bb2__0_152 [label="return"];
    bb1__0_152 -> bb18__0_152 [label="unwind"];
    bb2__0_152 -> bb3__0_152 [label="0"];
    bb2__0_152 -> bb5__0_152 [label="1"];
    bb2__0_152 -> bb4__0_152 [label="otherwise"];
    bb3__0_152 -> bb7__0_152 [label="return"];
    bb3__0_152 -> bb17__0_152 [label="unwind"];
    bb5__0_152 -> bb6__0_152 [label="return"];
    bb5__0_152 -> bb19__0_152 [label="unwind"];
    bb6__0_152 -> bb15__0_152 [label=""];
    bb7__0_152 -> bb9__0_152 [label="0"];
    bb7__0_152 -> bb8__0_152 [label="otherwise"];
    bb8__0_152 -> bb14__0_152 [label=""];
    bb9__0_152 -> bb10__0_152 [label="return"];
    bb9__0_152 -> bb17__0_152 [label="unwind"];
    bb10__0_152 -> bb12__0_152 [label="0"];
    bb10__0_152 -> bb11__0_152 [label="otherwise"];
    bb11__0_152 -> bb14__0_152 [label=""];
    bb12__0_152 -> bb13__0_152 [label="return"];
    bb12__0_152 -> bb18__0_152 [label="unwind"];
    bb13__0_152 -> bb16__0_152 [label=""];
    bb14__0_152 -> bb15__0_152 [label="return"];
    bb14__0_152 -> bb18__0_152 [label="unwind"];
    bb15__0_152 -> bb16__0_152 [label=""];
    bb17__0_152 -> bb18__0_152 [label="return"];
    bb19__0_152 -> bb18__0_152 [label=""];
}
