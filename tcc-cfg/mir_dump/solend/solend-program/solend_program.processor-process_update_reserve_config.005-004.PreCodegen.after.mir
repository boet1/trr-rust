// MIR for `process_update_reserve_config` after PreCodegen

fn process_update_reserve_config(_1: &Pubkey, _2: ReserveConfig, _3: RateLimiterConfig, _4: &[AccountInfo<'_>]) -> Result<(), ProgramError> {
    debug program_id => _1;
    debug config => _2;
    debug rate_limiter_config => _3;
    debug accounts => _4;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _5: ();
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _7: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _8: solend_sdk::state::ReserveConfig;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _13: ();
    let _14: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _15: std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _16: &[solana_program::account_info::AccountInfo<'_>];
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _19: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _20: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _21: isize;
    let mut _23: !;
    let mut _24: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _28: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _29: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _37: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _38: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _39: isize;
    let mut _41: !;
    let mut _42: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _46: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _47: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _48: isize;
    let mut _50: !;
    let mut _51: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _54: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _55: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _56: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _57: isize;
    let mut _59: !;
    let mut _60: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _63: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _64: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _65: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _66: isize;
    let mut _68: !;
    let mut _69: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _72: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _73: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _74: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _75: isize;
    let mut _77: !;
    let mut _78: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _81: solend_sdk::state::Reserve;
    let mut _82: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::state::Reserve>;
    let mut _83: std::result::Result<solend_sdk::state::Reserve, solana_program::program_error::ProgramError>;
    let mut _84: &[u8];
    let _85: &&mut [u8];
    let mut _86: &std::cell::Ref<'_, &mut [u8]>;
    let _87: &std::cell::Ref<'_, &mut [u8]>;
    let _88: std::cell::Ref<'_, &mut [u8]>;
    let mut _89: &std::cell::RefCell<&mut [u8]>;
    let _90: &std::cell::RefCell<&mut [u8]>;
    let mut _91: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _92: isize;
    let mut _94: !;
    let mut _95: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _97: ();
    let mut _98: bool;
    let mut _99: &&solana_program::pubkey::Pubkey;
    let mut _100: &&solana_program::pubkey::Pubkey;
    let mut _101: !;
    let _102: ();
    let mut _103: &str;
    let _104: &str;
    let mut _105: &std::string::String;
    let _106: &std::string::String;
    let _107: std::string::String;
    let mut _109: std::fmt::Arguments<'_>;
    let mut _110: &[&str];
    let mut _111: &[&str; 2];
    let _112: &[&str; 2];
    let _113: [&str; 2];
    let mut _114: &[bytemuck::core::fmt::rt::Argument<'_>];
    let mut _115: &[bytemuck::core::fmt::rt::Argument<'_>; 2];
    let _116: &[bytemuck::core::fmt::rt::Argument<'_>; 2];
    let _117: [bytemuck::core::fmt::rt::Argument<'_>; 2];
    let mut _118: bytemuck::core::fmt::rt::Argument<'_>;
    let mut _119: &&std::string::String;
    let _120: &&std::string::String;
    let _121: &std::string::String;
    let _122: std::string::String;
    let mut _123: &solana_program::pubkey::Pubkey;
    let mut _124: bytemuck::core::fmt::rt::Argument<'_>;
    let mut _125: &&std::string::String;
    let _126: &&std::string::String;
    let _127: &std::string::String;
    let _128: std::string::String;
    let mut _129: &solana_program::pubkey::Pubkey;
    let mut _130: solana_program::program_error::ProgramError;
    let mut _131: solend_sdk::error::LendingError;
    let _132: ();
    let mut _133: bool;
    let mut _134: &&solana_program::pubkey::Pubkey;
    let _135: &solana_program::pubkey::Pubkey;
    let mut _136: &&solana_program::pubkey::Pubkey;
    let mut _137: !;
    let _138: ();
    let mut _139: &str;
    let _140: &str;
    let mut _141: solana_program::program_error::ProgramError;
    let mut _142: solend_sdk::error::LendingError;
    let mut _144: solend_sdk::state::LendingMarket;
    let mut _145: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::state::LendingMarket>;
    let mut _146: std::result::Result<solend_sdk::state::LendingMarket, solana_program::program_error::ProgramError>;
    let mut _147: &[u8];
    let _148: &&mut [u8];
    let mut _149: &std::cell::Ref<'_, &mut [u8]>;
    let _150: &std::cell::Ref<'_, &mut [u8]>;
    let _151: std::cell::Ref<'_, &mut [u8]>;
    let mut _152: &std::cell::RefCell<&mut [u8]>;
    let _153: &std::cell::RefCell<&mut [u8]>;
    let mut _154: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _155: isize;
    let mut _157: !;
    let mut _158: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _160: ();
    let mut _161: bool;
    let mut _162: &&solana_program::pubkey::Pubkey;
    let mut _163: &&solana_program::pubkey::Pubkey;
    let mut _164: !;
    let _165: ();
    let mut _166: &str;
    let _167: &str;
    let mut _168: &std::string::String;
    let _169: &std::string::String;
    let _170: std::string::String;
    let mut _172: std::fmt::Arguments<'_>;
    let mut _173: &[&str];
    let mut _174: &[&str; 2];
    let _175: &[&str; 2];
    let _176: [&str; 2];
    let mut _177: &[bytemuck::core::fmt::rt::Argument<'_>];
    let mut _178: &[bytemuck::core::fmt::rt::Argument<'_>; 2];
    let _179: &[bytemuck::core::fmt::rt::Argument<'_>; 2];
    let _180: [bytemuck::core::fmt::rt::Argument<'_>; 2];
    let mut _181: bytemuck::core::fmt::rt::Argument<'_>;
    let mut _182: &&std::string::String;
    let _183: &&std::string::String;
    let _184: &std::string::String;
    let _185: std::string::String;
    let mut _186: &solana_program::pubkey::Pubkey;
    let mut _187: bytemuck::core::fmt::rt::Argument<'_>;
    let mut _188: &&std::string::String;
    let _189: &&std::string::String;
    let _190: &std::string::String;
    let _191: std::string::String;
    let mut _192: &solana_program::pubkey::Pubkey;
    let mut _193: solana_program::program_error::ProgramError;
    let mut _194: solend_sdk::error::LendingError;
    let _195: ();
    let mut _196: bool;
    let mut _197: &&solana_program::pubkey::Pubkey;
    let _198: &solana_program::pubkey::Pubkey;
    let _199: solana_program::pubkey::Pubkey;
    let mut _200: &&solana_program::pubkey::Pubkey;
    let _201: ();
    let mut _202: bool;
    let mut _203: u8;
    let mut _204: u8;
    let mut _205: !;
    let _206: ();
    let mut _207: &str;
    let _208: &str;
    let mut _209: solana_program::program_error::ProgramError;
    let mut _210: solend_sdk::error::LendingError;
    let _211: ();
    let mut _212: bool;
    let mut _213: u8;
    let mut _214: u8;
    let mut _215: !;
    let _216: ();
    let mut _217: &str;
    let _218: &str;
    let mut _219: solana_program::program_error::ProgramError;
    let mut _220: solend_sdk::error::LendingError;
    let _221: ();
    let mut _222: bool;
    let mut _223: &solana_program::pubkey::Pubkey;
    let mut _224: &solana_program::pubkey::Pubkey;
    let mut _225: !;
    let _226: ();
    let mut _227: &str;
    let _228: &str;
    let mut _229: solana_program::program_error::ProgramError;
    let mut _230: solend_sdk::error::LendingError;
    let mut _231: bool;
    let mut _232: &solend_sdk::state::ReserveFees;
    let mut _233: &solend_sdk::state::ReserveFees;
    let mut _234: !;
    let _235: ();
    let mut _236: &str;
    let _237: &str;
    let mut _238: solana_program::program_error::ProgramError;
    let mut _239: solend_sdk::error::LendingError;
    let _241: [&[u8]; 2];
    let mut _242: &[u8];
    let mut _243: &solana_program::pubkey::Pubkey;
    let mut _244: &[u8];
    let mut _245: &[u8; 1];
    let _246: &[u8; 1];
    let _247: [u8; 1];
    let mut _248: u8;
    let mut _250: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::pubkey::PubkeyError>, solana_program::pubkey::Pubkey>;
    let mut _251: std::result::Result<solana_program::pubkey::Pubkey, solana_program::pubkey::PubkeyError>;
    let mut _252: &[&[u8]];
    let mut _253: &[&[u8]; 2];
    let mut _254: &solana_program::pubkey::Pubkey;
    let mut _255: isize;
    let mut _257: !;
    let mut _258: std::result::Result<std::convert::Infallible, solana_program::pubkey::PubkeyError>;
    let _260: ();
    let mut _261: bool;
    let mut _262: &&solana_program::pubkey::Pubkey;
    let _263: &solana_program::pubkey::Pubkey;
    let mut _264: &&solana_program::pubkey::Pubkey;
    let mut _265: !;
    let _266: ();
    let mut _267: &str;
    let _268: &str;
    let mut _269: solana_program::program_error::ProgramError;
    let mut _270: solend_sdk::error::LendingError;
    let _271: ();
    let mut _272: bool;
    let mut _273: !;
    let _274: ();
    let mut _275: &str;
    let _276: &str;
    let mut _277: solana_program::program_error::ProgramError;
    let mut _278: solend_sdk::error::LendingError;
    let _279: ();
    let mut _280: bool;
    let mut _281: &&solana_program::pubkey::Pubkey;
    let mut _282: &&solana_program::pubkey::Pubkey;
    let _283: &solana_program::pubkey::Pubkey;
    let _284: ();
    let mut _285: bool;
    let mut _286: &solend_sdk::state::RateLimiterConfig;
    let mut _287: &solend_sdk::state::RateLimiterConfig;
    let mut _288: solend_sdk::state::RateLimiter;
    let mut _289: solend_sdk::state::RateLimiterConfig;
    let mut _290: u64;
    let mut _291: solana_program::clock::Clock;
    let mut _292: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solana_program::clock::Clock>;
    let mut _293: std::result::Result<solana_program::clock::Clock, solana_program::program_error::ProgramError>;
    let mut _294: isize;
    let mut _296: !;
    let mut _297: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _299: ();
    let mut _300: bool;
    let mut _301: &solana_program::pubkey::Pubkey;
    let mut _302: &solana_program::pubkey::Pubkey;
    let _303: ();
    let mut _304: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _305: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _306: &solana_program::account_info::AccountInfo<'_>;
    let mut _307: isize;
    let mut _309: !;
    let mut _310: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _312: solana_program::pubkey::Pubkey;
    let _313: ();
    let mut _314: bool;
    let mut _315: &solana_program::pubkey::Pubkey;
    let mut _316: &solana_program::pubkey::Pubkey;
    let _317: ();
    let mut _318: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _319: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _320: &solana_program::account_info::AccountInfo<'_>;
    let mut _321: isize;
    let mut _323: !;
    let mut _324: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _326: solana_program::pubkey::Pubkey;
    let _327: ();
    let mut _328: bool;
    let mut _329: &solana_program::pubkey::Pubkey;
    let mut _330: &solana_program::pubkey::Pubkey;
    let _331: solana_program::pubkey::Pubkey;
    let mut _332: bool;
    let mut _333: &solana_program::pubkey::Pubkey;
    let mut _334: &solana_program::pubkey::Pubkey;
    let _335: solana_program::pubkey::Pubkey;
    let mut _336: !;
    let _337: ();
    let mut _338: &str;
    let _339: &str;
    let mut _340: solana_program::program_error::ProgramError;
    let mut _341: solend_sdk::error::LendingError;
    let _342: ();
    let mut _343: isize;
    let mut _346: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _347: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _348: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _349: isize;
    let mut _351: !;
    let mut _352: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _354: ();
    let mut _355: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _356: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _357: solana_program::pubkey::Pubkey;
    let mut _358: &solana_program::account_info::AccountInfo<'_>;
    let mut _359: isize;
    let mut _361: !;
    let mut _362: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _364: solend_sdk::state::ReserveConfig;
    let mut _365: bool;
    let mut _366: &&solana_program::pubkey::Pubkey;
    let mut _367: &&solana_program::pubkey::Pubkey;
    let _368: &solana_program::pubkey::Pubkey;
    let _369: ();
    let mut _370: bool;
    let mut _371: u64;
    let mut _372: bool;
    let mut _373: u64;
    let mut _374: solend_sdk::state::RateLimiter;
    let mut _375: solend_sdk::state::RateLimiterConfig;
    let mut _376: u64;
    let mut _377: solana_program::clock::Clock;
    let mut _378: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solana_program::clock::Clock>;
    let mut _379: std::result::Result<solana_program::clock::Clock, solana_program::program_error::ProgramError>;
    let mut _380: isize;
    let mut _382: !;
    let mut _383: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _385: ();
    let mut _386: bool;
    let mut _387: u64;
    let mut _388: u64;
    let mut _389: u64;
    let mut _390: bool;
    let mut _391: u64;
    let mut _392: u64;
    let mut _393: u64;
    let mut _394: bool;
    let mut _395: &solana_program::pubkey::Pubkey;
    let mut _396: &solana_program::pubkey::Pubkey;
    let _397: solana_program::pubkey::Pubkey;
    let mut _398: solend_sdk::state::ReserveFees;
    let mut _399: u8;
    let mut _400: u8;
    let mut _401: solana_program::pubkey::Pubkey;
    let mut _402: !;
    let _403: ();
    let mut _404: &str;
    let _405: &str;
    let mut _406: solana_program::program_error::ProgramError;
    let mut _407: solend_sdk::error::LendingError;
    let _408: ();
    let mut _409: &mut solend_sdk::state::LastUpdate;
    let _410: ();
    let mut _411: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _412: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _413: solend_sdk::state::Reserve;
    let mut _414: &mut [u8];
    let mut _415: &mut &mut [u8];
    let mut _416: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _417: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _418: std::cell::RefMut<'_, &mut [u8]>;
    let mut _419: &std::cell::RefCell<&mut [u8]>;
    let _420: &std::cell::RefCell<&mut [u8]>;
    let mut _421: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _422: isize;
    let mut _424: !;
    let mut _425: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _427: ();
    let mut _432: &mut [u8];
    let mut _433: &solana_program::pubkey::Pubkey;
    let mut _434: &mut [u8];
    let mut _435: &solana_program::pubkey::Pubkey;
    let mut _436: &solana_program::pubkey::Pubkey;
    let mut _437: &solana_program::pubkey::Pubkey;
    let mut _438: &solana_program::pubkey::Pubkey;
    let mut _439: &solana_program::pubkey::Pubkey;
    let mut _440: &solana_program::pubkey::Pubkey;
    let mut _441: &solana_program::pubkey::Pubkey;
    let mut _442: &mut [u8];
    let mut _443: bool;
    let mut _444: bool;
    let mut _445: bool;
    let mut _446: bool;
    let mut _447: bool;
    let mut _448: bool;
    let mut _449: bool;
    let mut _450: bool;
    let mut _451: isize;
    let mut _452: isize;
    let mut _453: isize;
    let mut _454: isize;
    let mut _455: isize;
    let mut _456: isize;
    let mut _457: isize;
    let mut _458: isize;
    let mut _459: isize;
    let mut _460: isize;
    let mut _461: isize;
    let mut _462: isize;
    let mut _463: isize;
    let mut _464: isize;
    let mut _465: isize;
    let mut _466: isize;
    let mut _467: isize;
    let mut _468: isize;
    let mut _469: isize;
    let mut _470: isize;
    let mut _471: isize;
    let mut _472: isize;
    let mut _473: isize;
    let mut _474: isize;
    let mut _475: isize;
    let mut _476: isize;
    let mut _477: isize;
    let mut _478: isize;
    let mut _479: isize;
    let mut _480: isize;
    let mut _481: isize;
    let mut _482: isize;
    let mut _483: isize;
    let mut _484: isize;
    let mut _485: isize;
    let mut _486: isize;
    let mut _487: isize;
    let mut _488: isize;
    let mut _489: isize;
    let mut _490: isize;
    let mut _491: isize;
    let mut _492: isize;
    let mut _493: isize;
    let mut _494: isize;
    let mut _495: isize;
    let mut _496: isize;
    let mut _497: isize;
    let mut _498: isize;
    let mut _499: isize;
    let mut _500: isize;
    let mut _501: isize;
    let mut _502: isize;
    let mut _503: isize;
    let mut _504: isize;
    let mut _505: isize;
    let mut _506: isize;
    let mut _507: isize;
    let mut _508: isize;
    let mut _509: isize;
    let mut _510: isize;
    let mut _511: isize;
    let mut _512: isize;
    let mut _513: isize;
    let mut _514: isize;
    let mut _515: isize;
    let mut _516: isize;
    let mut _517: isize;
    let mut _518: isize;
    let mut _519: isize;
    let mut _520: isize;
    let mut _521: isize;
    let mut _522: isize;
    let mut _523: isize;
    let mut _524: isize;
    let mut _525: isize;
    let mut _526: isize;
    let mut _527: isize;
    let mut _528: isize;
    let mut _529: isize;
    let mut _530: isize;
    let mut _531: isize;
    let mut _532: isize;
    let mut _533: isize;
    let mut _534: isize;
    let mut _535: isize;
    let mut _536: *const solend_sdk::state::Reserve;
    let mut _537: *const solend_sdk::state::Reserve;
    let mut _538: *const solend_sdk::state::Reserve;
    let mut _539: *const solend_sdk::state::Reserve;
    let mut _540: *const solend_sdk::state::Reserve;
    let mut _541: *const solend_sdk::state::LendingMarket;
    let mut _542: *const solend_sdk::state::LendingMarket;
    let mut _543: *const solend_sdk::state::Reserve;
    let mut _544: *const solend_sdk::state::Reserve;
    let mut _545: *const solend_sdk::state::Reserve;
    let mut _546: *const solend_sdk::state::Reserve;
    let mut _547: *const solend_sdk::state::Reserve;
    let mut _548: *const solend_sdk::state::Reserve;
    let mut _549: *const solend_sdk::state::Reserve;
    let mut _550: *const solend_sdk::state::Reserve;
    let mut _551: *const solend_sdk::state::Reserve;
    let mut _552: *const solend_sdk::state::LendingMarket;
    let mut _553: *const solend_sdk::state::Reserve;
    let mut _554: *const solend_sdk::state::Reserve;
    let mut _555: *const solend_sdk::state::Reserve;
    let mut _556: *const solend_sdk::state::Reserve;
    let mut _557: *const solend_sdk::state::Reserve;
    let mut _558: *const solend_sdk::state::Reserve;
    let mut _559: *const solend_sdk::state::Reserve;
    let mut _560: *const solend_sdk::state::Reserve;
    let mut _561: *const solend_sdk::state::Reserve;
    let mut _562: *const solend_sdk::state::Reserve;
    let mut _563: *const solend_sdk::state::Reserve;
    scope 1 {
        debug residual => _10;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _13;
        scope 4 {
        }
    }
    scope 5 {
        debug account_info_iter => _14;
        let _17: &solana_program::account_info::AccountInfo<'_>;
        let _22: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _25: &solana_program::account_info::AccountInfo<'_>;
        scope 6 {
            debug reserve_info => _17;
            let _26: &solana_program::account_info::AccountInfo<'_>;
            let _31: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
            let _34: &solana_program::account_info::AccountInfo<'_>;
            scope 11 {
                debug lending_market_info => _26;
                let _35: &solana_program::account_info::AccountInfo<'_>;
                let _40: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                let _43: &solana_program::account_info::AccountInfo<'_>;
                scope 16 {
                    debug lending_market_authority_info => _35;
                    let _44: &solana_program::account_info::AccountInfo<'_>;
                    let _49: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                    let _52: &solana_program::account_info::AccountInfo<'_>;
                    scope 21 {
                        debug signer_info => _44;
                        let _53: &solana_program::account_info::AccountInfo<'_>;
                        let _58: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                        let _61: &solana_program::account_info::AccountInfo<'_>;
                        scope 26 {
                            debug _pyth_product_info => _53;
                            let _62: &solana_program::account_info::AccountInfo<'_>;
                            let _67: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                            let _70: &solana_program::account_info::AccountInfo<'_>;
                            scope 31 {
                                debug pyth_price_info => _62;
                                let _71: &solana_program::account_info::AccountInfo<'_>;
                                let _76: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                let _79: &solana_program::account_info::AccountInfo<'_>;
                                scope 36 {
                                    debug switchboard_feed_info => _71;
                                    let mut _80: std::boxed::Box<solend_sdk::state::Reserve>;
                                    let _93: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                    let _96: solend_sdk::state::Reserve;
                                    scope 41 {
                                        debug reserve => _80;
                                        let _108: std::string::String;
                                        let _143: std::boxed::Box<solend_sdk::state::LendingMarket>;
                                        let _156: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                        let _159: solend_sdk::state::LendingMarket;
                                        let mut _428: &[&str; 2];
                                        scope 46 {
                                            debug res => _108;
                                        }
                                        scope 47 {
                                            debug lending_market => _143;
                                            let _171: std::string::String;
                                            let _240: &[&[u8]; 2];
                                            let mut _429: &[&str; 2];
                                            let mut _648: *const ();
                                            let mut _649: usize;
                                            let mut _650: usize;
                                            let mut _651: usize;
                                            let mut _652: usize;
                                            let mut _653: bool;
                                            let mut _654: *const ();
                                            let mut _655: usize;
                                            let mut _656: usize;
                                            let mut _657: usize;
                                            let mut _658: usize;
                                            let mut _659: bool;
                                            let mut _660: *const ();
                                            let mut _661: usize;
                                            let mut _662: usize;
                                            let mut _663: usize;
                                            let mut _664: usize;
                                            let mut _665: bool;
                                            scope 52 {
                                                debug res => _171;
                                            }
                                            scope 53 {
                                                debug authority_signer_seeds => _240;
                                                let _249: solana_program::pubkey::Pubkey;
                                                let _256: std::result::Result<std::convert::Infallible, solana_program::pubkey::PubkeyError>;
                                                let _259: solana_program::pubkey::Pubkey;
                                                scope 54 {
                                                    debug lending_market_authority_pubkey => _249;
                                                    let _295: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                    let _298: solana_program::clock::Clock;
                                                    let _308: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                    let _311: ();
                                                    let _322: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                    let _325: ();
                                                    let _381: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                    let _384: solana_program::clock::Clock;
                                                    let _423: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                    let _426: ();
                                                    let mut _430: &solana_program::pubkey::Pubkey;
                                                    let mut _431: &solana_program::pubkey::Pubkey;
                                                    let mut _564: *const ();
                                                    let mut _565: usize;
                                                    let mut _566: usize;
                                                    let mut _567: usize;
                                                    let mut _568: usize;
                                                    let mut _569: bool;
                                                    let mut _570: *const ();
                                                    let mut _571: usize;
                                                    let mut _572: usize;
                                                    let mut _573: usize;
                                                    let mut _574: usize;
                                                    let mut _575: bool;
                                                    let mut _576: *const ();
                                                    let mut _577: usize;
                                                    let mut _578: usize;
                                                    let mut _579: usize;
                                                    let mut _580: usize;
                                                    let mut _581: bool;
                                                    let mut _582: *const ();
                                                    let mut _583: usize;
                                                    let mut _584: usize;
                                                    let mut _585: usize;
                                                    let mut _586: usize;
                                                    let mut _587: bool;
                                                    let mut _588: *const ();
                                                    let mut _589: usize;
                                                    let mut _590: usize;
                                                    let mut _591: usize;
                                                    let mut _592: usize;
                                                    let mut _593: bool;
                                                    let mut _594: *const ();
                                                    let mut _595: usize;
                                                    let mut _596: usize;
                                                    let mut _597: usize;
                                                    let mut _598: usize;
                                                    let mut _599: bool;
                                                    let mut _600: *const ();
                                                    let mut _601: usize;
                                                    let mut _602: usize;
                                                    let mut _603: usize;
                                                    let mut _604: usize;
                                                    let mut _605: bool;
                                                    let mut _606: *const ();
                                                    let mut _607: usize;
                                                    let mut _608: usize;
                                                    let mut _609: usize;
                                                    let mut _610: usize;
                                                    let mut _611: bool;
                                                    let mut _612: *const ();
                                                    let mut _613: usize;
                                                    let mut _614: usize;
                                                    let mut _615: usize;
                                                    let mut _616: usize;
                                                    let mut _617: bool;
                                                    let mut _618: *const ();
                                                    let mut _619: usize;
                                                    let mut _620: usize;
                                                    let mut _621: usize;
                                                    let mut _622: usize;
                                                    let mut _623: bool;
                                                    let mut _624: *const ();
                                                    let mut _625: usize;
                                                    let mut _626: usize;
                                                    let mut _627: usize;
                                                    let mut _628: usize;
                                                    let mut _629: bool;
                                                    let mut _630: *const ();
                                                    let mut _631: usize;
                                                    let mut _632: usize;
                                                    let mut _633: usize;
                                                    let mut _634: usize;
                                                    let mut _635: bool;
                                                    let mut _636: *const ();
                                                    let mut _637: usize;
                                                    let mut _638: usize;
                                                    let mut _639: usize;
                                                    let mut _640: usize;
                                                    let mut _641: bool;
                                                    let mut _642: *const ();
                                                    let mut _643: usize;
                                                    let mut _644: usize;
                                                    let mut _645: usize;
                                                    let mut _646: usize;
                                                    let mut _647: bool;
                                                    scope 59 {
                                                        debug residual => _295;
                                                        scope 60 {
                                                        }
                                                    }
                                                    scope 61 {
                                                        debug val => _298;
                                                        scope 62 {
                                                        }
                                                    }
                                                    scope 63 {
                                                        debug residual => _308;
                                                        scope 64 {
                                                        }
                                                    }
                                                    scope 65 {
                                                        debug val => _311;
                                                        scope 66 {
                                                        }
                                                    }
                                                    scope 67 {
                                                        debug residual => _322;
                                                        scope 68 {
                                                        }
                                                    }
                                                    scope 69 {
                                                        debug val => _325;
                                                        scope 70 {
                                                        }
                                                    }
                                                    scope 71 {
                                                        debug extra_oracle_pubkey => _344;
                                                        let _344: solana_program::pubkey::Pubkey;
                                                        let _345: &solana_program::account_info::AccountInfo<'_>;
                                                        let _350: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                        let _353: &solana_program::account_info::AccountInfo<'_>;
                                                        scope 72 {
                                                            debug extra_oracle_info => _345;
                                                            let _360: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                            let _363: ();
                                                            scope 77 {
                                                                debug residual => _360;
                                                                scope 78 {
                                                                }
                                                            }
                                                            scope 79 {
                                                                debug val => _363;
                                                                scope 80 {
                                                                }
                                                            }
                                                        }
                                                        scope 73 {
                                                            debug residual => _350;
                                                            scope 74 {
                                                            }
                                                        }
                                                        scope 75 {
                                                            debug val => _353;
                                                            scope 76 {
                                                            }
                                                        }
                                                    }
                                                    scope 81 {
                                                        debug residual => _381;
                                                        scope 82 {
                                                        }
                                                    }
                                                    scope 83 {
                                                        debug val => _384;
                                                        scope 84 {
                                                        }
                                                    }
                                                    scope 85 {
                                                        debug residual => _423;
                                                        scope 86 {
                                                        }
                                                    }
                                                    scope 87 {
                                                        debug val => _426;
                                                        scope 88 {
                                                        }
                                                    }
                                                }
                                                scope 55 {
                                                    debug residual => _256;
                                                    scope 56 {
                                                    }
                                                }
                                                scope 57 {
                                                    debug val => _259;
                                                    scope 58 {
                                                    }
                                                }
                                            }
                                        }
                                        scope 48 {
                                            debug residual => _156;
                                            scope 49 {
                                            }
                                        }
                                        scope 50 {
                                            debug val => _159;
                                            scope 51 {
                                            }
                                        }
                                    }
                                    scope 42 {
                                        debug residual => _93;
                                        scope 43 {
                                        }
                                    }
                                    scope 44 {
                                        debug val => _96;
                                        scope 45 {
                                        }
                                    }
                                }
                                scope 37 {
                                    debug residual => _76;
                                    scope 38 {
                                    }
                                }
                                scope 39 {
                                    debug val => _79;
                                    scope 40 {
                                    }
                                }
                            }
                            scope 32 {
                                debug residual => _67;
                                scope 33 {
                                }
                            }
                            scope 34 {
                                debug val => _70;
                                scope 35 {
                                }
                            }
                        }
                        scope 27 {
                            debug residual => _58;
                            scope 28 {
                            }
                        }
                        scope 29 {
                            debug val => _61;
                            scope 30 {
                            }
                        }
                    }
                    scope 22 {
                        debug residual => _49;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug val => _52;
                        scope 25 {
                        }
                    }
                }
                scope 17 {
                    debug residual => _40;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _43;
                    scope 20 {
                    }
                }
            }
            scope 12 {
                debug residual => _31;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _34;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _22;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _25;
            scope 10 {
            }
        }
    }

    bb0: {
        _450 = const false;
        _449 = const false;
        _448 = const false;
        _447 = const false;
        _446 = const false;
        _445 = const false;
        _444 = const false;
        _443 = const false;
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _2;
        _7 = validate_reserve_config(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        _6 = <Result<(), ProgramError> as Try>::branch(move _7) -> [return: bb2, unwind: bb265];
    }

    bb2: {
        StorageDead(_7);
        _9 = discriminant(_6);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_6 as Continue).0: ());
        _5 = _13;
        StorageDead(_13);
        _451 = discriminant(_6);
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &(*_4);
        _15 = bytemuck::core::slice::<impl [AccountInfo<'_>]>::iter(move _16) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_12);
        _12 = move _10;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _12) -> [return: bb6, unwind: bb282];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        _517 = discriminant(_6);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb249;
    }

    bb7: {
        StorageDead(_16);
        _14 = &mut _15;
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = &mut (*_14);
        _19 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _20) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_20);
        _18 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _19) -> [return: bb9, unwind: bb265];
    }

    bb9: {
        StorageDead(_19);
        _21 = discriminant(_18);
        switchInt(move _21) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_25);
        _25 = ((_18 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _17 = _25;
        StorageDead(_25);
        _453 = discriminant(_18);
        StorageDead(_18);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = &mut (*_14);
        _28 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _29) -> [return: bb13, unwind continue];
    }

    bb11: {
        StorageLive(_22);
        _22 = move ((_18 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_24);
        _24 = move _22;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _24) -> [return: bb12, unwind: bb281];
    }

    bb12: {
        StorageDead(_24);
        StorageDead(_22);
        _515 = discriminant(_18);
        StorageDead(_18);
        goto -> bb248;
    }

    bb13: {
        StorageDead(_29);
        _27 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _28) -> [return: bb14, unwind: bb265];
    }

    bb14: {
        StorageDead(_28);
        _30 = discriminant(_27);
        switchInt(move _30) -> [0: bb15, 1: bb16, otherwise: bb4];
    }

    bb15: {
        StorageLive(_34);
        _34 = ((_27 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _26 = _34;
        StorageDead(_34);
        _455 = discriminant(_27);
        StorageDead(_27);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = &mut (*_14);
        _37 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _38) -> [return: bb18, unwind continue];
    }

    bb16: {
        StorageLive(_31);
        _31 = move ((_27 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_33);
        _33 = move _31;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _33) -> [return: bb17, unwind: bb280];
    }

    bb17: {
        StorageDead(_33);
        StorageDead(_31);
        _513 = discriminant(_27);
        StorageDead(_27);
        goto -> bb247;
    }

    bb18: {
        StorageDead(_38);
        _36 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _37) -> [return: bb19, unwind: bb265];
    }

    bb19: {
        StorageDead(_37);
        _39 = discriminant(_36);
        switchInt(move _39) -> [0: bb20, 1: bb21, otherwise: bb4];
    }

    bb20: {
        StorageLive(_43);
        _43 = ((_36 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _35 = _43;
        StorageDead(_43);
        _457 = discriminant(_36);
        StorageDead(_36);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = &mut (*_14);
        _46 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _47) -> [return: bb23, unwind continue];
    }

    bb21: {
        StorageLive(_40);
        _40 = move ((_36 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_42);
        _42 = move _40;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _42) -> [return: bb22, unwind: bb279];
    }

    bb22: {
        StorageDead(_42);
        StorageDead(_40);
        _511 = discriminant(_36);
        StorageDead(_36);
        goto -> bb246;
    }

    bb23: {
        StorageDead(_47);
        _45 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _46) -> [return: bb24, unwind: bb265];
    }

    bb24: {
        StorageDead(_46);
        _48 = discriminant(_45);
        switchInt(move _48) -> [0: bb25, 1: bb26, otherwise: bb4];
    }

    bb25: {
        StorageLive(_52);
        _52 = ((_45 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _44 = _52;
        StorageDead(_52);
        _459 = discriminant(_45);
        StorageDead(_45);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = &mut (*_14);
        _55 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _56) -> [return: bb28, unwind continue];
    }

    bb26: {
        StorageLive(_49);
        _49 = move ((_45 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_51);
        _51 = move _49;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _51) -> [return: bb27, unwind: bb278];
    }

    bb27: {
        StorageDead(_51);
        StorageDead(_49);
        _509 = discriminant(_45);
        StorageDead(_45);
        goto -> bb245;
    }

    bb28: {
        StorageDead(_56);
        _54 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _55) -> [return: bb29, unwind: bb265];
    }

    bb29: {
        StorageDead(_55);
        _57 = discriminant(_54);
        switchInt(move _57) -> [0: bb30, 1: bb31, otherwise: bb4];
    }

    bb30: {
        StorageLive(_61);
        _61 = ((_54 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _53 = _61;
        StorageDead(_61);
        _461 = discriminant(_54);
        StorageDead(_54);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = &mut (*_14);
        _64 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _65) -> [return: bb33, unwind continue];
    }

    bb31: {
        StorageLive(_58);
        _58 = move ((_54 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_60);
        _60 = move _58;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _60) -> [return: bb32, unwind: bb277];
    }

    bb32: {
        StorageDead(_60);
        StorageDead(_58);
        _507 = discriminant(_54);
        StorageDead(_54);
        goto -> bb244;
    }

    bb33: {
        StorageDead(_65);
        _63 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _64) -> [return: bb34, unwind: bb265];
    }

    bb34: {
        StorageDead(_64);
        _66 = discriminant(_63);
        switchInt(move _66) -> [0: bb35, 1: bb36, otherwise: bb4];
    }

    bb35: {
        StorageLive(_70);
        _70 = ((_63 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _62 = _70;
        StorageDead(_70);
        _463 = discriminant(_63);
        StorageDead(_63);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = &mut (*_14);
        _73 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _74) -> [return: bb38, unwind continue];
    }

    bb36: {
        StorageLive(_67);
        _67 = move ((_63 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_69);
        _69 = move _67;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _69) -> [return: bb37, unwind: bb276];
    }

    bb37: {
        StorageDead(_69);
        StorageDead(_67);
        _505 = discriminant(_63);
        StorageDead(_63);
        goto -> bb243;
    }

    bb38: {
        StorageDead(_74);
        _72 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _73) -> [return: bb39, unwind: bb265];
    }

    bb39: {
        StorageDead(_73);
        _75 = discriminant(_72);
        switchInt(move _75) -> [0: bb40, 1: bb41, otherwise: bb4];
    }

    bb40: {
        StorageLive(_79);
        _79 = ((_72 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _71 = _79;
        StorageDead(_79);
        _465 = discriminant(_72);
        StorageDead(_72);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = &((*_17).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _90 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _91) -> [return: bb43, unwind continue];
    }

    bb41: {
        StorageLive(_76);
        _76 = move ((_72 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_78);
        _78 = move _76;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _78) -> [return: bb42, unwind: bb275];
    }

    bb42: {
        StorageDead(_78);
        StorageDead(_76);
        _503 = discriminant(_72);
        StorageDead(_72);
        goto -> bb242;
    }

    bb43: {
        _89 = &(*_90);
        StorageDead(_91);
        _88 = RefCell::<&mut [u8]>::borrow(move _89) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_89);
        _87 = &_88;
        _86 = &(*_87);
        _85 = <Ref<'_, &mut [u8]> as Deref>::deref(move _86) -> [return: bb45, unwind: bb264];
    }

    bb45: {
        _432 = deref_copy (*_85);
        _84 = &(*_432);
        StorageDead(_86);
        _83 = <Reserve as Pack>::unpack(move _84) -> [return: bb46, unwind: bb264];
    }

    bb46: {
        StorageDead(_84);
        _82 = <Result<Reserve, ProgramError> as Try>::branch(move _83) -> [return: bb47, unwind: bb264];
    }

    bb47: {
        _449 = const true;
        _450 = const true;
        StorageDead(_83);
        _92 = discriminant(_82);
        switchInt(move _92) -> [0: bb48, 1: bb49, otherwise: bb4];
    }

    bb48: {
        StorageLive(_96);
        _96 = move ((_82 as Continue).0: solend_sdk::state::Reserve);
        _81 = move _96;
        StorageDead(_96);
        _80 = Box::<Reserve>::new(move _81) -> [return: bb51, unwind: bb274];
    }

    bb49: {
        StorageLive(_93);
        _93 = move ((_82 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_95);
        _95 = move _93;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _95) -> [return: bb50, unwind: bb274];
    }

    bb50: {
        StorageDead(_95);
        StorageDead(_93);
        StorageDead(_81);
        _501 = discriminant(_82);
        drop(_88) -> [return: bb240, unwind: bb265];
    }

    bb51: {
        StorageDead(_81);
        _467 = discriminant(_82);
        drop(_88) -> [return: bb52, unwind: bb263];
    }

    bb52: {
        StorageDead(_90);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_85);
        _449 = const false;
        _450 = const false;
        StorageDead(_82);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = &((*_17).3: &solana_program::pubkey::Pubkey);
        StorageLive(_100);
        _100 = &_1;
        _98 = <&Pubkey as PartialEq>::ne(move _99, move _100) -> [return: bb53, unwind: bb263];
    }

    bb53: {
        switchInt(move _98) -> [0: bb67, otherwise: bb54];
    }

    bb54: {
        StorageDead(_100);
        StorageDead(_99);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _428 = const _;
        _112 = &(*_428);
        _111 = &(*_112);
        _110 = move _111 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_111);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _433 = deref_copy ((*_17).3: &solana_program::pubkey::Pubkey);
        _123 = &(*_433);
        _122 = <Pubkey as ToString>::to_string(move _123) -> [return: bb55, unwind: bb263];
    }

    bb55: {
        StorageDead(_123);
        _121 = &_122;
        _120 = &_121;
        _119 = &(*_120);
        _118 = bytemuck::core::fmt::rt::Argument::<'_>::new_display::<&String>(move _119) -> [return: bb56, unwind: bb262];
    }

    bb56: {
        StorageDead(_119);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _129 = &(*_1);
        _128 = <Pubkey as ToString>::to_string(move _129) -> [return: bb57, unwind: bb262];
    }

    bb57: {
        StorageDead(_129);
        _127 = &_128;
        _126 = &_127;
        _125 = &(*_126);
        _124 = bytemuck::core::fmt::rt::Argument::<'_>::new_display::<&String>(move _125) -> [return: bb58, unwind: bb261];
    }

    bb58: {
        StorageDead(_125);
        _117 = [move _118, move _124];
        StorageDead(_124);
        StorageDead(_118);
        _116 = &_117;
        _115 = &(*_116);
        _114 = move _115 as &[bytemuck::core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_115);
        _109 = Arguments::<'_>::new_v1(move _110, move _114) -> [return: bb59, unwind: bb261];
    }

    bb59: {
        StorageDead(_114);
        StorageDead(_110);
        _108 = format(move _109) -> [return: bb60, unwind: bb261];
    }

    bb60: {
        StorageDead(_109);
        drop(_128) -> [return: bb61, unwind: bb259];
    }

    bb61: {
        StorageDead(_128);
        StorageDead(_127);
        StorageDead(_126);
        drop(_122) -> [return: bb62, unwind: bb260];
    }

    bb62: {
        StorageDead(_122);
        StorageDead(_121);
        StorageDead(_120);
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_112);
        _107 = move _108;
        StorageDead(_108);
        _106 = &_107;
        _105 = &(*_106);
        _104 = <String as Deref>::deref(move _105) -> [return: bb63, unwind: bb258];
    }

    bb63: {
        _103 = &(*_104);
        StorageDead(_105);
        _102 = solana_program::log::sol_log(move _103) -> [return: bb64, unwind: bb258];
    }

    bb64: {
        StorageDead(_103);
        drop(_107) -> [return: bb65, unwind: bb263];
    }

    bb65: {
        StorageDead(_107);
        StorageDead(_106);
        StorageDead(_104);
        StorageDead(_102);
        StorageLive(_130);
        StorageLive(_131);
        _131 = solend_sdk::error::LendingError::InvalidAccountOwner;
        _130 = <LendingError as Into<ProgramError>>::into(move _131) -> [return: bb66, unwind: bb263];
    }

    bb66: {
        StorageDead(_131);
        _0 = Result::<(), ProgramError>::Err(move _130);
        StorageDead(_130);
        StorageDead(_98);
        StorageDead(_97);
        goto -> bb239;
    }

    bb67: {
        StorageDead(_100);
        StorageDead(_99);
        _97 = const ();
        StorageDead(_98);
        StorageDead(_97);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        _536 = (((_80.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _135 = &((*_536).2: solana_program::pubkey::Pubkey);
        _134 = &_135;
        StorageLive(_136);
        _136 = &((*_26).0: &solana_program::pubkey::Pubkey);
        _133 = <&Pubkey as PartialEq>::ne(move _134, move _136) -> [return: bb68, unwind: bb263];
    }

    bb68: {
        switchInt(move _133) -> [0: bb72, otherwise: bb69];
    }

    bb69: {
        StorageDead(_136);
        StorageDead(_135);
        StorageDead(_134);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        _140 = const "Reserve lending market does not match the lending market provided";
        _139 = &(*_140);
        _138 = solana_program::log::sol_log(move _139) -> [return: bb70, unwind: bb263];
    }

    bb70: {
        StorageDead(_139);
        StorageDead(_140);
        StorageDead(_138);
        StorageLive(_141);
        StorageLive(_142);
        _142 = InvalidAccountInput;
        _141 = <LendingError as Into<ProgramError>>::into(move _142) -> [return: bb71, unwind: bb263];
    }

    bb71: {
        StorageDead(_142);
        _0 = Result::<(), ProgramError>::Err(move _141);
        StorageDead(_141);
        StorageDead(_133);
        StorageDead(_132);
        goto -> bb239;
    }

    bb72: {
        StorageDead(_136);
        StorageDead(_135);
        StorageDead(_134);
        _132 = const ();
        StorageDead(_133);
        StorageDead(_132);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        _154 = &((*_26).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _153 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _154) -> [return: bb73, unwind: bb263];
    }

    bb73: {
        _152 = &(*_153);
        StorageDead(_154);
        _151 = RefCell::<&mut [u8]>::borrow(move _152) -> [return: bb74, unwind: bb263];
    }

    bb74: {
        StorageDead(_152);
        _150 = &_151;
        _149 = &(*_150);
        _148 = <Ref<'_, &mut [u8]> as Deref>::deref(move _149) -> [return: bb75, unwind: bb257];
    }

    bb75: {
        _434 = deref_copy (*_148);
        _147 = &(*_434);
        StorageDead(_149);
        _146 = <LendingMarket as Pack>::unpack(move _147) -> [return: bb76, unwind: bb257];
    }

    bb76: {
        StorageDead(_147);
        _145 = <Result<LendingMarket, ProgramError> as Try>::branch(move _146) -> [return: bb77, unwind: bb257];
    }

    bb77: {
        _447 = const true;
        _448 = const true;
        StorageDead(_146);
        _155 = discriminant(_145);
        switchInt(move _155) -> [0: bb78, 1: bb79, otherwise: bb4];
    }

    bb78: {
        StorageLive(_159);
        _159 = move ((_145 as Continue).0: solend_sdk::state::LendingMarket);
        _144 = move _159;
        StorageDead(_159);
        _143 = Box::<LendingMarket>::new(move _144) -> [return: bb81, unwind: bb273];
    }

    bb79: {
        StorageLive(_156);
        _156 = move ((_145 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_158);
        _158 = move _156;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _158) -> [return: bb80, unwind: bb273];
    }

    bb80: {
        StorageDead(_158);
        StorageDead(_156);
        StorageDead(_144);
        _499 = discriminant(_145);
        drop(_151) -> [return: bb237, unwind: bb263];
    }

    bb81: {
        StorageDead(_144);
        _469 = discriminant(_145);
        drop(_151) -> [return: bb82, unwind: bb256];
    }

    bb82: {
        StorageDead(_153);
        StorageDead(_151);
        StorageDead(_150);
        StorageDead(_148);
        _447 = const false;
        _448 = const false;
        StorageDead(_145);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        _162 = &((*_26).3: &solana_program::pubkey::Pubkey);
        StorageLive(_163);
        _163 = &_1;
        _161 = <&Pubkey as PartialEq>::ne(move _162, move _163) -> [return: bb83, unwind: bb256];
    }

    bb83: {
        switchInt(move _161) -> [0: bb97, otherwise: bb84];
    }

    bb84: {
        StorageDead(_163);
        StorageDead(_162);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        _429 = const _;
        _175 = &(*_429);
        _174 = &(*_175);
        _173 = move _174 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_174);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        _435 = deref_copy ((*_26).3: &solana_program::pubkey::Pubkey);
        _186 = &(*_435);
        _185 = <Pubkey as ToString>::to_string(move _186) -> [return: bb85, unwind: bb256];
    }

    bb85: {
        StorageDead(_186);
        _184 = &_185;
        _183 = &_184;
        _182 = &(*_183);
        _181 = bytemuck::core::fmt::rt::Argument::<'_>::new_display::<&String>(move _182) -> [return: bb86, unwind: bb255];
    }

    bb86: {
        StorageDead(_182);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        _192 = &(*_1);
        _191 = <Pubkey as ToString>::to_string(move _192) -> [return: bb87, unwind: bb255];
    }

    bb87: {
        StorageDead(_192);
        _190 = &_191;
        _189 = &_190;
        _188 = &(*_189);
        _187 = bytemuck::core::fmt::rt::Argument::<'_>::new_display::<&String>(move _188) -> [return: bb88, unwind: bb254];
    }

    bb88: {
        StorageDead(_188);
        _180 = [move _181, move _187];
        StorageDead(_187);
        StorageDead(_181);
        _179 = &_180;
        _178 = &(*_179);
        _177 = move _178 as &[bytemuck::core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_178);
        _172 = Arguments::<'_>::new_v1(move _173, move _177) -> [return: bb89, unwind: bb254];
    }

    bb89: {
        StorageDead(_177);
        StorageDead(_173);
        _171 = format(move _172) -> [return: bb90, unwind: bb254];
    }

    bb90: {
        StorageDead(_172);
        drop(_191) -> [return: bb91, unwind: bb252];
    }

    bb91: {
        StorageDead(_191);
        StorageDead(_190);
        StorageDead(_189);
        drop(_185) -> [return: bb92, unwind: bb253];
    }

    bb92: {
        StorageDead(_185);
        StorageDead(_184);
        StorageDead(_183);
        StorageDead(_180);
        StorageDead(_179);
        StorageDead(_175);
        _170 = move _171;
        StorageDead(_171);
        _169 = &_170;
        _168 = &(*_169);
        _167 = <String as Deref>::deref(move _168) -> [return: bb93, unwind: bb251];
    }

    bb93: {
        _166 = &(*_167);
        StorageDead(_168);
        _165 = solana_program::log::sol_log(move _166) -> [return: bb94, unwind: bb251];
    }

    bb94: {
        StorageDead(_166);
        drop(_170) -> [return: bb95, unwind: bb256];
    }

    bb95: {
        StorageDead(_170);
        StorageDead(_169);
        StorageDead(_167);
        StorageDead(_165);
        StorageLive(_193);
        StorageLive(_194);
        _194 = solend_sdk::error::LendingError::InvalidAccountOwner;
        _193 = <LendingError as Into<ProgramError>>::into(move _194) -> [return: bb96, unwind: bb256];
    }

    bb96: {
        StorageDead(_194);
        _0 = Result::<(), ProgramError>::Err(move _193);
        StorageDead(_193);
        StorageDead(_161);
        StorageDead(_160);
        goto -> bb236;
    }

    bb97: {
        StorageDead(_163);
        StorageDead(_162);
        _160 = const ();
        StorageDead(_161);
        StorageDead(_160);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        _199 = solend_market_owner::id() -> [return: bb98, unwind: bb256];
    }

    bb98: {
        _198 = &_199;
        _197 = &_198;
        StorageLive(_200);
        _200 = &((*_44).0: &solana_program::pubkey::Pubkey);
        _196 = <&Pubkey as PartialEq>::ne(move _197, move _200) -> [return: bb99, unwind: bb256];
    }

    bb99: {
        switchInt(move _196) -> [0: bb119, otherwise: bb100];
    }

    bb100: {
        StorageDead(_200);
        StorageDead(_199);
        StorageDead(_198);
        StorageDead(_197);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        _537 = (((_80.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _660 = _537 as *const () (PtrToPtr);
        _661 = _660 as usize (Transmute);
        _662 = AlignOf(solend_sdk::state::Reserve);
        _663 = Sub(_662, const 1_usize);
        _664 = BitAnd(_661, _663);
        _665 = Eq(_664, const 0_usize);
        assert(_665, "misaligned pointer dereference: address must be a multiple of {} but is {}", _662, _661) -> [success: bb299, unwind unreachable];
    }

    bb101: {
        StorageDead(_204);
        StorageDead(_203);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        _208 = const "permissionless markets can't edit protocol liquidation fees";
        _207 = &(*_208);
        _206 = solana_program::log::sol_log(move _207) -> [return: bb102, unwind: bb256];
    }

    bb102: {
        StorageDead(_207);
        StorageDead(_208);
        StorageDead(_206);
        StorageLive(_209);
        StorageLive(_210);
        _210 = InvalidConfig;
        _209 = <LendingError as Into<ProgramError>>::into(move _210) -> [return: bb103, unwind: bb256];
    }

    bb103: {
        StorageDead(_210);
        _0 = Result::<(), ProgramError>::Err(move _209);
        StorageDead(_209);
        StorageDead(_202);
        StorageDead(_201);
        goto -> bb235;
    }

    bb104: {
        StorageDead(_204);
        StorageDead(_203);
        _201 = const ();
        StorageDead(_202);
        StorageDead(_201);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        _538 = (((_80.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _654 = _538 as *const () (PtrToPtr);
        _655 = _654 as usize (Transmute);
        _656 = AlignOf(solend_sdk::state::Reserve);
        _657 = Sub(_656, const 1_usize);
        _658 = BitAnd(_655, _657);
        _659 = Eq(_658, const 0_usize);
        assert(_659, "misaligned pointer dereference: address must be a multiple of {} but is {}", _656, _655) -> [success: bb298, unwind unreachable];
    }

    bb105: {
        StorageDead(_214);
        StorageDead(_213);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        _218 = const "permissionless markets can't edit protocol take rate";
        _217 = &(*_218);
        _216 = solana_program::log::sol_log(move _217) -> [return: bb107, unwind: bb256];
    }

    bb106: {
        StorageDead(_214);
        StorageDead(_213);
        _211 = const ();
        StorageDead(_212);
        StorageDead(_211);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        _539 = (((_80.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _223 = &(((*_539).5: solend_sdk::state::ReserveConfig).14: solana_program::pubkey::Pubkey);
        StorageLive(_224);
        _224 = &(_2.14: solana_program::pubkey::Pubkey);
        _222 = <Pubkey as PartialEq>::ne(move _223, move _224) -> [return: bb109, unwind: bb256];
    }

    bb107: {
        StorageDead(_217);
        StorageDead(_218);
        StorageDead(_216);
        StorageLive(_219);
        StorageLive(_220);
        _220 = InvalidConfig;
        _219 = <LendingError as Into<ProgramError>>::into(move _220) -> [return: bb108, unwind: bb256];
    }

    bb108: {
        StorageDead(_220);
        _0 = Result::<(), ProgramError>::Err(move _219);
        StorageDead(_219);
        StorageDead(_212);
        StorageDead(_211);
        goto -> bb235;
    }

    bb109: {
        switchInt(move _222) -> [0: bb113, otherwise: bb110];
    }

    bb110: {
        StorageDead(_224);
        StorageDead(_223);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        _228 = const "permissionless markets can't edit fee receiver";
        _227 = &(*_228);
        _226 = solana_program::log::sol_log(move _227) -> [return: bb111, unwind: bb256];
    }

    bb111: {
        StorageDead(_227);
        StorageDead(_228);
        StorageDead(_226);
        StorageLive(_229);
        StorageLive(_230);
        _230 = InvalidConfig;
        _229 = <LendingError as Into<ProgramError>>::into(move _230) -> [return: bb112, unwind: bb256];
    }

    bb112: {
        StorageDead(_230);
        _0 = Result::<(), ProgramError>::Err(move _229);
        StorageDead(_229);
        StorageDead(_222);
        StorageDead(_221);
        goto -> bb235;
    }

    bb113: {
        StorageDead(_224);
        StorageDead(_223);
        _221 = const ();
        StorageDead(_222);
        StorageDead(_221);
        StorageLive(_231);
        StorageLive(_232);
        _540 = (((_80.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _232 = &(((*_540).5: solend_sdk::state::ReserveConfig).11: solend_sdk::state::ReserveFees);
        StorageLive(_233);
        _233 = &(_2.11: solend_sdk::state::ReserveFees);
        _231 = <ReserveFees as PartialEq>::ne(move _232, move _233) -> [return: bb114, unwind: bb256];
    }

    bb114: {
        switchInt(move _231) -> [0: bb118, otherwise: bb115];
    }

    bb115: {
        StorageDead(_233);
        StorageDead(_232);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        _237 = const "permissionless markets can't edit fee configs!";
        _236 = &(*_237);
        _235 = solana_program::log::sol_log(move _236) -> [return: bb116, unwind: bb256];
    }

    bb116: {
        StorageDead(_236);
        StorageDead(_237);
        StorageDead(_235);
        StorageLive(_238);
        StorageLive(_239);
        _239 = InvalidConfig;
        _238 = <LendingError as Into<ProgramError>>::into(move _239) -> [return: bb117, unwind: bb256];
    }

    bb117: {
        StorageDead(_239);
        _0 = Result::<(), ProgramError>::Err(move _238);
        StorageDead(_238);
        StorageDead(_231);
        goto -> bb235;
    }

    bb118: {
        StorageDead(_233);
        StorageDead(_232);
        _195 = const ();
        StorageDead(_231);
        goto -> bb120;
    }

    bb119: {
        StorageDead(_200);
        StorageDead(_199);
        StorageDead(_198);
        StorageDead(_197);
        _195 = const ();
        goto -> bb120;
    }

    bb120: {
        StorageDead(_196);
        StorageDead(_195);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        _436 = deref_copy ((*_26).0: &solana_program::pubkey::Pubkey);
        _243 = &(*_436);
        _242 = <Pubkey as AsRef<[u8]>>::as_ref(move _243) -> [return: bb121, unwind: bb256];
    }

    bb121: {
        StorageDead(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        _541 = (((_143.0: std::ptr::Unique<solend_sdk::state::LendingMarket>).0: std::ptr::NonNull<solend_sdk::state::LendingMarket>).0: *const solend_sdk::state::LendingMarket);
        _648 = _541 as *const () (PtrToPtr);
        _649 = _648 as usize (Transmute);
        _650 = AlignOf(solend_sdk::state::LendingMarket);
        _651 = Sub(_650, const 1_usize);
        _652 = BitAnd(_649, _651);
        _653 = Eq(_652, const 0_usize);
        assert(_653, "misaligned pointer dereference: address must be a multiple of {} but is {}", _650, _649) -> [success: bb297, unwind unreachable];
    }

    bb122: {
        StorageDead(_254);
        StorageDead(_252);
        _250 = <Result<Pubkey, PubkeyError> as Try>::branch(move _251) -> [return: bb123, unwind: bb256];
    }

    bb123: {
        StorageDead(_251);
        _255 = discriminant(_250);
        switchInt(move _255) -> [0: bb124, 1: bb125, otherwise: bb4];
    }

    bb124: {
        StorageLive(_259);
        _259 = ((_250 as Continue).0: solana_program::pubkey::Pubkey);
        _249 = _259;
        StorageDead(_259);
        StorageDead(_250);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        _263 = &_249;
        _262 = &_263;
        StorageLive(_264);
        _264 = &((*_35).0: &solana_program::pubkey::Pubkey);
        _261 = <&Pubkey as PartialEq>::ne(move _262, move _264) -> [return: bb127, unwind: bb256];
    }

    bb125: {
        StorageLive(_256);
        _256 = move ((_250 as Break).0: std::result::Result<std::convert::Infallible, solana_program::pubkey::PubkeyError>);
        StorageLive(_258);
        _258 = move _256;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, PubkeyError>>>::from_residual(move _258) -> [return: bb126, unwind: bb256];
    }

    bb126: {
        StorageDead(_258);
        StorageDead(_256);
        StorageDead(_250);
        goto -> bb234;
    }

    bb127: {
        switchInt(move _261) -> [0: bb131, otherwise: bb128];
    }

    bb128: {
        StorageDead(_264);
        StorageDead(_263);
        StorageDead(_262);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        _268 = const "Derived lending market authority does not match the lending market authority provided";
        _267 = &(*_268);
        _266 = solana_program::log::sol_log(move _267) -> [return: bb129, unwind: bb256];
    }

    bb129: {
        StorageDead(_267);
        StorageDead(_268);
        StorageDead(_266);
        StorageLive(_269);
        StorageLive(_270);
        _270 = InvalidMarketAuthority;
        _269 = <LendingError as Into<ProgramError>>::into(move _270) -> [return: bb130, unwind: bb256];
    }

    bb130: {
        StorageDead(_270);
        _0 = Result::<(), ProgramError>::Err(move _269);
        StorageDead(_269);
        StorageDead(_261);
        StorageDead(_260);
        goto -> bb234;
    }

    bb131: {
        StorageDead(_264);
        StorageDead(_263);
        StorageDead(_262);
        _260 = const ();
        StorageDead(_261);
        StorageDead(_260);
        StorageLive(_271);
        StorageLive(_272);
        _272 = ((*_44).5: bool);
        switchInt(move _272) -> [0: bb133, otherwise: bb132];
    }

    bb132: {
        _271 = const ();
        StorageDead(_272);
        StorageDead(_271);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        _281 = &((*_44).0: &solana_program::pubkey::Pubkey);
        StorageLive(_282);
        StorageLive(_283);
        _542 = (((_143.0: std::ptr::Unique<solend_sdk::state::LendingMarket>).0: std::ptr::NonNull<solend_sdk::state::LendingMarket>).0: *const solend_sdk::state::LendingMarket);
        _283 = &((*_542).2: solana_program::pubkey::Pubkey);
        _282 = &_283;
        _280 = <&Pubkey as PartialEq>::eq(move _281, move _282) -> [return: bb136, unwind: bb256];
    }

    bb133: {
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        _276 = const "Lending market owner or risk authority provided must be a signer";
        _275 = &(*_276);
        _274 = solana_program::log::sol_log(move _275) -> [return: bb134, unwind: bb256];
    }

    bb134: {
        StorageDead(_275);
        StorageDead(_276);
        StorageDead(_274);
        StorageLive(_277);
        StorageLive(_278);
        _278 = InvalidSigner;
        _277 = <LendingError as Into<ProgramError>>::into(move _278) -> [return: bb135, unwind: bb256];
    }

    bb135: {
        StorageDead(_278);
        _0 = Result::<(), ProgramError>::Err(move _277);
        StorageDead(_277);
        StorageDead(_272);
        StorageDead(_271);
        goto -> bb234;
    }

    bb136: {
        switchInt(move _280) -> [0: bb188, otherwise: bb137];
    }

    bb137: {
        StorageDead(_283);
        StorageDead(_282);
        StorageDead(_281);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        _286 = &_3;
        StorageLive(_287);
        _543 = (((_80.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _287 = &(((*_543).6: solend_sdk::state::RateLimiter).0: solend_sdk::state::RateLimiterConfig);
        _285 = <RateLimiterConfig as PartialEq>::ne(move _286, move _287) -> [return: bb138, unwind: bb256];
    }

    bb138: {
        switchInt(move _285) -> [0: bb146, otherwise: bb139];
    }

    bb139: {
        StorageDead(_287);
        StorageDead(_286);
        StorageLive(_288);
        StorageLive(_289);
        _289 = _3;
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        _293 = <Clock as Sysvar>::get() -> [return: bb140, unwind: bb256];
    }

    bb140: {
        _292 = <Result<Clock, ProgramError> as Try>::branch(move _293) -> [return: bb141, unwind: bb256];
    }

    bb141: {
        _445 = const true;
        _446 = const true;
        StorageDead(_293);
        _294 = discriminant(_292);
        switchInt(move _294) -> [0: bb142, 1: bb143, otherwise: bb4];
    }

    bb142: {
        StorageLive(_298);
        _298 = move ((_292 as Continue).0: solana_program::clock::Clock);
        _291 = move _298;
        StorageDead(_298);
        _290 = (_291.0: u64);
        _288 = RateLimiter::new(move _289, move _290) -> [return: bb145, unwind: bb272];
    }

    bb143: {
        StorageLive(_295);
        _295 = move ((_292 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_297);
        _297 = move _295;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _297) -> [return: bb144, unwind: bb272];
    }

    bb144: {
        StorageDead(_297);
        StorageDead(_295);
        StorageDead(_290);
        StorageDead(_289);
        StorageDead(_288);
        _497 = discriminant(_292);
        _445 = const false;
        _446 = const false;
        StorageDead(_292);
        StorageDead(_291);
        StorageDead(_285);
        StorageDead(_284);
        goto -> bb233;
    }

    bb145: {
        StorageDead(_290);
        StorageDead(_289);
        _544 = (((_80.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _642 = _544 as *const () (PtrToPtr);
        _643 = _642 as usize (Transmute);
        _644 = AlignOf(solend_sdk::state::Reserve);
        _645 = Sub(_644, const 1_usize);
        _646 = BitAnd(_643, _645);
        _647 = Eq(_646, const 0_usize);
        assert(_647, "misaligned pointer dereference: address must be a multiple of {} but is {}", _644, _643) -> [success: bb296, unwind unreachable];
    }

    bb146: {
        StorageDead(_287);
        StorageDead(_286);
        _284 = const ();
        goto -> bb147;
    }

    bb147: {
        StorageDead(_285);
        StorageDead(_284);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        _437 = deref_copy ((*_62).0: &solana_program::pubkey::Pubkey);
        _301 = &(*_437);
        StorageLive(_302);
        _545 = (((_80.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _302 = &(((*_545).3: solend_sdk::state::ReserveLiquidity).3: solana_program::pubkey::Pubkey);
        _300 = <Pubkey as PartialEq>::ne(move _301, move _302) -> [return: bb148, unwind: bb256];
    }

    bb148: {
        switchInt(move _300) -> [0: bb155, otherwise: bb149];
    }

    bb149: {
        StorageDead(_302);
        StorageDead(_301);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        _306 = &(*_62);
        _305 = validate_pyth_keys(move _306) -> [return: bb150, unwind: bb256];
    }

    bb150: {
        StorageDead(_306);
        _304 = <Result<(), ProgramError> as Try>::branch(move _305) -> [return: bb151, unwind: bb256];
    }

    bb151: {
        StorageDead(_305);
        _307 = discriminant(_304);
        switchInt(move _307) -> [0: bb152, 1: bb153, otherwise: bb4];
    }

    bb152: {
        StorageLive(_311);
        _311 = ((_304 as Continue).0: ());
        _303 = _311;
        StorageDead(_311);
        _473 = discriminant(_304);
        StorageDead(_304);
        StorageDead(_303);
        StorageLive(_312);
        _438 = deref_copy ((*_62).0: &solana_program::pubkey::Pubkey);
        _312 = (*_438);
        _546 = (((_80.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _636 = _546 as *const () (PtrToPtr);
        _637 = _636 as usize (Transmute);
        _638 = AlignOf(solend_sdk::state::Reserve);
        _639 = Sub(_638, const 1_usize);
        _640 = BitAnd(_637, _639);
        _641 = Eq(_640, const 0_usize);
        assert(_641, "misaligned pointer dereference: address must be a multiple of {} but is {}", _638, _637) -> [success: bb295, unwind unreachable];
    }

    bb153: {
        StorageLive(_308);
        _308 = move ((_304 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_310);
        _310 = move _308;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _310) -> [return: bb154, unwind: bb271];
    }

    bb154: {
        StorageDead(_310);
        StorageDead(_308);
        _495 = discriminant(_304);
        StorageDead(_304);
        StorageDead(_303);
        StorageDead(_300);
        StorageDead(_299);
        goto -> bb233;
    }

    bb155: {
        StorageDead(_302);
        StorageDead(_301);
        _299 = const ();
        goto -> bb156;
    }

    bb156: {
        StorageDead(_300);
        StorageDead(_299);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        _439 = deref_copy ((*_71).0: &solana_program::pubkey::Pubkey);
        _315 = &(*_439);
        StorageLive(_316);
        _547 = (((_80.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _316 = &(((*_547).3: solend_sdk::state::ReserveLiquidity).4: solana_program::pubkey::Pubkey);
        _314 = <Pubkey as PartialEq>::ne(move _315, move _316) -> [return: bb157, unwind: bb256];
    }

    bb157: {
        switchInt(move _314) -> [0: bb164, otherwise: bb158];
    }

    bb158: {
        StorageDead(_316);
        StorageDead(_315);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        _320 = &(*_71);
        _319 = validate_switchboard_keys(move _320) -> [return: bb159, unwind: bb256];
    }

    bb159: {
        StorageDead(_320);
        _318 = <Result<(), ProgramError> as Try>::branch(move _319) -> [return: bb160, unwind: bb256];
    }

    bb160: {
        StorageDead(_319);
        _321 = discriminant(_318);
        switchInt(move _321) -> [0: bb161, 1: bb162, otherwise: bb4];
    }

    bb161: {
        StorageLive(_325);
        _325 = ((_318 as Continue).0: ());
        _317 = _325;
        StorageDead(_325);
        _475 = discriminant(_318);
        StorageDead(_318);
        StorageDead(_317);
        StorageLive(_326);
        _440 = deref_copy ((*_71).0: &solana_program::pubkey::Pubkey);
        _326 = (*_440);
        _548 = (((_80.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _630 = _548 as *const () (PtrToPtr);
        _631 = _630 as usize (Transmute);
        _632 = AlignOf(solend_sdk::state::Reserve);
        _633 = Sub(_632, const 1_usize);
        _634 = BitAnd(_631, _633);
        _635 = Eq(_634, const 0_usize);
        assert(_635, "misaligned pointer dereference: address must be a multiple of {} but is {}", _632, _631) -> [success: bb294, unwind unreachable];
    }

    bb162: {
        StorageLive(_322);
        _322 = move ((_318 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_324);
        _324 = move _322;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _324) -> [return: bb163, unwind: bb270];
    }

    bb163: {
        StorageDead(_324);
        StorageDead(_322);
        _493 = discriminant(_318);
        StorageDead(_318);
        StorageDead(_317);
        StorageDead(_314);
        StorageDead(_313);
        goto -> bb233;
    }

    bb164: {
        StorageDead(_316);
        StorageDead(_315);
        _313 = const ();
        goto -> bb165;
    }

    bb165: {
        StorageDead(_314);
        StorageDead(_313);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        _549 = (((_80.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _329 = &(((*_549).3: solend_sdk::state::ReserveLiquidity).4: solana_program::pubkey::Pubkey);
        StorageLive(_330);
        _431 = const _;
        _330 = &(*_431);
        _328 = <Pubkey as PartialEq>::eq(move _329, move _330) -> [return: bb166, unwind: bb256];
    }

    bb166: {
        switchInt(move _328) -> [0: bb173, otherwise: bb167];
    }

    bb167: {
        StorageDead(_330);
        StorageDead(_329);
        StorageLive(_332);
        StorageLive(_333);
        _550 = (((_80.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _333 = &(((*_550).3: solend_sdk::state::ReserveLiquidity).3: solana_program::pubkey::Pubkey);
        StorageLive(_334);
        _430 = const _;
        _334 = &(*_430);
        _332 = <Pubkey as PartialEq>::eq(move _333, move _334) -> [return: bb168, unwind: bb256];
    }

    bb168: {
        switchInt(move _332) -> [0: bb172, otherwise: bb169];
    }

    bb169: {
        StorageDead(_334);
        StorageDead(_333);
        StorageLive(_337);
        StorageLive(_338);
        StorageLive(_339);
        _339 = const "At least one price oracle must have a non-null pubkey";
        _338 = &(*_339);
        _337 = solana_program::log::sol_log(move _338) -> [return: bb170, unwind: bb256];
    }

    bb170: {
        StorageDead(_338);
        StorageDead(_339);
        StorageDead(_337);
        StorageLive(_340);
        StorageLive(_341);
        _341 = InvalidOracleConfig;
        _340 = <LendingError as Into<ProgramError>>::into(move _341) -> [return: bb171, unwind: bb256];
    }

    bb171: {
        StorageDead(_341);
        _0 = Result::<(), ProgramError>::Err(move _340);
        StorageDead(_340);
        StorageDead(_332);
        StorageDead(_328);
        StorageDead(_327);
        goto -> bb233;
    }

    bb172: {
        StorageDead(_334);
        StorageDead(_333);
        goto -> bb174;
    }

    bb173: {
        StorageDead(_330);
        StorageDead(_329);
        goto -> bb174;
    }

    bb174: {
        _327 = const ();
        StorageDead(_332);
        StorageDead(_328);
        StorageDead(_327);
        StorageLive(_342);
        _343 = discriminant((_2.20: std::option::Option<solana_program::pubkey::Pubkey>));
        switchInt(move _343) -> [1: bb176, otherwise: bb175];
    }

    bb175: {
        _342 = const ();
        goto -> bb187;
    }

    bb176: {
        StorageLive(_344);
        _344 = (((_2.20: std::option::Option<solana_program::pubkey::Pubkey>) as Some).0: solana_program::pubkey::Pubkey);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        _348 = &mut (*_14);
        _347 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _348) -> [return: bb177, unwind: bb256];
    }

    bb177: {
        StorageDead(_348);
        _346 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _347) -> [return: bb178, unwind: bb256];
    }

    bb178: {
        StorageDead(_347);
        _349 = discriminant(_346);
        switchInt(move _349) -> [0: bb179, 1: bb180, otherwise: bb4];
    }

    bb179: {
        StorageLive(_353);
        _353 = ((_346 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _345 = _353;
        StorageDead(_353);
        _477 = discriminant(_346);
        StorageDead(_346);
        StorageLive(_354);
        StorageLive(_355);
        StorageLive(_356);
        StorageLive(_357);
        _357 = _344;
        StorageLive(_358);
        _358 = &(*_345);
        _356 = validate_extra_oracle(move _357, move _358) -> [return: bb182, unwind: bb256];
    }

    bb180: {
        StorageLive(_350);
        _350 = move ((_346 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_352);
        _352 = move _350;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _352) -> [return: bb181, unwind: bb269];
    }

    bb181: {
        StorageDead(_352);
        StorageDead(_350);
        _491 = discriminant(_346);
        StorageDead(_346);
        goto -> bb232;
    }

    bb182: {
        StorageDead(_358);
        StorageDead(_357);
        _355 = <Result<(), ProgramError> as Try>::branch(move _356) -> [return: bb183, unwind: bb256];
    }

    bb183: {
        StorageDead(_356);
        _359 = discriminant(_355);
        switchInt(move _359) -> [0: bb184, 1: bb185, otherwise: bb4];
    }

    bb184: {
        StorageLive(_363);
        _363 = ((_355 as Continue).0: ());
        _354 = _363;
        StorageDead(_363);
        _479 = discriminant(_355);
        StorageDead(_355);
        StorageDead(_354);
        _342 = const ();
        StorageDead(_345);
        StorageDead(_344);
        goto -> bb187;
    }

    bb185: {
        StorageLive(_360);
        _360 = move ((_355 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_362);
        _362 = move _360;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _362) -> [return: bb186, unwind: bb268];
    }

    bb186: {
        StorageDead(_362);
        StorageDead(_360);
        _489 = discriminant(_355);
        StorageDead(_355);
        StorageDead(_354);
        goto -> bb232;
    }

    bb187: {
        StorageDead(_342);
        StorageLive(_364);
        _364 = _2;
        _551 = (((_80.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _624 = _551 as *const () (PtrToPtr);
        _625 = _624 as usize (Transmute);
        _626 = AlignOf(solend_sdk::state::Reserve);
        _627 = Sub(_626, const 1_usize);
        _628 = BitAnd(_625, _627);
        _629 = Eq(_628, const 0_usize);
        assert(_629, "misaligned pointer dereference: address must be a multiple of {} but is {}", _626, _625) -> [success: bb293, unwind unreachable];
    }

    bb188: {
        StorageDead(_283);
        StorageDead(_282);
        StorageDead(_281);
        StorageLive(_365);
        StorageLive(_366);
        _366 = &((*_44).0: &solana_program::pubkey::Pubkey);
        StorageLive(_367);
        StorageLive(_368);
        _552 = (((_143.0: std::ptr::Unique<solend_sdk::state::LendingMarket>).0: std::ptr::NonNull<solend_sdk::state::LendingMarket>).0: *const solend_sdk::state::LendingMarket);
        _368 = &((*_552).9: solana_program::pubkey::Pubkey);
        _367 = &_368;
        _365 = <&Pubkey as PartialEq>::eq(move _366, move _367) -> [return: bb189, unwind: bb256];
    }

    bb189: {
        switchInt(move _365) -> [0: bb209, otherwise: bb190];
    }

    bb190: {
        StorageDead(_368);
        StorageDead(_367);
        StorageDead(_366);
        StorageLive(_369);
        StorageLive(_370);
        StorageLive(_371);
        _371 = (_3.0: u64);
        _370 = Gt(move _371, const 0_u64);
        switchInt(move _370) -> [0: bb200, otherwise: bb191];
    }

    bb191: {
        StorageDead(_371);
        StorageLive(_372);
        StorageLive(_373);
        _373 = (_3.1: u64);
        _372 = Eq(move _373, const 0_u64);
        switchInt(move _372) -> [0: bb199, otherwise: bb192];
    }

    bb192: {
        StorageDead(_373);
        StorageLive(_374);
        StorageLive(_375);
        _375 = _3;
        StorageLive(_376);
        StorageLive(_377);
        StorageLive(_378);
        StorageLive(_379);
        _379 = <Clock as Sysvar>::get() -> [return: bb193, unwind: bb256];
    }

    bb193: {
        _378 = <Result<Clock, ProgramError> as Try>::branch(move _379) -> [return: bb194, unwind: bb256];
    }

    bb194: {
        _443 = const true;
        _444 = const true;
        StorageDead(_379);
        _380 = discriminant(_378);
        switchInt(move _380) -> [0: bb195, 1: bb196, otherwise: bb4];
    }

    bb195: {
        StorageLive(_384);
        _384 = move ((_378 as Continue).0: solana_program::clock::Clock);
        _377 = move _384;
        StorageDead(_384);
        _376 = (_377.0: u64);
        _374 = RateLimiter::new(move _375, move _376) -> [return: bb198, unwind: bb267];
    }

    bb196: {
        StorageLive(_381);
        _381 = move ((_378 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_383);
        _383 = move _381;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _383) -> [return: bb197, unwind: bb267];
    }

    bb197: {
        StorageDead(_383);
        StorageDead(_381);
        StorageDead(_376);
        StorageDead(_375);
        StorageDead(_374);
        _487 = discriminant(_378);
        _443 = const false;
        _444 = const false;
        StorageDead(_378);
        StorageDead(_377);
        StorageDead(_372);
        StorageDead(_370);
        StorageDead(_369);
        goto -> bb231;
    }

    bb198: {
        StorageDead(_376);
        StorageDead(_375);
        _553 = (((_80.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _618 = _553 as *const () (PtrToPtr);
        _619 = _618 as usize (Transmute);
        _620 = AlignOf(solend_sdk::state::Reserve);
        _621 = Sub(_620, const 1_usize);
        _622 = BitAnd(_619, _621);
        _623 = Eq(_622, const 0_usize);
        assert(_623, "misaligned pointer dereference: address must be a multiple of {} but is {}", _620, _619) -> [success: bb292, unwind unreachable];
    }

    bb199: {
        StorageDead(_373);
        goto -> bb201;
    }

    bb200: {
        StorageDead(_371);
        goto -> bb201;
    }

    bb201: {
        _369 = const ();
        goto -> bb202;
    }

    bb202: {
        StorageDead(_372);
        StorageDead(_370);
        StorageDead(_369);
        StorageLive(_385);
        StorageLive(_386);
        StorageLive(_387);
        _387 = (_2.13: u64);
        StorageLive(_388);
        _554 = (((_80.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _612 = _554 as *const () (PtrToPtr);
        _613 = _612 as usize (Transmute);
        _614 = AlignOf(solend_sdk::state::Reserve);
        _615 = Sub(_614, const 1_usize);
        _616 = BitAnd(_613, _615);
        _617 = Eq(_616, const 0_usize);
        assert(_617, "misaligned pointer dereference: address must be a multiple of {} but is {}", _614, _613) -> [success: bb291, unwind unreachable];
    }

    bb203: {
        StorageDead(_388);
        StorageDead(_387);
        StorageLive(_389);
        _389 = (_2.13: u64);
        _555 = (((_80.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _606 = _555 as *const () (PtrToPtr);
        _607 = _606 as usize (Transmute);
        _608 = AlignOf(solend_sdk::state::Reserve);
        _609 = Sub(_608, const 1_usize);
        _610 = BitAnd(_607, _609);
        _611 = Eq(_610, const 0_usize);
        assert(_611, "misaligned pointer dereference: address must be a multiple of {} but is {}", _608, _607) -> [success: bb290, unwind unreachable];
    }

    bb204: {
        StorageDead(_388);
        StorageDead(_387);
        _385 = const ();
        goto -> bb205;
    }

    bb205: {
        StorageDead(_386);
        StorageDead(_385);
        StorageLive(_390);
        StorageLive(_391);
        _391 = (_2.12: u64);
        StorageLive(_392);
        _556 = (((_80.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _600 = _556 as *const () (PtrToPtr);
        _601 = _600 as usize (Transmute);
        _602 = AlignOf(solend_sdk::state::Reserve);
        _603 = Sub(_602, const 1_usize);
        _604 = BitAnd(_601, _603);
        _605 = Eq(_604, const 0_usize);
        assert(_605, "misaligned pointer dereference: address must be a multiple of {} but is {}", _602, _601) -> [success: bb289, unwind unreachable];
    }

    bb206: {
        StorageDead(_392);
        StorageDead(_391);
        StorageLive(_393);
        _393 = (_2.12: u64);
        _557 = (((_80.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _594 = _557 as *const () (PtrToPtr);
        _595 = _594 as usize (Transmute);
        _596 = AlignOf(solend_sdk::state::Reserve);
        _597 = Sub(_596, const 1_usize);
        _598 = BitAnd(_595, _597);
        _599 = Eq(_598, const 0_usize);
        assert(_599, "misaligned pointer dereference: address must be a multiple of {} but is {}", _596, _595) -> [success: bb288, unwind unreachable];
    }

    bb207: {
        StorageDead(_392);
        StorageDead(_391);
        _279 = const ();
        goto -> bb208;
    }

    bb208: {
        StorageDead(_390);
        goto -> bb216;
    }

    bb209: {
        StorageDead(_368);
        StorageDead(_367);
        StorageDead(_366);
        StorageLive(_394);
        StorageLive(_395);
        _441 = deref_copy ((*_44).0: &solana_program::pubkey::Pubkey);
        _395 = &(*_441);
        StorageLive(_396);
        StorageLive(_397);
        _397 = solend_market_owner::id() -> [return: bb210, unwind: bb256];
    }

    bb210: {
        _396 = &_397;
        _394 = <Pubkey as PartialEq>::eq(move _395, move _396) -> [return: bb211, unwind: bb256];
    }

    bb211: {
        switchInt(move _394) -> [0: bb213, otherwise: bb212];
    }

    bb212: {
        StorageDead(_397);
        StorageDead(_396);
        StorageDead(_395);
        StorageLive(_398);
        _398 = (_2.11: solend_sdk::state::ReserveFees);
        _558 = (((_80.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _588 = _558 as *const () (PtrToPtr);
        _589 = _588 as usize (Transmute);
        _590 = AlignOf(solend_sdk::state::Reserve);
        _591 = Sub(_590, const 1_usize);
        _592 = BitAnd(_589, _591);
        _593 = Eq(_592, const 0_usize);
        assert(_593, "misaligned pointer dereference: address must be a multiple of {} but is {}", _590, _589) -> [success: bb287, unwind unreachable];
    }

    bb213: {
        StorageDead(_397);
        StorageDead(_396);
        StorageDead(_395);
        StorageLive(_403);
        StorageLive(_404);
        StorageLive(_405);
        _405 = const "Signer must be the Lending market owner or risk authority";
        _404 = &(*_405);
        _403 = solana_program::log::sol_log(move _404) -> [return: bb214, unwind: bb256];
    }

    bb214: {
        StorageDead(_404);
        StorageDead(_405);
        StorageDead(_403);
        StorageLive(_406);
        StorageLive(_407);
        _407 = InvalidSigner;
        _406 = <LendingError as Into<ProgramError>>::into(move _407) -> [return: bb215, unwind: bb256];
    }

    bb215: {
        StorageDead(_407);
        _0 = Result::<(), ProgramError>::Err(move _406);
        StorageDead(_406);
        StorageDead(_394);
        goto -> bb231;
    }

    bb216: {
        StorageDead(_365);
        goto -> bb217;
    }

    bb217: {
        StorageDead(_280);
        StorageDead(_279);
        StorageLive(_408);
        StorageLive(_409);
        _562 = (((_80.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _409 = &mut ((*_562).1: solend_sdk::state::LastUpdate);
        _408 = LastUpdate::mark_stale(move _409) -> [return: bb218, unwind: bb256];
    }

    bb218: {
        StorageDead(_409);
        StorageDead(_408);
        StorageLive(_410);
        StorageLive(_411);
        StorageLive(_412);
        StorageLive(_413);
        _563 = (((_80.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _564 = _563 as *const () (PtrToPtr);
        _565 = _564 as usize (Transmute);
        _566 = AlignOf(solend_sdk::state::Reserve);
        _567 = Sub(_566, const 1_usize);
        _568 = BitAnd(_565, _567);
        _569 = Eq(_568, const 0_usize);
        assert(_569, "misaligned pointer dereference: address must be a multiple of {} but is {}", _566, _565) -> [success: bb283, unwind unreachable];
    }

    bb219: {
        _419 = &(*_420);
        StorageDead(_421);
        _418 = RefCell::<&mut [u8]>::borrow_mut(move _419) -> [return: bb220, unwind: bb256];
    }

    bb220: {
        StorageDead(_419);
        _417 = &mut _418;
        _416 = &mut (*_417);
        _415 = <RefMut<'_, &mut [u8]> as DerefMut>::deref_mut(move _416) -> [return: bb221, unwind: bb250];
    }

    bb221: {
        _442 = deref_copy (*_415);
        _414 = &mut (*_442);
        StorageDead(_416);
        _412 = <Reserve as Pack>::pack(move _413, move _414) -> [return: bb222, unwind: bb250];
    }

    bb222: {
        StorageDead(_414);
        StorageDead(_413);
        _411 = <Result<(), ProgramError> as Try>::branch(move _412) -> [return: bb223, unwind: bb250];
    }

    bb223: {
        StorageDead(_412);
        _422 = discriminant(_411);
        switchInt(move _422) -> [0: bb224, 1: bb225, otherwise: bb4];
    }

    bb224: {
        StorageLive(_426);
        _426 = ((_411 as Continue).0: ());
        _410 = _426;
        StorageDead(_426);
        _483 = discriminant(_411);
        drop(_418) -> [return: bb227, unwind: bb256];
    }

    bb225: {
        StorageLive(_423);
        _423 = move ((_411 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_425);
        _425 = move _423;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _425) -> [return: bb226, unwind: bb266];
    }

    bb226: {
        StorageDead(_425);
        StorageDead(_423);
        _485 = discriminant(_411);
        drop(_418) -> [return: bb230, unwind: bb256];
    }

    bb227: {
        StorageDead(_420);
        StorageDead(_418);
        StorageDead(_417);
        StorageDead(_415);
        StorageDead(_411);
        StorageDead(_410);
        StorageLive(_427);
        _427 = ();
        _0 = Result::<(), ProgramError>::Ok(move _427);
        StorageDead(_427);
        StorageDead(_249);
        StorageDead(_247);
        StorageDead(_241);
        StorageDead(_240);
        drop(_143) -> [return: bb228, unwind: bb263];
    }

    bb228: {
        StorageDead(_143);
        drop(_80) -> [return: bb229, unwind: bb265];
    }

    bb229: {
        StorageDead(_80);
        StorageDead(_71);
        StorageDead(_62);
        StorageDead(_53);
        StorageDead(_44);
        StorageDead(_35);
        StorageDead(_26);
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb249;
    }

    bb230: {
        StorageDead(_420);
        StorageDead(_418);
        StorageDead(_417);
        StorageDead(_415);
        StorageDead(_411);
        StorageDead(_410);
        goto -> bb234;
    }

    bb231: {
        StorageDead(_365);
        goto -> bb233;
    }

    bb232: {
        StorageDead(_345);
        StorageDead(_344);
        StorageDead(_342);
        goto -> bb233;
    }

    bb233: {
        StorageDead(_280);
        StorageDead(_279);
        goto -> bb234;
    }

    bb234: {
        StorageDead(_249);
        StorageDead(_247);
        StorageDead(_241);
        StorageDead(_240);
        goto -> bb236;
    }

    bb235: {
        StorageDead(_196);
        StorageDead(_195);
        goto -> bb236;
    }

    bb236: {
        drop(_143) -> [return: bb238, unwind: bb263];
    }

    bb237: {
        StorageDead(_153);
        StorageDead(_151);
        StorageDead(_150);
        StorageDead(_148);
        _447 = const false;
        _448 = const false;
        StorageDead(_145);
        goto -> bb238;
    }

    bb238: {
        StorageDead(_143);
        goto -> bb239;
    }

    bb239: {
        drop(_80) -> [return: bb241, unwind: bb265];
    }

    bb240: {
        StorageDead(_90);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_85);
        _449 = const false;
        _450 = const false;
        StorageDead(_82);
        goto -> bb241;
    }

    bb241: {
        StorageDead(_80);
        goto -> bb242;
    }

    bb242: {
        StorageDead(_71);
        goto -> bb243;
    }

    bb243: {
        StorageDead(_62);
        goto -> bb244;
    }

    bb244: {
        StorageDead(_53);
        goto -> bb245;
    }

    bb245: {
        StorageDead(_44);
        goto -> bb246;
    }

    bb246: {
        StorageDead(_35);
        goto -> bb247;
    }

    bb247: {
        StorageDead(_26);
        goto -> bb248;
    }

    bb248: {
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb249;
    }

    bb249: {
        return;
    }

    bb250 (cleanup): {
        drop(_418) -> [return: bb256, unwind terminate(cleanup)];
    }

    bb251 (cleanup): {
        drop(_170) -> [return: bb256, unwind terminate(cleanup)];
    }

    bb252 (cleanup): {
        drop(_185) -> [return: bb253, unwind terminate(cleanup)];
    }

    bb253 (cleanup): {
        drop(_171) -> [return: bb256, unwind terminate(cleanup)];
    }

    bb254 (cleanup): {
        drop(_191) -> [return: bb255, unwind terminate(cleanup)];
    }

    bb255 (cleanup): {
        drop(_185) -> [return: bb256, unwind terminate(cleanup)];
    }

    bb256 (cleanup): {
        drop(_143) -> [return: bb263, unwind terminate(cleanup)];
    }

    bb257 (cleanup): {
        drop(_151) -> [return: bb263, unwind terminate(cleanup)];
    }

    bb258 (cleanup): {
        drop(_107) -> [return: bb263, unwind terminate(cleanup)];
    }

    bb259 (cleanup): {
        drop(_122) -> [return: bb260, unwind terminate(cleanup)];
    }

    bb260 (cleanup): {
        drop(_108) -> [return: bb263, unwind terminate(cleanup)];
    }

    bb261 (cleanup): {
        drop(_128) -> [return: bb262, unwind terminate(cleanup)];
    }

    bb262 (cleanup): {
        drop(_122) -> [return: bb263, unwind terminate(cleanup)];
    }

    bb263 (cleanup): {
        drop(_80) -> [return: bb265, unwind terminate(cleanup)];
    }

    bb264 (cleanup): {
        drop(_88) -> [return: bb265, unwind terminate(cleanup)];
    }

    bb265 (cleanup): {
        resume;
    }

    bb266 (cleanup): {
        _519 = discriminant(_411);
        goto -> bb250;
    }

    bb267 (cleanup): {
        _520 = discriminant(_378);
        goto -> bb256;
    }

    bb268 (cleanup): {
        _521 = discriminant(_355);
        goto -> bb256;
    }

    bb269 (cleanup): {
        _522 = discriminant(_346);
        goto -> bb256;
    }

    bb270 (cleanup): {
        _523 = discriminant(_318);
        goto -> bb256;
    }

    bb271 (cleanup): {
        _524 = discriminant(_304);
        goto -> bb256;
    }

    bb272 (cleanup): {
        _525 = discriminant(_292);
        goto -> bb256;
    }

    bb273 (cleanup): {
        _526 = discriminant(_145);
        goto -> bb257;
    }

    bb274 (cleanup): {
        _527 = discriminant(_82);
        goto -> bb264;
    }

    bb275 (cleanup): {
        _528 = discriminant(_72);
        goto -> bb265;
    }

    bb276 (cleanup): {
        _529 = discriminant(_63);
        goto -> bb265;
    }

    bb277 (cleanup): {
        _530 = discriminant(_54);
        goto -> bb265;
    }

    bb278 (cleanup): {
        _531 = discriminant(_45);
        goto -> bb265;
    }

    bb279 (cleanup): {
        _532 = discriminant(_36);
        goto -> bb265;
    }

    bb280 (cleanup): {
        _533 = discriminant(_27);
        goto -> bb265;
    }

    bb281 (cleanup): {
        _534 = discriminant(_18);
        goto -> bb265;
    }

    bb282 (cleanup): {
        _535 = discriminant(_6);
        goto -> bb265;
    }

    bb283: {
        _413 = move (*_563);
        StorageLive(_414);
        StorageLive(_415);
        StorageLive(_416);
        StorageLive(_417);
        StorageLive(_418);
        StorageLive(_419);
        StorageLive(_420);
        StorageLive(_421);
        _421 = &((*_17).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _420 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _421) -> [return: bb219, unwind: bb256];
    }

    bb284: {
        (((*_561).5: solend_sdk::state::ReserveConfig).14: solana_program::pubkey::Pubkey) = move _401;
        StorageDead(_401);
        _279 = const ();
        StorageDead(_394);
        goto -> bb216;
    }

    bb285: {
        (((*_560).5: solend_sdk::state::ReserveConfig).16: u8) = move _400;
        StorageDead(_400);
        StorageLive(_401);
        _401 = (_2.14: solana_program::pubkey::Pubkey);
        _561 = (((_80.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _570 = _561 as *const () (PtrToPtr);
        _571 = _570 as usize (Transmute);
        _572 = AlignOf(solend_sdk::state::Reserve);
        _573 = Sub(_572, const 1_usize);
        _574 = BitAnd(_571, _573);
        _575 = Eq(_574, const 0_usize);
        assert(_575, "misaligned pointer dereference: address must be a multiple of {} but is {}", _572, _571) -> [success: bb284, unwind unreachable];
    }

    bb286: {
        (((*_559).5: solend_sdk::state::ReserveConfig).15: u8) = move _399;
        StorageDead(_399);
        StorageLive(_400);
        _400 = (_2.16: u8);
        _560 = (((_80.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _576 = _560 as *const () (PtrToPtr);
        _577 = _576 as usize (Transmute);
        _578 = AlignOf(solend_sdk::state::Reserve);
        _579 = Sub(_578, const 1_usize);
        _580 = BitAnd(_577, _579);
        _581 = Eq(_580, const 0_usize);
        assert(_581, "misaligned pointer dereference: address must be a multiple of {} but is {}", _578, _577) -> [success: bb285, unwind unreachable];
    }

    bb287: {
        (((*_558).5: solend_sdk::state::ReserveConfig).11: solend_sdk::state::ReserveFees) = move _398;
        StorageDead(_398);
        StorageLive(_399);
        _399 = (_2.15: u8);
        _559 = (((_80.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _582 = _559 as *const () (PtrToPtr);
        _583 = _582 as usize (Transmute);
        _584 = AlignOf(solend_sdk::state::Reserve);
        _585 = Sub(_584, const 1_usize);
        _586 = BitAnd(_583, _585);
        _587 = Eq(_586, const 0_usize);
        assert(_587, "misaligned pointer dereference: address must be a multiple of {} but is {}", _584, _583) -> [success: bb286, unwind unreachable];
    }

    bb288: {
        (((*_557).5: solend_sdk::state::ReserveConfig).12: u64) = move _393;
        StorageDead(_393);
        _279 = const ();
        goto -> bb208;
    }

    bb289: {
        _392 = (((*_556).5: solend_sdk::state::ReserveConfig).12: u64);
        _390 = Lt(move _391, move _392);
        switchInt(move _390) -> [0: bb207, otherwise: bb206];
    }

    bb290: {
        (((*_555).5: solend_sdk::state::ReserveConfig).13: u64) = move _389;
        StorageDead(_389);
        _385 = const ();
        goto -> bb205;
    }

    bb291: {
        _388 = (((*_554).5: solend_sdk::state::ReserveConfig).13: u64);
        _386 = Lt(move _387, move _388);
        switchInt(move _386) -> [0: bb204, otherwise: bb203];
    }

    bb292: {
        ((*_553).6: solend_sdk::state::RateLimiter) = move _374;
        StorageDead(_374);
        _481 = discriminant(_378);
        _443 = const false;
        _444 = const false;
        StorageDead(_378);
        StorageDead(_377);
        _369 = const ();
        goto -> bb202;
    }

    bb293: {
        ((*_551).5: solend_sdk::state::ReserveConfig) = move _364;
        StorageDead(_364);
        _279 = const ();
        goto -> bb217;
    }

    bb294: {
        (((*_548).3: solend_sdk::state::ReserveLiquidity).4: solana_program::pubkey::Pubkey) = move _326;
        StorageDead(_326);
        _313 = const ();
        goto -> bb165;
    }

    bb295: {
        (((*_546).3: solend_sdk::state::ReserveLiquidity).3: solana_program::pubkey::Pubkey) = move _312;
        StorageDead(_312);
        _299 = const ();
        goto -> bb156;
    }

    bb296: {
        ((*_544).6: solend_sdk::state::RateLimiter) = move _288;
        StorageDead(_288);
        _471 = discriminant(_292);
        _445 = const false;
        _446 = const false;
        StorageDead(_292);
        StorageDead(_291);
        _284 = const ();
        goto -> bb147;
    }

    bb297: {
        _248 = ((*_541).1: u8);
        _247 = [move _248];
        StorageDead(_248);
        _246 = &_247;
        _245 = &(*_246);
        _244 = move _245 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_245);
        _241 = [move _242, move _244];
        StorageDead(_244);
        StorageDead(_242);
        _240 = &_241;
        StorageDead(_246);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        _253 = &(*_240);
        _252 = move _253 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_253);
        StorageLive(_254);
        _254 = &(*_1);
        _251 = Pubkey::create_program_address(move _252, move _254) -> [return: bb122, unwind: bb256];
    }

    bb298: {
        _213 = (((*_538).5: solend_sdk::state::ReserveConfig).16: u8);
        StorageLive(_214);
        _214 = (_2.16: u8);
        _212 = Ne(move _213, move _214);
        switchInt(move _212) -> [0: bb106, otherwise: bb105];
    }

    bb299: {
        _203 = (((*_537).5: solend_sdk::state::ReserveConfig).15: u8);
        StorageLive(_204);
        _204 = (_2.15: u8);
        _202 = Ne(move _203, move _204);
        switchInt(move _202) -> [0: bb104, otherwise: bb101];
    }
}
