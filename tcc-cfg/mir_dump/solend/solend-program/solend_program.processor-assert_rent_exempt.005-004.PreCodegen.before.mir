// MIR for `assert_rent_exempt` before PreCodegen

fn assert_rent_exempt(_1: &Rent, _2: &AccountInfo<'_>) -> Result<(), ProgramError> {
    debug rent => _1;
    debug account_info => _2;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _3: bool;
    let mut _4: &solana_program::rent::Rent;
    let mut _5: u64;
    let mut _6: &solana_program::account_info::AccountInfo<'_>;
    let mut _7: usize;
    let mut _8: &solana_program::account_info::AccountInfo<'_>;
    let _9: ();
    let mut _10: &str;
    let _11: &str;
    let mut _12: &std::string::String;
    let _13: &std::string::String;
    let _14: std::string::String;
    let _15: std::string::String;
    let mut _16: std::fmt::Arguments<'_>;
    let mut _17: &[&str];
    let mut _18: &[&str; 2];
    let _19: &[&str; 2];
    let _20: [&str; 2];
    let mut _21: &[bytemuck::core::fmt::rt::Argument<'_>];
    let mut _22: &[bytemuck::core::fmt::rt::Argument<'_>; 2];
    let _23: &[bytemuck::core::fmt::rt::Argument<'_>; 2];
    let _24: [bytemuck::core::fmt::rt::Argument<'_>; 2];
    let mut _25: bytemuck::core::fmt::rt::Argument<'_>;
    let mut _26: &&std::string::String;
    let _27: &&std::string::String;
    let _28: &std::string::String;
    let _29: std::string::String;
    let mut _30: &u64;
    let _31: u64;
    let mut _32: &solana_program::account_info::AccountInfo<'_>;
    let mut _33: bytemuck::core::fmt::rt::Argument<'_>;
    let mut _34: &&std::string::String;
    let _35: &&std::string::String;
    let _36: &std::string::String;
    let _37: std::string::String;
    let mut _38: &u64;
    let _39: u64;
    let mut _40: &solana_program::rent::Rent;
    let mut _41: usize;
    let mut _42: &solana_program::account_info::AccountInfo<'_>;
    let mut _43: solana_program::program_error::ProgramError;
    let mut _44: solend_sdk::error::LendingError;
    let mut _45: ();
    let mut _46: &[&str; 2];
    scope 1 {
        debug res => _15;
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = &(*_1);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &(*_2);
        _5 = AccountInfo::<'_>::lamports(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &(*_2);
        _7 = AccountInfo::<'_>::data_len(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_8);
        _3 = Rent::is_exempt(move _4, move _5, move _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        switchInt(move _3) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_45);
        _45 = ();
        _0 = Result::<(), ProgramError>::Ok(move _45);
        StorageDead(_45);
        goto -> bb21;
    }

    bb5: {
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _46 = const _;
        _19 = &(*_46);
        _18 = &(*_19);
        _17 = move _18 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_18);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = &(*_2);
        _31 = AccountInfo::<'_>::lamports(move _32) -> [return: bb6, unwind continue];
    }

    bb6: {
        _30 = &_31;
        StorageDead(_32);
        _29 = <u64 as ToString>::to_string(move _30) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_30);
        _28 = &_29;
        _27 = &_28;
        _26 = &(*_27);
        _25 = bytemuck::core::fmt::rt::Argument::<'_>::new_display::<&String>(move _26) -> [return: bb8, unwind: bb26];
    }

    bb8: {
        StorageDead(_26);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &(*_1);
        StorageLive(_41);
        StorageLive(_42);
        _42 = &(*_2);
        _41 = AccountInfo::<'_>::data_len(move _42) -> [return: bb9, unwind: bb26];
    }

    bb9: {
        StorageDead(_42);
        _39 = Rent::minimum_balance(move _40, move _41) -> [return: bb10, unwind: bb26];
    }

    bb10: {
        _38 = &_39;
        StorageDead(_41);
        StorageDead(_40);
        _37 = <u64 as ToString>::to_string(move _38) -> [return: bb11, unwind: bb26];
    }

    bb11: {
        StorageDead(_38);
        _36 = &_37;
        _35 = &_36;
        _34 = &(*_35);
        _33 = bytemuck::core::fmt::rt::Argument::<'_>::new_display::<&String>(move _34) -> [return: bb12, unwind: bb25];
    }

    bb12: {
        StorageDead(_34);
        _24 = [move _25, move _33];
        StorageDead(_33);
        StorageDead(_25);
        _23 = &_24;
        _22 = &(*_23);
        _21 = move _22 as &[bytemuck::core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_22);
        _16 = Arguments::<'_>::new_v1(move _17, move _21) -> [return: bb13, unwind: bb25];
    }

    bb13: {
        StorageDead(_21);
        StorageDead(_17);
        _15 = format(move _16) -> [return: bb14, unwind: bb25];
    }

    bb14: {
        StorageDead(_16);
        drop(_37) -> [return: bb15, unwind: bb23];
    }

    bb15: {
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_35);
        drop(_29) -> [return: bb16, unwind: bb24];
    }

    bb16: {
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_19);
        _14 = move _15;
        StorageDead(_15);
        _13 = &_14;
        _12 = &(*_13);
        _11 = <String as Deref>::deref(move _12) -> [return: bb17, unwind: bb22];
    }

    bb17: {
        _10 = &(*_11);
        StorageDead(_12);
        _9 = solana_program::log::sol_log(move _10) -> [return: bb18, unwind: bb22];
    }

    bb18: {
        StorageDead(_10);
        drop(_14) -> [return: bb19, unwind: bb27];
    }

    bb19: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_9);
        StorageLive(_43);
        StorageLive(_44);
        _44 = solend_sdk::error::LendingError::NotRentExempt;
        _43 = <LendingError as Into<ProgramError>>::into(move _44) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_44);
        _0 = Result::<(), ProgramError>::Err(move _43);
        StorageDead(_43);
        goto -> bb21;
    }

    bb21: {
        StorageDead(_3);
        return;
    }

    bb22 (cleanup): {
        drop(_14) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        drop(_29) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_15) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_37) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_29) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        resume;
    }
}
