// MIR for `process_redeem_fees` after PreCodegen

fn process_redeem_fees(_1: &Pubkey, _2: &[AccountInfo<'_>]) -> Result<(), ProgramError> {
    debug program_id => _1;
    debug accounts => _2;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _3: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _4: std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _5: &[solana_program::account_info::AccountInfo<'_>];
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _8: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _9: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _10: isize;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _17: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _18: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _19: isize;
    let mut _21: !;
    let mut _22: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _26: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _27: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _28: isize;
    let mut _30: !;
    let mut _31: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _35: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _36: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _37: isize;
    let mut _39: !;
    let mut _40: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _43: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _44: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _45: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _53: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _54: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _55: isize;
    let mut _57: !;
    let mut _58: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _61: solana_program::clock::Clock;
    let mut _62: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solana_program::clock::Clock>;
    let mut _63: std::result::Result<solana_program::clock::Clock, solana_program::program_error::ProgramError>;
    let mut _64: isize;
    let mut _66: !;
    let mut _67: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _70: solend_sdk::state::Reserve;
    let mut _71: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::state::Reserve>;
    let mut _72: std::result::Result<solend_sdk::state::Reserve, solana_program::program_error::ProgramError>;
    let mut _73: &[u8];
    let _74: &&mut [u8];
    let mut _75: &std::cell::Ref<'_, &mut [u8]>;
    let _76: &std::cell::Ref<'_, &mut [u8]>;
    let _77: std::cell::Ref<'_, &mut [u8]>;
    let mut _78: &std::cell::RefCell<&mut [u8]>;
    let _79: &std::cell::RefCell<&mut [u8]>;
    let mut _80: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _81: isize;
    let mut _83: !;
    let mut _84: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _86: ();
    let mut _87: bool;
    let mut _88: &&solana_program::pubkey::Pubkey;
    let mut _89: &&solana_program::pubkey::Pubkey;
    let mut _90: !;
    let _91: ();
    let mut _92: &str;
    let _93: &str;
    let mut _94: &std::string::String;
    let _95: &std::string::String;
    let _96: std::string::String;
    let mut _98: std::fmt::Arguments<'_>;
    let mut _99: &[&str];
    let mut _100: &[&str; 2];
    let _101: &[&str; 2];
    let _102: [&str; 2];
    let mut _103: &[bytemuck::core::fmt::rt::Argument<'_>];
    let mut _104: &[bytemuck::core::fmt::rt::Argument<'_>; 2];
    let _105: &[bytemuck::core::fmt::rt::Argument<'_>; 2];
    let _106: [bytemuck::core::fmt::rt::Argument<'_>; 2];
    let mut _107: bytemuck::core::fmt::rt::Argument<'_>;
    let mut _108: &&std::string::String;
    let _109: &&std::string::String;
    let _110: &std::string::String;
    let _111: std::string::String;
    let mut _112: &solana_program::pubkey::Pubkey;
    let mut _113: bytemuck::core::fmt::rt::Argument<'_>;
    let mut _114: &&std::string::String;
    let _115: &&std::string::String;
    let _116: &std::string::String;
    let _117: std::string::String;
    let mut _118: &solana_program::pubkey::Pubkey;
    let mut _119: solana_program::program_error::ProgramError;
    let mut _120: solend_sdk::error::LendingError;
    let _121: ();
    let mut _122: bool;
    let mut _123: &&solana_program::pubkey::Pubkey;
    let _124: &solana_program::pubkey::Pubkey;
    let mut _125: &&solana_program::pubkey::Pubkey;
    let mut _126: !;
    let _127: ();
    let mut _128: &str;
    let _129: &str;
    let mut _130: solana_program::program_error::ProgramError;
    let mut _131: solend_sdk::error::LendingError;
    let _132: ();
    let mut _133: bool;
    let mut _134: &&solana_program::pubkey::Pubkey;
    let _135: &solana_program::pubkey::Pubkey;
    let mut _136: &&solana_program::pubkey::Pubkey;
    let mut _137: !;
    let _138: ();
    let mut _139: &str;
    let _140: &str;
    let mut _141: solana_program::program_error::ProgramError;
    let mut _142: solend_sdk::error::LendingError;
    let _143: ();
    let mut _144: bool;
    let mut _145: &&solana_program::pubkey::Pubkey;
    let _146: &solana_program::pubkey::Pubkey;
    let mut _147: &&solana_program::pubkey::Pubkey;
    let mut _148: !;
    let _149: ();
    let mut _150: &str;
    let _151: &str;
    let mut _152: solana_program::program_error::ProgramError;
    let mut _153: solend_sdk::error::LendingError;
    let _154: ();
    let mut _155: bool;
    let mut _156: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, bool>;
    let mut _157: std::result::Result<bool, solana_program::program_error::ProgramError>;
    let mut _158: &solend_sdk::state::LastUpdate;
    let mut _159: u64;
    let mut _160: isize;
    let mut _162: !;
    let mut _163: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _165: !;
    let _166: ();
    let mut _167: &str;
    let _168: &str;
    let mut _169: solana_program::program_error::ProgramError;
    let mut _170: solend_sdk::error::LendingError;
    let mut _172: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::state::LendingMarket>;
    let mut _173: std::result::Result<solend_sdk::state::LendingMarket, solana_program::program_error::ProgramError>;
    let mut _174: &[u8];
    let _175: &&mut [u8];
    let mut _176: &std::cell::Ref<'_, &mut [u8]>;
    let _177: &std::cell::Ref<'_, &mut [u8]>;
    let _178: std::cell::Ref<'_, &mut [u8]>;
    let mut _179: &std::cell::RefCell<&mut [u8]>;
    let _180: &std::cell::RefCell<&mut [u8]>;
    let mut _181: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _182: isize;
    let mut _184: !;
    let mut _185: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _187: ();
    let mut _188: bool;
    let mut _189: &&solana_program::pubkey::Pubkey;
    let mut _190: &&solana_program::pubkey::Pubkey;
    let mut _191: !;
    let _192: ();
    let mut _193: &str;
    let _194: &str;
    let mut _195: solana_program::program_error::ProgramError;
    let mut _196: solend_sdk::error::LendingError;
    let _197: ();
    let mut _198: bool;
    let mut _199: &&solana_program::pubkey::Pubkey;
    let _200: &solana_program::pubkey::Pubkey;
    let mut _201: &&solana_program::pubkey::Pubkey;
    let mut _202: !;
    let _203: ();
    let mut _204: &str;
    let _205: &str;
    let mut _206: solana_program::program_error::ProgramError;
    let mut _207: solend_sdk::error::LendingError;
    let _209: [&[u8]; 2];
    let mut _210: &[u8];
    let mut _211: &solana_program::pubkey::Pubkey;
    let mut _212: &[u8];
    let mut _213: &[u8; 1];
    let _214: &[u8; 1];
    let _215: [u8; 1];
    let mut _216: u8;
    let mut _218: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::pubkey::PubkeyError>, solana_program::pubkey::Pubkey>;
    let mut _219: std::result::Result<solana_program::pubkey::Pubkey, solana_program::pubkey::PubkeyError>;
    let mut _220: &[&[u8]];
    let mut _221: &[&[u8]; 2];
    let mut _222: &solana_program::pubkey::Pubkey;
    let mut _223: isize;
    let mut _225: !;
    let mut _226: std::result::Result<std::convert::Infallible, solana_program::pubkey::PubkeyError>;
    let _228: ();
    let mut _229: bool;
    let mut _230: &&solana_program::pubkey::Pubkey;
    let _231: &solana_program::pubkey::Pubkey;
    let mut _232: &&solana_program::pubkey::Pubkey;
    let mut _233: !;
    let _234: ();
    let mut _235: &str;
    let _236: &str;
    let mut _237: solana_program::program_error::ProgramError;
    let mut _238: solend_sdk::error::LendingError;
    let mut _240: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, u64>;
    let mut _241: std::result::Result<u64, solana_program::program_error::ProgramError>;
    let mut _242: &solend_sdk::state::Reserve;
    let mut _243: isize;
    let mut _245: !;
    let mut _246: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _248: ();
    let mut _249: bool;
    let mut _250: u64;
    let mut _251: !;
    let mut _252: solana_program::program_error::ProgramError;
    let mut _253: solend_sdk::error::LendingError;
    let _254: ();
    let mut _255: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _256: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _257: &mut solend_sdk::state::ReserveLiquidity;
    let mut _258: u64;
    let mut _259: isize;
    let mut _261: !;
    let mut _262: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _264: ();
    let mut _265: &mut solend_sdk::state::LastUpdate;
    let _266: ();
    let mut _267: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _268: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _269: solend_sdk::state::Reserve;
    let mut _270: &mut [u8];
    let mut _271: &mut &mut [u8];
    let mut _272: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _273: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _274: std::cell::RefMut<'_, &mut [u8]>;
    let mut _275: &std::cell::RefCell<&mut [u8]>;
    let _276: &std::cell::RefCell<&mut [u8]>;
    let mut _277: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _278: isize;
    let mut _280: !;
    let mut _281: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _283: ();
    let mut _284: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _285: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _286: processor::TokenTransferParams<'_, '_>;
    let mut _287: solana_program::account_info::AccountInfo<'_>;
    let mut _288: &solana_program::account_info::AccountInfo<'_>;
    let mut _289: solana_program::account_info::AccountInfo<'_>;
    let mut _290: &solana_program::account_info::AccountInfo<'_>;
    let mut _291: u64;
    let mut _292: solana_program::account_info::AccountInfo<'_>;
    let mut _293: &solana_program::account_info::AccountInfo<'_>;
    let mut _294: &[&[u8]];
    let mut _295: &[&[u8]; 2];
    let mut _296: solana_program::account_info::AccountInfo<'_>;
    let mut _297: &solana_program::account_info::AccountInfo<'_>;
    let mut _298: isize;
    let mut _300: !;
    let mut _301: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _303: ();
    let mut _305: &mut [u8];
    let mut _306: &solana_program::pubkey::Pubkey;
    let mut _307: &mut [u8];
    let mut _308: &solana_program::pubkey::Pubkey;
    let mut _309: &mut [u8];
    let mut _310: bool;
    let mut _311: bool;
    let mut _312: isize;
    let mut _313: isize;
    let mut _314: isize;
    let mut _315: isize;
    let mut _316: isize;
    let mut _317: isize;
    let mut _318: isize;
    let mut _319: isize;
    let mut _320: isize;
    let mut _321: isize;
    let mut _322: isize;
    let mut _323: isize;
    let mut _324: isize;
    let mut _325: isize;
    let mut _326: isize;
    let mut _327: isize;
    let mut _328: isize;
    let mut _329: isize;
    let mut _330: isize;
    let mut _331: isize;
    let mut _332: isize;
    let mut _333: isize;
    let mut _334: isize;
    let mut _335: isize;
    let mut _336: isize;
    let mut _337: isize;
    let mut _338: isize;
    let mut _339: isize;
    let mut _340: isize;
    let mut _341: isize;
    let mut _342: isize;
    let mut _343: isize;
    let mut _344: isize;
    let mut _345: isize;
    let mut _346: isize;
    let mut _347: isize;
    let mut _348: isize;
    let mut _349: isize;
    let mut _350: isize;
    let mut _351: isize;
    let mut _352: isize;
    let mut _353: isize;
    let mut _354: isize;
    let mut _355: isize;
    let mut _356: isize;
    let mut _357: isize;
    let mut _358: isize;
    let mut _359: isize;
    let mut _360: isize;
    let mut _361: isize;
    let mut _362: isize;
    let mut _363: isize;
    let mut _364: isize;
    let mut _365: isize;
    let mut _366: isize;
    let mut _367: isize;
    let mut _368: isize;
    let mut _369: isize;
    let mut _370: isize;
    let mut _371: isize;
    let mut _372: isize;
    let mut _373: isize;
    let mut _374: isize;
    let mut _375: isize;
    let mut _376: isize;
    let mut _377: isize;
    let mut _378: isize;
    let mut _379: isize;
    let mut _380: isize;
    let mut _381: isize;
    let mut _382: isize;
    let mut _383: isize;
    let mut _384: *const solend_sdk::state::Reserve;
    let mut _385: *const solend_sdk::state::Reserve;
    let mut _386: *const solend_sdk::state::Reserve;
    let mut _387: *const solend_sdk::state::Reserve;
    let mut _388: *const solend_sdk::state::Reserve;
    let mut _389: *const solend_sdk::state::Reserve;
    let mut _390: *const solend_sdk::state::Reserve;
    let mut _391: *const solend_sdk::state::Reserve;
    scope 1 {
        debug account_info_iter => _3;
        let _6: &solana_program::account_info::AccountInfo<'_>;
        let _11: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _14: &solana_program::account_info::AccountInfo<'_>;
        scope 2 {
            debug reserve_info => _6;
            let _15: &solana_program::account_info::AccountInfo<'_>;
            let _20: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
            let _23: &solana_program::account_info::AccountInfo<'_>;
            scope 7 {
                debug reserve_liquidity_fee_receiver_info => _15;
                let _24: &solana_program::account_info::AccountInfo<'_>;
                let _29: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                let _32: &solana_program::account_info::AccountInfo<'_>;
                scope 12 {
                    debug reserve_supply_liquidity_info => _24;
                    let _33: &solana_program::account_info::AccountInfo<'_>;
                    let _38: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                    let _41: &solana_program::account_info::AccountInfo<'_>;
                    scope 17 {
                        debug lending_market_info => _33;
                        let _42: &solana_program::account_info::AccountInfo<'_>;
                        let _47: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                        let _50: &solana_program::account_info::AccountInfo<'_>;
                        scope 22 {
                            debug lending_market_authority_info => _42;
                            let _51: &solana_program::account_info::AccountInfo<'_>;
                            let _56: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                            let _59: &solana_program::account_info::AccountInfo<'_>;
                            scope 27 {
                                debug token_program_id => _51;
                                let _60: &solana_program::clock::Clock;
                                let _65: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                let _68: solana_program::clock::Clock;
                                scope 32 {
                                    debug clock => _60;
                                    let mut _69: std::boxed::Box<solend_sdk::state::Reserve>;
                                    let _82: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                    let _85: solend_sdk::state::Reserve;
                                    scope 37 {
                                        debug reserve => _69;
                                        let _97: std::string::String;
                                        let _161: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                        let _164: bool;
                                        let _171: solend_sdk::state::LendingMarket;
                                        let _183: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                        let _186: solend_sdk::state::LendingMarket;
                                        let mut _304: &[&str; 2];
                                        scope 42 {
                                            debug res => _97;
                                        }
                                        scope 43 {
                                            debug residual => _161;
                                            scope 44 {
                                            }
                                        }
                                        scope 45 {
                                            debug val => _164;
                                            scope 46 {
                                            }
                                        }
                                        scope 47 {
                                            debug lending_market => _171;
                                            let _208: &[&[u8]; 2];
                                            scope 52 {
                                                debug authority_signer_seeds => _208;
                                                let _217: solana_program::pubkey::Pubkey;
                                                let _224: std::result::Result<std::convert::Infallible, solana_program::pubkey::PubkeyError>;
                                                let _227: solana_program::pubkey::Pubkey;
                                                scope 53 {
                                                    debug lending_market_authority_pubkey => _217;
                                                    let _239: u64;
                                                    let _244: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                    let _247: u64;
                                                    scope 58 {
                                                        debug withdraw_amount => _239;
                                                        let _260: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                        let _263: ();
                                                        let _279: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                        let _282: ();
                                                        let _299: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                        let _302: ();
                                                        let mut _392: *const ();
                                                        let mut _393: usize;
                                                        let mut _394: usize;
                                                        let mut _395: usize;
                                                        let mut _396: usize;
                                                        let mut _397: bool;
                                                        scope 63 {
                                                            debug residual => _260;
                                                            scope 64 {
                                                            }
                                                        }
                                                        scope 65 {
                                                            debug val => _263;
                                                            scope 66 {
                                                            }
                                                        }
                                                        scope 67 {
                                                            debug residual => _279;
                                                            scope 68 {
                                                            }
                                                        }
                                                        scope 69 {
                                                            debug val => _282;
                                                            scope 70 {
                                                            }
                                                        }
                                                        scope 71 {
                                                            debug residual => _299;
                                                            scope 72 {
                                                            }
                                                        }
                                                        scope 73 {
                                                            debug val => _302;
                                                            scope 74 {
                                                            }
                                                        }
                                                    }
                                                    scope 59 {
                                                        debug residual => _244;
                                                        scope 60 {
                                                        }
                                                    }
                                                    scope 61 {
                                                        debug val => _247;
                                                        scope 62 {
                                                        }
                                                    }
                                                }
                                                scope 54 {
                                                    debug residual => _224;
                                                    scope 55 {
                                                    }
                                                }
                                                scope 56 {
                                                    debug val => _227;
                                                    scope 57 {
                                                    }
                                                }
                                            }
                                        }
                                        scope 48 {
                                            debug residual => _183;
                                            scope 49 {
                                            }
                                        }
                                        scope 50 {
                                            debug val => _186;
                                            scope 51 {
                                            }
                                        }
                                    }
                                    scope 38 {
                                        debug residual => _82;
                                        scope 39 {
                                        }
                                    }
                                    scope 40 {
                                        debug val => _85;
                                        scope 41 {
                                        }
                                    }
                                }
                                scope 33 {
                                    debug residual => _65;
                                    scope 34 {
                                    }
                                }
                                scope 35 {
                                    debug val => _68;
                                    scope 36 {
                                    }
                                }
                            }
                            scope 28 {
                                debug residual => _56;
                                scope 29 {
                                }
                            }
                            scope 30 {
                                debug val => _59;
                                scope 31 {
                                }
                            }
                        }
                        scope 23 {
                            debug residual => _47;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _50;
                            scope 26 {
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _38;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _41;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _29;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _32;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _20;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _23;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _11;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _14;
            scope 6 {
            }
        }
    }

    bb0: {
        _311 = const false;
        _310 = const false;
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &(*_2);
        _4 = bytemuck::core::slice::<impl [AccountInfo<'_>]>::iter(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        _3 = &mut _4;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &mut (*_3);
        _8 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_9);
        _7 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _8) -> [return: bb3, unwind: bb177];
    }

    bb3: {
        StorageDead(_8);
        _10 = discriminant(_7);
        switchInt(move _10) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_14);
        _14 = ((_7 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _6 = _14;
        StorageDead(_14);
        _312 = discriminant(_7);
        StorageDead(_7);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = &mut (*_3);
        _17 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _18) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_11);
        _11 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_13);
        _13 = move _11;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _13) -> [return: bb7, unwind: bb193];
    }

    bb7: {
        StorageDead(_13);
        StorageDead(_11);
        _368 = discriminant(_7);
        StorageDead(_7);
        goto -> bb163;
    }

    bb8: {
        StorageDead(_18);
        _16 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _17) -> [return: bb9, unwind: bb177];
    }

    bb9: {
        StorageDead(_17);
        _19 = discriminant(_16);
        switchInt(move _19) -> [0: bb10, 1: bb11, otherwise: bb5];
    }

    bb10: {
        StorageLive(_23);
        _23 = ((_16 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _15 = _23;
        StorageDead(_23);
        _314 = discriminant(_16);
        StorageDead(_16);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &mut (*_3);
        _26 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _27) -> [return: bb13, unwind continue];
    }

    bb11: {
        StorageLive(_20);
        _20 = move ((_16 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_22);
        _22 = move _20;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _22) -> [return: bb12, unwind: bb192];
    }

    bb12: {
        StorageDead(_22);
        StorageDead(_20);
        _366 = discriminant(_16);
        StorageDead(_16);
        goto -> bb162;
    }

    bb13: {
        StorageDead(_27);
        _25 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _26) -> [return: bb14, unwind: bb177];
    }

    bb14: {
        StorageDead(_26);
        _28 = discriminant(_25);
        switchInt(move _28) -> [0: bb15, 1: bb16, otherwise: bb5];
    }

    bb15: {
        StorageLive(_32);
        _32 = ((_25 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _24 = _32;
        StorageDead(_32);
        _316 = discriminant(_25);
        StorageDead(_25);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = &mut (*_3);
        _35 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _36) -> [return: bb18, unwind continue];
    }

    bb16: {
        StorageLive(_29);
        _29 = move ((_25 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_31);
        _31 = move _29;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _31) -> [return: bb17, unwind: bb191];
    }

    bb17: {
        StorageDead(_31);
        StorageDead(_29);
        _364 = discriminant(_25);
        StorageDead(_25);
        goto -> bb161;
    }

    bb18: {
        StorageDead(_36);
        _34 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _35) -> [return: bb19, unwind: bb177];
    }

    bb19: {
        StorageDead(_35);
        _37 = discriminant(_34);
        switchInt(move _37) -> [0: bb20, 1: bb21, otherwise: bb5];
    }

    bb20: {
        StorageLive(_41);
        _41 = ((_34 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _33 = _41;
        StorageDead(_41);
        _318 = discriminant(_34);
        StorageDead(_34);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = &mut (*_3);
        _44 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _45) -> [return: bb23, unwind continue];
    }

    bb21: {
        StorageLive(_38);
        _38 = move ((_34 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_40);
        _40 = move _38;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _40) -> [return: bb22, unwind: bb190];
    }

    bb22: {
        StorageDead(_40);
        StorageDead(_38);
        _362 = discriminant(_34);
        StorageDead(_34);
        goto -> bb160;
    }

    bb23: {
        StorageDead(_45);
        _43 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _44) -> [return: bb24, unwind: bb177];
    }

    bb24: {
        StorageDead(_44);
        _46 = discriminant(_43);
        switchInt(move _46) -> [0: bb25, 1: bb26, otherwise: bb5];
    }

    bb25: {
        StorageLive(_50);
        _50 = ((_43 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _42 = _50;
        StorageDead(_50);
        _320 = discriminant(_43);
        StorageDead(_43);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &mut (*_3);
        _53 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _54) -> [return: bb28, unwind continue];
    }

    bb26: {
        StorageLive(_47);
        _47 = move ((_43 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_49);
        _49 = move _47;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _49) -> [return: bb27, unwind: bb189];
    }

    bb27: {
        StorageDead(_49);
        StorageDead(_47);
        _360 = discriminant(_43);
        StorageDead(_43);
        goto -> bb159;
    }

    bb28: {
        StorageDead(_54);
        _52 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _53) -> [return: bb29, unwind: bb177];
    }

    bb29: {
        StorageDead(_53);
        _55 = discriminant(_52);
        switchInt(move _55) -> [0: bb30, 1: bb31, otherwise: bb5];
    }

    bb30: {
        StorageLive(_59);
        _59 = ((_52 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _51 = _59;
        StorageDead(_59);
        _322 = discriminant(_52);
        StorageDead(_52);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = <Clock as Sysvar>::get() -> [return: bb33, unwind continue];
    }

    bb31: {
        StorageLive(_56);
        _56 = move ((_52 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_58);
        _58 = move _56;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _58) -> [return: bb32, unwind: bb188];
    }

    bb32: {
        StorageDead(_58);
        StorageDead(_56);
        _358 = discriminant(_52);
        StorageDead(_52);
        goto -> bb158;
    }

    bb33: {
        _62 = <Result<Clock, ProgramError> as Try>::branch(move _63) -> [return: bb34, unwind: bb177];
    }

    bb34: {
        StorageDead(_63);
        _64 = discriminant(_62);
        switchInt(move _64) -> [0: bb35, 1: bb36, otherwise: bb5];
    }

    bb35: {
        StorageLive(_68);
        _68 = move ((_62 as Continue).0: solana_program::clock::Clock);
        _61 = move _68;
        StorageDead(_68);
        _60 = &_61;
        _324 = discriminant(_62);
        StorageDead(_62);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _80 = &((*_6).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _79 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _80) -> [return: bb38, unwind continue];
    }

    bb36: {
        StorageLive(_65);
        _65 = move ((_62 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_67);
        _67 = move _65;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _67) -> [return: bb37, unwind: bb187];
    }

    bb37: {
        StorageDead(_67);
        StorageDead(_65);
        _356 = discriminant(_62);
        StorageDead(_62);
        goto -> bb157;
    }

    bb38: {
        _78 = &(*_79);
        StorageDead(_80);
        _77 = RefCell::<&mut [u8]>::borrow(move _78) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_78);
        _76 = &_77;
        _75 = &(*_76);
        _74 = <Ref<'_, &mut [u8]> as Deref>::deref(move _75) -> [return: bb40, unwind: bb176];
    }

    bb40: {
        _305 = deref_copy (*_74);
        _73 = &(*_305);
        StorageDead(_75);
        _72 = <Reserve as Pack>::unpack(move _73) -> [return: bb41, unwind: bb176];
    }

    bb41: {
        StorageDead(_73);
        _71 = <Result<Reserve, ProgramError> as Try>::branch(move _72) -> [return: bb42, unwind: bb176];
    }

    bb42: {
        _310 = const true;
        _311 = const true;
        StorageDead(_72);
        _81 = discriminant(_71);
        switchInt(move _81) -> [0: bb43, 1: bb44, otherwise: bb5];
    }

    bb43: {
        StorageLive(_85);
        _85 = move ((_71 as Continue).0: solend_sdk::state::Reserve);
        _70 = move _85;
        StorageDead(_85);
        _69 = Box::<Reserve>::new(move _70) -> [return: bb46, unwind: bb186];
    }

    bb44: {
        StorageLive(_82);
        _82 = move ((_71 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_84);
        _84 = move _82;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _84) -> [return: bb45, unwind: bb186];
    }

    bb45: {
        StorageDead(_84);
        StorageDead(_82);
        StorageDead(_70);
        _354 = discriminant(_71);
        drop(_77) -> [return: bb155, unwind: bb177];
    }

    bb46: {
        StorageDead(_70);
        _326 = discriminant(_71);
        drop(_77) -> [return: bb47, unwind: bb175];
    }

    bb47: {
        StorageDead(_79);
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_74);
        _310 = const false;
        _311 = const false;
        StorageDead(_71);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _88 = &((*_6).3: &solana_program::pubkey::Pubkey);
        StorageLive(_89);
        _89 = &_1;
        _87 = <&Pubkey as PartialEq>::ne(move _88, move _89) -> [return: bb48, unwind: bb175];
    }

    bb48: {
        switchInt(move _87) -> [0: bb62, otherwise: bb49];
    }

    bb49: {
        StorageDead(_89);
        StorageDead(_88);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _304 = const _;
        _101 = &(*_304);
        _100 = &(*_101);
        _99 = move _100 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_100);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _306 = deref_copy ((*_6).3: &solana_program::pubkey::Pubkey);
        _112 = &(*_306);
        _111 = <Pubkey as ToString>::to_string(move _112) -> [return: bb50, unwind: bb175];
    }

    bb50: {
        StorageDead(_112);
        _110 = &_111;
        _109 = &_110;
        _108 = &(*_109);
        _107 = bytemuck::core::fmt::rt::Argument::<'_>::new_display::<&String>(move _108) -> [return: bb51, unwind: bb174];
    }

    bb51: {
        StorageDead(_108);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        _118 = &(*_1);
        _117 = <Pubkey as ToString>::to_string(move _118) -> [return: bb52, unwind: bb174];
    }

    bb52: {
        StorageDead(_118);
        _116 = &_117;
        _115 = &_116;
        _114 = &(*_115);
        _113 = bytemuck::core::fmt::rt::Argument::<'_>::new_display::<&String>(move _114) -> [return: bb53, unwind: bb173];
    }

    bb53: {
        StorageDead(_114);
        _106 = [move _107, move _113];
        StorageDead(_113);
        StorageDead(_107);
        _105 = &_106;
        _104 = &(*_105);
        _103 = move _104 as &[bytemuck::core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_104);
        _98 = Arguments::<'_>::new_v1(move _99, move _103) -> [return: bb54, unwind: bb173];
    }

    bb54: {
        StorageDead(_103);
        StorageDead(_99);
        _97 = format(move _98) -> [return: bb55, unwind: bb173];
    }

    bb55: {
        StorageDead(_98);
        drop(_117) -> [return: bb56, unwind: bb171];
    }

    bb56: {
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_115);
        drop(_111) -> [return: bb57, unwind: bb172];
    }

    bb57: {
        StorageDead(_111);
        StorageDead(_110);
        StorageDead(_109);
        StorageDead(_106);
        StorageDead(_105);
        StorageDead(_101);
        _96 = move _97;
        StorageDead(_97);
        _95 = &_96;
        _94 = &(*_95);
        _93 = <String as Deref>::deref(move _94) -> [return: bb58, unwind: bb170];
    }

    bb58: {
        _92 = &(*_93);
        StorageDead(_94);
        _91 = solana_program::log::sol_log(move _92) -> [return: bb59, unwind: bb170];
    }

    bb59: {
        StorageDead(_92);
        drop(_96) -> [return: bb60, unwind: bb175];
    }

    bb60: {
        StorageDead(_96);
        StorageDead(_95);
        StorageDead(_93);
        StorageDead(_91);
        StorageLive(_119);
        StorageLive(_120);
        _120 = solend_sdk::error::LendingError::InvalidAccountOwner;
        _119 = <LendingError as Into<ProgramError>>::into(move _120) -> [return: bb61, unwind: bb175];
    }

    bb61: {
        StorageDead(_120);
        _0 = Result::<(), ProgramError>::Err(move _119);
        StorageDead(_119);
        StorageDead(_87);
        StorageDead(_86);
        goto -> bb154;
    }

    bb62: {
        StorageDead(_89);
        StorageDead(_88);
        _86 = const ();
        StorageDead(_87);
        StorageDead(_86);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        _384 = (((_69.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _124 = &(((*_384).5: solend_sdk::state::ReserveConfig).14: solana_program::pubkey::Pubkey);
        _123 = &_124;
        StorageLive(_125);
        _125 = &((*_15).0: &solana_program::pubkey::Pubkey);
        _122 = <&Pubkey as PartialEq>::ne(move _123, move _125) -> [return: bb63, unwind: bb175];
    }

    bb63: {
        switchInt(move _122) -> [0: bb67, otherwise: bb64];
    }

    bb64: {
        StorageDead(_125);
        StorageDead(_124);
        StorageDead(_123);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _129 = const "Reserve liquidity fee receiver does not match the reserve liquidity fee receiver provided";
        _128 = &(*_129);
        _127 = solana_program::log::sol_log(move _128) -> [return: bb65, unwind: bb175];
    }

    bb65: {
        StorageDead(_128);
        StorageDead(_129);
        StorageDead(_127);
        StorageLive(_130);
        StorageLive(_131);
        _131 = InvalidAccountInput;
        _130 = <LendingError as Into<ProgramError>>::into(move _131) -> [return: bb66, unwind: bb175];
    }

    bb66: {
        StorageDead(_131);
        _0 = Result::<(), ProgramError>::Err(move _130);
        StorageDead(_130);
        StorageDead(_122);
        StorageDead(_121);
        goto -> bb154;
    }

    bb67: {
        StorageDead(_125);
        StorageDead(_124);
        StorageDead(_123);
        _121 = const ();
        StorageDead(_122);
        StorageDead(_121);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        _385 = (((_69.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _135 = &(((*_385).3: solend_sdk::state::ReserveLiquidity).2: solana_program::pubkey::Pubkey);
        _134 = &_135;
        StorageLive(_136);
        _136 = &((*_24).0: &solana_program::pubkey::Pubkey);
        _133 = <&Pubkey as PartialEq>::ne(move _134, move _136) -> [return: bb68, unwind: bb175];
    }

    bb68: {
        switchInt(move _133) -> [0: bb72, otherwise: bb69];
    }

    bb69: {
        StorageDead(_136);
        StorageDead(_135);
        StorageDead(_134);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        _140 = const "Reserve liquidity supply must be used as the reserve supply liquidity provided";
        _139 = &(*_140);
        _138 = solana_program::log::sol_log(move _139) -> [return: bb70, unwind: bb175];
    }

    bb70: {
        StorageDead(_139);
        StorageDead(_140);
        StorageDead(_138);
        StorageLive(_141);
        StorageLive(_142);
        _142 = InvalidAccountInput;
        _141 = <LendingError as Into<ProgramError>>::into(move _142) -> [return: bb71, unwind: bb175];
    }

    bb71: {
        StorageDead(_142);
        _0 = Result::<(), ProgramError>::Err(move _141);
        StorageDead(_141);
        StorageDead(_133);
        StorageDead(_132);
        goto -> bb154;
    }

    bb72: {
        StorageDead(_136);
        StorageDead(_135);
        StorageDead(_134);
        _132 = const ();
        StorageDead(_133);
        StorageDead(_132);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        _386 = (((_69.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _146 = &((*_386).2: solana_program::pubkey::Pubkey);
        _145 = &_146;
        StorageLive(_147);
        _147 = &((*_33).0: &solana_program::pubkey::Pubkey);
        _144 = <&Pubkey as PartialEq>::ne(move _145, move _147) -> [return: bb73, unwind: bb175];
    }

    bb73: {
        switchInt(move _144) -> [0: bb77, otherwise: bb74];
    }

    bb74: {
        StorageDead(_147);
        StorageDead(_146);
        StorageDead(_145);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        _151 = const "Reserve lending market does not match the lending market provided";
        _150 = &(*_151);
        _149 = solana_program::log::sol_log(move _150) -> [return: bb75, unwind: bb175];
    }

    bb75: {
        StorageDead(_150);
        StorageDead(_151);
        StorageDead(_149);
        StorageLive(_152);
        StorageLive(_153);
        _153 = InvalidAccountInput;
        _152 = <LendingError as Into<ProgramError>>::into(move _153) -> [return: bb76, unwind: bb175];
    }

    bb76: {
        StorageDead(_153);
        _0 = Result::<(), ProgramError>::Err(move _152);
        StorageDead(_152);
        StorageDead(_144);
        StorageDead(_143);
        goto -> bb154;
    }

    bb77: {
        StorageDead(_147);
        StorageDead(_146);
        StorageDead(_145);
        _143 = const ();
        StorageDead(_144);
        StorageDead(_143);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        _387 = (((_69.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _158 = &((*_387).1: solend_sdk::state::LastUpdate);
        StorageLive(_159);
        _159 = ((*_60).0: u64);
        _157 = LastUpdate::is_stale(move _158, move _159) -> [return: bb78, unwind: bb175];
    }

    bb78: {
        StorageDead(_159);
        StorageDead(_158);
        _156 = <Result<bool, ProgramError> as Try>::branch(move _157) -> [return: bb79, unwind: bb175];
    }

    bb79: {
        StorageDead(_157);
        _160 = discriminant(_156);
        switchInt(move _160) -> [0: bb80, 1: bb81, otherwise: bb5];
    }

    bb80: {
        StorageLive(_164);
        _164 = ((_156 as Continue).0: bool);
        _155 = _164;
        StorageDead(_164);
        switchInt(move _155) -> [0: bb179, otherwise: bb178];
    }

    bb81: {
        StorageLive(_161);
        _161 = move ((_156 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_163);
        _163 = move _161;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _163) -> [return: bb82, unwind: bb185];
    }

    bb82: {
        StorageDead(_163);
        StorageDead(_161);
        _352 = discriminant(_156);
        StorageDead(_156);
        goto -> bb153;
    }

    bb83: {
        StorageDead(_167);
        StorageDead(_168);
        StorageDead(_166);
        StorageLive(_169);
        StorageLive(_170);
        _170 = ReserveStale;
        _169 = <LendingError as Into<ProgramError>>::into(move _170) -> [return: bb84, unwind: bb175];
    }

    bb84: {
        StorageDead(_170);
        _0 = Result::<(), ProgramError>::Err(move _169);
        StorageDead(_169);
        goto -> bb153;
    }

    bb85: {
        _179 = &(*_180);
        StorageDead(_181);
        _178 = RefCell::<&mut [u8]>::borrow(move _179) -> [return: bb86, unwind: bb175];
    }

    bb86: {
        StorageDead(_179);
        _177 = &_178;
        _176 = &(*_177);
        _175 = <Ref<'_, &mut [u8]> as Deref>::deref(move _176) -> [return: bb87, unwind: bb169];
    }

    bb87: {
        _307 = deref_copy (*_175);
        _174 = &(*_307);
        StorageDead(_176);
        _173 = <LendingMarket as Pack>::unpack(move _174) -> [return: bb88, unwind: bb169];
    }

    bb88: {
        StorageDead(_174);
        _172 = <Result<LendingMarket, ProgramError> as Try>::branch(move _173) -> [return: bb89, unwind: bb169];
    }

    bb89: {
        StorageDead(_173);
        _182 = discriminant(_172);
        switchInt(move _182) -> [0: bb90, 1: bb91, otherwise: bb5];
    }

    bb90: {
        StorageLive(_186);
        _186 = move ((_172 as Continue).0: solend_sdk::state::LendingMarket);
        _171 = move _186;
        StorageDead(_186);
        _332 = discriminant(_172);
        drop(_178) -> [return: bb93, unwind: bb175];
    }

    bb91: {
        StorageLive(_183);
        _183 = move ((_172 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_185);
        _185 = move _183;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _185) -> [return: bb92, unwind: bb184];
    }

    bb92: {
        StorageDead(_185);
        StorageDead(_183);
        _350 = discriminant(_172);
        drop(_178) -> [return: bb151, unwind: bb175];
    }

    bb93: {
        StorageDead(_180);
        StorageDead(_178);
        StorageDead(_177);
        StorageDead(_175);
        StorageDead(_172);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        _189 = &((*_33).3: &solana_program::pubkey::Pubkey);
        StorageLive(_190);
        _190 = &_1;
        _188 = <&Pubkey as PartialEq>::ne(move _189, move _190) -> [return: bb94, unwind: bb175];
    }

    bb94: {
        switchInt(move _188) -> [0: bb98, otherwise: bb95];
    }

    bb95: {
        StorageDead(_190);
        StorageDead(_189);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        _194 = const "Lending market provided is not owned by the lending program";
        _193 = &(*_194);
        _192 = solana_program::log::sol_log(move _193) -> [return: bb96, unwind: bb175];
    }

    bb96: {
        StorageDead(_193);
        StorageDead(_194);
        StorageDead(_192);
        StorageLive(_195);
        StorageLive(_196);
        _196 = solend_sdk::error::LendingError::InvalidAccountOwner;
        _195 = <LendingError as Into<ProgramError>>::into(move _196) -> [return: bb97, unwind: bb175];
    }

    bb97: {
        StorageDead(_196);
        _0 = Result::<(), ProgramError>::Err(move _195);
        StorageDead(_195);
        StorageDead(_188);
        StorageDead(_187);
        goto -> bb152;
    }

    bb98: {
        StorageDead(_190);
        StorageDead(_189);
        _187 = const ();
        StorageDead(_188);
        StorageDead(_187);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        _200 = &(_171.4: solana_program::pubkey::Pubkey);
        _199 = &_200;
        StorageLive(_201);
        _201 = &((*_51).0: &solana_program::pubkey::Pubkey);
        _198 = <&Pubkey as PartialEq>::ne(move _199, move _201) -> [return: bb99, unwind: bb175];
    }

    bb99: {
        switchInt(move _198) -> [0: bb103, otherwise: bb100];
    }

    bb100: {
        StorageDead(_201);
        StorageDead(_200);
        StorageDead(_199);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        _205 = const "Lending market token program does not match the token program provided";
        _204 = &(*_205);
        _203 = solana_program::log::sol_log(move _204) -> [return: bb101, unwind: bb175];
    }

    bb101: {
        StorageDead(_204);
        StorageDead(_205);
        StorageDead(_203);
        StorageLive(_206);
        StorageLive(_207);
        _207 = InvalidTokenProgram;
        _206 = <LendingError as Into<ProgramError>>::into(move _207) -> [return: bb102, unwind: bb175];
    }

    bb102: {
        StorageDead(_207);
        _0 = Result::<(), ProgramError>::Err(move _206);
        StorageDead(_206);
        StorageDead(_198);
        StorageDead(_197);
        goto -> bb152;
    }

    bb103: {
        StorageDead(_201);
        StorageDead(_200);
        StorageDead(_199);
        _197 = const ();
        StorageDead(_198);
        StorageDead(_197);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        _308 = deref_copy ((*_33).0: &solana_program::pubkey::Pubkey);
        _211 = &(*_308);
        _210 = <Pubkey as AsRef<[u8]>>::as_ref(move _211) -> [return: bb104, unwind: bb175];
    }

    bb104: {
        StorageDead(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        _216 = (_171.1: u8);
        _215 = [move _216];
        StorageDead(_216);
        _214 = &_215;
        _213 = &(*_214);
        _212 = move _213 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_213);
        _209 = [move _210, move _212];
        StorageDead(_212);
        StorageDead(_210);
        _208 = &_209;
        StorageDead(_214);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        _221 = &(*_208);
        _220 = move _221 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_221);
        StorageLive(_222);
        _222 = &(*_1);
        _219 = Pubkey::create_program_address(move _220, move _222) -> [return: bb105, unwind: bb175];
    }

    bb105: {
        StorageDead(_222);
        StorageDead(_220);
        _218 = <Result<Pubkey, PubkeyError> as Try>::branch(move _219) -> [return: bb106, unwind: bb175];
    }

    bb106: {
        StorageDead(_219);
        _223 = discriminant(_218);
        switchInt(move _223) -> [0: bb107, 1: bb108, otherwise: bb5];
    }

    bb107: {
        StorageLive(_227);
        _227 = ((_218 as Continue).0: solana_program::pubkey::Pubkey);
        _217 = _227;
        StorageDead(_227);
        StorageDead(_218);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        _231 = &_217;
        _230 = &_231;
        StorageLive(_232);
        _232 = &((*_42).0: &solana_program::pubkey::Pubkey);
        _229 = <&Pubkey as PartialEq>::ne(move _230, move _232) -> [return: bb110, unwind: bb175];
    }

    bb108: {
        StorageLive(_224);
        _224 = move ((_218 as Break).0: std::result::Result<std::convert::Infallible, solana_program::pubkey::PubkeyError>);
        StorageLive(_226);
        _226 = move _224;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, PubkeyError>>>::from_residual(move _226) -> [return: bb109, unwind: bb175];
    }

    bb109: {
        StorageDead(_226);
        StorageDead(_224);
        StorageDead(_218);
        goto -> bb150;
    }

    bb110: {
        switchInt(move _229) -> [0: bb114, otherwise: bb111];
    }

    bb111: {
        StorageDead(_232);
        StorageDead(_231);
        StorageDead(_230);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        _236 = const "Derived lending market authority does not match the lending market authority provided";
        _235 = &(*_236);
        _234 = solana_program::log::sol_log(move _235) -> [return: bb112, unwind: bb175];
    }

    bb112: {
        StorageDead(_235);
        StorageDead(_236);
        StorageDead(_234);
        StorageLive(_237);
        StorageLive(_238);
        _238 = InvalidMarketAuthority;
        _237 = <LendingError as Into<ProgramError>>::into(move _238) -> [return: bb113, unwind: bb175];
    }

    bb113: {
        StorageDead(_238);
        _0 = Result::<(), ProgramError>::Err(move _237);
        StorageDead(_237);
        StorageDead(_229);
        StorageDead(_228);
        goto -> bb150;
    }

    bb114: {
        StorageDead(_232);
        StorageDead(_231);
        StorageDead(_230);
        _228 = const ();
        StorageDead(_229);
        StorageDead(_228);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        _388 = (((_69.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _242 = &(*_388);
        _241 = Reserve::calculate_redeem_fees(move _242) -> [return: bb115, unwind: bb175];
    }

    bb115: {
        StorageDead(_242);
        _240 = <Result<u64, ProgramError> as Try>::branch(move _241) -> [return: bb116, unwind: bb175];
    }

    bb116: {
        StorageDead(_241);
        _243 = discriminant(_240);
        switchInt(move _243) -> [0: bb117, 1: bb118, otherwise: bb5];
    }

    bb117: {
        StorageLive(_247);
        _247 = ((_240 as Continue).0: u64);
        _239 = _247;
        StorageDead(_247);
        _334 = discriminant(_240);
        StorageDead(_240);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        _250 = _239;
        _249 = Eq(move _250, const 0_u64);
        switchInt(move _249) -> [0: bb122, otherwise: bb120];
    }

    bb118: {
        StorageLive(_244);
        _244 = move ((_240 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_246);
        _246 = move _244;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _246) -> [return: bb119, unwind: bb183];
    }

    bb119: {
        StorageDead(_246);
        StorageDead(_244);
        _348 = discriminant(_240);
        StorageDead(_240);
        goto -> bb149;
    }

    bb120: {
        StorageDead(_250);
        StorageLive(_252);
        StorageLive(_253);
        _253 = InsufficientProtocolFeesToRedeem;
        _252 = <LendingError as Into<ProgramError>>::into(move _253) -> [return: bb121, unwind: bb175];
    }

    bb121: {
        StorageDead(_253);
        _0 = Result::<(), ProgramError>::Err(move _252);
        StorageDead(_252);
        StorageDead(_249);
        StorageDead(_248);
        goto -> bb149;
    }

    bb122: {
        StorageDead(_250);
        _248 = const ();
        StorageDead(_249);
        StorageDead(_248);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        _389 = (((_69.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _257 = &mut ((*_389).3: solend_sdk::state::ReserveLiquidity);
        StorageLive(_258);
        _258 = _239;
        _256 = ReserveLiquidity::redeem_fees(move _257, move _258) -> [return: bb123, unwind: bb175];
    }

    bb123: {
        StorageDead(_258);
        StorageDead(_257);
        _255 = <Result<(), ProgramError> as Try>::branch(move _256) -> [return: bb124, unwind: bb175];
    }

    bb124: {
        StorageDead(_256);
        _259 = discriminant(_255);
        switchInt(move _259) -> [0: bb125, 1: bb126, otherwise: bb5];
    }

    bb125: {
        StorageLive(_263);
        _263 = ((_255 as Continue).0: ());
        _254 = _263;
        StorageDead(_263);
        _336 = discriminant(_255);
        StorageDead(_255);
        StorageDead(_254);
        StorageLive(_264);
        StorageLive(_265);
        _390 = (((_69.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _265 = &mut ((*_390).1: solend_sdk::state::LastUpdate);
        _264 = LastUpdate::mark_stale(move _265) -> [return: bb128, unwind: bb175];
    }

    bb126: {
        StorageLive(_260);
        _260 = move ((_255 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_262);
        _262 = move _260;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _262) -> [return: bb127, unwind: bb182];
    }

    bb127: {
        StorageDead(_262);
        StorageDead(_260);
        _346 = discriminant(_255);
        StorageDead(_255);
        StorageDead(_254);
        goto -> bb149;
    }

    bb128: {
        StorageDead(_265);
        StorageDead(_264);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        _391 = (((_69.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _392 = _391 as *const () (PtrToPtr);
        _393 = _392 as usize (Transmute);
        _394 = AlignOf(solend_sdk::state::Reserve);
        _395 = Sub(_394, const 1_usize);
        _396 = BitAnd(_393, _395);
        _397 = Eq(_396, const 0_usize);
        assert(_397, "misaligned pointer dereference: address must be a multiple of {} but is {}", _394, _393) -> [success: bb194, unwind unreachable];
    }

    bb129: {
        _275 = &(*_276);
        StorageDead(_277);
        _274 = RefCell::<&mut [u8]>::borrow_mut(move _275) -> [return: bb130, unwind: bb175];
    }

    bb130: {
        StorageDead(_275);
        _273 = &mut _274;
        _272 = &mut (*_273);
        _271 = <RefMut<'_, &mut [u8]> as DerefMut>::deref_mut(move _272) -> [return: bb131, unwind: bb168];
    }

    bb131: {
        _309 = deref_copy (*_271);
        _270 = &mut (*_309);
        StorageDead(_272);
        _268 = <Reserve as Pack>::pack(move _269, move _270) -> [return: bb132, unwind: bb168];
    }

    bb132: {
        StorageDead(_270);
        StorageDead(_269);
        _267 = <Result<(), ProgramError> as Try>::branch(move _268) -> [return: bb133, unwind: bb168];
    }

    bb133: {
        StorageDead(_268);
        _278 = discriminant(_267);
        switchInt(move _278) -> [0: bb134, 1: bb135, otherwise: bb5];
    }

    bb134: {
        StorageLive(_282);
        _282 = ((_267 as Continue).0: ());
        _266 = _282;
        StorageDead(_282);
        _338 = discriminant(_267);
        drop(_274) -> [return: bb137, unwind: bb175];
    }

    bb135: {
        StorageLive(_279);
        _279 = move ((_267 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_281);
        _281 = move _279;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _281) -> [return: bb136, unwind: bb181];
    }

    bb136: {
        StorageDead(_281);
        StorageDead(_279);
        _344 = discriminant(_267);
        drop(_274) -> [return: bb148, unwind: bb175];
    }

    bb137: {
        StorageDead(_276);
        StorageDead(_274);
        StorageDead(_273);
        StorageDead(_271);
        StorageDead(_267);
        StorageDead(_266);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        _288 = &(*_24);
        _287 = <AccountInfo<'_> as Clone>::clone(move _288) -> [return: bb138, unwind: bb175];
    }

    bb138: {
        StorageDead(_288);
        StorageLive(_289);
        StorageLive(_290);
        _290 = &(*_15);
        _289 = <AccountInfo<'_> as Clone>::clone(move _290) -> [return: bb139, unwind: bb167];
    }

    bb139: {
        StorageDead(_290);
        StorageLive(_291);
        _291 = _239;
        StorageLive(_292);
        StorageLive(_293);
        _293 = &(*_42);
        _292 = <AccountInfo<'_> as Clone>::clone(move _293) -> [return: bb140, unwind: bb166];
    }

    bb140: {
        StorageDead(_293);
        StorageLive(_294);
        StorageLive(_295);
        _295 = &(*_208);
        _294 = move _295 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_295);
        StorageLive(_296);
        StorageLive(_297);
        _297 = &(*_51);
        _296 = <AccountInfo<'_> as Clone>::clone(move _297) -> [return: bb141, unwind: bb165];
    }

    bb141: {
        StorageDead(_297);
        _286 = TokenTransferParams::<'_, '_> { source: move _287, destination: move _289, amount: move _291, authority: move _292, authority_signer_seeds: move _294, token_program: move _296 };
        StorageDead(_296);
        StorageDead(_294);
        StorageDead(_292);
        StorageDead(_291);
        StorageDead(_289);
        StorageDead(_287);
        _285 = spl_token_transfer(move _286) -> [return: bb142, unwind: bb175];
    }

    bb142: {
        StorageDead(_286);
        _284 = <Result<(), ProgramError> as Try>::branch(move _285) -> [return: bb143, unwind: bb175];
    }

    bb143: {
        StorageDead(_285);
        _298 = discriminant(_284);
        switchInt(move _298) -> [0: bb144, 1: bb145, otherwise: bb5];
    }

    bb144: {
        StorageLive(_302);
        _302 = ((_284 as Continue).0: ());
        _283 = _302;
        StorageDead(_302);
        _340 = discriminant(_284);
        StorageDead(_284);
        StorageDead(_283);
        StorageLive(_303);
        _303 = ();
        _0 = Result::<(), ProgramError>::Ok(move _303);
        StorageDead(_303);
        StorageDead(_239);
        StorageDead(_217);
        StorageDead(_215);
        StorageDead(_209);
        StorageDead(_208);
        StorageDead(_171);
        drop(_69) -> [return: bb147, unwind: bb177];
    }

    bb145: {
        StorageLive(_299);
        _299 = move ((_284 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_301);
        _301 = move _299;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _301) -> [return: bb146, unwind: bb180];
    }

    bb146: {
        StorageDead(_301);
        StorageDead(_299);
        _342 = discriminant(_284);
        StorageDead(_284);
        StorageDead(_283);
        goto -> bb149;
    }

    bb147: {
        StorageDead(_69);
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_51);
        StorageDead(_42);
        StorageDead(_33);
        StorageDead(_24);
        StorageDead(_15);
        StorageDead(_6);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb164;
    }

    bb148: {
        StorageDead(_276);
        StorageDead(_274);
        StorageDead(_273);
        StorageDead(_271);
        StorageDead(_267);
        StorageDead(_266);
        goto -> bb149;
    }

    bb149: {
        StorageDead(_239);
        goto -> bb150;
    }

    bb150: {
        StorageDead(_217);
        StorageDead(_215);
        StorageDead(_209);
        StorageDead(_208);
        goto -> bb152;
    }

    bb151: {
        StorageDead(_180);
        StorageDead(_178);
        StorageDead(_177);
        StorageDead(_175);
        StorageDead(_172);
        goto -> bb152;
    }

    bb152: {
        StorageDead(_171);
        goto -> bb154;
    }

    bb153: {
        StorageDead(_155);
        StorageDead(_154);
        goto -> bb154;
    }

    bb154: {
        drop(_69) -> [return: bb156, unwind: bb177];
    }

    bb155: {
        StorageDead(_79);
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_74);
        _310 = const false;
        _311 = const false;
        StorageDead(_71);
        goto -> bb156;
    }

    bb156: {
        StorageDead(_69);
        goto -> bb157;
    }

    bb157: {
        StorageDead(_61);
        StorageDead(_60);
        goto -> bb158;
    }

    bb158: {
        StorageDead(_51);
        goto -> bb159;
    }

    bb159: {
        StorageDead(_42);
        goto -> bb160;
    }

    bb160: {
        StorageDead(_33);
        goto -> bb161;
    }

    bb161: {
        StorageDead(_24);
        goto -> bb162;
    }

    bb162: {
        StorageDead(_15);
        goto -> bb163;
    }

    bb163: {
        StorageDead(_6);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb164;
    }

    bb164: {
        return;
    }

    bb165 (cleanup): {
        drop(_292) -> [return: bb166, unwind terminate(cleanup)];
    }

    bb166 (cleanup): {
        drop(_289) -> [return: bb167, unwind terminate(cleanup)];
    }

    bb167 (cleanup): {
        drop(_287) -> [return: bb175, unwind terminate(cleanup)];
    }

    bb168 (cleanup): {
        drop(_274) -> [return: bb175, unwind terminate(cleanup)];
    }

    bb169 (cleanup): {
        drop(_178) -> [return: bb175, unwind terminate(cleanup)];
    }

    bb170 (cleanup): {
        drop(_96) -> [return: bb175, unwind terminate(cleanup)];
    }

    bb171 (cleanup): {
        drop(_111) -> [return: bb172, unwind terminate(cleanup)];
    }

    bb172 (cleanup): {
        drop(_97) -> [return: bb175, unwind terminate(cleanup)];
    }

    bb173 (cleanup): {
        drop(_117) -> [return: bb174, unwind terminate(cleanup)];
    }

    bb174 (cleanup): {
        drop(_111) -> [return: bb175, unwind terminate(cleanup)];
    }

    bb175 (cleanup): {
        drop(_69) -> [return: bb177, unwind terminate(cleanup)];
    }

    bb176 (cleanup): {
        drop(_77) -> [return: bb177, unwind terminate(cleanup)];
    }

    bb177 (cleanup): {
        resume;
    }

    bb178: {
        _328 = discriminant(_156);
        StorageDead(_156);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        _168 = const "reserve is stale and must be refreshed in the current slot";
        _167 = &(*_168);
        _166 = solana_program::log::sol_log(move _167) -> [return: bb83, unwind: bb175];
    }

    bb179: {
        _330 = discriminant(_156);
        StorageDead(_156);
        _154 = const ();
        StorageDead(_155);
        StorageDead(_154);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        _181 = &((*_33).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _180 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _181) -> [return: bb85, unwind: bb175];
    }

    bb180 (cleanup): {
        _370 = discriminant(_284);
        goto -> bb175;
    }

    bb181 (cleanup): {
        _371 = discriminant(_267);
        goto -> bb168;
    }

    bb182 (cleanup): {
        _372 = discriminant(_255);
        goto -> bb175;
    }

    bb183 (cleanup): {
        _373 = discriminant(_240);
        goto -> bb175;
    }

    bb184 (cleanup): {
        _374 = discriminant(_172);
        goto -> bb169;
    }

    bb185 (cleanup): {
        _375 = discriminant(_156);
        goto -> bb175;
    }

    bb186 (cleanup): {
        _376 = discriminant(_71);
        goto -> bb176;
    }

    bb187 (cleanup): {
        _377 = discriminant(_62);
        goto -> bb177;
    }

    bb188 (cleanup): {
        _378 = discriminant(_52);
        goto -> bb177;
    }

    bb189 (cleanup): {
        _379 = discriminant(_43);
        goto -> bb177;
    }

    bb190 (cleanup): {
        _380 = discriminant(_34);
        goto -> bb177;
    }

    bb191 (cleanup): {
        _381 = discriminant(_25);
        goto -> bb177;
    }

    bb192 (cleanup): {
        _382 = discriminant(_16);
        goto -> bb177;
    }

    bb193 (cleanup): {
        _383 = discriminant(_7);
        goto -> bb177;
    }

    bb194: {
        _269 = move (*_391);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        _277 = &((*_6).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _276 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _277) -> [return: bb129, unwind: bb175];
    }
}
