// MIR for `unpack_mint` before PreCodegen

fn unpack_mint(_1: &[u8]) -> Result<Mint, LendingError> {
    debug data => _1;
    let mut _0: std::result::Result<spl_token::state::Mint, solend_sdk::error::LendingError>;
    let mut _2: std::result::Result<spl_token::state::Mint, solana_program::program_error::ProgramError>;
    let mut _3: &[u8];
    let mut _4: {closure@token-lending\program\src\processor.rs:3287:32: 3287:35};

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = &(*_1);
        _2 = <Mint as Pack>::unpack(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_3);
        StorageLive(_4);
        _4 = {closure@token-lending\program\src\processor.rs:3287:32: 3287:35};
        _0 = Result::<Mint, ProgramError>::map_err::<LendingError, {closure@token-lending\program\src\processor.rs:3287:32: 3287:35}>(move _2, move _4) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        StorageDead(_4);
        StorageDead(_2);
        return;
    }

    bb3 (cleanup): {
        resume;
    }
}
