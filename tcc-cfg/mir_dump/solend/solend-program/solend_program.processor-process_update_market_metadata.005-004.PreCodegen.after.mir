// MIR for `process_update_market_metadata` after PreCodegen

fn process_update_market_metadata(_1: &Pubkey, _2: &LendingMarketMetadata, _3: &[AccountInfo<'_>]) -> Result<(), ProgramError> {
    debug program_id => _1;
    debug metadata => _2;
    debug accounts => _3;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _4: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _5: std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _6: &[solana_program::account_info::AccountInfo<'_>];
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _9: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _10: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _11: isize;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _18: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _19: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _20: isize;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _27: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _28: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _29: isize;
    let mut _31: !;
    let mut _32: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::state::LendingMarket>;
    let mut _36: std::result::Result<solend_sdk::state::LendingMarket, solana_program::program_error::ProgramError>;
    let mut _37: &[u8];
    let _38: &&mut [u8];
    let mut _39: &std::cell::Ref<'_, &mut [u8]>;
    let _40: &std::cell::Ref<'_, &mut [u8]>;
    let _41: std::cell::Ref<'_, &mut [u8]>;
    let mut _42: &std::cell::RefCell<&mut [u8]>;
    let _43: &std::cell::RefCell<&mut [u8]>;
    let mut _44: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _45: isize;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _50: ();
    let mut _51: bool;
    let mut _52: &&solana_program::pubkey::Pubkey;
    let mut _53: &&solana_program::pubkey::Pubkey;
    let mut _54: !;
    let _55: ();
    let mut _56: &str;
    let _57: &str;
    let mut _58: &std::string::String;
    let _59: &std::string::String;
    let _60: std::string::String;
    let mut _62: std::fmt::Arguments<'_>;
    let mut _63: &[&str];
    let mut _64: &[&str; 1];
    let _65: &[&str; 1];
    let _66: [&str; 1];
    let mut _67: solana_program::program_error::ProgramError;
    let mut _68: solend_sdk::error::LendingError;
    let _69: ();
    let mut _70: bool;
    let mut _71: &&solana_program::pubkey::Pubkey;
    let _72: &solana_program::pubkey::Pubkey;
    let mut _73: &&solana_program::pubkey::Pubkey;
    let mut _74: !;
    let _75: ();
    let mut _76: &str;
    let _77: &str;
    let mut _78: solana_program::program_error::ProgramError;
    let mut _79: solend_sdk::error::LendingError;
    let _80: ();
    let mut _81: bool;
    let mut _82: !;
    let _83: ();
    let mut _84: &str;
    let _85: &str;
    let mut _86: solana_program::program_error::ProgramError;
    let mut _87: solend_sdk::error::LendingError;
    let _89: [&[u8]; 2];
    let mut _90: &[u8];
    let mut _91: &solana_program::pubkey::Pubkey;
    let mut _92: &[u8];
    let mut _93: &[u8; 8];
    let _94: &[u8; 8];
    let mut _97: (solana_program::pubkey::Pubkey, u8);
    let mut _98: &[&[u8]];
    let mut _99: &[&[u8]; 2];
    let mut _100: &solana_program::pubkey::Pubkey;
    let _101: ();
    let mut _102: bool;
    let mut _103: &solana_program::pubkey::Pubkey;
    let mut _104: &solana_program::pubkey::Pubkey;
    let mut _105: !;
    let _106: ();
    let mut _107: &str;
    let _108: &str;
    let mut _109: solana_program::program_error::ProgramError;
    let mut _110: solend_sdk::error::LendingError;
    let _111: ();
    let mut _112: bool;
    let mut _113: u8;
    let mut _114: u8;
    let mut _115: !;
    let _116: ();
    let mut _117: &str;
    let _118: &str;
    let mut _119: solana_program::program_error::ProgramError;
    let mut _120: solend_sdk::error::LendingError;
    let _121: ();
    let mut _122: bool;
    let mut _123: &solana_program::account_info::AccountInfo<'_>;
    let _124: ();
    let mut _125: &str;
    let _126: &str;
    let _127: ();
    let mut _128: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _129: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _130: &solana_program::instruction::Instruction;
    let _131: &solana_program::instruction::Instruction;
    let _132: solana_program::instruction::Instruction;
    let mut _133: &solana_program::pubkey::Pubkey;
    let mut _134: &solana_program::pubkey::Pubkey;
    let mut _135: u64;
    let mut _136: &solana_program::rent::Rent;
    let _137: solana_program::rent::Rent;
    let mut _138: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solana_program::rent::Rent>;
    let mut _139: std::result::Result<solana_program::rent::Rent, solana_program::program_error::ProgramError>;
    let mut _140: isize;
    let mut _142: !;
    let mut _143: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _145: usize;
    let mut _146: u64;
    let mut _147: usize;
    let mut _148: &solana_program::pubkey::Pubkey;
    let mut _149: &[solana_program::account_info::AccountInfo<'_>];
    let mut _150: &[solana_program::account_info::AccountInfo<'_>; 2];
    let _151: &[solana_program::account_info::AccountInfo<'_>; 2];
    let _152: [solana_program::account_info::AccountInfo<'_>; 2];
    let mut _153: solana_program::account_info::AccountInfo<'_>;
    let mut _154: &solana_program::account_info::AccountInfo<'_>;
    let mut _155: solana_program::account_info::AccountInfo<'_>;
    let mut _156: &solana_program::account_info::AccountInfo<'_>;
    let mut _157: &[&[&[u8]]];
    let mut _158: &[&[&[u8]]; 1];
    let _159: &[&[&[u8]]; 1];
    let _160: [&[&[u8]]; 1];
    let mut _161: &[&[u8]];
    let mut _162: &[&[u8]; 3];
    let _163: &[&[u8]; 3];
    let _164: [&[u8]; 3];
    let mut _165: &[u8];
    let _166: &[u8];
    let mut _167: &solana_program::pubkey::Pubkey;
    let mut _168: &[u8];
    let mut _169: &[u8; 8];
    let _170: &[u8; 8];
    let mut _171: &[u8];
    let mut _172: &[u8; 1];
    let _173: &[u8; 1];
    let _174: [u8; 1];
    let mut _175: u8;
    let mut _176: isize;
    let mut _178: !;
    let mut _179: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _181: ();
    let mut _182: bool;
    let mut _183: &&solana_program::pubkey::Pubkey;
    let mut _184: &&solana_program::pubkey::Pubkey;
    let mut _185: !;
    let _186: ();
    let mut _187: &str;
    let _188: &str;
    let mut _189: solana_program::program_error::ProgramError;
    let mut _190: solend_sdk::error::LendingError;
    let mut _192: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, std::cell::RefMut<'_, &mut [u8]>>;
    let mut _193: std::result::Result<std::cell::RefMut<'_, &mut [u8]>, solana_program::program_error::ProgramError>;
    let mut _194: &solana_program::account_info::AccountInfo<'_>;
    let mut _195: isize;
    let mut _197: !;
    let mut _198: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _200: ();
    let mut _201: &mut [u8];
    let mut _202: &mut &mut [u8];
    let mut _203: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _204: &[u8];
    let _205: &[u8];
    let mut _206: &solend_sdk::state::LendingMarketMetadata;
    let mut _207: ();
    let mut _209: &mut [u8];
    let mut _210: &solana_program::pubkey::Pubkey;
    let mut _211: &solana_program::pubkey::Pubkey;
    let mut _212: &solana_program::pubkey::Pubkey;
    let mut _213: &solana_program::pubkey::Pubkey;
    let mut _214: &solana_program::pubkey::Pubkey;
    let mut _215: &mut [u8];
    let mut _216: bool;
    let mut _217: isize;
    let mut _218: isize;
    let mut _219: isize;
    let mut _220: isize;
    let mut _221: isize;
    let mut _222: isize;
    let mut _223: isize;
    let mut _224: isize;
    let mut _225: isize;
    let mut _226: isize;
    let mut _227: isize;
    let mut _228: isize;
    let mut _229: isize;
    let mut _230: isize;
    let mut _231: isize;
    let mut _232: isize;
    let mut _233: isize;
    let mut _234: isize;
    let mut _235: isize;
    let mut _236: isize;
    let mut _237: isize;
    let mut _238: isize;
    let mut _239: isize;
    let mut _240: isize;
    let mut _241: isize;
    let mut _242: isize;
    let mut _243: isize;
    let mut _244: isize;
    let mut _245: isize;
    let mut _246: isize;
    let mut _247: isize;
    let mut _248: isize;
    let mut _249: isize;
    let mut _250: isize;
    let mut _251: isize;
    scope 1 {
        debug account_info_iter => _4;
        let _7: &solana_program::account_info::AccountInfo<'_>;
        let _12: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _15: &solana_program::account_info::AccountInfo<'_>;
        scope 2 {
            debug lending_market_info => _7;
            let _16: &solana_program::account_info::AccountInfo<'_>;
            let _21: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
            let _24: &solana_program::account_info::AccountInfo<'_>;
            scope 7 {
                debug lending_market_owner_info => _16;
                let _25: &solana_program::account_info::AccountInfo<'_>;
                let _30: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                let _33: &solana_program::account_info::AccountInfo<'_>;
                scope 12 {
                    debug metadata_info => _25;
                    let _34: solend_sdk::state::LendingMarket;
                    let _46: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                    let _49: solend_sdk::state::LendingMarket;
                    scope 17 {
                        debug lending_market => _34;
                        let _61: std::string::String;
                        let _88: &[&[u8]; 2];
                        let mut _208: &[&str; 1];
                        scope 22 {
                            debug res => _61;
                        }
                        scope 23 {
                            debug metadata_seeds => _88;
                            let _95: solana_program::pubkey::Pubkey;
                            let _96: u8;
                            scope 24 {
                                debug metadata_key => _95;
                                debug bump_seed => _96;
                                let _141: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                let _144: solana_program::rent::Rent;
                                let _177: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                let _180: ();
                                let mut _191: std::cell::RefMut<'_, &mut [u8]>;
                                let _196: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                let _199: std::cell::RefMut<'_, &mut [u8]>;
                                scope 25 {
                                    debug residual => _141;
                                    scope 26 {
                                    }
                                }
                                scope 27 {
                                    debug val => _144;
                                    scope 28 {
                                    }
                                }
                                scope 29 {
                                    debug residual => _177;
                                    scope 30 {
                                    }
                                }
                                scope 31 {
                                    debug val => _180;
                                    scope 32 {
                                    }
                                }
                                scope 33 {
                                    debug metadata_account_data => _191;
                                }
                                scope 34 {
                                    debug residual => _196;
                                    scope 35 {
                                    }
                                }
                                scope 36 {
                                    debug val => _199;
                                    scope 37 {
                                    }
                                }
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _46;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _49;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _30;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _33;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _21;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _24;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _12;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _15;
            scope 6 {
            }
        }
    }

    bb0: {
        _216 = const false;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &(*_3);
        _5 = bytemuck::core::slice::<impl [AccountInfo<'_>]>::iter(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = &mut _5;
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &mut (*_4);
        _9 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        _8 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _9) -> [return: bb3, unwind: bb107];
    }

    bb3: {
        StorageDead(_9);
        _11 = discriminant(_8);
        switchInt(move _11) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_15);
        _15 = ((_8 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _7 = _15;
        StorageDead(_15);
        _217 = discriminant(_8);
        StorageDead(_8);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &mut (*_4);
        _18 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _19) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_12);
        _12 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_14);
        _14 = move _12;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _14) -> [return: bb7, unwind: bb116];
    }

    bb7: {
        StorageDead(_14);
        StorageDead(_12);
        _243 = discriminant(_8);
        StorageDead(_8);
        goto -> bb99;
    }

    bb8: {
        StorageDead(_19);
        _17 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _18) -> [return: bb9, unwind: bb107];
    }

    bb9: {
        StorageDead(_18);
        _20 = discriminant(_17);
        switchInt(move _20) -> [0: bb10, 1: bb11, otherwise: bb5];
    }

    bb10: {
        StorageLive(_24);
        _24 = ((_17 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _16 = _24;
        StorageDead(_24);
        _219 = discriminant(_17);
        StorageDead(_17);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &mut (*_4);
        _27 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _28) -> [return: bb13, unwind continue];
    }

    bb11: {
        StorageLive(_21);
        _21 = move ((_17 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_23);
        _23 = move _21;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _23) -> [return: bb12, unwind: bb115];
    }

    bb12: {
        StorageDead(_23);
        StorageDead(_21);
        _241 = discriminant(_17);
        StorageDead(_17);
        goto -> bb98;
    }

    bb13: {
        StorageDead(_28);
        _26 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _27) -> [return: bb14, unwind: bb107];
    }

    bb14: {
        StorageDead(_27);
        _29 = discriminant(_26);
        switchInt(move _29) -> [0: bb15, 1: bb16, otherwise: bb5];
    }

    bb15: {
        StorageLive(_33);
        _33 = ((_26 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _25 = _33;
        StorageDead(_33);
        _221 = discriminant(_26);
        StorageDead(_26);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = &((*_7).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _43 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _44) -> [return: bb18, unwind continue];
    }

    bb16: {
        StorageLive(_30);
        _30 = move ((_26 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_32);
        _32 = move _30;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _32) -> [return: bb17, unwind: bb114];
    }

    bb17: {
        StorageDead(_32);
        StorageDead(_30);
        _239 = discriminant(_26);
        StorageDead(_26);
        goto -> bb97;
    }

    bb18: {
        _42 = &(*_43);
        StorageDead(_44);
        _41 = RefCell::<&mut [u8]>::borrow(move _42) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_42);
        _40 = &_41;
        _39 = &(*_40);
        _38 = <Ref<'_, &mut [u8]> as Deref>::deref(move _39) -> [return: bb20, unwind: bb106];
    }

    bb20: {
        _209 = deref_copy (*_38);
        _37 = &(*_209);
        StorageDead(_39);
        _36 = <LendingMarket as Pack>::unpack(move _37) -> [return: bb21, unwind: bb106];
    }

    bb21: {
        StorageDead(_37);
        _35 = <Result<LendingMarket, ProgramError> as Try>::branch(move _36) -> [return: bb22, unwind: bb106];
    }

    bb22: {
        StorageDead(_36);
        _45 = discriminant(_35);
        switchInt(move _45) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_49);
        _49 = move ((_35 as Continue).0: solend_sdk::state::LendingMarket);
        _34 = move _49;
        StorageDead(_49);
        _223 = discriminant(_35);
        drop(_41) -> [return: bb26, unwind: bb107];
    }

    bb24: {
        StorageLive(_46);
        _46 = move ((_35 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_48);
        _48 = move _46;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _48) -> [return: bb25, unwind: bb113];
    }

    bb25: {
        StorageDead(_48);
        StorageDead(_46);
        _237 = discriminant(_35);
        drop(_41) -> [return: bb95, unwind: bb107];
    }

    bb26: {
        StorageDead(_43);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_35);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = &((*_7).3: &solana_program::pubkey::Pubkey);
        StorageLive(_53);
        _53 = &_1;
        _51 = <&Pubkey as PartialEq>::ne(move _52, move _53) -> [return: bb27, unwind continue];
    }

    bb27: {
        switchInt(move _51) -> [0: bb35, otherwise: bb28];
    }

    bb28: {
        StorageDead(_53);
        StorageDead(_52);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _208 = const _;
        _65 = &(*_208);
        _64 = &(*_65);
        _63 = move _64 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_64);
        _62 = Arguments::<'_>::new_const(move _63) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_63);
        _61 = format(move _62) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_62);
        StorageDead(_65);
        _60 = move _61;
        StorageDead(_61);
        _59 = &_60;
        _58 = &(*_59);
        _57 = <String as Deref>::deref(move _58) -> [return: bb31, unwind: bb105];
    }

    bb31: {
        _56 = &(*_57);
        StorageDead(_58);
        _55 = solana_program::log::sol_log(move _56) -> [return: bb32, unwind: bb105];
    }

    bb32: {
        StorageDead(_56);
        drop(_60) -> [return: bb33, unwind: bb107];
    }

    bb33: {
        StorageDead(_60);
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_55);
        StorageLive(_67);
        StorageLive(_68);
        _68 = solend_sdk::error::LendingError::InvalidAccountOwner;
        _67 = <LendingError as Into<ProgramError>>::into(move _68) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_68);
        _0 = Result::<(), ProgramError>::Err(move _67);
        StorageDead(_67);
        StorageDead(_51);
        StorageDead(_50);
        goto -> bb96;
    }

    bb35: {
        StorageDead(_53);
        StorageDead(_52);
        _50 = const ();
        StorageDead(_51);
        StorageDead(_50);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        _72 = &(_34.2: solana_program::pubkey::Pubkey);
        _71 = &_72;
        StorageLive(_73);
        _73 = &((*_16).0: &solana_program::pubkey::Pubkey);
        _70 = <&Pubkey as PartialEq>::ne(move _71, move _73) -> [return: bb36, unwind continue];
    }

    bb36: {
        switchInt(move _70) -> [0: bb40, otherwise: bb37];
    }

    bb37: {
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _77 = const "Lending market owner does not match the lending market owner provided";
        _76 = &(*_77);
        _75 = solana_program::log::sol_log(move _76) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_76);
        StorageDead(_77);
        StorageDead(_75);
        StorageLive(_78);
        StorageLive(_79);
        _79 = InvalidMarketOwner;
        _78 = <LendingError as Into<ProgramError>>::into(move _79) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_79);
        _0 = Result::<(), ProgramError>::Err(move _78);
        StorageDead(_78);
        StorageDead(_70);
        StorageDead(_69);
        goto -> bb96;
    }

    bb40: {
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        _69 = const ();
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_80);
        StorageLive(_81);
        _81 = ((*_16).5: bool);
        switchInt(move _81) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _80 = const ();
        StorageDead(_81);
        StorageDead(_80);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _210 = deref_copy ((*_7).0: &solana_program::pubkey::Pubkey);
        _91 = &(*_210);
        _90 = <Pubkey as AsRef<[u8]>>::as_ref(move _91) -> [return: bb45, unwind continue];
    }

    bb42: {
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = const "Lending market owner provided must be a signer";
        _84 = &(*_85);
        _83 = solana_program::log::sol_log(move _84) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_84);
        StorageDead(_85);
        StorageDead(_83);
        StorageLive(_86);
        StorageLive(_87);
        _87 = InvalidSigner;
        _86 = <LendingError as Into<ProgramError>>::into(move _87) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_87);
        _0 = Result::<(), ProgramError>::Err(move _86);
        StorageDead(_86);
        StorageDead(_81);
        StorageDead(_80);
        goto -> bb96;
    }

    bb45: {
        StorageDead(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _94 = const b"MetaData";
        _93 = &(*_94);
        _92 = move _93 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_93);
        _89 = [move _90, move _92];
        StorageDead(_92);
        StorageDead(_90);
        _88 = &_89;
        StorageDead(_94);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = &(*_88);
        _98 = move _99 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_99);
        StorageLive(_100);
        _100 = &(*_1);
        _97 = Pubkey::find_program_address(move _98, move _100) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_100);
        StorageDead(_98);
        StorageLive(_95);
        _95 = (_97.0: solana_program::pubkey::Pubkey);
        StorageLive(_96);
        _96 = (_97.1: u8);
        StorageDead(_97);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        _103 = &_95;
        StorageLive(_104);
        _211 = deref_copy ((*_25).0: &solana_program::pubkey::Pubkey);
        _104 = &(*_211);
        _102 = <Pubkey as PartialEq>::ne(move _103, move _104) -> [return: bb47, unwind continue];
    }

    bb47: {
        switchInt(move _102) -> [0: bb51, otherwise: bb48];
    }

    bb48: {
        StorageDead(_104);
        StorageDead(_103);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        _108 = const "Provided metadata account does not match the expected derived address";
        _107 = &(*_108);
        _106 = solana_program::log::sol_log(move _107) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_107);
        StorageDead(_108);
        StorageDead(_106);
        StorageLive(_109);
        StorageLive(_110);
        _110 = InvalidAccountInput;
        _109 = <LendingError as Into<ProgramError>>::into(move _110) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_110);
        _0 = Result::<(), ProgramError>::Err(move _109);
        StorageDead(_109);
        StorageDead(_102);
        StorageDead(_101);
        goto -> bb94;
    }

    bb51: {
        StorageDead(_104);
        StorageDead(_103);
        _101 = const ();
        StorageDead(_102);
        StorageDead(_101);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        _113 = _96;
        StorageLive(_114);
        _114 = ((*_2).0: u8);
        _112 = Ne(move _113, move _114);
        switchInt(move _112) -> [0: bb53, otherwise: bb52];
    }

    bb52: {
        StorageDead(_114);
        StorageDead(_113);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        _118 = const "Provided bump seed does not match the expected derived bump seed";
        _117 = &(*_118);
        _116 = solana_program::log::sol_log(move _117) -> [return: bb54, unwind continue];
    }

    bb53: {
        StorageDead(_114);
        StorageDead(_113);
        _111 = const ();
        StorageDead(_112);
        StorageDead(_111);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _123 = &(*_25);
        _122 = AccountInfo::<'_>::data_is_empty(move _123) -> [return: bb56, unwind continue];
    }

    bb54: {
        StorageDead(_117);
        StorageDead(_118);
        StorageDead(_116);
        StorageLive(_119);
        StorageLive(_120);
        _120 = InvalidAmount;
        _119 = <LendingError as Into<ProgramError>>::into(move _120) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_120);
        _0 = Result::<(), ProgramError>::Err(move _119);
        StorageDead(_119);
        StorageDead(_112);
        StorageDead(_111);
        goto -> bb94;
    }

    bb56: {
        switchInt(move _122) -> [0: bb77, otherwise: bb57];
    }

    bb57: {
        StorageDead(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        _126 = const "Creating metadata account";
        _125 = &(*_126);
        _124 = solana_program::log::sol_log(move _125) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_125);
        StorageDead(_126);
        StorageDead(_124);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        _212 = deref_copy ((*_16).0: &solana_program::pubkey::Pubkey);
        _133 = &(*_212);
        StorageLive(_134);
        _213 = deref_copy ((*_25).0: &solana_program::pubkey::Pubkey);
        _134 = &(*_213);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _139 = <Rent as Sysvar>::get() -> [return: bb59, unwind continue];
    }

    bb59: {
        _138 = <Result<Rent, ProgramError> as Try>::branch(move _139) -> [return: bb60, unwind: bb107];
    }

    bb60: {
        _216 = const true;
        StorageDead(_139);
        _140 = discriminant(_138);
        switchInt(move _140) -> [0: bb61, 1: bb62, otherwise: bb5];
    }

    bb61: {
        StorageLive(_144);
        _144 = ((_138 as Continue).0: solana_program::rent::Rent);
        _137 = _144;
        StorageDead(_144);
        _136 = &_137;
        StorageLive(_145);
        _145 = std::mem::size_of::<LendingMarketMetadata>() -> [return: bb64, unwind: bb112];
    }

    bb62: {
        StorageLive(_141);
        _141 = move ((_138 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_143);
        _143 = move _141;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _143) -> [return: bb63, unwind: bb112];
    }

    bb63: {
        StorageDead(_143);
        StorageDead(_141);
        StorageDead(_136);
        StorageDead(_135);
        StorageDead(_134);
        StorageDead(_133);
        StorageDead(_130);
        StorageDead(_129);
        goto -> bb109;
    }

    bb64: {
        _135 = Rent::minimum_balance(move _136, move _145) -> [return: bb65, unwind: bb112];
    }

    bb65: {
        StorageDead(_145);
        StorageDead(_136);
        StorageLive(_146);
        StorageLive(_147);
        _147 = std::mem::size_of::<LendingMarketMetadata>() -> [return: bb66, unwind: bb112];
    }

    bb66: {
        _146 = move _147 as u64 (IntToInt);
        StorageDead(_147);
        StorageLive(_148);
        _148 = &(*_1);
        _132 = solana_program::system_instruction::create_account(move _133, move _134, move _135, move _146, move _148) -> [return: bb67, unwind: bb112];
    }

    bb67: {
        StorageDead(_148);
        StorageDead(_146);
        StorageDead(_135);
        StorageDead(_134);
        StorageDead(_133);
        _131 = &_132;
        _130 = &(*_131);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        _154 = &(*_16);
        _153 = <AccountInfo<'_> as Clone>::clone(move _154) -> [return: bb68, unwind: bb104];
    }

    bb68: {
        StorageDead(_154);
        StorageLive(_155);
        StorageLive(_156);
        _156 = &(*_25);
        _155 = <AccountInfo<'_> as Clone>::clone(move _156) -> [return: bb69, unwind: bb103];
    }

    bb69: {
        StorageDead(_156);
        _152 = [move _153, move _155];
        StorageDead(_155);
        StorageDead(_153);
        _151 = &_152;
        _150 = &(*_151);
        _149 = move _150 as &[solana_program::account_info::AccountInfo<'_>] (PointerCoercion(Unsize));
        StorageDead(_150);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        _214 = deref_copy ((*_7).0: &solana_program::pubkey::Pubkey);
        _167 = &(*_214);
        _166 = <Pubkey as AsRef<[u8]>>::as_ref(move _167) -> [return: bb70, unwind: bb102];
    }

    bb70: {
        _165 = &(*_166);
        StorageDead(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        _170 = const b"MetaData";
        _169 = &(*_170);
        _168 = move _169 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_169);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        _175 = _96;
        _174 = [move _175];
        StorageDead(_175);
        _173 = &_174;
        _172 = &(*_173);
        _171 = move _172 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_172);
        _164 = [move _165, move _168, move _171];
        StorageDead(_171);
        StorageDead(_168);
        StorageDead(_165);
        _163 = &_164;
        _162 = &(*_163);
        _161 = move _162 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_162);
        _160 = [move _161];
        StorageDead(_161);
        _159 = &_160;
        _158 = &(*_159);
        _157 = move _158 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_158);
        _129 = invoke_signed(move _130, move _149, move _157) -> [return: bb71, unwind: bb102];
    }

    bb71: {
        StorageDead(_157);
        StorageDead(_149);
        StorageDead(_130);
        _128 = <Result<(), ProgramError> as Try>::branch(move _129) -> [return: bb72, unwind: bb102];
    }

    bb72: {
        StorageDead(_129);
        _176 = discriminant(_128);
        switchInt(move _176) -> [0: bb73, 1: bb74, otherwise: bb5];
    }

    bb73: {
        StorageLive(_180);
        _180 = ((_128 as Continue).0: ());
        _127 = _180;
        StorageDead(_180);
        _225 = discriminant(_128);
        StorageDead(_174);
        StorageDead(_173);
        StorageDead(_170);
        StorageDead(_166);
        StorageDead(_164);
        StorageDead(_163);
        StorageDead(_160);
        StorageDead(_159);
        drop(_152) -> [return: bb76, unwind: bb104];
    }

    bb74: {
        StorageLive(_177);
        _177 = move ((_128 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_179);
        _179 = move _177;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _179) -> [return: bb75, unwind: bb111];
    }

    bb75: {
        StorageDead(_179);
        StorageDead(_177);
        _233 = discriminant(_128);
        StorageDead(_174);
        StorageDead(_173);
        StorageDead(_170);
        StorageDead(_166);
        StorageDead(_164);
        StorageDead(_163);
        StorageDead(_160);
        StorageDead(_159);
        drop(_152) -> [return: bb93, unwind: bb104];
    }

    bb76: {
        StorageDead(_152);
        StorageDead(_151);
        drop(_132) -> [return: bb108, unwind: bb112];
    }

    bb77: {
        StorageDead(_123);
        _121 = const ();
        goto -> bb78;
    }

    bb78: {
        StorageDead(_122);
        StorageDead(_121);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        _183 = &((*_25).3: &solana_program::pubkey::Pubkey);
        StorageLive(_184);
        _184 = &_1;
        _182 = <&Pubkey as PartialEq>::ne(move _183, move _184) -> [return: bb79, unwind continue];
    }

    bb79: {
        switchInt(move _182) -> [0: bb83, otherwise: bb80];
    }

    bb80: {
        StorageDead(_184);
        StorageDead(_183);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        _188 = const "Metadata provided is not owned by the lending program";
        _187 = &(*_188);
        _186 = solana_program::log::sol_log(move _187) -> [return: bb81, unwind continue];
    }

    bb81: {
        StorageDead(_187);
        StorageDead(_188);
        StorageDead(_186);
        StorageLive(_189);
        StorageLive(_190);
        _190 = solend_sdk::error::LendingError::InvalidAccountOwner;
        _189 = <LendingError as Into<ProgramError>>::into(move _190) -> [return: bb82, unwind continue];
    }

    bb82: {
        StorageDead(_190);
        _0 = Result::<(), ProgramError>::Err(move _189);
        StorageDead(_189);
        StorageDead(_182);
        StorageDead(_181);
        goto -> bb94;
    }

    bb83: {
        StorageDead(_184);
        StorageDead(_183);
        _181 = const ();
        StorageDead(_182);
        StorageDead(_181);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        _194 = &(*_25);
        _193 = AccountInfo::<'_>::try_borrow_mut_data(move _194) -> [return: bb84, unwind continue];
    }

    bb84: {
        StorageDead(_194);
        _192 = <Result<RefMut<'_, &mut [u8]>, ProgramError> as Try>::branch(move _193) -> [return: bb85, unwind: bb107];
    }

    bb85: {
        StorageDead(_193);
        _195 = discriminant(_192);
        switchInt(move _195) -> [0: bb86, 1: bb87, otherwise: bb5];
    }

    bb86: {
        StorageLive(_199);
        _199 = move ((_192 as Continue).0: std::cell::RefMut<'_, &mut [u8]>);
        _191 = move _199;
        StorageDead(_199);
        _229 = discriminant(_192);
        StorageDead(_192);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        _203 = &mut _191;
        _202 = <RefMut<'_, &mut [u8]> as DerefMut>::deref_mut(move _203) -> [return: bb89, unwind: bb101];
    }

    bb87: {
        StorageLive(_196);
        _196 = move ((_192 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_198);
        _198 = move _196;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _198) -> [return: bb88, unwind: bb110];
    }

    bb88: {
        StorageDead(_198);
        StorageDead(_196);
        _231 = discriminant(_192);
        StorageDead(_192);
        StorageDead(_191);
        goto -> bb94;
    }

    bb89: {
        _215 = deref_copy (*_202);
        _201 = &mut (*_215);
        StorageDead(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        _206 = &(*_2);
        _205 = bytes_of::<LendingMarketMetadata>(move _206) -> [return: bb90, unwind: bb101];
    }

    bb90: {
        _204 = &(*_205);
        StorageDead(_206);
        _200 = bytemuck::core::slice::<impl [u8]>::copy_from_slice(move _201, move _204) -> [return: bb91, unwind: bb101];
    }

    bb91: {
        StorageDead(_204);
        StorageDead(_201);
        StorageDead(_205);
        StorageDead(_202);
        StorageDead(_200);
        StorageLive(_207);
        _207 = ();
        _0 = Result::<(), ProgramError>::Ok(move _207);
        StorageDead(_207);
        drop(_191) -> [return: bb92, unwind: bb107];
    }

    bb92: {
        StorageDead(_191);
        StorageDead(_96);
        StorageDead(_95);
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_34);
        StorageDead(_25);
        StorageDead(_16);
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb100;
    }

    bb93: {
        StorageDead(_152);
        StorageDead(_151);
        drop(_132) -> [return: bb109, unwind: bb112];
    }

    bb94: {
        StorageDead(_96);
        StorageDead(_95);
        StorageDead(_89);
        StorageDead(_88);
        goto -> bb96;
    }

    bb95: {
        StorageDead(_43);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_35);
        goto -> bb96;
    }

    bb96: {
        StorageDead(_34);
        goto -> bb97;
    }

    bb97: {
        StorageDead(_25);
        goto -> bb98;
    }

    bb98: {
        StorageDead(_16);
        goto -> bb99;
    }

    bb99: {
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb100;
    }

    bb100: {
        return;
    }

    bb101 (cleanup): {
        drop(_191) -> [return: bb107, unwind terminate(cleanup)];
    }

    bb102 (cleanup): {
        drop(_152) -> [return: bb104, unwind terminate(cleanup)];
    }

    bb103 (cleanup): {
        drop(_153) -> [return: bb104, unwind terminate(cleanup)];
    }

    bb104 (cleanup): {
        drop(_132) -> [return: bb112, unwind terminate(cleanup)];
    }

    bb105 (cleanup): {
        drop(_60) -> [return: bb107, unwind terminate(cleanup)];
    }

    bb106 (cleanup): {
        drop(_41) -> [return: bb107, unwind terminate(cleanup)];
    }

    bb107 (cleanup): {
        resume;
    }

    bb108: {
        _227 = discriminant(_138);
        _216 = const false;
        StorageDead(_138);
        StorageDead(_137);
        StorageDead(_132);
        StorageDead(_131);
        StorageDead(_128);
        StorageDead(_127);
        _121 = const ();
        goto -> bb78;
    }

    bb109: {
        _235 = discriminant(_138);
        _216 = const false;
        StorageDead(_138);
        StorageDead(_137);
        StorageDead(_132);
        StorageDead(_131);
        StorageDead(_128);
        StorageDead(_127);
        StorageDead(_122);
        StorageDead(_121);
        goto -> bb94;
    }

    bb110 (cleanup): {
        _245 = discriminant(_192);
        goto -> bb107;
    }

    bb111 (cleanup): {
        _246 = discriminant(_128);
        goto -> bb102;
    }

    bb112 (cleanup): {
        _247 = discriminant(_138);
        goto -> bb107;
    }

    bb113 (cleanup): {
        _248 = discriminant(_35);
        goto -> bb106;
    }

    bb114 (cleanup): {
        _249 = discriminant(_26);
        goto -> bb107;
    }

    bb115 (cleanup): {
        _250 = discriminant(_17);
        goto -> bb107;
    }

    bb116 (cleanup): {
        _251 = discriminant(_8);
        goto -> bb107;
    }
}

alloc4 (size: 8, align: 1) {
    4d 65 74 61 44 61 74 61                         │ MetaData
}

alloc3 (size: 8, align: 1) {
    4d 65 74 61 44 61 74 61                         │ MetaData
}
