// MIR for `process_set_lending_market_owner_and_config` before PreCodegen

fn process_set_lending_market_owner_and_config(_1: &Pubkey, _2: Pubkey, _3: RateLimiterConfig, _4: Option<Pubkey>, _5: Pubkey, _6: &[AccountInfo<'_>]) -> Result<(), ProgramError> {
    debug program_id => _1;
    debug new_owner => _2;
    debug rate_limiter_config => _3;
    debug whitelisted_liquidator => _4;
    debug risk_authority => _5;
    debug accounts => _6;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _7: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _8: std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _9: &[solana_program::account_info::AccountInfo<'_>];
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _12: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _13: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _14: isize;
    let mut _16: !;
    let mut _17: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _21: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _22: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _23: isize;
    let mut _25: !;
    let mut _26: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::state::LendingMarket>;
    let mut _30: std::result::Result<solend_sdk::state::LendingMarket, solana_program::program_error::ProgramError>;
    let mut _31: &[u8];
    let _32: &&mut [u8];
    let mut _33: &std::cell::Ref<'_, &mut [u8]>;
    let _34: &std::cell::Ref<'_, &mut [u8]>;
    let _35: std::cell::Ref<'_, &mut [u8]>;
    let mut _36: &std::cell::RefCell<&mut [u8]>;
    let _37: &std::cell::RefCell<&mut [u8]>;
    let mut _38: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _39: isize;
    let mut _41: !;
    let mut _42: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _44: ();
    let mut _45: bool;
    let mut _46: &&solana_program::pubkey::Pubkey;
    let mut _47: &&solana_program::pubkey::Pubkey;
    let mut _48: !;
    let _49: ();
    let mut _50: &str;
    let _51: &str;
    let mut _52: solana_program::program_error::ProgramError;
    let mut _53: solend_sdk::error::LendingError;
    let _54: ();
    let mut _55: bool;
    let mut _56: !;
    let _57: ();
    let mut _58: &str;
    let _59: &str;
    let mut _60: solana_program::program_error::ProgramError;
    let mut _61: solend_sdk::error::LendingError;
    let _62: ();
    let mut _63: bool;
    let mut _64: &&solana_program::pubkey::Pubkey;
    let mut _65: &&solana_program::pubkey::Pubkey;
    let _66: &solana_program::pubkey::Pubkey;
    let mut _67: solana_program::pubkey::Pubkey;
    let mut _68: solana_program::pubkey::Pubkey;
    let _69: ();
    let mut _70: bool;
    let mut _71: &solend_sdk::state::RateLimiterConfig;
    let mut _72: &solend_sdk::state::RateLimiterConfig;
    let mut _73: solend_sdk::state::RateLimiter;
    let mut _74: solend_sdk::state::RateLimiterConfig;
    let mut _75: u64;
    let mut _76: solana_program::clock::Clock;
    let mut _77: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solana_program::clock::Clock>;
    let mut _78: std::result::Result<solana_program::clock::Clock, solana_program::program_error::ProgramError>;
    let mut _79: isize;
    let mut _81: !;
    let mut _82: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _84: std::option::Option<solana_program::pubkey::Pubkey>;
    let mut _85: bool;
    let mut _86: &&solana_program::pubkey::Pubkey;
    let mut _87: &&solana_program::pubkey::Pubkey;
    let _88: &solana_program::pubkey::Pubkey;
    let mut _89: bool;
    let mut _90: &solend_sdk::state::RateLimiterConfig;
    let mut _91: &solend_sdk::state::RateLimiterConfig;
    let mut _92: bool;
    let mut _93: u64;
    let mut _94: bool;
    let mut _95: u64;
    let mut _96: solend_sdk::state::RateLimiter;
    let mut _97: solend_sdk::state::RateLimiterConfig;
    let mut _98: u64;
    let mut _99: solana_program::clock::Clock;
    let mut _100: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solana_program::clock::Clock>;
    let mut _101: std::result::Result<solana_program::clock::Clock, solana_program::program_error::ProgramError>;
    let mut _102: isize;
    let mut _104: !;
    let mut _105: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _107: !;
    let _108: ();
    let mut _109: &str;
    let _110: &str;
    let mut _111: solana_program::program_error::ProgramError;
    let mut _112: solend_sdk::error::LendingError;
    let _113: ();
    let mut _114: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _115: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _116: solend_sdk::state::LendingMarket;
    let mut _117: &mut [u8];
    let mut _118: &mut &mut [u8];
    let mut _119: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _120: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _121: std::cell::RefMut<'_, &mut [u8]>;
    let mut _122: &std::cell::RefCell<&mut [u8]>;
    let _123: &std::cell::RefCell<&mut [u8]>;
    let mut _124: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _125: isize;
    let mut _127: !;
    let mut _128: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _130: ();
    let mut _131: &mut [u8];
    let mut _132: &mut [u8];
    let mut _133: bool;
    let mut _134: bool;
    let mut _135: bool;
    let mut _136: bool;
    let mut _137: isize;
    let mut _138: isize;
    let mut _139: isize;
    let mut _140: isize;
    let mut _141: isize;
    let mut _142: isize;
    let mut _143: isize;
    let mut _144: isize;
    let mut _145: isize;
    let mut _146: isize;
    let mut _147: isize;
    let mut _148: isize;
    let mut _149: isize;
    let mut _150: isize;
    let mut _151: isize;
    let mut _152: isize;
    let mut _153: isize;
    let mut _154: isize;
    let mut _155: isize;
    let mut _156: isize;
    let mut _157: isize;
    let mut _158: isize;
    let mut _159: isize;
    let mut _160: isize;
    let mut _161: isize;
    let mut _162: isize;
    let mut _163: isize;
    let mut _164: isize;
    let mut _165: isize;
    let mut _166: isize;
    scope 1 {
        debug account_info_iter => _7;
        let _10: &solana_program::account_info::AccountInfo<'_>;
        let _15: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _18: &solana_program::account_info::AccountInfo<'_>;
        scope 2 {
            debug lending_market_info => _10;
            let _19: &solana_program::account_info::AccountInfo<'_>;
            let _24: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
            let _27: &solana_program::account_info::AccountInfo<'_>;
            scope 7 {
                debug market_change_authority_info => _19;
                let mut _28: solend_sdk::state::LendingMarket;
                let _40: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                let _43: solend_sdk::state::LendingMarket;
                scope 12 {
                    debug lending_market => _28;
                    let _80: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                    let _83: solana_program::clock::Clock;
                    let _103: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                    let _106: solana_program::clock::Clock;
                    let _126: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                    let _129: ();
                    scope 17 {
                        debug residual => _80;
                        scope 18 {
                        }
                    }
                    scope 19 {
                        debug val => _83;
                        scope 20 {
                        }
                    }
                    scope 21 {
                        debug residual => _103;
                        scope 22 {
                        }
                    }
                    scope 23 {
                        debug val => _106;
                        scope 24 {
                        }
                    }
                    scope 25 {
                        debug residual => _126;
                        scope 26 {
                        }
                    }
                    scope 27 {
                        debug val => _129;
                        scope 28 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _40;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _43;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _24;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _27;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _15;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _18;
            scope 6 {
            }
        }
    }

    bb0: {
        _136 = const false;
        _135 = const false;
        _134 = const false;
        _133 = const false;
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &(*_6);
        _8 = bytemuck::core::slice::<impl [AccountInfo<'_>]>::iter(move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        _7 = &mut _8;
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &mut (*_7);
        _12 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _13) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_13);
        _11 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _12) -> [return: bb3, unwind: bb84];
    }

    bb3: {
        StorageDead(_12);
        _14 = discriminant(_11);
        switchInt(move _14) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_18);
        _18 = ((_11 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _10 = _18;
        StorageDead(_18);
        _137 = discriminant(_11);
        StorageDead(_11);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = &mut (*_7);
        _21 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _22) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_15);
        _15 = move ((_11 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_17);
        _17 = move _15;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _17) -> [return: bb7, unwind: bb90];
    }

    bb7: {
        StorageDead(_17);
        StorageDead(_15);
        _159 = discriminant(_11);
        StorageDead(_11);
        goto -> bb80;
    }

    bb8: {
        StorageDead(_22);
        _20 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _21) -> [return: bb9, unwind: bb84];
    }

    bb9: {
        StorageDead(_21);
        _23 = discriminant(_20);
        switchInt(move _23) -> [0: bb10, 1: bb11, otherwise: bb5];
    }

    bb10: {
        StorageLive(_27);
        _27 = ((_20 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _19 = _27;
        StorageDead(_27);
        _139 = discriminant(_20);
        StorageDead(_20);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = &((*_10).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _37 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _38) -> [return: bb13, unwind continue];
    }

    bb11: {
        StorageLive(_24);
        _24 = move ((_20 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_26);
        _26 = move _24;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _26) -> [return: bb12, unwind: bb89];
    }

    bb12: {
        StorageDead(_26);
        StorageDead(_24);
        _157 = discriminant(_20);
        StorageDead(_20);
        goto -> bb79;
    }

    bb13: {
        _36 = &(*_37);
        StorageDead(_38);
        _35 = RefCell::<&mut [u8]>::borrow(move _36) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_36);
        _34 = &_35;
        _33 = &(*_34);
        _32 = <Ref<'_, &mut [u8]> as Deref>::deref(move _33) -> [return: bb15, unwind: bb83];
    }

    bb15: {
        _131 = deref_copy (*_32);
        _31 = &(*_131);
        StorageDead(_33);
        _30 = <LendingMarket as Pack>::unpack(move _31) -> [return: bb16, unwind: bb83];
    }

    bb16: {
        StorageDead(_31);
        _29 = <Result<LendingMarket, ProgramError> as Try>::branch(move _30) -> [return: bb17, unwind: bb83];
    }

    bb17: {
        StorageDead(_30);
        _39 = discriminant(_29);
        switchInt(move _39) -> [0: bb18, 1: bb19, otherwise: bb5];
    }

    bb18: {
        StorageLive(_43);
        _43 = move ((_29 as Continue).0: solend_sdk::state::LendingMarket);
        _28 = move _43;
        StorageDead(_43);
        _141 = discriminant(_29);
        drop(_35) -> [return: bb21, unwind: bb84];
    }

    bb19: {
        StorageLive(_40);
        _40 = move ((_29 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_42);
        _42 = move _40;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _42) -> [return: bb20, unwind: bb88];
    }

    bb20: {
        StorageDead(_42);
        StorageDead(_40);
        _155 = discriminant(_29);
        drop(_35) -> [return: bb77, unwind: bb84];
    }

    bb21: {
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_32);
        StorageDead(_29);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = &((*_10).3: &solana_program::pubkey::Pubkey);
        StorageLive(_47);
        _47 = &_1;
        _45 = <&Pubkey as PartialEq>::ne(move _46, move _47) -> [return: bb22, unwind continue];
    }

    bb22: {
        switchInt(move _45) -> [0: bb26, otherwise: bb23];
    }

    bb23: {
        StorageDead(_47);
        StorageDead(_46);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = const "Lending market provided is not owned by the lending program";
        _50 = &(*_51);
        _49 = solana_program::log::sol_log(move _50) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_50);
        StorageDead(_51);
        StorageDead(_49);
        StorageLive(_52);
        StorageLive(_53);
        _53 = solend_sdk::error::LendingError::InvalidAccountOwner;
        _52 = <LendingError as Into<ProgramError>>::into(move _53) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_53);
        _0 = Result::<(), ProgramError>::Err(move _52);
        StorageDead(_52);
        StorageDead(_45);
        StorageDead(_44);
        goto -> bb78;
    }

    bb26: {
        StorageDead(_47);
        StorageDead(_46);
        _44 = const ();
        StorageDead(_45);
        StorageDead(_44);
        StorageLive(_54);
        StorageLive(_55);
        _55 = ((*_19).5: bool);
        switchInt(move _55) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _54 = const ();
        StorageDead(_55);
        StorageDead(_54);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = &((*_19).0: &solana_program::pubkey::Pubkey);
        StorageLive(_65);
        StorageLive(_66);
        _66 = &(_28.2: solana_program::pubkey::Pubkey);
        _65 = &_66;
        _63 = <&Pubkey as PartialEq>::eq(move _64, move _65) -> [return: bb31, unwind continue];
    }

    bb28: {
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _59 = const "Lending market owner or risk authority provided must be a signer";
        _58 = &(*_59);
        _57 = solana_program::log::sol_log(move _58) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_58);
        StorageDead(_59);
        StorageDead(_57);
        StorageLive(_60);
        StorageLive(_61);
        _61 = InvalidSigner;
        _60 = <LendingError as Into<ProgramError>>::into(move _61) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_61);
        _0 = Result::<(), ProgramError>::Err(move _60);
        StorageDead(_60);
        StorageDead(_55);
        StorageDead(_54);
        goto -> bb78;
    }

    bb31: {
        switchInt(move _63) -> [0: bb43, otherwise: bb32];
    }

    bb32: {
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_64);
        StorageLive(_67);
        _67 = _2;
        (_28.2: solana_program::pubkey::Pubkey) = move _67;
        StorageDead(_67);
        StorageLive(_68);
        _68 = _5;
        (_28.9: solana_program::pubkey::Pubkey) = move _68;
        StorageDead(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = &_3;
        StorageLive(_72);
        _72 = &((_28.7: solend_sdk::state::RateLimiter).0: solend_sdk::state::RateLimiterConfig);
        _70 = <RateLimiterConfig as PartialEq>::ne(move _71, move _72) -> [return: bb33, unwind continue];
    }

    bb33: {
        switchInt(move _70) -> [0: bb41, otherwise: bb34];
    }

    bb34: {
        StorageDead(_72);
        StorageDead(_71);
        StorageLive(_73);
        StorageLive(_74);
        _74 = _3;
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = <Clock as Sysvar>::get() -> [return: bb35, unwind continue];
    }

    bb35: {
        _77 = <Result<Clock, ProgramError> as Try>::branch(move _78) -> [return: bb36, unwind: bb84];
    }

    bb36: {
        _135 = const true;
        _136 = const true;
        StorageDead(_78);
        _79 = discriminant(_77);
        switchInt(move _79) -> [0: bb37, 1: bb38, otherwise: bb5];
    }

    bb37: {
        StorageLive(_83);
        _83 = move ((_77 as Continue).0: solana_program::clock::Clock);
        _76 = move _83;
        StorageDead(_83);
        _75 = (_76.0: u64);
        _73 = RateLimiter::new(move _74, move _75) -> [return: bb40, unwind: bb87];
    }

    bb38: {
        StorageLive(_80);
        _80 = move ((_77 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_82);
        _82 = move _80;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _82) -> [return: bb39, unwind: bb87];
    }

    bb39: {
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_75);
        StorageDead(_74);
        StorageDead(_73);
        _153 = discriminant(_77);
        _135 = const false;
        _136 = const false;
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_70);
        StorageDead(_69);
        goto -> bb76;
    }

    bb40: {
        StorageDead(_75);
        StorageDead(_74);
        (_28.7: solend_sdk::state::RateLimiter) = move _73;
        StorageDead(_73);
        _143 = discriminant(_77);
        _135 = const false;
        _136 = const false;
        StorageDead(_77);
        StorageDead(_76);
        _69 = const ();
        goto -> bb42;
    }

    bb41: {
        StorageDead(_72);
        StorageDead(_71);
        _69 = const ();
        goto -> bb42;
    }

    bb42: {
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_84);
        _84 = _4;
        (_28.8: std::option::Option<solana_program::pubkey::Pubkey>) = move _84;
        StorageDead(_84);
        _62 = const ();
        goto -> bb64;
    }

    bb43: {
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_64);
        StorageLive(_85);
        StorageLive(_86);
        _86 = &((*_19).0: &solana_program::pubkey::Pubkey);
        StorageLive(_87);
        StorageLive(_88);
        _88 = &(_28.9: solana_program::pubkey::Pubkey);
        _87 = &_88;
        _85 = <&Pubkey as PartialEq>::eq(move _86, move _87) -> [return: bb44, unwind continue];
    }

    bb44: {
        switchInt(move _85) -> [0: bb61, otherwise: bb45];
    }

    bb45: {
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        StorageLive(_89);
        StorageLive(_90);
        _90 = &_3;
        StorageLive(_91);
        _91 = &((_28.7: solend_sdk::state::RateLimiter).0: solend_sdk::state::RateLimiterConfig);
        _89 = <RateLimiterConfig as PartialEq>::ne(move _90, move _91) -> [return: bb46, unwind continue];
    }

    bb46: {
        switchInt(move _89) -> [0: bb58, otherwise: bb47];
    }

    bb47: {
        StorageDead(_91);
        StorageDead(_90);
        StorageLive(_92);
        StorageLive(_93);
        _93 = (_3.0: u64);
        _92 = Gt(move _93, const 0_u64);
        switchInt(move _92) -> [0: bb57, otherwise: bb48];
    }

    bb48: {
        StorageDead(_93);
        StorageLive(_94);
        StorageLive(_95);
        _95 = (_3.1: u64);
        _94 = Eq(move _95, const 0_u64);
        switchInt(move _94) -> [0: bb56, otherwise: bb49];
    }

    bb49: {
        StorageDead(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = _3;
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _101 = <Clock as Sysvar>::get() -> [return: bb50, unwind continue];
    }

    bb50: {
        _100 = <Result<Clock, ProgramError> as Try>::branch(move _101) -> [return: bb51, unwind: bb84];
    }

    bb51: {
        _133 = const true;
        _134 = const true;
        StorageDead(_101);
        _102 = discriminant(_100);
        switchInt(move _102) -> [0: bb52, 1: bb53, otherwise: bb5];
    }

    bb52: {
        StorageLive(_106);
        _106 = move ((_100 as Continue).0: solana_program::clock::Clock);
        _99 = move _106;
        StorageDead(_106);
        _98 = (_99.0: u64);
        _96 = RateLimiter::new(move _97, move _98) -> [return: bb55, unwind: bb86];
    }

    bb53: {
        StorageLive(_103);
        _103 = move ((_100 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_105);
        _105 = move _103;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _105) -> [return: bb54, unwind: bb86];
    }

    bb54: {
        StorageDead(_105);
        StorageDead(_103);
        StorageDead(_98);
        StorageDead(_97);
        StorageDead(_96);
        _151 = discriminant(_100);
        _133 = const false;
        _134 = const false;
        StorageDead(_100);
        StorageDead(_99);
        StorageDead(_94);
        StorageDead(_92);
        StorageDead(_89);
        goto -> bb75;
    }

    bb55: {
        StorageDead(_98);
        StorageDead(_97);
        (_28.7: solend_sdk::state::RateLimiter) = move _96;
        StorageDead(_96);
        _145 = discriminant(_100);
        _133 = const false;
        _134 = const false;
        StorageDead(_100);
        StorageDead(_99);
        _62 = const ();
        goto -> bb60;
    }

    bb56: {
        StorageDead(_95);
        goto -> bb59;
    }

    bb57: {
        StorageDead(_93);
        goto -> bb59;
    }

    bb58: {
        StorageDead(_91);
        StorageDead(_90);
        goto -> bb59;
    }

    bb59: {
        _62 = const ();
        goto -> bb60;
    }

    bb60: {
        StorageDead(_94);
        StorageDead(_92);
        StorageDead(_89);
        StorageDead(_85);
        goto -> bb64;
    }

    bb61: {
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _110 = const "Signer must be the lending market owner or risk authority";
        _109 = &(*_110);
        _108 = solana_program::log::sol_log(move _109) -> [return: bb62, unwind continue];
    }

    bb62: {
        StorageDead(_109);
        StorageDead(_110);
        StorageDead(_108);
        StorageLive(_111);
        StorageLive(_112);
        _112 = InvalidMarketOwner;
        _111 = <LendingError as Into<ProgramError>>::into(move _112) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_112);
        _0 = Result::<(), ProgramError>::Err(move _111);
        StorageDead(_111);
        goto -> bb75;
    }

    bb64: {
        StorageDead(_63);
        StorageDead(_62);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        _116 = move _28;
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        _124 = &((*_10).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _123 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _124) -> [return: bb65, unwind continue];
    }

    bb65: {
        _122 = &(*_123);
        StorageDead(_124);
        _121 = RefCell::<&mut [u8]>::borrow_mut(move _122) -> [return: bb66, unwind continue];
    }

    bb66: {
        StorageDead(_122);
        _120 = &mut _121;
        _119 = &mut (*_120);
        _118 = <RefMut<'_, &mut [u8]> as DerefMut>::deref_mut(move _119) -> [return: bb67, unwind: bb82];
    }

    bb67: {
        _132 = deref_copy (*_118);
        _117 = &mut (*_132);
        StorageDead(_119);
        _115 = <LendingMarket as Pack>::pack(move _116, move _117) -> [return: bb68, unwind: bb82];
    }

    bb68: {
        StorageDead(_117);
        StorageDead(_116);
        _114 = <Result<(), ProgramError> as Try>::branch(move _115) -> [return: bb69, unwind: bb82];
    }

    bb69: {
        StorageDead(_115);
        _125 = discriminant(_114);
        switchInt(move _125) -> [0: bb70, 1: bb71, otherwise: bb5];
    }

    bb70: {
        StorageLive(_129);
        _129 = ((_114 as Continue).0: ());
        _113 = _129;
        StorageDead(_129);
        _147 = discriminant(_114);
        drop(_121) -> [return: bb73, unwind: bb84];
    }

    bb71: {
        StorageLive(_126);
        _126 = move ((_114 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_128);
        _128 = move _126;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _128) -> [return: bb72, unwind: bb85];
    }

    bb72: {
        StorageDead(_128);
        StorageDead(_126);
        _149 = discriminant(_114);
        drop(_121) -> [return: bb74, unwind: bb84];
    }

    bb73: {
        StorageDead(_123);
        StorageDead(_121);
        StorageDead(_120);
        StorageDead(_118);
        StorageDead(_114);
        StorageDead(_113);
        StorageLive(_130);
        _130 = ();
        _0 = Result::<(), ProgramError>::Ok(move _130);
        StorageDead(_130);
        StorageDead(_28);
        StorageDead(_19);
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb81;
    }

    bb74: {
        StorageDead(_123);
        StorageDead(_121);
        StorageDead(_120);
        StorageDead(_118);
        StorageDead(_114);
        StorageDead(_113);
        goto -> bb78;
    }

    bb75: {
        StorageDead(_85);
        goto -> bb76;
    }

    bb76: {
        StorageDead(_63);
        StorageDead(_62);
        goto -> bb78;
    }

    bb77: {
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_32);
        StorageDead(_29);
        goto -> bb78;
    }

    bb78: {
        StorageDead(_28);
        goto -> bb79;
    }

    bb79: {
        StorageDead(_19);
        goto -> bb80;
    }

    bb80: {
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb81;
    }

    bb81: {
        return;
    }

    bb82 (cleanup): {
        drop(_121) -> [return: bb84, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        drop(_35) -> [return: bb84, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        resume;
    }

    bb85 (cleanup): {
        _161 = discriminant(_114);
        goto -> bb82;
    }

    bb86 (cleanup): {
        _162 = discriminant(_100);
        goto -> bb84;
    }

    bb87 (cleanup): {
        _163 = discriminant(_77);
        goto -> bb84;
    }

    bb88 (cleanup): {
        _164 = discriminant(_29);
        goto -> bb83;
    }

    bb89 (cleanup): {
        _165 = discriminant(_20);
        goto -> bb84;
    }

    bb90 (cleanup): {
        _166 = discriminant(_11);
        goto -> bb84;
    }
}
