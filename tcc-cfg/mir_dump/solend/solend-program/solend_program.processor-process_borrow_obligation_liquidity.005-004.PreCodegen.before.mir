// MIR for `process_borrow_obligation_liquidity` before PreCodegen

fn process_borrow_obligation_liquidity(_1: &Pubkey, _2: u64, _3: &[AccountInfo<'_>]) -> Result<(), ProgramError> {
    debug program_id => _1;
    debug liquidity_amount => _2;
    debug accounts => _3;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _4: ();
    let mut _5: bool;
    let mut _6: u64;
    let mut _7: !;
    let _8: ();
    let mut _9: &str;
    let _10: &str;
    let mut _11: solana_program::program_error::ProgramError;
    let mut _12: solend_sdk::error::LendingError;
    let _13: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _14: std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _15: &[solana_program::account_info::AccountInfo<'_>];
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _18: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _19: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _20: isize;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _27: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _28: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _29: isize;
    let mut _31: !;
    let mut _32: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _36: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _37: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _38: isize;
    let mut _40: !;
    let mut _41: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _44: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _45: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _46: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _47: isize;
    let mut _49: !;
    let mut _50: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _53: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _54: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _55: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _56: isize;
    let mut _58: !;
    let mut _59: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _62: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _63: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _64: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _65: isize;
    let mut _67: !;
    let mut _68: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _71: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _72: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _73: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _74: isize;
    let mut _76: !;
    let mut _77: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _80: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _81: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _82: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _83: isize;
    let mut _85: !;
    let mut _86: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _89: solana_program::clock::Clock;
    let mut _90: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solana_program::clock::Clock>;
    let mut _91: std::result::Result<solana_program::clock::Clock, solana_program::program_error::ProgramError>;
    let mut _92: isize;
    let mut _94: !;
    let mut _95: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _98: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _99: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _100: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _101: isize;
    let mut _103: !;
    let mut _104: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _107: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::state::LendingMarket>;
    let mut _108: std::result::Result<solend_sdk::state::LendingMarket, solana_program::program_error::ProgramError>;
    let mut _109: &[u8];
    let _110: &&mut [u8];
    let mut _111: &std::cell::Ref<'_, &mut [u8]>;
    let _112: &std::cell::Ref<'_, &mut [u8]>;
    let _113: std::cell::Ref<'_, &mut [u8]>;
    let mut _114: &std::cell::RefCell<&mut [u8]>;
    let _115: &std::cell::RefCell<&mut [u8]>;
    let mut _116: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _117: isize;
    let mut _119: !;
    let mut _120: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _122: ();
    let mut _123: bool;
    let mut _124: &&solana_program::pubkey::Pubkey;
    let mut _125: &&solana_program::pubkey::Pubkey;
    let mut _126: !;
    let _127: ();
    let mut _128: &str;
    let _129: &str;
    let mut _130: solana_program::program_error::ProgramError;
    let mut _131: solend_sdk::error::LendingError;
    let _132: ();
    let mut _133: bool;
    let mut _134: &&solana_program::pubkey::Pubkey;
    let _135: &solana_program::pubkey::Pubkey;
    let mut _136: &&solana_program::pubkey::Pubkey;
    let mut _137: !;
    let _138: ();
    let mut _139: &str;
    let _140: &str;
    let mut _141: solana_program::program_error::ProgramError;
    let mut _142: solend_sdk::error::LendingError;
    let mut _144: solend_sdk::state::Reserve;
    let mut _145: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::state::Reserve>;
    let mut _146: std::result::Result<solend_sdk::state::Reserve, solana_program::program_error::ProgramError>;
    let mut _147: &[u8];
    let _148: &&mut [u8];
    let mut _149: &std::cell::Ref<'_, &mut [u8]>;
    let _150: &std::cell::Ref<'_, &mut [u8]>;
    let _151: std::cell::Ref<'_, &mut [u8]>;
    let mut _152: &std::cell::RefCell<&mut [u8]>;
    let _153: &std::cell::RefCell<&mut [u8]>;
    let mut _154: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _155: isize;
    let mut _157: !;
    let mut _158: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _160: ();
    let mut _161: bool;
    let mut _162: &&solana_program::pubkey::Pubkey;
    let mut _163: &&solana_program::pubkey::Pubkey;
    let mut _164: !;
    let _165: ();
    let mut _166: &str;
    let _167: &str;
    let mut _168: solana_program::program_error::ProgramError;
    let mut _169: solend_sdk::error::LendingError;
    let _170: ();
    let mut _171: bool;
    let mut _172: &&solana_program::pubkey::Pubkey;
    let _173: &solana_program::pubkey::Pubkey;
    let mut _174: &&solana_program::pubkey::Pubkey;
    let mut _175: !;
    let _176: ();
    let mut _177: &str;
    let _178: &str;
    let mut _179: solana_program::program_error::ProgramError;
    let mut _180: solend_sdk::error::LendingError;
    let _181: ();
    let mut _182: bool;
    let mut _183: &&solana_program::pubkey::Pubkey;
    let _184: &solana_program::pubkey::Pubkey;
    let mut _185: &&solana_program::pubkey::Pubkey;
    let mut _186: !;
    let _187: ();
    let mut _188: &str;
    let _189: &str;
    let mut _190: solana_program::program_error::ProgramError;
    let mut _191: solend_sdk::error::LendingError;
    let _192: ();
    let mut _193: bool;
    let mut _194: &&solana_program::pubkey::Pubkey;
    let _195: &solana_program::pubkey::Pubkey;
    let mut _196: &&solana_program::pubkey::Pubkey;
    let mut _197: !;
    let _198: ();
    let mut _199: &str;
    let _200: &str;
    let mut _201: solana_program::program_error::ProgramError;
    let mut _202: solend_sdk::error::LendingError;
    let _203: ();
    let mut _204: bool;
    let mut _205: &&solana_program::pubkey::Pubkey;
    let _206: &solana_program::pubkey::Pubkey;
    let mut _207: &&solana_program::pubkey::Pubkey;
    let mut _208: !;
    let _209: ();
    let mut _210: &str;
    let _211: &str;
    let mut _212: solana_program::program_error::ProgramError;
    let mut _213: solend_sdk::error::LendingError;
    let _214: ();
    let mut _215: bool;
    let mut _216: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, bool>;
    let mut _217: std::result::Result<bool, solana_program::program_error::ProgramError>;
    let mut _218: &solend_sdk::state::LastUpdate;
    let mut _219: u64;
    let mut _220: isize;
    let mut _222: !;
    let mut _223: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _225: !;
    let _226: ();
    let mut _227: &str;
    let _228: &str;
    let mut _229: solana_program::program_error::ProgramError;
    let mut _230: solend_sdk::error::LendingError;
    let _231: ();
    let mut _232: bool;
    let mut _233: u64;
    let mut _234: bool;
    let mut _235: u64;
    let mut _236: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, u64>;
    let mut _237: std::result::Result<u64, solana_program::program_error::ProgramError>;
    let mut _238: &solend_sdk::math::Decimal;
    let _239: solend_sdk::math::Decimal;
    let mut _240: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::math::Decimal>;
    let mut _241: std::result::Result<solend_sdk::math::Decimal, solana_program::program_error::ProgramError>;
    let mut _242: solend_sdk::math::Decimal;
    let mut _243: u64;
    let mut _244: solend_sdk::math::Decimal;
    let mut _245: isize;
    let mut _247: !;
    let mut _248: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _250: isize;
    let mut _252: !;
    let mut _253: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _255: u64;
    let mut _256: !;
    let _257: ();
    let mut _258: &str;
    let _259: &str;
    let mut _260: solana_program::program_error::ProgramError;
    let mut _261: solend_sdk::error::LendingError;
    let mut _263: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::state::Obligation>;
    let mut _264: std::result::Result<solend_sdk::state::Obligation, solana_program::program_error::ProgramError>;
    let mut _265: &[u8];
    let _266: &&mut [u8];
    let mut _267: &std::cell::Ref<'_, &mut [u8]>;
    let _268: &std::cell::Ref<'_, &mut [u8]>;
    let _269: std::cell::Ref<'_, &mut [u8]>;
    let mut _270: &std::cell::RefCell<&mut [u8]>;
    let _271: &std::cell::RefCell<&mut [u8]>;
    let mut _272: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _273: isize;
    let mut _275: !;
    let mut _276: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _278: ();
    let mut _279: bool;
    let mut _280: &&solana_program::pubkey::Pubkey;
    let mut _281: &&solana_program::pubkey::Pubkey;
    let mut _282: !;
    let _283: ();
    let mut _284: &str;
    let _285: &str;
    let mut _286: solana_program::program_error::ProgramError;
    let mut _287: solend_sdk::error::LendingError;
    let _288: ();
    let mut _289: bool;
    let mut _290: &&solana_program::pubkey::Pubkey;
    let _291: &solana_program::pubkey::Pubkey;
    let mut _292: &&solana_program::pubkey::Pubkey;
    let mut _293: !;
    let _294: ();
    let mut _295: &str;
    let _296: &str;
    let mut _297: solana_program::program_error::ProgramError;
    let mut _298: solend_sdk::error::LendingError;
    let _299: ();
    let mut _300: bool;
    let mut _301: &&solana_program::pubkey::Pubkey;
    let _302: &solana_program::pubkey::Pubkey;
    let mut _303: &&solana_program::pubkey::Pubkey;
    let mut _304: !;
    let _305: ();
    let mut _306: &str;
    let _307: &str;
    let mut _308: solana_program::program_error::ProgramError;
    let mut _309: solend_sdk::error::LendingError;
    let _310: ();
    let mut _311: bool;
    let mut _312: !;
    let _313: ();
    let mut _314: &str;
    let _315: &str;
    let mut _316: solana_program::program_error::ProgramError;
    let mut _317: solend_sdk::error::LendingError;
    let _318: ();
    let mut _319: bool;
    let mut _320: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, bool>;
    let mut _321: std::result::Result<bool, solana_program::program_error::ProgramError>;
    let mut _322: &solend_sdk::state::LastUpdate;
    let mut _323: u64;
    let mut _324: isize;
    let mut _326: !;
    let mut _327: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _329: !;
    let _330: ();
    let mut _331: &str;
    let _332: &str;
    let mut _333: solana_program::program_error::ProgramError;
    let mut _334: solend_sdk::error::LendingError;
    let _335: ();
    let mut _336: bool;
    let mut _337: &std::vec::Vec<solend_sdk::state::ObligationCollateral>;
    let mut _338: !;
    let _339: ();
    let mut _340: &str;
    let _341: &str;
    let mut _342: solana_program::program_error::ProgramError;
    let mut _343: solend_sdk::error::LendingError;
    let _344: ();
    let mut _345: bool;
    let mut _346: &solend_sdk::math::Decimal;
    let mut _347: &solend_sdk::math::Decimal;
    let _348: solend_sdk::math::Decimal;
    let mut _349: !;
    let _350: ();
    let mut _351: &str;
    let _352: &str;
    let mut _353: solana_program::program_error::ProgramError;
    let mut _354: solend_sdk::error::LendingError;
    let _356: [&[u8]; 2];
    let mut _357: &[u8];
    let mut _358: &solana_program::pubkey::Pubkey;
    let mut _359: &[u8];
    let mut _360: &[u8; 1];
    let _361: &[u8; 1];
    let _362: [u8; 1];
    let mut _363: u8;
    let mut _365: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::pubkey::PubkeyError>, solana_program::pubkey::Pubkey>;
    let mut _366: std::result::Result<solana_program::pubkey::Pubkey, solana_program::pubkey::PubkeyError>;
    let mut _367: &[&[u8]];
    let mut _368: &[&[u8]; 2];
    let mut _369: &solana_program::pubkey::Pubkey;
    let mut _370: isize;
    let mut _372: !;
    let mut _373: std::result::Result<std::convert::Infallible, solana_program::pubkey::PubkeyError>;
    let _375: ();
    let mut _376: bool;
    let mut _377: &&solana_program::pubkey::Pubkey;
    let _378: &solana_program::pubkey::Pubkey;
    let mut _379: &&solana_program::pubkey::Pubkey;
    let mut _380: !;
    let _381: ();
    let mut _382: &str;
    let _383: &str;
    let mut _384: solana_program::program_error::ProgramError;
    let mut _385: solend_sdk::error::LendingError;
    let _386: ();
    let mut _387: isize;
    let mut _388: usize;
    let mut _389: &std::vec::Vec<solend_sdk::state::ObligationLiquidity>;
    let mut _390: bool;
    let mut _391: &&solana_program::pubkey::Pubkey;
    let _392: &solana_program::pubkey::Pubkey;
    let _393: &solend_sdk::state::ObligationLiquidity;
    let mut _394: &std::vec::Vec<solend_sdk::state::ObligationLiquidity>;
    let mut _395: &&solana_program::pubkey::Pubkey;
    let mut _396: !;
    let _397: ();
    let mut _398: &str;
    let _399: &str;
    let mut _400: solana_program::program_error::ProgramError;
    let mut _401: solend_sdk::error::LendingError;
    let mut _402: !;
    let _403: ();
    let mut _404: &str;
    let _405: &str;
    let mut _406: solana_program::program_error::ProgramError;
    let mut _407: solend_sdk::error::LendingError;
    let mut _408: bool;
    let mut _409: !;
    let _410: ();
    let mut _411: &str;
    let _412: &str;
    let mut _413: solana_program::program_error::ProgramError;
    let mut _414: solend_sdk::error::LendingError;
    let mut _416: std::result::Result<solend_sdk::math::Decimal, solana_program::program_error::ProgramError>;
    let mut _417: &solend_sdk::state::Obligation;
    let mut _418: {closure@token-lending\program\src\processor.rs:1766:25: 1766:28};
    let _419: ();
    let mut _420: bool;
    let mut _421: &solend_sdk::math::Decimal;
    let mut _422: &solend_sdk::math::Decimal;
    let _423: solend_sdk::math::Decimal;
    let mut _424: !;
    let _425: ();
    let mut _426: &str;
    let _427: &str;
    let mut _428: solana_program::program_error::ProgramError;
    let mut _429: solend_sdk::error::LendingError;
    let mut _431: std::result::Result<solend_sdk::math::Decimal, solana_program::program_error::ProgramError>;
    let mut _432: solend_sdk::math::Decimal;
    let mut _433: u64;
    let mut _434: solend_sdk::math::Decimal;
    let mut _435: {closure@token-lending\program\src\processor.rs:1774:25: 1774:28};
    let mut _438: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::math::Decimal>;
    let mut _439: std::result::Result<solend_sdk::math::Decimal, solana_program::program_error::ProgramError>;
    let mut _440: &mut solend_sdk::state::RateLimiter;
    let mut _441: u64;
    let mut _442: isize;
    let mut _444: !;
    let mut _445: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _448: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::math::Decimal>;
    let mut _449: std::result::Result<solend_sdk::math::Decimal, solana_program::program_error::ProgramError>;
    let mut _450: &mut solend_sdk::state::RateLimiter;
    let mut _451: u64;
    let mut _452: isize;
    let mut _454: !;
    let mut _455: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _457: solend_sdk::math::Decimal;
    let mut _458: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::math::Decimal>;
    let mut _459: std::result::Result<solend_sdk::math::Decimal, solana_program::program_error::ProgramError>;
    let mut _460: &solend_sdk::state::Reserve;
    let mut _461: solend_sdk::math::Decimal;
    let mut _462: solend_sdk::math::Decimal;
    let mut _463: solend_sdk::math::Decimal;
    let mut _464: isize;
    let mut _466: !;
    let mut _467: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _469: solend_sdk::math::Decimal;
    let mut _474: solend_sdk::state::CalculateBorrowResult;
    let mut _475: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::state::CalculateBorrowResult>;
    let mut _476: std::result::Result<solend_sdk::state::CalculateBorrowResult, solana_program::program_error::ProgramError>;
    let mut _477: &solend_sdk::state::Reserve;
    let mut _478: u64;
    let mut _479: solend_sdk::math::Decimal;
    let mut _480: solend_sdk::math::Decimal;
    let mut _481: solend_sdk::math::Decimal;
    let mut _482: solend_sdk::math::Decimal;
    let mut _483: isize;
    let mut _485: !;
    let mut _486: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _488: ();
    let mut _489: bool;
    let mut _490: u64;
    let mut _491: !;
    let _492: ();
    let mut _493: &str;
    let _494: &str;
    let mut _495: solana_program::program_error::ProgramError;
    let mut _496: solend_sdk::error::LendingError;
    let _498: ();
    let _499: ();
    let mut _500: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _501: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _502: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _503: &mut solend_sdk::state::RateLimiter;
    let mut _504: u64;
    let mut _505: solend_sdk::math::Decimal;
    let mut _506: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::math::Decimal>;
    let mut _507: std::result::Result<solend_sdk::math::Decimal, solana_program::program_error::ProgramError>;
    let mut _508: &solend_sdk::state::Reserve;
    let mut _509: solend_sdk::math::Decimal;
    let mut _510: isize;
    let mut _512: !;
    let mut _513: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _515: {closure@token-lending\program\src\processor.rs:1817:22: 1817:27};
    let mut _516: isize;
    let mut _518: !;
    let mut _519: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _521: ();
    let mut _522: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _523: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _524: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _525: &mut solend_sdk::state::RateLimiter;
    let mut _526: u64;
    let mut _527: solend_sdk::math::Decimal;
    let mut _528: {closure@token-lending\program\src\processor.rs:1825:22: 1825:27};
    let mut _529: isize;
    let mut _531: !;
    let mut _532: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _534: ();
    let mut _535: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _536: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _537: solend_sdk::state::LendingMarket;
    let mut _538: &mut [u8];
    let mut _539: &mut &mut [u8];
    let mut _540: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _541: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _542: std::cell::RefMut<'_, &mut [u8]>;
    let mut _543: &std::cell::RefCell<&mut [u8]>;
    let _544: &std::cell::RefCell<&mut [u8]>;
    let mut _545: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _546: isize;
    let mut _548: !;
    let mut _549: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _551: ();
    let mut _552: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _553: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _554: &mut solend_sdk::state::ReserveLiquidity;
    let mut _555: solend_sdk::math::Decimal;
    let mut _556: isize;
    let mut _558: !;
    let mut _559: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _561: ();
    let mut _562: &mut solend_sdk::state::LastUpdate;
    let mut _563: solend_sdk::math::Decimal;
    let mut _564: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::math::Decimal>;
    let mut _565: std::result::Result<solend_sdk::math::Decimal, solana_program::program_error::ProgramError>;
    let mut _566: solend_sdk::math::Decimal;
    let mut _567: solend_sdk::math::Decimal;
    let mut _568: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::math::Decimal>;
    let mut _569: std::result::Result<solend_sdk::math::Decimal, solana_program::program_error::ProgramError>;
    let mut _570: solend_sdk::math::Decimal;
    let mut _571: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::math::Decimal>;
    let mut _572: std::result::Result<solend_sdk::math::Decimal, solana_program::program_error::ProgramError>;
    let mut _573: &solend_sdk::state::Reserve;
    let mut _574: solend_sdk::math::Decimal;
    let mut _575: isize;
    let mut _577: !;
    let mut _578: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _580: solend_sdk::math::Decimal;
    let mut _581: &solend_sdk::state::Reserve;
    let mut _582: isize;
    let mut _584: !;
    let mut _585: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _587: isize;
    let mut _589: !;
    let mut _590: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _592: solend_sdk::math::Decimal;
    let mut _593: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::math::Decimal>;
    let mut _594: std::result::Result<solend_sdk::math::Decimal, solana_program::program_error::ProgramError>;
    let mut _595: solend_sdk::math::Decimal;
    let mut _596: solend_sdk::math::Decimal;
    let mut _597: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::math::Decimal>;
    let mut _598: std::result::Result<solend_sdk::math::Decimal, solana_program::program_error::ProgramError>;
    let mut _599: &solend_sdk::state::Reserve;
    let mut _600: solend_sdk::math::Decimal;
    let mut _601: isize;
    let mut _603: !;
    let mut _604: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _606: isize;
    let mut _608: !;
    let mut _609: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _611: ();
    let mut _612: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _613: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _614: solend_sdk::state::Reserve;
    let mut _615: &mut [u8];
    let mut _616: &mut &mut [u8];
    let mut _617: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _618: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _619: std::cell::RefMut<'_, &mut [u8]>;
    let mut _620: &std::cell::RefCell<&mut [u8]>;
    let _621: &std::cell::RefCell<&mut [u8]>;
    let mut _622: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _623: isize;
    let mut _625: !;
    let mut _626: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _629: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &mut solend_sdk::state::ObligationLiquidity>;
    let mut _630: std::result::Result<&mut solend_sdk::state::ObligationLiquidity, solana_program::program_error::ProgramError>;
    let mut _631: &mut solend_sdk::state::Obligation;
    let mut _632: solana_program::pubkey::Pubkey;
    let mut _633: solend_sdk::math::Decimal;
    let mut _634: isize;
    let mut _636: !;
    let mut _637: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _639: ();
    let mut _640: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _641: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _642: &mut solend_sdk::state::ObligationLiquidity;
    let mut _643: solend_sdk::math::Decimal;
    let mut _644: isize;
    let mut _646: !;
    let mut _647: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _649: ();
    let mut _650: &mut solend_sdk::state::LastUpdate;
    let mut _652: (std::option::Option<solana_program::pubkey::Pubkey>, std::option::Option<solana_program::pubkey::Pubkey>);
    let mut _653: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, (std::option::Option<solana_program::pubkey::Pubkey>, std::option::Option<solana_program::pubkey::Pubkey>)>;
    let mut _654: std::result::Result<(std::option::Option<solana_program::pubkey::Pubkey>, std::option::Option<solana_program::pubkey::Pubkey>), solana_program::program_error::ProgramError>;
    let mut _655: &mut solend_sdk::state::Obligation;
    let mut _656: &mut solend_sdk::state::Obligation;
    let mut _657: &[solana_program::account_info::AccountInfo<'_>];
    let _658: &[solana_program::account_info::AccountInfo<'_>];
    let _659: &[solana_program::account_info::AccountInfo<'_>];
    let mut _660: &[solana_program::account_info::AccountInfo<'_>];
    let mut _661: std::ops::RangeFrom<usize>;
    let mut _662: isize;
    let mut _664: !;
    let mut _665: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _667: ();
    let mut _668: isize;
    let mut _670: !;
    let _671: ();
    let mut _672: &str;
    let _673: &str;
    let mut _674: &std::string::String;
    let _675: &std::string::String;
    let _676: std::string::String;
    let mut _678: std::fmt::Arguments<'_>;
    let mut _679: &[&str];
    let mut _680: &[&str; 1];
    let _681: &[&str; 1];
    let _682: [&str; 1];
    let mut _683: &[bytemuck::core::fmt::rt::Argument<'_>];
    let mut _684: &[bytemuck::core::fmt::rt::Argument<'_>; 1];
    let _685: &[bytemuck::core::fmt::rt::Argument<'_>; 1];
    let _686: [bytemuck::core::fmt::rt::Argument<'_>; 1];
    let mut _687: bytemuck::core::fmt::rt::Argument<'_>;
    let mut _688: &solana_program::pubkey::Pubkey;
    let _689: &solana_program::pubkey::Pubkey;
    let mut _690: solana_program::program_error::ProgramError;
    let mut _691: solend_sdk::error::LendingError;
    let _692: ();
    let mut _693: std::ops::Range<usize>;
    let mut _694: std::ops::Range<usize>;
    let mut _695: usize;
    let mut _696: &std::vec::Vec<solend_sdk::state::ObligationCollateral>;
    let mut _698: ();
    let _699: ();
    let mut _700: std::option::Option<usize>;
    let mut _701: &mut std::ops::Range<usize>;
    let mut _702: &mut std::ops::Range<usize>;
    let mut _703: isize;
    let mut _704: !;
    let _705: &solana_program::account_info::AccountInfo<'_>;
    let mut _706: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _707: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _708: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _709: isize;
    let mut _711: !;
    let mut _712: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _714: ();
    let mut _715: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _716: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _717: solend_sdk::state::Obligation;
    let mut _718: &mut [u8];
    let mut _719: &mut &mut [u8];
    let mut _720: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _721: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _722: std::cell::RefMut<'_, &mut [u8]>;
    let mut _723: &std::cell::RefCell<&mut [u8]>;
    let _724: &std::cell::RefCell<&mut [u8]>;
    let mut _725: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _726: isize;
    let mut _728: !;
    let mut _729: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _732: ();
    let mut _733: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _734: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _735: isize;
    let mut _737: bool;
    let mut _738: u64;
    let mut _739: u64;
    let mut _740: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>, u64>;
    let mut _741: std::result::Result<u64, solend_sdk::error::LendingError>;
    let mut _742: std::option::Option<u64>;
    let mut _743: u64;
    let mut _744: u64;
    let mut _745: solend_sdk::error::LendingError;
    let mut _746: isize;
    let mut _748: !;
    let mut _749: std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>;
    let _751: ();
    let mut _752: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _753: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _754: processor::TokenTransferParams<'_, '_>;
    let mut _755: solana_program::account_info::AccountInfo<'_>;
    let mut _756: &solana_program::account_info::AccountInfo<'_>;
    let mut _757: solana_program::account_info::AccountInfo<'_>;
    let mut _758: &solana_program::account_info::AccountInfo<'_>;
    let mut _759: u64;
    let mut _760: solana_program::account_info::AccountInfo<'_>;
    let mut _761: &solana_program::account_info::AccountInfo<'_>;
    let mut _762: &[&[u8]];
    let mut _763: &[&[u8]; 2];
    let mut _764: solana_program::account_info::AccountInfo<'_>;
    let mut _765: &solana_program::account_info::AccountInfo<'_>;
    let mut _766: isize;
    let mut _768: !;
    let mut _769: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _771: ();
    let mut _772: bool;
    let mut _773: u64;
    let _774: ();
    let mut _775: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _776: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _777: processor::TokenTransferParams<'_, '_>;
    let mut _778: solana_program::account_info::AccountInfo<'_>;
    let mut _779: &solana_program::account_info::AccountInfo<'_>;
    let mut _780: solana_program::account_info::AccountInfo<'_>;
    let mut _781: &solana_program::account_info::AccountInfo<'_>;
    let mut _782: u64;
    let mut _783: solana_program::account_info::AccountInfo<'_>;
    let mut _784: &solana_program::account_info::AccountInfo<'_>;
    let mut _785: &[&[u8]];
    let mut _786: &[&[u8]; 2];
    let mut _787: solana_program::account_info::AccountInfo<'_>;
    let mut _788: &solana_program::account_info::AccountInfo<'_>;
    let mut _789: isize;
    let mut _791: !;
    let mut _792: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _794: ();
    let mut _795: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _796: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _797: processor::TokenTransferParams<'_, '_>;
    let mut _798: solana_program::account_info::AccountInfo<'_>;
    let mut _799: &solana_program::account_info::AccountInfo<'_>;
    let mut _800: solana_program::account_info::AccountInfo<'_>;
    let mut _801: &solana_program::account_info::AccountInfo<'_>;
    let mut _802: u64;
    let mut _803: solana_program::account_info::AccountInfo<'_>;
    let mut _804: &solana_program::account_info::AccountInfo<'_>;
    let mut _805: &[&[u8]];
    let mut _806: &[&[u8]; 2];
    let mut _807: solana_program::account_info::AccountInfo<'_>;
    let mut _808: &solana_program::account_info::AccountInfo<'_>;
    let mut _809: isize;
    let mut _811: !;
    let mut _812: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _814: ();
    let mut _816: &mut [u8];
    let mut _817: &mut [u8];
    let mut _818: &mut [u8];
    let mut _819: &solana_program::pubkey::Pubkey;
    let mut _820: &mut [u8];
    let mut _821: &mut [u8];
    let mut _822: &solana_program::pubkey::Pubkey;
    let mut _823: &mut [u8];
    let mut _824: bool;
    let mut _825: bool;
    let mut _826: bool;
    let mut _827: bool;
    let mut _828: bool;
    let mut _829: bool;
    let mut _830: bool;
    let mut _831: bool;
    let mut _832: bool;
    let mut _833: bool;
    let mut _834: isize;
    let mut _835: isize;
    let mut _836: isize;
    let mut _837: isize;
    let mut _838: isize;
    let mut _839: isize;
    let mut _840: isize;
    let mut _841: isize;
    let mut _842: isize;
    let mut _843: isize;
    let mut _844: isize;
    let mut _845: isize;
    let mut _846: isize;
    let mut _847: isize;
    let mut _848: isize;
    let mut _849: isize;
    let mut _850: isize;
    let mut _851: isize;
    let mut _852: isize;
    let mut _853: isize;
    let mut _854: isize;
    let mut _855: isize;
    let mut _856: isize;
    let mut _857: isize;
    let mut _858: isize;
    let mut _859: isize;
    let mut _860: isize;
    let mut _861: isize;
    let mut _862: isize;
    let mut _863: isize;
    let mut _864: isize;
    let mut _865: isize;
    let mut _866: isize;
    let mut _867: isize;
    let mut _868: isize;
    let mut _869: isize;
    let mut _870: isize;
    let mut _871: isize;
    let mut _872: isize;
    let mut _873: isize;
    let mut _874: isize;
    let mut _875: isize;
    let mut _876: isize;
    let mut _877: isize;
    let mut _878: isize;
    let mut _879: isize;
    let mut _880: isize;
    let mut _881: isize;
    let mut _882: isize;
    let mut _883: isize;
    let mut _884: isize;
    let mut _885: isize;
    let mut _886: isize;
    let mut _887: isize;
    let mut _888: isize;
    let mut _889: isize;
    let mut _890: isize;
    let mut _891: isize;
    let mut _892: isize;
    let mut _893: isize;
    let mut _894: isize;
    let mut _895: isize;
    let mut _896: isize;
    let mut _897: isize;
    let mut _898: isize;
    let mut _899: isize;
    let mut _900: isize;
    let mut _901: isize;
    let mut _902: isize;
    let mut _903: isize;
    let mut _904: isize;
    let mut _905: isize;
    let mut _906: isize;
    let mut _907: isize;
    let mut _908: isize;
    let mut _909: isize;
    let mut _910: isize;
    let mut _911: isize;
    let mut _912: isize;
    let mut _913: isize;
    let mut _914: isize;
    let mut _915: isize;
    let mut _916: isize;
    let mut _917: isize;
    let mut _918: isize;
    let mut _919: isize;
    let mut _920: isize;
    let mut _921: isize;
    let mut _922: isize;
    let mut _923: isize;
    let mut _924: isize;
    let mut _925: isize;
    let mut _926: isize;
    let mut _927: isize;
    let mut _928: isize;
    let mut _929: isize;
    let mut _930: isize;
    let mut _931: isize;
    let mut _932: isize;
    let mut _933: isize;
    let mut _934: isize;
    let mut _935: isize;
    let mut _936: isize;
    let mut _937: isize;
    let mut _938: isize;
    let mut _939: isize;
    let mut _940: isize;
    let mut _941: isize;
    let mut _942: isize;
    let mut _943: isize;
    let mut _944: isize;
    let mut _945: isize;
    let mut _946: isize;
    let mut _947: isize;
    let mut _948: isize;
    let mut _949: isize;
    let mut _950: isize;
    let mut _951: isize;
    let mut _952: isize;
    let mut _953: isize;
    let mut _954: isize;
    let mut _955: isize;
    let mut _956: isize;
    let mut _957: isize;
    let mut _958: isize;
    let mut _959: isize;
    let mut _960: isize;
    let mut _961: isize;
    let mut _962: isize;
    let mut _963: isize;
    let mut _964: isize;
    let mut _965: isize;
    let mut _966: isize;
    let mut _967: isize;
    let mut _968: isize;
    let mut _969: isize;
    let mut _970: isize;
    let mut _971: isize;
    let mut _972: isize;
    let mut _973: isize;
    let mut _974: isize;
    let mut _975: isize;
    let mut _976: isize;
    let mut _977: isize;
    let mut _978: isize;
    let mut _979: isize;
    let mut _980: isize;
    let mut _981: isize;
    let mut _982: isize;
    let mut _983: isize;
    let mut _984: isize;
    let mut _985: isize;
    let mut _986: isize;
    let mut _987: isize;
    let mut _988: isize;
    let mut _989: isize;
    let mut _990: isize;
    let mut _991: isize;
    let mut _992: isize;
    let mut _993: isize;
    let mut _994: isize;
    let mut _995: isize;
    let mut _996: isize;
    let mut _997: isize;
    let mut _998: isize;
    let mut _999: isize;
    let mut _1000: isize;
    let mut _1001: isize;
    let mut _1002: isize;
    let mut _1003: isize;
    let mut _1004: isize;
    let mut _1005: isize;
    let mut _1006: isize;
    let mut _1007: isize;
    let mut _1008: isize;
    let mut _1009: isize;
    let mut _1010: isize;
    let mut _1011: isize;
    let mut _1012: isize;
    let mut _1013: isize;
    let mut _1014: isize;
    let mut _1015: isize;
    let mut _1016: isize;
    let mut _1017: isize;
    let mut _1018: isize;
    let mut _1019: isize;
    let mut _1020: isize;
    let mut _1021: isize;
    let mut _1022: isize;
    let mut _1023: isize;
    let mut _1024: isize;
    let mut _1025: isize;
    let mut _1026: isize;
    let mut _1027: isize;
    let mut _1028: isize;
    let mut _1029: isize;
    let mut _1030: isize;
    let mut _1031: isize;
    let mut _1032: isize;
    let mut _1033: isize;
    let mut _1034: isize;
    let mut _1035: isize;
    let mut _1036: isize;
    let mut _1037: isize;
    let mut _1038: isize;
    let mut _1039: isize;
    let mut _1040: isize;
    let mut _1041: isize;
    let mut _1042: *const solend_sdk::state::Reserve;
    let mut _1043: *const solend_sdk::state::Reserve;
    let mut _1044: *const solend_sdk::state::Reserve;
    let mut _1045: *const solend_sdk::state::Reserve;
    let mut _1046: *const solend_sdk::state::Reserve;
    let mut _1047: *const solend_sdk::state::Reserve;
    let mut _1048: *const solend_sdk::state::Reserve;
    let mut _1049: *const solend_sdk::state::Reserve;
    let mut _1050: *const solend_sdk::state::Reserve;
    let mut _1051: *const solend_sdk::state::Reserve;
    let mut _1052: *const solend_sdk::state::Reserve;
    let mut _1053: *const solend_sdk::state::Reserve;
    let mut _1054: *const solend_sdk::state::Reserve;
    let mut _1055: *const solend_sdk::state::Reserve;
    let mut _1056: *const solend_sdk::state::Reserve;
    let mut _1057: *const solend_sdk::state::Reserve;
    let mut _1058: *const solend_sdk::state::Reserve;
    let mut _1059: *const solend_sdk::state::Reserve;
    let mut _1060: *const solend_sdk::state::Reserve;
    let mut _1061: *const solend_sdk::state::Reserve;
    let mut _1062: *const solend_sdk::state::Reserve;
    let mut _1063: *const solend_sdk::state::Reserve;
    let mut _1064: *const solend_sdk::state::Reserve;
    scope 1 {
        debug account_info_iter => _13;
        let _16: &solana_program::account_info::AccountInfo<'_>;
        let _21: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _24: &solana_program::account_info::AccountInfo<'_>;
        scope 2 {
            debug source_liquidity_info => _16;
            let _25: &solana_program::account_info::AccountInfo<'_>;
            let _30: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
            let _33: &solana_program::account_info::AccountInfo<'_>;
            scope 7 {
                debug destination_liquidity_info => _25;
                let _34: &solana_program::account_info::AccountInfo<'_>;
                let _39: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                let _42: &solana_program::account_info::AccountInfo<'_>;
                scope 12 {
                    debug borrow_reserve_info => _34;
                    let _43: &solana_program::account_info::AccountInfo<'_>;
                    let _48: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                    let _51: &solana_program::account_info::AccountInfo<'_>;
                    scope 17 {
                        debug borrow_reserve_liquidity_fee_receiver_info => _43;
                        let _52: &solana_program::account_info::AccountInfo<'_>;
                        let _57: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                        let _60: &solana_program::account_info::AccountInfo<'_>;
                        scope 22 {
                            debug obligation_info => _52;
                            let _61: &solana_program::account_info::AccountInfo<'_>;
                            let _66: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                            let _69: &solana_program::account_info::AccountInfo<'_>;
                            scope 27 {
                                debug lending_market_info => _61;
                                let _70: &solana_program::account_info::AccountInfo<'_>;
                                let _75: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                let _78: &solana_program::account_info::AccountInfo<'_>;
                                scope 32 {
                                    debug lending_market_authority_info => _70;
                                    let _79: &solana_program::account_info::AccountInfo<'_>;
                                    let _84: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                    let _87: &solana_program::account_info::AccountInfo<'_>;
                                    scope 37 {
                                        debug obligation_owner_info => _79;
                                        let _88: &solana_program::clock::Clock;
                                        let _93: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                        let _96: solana_program::clock::Clock;
                                        scope 42 {
                                            debug clock => _88;
                                            let _97: &solana_program::account_info::AccountInfo<'_>;
                                            let _102: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                            let _105: &solana_program::account_info::AccountInfo<'_>;
                                            scope 47 {
                                                debug token_program_id => _97;
                                                let mut _106: solend_sdk::state::LendingMarket;
                                                let _118: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                let _121: solend_sdk::state::LendingMarket;
                                                scope 52 {
                                                    debug lending_market => _106;
                                                    let mut _143: std::boxed::Box<solend_sdk::state::Reserve>;
                                                    let _156: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                    let _159: solend_sdk::state::Reserve;
                                                    scope 57 {
                                                        debug borrow_reserve => _143;
                                                        let _221: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                        let _224: bool;
                                                        let _246: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                        let _249: solend_sdk::math::Decimal;
                                                        let _251: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                        let _254: u64;
                                                        let mut _262: solend_sdk::state::Obligation;
                                                        let _274: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                        let _277: solend_sdk::state::Obligation;
                                                        let mut _1089: *const ();
                                                        let mut _1090: usize;
                                                        let mut _1091: usize;
                                                        let mut _1092: usize;
                                                        let mut _1093: usize;
                                                        let mut _1094: bool;
                                                        let mut _1095: *const ();
                                                        let mut _1096: usize;
                                                        let mut _1097: usize;
                                                        let mut _1098: usize;
                                                        let mut _1099: usize;
                                                        let mut _1100: bool;
                                                        scope 62 {
                                                            debug residual => _221;
                                                            scope 63 {
                                                            }
                                                        }
                                                        scope 64 {
                                                            debug val => _224;
                                                            scope 65 {
                                                            }
                                                        }
                                                        scope 66 {
                                                            debug residual => _246;
                                                            scope 67 {
                                                            }
                                                        }
                                                        scope 68 {
                                                            debug val => _249;
                                                            scope 69 {
                                                            }
                                                        }
                                                        scope 70 {
                                                            debug residual => _251;
                                                            scope 71 {
                                                            }
                                                        }
                                                        scope 72 {
                                                            debug val => _254;
                                                            scope 73 {
                                                            }
                                                        }
                                                        scope 74 {
                                                            debug obligation => _262;
                                                            let _325: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                            let _328: bool;
                                                            let _355: &[&[u8]; 2];
                                                            scope 79 {
                                                                debug residual => _325;
                                                                scope 80 {
                                                                }
                                                            }
                                                            scope 81 {
                                                                debug val => _328;
                                                                scope 82 {
                                                                }
                                                            }
                                                            scope 83 {
                                                                debug authority_signer_seeds => _355;
                                                                let _364: solana_program::pubkey::Pubkey;
                                                                let _371: std::result::Result<std::convert::Infallible, solana_program::pubkey::PubkeyError>;
                                                                let _374: solana_program::pubkey::Pubkey;
                                                                scope 84 {
                                                                    debug lending_market_authority_pubkey => _364;
                                                                    let _415: solend_sdk::math::Decimal;
                                                                    scope 89 {
                                                                        debug remaining_borrow_value => _415;
                                                                        let _430: solend_sdk::math::Decimal;
                                                                        let mut _1077: *const ();
                                                                        let mut _1078: usize;
                                                                        let mut _1079: usize;
                                                                        let mut _1080: usize;
                                                                        let mut _1081: usize;
                                                                        let mut _1082: bool;
                                                                        let mut _1083: *const ();
                                                                        let mut _1084: usize;
                                                                        let mut _1085: usize;
                                                                        let mut _1086: usize;
                                                                        let mut _1087: usize;
                                                                        let mut _1088: bool;
                                                                        scope 90 {
                                                                            debug remaining_reserve_capacity => _430;
                                                                            let _436: solend_sdk::math::Decimal;
                                                                            let _437: solend_sdk::math::Decimal;
                                                                            let _443: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                            let _446: solend_sdk::math::Decimal;
                                                                            scope 91 {
                                                                                debug max_outflow_liquidity_amount => _436;
                                                                                let _470: solend_sdk::math::Decimal;
                                                                                let _471: u64;
                                                                                let _472: u64;
                                                                                let _473: u64;
                                                                                let _484: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                                let _487: solend_sdk::state::CalculateBorrowResult;
                                                                                scope 106 {
                                                                                    debug borrow_amount => _470;
                                                                                    debug receive_amount => _471;
                                                                                    debug borrow_fee => _472;
                                                                                    debug host_fee => _473;
                                                                                    let _497: solend_sdk::math::Decimal;
                                                                                    let mut _1071: *const ();
                                                                                    let mut _1072: usize;
                                                                                    let mut _1073: usize;
                                                                                    let mut _1074: usize;
                                                                                    let mut _1075: usize;
                                                                                    let mut _1076: bool;
                                                                                    scope 111 {
                                                                                        debug cumulative_borrow_rate_wads => _497;
                                                                                        let _511: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                                        let _514: solend_sdk::math::Decimal;
                                                                                        let _517: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                                        let _520: ();
                                                                                        let _530: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                                        let _533: ();
                                                                                        let _547: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                                        let _550: ();
                                                                                        let _557: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                                        let _560: ();
                                                                                        let _576: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                                        let _579: solend_sdk::math::Decimal;
                                                                                        let _583: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                                        let _586: solend_sdk::math::Decimal;
                                                                                        let _588: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                                        let _591: solend_sdk::math::Decimal;
                                                                                        let _602: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                                        let _605: solend_sdk::math::Decimal;
                                                                                        let _607: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                                        let _610: solend_sdk::math::Decimal;
                                                                                        let _624: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                                        let _627: ();
                                                                                        let _628: &mut solend_sdk::state::ObligationLiquidity;
                                                                                        let _635: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                                        let _638: &mut solend_sdk::state::ObligationLiquidity;
                                                                                        let mut _1065: *const ();
                                                                                        let mut _1066: usize;
                                                                                        let mut _1067: usize;
                                                                                        let mut _1068: usize;
                                                                                        let mut _1069: usize;
                                                                                        let mut _1070: bool;
                                                                                        scope 112 {
                                                                                            debug residual => _511;
                                                                                            scope 113 {
                                                                                            }
                                                                                        }
                                                                                        scope 114 {
                                                                                            debug val => _514;
                                                                                            scope 115 {
                                                                                            }
                                                                                        }
                                                                                        scope 116 {
                                                                                            debug residual => _517;
                                                                                            scope 117 {
                                                                                            }
                                                                                        }
                                                                                        scope 118 {
                                                                                            debug val => _520;
                                                                                            scope 119 {
                                                                                            }
                                                                                        }
                                                                                        scope 120 {
                                                                                            debug residual => _530;
                                                                                            scope 121 {
                                                                                            }
                                                                                        }
                                                                                        scope 122 {
                                                                                            debug val => _533;
                                                                                            scope 123 {
                                                                                            }
                                                                                        }
                                                                                        scope 124 {
                                                                                            debug residual => _547;
                                                                                            scope 125 {
                                                                                            }
                                                                                        }
                                                                                        scope 126 {
                                                                                            debug val => _550;
                                                                                            scope 127 {
                                                                                            }
                                                                                        }
                                                                                        scope 128 {
                                                                                            debug residual => _557;
                                                                                            scope 129 {
                                                                                            }
                                                                                        }
                                                                                        scope 130 {
                                                                                            debug val => _560;
                                                                                            scope 131 {
                                                                                            }
                                                                                        }
                                                                                        scope 132 {
                                                                                            debug residual => _576;
                                                                                            scope 133 {
                                                                                            }
                                                                                        }
                                                                                        scope 134 {
                                                                                            debug val => _579;
                                                                                            scope 135 {
                                                                                            }
                                                                                        }
                                                                                        scope 136 {
                                                                                            debug residual => _583;
                                                                                            scope 137 {
                                                                                            }
                                                                                        }
                                                                                        scope 138 {
                                                                                            debug val => _586;
                                                                                            scope 139 {
                                                                                            }
                                                                                        }
                                                                                        scope 140 {
                                                                                            debug residual => _588;
                                                                                            scope 141 {
                                                                                            }
                                                                                        }
                                                                                        scope 142 {
                                                                                            debug val => _591;
                                                                                            scope 143 {
                                                                                            }
                                                                                        }
                                                                                        scope 144 {
                                                                                            debug residual => _602;
                                                                                            scope 145 {
                                                                                            }
                                                                                        }
                                                                                        scope 146 {
                                                                                            debug val => _605;
                                                                                            scope 147 {
                                                                                            }
                                                                                        }
                                                                                        scope 148 {
                                                                                            debug residual => _607;
                                                                                            scope 149 {
                                                                                            }
                                                                                        }
                                                                                        scope 150 {
                                                                                            debug val => _610;
                                                                                            scope 151 {
                                                                                            }
                                                                                        }
                                                                                        scope 152 {
                                                                                            debug residual => _624;
                                                                                            scope 153 {
                                                                                            }
                                                                                        }
                                                                                        scope 154 {
                                                                                            debug val => _627;
                                                                                            scope 155 {
                                                                                            }
                                                                                        }
                                                                                        scope 156 {
                                                                                            debug obligation_liquidity => _628;
                                                                                            let _645: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                                            let _648: ();
                                                                                            let _651: std::option::Option<solana_program::pubkey::Pubkey>;
                                                                                            let _663: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                                            let _666: (std::option::Option<solana_program::pubkey::Pubkey>, std::option::Option<solana_program::pubkey::Pubkey>);
                                                                                            scope 161 {
                                                                                                debug residual => _645;
                                                                                                scope 162 {
                                                                                                }
                                                                                            }
                                                                                            scope 163 {
                                                                                                debug val => _648;
                                                                                                scope 164 {
                                                                                                }
                                                                                            }
                                                                                            scope 165 {
                                                                                                debug open_exceeded => _651;
                                                                                                let mut _697: std::ops::Range<usize>;
                                                                                                let _727: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                                                let _730: ();
                                                                                                let mut _731: u64;
                                                                                                scope 170 {
                                                                                                    debug reserve_pubkey => _669;
                                                                                                    let _669: solana_program::pubkey::Pubkey;
                                                                                                    let _677: std::string::String;
                                                                                                    let mut _815: &[&str; 1];
                                                                                                    scope 171 {
                                                                                                        debug res => _677;
                                                                                                    }
                                                                                                }
                                                                                                scope 172 {
                                                                                                    debug iter => _697;
                                                                                                    let _710: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                                                    let _713: &solana_program::account_info::AccountInfo<'_>;
                                                                                                    scope 173 {
                                                                                                        debug residual => _710;
                                                                                                        scope 174 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 175 {
                                                                                                        debug val => _713;
                                                                                                        scope 176 {
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                scope 177 {
                                                                                                    debug residual => _727;
                                                                                                    scope 178 {
                                                                                                    }
                                                                                                }
                                                                                                scope 179 {
                                                                                                    debug val => _730;
                                                                                                    scope 180 {
                                                                                                    }
                                                                                                }
                                                                                                scope 181 {
                                                                                                    debug owner_fee => _731;
                                                                                                    let _790: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                                                    let _793: ();
                                                                                                    let _810: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                                                    let _813: ();
                                                                                                    scope 182 {
                                                                                                        debug host_fee_receiver_info => _736;
                                                                                                        let _736: &solana_program::account_info::AccountInfo<'_>;
                                                                                                        let _747: std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>;
                                                                                                        let _750: u64;
                                                                                                        let _767: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                                                        let _770: ();
                                                                                                        scope 183 {
                                                                                                            debug residual => _747;
                                                                                                            scope 184 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 185 {
                                                                                                            debug val => _750;
                                                                                                            scope 186 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 187 {
                                                                                                            debug residual => _767;
                                                                                                            scope 188 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 189 {
                                                                                                            debug val => _770;
                                                                                                            scope 190 {
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    scope 191 {
                                                                                                        debug residual => _790;
                                                                                                        scope 192 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 193 {
                                                                                                        debug val => _793;
                                                                                                        scope 194 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 195 {
                                                                                                        debug residual => _810;
                                                                                                        scope 196 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 197 {
                                                                                                        debug val => _813;
                                                                                                        scope 198 {
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            scope 166 {
                                                                                                debug residual => _663;
                                                                                                scope 167 {
                                                                                                }
                                                                                            }
                                                                                            scope 168 {
                                                                                                debug val => _666;
                                                                                                scope 169 {
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 157 {
                                                                                            debug residual => _635;
                                                                                            scope 158 {
                                                                                            }
                                                                                        }
                                                                                        scope 159 {
                                                                                            debug val => _638;
                                                                                            scope 160 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                scope 107 {
                                                                                    debug residual => _484;
                                                                                    scope 108 {
                                                                                    }
                                                                                }
                                                                                scope 109 {
                                                                                    debug val => _487;
                                                                                    scope 110 {
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 92 {
                                                                                debug max_outflow_usd => _437;
                                                                                let _447: solend_sdk::math::Decimal;
                                                                                let _453: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                                let _456: solend_sdk::math::Decimal;
                                                                                scope 97 {
                                                                                    debug max_outflow_tokens => _447;
                                                                                    let _465: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                                                    let _468: solend_sdk::math::Decimal;
                                                                                    scope 102 {
                                                                                        debug residual => _465;
                                                                                        scope 103 {
                                                                                        }
                                                                                    }
                                                                                    scope 104 {
                                                                                        debug val => _468;
                                                                                        scope 105 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                                scope 98 {
                                                                                    debug residual => _453;
                                                                                    scope 99 {
                                                                                    }
                                                                                }
                                                                                scope 100 {
                                                                                    debug val => _456;
                                                                                    scope 101 {
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 93 {
                                                                                debug residual => _443;
                                                                                scope 94 {
                                                                                }
                                                                            }
                                                                            scope 95 {
                                                                                debug val => _446;
                                                                                scope 96 {
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                scope 85 {
                                                                    debug residual => _371;
                                                                    scope 86 {
                                                                    }
                                                                }
                                                                scope 87 {
                                                                    debug val => _374;
                                                                    scope 88 {
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        scope 75 {
                                                            debug residual => _274;
                                                            scope 76 {
                                                            }
                                                        }
                                                        scope 77 {
                                                            debug val => _277;
                                                            scope 78 {
                                                            }
                                                        }
                                                    }
                                                    scope 58 {
                                                        debug residual => _156;
                                                        scope 59 {
                                                        }
                                                    }
                                                    scope 60 {
                                                        debug val => _159;
                                                        scope 61 {
                                                        }
                                                    }
                                                }
                                                scope 53 {
                                                    debug residual => _118;
                                                    scope 54 {
                                                    }
                                                }
                                                scope 55 {
                                                    debug val => _121;
                                                    scope 56 {
                                                    }
                                                }
                                            }
                                            scope 48 {
                                                debug residual => _102;
                                                scope 49 {
                                                }
                                            }
                                            scope 50 {
                                                debug val => _105;
                                                scope 51 {
                                                }
                                            }
                                        }
                                        scope 43 {
                                            debug residual => _93;
                                            scope 44 {
                                            }
                                        }
                                        scope 45 {
                                            debug val => _96;
                                            scope 46 {
                                            }
                                        }
                                    }
                                    scope 38 {
                                        debug residual => _84;
                                        scope 39 {
                                        }
                                    }
                                    scope 40 {
                                        debug val => _87;
                                        scope 41 {
                                        }
                                    }
                                }
                                scope 33 {
                                    debug residual => _75;
                                    scope 34 {
                                    }
                                }
                                scope 35 {
                                    debug val => _78;
                                    scope 36 {
                                    }
                                }
                            }
                            scope 28 {
                                debug residual => _66;
                                scope 29 {
                                }
                            }
                            scope 30 {
                                debug val => _69;
                                scope 31 {
                                }
                            }
                        }
                        scope 23 {
                            debug residual => _57;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _60;
                            scope 26 {
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _48;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _51;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _39;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _42;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _30;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _33;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _21;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _24;
            scope 6 {
            }
        }
    }

    bb0: {
        _828 = const false;
        _830 = const false;
        _833 = const false;
        _832 = const false;
        _829 = const false;
        _831 = const false;
        _827 = const false;
        _826 = const false;
        _825 = const false;
        _824 = const false;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = _2;
        _5 = Eq(move _6, const 0_u64);
        switchInt(move _5) -> [0: bb4, otherwise: bb1];
    }

    bb1: {
        StorageDead(_6);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = const "Liquidity amount provided cannot be zero";
        _9 = &(*_10);
        _8 = solana_program::log::sol_log(move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_9);
        StorageDead(_10);
        StorageDead(_8);
        StorageLive(_11);
        StorageLive(_12);
        _12 = InvalidAmount;
        _11 = <LendingError as Into<ProgramError>>::into(move _12) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_12);
        _0 = Result::<(), ProgramError>::Err(move _11);
        StorageDead(_11);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb451;
    }

    bb4: {
        StorageDead(_6);
        _4 = const ();
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &(*_3);
        _14 = bytemuck::core::slice::<impl [AccountInfo<'_>]>::iter(move _15) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_15);
        _13 = &mut _14;
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &mut (*_13);
        _18 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _19) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_19);
        _17 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _18) -> [return: bb7, unwind: bb471];
    }

    bb7: {
        StorageDead(_18);
        _20 = discriminant(_17);
        switchInt(move _20) -> [0: bb8, 1: bb10, otherwise: bb9];
    }

    bb8: {
        StorageLive(_24);
        _24 = ((_17 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _16 = _24;
        StorageDead(_24);
        _834 = discriminant(_17);
        StorageDead(_17);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &mut (*_13);
        _27 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _28) -> [return: bb12, unwind continue];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        StorageLive(_21);
        _21 = move ((_17 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_23);
        _23 = move _21;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _23) -> [return: bb11, unwind: bb521];
    }

    bb11: {
        StorageDead(_23);
        StorageDead(_21);
        _1000 = discriminant(_17);
        StorageDead(_17);
        goto -> bb450;
    }

    bb12: {
        StorageDead(_28);
        _26 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _27) -> [return: bb13, unwind: bb471];
    }

    bb13: {
        StorageDead(_27);
        _29 = discriminant(_26);
        switchInt(move _29) -> [0: bb14, 1: bb15, otherwise: bb9];
    }

    bb14: {
        StorageLive(_33);
        _33 = ((_26 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _25 = _33;
        StorageDead(_33);
        _836 = discriminant(_26);
        StorageDead(_26);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &mut (*_13);
        _36 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _37) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_30);
        _30 = move ((_26 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_32);
        _32 = move _30;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _32) -> [return: bb16, unwind: bb520];
    }

    bb16: {
        StorageDead(_32);
        StorageDead(_30);
        _998 = discriminant(_26);
        StorageDead(_26);
        goto -> bb449;
    }

    bb17: {
        StorageDead(_37);
        _35 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _36) -> [return: bb18, unwind: bb471];
    }

    bb18: {
        StorageDead(_36);
        _38 = discriminant(_35);
        switchInt(move _38) -> [0: bb19, 1: bb20, otherwise: bb9];
    }

    bb19: {
        StorageLive(_42);
        _42 = ((_35 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _34 = _42;
        StorageDead(_42);
        _838 = discriminant(_35);
        StorageDead(_35);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = &mut (*_13);
        _45 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _46) -> [return: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_39);
        _39 = move ((_35 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_41);
        _41 = move _39;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _41) -> [return: bb21, unwind: bb519];
    }

    bb21: {
        StorageDead(_41);
        StorageDead(_39);
        _996 = discriminant(_35);
        StorageDead(_35);
        goto -> bb448;
    }

    bb22: {
        StorageDead(_46);
        _44 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _45) -> [return: bb23, unwind: bb471];
    }

    bb23: {
        StorageDead(_45);
        _47 = discriminant(_44);
        switchInt(move _47) -> [0: bb24, 1: bb25, otherwise: bb9];
    }

    bb24: {
        StorageLive(_51);
        _51 = ((_44 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _43 = _51;
        StorageDead(_51);
        _840 = discriminant(_44);
        StorageDead(_44);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &mut (*_13);
        _54 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _55) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_48);
        _48 = move ((_44 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_50);
        _50 = move _48;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _50) -> [return: bb26, unwind: bb518];
    }

    bb26: {
        StorageDead(_50);
        StorageDead(_48);
        _994 = discriminant(_44);
        StorageDead(_44);
        goto -> bb447;
    }

    bb27: {
        StorageDead(_55);
        _53 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _54) -> [return: bb28, unwind: bb471];
    }

    bb28: {
        StorageDead(_54);
        _56 = discriminant(_53);
        switchInt(move _56) -> [0: bb29, 1: bb30, otherwise: bb9];
    }

    bb29: {
        StorageLive(_60);
        _60 = ((_53 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _52 = _60;
        StorageDead(_60);
        _842 = discriminant(_53);
        StorageDead(_53);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = &mut (*_13);
        _63 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _64) -> [return: bb32, unwind continue];
    }

    bb30: {
        StorageLive(_57);
        _57 = move ((_53 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_59);
        _59 = move _57;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _59) -> [return: bb31, unwind: bb517];
    }

    bb31: {
        StorageDead(_59);
        StorageDead(_57);
        _992 = discriminant(_53);
        StorageDead(_53);
        goto -> bb446;
    }

    bb32: {
        StorageDead(_64);
        _62 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _63) -> [return: bb33, unwind: bb471];
    }

    bb33: {
        StorageDead(_63);
        _65 = discriminant(_62);
        switchInt(move _65) -> [0: bb34, 1: bb35, otherwise: bb9];
    }

    bb34: {
        StorageLive(_69);
        _69 = ((_62 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _61 = _69;
        StorageDead(_69);
        _844 = discriminant(_62);
        StorageDead(_62);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _73 = &mut (*_13);
        _72 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _73) -> [return: bb37, unwind continue];
    }

    bb35: {
        StorageLive(_66);
        _66 = move ((_62 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_68);
        _68 = move _66;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _68) -> [return: bb36, unwind: bb516];
    }

    bb36: {
        StorageDead(_68);
        StorageDead(_66);
        _990 = discriminant(_62);
        StorageDead(_62);
        goto -> bb445;
    }

    bb37: {
        StorageDead(_73);
        _71 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _72) -> [return: bb38, unwind: bb471];
    }

    bb38: {
        StorageDead(_72);
        _74 = discriminant(_71);
        switchInt(move _74) -> [0: bb39, 1: bb40, otherwise: bb9];
    }

    bb39: {
        StorageLive(_78);
        _78 = ((_71 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _70 = _78;
        StorageDead(_78);
        _846 = discriminant(_71);
        StorageDead(_71);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = &mut (*_13);
        _81 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _82) -> [return: bb42, unwind continue];
    }

    bb40: {
        StorageLive(_75);
        _75 = move ((_71 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_77);
        _77 = move _75;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _77) -> [return: bb41, unwind: bb515];
    }

    bb41: {
        StorageDead(_77);
        StorageDead(_75);
        _988 = discriminant(_71);
        StorageDead(_71);
        goto -> bb444;
    }

    bb42: {
        StorageDead(_82);
        _80 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _81) -> [return: bb43, unwind: bb471];
    }

    bb43: {
        StorageDead(_81);
        _83 = discriminant(_80);
        switchInt(move _83) -> [0: bb44, 1: bb45, otherwise: bb9];
    }

    bb44: {
        StorageLive(_87);
        _87 = ((_80 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _79 = _87;
        StorageDead(_87);
        _848 = discriminant(_80);
        StorageDead(_80);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = <Clock as Sysvar>::get() -> [return: bb47, unwind continue];
    }

    bb45: {
        StorageLive(_84);
        _84 = move ((_80 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_86);
        _86 = move _84;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _86) -> [return: bb46, unwind: bb514];
    }

    bb46: {
        StorageDead(_86);
        StorageDead(_84);
        _986 = discriminant(_80);
        StorageDead(_80);
        goto -> bb443;
    }

    bb47: {
        _90 = <Result<Clock, ProgramError> as Try>::branch(move _91) -> [return: bb48, unwind: bb471];
    }

    bb48: {
        StorageDead(_91);
        _92 = discriminant(_90);
        switchInt(move _92) -> [0: bb49, 1: bb50, otherwise: bb9];
    }

    bb49: {
        StorageLive(_96);
        _96 = move ((_90 as Continue).0: solana_program::clock::Clock);
        _89 = move _96;
        StorageDead(_96);
        _88 = &_89;
        _850 = discriminant(_90);
        StorageDead(_90);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = &mut (*_13);
        _99 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _100) -> [return: bb52, unwind continue];
    }

    bb50: {
        StorageLive(_93);
        _93 = move ((_90 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_95);
        _95 = move _93;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _95) -> [return: bb51, unwind: bb513];
    }

    bb51: {
        StorageDead(_95);
        StorageDead(_93);
        _984 = discriminant(_90);
        StorageDead(_90);
        goto -> bb442;
    }

    bb52: {
        StorageDead(_100);
        _98 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _99) -> [return: bb53, unwind: bb471];
    }

    bb53: {
        StorageDead(_99);
        _101 = discriminant(_98);
        switchInt(move _101) -> [0: bb54, 1: bb55, otherwise: bb9];
    }

    bb54: {
        StorageLive(_105);
        _105 = ((_98 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _97 = _105;
        StorageDead(_105);
        _852 = discriminant(_98);
        StorageDead(_98);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        _116 = &((*_61).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _115 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _116) -> [return: bb57, unwind continue];
    }

    bb55: {
        StorageLive(_102);
        _102 = move ((_98 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_104);
        _104 = move _102;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _104) -> [return: bb56, unwind: bb512];
    }

    bb56: {
        StorageDead(_104);
        StorageDead(_102);
        _982 = discriminant(_98);
        StorageDead(_98);
        goto -> bb441;
    }

    bb57: {
        _114 = &(*_115);
        StorageDead(_116);
        _113 = RefCell::<&mut [u8]>::borrow(move _114) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_114);
        _112 = &_113;
        _111 = &(*_112);
        _110 = <Ref<'_, &mut [u8]> as Deref>::deref(move _111) -> [return: bb59, unwind: bb470];
    }

    bb59: {
        _816 = deref_copy (*_110);
        _109 = &(*_816);
        StorageDead(_111);
        _108 = <LendingMarket as Pack>::unpack(move _109) -> [return: bb60, unwind: bb470];
    }

    bb60: {
        StorageDead(_109);
        _107 = <Result<LendingMarket, ProgramError> as Try>::branch(move _108) -> [return: bb61, unwind: bb470];
    }

    bb61: {
        StorageDead(_108);
        _117 = discriminant(_107);
        switchInt(move _117) -> [0: bb62, 1: bb63, otherwise: bb9];
    }

    bb62: {
        StorageLive(_121);
        _121 = move ((_107 as Continue).0: solend_sdk::state::LendingMarket);
        _106 = move _121;
        StorageDead(_121);
        _854 = discriminant(_107);
        drop(_113) -> [return: bb65, unwind: bb471];
    }

    bb63: {
        StorageLive(_118);
        _118 = move ((_107 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_120);
        _120 = move _118;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _120) -> [return: bb64, unwind: bb511];
    }

    bb64: {
        StorageDead(_120);
        StorageDead(_118);
        _980 = discriminant(_107);
        drop(_113) -> [return: bb439, unwind: bb471];
    }

    bb65: {
        StorageDead(_115);
        StorageDead(_113);
        StorageDead(_112);
        StorageDead(_110);
        StorageDead(_107);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        _124 = &((*_61).3: &solana_program::pubkey::Pubkey);
        StorageLive(_125);
        _125 = &_1;
        _123 = <&Pubkey as PartialEq>::ne(move _124, move _125) -> [return: bb66, unwind continue];
    }

    bb66: {
        switchInt(move _123) -> [0: bb70, otherwise: bb67];
    }

    bb67: {
        StorageDead(_125);
        StorageDead(_124);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _129 = const "Lending market provided is not owned by the lending program";
        _128 = &(*_129);
        _127 = solana_program::log::sol_log(move _128) -> [return: bb68, unwind continue];
    }

    bb68: {
        StorageDead(_128);
        StorageDead(_129);
        StorageDead(_127);
        StorageLive(_130);
        StorageLive(_131);
        _131 = solend_sdk::error::LendingError::InvalidAccountOwner;
        _130 = <LendingError as Into<ProgramError>>::into(move _131) -> [return: bb69, unwind continue];
    }

    bb69: {
        StorageDead(_131);
        _0 = Result::<(), ProgramError>::Err(move _130);
        StorageDead(_130);
        StorageDead(_123);
        StorageDead(_122);
        goto -> bb440;
    }

    bb70: {
        StorageDead(_125);
        StorageDead(_124);
        _122 = const ();
        StorageDead(_123);
        StorageDead(_122);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        _135 = &(_106.4: solana_program::pubkey::Pubkey);
        _134 = &_135;
        StorageLive(_136);
        _136 = &((*_97).0: &solana_program::pubkey::Pubkey);
        _133 = <&Pubkey as PartialEq>::ne(move _134, move _136) -> [return: bb71, unwind continue];
    }

    bb71: {
        switchInt(move _133) -> [0: bb75, otherwise: bb72];
    }

    bb72: {
        StorageDead(_136);
        StorageDead(_135);
        StorageDead(_134);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        _140 = const "Lending market token program does not match the token program provided";
        _139 = &(*_140);
        _138 = solana_program::log::sol_log(move _139) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_139);
        StorageDead(_140);
        StorageDead(_138);
        StorageLive(_141);
        StorageLive(_142);
        _142 = InvalidTokenProgram;
        _141 = <LendingError as Into<ProgramError>>::into(move _142) -> [return: bb74, unwind continue];
    }

    bb74: {
        StorageDead(_142);
        _0 = Result::<(), ProgramError>::Err(move _141);
        StorageDead(_141);
        StorageDead(_133);
        StorageDead(_132);
        goto -> bb440;
    }

    bb75: {
        StorageDead(_136);
        StorageDead(_135);
        StorageDead(_134);
        _132 = const ();
        StorageDead(_133);
        StorageDead(_132);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        _154 = &((*_34).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _153 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _154) -> [return: bb76, unwind continue];
    }

    bb76: {
        _152 = &(*_153);
        StorageDead(_154);
        _151 = RefCell::<&mut [u8]>::borrow(move _152) -> [return: bb77, unwind continue];
    }

    bb77: {
        StorageDead(_152);
        _150 = &_151;
        _149 = &(*_150);
        _148 = <Ref<'_, &mut [u8]> as Deref>::deref(move _149) -> [return: bb78, unwind: bb469];
    }

    bb78: {
        _817 = deref_copy (*_148);
        _147 = &(*_817);
        StorageDead(_149);
        _146 = <Reserve as Pack>::unpack(move _147) -> [return: bb79, unwind: bb469];
    }

    bb79: {
        StorageDead(_147);
        _145 = <Result<Reserve, ProgramError> as Try>::branch(move _146) -> [return: bb80, unwind: bb469];
    }

    bb80: {
        _832 = const true;
        _833 = const true;
        StorageDead(_146);
        _155 = discriminant(_145);
        switchInt(move _155) -> [0: bb81, 1: bb82, otherwise: bb9];
    }

    bb81: {
        StorageLive(_159);
        _159 = move ((_145 as Continue).0: solend_sdk::state::Reserve);
        _144 = move _159;
        StorageDead(_159);
        _143 = Box::<Reserve>::new(move _144) -> [return: bb84, unwind: bb510];
    }

    bb82: {
        StorageLive(_156);
        _156 = move ((_145 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_158);
        _158 = move _156;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _158) -> [return: bb83, unwind: bb510];
    }

    bb83: {
        StorageDead(_158);
        StorageDead(_156);
        StorageDead(_144);
        _978 = discriminant(_145);
        drop(_151) -> [return: bb437, unwind: bb471];
    }

    bb84: {
        StorageDead(_144);
        _856 = discriminant(_145);
        drop(_151) -> [return: bb85, unwind: bb468];
    }

    bb85: {
        StorageDead(_153);
        StorageDead(_151);
        StorageDead(_150);
        StorageDead(_148);
        _832 = const false;
        _833 = const false;
        StorageDead(_145);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        _162 = &((*_34).3: &solana_program::pubkey::Pubkey);
        StorageLive(_163);
        _163 = &_1;
        _161 = <&Pubkey as PartialEq>::ne(move _162, move _163) -> [return: bb86, unwind: bb468];
    }

    bb86: {
        switchInt(move _161) -> [0: bb90, otherwise: bb87];
    }

    bb87: {
        StorageDead(_163);
        StorageDead(_162);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        _167 = const "Borrow reserve provided is not owned by the lending program";
        _166 = &(*_167);
        _165 = solana_program::log::sol_log(move _166) -> [return: bb88, unwind: bb468];
    }

    bb88: {
        StorageDead(_166);
        StorageDead(_167);
        StorageDead(_165);
        StorageLive(_168);
        StorageLive(_169);
        _169 = solend_sdk::error::LendingError::InvalidAccountOwner;
        _168 = <LendingError as Into<ProgramError>>::into(move _169) -> [return: bb89, unwind: bb468];
    }

    bb89: {
        StorageDead(_169);
        _0 = Result::<(), ProgramError>::Err(move _168);
        StorageDead(_168);
        StorageDead(_161);
        StorageDead(_160);
        goto -> bb436;
    }

    bb90: {
        StorageDead(_163);
        StorageDead(_162);
        _160 = const ();
        StorageDead(_161);
        StorageDead(_160);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        _1042 = (((_143.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _173 = &((*_1042).2: solana_program::pubkey::Pubkey);
        _172 = &_173;
        StorageLive(_174);
        _174 = &((*_61).0: &solana_program::pubkey::Pubkey);
        _171 = <&Pubkey as PartialEq>::ne(move _172, move _174) -> [return: bb91, unwind: bb468];
    }

    bb91: {
        switchInt(move _171) -> [0: bb95, otherwise: bb92];
    }

    bb92: {
        StorageDead(_174);
        StorageDead(_173);
        StorageDead(_172);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        _178 = const "Borrow reserve lending market does not match the lending market provided";
        _177 = &(*_178);
        _176 = solana_program::log::sol_log(move _177) -> [return: bb93, unwind: bb468];
    }

    bb93: {
        StorageDead(_177);
        StorageDead(_178);
        StorageDead(_176);
        StorageLive(_179);
        StorageLive(_180);
        _180 = InvalidAccountInput;
        _179 = <LendingError as Into<ProgramError>>::into(move _180) -> [return: bb94, unwind: bb468];
    }

    bb94: {
        StorageDead(_180);
        _0 = Result::<(), ProgramError>::Err(move _179);
        StorageDead(_179);
        StorageDead(_171);
        StorageDead(_170);
        goto -> bb436;
    }

    bb95: {
        StorageDead(_174);
        StorageDead(_173);
        StorageDead(_172);
        _170 = const ();
        StorageDead(_171);
        StorageDead(_170);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        _1043 = (((_143.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _184 = &(((*_1043).3: solend_sdk::state::ReserveLiquidity).2: solana_program::pubkey::Pubkey);
        _183 = &_184;
        StorageLive(_185);
        _185 = &((*_16).0: &solana_program::pubkey::Pubkey);
        _182 = <&Pubkey as PartialEq>::ne(move _183, move _185) -> [return: bb96, unwind: bb468];
    }

    bb96: {
        switchInt(move _182) -> [0: bb100, otherwise: bb97];
    }

    bb97: {
        StorageDead(_185);
        StorageDead(_184);
        StorageDead(_183);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        _189 = const "Borrow reserve liquidity supply must be used as the source liquidity provided";
        _188 = &(*_189);
        _187 = solana_program::log::sol_log(move _188) -> [return: bb98, unwind: bb468];
    }

    bb98: {
        StorageDead(_188);
        StorageDead(_189);
        StorageDead(_187);
        StorageLive(_190);
        StorageLive(_191);
        _191 = InvalidAccountInput;
        _190 = <LendingError as Into<ProgramError>>::into(move _191) -> [return: bb99, unwind: bb468];
    }

    bb99: {
        StorageDead(_191);
        _0 = Result::<(), ProgramError>::Err(move _190);
        StorageDead(_190);
        StorageDead(_182);
        StorageDead(_181);
        goto -> bb436;
    }

    bb100: {
        StorageDead(_185);
        StorageDead(_184);
        StorageDead(_183);
        _181 = const ();
        StorageDead(_182);
        StorageDead(_181);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        _1044 = (((_143.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _195 = &(((*_1044).3: solend_sdk::state::ReserveLiquidity).2: solana_program::pubkey::Pubkey);
        _194 = &_195;
        StorageLive(_196);
        _196 = &((*_25).0: &solana_program::pubkey::Pubkey);
        _193 = <&Pubkey as PartialEq>::eq(move _194, move _196) -> [return: bb101, unwind: bb468];
    }

    bb101: {
        switchInt(move _193) -> [0: bb105, otherwise: bb102];
    }

    bb102: {
        StorageDead(_196);
        StorageDead(_195);
        StorageDead(_194);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        _200 = const "Borrow reserve liquidity supply cannot be used as the destination liquidity provided";
        _199 = &(*_200);
        _198 = solana_program::log::sol_log(move _199) -> [return: bb103, unwind: bb468];
    }

    bb103: {
        StorageDead(_199);
        StorageDead(_200);
        StorageDead(_198);
        StorageLive(_201);
        StorageLive(_202);
        _202 = InvalidAccountInput;
        _201 = <LendingError as Into<ProgramError>>::into(move _202) -> [return: bb104, unwind: bb468];
    }

    bb104: {
        StorageDead(_202);
        _0 = Result::<(), ProgramError>::Err(move _201);
        StorageDead(_201);
        StorageDead(_193);
        StorageDead(_192);
        goto -> bb436;
    }

    bb105: {
        StorageDead(_196);
        StorageDead(_195);
        StorageDead(_194);
        _192 = const ();
        StorageDead(_193);
        StorageDead(_192);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        _1045 = (((_143.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _206 = &(((*_1045).5: solend_sdk::state::ReserveConfig).14: solana_program::pubkey::Pubkey);
        _205 = &_206;
        StorageLive(_207);
        _207 = &((*_43).0: &solana_program::pubkey::Pubkey);
        _204 = <&Pubkey as PartialEq>::ne(move _205, move _207) -> [return: bb106, unwind: bb468];
    }

    bb106: {
        switchInt(move _204) -> [0: bb110, otherwise: bb107];
    }

    bb107: {
        StorageDead(_207);
        StorageDead(_206);
        StorageDead(_205);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        _211 = const "Borrow reserve liquidity fee receiver does not match the borrow reserve liquidity fee receiver provided";
        _210 = &(*_211);
        _209 = solana_program::log::sol_log(move _210) -> [return: bb108, unwind: bb468];
    }

    bb108: {
        StorageDead(_210);
        StorageDead(_211);
        StorageDead(_209);
        StorageLive(_212);
        StorageLive(_213);
        _213 = InvalidAccountInput;
        _212 = <LendingError as Into<ProgramError>>::into(move _213) -> [return: bb109, unwind: bb468];
    }

    bb109: {
        StorageDead(_213);
        _0 = Result::<(), ProgramError>::Err(move _212);
        StorageDead(_212);
        StorageDead(_204);
        StorageDead(_203);
        goto -> bb436;
    }

    bb110: {
        StorageDead(_207);
        StorageDead(_206);
        StorageDead(_205);
        _203 = const ();
        StorageDead(_204);
        StorageDead(_203);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        _1046 = (((_143.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _218 = &((*_1046).1: solend_sdk::state::LastUpdate);
        StorageLive(_219);
        _219 = ((*_88).0: u64);
        _217 = LastUpdate::is_stale(move _218, move _219) -> [return: bb111, unwind: bb468];
    }

    bb111: {
        StorageDead(_219);
        StorageDead(_218);
        _216 = <Result<bool, ProgramError> as Try>::branch(move _217) -> [return: bb112, unwind: bb468];
    }

    bb112: {
        StorageDead(_217);
        _220 = discriminant(_216);
        switchInt(move _220) -> [0: bb113, 1: bb114, otherwise: bb9];
    }

    bb113: {
        StorageLive(_224);
        _224 = ((_216 as Continue).0: bool);
        _215 = _224;
        StorageDead(_224);
        switchInt(move _215) -> [0: bb473, otherwise: bb472];
    }

    bb114: {
        StorageLive(_221);
        _221 = move ((_216 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_223);
        _223 = move _221;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _223) -> [return: bb115, unwind: bb509];
    }

    bb115: {
        StorageDead(_223);
        StorageDead(_221);
        _976 = discriminant(_216);
        StorageDead(_216);
        goto -> bb435;
    }

    bb116: {
        StorageDead(_227);
        StorageDead(_228);
        StorageDead(_226);
        StorageLive(_229);
        StorageLive(_230);
        _230 = ReserveStale;
        _229 = <LendingError as Into<ProgramError>>::into(move _230) -> [return: bb117, unwind: bb468];
    }

    bb117: {
        StorageDead(_230);
        _0 = Result::<(), ProgramError>::Err(move _229);
        StorageDead(_229);
        goto -> bb435;
    }

    bb118: {
        StorageDead(_233);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        _243 = _2;
        _242 = <Decimal as From<u64>>::from(move _243) -> [return: bb120, unwind: bb468];
    }

    bb119: {
        StorageDead(_233);
        goto -> bb135;
    }

    bb120: {
        StorageDead(_243);
        StorageLive(_244);
        _1047 = (((_143.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _1095 = _1047 as *const () (PtrToPtr);
        _1096 = _1095 as usize (Transmute);
        _1097 = AlignOf(solend_sdk::state::Reserve);
        _1098 = Sub(_1097, const 1_usize);
        _1099 = BitAnd(_1096, _1098);
        _1100 = Eq(_1099, const 0_usize);
        assert(_1100, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1097, _1096) -> [success: bb527, unwind unreachable];
    }

    bb121: {
        StorageDead(_244);
        StorageDead(_242);
        _240 = <Result<Decimal, ProgramError> as Try>::branch(move _241) -> [return: bb122, unwind: bb468];
    }

    bb122: {
        _829 = const true;
        StorageDead(_241);
        _245 = discriminant(_240);
        switchInt(move _245) -> [0: bb123, 1: bb124, otherwise: bb9];
    }

    bb123: {
        StorageLive(_249);
        _249 = ((_240 as Continue).0: solend_sdk::math::Decimal);
        _239 = _249;
        StorageDead(_249);
        _238 = &_239;
        _237 = Decimal::try_floor_u64(move _238) -> [return: bb126, unwind: bb508];
    }

    bb124: {
        StorageLive(_246);
        _246 = move ((_240 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_248);
        _248 = move _246;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _248) -> [return: bb125, unwind: bb508];
    }

    bb125: {
        StorageDead(_248);
        StorageDead(_246);
        StorageDead(_238);
        StorageDead(_237);
        goto -> bb433;
    }

    bb126: {
        StorageDead(_238);
        _236 = <Result<u64, ProgramError> as Try>::branch(move _237) -> [return: bb127, unwind: bb508];
    }

    bb127: {
        StorageDead(_237);
        _250 = discriminant(_236);
        switchInt(move _250) -> [0: bb128, 1: bb129, otherwise: bb9];
    }

    bb128: {
        StorageLive(_254);
        _254 = ((_236 as Continue).0: u64);
        _235 = _254;
        StorageDead(_254);
        StorageLive(_255);
        _1048 = (((_143.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _1089 = _1048 as *const () (PtrToPtr);
        _1090 = _1089 as usize (Transmute);
        _1091 = AlignOf(solend_sdk::state::Reserve);
        _1092 = Sub(_1091, const 1_usize);
        _1093 = BitAnd(_1090, _1092);
        _1094 = Eq(_1093, const 0_usize);
        assert(_1094, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1091, _1090) -> [success: bb526, unwind unreachable];
    }

    bb129: {
        StorageLive(_251);
        _251 = move ((_236 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_253);
        _253 = move _251;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _253) -> [return: bb130, unwind: bb507];
    }

    bb130: {
        StorageDead(_253);
        StorageDead(_251);
        _972 = discriminant(_236);
        goto -> bb433;
    }

    bb131: {
        StorageDead(_255);
        _862 = discriminant(_236);
        _866 = discriminant(_240);
        _829 = const false;
        StorageDead(_240);
        StorageDead(_239);
        StorageDead(_236);
        StorageDead(_235);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        _259 = const "Cannot borrow above the borrow limit";
        _258 = &(*_259);
        _257 = solana_program::log::sol_log(move _258) -> [return: bb133, unwind: bb468];
    }

    bb132: {
        StorageDead(_255);
        _864 = discriminant(_236);
        _868 = discriminant(_240);
        _829 = const false;
        StorageDead(_240);
        StorageDead(_239);
        StorageDead(_236);
        StorageDead(_235);
        goto -> bb135;
    }

    bb133: {
        StorageDead(_258);
        StorageDead(_259);
        StorageDead(_257);
        StorageLive(_260);
        StorageLive(_261);
        _261 = InvalidAmount;
        _260 = <LendingError as Into<ProgramError>>::into(move _261) -> [return: bb134, unwind: bb468];
    }

    bb134: {
        StorageDead(_261);
        _0 = Result::<(), ProgramError>::Err(move _260);
        StorageDead(_260);
        goto -> bb434;
    }

    bb135: {
        _231 = const ();
        StorageDead(_234);
        StorageDead(_232);
        StorageDead(_231);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        _272 = &((*_52).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _271 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _272) -> [return: bb136, unwind: bb468];
    }

    bb136: {
        _270 = &(*_271);
        StorageDead(_272);
        _269 = RefCell::<&mut [u8]>::borrow(move _270) -> [return: bb137, unwind: bb468];
    }

    bb137: {
        StorageDead(_270);
        _268 = &_269;
        _267 = &(*_268);
        _266 = <Ref<'_, &mut [u8]> as Deref>::deref(move _267) -> [return: bb138, unwind: bb467];
    }

    bb138: {
        _818 = deref_copy (*_266);
        _265 = &(*_818);
        StorageDead(_267);
        _264 = <Obligation as Pack>::unpack(move _265) -> [return: bb139, unwind: bb467];
    }

    bb139: {
        StorageDead(_265);
        _263 = <Result<Obligation, ProgramError> as Try>::branch(move _264) -> [return: bb140, unwind: bb467];
    }

    bb140: {
        StorageDead(_264);
        _273 = discriminant(_263);
        switchInt(move _273) -> [0: bb141, 1: bb142, otherwise: bb9];
    }

    bb141: {
        StorageLive(_277);
        _277 = move ((_263 as Continue).0: solend_sdk::state::Obligation);
        _828 = const true;
        _262 = move _277;
        StorageDead(_277);
        _870 = discriminant(_263);
        drop(_269) -> [return: bb144, unwind: bb505];
    }

    bb142: {
        StorageLive(_274);
        _274 = move ((_263 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_276);
        _276 = move _274;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _276) -> [return: bb143, unwind: bb506];
    }

    bb143: {
        StorageDead(_276);
        StorageDead(_274);
        _970 = discriminant(_263);
        drop(_269) -> [return: bb431, unwind: bb468];
    }

    bb144: {
        StorageDead(_271);
        StorageDead(_269);
        StorageDead(_268);
        StorageDead(_266);
        StorageDead(_263);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        _280 = &((*_52).3: &solana_program::pubkey::Pubkey);
        StorageLive(_281);
        _281 = &_1;
        _279 = <&Pubkey as PartialEq>::ne(move _280, move _281) -> [return: bb145, unwind: bb505];
    }

    bb145: {
        switchInt(move _279) -> [0: bb149, otherwise: bb146];
    }

    bb146: {
        StorageDead(_281);
        StorageDead(_280);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        _285 = const "Obligation provided is not owned by the lending program";
        _284 = &(*_285);
        _283 = solana_program::log::sol_log(move _284) -> [return: bb147, unwind: bb505];
    }

    bb147: {
        StorageDead(_284);
        StorageDead(_285);
        StorageDead(_283);
        StorageLive(_286);
        StorageLive(_287);
        _287 = solend_sdk::error::LendingError::InvalidAccountOwner;
        _286 = <LendingError as Into<ProgramError>>::into(move _287) -> [return: bb148, unwind: bb505];
    }

    bb148: {
        StorageDead(_287);
        _0 = Result::<(), ProgramError>::Err(move _286);
        StorageDead(_286);
        StorageDead(_279);
        StorageDead(_278);
        goto -> bb477;
    }

    bb149: {
        StorageDead(_281);
        StorageDead(_280);
        _278 = const ();
        StorageDead(_279);
        StorageDead(_278);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        _291 = &(_262.2: solana_program::pubkey::Pubkey);
        _290 = &_291;
        StorageLive(_292);
        _292 = &((*_61).0: &solana_program::pubkey::Pubkey);
        _289 = <&Pubkey as PartialEq>::ne(move _290, move _292) -> [return: bb150, unwind: bb505];
    }

    bb150: {
        switchInt(move _289) -> [0: bb154, otherwise: bb151];
    }

    bb151: {
        StorageDead(_292);
        StorageDead(_291);
        StorageDead(_290);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        _296 = const "Obligation lending market does not match the lending market provided";
        _295 = &(*_296);
        _294 = solana_program::log::sol_log(move _295) -> [return: bb152, unwind: bb505];
    }

    bb152: {
        StorageDead(_295);
        StorageDead(_296);
        StorageDead(_294);
        StorageLive(_297);
        StorageLive(_298);
        _298 = InvalidAccountInput;
        _297 = <LendingError as Into<ProgramError>>::into(move _298) -> [return: bb153, unwind: bb505];
    }

    bb153: {
        StorageDead(_298);
        _0 = Result::<(), ProgramError>::Err(move _297);
        StorageDead(_297);
        StorageDead(_289);
        StorageDead(_288);
        goto -> bb477;
    }

    bb154: {
        StorageDead(_292);
        StorageDead(_291);
        StorageDead(_290);
        _288 = const ();
        StorageDead(_289);
        StorageDead(_288);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        _302 = &(_262.3: solana_program::pubkey::Pubkey);
        _301 = &_302;
        StorageLive(_303);
        _303 = &((*_79).0: &solana_program::pubkey::Pubkey);
        _300 = <&Pubkey as PartialEq>::ne(move _301, move _303) -> [return: bb155, unwind: bb505];
    }

    bb155: {
        switchInt(move _300) -> [0: bb159, otherwise: bb156];
    }

    bb156: {
        StorageDead(_303);
        StorageDead(_302);
        StorageDead(_301);
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        _307 = const "Obligation owner does not match the obligation owner provided";
        _306 = &(*_307);
        _305 = solana_program::log::sol_log(move _306) -> [return: bb157, unwind: bb505];
    }

    bb157: {
        StorageDead(_306);
        StorageDead(_307);
        StorageDead(_305);
        StorageLive(_308);
        StorageLive(_309);
        _309 = InvalidObligationOwner;
        _308 = <LendingError as Into<ProgramError>>::into(move _309) -> [return: bb158, unwind: bb505];
    }

    bb158: {
        StorageDead(_309);
        _0 = Result::<(), ProgramError>::Err(move _308);
        StorageDead(_308);
        StorageDead(_300);
        StorageDead(_299);
        goto -> bb477;
    }

    bb159: {
        StorageDead(_303);
        StorageDead(_302);
        StorageDead(_301);
        _299 = const ();
        StorageDead(_300);
        StorageDead(_299);
        StorageLive(_310);
        StorageLive(_311);
        _311 = ((*_79).5: bool);
        switchInt(move _311) -> [0: bb161, otherwise: bb160];
    }

    bb160: {
        _310 = const ();
        StorageDead(_311);
        StorageDead(_310);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        _322 = &(_262.1: solend_sdk::state::LastUpdate);
        StorageLive(_323);
        _323 = ((*_88).0: u64);
        _321 = LastUpdate::is_stale(move _322, move _323) -> [return: bb164, unwind: bb505];
    }

    bb161: {
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        _315 = const "Obligation owner provided must be a signer";
        _314 = &(*_315);
        _313 = solana_program::log::sol_log(move _314) -> [return: bb162, unwind: bb505];
    }

    bb162: {
        StorageDead(_314);
        StorageDead(_315);
        StorageDead(_313);
        StorageLive(_316);
        StorageLive(_317);
        _317 = InvalidSigner;
        _316 = <LendingError as Into<ProgramError>>::into(move _317) -> [return: bb163, unwind: bb505];
    }

    bb163: {
        StorageDead(_317);
        _0 = Result::<(), ProgramError>::Err(move _316);
        StorageDead(_316);
        StorageDead(_311);
        StorageDead(_310);
        goto -> bb477;
    }

    bb164: {
        StorageDead(_323);
        StorageDead(_322);
        _320 = <Result<bool, ProgramError> as Try>::branch(move _321) -> [return: bb165, unwind: bb505];
    }

    bb165: {
        StorageDead(_321);
        _324 = discriminant(_320);
        switchInt(move _324) -> [0: bb166, 1: bb167, otherwise: bb9];
    }

    bb166: {
        StorageLive(_328);
        _328 = ((_320 as Continue).0: bool);
        _319 = _328;
        StorageDead(_328);
        switchInt(move _319) -> [0: bb475, otherwise: bb474];
    }

    bb167: {
        StorageLive(_325);
        _325 = move ((_320 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_327);
        _327 = move _325;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _327) -> [return: bb168, unwind: bb503];
    }

    bb168: {
        StorageDead(_327);
        StorageDead(_325);
        _968 = discriminant(_320);
        StorageDead(_320);
        goto -> bb430;
    }

    bb169: {
        StorageDead(_331);
        StorageDead(_332);
        StorageDead(_330);
        StorageLive(_333);
        StorageLive(_334);
        _334 = ObligationStale;
        _333 = <LendingError as Into<ProgramError>>::into(move _334) -> [return: bb170, unwind: bb505];
    }

    bb170: {
        StorageDead(_334);
        _0 = Result::<(), ProgramError>::Err(move _333);
        StorageDead(_333);
        goto -> bb430;
    }

    bb171: {
        switchInt(move _336) -> [0: bb175, otherwise: bb172];
    }

    bb172: {
        StorageDead(_337);
        StorageLive(_339);
        StorageLive(_340);
        StorageLive(_341);
        _341 = const "Obligation has no deposits to borrow against";
        _340 = &(*_341);
        _339 = solana_program::log::sol_log(move _340) -> [return: bb173, unwind: bb505];
    }

    bb173: {
        StorageDead(_340);
        StorageDead(_341);
        StorageDead(_339);
        StorageLive(_342);
        StorageLive(_343);
        _343 = ObligationDepositsEmpty;
        _342 = <LendingError as Into<ProgramError>>::into(move _343) -> [return: bb174, unwind: bb505];
    }

    bb174: {
        StorageDead(_343);
        _0 = Result::<(), ProgramError>::Err(move _342);
        StorageDead(_342);
        StorageDead(_336);
        StorageDead(_335);
        goto -> bb477;
    }

    bb175: {
        StorageDead(_337);
        _335 = const ();
        StorageDead(_336);
        StorageDead(_335);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        _346 = &(_262.6: solend_sdk::math::Decimal);
        StorageLive(_347);
        StorageLive(_348);
        _348 = Decimal::zero() -> [return: bb176, unwind: bb505];
    }

    bb176: {
        _347 = &_348;
        _345 = <Decimal as PartialEq>::eq(move _346, move _347) -> [return: bb177, unwind: bb505];
    }

    bb177: {
        switchInt(move _345) -> [0: bb181, otherwise: bb178];
    }

    bb178: {
        StorageDead(_348);
        StorageDead(_347);
        StorageDead(_346);
        StorageLive(_350);
        StorageLive(_351);
        StorageLive(_352);
        _352 = const "Obligation deposits have zero value";
        _351 = &(*_352);
        _350 = solana_program::log::sol_log(move _351) -> [return: bb179, unwind: bb505];
    }

    bb179: {
        StorageDead(_351);
        StorageDead(_352);
        StorageDead(_350);
        StorageLive(_353);
        StorageLive(_354);
        _354 = ObligationDepositsZero;
        _353 = <LendingError as Into<ProgramError>>::into(move _354) -> [return: bb180, unwind: bb505];
    }

    bb180: {
        StorageDead(_354);
        _0 = Result::<(), ProgramError>::Err(move _353);
        StorageDead(_353);
        StorageDead(_345);
        StorageDead(_344);
        goto -> bb477;
    }

    bb181: {
        StorageDead(_348);
        StorageDead(_347);
        StorageDead(_346);
        _344 = const ();
        StorageDead(_345);
        StorageDead(_344);
        StorageLive(_355);
        StorageLive(_356);
        StorageLive(_357);
        StorageLive(_358);
        _819 = deref_copy ((*_61).0: &solana_program::pubkey::Pubkey);
        _358 = &(*_819);
        _357 = <Pubkey as AsRef<[u8]>>::as_ref(move _358) -> [return: bb182, unwind: bb505];
    }

    bb182: {
        StorageDead(_358);
        StorageLive(_359);
        StorageLive(_360);
        StorageLive(_361);
        StorageLive(_362);
        StorageLive(_363);
        _363 = (_106.1: u8);
        _362 = [move _363];
        StorageDead(_363);
        _361 = &_362;
        _360 = &(*_361);
        _359 = move _360 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_360);
        _356 = [move _357, move _359];
        StorageDead(_359);
        StorageDead(_357);
        _355 = &_356;
        StorageDead(_361);
        StorageLive(_364);
        StorageLive(_365);
        StorageLive(_366);
        StorageLive(_367);
        StorageLive(_368);
        _368 = &(*_355);
        _367 = move _368 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_368);
        StorageLive(_369);
        _369 = &(*_1);
        _366 = Pubkey::create_program_address(move _367, move _369) -> [return: bb183, unwind: bb505];
    }

    bb183: {
        StorageDead(_369);
        StorageDead(_367);
        _365 = <Result<Pubkey, PubkeyError> as Try>::branch(move _366) -> [return: bb184, unwind: bb505];
    }

    bb184: {
        StorageDead(_366);
        _370 = discriminant(_365);
        switchInt(move _370) -> [0: bb185, 1: bb186, otherwise: bb9];
    }

    bb185: {
        StorageLive(_374);
        _374 = ((_365 as Continue).0: solana_program::pubkey::Pubkey);
        _364 = _374;
        StorageDead(_374);
        StorageDead(_365);
        StorageLive(_375);
        StorageLive(_376);
        StorageLive(_377);
        StorageLive(_378);
        _378 = &_364;
        _377 = &_378;
        StorageLive(_379);
        _379 = &((*_70).0: &solana_program::pubkey::Pubkey);
        _376 = <&Pubkey as PartialEq>::ne(move _377, move _379) -> [return: bb188, unwind: bb505];
    }

    bb186: {
        StorageLive(_371);
        _371 = move ((_365 as Break).0: std::result::Result<std::convert::Infallible, solana_program::pubkey::PubkeyError>);
        StorageLive(_373);
        _373 = move _371;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, PubkeyError>>>::from_residual(move _373) -> [return: bb187, unwind: bb505];
    }

    bb187: {
        StorageDead(_373);
        StorageDead(_371);
        StorageDead(_365);
        goto -> bb429;
    }

    bb188: {
        switchInt(move _376) -> [0: bb192, otherwise: bb189];
    }

    bb189: {
        StorageDead(_379);
        StorageDead(_378);
        StorageDead(_377);
        StorageLive(_381);
        StorageLive(_382);
        StorageLive(_383);
        _383 = const "Derived lending market authority does not match the lending market authority provided";
        _382 = &(*_383);
        _381 = solana_program::log::sol_log(move _382) -> [return: bb190, unwind: bb505];
    }

    bb190: {
        StorageDead(_382);
        StorageDead(_383);
        StorageDead(_381);
        StorageLive(_384);
        StorageLive(_385);
        _385 = InvalidMarketAuthority;
        _384 = <LendingError as Into<ProgramError>>::into(move _385) -> [return: bb191, unwind: bb505];
    }

    bb191: {
        StorageDead(_385);
        _0 = Result::<(), ProgramError>::Err(move _384);
        StorageDead(_384);
        StorageDead(_376);
        StorageDead(_375);
        goto -> bb429;
    }

    bb192: {
        StorageDead(_379);
        StorageDead(_378);
        StorageDead(_377);
        _375 = const ();
        StorageDead(_376);
        StorageDead(_375);
        StorageLive(_386);
        _1049 = (((_143.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _1050 = (((_143.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _387 = discriminant((((*_1050).5: solend_sdk::state::ReserveConfig).18: solend_sdk::state::ReserveType));
        switchInt(move _387) -> [0: bb193, 1: bb194, otherwise: bb9];
    }

    bb193: {
        StorageLive(_408);
        _408 = (_262.13: bool);
        switchInt(move _408) -> [0: bb211, otherwise: bb208];
    }

    bb194: {
        StorageLive(_388);
        StorageLive(_389);
        _389 = &(_262.5: std::vec::Vec<solend_sdk::state::ObligationLiquidity>);
        _388 = Vec::<ObligationLiquidity>::len(move _389) -> [return: bb195, unwind: bb505];
    }

    bb195: {
        StorageDead(_389);
        switchInt(_388) -> [0: bb197, 1: bb198, otherwise: bb196];
    }

    bb196: {
        StorageLive(_403);
        StorageLive(_404);
        StorageLive(_405);
        _405 = const "If you want to borrow an isolated tier asset, there can't be any other borrows in your obligation";
        _404 = &(*_405);
        _403 = solana_program::log::sol_log(move _404) -> [return: bb205, unwind: bb505];
    }

    bb197: {
        _386 = const ();
        goto -> bb207;
    }

    bb198: {
        StorageLive(_390);
        StorageLive(_391);
        StorageLive(_392);
        StorageLive(_393);
        StorageLive(_394);
        _394 = &(_262.5: std::vec::Vec<solend_sdk::state::ObligationLiquidity>);
        _393 = <Vec<ObligationLiquidity> as Index<usize>>::index(move _394, const 0_usize) -> [return: bb199, unwind: bb505];
    }

    bb199: {
        StorageDead(_394);
        _392 = &((*_393).0: solana_program::pubkey::Pubkey);
        _391 = &_392;
        StorageLive(_395);
        _395 = &((*_34).0: &solana_program::pubkey::Pubkey);
        _390 = <&Pubkey as PartialEq>::ne(move _391, move _395) -> [return: bb200, unwind: bb505];
    }

    bb200: {
        switchInt(move _390) -> [0: bb204, otherwise: bb201];
    }

    bb201: {
        StorageDead(_395);
        StorageDead(_393);
        StorageDead(_392);
        StorageDead(_391);
        StorageLive(_397);
        StorageLive(_398);
        StorageLive(_399);
        _399 = const "If you want to borrow an isolated tier asset, there can't be any other borrows in your obligation";
        _398 = &(*_399);
        _397 = solana_program::log::sol_log(move _398) -> [return: bb202, unwind: bb505];
    }

    bb202: {
        StorageDead(_398);
        StorageDead(_399);
        StorageDead(_397);
        StorageLive(_400);
        StorageLive(_401);
        _401 = IsolatedTierAssetViolation;
        _400 = <LendingError as Into<ProgramError>>::into(move _401) -> [return: bb203, unwind: bb505];
    }

    bb203: {
        StorageDead(_401);
        _0 = Result::<(), ProgramError>::Err(move _400);
        StorageDead(_400);
        StorageDead(_390);
        goto -> bb427;
    }

    bb204: {
        StorageDead(_395);
        StorageDead(_393);
        StorageDead(_392);
        StorageDead(_391);
        _386 = const ();
        StorageDead(_390);
        goto -> bb207;
    }

    bb205: {
        StorageDead(_404);
        StorageDead(_405);
        StorageDead(_403);
        StorageLive(_406);
        StorageLive(_407);
        _407 = IsolatedTierAssetViolation;
        _406 = <LendingError as Into<ProgramError>>::into(move _407) -> [return: bb206, unwind: bb505];
    }

    bb206: {
        StorageDead(_407);
        _0 = Result::<(), ProgramError>::Err(move _406);
        StorageDead(_406);
        goto -> bb427;
    }

    bb207: {
        StorageDead(_388);
        goto -> bb212;
    }

    bb208: {
        StorageLive(_410);
        StorageLive(_411);
        StorageLive(_412);
        _412 = const "Cannot borrow a regular tier asset if you have an isolated tier asset borrow";
        _411 = &(*_412);
        _410 = solana_program::log::sol_log(move _411) -> [return: bb209, unwind: bb505];
    }

    bb209: {
        StorageDead(_411);
        StorageDead(_412);
        StorageDead(_410);
        StorageLive(_413);
        StorageLive(_414);
        _414 = IsolatedTierAssetViolation;
        _413 = <LendingError as Into<ProgramError>>::into(move _414) -> [return: bb210, unwind: bb505];
    }

    bb210: {
        StorageDead(_414);
        _0 = Result::<(), ProgramError>::Err(move _413);
        StorageDead(_413);
        StorageDead(_408);
        goto -> bb428;
    }

    bb211: {
        _386 = const ();
        StorageDead(_408);
        goto -> bb212;
    }

    bb212: {
        StorageDead(_386);
        StorageLive(_415);
        StorageLive(_416);
        StorageLive(_417);
        _417 = &_262;
        _416 = Obligation::remaining_borrow_value(move _417) -> [return: bb213, unwind: bb505];
    }

    bb213: {
        StorageDead(_417);
        StorageLive(_418);
        _418 = {closure@token-lending\program\src\processor.rs:1766:25: 1766:28};
        _415 = Result::<Decimal, ProgramError>::unwrap_or_else::<{closure@token-lending\program\src\processor.rs:1766:25: 1766:28}>(move _416, move _418) -> [return: bb214, unwind: bb505];
    }

    bb214: {
        StorageDead(_418);
        StorageDead(_416);
        StorageLive(_419);
        StorageLive(_420);
        StorageLive(_421);
        _421 = &_415;
        StorageLive(_422);
        StorageLive(_423);
        _423 = Decimal::zero() -> [return: bb215, unwind: bb505];
    }

    bb215: {
        _422 = &_423;
        _420 = <Decimal as PartialEq>::eq(move _421, move _422) -> [return: bb216, unwind: bb505];
    }

    bb216: {
        switchInt(move _420) -> [0: bb220, otherwise: bb217];
    }

    bb217: {
        StorageDead(_423);
        StorageDead(_422);
        StorageDead(_421);
        StorageLive(_425);
        StorageLive(_426);
        StorageLive(_427);
        _427 = const "Remaining borrow value is zero";
        _426 = &(*_427);
        _425 = solana_program::log::sol_log(move _426) -> [return: bb218, unwind: bb505];
    }

    bb218: {
        StorageDead(_426);
        StorageDead(_427);
        StorageDead(_425);
        StorageLive(_428);
        StorageLive(_429);
        _429 = BorrowTooLarge;
        _428 = <LendingError as Into<ProgramError>>::into(move _429) -> [return: bb219, unwind: bb505];
    }

    bb219: {
        StorageDead(_429);
        _0 = Result::<(), ProgramError>::Err(move _428);
        StorageDead(_428);
        StorageDead(_420);
        StorageDead(_419);
        goto -> bb426;
    }

    bb220: {
        StorageDead(_423);
        StorageDead(_422);
        StorageDead(_421);
        _419 = const ();
        StorageDead(_420);
        StorageDead(_419);
        StorageLive(_430);
        StorageLive(_431);
        StorageLive(_432);
        StorageLive(_433);
        _1051 = (((_143.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _1083 = _1051 as *const () (PtrToPtr);
        _1084 = _1083 as usize (Transmute);
        _1085 = AlignOf(solend_sdk::state::Reserve);
        _1086 = Sub(_1085, const 1_usize);
        _1087 = BitAnd(_1084, _1086);
        _1088 = Eq(_1087, const 0_usize);
        assert(_1088, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1085, _1084) -> [success: bb525, unwind unreachable];
    }

    bb221: {
        StorageDead(_433);
        StorageLive(_434);
        _1052 = (((_143.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _1077 = _1052 as *const () (PtrToPtr);
        _1078 = _1077 as usize (Transmute);
        _1079 = AlignOf(solend_sdk::state::Reserve);
        _1080 = Sub(_1079, const 1_usize);
        _1081 = BitAnd(_1078, _1080);
        _1082 = Eq(_1081, const 0_usize);
        assert(_1082, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1079, _1078) -> [success: bb524, unwind unreachable];
    }

    bb222: {
        StorageDead(_434);
        StorageDead(_432);
        StorageLive(_435);
        _435 = {closure@token-lending\program\src\processor.rs:1774:25: 1774:28};
        _430 = Result::<Decimal, ProgramError>::unwrap_or_else::<{closure@token-lending\program\src\processor.rs:1774:25: 1774:28}>(move _431, move _435) -> [return: bb223, unwind: bb505];
    }

    bb223: {
        StorageDead(_435);
        StorageDead(_431);
        StorageLive(_436);
        StorageLive(_437);
        StorageLive(_438);
        StorageLive(_439);
        StorageLive(_440);
        _440 = &mut (_106.7: solend_sdk::state::RateLimiter);
        StorageLive(_441);
        _441 = ((*_88).0: u64);
        _439 = RateLimiter::remaining_outflow(move _440, move _441) -> [return: bb224, unwind: bb505];
    }

    bb224: {
        StorageDead(_441);
        StorageDead(_440);
        _438 = <Result<Decimal, ProgramError> as Try>::branch(move _439) -> [return: bb225, unwind: bb505];
    }

    bb225: {
        StorageDead(_439);
        _442 = discriminant(_438);
        switchInt(move _442) -> [0: bb226, 1: bb227, otherwise: bb9];
    }

    bb226: {
        StorageLive(_446);
        _446 = ((_438 as Continue).0: solend_sdk::math::Decimal);
        _437 = _446;
        StorageDead(_446);
        _876 = discriminant(_438);
        StorageDead(_438);
        StorageLive(_447);
        StorageLive(_448);
        StorageLive(_449);
        StorageLive(_450);
        _1053 = (((_143.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _450 = &mut ((*_1053).6: solend_sdk::state::RateLimiter);
        StorageLive(_451);
        _451 = ((*_88).0: u64);
        _449 = RateLimiter::remaining_outflow(move _450, move _451) -> [return: bb229, unwind: bb505];
    }

    bb227: {
        StorageLive(_443);
        _443 = move ((_438 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_445);
        _445 = move _443;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _445) -> [return: bb228, unwind: bb502];
    }

    bb228: {
        StorageDead(_445);
        StorageDead(_443);
        _966 = discriminant(_438);
        StorageDead(_438);
        goto -> bb424;
    }

    bb229: {
        StorageDead(_451);
        StorageDead(_450);
        _448 = <Result<Decimal, ProgramError> as Try>::branch(move _449) -> [return: bb230, unwind: bb505];
    }

    bb230: {
        StorageDead(_449);
        _452 = discriminant(_448);
        switchInt(move _452) -> [0: bb231, 1: bb232, otherwise: bb9];
    }

    bb231: {
        StorageLive(_456);
        _456 = ((_448 as Continue).0: solend_sdk::math::Decimal);
        _447 = _456;
        StorageDead(_456);
        _878 = discriminant(_448);
        StorageDead(_448);
        StorageLive(_457);
        StorageLive(_458);
        StorageLive(_459);
        StorageLive(_460);
        _1054 = (((_143.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _460 = &(*_1054);
        StorageLive(_461);
        StorageLive(_462);
        _462 = _437;
        StorageLive(_463);
        _463 = _415;
        _461 = std::cmp::min::<Decimal>(move _462, move _463) -> [return: bb234, unwind: bb505];
    }

    bb232: {
        StorageLive(_453);
        _453 = move ((_448 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_455);
        _455 = move _453;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _455) -> [return: bb233, unwind: bb501];
    }

    bb233: {
        StorageDead(_455);
        StorageDead(_453);
        _964 = discriminant(_448);
        StorageDead(_448);
        StorageDead(_447);
        goto -> bb424;
    }

    bb234: {
        StorageDead(_463);
        StorageDead(_462);
        _459 = Reserve::usd_to_liquidity_amount_lower_bound(move _460, move _461) -> [return: bb235, unwind: bb505];
    }

    bb235: {
        StorageDead(_461);
        StorageDead(_460);
        _458 = <Result<Decimal, ProgramError> as Try>::branch(move _459) -> [return: bb236, unwind: bb505];
    }

    bb236: {
        _831 = const true;
        StorageDead(_459);
        _464 = discriminant(_458);
        switchInt(move _464) -> [0: bb237, 1: bb238, otherwise: bb9];
    }

    bb237: {
        StorageLive(_468);
        _468 = ((_458 as Continue).0: solend_sdk::math::Decimal);
        _457 = _468;
        StorageDead(_468);
        StorageLive(_469);
        _469 = _447;
        _436 = std::cmp::min::<Decimal>(move _457, move _469) -> [return: bb240, unwind: bb500];
    }

    bb238: {
        StorageLive(_465);
        _465 = move ((_458 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_467);
        _467 = move _465;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _467) -> [return: bb239, unwind: bb500];
    }

    bb239: {
        StorageDead(_467);
        StorageDead(_465);
        StorageDead(_457);
        StorageDead(_447);
        StorageDead(_437);
        _962 = discriminant(_458);
        _831 = const false;
        StorageDead(_458);
        goto -> bb425;
    }

    bb240: {
        StorageDead(_469);
        StorageDead(_457);
        StorageDead(_447);
        StorageDead(_437);
        _880 = discriminant(_458);
        _831 = const false;
        StorageDead(_458);
        StorageLive(_474);
        StorageLive(_475);
        StorageLive(_476);
        StorageLive(_477);
        _1055 = (((_143.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _477 = &(*_1055);
        StorageLive(_478);
        _478 = _2;
        StorageLive(_479);
        _479 = _415;
        StorageLive(_480);
        StorageLive(_481);
        _481 = _430;
        StorageLive(_482);
        _482 = _436;
        _480 = std::cmp::min::<Decimal>(move _481, move _482) -> [return: bb241, unwind: bb505];
    }

    bb241: {
        StorageDead(_482);
        StorageDead(_481);
        _476 = Reserve::calculate_borrow(move _477, move _478, move _479, move _480) -> [return: bb242, unwind: bb505];
    }

    bb242: {
        StorageDead(_480);
        StorageDead(_479);
        StorageDead(_478);
        StorageDead(_477);
        _475 = <Result<CalculateBorrowResult, ProgramError> as Try>::branch(move _476) -> [return: bb243, unwind: bb505];
    }

    bb243: {
        StorageDead(_476);
        _483 = discriminant(_475);
        switchInt(move _483) -> [0: bb244, 1: bb245, otherwise: bb9];
    }

    bb244: {
        StorageLive(_487);
        _487 = move ((_475 as Continue).0: solend_sdk::state::CalculateBorrowResult);
        _474 = move _487;
        StorageDead(_487);
        StorageLive(_470);
        _470 = (_474.0: solend_sdk::math::Decimal);
        StorageLive(_471);
        _471 = (_474.1: u64);
        StorageLive(_472);
        _472 = (_474.2: u64);
        StorageLive(_473);
        _473 = (_474.3: u64);
        _882 = discriminant(_475);
        StorageDead(_475);
        StorageDead(_474);
        StorageLive(_488);
        StorageLive(_489);
        StorageLive(_490);
        _490 = _471;
        _489 = Eq(move _490, const 0_u64);
        switchInt(move _489) -> [0: bb250, otherwise: bb247];
    }

    bb245: {
        StorageLive(_484);
        _484 = move ((_475 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_486);
        _486 = move _484;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _486) -> [return: bb246, unwind: bb499];
    }

    bb246: {
        StorageDead(_486);
        StorageDead(_484);
        _960 = discriminant(_475);
        StorageDead(_475);
        StorageDead(_474);
        goto -> bb425;
    }

    bb247: {
        StorageDead(_490);
        StorageLive(_492);
        StorageLive(_493);
        StorageLive(_494);
        _494 = const "Borrow amount is too small to receive liquidity after fees";
        _493 = &(*_494);
        _492 = solana_program::log::sol_log(move _493) -> [return: bb248, unwind: bb505];
    }

    bb248: {
        StorageDead(_493);
        StorageDead(_494);
        StorageDead(_492);
        StorageLive(_495);
        StorageLive(_496);
        _496 = BorrowTooSmall;
        _495 = <LendingError as Into<ProgramError>>::into(move _496) -> [return: bb249, unwind: bb505];
    }

    bb249: {
        StorageDead(_496);
        _0 = Result::<(), ProgramError>::Err(move _495);
        StorageDead(_495);
        StorageDead(_489);
        StorageDead(_488);
        goto -> bb423;
    }

    bb250: {
        StorageDead(_490);
        _488 = const ();
        StorageDead(_489);
        StorageDead(_488);
        StorageLive(_497);
        _1056 = (((_143.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _1071 = _1056 as *const () (PtrToPtr);
        _1072 = _1071 as usize (Transmute);
        _1073 = AlignOf(solend_sdk::state::Reserve);
        _1074 = Sub(_1073, const 1_usize);
        _1075 = BitAnd(_1072, _1074);
        _1076 = Eq(_1075, const 0_usize);
        assert(_1076, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1073, _1072) -> [success: bb523, unwind unreachable];
    }

    bb251: {
        StorageDead(_509);
        StorageDead(_508);
        _506 = <Result<Decimal, ProgramError> as Try>::branch(move _507) -> [return: bb252, unwind: bb505];
    }

    bb252: {
        _827 = const true;
        StorageDead(_507);
        _510 = discriminant(_506);
        switchInt(move _510) -> [0: bb253, 1: bb254, otherwise: bb9];
    }

    bb253: {
        StorageLive(_514);
        _514 = ((_506 as Continue).0: solend_sdk::math::Decimal);
        _505 = _514;
        StorageDead(_514);
        _502 = RateLimiter::update(move _503, move _504, move _505) -> [return: bb256, unwind: bb498];
    }

    bb254: {
        StorageLive(_511);
        _511 = move ((_506 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_513);
        _513 = move _511;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _513) -> [return: bb255, unwind: bb498];
    }

    bb255: {
        StorageDead(_513);
        StorageDead(_511);
        StorageDead(_505);
        StorageDead(_504);
        StorageDead(_503);
        StorageDead(_502);
        StorageDead(_501);
        goto -> bb420;
    }

    bb256: {
        StorageDead(_505);
        StorageDead(_504);
        StorageDead(_503);
        StorageLive(_515);
        _515 = {closure@token-lending\program\src\processor.rs:1817:22: 1817:27};
        _501 = Result::<(), ProgramError>::map_err::<ProgramError, {closure@token-lending\program\src\processor.rs:1817:22: 1817:27}>(move _502, move _515) -> [return: bb257, unwind: bb498];
    }

    bb257: {
        StorageDead(_515);
        StorageDead(_502);
        _500 = <Result<(), ProgramError> as Try>::branch(move _501) -> [return: bb258, unwind: bb498];
    }

    bb258: {
        StorageDead(_501);
        _516 = discriminant(_500);
        switchInt(move _516) -> [0: bb259, 1: bb260, otherwise: bb9];
    }

    bb259: {
        StorageLive(_520);
        _520 = ((_500 as Continue).0: ());
        _499 = _520;
        StorageDead(_520);
        _884 = discriminant(_500);
        _886 = discriminant(_506);
        _827 = const false;
        StorageDead(_506);
        StorageDead(_500);
        StorageDead(_499);
        StorageLive(_521);
        StorageLive(_522);
        StorageLive(_523);
        StorageLive(_524);
        StorageLive(_525);
        _1058 = (((_143.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _525 = &mut ((*_1058).6: solend_sdk::state::RateLimiter);
        StorageLive(_526);
        _526 = ((*_88).0: u64);
        StorageLive(_527);
        _527 = _470;
        _524 = RateLimiter::update(move _525, move _526, move _527) -> [return: bb262, unwind: bb505];
    }

    bb260: {
        StorageLive(_517);
        _517 = move ((_500 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_519);
        _519 = move _517;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _519) -> [return: bb261, unwind: bb497];
    }

    bb261: {
        StorageDead(_519);
        StorageDead(_517);
        _956 = discriminant(_500);
        goto -> bb420;
    }

    bb262: {
        StorageDead(_527);
        StorageDead(_526);
        StorageDead(_525);
        StorageLive(_528);
        _528 = {closure@token-lending\program\src\processor.rs:1825:22: 1825:27};
        _523 = Result::<(), ProgramError>::map_err::<ProgramError, {closure@token-lending\program\src\processor.rs:1825:22: 1825:27}>(move _524, move _528) -> [return: bb263, unwind: bb505];
    }

    bb263: {
        StorageDead(_528);
        StorageDead(_524);
        _522 = <Result<(), ProgramError> as Try>::branch(move _523) -> [return: bb264, unwind: bb505];
    }

    bb264: {
        StorageDead(_523);
        _529 = discriminant(_522);
        switchInt(move _529) -> [0: bb265, 1: bb266, otherwise: bb9];
    }

    bb265: {
        StorageLive(_533);
        _533 = ((_522 as Continue).0: ());
        _521 = _533;
        StorageDead(_533);
        _888 = discriminant(_522);
        StorageDead(_522);
        StorageDead(_521);
        _498 = const ();
        StorageDead(_498);
        StorageLive(_534);
        StorageLive(_535);
        StorageLive(_536);
        StorageLive(_537);
        _537 = move _106;
        StorageLive(_538);
        StorageLive(_539);
        StorageLive(_540);
        StorageLive(_541);
        StorageLive(_542);
        StorageLive(_543);
        StorageLive(_544);
        StorageLive(_545);
        _545 = &((*_61).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _544 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _545) -> [return: bb268, unwind: bb505];
    }

    bb266: {
        StorageLive(_530);
        _530 = move ((_522 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_532);
        _532 = move _530;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _532) -> [return: bb267, unwind: bb496];
    }

    bb267: {
        StorageDead(_532);
        StorageDead(_530);
        _954 = discriminant(_522);
        StorageDead(_522);
        StorageDead(_521);
        goto -> bb421;
    }

    bb268: {
        _543 = &(*_544);
        StorageDead(_545);
        _542 = RefCell::<&mut [u8]>::borrow_mut(move _543) -> [return: bb269, unwind: bb505];
    }

    bb269: {
        StorageDead(_543);
        _541 = &mut _542;
        _540 = &mut (*_541);
        _539 = <RefMut<'_, &mut [u8]> as DerefMut>::deref_mut(move _540) -> [return: bb270, unwind: bb466];
    }

    bb270: {
        _820 = deref_copy (*_539);
        _538 = &mut (*_820);
        StorageDead(_540);
        _536 = <LendingMarket as Pack>::pack(move _537, move _538) -> [return: bb271, unwind: bb466];
    }

    bb271: {
        StorageDead(_538);
        StorageDead(_537);
        _535 = <Result<(), ProgramError> as Try>::branch(move _536) -> [return: bb272, unwind: bb466];
    }

    bb272: {
        StorageDead(_536);
        _546 = discriminant(_535);
        switchInt(move _546) -> [0: bb273, 1: bb274, otherwise: bb9];
    }

    bb273: {
        StorageLive(_550);
        _550 = ((_535 as Continue).0: ());
        _534 = _550;
        StorageDead(_550);
        _890 = discriminant(_535);
        drop(_542) -> [return: bb276, unwind: bb505];
    }

    bb274: {
        StorageLive(_547);
        _547 = move ((_535 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_549);
        _549 = move _547;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _549) -> [return: bb275, unwind: bb495];
    }

    bb275: {
        StorageDead(_549);
        StorageDead(_547);
        _952 = discriminant(_535);
        drop(_542) -> [return: bb419, unwind: bb505];
    }

    bb276: {
        StorageDead(_544);
        StorageDead(_542);
        StorageDead(_541);
        StorageDead(_539);
        StorageDead(_535);
        StorageDead(_534);
        StorageLive(_551);
        StorageLive(_552);
        StorageLive(_553);
        StorageLive(_554);
        _1059 = (((_143.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _554 = &mut ((*_1059).3: solend_sdk::state::ReserveLiquidity);
        StorageLive(_555);
        _555 = _470;
        _553 = ReserveLiquidity::borrow(move _554, move _555) -> [return: bb277, unwind: bb505];
    }

    bb277: {
        StorageDead(_555);
        StorageDead(_554);
        _552 = <Result<(), ProgramError> as Try>::branch(move _553) -> [return: bb278, unwind: bb505];
    }

    bb278: {
        StorageDead(_553);
        _556 = discriminant(_552);
        switchInt(move _556) -> [0: bb279, 1: bb280, otherwise: bb9];
    }

    bb279: {
        StorageLive(_560);
        _560 = ((_552 as Continue).0: ());
        _551 = _560;
        StorageDead(_560);
        _892 = discriminant(_552);
        StorageDead(_552);
        StorageDead(_551);
        StorageLive(_561);
        StorageLive(_562);
        _1060 = (((_143.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _562 = &mut ((*_1060).1: solend_sdk::state::LastUpdate);
        _561 = LastUpdate::mark_stale(move _562) -> [return: bb282, unwind: bb505];
    }

    bb280: {
        StorageLive(_557);
        _557 = move ((_552 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_559);
        _559 = move _557;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _559) -> [return: bb281, unwind: bb494];
    }

    bb281: {
        StorageDead(_559);
        StorageDead(_557);
        _950 = discriminant(_552);
        StorageDead(_552);
        StorageDead(_551);
        goto -> bb422;
    }

    bb282: {
        StorageDead(_562);
        StorageDead(_561);
        StorageLive(_563);
        StorageLive(_564);
        StorageLive(_565);
        StorageLive(_566);
        _566 = (_262.7: solend_sdk::math::Decimal);
        StorageLive(_567);
        StorageLive(_568);
        StorageLive(_569);
        StorageLive(_570);
        StorageLive(_571);
        StorageLive(_572);
        StorageLive(_573);
        _1061 = (((_143.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _573 = &(*_1061);
        StorageLive(_574);
        _574 = _470;
        _572 = Reserve::market_value(move _573, move _574) -> [return: bb283, unwind: bb505];
    }

    bb283: {
        StorageDead(_574);
        StorageDead(_573);
        _571 = <Result<Decimal, ProgramError> as Try>::branch(move _572) -> [return: bb284, unwind: bb505];
    }

    bb284: {
        _826 = const true;
        StorageDead(_572);
        _575 = discriminant(_571);
        switchInt(move _575) -> [0: bb285, 1: bb286, otherwise: bb9];
    }

    bb285: {
        StorageLive(_579);
        _579 = ((_571 as Continue).0: solend_sdk::math::Decimal);
        _570 = _579;
        StorageDead(_579);
        StorageLive(_580);
        StorageLive(_581);
        _1062 = (((_143.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _581 = &(*_1062);
        _580 = Reserve::borrow_weight(move _581) -> [return: bb288, unwind: bb493];
    }

    bb286: {
        StorageLive(_576);
        _576 = move ((_571 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_578);
        _578 = move _576;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _578) -> [return: bb287, unwind: bb493];
    }

    bb287: {
        StorageDead(_578);
        StorageDead(_576);
        StorageDead(_570);
        StorageDead(_569);
        StorageDead(_567);
        StorageDead(_566);
        StorageDead(_565);
        StorageDead(_563);
        goto -> bb418;
    }

    bb288: {
        StorageDead(_581);
        _569 = <Decimal as TryMul<Decimal>>::try_mul(move _570, move _580) -> [return: bb289, unwind: bb493];
    }

    bb289: {
        StorageDead(_580);
        StorageDead(_570);
        _568 = <Result<Decimal, ProgramError> as Try>::branch(move _569) -> [return: bb290, unwind: bb493];
    }

    bb290: {
        _825 = const true;
        StorageDead(_569);
        _582 = discriminant(_568);
        switchInt(move _582) -> [0: bb291, 1: bb292, otherwise: bb9];
    }

    bb291: {
        StorageLive(_586);
        _586 = ((_568 as Continue).0: solend_sdk::math::Decimal);
        _567 = _586;
        StorageDead(_586);
        _565 = <Decimal as TryAdd>::try_add(move _566, move _567) -> [return: bb294, unwind: bb492];
    }

    bb292: {
        StorageLive(_583);
        _583 = move ((_568 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_585);
        _585 = move _583;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _585) -> [return: bb293, unwind: bb492];
    }

    bb293: {
        StorageDead(_585);
        StorageDead(_583);
        StorageDead(_567);
        StorageDead(_566);
        StorageDead(_565);
        StorageDead(_563);
        goto -> bb417;
    }

    bb294: {
        StorageDead(_567);
        StorageDead(_566);
        _564 = <Result<Decimal, ProgramError> as Try>::branch(move _565) -> [return: bb295, unwind: bb492];
    }

    bb295: {
        StorageDead(_565);
        _587 = discriminant(_564);
        switchInt(move _587) -> [0: bb296, 1: bb297, otherwise: bb9];
    }

    bb296: {
        StorageLive(_591);
        _591 = ((_564 as Continue).0: solend_sdk::math::Decimal);
        _563 = _591;
        StorageDead(_591);
        (_262.7: solend_sdk::math::Decimal) = move _563;
        StorageDead(_563);
        _894 = discriminant(_564);
        _896 = discriminant(_568);
        _898 = discriminant(_571);
        _826 = const false;
        StorageDead(_571);
        _825 = const false;
        StorageDead(_568);
        StorageDead(_564);
        StorageLive(_592);
        StorageLive(_593);
        StorageLive(_594);
        StorageLive(_595);
        _595 = (_262.8: solend_sdk::math::Decimal);
        StorageLive(_596);
        StorageLive(_597);
        StorageLive(_598);
        StorageLive(_599);
        _1063 = (((_143.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _599 = &(*_1063);
        StorageLive(_600);
        _600 = _470;
        _598 = Reserve::market_value(move _599, move _600) -> [return: bb299, unwind: bb505];
    }

    bb297: {
        StorageLive(_588);
        _588 = move ((_564 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_590);
        _590 = move _588;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _590) -> [return: bb298, unwind: bb491];
    }

    bb298: {
        StorageDead(_590);
        StorageDead(_588);
        StorageDead(_563);
        _944 = discriminant(_564);
        goto -> bb417;
    }

    bb299: {
        StorageDead(_600);
        StorageDead(_599);
        _597 = <Result<Decimal, ProgramError> as Try>::branch(move _598) -> [return: bb300, unwind: bb505];
    }

    bb300: {
        _824 = const true;
        StorageDead(_598);
        _601 = discriminant(_597);
        switchInt(move _601) -> [0: bb301, 1: bb302, otherwise: bb9];
    }

    bb301: {
        StorageLive(_605);
        _605 = ((_597 as Continue).0: solend_sdk::math::Decimal);
        _596 = _605;
        StorageDead(_605);
        _594 = <Decimal as TryAdd>::try_add(move _595, move _596) -> [return: bb304, unwind: bb490];
    }

    bb302: {
        StorageLive(_602);
        _602 = move ((_597 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_604);
        _604 = move _602;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _604) -> [return: bb303, unwind: bb490];
    }

    bb303: {
        StorageDead(_604);
        StorageDead(_602);
        StorageDead(_596);
        StorageDead(_595);
        StorageDead(_594);
        StorageDead(_592);
        goto -> bb416;
    }

    bb304: {
        StorageDead(_596);
        StorageDead(_595);
        _593 = <Result<Decimal, ProgramError> as Try>::branch(move _594) -> [return: bb305, unwind: bb490];
    }

    bb305: {
        StorageDead(_594);
        _606 = discriminant(_593);
        switchInt(move _606) -> [0: bb306, 1: bb307, otherwise: bb9];
    }

    bb306: {
        StorageLive(_610);
        _610 = ((_593 as Continue).0: solend_sdk::math::Decimal);
        _592 = _610;
        StorageDead(_610);
        (_262.8: solend_sdk::math::Decimal) = move _592;
        StorageDead(_592);
        _900 = discriminant(_593);
        _902 = discriminant(_597);
        _824 = const false;
        StorageDead(_597);
        StorageDead(_593);
        StorageLive(_611);
        StorageLive(_612);
        StorageLive(_613);
        StorageLive(_614);
        _1064 = (((_143.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _1065 = _1064 as *const () (PtrToPtr);
        _1066 = _1065 as usize (Transmute);
        _1067 = AlignOf(solend_sdk::state::Reserve);
        _1068 = Sub(_1067, const 1_usize);
        _1069 = BitAnd(_1066, _1068);
        _1070 = Eq(_1069, const 0_usize);
        assert(_1070, "misaligned pointer dereference: address must be a multiple of {} but is {}", _1067, _1066) -> [success: bb522, unwind unreachable];
    }

    bb307: {
        StorageLive(_607);
        _607 = move ((_593 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_609);
        _609 = move _607;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _609) -> [return: bb308, unwind: bb489];
    }

    bb308: {
        StorageDead(_609);
        StorageDead(_607);
        StorageDead(_592);
        _940 = discriminant(_593);
        goto -> bb416;
    }

    bb309: {
        _620 = &(*_621);
        StorageDead(_622);
        _619 = RefCell::<&mut [u8]>::borrow_mut(move _620) -> [return: bb310, unwind: bb505];
    }

    bb310: {
        StorageDead(_620);
        _618 = &mut _619;
        _617 = &mut (*_618);
        _616 = <RefMut<'_, &mut [u8]> as DerefMut>::deref_mut(move _617) -> [return: bb311, unwind: bb465];
    }

    bb311: {
        _821 = deref_copy (*_616);
        _615 = &mut (*_821);
        StorageDead(_617);
        _613 = <Reserve as Pack>::pack(move _614, move _615) -> [return: bb312, unwind: bb465];
    }

    bb312: {
        StorageDead(_615);
        StorageDead(_614);
        _612 = <Result<(), ProgramError> as Try>::branch(move _613) -> [return: bb313, unwind: bb465];
    }

    bb313: {
        StorageDead(_613);
        _623 = discriminant(_612);
        switchInt(move _623) -> [0: bb314, 1: bb315, otherwise: bb9];
    }

    bb314: {
        StorageLive(_627);
        _627 = ((_612 as Continue).0: ());
        _611 = _627;
        StorageDead(_627);
        _904 = discriminant(_612);
        drop(_619) -> [return: bb317, unwind: bb505];
    }

    bb315: {
        StorageLive(_624);
        _624 = move ((_612 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_626);
        _626 = move _624;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _626) -> [return: bb316, unwind: bb488];
    }

    bb316: {
        StorageDead(_626);
        StorageDead(_624);
        _938 = discriminant(_612);
        drop(_619) -> [return: bb415, unwind: bb505];
    }

    bb317: {
        StorageDead(_621);
        StorageDead(_619);
        StorageDead(_618);
        StorageDead(_616);
        StorageDead(_612);
        StorageDead(_611);
        StorageLive(_628);
        StorageLive(_629);
        StorageLive(_630);
        StorageLive(_631);
        _631 = &mut _262;
        StorageLive(_632);
        _822 = deref_copy ((*_34).0: &solana_program::pubkey::Pubkey);
        _632 = (*_822);
        StorageLive(_633);
        _633 = _497;
        _630 = Obligation::find_or_add_liquidity_to_borrows(move _631, move _632, move _633) -> [return: bb318, unwind: bb505];
    }

    bb318: {
        StorageDead(_633);
        StorageDead(_632);
        StorageDead(_631);
        _629 = <Result<&mut ObligationLiquidity, ProgramError> as Try>::branch(move _630) -> [return: bb319, unwind: bb505];
    }

    bb319: {
        StorageDead(_630);
        _634 = discriminant(_629);
        switchInt(move _634) -> [0: bb320, 1: bb321, otherwise: bb9];
    }

    bb320: {
        StorageLive(_638);
        _638 = move ((_629 as Continue).0: &mut solend_sdk::state::ObligationLiquidity);
        _628 = move _638;
        StorageDead(_638);
        _906 = discriminant(_629);
        StorageDead(_629);
        StorageLive(_639);
        StorageLive(_640);
        StorageLive(_641);
        StorageLive(_642);
        _642 = &mut (*_628);
        StorageLive(_643);
        _643 = _470;
        _641 = ObligationLiquidity::borrow(move _642, move _643) -> [return: bb323, unwind: bb505];
    }

    bb321: {
        StorageLive(_635);
        _635 = move ((_629 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_637);
        _637 = move _635;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _637) -> [return: bb322, unwind: bb487];
    }

    bb322: {
        StorageDead(_637);
        StorageDead(_635);
        _936 = discriminant(_629);
        StorageDead(_629);
        goto -> bb414;
    }

    bb323: {
        StorageDead(_643);
        StorageDead(_642);
        _640 = <Result<(), ProgramError> as Try>::branch(move _641) -> [return: bb324, unwind: bb505];
    }

    bb324: {
        StorageDead(_641);
        _644 = discriminant(_640);
        switchInt(move _644) -> [0: bb325, 1: bb326, otherwise: bb9];
    }

    bb325: {
        StorageLive(_648);
        _648 = ((_640 as Continue).0: ());
        _639 = _648;
        StorageDead(_648);
        _908 = discriminant(_640);
        StorageDead(_640);
        StorageDead(_639);
        StorageLive(_649);
        StorageLive(_650);
        _650 = &mut (_262.1: solend_sdk::state::LastUpdate);
        _649 = LastUpdate::mark_stale(move _650) -> [return: bb328, unwind: bb505];
    }

    bb326: {
        StorageLive(_645);
        _645 = move ((_640 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_647);
        _647 = move _645;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _647) -> [return: bb327, unwind: bb486];
    }

    bb327: {
        StorageDead(_647);
        StorageDead(_645);
        _934 = discriminant(_640);
        StorageDead(_640);
        StorageDead(_639);
        goto -> bb414;
    }

    bb328: {
        StorageDead(_650);
        StorageDead(_649);
        StorageLive(_652);
        StorageLive(_653);
        StorageLive(_654);
        StorageLive(_655);
        StorageLive(_656);
        _656 = &mut _262;
        _655 = &mut (*_656);
        StorageLive(_657);
        StorageLive(_658);
        StorageLive(_659);
        StorageLive(_660);
        _660 = &(*_3);
        StorageLive(_661);
        _661 = RangeFrom::<usize> { start: const 9_usize };
        _659 = <[AccountInfo<'_>] as Index<RangeFrom<usize>>>::index(move _660, move _661) -> [return: bb329, unwind: bb505];
    }

    bb329: {
        StorageDead(_661);
        StorageDead(_660);
        _658 = &(*_659);
        _657 = &(*_658);
        _654 = update_borrow_attribution_values(move _655, move _657) -> [return: bb330, unwind: bb505];
    }

    bb330: {
        StorageDead(_657);
        StorageDead(_655);
        _653 = <Result<(Option<Pubkey>, Option<Pubkey>), ProgramError> as Try>::branch(move _654) -> [return: bb331, unwind: bb505];
    }

    bb331: {
        StorageDead(_654);
        _662 = discriminant(_653);
        switchInt(move _662) -> [0: bb332, 1: bb333, otherwise: bb9];
    }

    bb332: {
        StorageLive(_666);
        _666 = ((_653 as Continue).0: (std::option::Option<solana_program::pubkey::Pubkey>, std::option::Option<solana_program::pubkey::Pubkey>));
        _652 = _666;
        StorageDead(_666);
        StorageLive(_651);
        _651 = (_652.0: std::option::Option<solana_program::pubkey::Pubkey>);
        _910 = discriminant(_653);
        StorageDead(_659);
        StorageDead(_658);
        StorageDead(_656);
        StorageDead(_653);
        StorageDead(_652);
        StorageLive(_667);
        _668 = discriminant(_651);
        switchInt(move _668) -> [1: bb335, otherwise: bb343];
    }

    bb333: {
        StorageLive(_663);
        _663 = move ((_653 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_665);
        _665 = move _663;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _665) -> [return: bb334, unwind: bb485];
    }

    bb334: {
        StorageDead(_665);
        StorageDead(_663);
        _932 = discriminant(_653);
        StorageDead(_659);
        StorageDead(_658);
        StorageDead(_656);
        StorageDead(_653);
        StorageDead(_652);
        goto -> bb414;
    }

    bb335: {
        StorageLive(_669);
        _669 = ((_651 as Some).0: solana_program::pubkey::Pubkey);
        StorageLive(_671);
        StorageLive(_672);
        StorageLive(_673);
        StorageLive(_674);
        StorageLive(_675);
        StorageLive(_676);
        StorageLive(_677);
        StorageLive(_678);
        StorageLive(_679);
        StorageLive(_680);
        StorageLive(_681);
        _815 = const _;
        _681 = &(*_815);
        _680 = &(*_681);
        _679 = move _680 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_680);
        StorageLive(_683);
        StorageLive(_684);
        StorageLive(_685);
        StorageLive(_686);
        StorageLive(_687);
        StorageLive(_688);
        StorageLive(_689);
        _689 = &_669;
        _688 = &(*_689);
        _687 = bytemuck::core::fmt::rt::Argument::<'_>::new_debug::<Pubkey>(move _688) -> [return: bb336, unwind: bb505];
    }

    bb336: {
        StorageDead(_688);
        _686 = [move _687];
        StorageDead(_687);
        _685 = &_686;
        _684 = &(*_685);
        _683 = move _684 as &[bytemuck::core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_684);
        _678 = Arguments::<'_>::new_v1(move _679, move _683) -> [return: bb337, unwind: bb505];
    }

    bb337: {
        StorageDead(_683);
        StorageDead(_679);
        _677 = format(move _678) -> [return: bb338, unwind: bb505];
    }

    bb338: {
        StorageDead(_678);
        StorageDead(_689);
        StorageDead(_686);
        StorageDead(_685);
        StorageDead(_681);
        _676 = move _677;
        StorageDead(_677);
        _675 = &_676;
        _674 = &(*_675);
        _673 = <String as Deref>::deref(move _674) -> [return: bb339, unwind: bb464];
    }

    bb339: {
        _672 = &(*_673);
        StorageDead(_674);
        _671 = solana_program::log::sol_log(move _672) -> [return: bb340, unwind: bb464];
    }

    bb340: {
        StorageDead(_672);
        drop(_676) -> [return: bb341, unwind: bb505];
    }

    bb341: {
        StorageDead(_676);
        StorageDead(_675);
        StorageDead(_673);
        StorageDead(_671);
        StorageLive(_690);
        StorageLive(_691);
        _691 = BorrowAttributionLimitExceeded;
        _690 = <LendingError as Into<ProgramError>>::into(move _691) -> [return: bb342, unwind: bb505];
    }

    bb342: {
        StorageDead(_691);
        _0 = Result::<(), ProgramError>::Err(move _690);
        StorageDead(_690);
        StorageDead(_669);
        StorageDead(_667);
        goto -> bb413;
    }

    bb343: {
        _667 = const ();
        StorageDead(_667);
        StorageLive(_692);
        StorageLive(_693);
        StorageLive(_694);
        StorageLive(_695);
        StorageLive(_696);
        _696 = &(_262.4: std::vec::Vec<solend_sdk::state::ObligationCollateral>);
        _695 = Vec::<ObligationCollateral>::len(move _696) -> [return: bb344, unwind: bb505];
    }

    bb344: {
        StorageDead(_696);
        _694 = std::ops::Range::<usize> { start: const 0_usize, end: move _695 };
        StorageDead(_695);
        _693 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _694) -> [return: bb345, unwind: bb505];
    }

    bb345: {
        StorageDead(_694);
        StorageLive(_697);
        _697 = move _693;
        goto -> bb346;
    }

    bb346: {
        StorageLive(_699);
        StorageLive(_700);
        StorageLive(_701);
        StorageLive(_702);
        _702 = &mut _697;
        _701 = &mut (*_702);
        _700 = <std::ops::Range<usize> as Iterator>::next(move _701) -> [return: bb347, unwind: bb505];
    }

    bb347: {
        StorageDead(_701);
        _703 = discriminant(_700);
        switchInt(move _703) -> [0: bb349, 1: bb348, otherwise: bb9];
    }

    bb348: {
        StorageLive(_705);
        StorageLive(_706);
        StorageLive(_707);
        StorageLive(_708);
        _708 = &mut (*_13);
        _707 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _708) -> [return: bb350, unwind: bb505];
    }

    bb349: {
        _692 = const ();
        StorageDead(_702);
        StorageDead(_700);
        StorageDead(_699);
        StorageDead(_697);
        StorageDead(_693);
        StorageDead(_692);
        StorageLive(_714);
        StorageLive(_715);
        StorageLive(_716);
        StorageLive(_717);
        _828 = const false;
        _830 = const true;
        _717 = move _262;
        StorageLive(_718);
        StorageLive(_719);
        StorageLive(_720);
        StorageLive(_721);
        StorageLive(_722);
        StorageLive(_723);
        StorageLive(_724);
        StorageLive(_725);
        _725 = &((*_52).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _724 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _725) -> [return: bb355, unwind: bb463];
    }

    bb350: {
        StorageDead(_708);
        _706 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _707) -> [return: bb351, unwind: bb505];
    }

    bb351: {
        StorageDead(_707);
        _709 = discriminant(_706);
        switchInt(move _709) -> [0: bb352, 1: bb353, otherwise: bb9];
    }

    bb352: {
        StorageLive(_713);
        _713 = ((_706 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _705 = _713;
        StorageDead(_713);
        _912 = discriminant(_706);
        StorageDead(_706);
        StorageDead(_705);
        _699 = const ();
        StorageDead(_702);
        StorageDead(_700);
        StorageDead(_699);
        _698 = const ();
        goto -> bb346;
    }

    bb353: {
        StorageLive(_710);
        _710 = move ((_706 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_712);
        _712 = move _710;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _712) -> [return: bb354, unwind: bb484];
    }

    bb354: {
        StorageDead(_712);
        StorageDead(_710);
        _930 = discriminant(_706);
        StorageDead(_706);
        StorageDead(_705);
        StorageDead(_702);
        StorageDead(_700);
        StorageDead(_699);
        StorageDead(_697);
        StorageDead(_693);
        StorageDead(_692);
        goto -> bb413;
    }

    bb355: {
        _723 = &(*_724);
        StorageDead(_725);
        _722 = RefCell::<&mut [u8]>::borrow_mut(move _723) -> [return: bb356, unwind: bb463];
    }

    bb356: {
        StorageDead(_723);
        _721 = &mut _722;
        _720 = &mut (*_721);
        _719 = <RefMut<'_, &mut [u8]> as DerefMut>::deref_mut(move _720) -> [return: bb357, unwind: bb483];
    }

    bb357: {
        _823 = deref_copy (*_719);
        _718 = &mut (*_823);
        StorageDead(_720);
        _830 = const false;
        _716 = <Obligation as Pack>::pack(move _717, move _718) -> [return: bb358, unwind: bb483];
    }

    bb358: {
        StorageDead(_718);
        _830 = const false;
        StorageDead(_717);
        _715 = <Result<(), ProgramError> as Try>::branch(move _716) -> [return: bb359, unwind: bb462];
    }

    bb359: {
        StorageDead(_716);
        _726 = discriminant(_715);
        switchInt(move _726) -> [0: bb360, 1: bb361, otherwise: bb9];
    }

    bb360: {
        StorageLive(_730);
        _730 = ((_715 as Continue).0: ());
        _714 = _730;
        StorageDead(_730);
        _914 = discriminant(_715);
        drop(_722) -> [return: bb363, unwind: bb505];
    }

    bb361: {
        StorageLive(_727);
        _727 = move ((_715 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_729);
        _729 = move _727;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _729) -> [return: bb362, unwind: bb481];
    }

    bb362: {
        StorageDead(_729);
        StorageDead(_727);
        _928 = discriminant(_715);
        drop(_722) -> [return: bb412, unwind: bb505];
    }

    bb363: {
        StorageDead(_724);
        StorageDead(_722);
        StorageDead(_721);
        StorageDead(_719);
        StorageDead(_715);
        StorageDead(_714);
        StorageLive(_731);
        _731 = _472;
        StorageLive(_732);
        StorageLive(_733);
        StorageLive(_734);
        _734 = &mut (*_13);
        _733 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _734) -> [return: bb364, unwind: bb505];
    }

    bb364: {
        StorageDead(_734);
        _735 = discriminant(_733);
        switchInt(move _735) -> [0: bb365, otherwise: bb384];
    }

    bb365: {
        StorageLive(_736);
        _736 = ((_733 as Ok).0: &solana_program::account_info::AccountInfo<'_>);
        StorageLive(_737);
        StorageLive(_738);
        _738 = _473;
        _737 = Gt(move _738, const 0_u64);
        switchInt(move _737) -> [0: bb382, otherwise: bb366];
    }

    bb366: {
        StorageDead(_738);
        StorageLive(_739);
        StorageLive(_740);
        StorageLive(_741);
        StorageLive(_742);
        StorageLive(_743);
        _743 = _731;
        StorageLive(_744);
        _744 = _473;
        _742 = bytemuck::core::num::<impl u64>::checked_sub(move _743, move _744) -> [return: bb367, unwind: bb461];
    }

    bb367: {
        StorageDead(_744);
        StorageDead(_743);
        StorageLive(_745);
        _745 = MathOverflow;
        _741 = Option::<u64>::ok_or::<LendingError>(move _742, move _745) -> [return: bb368, unwind: bb461];
    }

    bb368: {
        StorageDead(_745);
        StorageDead(_742);
        _740 = <Result<u64, LendingError> as Try>::branch(move _741) -> [return: bb369, unwind: bb461];
    }

    bb369: {
        StorageDead(_741);
        _746 = discriminant(_740);
        switchInt(move _746) -> [0: bb370, 1: bb371, otherwise: bb9];
    }

    bb370: {
        StorageLive(_750);
        _750 = ((_740 as Continue).0: u64);
        _739 = _750;
        StorageDead(_750);
        _731 = move _739;
        StorageDead(_739);
        StorageDead(_740);
        StorageLive(_751);
        StorageLive(_752);
        StorageLive(_753);
        StorageLive(_754);
        StorageLive(_755);
        StorageLive(_756);
        _756 = &(*_16);
        _755 = <AccountInfo<'_> as Clone>::clone(move _756) -> [return: bb373, unwind: bb461];
    }

    bb371: {
        StorageLive(_747);
        _747 = move ((_740 as Break).0: std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>);
        StorageLive(_749);
        _749 = move _747;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, LendingError>>>::from_residual(move _749) -> [return: bb372, unwind: bb461];
    }

    bb372: {
        StorageDead(_749);
        StorageDead(_747);
        StorageDead(_739);
        StorageDead(_740);
        goto -> bb409;
    }

    bb373: {
        StorageDead(_756);
        StorageLive(_757);
        StorageLive(_758);
        _758 = &(*_736);
        _757 = <AccountInfo<'_> as Clone>::clone(move _758) -> [return: bb374, unwind: bb460];
    }

    bb374: {
        StorageDead(_758);
        StorageLive(_759);
        _759 = _473;
        StorageLive(_760);
        StorageLive(_761);
        _761 = &(*_70);
        _760 = <AccountInfo<'_> as Clone>::clone(move _761) -> [return: bb375, unwind: bb459];
    }

    bb375: {
        StorageDead(_761);
        StorageLive(_762);
        StorageLive(_763);
        _763 = &(*_355);
        _762 = move _763 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_763);
        StorageLive(_764);
        StorageLive(_765);
        _765 = &(*_97);
        _764 = <AccountInfo<'_> as Clone>::clone(move _765) -> [return: bb376, unwind: bb458];
    }

    bb376: {
        StorageDead(_765);
        _754 = TokenTransferParams::<'_, '_> { source: move _755, destination: move _757, amount: move _759, authority: move _760, authority_signer_seeds: move _762, token_program: move _764 };
        StorageDead(_764);
        StorageDead(_762);
        StorageDead(_760);
        StorageDead(_759);
        StorageDead(_757);
        StorageDead(_755);
        _753 = spl_token_transfer(move _754) -> [return: bb377, unwind: bb461];
    }

    bb377: {
        StorageDead(_754);
        _752 = <Result<(), ProgramError> as Try>::branch(move _753) -> [return: bb378, unwind: bb461];
    }

    bb378: {
        StorageDead(_753);
        _766 = discriminant(_752);
        switchInt(move _766) -> [0: bb379, 1: bb380, otherwise: bb9];
    }

    bb379: {
        StorageLive(_770);
        _770 = ((_752 as Continue).0: ());
        _751 = _770;
        StorageDead(_770);
        _916 = discriminant(_752);
        StorageDead(_752);
        StorageDead(_751);
        _732 = const ();
        goto -> bb383;
    }

    bb380: {
        StorageLive(_767);
        _767 = move ((_752 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_769);
        _769 = move _767;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _769) -> [return: bb381, unwind: bb480];
    }

    bb381: {
        StorageDead(_769);
        StorageDead(_767);
        _926 = discriminant(_752);
        StorageDead(_752);
        StorageDead(_751);
        goto -> bb409;
    }

    bb382: {
        StorageDead(_738);
        _732 = const ();
        goto -> bb383;
    }

    bb383: {
        StorageDead(_737);
        StorageDead(_736);
        goto -> bb385;
    }

    bb384: {
        _732 = const ();
        goto -> bb385;
    }

    bb385: {
        drop(_733) -> [return: bb386, unwind: bb505];
    }

    bb386: {
        StorageDead(_733);
        StorageDead(_732);
        StorageLive(_771);
        StorageLive(_772);
        StorageLive(_773);
        _773 = _731;
        _772 = Gt(move _773, const 0_u64);
        switchInt(move _772) -> [0: bb397, otherwise: bb387];
    }

    bb387: {
        StorageDead(_773);
        StorageLive(_774);
        StorageLive(_775);
        StorageLive(_776);
        StorageLive(_777);
        StorageLive(_778);
        StorageLive(_779);
        _779 = &(*_16);
        _778 = <AccountInfo<'_> as Clone>::clone(move _779) -> [return: bb388, unwind: bb505];
    }

    bb388: {
        StorageDead(_779);
        StorageLive(_780);
        StorageLive(_781);
        _781 = &(*_43);
        _780 = <AccountInfo<'_> as Clone>::clone(move _781) -> [return: bb389, unwind: bb457];
    }

    bb389: {
        StorageDead(_781);
        StorageLive(_782);
        _782 = _731;
        StorageLive(_783);
        StorageLive(_784);
        _784 = &(*_70);
        _783 = <AccountInfo<'_> as Clone>::clone(move _784) -> [return: bb390, unwind: bb456];
    }

    bb390: {
        StorageDead(_784);
        StorageLive(_785);
        StorageLive(_786);
        _786 = &(*_355);
        _785 = move _786 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_786);
        StorageLive(_787);
        StorageLive(_788);
        _788 = &(*_97);
        _787 = <AccountInfo<'_> as Clone>::clone(move _788) -> [return: bb391, unwind: bb455];
    }

    bb391: {
        StorageDead(_788);
        _777 = TokenTransferParams::<'_, '_> { source: move _778, destination: move _780, amount: move _782, authority: move _783, authority_signer_seeds: move _785, token_program: move _787 };
        StorageDead(_787);
        StorageDead(_785);
        StorageDead(_783);
        StorageDead(_782);
        StorageDead(_780);
        StorageDead(_778);
        _776 = spl_token_transfer(move _777) -> [return: bb392, unwind: bb505];
    }

    bb392: {
        StorageDead(_777);
        _775 = <Result<(), ProgramError> as Try>::branch(move _776) -> [return: bb393, unwind: bb505];
    }

    bb393: {
        StorageDead(_776);
        _789 = discriminant(_775);
        switchInt(move _789) -> [0: bb394, 1: bb395, otherwise: bb9];
    }

    bb394: {
        StorageLive(_793);
        _793 = ((_775 as Continue).0: ());
        _774 = _793;
        StorageDead(_793);
        _918 = discriminant(_775);
        StorageDead(_775);
        StorageDead(_774);
        _771 = const ();
        goto -> bb398;
    }

    bb395: {
        StorageLive(_790);
        _790 = move ((_775 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_792);
        _792 = move _790;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _792) -> [return: bb396, unwind: bb479];
    }

    bb396: {
        StorageDead(_792);
        StorageDead(_790);
        _924 = discriminant(_775);
        StorageDead(_775);
        StorageDead(_774);
        StorageDead(_772);
        StorageDead(_771);
        goto -> bb411;
    }

    bb397: {
        StorageDead(_773);
        _771 = const ();
        goto -> bb398;
    }

    bb398: {
        StorageDead(_772);
        StorageDead(_771);
        StorageLive(_794);
        StorageLive(_795);
        StorageLive(_796);
        StorageLive(_797);
        StorageLive(_798);
        StorageLive(_799);
        _799 = &(*_16);
        _798 = <AccountInfo<'_> as Clone>::clone(move _799) -> [return: bb399, unwind: bb505];
    }

    bb399: {
        StorageDead(_799);
        StorageLive(_800);
        StorageLive(_801);
        _801 = &(*_25);
        _800 = <AccountInfo<'_> as Clone>::clone(move _801) -> [return: bb400, unwind: bb454];
    }

    bb400: {
        StorageDead(_801);
        StorageLive(_802);
        _802 = _471;
        StorageLive(_803);
        StorageLive(_804);
        _804 = &(*_70);
        _803 = <AccountInfo<'_> as Clone>::clone(move _804) -> [return: bb401, unwind: bb453];
    }

    bb401: {
        StorageDead(_804);
        StorageLive(_805);
        StorageLive(_806);
        _806 = &(*_355);
        _805 = move _806 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_806);
        StorageLive(_807);
        StorageLive(_808);
        _808 = &(*_97);
        _807 = <AccountInfo<'_> as Clone>::clone(move _808) -> [return: bb402, unwind: bb452];
    }

    bb402: {
        StorageDead(_808);
        _797 = TokenTransferParams::<'_, '_> { source: move _798, destination: move _800, amount: move _802, authority: move _803, authority_signer_seeds: move _805, token_program: move _807 };
        StorageDead(_807);
        StorageDead(_805);
        StorageDead(_803);
        StorageDead(_802);
        StorageDead(_800);
        StorageDead(_798);
        _796 = spl_token_transfer(move _797) -> [return: bb403, unwind: bb505];
    }

    bb403: {
        StorageDead(_797);
        _795 = <Result<(), ProgramError> as Try>::branch(move _796) -> [return: bb404, unwind: bb505];
    }

    bb404: {
        StorageDead(_796);
        _809 = discriminant(_795);
        switchInt(move _809) -> [0: bb405, 1: bb406, otherwise: bb9];
    }

    bb405: {
        StorageLive(_813);
        _813 = ((_795 as Continue).0: ());
        _794 = _813;
        StorageDead(_813);
        _920 = discriminant(_795);
        StorageDead(_795);
        StorageDead(_794);
        StorageLive(_814);
        _814 = ();
        _0 = Result::<(), ProgramError>::Ok(move _814);
        StorageDead(_814);
        StorageDead(_731);
        StorageDead(_651);
        StorageDead(_628);
        StorageDead(_497);
        StorageDead(_473);
        StorageDead(_472);
        StorageDead(_471);
        StorageDead(_470);
        StorageDead(_436);
        StorageDead(_430);
        StorageDead(_415);
        StorageDead(_364);
        StorageDead(_362);
        StorageDead(_356);
        StorageDead(_355);
        _828 = const false;
        StorageDead(_262);
        drop(_143) -> [return: bb408, unwind: bb471];
    }

    bb406: {
        StorageLive(_810);
        _810 = move ((_795 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_812);
        _812 = move _810;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _812) -> [return: bb407, unwind: bb478];
    }

    bb407: {
        StorageDead(_812);
        StorageDead(_810);
        _922 = discriminant(_795);
        StorageDead(_795);
        StorageDead(_794);
        goto -> bb411;
    }

    bb408: {
        StorageDead(_143);
        StorageDead(_106);
        StorageDead(_97);
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_79);
        StorageDead(_70);
        StorageDead(_61);
        StorageDead(_52);
        StorageDead(_43);
        StorageDead(_34);
        StorageDead(_25);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb451;
    }

    bb409: {
        StorageDead(_737);
        StorageDead(_736);
        drop(_733) -> [return: bb410, unwind: bb505];
    }

    bb410: {
        StorageDead(_733);
        StorageDead(_732);
        goto -> bb411;
    }

    bb411: {
        StorageDead(_731);
        goto -> bb413;
    }

    bb412: {
        StorageDead(_724);
        StorageDead(_722);
        StorageDead(_721);
        StorageDead(_719);
        StorageDead(_715);
        StorageDead(_714);
        goto -> bb413;
    }

    bb413: {
        StorageDead(_651);
        goto -> bb414;
    }

    bb414: {
        StorageDead(_628);
        goto -> bb422;
    }

    bb415: {
        StorageDead(_621);
        StorageDead(_619);
        StorageDead(_618);
        StorageDead(_616);
        StorageDead(_612);
        StorageDead(_611);
        goto -> bb422;
    }

    bb416: {
        _942 = discriminant(_597);
        _824 = const false;
        StorageDead(_597);
        StorageDead(_593);
        goto -> bb422;
    }

    bb417: {
        _946 = discriminant(_568);
        goto -> bb418;
    }

    bb418: {
        _948 = discriminant(_571);
        _826 = const false;
        StorageDead(_571);
        _825 = const false;
        StorageDead(_568);
        StorageDead(_564);
        goto -> bb422;
    }

    bb419: {
        StorageDead(_544);
        StorageDead(_542);
        StorageDead(_541);
        StorageDead(_539);
        StorageDead(_535);
        StorageDead(_534);
        goto -> bb422;
    }

    bb420: {
        _958 = discriminant(_506);
        _827 = const false;
        StorageDead(_506);
        StorageDead(_500);
        StorageDead(_499);
        goto -> bb421;
    }

    bb421: {
        StorageDead(_498);
        goto -> bb422;
    }

    bb422: {
        StorageDead(_497);
        goto -> bb423;
    }

    bb423: {
        StorageDead(_473);
        StorageDead(_472);
        StorageDead(_471);
        StorageDead(_470);
        goto -> bb425;
    }

    bb424: {
        StorageDead(_437);
        goto -> bb425;
    }

    bb425: {
        StorageDead(_436);
        StorageDead(_430);
        goto -> bb426;
    }

    bb426: {
        StorageDead(_415);
        goto -> bb429;
    }

    bb427: {
        StorageDead(_388);
        goto -> bb428;
    }

    bb428: {
        StorageDead(_386);
        goto -> bb429;
    }

    bb429: {
        StorageDead(_364);
        StorageDead(_362);
        StorageDead(_356);
        StorageDead(_355);
        goto -> bb477;
    }

    bb430: {
        StorageDead(_319);
        StorageDead(_318);
        goto -> bb477;
    }

    bb431: {
        StorageDead(_271);
        StorageDead(_269);
        StorageDead(_268);
        StorageDead(_266);
        StorageDead(_263);
        goto -> bb432;
    }

    bb432: {
        _828 = const false;
        StorageDead(_262);
        goto -> bb436;
    }

    bb433: {
        _974 = discriminant(_240);
        _829 = const false;
        StorageDead(_240);
        StorageDead(_239);
        StorageDead(_236);
        StorageDead(_235);
        goto -> bb434;
    }

    bb434: {
        StorageDead(_234);
        StorageDead(_232);
        StorageDead(_231);
        goto -> bb436;
    }

    bb435: {
        StorageDead(_215);
        StorageDead(_214);
        goto -> bb436;
    }

    bb436: {
        drop(_143) -> [return: bb438, unwind: bb471];
    }

    bb437: {
        StorageDead(_153);
        StorageDead(_151);
        StorageDead(_150);
        StorageDead(_148);
        _832 = const false;
        _833 = const false;
        StorageDead(_145);
        goto -> bb438;
    }

    bb438: {
        StorageDead(_143);
        goto -> bb440;
    }

    bb439: {
        StorageDead(_115);
        StorageDead(_113);
        StorageDead(_112);
        StorageDead(_110);
        StorageDead(_107);
        goto -> bb440;
    }

    bb440: {
        StorageDead(_106);
        goto -> bb441;
    }

    bb441: {
        StorageDead(_97);
        goto -> bb442;
    }

    bb442: {
        StorageDead(_89);
        StorageDead(_88);
        goto -> bb443;
    }

    bb443: {
        StorageDead(_79);
        goto -> bb444;
    }

    bb444: {
        StorageDead(_70);
        goto -> bb445;
    }

    bb445: {
        StorageDead(_61);
        goto -> bb446;
    }

    bb446: {
        StorageDead(_52);
        goto -> bb447;
    }

    bb447: {
        StorageDead(_43);
        goto -> bb448;
    }

    bb448: {
        StorageDead(_34);
        goto -> bb449;
    }

    bb449: {
        StorageDead(_25);
        goto -> bb450;
    }

    bb450: {
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb451;
    }

    bb451: {
        return;
    }

    bb452 (cleanup): {
        drop(_803) -> [return: bb453, unwind terminate(cleanup)];
    }

    bb453 (cleanup): {
        drop(_800) -> [return: bb454, unwind terminate(cleanup)];
    }

    bb454 (cleanup): {
        drop(_798) -> [return: bb505, unwind terminate(cleanup)];
    }

    bb455 (cleanup): {
        drop(_783) -> [return: bb456, unwind terminate(cleanup)];
    }

    bb456 (cleanup): {
        drop(_780) -> [return: bb457, unwind terminate(cleanup)];
    }

    bb457 (cleanup): {
        drop(_778) -> [return: bb505, unwind terminate(cleanup)];
    }

    bb458 (cleanup): {
        drop(_760) -> [return: bb459, unwind terminate(cleanup)];
    }

    bb459 (cleanup): {
        drop(_757) -> [return: bb460, unwind terminate(cleanup)];
    }

    bb460 (cleanup): {
        drop(_755) -> [return: bb461, unwind terminate(cleanup)];
    }

    bb461 (cleanup): {
        drop(_733) -> [return: bb505, unwind terminate(cleanup)];
    }

    bb462 (cleanup): {
        drop(_722) -> [return: bb505, unwind terminate(cleanup)];
    }

    bb463 (cleanup): {
        drop(_717) -> [return: bb505, unwind terminate(cleanup)];
    }

    bb464 (cleanup): {
        drop(_676) -> [return: bb505, unwind terminate(cleanup)];
    }

    bb465 (cleanup): {
        drop(_619) -> [return: bb505, unwind terminate(cleanup)];
    }

    bb466 (cleanup): {
        drop(_542) -> [return: bb505, unwind terminate(cleanup)];
    }

    bb467 (cleanup): {
        drop(_269) -> [return: bb468, unwind terminate(cleanup)];
    }

    bb468 (cleanup): {
        drop(_143) -> [return: bb471, unwind terminate(cleanup)];
    }

    bb469 (cleanup): {
        drop(_151) -> [return: bb471, unwind terminate(cleanup)];
    }

    bb470 (cleanup): {
        drop(_113) -> [return: bb471, unwind terminate(cleanup)];
    }

    bb471 (cleanup): {
        resume;
    }

    bb472: {
        _858 = discriminant(_216);
        StorageDead(_216);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        _228 = const "Borrow reserve is stale and must be refreshed in the current slot";
        _227 = &(*_228);
        _226 = solana_program::log::sol_log(move _227) -> [return: bb116, unwind: bb468];
    }

    bb473: {
        _860 = discriminant(_216);
        StorageDead(_216);
        _214 = const ();
        StorageDead(_215);
        StorageDead(_214);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        _233 = _2;
        _232 = Ne(move _233, const _);
        switchInt(move _232) -> [0: bb119, otherwise: bb118];
    }

    bb474: {
        _872 = discriminant(_320);
        StorageDead(_320);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        _332 = const "Obligation is stale and must be refreshed in the current slot";
        _331 = &(*_332);
        _330 = solana_program::log::sol_log(move _331) -> [return: bb169, unwind: bb505];
    }

    bb475: {
        _874 = discriminant(_320);
        StorageDead(_320);
        _318 = const ();
        StorageDead(_319);
        StorageDead(_318);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        _337 = &(_262.4: std::vec::Vec<solend_sdk::state::ObligationCollateral>);
        _336 = Vec::<ObligationCollateral>::is_empty(move _337) -> [return: bb171, unwind: bb505];
    }

    bb476: {
        drop(_262) -> [return: bb432, unwind: bb468];
    }

    bb477: {
        switchInt(_828) -> [0: bb432, otherwise: bb476];
    }

    bb478 (cleanup): {
        _1002 = discriminant(_795);
        goto -> bb505;
    }

    bb479 (cleanup): {
        _1003 = discriminant(_775);
        goto -> bb505;
    }

    bb480 (cleanup): {
        _1004 = discriminant(_752);
        goto -> bb461;
    }

    bb481 (cleanup): {
        _1005 = discriminant(_715);
        goto -> bb462;
    }

    bb482 (cleanup): {
        drop(_717) -> [return: bb462, unwind terminate(cleanup)];
    }

    bb483 (cleanup): {
        switchInt(_830) -> [0: bb462, otherwise: bb482];
    }

    bb484 (cleanup): {
        _1006 = discriminant(_706);
        goto -> bb505;
    }

    bb485 (cleanup): {
        _1007 = discriminant(_653);
        goto -> bb505;
    }

    bb486 (cleanup): {
        _1008 = discriminant(_640);
        goto -> bb505;
    }

    bb487 (cleanup): {
        _1009 = discriminant(_629);
        goto -> bb505;
    }

    bb488 (cleanup): {
        _1010 = discriminant(_612);
        goto -> bb465;
    }

    bb489 (cleanup): {
        _1011 = discriminant(_593);
        goto -> bb490;
    }

    bb490 (cleanup): {
        _1012 = discriminant(_597);
        goto -> bb505;
    }

    bb491 (cleanup): {
        _1013 = discriminant(_564);
        goto -> bb492;
    }

    bb492 (cleanup): {
        _1014 = discriminant(_568);
        goto -> bb493;
    }

    bb493 (cleanup): {
        _1015 = discriminant(_571);
        goto -> bb505;
    }

    bb494 (cleanup): {
        _1016 = discriminant(_552);
        goto -> bb505;
    }

    bb495 (cleanup): {
        _1017 = discriminant(_535);
        goto -> bb466;
    }

    bb496 (cleanup): {
        _1018 = discriminant(_522);
        goto -> bb505;
    }

    bb497 (cleanup): {
        _1019 = discriminant(_500);
        goto -> bb498;
    }

    bb498 (cleanup): {
        _1020 = discriminant(_506);
        goto -> bb505;
    }

    bb499 (cleanup): {
        _1021 = discriminant(_475);
        goto -> bb505;
    }

    bb500 (cleanup): {
        _1022 = discriminant(_458);
        goto -> bb505;
    }

    bb501 (cleanup): {
        _1023 = discriminant(_448);
        goto -> bb505;
    }

    bb502 (cleanup): {
        _1024 = discriminant(_438);
        goto -> bb505;
    }

    bb503 (cleanup): {
        _1025 = discriminant(_320);
        goto -> bb505;
    }

    bb504 (cleanup): {
        drop(_262) -> [return: bb468, unwind terminate(cleanup)];
    }

    bb505 (cleanup): {
        switchInt(_828) -> [0: bb468, otherwise: bb504];
    }

    bb506 (cleanup): {
        _1026 = discriminant(_263);
        goto -> bb467;
    }

    bb507 (cleanup): {
        _1027 = discriminant(_236);
        goto -> bb508;
    }

    bb508 (cleanup): {
        _1028 = discriminant(_240);
        goto -> bb468;
    }

    bb509 (cleanup): {
        _1029 = discriminant(_216);
        goto -> bb468;
    }

    bb510 (cleanup): {
        _1030 = discriminant(_145);
        goto -> bb469;
    }

    bb511 (cleanup): {
        _1031 = discriminant(_107);
        goto -> bb470;
    }

    bb512 (cleanup): {
        _1032 = discriminant(_98);
        goto -> bb471;
    }

    bb513 (cleanup): {
        _1033 = discriminant(_90);
        goto -> bb471;
    }

    bb514 (cleanup): {
        _1034 = discriminant(_80);
        goto -> bb471;
    }

    bb515 (cleanup): {
        _1035 = discriminant(_71);
        goto -> bb471;
    }

    bb516 (cleanup): {
        _1036 = discriminant(_62);
        goto -> bb471;
    }

    bb517 (cleanup): {
        _1037 = discriminant(_53);
        goto -> bb471;
    }

    bb518 (cleanup): {
        _1038 = discriminant(_44);
        goto -> bb471;
    }

    bb519 (cleanup): {
        _1039 = discriminant(_35);
        goto -> bb471;
    }

    bb520 (cleanup): {
        _1040 = discriminant(_26);
        goto -> bb471;
    }

    bb521 (cleanup): {
        _1041 = discriminant(_17);
        goto -> bb471;
    }

    bb522: {
        _614 = move (*_1064);
        StorageLive(_615);
        StorageLive(_616);
        StorageLive(_617);
        StorageLive(_618);
        StorageLive(_619);
        StorageLive(_620);
        StorageLive(_621);
        StorageLive(_622);
        _622 = &((*_34).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _621 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _622) -> [return: bb309, unwind: bb505];
    }

    bb523: {
        _497 = (((*_1056).3: solend_sdk::state::ReserveLiquidity).7: solend_sdk::math::Decimal);
        StorageLive(_498);
        StorageLive(_499);
        StorageLive(_500);
        StorageLive(_501);
        StorageLive(_502);
        StorageLive(_503);
        _503 = &mut (_106.7: solend_sdk::state::RateLimiter);
        StorageLive(_504);
        _504 = ((*_88).0: u64);
        StorageLive(_505);
        StorageLive(_506);
        StorageLive(_507);
        StorageLive(_508);
        _1057 = (((_143.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _508 = &(*_1057);
        StorageLive(_509);
        _509 = _470;
        _507 = Reserve::market_value_upper_bound(move _508, move _509) -> [return: bb251, unwind: bb505];
    }

    bb524: {
        _434 = (((*_1052).3: solend_sdk::state::ReserveLiquidity).6: solend_sdk::math::Decimal);
        _431 = <Decimal as TrySub>::try_sub(move _432, move _434) -> [return: bb222, unwind: bb505];
    }

    bb525: {
        _433 = (((*_1051).5: solend_sdk::state::ReserveConfig).13: u64);
        _432 = <Decimal as From<u64>>::from(move _433) -> [return: bb221, unwind: bb505];
    }

    bb526: {
        _255 = (((*_1048).5: solend_sdk::state::ReserveConfig).13: u64);
        _234 = Gt(move _235, move _255);
        switchInt(move _234) -> [0: bb132, otherwise: bb131];
    }

    bb527: {
        _244 = (((*_1047).3: solend_sdk::state::ReserveLiquidity).6: solend_sdk::math::Decimal);
        _241 = <Decimal as TryAdd>::try_add(move _242, move _244) -> [return: bb121, unwind: bb468];
    }
}
