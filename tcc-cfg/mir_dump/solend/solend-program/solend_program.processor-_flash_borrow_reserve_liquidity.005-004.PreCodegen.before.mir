// MIR for `_flash_borrow_reserve_liquidity` before PreCodegen

fn _flash_borrow_reserve_liquidity(_1: &Pubkey, _2: u64, _3: &AccountInfo<'_>, _4: &AccountInfo<'_>, _5: &AccountInfo<'_>, _6: &AccountInfo<'_>, _7: &AccountInfo<'_>, _8: &AccountInfo<'_>, _9: &AccountInfo<'_>) -> Result<(), ProgramError> {
    debug program_id => _1;
    debug liquidity_amount => _2;
    debug source_liquidity_info => _3;
    debug destination_liquidity_info => _4;
    debug reserve_info => _5;
    debug lending_market_info => _6;
    debug lending_market_authority_info => _7;
    debug sysvar_info => _8;
    debug token_program_id => _9;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _10: solend_sdk::state::LendingMarket;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::state::LendingMarket>;
    let mut _12: std::result::Result<solend_sdk::state::LendingMarket, solana_program::program_error::ProgramError>;
    let mut _13: &[u8];
    let _14: &&mut [u8];
    let mut _15: &std::cell::Ref<'_, &mut [u8]>;
    let _16: &std::cell::Ref<'_, &mut [u8]>;
    let _17: std::cell::Ref<'_, &mut [u8]>;
    let mut _18: &std::cell::RefCell<&mut [u8]>;
    let _19: &std::cell::RefCell<&mut [u8]>;
    let mut _20: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _21: isize;
    let _22: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _23: !;
    let mut _24: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _25: solend_sdk::state::LendingMarket;
    let _26: ();
    let mut _27: bool;
    let mut _28: &&solana_program::pubkey::Pubkey;
    let mut _29: &&solana_program::pubkey::Pubkey;
    let mut _30: !;
    let _31: ();
    let mut _32: &str;
    let _33: &str;
    let mut _34: solana_program::program_error::ProgramError;
    let mut _35: solend_sdk::error::LendingError;
    let _36: ();
    let mut _37: bool;
    let mut _38: &&solana_program::pubkey::Pubkey;
    let _39: &solana_program::pubkey::Pubkey;
    let mut _40: &&solana_program::pubkey::Pubkey;
    let mut _41: !;
    let _42: ();
    let mut _43: &str;
    let _44: &str;
    let mut _45: solana_program::program_error::ProgramError;
    let mut _46: solend_sdk::error::LendingError;
    let mut _48: solend_sdk::state::Reserve;
    let mut _49: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::state::Reserve>;
    let mut _50: std::result::Result<solend_sdk::state::Reserve, solana_program::program_error::ProgramError>;
    let mut _51: &[u8];
    let _52: &&mut [u8];
    let mut _53: &std::cell::Ref<'_, &mut [u8]>;
    let _54: &std::cell::Ref<'_, &mut [u8]>;
    let _55: std::cell::Ref<'_, &mut [u8]>;
    let mut _56: &std::cell::RefCell<&mut [u8]>;
    let _57: &std::cell::RefCell<&mut [u8]>;
    let mut _58: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _59: isize;
    let mut _61: !;
    let mut _62: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _64: ();
    let mut _65: bool;
    let mut _66: &&solana_program::pubkey::Pubkey;
    let mut _67: &&solana_program::pubkey::Pubkey;
    let mut _68: !;
    let _69: ();
    let mut _70: &str;
    let _71: &str;
    let mut _72: solana_program::program_error::ProgramError;
    let mut _73: solend_sdk::error::LendingError;
    let _74: ();
    let mut _75: bool;
    let mut _76: &&solana_program::pubkey::Pubkey;
    let _77: &solana_program::pubkey::Pubkey;
    let mut _78: &&solana_program::pubkey::Pubkey;
    let mut _79: !;
    let _80: ();
    let mut _81: &str;
    let _82: &str;
    let mut _83: solana_program::program_error::ProgramError;
    let mut _84: solend_sdk::error::LendingError;
    let _85: ();
    let mut _86: bool;
    let mut _87: &&solana_program::pubkey::Pubkey;
    let _88: &solana_program::pubkey::Pubkey;
    let mut _89: &&solana_program::pubkey::Pubkey;
    let mut _90: !;
    let _91: ();
    let mut _92: &str;
    let _93: &str;
    let mut _94: solana_program::program_error::ProgramError;
    let mut _95: solend_sdk::error::LendingError;
    let _96: ();
    let mut _97: bool;
    let mut _98: &&solana_program::pubkey::Pubkey;
    let _99: &solana_program::pubkey::Pubkey;
    let mut _100: &&solana_program::pubkey::Pubkey;
    let mut _101: !;
    let _102: ();
    let mut _103: &str;
    let _104: &str;
    let mut _105: solana_program::program_error::ProgramError;
    let mut _106: solend_sdk::error::LendingError;
    let _108: [&[u8]; 2];
    let mut _109: &[u8];
    let mut _110: &solana_program::pubkey::Pubkey;
    let mut _111: &[u8];
    let mut _112: &[u8; 1];
    let _113: &[u8; 1];
    let _114: [u8; 1];
    let mut _115: u8;
    let mut _117: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::pubkey::PubkeyError>, solana_program::pubkey::Pubkey>;
    let mut _118: std::result::Result<solana_program::pubkey::Pubkey, solana_program::pubkey::PubkeyError>;
    let mut _119: &[&[u8]];
    let mut _120: &[&[u8]; 2];
    let mut _121: &solana_program::pubkey::Pubkey;
    let mut _122: isize;
    let mut _124: !;
    let mut _125: std::result::Result<std::convert::Infallible, solana_program::pubkey::PubkeyError>;
    let _127: ();
    let mut _128: bool;
    let mut _129: &&solana_program::pubkey::Pubkey;
    let _130: &solana_program::pubkey::Pubkey;
    let mut _131: &&solana_program::pubkey::Pubkey;
    let mut _132: !;
    let _133: ();
    let mut _134: &str;
    let _135: &str;
    let mut _136: &std::string::String;
    let _137: &std::string::String;
    let _138: std::string::String;
    let mut _140: std::fmt::Arguments<'_>;
    let mut _141: &[&str];
    let mut _142: &[&str; 2];
    let _143: &[&str; 2];
    let _144: [&str; 2];
    let mut _145: &[bytemuck::core::fmt::rt::Argument<'_>];
    let mut _146: &[bytemuck::core::fmt::rt::Argument<'_>; 2];
    let _147: &[bytemuck::core::fmt::rt::Argument<'_>; 2];
    let _148: [bytemuck::core::fmt::rt::Argument<'_>; 2];
    let mut _149: bytemuck::core::fmt::rt::Argument<'_>;
    let mut _150: &&std::string::String;
    let _151: &&std::string::String;
    let _152: &std::string::String;
    let _153: std::string::String;
    let mut _154: &solana_program::pubkey::Pubkey;
    let mut _155: bytemuck::core::fmt::rt::Argument<'_>;
    let mut _156: &&std::string::String;
    let _157: &&std::string::String;
    let _158: &std::string::String;
    let _159: std::string::String;
    let mut _160: &solana_program::pubkey::Pubkey;
    let mut _161: solana_program::program_error::ProgramError;
    let mut _162: solend_sdk::error::LendingError;
    let _163: ();
    let mut _164: bool;
    let mut _165: u64;
    let mut _166: !;
    let _167: ();
    let mut _168: &str;
    let _169: &str;
    let mut _170: solana_program::program_error::ProgramError;
    let mut _171: solend_sdk::error::LendingError;
    let mut _173: u16;
    let mut _174: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, u16>;
    let mut _175: std::result::Result<u16, solana_program::program_error::ProgramError>;
    let mut _176: &solana_program::account_info::AccountInfo<'_>;
    let mut _177: isize;
    let mut _179: !;
    let mut _180: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _182: ();
    let mut _183: bool;
    let mut _184: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, bool>;
    let mut _185: std::result::Result<bool, solana_program::program_error::ProgramError>;
    let mut _186: &solana_program::pubkey::Pubkey;
    let mut _187: usize;
    let mut _188: &solana_program::account_info::AccountInfo<'_>;
    let mut _189: isize;
    let mut _191: !;
    let mut _192: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _194: !;
    let _195: ();
    let mut _196: &str;
    let _197: &str;
    let mut _198: solana_program::program_error::ProgramError;
    let mut _199: solend_sdk::error::LendingError;
    let _202: ();
    let mut _203: ();
    let mut _204: (usize, bool);
    let mut _206: std::result::Result<solana_program::instruction::Instruction, solana_program::program_error::ProgramError>;
    let mut _207: usize;
    let mut _208: &solana_program::account_info::AccountInfo<'_>;
    let mut _209: isize;
    let mut _210: isize;
    let mut _212: !;
    let mut _214: !;
    let mut _215: solana_program::program_error::ProgramError;
    let _216: ();
    let mut _217: bool;
    let mut _218: &solana_program::pubkey::Pubkey;
    let mut _219: &solana_program::pubkey::Pubkey;
    let mut _220: !;
    let mut _222: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::instruction::LendingInstruction>;
    let mut _223: std::result::Result<solend_sdk::instruction::LendingInstruction, solana_program::program_error::ProgramError>;
    let mut _224: &[u8];
    let _225: &[u8];
    let mut _226: &std::vec::Vec<u8>;
    let mut _227: isize;
    let mut _229: !;
    let mut _230: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _232: ();
    let mut _233: isize;
    let _236: ();
    let mut _237: bool;
    let mut _238: !;
    let _239: ();
    let mut _240: &str;
    let _241: &str;
    let mut _242: solana_program::program_error::ProgramError;
    let mut _243: solend_sdk::error::LendingError;
    let _244: ();
    let mut _245: bool;
    let mut _246: &solana_program::pubkey::Pubkey;
    let _247: &solana_program::instruction::AccountMeta;
    let mut _248: &std::vec::Vec<solana_program::instruction::AccountMeta>;
    let mut _249: &solana_program::pubkey::Pubkey;
    let mut _250: !;
    let _251: ();
    let mut _252: &str;
    let _253: &str;
    let mut _254: solana_program::program_error::ProgramError;
    let mut _255: solend_sdk::error::LendingError;
    let _256: ();
    let mut _257: bool;
    let mut _258: u64;
    let mut _259: u64;
    let mut _260: !;
    let _261: ();
    let mut _262: &str;
    let _263: &str;
    let mut _264: solana_program::program_error::ProgramError;
    let mut _265: solend_sdk::error::LendingError;
    let _266: ();
    let mut _267: bool;
    let mut _268: usize;
    let mut _269: u8;
    let mut _270: usize;
    let mut _271: !;
    let _272: ();
    let mut _273: &str;
    let _274: &str;
    let mut _275: &std::string::String;
    let _276: &std::string::String;
    let _277: std::string::String;
    let mut _279: std::fmt::Arguments<'_>;
    let mut _280: &[&str];
    let mut _281: &[&str; 2];
    let _282: &[&str; 2];
    let _283: [&str; 2];
    let mut _284: &[bytemuck::core::fmt::rt::Argument<'_>];
    let mut _285: &[bytemuck::core::fmt::rt::Argument<'_>; 2];
    let _286: &[bytemuck::core::fmt::rt::Argument<'_>; 2];
    let _287: [bytemuck::core::fmt::rt::Argument<'_>; 2];
    let mut _288: bytemuck::core::fmt::rt::Argument<'_>;
    let mut _289: &u8;
    let _290: &u8;
    let mut _291: bytemuck::core::fmt::rt::Argument<'_>;
    let mut _292: &usize;
    let _293: &usize;
    let mut _294: solana_program::program_error::ProgramError;
    let mut _295: solend_sdk::error::LendingError;
    let mut _296: !;
    let _297: ();
    let mut _298: &str;
    let _299: &str;
    let mut _300: solana_program::program_error::ProgramError;
    let mut _301: solend_sdk::error::LendingError;
    let _302: ();
    let mut _303: bool;
    let mut _304: !;
    let _305: ();
    let mut _306: &str;
    let _307: &str;
    let mut _308: solana_program::program_error::ProgramError;
    let mut _309: solend_sdk::error::LendingError;
    let _310: ();
    let mut _311: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _312: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _313: &mut solend_sdk::state::ReserveLiquidity;
    let mut _314: solend_sdk::math::Decimal;
    let mut _315: u64;
    let mut _316: isize;
    let mut _318: !;
    let mut _319: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _321: ();
    let mut _322: &mut solend_sdk::state::LastUpdate;
    let _323: ();
    let mut _324: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _325: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _326: solend_sdk::state::Reserve;
    let mut _327: &mut [u8];
    let mut _328: &mut &mut [u8];
    let mut _329: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _330: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _331: std::cell::RefMut<'_, &mut [u8]>;
    let mut _332: &std::cell::RefCell<&mut [u8]>;
    let _333: &std::cell::RefCell<&mut [u8]>;
    let mut _334: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _335: isize;
    let mut _337: !;
    let mut _338: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _340: ();
    let mut _341: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _342: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _343: processor::TokenTransferParams<'_, '_>;
    let mut _344: solana_program::account_info::AccountInfo<'_>;
    let mut _345: &solana_program::account_info::AccountInfo<'_>;
    let mut _346: solana_program::account_info::AccountInfo<'_>;
    let mut _347: &solana_program::account_info::AccountInfo<'_>;
    let mut _348: u64;
    let mut _349: solana_program::account_info::AccountInfo<'_>;
    let mut _350: &solana_program::account_info::AccountInfo<'_>;
    let mut _351: &[&[u8]];
    let mut _352: &[&[u8]; 2];
    let mut _353: solana_program::account_info::AccountInfo<'_>;
    let mut _354: &solana_program::account_info::AccountInfo<'_>;
    let mut _355: isize;
    let mut _357: !;
    let mut _358: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _360: ();
    let mut _363: &mut [u8];
    let mut _364: &mut [u8];
    let mut _365: &solana_program::pubkey::Pubkey;
    let mut _366: &solana_program::pubkey::Pubkey;
    let mut _367: &solana_program::pubkey::Pubkey;
    let mut _368: &mut [u8];
    let mut _369: bool;
    let mut _370: bool;
    let mut _371: isize;
    let mut _372: isize;
    let mut _373: isize;
    let mut _374: isize;
    let mut _375: isize;
    let mut _376: isize;
    let mut _377: isize;
    let mut _378: isize;
    let mut _379: isize;
    let mut _380: isize;
    let mut _381: isize;
    let mut _382: isize;
    let mut _383: isize;
    let mut _384: isize;
    let mut _385: isize;
    let mut _386: isize;
    let mut _387: isize;
    let mut _388: isize;
    let mut _389: isize;
    let mut _390: isize;
    let mut _391: isize;
    let mut _392: isize;
    let mut _393: isize;
    let mut _394: isize;
    let mut _395: isize;
    let mut _396: isize;
    let mut _397: isize;
    let mut _398: isize;
    let mut _399: isize;
    let mut _400: isize;
    let mut _401: isize;
    let mut _402: isize;
    let mut _403: isize;
    let mut _404: isize;
    let mut _405: isize;
    let mut _406: isize;
    let mut _407: isize;
    let mut _408: isize;
    let mut _409: isize;
    let mut _410: isize;
    let mut _411: isize;
    let mut _412: isize;
    let mut _413: isize;
    let mut _414: isize;
    let mut _415: isize;
    let mut _416: isize;
    let mut _417: isize;
    let mut _418: isize;
    let mut _419: *const solend_sdk::state::Reserve;
    let mut _420: *const solend_sdk::state::Reserve;
    let mut _421: *const solend_sdk::state::Reserve;
    let mut _422: *const solend_sdk::state::Reserve;
    let mut _423: *const solend_sdk::state::Reserve;
    let mut _424: *const solend_sdk::state::Reserve;
    let mut _425: *const solend_sdk::state::Reserve;
    scope 1 {
        debug lending_market => _10;
        let mut _47: std::boxed::Box<solend_sdk::state::Reserve>;
        let _60: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _63: solend_sdk::state::Reserve;
        scope 6 {
            debug reserve => _47;
            let _107: &[&[u8]; 2];
            scope 11 {
                debug authority_signer_seeds => _107;
                let _116: solana_program::pubkey::Pubkey;
                let _123: std::result::Result<std::convert::Infallible, solana_program::pubkey::PubkeyError>;
                let _126: solana_program::pubkey::Pubkey;
                scope 12 {
                    debug lending_market_authority_pubkey => _116;
                    let _139: std::string::String;
                    let _172: usize;
                    let _178: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                    let _181: u16;
                    let mut _361: &[&str; 2];
                    let mut _432: *const ();
                    let mut _433: usize;
                    let mut _434: usize;
                    let mut _435: usize;
                    let mut _436: usize;
                    let mut _437: bool;
                    scope 17 {
                        debug res => _139;
                    }
                    scope 18 {
                        debug current_index => _172;
                        let _190: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                        let _193: bool;
                        let mut _200: usize;
                        scope 23 {
                            debug residual => _190;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _193;
                            scope 26 {
                            }
                        }
                        scope 27 {
                            debug i => _200;
                            let mut _201: bool;
                            scope 28 {
                                debug found_repay_ix => _201;
                                let _205: solana_program::instruction::Instruction;
                                let _211: solana_program::instruction::Instruction;
                                let _213: solana_program::program_error::ProgramError;
                                let _317: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                let _320: ();
                                let _336: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                let _339: ();
                                let _356: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                let _359: ();
                                let mut _426: *const ();
                                let mut _427: usize;
                                let mut _428: usize;
                                let mut _429: usize;
                                let mut _430: usize;
                                let mut _431: bool;
                                scope 29 {
                                    debug ixn => _205;
                                    let _221: solend_sdk::instruction::LendingInstruction;
                                    let _228: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                    let _231: solend_sdk::instruction::LendingInstruction;
                                    scope 32 {
                                        debug unpacked => _221;
                                        let _234: u64;
                                        let _235: u8;
                                        scope 37 {
                                            debug repay_liquidity_amount => _234;
                                            debug borrow_instruction_index => _235;
                                            let _278: std::string::String;
                                            let mut _362: &[&str; 2];
                                            scope 38 {
                                                debug res => _278;
                                            }
                                        }
                                    }
                                    scope 33 {
                                        debug residual => _228;
                                        scope 34 {
                                        }
                                    }
                                    scope 35 {
                                        debug val => _231;
                                        scope 36 {
                                        }
                                    }
                                }
                                scope 30 {
                                    debug ix => _211;
                                }
                                scope 31 {
                                    debug e => _213;
                                }
                                scope 39 {
                                    debug residual => _317;
                                    scope 40 {
                                    }
                                }
                                scope 41 {
                                    debug val => _320;
                                    scope 42 {
                                    }
                                }
                                scope 43 {
                                    debug residual => _336;
                                    scope 44 {
                                    }
                                }
                                scope 45 {
                                    debug val => _339;
                                    scope 46 {
                                    }
                                }
                                scope 47 {
                                    debug residual => _356;
                                    scope 48 {
                                    }
                                }
                                scope 49 {
                                    debug val => _359;
                                    scope 50 {
                                    }
                                }
                            }
                        }
                    }
                    scope 19 {
                        debug residual => _178;
                        scope 20 {
                        }
                    }
                    scope 21 {
                        debug val => _181;
                        scope 22 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _123;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _126;
                    scope 16 {
                    }
                }
            }
        }
        scope 7 {
            debug residual => _60;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _63;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _22;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _25;
        scope 5 {
        }
    }

    bb0: {
        _370 = const false;
        _369 = const false;
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = &((*_6).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _19 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _20) -> [return: bb1, unwind continue];
    }

    bb1: {
        _18 = &(*_19);
        StorageDead(_20);
        _17 = RefCell::<&mut [u8]>::borrow(move _18) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_18);
        _16 = &_17;
        _15 = &(*_16);
        _14 = <Ref<'_, &mut [u8]> as Deref>::deref(move _15) -> [return: bb3, unwind: bb194];
    }

    bb3: {
        _363 = deref_copy (*_14);
        _13 = &(*_363);
        StorageDead(_15);
        _12 = <LendingMarket as Pack>::unpack(move _13) -> [return: bb4, unwind: bb194];
    }

    bb4: {
        StorageDead(_13);
        _11 = <Result<LendingMarket, ProgramError> as Try>::branch(move _12) -> [return: bb5, unwind: bb194];
    }

    bb5: {
        StorageDead(_12);
        _21 = discriminant(_11);
        switchInt(move _21) -> [0: bb6, 1: bb8, otherwise: bb7];
    }

    bb6: {
        StorageLive(_25);
        _25 = move ((_11 as Continue).0: solend_sdk::state::LendingMarket);
        _10 = move _25;
        StorageDead(_25);
        _371 = discriminant(_11);
        drop(_17) -> [return: bb10, unwind: bb195];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        StorageLive(_22);
        _22 = move ((_11 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_24);
        _24 = move _22;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _24) -> [return: bb9, unwind: bb207];
    }

    bb9: {
        StorageDead(_24);
        StorageDead(_22);
        _409 = discriminant(_11);
        drop(_17) -> [return: bb178, unwind: bb195];
    }

    bb10: {
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_11);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &((*_6).3: &solana_program::pubkey::Pubkey);
        StorageLive(_29);
        _29 = &_1;
        _27 = <&Pubkey as PartialEq>::ne(move _28, move _29) -> [return: bb11, unwind continue];
    }

    bb11: {
        switchInt(move _27) -> [0: bb15, otherwise: bb12];
    }

    bb12: {
        StorageDead(_29);
        StorageDead(_28);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = const "Lending market provided is not owned by the lending program";
        _32 = &(*_33);
        _31 = solana_program::log::sol_log(move _32) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_32);
        StorageDead(_33);
        StorageDead(_31);
        StorageLive(_34);
        StorageLive(_35);
        _35 = solend_sdk::error::LendingError::InvalidAccountOwner;
        _34 = <LendingError as Into<ProgramError>>::into(move _35) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_35);
        _0 = Result::<(), ProgramError>::Err(move _34);
        StorageDead(_34);
        StorageDead(_27);
        StorageDead(_26);
        goto -> bb179;
    }

    bb15: {
        StorageDead(_29);
        StorageDead(_28);
        _26 = const ();
        StorageDead(_27);
        StorageDead(_26);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &(_10.4: solana_program::pubkey::Pubkey);
        _38 = &_39;
        StorageLive(_40);
        _40 = &((*_9).0: &solana_program::pubkey::Pubkey);
        _37 = <&Pubkey as PartialEq>::ne(move _38, move _40) -> [return: bb16, unwind continue];
    }

    bb16: {
        switchInt(move _37) -> [0: bb20, otherwise: bb17];
    }

    bb17: {
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_38);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = const "Lending market token program does not match the token program provided";
        _43 = &(*_44);
        _42 = solana_program::log::sol_log(move _43) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_43);
        StorageDead(_44);
        StorageDead(_42);
        StorageLive(_45);
        StorageLive(_46);
        _46 = InvalidTokenProgram;
        _45 = <LendingError as Into<ProgramError>>::into(move _46) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_46);
        _0 = Result::<(), ProgramError>::Err(move _45);
        StorageDead(_45);
        StorageDead(_37);
        StorageDead(_36);
        goto -> bb179;
    }

    bb20: {
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_38);
        _36 = const ();
        StorageDead(_37);
        StorageDead(_36);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _58 = &((*_5).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _57 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _58) -> [return: bb21, unwind continue];
    }

    bb21: {
        _56 = &(*_57);
        StorageDead(_58);
        _55 = RefCell::<&mut [u8]>::borrow(move _56) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_56);
        _54 = &_55;
        _53 = &(*_54);
        _52 = <Ref<'_, &mut [u8]> as Deref>::deref(move _53) -> [return: bb23, unwind: bb193];
    }

    bb23: {
        _364 = deref_copy (*_52);
        _51 = &(*_364);
        StorageDead(_53);
        _50 = <Reserve as Pack>::unpack(move _51) -> [return: bb24, unwind: bb193];
    }

    bb24: {
        StorageDead(_51);
        _49 = <Result<Reserve, ProgramError> as Try>::branch(move _50) -> [return: bb25, unwind: bb193];
    }

    bb25: {
        _369 = const true;
        _370 = const true;
        StorageDead(_50);
        _59 = discriminant(_49);
        switchInt(move _59) -> [0: bb26, 1: bb27, otherwise: bb7];
    }

    bb26: {
        StorageLive(_63);
        _63 = move ((_49 as Continue).0: solend_sdk::state::Reserve);
        _48 = move _63;
        StorageDead(_63);
        _47 = Box::<Reserve>::new(move _48) -> [return: bb29, unwind: bb206];
    }

    bb27: {
        StorageLive(_60);
        _60 = move ((_49 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_62);
        _62 = move _60;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _62) -> [return: bb28, unwind: bb206];
    }

    bb28: {
        StorageDead(_62);
        StorageDead(_60);
        StorageDead(_48);
        _407 = discriminant(_49);
        drop(_55) -> [return: bb176, unwind: bb195];
    }

    bb29: {
        StorageDead(_48);
        _373 = discriminant(_49);
        drop(_55) -> [return: bb30, unwind: bb192];
    }

    bb30: {
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_52);
        _369 = const false;
        _370 = const false;
        StorageDead(_49);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _66 = &((*_5).3: &solana_program::pubkey::Pubkey);
        StorageLive(_67);
        _67 = &_1;
        _65 = <&Pubkey as PartialEq>::ne(move _66, move _67) -> [return: bb31, unwind: bb192];
    }

    bb31: {
        switchInt(move _65) -> [0: bb35, otherwise: bb32];
    }

    bb32: {
        StorageDead(_67);
        StorageDead(_66);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = const "Reserve provided is not owned by the lending program";
        _70 = &(*_71);
        _69 = solana_program::log::sol_log(move _70) -> [return: bb33, unwind: bb192];
    }

    bb33: {
        StorageDead(_70);
        StorageDead(_71);
        StorageDead(_69);
        StorageLive(_72);
        StorageLive(_73);
        _73 = solend_sdk::error::LendingError::InvalidAccountOwner;
        _72 = <LendingError as Into<ProgramError>>::into(move _73) -> [return: bb34, unwind: bb192];
    }

    bb34: {
        StorageDead(_73);
        _0 = Result::<(), ProgramError>::Err(move _72);
        StorageDead(_72);
        StorageDead(_65);
        StorageDead(_64);
        goto -> bb175;
    }

    bb35: {
        StorageDead(_67);
        StorageDead(_66);
        _64 = const ();
        StorageDead(_65);
        StorageDead(_64);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _419 = (((_47.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _77 = &((*_419).2: solana_program::pubkey::Pubkey);
        _76 = &_77;
        StorageLive(_78);
        _78 = &((*_6).0: &solana_program::pubkey::Pubkey);
        _75 = <&Pubkey as PartialEq>::ne(move _76, move _78) -> [return: bb36, unwind: bb192];
    }

    bb36: {
        switchInt(move _75) -> [0: bb40, otherwise: bb37];
    }

    bb37: {
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_76);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = const "Reserve lending market does not match the lending market provided";
        _81 = &(*_82);
        _80 = solana_program::log::sol_log(move _81) -> [return: bb38, unwind: bb192];
    }

    bb38: {
        StorageDead(_81);
        StorageDead(_82);
        StorageDead(_80);
        StorageLive(_83);
        StorageLive(_84);
        _84 = InvalidAccountInput;
        _83 = <LendingError as Into<ProgramError>>::into(move _84) -> [return: bb39, unwind: bb192];
    }

    bb39: {
        StorageDead(_84);
        _0 = Result::<(), ProgramError>::Err(move _83);
        StorageDead(_83);
        StorageDead(_75);
        StorageDead(_74);
        goto -> bb175;
    }

    bb40: {
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_76);
        _74 = const ();
        StorageDead(_75);
        StorageDead(_74);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _420 = (((_47.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _88 = &(((*_420).3: solend_sdk::state::ReserveLiquidity).2: solana_program::pubkey::Pubkey);
        _87 = &_88;
        StorageLive(_89);
        _89 = &((*_3).0: &solana_program::pubkey::Pubkey);
        _86 = <&Pubkey as PartialEq>::ne(move _87, move _89) -> [return: bb41, unwind: bb192];
    }

    bb41: {
        switchInt(move _86) -> [0: bb45, otherwise: bb42];
    }

    bb42: {
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_87);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _93 = const "Borrow reserve liquidity supply must be used as the source liquidity provided";
        _92 = &(*_93);
        _91 = solana_program::log::sol_log(move _92) -> [return: bb43, unwind: bb192];
    }

    bb43: {
        StorageDead(_92);
        StorageDead(_93);
        StorageDead(_91);
        StorageLive(_94);
        StorageLive(_95);
        _95 = InvalidAccountInput;
        _94 = <LendingError as Into<ProgramError>>::into(move _95) -> [return: bb44, unwind: bb192];
    }

    bb44: {
        StorageDead(_95);
        _0 = Result::<(), ProgramError>::Err(move _94);
        StorageDead(_94);
        StorageDead(_86);
        StorageDead(_85);
        goto -> bb175;
    }

    bb45: {
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_87);
        _85 = const ();
        StorageDead(_86);
        StorageDead(_85);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _421 = (((_47.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _99 = &(((*_421).3: solend_sdk::state::ReserveLiquidity).2: solana_program::pubkey::Pubkey);
        _98 = &_99;
        StorageLive(_100);
        _100 = &((*_4).0: &solana_program::pubkey::Pubkey);
        _97 = <&Pubkey as PartialEq>::eq(move _98, move _100) -> [return: bb46, unwind: bb192];
    }

    bb46: {
        switchInt(move _97) -> [0: bb50, otherwise: bb47];
    }

    bb47: {
        StorageDead(_100);
        StorageDead(_99);
        StorageDead(_98);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _104 = const "Borrow reserve liquidity supply cannot be used as the destination liquidity provided";
        _103 = &(*_104);
        _102 = solana_program::log::sol_log(move _103) -> [return: bb48, unwind: bb192];
    }

    bb48: {
        StorageDead(_103);
        StorageDead(_104);
        StorageDead(_102);
        StorageLive(_105);
        StorageLive(_106);
        _106 = InvalidAccountInput;
        _105 = <LendingError as Into<ProgramError>>::into(move _106) -> [return: bb49, unwind: bb192];
    }

    bb49: {
        StorageDead(_106);
        _0 = Result::<(), ProgramError>::Err(move _105);
        StorageDead(_105);
        StorageDead(_97);
        StorageDead(_96);
        goto -> bb175;
    }

    bb50: {
        StorageDead(_100);
        StorageDead(_99);
        StorageDead(_98);
        _96 = const ();
        StorageDead(_97);
        StorageDead(_96);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _365 = deref_copy ((*_6).0: &solana_program::pubkey::Pubkey);
        _110 = &(*_365);
        _109 = <Pubkey as AsRef<[u8]>>::as_ref(move _110) -> [return: bb51, unwind: bb192];
    }

    bb51: {
        StorageDead(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        _115 = (_10.1: u8);
        _114 = [move _115];
        StorageDead(_115);
        _113 = &_114;
        _112 = &(*_113);
        _111 = move _112 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_112);
        _108 = [move _109, move _111];
        StorageDead(_111);
        StorageDead(_109);
        _107 = &_108;
        StorageDead(_113);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        _120 = &(*_107);
        _119 = move _120 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_120);
        StorageLive(_121);
        _121 = &(*_1);
        _118 = Pubkey::create_program_address(move _119, move _121) -> [return: bb52, unwind: bb192];
    }

    bb52: {
        StorageDead(_121);
        StorageDead(_119);
        _117 = <Result<Pubkey, PubkeyError> as Try>::branch(move _118) -> [return: bb53, unwind: bb192];
    }

    bb53: {
        StorageDead(_118);
        _122 = discriminant(_117);
        switchInt(move _122) -> [0: bb54, 1: bb55, otherwise: bb7];
    }

    bb54: {
        StorageLive(_126);
        _126 = ((_117 as Continue).0: solana_program::pubkey::Pubkey);
        _116 = _126;
        StorageDead(_126);
        StorageDead(_117);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _130 = &_116;
        _129 = &_130;
        StorageLive(_131);
        _131 = &((*_7).0: &solana_program::pubkey::Pubkey);
        _128 = <&Pubkey as PartialEq>::ne(move _129, move _131) -> [return: bb57, unwind: bb192];
    }

    bb55: {
        StorageLive(_123);
        _123 = move ((_117 as Break).0: std::result::Result<std::convert::Infallible, solana_program::pubkey::PubkeyError>);
        StorageLive(_125);
        _125 = move _123;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, PubkeyError>>>::from_residual(move _125) -> [return: bb56, unwind: bb192];
    }

    bb56: {
        StorageDead(_125);
        StorageDead(_123);
        StorageDead(_117);
        goto -> bb174;
    }

    bb57: {
        switchInt(move _128) -> [0: bb71, otherwise: bb58];
    }

    bb58: {
        StorageDead(_131);
        StorageDead(_130);
        StorageDead(_129);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        _361 = const _;
        _143 = &(*_361);
        _142 = &(*_143);
        _141 = move _142 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_142);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        _154 = &_116;
        _153 = <Pubkey as ToString>::to_string(move _154) -> [return: bb59, unwind: bb192];
    }

    bb59: {
        StorageDead(_154);
        _152 = &_153;
        _151 = &_152;
        _150 = &(*_151);
        _149 = bytemuck::core::fmt::rt::Argument::<'_>::new_display::<&String>(move _150) -> [return: bb60, unwind: bb191];
    }

    bb60: {
        StorageDead(_150);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        _366 = deref_copy ((*_7).0: &solana_program::pubkey::Pubkey);
        _160 = &(*_366);
        _159 = <Pubkey as ToString>::to_string(move _160) -> [return: bb61, unwind: bb191];
    }

    bb61: {
        StorageDead(_160);
        _158 = &_159;
        _157 = &_158;
        _156 = &(*_157);
        _155 = bytemuck::core::fmt::rt::Argument::<'_>::new_display::<&String>(move _156) -> [return: bb62, unwind: bb190];
    }

    bb62: {
        StorageDead(_156);
        _148 = [move _149, move _155];
        StorageDead(_155);
        StorageDead(_149);
        _147 = &_148;
        _146 = &(*_147);
        _145 = move _146 as &[bytemuck::core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_146);
        _140 = Arguments::<'_>::new_v1(move _141, move _145) -> [return: bb63, unwind: bb190];
    }

    bb63: {
        StorageDead(_145);
        StorageDead(_141);
        _139 = format(move _140) -> [return: bb64, unwind: bb190];
    }

    bb64: {
        StorageDead(_140);
        drop(_159) -> [return: bb65, unwind: bb188];
    }

    bb65: {
        StorageDead(_159);
        StorageDead(_158);
        StorageDead(_157);
        drop(_153) -> [return: bb66, unwind: bb189];
    }

    bb66: {
        StorageDead(_153);
        StorageDead(_152);
        StorageDead(_151);
        StorageDead(_148);
        StorageDead(_147);
        StorageDead(_143);
        _138 = move _139;
        StorageDead(_139);
        _137 = &_138;
        _136 = &(*_137);
        _135 = <String as Deref>::deref(move _136) -> [return: bb67, unwind: bb187];
    }

    bb67: {
        _134 = &(*_135);
        StorageDead(_136);
        _133 = solana_program::log::sol_log(move _134) -> [return: bb68, unwind: bb187];
    }

    bb68: {
        StorageDead(_134);
        drop(_138) -> [return: bb69, unwind: bb192];
    }

    bb69: {
        StorageDead(_138);
        StorageDead(_137);
        StorageDead(_135);
        StorageDead(_133);
        StorageLive(_161);
        StorageLive(_162);
        _162 = InvalidMarketAuthority;
        _161 = <LendingError as Into<ProgramError>>::into(move _162) -> [return: bb70, unwind: bb192];
    }

    bb70: {
        StorageDead(_162);
        _0 = Result::<(), ProgramError>::Err(move _161);
        StorageDead(_161);
        StorageDead(_128);
        StorageDead(_127);
        goto -> bb174;
    }

    bb71: {
        StorageDead(_131);
        StorageDead(_130);
        StorageDead(_129);
        _127 = const ();
        StorageDead(_128);
        StorageDead(_127);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        _422 = (((_47.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _432 = _422 as *const () (PtrToPtr);
        _433 = _432 as usize (Transmute);
        _434 = AlignOf(solend_sdk::state::Reserve);
        _435 = Sub(_434, const 1_usize);
        _436 = BitAnd(_433, _435);
        _437 = Eq(_436, const 0_usize);
        assert(_437, "misaligned pointer dereference: address must be a multiple of {} but is {}", _434, _433) -> [success: bb209, unwind unreachable];
    }

    bb72: {
        StorageDead(_165);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        _169 = const "Flash loans are disabled for this reserve";
        _168 = &(*_169);
        _167 = solana_program::log::sol_log(move _168) -> [return: bb74, unwind: bb192];
    }

    bb73: {
        StorageDead(_165);
        _163 = const ();
        StorageDead(_164);
        StorageDead(_163);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        _176 = &(*_8);
        _175 = load_current_index_checked(move _176) -> [return: bb76, unwind: bb192];
    }

    bb74: {
        StorageDead(_168);
        StorageDead(_169);
        StorageDead(_167);
        StorageLive(_170);
        StorageLive(_171);
        _171 = FlashLoansDisabled;
        _170 = <LendingError as Into<ProgramError>>::into(move _171) -> [return: bb75, unwind: bb192];
    }

    bb75: {
        StorageDead(_171);
        _0 = Result::<(), ProgramError>::Err(move _170);
        StorageDead(_170);
        StorageDead(_164);
        StorageDead(_163);
        goto -> bb174;
    }

    bb76: {
        StorageDead(_176);
        _174 = <Result<u16, ProgramError> as Try>::branch(move _175) -> [return: bb77, unwind: bb192];
    }

    bb77: {
        StorageDead(_175);
        _177 = discriminant(_174);
        switchInt(move _177) -> [0: bb78, 1: bb79, otherwise: bb7];
    }

    bb78: {
        StorageLive(_181);
        _181 = ((_174 as Continue).0: u16);
        _173 = _181;
        StorageDead(_181);
        _172 = move _173 as usize (IntToInt);
        StorageDead(_173);
        _375 = discriminant(_174);
        StorageDead(_174);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        _186 = &(*_1);
        StorageLive(_187);
        _187 = _172;
        StorageLive(_188);
        _188 = &(*_8);
        _185 = is_cpi_call(move _186, move _187, move _188) -> [return: bb81, unwind: bb192];
    }

    bb79: {
        StorageLive(_178);
        _178 = move ((_174 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_180);
        _180 = move _178;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _180) -> [return: bb80, unwind: bb205];
    }

    bb80: {
        StorageDead(_180);
        StorageDead(_178);
        StorageDead(_173);
        _405 = discriminant(_174);
        StorageDead(_174);
        goto -> bb173;
    }

    bb81: {
        StorageDead(_188);
        StorageDead(_187);
        StorageDead(_186);
        _184 = <Result<bool, ProgramError> as Try>::branch(move _185) -> [return: bb82, unwind: bb192];
    }

    bb82: {
        StorageDead(_185);
        _189 = discriminant(_184);
        switchInt(move _189) -> [0: bb83, 1: bb84, otherwise: bb7];
    }

    bb83: {
        StorageLive(_193);
        _193 = ((_184 as Continue).0: bool);
        _183 = _193;
        StorageDead(_193);
        switchInt(move _183) -> [0: bb197, otherwise: bb196];
    }

    bb84: {
        StorageLive(_190);
        _190 = move ((_184 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_192);
        _192 = move _190;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _192) -> [return: bb85, unwind: bb204];
    }

    bb85: {
        StorageDead(_192);
        StorageDead(_190);
        _403 = discriminant(_184);
        StorageDead(_184);
        goto -> bb172;
    }

    bb86: {
        StorageDead(_196);
        StorageDead(_197);
        StorageDead(_195);
        StorageLive(_198);
        StorageLive(_199);
        _199 = FlashBorrowCpi;
        _198 = <LendingError as Into<ProgramError>>::into(move _199) -> [return: bb87, unwind: bb192];
    }

    bb87: {
        StorageDead(_199);
        _0 = Result::<(), ProgramError>::Err(move _198);
        StorageDead(_198);
        goto -> bb172;
    }

    bb88: {
        _204 = CheckedAdd(_200, const 1_usize);
        assert(!move (_204.1: bool), "attempt to compute `{} + {}`, which would overflow", _200, const 1_usize) -> [success: bb89, unwind: bb192];
    }

    bb89: {
        _200 = move (_204.0: usize);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        _207 = _200;
        StorageLive(_208);
        _208 = &(*_8);
        _206 = load_instruction_at_checked(move _207, move _208) -> [return: bb90, unwind: bb192];
    }

    bb90: {
        StorageDead(_208);
        StorageDead(_207);
        _210 = discriminant(_206);
        switchInt(move _210) -> [0: bb93, 1: bb91, otherwise: bb7];
    }

    bb91: {
        _209 = discriminant(((_206 as Err).0: solana_program::program_error::ProgramError));
        switchInt(move _209) -> [1: bb94, otherwise: bb92];
    }

    bb92: {
        StorageLive(_213);
        _213 = move ((_206 as Err).0: solana_program::program_error::ProgramError);
        StorageLive(_215);
        _215 = move _213;
        _0 = Result::<(), ProgramError>::Err(move _215);
        StorageDead(_215);
        StorageDead(_213);
        _401 = discriminant(_206);
        StorageDead(_206);
        goto -> bb170;
    }

    bb93: {
        StorageLive(_211);
        _211 = move ((_206 as Ok).0: solana_program::instruction::Instruction);
        _205 = move _211;
        StorageDead(_211);
        _381 = discriminant(_206);
        StorageDead(_206);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        _218 = &(_205.0: solana_program::pubkey::Pubkey);
        StorageLive(_219);
        _219 = &(*_1);
        _217 = <Pubkey as PartialEq>::ne(move _218, move _219) -> [return: bb95, unwind: bb186];
    }

    bb94: {
        _202 = const ();
        _383 = discriminant(_206);
        switchInt(move _383) -> [0: bb198, otherwise: bb199];
    }

    bb95: {
        switchInt(move _217) -> [0: bb97, otherwise: bb96];
    }

    bb96: {
        StorageDead(_219);
        StorageDead(_218);
        StorageDead(_217);
        StorageDead(_216);
        drop(_205) -> [return: bb135, unwind: bb192];
    }

    bb97: {
        StorageDead(_219);
        StorageDead(_218);
        _216 = const ();
        StorageDead(_217);
        StorageDead(_216);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        _226 = &(_205.2: std::vec::Vec<u8>);
        _225 = Vec::<u8>::as_slice(move _226) -> [return: bb98, unwind: bb186];
    }

    bb98: {
        _224 = &(*_225);
        StorageDead(_226);
        _223 = LendingInstruction::unpack(move _224) -> [return: bb99, unwind: bb186];
    }

    bb99: {
        StorageDead(_224);
        _222 = <Result<LendingInstruction, ProgramError> as Try>::branch(move _223) -> [return: bb100, unwind: bb186];
    }

    bb100: {
        StorageDead(_223);
        _227 = discriminant(_222);
        switchInt(move _227) -> [0: bb101, 1: bb102, otherwise: bb7];
    }

    bb101: {
        StorageLive(_231);
        _231 = move ((_222 as Continue).0: solend_sdk::instruction::LendingInstruction);
        _221 = move _231;
        StorageDead(_231);
        _385 = discriminant(_222);
        StorageDead(_225);
        StorageDead(_222);
        StorageLive(_232);
        _233 = discriminant(_221);
        switchInt(move _233) -> [19: bb130, 20: bb105, otherwise: bb104];
    }

    bb102: {
        StorageLive(_228);
        _228 = move ((_222 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_230);
        _230 = move _228;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _230) -> [return: bb103, unwind: bb203];
    }

    bb103: {
        StorageDead(_230);
        StorageDead(_228);
        _399 = discriminant(_222);
        StorageDead(_225);
        StorageDead(_222);
        goto -> bb169;
    }

    bb104: {
        _232 = ();
        goto -> bb133;
    }

    bb105: {
        StorageLive(_234);
        _234 = ((_221 as FlashRepayReserveLiquidity).0: u64);
        StorageLive(_235);
        _235 = ((_221 as FlashRepayReserveLiquidity).1: u8);
        StorageLive(_236);
        StorageLive(_237);
        _237 = _201;
        switchInt(move _237) -> [0: bb109, otherwise: bb106];
    }

    bb106: {
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        _241 = const "Multiple flash repays not allowed";
        _240 = &(*_241);
        _239 = solana_program::log::sol_log(move _240) -> [return: bb107, unwind: bb186];
    }

    bb107: {
        StorageDead(_240);
        StorageDead(_241);
        StorageDead(_239);
        StorageLive(_242);
        StorageLive(_243);
        _243 = MultipleFlashBorrows;
        _242 = <LendingError as Into<ProgramError>>::into(move _243) -> [return: bb108, unwind: bb186];
    }

    bb108: {
        StorageDead(_243);
        _0 = Result::<(), ProgramError>::Err(move _242);
        StorageDead(_242);
        StorageDead(_237);
        StorageDead(_236);
        goto -> bb167;
    }

    bb109: {
        _236 = const ();
        StorageDead(_237);
        StorageDead(_236);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        _248 = &(_205.1: std::vec::Vec<solana_program::instruction::AccountMeta>);
        _247 = <Vec<AccountMeta> as Index<usize>>::index(move _248, const 4_usize) -> [return: bb110, unwind: bb186];
    }

    bb110: {
        StorageDead(_248);
        _246 = &((*_247).0: solana_program::pubkey::Pubkey);
        StorageLive(_249);
        _367 = deref_copy ((*_5).0: &solana_program::pubkey::Pubkey);
        _249 = &(*_367);
        _245 = <Pubkey as PartialEq>::ne(move _246, move _249) -> [return: bb111, unwind: bb186];
    }

    bb111: {
        switchInt(move _245) -> [0: bb115, otherwise: bb112];
    }

    bb112: {
        StorageDead(_249);
        StorageDead(_247);
        StorageDead(_246);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        _253 = const "Invalid reserve account on flash repay";
        _252 = &(*_253);
        _251 = solana_program::log::sol_log(move _252) -> [return: bb113, unwind: bb186];
    }

    bb113: {
        StorageDead(_252);
        StorageDead(_253);
        StorageDead(_251);
        StorageLive(_254);
        StorageLive(_255);
        _255 = InvalidFlashRepay;
        _254 = <LendingError as Into<ProgramError>>::into(move _255) -> [return: bb114, unwind: bb186];
    }

    bb114: {
        StorageDead(_255);
        _0 = Result::<(), ProgramError>::Err(move _254);
        StorageDead(_254);
        StorageDead(_245);
        StorageDead(_244);
        goto -> bb167;
    }

    bb115: {
        StorageDead(_249);
        StorageDead(_247);
        StorageDead(_246);
        _244 = const ();
        StorageDead(_245);
        StorageDead(_244);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        _258 = _234;
        StorageLive(_259);
        _259 = _2;
        _257 = Ne(move _258, move _259);
        switchInt(move _257) -> [0: bb117, otherwise: bb116];
    }

    bb116: {
        StorageDead(_259);
        StorageDead(_258);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        _263 = const "Liquidity amount for flash repay doesn't match borrow";
        _262 = &(*_263);
        _261 = solana_program::log::sol_log(move _262) -> [return: bb118, unwind: bb186];
    }

    bb117: {
        StorageDead(_259);
        StorageDead(_258);
        _256 = const ();
        StorageDead(_257);
        StorageDead(_256);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        _269 = _235;
        _268 = move _269 as usize (IntToInt);
        StorageDead(_269);
        StorageLive(_270);
        _270 = _172;
        _267 = Ne(move _268, move _270);
        switchInt(move _267) -> [0: bb121, otherwise: bb120];
    }

    bb118: {
        StorageDead(_262);
        StorageDead(_263);
        StorageDead(_261);
        StorageLive(_264);
        StorageLive(_265);
        _265 = InvalidFlashRepay;
        _264 = <LendingError as Into<ProgramError>>::into(move _265) -> [return: bb119, unwind: bb186];
    }

    bb119: {
        StorageDead(_265);
        _0 = Result::<(), ProgramError>::Err(move _264);
        StorageDead(_264);
        StorageDead(_257);
        StorageDead(_256);
        goto -> bb167;
    }

    bb120: {
        StorageDead(_270);
        StorageDead(_268);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        _362 = const _;
        _282 = &(*_362);
        _281 = &(*_282);
        _280 = move _281 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_281);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        _290 = &_235;
        _289 = &(*_290);
        _288 = bytemuck::core::fmt::rt::Argument::<'_>::new_display::<u8>(move _289) -> [return: bb122, unwind: bb186];
    }

    bb121: {
        StorageDead(_270);
        StorageDead(_268);
        _266 = const ();
        StorageDead(_267);
        StorageDead(_266);
        _201 = const true;
        _232 = const ();
        StorageDead(_235);
        StorageDead(_234);
        goto -> bb133;
    }

    bb122: {
        StorageDead(_289);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        _293 = &_172;
        _292 = &(*_293);
        _291 = bytemuck::core::fmt::rt::Argument::<'_>::new_display::<usize>(move _292) -> [return: bb123, unwind: bb186];
    }

    bb123: {
        StorageDead(_292);
        _287 = [move _288, move _291];
        StorageDead(_291);
        StorageDead(_288);
        _286 = &_287;
        _285 = &(*_286);
        _284 = move _285 as &[bytemuck::core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_285);
        _279 = Arguments::<'_>::new_v1(move _280, move _284) -> [return: bb124, unwind: bb186];
    }

    bb124: {
        StorageDead(_284);
        StorageDead(_280);
        _278 = format(move _279) -> [return: bb125, unwind: bb186];
    }

    bb125: {
        StorageDead(_279);
        StorageDead(_293);
        StorageDead(_290);
        StorageDead(_287);
        StorageDead(_286);
        StorageDead(_282);
        _277 = move _278;
        StorageDead(_278);
        _276 = &_277;
        _275 = &(*_276);
        _274 = <String as Deref>::deref(move _275) -> [return: bb126, unwind: bb185];
    }

    bb126: {
        _273 = &(*_274);
        StorageDead(_275);
        _272 = solana_program::log::sol_log(move _273) -> [return: bb127, unwind: bb185];
    }

    bb127: {
        StorageDead(_273);
        drop(_277) -> [return: bb128, unwind: bb186];
    }

    bb128: {
        StorageDead(_277);
        StorageDead(_276);
        StorageDead(_274);
        StorageDead(_272);
        StorageLive(_294);
        StorageLive(_295);
        _295 = InvalidFlashRepay;
        _294 = <LendingError as Into<ProgramError>>::into(move _295) -> [return: bb129, unwind: bb186];
    }

    bb129: {
        StorageDead(_295);
        _0 = Result::<(), ProgramError>::Err(move _294);
        StorageDead(_294);
        StorageDead(_267);
        StorageDead(_266);
        goto -> bb167;
    }

    bb130: {
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        _299 = const "Multiple flash borrows not allowed";
        _298 = &(*_299);
        _297 = solana_program::log::sol_log(move _298) -> [return: bb131, unwind: bb186];
    }

    bb131: {
        StorageDead(_298);
        StorageDead(_299);
        StorageDead(_297);
        StorageLive(_300);
        StorageLive(_301);
        _301 = MultipleFlashBorrows;
        _300 = <LendingError as Into<ProgramError>>::into(move _301) -> [return: bb132, unwind: bb186];
    }

    bb132: {
        StorageDead(_301);
        _0 = Result::<(), ProgramError>::Err(move _300);
        StorageDead(_300);
        goto -> bb168;
    }

    bb133: {
        StorageDead(_232);
        _203 = const ();
        StorageDead(_221);
        drop(_205) -> [return: bb134, unwind: bb192];
    }

    bb134: {
        StorageDead(_205);
        goto -> bb88;
    }

    bb135: {
        StorageDead(_205);
        goto -> bb88;
    }

    bb136: {
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        _307 = const "No flash repay found";
        _306 = &(*_307);
        _305 = solana_program::log::sol_log(move _306) -> [return: bb137, unwind: bb192];
    }

    bb137: {
        StorageDead(_306);
        StorageDead(_307);
        StorageDead(_305);
        StorageLive(_308);
        StorageLive(_309);
        _309 = NoFlashRepayFound;
        _308 = <LendingError as Into<ProgramError>>::into(move _309) -> [return: bb138, unwind: bb192];
    }

    bb138: {
        StorageDead(_309);
        _0 = Result::<(), ProgramError>::Err(move _308);
        StorageDead(_308);
        StorageDead(_303);
        StorageDead(_302);
        goto -> bb171;
    }

    bb139: {
        _302 = const ();
        StorageDead(_303);
        StorageDead(_302);
        StorageLive(_310);
        StorageLive(_311);
        StorageLive(_312);
        StorageLive(_313);
        _423 = (((_47.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _313 = &mut ((*_423).3: solend_sdk::state::ReserveLiquidity);
        StorageLive(_314);
        StorageLive(_315);
        _315 = _2;
        _314 = <Decimal as From<u64>>::from(move _315) -> [return: bb140, unwind: bb192];
    }

    bb140: {
        StorageDead(_315);
        _312 = ReserveLiquidity::borrow(move _313, move _314) -> [return: bb141, unwind: bb192];
    }

    bb141: {
        StorageDead(_314);
        StorageDead(_313);
        _311 = <Result<(), ProgramError> as Try>::branch(move _312) -> [return: bb142, unwind: bb192];
    }

    bb142: {
        StorageDead(_312);
        _316 = discriminant(_311);
        switchInt(move _316) -> [0: bb143, 1: bb144, otherwise: bb7];
    }

    bb143: {
        StorageLive(_320);
        _320 = ((_311 as Continue).0: ());
        _310 = _320;
        StorageDead(_320);
        _387 = discriminant(_311);
        StorageDead(_311);
        StorageDead(_310);
        StorageLive(_321);
        StorageLive(_322);
        _424 = (((_47.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _322 = &mut ((*_424).1: solend_sdk::state::LastUpdate);
        _321 = LastUpdate::mark_stale(move _322) -> [return: bb146, unwind: bb192];
    }

    bb144: {
        StorageLive(_317);
        _317 = move ((_311 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_319);
        _319 = move _317;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _319) -> [return: bb145, unwind: bb202];
    }

    bb145: {
        StorageDead(_319);
        StorageDead(_317);
        _397 = discriminant(_311);
        StorageDead(_311);
        StorageDead(_310);
        goto -> bb171;
    }

    bb146: {
        StorageDead(_322);
        StorageDead(_321);
        StorageLive(_323);
        StorageLive(_324);
        StorageLive(_325);
        StorageLive(_326);
        _425 = (((_47.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _426 = _425 as *const () (PtrToPtr);
        _427 = _426 as usize (Transmute);
        _428 = AlignOf(solend_sdk::state::Reserve);
        _429 = Sub(_428, const 1_usize);
        _430 = BitAnd(_427, _429);
        _431 = Eq(_430, const 0_usize);
        assert(_431, "misaligned pointer dereference: address must be a multiple of {} but is {}", _428, _427) -> [success: bb208, unwind unreachable];
    }

    bb147: {
        _332 = &(*_333);
        StorageDead(_334);
        _331 = RefCell::<&mut [u8]>::borrow_mut(move _332) -> [return: bb148, unwind: bb192];
    }

    bb148: {
        StorageDead(_332);
        _330 = &mut _331;
        _329 = &mut (*_330);
        _328 = <RefMut<'_, &mut [u8]> as DerefMut>::deref_mut(move _329) -> [return: bb149, unwind: bb184];
    }

    bb149: {
        _368 = deref_copy (*_328);
        _327 = &mut (*_368);
        StorageDead(_329);
        _325 = <Reserve as Pack>::pack(move _326, move _327) -> [return: bb150, unwind: bb184];
    }

    bb150: {
        StorageDead(_327);
        StorageDead(_326);
        _324 = <Result<(), ProgramError> as Try>::branch(move _325) -> [return: bb151, unwind: bb184];
    }

    bb151: {
        StorageDead(_325);
        _335 = discriminant(_324);
        switchInt(move _335) -> [0: bb152, 1: bb153, otherwise: bb7];
    }

    bb152: {
        StorageLive(_339);
        _339 = ((_324 as Continue).0: ());
        _323 = _339;
        StorageDead(_339);
        _389 = discriminant(_324);
        drop(_331) -> [return: bb155, unwind: bb192];
    }

    bb153: {
        StorageLive(_336);
        _336 = move ((_324 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_338);
        _338 = move _336;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _338) -> [return: bb154, unwind: bb201];
    }

    bb154: {
        StorageDead(_338);
        StorageDead(_336);
        _395 = discriminant(_324);
        drop(_331) -> [return: bb166, unwind: bb192];
    }

    bb155: {
        StorageDead(_333);
        StorageDead(_331);
        StorageDead(_330);
        StorageDead(_328);
        StorageDead(_324);
        StorageDead(_323);
        StorageLive(_340);
        StorageLive(_341);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        _345 = &(*_3);
        _344 = <AccountInfo<'_> as Clone>::clone(move _345) -> [return: bb156, unwind: bb192];
    }

    bb156: {
        StorageDead(_345);
        StorageLive(_346);
        StorageLive(_347);
        _347 = &(*_4);
        _346 = <AccountInfo<'_> as Clone>::clone(move _347) -> [return: bb157, unwind: bb183];
    }

    bb157: {
        StorageDead(_347);
        StorageLive(_348);
        _348 = _2;
        StorageLive(_349);
        StorageLive(_350);
        _350 = &(*_7);
        _349 = <AccountInfo<'_> as Clone>::clone(move _350) -> [return: bb158, unwind: bb182];
    }

    bb158: {
        StorageDead(_350);
        StorageLive(_351);
        StorageLive(_352);
        _352 = &(*_107);
        _351 = move _352 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_352);
        StorageLive(_353);
        StorageLive(_354);
        _354 = &(*_9);
        _353 = <AccountInfo<'_> as Clone>::clone(move _354) -> [return: bb159, unwind: bb181];
    }

    bb159: {
        StorageDead(_354);
        _343 = TokenTransferParams::<'_, '_> { source: move _344, destination: move _346, amount: move _348, authority: move _349, authority_signer_seeds: move _351, token_program: move _353 };
        StorageDead(_353);
        StorageDead(_351);
        StorageDead(_349);
        StorageDead(_348);
        StorageDead(_346);
        StorageDead(_344);
        _342 = spl_token_transfer(move _343) -> [return: bb160, unwind: bb192];
    }

    bb160: {
        StorageDead(_343);
        _341 = <Result<(), ProgramError> as Try>::branch(move _342) -> [return: bb161, unwind: bb192];
    }

    bb161: {
        StorageDead(_342);
        _355 = discriminant(_341);
        switchInt(move _355) -> [0: bb162, 1: bb163, otherwise: bb7];
    }

    bb162: {
        StorageLive(_359);
        _359 = ((_341 as Continue).0: ());
        _340 = _359;
        StorageDead(_359);
        _391 = discriminant(_341);
        StorageDead(_341);
        StorageDead(_340);
        StorageLive(_360);
        _360 = ();
        _0 = Result::<(), ProgramError>::Ok(move _360);
        StorageDead(_360);
        StorageDead(_201);
        StorageDead(_200);
        StorageDead(_172);
        StorageDead(_116);
        StorageDead(_114);
        StorageDead(_108);
        StorageDead(_107);
        drop(_47) -> [return: bb165, unwind: bb195];
    }

    bb163: {
        StorageLive(_356);
        _356 = move ((_341 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_358);
        _358 = move _356;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _358) -> [return: bb164, unwind: bb200];
    }

    bb164: {
        StorageDead(_358);
        StorageDead(_356);
        _393 = discriminant(_341);
        StorageDead(_341);
        StorageDead(_340);
        goto -> bb171;
    }

    bb165: {
        StorageDead(_47);
        StorageDead(_10);
        goto -> bb180;
    }

    bb166: {
        StorageDead(_333);
        StorageDead(_331);
        StorageDead(_330);
        StorageDead(_328);
        StorageDead(_324);
        StorageDead(_323);
        goto -> bb171;
    }

    bb167: {
        StorageDead(_235);
        StorageDead(_234);
        goto -> bb168;
    }

    bb168: {
        StorageDead(_232);
        goto -> bb169;
    }

    bb169: {
        StorageDead(_221);
        drop(_205) -> [return: bb170, unwind: bb192];
    }

    bb170: {
        StorageDead(_205);
        StorageDead(_202);
        goto -> bb171;
    }

    bb171: {
        StorageDead(_201);
        StorageDead(_200);
        goto -> bb173;
    }

    bb172: {
        StorageDead(_183);
        StorageDead(_182);
        goto -> bb173;
    }

    bb173: {
        StorageDead(_172);
        goto -> bb174;
    }

    bb174: {
        StorageDead(_116);
        StorageDead(_114);
        StorageDead(_108);
        StorageDead(_107);
        goto -> bb175;
    }

    bb175: {
        drop(_47) -> [return: bb177, unwind: bb195];
    }

    bb176: {
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_52);
        _369 = const false;
        _370 = const false;
        StorageDead(_49);
        goto -> bb177;
    }

    bb177: {
        StorageDead(_47);
        goto -> bb179;
    }

    bb178: {
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_11);
        goto -> bb179;
    }

    bb179: {
        StorageDead(_10);
        goto -> bb180;
    }

    bb180: {
        return;
    }

    bb181 (cleanup): {
        drop(_349) -> [return: bb182, unwind terminate(cleanup)];
    }

    bb182 (cleanup): {
        drop(_346) -> [return: bb183, unwind terminate(cleanup)];
    }

    bb183 (cleanup): {
        drop(_344) -> [return: bb192, unwind terminate(cleanup)];
    }

    bb184 (cleanup): {
        drop(_331) -> [return: bb192, unwind terminate(cleanup)];
    }

    bb185 (cleanup): {
        drop(_277) -> [return: bb186, unwind terminate(cleanup)];
    }

    bb186 (cleanup): {
        drop(_205) -> [return: bb192, unwind terminate(cleanup)];
    }

    bb187 (cleanup): {
        drop(_138) -> [return: bb192, unwind terminate(cleanup)];
    }

    bb188 (cleanup): {
        drop(_153) -> [return: bb189, unwind terminate(cleanup)];
    }

    bb189 (cleanup): {
        drop(_139) -> [return: bb192, unwind terminate(cleanup)];
    }

    bb190 (cleanup): {
        drop(_159) -> [return: bb191, unwind terminate(cleanup)];
    }

    bb191 (cleanup): {
        drop(_153) -> [return: bb192, unwind terminate(cleanup)];
    }

    bb192 (cleanup): {
        drop(_47) -> [return: bb195, unwind terminate(cleanup)];
    }

    bb193 (cleanup): {
        drop(_55) -> [return: bb195, unwind terminate(cleanup)];
    }

    bb194 (cleanup): {
        drop(_17) -> [return: bb195, unwind terminate(cleanup)];
    }

    bb195 (cleanup): {
        resume;
    }

    bb196: {
        _377 = discriminant(_184);
        StorageDead(_184);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        _197 = const "Flash Borrow was called via CPI!";
        _196 = &(*_197);
        _195 = solana_program::log::sol_log(move _196) -> [return: bb86, unwind: bb192];
    }

    bb197: {
        _379 = discriminant(_184);
        StorageDead(_184);
        _182 = const ();
        StorageDead(_183);
        StorageDead(_182);
        StorageLive(_200);
        _200 = _172;
        StorageLive(_201);
        _201 = const false;
        StorageLive(_202);
        goto -> bb88;
    }

    bb198: {
        StorageDead(_206);
        StorageDead(_205);
        StorageDead(_202);
        StorageLive(_302);
        StorageLive(_303);
        _303 = _201;
        switchInt(move _303) -> [0: bb136, otherwise: bb139];
    }

    bb199: {
        drop(((_206 as Err).0: solana_program::program_error::ProgramError)) -> [return: bb198, unwind: bb192];
    }

    bb200 (cleanup): {
        _411 = discriminant(_341);
        goto -> bb192;
    }

    bb201 (cleanup): {
        _412 = discriminant(_324);
        goto -> bb184;
    }

    bb202 (cleanup): {
        _413 = discriminant(_311);
        goto -> bb192;
    }

    bb203 (cleanup): {
        _414 = discriminant(_222);
        goto -> bb186;
    }

    bb204 (cleanup): {
        _415 = discriminant(_184);
        goto -> bb192;
    }

    bb205 (cleanup): {
        _416 = discriminant(_174);
        goto -> bb192;
    }

    bb206 (cleanup): {
        _417 = discriminant(_49);
        goto -> bb193;
    }

    bb207 (cleanup): {
        _418 = discriminant(_11);
        goto -> bb194;
    }

    bb208: {
        _326 = move (*_425);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        _334 = &((*_5).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _333 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _334) -> [return: bb147, unwind: bb192];
    }

    bb209: {
        _165 = ((((*_422).5: solend_sdk::state::ReserveConfig).11: solend_sdk::state::ReserveFees).1: u64);
        _164 = Eq(move _165, const _);
        switchInt(move _164) -> [0: bb73, otherwise: bb72];
    }
}
