// MIR for `process_deposit_obligation_collateral` after PreCodegen

fn process_deposit_obligation_collateral(_1: &Pubkey, _2: u64, _3: &[AccountInfo<'_>]) -> Result<(), ProgramError> {
    debug program_id => _1;
    debug collateral_amount => _2;
    debug accounts => _3;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _4: ();
    let mut _5: bool;
    let mut _6: u64;
    let mut _7: !;
    let _8: ();
    let mut _9: &str;
    let _10: &str;
    let mut _11: solana_program::program_error::ProgramError;
    let mut _12: solend_sdk::error::LendingError;
    let _13: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _14: std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _15: &[solana_program::account_info::AccountInfo<'_>];
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _18: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _19: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _20: isize;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _27: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _28: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _29: isize;
    let mut _31: !;
    let mut _32: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _36: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _37: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _38: isize;
    let mut _40: !;
    let mut _41: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _44: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _45: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _46: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _47: isize;
    let mut _49: !;
    let mut _50: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _53: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _54: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _55: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _56: isize;
    let mut _58: !;
    let mut _59: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _62: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _63: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _64: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _65: isize;
    let mut _67: !;
    let mut _68: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _71: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _72: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _73: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _74: isize;
    let mut _76: !;
    let mut _77: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _80: solana_program::clock::Clock;
    let mut _81: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solana_program::clock::Clock>;
    let mut _82: std::result::Result<solana_program::clock::Clock, solana_program::program_error::ProgramError>;
    let mut _83: isize;
    let mut _85: !;
    let mut _86: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _89: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _90: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _91: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _92: isize;
    let mut _94: !;
    let mut _95: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _97: ();
    let mut _98: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _99: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _100: &solana_program::pubkey::Pubkey;
    let mut _101: &solana_program::account_info::AccountInfo<'_>;
    let mut _102: &solana_program::clock::Clock;
    let mut _103: isize;
    let mut _105: !;
    let mut _106: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _108: ();
    let mut _109: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _110: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _111: &solana_program::pubkey::Pubkey;
    let mut _112: u64;
    let mut _113: &solana_program::account_info::AccountInfo<'_>;
    let mut _114: &solana_program::account_info::AccountInfo<'_>;
    let mut _115: &solana_program::account_info::AccountInfo<'_>;
    let mut _116: &solana_program::account_info::AccountInfo<'_>;
    let mut _117: &solana_program::account_info::AccountInfo<'_>;
    let mut _118: &solana_program::account_info::AccountInfo<'_>;
    let mut _119: &solana_program::account_info::AccountInfo<'_>;
    let mut _120: &solana_program::clock::Clock;
    let mut _121: &solana_program::account_info::AccountInfo<'_>;
    let mut _122: isize;
    let mut _124: !;
    let mut _125: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _128: solend_sdk::state::Reserve;
    let mut _129: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::state::Reserve>;
    let mut _130: std::result::Result<solend_sdk::state::Reserve, solana_program::program_error::ProgramError>;
    let mut _131: &[u8];
    let _132: &&mut [u8];
    let mut _133: &std::cell::Ref<'_, &mut [u8]>;
    let _134: &std::cell::Ref<'_, &mut [u8]>;
    let _135: std::cell::Ref<'_, &mut [u8]>;
    let mut _136: &std::cell::RefCell<&mut [u8]>;
    let _137: &std::cell::RefCell<&mut [u8]>;
    let mut _138: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _139: isize;
    let mut _141: !;
    let mut _142: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _144: ();
    let mut _145: &mut solend_sdk::state::LastUpdate;
    let _146: ();
    let mut _147: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _148: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _149: solend_sdk::state::Reserve;
    let mut _150: &mut [u8];
    let mut _151: &mut &mut [u8];
    let mut _152: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _153: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _154: std::cell::RefMut<'_, &mut [u8]>;
    let mut _155: &std::cell::RefCell<&mut [u8]>;
    let _156: &std::cell::RefCell<&mut [u8]>;
    let mut _157: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _158: isize;
    let mut _160: !;
    let mut _161: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _163: ();
    let mut _164: &mut [u8];
    let mut _165: &mut [u8];
    let mut _166: bool;
    let mut _167: bool;
    let mut _168: isize;
    let mut _169: isize;
    let mut _170: isize;
    let mut _171: isize;
    let mut _172: isize;
    let mut _173: isize;
    let mut _174: isize;
    let mut _175: isize;
    let mut _176: isize;
    let mut _177: isize;
    let mut _178: isize;
    let mut _179: isize;
    let mut _180: isize;
    let mut _181: isize;
    let mut _182: isize;
    let mut _183: isize;
    let mut _184: isize;
    let mut _185: isize;
    let mut _186: isize;
    let mut _187: isize;
    let mut _188: isize;
    let mut _189: isize;
    let mut _190: isize;
    let mut _191: isize;
    let mut _192: isize;
    let mut _193: isize;
    let mut _194: isize;
    let mut _195: isize;
    let mut _196: isize;
    let mut _197: isize;
    let mut _198: isize;
    let mut _199: isize;
    let mut _200: isize;
    let mut _201: isize;
    let mut _202: isize;
    let mut _203: isize;
    let mut _204: isize;
    let mut _205: isize;
    let mut _206: isize;
    let mut _207: isize;
    let mut _208: isize;
    let mut _209: isize;
    let mut _210: isize;
    let mut _211: isize;
    let mut _212: isize;
    let mut _213: isize;
    let mut _214: isize;
    let mut _215: isize;
    let mut _216: isize;
    let mut _217: isize;
    let mut _218: isize;
    let mut _219: isize;
    let mut _220: isize;
    let mut _221: isize;
    let mut _222: isize;
    let mut _223: isize;
    let mut _224: isize;
    let mut _225: isize;
    let mut _226: isize;
    let mut _227: isize;
    let mut _228: isize;
    let mut _229: isize;
    let mut _230: isize;
    let mut _231: isize;
    let mut _232: isize;
    let mut _233: *const solend_sdk::state::Reserve;
    let mut _234: *const solend_sdk::state::Reserve;
    scope 1 {
        debug account_info_iter => _13;
        let _16: &solana_program::account_info::AccountInfo<'_>;
        let _21: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _24: &solana_program::account_info::AccountInfo<'_>;
        scope 2 {
            debug source_collateral_info => _16;
            let _25: &solana_program::account_info::AccountInfo<'_>;
            let _30: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
            let _33: &solana_program::account_info::AccountInfo<'_>;
            scope 7 {
                debug destination_collateral_info => _25;
                let _34: &solana_program::account_info::AccountInfo<'_>;
                let _39: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                let _42: &solana_program::account_info::AccountInfo<'_>;
                scope 12 {
                    debug deposit_reserve_info => _34;
                    let _43: &solana_program::account_info::AccountInfo<'_>;
                    let _48: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                    let _51: &solana_program::account_info::AccountInfo<'_>;
                    scope 17 {
                        debug obligation_info => _43;
                        let _52: &solana_program::account_info::AccountInfo<'_>;
                        let _57: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                        let _60: &solana_program::account_info::AccountInfo<'_>;
                        scope 22 {
                            debug lending_market_info => _52;
                            let _61: &solana_program::account_info::AccountInfo<'_>;
                            let _66: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                            let _69: &solana_program::account_info::AccountInfo<'_>;
                            scope 27 {
                                debug obligation_owner_info => _61;
                                let _70: &solana_program::account_info::AccountInfo<'_>;
                                let _75: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                let _78: &solana_program::account_info::AccountInfo<'_>;
                                scope 32 {
                                    debug user_transfer_authority_info => _70;
                                    let _79: &solana_program::clock::Clock;
                                    let _84: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                    let _87: solana_program::clock::Clock;
                                    scope 37 {
                                        debug clock => _79;
                                        let _88: &solana_program::account_info::AccountInfo<'_>;
                                        let _93: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                        let _96: &solana_program::account_info::AccountInfo<'_>;
                                        scope 42 {
                                            debug token_program_id => _88;
                                            let _104: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                            let _107: ();
                                            let _123: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                            let _126: ();
                                            let mut _127: std::boxed::Box<solend_sdk::state::Reserve>;
                                            let _140: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                            let _143: solend_sdk::state::Reserve;
                                            scope 47 {
                                                debug residual => _104;
                                                scope 48 {
                                                }
                                            }
                                            scope 49 {
                                                debug val => _107;
                                                scope 50 {
                                                }
                                            }
                                            scope 51 {
                                                debug residual => _123;
                                                scope 52 {
                                                }
                                            }
                                            scope 53 {
                                                debug val => _126;
                                                scope 54 {
                                                }
                                            }
                                            scope 55 {
                                                debug reserve => _127;
                                                let _159: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                                let _162: ();
                                                let mut _235: *const ();
                                                let mut _236: usize;
                                                let mut _237: usize;
                                                let mut _238: usize;
                                                let mut _239: usize;
                                                let mut _240: bool;
                                                scope 60 {
                                                    debug residual => _159;
                                                    scope 61 {
                                                    }
                                                }
                                                scope 62 {
                                                    debug val => _162;
                                                    scope 63 {
                                                    }
                                                }
                                            }
                                            scope 56 {
                                                debug residual => _140;
                                                scope 57 {
                                                }
                                            }
                                            scope 58 {
                                                debug val => _143;
                                                scope 59 {
                                                }
                                            }
                                        }
                                        scope 43 {
                                            debug residual => _93;
                                            scope 44 {
                                            }
                                        }
                                        scope 45 {
                                            debug val => _96;
                                            scope 46 {
                                            }
                                        }
                                    }
                                    scope 38 {
                                        debug residual => _84;
                                        scope 39 {
                                        }
                                    }
                                    scope 40 {
                                        debug val => _87;
                                        scope 41 {
                                        }
                                    }
                                }
                                scope 33 {
                                    debug residual => _75;
                                    scope 34 {
                                    }
                                }
                                scope 35 {
                                    debug val => _78;
                                    scope 36 {
                                    }
                                }
                            }
                            scope 28 {
                                debug residual => _66;
                                scope 29 {
                                }
                            }
                            scope 30 {
                                debug val => _69;
                                scope 31 {
                                }
                            }
                        }
                        scope 23 {
                            debug residual => _57;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _60;
                            scope 26 {
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _48;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _51;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _39;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _42;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _30;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _33;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _21;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _24;
            scope 6 {
            }
        }
    }

    bb0: {
        _167 = const false;
        _166 = const false;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = _2;
        _5 = Eq(move _6, const 0_u64);
        switchInt(move _5) -> [0: bb4, otherwise: bb1];
    }

    bb1: {
        StorageDead(_6);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = const "Collateral amount provided cannot be zero";
        _9 = &(*_10);
        _8 = solana_program::log::sol_log(move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_9);
        StorageDead(_10);
        StorageDead(_8);
        StorageLive(_11);
        StorageLive(_12);
        _12 = InvalidAmount;
        _11 = <LendingError as Into<ProgramError>>::into(move _12) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_12);
        _0 = Result::<(), ProgramError>::Err(move _11);
        StorageDead(_11);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb95;
    }

    bb4: {
        StorageDead(_6);
        _4 = const ();
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &(*_3);
        _14 = bytemuck::core::slice::<impl [AccountInfo<'_>]>::iter(move _15) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_15);
        _13 = &mut _14;
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &mut (*_13);
        _18 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _19) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_19);
        _17 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _18) -> [return: bb7, unwind: bb99];
    }

    bb7: {
        StorageDead(_18);
        _20 = discriminant(_17);
        switchInt(move _20) -> [0: bb8, 1: bb10, otherwise: bb9];
    }

    bb8: {
        StorageLive(_24);
        _24 = ((_17 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _16 = _24;
        StorageDead(_24);
        _168 = discriminant(_17);
        StorageDead(_17);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &mut (*_13);
        _27 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _28) -> [return: bb12, unwind continue];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        StorageLive(_21);
        _21 = move ((_17 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_23);
        _23 = move _21;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _23) -> [return: bb11, unwind: bb112];
    }

    bb11: {
        StorageDead(_23);
        StorageDead(_21);
        _218 = discriminant(_17);
        StorageDead(_17);
        goto -> bb94;
    }

    bb12: {
        StorageDead(_28);
        _26 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _27) -> [return: bb13, unwind: bb99];
    }

    bb13: {
        StorageDead(_27);
        _29 = discriminant(_26);
        switchInt(move _29) -> [0: bb14, 1: bb15, otherwise: bb9];
    }

    bb14: {
        StorageLive(_33);
        _33 = ((_26 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _25 = _33;
        StorageDead(_33);
        _170 = discriminant(_26);
        StorageDead(_26);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &mut (*_13);
        _36 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _37) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_30);
        _30 = move ((_26 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_32);
        _32 = move _30;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _32) -> [return: bb16, unwind: bb111];
    }

    bb16: {
        StorageDead(_32);
        StorageDead(_30);
        _216 = discriminant(_26);
        StorageDead(_26);
        goto -> bb93;
    }

    bb17: {
        StorageDead(_37);
        _35 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _36) -> [return: bb18, unwind: bb99];
    }

    bb18: {
        StorageDead(_36);
        _38 = discriminant(_35);
        switchInt(move _38) -> [0: bb19, 1: bb20, otherwise: bb9];
    }

    bb19: {
        StorageLive(_42);
        _42 = ((_35 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _34 = _42;
        StorageDead(_42);
        _172 = discriminant(_35);
        StorageDead(_35);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = &mut (*_13);
        _45 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _46) -> [return: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_39);
        _39 = move ((_35 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_41);
        _41 = move _39;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _41) -> [return: bb21, unwind: bb110];
    }

    bb21: {
        StorageDead(_41);
        StorageDead(_39);
        _214 = discriminant(_35);
        StorageDead(_35);
        goto -> bb92;
    }

    bb22: {
        StorageDead(_46);
        _44 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _45) -> [return: bb23, unwind: bb99];
    }

    bb23: {
        StorageDead(_45);
        _47 = discriminant(_44);
        switchInt(move _47) -> [0: bb24, 1: bb25, otherwise: bb9];
    }

    bb24: {
        StorageLive(_51);
        _51 = ((_44 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _43 = _51;
        StorageDead(_51);
        _174 = discriminant(_44);
        StorageDead(_44);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &mut (*_13);
        _54 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _55) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_48);
        _48 = move ((_44 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_50);
        _50 = move _48;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _50) -> [return: bb26, unwind: bb109];
    }

    bb26: {
        StorageDead(_50);
        StorageDead(_48);
        _212 = discriminant(_44);
        StorageDead(_44);
        goto -> bb91;
    }

    bb27: {
        StorageDead(_55);
        _53 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _54) -> [return: bb28, unwind: bb99];
    }

    bb28: {
        StorageDead(_54);
        _56 = discriminant(_53);
        switchInt(move _56) -> [0: bb29, 1: bb30, otherwise: bb9];
    }

    bb29: {
        StorageLive(_60);
        _60 = ((_53 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _52 = _60;
        StorageDead(_60);
        _176 = discriminant(_53);
        StorageDead(_53);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = &mut (*_13);
        _63 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _64) -> [return: bb32, unwind continue];
    }

    bb30: {
        StorageLive(_57);
        _57 = move ((_53 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_59);
        _59 = move _57;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _59) -> [return: bb31, unwind: bb108];
    }

    bb31: {
        StorageDead(_59);
        StorageDead(_57);
        _210 = discriminant(_53);
        StorageDead(_53);
        goto -> bb90;
    }

    bb32: {
        StorageDead(_64);
        _62 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _63) -> [return: bb33, unwind: bb99];
    }

    bb33: {
        StorageDead(_63);
        _65 = discriminant(_62);
        switchInt(move _65) -> [0: bb34, 1: bb35, otherwise: bb9];
    }

    bb34: {
        StorageLive(_69);
        _69 = ((_62 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _61 = _69;
        StorageDead(_69);
        _178 = discriminant(_62);
        StorageDead(_62);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _73 = &mut (*_13);
        _72 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _73) -> [return: bb37, unwind continue];
    }

    bb35: {
        StorageLive(_66);
        _66 = move ((_62 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_68);
        _68 = move _66;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _68) -> [return: bb36, unwind: bb107];
    }

    bb36: {
        StorageDead(_68);
        StorageDead(_66);
        _208 = discriminant(_62);
        StorageDead(_62);
        goto -> bb89;
    }

    bb37: {
        StorageDead(_73);
        _71 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _72) -> [return: bb38, unwind: bb99];
    }

    bb38: {
        StorageDead(_72);
        _74 = discriminant(_71);
        switchInt(move _74) -> [0: bb39, 1: bb40, otherwise: bb9];
    }

    bb39: {
        StorageLive(_78);
        _78 = ((_71 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _70 = _78;
        StorageDead(_78);
        _180 = discriminant(_71);
        StorageDead(_71);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = <Clock as Sysvar>::get() -> [return: bb42, unwind continue];
    }

    bb40: {
        StorageLive(_75);
        _75 = move ((_71 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_77);
        _77 = move _75;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _77) -> [return: bb41, unwind: bb106];
    }

    bb41: {
        StorageDead(_77);
        StorageDead(_75);
        _206 = discriminant(_71);
        StorageDead(_71);
        goto -> bb88;
    }

    bb42: {
        _81 = <Result<Clock, ProgramError> as Try>::branch(move _82) -> [return: bb43, unwind: bb99];
    }

    bb43: {
        StorageDead(_82);
        _83 = discriminant(_81);
        switchInt(move _83) -> [0: bb44, 1: bb45, otherwise: bb9];
    }

    bb44: {
        StorageLive(_87);
        _87 = move ((_81 as Continue).0: solana_program::clock::Clock);
        _80 = move _87;
        StorageDead(_87);
        _79 = &_80;
        _182 = discriminant(_81);
        StorageDead(_81);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = &mut (*_13);
        _90 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _91) -> [return: bb47, unwind continue];
    }

    bb45: {
        StorageLive(_84);
        _84 = move ((_81 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_86);
        _86 = move _84;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _86) -> [return: bb46, unwind: bb105];
    }

    bb46: {
        StorageDead(_86);
        StorageDead(_84);
        _204 = discriminant(_81);
        StorageDead(_81);
        goto -> bb87;
    }

    bb47: {
        StorageDead(_91);
        _89 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _90) -> [return: bb48, unwind: bb99];
    }

    bb48: {
        StorageDead(_90);
        _92 = discriminant(_89);
        switchInt(move _92) -> [0: bb49, 1: bb50, otherwise: bb9];
    }

    bb49: {
        StorageLive(_96);
        _96 = ((_89 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _88 = _96;
        StorageDead(_96);
        _184 = discriminant(_89);
        StorageDead(_89);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = &(*_1);
        StorageLive(_101);
        _101 = &(*_34);
        StorageLive(_102);
        _102 = &(*_79);
        _99 = _refresh_reserve_interest(move _100, move _101, move _102) -> [return: bb52, unwind continue];
    }

    bb50: {
        StorageLive(_93);
        _93 = move ((_89 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_95);
        _95 = move _93;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _95) -> [return: bb51, unwind: bb104];
    }

    bb51: {
        StorageDead(_95);
        StorageDead(_93);
        _202 = discriminant(_89);
        StorageDead(_89);
        goto -> bb86;
    }

    bb52: {
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_100);
        _98 = <Result<(), ProgramError> as Try>::branch(move _99) -> [return: bb53, unwind: bb99];
    }

    bb53: {
        StorageDead(_99);
        _103 = discriminant(_98);
        switchInt(move _103) -> [0: bb54, 1: bb55, otherwise: bb9];
    }

    bb54: {
        StorageLive(_107);
        _107 = ((_98 as Continue).0: ());
        _97 = _107;
        StorageDead(_107);
        _186 = discriminant(_98);
        StorageDead(_98);
        StorageDead(_97);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        _111 = &(*_1);
        StorageLive(_112);
        _112 = _2;
        StorageLive(_113);
        _113 = &(*_16);
        StorageLive(_114);
        _114 = &(*_25);
        StorageLive(_115);
        _115 = &(*_34);
        StorageLive(_116);
        _116 = &(*_43);
        StorageLive(_117);
        _117 = &(*_52);
        StorageLive(_118);
        _118 = &(*_61);
        StorageLive(_119);
        _119 = &(*_70);
        StorageLive(_120);
        _120 = &(*_79);
        StorageLive(_121);
        _121 = &(*_88);
        _110 = _deposit_obligation_collateral(move _111, move _112, move _113, move _114, move _115, move _116, move _117, move _118, move _119, move _120, move _121) -> [return: bb57, unwind continue];
    }

    bb55: {
        StorageLive(_104);
        _104 = move ((_98 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_106);
        _106 = move _104;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _106) -> [return: bb56, unwind: bb103];
    }

    bb56: {
        StorageDead(_106);
        StorageDead(_104);
        _200 = discriminant(_98);
        StorageDead(_98);
        StorageDead(_97);
        goto -> bb86;
    }

    bb57: {
        StorageDead(_121);
        StorageDead(_120);
        StorageDead(_119);
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_115);
        StorageDead(_114);
        StorageDead(_113);
        StorageDead(_112);
        StorageDead(_111);
        _109 = <Result<(), ProgramError> as Try>::branch(move _110) -> [return: bb58, unwind: bb99];
    }

    bb58: {
        StorageDead(_110);
        _122 = discriminant(_109);
        switchInt(move _122) -> [0: bb59, 1: bb60, otherwise: bb9];
    }

    bb59: {
        StorageLive(_126);
        _126 = ((_109 as Continue).0: ());
        _108 = _126;
        StorageDead(_126);
        _188 = discriminant(_109);
        StorageDead(_109);
        StorageDead(_108);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        _138 = &((*_34).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _137 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _138) -> [return: bb62, unwind continue];
    }

    bb60: {
        StorageLive(_123);
        _123 = move ((_109 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_125);
        _125 = move _123;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _125) -> [return: bb61, unwind: bb102];
    }

    bb61: {
        StorageDead(_125);
        StorageDead(_123);
        _198 = discriminant(_109);
        StorageDead(_109);
        StorageDead(_108);
        goto -> bb86;
    }

    bb62: {
        _136 = &(*_137);
        StorageDead(_138);
        _135 = RefCell::<&mut [u8]>::borrow(move _136) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_136);
        _134 = &_135;
        _133 = &(*_134);
        _132 = <Ref<'_, &mut [u8]> as Deref>::deref(move _133) -> [return: bb64, unwind: bb98];
    }

    bb64: {
        _164 = deref_copy (*_132);
        _131 = &(*_164);
        StorageDead(_133);
        _130 = <Reserve as Pack>::unpack(move _131) -> [return: bb65, unwind: bb98];
    }

    bb65: {
        StorageDead(_131);
        _129 = <Result<Reserve, ProgramError> as Try>::branch(move _130) -> [return: bb66, unwind: bb98];
    }

    bb66: {
        _166 = const true;
        _167 = const true;
        StorageDead(_130);
        _139 = discriminant(_129);
        switchInt(move _139) -> [0: bb67, 1: bb68, otherwise: bb9];
    }

    bb67: {
        StorageLive(_143);
        _143 = move ((_129 as Continue).0: solend_sdk::state::Reserve);
        _128 = move _143;
        StorageDead(_143);
        _127 = Box::<Reserve>::new(move _128) -> [return: bb70, unwind: bb101];
    }

    bb68: {
        StorageLive(_140);
        _140 = move ((_129 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_142);
        _142 = move _140;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _142) -> [return: bb69, unwind: bb101];
    }

    bb69: {
        StorageDead(_142);
        StorageDead(_140);
        StorageDead(_128);
        _196 = discriminant(_129);
        drop(_135) -> [return: bb84, unwind: bb99];
    }

    bb70: {
        StorageDead(_128);
        _190 = discriminant(_129);
        drop(_135) -> [return: bb71, unwind: bb97];
    }

    bb71: {
        StorageDead(_137);
        StorageDead(_135);
        StorageDead(_134);
        StorageDead(_132);
        _166 = const false;
        _167 = const false;
        StorageDead(_129);
        StorageLive(_144);
        StorageLive(_145);
        _233 = (((_127.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _145 = &mut ((*_233).1: solend_sdk::state::LastUpdate);
        _144 = LastUpdate::mark_stale(move _145) -> [return: bb72, unwind: bb97];
    }

    bb72: {
        StorageDead(_145);
        StorageDead(_144);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        _234 = (((_127.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _235 = _234 as *const () (PtrToPtr);
        _236 = _235 as usize (Transmute);
        _237 = AlignOf(solend_sdk::state::Reserve);
        _238 = Sub(_237, const 1_usize);
        _239 = BitAnd(_236, _238);
        _240 = Eq(_239, const 0_usize);
        assert(_240, "misaligned pointer dereference: address must be a multiple of {} but is {}", _237, _236) -> [success: bb113, unwind unreachable];
    }

    bb73: {
        _155 = &(*_156);
        StorageDead(_157);
        _154 = RefCell::<&mut [u8]>::borrow_mut(move _155) -> [return: bb74, unwind: bb97];
    }

    bb74: {
        StorageDead(_155);
        _153 = &mut _154;
        _152 = &mut (*_153);
        _151 = <RefMut<'_, &mut [u8]> as DerefMut>::deref_mut(move _152) -> [return: bb75, unwind: bb96];
    }

    bb75: {
        _165 = deref_copy (*_151);
        _150 = &mut (*_165);
        StorageDead(_152);
        _148 = <Reserve as Pack>::pack(move _149, move _150) -> [return: bb76, unwind: bb96];
    }

    bb76: {
        StorageDead(_150);
        StorageDead(_149);
        _147 = <Result<(), ProgramError> as Try>::branch(move _148) -> [return: bb77, unwind: bb96];
    }

    bb77: {
        StorageDead(_148);
        _158 = discriminant(_147);
        switchInt(move _158) -> [0: bb78, 1: bb79, otherwise: bb9];
    }

    bb78: {
        StorageLive(_162);
        _162 = ((_147 as Continue).0: ());
        _146 = _162;
        StorageDead(_162);
        _192 = discriminant(_147);
        drop(_154) -> [return: bb81, unwind: bb97];
    }

    bb79: {
        StorageLive(_159);
        _159 = move ((_147 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_161);
        _161 = move _159;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _161) -> [return: bb80, unwind: bb100];
    }

    bb80: {
        StorageDead(_161);
        StorageDead(_159);
        _194 = discriminant(_147);
        drop(_154) -> [return: bb83, unwind: bb97];
    }

    bb81: {
        StorageDead(_156);
        StorageDead(_154);
        StorageDead(_153);
        StorageDead(_151);
        StorageDead(_147);
        StorageDead(_146);
        StorageLive(_163);
        _163 = ();
        _0 = Result::<(), ProgramError>::Ok(move _163);
        StorageDead(_163);
        drop(_127) -> [return: bb82, unwind: bb99];
    }

    bb82: {
        StorageDead(_127);
        StorageDead(_88);
        StorageDead(_80);
        StorageDead(_79);
        StorageDead(_70);
        StorageDead(_61);
        StorageDead(_52);
        StorageDead(_43);
        StorageDead(_34);
        StorageDead(_25);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb95;
    }

    bb83: {
        StorageDead(_156);
        StorageDead(_154);
        StorageDead(_153);
        StorageDead(_151);
        StorageDead(_147);
        StorageDead(_146);
        drop(_127) -> [return: bb85, unwind: bb99];
    }

    bb84: {
        StorageDead(_137);
        StorageDead(_135);
        StorageDead(_134);
        StorageDead(_132);
        _166 = const false;
        _167 = const false;
        StorageDead(_129);
        goto -> bb85;
    }

    bb85: {
        StorageDead(_127);
        goto -> bb86;
    }

    bb86: {
        StorageDead(_88);
        goto -> bb87;
    }

    bb87: {
        StorageDead(_80);
        StorageDead(_79);
        goto -> bb88;
    }

    bb88: {
        StorageDead(_70);
        goto -> bb89;
    }

    bb89: {
        StorageDead(_61);
        goto -> bb90;
    }

    bb90: {
        StorageDead(_52);
        goto -> bb91;
    }

    bb91: {
        StorageDead(_43);
        goto -> bb92;
    }

    bb92: {
        StorageDead(_34);
        goto -> bb93;
    }

    bb93: {
        StorageDead(_25);
        goto -> bb94;
    }

    bb94: {
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb95;
    }

    bb95: {
        return;
    }

    bb96 (cleanup): {
        drop(_154) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        drop(_127) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        drop(_135) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        resume;
    }

    bb100 (cleanup): {
        _220 = discriminant(_147);
        goto -> bb96;
    }

    bb101 (cleanup): {
        _221 = discriminant(_129);
        goto -> bb98;
    }

    bb102 (cleanup): {
        _222 = discriminant(_109);
        goto -> bb99;
    }

    bb103 (cleanup): {
        _223 = discriminant(_98);
        goto -> bb99;
    }

    bb104 (cleanup): {
        _224 = discriminant(_89);
        goto -> bb99;
    }

    bb105 (cleanup): {
        _225 = discriminant(_81);
        goto -> bb99;
    }

    bb106 (cleanup): {
        _226 = discriminant(_71);
        goto -> bb99;
    }

    bb107 (cleanup): {
        _227 = discriminant(_62);
        goto -> bb99;
    }

    bb108 (cleanup): {
        _228 = discriminant(_53);
        goto -> bb99;
    }

    bb109 (cleanup): {
        _229 = discriminant(_44);
        goto -> bb99;
    }

    bb110 (cleanup): {
        _230 = discriminant(_35);
        goto -> bb99;
    }

    bb111 (cleanup): {
        _231 = discriminant(_26);
        goto -> bb99;
    }

    bb112 (cleanup): {
        _232 = discriminant(_17);
        goto -> bb99;
    }

    bb113: {
        _149 = move (*_234);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        _157 = &((*_34).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _156 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _157) -> [return: bb73, unwind: bb97];
    }
}
