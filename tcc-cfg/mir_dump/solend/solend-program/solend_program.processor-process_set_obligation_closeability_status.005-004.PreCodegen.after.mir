// MIR for `process_set_obligation_closeability_status` after PreCodegen

fn process_set_obligation_closeability_status(_1: &Pubkey, _2: bool, _3: &[AccountInfo<'_>]) -> Result<(), ProgramError> {
    debug program_id => _1;
    debug closeable => _2;
    debug accounts => _3;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _4: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _5: std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _6: &[solana_program::account_info::AccountInfo<'_>];
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _9: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _10: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _11: isize;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _18: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _19: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _20: isize;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _27: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _28: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _29: isize;
    let mut _31: !;
    let mut _32: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, &solana_program::account_info::AccountInfo<'_>>;
    let mut _36: std::result::Result<&solana_program::account_info::AccountInfo<'_>, solana_program::program_error::ProgramError>;
    let mut _37: &mut std::slice::Iter<'_, solana_program::account_info::AccountInfo<'_>>;
    let mut _38: isize;
    let mut _40: !;
    let mut _41: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _44: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solana_program::clock::Clock>;
    let mut _45: std::result::Result<solana_program::clock::Clock, solana_program::program_error::ProgramError>;
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::state::LendingMarket>;
    let mut _53: std::result::Result<solend_sdk::state::LendingMarket, solana_program::program_error::ProgramError>;
    let mut _54: &[u8];
    let _55: &&mut [u8];
    let mut _56: &std::cell::Ref<'_, &mut [u8]>;
    let _57: &std::cell::Ref<'_, &mut [u8]>;
    let _58: std::cell::Ref<'_, &mut [u8]>;
    let mut _59: &std::cell::RefCell<&mut [u8]>;
    let _60: &std::cell::RefCell<&mut [u8]>;
    let mut _61: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _62: isize;
    let mut _64: !;
    let mut _65: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _67: ();
    let mut _68: bool;
    let mut _69: &&solana_program::pubkey::Pubkey;
    let mut _70: &&solana_program::pubkey::Pubkey;
    let mut _71: !;
    let _72: ();
    let mut _73: &str;
    let _74: &str;
    let mut _75: solana_program::program_error::ProgramError;
    let mut _76: solend_sdk::error::LendingError;
    let mut _78: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::state::Reserve>;
    let mut _79: std::result::Result<solend_sdk::state::Reserve, solana_program::program_error::ProgramError>;
    let mut _80: &[u8];
    let _81: &&mut [u8];
    let mut _82: &std::cell::Ref<'_, &mut [u8]>;
    let _83: &std::cell::Ref<'_, &mut [u8]>;
    let _84: std::cell::Ref<'_, &mut [u8]>;
    let mut _85: &std::cell::RefCell<&mut [u8]>;
    let _86: &std::cell::RefCell<&mut [u8]>;
    let mut _87: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _88: isize;
    let mut _90: !;
    let mut _91: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _93: ();
    let mut _94: bool;
    let mut _95: &&solana_program::pubkey::Pubkey;
    let mut _96: &&solana_program::pubkey::Pubkey;
    let mut _97: !;
    let _98: ();
    let mut _99: &str;
    let _100: &str;
    let mut _101: solana_program::program_error::ProgramError;
    let mut _102: solend_sdk::error::LendingError;
    let _103: ();
    let mut _104: bool;
    let mut _105: &&solana_program::pubkey::Pubkey;
    let _106: &solana_program::pubkey::Pubkey;
    let mut _107: &&solana_program::pubkey::Pubkey;
    let mut _108: !;
    let _109: ();
    let mut _110: &str;
    let _111: &str;
    let mut _112: solana_program::program_error::ProgramError;
    let mut _113: solend_sdk::error::LendingError;
    let _114: ();
    let mut _115: bool;
    let mut _116: &solend_sdk::math::Decimal;
    let mut _117: &solend_sdk::math::Decimal;
    let _118: solend_sdk::math::Decimal;
    let mut _119: u64;
    let mut _120: !;
    let _121: ();
    let mut _122: &str;
    let _123: &str;
    let mut _124: solana_program::program_error::ProgramError;
    let mut _125: solend_sdk::error::LendingError;
    let mut _127: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::state::Obligation>;
    let mut _128: std::result::Result<solend_sdk::state::Obligation, solana_program::program_error::ProgramError>;
    let mut _129: &[u8];
    let _130: &&mut [u8];
    let mut _131: &std::cell::Ref<'_, &mut [u8]>;
    let _132: &std::cell::Ref<'_, &mut [u8]>;
    let _133: std::cell::Ref<'_, &mut [u8]>;
    let mut _134: &std::cell::RefCell<&mut [u8]>;
    let _135: &std::cell::RefCell<&mut [u8]>;
    let mut _136: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _137: isize;
    let mut _139: !;
    let mut _140: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _142: ();
    let mut _143: bool;
    let mut _144: &&solana_program::pubkey::Pubkey;
    let mut _145: &&solana_program::pubkey::Pubkey;
    let mut _146: !;
    let _147: ();
    let mut _148: &str;
    let _149: &str;
    let mut _150: solana_program::program_error::ProgramError;
    let mut _151: solend_sdk::error::LendingError;
    let _152: ();
    let mut _153: bool;
    let mut _154: &&solana_program::pubkey::Pubkey;
    let _155: &solana_program::pubkey::Pubkey;
    let mut _156: &&solana_program::pubkey::Pubkey;
    let mut _157: !;
    let _158: ();
    let mut _159: &str;
    let _160: &str;
    let mut _161: solana_program::program_error::ProgramError;
    let mut _162: solend_sdk::error::LendingError;
    let _163: ();
    let mut _164: bool;
    let mut _165: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, bool>;
    let mut _166: std::result::Result<bool, solana_program::program_error::ProgramError>;
    let mut _167: &solend_sdk::state::LastUpdate;
    let mut _168: u64;
    let mut _169: isize;
    let mut _171: !;
    let mut _172: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _174: !;
    let _175: ();
    let mut _176: &str;
    let _177: &str;
    let mut _178: solana_program::program_error::ProgramError;
    let mut _179: solend_sdk::error::LendingError;
    let _180: ();
    let mut _181: bool;
    let mut _182: &&solana_program::pubkey::Pubkey;
    let _183: &solana_program::pubkey::Pubkey;
    let mut _184: &&solana_program::pubkey::Pubkey;
    let mut _185: bool;
    let mut _186: &&solana_program::pubkey::Pubkey;
    let _187: &solana_program::pubkey::Pubkey;
    let mut _188: &&solana_program::pubkey::Pubkey;
    let mut _189: !;
    let _190: ();
    let mut _191: &str;
    let _192: &str;
    let mut _193: solana_program::program_error::ProgramError;
    let mut _194: solend_sdk::error::LendingError;
    let _195: ();
    let mut _196: bool;
    let mut _197: !;
    let _198: ();
    let mut _199: &str;
    let _200: &str;
    let mut _201: solana_program::program_error::ProgramError;
    let mut _202: solend_sdk::error::LendingError;
    let _203: ();
    let mut _204: bool;
    let mut _205: &solend_sdk::math::Decimal;
    let mut _206: &solend_sdk::math::Decimal;
    let _207: solend_sdk::math::Decimal;
    let mut _208: !;
    let _209: ();
    let mut _210: &str;
    let _211: &str;
    let mut _212: solana_program::program_error::ProgramError;
    let mut _213: solend_sdk::error::LendingError;
    let _214: (&solend_sdk::state::ObligationCollateral, usize);
    let mut _215: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>, (&solend_sdk::state::ObligationCollateral, usize)>;
    let mut _216: std::result::Result<(&solend_sdk::state::ObligationCollateral, usize), solend_sdk::error::LendingError>;
    let mut _217: std::result::Result<(&solend_sdk::state::ObligationCollateral, usize), solana_program::program_error::ProgramError>;
    let mut _218: &solend_sdk::state::Obligation;
    let mut _219: solana_program::pubkey::Pubkey;
    let mut _220: {closure@token-lending\program\src\processor.rs:3192:18: 3192:21};
    let mut _221: isize;
    let mut _223: !;
    let mut _224: std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>;
    let mut _226: bool;
    let _227: ();
    let mut _228: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _229: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _230: solend_sdk::state::Obligation;
    let mut _231: &mut [u8];
    let mut _232: &mut &mut [u8];
    let mut _233: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _234: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _235: std::cell::RefMut<'_, &mut [u8]>;
    let mut _236: &std::cell::RefCell<&mut [u8]>;
    let _237: &std::cell::RefCell<&mut [u8]>;
    let mut _238: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _239: isize;
    let mut _241: !;
    let mut _242: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _244: ();
    let mut _245: &mut [u8];
    let mut _246: &mut [u8];
    let mut _247: &mut [u8];
    let mut _248: &solana_program::pubkey::Pubkey;
    let mut _249: &mut [u8];
    let mut _250: bool;
    let mut _251: bool;
    let mut _252: isize;
    let mut _253: isize;
    let mut _254: isize;
    let mut _255: isize;
    let mut _256: isize;
    let mut _257: isize;
    let mut _258: isize;
    let mut _259: isize;
    let mut _260: isize;
    let mut _261: isize;
    let mut _262: isize;
    let mut _263: isize;
    let mut _264: isize;
    let mut _265: isize;
    let mut _266: isize;
    let mut _267: isize;
    let mut _268: isize;
    let mut _269: isize;
    let mut _270: isize;
    let mut _271: isize;
    let mut _272: isize;
    let mut _273: isize;
    let mut _274: isize;
    let mut _275: isize;
    let mut _276: isize;
    let mut _277: isize;
    let mut _278: isize;
    let mut _279: isize;
    let mut _280: isize;
    let mut _281: isize;
    let mut _282: isize;
    let mut _283: isize;
    let mut _284: isize;
    let mut _285: isize;
    let mut _286: isize;
    let mut _287: isize;
    let mut _288: isize;
    let mut _289: isize;
    let mut _290: isize;
    let mut _291: isize;
    let mut _292: isize;
    let mut _293: isize;
    let mut _294: isize;
    let mut _295: isize;
    let mut _296: isize;
    let mut _297: isize;
    let mut _298: isize;
    let mut _299: isize;
    let mut _300: isize;
    let mut _301: isize;
    let mut _302: isize;
    let mut _303: isize;
    scope 1 {
        debug account_info_iter => _4;
        let _7: &solana_program::account_info::AccountInfo<'_>;
        let _12: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _15: &solana_program::account_info::AccountInfo<'_>;
        scope 2 {
            debug obligation_info => _7;
            let _16: &solana_program::account_info::AccountInfo<'_>;
            let _21: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
            let _24: &solana_program::account_info::AccountInfo<'_>;
            scope 7 {
                debug lending_market_info => _16;
                let _25: &solana_program::account_info::AccountInfo<'_>;
                let _30: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                let _33: &solana_program::account_info::AccountInfo<'_>;
                scope 12 {
                    debug reserve_info => _25;
                    let _34: &solana_program::account_info::AccountInfo<'_>;
                    let _39: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                    let _42: &solana_program::account_info::AccountInfo<'_>;
                    scope 17 {
                        debug signer_info => _34;
                        let _43: solana_program::clock::Clock;
                        let _47: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                        let _50: solana_program::clock::Clock;
                        scope 22 {
                            debug clock => _43;
                            let _51: solend_sdk::state::LendingMarket;
                            let _63: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                            let _66: solend_sdk::state::LendingMarket;
                            scope 27 {
                                debug lending_market => _51;
                                let _77: solend_sdk::state::Reserve;
                                let _89: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                let _92: solend_sdk::state::Reserve;
                                scope 32 {
                                    debug reserve => _77;
                                    let mut _126: solend_sdk::state::Obligation;
                                    let _138: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                    let _141: solend_sdk::state::Obligation;
                                    scope 37 {
                                        debug obligation => _126;
                                        let _170: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                        let _173: bool;
                                        let _222: std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>;
                                        let _225: (&solend_sdk::state::ObligationCollateral, usize);
                                        let _240: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                        let _243: ();
                                        scope 42 {
                                            debug residual => _170;
                                            scope 43 {
                                            }
                                        }
                                        scope 44 {
                                            debug val => _173;
                                            scope 45 {
                                            }
                                        }
                                        scope 46 {
                                            debug residual => _222;
                                            scope 47 {
                                            }
                                        }
                                        scope 48 {
                                            debug val => _225;
                                            scope 49 {
                                            }
                                        }
                                        scope 50 {
                                            debug residual => _240;
                                            scope 51 {
                                            }
                                        }
                                        scope 52 {
                                            debug val => _243;
                                            scope 53 {
                                            }
                                        }
                                    }
                                    scope 38 {
                                        debug residual => _138;
                                        scope 39 {
                                        }
                                    }
                                    scope 40 {
                                        debug val => _141;
                                        scope 41 {
                                        }
                                    }
                                }
                                scope 33 {
                                    debug residual => _89;
                                    scope 34 {
                                    }
                                }
                                scope 35 {
                                    debug val => _92;
                                    scope 36 {
                                    }
                                }
                            }
                            scope 28 {
                                debug residual => _63;
                                scope 29 {
                                }
                            }
                            scope 30 {
                                debug val => _66;
                                scope 31 {
                                }
                            }
                        }
                        scope 23 {
                            debug residual => _47;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _50;
                            scope 26 {
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _39;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _42;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _30;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _33;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _21;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _24;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _12;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _15;
            scope 6 {
            }
        }
    }

    bb0: {
        _250 = const false;
        _251 = const false;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &(*_3);
        _5 = bytemuck::core::slice::<impl [AccountInfo<'_>]>::iter(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = &mut _5;
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &mut (*_4);
        _9 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        _8 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _9) -> [return: bb3, unwind: bb146];
    }

    bb3: {
        StorageDead(_9);
        _11 = discriminant(_8);
        switchInt(move _11) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_15);
        _15 = ((_8 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _7 = _15;
        StorageDead(_15);
        _252 = discriminant(_8);
        StorageDead(_8);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &mut (*_4);
        _18 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _19) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_12);
        _12 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_14);
        _14 = move _12;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _14) -> [return: bb7, unwind: bb164];
    }

    bb7: {
        StorageDead(_14);
        StorageDead(_12);
        _292 = discriminant(_8);
        StorageDead(_8);
        goto -> bb139;
    }

    bb8: {
        StorageDead(_19);
        _17 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _18) -> [return: bb9, unwind: bb146];
    }

    bb9: {
        StorageDead(_18);
        _20 = discriminant(_17);
        switchInt(move _20) -> [0: bb10, 1: bb11, otherwise: bb5];
    }

    bb10: {
        StorageLive(_24);
        _24 = ((_17 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _16 = _24;
        StorageDead(_24);
        _254 = discriminant(_17);
        StorageDead(_17);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &mut (*_4);
        _27 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _28) -> [return: bb13, unwind continue];
    }

    bb11: {
        StorageLive(_21);
        _21 = move ((_17 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_23);
        _23 = move _21;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _23) -> [return: bb12, unwind: bb163];
    }

    bb12: {
        StorageDead(_23);
        StorageDead(_21);
        _290 = discriminant(_17);
        StorageDead(_17);
        goto -> bb138;
    }

    bb13: {
        StorageDead(_28);
        _26 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _27) -> [return: bb14, unwind: bb146];
    }

    bb14: {
        StorageDead(_27);
        _29 = discriminant(_26);
        switchInt(move _29) -> [0: bb15, 1: bb16, otherwise: bb5];
    }

    bb15: {
        StorageLive(_33);
        _33 = ((_26 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _25 = _33;
        StorageDead(_33);
        _256 = discriminant(_26);
        StorageDead(_26);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &mut (*_4);
        _36 = next_account_info::<'_, '_, std::slice::Iter<'_, AccountInfo<'_>>>(move _37) -> [return: bb18, unwind continue];
    }

    bb16: {
        StorageLive(_30);
        _30 = move ((_26 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_32);
        _32 = move _30;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _32) -> [return: bb17, unwind: bb162];
    }

    bb17: {
        StorageDead(_32);
        StorageDead(_30);
        _288 = discriminant(_26);
        StorageDead(_26);
        goto -> bb137;
    }

    bb18: {
        StorageDead(_37);
        _35 = <Result<&AccountInfo<'_>, ProgramError> as Try>::branch(move _36) -> [return: bb19, unwind: bb146];
    }

    bb19: {
        StorageDead(_36);
        _38 = discriminant(_35);
        switchInt(move _38) -> [0: bb20, 1: bb21, otherwise: bb5];
    }

    bb20: {
        StorageLive(_42);
        _42 = ((_35 as Continue).0: &solana_program::account_info::AccountInfo<'_>);
        _34 = _42;
        StorageDead(_42);
        _258 = discriminant(_35);
        StorageDead(_35);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = <Clock as Sysvar>::get() -> [return: bb23, unwind continue];
    }

    bb21: {
        StorageLive(_39);
        _39 = move ((_35 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_41);
        _41 = move _39;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _41) -> [return: bb22, unwind: bb161];
    }

    bb22: {
        StorageDead(_41);
        StorageDead(_39);
        _286 = discriminant(_35);
        StorageDead(_35);
        goto -> bb136;
    }

    bb23: {
        _44 = <Result<Clock, ProgramError> as Try>::branch(move _45) -> [return: bb24, unwind: bb146];
    }

    bb24: {
        StorageDead(_45);
        _46 = discriminant(_44);
        switchInt(move _46) -> [0: bb25, 1: bb26, otherwise: bb5];
    }

    bb25: {
        StorageLive(_50);
        _50 = move ((_44 as Continue).0: solana_program::clock::Clock);
        _43 = move _50;
        StorageDead(_50);
        _260 = discriminant(_44);
        StorageDead(_44);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = &((*_16).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _60 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _61) -> [return: bb28, unwind continue];
    }

    bb26: {
        StorageLive(_47);
        _47 = move ((_44 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_49);
        _49 = move _47;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _49) -> [return: bb27, unwind: bb160];
    }

    bb27: {
        StorageDead(_49);
        StorageDead(_47);
        _284 = discriminant(_44);
        StorageDead(_44);
        goto -> bb135;
    }

    bb28: {
        _59 = &(*_60);
        StorageDead(_61);
        _58 = RefCell::<&mut [u8]>::borrow(move _59) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_59);
        _57 = &_58;
        _56 = &(*_57);
        _55 = <Ref<'_, &mut [u8]> as Deref>::deref(move _56) -> [return: bb30, unwind: bb145];
    }

    bb30: {
        _245 = deref_copy (*_55);
        _54 = &(*_245);
        StorageDead(_56);
        _53 = <LendingMarket as Pack>::unpack(move _54) -> [return: bb31, unwind: bb145];
    }

    bb31: {
        StorageDead(_54);
        _52 = <Result<LendingMarket, ProgramError> as Try>::branch(move _53) -> [return: bb32, unwind: bb145];
    }

    bb32: {
        StorageDead(_53);
        _62 = discriminant(_52);
        switchInt(move _62) -> [0: bb33, 1: bb34, otherwise: bb5];
    }

    bb33: {
        StorageLive(_66);
        _66 = move ((_52 as Continue).0: solend_sdk::state::LendingMarket);
        _51 = move _66;
        StorageDead(_66);
        _262 = discriminant(_52);
        drop(_58) -> [return: bb36, unwind: bb146];
    }

    bb34: {
        StorageLive(_63);
        _63 = move ((_52 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_65);
        _65 = move _63;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _65) -> [return: bb35, unwind: bb159];
    }

    bb35: {
        StorageDead(_65);
        StorageDead(_63);
        _282 = discriminant(_52);
        drop(_58) -> [return: bb133, unwind: bb146];
    }

    bb36: {
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_52);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &((*_16).3: &solana_program::pubkey::Pubkey);
        StorageLive(_70);
        _70 = &_1;
        _68 = <&Pubkey as PartialEq>::ne(move _69, move _70) -> [return: bb37, unwind continue];
    }

    bb37: {
        switchInt(move _68) -> [0: bb41, otherwise: bb38];
    }

    bb38: {
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = const "Lending market provided is not owned by the lending program";
        _73 = &(*_74);
        _72 = solana_program::log::sol_log(move _73) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_73);
        StorageDead(_74);
        StorageDead(_72);
        StorageLive(_75);
        StorageLive(_76);
        _76 = solend_sdk::error::LendingError::InvalidAccountOwner;
        _75 = <LendingError as Into<ProgramError>>::into(move _76) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_76);
        _0 = Result::<(), ProgramError>::Err(move _75);
        StorageDead(_75);
        StorageDead(_68);
        StorageDead(_67);
        goto -> bb134;
    }

    bb41: {
        StorageDead(_70);
        StorageDead(_69);
        _67 = const ();
        StorageDead(_68);
        StorageDead(_67);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _87 = &((*_25).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _86 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _87) -> [return: bb42, unwind continue];
    }

    bb42: {
        _85 = &(*_86);
        StorageDead(_87);
        _84 = RefCell::<&mut [u8]>::borrow(move _85) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_85);
        _83 = &_84;
        _82 = &(*_83);
        _81 = <Ref<'_, &mut [u8]> as Deref>::deref(move _82) -> [return: bb44, unwind: bb144];
    }

    bb44: {
        _246 = deref_copy (*_81);
        _80 = &(*_246);
        StorageDead(_82);
        _79 = <Reserve as Pack>::unpack(move _80) -> [return: bb45, unwind: bb144];
    }

    bb45: {
        StorageDead(_80);
        _78 = <Result<Reserve, ProgramError> as Try>::branch(move _79) -> [return: bb46, unwind: bb144];
    }

    bb46: {
        StorageDead(_79);
        _88 = discriminant(_78);
        switchInt(move _88) -> [0: bb47, 1: bb48, otherwise: bb5];
    }

    bb47: {
        StorageLive(_92);
        _92 = move ((_78 as Continue).0: solend_sdk::state::Reserve);
        _77 = move _92;
        StorageDead(_92);
        _264 = discriminant(_78);
        drop(_84) -> [return: bb50, unwind: bb146];
    }

    bb48: {
        StorageLive(_89);
        _89 = move ((_78 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_91);
        _91 = move _89;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _91) -> [return: bb49, unwind: bb158];
    }

    bb49: {
        StorageDead(_91);
        StorageDead(_89);
        _280 = discriminant(_78);
        drop(_84) -> [return: bb131, unwind: bb146];
    }

    bb50: {
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_83);
        StorageDead(_81);
        StorageDead(_78);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        _95 = &((*_25).3: &solana_program::pubkey::Pubkey);
        StorageLive(_96);
        _96 = &_1;
        _94 = <&Pubkey as PartialEq>::ne(move _95, move _96) -> [return: bb51, unwind continue];
    }

    bb51: {
        switchInt(move _94) -> [0: bb55, otherwise: bb52];
    }

    bb52: {
        StorageDead(_96);
        StorageDead(_95);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = const "Reserve provided is not owned by the lending program";
        _99 = &(*_100);
        _98 = solana_program::log::sol_log(move _99) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_99);
        StorageDead(_100);
        StorageDead(_98);
        StorageLive(_101);
        StorageLive(_102);
        _102 = solend_sdk::error::LendingError::InvalidAccountOwner;
        _101 = <LendingError as Into<ProgramError>>::into(move _102) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_102);
        _0 = Result::<(), ProgramError>::Err(move _101);
        StorageDead(_101);
        StorageDead(_94);
        StorageDead(_93);
        goto -> bb132;
    }

    bb55: {
        StorageDead(_96);
        StorageDead(_95);
        _93 = const ();
        StorageDead(_94);
        StorageDead(_93);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        _106 = &(_77.2: solana_program::pubkey::Pubkey);
        _105 = &_106;
        StorageLive(_107);
        _107 = &((*_16).0: &solana_program::pubkey::Pubkey);
        _104 = <&Pubkey as PartialEq>::ne(move _105, move _107) -> [return: bb56, unwind continue];
    }

    bb56: {
        switchInt(move _104) -> [0: bb60, otherwise: bb57];
    }

    bb57: {
        StorageDead(_107);
        StorageDead(_106);
        StorageDead(_105);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        _111 = const "Reserve lending market does not match the lending market provided";
        _110 = &(*_111);
        _109 = solana_program::log::sol_log(move _110) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_110);
        StorageDead(_111);
        StorageDead(_109);
        StorageLive(_112);
        StorageLive(_113);
        _113 = InvalidAccountInput;
        _112 = <LendingError as Into<ProgramError>>::into(move _113) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_113);
        _0 = Result::<(), ProgramError>::Err(move _112);
        StorageDead(_112);
        StorageDead(_104);
        StorageDead(_103);
        goto -> bb132;
    }

    bb60: {
        StorageDead(_107);
        StorageDead(_106);
        StorageDead(_105);
        _103 = const ();
        StorageDead(_104);
        StorageDead(_103);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        _116 = &(_77.7: solend_sdk::math::Decimal);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        _119 = ((_77.5: solend_sdk::state::ReserveConfig).22: u64);
        _118 = <Decimal as From<u64>>::from(move _119) -> [return: bb61, unwind continue];
    }

    bb61: {
        _117 = &_118;
        StorageDead(_119);
        _115 = <Decimal as PartialOrd>::lt(move _116, move _117) -> [return: bb62, unwind continue];
    }

    bb62: {
        switchInt(move _115) -> [0: bb66, otherwise: bb63];
    }

    bb63: {
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_116);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _123 = const "Reserve attributed borrow value is below the attributed borrow limit";
        _122 = &(*_123);
        _121 = solana_program::log::sol_log(move _122) -> [return: bb64, unwind continue];
    }

    bb64: {
        StorageDead(_122);
        StorageDead(_123);
        StorageDead(_121);
        StorageLive(_124);
        StorageLive(_125);
        _125 = BorrowAttributionLimitNotExceeded;
        _124 = <LendingError as Into<ProgramError>>::into(move _125) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_125);
        _0 = Result::<(), ProgramError>::Err(move _124);
        StorageDead(_124);
        StorageDead(_115);
        StorageDead(_114);
        goto -> bb132;
    }

    bb66: {
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_116);
        _114 = const ();
        StorageDead(_115);
        StorageDead(_114);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        _136 = &((*_7).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _135 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _136) -> [return: bb67, unwind continue];
    }

    bb67: {
        _134 = &(*_135);
        StorageDead(_136);
        _133 = RefCell::<&mut [u8]>::borrow(move _134) -> [return: bb68, unwind continue];
    }

    bb68: {
        StorageDead(_134);
        _132 = &_133;
        _131 = &(*_132);
        _130 = <Ref<'_, &mut [u8]> as Deref>::deref(move _131) -> [return: bb69, unwind: bb143];
    }

    bb69: {
        _247 = deref_copy (*_130);
        _129 = &(*_247);
        StorageDead(_131);
        _128 = <Obligation as Pack>::unpack(move _129) -> [return: bb70, unwind: bb143];
    }

    bb70: {
        StorageDead(_129);
        _127 = <Result<Obligation, ProgramError> as Try>::branch(move _128) -> [return: bb71, unwind: bb143];
    }

    bb71: {
        StorageDead(_128);
        _137 = discriminant(_127);
        switchInt(move _137) -> [0: bb72, 1: bb73, otherwise: bb5];
    }

    bb72: {
        StorageLive(_141);
        _141 = move ((_127 as Continue).0: solend_sdk::state::Obligation);
        _250 = const true;
        _126 = move _141;
        StorageDead(_141);
        _266 = discriminant(_127);
        drop(_133) -> [return: bb75, unwind: bb156];
    }

    bb73: {
        StorageLive(_138);
        _138 = move ((_127 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_140);
        _140 = move _138;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _140) -> [return: bb74, unwind: bb157];
    }

    bb74: {
        StorageDead(_140);
        StorageDead(_138);
        _278 = discriminant(_127);
        drop(_133) -> [return: bb129, unwind: bb146];
    }

    bb75: {
        StorageDead(_135);
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_130);
        StorageDead(_127);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        _144 = &((*_7).3: &solana_program::pubkey::Pubkey);
        StorageLive(_145);
        _145 = &_1;
        _143 = <&Pubkey as PartialEq>::ne(move _144, move _145) -> [return: bb76, unwind: bb156];
    }

    bb76: {
        switchInt(move _143) -> [0: bb80, otherwise: bb77];
    }

    bb77: {
        StorageDead(_145);
        StorageDead(_144);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        _149 = const "Obligation provided is not owned by the lending program";
        _148 = &(*_149);
        _147 = solana_program::log::sol_log(move _148) -> [return: bb78, unwind: bb156];
    }

    bb78: {
        StorageDead(_148);
        StorageDead(_149);
        StorageDead(_147);
        StorageLive(_150);
        StorageLive(_151);
        _151 = solend_sdk::error::LendingError::InvalidAccountOwner;
        _150 = <LendingError as Into<ProgramError>>::into(move _151) -> [return: bb79, unwind: bb156];
    }

    bb79: {
        StorageDead(_151);
        _0 = Result::<(), ProgramError>::Err(move _150);
        StorageDead(_150);
        StorageDead(_143);
        StorageDead(_142);
        goto -> bb150;
    }

    bb80: {
        StorageDead(_145);
        StorageDead(_144);
        _142 = const ();
        StorageDead(_143);
        StorageDead(_142);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        _155 = &(_126.2: solana_program::pubkey::Pubkey);
        _154 = &_155;
        StorageLive(_156);
        _156 = &((*_16).0: &solana_program::pubkey::Pubkey);
        _153 = <&Pubkey as PartialEq>::ne(move _154, move _156) -> [return: bb81, unwind: bb156];
    }

    bb81: {
        switchInt(move _153) -> [0: bb85, otherwise: bb82];
    }

    bb82: {
        StorageDead(_156);
        StorageDead(_155);
        StorageDead(_154);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        _160 = const "Obligation lending market does not match the lending market provided";
        _159 = &(*_160);
        _158 = solana_program::log::sol_log(move _159) -> [return: bb83, unwind: bb156];
    }

    bb83: {
        StorageDead(_159);
        StorageDead(_160);
        StorageDead(_158);
        StorageLive(_161);
        StorageLive(_162);
        _162 = InvalidAccountInput;
        _161 = <LendingError as Into<ProgramError>>::into(move _162) -> [return: bb84, unwind: bb156];
    }

    bb84: {
        StorageDead(_162);
        _0 = Result::<(), ProgramError>::Err(move _161);
        StorageDead(_161);
        StorageDead(_153);
        StorageDead(_152);
        goto -> bb150;
    }

    bb85: {
        StorageDead(_156);
        StorageDead(_155);
        StorageDead(_154);
        _152 = const ();
        StorageDead(_153);
        StorageDead(_152);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        _167 = &(_126.1: solend_sdk::state::LastUpdate);
        StorageLive(_168);
        _168 = (_43.0: u64);
        _166 = LastUpdate::is_stale(move _167, move _168) -> [return: bb86, unwind: bb156];
    }

    bb86: {
        StorageDead(_168);
        StorageDead(_167);
        _165 = <Result<bool, ProgramError> as Try>::branch(move _166) -> [return: bb87, unwind: bb156];
    }

    bb87: {
        StorageDead(_166);
        _169 = discriminant(_165);
        switchInt(move _169) -> [0: bb88, 1: bb89, otherwise: bb5];
    }

    bb88: {
        StorageLive(_173);
        _173 = ((_165 as Continue).0: bool);
        _164 = _173;
        StorageDead(_173);
        switchInt(move _164) -> [0: bb148, otherwise: bb147];
    }

    bb89: {
        StorageLive(_170);
        _170 = move ((_165 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_172);
        _172 = move _170;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _172) -> [return: bb90, unwind: bb154];
    }

    bb90: {
        StorageDead(_172);
        StorageDead(_170);
        _276 = discriminant(_165);
        StorageDead(_165);
        goto -> bb128;
    }

    bb91: {
        StorageDead(_176);
        StorageDead(_177);
        StorageDead(_175);
        StorageLive(_178);
        StorageLive(_179);
        _179 = ObligationStale;
        _178 = <LendingError as Into<ProgramError>>::into(move _179) -> [return: bb92, unwind: bb156];
    }

    bb92: {
        StorageDead(_179);
        _0 = Result::<(), ProgramError>::Err(move _178);
        StorageDead(_178);
        goto -> bb128;
    }

    bb93: {
        switchInt(move _181) -> [0: bb100, otherwise: bb94];
    }

    bb94: {
        StorageDead(_184);
        StorageDead(_183);
        StorageDead(_182);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        _187 = &(_51.2: solana_program::pubkey::Pubkey);
        _186 = &_187;
        StorageLive(_188);
        _188 = &((*_34).0: &solana_program::pubkey::Pubkey);
        _185 = <&Pubkey as PartialEq>::ne(move _186, move _188) -> [return: bb95, unwind: bb156];
    }

    bb95: {
        switchInt(move _185) -> [0: bb99, otherwise: bb96];
    }

    bb96: {
        StorageDead(_188);
        StorageDead(_187);
        StorageDead(_186);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        _192 = const "Signer must be risk authority or lending market owner";
        _191 = &(*_192);
        _190 = solana_program::log::sol_log(move _191) -> [return: bb97, unwind: bb156];
    }

    bb97: {
        StorageDead(_191);
        StorageDead(_192);
        StorageDead(_190);
        StorageLive(_193);
        StorageLive(_194);
        _194 = InvalidAccountInput;
        _193 = <LendingError as Into<ProgramError>>::into(move _194) -> [return: bb98, unwind: bb156];
    }

    bb98: {
        StorageDead(_194);
        _0 = Result::<(), ProgramError>::Err(move _193);
        StorageDead(_193);
        StorageDead(_185);
        StorageDead(_181);
        StorageDead(_180);
        goto -> bb150;
    }

    bb99: {
        StorageDead(_188);
        StorageDead(_187);
        StorageDead(_186);
        goto -> bb101;
    }

    bb100: {
        StorageDead(_184);
        StorageDead(_183);
        StorageDead(_182);
        goto -> bb101;
    }

    bb101: {
        _180 = const ();
        StorageDead(_185);
        StorageDead(_181);
        StorageDead(_180);
        StorageLive(_195);
        StorageLive(_196);
        _196 = ((*_34).5: bool);
        switchInt(move _196) -> [0: bb103, otherwise: bb102];
    }

    bb102: {
        _195 = const ();
        StorageDead(_196);
        StorageDead(_195);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        _205 = &(_126.7: solend_sdk::math::Decimal);
        StorageLive(_206);
        StorageLive(_207);
        _207 = Decimal::zero() -> [return: bb106, unwind: bb156];
    }

    bb103: {
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        _200 = const "Risk authority or lending market owner must be a signer";
        _199 = &(*_200);
        _198 = solana_program::log::sol_log(move _199) -> [return: bb104, unwind: bb156];
    }

    bb104: {
        StorageDead(_199);
        StorageDead(_200);
        StorageDead(_198);
        StorageLive(_201);
        StorageLive(_202);
        _202 = InvalidSigner;
        _201 = <LendingError as Into<ProgramError>>::into(move _202) -> [return: bb105, unwind: bb156];
    }

    bb105: {
        StorageDead(_202);
        _0 = Result::<(), ProgramError>::Err(move _201);
        StorageDead(_201);
        StorageDead(_196);
        StorageDead(_195);
        goto -> bb150;
    }

    bb106: {
        _206 = &_207;
        _204 = <Decimal as PartialEq>::eq(move _205, move _206) -> [return: bb107, unwind: bb156];
    }

    bb107: {
        switchInt(move _204) -> [0: bb111, otherwise: bb108];
    }

    bb108: {
        StorageDead(_207);
        StorageDead(_206);
        StorageDead(_205);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        _211 = const "Obligation borrowed value is zero";
        _210 = &(*_211);
        _209 = solana_program::log::sol_log(move _210) -> [return: bb109, unwind: bb156];
    }

    bb109: {
        StorageDead(_210);
        StorageDead(_211);
        StorageDead(_209);
        StorageLive(_212);
        StorageLive(_213);
        _213 = ObligationBorrowsZero;
        _212 = <LendingError as Into<ProgramError>>::into(move _213) -> [return: bb110, unwind: bb156];
    }

    bb110: {
        StorageDead(_213);
        _0 = Result::<(), ProgramError>::Err(move _212);
        StorageDead(_212);
        StorageDead(_204);
        StorageDead(_203);
        goto -> bb150;
    }

    bb111: {
        StorageDead(_207);
        StorageDead(_206);
        StorageDead(_205);
        _203 = const ();
        StorageDead(_204);
        StorageDead(_203);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        _218 = &_126;
        StorageLive(_219);
        _248 = deref_copy ((*_25).0: &solana_program::pubkey::Pubkey);
        _219 = (*_248);
        _217 = Obligation::find_collateral_in_deposits(move _218, move _219) -> [return: bb112, unwind: bb156];
    }

    bb112: {
        StorageDead(_219);
        StorageDead(_218);
        StorageLive(_220);
        _220 = {closure@token-lending\program\src\processor.rs:3192:18: 3192:21};
        _216 = Result::<(&ObligationCollateral, usize), ProgramError>::map_err::<LendingError, {closure@token-lending\program\src\processor.rs:3192:18: 3192:21}>(move _217, move _220) -> [return: bb113, unwind: bb156];
    }

    bb113: {
        StorageDead(_220);
        StorageDead(_217);
        _215 = <Result<(&ObligationCollateral, usize), LendingError> as Try>::branch(move _216) -> [return: bb114, unwind: bb156];
    }

    bb114: {
        StorageDead(_216);
        _221 = discriminant(_215);
        switchInt(move _221) -> [0: bb115, 1: bb116, otherwise: bb5];
    }

    bb115: {
        StorageLive(_225);
        _225 = ((_215 as Continue).0: (&solend_sdk::state::ObligationCollateral, usize));
        _214 = _225;
        StorageDead(_225);
        StorageDead(_215);
        StorageDead(_214);
        StorageLive(_226);
        _226 = _2;
        (_126.14: bool) = move _226;
        StorageDead(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        _250 = const false;
        _251 = const true;
        _230 = move _126;
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        _238 = &((*_7).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _237 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _238) -> [return: bb118, unwind: bb142];
    }

    bb116: {
        StorageLive(_222);
        _222 = move ((_215 as Break).0: std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>);
        StorageLive(_224);
        _224 = move _222;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, LendingError>>>::from_residual(move _224) -> [return: bb117, unwind: bb156];
    }

    bb117: {
        StorageDead(_224);
        StorageDead(_222);
        StorageDead(_215);
        StorageDead(_214);
        goto -> bb150;
    }

    bb118: {
        _236 = &(*_237);
        StorageDead(_238);
        _235 = RefCell::<&mut [u8]>::borrow_mut(move _236) -> [return: bb119, unwind: bb142];
    }

    bb119: {
        StorageDead(_236);
        _234 = &mut _235;
        _233 = &mut (*_234);
        _232 = <RefMut<'_, &mut [u8]> as DerefMut>::deref_mut(move _233) -> [return: bb120, unwind: bb153];
    }

    bb120: {
        _249 = deref_copy (*_232);
        _231 = &mut (*_249);
        StorageDead(_233);
        _251 = const false;
        _229 = <Obligation as Pack>::pack(move _230, move _231) -> [return: bb121, unwind: bb153];
    }

    bb121: {
        StorageDead(_231);
        _251 = const false;
        StorageDead(_230);
        _228 = <Result<(), ProgramError> as Try>::branch(move _229) -> [return: bb122, unwind: bb141];
    }

    bb122: {
        StorageDead(_229);
        _239 = discriminant(_228);
        switchInt(move _239) -> [0: bb123, 1: bb124, otherwise: bb5];
    }

    bb123: {
        StorageLive(_243);
        _243 = ((_228 as Continue).0: ());
        _227 = _243;
        StorageDead(_243);
        _272 = discriminant(_228);
        drop(_235) -> [return: bb126, unwind: bb156];
    }

    bb124: {
        StorageLive(_240);
        _240 = move ((_228 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_242);
        _242 = move _240;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _242) -> [return: bb125, unwind: bb151];
    }

    bb125: {
        StorageDead(_242);
        StorageDead(_240);
        _274 = discriminant(_228);
        drop(_235) -> [return: bb127, unwind: bb156];
    }

    bb126: {
        StorageDead(_237);
        StorageDead(_235);
        StorageDead(_234);
        StorageDead(_232);
        StorageDead(_228);
        StorageDead(_227);
        StorageLive(_244);
        _244 = ();
        _0 = Result::<(), ProgramError>::Ok(move _244);
        StorageDead(_244);
        _250 = const false;
        StorageDead(_126);
        StorageDead(_77);
        StorageDead(_51);
        StorageDead(_43);
        StorageDead(_34);
        StorageDead(_25);
        StorageDead(_16);
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb140;
    }

    bb127: {
        StorageDead(_237);
        StorageDead(_235);
        StorageDead(_234);
        StorageDead(_232);
        StorageDead(_228);
        StorageDead(_227);
        goto -> bb150;
    }

    bb128: {
        StorageDead(_164);
        StorageDead(_163);
        goto -> bb150;
    }

    bb129: {
        StorageDead(_135);
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_130);
        StorageDead(_127);
        goto -> bb130;
    }

    bb130: {
        _250 = const false;
        StorageDead(_126);
        goto -> bb132;
    }

    bb131: {
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_83);
        StorageDead(_81);
        StorageDead(_78);
        goto -> bb132;
    }

    bb132: {
        StorageDead(_77);
        goto -> bb134;
    }

    bb133: {
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_52);
        goto -> bb134;
    }

    bb134: {
        StorageDead(_51);
        goto -> bb135;
    }

    bb135: {
        StorageDead(_43);
        goto -> bb136;
    }

    bb136: {
        StorageDead(_34);
        goto -> bb137;
    }

    bb137: {
        StorageDead(_25);
        goto -> bb138;
    }

    bb138: {
        StorageDead(_16);
        goto -> bb139;
    }

    bb139: {
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb140;
    }

    bb140: {
        return;
    }

    bb141 (cleanup): {
        drop(_235) -> [return: bb156, unwind terminate(cleanup)];
    }

    bb142 (cleanup): {
        drop(_230) -> [return: bb156, unwind terminate(cleanup)];
    }

    bb143 (cleanup): {
        drop(_133) -> [return: bb146, unwind terminate(cleanup)];
    }

    bb144 (cleanup): {
        drop(_84) -> [return: bb146, unwind terminate(cleanup)];
    }

    bb145 (cleanup): {
        drop(_58) -> [return: bb146, unwind terminate(cleanup)];
    }

    bb146 (cleanup): {
        resume;
    }

    bb147: {
        _268 = discriminant(_165);
        StorageDead(_165);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        _177 = const "Obligation is stale and must be refreshed";
        _176 = &(*_177);
        _175 = solana_program::log::sol_log(move _176) -> [return: bb91, unwind: bb156];
    }

    bb148: {
        _270 = discriminant(_165);
        StorageDead(_165);
        _163 = const ();
        StorageDead(_164);
        StorageDead(_163);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        _183 = &(_51.9: solana_program::pubkey::Pubkey);
        _182 = &_183;
        StorageLive(_184);
        _184 = &((*_34).0: &solana_program::pubkey::Pubkey);
        _181 = <&Pubkey as PartialEq>::ne(move _182, move _184) -> [return: bb93, unwind: bb156];
    }

    bb149: {
        drop(_126) -> [return: bb130, unwind: bb146];
    }

    bb150: {
        switchInt(_250) -> [0: bb130, otherwise: bb149];
    }

    bb151 (cleanup): {
        _294 = discriminant(_228);
        goto -> bb141;
    }

    bb152 (cleanup): {
        drop(_230) -> [return: bb141, unwind terminate(cleanup)];
    }

    bb153 (cleanup): {
        switchInt(_251) -> [0: bb141, otherwise: bb152];
    }

    bb154 (cleanup): {
        _295 = discriminant(_165);
        goto -> bb156;
    }

    bb155 (cleanup): {
        drop(_126) -> [return: bb146, unwind terminate(cleanup)];
    }

    bb156 (cleanup): {
        switchInt(_250) -> [0: bb146, otherwise: bb155];
    }

    bb157 (cleanup): {
        _296 = discriminant(_127);
        goto -> bb143;
    }

    bb158 (cleanup): {
        _297 = discriminant(_78);
        goto -> bb144;
    }

    bb159 (cleanup): {
        _298 = discriminant(_52);
        goto -> bb145;
    }

    bb160 (cleanup): {
        _299 = discriminant(_44);
        goto -> bb146;
    }

    bb161 (cleanup): {
        _300 = discriminant(_35);
        goto -> bb146;
    }

    bb162 (cleanup): {
        _301 = discriminant(_26);
        goto -> bb146;
    }

    bb163 (cleanup): {
        _302 = discriminant(_17);
        goto -> bb146;
    }

    bb164 (cleanup): {
        _303 = discriminant(_8);
        goto -> bb146;
    }
}
