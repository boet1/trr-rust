// MIR for `_redeem_reserve_collateral` after PreCodegen

fn _redeem_reserve_collateral(_1: &Pubkey, _2: u64, _3: &AccountInfo<'_>, _4: &AccountInfo<'_>, _5: &AccountInfo<'_>, _6: &AccountInfo<'_>, _7: &AccountInfo<'_>, _8: &AccountInfo<'_>, _9: &AccountInfo<'_>, _10: &AccountInfo<'_>, _11: &Clock, _12: &AccountInfo<'_>, _13: bool) -> Result<u64, ProgramError> {
    debug program_id => _1;
    debug collateral_amount => _2;
    debug source_collateral_info => _3;
    debug destination_liquidity_info => _4;
    debug reserve_info => _5;
    debug reserve_collateral_mint_info => _6;
    debug reserve_liquidity_supply_info => _7;
    debug lending_market_info => _8;
    debug lending_market_authority_info => _9;
    debug user_transfer_authority_info => _10;
    debug clock => _11;
    debug token_program_id => _12;
    debug check_rate_limits => _13;
    let mut _0: std::result::Result<u64, solana_program::program_error::ProgramError>;
    let mut _14: solend_sdk::state::LendingMarket;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::state::LendingMarket>;
    let mut _16: std::result::Result<solend_sdk::state::LendingMarket, solana_program::program_error::ProgramError>;
    let mut _17: &[u8];
    let _18: &&mut [u8];
    let mut _19: &std::cell::Ref<'_, &mut [u8]>;
    let _20: &std::cell::Ref<'_, &mut [u8]>;
    let _21: std::cell::Ref<'_, &mut [u8]>;
    let mut _22: &std::cell::RefCell<&mut [u8]>;
    let _23: &std::cell::RefCell<&mut [u8]>;
    let mut _24: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _25: isize;
    let _26: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _27: !;
    let mut _28: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _29: solend_sdk::state::LendingMarket;
    let _30: ();
    let mut _31: bool;
    let mut _32: &&solana_program::pubkey::Pubkey;
    let mut _33: &&solana_program::pubkey::Pubkey;
    let mut _34: !;
    let _35: ();
    let mut _36: &str;
    let _37: &str;
    let mut _38: solana_program::program_error::ProgramError;
    let mut _39: solend_sdk::error::LendingError;
    let _40: ();
    let mut _41: bool;
    let mut _42: &&solana_program::pubkey::Pubkey;
    let _43: &solana_program::pubkey::Pubkey;
    let mut _44: &&solana_program::pubkey::Pubkey;
    let mut _45: !;
    let _46: ();
    let mut _47: &str;
    let _48: &str;
    let mut _49: solana_program::program_error::ProgramError;
    let mut _50: solend_sdk::error::LendingError;
    let mut _52: solend_sdk::state::Reserve;
    let mut _53: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::state::Reserve>;
    let mut _54: std::result::Result<solend_sdk::state::Reserve, solana_program::program_error::ProgramError>;
    let mut _55: &[u8];
    let _56: &&mut [u8];
    let mut _57: &std::cell::Ref<'_, &mut [u8]>;
    let _58: &std::cell::Ref<'_, &mut [u8]>;
    let _59: std::cell::Ref<'_, &mut [u8]>;
    let mut _60: &std::cell::RefCell<&mut [u8]>;
    let _61: &std::cell::RefCell<&mut [u8]>;
    let mut _62: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _63: isize;
    let mut _65: !;
    let mut _66: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _68: ();
    let mut _69: bool;
    let mut _70: &&solana_program::pubkey::Pubkey;
    let mut _71: &&solana_program::pubkey::Pubkey;
    let mut _72: !;
    let _73: ();
    let mut _74: &str;
    let _75: &str;
    let mut _76: solana_program::program_error::ProgramError;
    let mut _77: solend_sdk::error::LendingError;
    let _78: ();
    let mut _79: bool;
    let mut _80: &&solana_program::pubkey::Pubkey;
    let _81: &solana_program::pubkey::Pubkey;
    let mut _82: &&solana_program::pubkey::Pubkey;
    let mut _83: !;
    let _84: ();
    let mut _85: &str;
    let _86: &str;
    let mut _87: solana_program::program_error::ProgramError;
    let mut _88: solend_sdk::error::LendingError;
    let _89: ();
    let mut _90: bool;
    let mut _91: &&solana_program::pubkey::Pubkey;
    let _92: &solana_program::pubkey::Pubkey;
    let mut _93: &&solana_program::pubkey::Pubkey;
    let mut _94: !;
    let _95: ();
    let mut _96: &str;
    let _97: &str;
    let mut _98: solana_program::program_error::ProgramError;
    let mut _99: solend_sdk::error::LendingError;
    let _100: ();
    let mut _101: bool;
    let mut _102: &&solana_program::pubkey::Pubkey;
    let _103: &solana_program::pubkey::Pubkey;
    let mut _104: &&solana_program::pubkey::Pubkey;
    let mut _105: !;
    let _106: ();
    let mut _107: &str;
    let _108: &str;
    let mut _109: solana_program::program_error::ProgramError;
    let mut _110: solend_sdk::error::LendingError;
    let _111: ();
    let mut _112: bool;
    let mut _113: &&solana_program::pubkey::Pubkey;
    let _114: &solana_program::pubkey::Pubkey;
    let mut _115: &&solana_program::pubkey::Pubkey;
    let mut _116: !;
    let _117: ();
    let mut _118: &str;
    let _119: &str;
    let mut _120: solana_program::program_error::ProgramError;
    let mut _121: solend_sdk::error::LendingError;
    let _122: ();
    let mut _123: bool;
    let mut _124: &&solana_program::pubkey::Pubkey;
    let _125: &solana_program::pubkey::Pubkey;
    let mut _126: &&solana_program::pubkey::Pubkey;
    let mut _127: !;
    let _128: ();
    let mut _129: &str;
    let _130: &str;
    let mut _131: solana_program::program_error::ProgramError;
    let mut _132: solend_sdk::error::LendingError;
    let _133: ();
    let mut _134: bool;
    let mut _135: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, bool>;
    let mut _136: std::result::Result<bool, solana_program::program_error::ProgramError>;
    let mut _137: &solend_sdk::state::LastUpdate;
    let mut _138: u64;
    let mut _139: isize;
    let mut _141: !;
    let mut _142: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _144: !;
    let _145: ();
    let mut _146: &str;
    let _147: &str;
    let mut _148: solana_program::program_error::ProgramError;
    let mut _149: solend_sdk::error::LendingError;
    let _151: [&[u8]; 2];
    let mut _152: &[u8];
    let mut _153: &solana_program::pubkey::Pubkey;
    let mut _154: &[u8];
    let mut _155: &[u8; 1];
    let _156: &[u8; 1];
    let _157: [u8; 1];
    let mut _158: u8;
    let mut _160: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::pubkey::PubkeyError>, solana_program::pubkey::Pubkey>;
    let mut _161: std::result::Result<solana_program::pubkey::Pubkey, solana_program::pubkey::PubkeyError>;
    let mut _162: &[&[u8]];
    let mut _163: &[&[u8]; 2];
    let mut _164: &solana_program::pubkey::Pubkey;
    let mut _165: isize;
    let mut _167: !;
    let mut _168: std::result::Result<std::convert::Infallible, solana_program::pubkey::PubkeyError>;
    let _170: ();
    let mut _171: bool;
    let mut _172: &&solana_program::pubkey::Pubkey;
    let _173: &solana_program::pubkey::Pubkey;
    let mut _174: &&solana_program::pubkey::Pubkey;
    let mut _175: !;
    let _176: ();
    let mut _177: &str;
    let _178: &str;
    let mut _179: solana_program::program_error::ProgramError;
    let mut _180: solend_sdk::error::LendingError;
    let mut _182: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, u64>;
    let mut _183: std::result::Result<u64, solana_program::program_error::ProgramError>;
    let mut _184: &mut solend_sdk::state::Reserve;
    let mut _185: u64;
    let mut _186: isize;
    let mut _188: !;
    let mut _189: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _191: ();
    let mut _192: bool;
    let _193: ();
    let mut _194: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _195: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _196: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _197: &mut solend_sdk::state::RateLimiter;
    let mut _198: u64;
    let mut _199: solend_sdk::math::Decimal;
    let mut _200: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, solend_sdk::math::Decimal>;
    let mut _201: std::result::Result<solend_sdk::math::Decimal, solana_program::program_error::ProgramError>;
    let mut _202: &solend_sdk::state::Reserve;
    let mut _203: solend_sdk::math::Decimal;
    let mut _204: u64;
    let mut _205: isize;
    let mut _207: !;
    let mut _208: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _210: {closure@token-lending\program\src\processor.rs:889:22: 889:27};
    let mut _211: isize;
    let mut _213: !;
    let mut _214: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _216: ();
    let mut _217: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _218: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _219: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _220: &mut solend_sdk::state::RateLimiter;
    let mut _221: u64;
    let mut _222: solend_sdk::math::Decimal;
    let mut _223: u64;
    let mut _224: {closure@token-lending\program\src\processor.rs:897:22: 897:27};
    let mut _225: isize;
    let mut _227: !;
    let mut _228: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _230: ();
    let mut _231: &mut solend_sdk::state::LastUpdate;
    let _232: ();
    let mut _233: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _234: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _235: solend_sdk::state::Reserve;
    let mut _236: &mut [u8];
    let mut _237: &mut &mut [u8];
    let mut _238: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _239: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _240: std::cell::RefMut<'_, &mut [u8]>;
    let mut _241: &std::cell::RefCell<&mut [u8]>;
    let _242: &std::cell::RefCell<&mut [u8]>;
    let mut _243: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _244: isize;
    let mut _246: !;
    let mut _247: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _249: ();
    let mut _250: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _251: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _252: solend_sdk::state::LendingMarket;
    let mut _253: &mut [u8];
    let mut _254: &mut &mut [u8];
    let mut _255: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _256: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _257: std::cell::RefMut<'_, &mut [u8]>;
    let mut _258: &std::cell::RefCell<&mut [u8]>;
    let _259: &std::cell::RefCell<&mut [u8]>;
    let mut _260: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let mut _261: isize;
    let mut _263: !;
    let mut _264: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _266: ();
    let mut _267: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _268: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _269: processor::TokenBurnParams<'_, '_>;
    let mut _270: solana_program::account_info::AccountInfo<'_>;
    let mut _271: &solana_program::account_info::AccountInfo<'_>;
    let mut _272: solana_program::account_info::AccountInfo<'_>;
    let mut _273: &solana_program::account_info::AccountInfo<'_>;
    let mut _274: u64;
    let mut _275: solana_program::account_info::AccountInfo<'_>;
    let mut _276: &solana_program::account_info::AccountInfo<'_>;
    let mut _277: &[&[u8]];
    let mut _278: &[&[u8]; 0];
    let _279: &[&[u8]; 0];
    let _280: [&[u8]; 0];
    let mut _281: solana_program::account_info::AccountInfo<'_>;
    let mut _282: &solana_program::account_info::AccountInfo<'_>;
    let mut _283: isize;
    let mut _285: !;
    let mut _286: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _288: ();
    let mut _289: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _290: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _291: processor::TokenTransferParams<'_, '_>;
    let mut _292: solana_program::account_info::AccountInfo<'_>;
    let mut _293: &solana_program::account_info::AccountInfo<'_>;
    let mut _294: solana_program::account_info::AccountInfo<'_>;
    let mut _295: &solana_program::account_info::AccountInfo<'_>;
    let mut _296: u64;
    let mut _297: solana_program::account_info::AccountInfo<'_>;
    let mut _298: &solana_program::account_info::AccountInfo<'_>;
    let mut _299: &[&[u8]];
    let mut _300: &[&[u8]; 2];
    let mut _301: solana_program::account_info::AccountInfo<'_>;
    let mut _302: &solana_program::account_info::AccountInfo<'_>;
    let mut _303: isize;
    let mut _305: !;
    let mut _306: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _308: u64;
    let mut _310: &mut [u8];
    let mut _311: &mut [u8];
    let mut _312: &solana_program::pubkey::Pubkey;
    let mut _313: &mut [u8];
    let mut _314: &mut [u8];
    let mut _315: bool;
    let mut _316: bool;
    let mut _317: bool;
    let mut _318: isize;
    let mut _319: isize;
    let mut _320: isize;
    let mut _321: isize;
    let mut _322: isize;
    let mut _323: isize;
    let mut _324: isize;
    let mut _325: isize;
    let mut _326: isize;
    let mut _327: isize;
    let mut _328: isize;
    let mut _329: isize;
    let mut _330: isize;
    let mut _331: isize;
    let mut _332: isize;
    let mut _333: isize;
    let mut _334: isize;
    let mut _335: isize;
    let mut _336: isize;
    let mut _337: isize;
    let mut _338: isize;
    let mut _339: isize;
    let mut _340: isize;
    let mut _341: isize;
    let mut _342: isize;
    let mut _343: isize;
    let mut _344: isize;
    let mut _345: isize;
    let mut _346: isize;
    let mut _347: isize;
    let mut _348: isize;
    let mut _349: isize;
    let mut _350: isize;
    let mut _351: isize;
    let mut _352: isize;
    let mut _353: isize;
    let mut _354: isize;
    let mut _355: isize;
    let mut _356: isize;
    let mut _357: isize;
    let mut _358: isize;
    let mut _359: isize;
    let mut _360: isize;
    let mut _361: isize;
    let mut _362: isize;
    let mut _363: isize;
    let mut _364: isize;
    let mut _365: isize;
    let mut _366: isize;
    let mut _367: isize;
    let mut _368: isize;
    let mut _369: isize;
    let mut _370: isize;
    let mut _371: isize;
    let mut _372: isize;
    let mut _373: isize;
    let mut _374: isize;
    let mut _375: *const solend_sdk::state::Reserve;
    let mut _376: *const solend_sdk::state::Reserve;
    let mut _377: *const solend_sdk::state::Reserve;
    let mut _378: *const solend_sdk::state::Reserve;
    let mut _379: *const solend_sdk::state::Reserve;
    let mut _380: *const solend_sdk::state::Reserve;
    let mut _381: *const solend_sdk::state::Reserve;
    let mut _382: *const solend_sdk::state::Reserve;
    let mut _383: *const solend_sdk::state::Reserve;
    let mut _384: *const solend_sdk::state::Reserve;
    let mut _385: *const solend_sdk::state::Reserve;
    scope 1 {
        debug lending_market => _14;
        let mut _51: std::boxed::Box<solend_sdk::state::Reserve>;
        let _64: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _67: solend_sdk::state::Reserve;
        scope 6 {
            debug reserve => _51;
            let _140: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
            let _143: bool;
            let _150: &[&[u8]; 2];
            scope 11 {
                debug residual => _140;
                scope 12 {
                }
            }
            scope 13 {
                debug val => _143;
                scope 14 {
                }
            }
            scope 15 {
                debug authority_signer_seeds => _150;
                let _159: solana_program::pubkey::Pubkey;
                let _166: std::result::Result<std::convert::Infallible, solana_program::pubkey::PubkeyError>;
                let _169: solana_program::pubkey::Pubkey;
                scope 16 {
                    debug lending_market_authority_pubkey => _159;
                    let _181: u64;
                    let _187: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                    let _190: u64;
                    scope 21 {
                        debug liquidity_amount => _181;
                        let _206: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                        let _209: solend_sdk::math::Decimal;
                        let _212: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                        let _215: ();
                        let _226: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                        let _229: ();
                        let _245: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                        let _248: ();
                        let _262: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                        let _265: ();
                        let _284: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                        let _287: ();
                        let _304: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                        let _307: ();
                        let mut _309: &[&[u8]; 0];
                        let mut _386: *const ();
                        let mut _387: usize;
                        let mut _388: usize;
                        let mut _389: usize;
                        let mut _390: usize;
                        let mut _391: bool;
                        scope 26 {
                            debug residual => _206;
                            scope 27 {
                            }
                        }
                        scope 28 {
                            debug val => _209;
                            scope 29 {
                            }
                        }
                        scope 30 {
                            debug residual => _212;
                            scope 31 {
                            }
                        }
                        scope 32 {
                            debug val => _215;
                            scope 33 {
                            }
                        }
                        scope 34 {
                            debug residual => _226;
                            scope 35 {
                            }
                        }
                        scope 36 {
                            debug val => _229;
                            scope 37 {
                            }
                        }
                        scope 38 {
                            debug residual => _245;
                            scope 39 {
                            }
                        }
                        scope 40 {
                            debug val => _248;
                            scope 41 {
                            }
                        }
                        scope 42 {
                            debug residual => _262;
                            scope 43 {
                            }
                        }
                        scope 44 {
                            debug val => _265;
                            scope 45 {
                            }
                        }
                        scope 46 {
                            debug residual => _284;
                            scope 47 {
                            }
                        }
                        scope 48 {
                            debug val => _287;
                            scope 49 {
                            }
                        }
                        scope 50 {
                            debug residual => _304;
                            scope 51 {
                            }
                        }
                        scope 52 {
                            debug val => _307;
                            scope 53 {
                            }
                        }
                    }
                    scope 22 {
                        debug residual => _187;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug val => _190;
                        scope 25 {
                        }
                    }
                }
                scope 17 {
                    debug residual => _166;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _169;
                    scope 20 {
                    }
                }
            }
        }
        scope 7 {
            debug residual => _64;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _67;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _26;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _29;
        scope 5 {
        }
    }

    bb0: {
        _317 = const false;
        _316 = const false;
        _315 = const false;
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &((*_8).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _23 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _24) -> [return: bb1, unwind continue];
    }

    bb1: {
        _22 = &(*_23);
        StorageDead(_24);
        _21 = RefCell::<&mut [u8]>::borrow(move _22) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_22);
        _20 = &_21;
        _19 = &(*_20);
        _18 = <Ref<'_, &mut [u8]> as Deref>::deref(move _19) -> [return: bb3, unwind: bb167];
    }

    bb3: {
        _310 = deref_copy (*_18);
        _17 = &(*_310);
        StorageDead(_19);
        _16 = <LendingMarket as Pack>::unpack(move _17) -> [return: bb4, unwind: bb167];
    }

    bb4: {
        StorageDead(_17);
        _15 = <Result<LendingMarket, ProgramError> as Try>::branch(move _16) -> [return: bb5, unwind: bb167];
    }

    bb5: {
        StorageDead(_16);
        _25 = discriminant(_15);
        switchInt(move _25) -> [0: bb6, 1: bb8, otherwise: bb7];
    }

    bb6: {
        StorageLive(_29);
        _29 = move ((_15 as Continue).0: solend_sdk::state::LendingMarket);
        _14 = move _29;
        StorageDead(_29);
        _318 = discriminant(_15);
        drop(_21) -> [return: bb10, unwind: bb168];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        StorageLive(_26);
        _26 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_28);
        _28 = move _26;
        _0 = <Result<u64, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _28) -> [return: bb9, unwind: bb181];
    }

    bb9: {
        StorageDead(_28);
        StorageDead(_26);
        _362 = discriminant(_15);
        drop(_21) -> [return: bb154, unwind: bb168];
    }

    bb10: {
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_15);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = &((*_8).3: &solana_program::pubkey::Pubkey);
        StorageLive(_33);
        _33 = &_1;
        _31 = <&Pubkey as PartialEq>::ne(move _32, move _33) -> [return: bb11, unwind continue];
    }

    bb11: {
        switchInt(move _31) -> [0: bb15, otherwise: bb12];
    }

    bb12: {
        StorageDead(_33);
        StorageDead(_32);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = const "Lending market provided is not owned by the lending program";
        _36 = &(*_37);
        _35 = solana_program::log::sol_log(move _36) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_36);
        StorageDead(_37);
        StorageDead(_35);
        StorageLive(_38);
        StorageLive(_39);
        _39 = solend_sdk::error::LendingError::InvalidAccountOwner;
        _38 = <LendingError as Into<ProgramError>>::into(move _39) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_39);
        _0 = Result::<u64, ProgramError>::Err(move _38);
        StorageDead(_38);
        StorageDead(_31);
        StorageDead(_30);
        goto -> bb155;
    }

    bb15: {
        StorageDead(_33);
        StorageDead(_32);
        _30 = const ();
        StorageDead(_31);
        StorageDead(_30);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = &(_14.4: solana_program::pubkey::Pubkey);
        _42 = &_43;
        StorageLive(_44);
        _44 = &((*_12).0: &solana_program::pubkey::Pubkey);
        _41 = <&Pubkey as PartialEq>::ne(move _42, move _44) -> [return: bb16, unwind continue];
    }

    bb16: {
        switchInt(move _41) -> [0: bb20, otherwise: bb17];
    }

    bb17: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = const "Lending market token program does not match the token program provided";
        _47 = &(*_48);
        _46 = solana_program::log::sol_log(move _47) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_47);
        StorageDead(_48);
        StorageDead(_46);
        StorageLive(_49);
        StorageLive(_50);
        _50 = InvalidTokenProgram;
        _49 = <LendingError as Into<ProgramError>>::into(move _50) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_50);
        _0 = Result::<u64, ProgramError>::Err(move _49);
        StorageDead(_49);
        StorageDead(_41);
        StorageDead(_40);
        goto -> bb155;
    }

    bb20: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        _40 = const ();
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = &((*_5).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _61 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _62) -> [return: bb21, unwind continue];
    }

    bb21: {
        _60 = &(*_61);
        StorageDead(_62);
        _59 = RefCell::<&mut [u8]>::borrow(move _60) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_60);
        _58 = &_59;
        _57 = &(*_58);
        _56 = <Ref<'_, &mut [u8]> as Deref>::deref(move _57) -> [return: bb23, unwind: bb166];
    }

    bb23: {
        _311 = deref_copy (*_56);
        _55 = &(*_311);
        StorageDead(_57);
        _54 = <Reserve as Pack>::unpack(move _55) -> [return: bb24, unwind: bb166];
    }

    bb24: {
        StorageDead(_55);
        _53 = <Result<Reserve, ProgramError> as Try>::branch(move _54) -> [return: bb25, unwind: bb166];
    }

    bb25: {
        _316 = const true;
        _317 = const true;
        StorageDead(_54);
        _63 = discriminant(_53);
        switchInt(move _63) -> [0: bb26, 1: bb27, otherwise: bb7];
    }

    bb26: {
        StorageLive(_67);
        _67 = move ((_53 as Continue).0: solend_sdk::state::Reserve);
        _52 = move _67;
        StorageDead(_67);
        _51 = Box::<Reserve>::new(move _52) -> [return: bb29, unwind: bb180];
    }

    bb27: {
        StorageLive(_64);
        _64 = move ((_53 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_66);
        _66 = move _64;
        _0 = <Result<u64, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _66) -> [return: bb28, unwind: bb180];
    }

    bb28: {
        StorageDead(_66);
        StorageDead(_64);
        StorageDead(_52);
        _360 = discriminant(_53);
        drop(_59) -> [return: bb152, unwind: bb168];
    }

    bb29: {
        StorageDead(_52);
        _320 = discriminant(_53);
        drop(_59) -> [return: bb30, unwind: bb165];
    }

    bb30: {
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_56);
        _316 = const false;
        _317 = const false;
        StorageDead(_53);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &((*_5).3: &solana_program::pubkey::Pubkey);
        StorageLive(_71);
        _71 = &_1;
        _69 = <&Pubkey as PartialEq>::ne(move _70, move _71) -> [return: bb31, unwind: bb165];
    }

    bb31: {
        switchInt(move _69) -> [0: bb35, otherwise: bb32];
    }

    bb32: {
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = const "Reserve provided is not owned by the lending program";
        _74 = &(*_75);
        _73 = solana_program::log::sol_log(move _74) -> [return: bb33, unwind: bb165];
    }

    bb33: {
        StorageDead(_74);
        StorageDead(_75);
        StorageDead(_73);
        StorageLive(_76);
        StorageLive(_77);
        _77 = solend_sdk::error::LendingError::InvalidAccountOwner;
        _76 = <LendingError as Into<ProgramError>>::into(move _77) -> [return: bb34, unwind: bb165];
    }

    bb34: {
        StorageDead(_77);
        _0 = Result::<u64, ProgramError>::Err(move _76);
        StorageDead(_76);
        StorageDead(_69);
        StorageDead(_68);
        goto -> bb151;
    }

    bb35: {
        StorageDead(_71);
        StorageDead(_70);
        _68 = const ();
        StorageDead(_69);
        StorageDead(_68);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        _375 = (((_51.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _81 = &((*_375).2: solana_program::pubkey::Pubkey);
        _80 = &_81;
        StorageLive(_82);
        _82 = &((*_8).0: &solana_program::pubkey::Pubkey);
        _79 = <&Pubkey as PartialEq>::ne(move _80, move _82) -> [return: bb36, unwind: bb165];
    }

    bb36: {
        switchInt(move _79) -> [0: bb40, otherwise: bb37];
    }

    bb37: {
        StorageDead(_82);
        StorageDead(_81);
        StorageDead(_80);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = const "Reserve lending market does not match the lending market provided";
        _85 = &(*_86);
        _84 = solana_program::log::sol_log(move _85) -> [return: bb38, unwind: bb165];
    }

    bb38: {
        StorageDead(_85);
        StorageDead(_86);
        StorageDead(_84);
        StorageLive(_87);
        StorageLive(_88);
        _88 = InvalidAccountInput;
        _87 = <LendingError as Into<ProgramError>>::into(move _88) -> [return: bb39, unwind: bb165];
    }

    bb39: {
        StorageDead(_88);
        _0 = Result::<u64, ProgramError>::Err(move _87);
        StorageDead(_87);
        StorageDead(_79);
        StorageDead(_78);
        goto -> bb151;
    }

    bb40: {
        StorageDead(_82);
        StorageDead(_81);
        StorageDead(_80);
        _78 = const ();
        StorageDead(_79);
        StorageDead(_78);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _376 = (((_51.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _92 = &(((*_376).4: solend_sdk::state::ReserveCollateral).0: solana_program::pubkey::Pubkey);
        _91 = &_92;
        StorageLive(_93);
        _93 = &((*_6).0: &solana_program::pubkey::Pubkey);
        _90 = <&Pubkey as PartialEq>::ne(move _91, move _93) -> [return: bb41, unwind: bb165];
    }

    bb41: {
        switchInt(move _90) -> [0: bb45, otherwise: bb42];
    }

    bb42: {
        StorageDead(_93);
        StorageDead(_92);
        StorageDead(_91);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = const "Reserve collateral mint does not match the reserve collateral mint provided";
        _96 = &(*_97);
        _95 = solana_program::log::sol_log(move _96) -> [return: bb43, unwind: bb165];
    }

    bb43: {
        StorageDead(_96);
        StorageDead(_97);
        StorageDead(_95);
        StorageLive(_98);
        StorageLive(_99);
        _99 = InvalidAccountInput;
        _98 = <LendingError as Into<ProgramError>>::into(move _99) -> [return: bb44, unwind: bb165];
    }

    bb44: {
        StorageDead(_99);
        _0 = Result::<u64, ProgramError>::Err(move _98);
        StorageDead(_98);
        StorageDead(_90);
        StorageDead(_89);
        goto -> bb151;
    }

    bb45: {
        StorageDead(_93);
        StorageDead(_92);
        StorageDead(_91);
        _89 = const ();
        StorageDead(_90);
        StorageDead(_89);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        _377 = (((_51.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _103 = &(((*_377).4: solend_sdk::state::ReserveCollateral).2: solana_program::pubkey::Pubkey);
        _102 = &_103;
        StorageLive(_104);
        _104 = &((*_3).0: &solana_program::pubkey::Pubkey);
        _101 = <&Pubkey as PartialEq>::eq(move _102, move _104) -> [return: bb46, unwind: bb165];
    }

    bb46: {
        switchInt(move _101) -> [0: bb50, otherwise: bb47];
    }

    bb47: {
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_102);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        _108 = const "Reserve collateral supply cannot be used as the source collateral provided";
        _107 = &(*_108);
        _106 = solana_program::log::sol_log(move _107) -> [return: bb48, unwind: bb165];
    }

    bb48: {
        StorageDead(_107);
        StorageDead(_108);
        StorageDead(_106);
        StorageLive(_109);
        StorageLive(_110);
        _110 = InvalidAccountInput;
        _109 = <LendingError as Into<ProgramError>>::into(move _110) -> [return: bb49, unwind: bb165];
    }

    bb49: {
        StorageDead(_110);
        _0 = Result::<u64, ProgramError>::Err(move _109);
        StorageDead(_109);
        StorageDead(_101);
        StorageDead(_100);
        goto -> bb151;
    }

    bb50: {
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_102);
        _100 = const ();
        StorageDead(_101);
        StorageDead(_100);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        _378 = (((_51.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _114 = &(((*_378).3: solend_sdk::state::ReserveLiquidity).2: solana_program::pubkey::Pubkey);
        _113 = &_114;
        StorageLive(_115);
        _115 = &((*_7).0: &solana_program::pubkey::Pubkey);
        _112 = <&Pubkey as PartialEq>::ne(move _113, move _115) -> [return: bb51, unwind: bb165];
    }

    bb51: {
        switchInt(move _112) -> [0: bb55, otherwise: bb52];
    }

    bb52: {
        StorageDead(_115);
        StorageDead(_114);
        StorageDead(_113);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        _119 = const "Reserve liquidity supply does not match the reserve liquidity supply provided";
        _118 = &(*_119);
        _117 = solana_program::log::sol_log(move _118) -> [return: bb53, unwind: bb165];
    }

    bb53: {
        StorageDead(_118);
        StorageDead(_119);
        StorageDead(_117);
        StorageLive(_120);
        StorageLive(_121);
        _121 = InvalidAccountInput;
        _120 = <LendingError as Into<ProgramError>>::into(move _121) -> [return: bb54, unwind: bb165];
    }

    bb54: {
        StorageDead(_121);
        _0 = Result::<u64, ProgramError>::Err(move _120);
        StorageDead(_120);
        StorageDead(_112);
        StorageDead(_111);
        goto -> bb151;
    }

    bb55: {
        StorageDead(_115);
        StorageDead(_114);
        StorageDead(_113);
        _111 = const ();
        StorageDead(_112);
        StorageDead(_111);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _379 = (((_51.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _125 = &(((*_379).3: solend_sdk::state::ReserveLiquidity).2: solana_program::pubkey::Pubkey);
        _124 = &_125;
        StorageLive(_126);
        _126 = &((*_4).0: &solana_program::pubkey::Pubkey);
        _123 = <&Pubkey as PartialEq>::eq(move _124, move _126) -> [return: bb56, unwind: bb165];
    }

    bb56: {
        switchInt(move _123) -> [0: bb60, otherwise: bb57];
    }

    bb57: {
        StorageDead(_126);
        StorageDead(_125);
        StorageDead(_124);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _130 = const "Reserve liquidity supply cannot be used as the destination liquidity provided";
        _129 = &(*_130);
        _128 = solana_program::log::sol_log(move _129) -> [return: bb58, unwind: bb165];
    }

    bb58: {
        StorageDead(_129);
        StorageDead(_130);
        StorageDead(_128);
        StorageLive(_131);
        StorageLive(_132);
        _132 = InvalidAccountInput;
        _131 = <LendingError as Into<ProgramError>>::into(move _132) -> [return: bb59, unwind: bb165];
    }

    bb59: {
        StorageDead(_132);
        _0 = Result::<u64, ProgramError>::Err(move _131);
        StorageDead(_131);
        StorageDead(_123);
        StorageDead(_122);
        goto -> bb151;
    }

    bb60: {
        StorageDead(_126);
        StorageDead(_125);
        StorageDead(_124);
        _122 = const ();
        StorageDead(_123);
        StorageDead(_122);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        _380 = (((_51.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _137 = &((*_380).1: solend_sdk::state::LastUpdate);
        StorageLive(_138);
        _138 = ((*_11).0: u64);
        _136 = LastUpdate::is_stale(move _137, move _138) -> [return: bb61, unwind: bb165];
    }

    bb61: {
        StorageDead(_138);
        StorageDead(_137);
        _135 = <Result<bool, ProgramError> as Try>::branch(move _136) -> [return: bb62, unwind: bb165];
    }

    bb62: {
        StorageDead(_136);
        _139 = discriminant(_135);
        switchInt(move _139) -> [0: bb63, 1: bb64, otherwise: bb7];
    }

    bb63: {
        StorageLive(_143);
        _143 = ((_135 as Continue).0: bool);
        _134 = _143;
        StorageDead(_143);
        switchInt(move _134) -> [0: bb170, otherwise: bb169];
    }

    bb64: {
        StorageLive(_140);
        _140 = move ((_135 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_142);
        _142 = move _140;
        _0 = <Result<u64, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _142) -> [return: bb65, unwind: bb179];
    }

    bb65: {
        StorageDead(_142);
        StorageDead(_140);
        _358 = discriminant(_135);
        StorageDead(_135);
        goto -> bb150;
    }

    bb66: {
        StorageDead(_146);
        StorageDead(_147);
        StorageDead(_145);
        StorageLive(_148);
        StorageLive(_149);
        _149 = ReserveStale;
        _148 = <LendingError as Into<ProgramError>>::into(move _149) -> [return: bb67, unwind: bb165];
    }

    bb67: {
        StorageDead(_149);
        _0 = Result::<u64, ProgramError>::Err(move _148);
        StorageDead(_148);
        goto -> bb150;
    }

    bb68: {
        StorageDead(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        _158 = (_14.1: u8);
        _157 = [move _158];
        StorageDead(_158);
        _156 = &_157;
        _155 = &(*_156);
        _154 = move _155 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_155);
        _151 = [move _152, move _154];
        StorageDead(_154);
        StorageDead(_152);
        _150 = &_151;
        StorageDead(_156);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        _163 = &(*_150);
        _162 = move _163 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_163);
        StorageLive(_164);
        _164 = &(*_1);
        _161 = Pubkey::create_program_address(move _162, move _164) -> [return: bb69, unwind: bb165];
    }

    bb69: {
        StorageDead(_164);
        StorageDead(_162);
        _160 = <Result<Pubkey, PubkeyError> as Try>::branch(move _161) -> [return: bb70, unwind: bb165];
    }

    bb70: {
        StorageDead(_161);
        _165 = discriminant(_160);
        switchInt(move _165) -> [0: bb71, 1: bb72, otherwise: bb7];
    }

    bb71: {
        StorageLive(_169);
        _169 = ((_160 as Continue).0: solana_program::pubkey::Pubkey);
        _159 = _169;
        StorageDead(_169);
        StorageDead(_160);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        _173 = &_159;
        _172 = &_173;
        StorageLive(_174);
        _174 = &((*_9).0: &solana_program::pubkey::Pubkey);
        _171 = <&Pubkey as PartialEq>::ne(move _172, move _174) -> [return: bb74, unwind: bb165];
    }

    bb72: {
        StorageLive(_166);
        _166 = move ((_160 as Break).0: std::result::Result<std::convert::Infallible, solana_program::pubkey::PubkeyError>);
        StorageLive(_168);
        _168 = move _166;
        _0 = <Result<u64, ProgramError> as FromResidual<Result<Infallible, PubkeyError>>>::from_residual(move _168) -> [return: bb73, unwind: bb165];
    }

    bb73: {
        StorageDead(_168);
        StorageDead(_166);
        StorageDead(_160);
        goto -> bb149;
    }

    bb74: {
        switchInt(move _171) -> [0: bb78, otherwise: bb75];
    }

    bb75: {
        StorageDead(_174);
        StorageDead(_173);
        StorageDead(_172);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        _178 = const "Derived lending market authority does not match the lending market authority provided";
        _177 = &(*_178);
        _176 = solana_program::log::sol_log(move _177) -> [return: bb76, unwind: bb165];
    }

    bb76: {
        StorageDead(_177);
        StorageDead(_178);
        StorageDead(_176);
        StorageLive(_179);
        StorageLive(_180);
        _180 = InvalidMarketAuthority;
        _179 = <LendingError as Into<ProgramError>>::into(move _180) -> [return: bb77, unwind: bb165];
    }

    bb77: {
        StorageDead(_180);
        _0 = Result::<u64, ProgramError>::Err(move _179);
        StorageDead(_179);
        StorageDead(_171);
        StorageDead(_170);
        goto -> bb149;
    }

    bb78: {
        StorageDead(_174);
        StorageDead(_173);
        StorageDead(_172);
        _170 = const ();
        StorageDead(_171);
        StorageDead(_170);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        _381 = (((_51.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _184 = &mut (*_381);
        StorageLive(_185);
        _185 = _2;
        _183 = Reserve::redeem_collateral(move _184, move _185) -> [return: bb79, unwind: bb165];
    }

    bb79: {
        StorageDead(_185);
        StorageDead(_184);
        _182 = <Result<u64, ProgramError> as Try>::branch(move _183) -> [return: bb80, unwind: bb165];
    }

    bb80: {
        StorageDead(_183);
        _186 = discriminant(_182);
        switchInt(move _186) -> [0: bb81, 1: bb82, otherwise: bb7];
    }

    bb81: {
        StorageLive(_190);
        _190 = ((_182 as Continue).0: u64);
        _181 = _190;
        StorageDead(_190);
        _326 = discriminant(_182);
        StorageDead(_182);
        StorageLive(_191);
        StorageLive(_192);
        _192 = _13;
        switchInt(move _192) -> [0: bb104, otherwise: bb84];
    }

    bb82: {
        StorageLive(_187);
        _187 = move ((_182 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_189);
        _189 = move _187;
        _0 = <Result<u64, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _189) -> [return: bb83, unwind: bb178];
    }

    bb83: {
        StorageDead(_189);
        StorageDead(_187);
        _356 = discriminant(_182);
        StorageDead(_182);
        goto -> bb148;
    }

    bb84: {
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        _197 = &mut (_14.7: solend_sdk::state::RateLimiter);
        StorageLive(_198);
        _198 = ((*_11).0: u64);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        _382 = (((_51.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _202 = &(*_382);
        StorageLive(_203);
        StorageLive(_204);
        _204 = _181;
        _203 = <Decimal as From<u64>>::from(move _204) -> [return: bb85, unwind: bb165];
    }

    bb85: {
        StorageDead(_204);
        _201 = Reserve::market_value_upper_bound(move _202, move _203) -> [return: bb86, unwind: bb165];
    }

    bb86: {
        StorageDead(_203);
        StorageDead(_202);
        _200 = <Result<Decimal, ProgramError> as Try>::branch(move _201) -> [return: bb87, unwind: bb165];
    }

    bb87: {
        _315 = const true;
        StorageDead(_201);
        _205 = discriminant(_200);
        switchInt(move _205) -> [0: bb88, 1: bb89, otherwise: bb7];
    }

    bb88: {
        StorageLive(_209);
        _209 = ((_200 as Continue).0: solend_sdk::math::Decimal);
        _199 = _209;
        StorageDead(_209);
        _196 = RateLimiter::update(move _197, move _198, move _199) -> [return: bb91, unwind: bb177];
    }

    bb89: {
        StorageLive(_206);
        _206 = move ((_200 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_208);
        _208 = move _206;
        _0 = <Result<u64, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _208) -> [return: bb90, unwind: bb177];
    }

    bb90: {
        StorageDead(_208);
        StorageDead(_206);
        StorageDead(_199);
        StorageDead(_198);
        StorageDead(_197);
        StorageDead(_196);
        StorageDead(_195);
        goto -> bb146;
    }

    bb91: {
        StorageDead(_199);
        StorageDead(_198);
        StorageDead(_197);
        StorageLive(_210);
        _210 = {closure@token-lending\program\src\processor.rs:889:22: 889:27};
        _195 = Result::<(), ProgramError>::map_err::<ProgramError, {closure@token-lending\program\src\processor.rs:889:22: 889:27}>(move _196, move _210) -> [return: bb92, unwind: bb177];
    }

    bb92: {
        StorageDead(_210);
        StorageDead(_196);
        _194 = <Result<(), ProgramError> as Try>::branch(move _195) -> [return: bb93, unwind: bb177];
    }

    bb93: {
        StorageDead(_195);
        _211 = discriminant(_194);
        switchInt(move _211) -> [0: bb94, 1: bb95, otherwise: bb7];
    }

    bb94: {
        StorageLive(_215);
        _215 = ((_194 as Continue).0: ());
        _193 = _215;
        StorageDead(_215);
        _328 = discriminant(_194);
        _330 = discriminant(_200);
        _315 = const false;
        StorageDead(_200);
        StorageDead(_194);
        StorageDead(_193);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        _383 = (((_51.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _220 = &mut ((*_383).6: solend_sdk::state::RateLimiter);
        StorageLive(_221);
        _221 = ((*_11).0: u64);
        StorageLive(_222);
        StorageLive(_223);
        _223 = _181;
        _222 = <Decimal as From<u64>>::from(move _223) -> [return: bb97, unwind: bb165];
    }

    bb95: {
        StorageLive(_212);
        _212 = move ((_194 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_214);
        _214 = move _212;
        _0 = <Result<u64, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _214) -> [return: bb96, unwind: bb176];
    }

    bb96: {
        StorageDead(_214);
        StorageDead(_212);
        _352 = discriminant(_194);
        goto -> bb146;
    }

    bb97: {
        StorageDead(_223);
        _219 = RateLimiter::update(move _220, move _221, move _222) -> [return: bb98, unwind: bb165];
    }

    bb98: {
        StorageDead(_222);
        StorageDead(_221);
        StorageDead(_220);
        StorageLive(_224);
        _224 = {closure@token-lending\program\src\processor.rs:897:22: 897:27};
        _218 = Result::<(), ProgramError>::map_err::<ProgramError, {closure@token-lending\program\src\processor.rs:897:22: 897:27}>(move _219, move _224) -> [return: bb99, unwind: bb165];
    }

    bb99: {
        StorageDead(_224);
        StorageDead(_219);
        _217 = <Result<(), ProgramError> as Try>::branch(move _218) -> [return: bb100, unwind: bb165];
    }

    bb100: {
        StorageDead(_218);
        _225 = discriminant(_217);
        switchInt(move _225) -> [0: bb101, 1: bb102, otherwise: bb7];
    }

    bb101: {
        StorageLive(_229);
        _229 = ((_217 as Continue).0: ());
        _216 = _229;
        StorageDead(_229);
        _332 = discriminant(_217);
        StorageDead(_217);
        StorageDead(_216);
        _191 = const ();
        goto -> bb105;
    }

    bb102: {
        StorageLive(_226);
        _226 = move ((_217 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_228);
        _228 = move _226;
        _0 = <Result<u64, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _228) -> [return: bb103, unwind: bb175];
    }

    bb103: {
        StorageDead(_228);
        StorageDead(_226);
        _350 = discriminant(_217);
        StorageDead(_217);
        StorageDead(_216);
        goto -> bb147;
    }

    bb104: {
        _191 = const ();
        goto -> bb105;
    }

    bb105: {
        StorageDead(_192);
        StorageDead(_191);
        StorageLive(_230);
        StorageLive(_231);
        _384 = (((_51.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _231 = &mut ((*_384).1: solend_sdk::state::LastUpdate);
        _230 = LastUpdate::mark_stale(move _231) -> [return: bb106, unwind: bb165];
    }

    bb106: {
        StorageDead(_231);
        StorageDead(_230);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        _385 = (((_51.0: std::ptr::Unique<solend_sdk::state::Reserve>).0: std::ptr::NonNull<solend_sdk::state::Reserve>).0: *const solend_sdk::state::Reserve);
        _386 = _385 as *const () (PtrToPtr);
        _387 = _386 as usize (Transmute);
        _388 = AlignOf(solend_sdk::state::Reserve);
        _389 = Sub(_388, const 1_usize);
        _390 = BitAnd(_387, _389);
        _391 = Eq(_390, const 0_usize);
        assert(_391, "misaligned pointer dereference: address must be a multiple of {} but is {}", _388, _387) -> [success: bb182, unwind unreachable];
    }

    bb107: {
        _241 = &(*_242);
        StorageDead(_243);
        _240 = RefCell::<&mut [u8]>::borrow_mut(move _241) -> [return: bb108, unwind: bb165];
    }

    bb108: {
        StorageDead(_241);
        _239 = &mut _240;
        _238 = &mut (*_239);
        _237 = <RefMut<'_, &mut [u8]> as DerefMut>::deref_mut(move _238) -> [return: bb109, unwind: bb164];
    }

    bb109: {
        _313 = deref_copy (*_237);
        _236 = &mut (*_313);
        StorageDead(_238);
        _234 = <Reserve as Pack>::pack(move _235, move _236) -> [return: bb110, unwind: bb164];
    }

    bb110: {
        StorageDead(_236);
        StorageDead(_235);
        _233 = <Result<(), ProgramError> as Try>::branch(move _234) -> [return: bb111, unwind: bb164];
    }

    bb111: {
        StorageDead(_234);
        _244 = discriminant(_233);
        switchInt(move _244) -> [0: bb112, 1: bb113, otherwise: bb7];
    }

    bb112: {
        StorageLive(_248);
        _248 = ((_233 as Continue).0: ());
        _232 = _248;
        StorageDead(_248);
        _334 = discriminant(_233);
        drop(_240) -> [return: bb115, unwind: bb165];
    }

    bb113: {
        StorageLive(_245);
        _245 = move ((_233 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_247);
        _247 = move _245;
        _0 = <Result<u64, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _247) -> [return: bb114, unwind: bb174];
    }

    bb114: {
        StorageDead(_247);
        StorageDead(_245);
        _348 = discriminant(_233);
        drop(_240) -> [return: bb145, unwind: bb165];
    }

    bb115: {
        StorageDead(_242);
        StorageDead(_240);
        StorageDead(_239);
        StorageDead(_237);
        StorageDead(_233);
        StorageDead(_232);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        _252 = move _14;
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        _260 = &((*_8).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _259 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _260) -> [return: bb116, unwind: bb165];
    }

    bb116: {
        _258 = &(*_259);
        StorageDead(_260);
        _257 = RefCell::<&mut [u8]>::borrow_mut(move _258) -> [return: bb117, unwind: bb165];
    }

    bb117: {
        StorageDead(_258);
        _256 = &mut _257;
        _255 = &mut (*_256);
        _254 = <RefMut<'_, &mut [u8]> as DerefMut>::deref_mut(move _255) -> [return: bb118, unwind: bb163];
    }

    bb118: {
        _314 = deref_copy (*_254);
        _253 = &mut (*_314);
        StorageDead(_255);
        _251 = <LendingMarket as Pack>::pack(move _252, move _253) -> [return: bb119, unwind: bb163];
    }

    bb119: {
        StorageDead(_253);
        StorageDead(_252);
        _250 = <Result<(), ProgramError> as Try>::branch(move _251) -> [return: bb120, unwind: bb163];
    }

    bb120: {
        StorageDead(_251);
        _261 = discriminant(_250);
        switchInt(move _261) -> [0: bb121, 1: bb122, otherwise: bb7];
    }

    bb121: {
        StorageLive(_265);
        _265 = ((_250 as Continue).0: ());
        _249 = _265;
        StorageDead(_265);
        _336 = discriminant(_250);
        drop(_257) -> [return: bb124, unwind: bb165];
    }

    bb122: {
        StorageLive(_262);
        _262 = move ((_250 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_264);
        _264 = move _262;
        _0 = <Result<u64, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _264) -> [return: bb123, unwind: bb173];
    }

    bb123: {
        StorageDead(_264);
        StorageDead(_262);
        _346 = discriminant(_250);
        drop(_257) -> [return: bb144, unwind: bb165];
    }

    bb124: {
        StorageDead(_259);
        StorageDead(_257);
        StorageDead(_256);
        StorageDead(_254);
        StorageDead(_250);
        StorageDead(_249);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        _271 = &(*_6);
        _270 = <AccountInfo<'_> as Clone>::clone(move _271) -> [return: bb125, unwind: bb165];
    }

    bb125: {
        StorageDead(_271);
        StorageLive(_272);
        StorageLive(_273);
        _273 = &(*_3);
        _272 = <AccountInfo<'_> as Clone>::clone(move _273) -> [return: bb126, unwind: bb162];
    }

    bb126: {
        StorageDead(_273);
        StorageLive(_274);
        _274 = _2;
        StorageLive(_275);
        StorageLive(_276);
        _276 = &(*_10);
        _275 = <AccountInfo<'_> as Clone>::clone(move _276) -> [return: bb127, unwind: bb161];
    }

    bb127: {
        StorageDead(_276);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        _309 = const _;
        _279 = &(*_309);
        _278 = &(*_279);
        _277 = move _278 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_278);
        StorageLive(_281);
        StorageLive(_282);
        _282 = &(*_12);
        _281 = <AccountInfo<'_> as Clone>::clone(move _282) -> [return: bb128, unwind: bb160];
    }

    bb128: {
        StorageDead(_282);
        _269 = TokenBurnParams::<'_, '_> { mint: move _270, source: move _272, amount: move _274, authority: move _275, authority_signer_seeds: move _277, token_program: move _281 };
        StorageDead(_281);
        StorageDead(_277);
        StorageDead(_275);
        StorageDead(_274);
        StorageDead(_272);
        StorageDead(_270);
        _268 = spl_token_burn(move _269) -> [return: bb129, unwind: bb165];
    }

    bb129: {
        StorageDead(_269);
        _267 = <Result<(), ProgramError> as Try>::branch(move _268) -> [return: bb130, unwind: bb165];
    }

    bb130: {
        StorageDead(_268);
        _283 = discriminant(_267);
        switchInt(move _283) -> [0: bb131, 1: bb132, otherwise: bb7];
    }

    bb131: {
        StorageLive(_287);
        _287 = ((_267 as Continue).0: ());
        _266 = _287;
        StorageDead(_287);
        _338 = discriminant(_267);
        StorageDead(_279);
        StorageDead(_267);
        StorageDead(_266);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        _293 = &(*_7);
        _292 = <AccountInfo<'_> as Clone>::clone(move _293) -> [return: bb134, unwind: bb165];
    }

    bb132: {
        StorageLive(_284);
        _284 = move ((_267 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_286);
        _286 = move _284;
        _0 = <Result<u64, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _286) -> [return: bb133, unwind: bb172];
    }

    bb133: {
        StorageDead(_286);
        StorageDead(_284);
        _344 = discriminant(_267);
        StorageDead(_279);
        StorageDead(_267);
        StorageDead(_266);
        goto -> bb148;
    }

    bb134: {
        StorageDead(_293);
        StorageLive(_294);
        StorageLive(_295);
        _295 = &(*_4);
        _294 = <AccountInfo<'_> as Clone>::clone(move _295) -> [return: bb135, unwind: bb159];
    }

    bb135: {
        StorageDead(_295);
        StorageLive(_296);
        _296 = _181;
        StorageLive(_297);
        StorageLive(_298);
        _298 = &(*_9);
        _297 = <AccountInfo<'_> as Clone>::clone(move _298) -> [return: bb136, unwind: bb158];
    }

    bb136: {
        StorageDead(_298);
        StorageLive(_299);
        StorageLive(_300);
        _300 = &(*_150);
        _299 = move _300 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_300);
        StorageLive(_301);
        StorageLive(_302);
        _302 = &(*_12);
        _301 = <AccountInfo<'_> as Clone>::clone(move _302) -> [return: bb137, unwind: bb157];
    }

    bb137: {
        StorageDead(_302);
        _291 = TokenTransferParams::<'_, '_> { source: move _292, destination: move _294, amount: move _296, authority: move _297, authority_signer_seeds: move _299, token_program: move _301 };
        StorageDead(_301);
        StorageDead(_299);
        StorageDead(_297);
        StorageDead(_296);
        StorageDead(_294);
        StorageDead(_292);
        _290 = spl_token_transfer(move _291) -> [return: bb138, unwind: bb165];
    }

    bb138: {
        StorageDead(_291);
        _289 = <Result<(), ProgramError> as Try>::branch(move _290) -> [return: bb139, unwind: bb165];
    }

    bb139: {
        StorageDead(_290);
        _303 = discriminant(_289);
        switchInt(move _303) -> [0: bb140, 1: bb141, otherwise: bb7];
    }

    bb140: {
        StorageLive(_307);
        _307 = ((_289 as Continue).0: ());
        _288 = _307;
        StorageDead(_307);
        _340 = discriminant(_289);
        StorageDead(_289);
        StorageDead(_288);
        StorageLive(_308);
        _308 = _181;
        _0 = Result::<u64, ProgramError>::Ok(move _308);
        StorageDead(_308);
        StorageDead(_181);
        StorageDead(_159);
        StorageDead(_157);
        StorageDead(_151);
        StorageDead(_150);
        drop(_51) -> [return: bb143, unwind: bb168];
    }

    bb141: {
        StorageLive(_304);
        _304 = move ((_289 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_306);
        _306 = move _304;
        _0 = <Result<u64, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _306) -> [return: bb142, unwind: bb171];
    }

    bb142: {
        StorageDead(_306);
        StorageDead(_304);
        _342 = discriminant(_289);
        StorageDead(_289);
        StorageDead(_288);
        goto -> bb148;
    }

    bb143: {
        StorageDead(_51);
        StorageDead(_14);
        goto -> bb156;
    }

    bb144: {
        StorageDead(_259);
        StorageDead(_257);
        StorageDead(_256);
        StorageDead(_254);
        StorageDead(_250);
        StorageDead(_249);
        goto -> bb148;
    }

    bb145: {
        StorageDead(_242);
        StorageDead(_240);
        StorageDead(_239);
        StorageDead(_237);
        StorageDead(_233);
        StorageDead(_232);
        goto -> bb148;
    }

    bb146: {
        _354 = discriminant(_200);
        _315 = const false;
        StorageDead(_200);
        StorageDead(_194);
        StorageDead(_193);
        goto -> bb147;
    }

    bb147: {
        StorageDead(_192);
        StorageDead(_191);
        goto -> bb148;
    }

    bb148: {
        StorageDead(_181);
        goto -> bb149;
    }

    bb149: {
        StorageDead(_159);
        StorageDead(_157);
        StorageDead(_151);
        StorageDead(_150);
        goto -> bb151;
    }

    bb150: {
        StorageDead(_134);
        StorageDead(_133);
        goto -> bb151;
    }

    bb151: {
        drop(_51) -> [return: bb153, unwind: bb168];
    }

    bb152: {
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_56);
        _316 = const false;
        _317 = const false;
        StorageDead(_53);
        goto -> bb153;
    }

    bb153: {
        StorageDead(_51);
        goto -> bb155;
    }

    bb154: {
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_15);
        goto -> bb155;
    }

    bb155: {
        StorageDead(_14);
        goto -> bb156;
    }

    bb156: {
        return;
    }

    bb157 (cleanup): {
        drop(_297) -> [return: bb158, unwind terminate(cleanup)];
    }

    bb158 (cleanup): {
        drop(_294) -> [return: bb159, unwind terminate(cleanup)];
    }

    bb159 (cleanup): {
        drop(_292) -> [return: bb165, unwind terminate(cleanup)];
    }

    bb160 (cleanup): {
        drop(_275) -> [return: bb161, unwind terminate(cleanup)];
    }

    bb161 (cleanup): {
        drop(_272) -> [return: bb162, unwind terminate(cleanup)];
    }

    bb162 (cleanup): {
        drop(_270) -> [return: bb165, unwind terminate(cleanup)];
    }

    bb163 (cleanup): {
        drop(_257) -> [return: bb165, unwind terminate(cleanup)];
    }

    bb164 (cleanup): {
        drop(_240) -> [return: bb165, unwind terminate(cleanup)];
    }

    bb165 (cleanup): {
        drop(_51) -> [return: bb168, unwind terminate(cleanup)];
    }

    bb166 (cleanup): {
        drop(_59) -> [return: bb168, unwind terminate(cleanup)];
    }

    bb167 (cleanup): {
        drop(_21) -> [return: bb168, unwind terminate(cleanup)];
    }

    bb168 (cleanup): {
        resume;
    }

    bb169: {
        _322 = discriminant(_135);
        StorageDead(_135);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        _147 = const "Reserve is stale and must be refreshed in the current slot";
        _146 = &(*_147);
        _145 = solana_program::log::sol_log(move _146) -> [return: bb66, unwind: bb165];
    }

    bb170: {
        _324 = discriminant(_135);
        StorageDead(_135);
        _133 = const ();
        StorageDead(_134);
        StorageDead(_133);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        _312 = deref_copy ((*_8).0: &solana_program::pubkey::Pubkey);
        _153 = &(*_312);
        _152 = <Pubkey as AsRef<[u8]>>::as_ref(move _153) -> [return: bb68, unwind: bb165];
    }

    bb171 (cleanup): {
        _364 = discriminant(_289);
        goto -> bb165;
    }

    bb172 (cleanup): {
        _365 = discriminant(_267);
        goto -> bb165;
    }

    bb173 (cleanup): {
        _366 = discriminant(_250);
        goto -> bb163;
    }

    bb174 (cleanup): {
        _367 = discriminant(_233);
        goto -> bb164;
    }

    bb175 (cleanup): {
        _368 = discriminant(_217);
        goto -> bb165;
    }

    bb176 (cleanup): {
        _369 = discriminant(_194);
        goto -> bb177;
    }

    bb177 (cleanup): {
        _370 = discriminant(_200);
        goto -> bb165;
    }

    bb178 (cleanup): {
        _371 = discriminant(_182);
        goto -> bb165;
    }

    bb179 (cleanup): {
        _372 = discriminant(_135);
        goto -> bb165;
    }

    bb180 (cleanup): {
        _373 = discriminant(_53);
        goto -> bb166;
    }

    bb181 (cleanup): {
        _374 = discriminant(_15);
        goto -> bb167;
    }

    bb182: {
        _235 = move (*_385);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        _243 = &((*_5).2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _242 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _243) -> [return: bb107, unwind: bb165];
    }
}
