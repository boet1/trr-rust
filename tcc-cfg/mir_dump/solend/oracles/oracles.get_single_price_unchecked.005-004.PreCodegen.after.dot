digraph Mir_0_115 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn get_single_price_unchecked(_1: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;, _2: &amp;ReErased anchor_lang::prelude::Clock) -&gt; std::result::Result&lt;solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError&gt;<br align="left"/>let mut _3: OracleType;<br align="left"/>let mut _4: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::prelude::ProgramError&gt;, OracleType&gt;;<br align="left"/>let mut _5: std::result::Result&lt;OracleType, anchor_lang::prelude::ProgramError&gt;;<br align="left"/>let mut _6: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _7: isize;<br align="left"/>let _8: std::result::Result&lt;std::convert::Infallible, anchor_lang::prelude::ProgramError&gt;;<br align="left"/>let mut _9: !;<br align="left"/>let mut _10: std::result::Result&lt;std::convert::Infallible, anchor_lang::prelude::ProgramError&gt;;<br align="left"/>let _11: OracleType;<br align="left"/>let mut _12: isize;<br align="left"/>let mut _13: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _14: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _15: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _16: &amp;ReErased anchor_lang::prelude::Clock;<br align="left"/>let mut _17: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _18: &amp;ReErased anchor_lang::prelude::Clock;<br align="left"/>let mut _19: bool;<br align="left"/>let mut _20: bool;<br align="left"/>let mut _21: isize;<br align="left"/>let mut _22: isize;<br align="left"/>let mut _23: isize;<br align="left"/>let mut _24: isize;<br align="left"/>let mut _25: isize;<br align="left"/>debug oracle_account_info =&gt; _1;<br align="left"/>debug clock =&gt; _2;<br align="left"/>debug residual =&gt; _8;<br align="left"/>debug val =&gt; _11;<br align="left"/>>;
    bb0__0_115 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_20 = const false<br/>_19 = const false<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = &amp;(*_1)<br/></td></tr><tr><td align="left">_5 = get_oracle_type(move _6)</td></tr></table>>];
    bb1__0_115 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/></td></tr><tr><td align="left">_4 = &lt;Result&lt;OracleType, anchor_lang::prelude::ProgramError&gt; as Try&gt;::branch(move _5)</td></tr></table>>];
    bb2__0_115 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_19 = const true<br/>_20 = const true<br/>StorageDead(_5)<br/>_7 = discriminant(_4)<br/></td></tr><tr><td align="left">switchInt(move _7)</td></tr></table>>];
    bb3__0_115 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_11)<br/>_11 = move ((_4 as Continue).0: OracleType)<br/>_3 = move _11<br/>StorageDead(_11)<br/>_12 = discriminant(_3)<br/></td></tr><tr><td align="left">switchInt(move _12)</td></tr></table>>];
    bb4__0_115 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_115 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_8)<br/>_8 = move ((_4 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::prelude::ProgramError&gt;)<br/>StorageLive(_10)<br/>_10 = move _8<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, anchor_lang::prelude::ProgramError&gt;&gt;&gt;::from_residual(move _10)</td></tr></table>>];
    bb6__0_115 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_8)<br/>_23 = discriminant(_4)<br/>_19 = const false<br/>_20 = const false<br/>StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_115 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageLive(_17)<br/>_17 = &amp;(*_1)<br/>StorageLive(_18)<br/>_18 = &amp;(*_2)<br/></td></tr><tr><td align="left">_0 = get_switchboard_price_on_demand(move _17, move _18, const true)</td></tr></table>>];
    bb8__0_115 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageLive(_13)<br/>_13 = &amp;(*_1)<br/></td></tr><tr><td align="left">_0 = get_pyth_price_unchecked(move _13)</td></tr></table>>];
    bb9__0_115 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_115 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_14)<br/>_14 = &amp;(*_1)<br/></td></tr><tr><td align="left">_0 = get_pyth_pull_price_unchecked(move _14)</td></tr></table>>];
    bb11__0_115 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_115 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageLive(_15)<br/>_15 = &amp;(*_1)<br/>StorageLive(_16)<br/>_16 = &amp;(*_2)<br/></td></tr><tr><td align="left">_0 = get_switchboard_price_v2(move _15, move _16, const false)</td></tr></table>>];
    bb13__0_115 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_115 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageDead(_17)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_115 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left">return</td></tr></table>>];
    bb16__0_115 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">16 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb17__0_115 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">_21 = discriminant(_4)<br/>_19 = const false<br/>_20 = const false<br/>StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_115 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">18 (cleanup)</td></tr><tr><td align="left" balign="left">_25 = discriminant(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_115 -> bb1__0_115 [label="return"];
    bb1__0_115 -> bb2__0_115 [label="return"];
    bb1__0_115 -> bb16__0_115 [label="unwind"];
    bb2__0_115 -> bb3__0_115 [label="0"];
    bb2__0_115 -> bb5__0_115 [label="1"];
    bb2__0_115 -> bb4__0_115 [label="otherwise"];
    bb3__0_115 -> bb8__0_115 [label="0"];
    bb3__0_115 -> bb12__0_115 [label="1"];
    bb3__0_115 -> bb10__0_115 [label="2"];
    bb3__0_115 -> bb7__0_115 [label="3"];
    bb3__0_115 -> bb4__0_115 [label="otherwise"];
    bb5__0_115 -> bb6__0_115 [label="return"];
    bb5__0_115 -> bb18__0_115 [label="unwind"];
    bb6__0_115 -> bb15__0_115 [label=""];
    bb7__0_115 -> bb14__0_115 [label="return"];
    bb7__0_115 -> bb18__0_115 [label="unwind"];
    bb8__0_115 -> bb9__0_115 [label="return"];
    bb8__0_115 -> bb18__0_115 [label="unwind"];
    bb9__0_115 -> bb17__0_115 [label=""];
    bb10__0_115 -> bb11__0_115 [label="return"];
    bb10__0_115 -> bb18__0_115 [label="unwind"];
    bb11__0_115 -> bb17__0_115 [label=""];
    bb12__0_115 -> bb13__0_115 [label="return"];
    bb12__0_115 -> bb18__0_115 [label="unwind"];
    bb13__0_115 -> bb17__0_115 [label=""];
    bb14__0_115 -> bb17__0_115 [label=""];
    bb17__0_115 -> bb15__0_115 [label=""];
    bb18__0_115 -> bb16__0_115 [label=""];
}
