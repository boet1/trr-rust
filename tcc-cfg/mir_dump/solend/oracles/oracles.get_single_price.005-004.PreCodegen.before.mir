// MIR for `get_single_price` before PreCodegen

fn get_single_price(_1: &AccountInfo<'_>, _2: &Clock) -> Result<(solend_sdk::math::Decimal, Option<solend_sdk::math::Decimal>), anchor_lang::prelude::ProgramError> {
    debug oracle_account_info => _1;
    debug clock => _2;
    let mut _0: std::result::Result<(solend_sdk::math::Decimal, std::option::Option<solend_sdk::math::Decimal>), anchor_lang::prelude::ProgramError>;
    let mut _3: OracleType;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, OracleType>;
    let mut _5: std::result::Result<OracleType, anchor_lang::prelude::ProgramError>;
    let mut _6: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _11: OracleType;
    let mut _12: isize;
    let _13: (solend_sdk::math::Decimal, solend_sdk::math::Decimal);
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, (solend_sdk::math::Decimal, solend_sdk::math::Decimal)>;
    let mut _15: std::result::Result<(solend_sdk::math::Decimal, solend_sdk::math::Decimal), anchor_lang::prelude::ProgramError>;
    let mut _16: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _17: &anchor_lang::prelude::Clock;
    let mut _18: isize;
    let _19: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _20: !;
    let mut _21: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _22: (solend_sdk::math::Decimal, solend_sdk::math::Decimal);
    let mut _23: (solend_sdk::math::Decimal, std::option::Option<solend_sdk::math::Decimal>);
    let mut _24: solend_sdk::math::Decimal;
    let mut _25: std::option::Option<solend_sdk::math::Decimal>;
    let mut _26: solend_sdk::math::Decimal;
    let _27: (solend_sdk::math::Decimal, solend_sdk::math::Decimal);
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, (solend_sdk::math::Decimal, solend_sdk::math::Decimal)>;
    let mut _29: std::result::Result<(solend_sdk::math::Decimal, solend_sdk::math::Decimal), anchor_lang::prelude::ProgramError>;
    let mut _30: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _31: &anchor_lang::prelude::Clock;
    let mut _32: isize;
    let _33: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _36: (solend_sdk::math::Decimal, solend_sdk::math::Decimal);
    let mut _37: (solend_sdk::math::Decimal, std::option::Option<solend_sdk::math::Decimal>);
    let mut _38: solend_sdk::math::Decimal;
    let mut _39: std::option::Option<solend_sdk::math::Decimal>;
    let mut _40: solend_sdk::math::Decimal;
    let _41: solend_sdk::math::Decimal;
    let mut _42: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, solend_sdk::math::Decimal>;
    let mut _43: std::result::Result<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError>;
    let mut _44: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _45: &anchor_lang::prelude::Clock;
    let mut _46: isize;
    let _47: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _50: solend_sdk::math::Decimal;
    let mut _51: (solend_sdk::math::Decimal, std::option::Option<solend_sdk::math::Decimal>);
    let mut _52: solend_sdk::math::Decimal;
    let mut _53: std::option::Option<solend_sdk::math::Decimal>;
    let _54: solend_sdk::math::Decimal;
    let mut _55: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, solend_sdk::math::Decimal>;
    let mut _56: std::result::Result<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError>;
    let mut _57: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _58: &anchor_lang::prelude::Clock;
    let mut _59: isize;
    let _60: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _61: !;
    let mut _62: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _63: solend_sdk::math::Decimal;
    let mut _64: (solend_sdk::math::Decimal, std::option::Option<solend_sdk::math::Decimal>);
    let mut _65: solend_sdk::math::Decimal;
    let mut _66: std::option::Option<solend_sdk::math::Decimal>;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: isize;
    let mut _70: isize;
    let mut _71: isize;
    let mut _72: isize;
    let mut _73: isize;
    let mut _74: isize;
    let mut _75: isize;
    let mut _76: isize;
    let mut _77: isize;
    let mut _78: isize;
    let mut _79: isize;
    let mut _80: isize;
    let mut _81: isize;
    let mut _82: isize;
    let mut _83: isize;
    let mut _84: isize;
    let mut _85: isize;
    let mut _86: isize;
    let mut _87: isize;
    let mut _88: isize;
    let mut _89: isize;
    let mut _90: isize;
    let mut _91: isize;
    let mut _92: isize;
    let mut _93: isize;
    scope 1 {
        debug residual => _8;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _11;
        scope 4 {
        }
    }
    scope 5 {
        debug price => _13;
    }
    scope 6 {
        debug residual => _19;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _22;
        scope 9 {
        }
    }
    scope 10 {
        debug price => _27;
    }
    scope 11 {
        debug residual => _33;
        scope 12 {
        }
    }
    scope 13 {
        debug val => _36;
        scope 14 {
        }
    }
    scope 15 {
        debug price => _41;
    }
    scope 16 {
        debug residual => _47;
        scope 17 {
        }
    }
    scope 18 {
        debug val => _50;
        scope 19 {
        }
    }
    scope 20 {
        debug price => _54;
    }
    scope 21 {
        debug residual => _60;
        scope 22 {
        }
    }
    scope 23 {
        debug val => _63;
        scope 24 {
        }
    }

    bb0: {
        _68 = const false;
        _67 = const false;
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &(*_1);
        _5 = get_oracle_type(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <Result<OracleType, anchor_lang::prelude::ProgramError> as Try>::branch(move _5) -> [return: bb2, unwind: bb32];
    }

    bb2: {
        _67 = const true;
        _68 = const true;
        StorageDead(_5);
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = move ((_4 as Continue).0: OracleType);
        _3 = move _11;
        StorageDead(_11);
        _12 = discriminant(_3);
        switchInt(move _12) -> [0: bb8, 1: bb20, 2: bb14, 3: bb7, otherwise: bb4];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_10);
        _10 = move _8;
        _0 = <Result<(solend_sdk::math::Decimal, Option<solend_sdk::math::Decimal>), anchor_lang::prelude::ProgramError> as FromResidual<Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _10) -> [return: bb6, unwind: bb39];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        goto -> bb34;
    }

    bb7: {
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = &(*_1);
        StorageLive(_58);
        _58 = &(*_2);
        _56 = get_switchboard_price(move _57, move _58) -> [return: bb26, unwind: bb39];
    }

    bb8: {
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &(*_1);
        StorageLive(_17);
        _17 = &(*_2);
        _15 = get_pyth_price(move _16, move _17) -> [return: bb9, unwind: bb39];
    }

    bb9: {
        StorageDead(_17);
        StorageDead(_16);
        _14 = <Result<(solend_sdk::math::Decimal, solend_sdk::math::Decimal), anchor_lang::prelude::ProgramError> as Try>::branch(move _15) -> [return: bb10, unwind: bb39];
    }

    bb10: {
        StorageDead(_15);
        _18 = discriminant(_14);
        switchInt(move _18) -> [0: bb11, 1: bb12, otherwise: bb4];
    }

    bb11: {
        StorageLive(_22);
        _22 = ((_14 as Continue).0: (solend_sdk::math::Decimal, solend_sdk::math::Decimal));
        _13 = _22;
        StorageDead(_22);
        _69 = discriminant(_14);
        StorageDead(_14);
        StorageLive(_23);
        StorageLive(_24);
        _24 = (_13.0: solend_sdk::math::Decimal);
        StorageLive(_25);
        StorageLive(_26);
        _26 = (_13.1: solend_sdk::math::Decimal);
        _25 = Option::<solend_sdk::math::Decimal>::Some(move _26);
        StorageDead(_26);
        _23 = (move _24, move _25);
        StorageDead(_25);
        StorageDead(_24);
        _0 = Result::<(solend_sdk::math::Decimal, Option<solend_sdk::math::Decimal>), anchor_lang::prelude::ProgramError>::Ok(move _23);
        StorageDead(_23);
        StorageDead(_13);
        goto -> bb33;
    }

    bb12: {
        StorageLive(_19);
        _19 = move ((_14 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_21);
        _21 = move _19;
        _0 = <Result<(solend_sdk::math::Decimal, Option<solend_sdk::math::Decimal>), anchor_lang::prelude::ProgramError> as FromResidual<Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _21) -> [return: bb13, unwind: bb38];
    }

    bb13: {
        StorageDead(_21);
        StorageDead(_19);
        _85 = discriminant(_14);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb34;
    }

    bb14: {
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = &(*_1);
        StorageLive(_31);
        _31 = &(*_2);
        _29 = get_pyth_pull_price(move _30, move _31) -> [return: bb15, unwind: bb39];
    }

    bb15: {
        StorageDead(_31);
        StorageDead(_30);
        _28 = <Result<(solend_sdk::math::Decimal, solend_sdk::math::Decimal), anchor_lang::prelude::ProgramError> as Try>::branch(move _29) -> [return: bb16, unwind: bb39];
    }

    bb16: {
        StorageDead(_29);
        _32 = discriminant(_28);
        switchInt(move _32) -> [0: bb17, 1: bb18, otherwise: bb4];
    }

    bb17: {
        StorageLive(_36);
        _36 = ((_28 as Continue).0: (solend_sdk::math::Decimal, solend_sdk::math::Decimal));
        _27 = _36;
        StorageDead(_36);
        _71 = discriminant(_28);
        StorageDead(_28);
        StorageLive(_37);
        StorageLive(_38);
        _38 = (_27.0: solend_sdk::math::Decimal);
        StorageLive(_39);
        StorageLive(_40);
        _40 = (_27.1: solend_sdk::math::Decimal);
        _39 = Option::<solend_sdk::math::Decimal>::Some(move _40);
        StorageDead(_40);
        _37 = (move _38, move _39);
        StorageDead(_39);
        StorageDead(_38);
        _0 = Result::<(solend_sdk::math::Decimal, Option<solend_sdk::math::Decimal>), anchor_lang::prelude::ProgramError>::Ok(move _37);
        StorageDead(_37);
        StorageDead(_27);
        goto -> bb33;
    }

    bb18: {
        StorageLive(_33);
        _33 = move ((_28 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_35);
        _35 = move _33;
        _0 = <Result<(solend_sdk::math::Decimal, Option<solend_sdk::math::Decimal>), anchor_lang::prelude::ProgramError> as FromResidual<Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _35) -> [return: bb19, unwind: bb37];
    }

    bb19: {
        StorageDead(_35);
        StorageDead(_33);
        _83 = discriminant(_28);
        StorageDead(_28);
        StorageDead(_27);
        goto -> bb34;
    }

    bb20: {
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = &(*_1);
        StorageLive(_45);
        _45 = &(*_2);
        _43 = get_switchboard_price(move _44, move _45) -> [return: bb21, unwind: bb39];
    }

    bb21: {
        StorageDead(_45);
        StorageDead(_44);
        _42 = <Result<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError> as Try>::branch(move _43) -> [return: bb22, unwind: bb39];
    }

    bb22: {
        StorageDead(_43);
        _46 = discriminant(_42);
        switchInt(move _46) -> [0: bb23, 1: bb24, otherwise: bb4];
    }

    bb23: {
        StorageLive(_50);
        _50 = ((_42 as Continue).0: solend_sdk::math::Decimal);
        _41 = _50;
        StorageDead(_50);
        _73 = discriminant(_42);
        StorageDead(_42);
        StorageLive(_51);
        StorageLive(_52);
        _52 = _41;
        StorageLive(_53);
        _53 = Option::<solend_sdk::math::Decimal>::None;
        _51 = (move _52, move _53);
        StorageDead(_53);
        StorageDead(_52);
        _0 = Result::<(solend_sdk::math::Decimal, Option<solend_sdk::math::Decimal>), anchor_lang::prelude::ProgramError>::Ok(move _51);
        StorageDead(_51);
        StorageDead(_41);
        goto -> bb33;
    }

    bb24: {
        StorageLive(_47);
        _47 = move ((_42 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_49);
        _49 = move _47;
        _0 = <Result<(solend_sdk::math::Decimal, Option<solend_sdk::math::Decimal>), anchor_lang::prelude::ProgramError> as FromResidual<Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _49) -> [return: bb25, unwind: bb36];
    }

    bb25: {
        StorageDead(_49);
        StorageDead(_47);
        _81 = discriminant(_42);
        StorageDead(_42);
        StorageDead(_41);
        goto -> bb34;
    }

    bb26: {
        StorageDead(_58);
        StorageDead(_57);
        _55 = <Result<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError> as Try>::branch(move _56) -> [return: bb27, unwind: bb39];
    }

    bb27: {
        StorageDead(_56);
        _59 = discriminant(_55);
        switchInt(move _59) -> [0: bb28, 1: bb29, otherwise: bb4];
    }

    bb28: {
        StorageLive(_63);
        _63 = ((_55 as Continue).0: solend_sdk::math::Decimal);
        _54 = _63;
        StorageDead(_63);
        _75 = discriminant(_55);
        StorageDead(_55);
        StorageLive(_64);
        StorageLive(_65);
        _65 = _54;
        StorageLive(_66);
        _66 = Option::<solend_sdk::math::Decimal>::None;
        _64 = (move _65, move _66);
        StorageDead(_66);
        StorageDead(_65);
        _0 = Result::<(solend_sdk::math::Decimal, Option<solend_sdk::math::Decimal>), anchor_lang::prelude::ProgramError>::Ok(move _64);
        StorageDead(_64);
        StorageDead(_54);
        goto -> bb33;
    }

    bb29: {
        StorageLive(_60);
        _60 = move ((_55 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_62);
        _62 = move _60;
        _0 = <Result<(solend_sdk::math::Decimal, Option<solend_sdk::math::Decimal>), anchor_lang::prelude::ProgramError> as FromResidual<Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _62) -> [return: bb30, unwind: bb35];
    }

    bb30: {
        StorageDead(_62);
        StorageDead(_60);
        _79 = discriminant(_55);
        StorageDead(_55);
        StorageDead(_54);
        goto -> bb34;
    }

    bb31: {
        return;
    }

    bb32 (cleanup): {
        resume;
    }

    bb33: {
        _77 = discriminant(_4);
        _67 = const false;
        _68 = const false;
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb31;
    }

    bb34: {
        _87 = discriminant(_4);
        _67 = const false;
        _68 = const false;
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb31;
    }

    bb35 (cleanup): {
        _89 = discriminant(_55);
        goto -> bb39;
    }

    bb36 (cleanup): {
        _90 = discriminant(_42);
        goto -> bb39;
    }

    bb37 (cleanup): {
        _91 = discriminant(_28);
        goto -> bb39;
    }

    bb38 (cleanup): {
        _92 = discriminant(_14);
        goto -> bb39;
    }

    bb39 (cleanup): {
        _93 = discriminant(_4);
        goto -> bb32;
    }
}
