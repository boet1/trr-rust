// MIR for `get_oracle_type` before PreCodegen

fn get_oracle_type(_1: &AccountInfo<'_>) -> Result<OracleType, anchor_lang::prelude::ProgramError> {
    debug oracle_info => _1;
    let mut _0: std::result::Result<OracleType, anchor_lang::prelude::ProgramError>;
    let _2: ();
    let mut _3: bool;
    let mut _4: &anchor_lang::prelude::Pubkey;
    let mut _5: &anchor_lang::prelude::Pubkey;
    let _6: anchor_lang::prelude::Pubkey;
    let mut _7: !;
    let mut _8: OracleType;
    let mut _9: bool;
    let mut _10: &anchor_lang::prelude::Pubkey;
    let mut _11: &anchor_lang::prelude::Pubkey;
    let _12: anchor_lang::prelude::Pubkey;
    let mut _13: !;
    let mut _14: OracleType;
    let mut _15: bool;
    let mut _16: &anchor_lang::prelude::Pubkey;
    let mut _17: &anchor_lang::prelude::Pubkey;
    let _18: anchor_lang::prelude::Pubkey;
    let mut _19: !;
    let mut _20: OracleType;
    let mut _21: bool;
    let mut _22: &anchor_lang::prelude::Pubkey;
    let mut _23: &anchor_lang::prelude::Pubkey;
    let _24: anchor_lang::prelude::Pubkey;
    let mut _25: !;
    let mut _26: OracleType;
    let _27: ();
    let mut _28: &str;
    let _29: &str;
    let mut _30: &std::string::String;
    let _31: &std::string::String;
    let _32: std::string::String;
    let _33: std::string::String;
    let mut _34: std::fmt::Arguments<'_>;
    let mut _35: &[&str];
    let mut _36: &[&str; 2];
    let _37: &[&str; 2];
    let _38: [&str; 2];
    let mut _39: &[core::fmt::rt::Argument<'_>];
    let mut _40: &[core::fmt::rt::Argument<'_>; 2];
    let _41: &[core::fmt::rt::Argument<'_>; 2];
    let _42: [core::fmt::rt::Argument<'_>; 2];
    let mut _43: core::fmt::rt::Argument<'_>;
    let mut _44: &&anchor_lang::prelude::Pubkey;
    let _45: &&anchor_lang::prelude::Pubkey;
    let mut _46: core::fmt::rt::Argument<'_>;
    let mut _47: &&anchor_lang::prelude::Pubkey;
    let _48: &&anchor_lang::prelude::Pubkey;
    let mut _49: anchor_lang::prelude::ProgramError;
    let mut _50: solend_sdk::error::LendingError;
    let mut _51: &[&str; 2];
    let mut _52: &anchor_lang::prelude::Pubkey;
    let mut _53: &anchor_lang::prelude::Pubkey;
    let mut _54: &anchor_lang::prelude::Pubkey;
    let mut _55: &anchor_lang::prelude::Pubkey;
    scope 1 {
        debug res => _33;
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _52 = deref_copy ((*_1).3: &anchor_lang::prelude::Pubkey);
        _4 = &(*_52);
        StorageLive(_5);
        StorageLive(_6);
        _6 = pyth_mainnet::id() -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &_6;
        _3 = <Pubkey as PartialEq>::eq(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _3) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_8);
        _8 = OracleType::Pyth;
        _0 = Result::<OracleType, anchor_lang::prelude::ProgramError>::Ok(move _8);
        StorageDead(_8);
        goto -> bb27;
    }

    bb4: {
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_9);
        StorageLive(_10);
        _53 = deref_copy ((*_1).3: &anchor_lang::prelude::Pubkey);
        _10 = &(*_53);
        StorageLive(_11);
        StorageLive(_12);
        _12 = pyth_pull_mainnet::id() -> [return: bb5, unwind continue];
    }

    bb5: {
        _11 = &_12;
        _9 = <Pubkey as PartialEq>::eq(move _10, move _11) -> [return: bb6, unwind continue];
    }

    bb6: {
        switchInt(move _9) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_14);
        _14 = OracleType::PythPull;
        _0 = Result::<OracleType, anchor_lang::prelude::ProgramError>::Ok(move _14);
        StorageDead(_14);
        goto -> bb26;
    }

    bb8: {
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_15);
        StorageLive(_16);
        _54 = deref_copy ((*_1).3: &anchor_lang::prelude::Pubkey);
        _16 = &(*_54);
        StorageLive(_17);
        StorageLive(_18);
        _18 = switchboard_v2_mainnet::id() -> [return: bb9, unwind continue];
    }

    bb9: {
        _17 = &_18;
        _15 = <Pubkey as PartialEq>::eq(move _16, move _17) -> [return: bb10, unwind continue];
    }

    bb10: {
        switchInt(move _15) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_20);
        _20 = OracleType::Switchboard;
        _0 = Result::<OracleType, anchor_lang::prelude::ProgramError>::Ok(move _20);
        StorageDead(_20);
        goto -> bb25;
    }

    bb12: {
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_21);
        StorageLive(_22);
        _55 = deref_copy ((*_1).3: &anchor_lang::prelude::Pubkey);
        _22 = &(*_55);
        StorageLive(_23);
        StorageLive(_24);
        _24 = switchboard_on_demand_mainnet::id() -> [return: bb13, unwind continue];
    }

    bb13: {
        _23 = &_24;
        _21 = <Pubkey as PartialEq>::eq(move _22, move _23) -> [return: bb14, unwind continue];
    }

    bb14: {
        switchInt(move _21) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        StorageLive(_26);
        _26 = OracleType::SbOnDemand;
        _0 = Result::<OracleType, anchor_lang::prelude::ProgramError>::Ok(move _26);
        StorageDead(_26);
        StorageDead(_21);
        goto -> bb25;
    }

    bb16: {
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        _2 = const ();
        StorageDead(_21);
        StorageDead(_15);
        StorageDead(_9);
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _51 = const _;
        _37 = &(*_51);
        _36 = &(*_37);
        _35 = move _36 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_36);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = &((*_1).0: &anchor_lang::prelude::Pubkey);
        _44 = &(*_45);
        _43 = __core::fmt::rt::Argument::<'_>::new_debug::<&Pubkey>(move _44) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_44);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = &((*_1).3: &anchor_lang::prelude::Pubkey);
        _47 = &(*_48);
        _46 = __core::fmt::rt::Argument::<'_>::new_debug::<&Pubkey>(move _47) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_47);
        _42 = [move _43, move _46];
        StorageDead(_46);
        StorageDead(_43);
        _41 = &_42;
        _40 = &(*_41);
        _39 = move _40 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_40);
        _34 = Arguments::<'_>::new_v1(move _35, move _39) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_39);
        StorageDead(_35);
        _33 = format(move _34) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_34);
        StorageDead(_48);
        StorageDead(_45);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_37);
        _32 = move _33;
        StorageDead(_33);
        _31 = &_32;
        _30 = &(*_31);
        _29 = <String as Deref>::deref(move _30) -> [return: bb21, unwind: bb29];
    }

    bb21: {
        _28 = &(*_29);
        StorageDead(_30);
        _27 = solana_program::log::sol_log(move _28) -> [return: bb22, unwind: bb29];
    }

    bb22: {
        StorageDead(_28);
        drop(_32) -> [return: bb23, unwind: bb30];
    }

    bb23: {
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_27);
        StorageLive(_49);
        StorageLive(_50);
        _50 = InvalidOracleConfig;
        _49 = <LendingError as Into<anchor_lang::prelude::ProgramError>>::into(move _50) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_50);
        _0 = Result::<OracleType, anchor_lang::prelude::ProgramError>::Err(move _49);
        StorageDead(_49);
        goto -> bb28;
    }

    bb25: {
        StorageDead(_15);
        goto -> bb26;
    }

    bb26: {
        StorageDead(_9);
        goto -> bb27;
    }

    bb27: {
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb28;
    }

    bb28: {
        return;
    }

    bb29 (cleanup): {
        drop(_32) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        resume;
    }
}
