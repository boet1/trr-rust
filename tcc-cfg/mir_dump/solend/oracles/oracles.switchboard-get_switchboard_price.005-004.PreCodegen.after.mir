// MIR for `get_switchboard_price` after PreCodegen

fn get_switchboard_price(_1: &AccountInfo<'_>, _2: &Clock) -> Result<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError> {
    debug switchboard_feed_info => _1;
    debug clock => _2;
    let mut _0: std::result::Result<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError>;
    let _3: ();
    let mut _4: bool;
    let mut _5: &anchor_lang::prelude::Pubkey;
    let mut _6: &anchor_lang::prelude::Pubkey;
    let _7: anchor_lang::prelude::Pubkey;
    let mut _8: !;
    let mut _9: anchor_lang::prelude::ProgramError;
    let mut _10: solend_sdk::error::LendingError;
    let _11: ();
    let mut _12: bool;
    let mut _13: &&anchor_lang::prelude::Pubkey;
    let mut _14: &&anchor_lang::prelude::Pubkey;
    let _15: &anchor_lang::prelude::Pubkey;
    let _16: anchor_lang::prelude::Pubkey;
    let mut _17: bool;
    let mut _18: &&anchor_lang::prelude::Pubkey;
    let mut _19: &&anchor_lang::prelude::Pubkey;
    let _20: &anchor_lang::prelude::Pubkey;
    let _21: anchor_lang::prelude::Pubkey;
    let mut _22: !;
    let mut _23: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _24: &anchor_lang::prelude::Clock;
    let _25: ();
    let mut _26: bool;
    let mut _27: &&anchor_lang::prelude::Pubkey;
    let mut _28: &&anchor_lang::prelude::Pubkey;
    let _29: &anchor_lang::prelude::Pubkey;
    let _30: anchor_lang::prelude::Pubkey;
    let mut _31: bool;
    let mut _32: &&anchor_lang::prelude::Pubkey;
    let mut _33: &&anchor_lang::prelude::Pubkey;
    let _34: &anchor_lang::prelude::Pubkey;
    let _35: anchor_lang::prelude::Pubkey;
    let mut _36: !;
    let mut _37: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _38: &anchor_lang::prelude::Clock;
    let mut _39: anchor_lang::prelude::ProgramError;
    let mut _40: solend_sdk::error::LendingError;
    let mut _41: &anchor_lang::prelude::Pubkey;
    let mut _42: &anchor_lang::prelude::Pubkey;

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _42 = deref_copy ((*_1).0: &anchor_lang::prelude::Pubkey);
        _5 = &(*_42);
        StorageLive(_6);
        _41 = const _;
        _6 = &(*_41);
        _4 = <Pubkey as PartialEq>::eq(move _5, move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _4) -> [0: bb4, otherwise: bb2];
    }

    bb2: {
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_9);
        StorageLive(_10);
        _10 = NullOracleConfig;
        _9 = <LendingError as Into<anchor_lang::prelude::ProgramError>>::into(move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_10);
        _0 = Result::<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError>::Err(move _9);
        StorageDead(_9);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb24;
    }

    bb4: {
        StorageDead(_6);
        StorageDead(_5);
        _3 = const ();
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &((*_1).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = switchboard_v2_mainnet::id() -> [return: bb5, unwind continue];
    }

    bb5: {
        _15 = &_16;
        _14 = &_15;
        _12 = <&Pubkey as PartialEq>::eq(move _13, move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        switchInt(move _12) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb11;
    }

    bb8: {
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_17);
        StorageLive(_18);
        _18 = &((*_1).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = switchboard_v2_devnet::id() -> [return: bb9, unwind continue];
    }

    bb9: {
        _20 = &_21;
        _19 = &_20;
        _17 = <&Pubkey as PartialEq>::eq(move _18, move _19) -> [return: bb10, unwind continue];
    }

    bb10: {
        switchInt(move _17) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageLive(_23);
        _23 = &(*_1);
        StorageLive(_24);
        _24 = &(*_2);
        _0 = get_switchboard_price_v2(move _23, move _24, const true) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_17);
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb24;
    }

    bb13: {
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        _11 = const ();
        StorageDead(_17);
        StorageDead(_12);
        StorageDead(_11);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &((*_1).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = switchboard_on_demand_devnet::id() -> [return: bb14, unwind continue];
    }

    bb14: {
        _29 = &_30;
        _28 = &_29;
        _26 = <&Pubkey as PartialEq>::eq(move _27, move _28) -> [return: bb15, unwind continue];
    }

    bb15: {
        switchInt(move _26) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        goto -> bb20;
    }

    bb17: {
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageLive(_31);
        StorageLive(_32);
        _32 = &((*_1).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = switchboard_on_demand_mainnet::id() -> [return: bb18, unwind continue];
    }

    bb18: {
        _34 = &_35;
        _33 = &_34;
        _31 = <&Pubkey as PartialEq>::eq(move _32, move _33) -> [return: bb19, unwind continue];
    }

    bb19: {
        switchInt(move _31) -> [0: bb22, otherwise: bb20];
    }

    bb20: {
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_32);
        StorageLive(_37);
        _37 = &(*_1);
        StorageLive(_38);
        _38 = &(*_2);
        _0 = get_switchboard_price_on_demand(move _37, move _38, const true) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_31);
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb24;
    }

    bb22: {
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_32);
        _25 = const ();
        StorageDead(_31);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_39);
        StorageLive(_40);
        _40 = NullOracleConfig;
        _39 = <LendingError as Into<anchor_lang::prelude::ProgramError>>::into(move _40) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_40);
        _0 = Result::<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError>::Err(move _39);
        StorageDead(_39);
        goto -> bb24;
    }

    bb24: {
        return;
    }
}
