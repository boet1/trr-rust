// MIR for `get_switchboard_price_v2` before PreCodegen

fn get_switchboard_price_v2(_1: &AccountInfo<'_>, _2: &Clock, _3: bool) -> Result<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError> {
    debug switchboard_feed_info => _1;
    debug clock => _2;
    debug check_staleness => _3;
    let mut _0: std::result::Result<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError>;
    let _4: &std::cell::Ref<'_, &mut [u8]>;
    let _5: std::cell::Ref<'_, &mut [u8]>;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _7: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _8: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _13: std::cell::Ref<'_, &mut [u8]>;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, &switchboard_v2::AggregatorAccountData>;
    let mut _16: std::result::Result<&switchboard_v2::AggregatorAccountData, anchor_lang::error::Error>;
    let mut _17: &[u8];
    let _18: &&mut [u8];
    let mut _19: &std::cell::Ref<'_, &mut [u8]>;
    let mut _20: isize;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>, u64>;
    let mut _27: std::result::Result<u64, solend_sdk::error::LendingError>;
    let mut _28: std::option::Option<u64>;
    let mut _29: u64;
    let mut _30: u64;
    let mut _31: solend_sdk::error::LendingError;
    let mut _32: isize;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>;
    let _37: ();
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: u64;
    let mut _41: !;
    let _42: ();
    let mut _43: &str;
    let _44: &str;
    let mut _45: anchor_lang::prelude::ProgramError;
    let mut _46: solend_sdk::error::LendingError;
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, switchboard_v2::SwitchboardDecimal>;
    let mut _49: std::result::Result<switchboard_v2::SwitchboardDecimal, anchor_lang::error::Error>;
    let mut _50: &switchboard_v2::AggregatorAccountData;
    let mut _51: isize;
    let mut _53: !;
    let mut _54: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _56: ();
    let mut _57: bool;
    let mut _58: i128;
    let mut _59: !;
    let _60: ();
    let mut _61: &str;
    let _62: &str;
    let mut _63: anchor_lang::prelude::ProgramError;
    let mut _64: solend_sdk::error::LendingError;
    let mut _66: u128;
    let mut _67: i128;
    let mut _69: u128;
    let mut _70: std::option::Option<u128>;
    let mut _71: u32;
    let mut _72: solend_sdk::math::Decimal;
    let mut _73: solend_sdk::math::Decimal;
    let mut _74: &mut [u8];
    let mut _75: isize;
    let mut _76: isize;
    let mut _77: isize;
    let mut _78: isize;
    let mut _79: isize;
    let mut _80: isize;
    let mut _81: isize;
    let mut _82: isize;
    let mut _83: isize;
    let mut _84: isize;
    let mut _85: isize;
    let mut _86: isize;
    let mut _87: isize;
    let mut _88: isize;
    let mut _89: isize;
    scope 1 {
        debug data => _4;
        let _14: &switchboard_v2::AggregatorAccountData;
        let _21: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _24: &switchboard_v2::AggregatorAccountData;
        scope 6 {
            debug feed => _14;
            let _25: u64;
            let _33: std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>;
            let _36: u64;
            scope 11 {
                debug slots_elapsed => _25;
                let _47: switchboard_v2::SwitchboardDecimal;
                let _52: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _55: switchboard_v2::SwitchboardDecimal;
                scope 16 {
                    debug price_switchboard_desc => _47;
                    let _65: solend_sdk::math::Decimal;
                    scope 21 {
                        debug price => _65;
                        let _68: solend_sdk::math::Decimal;
                        scope 22 {
                            debug exp => _68;
                        }
                    }
                }
                scope 17 {
                    debug residual => _52;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _55;
                    scope 20 {
                    }
                }
            }
            scope 12 {
                debug residual => _33;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _36;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _21;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _24;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _10;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _13;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &(*_1);
        _7 = AccountInfo::<'_>::try_borrow_data(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        _6 = <Result<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError> as Try>::branch(move _7) -> [return: bb2, unwind: bb46];
    }

    bb2: {
        StorageDead(_7);
        _9 = discriminant(_6);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = move ((_6 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _5 = move _13;
        StorageDead(_13);
        _4 = &_5;
        _75 = discriminant(_6);
        StorageDead(_6);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &(*_4);
        _18 = <Ref<'_, &mut [u8]> as Deref>::deref(move _19) -> [return: bb7, unwind: bb45];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_12);
        _12 = move _10;
        _0 = <Result<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError> as FromResidual<Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _12) -> [return: bb6, unwind: bb49];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        _85 = discriminant(_6);
        StorageDead(_6);
        goto -> bb43;
    }

    bb7: {
        _74 = deref_copy (*_18);
        _17 = &(*_74);
        StorageDead(_19);
        _16 = AggregatorAccountData::new_from_bytes(move _17) -> [return: bb8, unwind: bb45];
    }

    bb8: {
        StorageDead(_17);
        _15 = <Result<&AggregatorAccountData, anchor_lang::error::Error> as Try>::branch(move _16) -> [return: bb9, unwind: bb45];
    }

    bb9: {
        StorageDead(_16);
        _20 = discriminant(_15);
        switchInt(move _20) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_24);
        _24 = ((_15 as Continue).0: &switchboard_v2::AggregatorAccountData);
        _14 = _24;
        StorageDead(_24);
        _77 = discriminant(_15);
        StorageDead(_18);
        StorageDead(_15);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = ((*_2).0: u64);
        StorageLive(_30);
        _30 = (((*_14).16: switchboard_v2::AggregatorRound).3: u64);
        _28 = __core::num::<impl u64>::checked_sub(move _29, move _30) -> [return: bb13, unwind: bb45];
    }

    bb11: {
        StorageLive(_21);
        _21 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_23);
        _23 = move _21;
        _0 = <Result<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError> as FromResidual<Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _23) -> [return: bb12, unwind: bb48];
    }

    bb12: {
        StorageDead(_23);
        StorageDead(_21);
        _83 = discriminant(_15);
        StorageDead(_18);
        StorageDead(_15);
        goto -> bb42;
    }

    bb13: {
        StorageDead(_30);
        StorageDead(_29);
        StorageLive(_31);
        _31 = MathOverflow;
        _27 = Option::<u64>::ok_or::<LendingError>(move _28, move _31) -> [return: bb14, unwind: bb45];
    }

    bb14: {
        StorageDead(_31);
        StorageDead(_28);
        _26 = <Result<u64, LendingError> as Try>::branch(move _27) -> [return: bb15, unwind: bb45];
    }

    bb15: {
        StorageDead(_27);
        _32 = discriminant(_26);
        switchInt(move _32) -> [0: bb16, 1: bb17, otherwise: bb4];
    }

    bb16: {
        StorageLive(_36);
        _36 = ((_26 as Continue).0: u64);
        _25 = _36;
        StorageDead(_36);
        StorageDead(_26);
        StorageLive(_37);
        StorageLive(_38);
        _38 = _3;
        switchInt(move _38) -> [0: bb24, otherwise: bb19];
    }

    bb17: {
        StorageLive(_33);
        _33 = move ((_26 as Break).0: std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>);
        StorageLive(_35);
        _35 = move _33;
        _0 = <Result<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError> as FromResidual<Result<Infallible, LendingError>>>::from_residual(move _35) -> [return: bb18, unwind: bb45];
    }

    bb18: {
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_26);
        goto -> bb41;
    }

    bb19: {
        StorageLive(_39);
        StorageLive(_40);
        _40 = _25;
        _39 = Ge(move _40, const _);
        switchInt(move _39) -> [0: bb23, otherwise: bb20];
    }

    bb20: {
        StorageDead(_40);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = const "Switchboard oracle price is stale";
        _43 = &(*_44);
        _42 = solana_program::log::sol_log(move _43) -> [return: bb21, unwind: bb45];
    }

    bb21: {
        StorageDead(_43);
        StorageDead(_44);
        StorageDead(_42);
        StorageLive(_45);
        StorageLive(_46);
        _46 = InvalidOracleConfig;
        _45 = <LendingError as Into<anchor_lang::prelude::ProgramError>>::into(move _46) -> [return: bb22, unwind: bb45];
    }

    bb22: {
        StorageDead(_46);
        _0 = Result::<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError>::Err(move _45);
        StorageDead(_45);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_37);
        goto -> bb41;
    }

    bb23: {
        StorageDead(_40);
        goto -> bb24;
    }

    bb24: {
        _37 = const ();
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_37);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = &(*_14);
        _49 = AggregatorAccountData::get_result(move _50) -> [return: bb25, unwind: bb45];
    }

    bb25: {
        StorageDead(_50);
        _48 = <Result<switchboard_v2::SwitchboardDecimal, anchor_lang::error::Error> as Try>::branch(move _49) -> [return: bb26, unwind: bb45];
    }

    bb26: {
        StorageDead(_49);
        _51 = discriminant(_48);
        switchInt(move _51) -> [0: bb27, 1: bb28, otherwise: bb4];
    }

    bb27: {
        StorageLive(_55);
        _55 = ((_48 as Continue).0: switchboard_v2::SwitchboardDecimal);
        _47 = _55;
        StorageDead(_55);
        _79 = discriminant(_48);
        StorageDead(_48);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _58 = (_47.0: i128);
        _57 = Lt(move _58, const 0_i128);
        switchInt(move _57) -> [0: bb33, otherwise: bb30];
    }

    bb28: {
        StorageLive(_52);
        _52 = move ((_48 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_54);
        _54 = move _52;
        _0 = <Result<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError> as FromResidual<Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _54) -> [return: bb29, unwind: bb47];
    }

    bb29: {
        StorageDead(_54);
        StorageDead(_52);
        _81 = discriminant(_48);
        StorageDead(_48);
        goto -> bb40;
    }

    bb30: {
        StorageDead(_58);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = const "Switchboard oracle price is negative which is not allowed";
        _61 = &(*_62);
        _60 = solana_program::log::sol_log(move _61) -> [return: bb31, unwind: bb45];
    }

    bb31: {
        StorageDead(_61);
        StorageDead(_62);
        StorageDead(_60);
        StorageLive(_63);
        StorageLive(_64);
        _64 = InvalidOracleConfig;
        _63 = <LendingError as Into<anchor_lang::prelude::ProgramError>>::into(move _64) -> [return: bb32, unwind: bb45];
    }

    bb32: {
        StorageDead(_64);
        _0 = Result::<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError>::Err(move _63);
        StorageDead(_63);
        StorageDead(_57);
        StorageDead(_56);
        goto -> bb40;
    }

    bb33: {
        StorageDead(_58);
        _56 = const ();
        StorageDead(_57);
        StorageDead(_56);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        _67 = (_47.0: i128);
        _66 = move _67 as u128 (IntToInt);
        StorageDead(_67);
        _65 = <solend_sdk::math::Decimal as From<u128>>::from(move _66) -> [return: bb34, unwind: bb45];
    }

    bb34: {
        StorageDead(_66);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = (_47.1: u32);
        _70 = __core::num::<impl u128>::checked_pow(const 10_u128, move _71) -> [return: bb35, unwind: bb45];
    }

    bb35: {
        StorageDead(_71);
        _69 = Option::<u128>::unwrap(move _70) -> [return: bb36, unwind: bb45];
    }

    bb36: {
        StorageDead(_70);
        _68 = <solend_sdk::math::Decimal as From<u128>>::from(move _69) -> [return: bb37, unwind: bb45];
    }

    bb37: {
        StorageDead(_69);
        StorageLive(_72);
        _72 = _65;
        StorageLive(_73);
        _73 = _68;
        _0 = <solend_sdk::math::Decimal as TryDiv<solend_sdk::math::Decimal>>::try_div(move _72, move _73) -> [return: bb38, unwind: bb45];
    }

    bb38: {
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_68);
        StorageDead(_65);
        StorageDead(_47);
        StorageDead(_25);
        StorageDead(_14);
        drop(_5) -> [return: bb39, unwind: bb46];
    }

    bb39: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb44;
    }

    bb40: {
        StorageDead(_47);
        goto -> bb41;
    }

    bb41: {
        StorageDead(_25);
        goto -> bb42;
    }

    bb42: {
        StorageDead(_14);
        drop(_5) -> [return: bb43, unwind: bb46];
    }

    bb43: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb44;
    }

    bb44: {
        return;
    }

    bb45 (cleanup): {
        drop(_5) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        resume;
    }

    bb47 (cleanup): {
        _87 = discriminant(_48);
        goto -> bb45;
    }

    bb48 (cleanup): {
        _88 = discriminant(_15);
        goto -> bb45;
    }

    bb49 (cleanup): {
        _89 = discriminant(_6);
        goto -> bb46;
    }
}
