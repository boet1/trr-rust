// MIR for `validate_switchboard_v2_keys` after PreCodegen

fn validate_switchboard_v2_keys(_1: &AccountInfo<'_>) -> Result<(), anchor_lang::prelude::ProgramError> {
    debug switchboard_feed_info => _1;
    let mut _0: std::result::Result<(), anchor_lang::prelude::ProgramError>;
    let _2: ();
    let mut _3: bool;
    let mut _4: &anchor_lang::prelude::Pubkey;
    let mut _5: &anchor_lang::prelude::Pubkey;
    let _6: anchor_lang::prelude::Pubkey;
    let mut _7: !;
    let mut _8: ();
    let _9: ();
    let mut _10: bool;
    let mut _11: &&anchor_lang::prelude::Pubkey;
    let mut _12: &&anchor_lang::prelude::Pubkey;
    let _13: &anchor_lang::prelude::Pubkey;
    let _14: anchor_lang::prelude::Pubkey;
    let mut _15: bool;
    let mut _16: &&anchor_lang::prelude::Pubkey;
    let mut _17: &&anchor_lang::prelude::Pubkey;
    let _18: &anchor_lang::prelude::Pubkey;
    let _19: anchor_lang::prelude::Pubkey;
    let mut _20: !;
    let _21: ();
    let mut _22: &str;
    let _23: &str;
    let mut _24: anchor_lang::prelude::ProgramError;
    let mut _25: solend_sdk::error::LendingError;
    let _26: &std::cell::Ref<'_, &mut [u8]>;
    let _27: std::cell::Ref<'_, &mut [u8]>;
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _29: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _30: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _31: isize;
    let _32: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _35: std::cell::Ref<'_, &mut [u8]>;
    let _36: &switchboard_v2::AggregatorAccountData;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, &switchboard_v2::AggregatorAccountData>;
    let mut _38: std::result::Result<&switchboard_v2::AggregatorAccountData, anchor_lang::error::Error>;
    let mut _39: &[u8];
    let _40: &&mut [u8];
    let mut _41: &std::cell::Ref<'_, &mut [u8]>;
    let mut _42: isize;
    let mut _44: !;
    let mut _45: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _47: ();
    let mut _48: &anchor_lang::prelude::Pubkey;
    let mut _49: &anchor_lang::prelude::Pubkey;
    let mut _50: &mut [u8];
    let mut _51: isize;
    let mut _52: isize;
    let mut _53: isize;
    let mut _54: isize;
    let mut _55: isize;
    let mut _56: isize;
    let mut _57: isize;
    let mut _58: isize;
    let mut _59: isize;
    let mut _60: isize;
    scope 1 {
        debug data => _26;
        let _43: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _46: &switchboard_v2::AggregatorAccountData;
        scope 6 {
            debug residual => _43;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _46;
            scope 9 {
            }
        }
    }
    scope 2 {
        debug residual => _32;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _35;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _49 = deref_copy ((*_1).0: &anchor_lang::prelude::Pubkey);
        _4 = &(*_49);
        StorageLive(_5);
        _48 = const _;
        _5 = &(*_48);
        _3 = <Pubkey as PartialEq>::eq(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _3) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_8);
        _8 = ();
        _0 = Result::<(), anchor_lang::prelude::ProgramError>::Ok(move _8);
        StorageDead(_8);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb29;
    }

    bb3: {
        StorageDead(_5);
        StorageDead(_4);
        _2 = const ();
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &((*_1).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = switchboard_v2_mainnet::id() -> [return: bb4, unwind continue];
    }

    bb4: {
        _13 = &_14;
        _12 = &_13;
        _10 = <&Pubkey as PartialEq>::ne(move _11, move _12) -> [return: bb5, unwind continue];
    }

    bb5: {
        switchInt(move _10) -> [0: bb13, otherwise: bb6];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &((*_1).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = switchboard_v2_devnet::id() -> [return: bb7, unwind continue];
    }

    bb7: {
        _18 = &_19;
        _17 = &_18;
        _15 = <&Pubkey as PartialEq>::ne(move _16, move _17) -> [return: bb8, unwind continue];
    }

    bb8: {
        switchInt(move _15) -> [0: bb12, otherwise: bb9];
    }

    bb9: {
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = const "Switchboard account provided is not owned by the switchboard oracle program";
        _22 = &(*_23);
        _21 = solana_program::log::sol_log(move _22) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_22);
        StorageDead(_23);
        StorageDead(_21);
        StorageLive(_24);
        StorageLive(_25);
        _25 = InvalidOracleConfig;
        _24 = <LendingError as Into<anchor_lang::prelude::ProgramError>>::into(move _25) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_25);
        _0 = Result::<(), anchor_lang::prelude::ProgramError>::Err(move _24);
        StorageDead(_24);
        StorageDead(_15);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb29;
    }

    bb12: {
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb14;
    }

    bb13: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb14;
    }

    bb14: {
        _9 = const ();
        StorageDead(_15);
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = &(*_1);
        _29 = AccountInfo::<'_>::try_borrow_data(move _30) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_30);
        _28 = <Result<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError> as Try>::branch(move _29) -> [return: bb16, unwind: bb31];
    }

    bb16: {
        StorageDead(_29);
        _31 = discriminant(_28);
        switchInt(move _31) -> [0: bb17, 1: bb19, otherwise: bb18];
    }

    bb17: {
        StorageLive(_35);
        _35 = move ((_28 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _27 = move _35;
        StorageDead(_35);
        _26 = &_27;
        _51 = discriminant(_28);
        StorageDead(_28);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = &(*_26);
        _40 = <Ref<'_, &mut [u8]> as Deref>::deref(move _41) -> [return: bb21, unwind: bb30];
    }

    bb18: {
        unreachable;
    }

    bb19: {
        StorageLive(_32);
        _32 = move ((_28 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_34);
        _34 = move _32;
        _0 = <Result<(), anchor_lang::prelude::ProgramError> as FromResidual<Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _34) -> [return: bb20, unwind: bb33];
    }

    bb20: {
        StorageDead(_34);
        StorageDead(_32);
        _57 = discriminant(_28);
        StorageDead(_28);
        goto -> bb28;
    }

    bb21: {
        _50 = deref_copy (*_40);
        _39 = &(*_50);
        StorageDead(_41);
        _38 = AggregatorAccountData::new_from_bytes(move _39) -> [return: bb22, unwind: bb30];
    }

    bb22: {
        StorageDead(_39);
        _37 = <Result<&AggregatorAccountData, anchor_lang::error::Error> as Try>::branch(move _38) -> [return: bb23, unwind: bb30];
    }

    bb23: {
        StorageDead(_38);
        _42 = discriminant(_37);
        switchInt(move _42) -> [0: bb24, 1: bb25, otherwise: bb18];
    }

    bb24: {
        StorageLive(_46);
        _46 = ((_37 as Continue).0: &switchboard_v2::AggregatorAccountData);
        _36 = _46;
        StorageDead(_46);
        _53 = discriminant(_37);
        StorageDead(_40);
        StorageDead(_37);
        StorageDead(_36);
        StorageLive(_47);
        _47 = ();
        _0 = Result::<(), anchor_lang::prelude::ProgramError>::Ok(move _47);
        StorageDead(_47);
        drop(_27) -> [return: bb27, unwind: bb31];
    }

    bb25: {
        StorageLive(_43);
        _43 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_45);
        _45 = move _43;
        _0 = <Result<(), anchor_lang::prelude::ProgramError> as FromResidual<Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _45) -> [return: bb26, unwind: bb32];
    }

    bb26: {
        StorageDead(_45);
        StorageDead(_43);
        _55 = discriminant(_37);
        StorageDead(_40);
        StorageDead(_37);
        StorageDead(_36);
        drop(_27) -> [return: bb28, unwind: bb31];
    }

    bb27: {
        StorageDead(_27);
        StorageDead(_26);
        goto -> bb29;
    }

    bb28: {
        StorageDead(_27);
        StorageDead(_26);
        goto -> bb29;
    }

    bb29: {
        return;
    }

    bb30 (cleanup): {
        drop(_27) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        resume;
    }

    bb32 (cleanup): {
        _59 = discriminant(_37);
        goto -> bb30;
    }

    bb33 (cleanup): {
        _60 = discriminant(_28);
        goto -> bb31;
    }
}
