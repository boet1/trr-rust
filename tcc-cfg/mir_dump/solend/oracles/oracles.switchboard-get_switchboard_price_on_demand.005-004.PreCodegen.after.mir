// MIR for `get_switchboard_price_on_demand` after PreCodegen

fn get_switchboard_price_on_demand(_1: &AccountInfo<'_>, _2: &Clock, _3: bool) -> Result<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError> {
    debug switchboard_feed_info => _1;
    debug clock => _2;
    debug check_staleness => _3;
    let mut _0: std::result::Result<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError>;
    let _4: std::cell::Ref<'_, &mut [u8]>;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _6: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _7: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _12: std::cell::Ref<'_, &mut [u8]>;
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::cell::Ref<'_, switchboard_on_demand::PullFeedAccountData>>;
    let mut _15: std::result::Result<std::cell::Ref<'_, switchboard_on_demand::PullFeedAccountData>, anchor_lang::prelude::ProgramError>;
    let mut _16: std::result::Result<std::cell::Ref<'_, switchboard_on_demand::PullFeedAccountData>, switchboard_on_demand::OnDemandError>;
    let mut _17: std::cell::Ref<'_, &mut [u8]>;
    let mut _18: {closure@token-lending\oracles\src\switchboard.rs:48:52: 48:55};
    let mut _19: isize;
    let mut _21: !;
    let mut _22: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>, u64>;
    let mut _26: std::result::Result<u64, solend_sdk::error::LendingError>;
    let mut _27: std::option::Option<u64>;
    let mut _28: u64;
    let mut _29: u64;
    let mut _30: &switchboard_on_demand::PullFeedAccountData;
    let mut _31: &std::cell::Ref<'_, switchboard_on_demand::PullFeedAccountData>;
    let mut _32: solend_sdk::error::LendingError;
    let mut _33: isize;
    let mut _35: !;
    let mut _36: std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>;
    let _38: ();
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: u64;
    let mut _42: !;
    let _43: ();
    let mut _44: &str;
    let _45: &str;
    let mut _46: anchor_lang::prelude::ProgramError;
    let mut _47: solend_sdk::error::LendingError;
    let mut _49: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, switchboard_on_demand::prelude::rust_decimal::Decimal>;
    let mut _50: std::result::Result<switchboard_on_demand::prelude::rust_decimal::Decimal, anchor_lang::prelude::ProgramError>;
    let mut _51: std::option::Option<switchboard_on_demand::prelude::rust_decimal::Decimal>;
    let mut _52: &switchboard_on_demand::PullFeedAccountData;
    let _53: &switchboard_on_demand::PullFeedAccountData;
    let mut _54: &std::cell::Ref<'_, switchboard_on_demand::PullFeedAccountData>;
    let mut _55: anchor_lang::prelude::ProgramError;
    let mut _56: isize;
    let mut _58: !;
    let mut _59: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _61: ();
    let mut _62: bool;
    let mut _63: i128;
    let mut _64: &switchboard_on_demand::prelude::rust_decimal::Decimal;
    let mut _65: !;
    let _66: ();
    let mut _67: &str;
    let _68: &str;
    let mut _69: anchor_lang::prelude::ProgramError;
    let mut _70: solend_sdk::error::LendingError;
    let mut _72: u128;
    let mut _73: i128;
    let mut _74: &switchboard_on_demand::prelude::rust_decimal::Decimal;
    let mut _76: u128;
    let mut _77: std::option::Option<u128>;
    let mut _78: u32;
    let mut _79: &switchboard_on_demand::prelude::rust_decimal::Decimal;
    let mut _81: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, solend_sdk::math::Decimal>;
    let mut _82: std::result::Result<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError>;
    let mut _83: solend_sdk::math::Decimal;
    let mut _84: solend_sdk::math::Decimal;
    let mut _85: isize;
    let mut _87: !;
    let mut _88: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _91: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, switchboard_on_demand::prelude::rust_decimal::Decimal>;
    let mut _92: std::result::Result<switchboard_on_demand::prelude::rust_decimal::Decimal, anchor_lang::prelude::ProgramError>;
    let mut _93: std::option::Option<switchboard_on_demand::prelude::rust_decimal::Decimal>;
    let mut _94: &switchboard_on_demand::PullFeedAccountData;
    let _95: &switchboard_on_demand::PullFeedAccountData;
    let mut _96: &std::cell::Ref<'_, switchboard_on_demand::PullFeedAccountData>;
    let mut _97: anchor_lang::prelude::ProgramError;
    let mut _98: isize;
    let mut _100: !;
    let mut _101: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _103: ();
    let mut _104: bool;
    let mut _105: i128;
    let mut _106: &switchboard_on_demand::prelude::rust_decimal::Decimal;
    let mut _107: !;
    let _108: ();
    let mut _109: &str;
    let _110: &str;
    let mut _111: anchor_lang::prelude::ProgramError;
    let mut _112: solend_sdk::error::LendingError;
    let mut _114: u128;
    let mut _115: i128;
    let mut _116: &switchboard_on_demand::prelude::rust_decimal::Decimal;
    let mut _118: u128;
    let mut _119: std::option::Option<u128>;
    let mut _120: u32;
    let mut _121: &switchboard_on_demand::prelude::rust_decimal::Decimal;
    let mut _123: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, solend_sdk::math::Decimal>;
    let mut _124: std::result::Result<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError>;
    let mut _125: solend_sdk::math::Decimal;
    let mut _126: solend_sdk::math::Decimal;
    let mut _127: isize;
    let mut _129: !;
    let mut _130: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _132: ();
    let mut _133: bool;
    let mut _134: &solend_sdk::math::Decimal;
    let _135: solend_sdk::math::Decimal;
    let mut _136: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, solend_sdk::math::Decimal>;
    let mut _137: std::result::Result<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError>;
    let mut _138: solend_sdk::math::Decimal;
    let mut _139: isize;
    let mut _141: !;
    let mut _142: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _144: &solend_sdk::math::Decimal;
    let mut _145: !;
    let _146: ();
    let mut _147: &str;
    let _148: &str;
    let mut _149: &std::string::String;
    let _150: &std::string::String;
    let _151: std::string::String;
    let mut _153: std::fmt::Arguments<'_>;
    let mut _154: &[&str];
    let mut _155: &[&str; 2];
    let _156: &[&str; 2];
    let _157: [&str; 2];
    let mut _158: &[core::fmt::rt::Argument<'_>];
    let mut _159: &[core::fmt::rt::Argument<'_>; 2];
    let _160: &[core::fmt::rt::Argument<'_>; 2];
    let _161: [core::fmt::rt::Argument<'_>; 2];
    let mut _162: core::fmt::rt::Argument<'_>;
    let mut _163: &solend_sdk::math::Decimal;
    let _164: &solend_sdk::math::Decimal;
    let mut _165: core::fmt::rt::Argument<'_>;
    let mut _166: &solend_sdk::math::Decimal;
    let _167: &solend_sdk::math::Decimal;
    let mut _168: anchor_lang::prelude::ProgramError;
    let mut _169: solend_sdk::error::LendingError;
    let mut _170: solend_sdk::math::Decimal;
    let mut _172: bool;
    let mut _173: bool;
    let mut _174: isize;
    let mut _175: isize;
    let mut _176: isize;
    let mut _177: isize;
    let mut _178: isize;
    let mut _179: isize;
    let mut _180: isize;
    let mut _181: isize;
    let mut _182: isize;
    let mut _183: isize;
    let mut _184: isize;
    let mut _185: isize;
    let mut _186: isize;
    let mut _187: isize;
    let mut _188: isize;
    let mut _189: isize;
    let mut _190: isize;
    let mut _191: isize;
    let mut _192: isize;
    let mut _193: isize;
    let mut _194: isize;
    let mut _195: isize;
    let mut _196: isize;
    let mut _197: isize;
    let mut _198: isize;
    let mut _199: isize;
    let mut _200: isize;
    let mut _201: isize;
    let mut _202: isize;
    let mut _203: isize;
    let mut _204: isize;
    let mut _205: isize;
    let mut _206: isize;
    let mut _207: isize;
    let mut _208: isize;
    let mut _209: isize;
    let mut _210: isize;
    scope 1 {
        debug data => _4;
        let _13: std::cell::Ref<'_, switchboard_on_demand::PullFeedAccountData>;
        let _20: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
        let _23: std::cell::Ref<'_, switchboard_on_demand::PullFeedAccountData>;
        scope 6 {
            debug feed => _13;
            let _24: u64;
            let _34: std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>;
            let _37: u64;
            scope 11 {
                debug slots_elapsed => _24;
                let _48: switchboard_on_demand::prelude::rust_decimal::Decimal;
                let _57: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                let _60: switchboard_on_demand::prelude::rust_decimal::Decimal;
                scope 16 {
                    debug price_desc => _48;
                    let _71: solend_sdk::math::Decimal;
                    scope 21 {
                        debug price_mantissa => _71;
                        let _75: solend_sdk::math::Decimal;
                        scope 22 {
                            debug exp => _75;
                            let _80: solend_sdk::math::Decimal;
                            let _86: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                            let _89: solend_sdk::math::Decimal;
                            scope 23 {
                                debug price => _80;
                                let _90: switchboard_on_demand::prelude::rust_decimal::Decimal;
                                let _99: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                let _102: switchboard_on_demand::prelude::rust_decimal::Decimal;
                                scope 28 {
                                    debug range_desc => _90;
                                    let _113: solend_sdk::math::Decimal;
                                    scope 33 {
                                        debug range_mantissa => _113;
                                        let _117: solend_sdk::math::Decimal;
                                        scope 34 {
                                            debug range_exp => _117;
                                            let _122: solend_sdk::math::Decimal;
                                            let _128: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                            let _131: solend_sdk::math::Decimal;
                                            scope 35 {
                                                debug range => _122;
                                                let _140: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                let _143: solend_sdk::math::Decimal;
                                                let _152: std::string::String;
                                                let mut _171: &[&str; 2];
                                                scope 40 {
                                                    debug residual => _140;
                                                    scope 41 {
                                                    }
                                                }
                                                scope 42 {
                                                    debug val => _143;
                                                    scope 43 {
                                                    }
                                                }
                                                scope 44 {
                                                    debug res => _152;
                                                }
                                            }
                                            scope 36 {
                                                debug residual => _128;
                                                scope 37 {
                                                }
                                            }
                                            scope 38 {
                                                debug val => _131;
                                                scope 39 {
                                                }
                                            }
                                        }
                                    }
                                }
                                scope 29 {
                                    debug residual => _99;
                                    scope 30 {
                                    }
                                }
                                scope 31 {
                                    debug val => _102;
                                    scope 32 {
                                    }
                                }
                            }
                            scope 24 {
                                debug residual => _86;
                                scope 25 {
                                }
                            }
                            scope 26 {
                                debug val => _89;
                                scope 27 {
                                }
                            }
                        }
                    }
                }
                scope 17 {
                    debug residual => _57;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _60;
                    scope 20 {
                    }
                }
            }
            scope 12 {
                debug residual => _34;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _37;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _20;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _23;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _9;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _12;
        scope 5 {
        }
    }

    bb0: {
        _173 = const false;
        _172 = const false;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &(*_1);
        _6 = AccountInfo::<'_>::try_borrow_data(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = <Result<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError> as Try>::branch(move _6) -> [return: bb2, unwind: bb100];
    }

    bb2: {
        StorageDead(_6);
        _8 = discriminant(_5);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = move ((_5 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _173 = const true;
        _4 = move _12;
        StorageDead(_12);
        _174 = discriminant(_5);
        StorageDead(_5);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _173 = const false;
        _17 = move _4;
        _16 = PullFeedAccountData::parse(move _17) -> [return: bb7, unwind: bb108];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <Result<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError> as FromResidual<Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _11) -> [return: bb6, unwind: bb109];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _202 = discriminant(_5);
        StorageDead(_5);
        goto -> bb96;
    }

    bb7: {
        StorageDead(_17);
        StorageLive(_18);
        _18 = {closure@token-lending\oracles\src\switchboard.rs:48:52: 48:55};
        _15 = Result::<Ref<'_, PullFeedAccountData>, OnDemandError>::map_err::<anchor_lang::prelude::ProgramError, {closure@token-lending\oracles\src\switchboard.rs:48:52: 48:55}>(move _16, move _18) -> [return: bb8, unwind: bb108];
    }

    bb8: {
        StorageDead(_18);
        StorageDead(_16);
        _14 = <Result<Ref<'_, PullFeedAccountData>, anchor_lang::prelude::ProgramError> as Try>::branch(move _15) -> [return: bb9, unwind: bb108];
    }

    bb9: {
        StorageDead(_15);
        _19 = discriminant(_14);
        switchInt(move _19) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_23);
        _23 = move ((_14 as Continue).0: std::cell::Ref<'_, switchboard_on_demand::PullFeedAccountData>);
        _13 = move _23;
        StorageDead(_23);
        _176 = discriminant(_14);
        StorageDead(_14);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = ((*_2).0: u64);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = &_13;
        _30 = <Ref<'_, PullFeedAccountData> as Deref>::deref(move _31) -> [return: bb13, unwind: bb99];
    }

    bb11: {
        StorageLive(_20);
        _20 = move ((_14 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_22);
        _22 = move _20;
        _0 = <Result<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError> as FromResidual<Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _22) -> [return: bb12, unwind: bb106];
    }

    bb12: {
        StorageDead(_22);
        StorageDead(_20);
        _200 = discriminant(_14);
        StorageDead(_14);
        goto -> bb95;
    }

    bb13: {
        StorageDead(_31);
        _29 = (((*_30).14: switchboard_on_demand::CurrentResult).7: u64);
        _27 = __core::num::<impl u64>::checked_sub(move _28, move _29) -> [return: bb14, unwind: bb99];
    }

    bb14: {
        StorageDead(_29);
        StorageDead(_28);
        StorageLive(_32);
        _32 = MathOverflow;
        _26 = Option::<u64>::ok_or::<LendingError>(move _27, move _32) -> [return: bb15, unwind: bb99];
    }

    bb15: {
        StorageDead(_32);
        StorageDead(_27);
        _25 = <Result<u64, LendingError> as Try>::branch(move _26) -> [return: bb16, unwind: bb99];
    }

    bb16: {
        StorageDead(_26);
        _33 = discriminant(_25);
        switchInt(move _33) -> [0: bb17, 1: bb18, otherwise: bb4];
    }

    bb17: {
        StorageLive(_37);
        _37 = ((_25 as Continue).0: u64);
        _24 = _37;
        StorageDead(_37);
        StorageDead(_30);
        StorageDead(_25);
        StorageLive(_38);
        StorageLive(_39);
        _39 = _3;
        switchInt(move _39) -> [0: bb25, otherwise: bb20];
    }

    bb18: {
        StorageLive(_34);
        _34 = move ((_25 as Break).0: std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>);
        StorageLive(_36);
        _36 = move _34;
        _0 = <Result<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError> as FromResidual<Result<Infallible, LendingError>>>::from_residual(move _36) -> [return: bb19, unwind: bb99];
    }

    bb19: {
        StorageDead(_36);
        StorageDead(_34);
        StorageDead(_30);
        StorageDead(_25);
        goto -> bb94;
    }

    bb20: {
        StorageLive(_40);
        StorageLive(_41);
        _41 = _24;
        _40 = Ge(move _41, const _);
        switchInt(move _40) -> [0: bb24, otherwise: bb21];
    }

    bb21: {
        StorageDead(_41);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = const "Switchboard oracle price is stale";
        _44 = &(*_45);
        _43 = solana_program::log::sol_log(move _44) -> [return: bb22, unwind: bb99];
    }

    bb22: {
        StorageDead(_44);
        StorageDead(_45);
        StorageDead(_43);
        StorageLive(_46);
        StorageLive(_47);
        _47 = InvalidOracleConfig;
        _46 = <LendingError as Into<anchor_lang::prelude::ProgramError>>::into(move _47) -> [return: bb23, unwind: bb99];
    }

    bb23: {
        StorageDead(_47);
        _0 = Result::<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError>::Err(move _46);
        StorageDead(_46);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_38);
        goto -> bb94;
    }

    bb24: {
        StorageDead(_41);
        goto -> bb25;
    }

    bb25: {
        _38 = const ();
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_38);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &_13;
        _53 = <Ref<'_, PullFeedAccountData> as Deref>::deref(move _54) -> [return: bb26, unwind: bb99];
    }

    bb26: {
        _52 = &(*_53);
        StorageDead(_54);
        _51 = PullFeedAccountData::value(move _52) -> [return: bb27, unwind: bb99];
    }

    bb27: {
        StorageDead(_52);
        StorageLive(_55);
        _55 = anchor_lang::prelude::ProgramError::InvalidAccountData;
        _50 = Option::<switchboard_on_demand::prelude::rust_decimal::Decimal>::ok_or::<anchor_lang::prelude::ProgramError>(move _51, move _55) -> [return: bb28, unwind: bb99];
    }

    bb28: {
        StorageDead(_55);
        StorageDead(_51);
        _49 = <Result<switchboard_on_demand::prelude::rust_decimal::Decimal, anchor_lang::prelude::ProgramError> as Try>::branch(move _50) -> [return: bb29, unwind: bb99];
    }

    bb29: {
        StorageDead(_50);
        _56 = discriminant(_49);
        switchInt(move _56) -> [0: bb30, 1: bb31, otherwise: bb4];
    }

    bb30: {
        StorageLive(_60);
        _60 = ((_49 as Continue).0: switchboard_on_demand::prelude::rust_decimal::Decimal);
        _48 = _60;
        StorageDead(_60);
        _178 = discriminant(_49);
        StorageDead(_53);
        StorageDead(_49);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = &_48;
        _63 = switchboard_on_demand::prelude::rust_decimal::Decimal::mantissa(move _64) -> [return: bb33, unwind: bb99];
    }

    bb31: {
        StorageLive(_57);
        _57 = move ((_49 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_59);
        _59 = move _57;
        _0 = <Result<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError> as FromResidual<Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _59) -> [return: bb32, unwind: bb105];
    }

    bb32: {
        StorageDead(_59);
        StorageDead(_57);
        _198 = discriminant(_49);
        StorageDead(_53);
        StorageDead(_49);
        goto -> bb93;
    }

    bb33: {
        StorageDead(_64);
        _62 = Lt(move _63, const 0_i128);
        switchInt(move _62) -> [0: bb37, otherwise: bb34];
    }

    bb34: {
        StorageDead(_63);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = const "Switchboard oracle price is negative which is not allowed";
        _67 = &(*_68);
        _66 = solana_program::log::sol_log(move _67) -> [return: bb35, unwind: bb99];
    }

    bb35: {
        StorageDead(_67);
        StorageDead(_68);
        StorageDead(_66);
        StorageLive(_69);
        StorageLive(_70);
        _70 = InvalidOracleConfig;
        _69 = <LendingError as Into<anchor_lang::prelude::ProgramError>>::into(move _70) -> [return: bb36, unwind: bb99];
    }

    bb36: {
        StorageDead(_70);
        _0 = Result::<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError>::Err(move _69);
        StorageDead(_69);
        StorageDead(_62);
        StorageDead(_61);
        goto -> bb93;
    }

    bb37: {
        StorageDead(_63);
        _61 = const ();
        StorageDead(_62);
        StorageDead(_61);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = &_48;
        _73 = switchboard_on_demand::prelude::rust_decimal::Decimal::mantissa(move _74) -> [return: bb38, unwind: bb99];
    }

    bb38: {
        StorageDead(_74);
        _72 = move _73 as u128 (IntToInt);
        StorageDead(_73);
        _71 = <solend_sdk::math::Decimal as From<u128>>::from(move _72) -> [return: bb39, unwind: bb99];
    }

    bb39: {
        StorageDead(_72);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = &_48;
        _78 = switchboard_on_demand::prelude::rust_decimal::Decimal::scale(move _79) -> [return: bb40, unwind: bb99];
    }

    bb40: {
        StorageDead(_79);
        _77 = __core::num::<impl u128>::checked_pow(const 10_u128, move _78) -> [return: bb41, unwind: bb99];
    }

    bb41: {
        StorageDead(_78);
        _76 = Option::<u128>::unwrap(move _77) -> [return: bb42, unwind: bb99];
    }

    bb42: {
        StorageDead(_77);
        _75 = <solend_sdk::math::Decimal as From<u128>>::from(move _76) -> [return: bb43, unwind: bb99];
    }

    bb43: {
        StorageDead(_76);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _83 = _71;
        StorageLive(_84);
        _84 = _75;
        _82 = <solend_sdk::math::Decimal as TryDiv<solend_sdk::math::Decimal>>::try_div(move _83, move _84) -> [return: bb44, unwind: bb99];
    }

    bb44: {
        StorageDead(_84);
        StorageDead(_83);
        _81 = <Result<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError> as Try>::branch(move _82) -> [return: bb45, unwind: bb99];
    }

    bb45: {
        StorageDead(_82);
        _85 = discriminant(_81);
        switchInt(move _85) -> [0: bb46, 1: bb47, otherwise: bb4];
    }

    bb46: {
        StorageLive(_89);
        _89 = ((_81 as Continue).0: solend_sdk::math::Decimal);
        _80 = _89;
        StorageDead(_89);
        _180 = discriminant(_81);
        StorageDead(_81);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = &_13;
        _95 = <Ref<'_, PullFeedAccountData> as Deref>::deref(move _96) -> [return: bb49, unwind: bb99];
    }

    bb47: {
        StorageLive(_86);
        _86 = move ((_81 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_88);
        _88 = move _86;
        _0 = <Result<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError> as FromResidual<Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _88) -> [return: bb48, unwind: bb104];
    }

    bb48: {
        StorageDead(_88);
        StorageDead(_86);
        _196 = discriminant(_81);
        StorageDead(_81);
        goto -> bb92;
    }

    bb49: {
        _94 = &(*_95);
        StorageDead(_96);
        _93 = PullFeedAccountData::range(move _94) -> [return: bb50, unwind: bb99];
    }

    bb50: {
        StorageDead(_94);
        StorageLive(_97);
        _97 = anchor_lang::prelude::ProgramError::InvalidAccountData;
        _92 = Option::<switchboard_on_demand::prelude::rust_decimal::Decimal>::ok_or::<anchor_lang::prelude::ProgramError>(move _93, move _97) -> [return: bb51, unwind: bb99];
    }

    bb51: {
        StorageDead(_97);
        StorageDead(_93);
        _91 = <Result<switchboard_on_demand::prelude::rust_decimal::Decimal, anchor_lang::prelude::ProgramError> as Try>::branch(move _92) -> [return: bb52, unwind: bb99];
    }

    bb52: {
        StorageDead(_92);
        _98 = discriminant(_91);
        switchInt(move _98) -> [0: bb53, 1: bb54, otherwise: bb4];
    }

    bb53: {
        StorageLive(_102);
        _102 = ((_91 as Continue).0: switchboard_on_demand::prelude::rust_decimal::Decimal);
        _90 = _102;
        StorageDead(_102);
        _182 = discriminant(_91);
        StorageDead(_95);
        StorageDead(_91);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        _106 = &_90;
        _105 = switchboard_on_demand::prelude::rust_decimal::Decimal::mantissa(move _106) -> [return: bb56, unwind: bb99];
    }

    bb54: {
        StorageLive(_99);
        _99 = move ((_91 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_101);
        _101 = move _99;
        _0 = <Result<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError> as FromResidual<Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _101) -> [return: bb55, unwind: bb103];
    }

    bb55: {
        StorageDead(_101);
        StorageDead(_99);
        _194 = discriminant(_91);
        StorageDead(_95);
        StorageDead(_91);
        goto -> bb91;
    }

    bb56: {
        StorageDead(_106);
        _104 = Lt(move _105, const 0_i128);
        switchInt(move _104) -> [0: bb60, otherwise: bb57];
    }

    bb57: {
        StorageDead(_105);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _110 = const "Switchboard oracle price range is negative which is not allowed";
        _109 = &(*_110);
        _108 = solana_program::log::sol_log(move _109) -> [return: bb58, unwind: bb99];
    }

    bb58: {
        StorageDead(_109);
        StorageDead(_110);
        StorageDead(_108);
        StorageLive(_111);
        StorageLive(_112);
        _112 = InvalidOracleConfig;
        _111 = <LendingError as Into<anchor_lang::prelude::ProgramError>>::into(move _112) -> [return: bb59, unwind: bb99];
    }

    bb59: {
        StorageDead(_112);
        _0 = Result::<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError>::Err(move _111);
        StorageDead(_111);
        StorageDead(_104);
        StorageDead(_103);
        goto -> bb91;
    }

    bb60: {
        StorageDead(_105);
        _103 = const ();
        StorageDead(_104);
        StorageDead(_103);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        _116 = &_90;
        _115 = switchboard_on_demand::prelude::rust_decimal::Decimal::mantissa(move _116) -> [return: bb61, unwind: bb99];
    }

    bb61: {
        StorageDead(_116);
        _114 = move _115 as u128 (IntToInt);
        StorageDead(_115);
        _113 = <solend_sdk::math::Decimal as From<u128>>::from(move _114) -> [return: bb62, unwind: bb99];
    }

    bb62: {
        StorageDead(_114);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        _121 = &_90;
        _120 = switchboard_on_demand::prelude::rust_decimal::Decimal::scale(move _121) -> [return: bb63, unwind: bb99];
    }

    bb63: {
        StorageDead(_121);
        _119 = __core::num::<impl u128>::checked_pow(const 10_u128, move _120) -> [return: bb64, unwind: bb99];
    }

    bb64: {
        StorageDead(_120);
        _118 = Option::<u128>::unwrap(move _119) -> [return: bb65, unwind: bb99];
    }

    bb65: {
        StorageDead(_119);
        _117 = <solend_sdk::math::Decimal as From<u128>>::from(move _118) -> [return: bb66, unwind: bb99];
    }

    bb66: {
        StorageDead(_118);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _125 = _113;
        StorageLive(_126);
        _126 = _117;
        _124 = <solend_sdk::math::Decimal as TryDiv<solend_sdk::math::Decimal>>::try_div(move _125, move _126) -> [return: bb67, unwind: bb99];
    }

    bb67: {
        StorageDead(_126);
        StorageDead(_125);
        _123 = <Result<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError> as Try>::branch(move _124) -> [return: bb68, unwind: bb99];
    }

    bb68: {
        StorageDead(_124);
        _127 = discriminant(_123);
        switchInt(move _127) -> [0: bb69, 1: bb70, otherwise: bb4];
    }

    bb69: {
        StorageLive(_131);
        _131 = ((_123 as Continue).0: solend_sdk::math::Decimal);
        _122 = _131;
        StorageDead(_131);
        _184 = discriminant(_123);
        StorageDead(_123);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        _138 = _122;
        _137 = <solend_sdk::math::Decimal as TryMul<u64>>::try_mul(move _138, const 10_u64) -> [return: bb72, unwind: bb99];
    }

    bb70: {
        StorageLive(_128);
        _128 = move ((_123 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_130);
        _130 = move _128;
        _0 = <Result<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError> as FromResidual<Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _130) -> [return: bb71, unwind: bb102];
    }

    bb71: {
        StorageDead(_130);
        StorageDead(_128);
        _192 = discriminant(_123);
        StorageDead(_123);
        goto -> bb90;
    }

    bb72: {
        StorageDead(_138);
        _136 = <Result<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError> as Try>::branch(move _137) -> [return: bb73, unwind: bb99];
    }

    bb73: {
        _172 = const true;
        StorageDead(_137);
        _139 = discriminant(_136);
        switchInt(move _139) -> [0: bb74, 1: bb75, otherwise: bb4];
    }

    bb74: {
        StorageLive(_143);
        _143 = ((_136 as Continue).0: solend_sdk::math::Decimal);
        _135 = _143;
        StorageDead(_143);
        _134 = &_135;
        StorageLive(_144);
        _144 = &_80;
        _133 = <solend_sdk::math::Decimal as PartialOrd>::gt(move _134, move _144) -> [return: bb77, unwind: bb101];
    }

    bb75: {
        StorageLive(_140);
        _140 = move ((_136 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_142);
        _142 = move _140;
        _0 = <Result<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError> as FromResidual<Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _142) -> [return: bb76, unwind: bb101];
    }

    bb76: {
        StorageDead(_142);
        StorageDead(_140);
        _190 = discriminant(_136);
        _172 = const false;
        StorageDead(_136);
        StorageDead(_135);
        StorageDead(_134);
        goto -> bb89;
    }

    bb77: {
        switchInt(move _133) -> [0: bb87, otherwise: bb78];
    }

    bb78: {
        StorageDead(_144);
        _186 = discriminant(_136);
        _172 = const false;
        StorageDead(_136);
        StorageDead(_135);
        StorageDead(_134);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        _171 = const _;
        _156 = &(*_171);
        _155 = &(*_156);
        _154 = move _155 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_155);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        _164 = &_80;
        _163 = &(*_164);
        _162 = __core::fmt::rt::Argument::<'_>::new_display::<solend_sdk::math::Decimal>(move _163) -> [return: bb79, unwind: bb99];
    }

    bb79: {
        StorageDead(_163);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        _167 = &_122;
        _166 = &(*_167);
        _165 = __core::fmt::rt::Argument::<'_>::new_display::<solend_sdk::math::Decimal>(move _166) -> [return: bb80, unwind: bb99];
    }

    bb80: {
        StorageDead(_166);
        _161 = [move _162, move _165];
        StorageDead(_165);
        StorageDead(_162);
        _160 = &_161;
        _159 = &(*_160);
        _158 = move _159 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_159);
        _153 = Arguments::<'_>::new_v1(move _154, move _158) -> [return: bb81, unwind: bb99];
    }

    bb81: {
        StorageDead(_158);
        StorageDead(_154);
        _152 = format(move _153) -> [return: bb82, unwind: bb99];
    }

    bb82: {
        StorageDead(_153);
        StorageDead(_167);
        StorageDead(_164);
        StorageDead(_161);
        StorageDead(_160);
        StorageDead(_156);
        _151 = move _152;
        StorageDead(_152);
        _150 = &_151;
        _149 = &(*_150);
        _148 = <String as Deref>::deref(move _149) -> [return: bb83, unwind: bb98];
    }

    bb83: {
        _147 = &(*_148);
        StorageDead(_149);
        _146 = solana_program::log::sol_log(move _147) -> [return: bb84, unwind: bb98];
    }

    bb84: {
        StorageDead(_147);
        drop(_151) -> [return: bb85, unwind: bb99];
    }

    bb85: {
        StorageDead(_151);
        StorageDead(_150);
        StorageDead(_148);
        StorageDead(_146);
        StorageLive(_168);
        StorageLive(_169);
        _169 = InvalidOracleConfig;
        _168 = <LendingError as Into<anchor_lang::prelude::ProgramError>>::into(move _169) -> [return: bb86, unwind: bb99];
    }

    bb86: {
        StorageDead(_169);
        _0 = Result::<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError>::Err(move _168);
        StorageDead(_168);
        goto -> bb89;
    }

    bb87: {
        StorageDead(_144);
        _188 = discriminant(_136);
        _172 = const false;
        StorageDead(_136);
        StorageDead(_135);
        StorageDead(_134);
        _132 = const ();
        StorageDead(_133);
        StorageDead(_132);
        StorageLive(_170);
        _170 = _80;
        _0 = Result::<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError>::Ok(move _170);
        StorageDead(_170);
        StorageDead(_122);
        StorageDead(_117);
        StorageDead(_113);
        StorageDead(_90);
        StorageDead(_80);
        StorageDead(_75);
        StorageDead(_71);
        StorageDead(_48);
        StorageDead(_24);
        drop(_13) -> [return: bb88, unwind: bb108];
    }

    bb88: {
        StorageDead(_13);
        _173 = const false;
        StorageDead(_4);
        goto -> bb97;
    }

    bb89: {
        StorageDead(_133);
        StorageDead(_132);
        goto -> bb90;
    }

    bb90: {
        StorageDead(_122);
        StorageDead(_117);
        StorageDead(_113);
        goto -> bb91;
    }

    bb91: {
        StorageDead(_90);
        goto -> bb92;
    }

    bb92: {
        StorageDead(_80);
        StorageDead(_75);
        StorageDead(_71);
        goto -> bb93;
    }

    bb93: {
        StorageDead(_48);
        goto -> bb94;
    }

    bb94: {
        StorageDead(_24);
        drop(_13) -> [return: bb95, unwind: bb108];
    }

    bb95: {
        StorageDead(_13);
        goto -> bb96;
    }

    bb96: {
        _173 = const false;
        StorageDead(_4);
        goto -> bb97;
    }

    bb97: {
        return;
    }

    bb98 (cleanup): {
        drop(_151) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        drop(_13) -> [return: bb108, unwind terminate(cleanup)];
    }

    bb100 (cleanup): {
        resume;
    }

    bb101 (cleanup): {
        _204 = discriminant(_136);
        goto -> bb99;
    }

    bb102 (cleanup): {
        _205 = discriminant(_123);
        goto -> bb99;
    }

    bb103 (cleanup): {
        _206 = discriminant(_91);
        goto -> bb99;
    }

    bb104 (cleanup): {
        _207 = discriminant(_81);
        goto -> bb99;
    }

    bb105 (cleanup): {
        _208 = discriminant(_49);
        goto -> bb99;
    }

    bb106 (cleanup): {
        _209 = discriminant(_14);
        goto -> bb108;
    }

    bb107 (cleanup): {
        drop(_4) -> [return: bb100, unwind terminate(cleanup)];
    }

    bb108 (cleanup): {
        switchInt(_173) -> [0: bb100, otherwise: bb107];
    }

    bb109 (cleanup): {
        _210 = discriminant(_5);
        goto -> bb100;
    }
}
