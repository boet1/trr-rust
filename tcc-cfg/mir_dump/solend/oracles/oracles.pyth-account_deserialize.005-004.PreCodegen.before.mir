// MIR for `account_deserialize` before PreCodegen

fn account_deserialize(_1: &AccountInfo<'_>) -> Result<T, anchor_lang::prelude::ProgramError> {
    debug account => _1;
    let mut _0: std::result::Result<T, anchor_lang::prelude::ProgramError>;
    let _2: std::vec::Vec<u8>;
    let mut _3: &[u8];
    let _4: &&mut [u8];
    let mut _5: &std::cell::Ref<'_, &mut [u8]>;
    let _6: std::cell::Ref<'_, &mut [u8]>;
    let mut _7: &std::cell::RefCell<&mut [u8]>;
    let _8: &std::cell::RefCell<&mut [u8]>;
    let mut _9: &std::rc::Rc<std::cell::RefCell<&mut [u8]>>;
    let _10: anchor_lang::prelude::AccountInfo<'_>;
    let mut _11: &anchor_lang::prelude::AccountInfo<'_>;
    let _13: &[u8];
    let mut _14: &std::vec::Vec<u8>;
    let _15: &std::vec::Vec<u8>;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>, T>;
    let mut _18: std::result::Result<T, solend_sdk::error::LendingError>;
    let mut _19: std::result::Result<T, anchor_lang::error::Error>;
    let mut _20: &mut &[u8];
    let mut _21: &mut &[u8];
    let mut _22: {closure@token-lending\oracles\src\pyth.rs:166:57: 166:60};
    let mut _23: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _24: isize;
    let mut _26: !;
    let mut _27: std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>;
    let mut _29: T;
    let mut _30: &mut [u8];
    let mut _31: isize;
    let mut _32: isize;
    let mut _33: isize;
    let mut _34: isize;
    let mut _35: isize;
    scope 1 {
        debug data => _2;
        let mut _12: &[u8];
        scope 2 {
            debug data => _12;
            let _16: T;
            let _25: std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>;
            let _28: T;
            scope 3 {
                debug user => _16;
            }
            scope 4 {
                debug residual => _25;
                scope 5 {
                }
            }
            scope 6 {
                debug val => _28;
                scope 7 {
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &(*_1);
        _10 = <AccountInfo<'_> as Clone>::clone(move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_11);
        _9 = &(_10.2: std::rc::Rc<std::cell::RefCell<&mut [u8]>>);
        _8 = <Rc<RefCell<&mut [u8]>> as Deref>::deref(move _9) -> [return: bb2, unwind: bb22];
    }

    bb2: {
        _7 = &(*_8);
        StorageDead(_9);
        _6 = RefCell::<&mut [u8]>::borrow(move _7) -> [return: bb3, unwind: bb22];
    }

    bb3: {
        _5 = &_6;
        _4 = <Ref<'_, &mut [u8]> as Deref>::deref(move _5) -> [return: bb4, unwind: bb21];
    }

    bb4: {
        _30 = deref_copy (*_4);
        _3 = &(*_30);
        StorageDead(_7);
        StorageDead(_5);
        _2 = <[u8] as ToOwned>::to_owned(move _3) -> [return: bb5, unwind: bb21];
    }

    bb5: {
        StorageDead(_3);
        drop(_6) -> [return: bb6, unwind: bb19];
    }

    bb6: {
        drop(_10) -> [return: bb7, unwind: bb20];
    }

    bb7: {
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_6);
        StorageDead(_4);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &_2;
        _14 = &(*_15);
        _13 = <Vec<u8> as Deref>::deref(move _14) -> [return: bb8, unwind: bb20];
    }

    bb8: {
        _12 = &(*_13);
        StorageDead(_14);
        StorageDead(_15);
        StorageDead(_13);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &mut _12;
        _20 = &mut (*_21);
        _19 = <T as AccountDeserialize>::try_deserialize(move _20) -> [return: bb9, unwind: bb20];
    }

    bb9: {
        StorageDead(_20);
        StorageLive(_22);
        StorageLive(_23);
        _23 = &(*_1);
        _22 = {closure@token-lending\oracles\src\pyth.rs:166:57: 166:60} { account: move _23 };
        StorageDead(_23);
        _18 = Result::<T, anchor_lang::error::Error>::map_err::<LendingError, {closure@token-lending\oracles\src\pyth.rs:166:57: 166:60}>(move _19, move _22) -> [return: bb10, unwind: bb20];
    }

    bb10: {
        StorageDead(_22);
        StorageDead(_19);
        _17 = <Result<T, LendingError> as Try>::branch(move _18) -> [return: bb11, unwind: bb20];
    }

    bb11: {
        StorageDead(_18);
        _24 = discriminant(_17);
        switchInt(move _24) -> [0: bb12, 1: bb14, otherwise: bb13];
    }

    bb12: {
        StorageLive(_28);
        _28 = move ((_17 as Continue).0: T);
        _16 = move _28;
        StorageDead(_28);
        _33 = discriminant(_17);
        StorageDead(_21);
        StorageDead(_17);
        StorageLive(_29);
        _29 = move _16;
        _0 = Result::<T, anchor_lang::prelude::ProgramError>::Ok(move _29);
        StorageDead(_29);
        StorageDead(_16);
        StorageDead(_12);
        drop(_2) -> [return: bb16, unwind: bb23];
    }

    bb13: {
        unreachable;
    }

    bb14: {
        StorageLive(_25);
        _25 = move ((_17 as Break).0: std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>);
        StorageLive(_27);
        _27 = move _25;
        _0 = <Result<T, anchor_lang::prelude::ProgramError> as FromResidual<Result<Infallible, LendingError>>>::from_residual(move _27) -> [return: bb15, unwind: bb24];
    }

    bb15: {
        StorageDead(_27);
        StorageDead(_25);
        _31 = discriminant(_17);
        StorageDead(_21);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_12);
        drop(_2) -> [return: bb17, unwind: bb23];
    }

    bb16: {
        StorageDead(_2);
        goto -> bb18;
    }

    bb17: {
        StorageDead(_2);
        goto -> bb18;
    }

    bb18: {
        return;
    }

    bb19 (cleanup): {
        drop(_10) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        drop(_2) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_6) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop(_10) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        resume;
    }

    bb24 (cleanup): {
        _35 = discriminant(_17);
        goto -> bb20;
    }
}
