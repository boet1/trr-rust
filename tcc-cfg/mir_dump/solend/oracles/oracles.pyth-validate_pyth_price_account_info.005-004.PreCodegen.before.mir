// MIR for `validate_pyth_price_account_info` before PreCodegen

fn validate_pyth_price_account_info(_1: &AccountInfo<'_>) -> Result<(), anchor_lang::prelude::ProgramError> {
    debug pyth_price_info => _1;
    let mut _0: std::result::Result<(), anchor_lang::prelude::ProgramError>;
    let _2: ();
    let mut _3: bool;
    let mut _4: &anchor_lang::prelude::Pubkey;
    let mut _5: &anchor_lang::prelude::Pubkey;
    let _6: anchor_lang::prelude::Pubkey;
    let mut _7: !;
    let _8: ();
    let mut _9: &str;
    let _10: &str;
    let mut _11: anchor_lang::prelude::ProgramError;
    let _12: &std::cell::Ref<'_, &mut [u8]>;
    let _13: std::cell::Ref<'_, &mut [u8]>;
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _15: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _16: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _17: isize;
    let _18: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _21: std::cell::Ref<'_, &mut [u8]>;
    let _22: &pyth_sdk_solana::state::PriceAccount;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>, &pyth_sdk_solana::state::PriceAccount>;
    let mut _24: std::result::Result<&pyth_sdk_solana::state::PriceAccount, solend_sdk::error::LendingError>;
    let mut _25: std::result::Result<&pyth_sdk_solana::state::PriceAccount, pyth_sdk_solana::PythError>;
    let mut _26: &[u8];
    let _27: &&mut [u8];
    let mut _28: &std::cell::Ref<'_, &mut [u8]>;
    let mut _29: {closure@token-lending\oracles\src\pyth.rs:43:62: 43:65};
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>;
    let mut _35: ();
    let mut _36: &anchor_lang::prelude::Pubkey;
    let mut _37: &mut [u8];
    let mut _38: isize;
    let mut _39: isize;
    let mut _40: isize;
    let mut _41: isize;
    let mut _42: isize;
    scope 1 {
        debug data => _12;
        let _31: std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>;
        let _34: &pyth_sdk_solana::state::PriceAccount;
        scope 6 {
            debug residual => _31;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _34;
            scope 9 {
            }
        }
    }
    scope 2 {
        debug residual => _18;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _21;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _36 = deref_copy ((*_1).3: &anchor_lang::prelude::Pubkey);
        _4 = &(*_36);
        StorageLive(_5);
        StorageLive(_6);
        _6 = pyth_mainnet::id() -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &_6;
        _3 = <Pubkey as PartialEq>::ne(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _3) -> [0: bb5, otherwise: bb3];
    }

    bb3: {
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = const "pyth price account is not owned by pyth program";
        _9 = &(*_10);
        _8 = solana_program::log::sol_log(move _9) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_9);
        StorageDead(_10);
        StorageDead(_8);
        StorageLive(_11);
        _11 = anchor_lang::prelude::ProgramError::IncorrectProgramId;
        _0 = Result::<(), anchor_lang::prelude::ProgramError>::Err(move _11);
        StorageDead(_11);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb21;
    }

    bb5: {
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        _2 = const ();
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &(*_1);
        _15 = AccountInfo::<'_>::try_borrow_data(move _16) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_16);
        _14 = <Result<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError> as Try>::branch(move _15) -> [return: bb7, unwind: bb23];
    }

    bb7: {
        StorageDead(_15);
        _17 = discriminant(_14);
        switchInt(move _17) -> [0: bb8, 1: bb10, otherwise: bb9];
    }

    bb8: {
        StorageLive(_21);
        _21 = move ((_14 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _13 = move _21;
        StorageDead(_21);
        _12 = &_13;
        _38 = discriminant(_14);
        StorageDead(_14);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &(*_12);
        _27 = <Ref<'_, &mut [u8]> as Deref>::deref(move _28) -> [return: bb12, unwind: bb22];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        StorageLive(_18);
        _18 = move ((_14 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_20);
        _20 = move _18;
        _0 = <Result<(), anchor_lang::prelude::ProgramError> as FromResidual<Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _20) -> [return: bb11, unwind: bb24];
    }

    bb11: {
        StorageDead(_20);
        StorageDead(_18);
        _40 = discriminant(_14);
        StorageDead(_14);
        goto -> bb20;
    }

    bb12: {
        _37 = deref_copy (*_27);
        _26 = &(*_37);
        StorageDead(_28);
        _25 = load_price_account(move _26) -> [return: bb13, unwind: bb22];
    }

    bb13: {
        StorageDead(_26);
        StorageLive(_29);
        _29 = {closure@token-lending\oracles\src\pyth.rs:43:62: 43:65};
        _24 = Result::<&PriceAccount, PythError>::map_err::<LendingError, {closure@token-lending\oracles\src\pyth.rs:43:62: 43:65}>(move _25, move _29) -> [return: bb14, unwind: bb22];
    }

    bb14: {
        StorageDead(_29);
        StorageDead(_25);
        _23 = <Result<&PriceAccount, LendingError> as Try>::branch(move _24) -> [return: bb15, unwind: bb22];
    }

    bb15: {
        StorageDead(_24);
        _30 = discriminant(_23);
        switchInt(move _30) -> [0: bb16, 1: bb17, otherwise: bb9];
    }

    bb16: {
        StorageLive(_34);
        _34 = ((_23 as Continue).0: &pyth_sdk_solana::state::PriceAccount);
        _22 = _34;
        StorageDead(_34);
        StorageDead(_27);
        StorageDead(_23);
        StorageDead(_22);
        StorageLive(_35);
        _35 = ();
        _0 = Result::<(), anchor_lang::prelude::ProgramError>::Ok(move _35);
        StorageDead(_35);
        drop(_13) -> [return: bb19, unwind: bb23];
    }

    bb17: {
        StorageLive(_31);
        _31 = move ((_23 as Break).0: std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>);
        StorageLive(_33);
        _33 = move _31;
        _0 = <Result<(), anchor_lang::prelude::ProgramError> as FromResidual<Result<Infallible, LendingError>>>::from_residual(move _33) -> [return: bb18, unwind: bb22];
    }

    bb18: {
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_27);
        StorageDead(_23);
        StorageDead(_22);
        drop(_13) -> [return: bb20, unwind: bb23];
    }

    bb19: {
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb21;
    }

    bb20: {
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb21;
    }

    bb21: {
        return;
    }

    bb22 (cleanup): {
        drop(_13) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        resume;
    }

    bb24 (cleanup): {
        _42 = discriminant(_14);
        goto -> bb23;
    }
}
