// MIR for `get_single_price_unchecked` before PreCodegen

fn get_single_price_unchecked(_1: &AccountInfo<'_>, _2: &Clock) -> Result<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError> {
    debug oracle_account_info => _1;
    debug clock => _2;
    let mut _0: std::result::Result<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError>;
    let mut _3: OracleType;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, OracleType>;
    let mut _5: std::result::Result<OracleType, anchor_lang::prelude::ProgramError>;
    let mut _6: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _11: OracleType;
    let mut _12: isize;
    let mut _13: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _14: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _15: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _16: &anchor_lang::prelude::Clock;
    let mut _17: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _18: &anchor_lang::prelude::Clock;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: isize;
    let mut _22: isize;
    let mut _23: isize;
    let mut _24: isize;
    let mut _25: isize;
    scope 1 {
        debug residual => _8;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _11;
        scope 4 {
        }
    }

    bb0: {
        _20 = const false;
        _19 = const false;
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &(*_1);
        _5 = get_oracle_type(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <Result<OracleType, anchor_lang::prelude::ProgramError> as Try>::branch(move _5) -> [return: bb2, unwind: bb16];
    }

    bb2: {
        _19 = const true;
        _20 = const true;
        StorageDead(_5);
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = move ((_4 as Continue).0: OracleType);
        _3 = move _11;
        StorageDead(_11);
        _12 = discriminant(_3);
        switchInt(move _12) -> [0: bb8, 1: bb12, 2: bb10, 3: bb7, otherwise: bb4];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_10);
        _10 = move _8;
        _0 = <Result<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError> as FromResidual<Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _10) -> [return: bb6, unwind: bb18];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        _23 = discriminant(_4);
        _19 = const false;
        _20 = const false;
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb15;
    }

    bb7: {
        StorageLive(_17);
        _17 = &(*_1);
        StorageLive(_18);
        _18 = &(*_2);
        _0 = get_switchboard_price_on_demand(move _17, move _18, const true) -> [return: bb14, unwind: bb18];
    }

    bb8: {
        StorageLive(_13);
        _13 = &(*_1);
        _0 = get_pyth_price_unchecked(move _13) -> [return: bb9, unwind: bb18];
    }

    bb9: {
        StorageDead(_13);
        goto -> bb17;
    }

    bb10: {
        StorageLive(_14);
        _14 = &(*_1);
        _0 = get_pyth_pull_price_unchecked(move _14) -> [return: bb11, unwind: bb18];
    }

    bb11: {
        StorageDead(_14);
        goto -> bb17;
    }

    bb12: {
        StorageLive(_15);
        _15 = &(*_1);
        StorageLive(_16);
        _16 = &(*_2);
        _0 = get_switchboard_price_v2(move _15, move _16, const false) -> [return: bb13, unwind: bb18];
    }

    bb13: {
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb17;
    }

    bb14: {
        StorageDead(_18);
        StorageDead(_17);
        goto -> bb17;
    }

    bb15: {
        return;
    }

    bb16 (cleanup): {
        resume;
    }

    bb17: {
        _21 = discriminant(_4);
        _19 = const false;
        _20 = const false;
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb15;
    }

    bb18 (cleanup): {
        _25 = discriminant(_4);
        goto -> bb16;
    }
}
