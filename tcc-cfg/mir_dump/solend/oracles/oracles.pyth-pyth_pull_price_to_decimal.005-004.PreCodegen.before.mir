// MIR for `pyth_pull_price_to_decimal` before PreCodegen

fn pyth_pull_price_to_decimal(_1: &pyth_solana_receiver_sdk::price_update::Price) -> Result<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError> {
    debug pyth_price => _1;
    let mut _0: std::result::Result<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError>;
    let _2: u64;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>, u64>;
    let mut _4: std::result::Result<u64, solend_sdk::error::LendingError>;
    let mut _5: std::result::Result<u64, std::num::TryFromIntError>;
    let mut _6: i64;
    let mut _7: {closure@token-lending\oracles\src\pyth.rs:260:58: 260:61};
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>;
    let _12: u64;
    let mut _13: bool;
    let mut _14: i32;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>, u32>;
    let mut _17: std::result::Result<u32, solend_sdk::error::LendingError>;
    let mut _18: std::result::Result<u32, std::num::TryFromIntError>;
    let mut _19: i32;
    let mut _20: {closure@token-lending\oracles\src\pyth.rs:269:22: 269:25};
    let mut _21: isize;
    let mut _23: !;
    let mut _24: std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>, u64>;
    let mut _28: std::result::Result<u64, solend_sdk::error::LendingError>;
    let mut _29: std::option::Option<u64>;
    let mut _30: u32;
    let mut _31: solend_sdk::error::LendingError;
    let mut _32: isize;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>;
    let mut _37: solend_sdk::math::Decimal;
    let mut _38: u64;
    let mut _39: u64;
    let mut _41: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>, u32>;
    let mut _42: std::result::Result<u32, solend_sdk::error::LendingError>;
    let mut _43: std::result::Result<u32, std::num::TryFromIntError>;
    let mut _44: i32;
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>, i32>;
    let mut _46: std::result::Result<i32, solend_sdk::error::LendingError>;
    let mut _47: std::option::Option<i32>;
    let mut _48: i32;
    let mut _49: solend_sdk::error::LendingError;
    let mut _50: isize;
    let mut _52: !;
    let mut _53: std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>;
    let mut _55: {closure@token-lending\oracles\src\pyth.rs:280:22: 280:25};
    let mut _56: isize;
    let mut _58: !;
    let mut _59: std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>;
    let mut _62: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>, u64>;
    let mut _63: std::result::Result<u64, solend_sdk::error::LendingError>;
    let mut _64: std::option::Option<u64>;
    let mut _65: u32;
    let mut _66: solend_sdk::error::LendingError;
    let mut _67: isize;
    let mut _69: !;
    let mut _70: std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>;
    let mut _72: solend_sdk::math::Decimal;
    let mut _73: u64;
    let mut _74: u64;
    scope 1 {
        debug price => _2;
        let _15: u32;
        let _22: std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>;
        let _25: u32;
        let _40: u32;
        let _51: std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>;
        let _54: i32;
        let _57: std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>;
        let _60: u32;
        scope 6 {
            debug exponent => _15;
            let _26: u64;
            let _33: std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>;
            let _36: u64;
            scope 11 {
                debug zeros => _26;
            }
            scope 12 {
                debug residual => _33;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _36;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _22;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _25;
            scope 10 {
            }
        }
        scope 16 {
            debug exponent => _40;
            let _61: u64;
            let _68: std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>;
            let _71: u64;
            scope 25 {
                debug decimals => _61;
            }
            scope 26 {
                debug residual => _68;
                scope 27 {
                }
            }
            scope 28 {
                debug val => _71;
                scope 29 {
                }
            }
        }
        scope 17 {
            debug residual => _51;
            scope 18 {
            }
        }
        scope 19 {
            debug val => _54;
            scope 20 {
            }
        }
        scope 21 {
            debug residual => _57;
            scope 22 {
            }
        }
        scope 23 {
            debug val => _60;
            scope 24 {
            }
        }
    }
    scope 2 {
        debug residual => _9;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _12;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = ((*_1).0: i64);
        _5 = <i64 as TryInto<u64>>::try_into(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        StorageLive(_7);
        _7 = {closure@token-lending\oracles\src\pyth.rs:260:58: 260:61};
        _4 = Result::<u64, TryFromIntError>::map_err::<LendingError, {closure@token-lending\oracles\src\pyth.rs:260:58: 260:61}>(move _5, move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        StorageDead(_5);
        _3 = <Result<u64, LendingError> as Try>::branch(move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_4);
        _8 = discriminant(_3);
        switchInt(move _8) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_12);
        _12 = ((_3 as Continue).0: u64);
        _2 = _12;
        StorageDead(_12);
        StorageDead(_3);
        StorageLive(_13);
        StorageLive(_14);
        _14 = ((*_1).2: i32);
        _13 = Ge(move _14, const 0_i32);
        switchInt(move _13) -> [0: bb9, otherwise: bb8];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_9);
        _9 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <Result<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError> as FromResidual<Result<Infallible, LendingError>>>::from_residual(move _11) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_3);
        goto -> bb49;
    }

    bb8: {
        StorageDead(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = ((*_1).2: i32);
        _18 = <i32 as TryInto<u32>>::try_into(move _19) -> [return: bb10, unwind continue];
    }

    bb9: {
        StorageDead(_14);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = ((*_1).2: i32);
        _47 = __core::num::<impl i32>::checked_abs(move _48) -> [return: bb24, unwind continue];
    }

    bb10: {
        StorageDead(_19);
        StorageLive(_20);
        _20 = {closure@token-lending\oracles\src\pyth.rs:269:22: 269:25};
        _17 = Result::<u32, TryFromIntError>::map_err::<LendingError, {closure@token-lending\oracles\src\pyth.rs:269:22: 269:25}>(move _18, move _20) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_20);
        StorageDead(_18);
        _16 = <Result<u32, LendingError> as Try>::branch(move _17) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_17);
        _21 = discriminant(_16);
        switchInt(move _21) -> [0: bb13, 1: bb14, otherwise: bb5];
    }

    bb13: {
        StorageLive(_25);
        _25 = ((_16 as Continue).0: u32);
        _15 = _25;
        StorageDead(_25);
        StorageDead(_16);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = _15;
        _29 = __core::num::<impl u64>::checked_pow(const 10_u64, move _30) -> [return: bb16, unwind continue];
    }

    bb14: {
        StorageLive(_22);
        _22 = move ((_16 as Break).0: std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>);
        StorageLive(_24);
        _24 = move _22;
        _0 = <Result<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError> as FromResidual<Result<Infallible, LendingError>>>::from_residual(move _24) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_16);
        goto -> bb47;
    }

    bb16: {
        StorageDead(_30);
        StorageLive(_31);
        _31 = MathOverflow;
        _28 = Option::<u64>::ok_or::<LendingError>(move _29, move _31) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_31);
        StorageDead(_29);
        _27 = <Result<u64, LendingError> as Try>::branch(move _28) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_28);
        _32 = discriminant(_27);
        switchInt(move _32) -> [0: bb19, 1: bb20, otherwise: bb5];
    }

    bb19: {
        StorageLive(_36);
        _36 = ((_27 as Continue).0: u64);
        _26 = _36;
        StorageDead(_36);
        StorageDead(_27);
        StorageLive(_37);
        StorageLive(_38);
        _38 = _2;
        _37 = <solend_sdk::math::Decimal as From<u64>>::from(move _38) -> [return: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_33);
        _33 = move ((_27 as Break).0: std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>);
        StorageLive(_35);
        _35 = move _33;
        _0 = <Result<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError> as FromResidual<Result<Infallible, LendingError>>>::from_residual(move _35) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_27);
        StorageDead(_26);
        goto -> bb47;
    }

    bb22: {
        StorageDead(_38);
        StorageLive(_39);
        _39 = _26;
        _0 = <solend_sdk::math::Decimal as TryMul<u64>>::try_mul(move _37, move _39) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_26);
        StorageDead(_15);
        goto -> bb44;
    }

    bb24: {
        StorageDead(_48);
        StorageLive(_49);
        _49 = MathOverflow;
        _46 = Option::<i32>::ok_or::<LendingError>(move _47, move _49) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_49);
        StorageDead(_47);
        _45 = <Result<i32, LendingError> as Try>::branch(move _46) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_46);
        _50 = discriminant(_45);
        switchInt(move _50) -> [0: bb27, 1: bb28, otherwise: bb5];
    }

    bb27: {
        StorageLive(_54);
        _54 = ((_45 as Continue).0: i32);
        _44 = _54;
        StorageDead(_54);
        _43 = <i32 as TryInto<u32>>::try_into(move _44) -> [return: bb30, unwind continue];
    }

    bb28: {
        StorageLive(_51);
        _51 = move ((_45 as Break).0: std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>);
        StorageLive(_53);
        _53 = move _51;
        _0 = <Result<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError> as FromResidual<Result<Infallible, LendingError>>>::from_residual(move _53) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_53);
        StorageDead(_51);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        goto -> bb45;
    }

    bb30: {
        StorageDead(_44);
        StorageLive(_55);
        _55 = {closure@token-lending\oracles\src\pyth.rs:280:22: 280:25};
        _42 = Result::<u32, TryFromIntError>::map_err::<LendingError, {closure@token-lending\oracles\src\pyth.rs:280:22: 280:25}>(move _43, move _55) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_55);
        StorageDead(_43);
        _41 = <Result<u32, LendingError> as Try>::branch(move _42) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_42);
        _56 = discriminant(_41);
        switchInt(move _56) -> [0: bb33, 1: bb34, otherwise: bb5];
    }

    bb33: {
        StorageLive(_60);
        _60 = ((_41 as Continue).0: u32);
        _40 = _60;
        StorageDead(_60);
        StorageDead(_45);
        StorageDead(_41);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = _40;
        _64 = __core::num::<impl u64>::checked_pow(const 10_u64, move _65) -> [return: bb36, unwind continue];
    }

    bb34: {
        StorageLive(_57);
        _57 = move ((_41 as Break).0: std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>);
        StorageLive(_59);
        _59 = move _57;
        _0 = <Result<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError> as FromResidual<Result<Infallible, LendingError>>>::from_residual(move _59) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_59);
        StorageDead(_57);
        goto -> bb45;
    }

    bb36: {
        StorageDead(_65);
        StorageLive(_66);
        _66 = MathOverflow;
        _63 = Option::<u64>::ok_or::<LendingError>(move _64, move _66) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_66);
        StorageDead(_64);
        _62 = <Result<u64, LendingError> as Try>::branch(move _63) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_63);
        _67 = discriminant(_62);
        switchInt(move _67) -> [0: bb39, 1: bb40, otherwise: bb5];
    }

    bb39: {
        StorageLive(_71);
        _71 = ((_62 as Continue).0: u64);
        _61 = _71;
        StorageDead(_71);
        StorageDead(_62);
        StorageLive(_72);
        StorageLive(_73);
        _73 = _2;
        _72 = <solend_sdk::math::Decimal as From<u64>>::from(move _73) -> [return: bb42, unwind continue];
    }

    bb40: {
        StorageLive(_68);
        _68 = move ((_62 as Break).0: std::result::Result<std::convert::Infallible, solend_sdk::error::LendingError>);
        StorageLive(_70);
        _70 = move _68;
        _0 = <Result<solend_sdk::math::Decimal, anchor_lang::prelude::ProgramError> as FromResidual<Result<Infallible, LendingError>>>::from_residual(move _70) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_62);
        StorageDead(_61);
        goto -> bb46;
    }

    bb42: {
        StorageDead(_73);
        StorageLive(_74);
        _74 = _61;
        _0 = <solend_sdk::math::Decimal as TryDiv<u64>>::try_div(move _72, move _74) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_74);
        StorageDead(_72);
        StorageDead(_61);
        StorageDead(_40);
        goto -> bb44;
    }

    bb44: {
        StorageDead(_13);
        StorageDead(_2);
        goto -> bb50;
    }

    bb45: {
        StorageDead(_45);
        StorageDead(_41);
        goto -> bb46;
    }

    bb46: {
        StorageDead(_40);
        goto -> bb48;
    }

    bb47: {
        StorageDead(_15);
        goto -> bb48;
    }

    bb48: {
        StorageDead(_13);
        goto -> bb49;
    }

    bb49: {
        StorageDead(_2);
        goto -> bb50;
    }

    bb50: {
        return;
    }
}
