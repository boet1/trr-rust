digraph Mir_0_470 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn reserve::Reserve::calculate_bonus(_1: &amp;ReErased state::reserve::Reserve, _2: &amp;ReErased state::obligation::Obligation) -&gt; std::result::Result&lt;state::reserve::Bonus, solana_program::program_error::ProgramError&gt;<br align="left"/>let _3: ();<br align="left"/>let mut _4: bool;<br align="left"/>let mut _5: &amp;ReErased math::decimal::Decimal;<br align="left"/>let mut _6: &amp;ReErased math::decimal::Decimal;<br align="left"/>let mut _7: !;<br align="left"/>let _8: ();<br align="left"/>let mut _9: bool;<br align="left"/>let mut _10: !;<br align="left"/>let mut _11: state::reserve::Bonus;<br align="left"/>let mut _12: math::decimal::Decimal;<br align="left"/>let mut _13: math::decimal::Decimal;<br align="left"/>let _14: ();<br align="left"/>let mut _15: &amp;ReErased str;<br align="left"/>let _16: &amp;ReErased str;<br align="left"/>let mut _17: solana_program::program_error::ProgramError;<br align="left"/>let mut _18: error::LendingError;<br align="left"/>let _19: math::decimal::Decimal;<br align="left"/>let mut _20: u8;<br align="left"/>let _21: math::decimal::Decimal;<br align="left"/>let mut _22: u8;<br align="left"/>let _23: math::decimal::Decimal;<br align="left"/>let mut _24: u8;<br align="left"/>let _25: ();<br align="left"/>let mut _26: bool;<br align="left"/>let mut _27: &amp;ReErased math::decimal::Decimal;<br align="left"/>let mut _28: &amp;ReErased math::decimal::Decimal;<br align="left"/>let mut _29: !;<br align="left"/>let mut _30: state::reserve::Bonus;<br align="left"/>let mut _31: math::decimal::Decimal;<br align="left"/>let mut _32: math::decimal::Decimal;<br align="left"/>let mut _33: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;, math::decimal::Decimal&gt;;<br align="left"/>let mut _34: std::result::Result&lt;math::decimal::Decimal, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _35: math::decimal::Decimal;<br align="left"/>let mut _36: math::decimal::Decimal;<br align="left"/>let mut _37: isize;<br align="left"/>let _38: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _39: !;<br align="left"/>let mut _40: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let _41: math::decimal::Decimal;<br align="left"/>let mut _42: math::decimal::Decimal;<br align="left"/>let mut _43: math::decimal::Decimal;<br align="left"/>let _44: math::decimal::Decimal;<br align="left"/>let mut _45: math::decimal::Decimal;<br align="left"/>let mut _46: std::result::Result&lt;math::decimal::Decimal, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _47: math::decimal::Decimal;<br align="left"/>let mut _48: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;, math::decimal::Decimal&gt;;<br align="left"/>let mut _49: std::result::Result&lt;math::decimal::Decimal, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _50: math::decimal::Decimal;<br align="left"/>let mut _51: math::decimal::Decimal;<br align="left"/>let mut _52: isize;<br align="left"/>let _53: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _54: !;<br align="left"/>let mut _55: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let _56: math::decimal::Decimal;<br align="left"/>let mut _57: math::decimal::Decimal;<br align="left"/>let mut _58: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;, math::decimal::Decimal&gt;;<br align="left"/>let mut _59: std::result::Result&lt;math::decimal::Decimal, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _60: math::decimal::Decimal;<br align="left"/>let mut _61: math::decimal::Decimal;<br align="left"/>let mut _62: isize;<br align="left"/>let _63: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _64: !;<br align="left"/>let mut _65: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let _66: math::decimal::Decimal;<br align="left"/>let mut _67: Closure(DefId(0:471 ~ solend_sdk[296d]::state::reserve::{impl#0}::calculate_bonus::{closure#0}), [i32, Binder(extern &quot;RustCall&quot; fn((solana_program::program_error::ProgramError,)) -&gt; math::decimal::Decimal, []), ()]);<br align="left"/>let mut _68: math::decimal::Decimal;<br align="left"/>let _69: math::decimal::Decimal;<br align="left"/>let mut _70: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;, math::decimal::Decimal&gt;;<br align="left"/>let mut _71: std::result::Result&lt;math::decimal::Decimal, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _72: math::decimal::Decimal;<br align="left"/>let mut _73: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;, math::decimal::Decimal&gt;;<br align="left"/>let mut _74: std::result::Result&lt;math::decimal::Decimal, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _75: math::decimal::Decimal;<br align="left"/>let mut _76: math::decimal::Decimal;<br align="left"/>let mut _77: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;, math::decimal::Decimal&gt;;<br align="left"/>let mut _78: std::result::Result&lt;math::decimal::Decimal, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _79: math::decimal::Decimal;<br align="left"/>let mut _80: math::decimal::Decimal;<br align="left"/>let mut _81: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;, math::decimal::Decimal&gt;;<br align="left"/>let mut _82: std::result::Result&lt;math::decimal::Decimal, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _83: math::decimal::Decimal;<br align="left"/>let mut _84: math::decimal::Decimal;<br align="left"/>let mut _85: isize;<br align="left"/>let _86: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _87: !;<br align="left"/>let mut _88: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let _89: math::decimal::Decimal;<br align="left"/>let mut _90: isize;<br align="left"/>let _91: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _92: !;<br align="left"/>let mut _93: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let _94: math::decimal::Decimal;<br align="left"/>let mut _95: isize;<br align="left"/>let _96: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _97: !;<br align="left"/>let mut _98: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let _99: math::decimal::Decimal;<br align="left"/>let mut _100: math::decimal::Decimal;<br align="left"/>let mut _101: isize;<br align="left"/>let _102: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _103: !;<br align="left"/>let mut _104: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let _105: math::decimal::Decimal;<br align="left"/>let mut _106: state::reserve::Bonus;<br align="left"/>let mut _107: math::decimal::Decimal;<br align="left"/>let mut _108: math::decimal::Decimal;<br align="left"/>let mut _109: math::decimal::Decimal;<br align="left"/>let mut _110: math::decimal::Decimal;<br align="left"/>let mut _111: bool;<br align="left"/>let mut _112: bool;<br align="left"/>let mut _113: bool;<br align="left"/>let mut _114: bool;<br align="left"/>let mut _115: bool;<br align="left"/>let mut _116: bool;<br align="left"/>let mut _117: isize;<br align="left"/>let mut _118: isize;<br align="left"/>let mut _119: isize;<br align="left"/>let mut _120: isize;<br align="left"/>let mut _121: isize;<br align="left"/>let mut _122: isize;<br align="left"/>let mut _123: isize;<br align="left"/>let mut _124: isize;<br align="left"/>let mut _125: isize;<br align="left"/>let mut _126: isize;<br align="left"/>let mut _127: isize;<br align="left"/>let mut _128: isize;<br align="left"/>let mut _129: isize;<br align="left"/>let mut _130: isize;<br align="left"/>let mut _131: isize;<br align="left"/>let mut _132: isize;<br align="left"/>let mut _133: isize;<br align="left"/>let mut _134: isize;<br align="left"/>let mut _135: isize;<br align="left"/>let mut _136: isize;<br align="left"/>let mut _137: isize;<br align="left"/>let mut _138: isize;<br align="left"/>let mut _139: isize;<br align="left"/>let mut _140: isize;<br align="left"/>let mut _141: isize;<br align="left"/>let mut _142: isize;<br align="left"/>let mut _143: isize;<br align="left"/>let mut _144: isize;<br align="left"/>let mut _145: isize;<br align="left"/>let mut _146: isize;<br align="left"/>let mut _147: isize;<br align="left"/>let mut _148: isize;<br align="left"/>let mut _149: isize;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug obligation =&gt; _2;<br align="left"/>debug liquidation_bonus =&gt; _19;<br align="left"/>debug max_liquidation_bonus =&gt; _21;<br align="left"/>debug protocol_liquidation_fee =&gt; _23;<br align="left"/>debug residual =&gt; _38;<br align="left"/>debug val =&gt; _41;<br align="left"/>debug weight =&gt; _44;<br align="left"/>debug residual =&gt; _53;<br align="left"/>debug val =&gt; _56;<br align="left"/>debug residual =&gt; _63;<br align="left"/>debug val =&gt; _66;<br align="left"/>debug bonus =&gt; _69;<br align="left"/>debug residual =&gt; _86;<br align="left"/>debug val =&gt; _89;<br align="left"/>debug residual =&gt; _91;<br align="left"/>debug val =&gt; _94;<br align="left"/>debug residual =&gt; _96;<br align="left"/>debug val =&gt; _99;<br align="left"/>debug residual =&gt; _102;<br align="left"/>debug val =&gt; _105;<br align="left"/>>;
    bb0__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_115 = const false<br/>_114 = const false<br/>_116 = const false<br/>_113 = const false<br/>_112 = const false<br/>_111 = const false<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = &amp;((*_2).7: math::decimal::Decimal)<br/>StorageLive(_6)<br/>_6 = &amp;((*_2).11: math::decimal::Decimal)<br/></td></tr><tr><td align="left">_4 = &lt;decimal::Decimal as PartialOrd&gt;::lt(move _5, move _6)</td></tr></table>>];
    bb1__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">switchInt(move _4)</td></tr></table>>];
    bb2__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageDead(_5)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = ((*_2).14: bool)<br/></td></tr><tr><td align="left">switchInt(move _9)</td></tr></table>>];
    bb3__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_11)<br/>StorageLive(_12)<br/></td></tr><tr><td align="left">_12 = decimal::Decimal::zero()</td></tr></table>>];
    bb4__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_13)<br/></td></tr><tr><td align="left">_13 = decimal::Decimal::zero()</td></tr></table>>];
    bb5__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">_11 = Bonus { total_bonus: move _12, protocol_liquidation_fee: move _13 }<br/>StorageDead(_13)<br/>StorageDead(_12)<br/>_0 = Result::&lt;Bonus, ProgramError&gt;::Ok(move _11)<br/>StorageDead(_11)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb6__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">_8 = const ()<br/>StorageDead(_9)<br/>StorageDead(_8)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>_16 = const &quot;Obligation is healthy so a liquidation bonus can't be calculated&quot;<br/>_15 = &amp;(*_16)<br/></td></tr><tr><td align="left">_14 = solana_program::log::sol_log(move _15)</td></tr></table>>];
    bb7__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageDead(_16)<br/>StorageDead(_14)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>_18 = LendingError::ObligationHealthy<br/></td></tr><tr><td align="left">_17 = &lt;LendingError as Into&lt;ProgramError&gt;&gt;::into(move _18)</td></tr></table>>];
    bb8__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>_0 = Result::&lt;Bonus, ProgramError&gt;::Err(move _17)<br/>StorageDead(_17)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageDead(_5)<br/>_3 = const ()<br/>StorageDead(_4)<br/>StorageDead(_3)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>_20 = (((*_1).5: state::reserve::ReserveConfig).3: u8)<br/></td></tr><tr><td align="left">_19 = decimal::Decimal::from_percent(move _20)</td></tr></table>>];
    bb10__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>_22 = (((*_1).5: state::reserve::ReserveConfig).4: u8)<br/></td></tr><tr><td align="left">_21 = decimal::Decimal::from_percent(move _22)</td></tr></table>>];
    bb11__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>_24 = (((*_1).5: state::reserve::ReserveConfig).15: u8)<br/></td></tr><tr><td align="left">_23 = decimal::Decimal::from_deca_bps(move _24)</td></tr></table>>];
    bb12__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>_27 = &amp;((*_2).11: math::decimal::Decimal)<br/>StorageLive(_28)<br/>_28 = &amp;((*_2).12: math::decimal::Decimal)<br/></td></tr><tr><td align="left">_26 = &lt;decimal::Decimal as PartialEq&gt;::eq(move _27, move _28)</td></tr></table>>];
    bb13__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left">switchInt(move _26)</td></tr></table>>];
    bb14__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>StorageDead(_27)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>_35 = _19<br/>StorageLive(_36)<br/>_36 = _23<br/></td></tr><tr><td align="left">_34 = &lt;decimal::Decimal as common::TryAdd&gt;::try_add(move _35, move _36)</td></tr></table>>];
    bb15__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_36)<br/>StorageDead(_35)<br/></td></tr><tr><td align="left">_33 = &lt;Result&lt;decimal::Decimal, ProgramError&gt; as Try&gt;::branch(move _34)</td></tr></table>>];
    bb16__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">_115 = const true<br/>StorageDead(_34)<br/>_37 = discriminant(_33)<br/></td></tr><tr><td align="left">switchInt(move _37)</td></tr></table>>];
    bb17__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageLive(_41)<br/>_41 = ((_33 as Continue).0: math::decimal::Decimal)<br/>_32 = _41<br/>StorageDead(_41)<br/>StorageLive(_42)<br/></td></tr><tr><td align="left">_42 = decimal::Decimal::from_percent(const _)</td></tr></table>>];
    bb18__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb19__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageLive(_38)<br/>_38 = move ((_33 as Break).0: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;)<br/>StorageLive(_40)<br/>_40 = move _38<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;Bonus, ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, ProgramError&gt;&gt;&gt;::from_residual(move _40)</td></tr></table>>];
    bb20__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_40)<br/>StorageDead(_38)<br/>StorageDead(_32)<br/>StorageDead(_31)<br/>StorageDead(_30)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb21__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left">_31 = std::cmp::min::&lt;decimal::Decimal&gt;(move _32, move _42)</td></tr></table>>];
    bb22__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_42)<br/>StorageDead(_32)<br/>StorageLive(_43)<br/>_43 = _23<br/>_30 = Bonus { total_bonus: move _31, protocol_liquidation_fee: move _43 }<br/>StorageDead(_43)<br/>StorageDead(_31)<br/>_0 = Result::&lt;Bonus, ProgramError&gt;::Ok(move _30)<br/>StorageDead(_30)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb23__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>StorageDead(_27)<br/>_25 = const ()<br/>StorageDead(_26)<br/>StorageDead(_25)<br/>StorageLive(_44)<br/>StorageLive(_45)<br/>StorageLive(_46)<br/>StorageLive(_47)<br/>StorageLive(_48)<br/>StorageLive(_49)<br/>StorageLive(_50)<br/>_50 = ((*_2).7: math::decimal::Decimal)<br/>StorageLive(_51)<br/>_51 = ((*_2).11: math::decimal::Decimal)<br/></td></tr><tr><td align="left">_49 = &lt;decimal::Decimal as common::TrySub&gt;::try_sub(move _50, move _51)</td></tr></table>>];
    bb24__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_51)<br/>StorageDead(_50)<br/></td></tr><tr><td align="left">_48 = &lt;Result&lt;decimal::Decimal, ProgramError&gt; as Try&gt;::branch(move _49)</td></tr></table>>];
    bb25__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">_114 = const true<br/>StorageDead(_49)<br/>_52 = discriminant(_48)<br/></td></tr><tr><td align="left">switchInt(move _52)</td></tr></table>>];
    bb26__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageLive(_56)<br/>_56 = ((_48 as Continue).0: math::decimal::Decimal)<br/>_47 = _56<br/>StorageDead(_56)<br/>StorageLive(_57)<br/>StorageLive(_58)<br/>StorageLive(_59)<br/>StorageLive(_60)<br/>_60 = ((*_2).12: math::decimal::Decimal)<br/>StorageLive(_61)<br/>_61 = ((*_2).11: math::decimal::Decimal)<br/></td></tr><tr><td align="left">_59 = &lt;decimal::Decimal as common::TrySub&gt;::try_sub(move _60, move _61)</td></tr></table>>];
    bb27__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageLive(_53)<br/>_53 = move ((_48 as Break).0: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;)<br/>StorageLive(_55)<br/>_55 = move _53<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;Bonus, ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, ProgramError&gt;&gt;&gt;::from_residual(move _55)</td></tr></table>>];
    bb28__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_55)<br/>StorageDead(_53)<br/>StorageDead(_47)<br/>StorageDead(_46)<br/>StorageDead(_45)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb29__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_61)<br/>StorageDead(_60)<br/></td></tr><tr><td align="left">_58 = &lt;Result&lt;decimal::Decimal, ProgramError&gt; as Try&gt;::branch(move _59)</td></tr></table>>];
    bb30__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">_116 = const true<br/>StorageDead(_59)<br/>_62 = discriminant(_58)<br/></td></tr><tr><td align="left">switchInt(move _62)</td></tr></table>>];
    bb31__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageLive(_66)<br/>_66 = ((_58 as Continue).0: math::decimal::Decimal)<br/>_57 = _66<br/>StorageDead(_66)<br/></td></tr><tr><td align="left">_46 = &lt;decimal::Decimal as common::TryDiv&lt;decimal::Decimal&gt;&gt;::try_div(move _47, move _57)</td></tr></table>>];
    bb32__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageLive(_63)<br/>_63 = move ((_58 as Break).0: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;)<br/>StorageLive(_65)<br/>_65 = move _63<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;Bonus, ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, ProgramError&gt;&gt;&gt;::from_residual(move _65)</td></tr></table>>];
    bb33__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageDead(_65)<br/>StorageDead(_63)<br/>StorageDead(_57)<br/>StorageDead(_47)<br/>StorageDead(_46)<br/>StorageDead(_45)<br/>_137 = discriminant(_58)<br/>_116 = const false<br/>StorageDead(_58)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb34__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_57)<br/>StorageDead(_47)<br/>StorageLive(_67)<br/>_67 = {closure@token-lending\sdk\src\state\reserve.rs:420:33: 420:36}<br/></td></tr><tr><td align="left">_45 = Result::&lt;decimal::Decimal, ProgramError&gt;::unwrap_or_else::&lt;{closure@token-lending\sdk\src\state\reserve.rs:420:33: 420:36}&gt;(move _46, move _67)</td></tr></table>>];
    bb35__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_67)<br/>StorageDead(_46)<br/>StorageLive(_68)<br/></td></tr><tr><td align="left">_68 = decimal::Decimal::one()</td></tr></table>>];
    bb36__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left">_44 = std::cmp::min::&lt;decimal::Decimal&gt;(move _45, move _68)</td></tr></table>>];
    bb37__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageDead(_68)<br/>StorageDead(_45)<br/>_117 = discriminant(_58)<br/>_116 = const false<br/>StorageDead(_58)<br/>_119 = discriminant(_48)<br/>_114 = const false<br/>StorageDead(_48)<br/>StorageLive(_69)<br/>StorageLive(_70)<br/>StorageLive(_71)<br/>StorageLive(_72)<br/>StorageLive(_73)<br/>StorageLive(_74)<br/>StorageLive(_75)<br/>_75 = _19<br/>StorageLive(_76)<br/>StorageLive(_77)<br/>StorageLive(_78)<br/>StorageLive(_79)<br/>_79 = _44<br/>StorageLive(_80)<br/>StorageLive(_81)<br/>StorageLive(_82)<br/>StorageLive(_83)<br/>_83 = _21<br/>StorageLive(_84)<br/>_84 = _19<br/></td></tr><tr><td align="left">_82 = &lt;decimal::Decimal as common::TrySub&gt;::try_sub(move _83, move _84)</td></tr></table>>];
    bb38__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageDead(_84)<br/>StorageDead(_83)<br/></td></tr><tr><td align="left">_81 = &lt;Result&lt;decimal::Decimal, ProgramError&gt; as Try&gt;::branch(move _82)</td></tr></table>>];
    bb39__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">_113 = const true<br/>StorageDead(_82)<br/>_85 = discriminant(_81)<br/></td></tr><tr><td align="left">switchInt(move _85)</td></tr></table>>];
    bb40__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">StorageLive(_89)<br/>_89 = ((_81 as Continue).0: math::decimal::Decimal)<br/>_80 = _89<br/>StorageDead(_89)<br/></td></tr><tr><td align="left">_78 = &lt;decimal::Decimal as common::TryMul&lt;decimal::Decimal&gt;&gt;::try_mul(move _79, move _80)</td></tr></table>>];
    bb41__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">StorageLive(_86)<br/>_86 = move ((_81 as Break).0: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;)<br/>StorageLive(_88)<br/>_88 = move _86<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;Bonus, ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, ProgramError&gt;&gt;&gt;::from_residual(move _88)</td></tr></table>>];
    bb42__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageDead(_88)<br/>StorageDead(_86)<br/>StorageDead(_80)<br/>StorageDead(_79)<br/>StorageDead(_78)<br/>StorageDead(_76)<br/>StorageDead(_75)<br/>StorageDead(_74)<br/>StorageDead(_72)<br/>StorageDead(_71)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb43__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageDead(_80)<br/>StorageDead(_79)<br/></td></tr><tr><td align="left">_77 = &lt;Result&lt;decimal::Decimal, ProgramError&gt; as Try&gt;::branch(move _78)</td></tr></table>>];
    bb44__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">_112 = const true<br/>StorageDead(_78)<br/>_90 = discriminant(_77)<br/></td></tr><tr><td align="left">switchInt(move _90)</td></tr></table>>];
    bb45__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">StorageLive(_94)<br/>_94 = ((_77 as Continue).0: math::decimal::Decimal)<br/>_76 = _94<br/>StorageDead(_94)<br/></td></tr><tr><td align="left">_74 = &lt;decimal::Decimal as common::TryAdd&gt;::try_add(move _75, move _76)</td></tr></table>>];
    bb46__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">StorageLive(_91)<br/>_91 = move ((_77 as Break).0: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;)<br/>StorageLive(_93)<br/>_93 = move _91<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;Bonus, ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, ProgramError&gt;&gt;&gt;::from_residual(move _93)</td></tr></table>>];
    bb47__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left" balign="left">StorageDead(_93)<br/>StorageDead(_91)<br/>StorageDead(_76)<br/>StorageDead(_75)<br/>StorageDead(_74)<br/>StorageDead(_72)<br/>StorageDead(_71)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb48__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left" balign="left">StorageDead(_76)<br/>StorageDead(_75)<br/></td></tr><tr><td align="left">_73 = &lt;Result&lt;decimal::Decimal, ProgramError&gt; as Try&gt;::branch(move _74)</td></tr></table>>];
    bb49__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left" balign="left">_111 = const true<br/>StorageDead(_74)<br/>_95 = discriminant(_73)<br/></td></tr><tr><td align="left">switchInt(move _95)</td></tr></table>>];
    bb50__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">50</td></tr><tr><td align="left" balign="left">StorageLive(_99)<br/>_99 = ((_73 as Continue).0: math::decimal::Decimal)<br/>_72 = _99<br/>StorageDead(_99)<br/>StorageLive(_100)<br/>_100 = _23<br/></td></tr><tr><td align="left">_71 = &lt;decimal::Decimal as common::TryAdd&gt;::try_add(move _72, move _100)</td></tr></table>>];
    bb51__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">51</td></tr><tr><td align="left" balign="left">StorageLive(_96)<br/>_96 = move ((_73 as Break).0: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;)<br/>StorageLive(_98)<br/>_98 = move _96<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;Bonus, ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, ProgramError&gt;&gt;&gt;::from_residual(move _98)</td></tr></table>>];
    bb52__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">52</td></tr><tr><td align="left" balign="left">StorageDead(_98)<br/>StorageDead(_96)<br/>StorageDead(_72)<br/>StorageDead(_71)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb53__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">53</td></tr><tr><td align="left" balign="left">StorageDead(_100)<br/>StorageDead(_72)<br/></td></tr><tr><td align="left">_70 = &lt;Result&lt;decimal::Decimal, ProgramError&gt; as Try&gt;::branch(move _71)</td></tr></table>>];
    bb54__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">54</td></tr><tr><td align="left" balign="left">StorageDead(_71)<br/>_101 = discriminant(_70)<br/></td></tr><tr><td align="left">switchInt(move _101)</td></tr></table>>];
    bb55__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">55</td></tr><tr><td align="left" balign="left">StorageLive(_105)<br/>_105 = ((_70 as Continue).0: math::decimal::Decimal)<br/>_69 = _105<br/>StorageDead(_105)<br/>_121 = discriminant(_70)<br/>_123 = discriminant(_73)<br/>_125 = discriminant(_77)<br/>_127 = discriminant(_81)<br/>_113 = const false<br/>StorageDead(_81)<br/>_112 = const false<br/>StorageDead(_77)<br/>_111 = const false<br/>StorageDead(_73)<br/>StorageDead(_70)<br/>StorageLive(_106)<br/>StorageLive(_107)<br/>StorageLive(_108)<br/>_108 = _69<br/>StorageLive(_109)<br/></td></tr><tr><td align="left">_109 = decimal::Decimal::from_percent(const _)</td></tr></table>>];
    bb56__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">56</td></tr><tr><td align="left" balign="left">StorageLive(_102)<br/>_102 = move ((_70 as Break).0: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;)<br/>StorageLive(_104)<br/>_104 = move _102<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;Bonus, ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, ProgramError&gt;&gt;&gt;::from_residual(move _104)</td></tr></table>>];
    bb57__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">57</td></tr><tr><td align="left" balign="left">StorageDead(_104)<br/>StorageDead(_102)<br/>_129 = discriminant(_70)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb58__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">58</td></tr><tr><td align="left">_107 = std::cmp::min::&lt;decimal::Decimal&gt;(move _108, move _109)</td></tr></table>>];
    bb59__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">59</td></tr><tr><td align="left" balign="left">StorageDead(_109)<br/>StorageDead(_108)<br/>StorageLive(_110)<br/>_110 = _23<br/>_106 = Bonus { total_bonus: move _107, protocol_liquidation_fee: move _110 }<br/>StorageDead(_110)<br/>StorageDead(_107)<br/>_0 = Result::&lt;Bonus, ProgramError&gt;::Ok(move _106)<br/>StorageDead(_106)<br/>StorageDead(_69)<br/>StorageDead(_44)<br/>StorageDead(_23)<br/>StorageDead(_21)<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb60__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">60</td></tr><tr><td align="left" balign="left">_131 = discriminant(_73)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb61__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">61</td></tr><tr><td align="left" balign="left">_133 = discriminant(_77)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb62__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">62</td></tr><tr><td align="left" balign="left">_135 = discriminant(_81)<br/>_113 = const false<br/>StorageDead(_81)<br/>_112 = const false<br/>StorageDead(_77)<br/>_111 = const false<br/>StorageDead(_73)<br/>StorageDead(_70)<br/>StorageDead(_69)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb63__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">63</td></tr><tr><td align="left" balign="left">StorageDead(_44)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb64__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">64</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageDead(_21)<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb65__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">65</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb66__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">66</td></tr><tr><td align="left">return</td></tr></table>>];
    bb67__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">67 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb68__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">68</td></tr><tr><td align="left" balign="left">_139 = discriminant(_48)<br/>_114 = const false<br/>StorageDead(_48)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb69__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">69</td></tr><tr><td align="left" balign="left">_141 = discriminant(_33)<br/>_115 = const false<br/>StorageDead(_33)<br/>StorageDead(_26)<br/>StorageDead(_25)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb70__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">70 (cleanup)</td></tr><tr><td align="left" balign="left">_143 = discriminant(_70)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb71__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">71 (cleanup)</td></tr><tr><td align="left" balign="left">_144 = discriminant(_73)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb72__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">72 (cleanup)</td></tr><tr><td align="left" balign="left">_145 = discriminant(_77)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb73__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">73 (cleanup)</td></tr><tr><td align="left" balign="left">_146 = discriminant(_81)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb74__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">74 (cleanup)</td></tr><tr><td align="left" balign="left">_147 = discriminant(_58)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb75__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">75 (cleanup)</td></tr><tr><td align="left" balign="left">_148 = discriminant(_48)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb76__0_470 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">76 (cleanup)</td></tr><tr><td align="left" balign="left">_149 = discriminant(_33)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_470 -> bb1__0_470 [label="return"];
    bb1__0_470 -> bb9__0_470 [label="0"];
    bb1__0_470 -> bb2__0_470 [label="otherwise"];
    bb2__0_470 -> bb6__0_470 [label="0"];
    bb2__0_470 -> bb3__0_470 [label="otherwise"];
    bb3__0_470 -> bb4__0_470 [label="return"];
    bb4__0_470 -> bb5__0_470 [label="return"];
    bb5__0_470 -> bb65__0_470 [label=""];
    bb6__0_470 -> bb7__0_470 [label="return"];
    bb7__0_470 -> bb8__0_470 [label="return"];
    bb8__0_470 -> bb65__0_470 [label=""];
    bb9__0_470 -> bb10__0_470 [label="return"];
    bb10__0_470 -> bb11__0_470 [label="return"];
    bb11__0_470 -> bb12__0_470 [label="return"];
    bb12__0_470 -> bb13__0_470 [label="return"];
    bb13__0_470 -> bb23__0_470 [label="0"];
    bb13__0_470 -> bb14__0_470 [label="otherwise"];
    bb14__0_470 -> bb15__0_470 [label="return"];
    bb15__0_470 -> bb16__0_470 [label="return"];
    bb15__0_470 -> bb67__0_470 [label="unwind"];
    bb16__0_470 -> bb17__0_470 [label="0"];
    bb16__0_470 -> bb19__0_470 [label="1"];
    bb16__0_470 -> bb18__0_470 [label="otherwise"];
    bb17__0_470 -> bb21__0_470 [label="return"];
    bb17__0_470 -> bb76__0_470 [label="unwind"];
    bb19__0_470 -> bb20__0_470 [label="return"];
    bb19__0_470 -> bb76__0_470 [label="unwind"];
    bb20__0_470 -> bb69__0_470 [label=""];
    bb21__0_470 -> bb22__0_470 [label="return"];
    bb21__0_470 -> bb76__0_470 [label="unwind"];
    bb22__0_470 -> bb69__0_470 [label=""];
    bb23__0_470 -> bb24__0_470 [label="return"];
    bb24__0_470 -> bb25__0_470 [label="return"];
    bb24__0_470 -> bb67__0_470 [label="unwind"];
    bb25__0_470 -> bb26__0_470 [label="0"];
    bb25__0_470 -> bb27__0_470 [label="1"];
    bb25__0_470 -> bb18__0_470 [label="otherwise"];
    bb26__0_470 -> bb29__0_470 [label="return"];
    bb26__0_470 -> bb75__0_470 [label="unwind"];
    bb27__0_470 -> bb28__0_470 [label="return"];
    bb27__0_470 -> bb75__0_470 [label="unwind"];
    bb28__0_470 -> bb68__0_470 [label=""];
    bb29__0_470 -> bb30__0_470 [label="return"];
    bb29__0_470 -> bb75__0_470 [label="unwind"];
    bb30__0_470 -> bb31__0_470 [label="0"];
    bb30__0_470 -> bb32__0_470 [label="1"];
    bb30__0_470 -> bb18__0_470 [label="otherwise"];
    bb31__0_470 -> bb34__0_470 [label="return"];
    bb31__0_470 -> bb74__0_470 [label="unwind"];
    bb32__0_470 -> bb33__0_470 [label="return"];
    bb32__0_470 -> bb74__0_470 [label="unwind"];
    bb33__0_470 -> bb68__0_470 [label=""];
    bb34__0_470 -> bb35__0_470 [label="return"];
    bb34__0_470 -> bb74__0_470 [label="unwind"];
    bb35__0_470 -> bb36__0_470 [label="return"];
    bb35__0_470 -> bb74__0_470 [label="unwind"];
    bb36__0_470 -> bb37__0_470 [label="return"];
    bb36__0_470 -> bb74__0_470 [label="unwind"];
    bb37__0_470 -> bb38__0_470 [label="return"];
    bb38__0_470 -> bb39__0_470 [label="return"];
    bb38__0_470 -> bb67__0_470 [label="unwind"];
    bb39__0_470 -> bb40__0_470 [label="0"];
    bb39__0_470 -> bb41__0_470 [label="1"];
    bb39__0_470 -> bb18__0_470 [label="otherwise"];
    bb40__0_470 -> bb43__0_470 [label="return"];
    bb40__0_470 -> bb73__0_470 [label="unwind"];
    bb41__0_470 -> bb42__0_470 [label="return"];
    bb41__0_470 -> bb73__0_470 [label="unwind"];
    bb42__0_470 -> bb62__0_470 [label=""];
    bb43__0_470 -> bb44__0_470 [label="return"];
    bb43__0_470 -> bb73__0_470 [label="unwind"];
    bb44__0_470 -> bb45__0_470 [label="0"];
    bb44__0_470 -> bb46__0_470 [label="1"];
    bb44__0_470 -> bb18__0_470 [label="otherwise"];
    bb45__0_470 -> bb48__0_470 [label="return"];
    bb45__0_470 -> bb72__0_470 [label="unwind"];
    bb46__0_470 -> bb47__0_470 [label="return"];
    bb46__0_470 -> bb72__0_470 [label="unwind"];
    bb47__0_470 -> bb61__0_470 [label=""];
    bb48__0_470 -> bb49__0_470 [label="return"];
    bb48__0_470 -> bb72__0_470 [label="unwind"];
    bb49__0_470 -> bb50__0_470 [label="0"];
    bb49__0_470 -> bb51__0_470 [label="1"];
    bb49__0_470 -> bb18__0_470 [label="otherwise"];
    bb50__0_470 -> bb53__0_470 [label="return"];
    bb50__0_470 -> bb71__0_470 [label="unwind"];
    bb51__0_470 -> bb52__0_470 [label="return"];
    bb51__0_470 -> bb71__0_470 [label="unwind"];
    bb52__0_470 -> bb60__0_470 [label=""];
    bb53__0_470 -> bb54__0_470 [label="return"];
    bb53__0_470 -> bb71__0_470 [label="unwind"];
    bb54__0_470 -> bb55__0_470 [label="0"];
    bb54__0_470 -> bb56__0_470 [label="1"];
    bb54__0_470 -> bb18__0_470 [label="otherwise"];
    bb55__0_470 -> bb58__0_470 [label="return"];
    bb56__0_470 -> bb57__0_470 [label="return"];
    bb56__0_470 -> bb70__0_470 [label="unwind"];
    bb57__0_470 -> bb60__0_470 [label=""];
    bb58__0_470 -> bb59__0_470 [label="return"];
    bb59__0_470 -> bb66__0_470 [label=""];
    bb60__0_470 -> bb61__0_470 [label=""];
    bb61__0_470 -> bb62__0_470 [label=""];
    bb62__0_470 -> bb63__0_470 [label=""];
    bb63__0_470 -> bb64__0_470 [label=""];
    bb64__0_470 -> bb66__0_470 [label=""];
    bb65__0_470 -> bb66__0_470 [label=""];
    bb68__0_470 -> bb63__0_470 [label=""];
    bb69__0_470 -> bb64__0_470 [label=""];
    bb70__0_470 -> bb71__0_470 [label=""];
    bb71__0_470 -> bb72__0_470 [label=""];
    bb72__0_470 -> bb73__0_470 [label=""];
    bb73__0_470 -> bb67__0_470 [label=""];
    bb74__0_470 -> bb75__0_470 [label=""];
    bb75__0_470 -> bb67__0_470 [label=""];
    bb76__0_470 -> bb67__0_470 [label=""];
}
