digraph Mir_0_1337 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn U128::as_u64(_1: &amp;ReErased math::rate::U128) -&gt; u64<br align="left"/>let _2: &amp;ReErased [u64; 2_usize];<br align="left"/>let _3: ();<br align="left"/>let mut _4: bool;<br align="left"/>let mut _5: &amp;ReErased math::rate::U128;<br align="left"/>let mut _6: !;<br align="left"/>let _7: !;<br align="left"/>let _8: usize;<br align="left"/>let mut _9: usize;<br align="left"/>let mut _10: bool;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug arr =&gt; _2;<br align="left"/>>;
    bb0__0_1337 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>_2 = &amp;((*_1).0: [u64; 2])<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = &amp;(*_1)<br/></td></tr><tr><td align="left">_4 = U128::fits_word(move _5)</td></tr></table>>];
    bb1__0_1337 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">switchInt(move _4)</td></tr></table>>];
    bb2__0_1337 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>_3 = const ()<br/>StorageDead(_4)<br/>StorageDead(_3)<br/>StorageLive(_8)<br/>_8 = const 0_usize<br/>_9 = Len((*_2))<br/>_10 = Lt(_8, _9)<br/></td></tr><tr><td align="left">assert(move _10, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _9, _8)</td></tr></table>>];
    bb3__0_1337 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageLive(_7)<br/></td></tr><tr><td align="left">_7 = begin_panic::&lt;&amp;str&gt;(const &quot;Integer overflow when casting to u64&quot;)</td></tr></table>>];
    bb4__0_1337 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_0 = (*_2)[_8]<br/>StorageDead(_2)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_1337 -> bb1__0_1337 [label="return"];
    bb1__0_1337 -> bb3__0_1337 [label="0"];
    bb1__0_1337 -> bb2__0_1337 [label="otherwise"];
    bb2__0_1337 -> bb4__0_1337 [label="success"];
}
