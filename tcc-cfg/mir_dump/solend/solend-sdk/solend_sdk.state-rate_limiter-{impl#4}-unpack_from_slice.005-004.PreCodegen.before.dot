digraph Mir_0_404 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn &lt;rate_limiter::RateLimiter as Pack&gt;::unpack_from_slice(_1: &amp;ReErased [u8]) -&gt; std::result::Result&lt;state::rate_limiter::RateLimiter, solana_program::program_error::ProgramError&gt;<br align="left"/>let _2: &amp;ReErased [u8; 56_usize];<br align="left"/>let _3: usize;<br align="left"/>let _4: &amp;ReErased [u8];<br align="left"/>let _5: &amp;ReErased [u8];<br align="left"/>let mut _6: &amp;ReErased [u8];<br align="left"/>let mut _7: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _8: usize;<br align="left"/>let mut _9: usize;<br align="left"/>let mut _10: usize;<br align="left"/>let mut _11: (usize, bool);<br align="left"/>let mut _12: &amp;ReErased [u8];<br align="left"/>let _13: &amp;ReErased [u8; 8_usize];<br align="left"/>let _14: &amp;ReErased [u8; 8_usize];<br align="left"/>let _15: &amp;ReErased [u8; 16_usize];<br align="left"/>let _16: &amp;ReErased [u8; 8_usize];<br align="left"/>let _17: &amp;ReErased [u8; 16_usize];<br align="left"/>let mut _18: (&amp;ReErased [u8; 8_usize], &amp;ReErased [u8; 8_usize], &amp;ReErased [u8; 16_usize], &amp;ReErased [u8; 8_usize], &amp;ReErased [u8; 16_usize]);<br align="left"/>let _19: &amp;ReErased [u8; 56_usize];<br align="left"/>let mut _20: &amp;ReErased [u8; 56_usize];<br align="left"/>let mut _21: state::rate_limiter::RateLimiter;<br align="left"/>let mut _22: state::rate_limiter::RateLimiterConfig;<br align="left"/>let mut _23: u64;<br align="left"/>let mut _24: [u8; 8_usize];<br align="left"/>let mut _25: u64;<br align="left"/>let mut _26: [u8; 8_usize];<br align="left"/>let mut _27: math::decimal::Decimal;<br align="left"/>let mut _28: &amp;ReErased [u8; 16_usize];<br align="left"/>let mut _29: u64;<br align="left"/>let mut _30: [u8; 8_usize];<br align="left"/>let mut _31: math::decimal::Decimal;<br align="left"/>let mut _32: &amp;ReErased [u8; 16_usize];<br align="left"/>debug src =&gt; _1;<br align="left"/>debug src =&gt; _2;<br align="left"/>debug offset =&gt; _3;<br align="left"/>debug slice =&gt; _4;<br align="left"/>debug config_max_outflow_src =&gt; _13;<br align="left"/>debug config_window_duration_src =&gt; _14;<br align="left"/>debug prev_qty_src =&gt; _15;<br align="left"/>debug window_start_src =&gt; _16;<br align="left"/>debug cur_qty_src =&gt; _17;<br align="left"/>debug input =&gt; _19;<br align="left"/>>;
    bb0__0_404 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>StorageLive(_3)<br/>_3 = const 0_usize<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = &amp;(*_1)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = _3<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>_10 = _3<br/>_11 = CheckedAdd(_10, const _)<br/></td></tr><tr><td align="left">assert(!move (_11.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _10, const _)</td></tr></table>>];
    bb1__0_404 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_9 = move (_11.0: usize)<br/>StorageDead(_10)<br/>_7 = std::ops::Range::&lt;usize&gt; { start: move _8, end: move _9 }<br/>StorageDead(_9)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">_5 = &lt;[u8] as Index&lt;std::ops::Range&lt;usize&gt;&gt;&gt;::index(move _6, move _7)</td></tr></table>>];
    bb2__0_404 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>StorageDead(_6)<br/>_4 = &amp;(*_5)<br/>StorageLive(_12)<br/>_12 = &amp;(*_4)<br/></td></tr><tr><td align="left">_2 = &lt;rate_limiter::RateLimiter as Pack&gt;::unpack_from_slice::as_array::&lt;u8&gt;(move _12)</td></tr></table>>];
    bb3__0_404 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>_19 = _2<br/>StorageLive(_20)<br/>_20 = &amp;(*_19)<br/></td></tr><tr><td align="left">_18 = &lt;rate_limiter::RateLimiter as Pack&gt;::unpack_from_slice::as_arrays::&lt;u8&gt;(move _20)</td></tr></table>>];
    bb4__0_404 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageDead(_19)<br/>StorageLive(_13)<br/>_13 = (_18.0: &amp;[u8; 8])<br/>StorageLive(_14)<br/>_14 = (_18.1: &amp;[u8; 8])<br/>StorageLive(_15)<br/>_15 = (_18.2: &amp;[u8; 16])<br/>StorageLive(_16)<br/>_16 = (_18.3: &amp;[u8; 8])<br/>StorageLive(_17)<br/>_17 = (_18.4: &amp;[u8; 16])<br/>StorageDead(_18)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>_24 = (*_13)<br/></td></tr><tr><td align="left">_23 = core::num::&lt;impl u64&gt;::from_le_bytes(move _24)</td></tr></table>>];
    bb5__0_404 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>_26 = (*_14)<br/></td></tr><tr><td align="left">_25 = core::num::&lt;impl u64&gt;::from_le_bytes(move _26)</td></tr></table>>];
    bb6__0_404 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>_22 = rate_limiter::RateLimiterConfig { window_duration: move _25, max_outflow: move _23 }<br/>StorageDead(_25)<br/>StorageDead(_23)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>_28 = &amp;(*_15)<br/></td></tr><tr><td align="left">_27 = state::unpack_decimal(move _28)</td></tr></table>>];
    bb7__0_404 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>_30 = (*_16)<br/></td></tr><tr><td align="left">_29 = core::num::&lt;impl u64&gt;::from_le_bytes(move _30)</td></tr></table>>];
    bb8__0_404 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>_32 = &amp;(*_17)<br/></td></tr><tr><td align="left">_31 = state::unpack_decimal(move _32)</td></tr></table>>];
    bb9__0_404 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_32)<br/>_21 = rate_limiter::RateLimiter { config: move _22, prev_qty: move _27, window_start: move _29, cur_qty: move _31 }<br/>StorageDead(_31)<br/>StorageDead(_29)<br/>StorageDead(_27)<br/>StorageDead(_22)<br/>_0 = Result::&lt;rate_limiter::RateLimiter, ProgramError&gt;::Ok(move _21)<br/>StorageDead(_21)<br/>StorageDead(_17)<br/>StorageDead(_16)<br/>StorageDead(_15)<br/>StorageDead(_14)<br/>StorageDead(_13)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_404 -> bb1__0_404 [label="success"];
    bb1__0_404 -> bb2__0_404 [label="return"];
    bb2__0_404 -> bb3__0_404 [label="return"];
    bb3__0_404 -> bb4__0_404 [label="return"];
    bb4__0_404 -> bb5__0_404 [label="return"];
    bb5__0_404 -> bb6__0_404 [label="return"];
    bb6__0_404 -> bb7__0_404 [label="return"];
    bb7__0_404 -> bb8__0_404 [label="return"];
    bb8__0_404 -> bb9__0_404 [label="return"];
}
