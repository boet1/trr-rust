// MIR for `rate::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:1639:3: 1639:48>::partial_cmp` after PreCodegen

fn rate::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:1639:3: 1639:48>::partial_cmp(_1: &U128, _2: &U128) -> Option<std::cmp::Ordering> {
    debug self => _1;
    debug other => _2;
    let mut _0: std::option::Option<std::cmp::Ordering>;
    let mut _3: std::cmp::Ordering;
    let mut _4: &math::rate::U128;
    let mut _5: &math::rate::U128;

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = &(*_1);
        StorageLive(_5);
        _5 = &(*_2);
        _3 = <U128 as Ord>::cmp(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        StorageDead(_4);
        _0 = Option::<std::cmp::Ordering>::Some(move _3);
        StorageDead(_3);
        return;
    }
}
