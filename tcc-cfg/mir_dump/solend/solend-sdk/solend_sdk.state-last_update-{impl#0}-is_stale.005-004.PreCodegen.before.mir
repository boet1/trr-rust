// MIR for `last_update::<impl at token-lending\sdk\src\state\last_update.rs:17:1: 17:16>::is_stale` before PreCodegen

fn last_update::<impl at token-lending\sdk\src\state\last_update.rs:17:1: 17:16>::is_stale(_1: &last_update::LastUpdate, _2: u64) -> Result<bool, ProgramError> {
    debug self => _1;
    debug slot => _2;
    let mut _0: std::result::Result<bool, solana_program::program_error::ProgramError>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: u64;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, u64>;
    let mut _7: std::result::Result<u64, solana_program::program_error::ProgramError>;
    let mut _8: &state::last_update::LastUpdate;
    let mut _9: u64;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _14: u64;
    let mut _15: isize;
    let mut _16: isize;
    let mut _17: isize;
    let mut _18: isize;
    let mut _19: isize;
    scope 1 {
        debug residual => _11;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _14;
        scope 4 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = ((*_1).1: bool);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _3 = const true;
        goto -> bb9;
    }

    bb2: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &(*_1);
        StorageLive(_9);
        _9 = _2;
        _7 = last_update::LastUpdate::slots_elapsed(move _8, move _9) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_9);
        StorageDead(_8);
        _6 = <Result<u64, ProgramError> as Try>::branch(move _7) -> [return: bb4, unwind: bb11];
    }

    bb4: {
        StorageDead(_7);
        _10 = discriminant(_6);
        switchInt(move _10) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_14);
        _14 = ((_6 as Continue).0: u64);
        _5 = _14;
        StorageDead(_14);
        _3 = Ge(move _5, const _);
        _15 = discriminant(_6);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb9;
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_11);
        _11 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_13);
        _13 = move _11;
        _0 = <Result<bool, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _13) -> [return: bb8, unwind: bb12];
    }

    bb8: {
        StorageDead(_13);
        StorageDead(_11);
        _17 = discriminant(_6);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb10;
    }

    bb9: {
        StorageDead(_4);
        _0 = Result::<bool, ProgramError>::Ok(move _3);
        StorageDead(_3);
        goto -> bb10;
    }

    bb10: {
        return;
    }

    bb11 (cleanup): {
        resume;
    }

    bb12 (cleanup): {
        _19 = discriminant(_6);
        goto -> bb11;
    }
}
