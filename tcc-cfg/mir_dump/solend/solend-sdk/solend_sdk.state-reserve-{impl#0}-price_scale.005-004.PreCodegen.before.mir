// MIR for `reserve::<impl at token-lending\sdk\src\state\reserve.rs:65:1: 65:13>::price_scale` before PreCodegen

fn reserve::<impl at token-lending\sdk\src\state\reserve.rs:65:1: 65:13>::price_scale(_1: &reserve::Reserve) -> decimal::Decimal {
    debug self => _1;
    let mut _0: math::decimal::Decimal;
    let _2: i64;
    let mut _3: i64;
    let mut _4: i64;
    let mut _6: i64;
    let mut _7: (i64, bool);
    let mut _8: u64;
    let mut _9: i64;
    scope 1 {
        debug scaled_price_offset_bps => _2;
        let _5: i64;
        scope 2 {
            debug price_weight_bps => _5;
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = (((*_1).5: state::reserve::ReserveConfig).19: i64);
        _3 = std::cmp::max::<i64>(const _, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_4);
        _2 = std::cmp::min::<i64>(const _, move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_3);
        StorageLive(_5);
        StorageLive(_6);
        _6 = _2;
        _7 = CheckedAdd(const 10000_i64, _6);
        assert(!move (_7.1: bool), "attempt to compute `{} + {}`, which would overflow", const 10000_i64, move _6) -> [success: bb3, unwind continue];
    }

    bb3: {
        _5 = move (_7.0: i64);
        StorageDead(_6);
        StorageLive(_8);
        StorageLive(_9);
        _9 = _5;
        _8 = move _9 as u64 (IntToInt);
        StorageDead(_9);
        _0 = decimal::Decimal::from_bps(move _8) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_2);
        return;
    }
}
