digraph Mir_0_392 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn rate_limiter::RateLimiter::current_outflow(_1: &amp;ReErased state::rate_limiter::RateLimiter, _2: u64) -&gt; std::result::Result&lt;math::decimal::Decimal, solana_program::program_error::ProgramError&gt;<br align="left"/>let _3: ();<br align="left"/>let mut _4: bool;<br align="left"/>let mut _5: u64;<br align="left"/>let mut _6: !;<br align="left"/>let _7: ();<br align="left"/>let mut _8: &amp;ReErased str;<br align="left"/>let _9: &amp;ReErased str;<br align="left"/>let mut _10: solana_program::program_error::ProgramError;<br align="left"/>let mut _11: error::LendingError;<br align="left"/>let _12: math::decimal::Decimal;<br align="left"/>let mut _13: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;, math::decimal::Decimal&gt;;<br align="left"/>let mut _14: std::result::Result&lt;math::decimal::Decimal, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _15: math::decimal::Decimal;<br align="left"/>let mut _16: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;, math::decimal::Decimal&gt;;<br align="left"/>let mut _17: std::result::Result&lt;math::decimal::Decimal, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _18: math::decimal::Decimal;<br align="left"/>let mut _19: u64;<br align="left"/>let mut _20: math::decimal::Decimal;<br align="left"/>let mut _21: u64;<br align="left"/>let mut _22: u64;<br align="left"/>let mut _23: u64;<br align="left"/>let mut _24: u64;<br align="left"/>let mut _25: (u64, bool);<br align="left"/>let mut _26: (u64, bool);<br align="left"/>let mut _27: isize;<br align="left"/>let _28: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _29: !;<br align="left"/>let mut _30: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let _31: math::decimal::Decimal;<br align="left"/>let mut _32: u64;<br align="left"/>let mut _33: isize;<br align="left"/>let _34: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _35: !;<br align="left"/>let mut _36: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let _37: math::decimal::Decimal;<br align="left"/>let mut _38: math::decimal::Decimal;<br align="left"/>let mut _39: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;, math::decimal::Decimal&gt;;<br align="left"/>let mut _40: std::result::Result&lt;math::decimal::Decimal, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _41: math::decimal::Decimal;<br align="left"/>let mut _42: math::decimal::Decimal;<br align="left"/>let mut _43: isize;<br align="left"/>let _44: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _45: !;<br align="left"/>let mut _46: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let _47: math::decimal::Decimal;<br align="left"/>let mut _48: math::decimal::Decimal;<br align="left"/>let mut _49: bool;<br align="left"/>let mut _50: bool;<br align="left"/>let mut _51: isize;<br align="left"/>let mut _52: isize;<br align="left"/>let mut _53: isize;<br align="left"/>let mut _54: isize;<br align="left"/>let mut _55: isize;<br align="left"/>let mut _56: isize;<br align="left"/>let mut _57: isize;<br align="left"/>let mut _58: isize;<br align="left"/>let mut _59: isize;<br align="left"/>let mut _60: isize;<br align="left"/>let mut _61: isize;<br align="left"/>let mut _62: isize;<br align="left"/>let mut _63: isize;<br align="left"/>let mut _64: isize;<br align="left"/>let mut _65: isize;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug cur_slot =&gt; _2;<br align="left"/>debug prev_weight =&gt; _12;<br align="left"/>debug residual =&gt; _28;<br align="left"/>debug val =&gt; _31;<br align="left"/>debug residual =&gt; _34;<br align="left"/>debug val =&gt; _37;<br align="left"/>debug residual =&gt; _44;<br align="left"/>debug val =&gt; _47;<br align="left"/>>;
    bb0__0_392 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_49 = const false<br/>_50 = const false<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = (((*_1).0: state::rate_limiter::RateLimiterConfig).0: u64)<br/>_4 = Eq(move _5, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _4)</td></tr></table>>];
    bb1__0_392 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = const &quot;Window duration cannot be 0&quot;<br/>_8 = &amp;(*_9)<br/></td></tr><tr><td align="left">_7 = solana_program::log::sol_log(move _8)</td></tr></table>>];
    bb2__0_392 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageDead(_9)<br/>StorageDead(_7)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>_11 = LendingError::InvalidAccountInput<br/></td></tr><tr><td align="left">_10 = &lt;LendingError as Into&lt;ProgramError&gt;&gt;::into(move _11)</td></tr></table>>];
    bb3__0_392 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>_0 = Result::&lt;decimal::Decimal, ProgramError&gt;::Err(move _10)<br/>StorageDead(_10)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb4__0_392 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>_3 = const ()<br/>StorageDead(_4)<br/>StorageDead(_3)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>_19 = (((*_1).0: state::rate_limiter::RateLimiterConfig).0: u64)<br/></td></tr><tr><td align="left">_18 = &lt;decimal::Decimal as From&lt;u64&gt;&gt;::from(move _19)</td></tr></table>>];
    bb5__0_392 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>_23 = _2<br/>StorageLive(_24)<br/>_24 = ((*_1).2: u64)<br/>_25 = CheckedSub(_23, _24)<br/></td></tr><tr><td align="left">assert(!move (_25.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, move _23, move _24)</td></tr></table>>];
    bb6__0_392 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">_22 = move (_25.0: u64)<br/>StorageDead(_24)<br/>StorageDead(_23)<br/>_26 = CheckedAdd(_22, const 1_u64)<br/></td></tr><tr><td align="left">assert(!move (_26.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _22, const 1_u64)</td></tr></table>>];
    bb7__0_392 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_21 = move (_26.0: u64)<br/>StorageDead(_22)<br/></td></tr><tr><td align="left">_20 = &lt;decimal::Decimal as From&lt;u64&gt;&gt;::from(move _21)</td></tr></table>>];
    bb8__0_392 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/></td></tr><tr><td align="left">_17 = &lt;decimal::Decimal as common::TrySub&gt;::try_sub(move _18, move _20)</td></tr></table>>];
    bb9__0_392 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageDead(_18)<br/></td></tr><tr><td align="left">_16 = &lt;Result&lt;decimal::Decimal, ProgramError&gt; as Try&gt;::branch(move _17)</td></tr></table>>];
    bb10__0_392 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">_49 = const true<br/>StorageDead(_17)<br/>_27 = discriminant(_16)<br/></td></tr><tr><td align="left">switchInt(move _27)</td></tr></table>>];
    bb11__0_392 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_31)<br/>_31 = ((_16 as Continue).0: math::decimal::Decimal)<br/>_15 = _31<br/>StorageDead(_31)<br/>StorageLive(_32)<br/>_32 = (((*_1).0: state::rate_limiter::RateLimiterConfig).0: u64)<br/></td></tr><tr><td align="left">_14 = &lt;decimal::Decimal as common::TryDiv&lt;u64&gt;&gt;::try_div(move _15, move _32)</td></tr></table>>];
    bb12__0_392 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb13__0_392 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageLive(_28)<br/>_28 = move ((_16 as Break).0: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;)<br/>StorageLive(_30)<br/>_30 = move _28<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;decimal::Decimal, ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, ProgramError&gt;&gt;&gt;::from_residual(move _30)</td></tr></table>>];
    bb14__0_392 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>StorageDead(_28)<br/>StorageDead(_15)<br/>StorageDead(_14)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_392 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_32)<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">_13 = &lt;Result&lt;decimal::Decimal, ProgramError&gt; as Try&gt;::branch(move _14)</td></tr></table>>];
    bb16__0_392 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>_33 = discriminant(_13)<br/></td></tr><tr><td align="left">switchInt(move _33)</td></tr></table>>];
    bb17__0_392 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageLive(_37)<br/>_37 = ((_13 as Continue).0: math::decimal::Decimal)<br/>_12 = _37<br/>StorageDead(_37)<br/>_51 = discriminant(_13)<br/>_53 = discriminant(_16)<br/>_49 = const false<br/>StorageDead(_16)<br/>StorageDead(_13)<br/>StorageLive(_38)<br/>StorageLive(_39)<br/>StorageLive(_40)<br/>StorageLive(_41)<br/>_41 = _12<br/>StorageLive(_42)<br/>_42 = ((*_1).1: math::decimal::Decimal)<br/></td></tr><tr><td align="left">_40 = &lt;decimal::Decimal as common::TryMul&lt;decimal::Decimal&gt;&gt;::try_mul(move _41, move _42)</td></tr></table>>];
    bb18__0_392 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageLive(_34)<br/>_34 = move ((_13 as Break).0: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;)<br/>StorageLive(_36)<br/>_36 = move _34<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;decimal::Decimal, ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, ProgramError&gt;&gt;&gt;::from_residual(move _36)</td></tr></table>>];
    bb19__0_392 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_36)<br/>StorageDead(_34)<br/>_59 = discriminant(_13)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_392 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_42)<br/>StorageDead(_41)<br/></td></tr><tr><td align="left">_39 = &lt;Result&lt;decimal::Decimal, ProgramError&gt; as Try&gt;::branch(move _40)</td></tr></table>>];
    bb21__0_392 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">_50 = const true<br/>StorageDead(_40)<br/>_43 = discriminant(_39)<br/></td></tr><tr><td align="left">switchInt(move _43)</td></tr></table>>];
    bb22__0_392 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageLive(_47)<br/>_47 = ((_39 as Continue).0: math::decimal::Decimal)<br/>_38 = _47<br/>StorageDead(_47)<br/>StorageLive(_48)<br/>_48 = ((*_1).3: math::decimal::Decimal)<br/></td></tr><tr><td align="left">_0 = &lt;decimal::Decimal as common::TryAdd&gt;::try_add(move _38, move _48)</td></tr></table>>];
    bb23__0_392 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageLive(_44)<br/>_44 = move ((_39 as Break).0: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;)<br/>StorageLive(_46)<br/>_46 = move _44<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;decimal::Decimal, ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, ProgramError&gt;&gt;&gt;::from_residual(move _46)</td></tr></table>>];
    bb24__0_392 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_46)<br/>StorageDead(_44)<br/>StorageDead(_38)<br/>StorageDead(_12)<br/>_57 = discriminant(_39)<br/>_50 = const false<br/>StorageDead(_39)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb25__0_392 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_48)<br/>StorageDead(_38)<br/>StorageDead(_12)<br/>_55 = discriminant(_39)<br/>_50 = const false<br/>StorageDead(_39)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb26__0_392 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">_61 = discriminant(_16)<br/>_49 = const false<br/>StorageDead(_16)<br/>StorageDead(_13)<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb27__0_392 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left">return</td></tr></table>>];
    bb28__0_392 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">28 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb29__0_392 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">29 (cleanup)</td></tr><tr><td align="left" balign="left">_63 = discriminant(_39)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb30__0_392 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">30 (cleanup)</td></tr><tr><td align="left" balign="left">_64 = discriminant(_13)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb31__0_392 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">31 (cleanup)</td></tr><tr><td align="left" balign="left">_65 = discriminant(_16)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_392 -> bb4__0_392 [label="0"];
    bb0__0_392 -> bb1__0_392 [label="otherwise"];
    bb1__0_392 -> bb2__0_392 [label="return"];
    bb2__0_392 -> bb3__0_392 [label="return"];
    bb3__0_392 -> bb27__0_392 [label=""];
    bb4__0_392 -> bb5__0_392 [label="return"];
    bb5__0_392 -> bb6__0_392 [label="success"];
    bb6__0_392 -> bb7__0_392 [label="success"];
    bb7__0_392 -> bb8__0_392 [label="return"];
    bb8__0_392 -> bb9__0_392 [label="return"];
    bb9__0_392 -> bb10__0_392 [label="return"];
    bb9__0_392 -> bb28__0_392 [label="unwind"];
    bb10__0_392 -> bb11__0_392 [label="0"];
    bb10__0_392 -> bb13__0_392 [label="1"];
    bb10__0_392 -> bb12__0_392 [label="otherwise"];
    bb11__0_392 -> bb15__0_392 [label="return"];
    bb11__0_392 -> bb31__0_392 [label="unwind"];
    bb13__0_392 -> bb14__0_392 [label="return"];
    bb13__0_392 -> bb31__0_392 [label="unwind"];
    bb14__0_392 -> bb26__0_392 [label=""];
    bb15__0_392 -> bb16__0_392 [label="return"];
    bb15__0_392 -> bb31__0_392 [label="unwind"];
    bb16__0_392 -> bb17__0_392 [label="0"];
    bb16__0_392 -> bb18__0_392 [label="1"];
    bb16__0_392 -> bb12__0_392 [label="otherwise"];
    bb17__0_392 -> bb20__0_392 [label="return"];
    bb18__0_392 -> bb19__0_392 [label="return"];
    bb18__0_392 -> bb30__0_392 [label="unwind"];
    bb19__0_392 -> bb26__0_392 [label=""];
    bb20__0_392 -> bb21__0_392 [label="return"];
    bb20__0_392 -> bb28__0_392 [label="unwind"];
    bb21__0_392 -> bb22__0_392 [label="0"];
    bb21__0_392 -> bb23__0_392 [label="1"];
    bb21__0_392 -> bb12__0_392 [label="otherwise"];
    bb22__0_392 -> bb25__0_392 [label="return"];
    bb22__0_392 -> bb29__0_392 [label="unwind"];
    bb23__0_392 -> bb24__0_392 [label="return"];
    bb23__0_392 -> bb29__0_392 [label="unwind"];
    bb24__0_392 -> bb27__0_392 [label=""];
    bb25__0_392 -> bb27__0_392 [label=""];
    bb26__0_392 -> bb27__0_392 [label=""];
    bb29__0_392 -> bb28__0_392 [label=""];
    bb30__0_392 -> bb31__0_392 [label=""];
    bb31__0_392 -> bb28__0_392 [label=""];
}
