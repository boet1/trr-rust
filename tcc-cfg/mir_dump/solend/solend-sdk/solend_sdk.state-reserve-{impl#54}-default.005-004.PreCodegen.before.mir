// MIR for `reserve::<impl at token-lending\sdk\src\state\reserve.rs:939:30: 939:37>::default` before PreCodegen

fn reserve::<impl at token-lending\sdk\src\state\reserve.rs:939:30: 939:37>::default() -> reserve::ReserveConfig {
    let mut _0: state::reserve::ReserveConfig;
    let mut _1: u8;
    let mut _2: u8;
    let mut _3: u8;
    let mut _4: u8;
    let mut _5: u8;
    let mut _6: u8;
    let mut _7: u8;
    let mut _8: u8;
    let mut _9: u8;
    let mut _10: u8;
    let mut _11: u64;
    let mut _12: state::reserve::ReserveFees;
    let mut _13: u64;
    let mut _14: u64;
    let mut _15: solana_program::pubkey::Pubkey;
    let mut _16: u8;
    let mut _17: u8;
    let mut _18: u64;
    let mut _19: state::reserve::ReserveType;
    let mut _20: i64;
    let mut _21: std::option::Option<solana_program::pubkey::Pubkey>;
    let mut _22: u64;
    let mut _23: u64;

    bb0: {
        StorageLive(_1);
        _1 = <u8 as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_2);
        _2 = <u8 as Default>::default() -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageLive(_3);
        _3 = <u8 as Default>::default() -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageLive(_4);
        _4 = <u8 as Default>::default() -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageLive(_5);
        _5 = <u8 as Default>::default() -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageLive(_6);
        _6 = <u8 as Default>::default() -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageLive(_7);
        _7 = <u8 as Default>::default() -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageLive(_8);
        _8 = <u8 as Default>::default() -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageLive(_9);
        _9 = <u8 as Default>::default() -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageLive(_10);
        _10 = <u8 as Default>::default() -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageLive(_11);
        _11 = <u64 as Default>::default() -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageLive(_12);
        _12 = <reserve::ReserveFees as Default>::default() -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageLive(_13);
        _13 = <u64 as Default>::default() -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageLive(_14);
        _14 = <u64 as Default>::default() -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageLive(_15);
        _15 = <Pubkey as Default>::default() -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageLive(_16);
        _16 = <u8 as Default>::default() -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageLive(_17);
        _17 = <u8 as Default>::default() -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageLive(_18);
        _18 = <u64 as Default>::default() -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageLive(_19);
        _19 = <reserve::ReserveType as Default>::default() -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageLive(_20);
        _20 = <i64 as Default>::default() -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageLive(_21);
        _21 = <Option<Pubkey> as Default>::default() -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageLive(_22);
        _22 = <u64 as Default>::default() -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageLive(_23);
        _23 = <u64 as Default>::default() -> [return: bb23, unwind continue];
    }

    bb23: {
        _0 = reserve::ReserveConfig { optimal_utilization_rate: move _1, max_utilization_rate: move _2, loan_to_value_ratio: move _3, liquidation_bonus: move _4, max_liquidation_bonus: move _5, liquidation_threshold: move _6, max_liquidation_threshold: move _7, min_borrow_rate: move _8, optimal_borrow_rate: move _9, max_borrow_rate: move _10, super_max_borrow_rate: move _11, fees: move _12, deposit_limit: move _13, borrow_limit: move _14, fee_receiver: move _15, protocol_liquidation_fee: move _16, protocol_take_rate: move _17, added_borrow_weight_bps: move _18, reserve_type: move _19, scaled_price_offset_bps: move _20, extra_oracle_pubkey: move _21, attributed_borrow_limit_open: move _22, attributed_borrow_limit_close: move _23 };
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}
