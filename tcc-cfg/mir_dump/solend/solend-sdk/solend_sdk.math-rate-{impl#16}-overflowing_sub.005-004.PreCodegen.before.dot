digraph Mir_0_1383 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn U128::overflowing_sub(_1: math::rate::U128, _2: math::rate::U128) -&gt; (math::rate::U128, bool)<br align="left"/>let _3: &amp;ReErased [u64; 2_usize];<br align="left"/>let _4: &amp;ReErased [u64; 2_usize];<br align="left"/>let mut _5: [u64; 2_usize];<br align="left"/>let _6: *mut u64;<br align="left"/>let mut _7: *mut [u64; 2_usize];<br align="left"/>let mut _8: &amp;ReErased mut [u64; 2_usize];<br align="left"/>let mut _9: u64;<br align="left"/>let _10: ();<br align="left"/>let _11: ();<br align="left"/>let mut _12: bool;<br align="left"/>let mut _13: bool;<br align="left"/>let mut _14: u64;<br align="left"/>let _15: u64;<br align="left"/>let _16: bool;<br align="left"/>let mut _17: (u64, bool);<br align="left"/>let mut _18: u64;<br align="left"/>let _19: usize;<br align="left"/>let mut _20: usize;<br align="left"/>let mut _21: bool;<br align="left"/>let mut _22: u64;<br align="left"/>let _23: usize;<br align="left"/>let mut _24: usize;<br align="left"/>let mut _25: bool;<br align="left"/>let _26: u64;<br align="left"/>let _27: bool;<br align="left"/>let mut _28: (u64, bool);<br align="left"/>let mut _29: u64;<br align="left"/>let mut _30: u64;<br align="left"/>let _31: ();<br align="left"/>let mut _32: u64;<br align="left"/>let mut _33: *mut u64;<br align="left"/>let mut _34: *mut u64;<br align="left"/>let mut _35: isize;<br align="left"/>let mut _36: isize;<br align="left"/>let mut _37: u8;<br align="left"/>let mut _38: u8;<br align="left"/>let mut _39: bool;<br align="left"/>let mut _40: u8;<br align="left"/>let mut _41: bool;<br align="left"/>let mut _42: (u8, bool);<br align="left"/>let _43: u64;<br align="left"/>let _44: bool;<br align="left"/>let mut _45: (u64, bool);<br align="left"/>let mut _46: u64;<br align="left"/>let _47: usize;<br align="left"/>let mut _48: usize;<br align="left"/>let mut _49: bool;<br align="left"/>let mut _50: u64;<br align="left"/>let _51: usize;<br align="left"/>let mut _52: usize;<br align="left"/>let mut _53: bool;<br align="left"/>let _54: ();<br align="left"/>let mut _55: u64;<br align="left"/>let mut _56: *mut u64;<br align="left"/>let mut _57: *mut u64;<br align="left"/>let mut _58: isize;<br align="left"/>let mut _59: isize;<br align="left"/>let mut _60: bool;<br align="left"/>let _61: ();<br align="left"/>let mut _62: bool;<br align="left"/>let mut _63: bool;<br align="left"/>let mut _64: u64;<br align="left"/>let _65: u64;<br align="left"/>let _66: bool;<br align="left"/>let mut _67: (u64, bool);<br align="left"/>let mut _68: u64;<br align="left"/>let _69: usize;<br align="left"/>let mut _70: usize;<br align="left"/>let mut _71: bool;<br align="left"/>let mut _72: u64;<br align="left"/>let _73: usize;<br align="left"/>let mut _74: usize;<br align="left"/>let mut _75: bool;<br align="left"/>let _76: u64;<br align="left"/>let _77: bool;<br align="left"/>let mut _78: (u64, bool);<br align="left"/>let mut _79: u64;<br align="left"/>let mut _80: u64;<br align="left"/>let _81: ();<br align="left"/>let mut _82: u64;<br align="left"/>let mut _83: *mut u64;<br align="left"/>let mut _84: *mut u64;<br align="left"/>let mut _85: isize;<br align="left"/>let mut _86: isize;<br align="left"/>let mut _87: u8;<br align="left"/>let mut _88: u8;<br align="left"/>let mut _89: bool;<br align="left"/>let mut _90: u8;<br align="left"/>let mut _91: bool;<br align="left"/>let mut _92: (u8, bool);<br align="left"/>let _93: u64;<br align="left"/>let _94: bool;<br align="left"/>let mut _95: (u64, bool);<br align="left"/>let mut _96: u64;<br align="left"/>let _97: usize;<br align="left"/>let mut _98: usize;<br align="left"/>let mut _99: bool;<br align="left"/>let mut _100: u64;<br align="left"/>let _101: usize;<br align="left"/>let mut _102: usize;<br align="left"/>let mut _103: bool;<br align="left"/>let _104: ();<br align="left"/>let mut _105: u64;<br align="left"/>let mut _106: *mut u64;<br align="left"/>let mut _107: *mut u64;<br align="left"/>let mut _108: isize;<br align="left"/>let mut _109: isize;<br align="left"/>let mut _110: bool;<br align="left"/>let mut _111: math::rate::U128;<br align="left"/>let mut _112: [u64; 2_usize];<br align="left"/>let mut _113: bool;<br align="left"/>let mut _114: u64;<br align="left"/>let mut _115: *const ();<br align="left"/>let mut _116: usize;<br align="left"/>let mut _117: usize;<br align="left"/>let mut _118: usize;<br align="left"/>let mut _119: usize;<br align="left"/>let mut _120: bool;<br align="left"/>let mut _121: *const ();<br align="left"/>let mut _122: usize;<br align="left"/>let mut _123: usize;<br align="left"/>let mut _124: usize;<br align="left"/>let mut _125: usize;<br align="left"/>let mut _126: bool;<br align="left"/>let mut _127: *const ();<br align="left"/>let mut _128: usize;<br align="left"/>let mut _129: usize;<br align="left"/>let mut _130: usize;<br align="left"/>let mut _131: usize;<br align="left"/>let mut _132: bool;<br align="left"/>let mut _133: *const ();<br align="left"/>let mut _134: usize;<br align="left"/>let mut _135: usize;<br align="left"/>let mut _136: usize;<br align="left"/>let mut _137: usize;<br align="left"/>let mut _138: bool;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug other =&gt; _2;<br align="left"/>debug me =&gt; _3;<br align="left"/>debug you =&gt; _4;<br align="left"/>debug ret =&gt; _5;<br align="left"/>debug ret_ptr =&gt; _6;<br align="left"/>debug carry =&gt; _9;<br align="left"/>debug res1 =&gt; _15;<br align="left"/>debug overflow1 =&gt; _16;<br align="left"/>debug res2 =&gt; _26;<br align="left"/>debug overflow2 =&gt; _27;<br align="left"/>debug res =&gt; _43;<br align="left"/>debug overflow =&gt; _44;<br align="left"/>debug res1 =&gt; _65;<br align="left"/>debug overflow1 =&gt; _66;<br align="left"/>debug res2 =&gt; _76;<br align="left"/>debug overflow2 =&gt; _77;<br align="left"/>debug res =&gt; _93;<br align="left"/>debug overflow =&gt; _94;<br align="left"/>>;
    bb0__0_1383 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>_3 = &amp;(_1.0: [u64; 2])<br/>StorageLive(_4)<br/>_4 = &amp;(_2.0: [u64; 2])<br/>StorageLive(_5)<br/>_5 = [const 0_u64; 2]<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = &amp;mut _5<br/>_7 = &amp;raw mut (*_8)<br/>_6 = move _7 as *mut u64 (PtrToPtr)<br/>StorageDead(_7)<br/>StorageDead(_8)<br/>StorageLive(_9)<br/>_9 = const 0_u64<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>_12 = Ge(const _, const 0_usize)<br/></td></tr><tr><td align="left">switchInt(move _12)</td></tr></table>>];
    bb1__0_1383 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageLive(_13)<br/>StorageLive(_14)<br/>_14 = _9<br/>_13 = Ne(move _14, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _13)</td></tr></table>>];
    bb2__0_1383 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>_19 = const _<br/>_20 = Len((*_3))<br/>_21 = Lt(_19, _20)<br/></td></tr><tr><td align="left">assert(move _21, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _20, _19)</td></tr></table>>];
    bb3__0_1383 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_18 = (*_3)[_19]<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>_23 = const _<br/>_24 = Len((*_4))<br/>_25 = Lt(_23, _24)<br/></td></tr><tr><td align="left">assert(move _25, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _24, _23)</td></tr></table>>];
    bb4__0_1383 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_22 = (*_4)[_23]<br/></td></tr><tr><td align="left">_17 = core::num::&lt;impl u64&gt;::overflowing_sub(move _18, move _22)</td></tr></table>>];
    bb5__0_1383 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_22)<br/>StorageDead(_18)<br/>StorageLive(_15)<br/>_15 = (_17.0: u64)<br/>StorageLive(_16)<br/>_16 = (_17.1: bool)<br/>StorageDead(_23)<br/>StorageDead(_19)<br/>StorageDead(_17)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>_29 = _15<br/>StorageLive(_30)<br/>_30 = _9<br/></td></tr><tr><td align="left">_28 = core::num::&lt;impl u64&gt;::overflowing_sub(move _29, move _30)</td></tr></table>>];
    bb6__0_1383 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>StorageDead(_29)<br/>StorageLive(_26)<br/>_26 = (_28.0: u64)<br/>StorageLive(_27)<br/>_27 = (_28.1: bool)<br/>StorageDead(_28)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>_32 = _26<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>_34 = _6<br/>StorageLive(_35)<br/>StorageLive(_36)<br/>_36 = const _ as isize (IntToInt)<br/>_35 = _36<br/></td></tr><tr><td align="left">_33 = std::ptr::mut_ptr::&lt;impl *mut u64&gt;::offset(move _34, move _35)</td></tr></table>>];
    bb7__0_1383 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_35)<br/>StorageDead(_34)<br/>_133 = _33 as *const () (PtrToPtr)<br/>_134 = _133 as usize (Transmute)<br/>_135 = AlignOf(u64)<br/>_136 = Sub(_135, const 1_usize)<br/>_137 = BitAnd(_134, _136)<br/>_138 = Eq(_137, const 0_usize)<br/></td></tr><tr><td align="left">assert(_138, &quot;misaligned pointer dereference: address must be a multiple of {} but is {}&quot;, _135, _134)</td></tr></table>>];
    bb8__0_1383 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">_37 = move (_42.0: u8)<br/>StorageDead(_40)<br/>StorageDead(_38)<br/>_9 = move _37 as u64 (IntToInt)<br/>StorageDead(_37)<br/>_11 = const ()<br/>StorageDead(_27)<br/>StorageDead(_26)<br/>StorageDead(_16)<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_1383 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageLive(_45)<br/>StorageLive(_46)<br/>StorageLive(_47)<br/>_47 = const _<br/>_48 = Len((*_3))<br/>_49 = Lt(_47, _48)<br/></td></tr><tr><td align="left">assert(move _49, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _48, _47)</td></tr></table>>];
    bb10__0_1383 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">_46 = (*_3)[_47]<br/>StorageLive(_50)<br/>StorageLive(_51)<br/>_51 = const _<br/>_52 = Len((*_4))<br/>_53 = Lt(_51, _52)<br/></td></tr><tr><td align="left">assert(move _53, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _52, _51)</td></tr></table>>];
    bb11__0_1383 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">_50 = (*_4)[_51]<br/></td></tr><tr><td align="left">_45 = core::num::&lt;impl u64&gt;::overflowing_sub(move _46, move _50)</td></tr></table>>];
    bb12__0_1383 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_50)<br/>StorageDead(_46)<br/>StorageLive(_43)<br/>_43 = (_45.0: u64)<br/>StorageLive(_44)<br/>_44 = (_45.1: bool)<br/>StorageDead(_51)<br/>StorageDead(_47)<br/>StorageDead(_45)<br/>StorageLive(_54)<br/>StorageLive(_55)<br/>_55 = _43<br/>StorageLive(_56)<br/>StorageLive(_57)<br/>_57 = _6<br/>StorageLive(_58)<br/>StorageLive(_59)<br/>_59 = const _ as isize (IntToInt)<br/>_58 = _59<br/></td></tr><tr><td align="left">_56 = std::ptr::mut_ptr::&lt;impl *mut u64&gt;::offset(move _57, move _58)</td></tr></table>>];
    bb13__0_1383 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_58)<br/>StorageDead(_57)<br/>_127 = _56 as *const () (PtrToPtr)<br/>_128 = _127 as usize (Transmute)<br/>_129 = AlignOf(u64)<br/>_130 = Sub(_129, const 1_usize)<br/>_131 = BitAnd(_128, _130)<br/>_132 = Eq(_131, const 0_usize)<br/></td></tr><tr><td align="left">assert(_132, &quot;misaligned pointer dereference: address must be a multiple of {} but is {}&quot;, _129, _128)</td></tr></table>>];
    bb14__0_1383 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_1383 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">_11 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb16__0_1383 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_11)<br/>StorageLive(_61)<br/>StorageLive(_62)<br/>_62 = Ge(const _, const 0_usize)<br/></td></tr><tr><td align="left">switchInt(move _62)</td></tr></table>>];
    bb17__0_1383 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageLive(_63)<br/>StorageLive(_64)<br/>_64 = _9<br/>_63 = Ne(move _64, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _63)</td></tr></table>>];
    bb18__0_1383 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_64)<br/>StorageLive(_67)<br/>StorageLive(_68)<br/>StorageLive(_69)<br/>_69 = const _<br/>_70 = Len((*_3))<br/>_71 = Lt(_69, _70)<br/></td></tr><tr><td align="left">assert(move _71, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _70, _69)</td></tr></table>>];
    bb19__0_1383 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">_68 = (*_3)[_69]<br/>StorageLive(_72)<br/>StorageLive(_73)<br/>_73 = const _<br/>_74 = Len((*_4))<br/>_75 = Lt(_73, _74)<br/></td></tr><tr><td align="left">assert(move _75, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _74, _73)</td></tr></table>>];
    bb20__0_1383 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">_72 = (*_4)[_73]<br/></td></tr><tr><td align="left">_67 = core::num::&lt;impl u64&gt;::overflowing_sub(move _68, move _72)</td></tr></table>>];
    bb21__0_1383 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_72)<br/>StorageDead(_68)<br/>StorageLive(_65)<br/>_65 = (_67.0: u64)<br/>StorageLive(_66)<br/>_66 = (_67.1: bool)<br/>StorageDead(_73)<br/>StorageDead(_69)<br/>StorageDead(_67)<br/>StorageLive(_78)<br/>StorageLive(_79)<br/>_79 = _65<br/>StorageLive(_80)<br/>_80 = _9<br/></td></tr><tr><td align="left">_78 = core::num::&lt;impl u64&gt;::overflowing_sub(move _79, move _80)</td></tr></table>>];
    bb22__0_1383 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_80)<br/>StorageDead(_79)<br/>StorageLive(_76)<br/>_76 = (_78.0: u64)<br/>StorageLive(_77)<br/>_77 = (_78.1: bool)<br/>StorageDead(_78)<br/>StorageLive(_81)<br/>StorageLive(_82)<br/>_82 = _76<br/>StorageLive(_83)<br/>StorageLive(_84)<br/>_84 = _6<br/>StorageLive(_85)<br/>StorageLive(_86)<br/>_86 = const _ as isize (IntToInt)<br/>_85 = _86<br/></td></tr><tr><td align="left">_83 = std::ptr::mut_ptr::&lt;impl *mut u64&gt;::offset(move _84, move _85)</td></tr></table>>];
    bb23__0_1383 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_85)<br/>StorageDead(_84)<br/>_121 = _83 as *const () (PtrToPtr)<br/>_122 = _121 as usize (Transmute)<br/>_123 = AlignOf(u64)<br/>_124 = Sub(_123, const 1_usize)<br/>_125 = BitAnd(_122, _124)<br/>_126 = Eq(_125, const 0_usize)<br/></td></tr><tr><td align="left">assert(_126, &quot;misaligned pointer dereference: address must be a multiple of {} but is {}&quot;, _123, _122)</td></tr></table>>];
    bb24__0_1383 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">_87 = move (_92.0: u8)<br/>StorageDead(_90)<br/>StorageDead(_88)<br/>_9 = move _87 as u64 (IntToInt)<br/>StorageDead(_87)<br/>_61 = const ()<br/>StorageDead(_77)<br/>StorageDead(_76)<br/>StorageDead(_66)<br/>StorageDead(_65)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb25__0_1383 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_64)<br/>StorageLive(_95)<br/>StorageLive(_96)<br/>StorageLive(_97)<br/>_97 = const _<br/>_98 = Len((*_3))<br/>_99 = Lt(_97, _98)<br/></td></tr><tr><td align="left">assert(move _99, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _98, _97)</td></tr></table>>];
    bb26__0_1383 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">_96 = (*_3)[_97]<br/>StorageLive(_100)<br/>StorageLive(_101)<br/>_101 = const _<br/>_102 = Len((*_4))<br/>_103 = Lt(_101, _102)<br/></td></tr><tr><td align="left">assert(move _103, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _102, _101)</td></tr></table>>];
    bb27__0_1383 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">_100 = (*_4)[_101]<br/></td></tr><tr><td align="left">_95 = core::num::&lt;impl u64&gt;::overflowing_sub(move _96, move _100)</td></tr></table>>];
    bb28__0_1383 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_100)<br/>StorageDead(_96)<br/>StorageLive(_93)<br/>_93 = (_95.0: u64)<br/>StorageLive(_94)<br/>_94 = (_95.1: bool)<br/>StorageDead(_101)<br/>StorageDead(_97)<br/>StorageDead(_95)<br/>StorageLive(_104)<br/>StorageLive(_105)<br/>_105 = _93<br/>StorageLive(_106)<br/>StorageLive(_107)<br/>_107 = _6<br/>StorageLive(_108)<br/>StorageLive(_109)<br/>_109 = const _ as isize (IntToInt)<br/>_108 = _109<br/></td></tr><tr><td align="left">_106 = std::ptr::mut_ptr::&lt;impl *mut u64&gt;::offset(move _107, move _108)</td></tr></table>>];
    bb29__0_1383 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_108)<br/>StorageDead(_107)<br/>_115 = _106 as *const () (PtrToPtr)<br/>_116 = _115 as usize (Transmute)<br/>_117 = AlignOf(u64)<br/>_118 = Sub(_117, const 1_usize)<br/>_119 = BitAnd(_116, _118)<br/>_120 = Eq(_119, const 0_usize)<br/></td></tr><tr><td align="left">assert(_120, &quot;misaligned pointer dereference: address must be a multiple of {} but is {}&quot;, _117, _116)</td></tr></table>>];
    bb30__0_1383 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_63)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb31__0_1383 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">_61 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb32__0_1383 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageDead(_62)<br/>StorageDead(_61)<br/>_10 = const ()<br/>StorageDead(_10)<br/>StorageLive(_111)<br/>StorageLive(_112)<br/>_112 = _5<br/>_111 = U128(move _112)<br/>StorageDead(_112)<br/>StorageLive(_113)<br/>StorageLive(_114)<br/>_114 = _9<br/>_113 = Gt(move _114, const 0_u64)<br/>StorageDead(_114)<br/>_0 = (move _111, move _113)<br/>StorageDead(_113)<br/>StorageDead(_111)<br/>StorageDead(_9)<br/>StorageDead(_6)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb33__0_1383 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">(*_106) = move _105<br/>_104 = const ()<br/>StorageDead(_105)<br/>StorageDead(_109)<br/>StorageDead(_106)<br/>StorageDead(_104)<br/>StorageLive(_110)<br/>_110 = _94<br/>_9 = move _110 as u64 (IntToInt)<br/>StorageDead(_110)<br/>_61 = const ()<br/>StorageDead(_94)<br/>StorageDead(_93)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb34__0_1383 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">(*_83) = move _82<br/>_81 = const ()<br/>StorageDead(_82)<br/>StorageDead(_86)<br/>StorageDead(_83)<br/>StorageDead(_81)<br/>StorageLive(_87)<br/>StorageLive(_88)<br/>StorageLive(_89)<br/>_89 = _66<br/>_88 = move _89 as u8 (IntToInt)<br/>StorageDead(_89)<br/>StorageLive(_90)<br/>StorageLive(_91)<br/>_91 = _77<br/>_90 = move _91 as u8 (IntToInt)<br/>StorageDead(_91)<br/>_92 = CheckedAdd(_88, _90)<br/></td></tr><tr><td align="left">assert(!move (_92.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _88, move _90)</td></tr></table>>];
    bb35__0_1383 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">(*_56) = move _55<br/>_54 = const ()<br/>StorageDead(_55)<br/>StorageDead(_59)<br/>StorageDead(_56)<br/>StorageDead(_54)<br/>StorageLive(_60)<br/>_60 = _44<br/>_9 = move _60 as u64 (IntToInt)<br/>StorageDead(_60)<br/>_11 = const ()<br/>StorageDead(_44)<br/>StorageDead(_43)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb36__0_1383 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">(*_33) = move _32<br/>_31 = const ()<br/>StorageDead(_32)<br/>StorageDead(_36)<br/>StorageDead(_33)<br/>StorageDead(_31)<br/>StorageLive(_37)<br/>StorageLive(_38)<br/>StorageLive(_39)<br/>_39 = _16<br/>_38 = move _39 as u8 (IntToInt)<br/>StorageDead(_39)<br/>StorageLive(_40)<br/>StorageLive(_41)<br/>_41 = _27<br/>_40 = move _41 as u8 (IntToInt)<br/>StorageDead(_41)<br/>_42 = CheckedAdd(_38, _40)<br/></td></tr><tr><td align="left">assert(!move (_42.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _38, move _40)</td></tr></table>>];
    bb0__0_1383 -> bb15__0_1383 [label="0"];
    bb0__0_1383 -> bb1__0_1383 [label="otherwise"];
    bb1__0_1383 -> bb9__0_1383 [label="0"];
    bb1__0_1383 -> bb2__0_1383 [label="otherwise"];
    bb2__0_1383 -> bb3__0_1383 [label="success"];
    bb3__0_1383 -> bb4__0_1383 [label="success"];
    bb4__0_1383 -> bb5__0_1383 [label="return"];
    bb5__0_1383 -> bb6__0_1383 [label="return"];
    bb6__0_1383 -> bb7__0_1383 [label="return"];
    bb7__0_1383 -> bb36__0_1383 [label="success"];
    bb8__0_1383 -> bb14__0_1383 [label=""];
    bb9__0_1383 -> bb10__0_1383 [label="success"];
    bb10__0_1383 -> bb11__0_1383 [label="success"];
    bb11__0_1383 -> bb12__0_1383 [label="return"];
    bb12__0_1383 -> bb13__0_1383 [label="return"];
    bb13__0_1383 -> bb35__0_1383 [label="success"];
    bb14__0_1383 -> bb16__0_1383 [label=""];
    bb15__0_1383 -> bb16__0_1383 [label=""];
    bb16__0_1383 -> bb31__0_1383 [label="0"];
    bb16__0_1383 -> bb17__0_1383 [label="otherwise"];
    bb17__0_1383 -> bb25__0_1383 [label="0"];
    bb17__0_1383 -> bb18__0_1383 [label="otherwise"];
    bb18__0_1383 -> bb19__0_1383 [label="success"];
    bb19__0_1383 -> bb20__0_1383 [label="success"];
    bb20__0_1383 -> bb21__0_1383 [label="return"];
    bb21__0_1383 -> bb22__0_1383 [label="return"];
    bb22__0_1383 -> bb23__0_1383 [label="return"];
    bb23__0_1383 -> bb34__0_1383 [label="success"];
    bb24__0_1383 -> bb30__0_1383 [label=""];
    bb25__0_1383 -> bb26__0_1383 [label="success"];
    bb26__0_1383 -> bb27__0_1383 [label="success"];
    bb27__0_1383 -> bb28__0_1383 [label="return"];
    bb28__0_1383 -> bb29__0_1383 [label="return"];
    bb29__0_1383 -> bb33__0_1383 [label="success"];
    bb30__0_1383 -> bb32__0_1383 [label=""];
    bb31__0_1383 -> bb32__0_1383 [label=""];
    bb33__0_1383 -> bb30__0_1383 [label=""];
    bb34__0_1383 -> bb24__0_1383 [label="success"];
    bb35__0_1383 -> bb14__0_1383 [label=""];
    bb36__0_1383 -> bb8__0_1383 [label="success"];
}
