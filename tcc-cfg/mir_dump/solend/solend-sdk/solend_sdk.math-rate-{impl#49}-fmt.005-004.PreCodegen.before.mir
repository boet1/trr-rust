// MIR for `rate::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:1651:3: 1651:45>::fmt` before PreCodegen

fn rate::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:1651:3: 1651:45>::fmt(_1: &U128, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: ();
    let mut _4: bool;
    let mut _5: &math::rate::U128;
    let mut _6: !;
    let mut _7: &mut std::fmt::Formatter<'_>;
    let mut _8: std::fmt::Arguments<'_>;
    let mut _9: &[&str];
    let mut _10: &[&str; 1];
    let _11: &[&str; 1];
    let _12: [&str; 1];
    let mut _13: [u8; 40];
    let mut _15: usize;
    let mut _16: &[u8];
    let mut _17: &[u8; 40];
    let mut _18: (usize, bool);
    let _21: ();
    let mut _22: ();
    let mut _24: u64;
    let mut _25: &math::rate::U128;
    let _26: math::rate::U128;
    let mut _27: math::rate::U128;
    let mut _28: math::rate::U128;
    let mut _29: u8;
    let mut _30: (u8, bool);
    let _31: usize;
    let mut _32: usize;
    let mut _33: bool;
    let mut _34: math::rate::U128;
    let mut _35: math::rate::U128;
    let mut _36: math::rate::U128;
    let _37: ();
    let mut _38: bool;
    let mut _39: &math::rate::U128;
    let mut _40: !;
    let mut _41: (usize, bool);
    let mut _43: &[u8];
    let _44: &[u8];
    let _45: &[u8];
    let mut _46: &[u8; 40];
    let mut _47: std::ops::RangeFrom<usize>;
    let mut _48: usize;
    let mut _49: &mut std::fmt::Formatter<'_>;
    let mut _50: &str;
    let mut _51: &[&str; 1];
    scope 1 {
        debug buf => _13;
        let mut _14: usize;
        scope 2 {
            debug i => _14;
            let mut _19: math::rate::U128;
            scope 3 {
                debug current => _19;
                let _20: math::rate::U128;
                scope 4 {
                    debug ten => _20;
                    let _23: u8;
                    let _42: &str;
                    scope 5 {
                        debug digit => _23;
                    }
                    scope 6 {
                        debug s => _42;
                    }
                    scope 7 {
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &(*_1);
        _4 = U128::is_zero(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _4) -> [0: bb5, otherwise: bb2];
    }

    bb2: {
        StorageDead(_5);
        StorageLive(_7);
        _7 = &mut (*_2);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _51 = const _;
        _11 = &(*_51);
        _10 = &(*_11);
        _9 = move _10 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_10);
        _8 = Arguments::<'_>::new_const(move _9) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_9);
        _0 = Formatter::<'_>::write_fmt(move _7, move _8) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_11);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb22;
    }

    bb5: {
        StorageDead(_5);
        _3 = const ();
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_13);
        _13 = [const 0_u8; 40];
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = &_13;
        _16 = move _17 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_17);
        _15 = core::slice::<impl [u8]>::len(move _16) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_16);
        _18 = CheckedSub(_15, const 1_usize);
        assert(!move (_18.1: bool), "attempt to compute `{} - {}`, which would overflow", move _15, const 1_usize) -> [success: bb7, unwind continue];
    }

    bb7: {
        _14 = move (_18.0: usize);
        StorageDead(_15);
        StorageLive(_19);
        _19 = (*_1);
        StorageLive(_20);
        _20 = <U128 as From<i32>>::from(const 10_i32) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageLive(_21);
        goto -> bb9;
    }

    bb9: {
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = _19;
        StorageLive(_28);
        _28 = _20;
        _26 = <U128 as Rem>::rem(move _27, move _28) -> [return: bb10, unwind continue];
    }

    bb10: {
        _25 = &_26;
        StorageDead(_28);
        StorageDead(_27);
        _24 = U128::low_u64(move _25) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_25);
        _23 = move _24 as u8 (IntToInt);
        StorageDead(_24);
        StorageDead(_26);
        StorageLive(_29);
        _29 = _23;
        _30 = CheckedAdd(_29, const 48_u8);
        assert(!move (_30.1: bool), "attempt to compute `{} + {}`, which would overflow", move _29, const 48_u8) -> [success: bb12, unwind continue];
    }

    bb12: {
        StorageLive(_31);
        _31 = _14;
        _32 = Len(_13);
        _33 = Lt(_31, _32);
        assert(move _33, "index out of bounds: the length is {} but the index is {}", move _32, _31) -> [success: bb13, unwind continue];
    }

    bb13: {
        _13[_31] = move (_30.0: u8);
        StorageDead(_29);
        StorageDead(_31);
        StorageLive(_34);
        StorageLive(_35);
        _35 = _19;
        StorageLive(_36);
        _36 = _20;
        _34 = <U128 as Div>::div(move _35, move _36) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_36);
        StorageDead(_35);
        _19 = move _34;
        StorageDead(_34);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &_19;
        _38 = U128::is_zero(move _39) -> [return: bb15, unwind continue];
    }

    bb15: {
        switchInt(move _38) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        StorageDead(_39);
        _21 = const ();
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_23);
        StorageDead(_21);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = &_13;
        StorageLive(_47);
        StorageLive(_48);
        _48 = _14;
        _47 = RangeFrom::<usize> { start: move _48 };
        StorageDead(_48);
        _45 = <[u8; 40] as Index<RangeFrom<usize>>>::index(move _46, move _47) -> [return: bb19, unwind continue];
    }

    bb17: {
        StorageDead(_39);
        _37 = const ();
        StorageDead(_38);
        StorageDead(_37);
        _41 = CheckedSub(_14, const 1_usize);
        assert(!move (_41.1: bool), "attempt to compute `{} - {}`, which would overflow", _14, const 1_usize) -> [success: bb18, unwind continue];
    }

    bb18: {
        _14 = move (_41.0: usize);
        _22 = const ();
        StorageDead(_23);
        goto -> bb9;
    }

    bb19: {
        StorageDead(_47);
        StorageDead(_46);
        _44 = &(*_45);
        _43 = &(*_44);
        _42 = from_utf8_unchecked(move _43) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_43);
        StorageDead(_45);
        StorageDead(_44);
        StorageLive(_49);
        _49 = &mut (*_2);
        StorageLive(_50);
        _50 = &(*_42);
        _0 = Formatter::<'_>::write_str(move _49, move _50) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_42);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb22;
    }

    bb22: {
        return;
    }
}
