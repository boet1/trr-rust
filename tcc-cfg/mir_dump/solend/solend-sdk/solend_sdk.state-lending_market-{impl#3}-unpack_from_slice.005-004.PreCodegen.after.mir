// MIR for `lending_market::<impl at token-lending\sdk\src\state\lending_market.rs:84:1: 84:28>::unpack_from_slice` after PreCodegen

fn lending_market::<impl at token-lending\sdk\src\state\lending_market.rs:84:1: 84:28>::unpack_from_slice(_1: &[u8]) -> Result<LendingMarket, ProgramError> {
    debug input => _1;
    let mut _0: std::result::Result<state::lending_market::LendingMarket, solana_program::program_error::ProgramError>;
    let _2: &[u8; 290];
    let _3: usize;
    let _5: &[u8];
    let mut _6: &[u8];
    let mut _7: std::ops::Range<usize>;
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: (usize, bool);
    let mut _12: &[u8];
    let mut _24: (&[u8; 1], &[u8; 1], &[u8; 32], &[u8; 32], &[u8; 32], &[u8; 32], &[u8; 32], &[u8; 56], &[u8; 32], &[u8; 32], &[u8; 8]);
    let mut _26: &[u8; 290];
    let mut _28: [u8; 1];
    let _29: ();
    let mut _30: bool;
    let mut _31: u8;
    let mut _32: !;
    let _33: ();
    let mut _34: &str;
    let _35: &str;
    let mut _36: solana_program::program_error::ProgramError;
    let mut _38: [u8; 32];
    let mut _39: state::lending_market::LendingMarket;
    let mut _40: u8;
    let mut _41: u8;
    let mut _42: [u8; 1];
    let mut _43: solana_program::pubkey::Pubkey;
    let mut _44: [u8; 32];
    let mut _45: solana_program::pubkey::Pubkey;
    let mut _46: [u8; 32];
    let mut _47: solana_program::pubkey::Pubkey;
    let mut _48: [u8; 32];
    let mut _49: solana_program::pubkey::Pubkey;
    let mut _50: [u8; 32];
    let mut _51: state::rate_limiter::RateLimiter;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, state::rate_limiter::RateLimiter>;
    let mut _53: std::result::Result<state::rate_limiter::RateLimiter, solana_program::program_error::ProgramError>;
    let mut _54: &[u8];
    let mut _55: &[u8; 56];
    let mut _56: isize;
    let mut _58: !;
    let mut _59: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _61: std::option::Option<solana_program::pubkey::Pubkey>;
    let mut _62: bool;
    let mut _63: &&[u8; 32];
    let mut _64: &&[u8; 32];
    let _65: &[u8; 32];
    let _66: [u8; 32];
    let mut _67: solana_program::pubkey::Pubkey;
    let mut _68: [u8; 32];
    let mut _69: solana_program::pubkey::Pubkey;
    let mut _70: bool;
    let mut _71: &[u8; 32];
    let mut _72: &[u8; 32];
    let _73: [u8; 32];
    let mut _74: [u8; 32];
    let mut _77: bool;
    let mut _78: isize;
    let mut _79: isize;
    let mut _80: isize;
    let mut _81: isize;
    let mut _82: isize;
    scope 1 {
        debug input => _2;
        scope 6 {
            debug version => _13;
            debug bump_seed => _14;
            debug owner => _15;
            debug quote_currency => _16;
            debug token_program_id => _17;
            debug oracle_program_id => _18;
            debug switchboard_oracle_program_id => _19;
            debug rate_limiter => _20;
            debug whitelisted_liquidator => _21;
            debug risk_authority => _22;
            debug _padding => _23;
            let _27: u8;
            scope 11 {
                debug version => _27;
                let _37: solana_program::pubkey::Pubkey;
                scope 12 {
                    debug owner_pubkey => _37;
                    let _57: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                    let _60: state::rate_limiter::RateLimiter;
                    let mut _75: &[u8; 32];
                    let mut _76: &&[u8; 32];
                    scope 13 {
                        debug residual => _57;
                        scope 14 {
                        }
                    }
                    scope 15 {
                        debug val => _60;
                        scope 16 {
                        }
                    }
                }
            }
        }
        scope 7 {
            let _13: &[u8; 1];
            let _14: &[u8; 1];
            let _15: &[u8; 32];
            let _16: &[u8; 32];
            let _17: &[u8; 32];
            let _18: &[u8; 32];
            let _19: &[u8; 32];
            let _20: &[u8; 56];
            let _21: &[u8; 32];
            let _22: &[u8; 32];
            let _23: &[u8; 8];
            let _25: &[u8; 290];
            scope 8 {
                debug input => _25;
                scope 9 {
                    scope 10 {
                    }
                }
            }
        }
    }
    scope 2 {
        debug offset => _3;
        let _4: &[u8];
        scope 3 {
            debug slice => _4;
            scope 4 {
                scope 5 {
                }
            }
        }
    }

    bb0: {
        _77 = const false;
        StorageLive(_2);
        StorageLive(_3);
        _3 = const 0_usize;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &(*_1);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _3;
        StorageLive(_9);
        StorageLive(_10);
        _10 = _3;
        _11 = CheckedAdd(_10, const _);
        assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", move _10, const _) -> [success: bb1, unwind continue];
    }

    bb1: {
        _9 = move (_11.0: usize);
        StorageDead(_10);
        _7 = std::ops::Range::<usize> { start: move _8, end: move _9 };
        StorageDead(_9);
        StorageDead(_8);
        _5 = <[u8] as Index<std::ops::Range<usize>>>::index(move _6, move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        StorageDead(_6);
        _4 = &(*_5);
        StorageLive(_12);
        _12 = &(*_4);
        _2 = <LendingMarket as Pack>::unpack_from_slice::as_array::<u8>(move _12) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_12);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_24);
        StorageLive(_25);
        _25 = _2;
        StorageLive(_26);
        _26 = &(*_25);
        _24 = <LendingMarket as Pack>::unpack_from_slice::as_arrays::<u8>(move _26) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_13);
        _13 = (_24.0: &[u8; 1]);
        StorageLive(_14);
        _14 = (_24.1: &[u8; 1]);
        StorageLive(_15);
        _15 = (_24.2: &[u8; 32]);
        StorageLive(_16);
        _16 = (_24.3: &[u8; 32]);
        StorageLive(_17);
        _17 = (_24.4: &[u8; 32]);
        StorageLive(_18);
        _18 = (_24.5: &[u8; 32]);
        StorageLive(_19);
        _19 = (_24.6: &[u8; 32]);
        StorageLive(_20);
        _20 = (_24.7: &[u8; 56]);
        StorageLive(_21);
        _21 = (_24.8: &[u8; 32]);
        StorageLive(_22);
        _22 = (_24.9: &[u8; 32]);
        StorageLive(_23);
        _23 = (_24.10: &[u8; 8]);
        StorageDead(_24);
        StorageLive(_27);
        StorageLive(_28);
        _28 = (*_13);
        _27 = core::num::<impl u8>::from_le_bytes(move _28) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = _27;
        _30 = Gt(move _31, const _);
        switchInt(move _30) -> [0: bb8, otherwise: bb6];
    }

    bb6: {
        StorageDead(_31);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = const "Lending market version does not match lending program version";
        _34 = &(*_35);
        _33 = solana_program::log::sol_log(move _34) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_34);
        StorageDead(_35);
        StorageDead(_33);
        StorageLive(_36);
        _36 = solana_program::program_error::ProgramError::InvalidAccountData;
        _0 = Result::<LendingMarket, ProgramError>::Err(move _36);
        StorageDead(_36);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_2);
        goto -> bb30;
    }

    bb8: {
        StorageDead(_31);
        _29 = const ();
        StorageDead(_30);
        StorageDead(_29);
        StorageLive(_37);
        StorageLive(_38);
        _38 = (*_15);
        _37 = Pubkey::new_from_array(move _38) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = _27;
        StorageLive(_41);
        StorageLive(_42);
        _42 = (*_14);
        _41 = core::num::<impl u8>::from_le_bytes(move _42) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_42);
        StorageLive(_43);
        _43 = _37;
        StorageLive(_44);
        _44 = (*_16);
        StorageLive(_45);
        StorageLive(_46);
        _46 = (*_17);
        _45 = Pubkey::new_from_array(move _46) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = (*_18);
        _47 = Pubkey::new_from_array(move _48) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = (*_19);
        _49 = Pubkey::new_from_array(move _50) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &(*_20);
        _54 = move _55 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_55);
        _53 = <rate_limiter::RateLimiter as Pack>::unpack_from_slice(move _54) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_54);
        _52 = <Result<rate_limiter::RateLimiter, ProgramError> as Try>::branch(move _53) -> [return: bb15, unwind: bb31];
    }

    bb15: {
        _77 = const true;
        StorageDead(_53);
        _56 = discriminant(_52);
        switchInt(move _56) -> [0: bb16, 1: bb18, otherwise: bb17];
    }

    bb16: {
        StorageLive(_60);
        _60 = ((_52 as Continue).0: state::rate_limiter::RateLimiter);
        _51 = _60;
        StorageDead(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = &_21;
        StorageLive(_64);
        _76 = const _;
        _64 = &(*_76);
        _62 = <&[u8; 32] as PartialEq>::eq(move _63, move _64) -> [return: bb20, unwind: bb32];
    }

    bb17: {
        unreachable;
    }

    bb18: {
        StorageLive(_57);
        _57 = move ((_52 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_59);
        _59 = move _57;
        _0 = <Result<LendingMarket, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _59) -> [return: bb19, unwind: bb32];
    }

    bb19: {
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_51);
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_27);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_2);
        _80 = discriminant(_52);
        _77 = const false;
        StorageDead(_52);
        goto -> bb30;
    }

    bb20: {
        switchInt(move _62) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        StorageDead(_64);
        StorageDead(_63);
        _61 = Option::<Pubkey>::None;
        goto -> bb24;
    }

    bb22: {
        StorageDead(_64);
        StorageDead(_63);
        StorageLive(_67);
        StorageLive(_68);
        _68 = (*_21);
        _67 = Pubkey::new_from_array(move _68) -> [return: bb23, unwind: bb32];
    }

    bb23: {
        StorageDead(_68);
        _61 = Option::<Pubkey>::Some(move _67);
        StorageDead(_67);
        goto -> bb24;
    }

    bb24: {
        StorageDead(_62);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = &(*_22);
        StorageLive(_72);
        _75 = const _;
        _72 = &(*_75);
        _70 = <[u8; 32] as PartialEq>::eq(move _71, move _72) -> [return: bb25, unwind: bb32];
    }

    bb25: {
        switchInt(move _70) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        StorageDead(_72);
        StorageDead(_71);
        _69 = _37;
        goto -> bb29;
    }

    bb27: {
        StorageDead(_72);
        StorageDead(_71);
        StorageLive(_74);
        _74 = (*_22);
        _69 = Pubkey::new_from_array(move _74) -> [return: bb28, unwind: bb32];
    }

    bb28: {
        StorageDead(_74);
        goto -> bb29;
    }

    bb29: {
        StorageDead(_70);
        _39 = LendingMarket { version: move _40, bump_seed: move _41, owner: move _43, quote_currency: move _44, token_program_id: move _45, oracle_program_id: move _47, switchboard_oracle_program_id: move _49, rate_limiter: move _51, whitelisted_liquidator: move _61, risk_authority: move _69 };
        StorageDead(_69);
        StorageDead(_61);
        StorageDead(_51);
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_41);
        StorageDead(_40);
        _0 = Result::<LendingMarket, ProgramError>::Ok(move _39);
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_27);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_2);
        _78 = discriminant(_52);
        _77 = const false;
        StorageDead(_52);
        goto -> bb30;
    }

    bb30: {
        return;
    }

    bb31 (cleanup): {
        resume;
    }

    bb32 (cleanup): {
        _82 = discriminant(_52);
        goto -> bb31;
    }
}
