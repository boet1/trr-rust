// MIR for `obligation::<impl at token-lending\sdk\src\state\obligation.rs:68:1: 68:16>::repay` after PreCodegen

fn obligation::<impl at token-lending\sdk\src\state\obligation.rs:68:1: 68:16>::repay(_1: &mut obligation::Obligation, _2: decimal::Decimal, _3: usize) -> Result<(), ProgramError> {
    debug self => _1;
    debug settle_amount => _2;
    debug liquidity_index => _3;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _4: &mut state::obligation::ObligationLiquidity;
    let mut _5: &mut state::obligation::ObligationLiquidity;
    let mut _6: &mut std::vec::Vec<state::obligation::ObligationLiquidity>;
    let mut _7: usize;
    let _8: ();
    let mut _9: bool;
    let mut _10: &math::decimal::Decimal;
    let mut _11: &math::decimal::Decimal;
    let _12: state::obligation::ObligationLiquidity;
    let mut _13: &mut std::vec::Vec<state::obligation::ObligationLiquidity>;
    let mut _14: usize;
    let _15: ();
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _17: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _18: &mut state::obligation::ObligationLiquidity;
    let mut _19: math::decimal::Decimal;
    let mut _20: isize;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _25: ();
    let mut _26: isize;
    let mut _27: isize;
    let mut _28: isize;
    let mut _29: isize;
    let mut _30: isize;
    scope 1 {
        debug liquidity => _4;
        let _21: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _24: ();
        scope 2 {
            debug residual => _21;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _24;
            scope 5 {
            }
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &mut ((*_1).5: std::vec::Vec<state::obligation::ObligationLiquidity>);
        StorageLive(_7);
        _7 = _3;
        _5 = <Vec<obligation::ObligationLiquidity> as IndexMut<usize>>::index_mut(move _6, move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        StorageDead(_6);
        _4 = &mut (*_5);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &_2;
        StorageLive(_11);
        _11 = &((*_4).2: math::decimal::Decimal);
        _9 = <decimal::Decimal as PartialEq>::eq(move _10, move _11) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _9) -> [0: bb5, otherwise: bb3];
    }

    bb3: {
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &mut ((*_1).5: std::vec::Vec<state::obligation::ObligationLiquidity>);
        StorageLive(_14);
        _14 = _3;
        _12 = Vec::<obligation::ObligationLiquidity>::remove(move _13, move _14) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        _8 = const ();
        goto -> bb12;
    }

    bb5: {
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = &mut (*_4);
        StorageLive(_19);
        _19 = _2;
        _17 = obligation::ObligationLiquidity::repay(move _18, move _19) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_19);
        StorageDead(_18);
        _16 = <Result<(), ProgramError> as Try>::branch(move _17) -> [return: bb7, unwind: bb14];
    }

    bb7: {
        StorageDead(_17);
        _20 = discriminant(_16);
        switchInt(move _20) -> [0: bb8, 1: bb10, otherwise: bb9];
    }

    bb8: {
        StorageLive(_24);
        _24 = ((_16 as Continue).0: ());
        _15 = _24;
        StorageDead(_24);
        _26 = discriminant(_16);
        StorageDead(_16);
        StorageDead(_15);
        _8 = const ();
        goto -> bb12;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        StorageLive(_21);
        _21 = move ((_16 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_23);
        _23 = move _21;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _23) -> [return: bb11, unwind: bb15];
    }

    bb11: {
        StorageDead(_23);
        StorageDead(_21);
        _28 = discriminant(_16);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb13;
    }

    bb12: {
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_25);
        _25 = ();
        _0 = Result::<(), ProgramError>::Ok(move _25);
        StorageDead(_25);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb13;
    }

    bb13: {
        return;
    }

    bb14 (cleanup): {
        resume;
    }

    bb15 (cleanup): {
        _30 = discriminant(_16);
        goto -> bb14;
    }
}
