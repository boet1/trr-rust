digraph Mir_0_869 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn U192::mul_u64(_1: u64, _2: u64, _3: u64) -&gt; (u64, u64)<br align="left"/>let _4: u64;<br align="left"/>let _5: u64;<br align="left"/>let mut _6: (u64, u64);<br align="left"/>let mut _7: u128;<br align="left"/>let mut _8: u128;<br align="left"/>let mut _9: u128;<br align="left"/>let mut _10: u64;<br align="left"/>let mut _11: u128;<br align="left"/>let mut _12: u64;<br align="left"/>let mut _13: (u128, bool);<br align="left"/>let mut _14: u128;<br align="left"/>let mut _15: u64;<br align="left"/>let mut _16: (u128, bool);<br align="left"/>let mut _17: u64;<br align="left"/>let mut _18: u64;<br align="left"/>debug a =&gt; _1;<br align="left"/>debug b =&gt; _2;<br align="left"/>debug carry =&gt; _3;<br align="left"/>debug hi =&gt; _4;<br align="left"/>debug lo =&gt; _5;<br align="left"/>>;
    bb0__0_869 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>_10 = _1<br/>_9 = move _10 as u128 (IntToInt)<br/>StorageDead(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>_12 = _2<br/>_11 = move _12 as u128 (IntToInt)<br/>StorageDead(_12)<br/>_13 = CheckedMul(_9, _11)<br/></td></tr><tr><td align="left">assert(!move (_13.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, move _9, move _11)</td></tr></table>>];
    bb1__0_869 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_8 = move (_13.0: u128)<br/>StorageDead(_11)<br/>StorageDead(_9)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>_15 = _3<br/>_14 = move _15 as u128 (IntToInt)<br/>StorageDead(_15)<br/>_16 = CheckedAdd(_8, _14)<br/></td></tr><tr><td align="left">assert(!move (_16.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _8, move _14)</td></tr></table>>];
    bb2__0_869 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_7 = move (_16.0: u128)<br/>StorageDead(_14)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">_6 = U192::split_u128(move _7)</td></tr></table>>];
    bb3__0_869 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>StorageLive(_4)<br/>_4 = (_6.0: u64)<br/>StorageLive(_5)<br/>_5 = (_6.1: u64)<br/>StorageDead(_6)<br/>StorageLive(_17)<br/>_17 = _5<br/>StorageLive(_18)<br/>_18 = _4<br/>_0 = (move _17, move _18)<br/>StorageDead(_18)<br/>StorageDead(_17)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_869 -> bb1__0_869 [label="success"];
    bb1__0_869 -> bb2__0_869 [label="success"];
    bb2__0_869 -> bb3__0_869 [label="return"];
}
