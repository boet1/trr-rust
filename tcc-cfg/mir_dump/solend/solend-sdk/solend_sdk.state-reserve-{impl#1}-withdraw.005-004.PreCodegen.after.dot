digraph Mir_0_486 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn ReserveLiquidity::withdraw(_1: &amp;ReErased mut state::reserve::ReserveLiquidity, _2: u64) -&gt; std::result::Result&lt;(), solana_program::program_error::ProgramError&gt;<br align="left"/>let _3: ();<br align="left"/>let mut _4: bool;<br align="left"/>let mut _5: u64;<br align="left"/>let mut _6: u64;<br align="left"/>let mut _7: !;<br align="left"/>let _8: ();<br align="left"/>let mut _9: &amp;ReErased str;<br align="left"/>let _10: &amp;ReErased str;<br align="left"/>let mut _11: solana_program::program_error::ProgramError;<br align="left"/>let mut _12: error::LendingError;<br align="left"/>let mut _13: u64;<br align="left"/>let mut _14: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::LendingError&gt;, u64&gt;;<br align="left"/>let mut _15: std::result::Result&lt;u64, error::LendingError&gt;;<br align="left"/>let mut _16: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _17: u64;<br align="left"/>let mut _18: u64;<br align="left"/>let mut _19: error::LendingError;<br align="left"/>let mut _20: isize;<br align="left"/>let _21: std::result::Result&lt;std::convert::Infallible, error::LendingError&gt;;<br align="left"/>let mut _22: !;<br align="left"/>let mut _23: std::result::Result&lt;std::convert::Infallible, error::LendingError&gt;;<br align="left"/>let _24: u64;<br align="left"/>let mut _25: ();<br align="left"/>debug self =&gt; _1;<br align="left"/>debug liquidity_amount =&gt; _2;<br align="left"/>debug residual =&gt; _21;<br align="left"/>debug val =&gt; _24;<br align="left"/>>;
    bb0__0_486 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = _2<br/>StorageLive(_6)<br/>_6 = ((*_1).5: u64)<br/>_4 = Gt(move _5, move _6)<br/></td></tr><tr><td align="left">switchInt(move _4)</td></tr></table>>];
    bb1__0_486 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageDead(_5)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>_10 = const &quot;Withdraw amount cannot exceed available amount&quot;<br/>_9 = &amp;(*_10)<br/></td></tr><tr><td align="left">_8 = solana_program::log::sol_log(move _9)</td></tr></table>>];
    bb2__0_486 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_10)<br/>StorageDead(_8)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>_12 = LendingError::InsufficientLiquidity<br/></td></tr><tr><td align="left">_11 = &lt;LendingError as Into&lt;ProgramError&gt;&gt;::into(move _12)</td></tr></table>>];
    bb3__0_486 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>_0 = Result::&lt;(), ProgramError&gt;::Err(move _11)<br/>StorageDead(_11)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb4__0_486 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageDead(_5)<br/>_3 = const ()<br/>StorageDead(_4)<br/>StorageDead(_3)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>_17 = ((*_1).5: u64)<br/>StorageLive(_18)<br/>_18 = _2<br/></td></tr><tr><td align="left">_16 = core::num::&lt;impl u64&gt;::checked_sub(move _17, move _18)</td></tr></table>>];
    bb5__0_486 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageDead(_17)<br/>StorageLive(_19)<br/>_19 = LendingError::MathOverflow<br/></td></tr><tr><td align="left">_15 = Option::&lt;u64&gt;::ok_or::&lt;LendingError&gt;(move _16, move _19)</td></tr></table>>];
    bb6__0_486 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageDead(_16)<br/></td></tr><tr><td align="left">_14 = &lt;Result&lt;u64, LendingError&gt; as Try&gt;::branch(move _15)</td></tr></table>>];
    bb7__0_486 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>_20 = discriminant(_14)<br/></td></tr><tr><td align="left">switchInt(move _20)</td></tr></table>>];
    bb8__0_486 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageLive(_24)<br/>_24 = ((_14 as Continue).0: u64)<br/>_13 = _24<br/>StorageDead(_24)<br/>((*_1).5: u64) = move _13<br/>StorageDead(_13)<br/>StorageDead(_14)<br/>StorageLive(_25)<br/>_25 = ()<br/>_0 = Result::&lt;(), ProgramError&gt;::Ok(move _25)<br/>StorageDead(_25)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_486 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb10__0_486 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_21)<br/>_21 = move ((_14 as Break).0: std::result::Result&lt;std::convert::Infallible, error::LendingError&gt;)<br/>StorageLive(_23)<br/>_23 = move _21<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;(), ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, LendingError&gt;&gt;&gt;::from_residual(move _23)</td></tr></table>>];
    bb11__0_486 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageDead(_21)<br/>StorageDead(_13)<br/>StorageDead(_14)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_486 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_486 -> bb4__0_486 [label="0"];
    bb0__0_486 -> bb1__0_486 [label="otherwise"];
    bb1__0_486 -> bb2__0_486 [label="return"];
    bb2__0_486 -> bb3__0_486 [label="return"];
    bb3__0_486 -> bb12__0_486 [label=""];
    bb4__0_486 -> bb5__0_486 [label="return"];
    bb5__0_486 -> bb6__0_486 [label="return"];
    bb6__0_486 -> bb7__0_486 [label="return"];
    bb7__0_486 -> bb8__0_486 [label="0"];
    bb7__0_486 -> bb10__0_486 [label="1"];
    bb7__0_486 -> bb9__0_486 [label="otherwise"];
    bb8__0_486 -> bb12__0_486 [label=""];
    bb10__0_486 -> bb11__0_486 [label="return"];
    bb11__0_486 -> bb12__0_486 [label=""];
}
