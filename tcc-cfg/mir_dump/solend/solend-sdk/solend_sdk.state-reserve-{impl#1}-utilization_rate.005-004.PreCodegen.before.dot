digraph Mir_0_492 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn ReserveLiquidity::utilization_rate(_1: &amp;ReErased state::reserve::ReserveLiquidity) -&gt; std::result::Result&lt;math::rate::Rate, solana_program::program_error::ProgramError&gt;<br align="left"/>let _2: math::decimal::Decimal;<br align="left"/>let mut _3: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;, math::decimal::Decimal&gt;;<br align="left"/>let mut _4: std::result::Result&lt;math::decimal::Decimal, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _5: &amp;ReErased state::reserve::ReserveLiquidity;<br align="left"/>let mut _6: isize;<br align="left"/>let _7: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _8: !;<br align="left"/>let mut _9: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let _10: math::decimal::Decimal;<br align="left"/>let _11: ();<br align="left"/>let mut _12: bool;<br align="left"/>let mut _13: &amp;ReErased math::decimal::Decimal;<br align="left"/>let mut _14: &amp;ReErased math::decimal::Decimal;<br align="left"/>let _15: math::decimal::Decimal;<br align="left"/>let mut _16: bool;<br align="left"/>let mut _17: &amp;ReErased math::decimal::Decimal;<br align="left"/>let mut _18: &amp;ReErased math::decimal::Decimal;<br align="left"/>let _19: math::decimal::Decimal;<br align="left"/>let mut _20: !;<br align="left"/>let mut _21: math::rate::Rate;<br align="left"/>let _22: math::decimal::Decimal;<br align="left"/>let mut _23: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;, math::decimal::Decimal&gt;;<br align="left"/>let mut _24: std::result::Result&lt;math::decimal::Decimal, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _25: math::decimal::Decimal;<br align="left"/>let mut _26: math::decimal::Decimal;<br align="left"/>let mut _27: u64;<br align="left"/>let mut _28: isize;<br align="left"/>let _29: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _30: !;<br align="left"/>let mut _31: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let _32: math::decimal::Decimal;<br align="left"/>let mut _33: math::decimal::Decimal;<br align="left"/>let mut _34: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;, math::decimal::Decimal&gt;;<br align="left"/>let mut _35: std::result::Result&lt;math::decimal::Decimal, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _36: math::decimal::Decimal;<br align="left"/>let mut _37: math::decimal::Decimal;<br align="left"/>let mut _38: isize;<br align="left"/>let _39: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _40: !;<br align="left"/>let mut _41: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let _42: math::decimal::Decimal;<br align="left"/>let mut _43: bool;<br align="left"/>let mut _44: isize;<br align="left"/>let mut _45: isize;<br align="left"/>let mut _46: isize;<br align="left"/>let mut _47: isize;<br align="left"/>let mut _48: isize;<br align="left"/>let mut _49: isize;<br align="left"/>let mut _50: isize;<br align="left"/>let mut _51: isize;<br align="left"/>let mut _52: isize;<br align="left"/>let mut _53: isize;<br align="left"/>let mut _54: isize;<br align="left"/>let mut _55: isize;<br align="left"/>let mut _56: isize;<br align="left"/>let mut _57: isize;<br align="left"/>let mut _58: isize;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug total_supply =&gt; _2;<br align="left"/>debug residual =&gt; _7;<br align="left"/>debug val =&gt; _10;<br align="left"/>debug denominator =&gt; _22;<br align="left"/>debug residual =&gt; _29;<br align="left"/>debug val =&gt; _32;<br align="left"/>debug residual =&gt; _39;<br align="left"/>debug val =&gt; _42;<br align="left"/>>;
    bb0__0_492 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_43 = const false<br/>StorageLive(_2)<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = &amp;(*_1)<br/></td></tr><tr><td align="left">_4 = ReserveLiquidity::total_supply(move _5)</td></tr></table>>];
    bb1__0_492 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/></td></tr><tr><td align="left">_3 = &lt;Result&lt;decimal::Decimal, ProgramError&gt; as Try&gt;::branch(move _4)</td></tr></table>>];
    bb2__0_492 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>_6 = discriminant(_3)<br/></td></tr><tr><td align="left">switchInt(move _6)</td></tr></table>>];
    bb3__0_492 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_10)<br/>_10 = ((_3 as Continue).0: math::decimal::Decimal)<br/>_2 = _10<br/>StorageDead(_10)<br/>_44 = discriminant(_3)<br/>StorageDead(_3)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>_13 = &amp;_2<br/>StorageLive(_14)<br/>StorageLive(_15)<br/></td></tr><tr><td align="left">_15 = decimal::Decimal::zero()</td></tr></table>>];
    bb4__0_492 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_492 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_7)<br/>_7 = move ((_3 as Break).0: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;)<br/>StorageLive(_9)<br/>_9 = move _7<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;rate::Rate, ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, ProgramError&gt;&gt;&gt;::from_residual(move _9)</td></tr></table>>];
    bb6__0_492 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_7)<br/>_54 = discriminant(_3)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_492 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_14 = &amp;_15<br/></td></tr><tr><td align="left">_12 = &lt;decimal::Decimal as PartialEq&gt;::eq(move _13, move _14)</td></tr></table>>];
    bb8__0_492 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">switchInt(move _12)</td></tr></table>>];
    bb9__0_492 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageDead(_14)<br/>StorageDead(_13)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_492 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageDead(_14)<br/>StorageDead(_13)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>_17 = &amp;((*_1).6: math::decimal::Decimal)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/></td></tr><tr><td align="left">_19 = decimal::Decimal::zero()</td></tr></table>>];
    bb11__0_492 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">_18 = &amp;_19<br/></td></tr><tr><td align="left">_16 = &lt;decimal::Decimal as PartialEq&gt;::eq(move _17, move _18)</td></tr></table>>];
    bb12__0_492 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left">switchInt(move _16)</td></tr></table>>];
    bb13__0_492 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageDead(_18)<br/>StorageDead(_17)<br/>StorageLive(_21)<br/></td></tr><tr><td align="left">_21 = rate::Rate::zero()</td></tr></table>>];
    bb14__0_492 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">_0 = Result::&lt;rate::Rate, ProgramError&gt;::Ok(move _21)<br/>StorageDead(_21)<br/>StorageDead(_16)<br/>StorageDead(_12)<br/>StorageDead(_11)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_492 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageDead(_18)<br/>StorageDead(_17)<br/>_11 = const ()<br/>StorageDead(_16)<br/>StorageDead(_12)<br/>StorageDead(_11)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>_25 = ((*_1).6: math::decimal::Decimal)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>_27 = ((*_1).5: u64)<br/></td></tr><tr><td align="left">_26 = &lt;decimal::Decimal as From&lt;u64&gt;&gt;::from(move _27)</td></tr></table>>];
    bb16__0_492 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/></td></tr><tr><td align="left">_24 = &lt;decimal::Decimal as common::TryAdd&gt;::try_add(move _25, move _26)</td></tr></table>>];
    bb17__0_492 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>StorageDead(_25)<br/></td></tr><tr><td align="left">_23 = &lt;Result&lt;decimal::Decimal, ProgramError&gt; as Try&gt;::branch(move _24)</td></tr></table>>];
    bb18__0_492 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/>_28 = discriminant(_23)<br/></td></tr><tr><td align="left">switchInt(move _28)</td></tr></table>>];
    bb19__0_492 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageLive(_32)<br/>_32 = ((_23 as Continue).0: math::decimal::Decimal)<br/>_22 = _32<br/>StorageDead(_32)<br/>_46 = discriminant(_23)<br/>StorageDead(_23)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>StorageLive(_36)<br/>_36 = ((*_1).6: math::decimal::Decimal)<br/>StorageLive(_37)<br/>_37 = _22<br/></td></tr><tr><td align="left">_35 = &lt;decimal::Decimal as common::TryDiv&lt;decimal::Decimal&gt;&gt;::try_div(move _36, move _37)</td></tr></table>>];
    bb20__0_492 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageLive(_29)<br/>_29 = move ((_23 as Break).0: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;)<br/>StorageLive(_31)<br/>_31 = move _29<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;rate::Rate, ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, ProgramError&gt;&gt;&gt;::from_residual(move _31)</td></tr></table>>];
    bb21__0_492 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/>StorageDead(_29)<br/>_52 = discriminant(_23)<br/>StorageDead(_23)<br/>StorageDead(_22)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb22__0_492 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/>StorageDead(_36)<br/></td></tr><tr><td align="left">_34 = &lt;Result&lt;decimal::Decimal, ProgramError&gt; as Try&gt;::branch(move _35)</td></tr></table>>];
    bb23__0_492 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">_43 = const true<br/>StorageDead(_35)<br/>_38 = discriminant(_34)<br/></td></tr><tr><td align="left">switchInt(move _38)</td></tr></table>>];
    bb24__0_492 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageLive(_42)<br/>_42 = ((_34 as Continue).0: math::decimal::Decimal)<br/>_33 = _42<br/>StorageDead(_42)<br/></td></tr><tr><td align="left">_0 = &lt;decimal::Decimal as TryInto&lt;rate::Rate&gt;&gt;::try_into(move _33)</td></tr></table>>];
    bb25__0_492 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageLive(_39)<br/>_39 = move ((_34 as Break).0: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;)<br/>StorageLive(_41)<br/>_41 = move _39<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;rate::Rate, ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, ProgramError&gt;&gt;&gt;::from_residual(move _41)</td></tr></table>>];
    bb26__0_492 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_41)<br/>StorageDead(_39)<br/>StorageDead(_33)<br/>StorageDead(_22)<br/>StorageDead(_2)<br/>_50 = discriminant(_34)<br/>_43 = const false<br/>StorageDead(_34)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb27__0_492 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>StorageDead(_22)<br/>StorageDead(_2)<br/>_48 = discriminant(_34)<br/>_43 = const false<br/>StorageDead(_34)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb28__0_492 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb29__0_492 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left">return</td></tr></table>>];
    bb30__0_492 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">30 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb31__0_492 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">31 (cleanup)</td></tr><tr><td align="left" balign="left">_56 = discriminant(_34)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb32__0_492 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">32 (cleanup)</td></tr><tr><td align="left" balign="left">_57 = discriminant(_23)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb33__0_492 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">33 (cleanup)</td></tr><tr><td align="left" balign="left">_58 = discriminant(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_492 -> bb1__0_492 [label="return"];
    bb1__0_492 -> bb2__0_492 [label="return"];
    bb1__0_492 -> bb30__0_492 [label="unwind"];
    bb2__0_492 -> bb3__0_492 [label="0"];
    bb2__0_492 -> bb5__0_492 [label="1"];
    bb2__0_492 -> bb4__0_492 [label="otherwise"];
    bb3__0_492 -> bb7__0_492 [label="return"];
    bb5__0_492 -> bb6__0_492 [label="return"];
    bb5__0_492 -> bb33__0_492 [label="unwind"];
    bb6__0_492 -> bb28__0_492 [label=""];
    bb7__0_492 -> bb8__0_492 [label="return"];
    bb8__0_492 -> bb10__0_492 [label="0"];
    bb8__0_492 -> bb9__0_492 [label="otherwise"];
    bb9__0_492 -> bb13__0_492 [label=""];
    bb10__0_492 -> bb11__0_492 [label="return"];
    bb11__0_492 -> bb12__0_492 [label="return"];
    bb12__0_492 -> bb15__0_492 [label="0"];
    bb12__0_492 -> bb13__0_492 [label="otherwise"];
    bb13__0_492 -> bb14__0_492 [label="return"];
    bb14__0_492 -> bb28__0_492 [label=""];
    bb15__0_492 -> bb16__0_492 [label="return"];
    bb16__0_492 -> bb17__0_492 [label="return"];
    bb17__0_492 -> bb18__0_492 [label="return"];
    bb17__0_492 -> bb30__0_492 [label="unwind"];
    bb18__0_492 -> bb19__0_492 [label="0"];
    bb18__0_492 -> bb20__0_492 [label="1"];
    bb18__0_492 -> bb4__0_492 [label="otherwise"];
    bb19__0_492 -> bb22__0_492 [label="return"];
    bb20__0_492 -> bb21__0_492 [label="return"];
    bb20__0_492 -> bb32__0_492 [label="unwind"];
    bb21__0_492 -> bb28__0_492 [label=""];
    bb22__0_492 -> bb23__0_492 [label="return"];
    bb22__0_492 -> bb30__0_492 [label="unwind"];
    bb23__0_492 -> bb24__0_492 [label="0"];
    bb23__0_492 -> bb25__0_492 [label="1"];
    bb23__0_492 -> bb4__0_492 [label="otherwise"];
    bb24__0_492 -> bb27__0_492 [label="return"];
    bb24__0_492 -> bb31__0_492 [label="unwind"];
    bb25__0_492 -> bb26__0_492 [label="return"];
    bb25__0_492 -> bb31__0_492 [label="unwind"];
    bb26__0_492 -> bb29__0_492 [label=""];
    bb27__0_492 -> bb29__0_492 [label=""];
    bb28__0_492 -> bb29__0_492 [label=""];
    bb31__0_492 -> bb30__0_492 [label=""];
    bb32__0_492 -> bb30__0_492 [label=""];
    bb33__0_492 -> bb30__0_492 [label=""];
}
