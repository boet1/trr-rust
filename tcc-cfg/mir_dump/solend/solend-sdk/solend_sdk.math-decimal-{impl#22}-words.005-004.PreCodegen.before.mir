// MIR for `decimal::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:587:3: 587:13>::words` before PreCodegen

fn decimal::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:587:3: 587:13>::words(_1: usize) -> usize {
    debug bits => _1;
    let mut _0: usize;
    let _2: ();
    let mut _3: bool;
    let _4: ();
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: !;
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: (usize, bool);
    let mut _12: bool;
    let mut _13: (usize, bool);

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = const true;
        switchInt(move _3) -> [0: bb4, otherwise: bb1];
    }

    bb1: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = _1;
        _5 = Gt(move _6, const 0_usize);
        switchInt(move _5) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_6);
        _4 = const ();
        StorageDead(_5);
        StorageDead(_4);
        _2 = const ();
        goto -> bb5;
    }

    bb3: {
        StorageDead(_6);
        StorageLive(_7);
        _7 = panic(const "assertion failed: bits > 0") -> unwind continue;
    }

    bb4: {
        _2 = const ();
        goto -> bb5;
    }

    bb5: {
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = _1;
        _11 = CheckedSub(_10, const 1_usize);
        assert(!move (_11.1: bool), "attempt to compute `{} - {}`, which would overflow", move _10, const 1_usize) -> [success: bb6, unwind continue];
    }

    bb6: {
        _9 = move (_11.0: usize);
        StorageDead(_10);
        _12 = Eq(const _, const 0_usize);
        assert(!move _12, "attempt to divide `{}` by zero", _9) -> [success: bb7, unwind continue];
    }

    bb7: {
        _8 = Div(move _9, const _);
        StorageDead(_9);
        _13 = CheckedAdd(const 1_usize, _8);
        assert(!move (_13.1: bool), "attempt to compute `{} + {}`, which would overflow", const 1_usize, move _8) -> [success: bb8, unwind continue];
    }

    bb8: {
        _0 = move (_13.0: usize);
        StorageDead(_8);
        return;
    }
}
