digraph Mir_0_54 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn LendingInstruction::unpack_u8(_1: &amp;ReErased [u8]) -&gt; std::result::Result&lt;(u8, &amp;ReErased [u8]), solana_program::program_error::ProgramError&gt;<br align="left"/>let _2: ();<br align="left"/>let mut _3: bool;<br align="left"/>let mut _4: &amp;ReErased [u8];<br align="left"/>let mut _5: !;<br align="left"/>let _6: ();<br align="left"/>let mut _7: &amp;ReErased str;<br align="left"/>let _8: &amp;ReErased str;<br align="left"/>let mut _9: solana_program::program_error::ProgramError;<br align="left"/>let mut _10: error::LendingError;<br align="left"/>let _11: &amp;ReErased [u8];<br align="left"/>let _12: &amp;ReErased [u8];<br align="left"/>let mut _13: (&amp;ReErased [u8], &amp;ReErased [u8]);<br align="left"/>let mut _14: &amp;ReErased [u8];<br align="left"/>let _15: u8;<br align="left"/>let mut _16: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::LendingError&gt;, u8&gt;;<br align="left"/>let mut _17: std::result::Result&lt;u8, error::LendingError&gt;;<br align="left"/>let mut _18: std::option::Option&lt;u8&gt;;<br align="left"/>let mut _19: std::option::Option&lt;[u8; 1_usize]&gt;;<br align="left"/>let mut _20: std::option::Option&lt;&amp;ReErased [u8]&gt;;<br align="left"/>let mut _21: &amp;ReErased [u8];<br align="left"/>let mut _22: std::ops::RangeTo&lt;usize&gt;;<br align="left"/>let mut _23: Closure(DefId(0:55 ~ solend_sdk[296d]::instruction::{impl#0}::unpack_u8::{closure#0}), [i32, Binder(extern &quot;RustCall&quot; fn((&amp;ReErased [u8],)) -&gt; std::option::Option&lt;[u8; 1_usize]&gt;, []), ()]);<br align="left"/>let mut _24: error::LendingError;<br align="left"/>let mut _25: isize;<br align="left"/>let _26: std::result::Result&lt;std::convert::Infallible, error::LendingError&gt;;<br align="left"/>let mut _27: !;<br align="left"/>let mut _28: std::result::Result&lt;std::convert::Infallible, error::LendingError&gt;;<br align="left"/>let _29: u8;<br align="left"/>let mut _30: (u8, &amp;ReErased [u8]);<br align="left"/>let mut _31: u8;<br align="left"/>let mut _32: &amp;ReErased [u8];<br align="left"/>debug input =&gt; _1;<br align="left"/>debug bytes =&gt; _11;<br align="left"/>debug rest =&gt; _12;<br align="left"/>debug value =&gt; _15;<br align="left"/>debug residual =&gt; _26;<br align="left"/>debug val =&gt; _29;<br align="left"/>>;
    bb0__0_54 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>_4 = &amp;(*_1)<br/></td></tr><tr><td align="left">_3 = core::slice::&lt;impl [u8]&gt;::is_empty(move _4)</td></tr></table>>];
    bb1__0_54 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">switchInt(move _3)</td></tr></table>>];
    bb2__0_54 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = const &quot;u8 cannot be unpacked&quot;<br/>_7 = &amp;(*_8)<br/></td></tr><tr><td align="left">_6 = solana_program::log::sol_log(move _7)</td></tr></table>>];
    bb3__0_54 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>StorageDead(_8)<br/>StorageDead(_6)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>_10 = LendingError::InstructionUnpackError<br/></td></tr><tr><td align="left">_9 = &lt;LendingError as Into&lt;ProgramError&gt;&gt;::into(move _10)</td></tr></table>>];
    bb4__0_54 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>_0 = Result::&lt;(u8, &amp;[u8]), ProgramError&gt;::Err(move _9)<br/>StorageDead(_9)<br/>StorageDead(_3)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb5__0_54 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>_2 = const ()<br/>StorageDead(_3)<br/>StorageDead(_2)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>_14 = &amp;(*_1)<br/></td></tr><tr><td align="left">_13 = core::slice::&lt;impl [u8]&gt;::split_at(move _14, const 1_usize)</td></tr></table>>];
    bb6__0_54 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageLive(_11)<br/>_11 = (_13.0: &amp;[u8])<br/>StorageLive(_12)<br/>_12 = (_13.1: &amp;[u8])<br/>StorageDead(_13)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>_21 = &amp;(*_11)<br/>StorageLive(_22)<br/>_22 = RangeTo::&lt;usize&gt; { end: const 1_usize }<br/></td></tr><tr><td align="left">_20 = core::slice::&lt;impl [u8]&gt;::get::&lt;RangeTo&lt;usize&gt;&gt;(move _21, move _22)</td></tr></table>>];
    bb7__0_54 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_22)<br/>StorageDead(_21)<br/>StorageLive(_23)<br/>_23 = {closure@token-lending\sdk\src\instruction.rs:832:23: 832:30}<br/></td></tr><tr><td align="left">_19 = Option::&lt;&amp;[u8]&gt;::and_then::&lt;[u8; 1], {closure@token-lending\sdk\src\instruction.rs:832:23: 832:30}&gt;(move _20, move _23)</td></tr></table>>];
    bb8__0_54 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageDead(_20)<br/></td></tr><tr><td align="left">_18 = Option::&lt;[u8; 1]&gt;::map::&lt;u8, fn([u8; core::::num::{impl#6}::from_le_bytes::{constant#0}]) -&gt; u8 {core::num::&lt;impl u8&gt;::from_le_bytes}&gt;(move _19, core::num::&lt;impl u8&gt;::from_le_bytes)</td></tr></table>>];
    bb9__0_54 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageLive(_24)<br/>_24 = LendingError::InstructionUnpackError<br/></td></tr><tr><td align="left">_17 = Option::&lt;u8&gt;::ok_or::&lt;LendingError&gt;(move _18, move _24)</td></tr></table>>];
    bb10__0_54 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/>StorageDead(_18)<br/></td></tr><tr><td align="left">_16 = &lt;Result&lt;u8, LendingError&gt; as Try&gt;::branch(move _17)</td></tr></table>>];
    bb11__0_54 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>_25 = discriminant(_16)<br/></td></tr><tr><td align="left">switchInt(move _25)</td></tr></table>>];
    bb12__0_54 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageLive(_29)<br/>_29 = ((_16 as Continue).0: u8)<br/>_15 = _29<br/>StorageDead(_29)<br/>StorageDead(_16)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>_31 = _15<br/>StorageLive(_32)<br/>_32 = &amp;(*_12)<br/>_30 = (move _31, move _32)<br/>StorageDead(_32)<br/>StorageDead(_31)<br/>_0 = Result::&lt;(u8, &amp;[u8]), ProgramError&gt;::Ok(move _30)<br/>StorageDead(_30)<br/>StorageDead(_15)<br/>StorageDead(_12)<br/>StorageDead(_11)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_54 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb14__0_54 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageLive(_26)<br/>_26 = move ((_16 as Break).0: std::result::Result&lt;std::convert::Infallible, error::LendingError&gt;)<br/>StorageLive(_28)<br/>_28 = move _26<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;(u8, &amp;[u8]), ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, LendingError&gt;&gt;&gt;::from_residual(move _28)</td></tr></table>>];
    bb15__0_54 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>StorageDead(_26)<br/>StorageDead(_16)<br/>StorageDead(_15)<br/>StorageDead(_12)<br/>StorageDead(_11)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb16__0_54 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_54 -> bb1__0_54 [label="return"];
    bb1__0_54 -> bb5__0_54 [label="0"];
    bb1__0_54 -> bb2__0_54 [label="otherwise"];
    bb2__0_54 -> bb3__0_54 [label="return"];
    bb3__0_54 -> bb4__0_54 [label="return"];
    bb4__0_54 -> bb16__0_54 [label=""];
    bb5__0_54 -> bb6__0_54 [label="return"];
    bb6__0_54 -> bb7__0_54 [label="return"];
    bb7__0_54 -> bb8__0_54 [label="return"];
    bb8__0_54 -> bb9__0_54 [label="return"];
    bb9__0_54 -> bb10__0_54 [label="return"];
    bb10__0_54 -> bb11__0_54 [label="return"];
    bb11__0_54 -> bb12__0_54 [label="0"];
    bb11__0_54 -> bb14__0_54 [label="1"];
    bb11__0_54 -> bb13__0_54 [label="otherwise"];
    bb12__0_54 -> bb16__0_54 [label=""];
    bb14__0_54 -> bb15__0_54 [label="return"];
    bb15__0_54 -> bb16__0_54 [label=""];
}
