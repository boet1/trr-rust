// MIR for `reserve::<impl at token-lending\sdk\src\state\reserve.rs:45:33: 45:42>::eq` after PreCodegen

fn reserve::<impl at token-lending\sdk\src\state\reserve.rs:45:33: 45:42>::eq(_1: &reserve::Reserve, _2: &reserve::Reserve) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: u8;
    let mut _5: u8;
    let mut _6: bool;
    let mut _7: &state::last_update::LastUpdate;
    let mut _8: &state::last_update::LastUpdate;
    let mut _9: bool;
    let mut _10: &solana_program::pubkey::Pubkey;
    let mut _11: &solana_program::pubkey::Pubkey;
    let mut _12: bool;
    let mut _13: &state::reserve::ReserveLiquidity;
    let mut _14: &state::reserve::ReserveLiquidity;
    let mut _15: bool;
    let mut _16: &state::reserve::ReserveCollateral;
    let mut _17: &state::reserve::ReserveCollateral;
    let mut _18: bool;
    let mut _19: &state::reserve::ReserveConfig;
    let mut _20: &state::reserve::ReserveConfig;
    let mut _21: bool;
    let mut _22: &state::rate_limiter::RateLimiter;
    let mut _23: &state::rate_limiter::RateLimiter;
    let mut _24: &math::decimal::Decimal;
    let mut _25: &math::decimal::Decimal;

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = ((*_1).0: u8);
        StorageLive(_5);
        _5 = ((*_2).0: u8);
        _3 = Eq(move _4, move _5);
        switchInt(move _3) -> [0: bb20, otherwise: bb1];
    }

    bb1: {
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &((*_1).1: state::last_update::LastUpdate);
        StorageLive(_8);
        _8 = &((*_2).1: state::last_update::LastUpdate);
        _6 = <last_update::LastUpdate as PartialEq>::eq(move _7, move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _6) -> [0: bb19, otherwise: bb3];
    }

    bb3: {
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &((*_1).2: solana_program::pubkey::Pubkey);
        StorageLive(_11);
        _11 = &((*_2).2: solana_program::pubkey::Pubkey);
        _9 = <Pubkey as PartialEq>::eq(move _10, move _11) -> [return: bb4, unwind continue];
    }

    bb4: {
        switchInt(move _9) -> [0: bb18, otherwise: bb5];
    }

    bb5: {
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &((*_1).3: state::reserve::ReserveLiquidity);
        StorageLive(_14);
        _14 = &((*_2).3: state::reserve::ReserveLiquidity);
        _12 = <ReserveLiquidity as PartialEq>::eq(move _13, move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        switchInt(move _12) -> [0: bb17, otherwise: bb7];
    }

    bb7: {
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &((*_1).4: state::reserve::ReserveCollateral);
        StorageLive(_17);
        _17 = &((*_2).4: state::reserve::ReserveCollateral);
        _15 = <ReserveCollateral as PartialEq>::eq(move _16, move _17) -> [return: bb8, unwind continue];
    }

    bb8: {
        switchInt(move _15) -> [0: bb16, otherwise: bb9];
    }

    bb9: {
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &((*_1).5: state::reserve::ReserveConfig);
        StorageLive(_20);
        _20 = &((*_2).5: state::reserve::ReserveConfig);
        _18 = <reserve::ReserveConfig as PartialEq>::eq(move _19, move _20) -> [return: bb10, unwind continue];
    }

    bb10: {
        switchInt(move _18) -> [0: bb15, otherwise: bb11];
    }

    bb11: {
        StorageDead(_20);
        StorageDead(_19);
        StorageLive(_21);
        StorageLive(_22);
        _22 = &((*_1).6: state::rate_limiter::RateLimiter);
        StorageLive(_23);
        _23 = &((*_2).6: state::rate_limiter::RateLimiter);
        _21 = <rate_limiter::RateLimiter as PartialEq>::eq(move _22, move _23) -> [return: bb12, unwind continue];
    }

    bb12: {
        switchInt(move _21) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        StorageDead(_23);
        StorageDead(_22);
        StorageLive(_24);
        _24 = &((*_1).7: math::decimal::Decimal);
        StorageLive(_25);
        _25 = &((*_2).7: math::decimal::Decimal);
        _0 = <decimal::Decimal as PartialEq>::eq(move _24, move _25) -> [return: bb22, unwind continue];
    }

    bb14: {
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb21;
    }

    bb15: {
        StorageDead(_20);
        StorageDead(_19);
        goto -> bb21;
    }

    bb16: {
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb21;
    }

    bb17: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb21;
    }

    bb18: {
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb21;
    }

    bb19: {
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb21;
    }

    bb20: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb21;
    }

    bb21: {
        _0 = const false;
        goto -> bb23;
    }

    bb22: {
        StorageDead(_25);
        StorageDead(_24);
        goto -> bb23;
    }

    bb23: {
        StorageDead(_21);
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_12);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_3);
        return;
    }
}
