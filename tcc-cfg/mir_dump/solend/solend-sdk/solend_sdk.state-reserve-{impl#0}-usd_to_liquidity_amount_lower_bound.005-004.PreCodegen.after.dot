digraph Mir_0_459 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn reserve::Reserve::usd_to_liquidity_amount_lower_bound(_1: &amp;ReErased state::reserve::Reserve, _2: math::decimal::Decimal) -&gt; std::result::Result&lt;math::decimal::Decimal, solana_program::program_error::ProgramError&gt;<br align="left"/>let mut _3: math::decimal::Decimal;<br align="left"/>let mut _4: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;, math::decimal::Decimal&gt;;<br align="left"/>let mut _5: std::result::Result&lt;math::decimal::Decimal, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _6: math::decimal::Decimal;<br align="left"/>let mut _7: math::decimal::Decimal;<br align="left"/>let mut _8: u128;<br align="left"/>let mut _9: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::LendingError&gt;, u128&gt;;<br align="left"/>let mut _10: std::result::Result&lt;u128, error::LendingError&gt;;<br align="left"/>let mut _11: std::option::Option&lt;u128&gt;;<br align="left"/>let mut _12: u32;<br align="left"/>let mut _13: u8;<br align="left"/>let mut _14: error::LendingError;<br align="left"/>let mut _15: isize;<br align="left"/>let _16: std::result::Result&lt;std::convert::Infallible, error::LendingError&gt;;<br align="left"/>let mut _17: !;<br align="left"/>let mut _18: std::result::Result&lt;std::convert::Infallible, error::LendingError&gt;;<br align="left"/>let _19: u128;<br align="left"/>let mut _20: isize;<br align="left"/>let _21: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _22: !;<br align="left"/>let mut _23: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let _24: math::decimal::Decimal;<br align="left"/>let mut _25: math::decimal::Decimal;<br align="left"/>let mut _26: &amp;ReErased state::reserve::Reserve;<br align="left"/>let mut _27: bool;<br align="left"/>let mut _28: isize;<br align="left"/>let mut _29: isize;<br align="left"/>let mut _30: isize;<br align="left"/>let mut _31: isize;<br align="left"/>let mut _32: isize;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug quote_amount =&gt; _2;<br align="left"/>debug residual =&gt; _16;<br align="left"/>debug val =&gt; _19;<br align="left"/>debug residual =&gt; _21;<br align="left"/>debug val =&gt; _24;<br align="left"/>>;
    bb0__0_459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_27 = const false<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = _2<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>_13 = (((*_1).3: state::reserve::ReserveLiquidity).1: u8)<br/>_12 = move _13 as u32 (IntToInt)<br/>StorageDead(_13)<br/></td></tr><tr><td align="left">_11 = core::num::&lt;impl u128&gt;::checked_pow(const 10_u128, move _12)</td></tr></table>>];
    bb1__0_459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageLive(_14)<br/>_14 = LendingError::MathOverflow<br/></td></tr><tr><td align="left">_10 = Option::&lt;u128&gt;::ok_or::&lt;LendingError&gt;(move _11, move _14)</td></tr></table>>];
    bb2__0_459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageDead(_11)<br/></td></tr><tr><td align="left">_9 = &lt;Result&lt;u128, LendingError&gt; as Try&gt;::branch(move _10)</td></tr></table>>];
    bb3__0_459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>_15 = discriminant(_9)<br/></td></tr><tr><td align="left">switchInt(move _15)</td></tr></table>>];
    bb4__0_459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_19)<br/>_19 = ((_9 as Continue).0: u128)<br/>_8 = _19<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">_7 = &lt;decimal::Decimal as From&lt;u128&gt;&gt;::from(move _8)</td></tr></table>>];
    bb5__0_459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb6__0_459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_16)<br/>_16 = move ((_9 as Break).0: std::result::Result&lt;std::convert::Infallible, error::LendingError&gt;)<br/>StorageLive(_18)<br/>_18 = move _16<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;decimal::Decimal, ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, LendingError&gt;&gt;&gt;::from_residual(move _18)</td></tr></table>>];
    bb7__0_459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageDead(_16)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/>StorageDead(_6)<br/>StorageDead(_5)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/></td></tr><tr><td align="left">_5 = &lt;decimal::Decimal as common::TryMul&lt;decimal::Decimal&gt;&gt;::try_mul(move _6, move _7)</td></tr></table>>];
    bb9__0_459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">_4 = &lt;Result&lt;decimal::Decimal, ProgramError&gt; as Try&gt;::branch(move _5)</td></tr></table>>];
    bb10__0_459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">_27 = const true<br/>StorageDead(_5)<br/>_20 = discriminant(_4)<br/></td></tr><tr><td align="left">switchInt(move _20)</td></tr></table>>];
    bb11__0_459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_24)<br/>_24 = ((_4 as Continue).0: math::decimal::Decimal)<br/>_3 = _24<br/>StorageDead(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>_26 = &amp;(*_1)<br/></td></tr><tr><td align="left">_25 = reserve::Reserve::price_upper_bound(move _26)</td></tr></table>>];
    bb12__0_459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageLive(_21)<br/>_21 = move ((_4 as Break).0: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;)<br/>StorageLive(_23)<br/>_23 = move _21<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;decimal::Decimal, ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, ProgramError&gt;&gt;&gt;::from_residual(move _23)</td></tr></table>>];
    bb13__0_459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageDead(_21)<br/>StorageDead(_3)<br/>_30 = discriminant(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/></td></tr><tr><td align="left">_0 = &lt;decimal::Decimal as common::TryDiv&lt;decimal::Decimal&gt;&gt;::try_div(move _3, move _25)</td></tr></table>>];
    bb15__0_459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_3)<br/>_28 = discriminant(_4)<br/>StorageDead(_9)<br/>_27 = const false<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb16__0_459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>_27 = const false<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left">return</td></tr></table>>];
    bb18__0_459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">18 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb19__0_459 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">19 (cleanup)</td></tr><tr><td align="left" balign="left">_32 = discriminant(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_459 -> bb1__0_459 [label="return"];
    bb1__0_459 -> bb2__0_459 [label="return"];
    bb2__0_459 -> bb3__0_459 [label="return"];
    bb3__0_459 -> bb4__0_459 [label="0"];
    bb3__0_459 -> bb6__0_459 [label="1"];
    bb3__0_459 -> bb5__0_459 [label="otherwise"];
    bb4__0_459 -> bb8__0_459 [label="return"];
    bb6__0_459 -> bb7__0_459 [label="return"];
    bb7__0_459 -> bb16__0_459 [label=""];
    bb8__0_459 -> bb9__0_459 [label="return"];
    bb9__0_459 -> bb10__0_459 [label="return"];
    bb9__0_459 -> bb18__0_459 [label="unwind"];
    bb10__0_459 -> bb11__0_459 [label="0"];
    bb10__0_459 -> bb12__0_459 [label="1"];
    bb10__0_459 -> bb5__0_459 [label="otherwise"];
    bb11__0_459 -> bb14__0_459 [label="return"];
    bb11__0_459 -> bb19__0_459 [label="unwind"];
    bb12__0_459 -> bb13__0_459 [label="return"];
    bb12__0_459 -> bb19__0_459 [label="unwind"];
    bb13__0_459 -> bb16__0_459 [label=""];
    bb14__0_459 -> bb15__0_459 [label="return"];
    bb14__0_459 -> bb19__0_459 [label="unwind"];
    bb15__0_459 -> bb17__0_459 [label=""];
    bb16__0_459 -> bb17__0_459 [label=""];
    bb19__0_459 -> bb18__0_459 [label=""];
}
