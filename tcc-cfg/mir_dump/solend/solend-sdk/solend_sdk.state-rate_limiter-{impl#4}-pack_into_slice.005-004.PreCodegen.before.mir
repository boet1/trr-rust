// MIR for `rate_limiter::<impl at token-lending\sdk\src\state\rate_limiter.rs:166:1: 166:26>::pack_into_slice` before PreCodegen

fn rate_limiter::<impl at token-lending\sdk\src\state\rate_limiter.rs:166:1: 166:26>::pack_into_slice(_1: &rate_limiter::RateLimiter, _2: &mut [u8]) -> () {
    debug self => _1;
    debug dst => _2;
    let mut _0: ();
    let _3: &mut [u8; 56];
    let mut _4: &mut [u8; 56];
    let mut _5: &mut [u8; 56];
    let _6: usize;
    let mut _8: &mut [u8];
    let mut _9: &mut [u8];
    let mut _10: std::ops::Range<usize>;
    let mut _11: usize;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: (usize, bool);
    let mut _15: &mut [u8; 56];
    let mut _16: &mut [u8];
    let mut _22: (&mut [u8; 8], &mut [u8; 8], &mut [u8; 16], &mut [u8; 8], &mut [u8; 16]);
    let mut _24: &mut [u8; 56];
    let mut _25: [u8; 8];
    let mut _26: u64;
    let mut _27: [u8; 8];
    let mut _28: u64;
    let _29: ();
    let mut _30: math::decimal::Decimal;
    let mut _31: &mut [u8; 16];
    let mut _32: [u8; 8];
    let mut _33: u64;
    let _34: ();
    let mut _35: math::decimal::Decimal;
    let mut _36: &mut [u8; 16];
    scope 1 {
        debug dst => _3;
        let _17: &mut [u8; 8];
        let _18: &mut [u8; 8];
        let _19: &mut [u8; 16];
        let _20: &mut [u8; 8];
        let _21: &mut [u8; 16];
        let _23: &mut [u8; 56];
        scope 6 {
            debug config_max_outflow_dst => _17;
            debug config_window_duration_dst => _18;
            debug prev_qty_dst => _19;
            debug window_start_dst => _20;
            debug cur_qty_dst => _21;
        }
        scope 7 {
            debug input => _23;
            scope 8 {
                scope 9 {
                }
            }
        }
    }
    scope 2 {
        debug offset => _6;
        let _7: &mut [u8];
        scope 3 {
            debug slice => _7;
            scope 4 {
                scope 5 {
                }
            }
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = const 0_usize;
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &mut (*_2);
        StorageLive(_10);
        StorageLive(_11);
        _11 = _6;
        StorageLive(_12);
        StorageLive(_13);
        _13 = _6;
        _14 = CheckedAdd(_13, const _);
        assert(!move (_14.1: bool), "attempt to compute `{} + {}`, which would overflow", move _13, const _) -> [success: bb1, unwind continue];
    }

    bb1: {
        _12 = move (_14.0: usize);
        StorageDead(_13);
        _10 = std::ops::Range::<usize> { start: move _11, end: move _12 };
        StorageDead(_12);
        StorageDead(_11);
        _8 = <[u8] as IndexMut<std::ops::Range<usize>>>::index_mut(move _9, move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_9);
        _7 = &mut (*_8);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &mut (*_7);
        _15 = <rate_limiter::RateLimiter as Pack>::pack_into_slice::as_array::<u8>(move _16) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_16);
        _5 = &mut (*_15);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        _4 = &mut (*_5);
        _3 = &mut (*_4);
        StorageDead(_15);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_22);
        StorageLive(_23);
        _23 = move _3;
        StorageLive(_24);
        _24 = &mut (*_23);
        _22 = <rate_limiter::RateLimiter as Pack>::pack_into_slice::as_arrays::<u8>(move _24) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_24);
        StorageDead(_23);
        StorageLive(_17);
        _17 = move (_22.0: &mut [u8; 8]);
        StorageLive(_18);
        _18 = move (_22.1: &mut [u8; 8]);
        StorageLive(_19);
        _19 = move (_22.2: &mut [u8; 16]);
        StorageLive(_20);
        _20 = move (_22.3: &mut [u8; 8]);
        StorageLive(_21);
        _21 = move (_22.4: &mut [u8; 16]);
        StorageDead(_22);
        StorageLive(_25);
        StorageLive(_26);
        _26 = (((*_1).0: state::rate_limiter::RateLimiterConfig).1: u64);
        _25 = core::num::<impl u64>::to_le_bytes(move _26) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_26);
        (*_17) = move _25;
        StorageDead(_25);
        StorageLive(_27);
        StorageLive(_28);
        _28 = (((*_1).0: state::rate_limiter::RateLimiterConfig).0: u64);
        _27 = core::num::<impl u64>::to_le_bytes(move _28) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_28);
        (*_18) = move _27;
        StorageDead(_27);
        StorageLive(_29);
        StorageLive(_30);
        _30 = ((*_1).1: math::decimal::Decimal);
        StorageLive(_31);
        _31 = &mut (*_19);
        _29 = state::pack_decimal(move _30, move _31) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_29);
        StorageLive(_32);
        StorageLive(_33);
        _33 = ((*_1).2: u64);
        _32 = core::num::<impl u64>::to_le_bytes(move _33) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_33);
        (*_20) = move _32;
        StorageDead(_32);
        StorageLive(_34);
        StorageLive(_35);
        _35 = ((*_1).3: math::decimal::Decimal);
        StorageLive(_36);
        _36 = &mut (*_21);
        _34 = state::pack_decimal(move _35, move _36) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_34);
        _0 = const ();
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_3);
        return;
    }
}
