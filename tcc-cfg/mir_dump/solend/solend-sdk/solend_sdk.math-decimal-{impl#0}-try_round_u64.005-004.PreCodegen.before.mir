// MIR for `decimal::<impl at token-lending\sdk\src\math\decimal.rs:32:1: 32:13>::try_round_u64` before PreCodegen

fn decimal::<impl at token-lending\sdk\src\math\decimal.rs:32:1: 32:13>::try_round_u64(_1: &decimal::Decimal) -> Result<u64, ProgramError> {
    debug self => _1;
    let mut _0: std::result::Result<u64, solana_program::program_error::ProgramError>;
    let _2: math::decimal::U192;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::LendingError>, math::decimal::U192>;
    let mut _4: std::result::Result<math::decimal::U192, error::LendingError>;
    let mut _5: std::option::Option<math::decimal::U192>;
    let mut _6: math::decimal::U192;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::LendingError>, math::decimal::U192>;
    let mut _8: std::result::Result<math::decimal::U192, error::LendingError>;
    let mut _9: std::option::Option<math::decimal::U192>;
    let mut _10: math::decimal::U192;
    let mut _11: math::decimal::U192;
    let mut _12: error::LendingError;
    let mut _13: isize;
    let _14: std::result::Result<std::convert::Infallible, error::LendingError>;
    let mut _15: !;
    let mut _16: std::result::Result<std::convert::Infallible, error::LendingError>;
    let _17: math::decimal::U192;
    let mut _18: math::decimal::U192;
    let mut _19: error::LendingError;
    let mut _20: isize;
    let _21: std::result::Result<std::convert::Infallible, error::LendingError>;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, error::LendingError>;
    let _24: math::decimal::U192;
    let mut _25: u64;
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::LendingError>, u64>;
    let mut _27: std::result::Result<u64, error::LendingError>;
    let mut _28: std::result::Result<u64, &str>;
    let mut _29: math::decimal::U192;
    let mut _30: {closure@token-lending\sdk\src\math\decimal.rs:86:47: 86:50};
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, error::LendingError>;
    scope 1 {
        debug rounded_val => _2;
        let _32: std::result::Result<std::convert::Infallible, error::LendingError>;
        let _35: u64;
        scope 10 {
            debug residual => _32;
            scope 11 {
            }
        }
        scope 12 {
            debug val => _35;
            scope 13 {
            }
        }
    }
    scope 2 {
        debug residual => _14;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _17;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _21;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _24;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = decimal::Decimal::half_wad() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_11);
        _11 = ((*_1).0: math::decimal::U192);
        _9 = U192::checked_add(move _10, move _11) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_12);
        _12 = LendingError::MathOverflow;
        _8 = Option::<U192>::ok_or::<LendingError>(move _9, move _12) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_12);
        StorageDead(_9);
        _7 = <Result<U192, LendingError> as Try>::branch(move _8) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_8);
        _13 = discriminant(_7);
        switchInt(move _13) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_17);
        _17 = ((_7 as Continue).0: math::decimal::U192);
        _6 = _17;
        StorageDead(_17);
        StorageLive(_18);
        _18 = decimal::Decimal::wad() -> [return: bb9, unwind continue];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_14);
        _14 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::LendingError>);
        StorageLive(_16);
        _16 = move _14;
        _0 = <Result<u64, ProgramError> as FromResidual<Result<Infallible, LendingError>>>::from_residual(move _16) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb22;
    }

    bb9: {
        _5 = U192::checked_div(move _6, move _18) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_18);
        StorageDead(_6);
        StorageLive(_19);
        _19 = LendingError::MathOverflow;
        _4 = Option::<U192>::ok_or::<LendingError>(move _5, move _19) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_19);
        StorageDead(_5);
        _3 = <Result<U192, LendingError> as Try>::branch(move _4) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_4);
        _20 = discriminant(_3);
        switchInt(move _20) -> [0: bb13, 1: bb14, otherwise: bb6];
    }

    bb13: {
        StorageLive(_24);
        _24 = ((_3 as Continue).0: math::decimal::U192);
        _2 = _24;
        StorageDead(_24);
        StorageDead(_7);
        StorageDead(_3);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = _2;
        _28 = <u64 as TryFrom<U192>>::try_from(move _29) -> [return: bb16, unwind continue];
    }

    bb14: {
        StorageLive(_21);
        _21 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, error::LendingError>);
        StorageLive(_23);
        _23 = move _21;
        _0 = <Result<u64, ProgramError> as FromResidual<Result<Infallible, LendingError>>>::from_residual(move _23) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_23);
        StorageDead(_21);
        goto -> bb22;
    }

    bb16: {
        StorageDead(_29);
        StorageLive(_30);
        _30 = {closure@token-lending\sdk\src\math\decimal.rs:86:47: 86:50};
        _27 = Result::<u64, &str>::map_err::<LendingError, {closure@token-lending\sdk\src\math\decimal.rs:86:47: 86:50}>(move _28, move _30) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_30);
        StorageDead(_28);
        _26 = <Result<u64, LendingError> as Try>::branch(move _27) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_27);
        _31 = discriminant(_26);
        switchInt(move _31) -> [0: bb19, 1: bb20, otherwise: bb6];
    }

    bb19: {
        StorageLive(_35);
        _35 = ((_26 as Continue).0: u64);
        _25 = _35;
        StorageDead(_35);
        _0 = Result::<u64, ProgramError>::Ok(move _25);
        StorageDead(_25);
        StorageDead(_2);
        StorageDead(_26);
        goto -> bb23;
    }

    bb20: {
        StorageLive(_32);
        _32 = move ((_26 as Break).0: std::result::Result<std::convert::Infallible, error::LendingError>);
        StorageLive(_34);
        _34 = move _32;
        _0 = <Result<u64, ProgramError> as FromResidual<Result<Infallible, LendingError>>>::from_residual(move _34) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_34);
        StorageDead(_32);
        StorageDead(_25);
        StorageDead(_2);
        StorageDead(_26);
        goto -> bb23;
    }

    bb22: {
        StorageDead(_7);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb23;
    }

    bb23: {
        return;
    }
}
