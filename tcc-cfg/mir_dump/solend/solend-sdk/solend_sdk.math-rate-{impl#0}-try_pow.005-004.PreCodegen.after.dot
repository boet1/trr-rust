digraph Mir_0_186 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn rate::Rate::try_pow(_1: &amp;ReErased math::rate::Rate, _2: u64) -&gt; std::result::Result&lt;math::rate::Rate, solana_program::program_error::ProgramError&gt;<br align="left"/>let mut _3: math::rate::Rate;<br align="left"/>let mut _4: math::rate::Rate;<br align="left"/>let mut _5: bool;<br align="left"/>let mut _6: u64;<br align="left"/>let mut _7: u64;<br align="left"/>let mut _8: bool;<br align="left"/>let mut _9: math::rate::U128;<br align="left"/>let _10: ();<br align="left"/>let mut _11: ();<br align="left"/>let mut _12: bool;<br align="left"/>let mut _13: u64;<br align="left"/>let mut _14: bool;<br align="left"/>let mut _15: math::rate::Rate;<br align="left"/>let mut _16: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;, math::rate::Rate&gt;;<br align="left"/>let mut _17: std::result::Result&lt;math::rate::Rate, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _18: math::rate::Rate;<br align="left"/>let mut _19: math::rate::Rate;<br align="left"/>let mut _20: isize;<br align="left"/>let _21: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _22: !;<br align="left"/>let mut _23: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let _24: math::rate::Rate;<br align="left"/>let mut _25: bool;<br align="left"/>let mut _26: u64;<br align="left"/>let mut _27: u64;<br align="left"/>let mut _28: bool;<br align="left"/>let mut _29: math::rate::Rate;<br align="left"/>let mut _30: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;, math::rate::Rate&gt;;<br align="left"/>let mut _31: std::result::Result&lt;math::rate::Rate, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _32: math::rate::Rate;<br align="left"/>let mut _33: math::rate::Rate;<br align="left"/>let mut _34: isize;<br align="left"/>let _35: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _36: !;<br align="left"/>let mut _37: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let _38: math::rate::Rate;<br align="left"/>let mut _39: !;<br align="left"/>let _40: ();<br align="left"/>let mut _41: !;<br align="left"/>let mut _42: math::rate::Rate;<br align="left"/>let mut _43: isize;<br align="left"/>let mut _44: isize;<br align="left"/>let mut _45: isize;<br align="left"/>let mut _46: isize;<br align="left"/>let mut _47: isize;<br align="left"/>let mut _48: isize;<br align="left"/>let mut _49: isize;<br align="left"/>let mut _50: isize;<br align="left"/>let mut _51: isize;<br align="left"/>let mut _52: isize;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug exp =&gt; _2;<br align="left"/>debug base =&gt; _3;<br align="left"/>debug ret =&gt; _4;<br align="left"/>debug residual =&gt; _21;<br align="left"/>debug val =&gt; _24;<br align="left"/>debug residual =&gt; _35;<br align="left"/>debug val =&gt; _38;<br align="left"/>>;
    bb0__0_186 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>_3 = (*_1)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>_7 = _2<br/>_8 = Eq(const 2_u64, const 0_u64)<br/></td></tr><tr><td align="left">assert(!move _8, &quot;attempt to calculate the remainder of `{}` with a divisor of zero&quot;, _7)</td></tr></table>>];
    bb1__0_186 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_6 = Rem(move _7, const 2_u64)<br/>StorageDead(_7)<br/>_5 = Ne(move _6, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _5)</td></tr></table>>];
    bb2__0_186 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>_4 = _3<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb3__0_186 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageLive(_9)<br/></td></tr><tr><td align="left">_9 = rate::Rate::wad()</td></tr></table>>];
    bb4__0_186 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_4 = rate::Rate(move _9)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb5__0_186 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageLive(_10)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb6__0_186 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_12)<br/>StorageLive(_13)<br/>_13 = _2<br/>_12 = Gt(move _13, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _12)</td></tr></table>>];
    bb7__0_186 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>_14 = Eq(const 2_u64, const 0_u64)<br/></td></tr><tr><td align="left">assert(!move _14, &quot;attempt to divide `{}` by zero&quot;, _2)</td></tr></table>>];
    bb8__0_186 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">_2 = Div(_2, const 2_u64)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>_18 = _3<br/>StorageLive(_19)<br/>_19 = _3<br/></td></tr><tr><td align="left">_17 = &lt;rate::Rate as common::TryMul&lt;rate::Rate&gt;&gt;::try_mul(move _18, move _19)</td></tr></table>>];
    bb9__0_186 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageDead(_18)<br/></td></tr><tr><td align="left">_16 = &lt;Result&lt;rate::Rate, ProgramError&gt; as Try&gt;::branch(move _17)</td></tr></table>>];
    bb10__0_186 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>_20 = discriminant(_16)<br/></td></tr><tr><td align="left">switchInt(move _20)</td></tr></table>>];
    bb11__0_186 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_24)<br/>_24 = ((_16 as Continue).0: math::rate::Rate)<br/>_15 = _24<br/>StorageDead(_24)<br/>_3 = move _15<br/>StorageDead(_15)<br/>_43 = discriminant(_16)<br/>StorageDead(_16)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>_27 = _2<br/>_28 = Eq(const 2_u64, const 0_u64)<br/></td></tr><tr><td align="left">assert(!move _28, &quot;attempt to calculate the remainder of `{}` with a divisor of zero&quot;, _27)</td></tr></table>>];
    bb12__0_186 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb13__0_186 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageLive(_21)<br/>_21 = move ((_16 as Break).0: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;)<br/>StorageLive(_23)<br/>_23 = move _21<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;rate::Rate, ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, ProgramError&gt;&gt;&gt;::from_residual(move _23)</td></tr></table>>];
    bb14__0_186 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageDead(_21)<br/>StorageDead(_15)<br/>_49 = discriminant(_16)<br/>StorageDead(_16)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_186 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">_26 = Rem(move _27, const 2_u64)<br/>StorageDead(_27)<br/>_25 = Ne(move _26, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _25)</td></tr></table>>];
    bb16__0_186 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>_32 = _4<br/>StorageLive(_33)<br/>_33 = _3<br/></td></tr><tr><td align="left">_31 = &lt;rate::Rate as common::TryMul&lt;rate::Rate&gt;&gt;::try_mul(move _32, move _33)</td></tr></table>>];
    bb17__0_186 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>StorageDead(_32)<br/></td></tr><tr><td align="left">_30 = &lt;Result&lt;rate::Rate, ProgramError&gt; as Try&gt;::branch(move _31)</td></tr></table>>];
    bb18__0_186 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/>_34 = discriminant(_30)<br/></td></tr><tr><td align="left">switchInt(move _34)</td></tr></table>>];
    bb19__0_186 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageLive(_38)<br/>_38 = ((_30 as Continue).0: math::rate::Rate)<br/>_29 = _38<br/>StorageDead(_38)<br/>_4 = move _29<br/>StorageDead(_29)<br/>_45 = discriminant(_30)<br/>StorageDead(_30)<br/>_11 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_186 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageLive(_35)<br/>_35 = move ((_30 as Break).0: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;)<br/>StorageLive(_37)<br/>_37 = move _35<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;rate::Rate, ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, ProgramError&gt;&gt;&gt;::from_residual(move _37)</td></tr></table>>];
    bb21__0_186 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/>StorageDead(_35)<br/>StorageDead(_29)<br/>_47 = discriminant(_30)<br/>StorageDead(_30)<br/>StorageDead(_25)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb22__0_186 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>_11 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb23__0_186 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb24__0_186 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>StorageLive(_40)<br/>_10 = const ()<br/>StorageDead(_40)<br/>StorageDead(_12)<br/>StorageDead(_10)<br/>StorageLive(_42)<br/>_42 = _4<br/>_0 = Result::&lt;rate::Rate, ProgramError&gt;::Ok(move _42)<br/>StorageDead(_42)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb25__0_186 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_10)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb26__0_186 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left">return</td></tr></table>>];
    bb27__0_186 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">27 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb28__0_186 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">28 (cleanup)</td></tr><tr><td align="left" balign="left">_51 = discriminant(_30)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb29__0_186 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">29 (cleanup)</td></tr><tr><td align="left" balign="left">_52 = discriminant(_16)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_186 -> bb1__0_186 [label="success"];
    bb1__0_186 -> bb3__0_186 [label="0"];
    bb1__0_186 -> bb2__0_186 [label="otherwise"];
    bb2__0_186 -> bb5__0_186 [label=""];
    bb3__0_186 -> bb4__0_186 [label="return"];
    bb4__0_186 -> bb5__0_186 [label=""];
    bb5__0_186 -> bb6__0_186 [label=""];
    bb6__0_186 -> bb24__0_186 [label="0"];
    bb6__0_186 -> bb7__0_186 [label="otherwise"];
    bb7__0_186 -> bb8__0_186 [label="success"];
    bb8__0_186 -> bb9__0_186 [label="return"];
    bb9__0_186 -> bb10__0_186 [label="return"];
    bb9__0_186 -> bb27__0_186 [label="unwind"];
    bb10__0_186 -> bb11__0_186 [label="0"];
    bb10__0_186 -> bb13__0_186 [label="1"];
    bb10__0_186 -> bb12__0_186 [label="otherwise"];
    bb11__0_186 -> bb15__0_186 [label="success"];
    bb13__0_186 -> bb14__0_186 [label="return"];
    bb13__0_186 -> bb29__0_186 [label="unwind"];
    bb14__0_186 -> bb25__0_186 [label=""];
    bb15__0_186 -> bb22__0_186 [label="0"];
    bb15__0_186 -> bb16__0_186 [label="otherwise"];
    bb16__0_186 -> bb17__0_186 [label="return"];
    bb17__0_186 -> bb18__0_186 [label="return"];
    bb17__0_186 -> bb27__0_186 [label="unwind"];
    bb18__0_186 -> bb19__0_186 [label="0"];
    bb18__0_186 -> bb20__0_186 [label="1"];
    bb18__0_186 -> bb12__0_186 [label="otherwise"];
    bb19__0_186 -> bb23__0_186 [label=""];
    bb20__0_186 -> bb21__0_186 [label="return"];
    bb20__0_186 -> bb28__0_186 [label="unwind"];
    bb21__0_186 -> bb25__0_186 [label=""];
    bb22__0_186 -> bb23__0_186 [label=""];
    bb23__0_186 -> bb6__0_186 [label=""];
    bb24__0_186 -> bb26__0_186 [label=""];
    bb25__0_186 -> bb26__0_186 [label=""];
    bb28__0_186 -> bb27__0_186 [label=""];
    bb29__0_186 -> bb27__0_186 [label=""];
}
