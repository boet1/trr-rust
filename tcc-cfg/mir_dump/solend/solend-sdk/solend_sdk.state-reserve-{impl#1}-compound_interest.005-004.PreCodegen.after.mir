// MIR for `reserve::<impl at token-lending\sdk\src\state\reserve.rs:669:1: 669:22>::compound_interest` after PreCodegen

fn reserve::<impl at token-lending\sdk\src\state\reserve.rs:669:1: 669:22>::compound_interest(_1: &mut ReserveLiquidity, _2: rate::Rate, _3: u64, _4: rate::Rate) -> Result<(), ProgramError> {
    debug self => _1;
    debug current_borrow_rate => _2;
    debug slots_elapsed => _3;
    debug take_rate => _4;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _5: math::rate::Rate;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::rate::Rate>;
    let mut _7: std::result::Result<math::rate::Rate, solana_program::program_error::ProgramError>;
    let mut _8: math::rate::Rate;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _13: math::rate::Rate;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::rate::Rate>;
    let mut _16: std::result::Result<math::rate::Rate, solana_program::program_error::ProgramError>;
    let mut _17: &math::rate::Rate;
    let _18: math::rate::Rate;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::rate::Rate>;
    let mut _20: std::result::Result<math::rate::Rate, solana_program::program_error::ProgramError>;
    let mut _21: math::rate::Rate;
    let mut _22: math::rate::Rate;
    let mut _23: isize;
    let mut _25: !;
    let mut _26: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _28: u64;
    let mut _29: isize;
    let mut _31: !;
    let mut _32: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _34: math::decimal::Decimal;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _36: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _37: math::decimal::Decimal;
    let mut _38: math::rate::Rate;
    let mut _39: isize;
    let mut _41: !;
    let mut _42: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _46: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _47: math::decimal::Decimal;
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _49: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _50: math::decimal::Decimal;
    let mut _51: math::rate::Rate;
    let mut _52: isize;
    let mut _54: !;
    let mut _55: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _57: math::decimal::Decimal;
    let mut _58: isize;
    let mut _60: !;
    let mut _61: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _63: math::decimal::Decimal;
    let mut _64: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _65: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _66: math::decimal::Decimal;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _68: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _69: math::decimal::Decimal;
    let mut _70: math::rate::Rate;
    let mut _71: isize;
    let mut _73: !;
    let mut _74: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _76: math::decimal::Decimal;
    let mut _77: isize;
    let mut _79: !;
    let mut _80: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _82: math::decimal::Decimal;
    let mut _83: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _84: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _85: math::decimal::Decimal;
    let mut _86: math::decimal::Decimal;
    let mut _87: isize;
    let mut _89: !;
    let mut _90: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _92: ();
    let mut _93: bool;
    let mut _94: bool;
    let mut _95: bool;
    let mut _96: isize;
    let mut _97: isize;
    let mut _98: isize;
    let mut _99: isize;
    let mut _100: isize;
    let mut _101: isize;
    let mut _102: isize;
    let mut _103: isize;
    let mut _104: isize;
    let mut _105: isize;
    let mut _106: isize;
    let mut _107: isize;
    let mut _108: isize;
    let mut _109: isize;
    let mut _110: isize;
    let mut _111: isize;
    let mut _112: isize;
    let mut _113: isize;
    let mut _114: isize;
    let mut _115: isize;
    let mut _116: isize;
    let mut _117: isize;
    let mut _118: isize;
    let mut _119: isize;
    let mut _120: isize;
    let mut _121: isize;
    let mut _122: isize;
    let mut _123: isize;
    let mut _124: isize;
    let mut _125: isize;
    let mut _126: isize;
    let mut _127: isize;
    let mut _128: isize;
    let mut _129: isize;
    let mut _130: isize;
    let mut _131: isize;
    let mut _132: isize;
    let mut _133: isize;
    let mut _134: isize;
    let mut _135: isize;
    let mut _136: isize;
    let mut _137: isize;
    let mut _138: isize;
    let mut _139: isize;
    let mut _140: isize;
    scope 1 {
        debug slot_interest_rate => _5;
        let _14: math::rate::Rate;
        let _24: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _27: math::rate::Rate;
        let _30: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _33: math::rate::Rate;
        scope 6 {
            debug compounded_interest_rate => _14;
            let _40: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
            let _43: math::decimal::Decimal;
            let _44: math::decimal::Decimal;
            let _53: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
            let _56: math::decimal::Decimal;
            let _59: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
            let _62: math::decimal::Decimal;
            scope 15 {
                debug residual => _40;
                scope 16 {
                }
            }
            scope 17 {
                debug val => _43;
                scope 18 {
                }
            }
            scope 19 {
                debug net_new_debt => _44;
                let _72: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                let _75: math::decimal::Decimal;
                let _78: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                let _81: math::decimal::Decimal;
                let _88: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                let _91: math::decimal::Decimal;
                scope 28 {
                    debug residual => _72;
                    scope 29 {
                    }
                }
                scope 30 {
                    debug val => _75;
                    scope 31 {
                    }
                }
                scope 32 {
                    debug residual => _78;
                    scope 33 {
                    }
                }
                scope 34 {
                    debug val => _81;
                    scope 35 {
                    }
                }
                scope 36 {
                    debug residual => _88;
                    scope 37 {
                    }
                }
                scope 38 {
                    debug val => _91;
                    scope 39 {
                    }
                }
            }
            scope 20 {
                debug residual => _53;
                scope 21 {
                }
            }
            scope 22 {
                debug val => _56;
                scope 23 {
                }
            }
            scope 24 {
                debug residual => _59;
                scope 25 {
                }
            }
            scope 26 {
                debug val => _62;
                scope 27 {
                }
            }
        }
        scope 7 {
            debug residual => _24;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _27;
            scope 10 {
            }
        }
        scope 11 {
            debug residual => _30;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _33;
            scope 14 {
            }
        }
    }
    scope 2 {
        debug residual => _10;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _13;
        scope 5 {
        }
    }

    bb0: {
        _95 = const false;
        _94 = const false;
        _93 = const false;
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _2;
        _7 = <rate::Rate as common::TryDiv<u64>>::try_div(move _8, const _) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        _6 = <Result<rate::Rate, ProgramError> as Try>::branch(move _7) -> [return: bb2, unwind: bb55];
    }

    bb2: {
        StorageDead(_7);
        _9 = discriminant(_6);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_6 as Continue).0: math::rate::Rate);
        _5 = _13;
        StorageDead(_13);
        _96 = discriminant(_6);
        StorageDead(_6);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = rate::Rate::one() -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_12);
        _12 = move _10;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _12) -> [return: bb6, unwind: bb64];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        _130 = discriminant(_6);
        StorageDead(_6);
        goto -> bb53;
    }

    bb7: {
        StorageLive(_22);
        _22 = _5;
        _20 = <rate::Rate as common::TryAdd>::try_add(move _21, move _22) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_22);
        StorageDead(_21);
        _19 = <Result<rate::Rate, ProgramError> as Try>::branch(move _20) -> [return: bb9, unwind: bb55];
    }

    bb9: {
        _95 = const true;
        StorageDead(_20);
        _23 = discriminant(_19);
        switchInt(move _23) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_27);
        _27 = ((_19 as Continue).0: math::rate::Rate);
        _18 = _27;
        StorageDead(_27);
        _17 = &_18;
        StorageLive(_28);
        _28 = _3;
        _16 = rate::Rate::try_pow(move _17, move _28) -> [return: bb13, unwind: bb63];
    }

    bb11: {
        StorageLive(_24);
        _24 = move ((_19 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_26);
        _26 = move _24;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _26) -> [return: bb12, unwind: bb63];
    }

    bb12: {
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb51;
    }

    bb13: {
        StorageDead(_28);
        StorageDead(_17);
        _15 = <Result<rate::Rate, ProgramError> as Try>::branch(move _16) -> [return: bb14, unwind: bb63];
    }

    bb14: {
        StorageDead(_16);
        _29 = discriminant(_15);
        switchInt(move _29) -> [0: bb15, 1: bb16, otherwise: bb4];
    }

    bb15: {
        StorageLive(_33);
        _33 = ((_15 as Continue).0: math::rate::Rate);
        _14 = _33;
        StorageDead(_33);
        _98 = discriminant(_15);
        _100 = discriminant(_19);
        _95 = const false;
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_15);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = ((*_1).7: math::decimal::Decimal);
        StorageLive(_38);
        _38 = _14;
        _36 = <decimal::Decimal as common::TryMul<rate::Rate>>::try_mul(move _37, move _38) -> [return: bb18, unwind continue];
    }

    bb16: {
        StorageLive(_30);
        _30 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_32);
        _32 = move _30;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _32) -> [return: bb17, unwind: bb62];
    }

    bb17: {
        StorageDead(_32);
        StorageDead(_30);
        _126 = discriminant(_15);
        goto -> bb51;
    }

    bb18: {
        StorageDead(_38);
        StorageDead(_37);
        _35 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _36) -> [return: bb19, unwind: bb55];
    }

    bb19: {
        StorageDead(_36);
        _39 = discriminant(_35);
        switchInt(move _39) -> [0: bb20, 1: bb21, otherwise: bb4];
    }

    bb20: {
        StorageLive(_43);
        _43 = ((_35 as Continue).0: math::decimal::Decimal);
        _34 = _43;
        StorageDead(_43);
        ((*_1).7: math::decimal::Decimal) = move _34;
        StorageDead(_34);
        _102 = discriminant(_35);
        StorageDead(_35);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = ((*_1).6: math::decimal::Decimal);
        StorageLive(_51);
        _51 = _14;
        _49 = <decimal::Decimal as common::TryMul<rate::Rate>>::try_mul(move _50, move _51) -> [return: bb23, unwind continue];
    }

    bb21: {
        StorageLive(_40);
        _40 = move ((_35 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_42);
        _42 = move _40;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _42) -> [return: bb22, unwind: bb61];
    }

    bb22: {
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_34);
        _124 = discriminant(_35);
        StorageDead(_35);
        goto -> bb52;
    }

    bb23: {
        StorageDead(_51);
        StorageDead(_50);
        _48 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _49) -> [return: bb24, unwind: bb55];
    }

    bb24: {
        _94 = const true;
        StorageDead(_49);
        _52 = discriminant(_48);
        switchInt(move _52) -> [0: bb25, 1: bb26, otherwise: bb4];
    }

    bb25: {
        StorageLive(_56);
        _56 = ((_48 as Continue).0: math::decimal::Decimal);
        _47 = _56;
        StorageDead(_56);
        StorageLive(_57);
        _57 = ((*_1).6: math::decimal::Decimal);
        _46 = <decimal::Decimal as common::TrySub>::try_sub(move _47, move _57) -> [return: bb28, unwind: bb60];
    }

    bb26: {
        StorageLive(_53);
        _53 = move ((_48 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_55);
        _55 = move _53;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _55) -> [return: bb27, unwind: bb60];
    }

    bb27: {
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_47);
        StorageDead(_46);
        goto -> bb49;
    }

    bb28: {
        StorageDead(_57);
        StorageDead(_47);
        _45 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _46) -> [return: bb29, unwind: bb60];
    }

    bb29: {
        StorageDead(_46);
        _58 = discriminant(_45);
        switchInt(move _58) -> [0: bb30, 1: bb31, otherwise: bb4];
    }

    bb30: {
        StorageLive(_62);
        _62 = ((_45 as Continue).0: math::decimal::Decimal);
        _44 = _62;
        StorageDead(_62);
        _104 = discriminant(_45);
        _106 = discriminant(_48);
        _94 = const false;
        StorageDead(_48);
        StorageDead(_45);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = _44;
        StorageLive(_70);
        _70 = _4;
        _68 = <decimal::Decimal as common::TryMul<rate::Rate>>::try_mul(move _69, move _70) -> [return: bb33, unwind continue];
    }

    bb31: {
        StorageLive(_59);
        _59 = move ((_45 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_61);
        _61 = move _59;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _61) -> [return: bb32, unwind: bb59];
    }

    bb32: {
        StorageDead(_61);
        StorageDead(_59);
        _120 = discriminant(_45);
        goto -> bb49;
    }

    bb33: {
        StorageDead(_70);
        StorageDead(_69);
        _67 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _68) -> [return: bb34, unwind: bb55];
    }

    bb34: {
        _93 = const true;
        StorageDead(_68);
        _71 = discriminant(_67);
        switchInt(move _71) -> [0: bb35, 1: bb36, otherwise: bb4];
    }

    bb35: {
        StorageLive(_75);
        _75 = ((_67 as Continue).0: math::decimal::Decimal);
        _66 = _75;
        StorageDead(_75);
        StorageLive(_76);
        _76 = ((*_1).8: math::decimal::Decimal);
        _65 = <decimal::Decimal as common::TryAdd>::try_add(move _66, move _76) -> [return: bb38, unwind: bb58];
    }

    bb36: {
        StorageLive(_72);
        _72 = move ((_67 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_74);
        _74 = move _72;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _74) -> [return: bb37, unwind: bb58];
    }

    bb37: {
        StorageDead(_74);
        StorageDead(_72);
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_63);
        goto -> bb48;
    }

    bb38: {
        StorageDead(_76);
        StorageDead(_66);
        _64 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _65) -> [return: bb39, unwind: bb58];
    }

    bb39: {
        StorageDead(_65);
        _77 = discriminant(_64);
        switchInt(move _77) -> [0: bb40, 1: bb41, otherwise: bb4];
    }

    bb40: {
        StorageLive(_81);
        _81 = ((_64 as Continue).0: math::decimal::Decimal);
        _63 = _81;
        StorageDead(_81);
        ((*_1).8: math::decimal::Decimal) = move _63;
        StorageDead(_63);
        _108 = discriminant(_64);
        _110 = discriminant(_67);
        _93 = const false;
        StorageDead(_67);
        StorageDead(_64);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = ((*_1).6: math::decimal::Decimal);
        StorageLive(_86);
        _86 = _44;
        _84 = <decimal::Decimal as common::TryAdd>::try_add(move _85, move _86) -> [return: bb43, unwind continue];
    }

    bb41: {
        StorageLive(_78);
        _78 = move ((_64 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_80);
        _80 = move _78;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _80) -> [return: bb42, unwind: bb57];
    }

    bb42: {
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_63);
        _116 = discriminant(_64);
        goto -> bb48;
    }

    bb43: {
        StorageDead(_86);
        StorageDead(_85);
        _83 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _84) -> [return: bb44, unwind: bb55];
    }

    bb44: {
        StorageDead(_84);
        _87 = discriminant(_83);
        switchInt(move _87) -> [0: bb45, 1: bb46, otherwise: bb4];
    }

    bb45: {
        StorageLive(_91);
        _91 = ((_83 as Continue).0: math::decimal::Decimal);
        _82 = _91;
        StorageDead(_91);
        ((*_1).6: math::decimal::Decimal) = move _82;
        StorageDead(_82);
        _112 = discriminant(_83);
        StorageDead(_83);
        StorageLive(_92);
        _92 = ();
        _0 = Result::<(), ProgramError>::Ok(move _92);
        StorageDead(_92);
        StorageDead(_44);
        StorageDead(_14);
        StorageDead(_5);
        goto -> bb54;
    }

    bb46: {
        StorageLive(_88);
        _88 = move ((_83 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_90);
        _90 = move _88;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _90) -> [return: bb47, unwind: bb56];
    }

    bb47: {
        StorageDead(_90);
        StorageDead(_88);
        StorageDead(_82);
        _114 = discriminant(_83);
        StorageDead(_83);
        goto -> bb50;
    }

    bb48: {
        _118 = discriminant(_67);
        _93 = const false;
        StorageDead(_67);
        StorageDead(_64);
        goto -> bb50;
    }

    bb49: {
        _122 = discriminant(_48);
        _94 = const false;
        StorageDead(_48);
        StorageDead(_45);
        goto -> bb50;
    }

    bb50: {
        StorageDead(_44);
        goto -> bb52;
    }

    bb51: {
        _128 = discriminant(_19);
        _95 = const false;
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_15);
        goto -> bb52;
    }

    bb52: {
        StorageDead(_14);
        goto -> bb53;
    }

    bb53: {
        StorageDead(_5);
        goto -> bb54;
    }

    bb54: {
        return;
    }

    bb55 (cleanup): {
        resume;
    }

    bb56 (cleanup): {
        _132 = discriminant(_83);
        goto -> bb55;
    }

    bb57 (cleanup): {
        _133 = discriminant(_64);
        goto -> bb58;
    }

    bb58 (cleanup): {
        _134 = discriminant(_67);
        goto -> bb55;
    }

    bb59 (cleanup): {
        _135 = discriminant(_45);
        goto -> bb60;
    }

    bb60 (cleanup): {
        _136 = discriminant(_48);
        goto -> bb55;
    }

    bb61 (cleanup): {
        _137 = discriminant(_35);
        goto -> bb55;
    }

    bb62 (cleanup): {
        _138 = discriminant(_15);
        goto -> bb63;
    }

    bb63 (cleanup): {
        _139 = discriminant(_19);
        goto -> bb55;
    }

    bb64 (cleanup): {
        _140 = discriminant(_6);
        goto -> bb55;
    }
}
