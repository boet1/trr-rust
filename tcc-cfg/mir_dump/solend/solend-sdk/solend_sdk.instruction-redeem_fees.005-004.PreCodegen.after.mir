// MIR for `redeem_fees` after PreCodegen

fn redeem_fees(_1: Pubkey, _2: Pubkey, _3: Pubkey, _4: Pubkey, _5: Pubkey) -> Instruction {
    debug program_id => _1;
    debug reserve_pubkey => _2;
    debug reserve_liquidity_fee_receiver_pubkey => _3;
    debug reserve_supply_liquidity_pubkey => _4;
    debug lending_market_pubkey => _5;
    let mut _0: solana_program::instruction::Instruction;
    let _6: solana_program::pubkey::Pubkey;
    let _7: u8;
    let mut _8: (solana_program::pubkey::Pubkey, u8);
    let mut _9: &[&[u8]];
    let mut _10: &[&[u8]; 1];
    let _11: &[&[u8]; 1];
    let _12: [&[u8]; 1];
    let mut _13: &[u8];
    let _14: &[u8];
    let _15: &[u8];
    let mut _16: &[u8; 32];
    let _17: [u8; 32];
    let mut _18: solana_program::pubkey::Pubkey;
    let mut _19: std::ops::RangeTo<usize>;
    let mut _20: &solana_program::pubkey::Pubkey;
    let _21: &solana_program::pubkey::Pubkey;
    let mut _23: std::boxed::Box<[solana_program::instruction::AccountMeta]>;
    let mut _24: std::boxed::Box<[solana_program::instruction::AccountMeta; 6]>;
    let mut _25: usize;
    let mut _26: usize;
    let mut _27: *mut u8;
    let mut _28: std::boxed::Box<[solana_program::instruction::AccountMeta; 6]>;
    let mut _29: solana_program::instruction::AccountMeta;
    let mut _30: solana_program::pubkey::Pubkey;
    let mut _31: solana_program::instruction::AccountMeta;
    let mut _32: solana_program::pubkey::Pubkey;
    let mut _33: solana_program::instruction::AccountMeta;
    let mut _34: solana_program::pubkey::Pubkey;
    let mut _35: solana_program::instruction::AccountMeta;
    let mut _36: solana_program::pubkey::Pubkey;
    let mut _37: solana_program::instruction::AccountMeta;
    let mut _38: solana_program::pubkey::Pubkey;
    let mut _39: solana_program::instruction::AccountMeta;
    let mut _40: solana_program::pubkey::Pubkey;
    let mut _41: solana_program::pubkey::Pubkey;
    let mut _42: std::vec::Vec<solana_program::instruction::AccountMeta>;
    let mut _43: std::vec::Vec<u8>;
    let mut _44: &instruction::LendingInstruction;
    let _45: instruction::LendingInstruction;
    let mut _47: *const [solana_program::instruction::AccountMeta; 6];
    scope 1 {
        debug lending_market_authority_pubkey => _6;
        debug _bump_seed => _7;
        let _22: std::vec::Vec<solana_program::instruction::AccountMeta>;
        let mut _48: *const ();
        let mut _49: usize;
        let mut _50: usize;
        let mut _51: usize;
        let mut _52: usize;
        let mut _53: bool;
        scope 2 {
            debug accounts => _22;
            let mut _46: &instruction::LendingInstruction;
        }
        scope 3 {
        }
    }

    bb0: {
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = _5;
        _17 = Pubkey::to_bytes(move _18) -> [return: bb1, unwind continue];
    }

    bb1: {
        _16 = &_17;
        StorageDead(_18);
        StorageLive(_19);
        _19 = RangeTo::<usize> { end: const _ };
        _15 = <[u8; 32] as Index<RangeTo<usize>>>::index(move _16, move _19) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_19);
        StorageDead(_16);
        _14 = &(*_15);
        _13 = &(*_14);
        _12 = [move _13];
        StorageDead(_13);
        _11 = &_12;
        _10 = &(*_11);
        _9 = move _10 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_10);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &_1;
        _20 = &(*_21);
        _8 = Pubkey::find_program_address(move _9, move _20) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_20);
        StorageDead(_9);
        StorageLive(_6);
        _6 = (_8.0: solana_program::pubkey::Pubkey);
        StorageLive(_7);
        _7 = (_8.1: u8);
        StorageDead(_21);
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_8);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _25 = SizeOf([solana_program::instruction::AccountMeta; 6]);
        _26 = AlignOf([solana_program::instruction::AccountMeta; 6]);
        _27 = alloc::alloc::exchange_malloc(move _25, move _26) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageLive(_28);
        _28 = ShallowInitBox(move _27, [solana_program::instruction::AccountMeta; 6]);
        StorageLive(_29);
        StorageLive(_30);
        _30 = _2;
        _29 = AccountMeta::new(move _30, const false) -> [return: bb5, unwind: bb15];
    }

    bb5: {
        StorageDead(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = _3;
        _31 = AccountMeta::new(move _32, const false) -> [return: bb6, unwind: bb15];
    }

    bb6: {
        StorageDead(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = _4;
        _33 = AccountMeta::new(move _34, const false) -> [return: bb7, unwind: bb15];
    }

    bb7: {
        StorageDead(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = _5;
        _35 = AccountMeta::new_readonly(move _36, const false) -> [return: bb8, unwind: bb15];
    }

    bb8: {
        StorageDead(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = _6;
        _37 = AccountMeta::new_readonly(move _38, const false) -> [return: bb9, unwind: bb15];
    }

    bb9: {
        StorageDead(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = spl_token::id() -> [return: bb10, unwind: bb15];
    }

    bb10: {
        _39 = AccountMeta::new_readonly(move _40, const false) -> [return: bb11, unwind: bb15];
    }

    bb11: {
        StorageDead(_40);
        _47 = (((_28.0: std::ptr::Unique<[solana_program::instruction::AccountMeta; 6]>).0: std::ptr::NonNull<[solana_program::instruction::AccountMeta; 6]>).0: *const [solana_program::instruction::AccountMeta; 6]);
        _48 = _47 as *const () (PtrToPtr);
        _49 = _48 as usize (Transmute);
        _50 = AlignOf([solana_program::instruction::AccountMeta; 6]);
        _51 = Sub(_50, const 1_usize);
        _52 = BitAnd(_49, _51);
        _53 = Eq(_52, const 0_usize);
        assert(_53, "misaligned pointer dereference: address must be a multiple of {} but is {}", _50, _49) -> [success: bb17, unwind unreachable];
    }

    bb12: {
        StorageDead(_23);
        StorageLive(_41);
        _41 = _1;
        StorageLive(_42);
        _42 = move _22;
        StorageLive(_43);
        StorageLive(_44);
        _46 = const _;
        _44 = &(*_46);
        _43 = LendingInstruction::pack(move _44) -> [return: bb13, unwind: bb14];
    }

    bb13: {
        StorageDead(_44);
        _0 = Instruction { program_id: move _41, accounts: move _42, data: move _43 };
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_22);
        StorageDead(_7);
        StorageDead(_6);
        return;
    }

    bb14 (cleanup): {
        drop(_42) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        drop(_28) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        resume;
    }

    bb17: {
        (*_47) = [move _29, move _31, move _33, move _35, move _37, move _39];
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_29);
        _24 = move _28;
        _23 = move _24 as std::boxed::Box<[solana_program::instruction::AccountMeta]> (PointerCoercion(Unsize));
        StorageDead(_28);
        StorageDead(_24);
        _22 = std::slice::<impl [AccountMeta]>::into_vec::<std::alloc::Global>(move _23) -> [return: bb12, unwind: bb16];
    }
}
