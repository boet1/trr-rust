// MIR for `reserve::<impl at token-lending\sdk\src\state\reserve.rs:65:1: 65:13>::market_value` before PreCodegen

fn reserve::<impl at token-lending\sdk\src\state\reserve.rs:65:1: 65:13>::market_value(_1: &reserve::Reserve, _2: decimal::Decimal) -> Result<decimal::Decimal, ProgramError> {
    debug self => _1;
    debug liquidity_amount => _2;
    let mut _0: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _3: math::decimal::Decimal;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _5: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _6: math::decimal::Decimal;
    let mut _7: math::decimal::Decimal;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _12: math::decimal::Decimal;
    let mut _13: math::decimal::Decimal;
    let mut _14: u128;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::LendingError>, u128>;
    let mut _16: std::result::Result<u128, error::LendingError>;
    let mut _17: std::option::Option<u128>;
    let mut _18: u32;
    let mut _19: u8;
    let mut _20: error::LendingError;
    let mut _21: isize;
    let _22: std::result::Result<std::convert::Infallible, error::LendingError>;
    let mut _23: !;
    let mut _24: std::result::Result<std::convert::Infallible, error::LendingError>;
    let _25: u128;
    let mut _26: bool;
    let mut _27: isize;
    let mut _28: isize;
    let mut _29: isize;
    let mut _30: isize;
    let mut _31: isize;
    scope 1 {
        debug residual => _9;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _12;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _22;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _25;
        scope 8 {
        }
    }

    bb0: {
        _26 = const false;
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = (((*_1).3: state::reserve::ReserveLiquidity).9: math::decimal::Decimal);
        StorageLive(_7);
        _7 = _2;
        _5 = <decimal::Decimal as common::TryMul<decimal::Decimal>>::try_mul(move _6, move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        StorageDead(_6);
        _4 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _5) -> [return: bb2, unwind: bb16];
    }

    bb2: {
        _26 = const true;
        StorageDead(_5);
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_4 as Continue).0: math::decimal::Decimal);
        _3 = _12;
        StorageDead(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = (((*_1).3: state::reserve::ReserveLiquidity).1: u8);
        _18 = move _19 as u32 (IntToInt);
        StorageDead(_19);
        _17 = core::num::<impl u128>::checked_pow(const 10_u128, move _18) -> [return: bb7, unwind: bb18];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <Result<decimal::Decimal, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _11) -> [return: bb6, unwind: bb18];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_3);
        goto -> bb17;
    }

    bb7: {
        StorageDead(_18);
        StorageLive(_20);
        _20 = LendingError::MathOverflow;
        _16 = Option::<u128>::ok_or::<LendingError>(move _17, move _20) -> [return: bb8, unwind: bb18];
    }

    bb8: {
        StorageDead(_20);
        StorageDead(_17);
        _15 = <Result<u128, LendingError> as Try>::branch(move _16) -> [return: bb9, unwind: bb18];
    }

    bb9: {
        StorageDead(_16);
        _21 = discriminant(_15);
        switchInt(move _21) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_25);
        _25 = ((_15 as Continue).0: u128);
        _14 = _25;
        StorageDead(_25);
        _13 = <decimal::Decimal as From<u128>>::from(move _14) -> [return: bb13, unwind: bb18];
    }

    bb11: {
        StorageLive(_22);
        _22 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::LendingError>);
        StorageLive(_24);
        _24 = move _22;
        _0 = <Result<decimal::Decimal, ProgramError> as FromResidual<Result<Infallible, LendingError>>>::from_residual(move _24) -> [return: bb12, unwind: bb18];
    }

    bb12: {
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_3);
        StorageDead(_15);
        goto -> bb17;
    }

    bb13: {
        StorageDead(_14);
        _0 = <decimal::Decimal as common::TryDiv<decimal::Decimal>>::try_div(move _3, move _13) -> [return: bb14, unwind: bb18];
    }

    bb14: {
        StorageDead(_13);
        StorageDead(_3);
        StorageDead(_15);
        _27 = discriminant(_4);
        _26 = const false;
        StorageDead(_4);
        goto -> bb15;
    }

    bb15: {
        return;
    }

    bb16 (cleanup): {
        resume;
    }

    bb17: {
        _29 = discriminant(_4);
        _26 = const false;
        StorageDead(_4);
        goto -> bb15;
    }

    bb18 (cleanup): {
        _31 = discriminant(_4);
        goto -> bb16;
    }
}
