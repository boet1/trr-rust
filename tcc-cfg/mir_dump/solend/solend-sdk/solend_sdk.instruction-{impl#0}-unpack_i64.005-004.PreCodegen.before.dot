digraph Mir_0_52 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn LendingInstruction::unpack_i64(_1: &amp;ReErased [u8]) -&gt; std::result::Result&lt;(i64, &amp;ReErased [u8]), solana_program::program_error::ProgramError&gt;<br align="left"/>let _2: ();<br align="left"/>let mut _3: bool;<br align="left"/>let mut _4: usize;<br align="left"/>let mut _5: &amp;ReErased [u8];<br align="left"/>let mut _6: !;<br align="left"/>let _7: ();<br align="left"/>let mut _8: &amp;ReErased str;<br align="left"/>let _9: &amp;ReErased str;<br align="left"/>let mut _10: solana_program::program_error::ProgramError;<br align="left"/>let mut _11: error::LendingError;<br align="left"/>let _12: &amp;ReErased [u8];<br align="left"/>let _13: &amp;ReErased [u8];<br align="left"/>let mut _14: (&amp;ReErased [u8], &amp;ReErased [u8]);<br align="left"/>let mut _15: &amp;ReErased [u8];<br align="left"/>let _16: i64;<br align="left"/>let mut _17: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::LendingError&gt;, i64&gt;;<br align="left"/>let mut _18: std::result::Result&lt;i64, error::LendingError&gt;;<br align="left"/>let mut _19: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _20: std::option::Option&lt;[u8; 8_usize]&gt;;<br align="left"/>let mut _21: std::option::Option&lt;&amp;ReErased [u8]&gt;;<br align="left"/>let mut _22: &amp;ReErased [u8];<br align="left"/>let mut _23: std::ops::RangeTo&lt;usize&gt;;<br align="left"/>let mut _24: Closure(DefId(0:53 ~ solend_sdk[296d]::instruction::{impl#0}::unpack_i64::{closure#0}), [i32, Binder(extern &quot;RustCall&quot; fn((&amp;ReErased [u8],)) -&gt; std::option::Option&lt;[u8; 8_usize]&gt;, []), ()]);<br align="left"/>let mut _25: error::LendingError;<br align="left"/>let mut _26: isize;<br align="left"/>let _27: std::result::Result&lt;std::convert::Infallible, error::LendingError&gt;;<br align="left"/>let mut _28: !;<br align="left"/>let mut _29: std::result::Result&lt;std::convert::Infallible, error::LendingError&gt;;<br align="left"/>let _30: i64;<br align="left"/>let mut _31: (i64, &amp;ReErased [u8]);<br align="left"/>let mut _32: i64;<br align="left"/>let mut _33: &amp;ReErased [u8];<br align="left"/>debug input =&gt; _1;<br align="left"/>debug bytes =&gt; _12;<br align="left"/>debug rest =&gt; _13;<br align="left"/>debug value =&gt; _16;<br align="left"/>debug residual =&gt; _27;<br align="left"/>debug val =&gt; _30;<br align="left"/>>;
    bb0__0_52 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = &amp;(*_1)<br/></td></tr><tr><td align="left">_4 = core::slice::&lt;impl [u8]&gt;::len(move _5)</td></tr></table>>];
    bb1__0_52 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>_3 = Lt(move _4, const 8_usize)<br/></td></tr><tr><td align="left">switchInt(move _3)</td></tr></table>>];
    bb2__0_52 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = const &quot;i64 cannot be unpacked&quot;<br/>_8 = &amp;(*_9)<br/></td></tr><tr><td align="left">_7 = solana_program::log::sol_log(move _8)</td></tr></table>>];
    bb3__0_52 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageDead(_9)<br/>StorageDead(_7)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>_11 = LendingError::InstructionUnpackError<br/></td></tr><tr><td align="left">_10 = &lt;LendingError as Into&lt;ProgramError&gt;&gt;::into(move _11)</td></tr></table>>];
    bb4__0_52 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>_0 = Result::&lt;(i64, &amp;[u8]), ProgramError&gt;::Err(move _10)<br/>StorageDead(_10)<br/>StorageDead(_3)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb5__0_52 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>_2 = const ()<br/>StorageDead(_3)<br/>StorageDead(_2)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>_15 = &amp;(*_1)<br/></td></tr><tr><td align="left">_14 = core::slice::&lt;impl [u8]&gt;::split_at(move _15, const 8_usize)</td></tr></table>>];
    bb6__0_52 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageLive(_12)<br/>_12 = (_14.0: &amp;[u8])<br/>StorageLive(_13)<br/>_13 = (_14.1: &amp;[u8])<br/>StorageDead(_14)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>_22 = &amp;(*_12)<br/>StorageLive(_23)<br/>_23 = RangeTo::&lt;usize&gt; { end: const 8_usize }<br/></td></tr><tr><td align="left">_21 = core::slice::&lt;impl [u8]&gt;::get::&lt;RangeTo&lt;usize&gt;&gt;(move _22, move _23)</td></tr></table>>];
    bb7__0_52 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageDead(_22)<br/>StorageLive(_24)<br/>_24 = {closure@token-lending\sdk\src\instruction.rs:818:23: 818:30}<br/></td></tr><tr><td align="left">_20 = Option::&lt;&amp;[u8]&gt;::and_then::&lt;[u8; 8], {closure@token-lending\sdk\src\instruction.rs:818:23: 818:30}&gt;(move _21, move _24)</td></tr></table>>];
    bb8__0_52 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/>StorageDead(_21)<br/></td></tr><tr><td align="left">_19 = Option::&lt;[u8; 8]&gt;::map::&lt;i64, fn([u8; core::::num::{impl#3}::from_le_bytes::{constant#0}]) -&gt; i64 {core::num::&lt;impl i64&gt;::from_le_bytes}&gt;(move _20, core::num::&lt;impl i64&gt;::from_le_bytes)</td></tr></table>>];
    bb9__0_52 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageLive(_25)<br/>_25 = LendingError::InstructionUnpackError<br/></td></tr><tr><td align="left">_18 = Option::&lt;i64&gt;::ok_or::&lt;LendingError&gt;(move _19, move _25)</td></tr></table>>];
    bb10__0_52 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">_17 = &lt;Result&lt;i64, LendingError&gt; as Try&gt;::branch(move _18)</td></tr></table>>];
    bb11__0_52 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>_26 = discriminant(_17)<br/></td></tr><tr><td align="left">switchInt(move _26)</td></tr></table>>];
    bb12__0_52 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageLive(_30)<br/>_30 = ((_17 as Continue).0: i64)<br/>_16 = _30<br/>StorageDead(_30)<br/>StorageDead(_17)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>_32 = _16<br/>StorageLive(_33)<br/>_33 = &amp;(*_13)<br/>_31 = (move _32, move _33)<br/>StorageDead(_33)<br/>StorageDead(_32)<br/>_0 = Result::&lt;(i64, &amp;[u8]), ProgramError&gt;::Ok(move _31)<br/>StorageDead(_31)<br/>StorageDead(_16)<br/>StorageDead(_13)<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_52 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb14__0_52 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageLive(_27)<br/>_27 = move ((_17 as Break).0: std::result::Result&lt;std::convert::Infallible, error::LendingError&gt;)<br/>StorageLive(_29)<br/>_29 = move _27<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;(i64, &amp;[u8]), ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, LendingError&gt;&gt;&gt;::from_residual(move _29)</td></tr></table>>];
    bb15__0_52 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>StorageDead(_27)<br/>StorageDead(_17)<br/>StorageDead(_16)<br/>StorageDead(_13)<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb16__0_52 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_52 -> bb1__0_52 [label="return"];
    bb1__0_52 -> bb5__0_52 [label="0"];
    bb1__0_52 -> bb2__0_52 [label="otherwise"];
    bb2__0_52 -> bb3__0_52 [label="return"];
    bb3__0_52 -> bb4__0_52 [label="return"];
    bb4__0_52 -> bb16__0_52 [label=""];
    bb5__0_52 -> bb6__0_52 [label="return"];
    bb6__0_52 -> bb7__0_52 [label="return"];
    bb7__0_52 -> bb8__0_52 [label="return"];
    bb8__0_52 -> bb9__0_52 [label="return"];
    bb9__0_52 -> bb10__0_52 [label="return"];
    bb10__0_52 -> bb11__0_52 [label="return"];
    bb11__0_52 -> bb12__0_52 [label="0"];
    bb11__0_52 -> bb14__0_52 [label="1"];
    bb11__0_52 -> bb13__0_52 [label="otherwise"];
    bb12__0_52 -> bb16__0_52 [label=""];
    bb14__0_52 -> bb15__0_52 [label="return"];
    bb15__0_52 -> bb16__0_52 [label=""];
}
