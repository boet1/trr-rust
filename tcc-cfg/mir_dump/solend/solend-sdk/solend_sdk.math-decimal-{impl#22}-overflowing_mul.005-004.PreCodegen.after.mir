// MIR for `decimal::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:587:3: 587:13>::overflowing_mul` after PreCodegen

fn decimal::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:587:3: 587:13>::overflowing_mul(_1: U192, _2: U192) -> (U192, bool) {
    debug self => _1;
    debug other => _2;
    let mut _0: (math::decimal::U192, bool);
    let _3: [u64; 6];
    let _7: ();
    let _8: ();
    let mut _9: bool;
    let _12: usize;
    let mut _13: usize;
    let mut _14: bool;
    let _15: ();
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:270:67: 270:73};
    let _19: {closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:270:67: 270:73};
    let mut _20: (u64, u64);
    let mut _21: u64;
    let _22: usize;
    let mut _23: usize;
    let mut _24: bool;
    let mut _25: u64;
    let _27: usize;
    let mut _28: usize;
    let mut _29: bool;
    let mut _32: (u64, u64);
    let mut _33: u128;
    let mut _34: u128;
    let mut _35: u64;
    let mut _36: u128;
    let mut _37: u64;
    let mut _38: (u128, bool);
    let _41: usize;
    let mut _42: (usize, bool);
    let mut _43: usize;
    let mut _44: bool;
    let mut _47: (u64, bool);
    let mut _48: u64;
    let mut _49: u64;
    let mut _50: u64;
    let mut _51: u64;
    let _53: usize;
    let mut _54: usize;
    let mut _55: (usize, bool);
    let mut _56: (usize, bool);
    let mut _57: usize;
    let mut _58: bool;
    let mut _60: u64;
    let mut _61: u64;
    let mut _62: bool;
    let mut _63: (u64, bool);
    let mut _66: (u64, bool);
    let mut _67: u64;
    let mut _68: u64;
    let mut _71: (u64, bool);
    let mut _72: u64;
    let mut _73: u64;
    let mut _74: u64;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: bool;
    let _78: ();
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:270:67: 270:73};
    let _82: {closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:270:67: 270:73};
    let mut _83: (u64, u64);
    let mut _84: u64;
    let _85: usize;
    let mut _86: usize;
    let mut _87: bool;
    let mut _88: u64;
    let _90: usize;
    let mut _91: usize;
    let mut _92: bool;
    let mut _95: (u64, u64);
    let mut _96: u128;
    let mut _97: u128;
    let mut _98: u64;
    let mut _99: u128;
    let mut _100: u64;
    let mut _101: (u128, bool);
    let _104: usize;
    let mut _105: (usize, bool);
    let mut _106: usize;
    let mut _107: bool;
    let mut _110: (u64, bool);
    let mut _111: u64;
    let mut _112: u64;
    let mut _113: u64;
    let mut _114: u64;
    let _116: usize;
    let mut _117: usize;
    let mut _118: (usize, bool);
    let mut _119: (usize, bool);
    let mut _120: usize;
    let mut _121: bool;
    let mut _123: u64;
    let mut _124: u64;
    let mut _125: bool;
    let mut _126: (u64, bool);
    let mut _129: (u64, bool);
    let mut _130: u64;
    let mut _131: u64;
    let mut _134: (u64, bool);
    let mut _135: u64;
    let mut _136: u64;
    let mut _137: u64;
    let mut _138: bool;
    let mut _139: bool;
    let mut _140: bool;
    let _141: ();
    let mut _142: bool;
    let mut _143: bool;
    let mut _144: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:270:67: 270:73};
    let _145: {closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:270:67: 270:73};
    let mut _146: (u64, u64);
    let mut _147: u64;
    let _148: usize;
    let mut _149: usize;
    let mut _150: bool;
    let mut _151: u64;
    let _153: usize;
    let mut _154: usize;
    let mut _155: bool;
    let mut _158: (u64, u64);
    let mut _159: u128;
    let mut _160: u128;
    let mut _161: u64;
    let mut _162: u128;
    let mut _163: u64;
    let mut _164: (u128, bool);
    let _167: usize;
    let mut _168: (usize, bool);
    let mut _169: usize;
    let mut _170: bool;
    let mut _173: (u64, bool);
    let mut _174: u64;
    let mut _175: u64;
    let mut _176: u64;
    let mut _177: u64;
    let _179: usize;
    let mut _180: usize;
    let mut _181: (usize, bool);
    let mut _182: (usize, bool);
    let mut _183: usize;
    let mut _184: bool;
    let mut _186: u64;
    let mut _187: u64;
    let mut _188: bool;
    let mut _189: (u64, bool);
    let mut _192: (u64, bool);
    let mut _193: u64;
    let mut _194: u64;
    let mut _197: (u64, bool);
    let mut _198: u64;
    let mut _199: u64;
    let mut _200: u64;
    let mut _201: bool;
    let mut _202: bool;
    let mut _203: bool;
    let _204: ();
    let mut _205: bool;
    let _208: usize;
    let mut _209: usize;
    let mut _210: bool;
    let _211: ();
    let mut _212: bool;
    let mut _213: bool;
    let mut _214: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:270:67: 270:73};
    let _215: {closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:270:67: 270:73};
    let mut _216: (u64, u64);
    let mut _217: u64;
    let _218: usize;
    let mut _219: usize;
    let mut _220: bool;
    let mut _221: u64;
    let _223: usize;
    let mut _224: usize;
    let mut _225: bool;
    let mut _228: (u64, u64);
    let mut _229: u128;
    let mut _230: u128;
    let mut _231: u64;
    let mut _232: u128;
    let mut _233: u64;
    let mut _234: (u128, bool);
    let _237: usize;
    let mut _238: (usize, bool);
    let mut _239: usize;
    let mut _240: bool;
    let mut _243: (u64, bool);
    let mut _244: u64;
    let mut _245: u64;
    let mut _246: u64;
    let mut _247: u64;
    let _249: usize;
    let mut _250: usize;
    let mut _251: (usize, bool);
    let mut _252: (usize, bool);
    let mut _253: usize;
    let mut _254: bool;
    let mut _256: u64;
    let mut _257: u64;
    let mut _258: bool;
    let mut _259: (u64, bool);
    let mut _262: (u64, bool);
    let mut _263: u64;
    let mut _264: u64;
    let mut _267: (u64, bool);
    let mut _268: u64;
    let mut _269: u64;
    let mut _270: u64;
    let mut _271: bool;
    let mut _272: bool;
    let mut _273: bool;
    let _274: ();
    let mut _275: bool;
    let mut _276: bool;
    let mut _277: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:270:67: 270:73};
    let _278: {closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:270:67: 270:73};
    let mut _279: (u64, u64);
    let mut _280: u64;
    let _281: usize;
    let mut _282: usize;
    let mut _283: bool;
    let mut _284: u64;
    let _286: usize;
    let mut _287: usize;
    let mut _288: bool;
    let mut _291: (u64, u64);
    let mut _292: u128;
    let mut _293: u128;
    let mut _294: u64;
    let mut _295: u128;
    let mut _296: u64;
    let mut _297: (u128, bool);
    let _300: usize;
    let mut _301: (usize, bool);
    let mut _302: usize;
    let mut _303: bool;
    let mut _306: (u64, bool);
    let mut _307: u64;
    let mut _308: u64;
    let mut _309: u64;
    let mut _310: u64;
    let _312: usize;
    let mut _313: usize;
    let mut _314: (usize, bool);
    let mut _315: (usize, bool);
    let mut _316: usize;
    let mut _317: bool;
    let mut _319: u64;
    let mut _320: u64;
    let mut _321: bool;
    let mut _322: (u64, bool);
    let mut _325: (u64, bool);
    let mut _326: u64;
    let mut _327: u64;
    let mut _330: (u64, bool);
    let mut _331: u64;
    let mut _332: u64;
    let mut _333: u64;
    let mut _334: bool;
    let mut _335: bool;
    let mut _336: bool;
    let _337: ();
    let mut _338: bool;
    let mut _339: bool;
    let mut _340: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:270:67: 270:73};
    let _341: {closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:270:67: 270:73};
    let mut _342: (u64, u64);
    let mut _343: u64;
    let _344: usize;
    let mut _345: usize;
    let mut _346: bool;
    let mut _347: u64;
    let _349: usize;
    let mut _350: usize;
    let mut _351: bool;
    let mut _354: (u64, u64);
    let mut _355: u128;
    let mut _356: u128;
    let mut _357: u64;
    let mut _358: u128;
    let mut _359: u64;
    let mut _360: (u128, bool);
    let _363: usize;
    let mut _364: (usize, bool);
    let mut _365: usize;
    let mut _366: bool;
    let mut _369: (u64, bool);
    let mut _370: u64;
    let mut _371: u64;
    let mut _372: u64;
    let mut _373: u64;
    let _375: usize;
    let mut _376: usize;
    let mut _377: (usize, bool);
    let mut _378: (usize, bool);
    let mut _379: usize;
    let mut _380: bool;
    let mut _382: u64;
    let mut _383: u64;
    let mut _384: bool;
    let mut _385: (u64, bool);
    let mut _388: (u64, bool);
    let mut _389: u64;
    let mut _390: u64;
    let mut _393: (u64, bool);
    let mut _394: u64;
    let mut _395: u64;
    let mut _396: u64;
    let mut _397: bool;
    let mut _398: bool;
    let mut _399: bool;
    let _400: ();
    let mut _401: bool;
    let _404: usize;
    let mut _405: usize;
    let mut _406: bool;
    let _407: ();
    let mut _408: bool;
    let mut _409: bool;
    let mut _410: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:270:67: 270:73};
    let _411: {closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:270:67: 270:73};
    let mut _412: (u64, u64);
    let mut _413: u64;
    let _414: usize;
    let mut _415: usize;
    let mut _416: bool;
    let mut _417: u64;
    let _419: usize;
    let mut _420: usize;
    let mut _421: bool;
    let mut _424: (u64, u64);
    let mut _425: u128;
    let mut _426: u128;
    let mut _427: u64;
    let mut _428: u128;
    let mut _429: u64;
    let mut _430: (u128, bool);
    let _433: usize;
    let mut _434: (usize, bool);
    let mut _435: usize;
    let mut _436: bool;
    let mut _439: (u64, bool);
    let mut _440: u64;
    let mut _441: u64;
    let mut _442: u64;
    let mut _443: u64;
    let _445: usize;
    let mut _446: usize;
    let mut _447: (usize, bool);
    let mut _448: (usize, bool);
    let mut _449: usize;
    let mut _450: bool;
    let mut _452: u64;
    let mut _453: u64;
    let mut _454: bool;
    let mut _455: (u64, bool);
    let mut _458: (u64, bool);
    let mut _459: u64;
    let mut _460: u64;
    let mut _463: (u64, bool);
    let mut _464: u64;
    let mut _465: u64;
    let mut _466: u64;
    let mut _467: bool;
    let mut _468: bool;
    let mut _469: bool;
    let _470: ();
    let mut _471: bool;
    let mut _472: bool;
    let mut _473: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:270:67: 270:73};
    let _474: {closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:270:67: 270:73};
    let mut _475: (u64, u64);
    let mut _476: u64;
    let _477: usize;
    let mut _478: usize;
    let mut _479: bool;
    let mut _480: u64;
    let _482: usize;
    let mut _483: usize;
    let mut _484: bool;
    let mut _487: (u64, u64);
    let mut _488: u128;
    let mut _489: u128;
    let mut _490: u64;
    let mut _491: u128;
    let mut _492: u64;
    let mut _493: (u128, bool);
    let _496: usize;
    let mut _497: (usize, bool);
    let mut _498: usize;
    let mut _499: bool;
    let mut _502: (u64, bool);
    let mut _503: u64;
    let mut _504: u64;
    let mut _505: u64;
    let mut _506: u64;
    let _508: usize;
    let mut _509: usize;
    let mut _510: (usize, bool);
    let mut _511: (usize, bool);
    let mut _512: usize;
    let mut _513: bool;
    let mut _515: u64;
    let mut _516: u64;
    let mut _517: bool;
    let mut _518: (u64, bool);
    let mut _521: (u64, bool);
    let mut _522: u64;
    let mut _523: u64;
    let mut _526: (u64, bool);
    let mut _527: u64;
    let mut _528: u64;
    let mut _529: u64;
    let mut _530: bool;
    let mut _531: bool;
    let mut _532: bool;
    let _533: ();
    let mut _534: bool;
    let mut _535: bool;
    let mut _536: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:270:67: 270:73};
    let _537: {closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:270:67: 270:73};
    let mut _538: (u64, u64);
    let mut _539: u64;
    let _540: usize;
    let mut _541: usize;
    let mut _542: bool;
    let mut _543: u64;
    let _545: usize;
    let mut _546: usize;
    let mut _547: bool;
    let mut _550: (u64, u64);
    let mut _551: u128;
    let mut _552: u128;
    let mut _553: u64;
    let mut _554: u128;
    let mut _555: u64;
    let mut _556: (u128, bool);
    let _559: usize;
    let mut _560: (usize, bool);
    let mut _561: usize;
    let mut _562: bool;
    let mut _565: (u64, bool);
    let mut _566: u64;
    let mut _567: u64;
    let mut _568: u64;
    let mut _569: u64;
    let _571: usize;
    let mut _572: usize;
    let mut _573: (usize, bool);
    let mut _574: (usize, bool);
    let mut _575: usize;
    let mut _576: bool;
    let mut _578: u64;
    let mut _579: u64;
    let mut _580: bool;
    let mut _581: (u64, bool);
    let mut _584: (u64, bool);
    let mut _585: u64;
    let mut _586: u64;
    let mut _589: (u64, bool);
    let mut _590: u64;
    let mut _591: u64;
    let mut _592: u64;
    let mut _593: bool;
    let mut _594: bool;
    let mut _595: bool;
    let mut _597: [u64; 6];
    let mut _598: math::decimal::U192;
    let mut _599: [u64; 3];
    let _600: usize;
    let mut _601: usize;
    let mut _602: bool;
    let mut _603: bool;
    let mut _604: &[u64; 3];
    let _605: &[u64; 3];
    let _606: usize;
    let mut _607: usize;
    let mut _608: bool;
    scope 1 {
        debug ret => _3;
        let _596: [[u64; 3]; 2];
        scope 97 {
            debug ret => _596;
        }
        scope 98 {
        }
    }
    scope 2 {
        let _4: &[u64; 3];
        scope 3 {
            debug me => _4;
            let _5: &[u64; 3];
            scope 4 {
                debug you => _5;
                let mut _6: [u64; 6];
                scope 5 {
                    debug ret => _6;
                    scope 6 {
                        let mut _10: u64;
                        let mut _206: u64;
                        let mut _402: u64;
                        scope 7 {
                            debug carry => _10;
                            let _11: u64;
                            scope 8 {
                                debug b => _11;
                                scope 9 {
                                    let _26: u64;
                                    let _89: u64;
                                    let _152: u64;
                                    let mut _615: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:270:67: 270:73};
                                    let mut _616: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:270:67: 270:73};
                                    let mut _617: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:270:67: 270:73};
                                    scope 10 {
                                        debug a => _26;
                                        let _30: u64;
                                        let _31: u64;
                                        scope 11 {
                                            debug hi => _30;
                                            debug low => _31;
                                            let _39: bool;
                                            let _40: &mut u64;
                                            scope 12 {
                                                debug overflow => _39;
                                                let _52: &mut u64;
                                                scope 15 {
                                                    debug existing_hi => _52;
                                                    let _59: u64;
                                                    scope 16 {
                                                        debug hi => _59;
                                                        let _64: u64;
                                                        let _65: bool;
                                                        scope 17 {
                                                            debug hi => _64;
                                                            debug o0 => _65;
                                                            let _69: u64;
                                                            let _70: bool;
                                                            scope 18 {
                                                                debug hi => _69;
                                                                debug o1 => _70;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            scope 13 {
                                                debug existing_low => _40;
                                                let _45: u64;
                                                let _46: bool;
                                                scope 14 {
                                                    debug low => _45;
                                                    debug o => _46;
                                                }
                                            }
                                        }
                                    }
                                    scope 19 {
                                        debug a => _89;
                                        let _93: u64;
                                        let _94: u64;
                                        scope 20 {
                                            debug hi => _93;
                                            debug low => _94;
                                            let _102: bool;
                                            let _103: &mut u64;
                                            scope 21 {
                                                debug overflow => _102;
                                                let _115: &mut u64;
                                                scope 24 {
                                                    debug existing_hi => _115;
                                                    let _122: u64;
                                                    scope 25 {
                                                        debug hi => _122;
                                                        let _127: u64;
                                                        let _128: bool;
                                                        scope 26 {
                                                            debug hi => _127;
                                                            debug o0 => _128;
                                                            let _132: u64;
                                                            let _133: bool;
                                                            scope 27 {
                                                                debug hi => _132;
                                                                debug o1 => _133;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            scope 22 {
                                                debug existing_low => _103;
                                                let _108: u64;
                                                let _109: bool;
                                                scope 23 {
                                                    debug low => _108;
                                                    debug o => _109;
                                                }
                                            }
                                        }
                                    }
                                    scope 28 {
                                        debug a => _152;
                                        let _156: u64;
                                        let _157: u64;
                                        scope 29 {
                                            debug hi => _156;
                                            debug low => _157;
                                            let _165: bool;
                                            let _166: &mut u64;
                                            scope 30 {
                                                debug overflow => _165;
                                                let _178: &mut u64;
                                                scope 33 {
                                                    debug existing_hi => _178;
                                                    let _185: u64;
                                                    scope 34 {
                                                        debug hi => _185;
                                                        let _190: u64;
                                                        let _191: bool;
                                                        scope 35 {
                                                            debug hi => _190;
                                                            debug o0 => _191;
                                                            let _195: u64;
                                                            let _196: bool;
                                                            scope 36 {
                                                                debug hi => _195;
                                                                debug o1 => _196;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            scope 31 {
                                                debug existing_low => _166;
                                                let _171: u64;
                                                let _172: bool;
                                                scope 32 {
                                                    debug low => _171;
                                                    debug o => _172;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        scope 37 {
                            debug carry => _206;
                            let _207: u64;
                            scope 38 {
                                debug b => _207;
                                scope 39 {
                                    let _222: u64;
                                    let _285: u64;
                                    let _348: u64;
                                    let mut _612: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:270:67: 270:73};
                                    let mut _613: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:270:67: 270:73};
                                    let mut _614: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:270:67: 270:73};
                                    scope 40 {
                                        debug a => _222;
                                        let _226: u64;
                                        let _227: u64;
                                        scope 41 {
                                            debug hi => _226;
                                            debug low => _227;
                                            let _235: bool;
                                            let _236: &mut u64;
                                            scope 42 {
                                                debug overflow => _235;
                                                let _248: &mut u64;
                                                scope 45 {
                                                    debug existing_hi => _248;
                                                    let _255: u64;
                                                    scope 46 {
                                                        debug hi => _255;
                                                        let _260: u64;
                                                        let _261: bool;
                                                        scope 47 {
                                                            debug hi => _260;
                                                            debug o0 => _261;
                                                            let _265: u64;
                                                            let _266: bool;
                                                            scope 48 {
                                                                debug hi => _265;
                                                                debug o1 => _266;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            scope 43 {
                                                debug existing_low => _236;
                                                let _241: u64;
                                                let _242: bool;
                                                scope 44 {
                                                    debug low => _241;
                                                    debug o => _242;
                                                }
                                            }
                                        }
                                    }
                                    scope 49 {
                                        debug a => _285;
                                        let _289: u64;
                                        let _290: u64;
                                        scope 50 {
                                            debug hi => _289;
                                            debug low => _290;
                                            let _298: bool;
                                            let _299: &mut u64;
                                            scope 51 {
                                                debug overflow => _298;
                                                let _311: &mut u64;
                                                scope 54 {
                                                    debug existing_hi => _311;
                                                    let _318: u64;
                                                    scope 55 {
                                                        debug hi => _318;
                                                        let _323: u64;
                                                        let _324: bool;
                                                        scope 56 {
                                                            debug hi => _323;
                                                            debug o0 => _324;
                                                            let _328: u64;
                                                            let _329: bool;
                                                            scope 57 {
                                                                debug hi => _328;
                                                                debug o1 => _329;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            scope 52 {
                                                debug existing_low => _299;
                                                let _304: u64;
                                                let _305: bool;
                                                scope 53 {
                                                    debug low => _304;
                                                    debug o => _305;
                                                }
                                            }
                                        }
                                    }
                                    scope 58 {
                                        debug a => _348;
                                        let _352: u64;
                                        let _353: u64;
                                        scope 59 {
                                            debug hi => _352;
                                            debug low => _353;
                                            let _361: bool;
                                            let _362: &mut u64;
                                            scope 60 {
                                                debug overflow => _361;
                                                let _374: &mut u64;
                                                scope 63 {
                                                    debug existing_hi => _374;
                                                    let _381: u64;
                                                    scope 64 {
                                                        debug hi => _381;
                                                        let _386: u64;
                                                        let _387: bool;
                                                        scope 65 {
                                                            debug hi => _386;
                                                            debug o0 => _387;
                                                            let _391: u64;
                                                            let _392: bool;
                                                            scope 66 {
                                                                debug hi => _391;
                                                                debug o1 => _392;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            scope 61 {
                                                debug existing_low => _362;
                                                let _367: u64;
                                                let _368: bool;
                                                scope 62 {
                                                    debug low => _367;
                                                    debug o => _368;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        scope 67 {
                            debug carry => _402;
                            let _403: u64;
                            scope 68 {
                                debug b => _403;
                                scope 69 {
                                    let _418: u64;
                                    let _481: u64;
                                    let _544: u64;
                                    let mut _609: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:270:67: 270:73};
                                    let mut _610: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:270:67: 270:73};
                                    let mut _611: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:270:67: 270:73};
                                    scope 70 {
                                        debug a => _418;
                                        let _422: u64;
                                        let _423: u64;
                                        scope 71 {
                                            debug hi => _422;
                                            debug low => _423;
                                            let _431: bool;
                                            let _432: &mut u64;
                                            scope 72 {
                                                debug overflow => _431;
                                                let _444: &mut u64;
                                                scope 75 {
                                                    debug existing_hi => _444;
                                                    let _451: u64;
                                                    scope 76 {
                                                        debug hi => _451;
                                                        let _456: u64;
                                                        let _457: bool;
                                                        scope 77 {
                                                            debug hi => _456;
                                                            debug o0 => _457;
                                                            let _461: u64;
                                                            let _462: bool;
                                                            scope 78 {
                                                                debug hi => _461;
                                                                debug o1 => _462;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            scope 73 {
                                                debug existing_low => _432;
                                                let _437: u64;
                                                let _438: bool;
                                                scope 74 {
                                                    debug low => _437;
                                                    debug o => _438;
                                                }
                                            }
                                        }
                                    }
                                    scope 79 {
                                        debug a => _481;
                                        let _485: u64;
                                        let _486: u64;
                                        scope 80 {
                                            debug hi => _485;
                                            debug low => _486;
                                            let _494: bool;
                                            let _495: &mut u64;
                                            scope 81 {
                                                debug overflow => _494;
                                                let _507: &mut u64;
                                                scope 84 {
                                                    debug existing_hi => _507;
                                                    let _514: u64;
                                                    scope 85 {
                                                        debug hi => _514;
                                                        let _519: u64;
                                                        let _520: bool;
                                                        scope 86 {
                                                            debug hi => _519;
                                                            debug o0 => _520;
                                                            let _524: u64;
                                                            let _525: bool;
                                                            scope 87 {
                                                                debug hi => _524;
                                                                debug o1 => _525;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            scope 82 {
                                                debug existing_low => _495;
                                                let _500: u64;
                                                let _501: bool;
                                                scope 83 {
                                                    debug low => _500;
                                                    debug o => _501;
                                                }
                                            }
                                        }
                                    }
                                    scope 88 {
                                        debug a => _544;
                                        let _548: u64;
                                        let _549: u64;
                                        scope 89 {
                                            debug hi => _548;
                                            debug low => _549;
                                            let _557: bool;
                                            let _558: &mut u64;
                                            scope 90 {
                                                debug overflow => _557;
                                                let _570: &mut u64;
                                                scope 93 {
                                                    debug existing_hi => _570;
                                                    let _577: u64;
                                                    scope 94 {
                                                        debug hi => _577;
                                                        let _582: u64;
                                                        let _583: bool;
                                                        scope 95 {
                                                            debug hi => _582;
                                                            debug o0 => _583;
                                                            let _587: u64;
                                                            let _588: bool;
                                                            scope 96 {
                                                                debug hi => _587;
                                                                debug o1 => _588;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            scope 91 {
                                                debug existing_low => _558;
                                                let _563: u64;
                                                let _564: bool;
                                                scope 92 {
                                                    debug low => _563;
                                                    debug o => _564;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = &(_1.0: [u64; 3]);
        StorageLive(_5);
        _5 = &(_2.0: [u64; 3]);
        StorageLive(_6);
        _6 = [const 0_u64; 6];
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = Ge(const _, const 0_usize);
        switchInt(move _9) -> [0: bb63, otherwise: bb1];
    }

    bb1: {
        StorageLive(_10);
        _10 = const 0_u64;
        StorageLive(_11);
        StorageLive(_12);
        _12 = const _;
        _13 = Len((*_5));
        _14 = Lt(_12, _13);
        assert(move _14, "index out of bounds: the length is {} but the index is {}", move _13, _12) -> [success: bb2, unwind continue];
    }

    bb2: {
        _11 = (*_5)[_12];
        StorageDead(_12);
        StorageLive(_15);
        StorageLive(_16);
        _16 = Ge(const _, const 0_usize);
        switchInt(move _16) -> [0: bb21, otherwise: bb3];
    }

    bb3: {
        StorageLive(_17);
        StorageLive(_18);
        _617 = const _;
        _18 = &(*_617);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = const _;
        _23 = Len((*_4));
        _24 = Lt(_22, _23);
        assert(move _24, "index out of bounds: the length is {} but the index is {}", move _23, _22) -> [success: bb4, unwind continue];
    }

    bb4: {
        _21 = (*_4)[_22];
        StorageLive(_25);
        _25 = _10;
        _20 = (move _21, move _25);
        _17 = <{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:270:67: 270:73} as Fn<(u64, u64)>>::call(move _18, move _20) -> [return: bb5, unwind continue];
    }

    bb5: {
        switchInt(move _17) -> [0: bb19, otherwise: bb6];
    }

    bb6: {
        StorageDead(_25);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_18);
        StorageLive(_26);
        StorageLive(_27);
        _27 = const _;
        _28 = Len((*_4));
        _29 = Lt(_27, _28);
        assert(move _29, "index out of bounds: the length is {} but the index is {}", move _28, _27) -> [success: bb7, unwind continue];
    }

    bb7: {
        _26 = (*_4)[_27];
        StorageDead(_27);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = _26;
        _34 = move _35 as u128 (IntToInt);
        StorageDead(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = _11;
        _36 = move _37 as u128 (IntToInt);
        StorageDead(_37);
        _38 = CheckedMul(_34, _36);
        assert(!move (_38.1: bool), "attempt to compute `{} * {}`, which would overflow", move _34, move _36) -> [success: bb8, unwind continue];
    }

    bb8: {
        _33 = move (_38.0: u128);
        StorageDead(_36);
        StorageDead(_34);
        _32 = U192::split_u128(move _33) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_33);
        StorageLive(_30);
        _30 = (_32.0: u64);
        StorageLive(_31);
        _31 = (_32.1: u64);
        StorageDead(_32);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _42 = CheckedAdd(const _, const _);
        assert(!move (_42.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb10, unwind continue];
    }

    bb10: {
        _41 = move (_42.0: usize);
        _43 = Len(_6);
        _44 = Lt(_41, _43);
        assert(move _44, "index out of bounds: the length is {} but the index is {}", move _43, _41) -> [success: bb11, unwind continue];
    }

    bb11: {
        _40 = &mut _6[_41];
        StorageLive(_47);
        StorageLive(_48);
        _48 = _31;
        StorageLive(_49);
        _49 = (*_40);
        _47 = core::num::<impl u64>::overflowing_add(move _48, move _49) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_49);
        StorageDead(_48);
        StorageLive(_45);
        _45 = (_47.0: u64);
        StorageLive(_46);
        _46 = (_47.1: bool);
        StorageDead(_47);
        StorageLive(_50);
        _50 = _45;
        (*_40) = move _50;
        StorageDead(_50);
        _39 = _46;
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _55 = CheckedAdd(const _, const _);
        assert(!move (_55.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb13, unwind continue];
    }

    bb13: {
        _54 = move (_55.0: usize);
        _56 = CheckedAdd(_54, const 1_usize);
        assert(!move (_56.1: bool), "attempt to compute `{} + {}`, which would overflow", move _54, const 1_usize) -> [success: bb14, unwind continue];
    }

    bb14: {
        _53 = move (_56.0: usize);
        StorageDead(_54);
        _57 = Len(_6);
        _58 = Lt(_53, _57);
        assert(move _58, "index out of bounds: the length is {} but the index is {}", move _57, _53) -> [success: bb15, unwind continue];
    }

    bb15: {
        _52 = &mut _6[_53];
        StorageLive(_59);
        StorageLive(_60);
        _60 = _30;
        StorageLive(_61);
        StorageLive(_62);
        _62 = _39;
        _61 = move _62 as u64 (IntToInt);
        StorageDead(_62);
        _63 = CheckedAdd(_60, _61);
        assert(!move (_63.1: bool), "attempt to compute `{} + {}`, which would overflow", move _60, move _61) -> [success: bb16, unwind continue];
    }

    bb16: {
        _59 = move (_63.0: u64);
        StorageDead(_61);
        StorageDead(_60);
        StorageLive(_66);
        StorageLive(_67);
        _67 = _59;
        StorageLive(_68);
        _68 = _10;
        _66 = core::num::<impl u64>::overflowing_add(move _67, move _68) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_68);
        StorageDead(_67);
        StorageLive(_64);
        _64 = (_66.0: u64);
        StorageLive(_65);
        _65 = (_66.1: bool);
        StorageDead(_66);
        StorageLive(_71);
        StorageLive(_72);
        _72 = _64;
        StorageLive(_73);
        _73 = (*_52);
        _71 = core::num::<impl u64>::overflowing_add(move _72, move _73) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_73);
        StorageDead(_72);
        StorageLive(_69);
        _69 = (_71.0: u64);
        StorageLive(_70);
        _70 = (_71.1: bool);
        StorageDead(_71);
        StorageLive(_74);
        _74 = _69;
        (*_52) = move _74;
        StorageDead(_74);
        StorageLive(_75);
        StorageLive(_76);
        _76 = _65;
        StorageLive(_77);
        _77 = _70;
        _75 = BitOr(move _76, move _77);
        StorageDead(_77);
        StorageDead(_76);
        _51 = move _75 as u64 (IntToInt);
        StorageDead(_75);
        StorageDead(_70);
        StorageDead(_69);
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_59);
        StorageDead(_53);
        StorageDead(_52);
        _10 = move _51;
        _15 = const ();
        StorageDead(_51);
        StorageDead(_39);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_26);
        goto -> bb20;
    }

    bb19: {
        StorageDead(_25);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_18);
        _15 = const ();
        goto -> bb20;
    }

    bb20: {
        StorageDead(_17);
        goto -> bb22;
    }

    bb21: {
        _15 = const ();
        goto -> bb22;
    }

    bb22: {
        StorageDead(_16);
        StorageDead(_15);
        StorageLive(_78);
        StorageLive(_79);
        _79 = Ge(const _, const 0_usize);
        switchInt(move _79) -> [0: bb41, otherwise: bb23];
    }

    bb23: {
        StorageLive(_80);
        StorageLive(_81);
        _616 = const _;
        _81 = &(*_616);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = const _;
        _86 = Len((*_4));
        _87 = Lt(_85, _86);
        assert(move _87, "index out of bounds: the length is {} but the index is {}", move _86, _85) -> [success: bb24, unwind continue];
    }

    bb24: {
        _84 = (*_4)[_85];
        StorageLive(_88);
        _88 = _10;
        _83 = (move _84, move _88);
        _80 = <{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:270:67: 270:73} as Fn<(u64, u64)>>::call(move _81, move _83) -> [return: bb25, unwind continue];
    }

    bb25: {
        switchInt(move _80) -> [0: bb39, otherwise: bb26];
    }

    bb26: {
        StorageDead(_88);
        StorageDead(_85);
        StorageDead(_84);
        StorageDead(_83);
        StorageDead(_81);
        StorageLive(_89);
        StorageLive(_90);
        _90 = const _;
        _91 = Len((*_4));
        _92 = Lt(_90, _91);
        assert(move _92, "index out of bounds: the length is {} but the index is {}", move _91, _90) -> [success: bb27, unwind continue];
    }

    bb27: {
        _89 = (*_4)[_90];
        StorageDead(_90);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        _98 = _89;
        _97 = move _98 as u128 (IntToInt);
        StorageDead(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = _11;
        _99 = move _100 as u128 (IntToInt);
        StorageDead(_100);
        _101 = CheckedMul(_97, _99);
        assert(!move (_101.1: bool), "attempt to compute `{} * {}`, which would overflow", move _97, move _99) -> [success: bb28, unwind continue];
    }

    bb28: {
        _96 = move (_101.0: u128);
        StorageDead(_99);
        StorageDead(_97);
        _95 = U192::split_u128(move _96) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_96);
        StorageLive(_93);
        _93 = (_95.0: u64);
        StorageLive(_94);
        _94 = (_95.1: u64);
        StorageDead(_95);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _105 = CheckedAdd(const _, const _);
        assert(!move (_105.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb30, unwind continue];
    }

    bb30: {
        _104 = move (_105.0: usize);
        _106 = Len(_6);
        _107 = Lt(_104, _106);
        assert(move _107, "index out of bounds: the length is {} but the index is {}", move _106, _104) -> [success: bb31, unwind continue];
    }

    bb31: {
        _103 = &mut _6[_104];
        StorageLive(_110);
        StorageLive(_111);
        _111 = _94;
        StorageLive(_112);
        _112 = (*_103);
        _110 = core::num::<impl u64>::overflowing_add(move _111, move _112) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_112);
        StorageDead(_111);
        StorageLive(_108);
        _108 = (_110.0: u64);
        StorageLive(_109);
        _109 = (_110.1: bool);
        StorageDead(_110);
        StorageLive(_113);
        _113 = _108;
        (*_103) = move _113;
        StorageDead(_113);
        _102 = _109;
        StorageDead(_109);
        StorageDead(_108);
        StorageDead(_104);
        StorageDead(_103);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _118 = CheckedAdd(const _, const _);
        assert(!move (_118.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb33, unwind continue];
    }

    bb33: {
        _117 = move (_118.0: usize);
        _119 = CheckedAdd(_117, const 1_usize);
        assert(!move (_119.1: bool), "attempt to compute `{} + {}`, which would overflow", move _117, const 1_usize) -> [success: bb34, unwind continue];
    }

    bb34: {
        _116 = move (_119.0: usize);
        StorageDead(_117);
        _120 = Len(_6);
        _121 = Lt(_116, _120);
        assert(move _121, "index out of bounds: the length is {} but the index is {}", move _120, _116) -> [success: bb35, unwind continue];
    }

    bb35: {
        _115 = &mut _6[_116];
        StorageLive(_122);
        StorageLive(_123);
        _123 = _93;
        StorageLive(_124);
        StorageLive(_125);
        _125 = _102;
        _124 = move _125 as u64 (IntToInt);
        StorageDead(_125);
        _126 = CheckedAdd(_123, _124);
        assert(!move (_126.1: bool), "attempt to compute `{} + {}`, which would overflow", move _123, move _124) -> [success: bb36, unwind continue];
    }

    bb36: {
        _122 = move (_126.0: u64);
        StorageDead(_124);
        StorageDead(_123);
        StorageLive(_129);
        StorageLive(_130);
        _130 = _122;
        StorageLive(_131);
        _131 = _10;
        _129 = core::num::<impl u64>::overflowing_add(move _130, move _131) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_131);
        StorageDead(_130);
        StorageLive(_127);
        _127 = (_129.0: u64);
        StorageLive(_128);
        _128 = (_129.1: bool);
        StorageDead(_129);
        StorageLive(_134);
        StorageLive(_135);
        _135 = _127;
        StorageLive(_136);
        _136 = (*_115);
        _134 = core::num::<impl u64>::overflowing_add(move _135, move _136) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_136);
        StorageDead(_135);
        StorageLive(_132);
        _132 = (_134.0: u64);
        StorageLive(_133);
        _133 = (_134.1: bool);
        StorageDead(_134);
        StorageLive(_137);
        _137 = _132;
        (*_115) = move _137;
        StorageDead(_137);
        StorageLive(_138);
        StorageLive(_139);
        _139 = _128;
        StorageLive(_140);
        _140 = _133;
        _138 = BitOr(move _139, move _140);
        StorageDead(_140);
        StorageDead(_139);
        _114 = move _138 as u64 (IntToInt);
        StorageDead(_138);
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_128);
        StorageDead(_127);
        StorageDead(_122);
        StorageDead(_116);
        StorageDead(_115);
        _10 = move _114;
        _78 = const ();
        StorageDead(_114);
        StorageDead(_102);
        StorageDead(_94);
        StorageDead(_93);
        StorageDead(_89);
        goto -> bb40;
    }

    bb39: {
        StorageDead(_88);
        StorageDead(_85);
        StorageDead(_84);
        StorageDead(_83);
        StorageDead(_81);
        _78 = const ();
        goto -> bb40;
    }

    bb40: {
        StorageDead(_80);
        goto -> bb42;
    }

    bb41: {
        _78 = const ();
        goto -> bb42;
    }

    bb42: {
        StorageDead(_79);
        StorageDead(_78);
        StorageLive(_141);
        StorageLive(_142);
        _142 = Ge(const _, const 0_usize);
        switchInt(move _142) -> [0: bb61, otherwise: bb43];
    }

    bb43: {
        StorageLive(_143);
        StorageLive(_144);
        _615 = const _;
        _144 = &(*_615);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        _148 = const _;
        _149 = Len((*_4));
        _150 = Lt(_148, _149);
        assert(move _150, "index out of bounds: the length is {} but the index is {}", move _149, _148) -> [success: bb44, unwind continue];
    }

    bb44: {
        _147 = (*_4)[_148];
        StorageLive(_151);
        _151 = _10;
        _146 = (move _147, move _151);
        _143 = <{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:270:67: 270:73} as Fn<(u64, u64)>>::call(move _144, move _146) -> [return: bb45, unwind continue];
    }

    bb45: {
        switchInt(move _143) -> [0: bb59, otherwise: bb46];
    }

    bb46: {
        StorageDead(_151);
        StorageDead(_148);
        StorageDead(_147);
        StorageDead(_146);
        StorageDead(_144);
        StorageLive(_152);
        StorageLive(_153);
        _153 = const _;
        _154 = Len((*_4));
        _155 = Lt(_153, _154);
        assert(move _155, "index out of bounds: the length is {} but the index is {}", move _154, _153) -> [success: bb47, unwind continue];
    }

    bb47: {
        _152 = (*_4)[_153];
        StorageDead(_153);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        _161 = _152;
        _160 = move _161 as u128 (IntToInt);
        StorageDead(_161);
        StorageLive(_162);
        StorageLive(_163);
        _163 = _11;
        _162 = move _163 as u128 (IntToInt);
        StorageDead(_163);
        _164 = CheckedMul(_160, _162);
        assert(!move (_164.1: bool), "attempt to compute `{} * {}`, which would overflow", move _160, move _162) -> [success: bb48, unwind continue];
    }

    bb48: {
        _159 = move (_164.0: u128);
        StorageDead(_162);
        StorageDead(_160);
        _158 = U192::split_u128(move _159) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_159);
        StorageLive(_156);
        _156 = (_158.0: u64);
        StorageLive(_157);
        _157 = (_158.1: u64);
        StorageDead(_158);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        _168 = CheckedAdd(const _, const _);
        assert(!move (_168.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb50, unwind continue];
    }

    bb50: {
        _167 = move (_168.0: usize);
        _169 = Len(_6);
        _170 = Lt(_167, _169);
        assert(move _170, "index out of bounds: the length is {} but the index is {}", move _169, _167) -> [success: bb51, unwind continue];
    }

    bb51: {
        _166 = &mut _6[_167];
        StorageLive(_173);
        StorageLive(_174);
        _174 = _157;
        StorageLive(_175);
        _175 = (*_166);
        _173 = core::num::<impl u64>::overflowing_add(move _174, move _175) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_175);
        StorageDead(_174);
        StorageLive(_171);
        _171 = (_173.0: u64);
        StorageLive(_172);
        _172 = (_173.1: bool);
        StorageDead(_173);
        StorageLive(_176);
        _176 = _171;
        (*_166) = move _176;
        StorageDead(_176);
        _165 = _172;
        StorageDead(_172);
        StorageDead(_171);
        StorageDead(_167);
        StorageDead(_166);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        _181 = CheckedAdd(const _, const _);
        assert(!move (_181.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb53, unwind continue];
    }

    bb53: {
        _180 = move (_181.0: usize);
        _182 = CheckedAdd(_180, const 1_usize);
        assert(!move (_182.1: bool), "attempt to compute `{} + {}`, which would overflow", move _180, const 1_usize) -> [success: bb54, unwind continue];
    }

    bb54: {
        _179 = move (_182.0: usize);
        StorageDead(_180);
        _183 = Len(_6);
        _184 = Lt(_179, _183);
        assert(move _184, "index out of bounds: the length is {} but the index is {}", move _183, _179) -> [success: bb55, unwind continue];
    }

    bb55: {
        _178 = &mut _6[_179];
        StorageLive(_185);
        StorageLive(_186);
        _186 = _156;
        StorageLive(_187);
        StorageLive(_188);
        _188 = _165;
        _187 = move _188 as u64 (IntToInt);
        StorageDead(_188);
        _189 = CheckedAdd(_186, _187);
        assert(!move (_189.1: bool), "attempt to compute `{} + {}`, which would overflow", move _186, move _187) -> [success: bb56, unwind continue];
    }

    bb56: {
        _185 = move (_189.0: u64);
        StorageDead(_187);
        StorageDead(_186);
        StorageLive(_192);
        StorageLive(_193);
        _193 = _185;
        StorageLive(_194);
        _194 = _10;
        _192 = core::num::<impl u64>::overflowing_add(move _193, move _194) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_194);
        StorageDead(_193);
        StorageLive(_190);
        _190 = (_192.0: u64);
        StorageLive(_191);
        _191 = (_192.1: bool);
        StorageDead(_192);
        StorageLive(_197);
        StorageLive(_198);
        _198 = _190;
        StorageLive(_199);
        _199 = (*_178);
        _197 = core::num::<impl u64>::overflowing_add(move _198, move _199) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_199);
        StorageDead(_198);
        StorageLive(_195);
        _195 = (_197.0: u64);
        StorageLive(_196);
        _196 = (_197.1: bool);
        StorageDead(_197);
        StorageLive(_200);
        _200 = _195;
        (*_178) = move _200;
        StorageDead(_200);
        StorageLive(_201);
        StorageLive(_202);
        _202 = _191;
        StorageLive(_203);
        _203 = _196;
        _201 = BitOr(move _202, move _203);
        StorageDead(_203);
        StorageDead(_202);
        _177 = move _201 as u64 (IntToInt);
        StorageDead(_201);
        StorageDead(_196);
        StorageDead(_195);
        StorageDead(_191);
        StorageDead(_190);
        StorageDead(_185);
        StorageDead(_179);
        StorageDead(_178);
        _10 = move _177;
        _141 = const ();
        StorageDead(_177);
        StorageDead(_165);
        StorageDead(_157);
        StorageDead(_156);
        StorageDead(_152);
        goto -> bb60;
    }

    bb59: {
        StorageDead(_151);
        StorageDead(_148);
        StorageDead(_147);
        StorageDead(_146);
        StorageDead(_144);
        _141 = const ();
        goto -> bb60;
    }

    bb60: {
        StorageDead(_143);
        goto -> bb62;
    }

    bb61: {
        _141 = const ();
        goto -> bb62;
    }

    bb62: {
        StorageDead(_142);
        StorageDead(_141);
        _8 = const ();
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb64;
    }

    bb63: {
        _8 = const ();
        goto -> bb64;
    }

    bb64: {
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_204);
        StorageLive(_205);
        _205 = Ge(const _, const 0_usize);
        switchInt(move _205) -> [0: bb127, otherwise: bb65];
    }

    bb65: {
        StorageLive(_206);
        _206 = const 0_u64;
        StorageLive(_207);
        StorageLive(_208);
        _208 = const _;
        _209 = Len((*_5));
        _210 = Lt(_208, _209);
        assert(move _210, "index out of bounds: the length is {} but the index is {}", move _209, _208) -> [success: bb66, unwind continue];
    }

    bb66: {
        _207 = (*_5)[_208];
        StorageDead(_208);
        StorageLive(_211);
        StorageLive(_212);
        _212 = Ge(const _, const 0_usize);
        switchInt(move _212) -> [0: bb85, otherwise: bb67];
    }

    bb67: {
        StorageLive(_213);
        StorageLive(_214);
        _614 = const _;
        _214 = &(*_614);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        _218 = const _;
        _219 = Len((*_4));
        _220 = Lt(_218, _219);
        assert(move _220, "index out of bounds: the length is {} but the index is {}", move _219, _218) -> [success: bb68, unwind continue];
    }

    bb68: {
        _217 = (*_4)[_218];
        StorageLive(_221);
        _221 = _206;
        _216 = (move _217, move _221);
        _213 = <{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:270:67: 270:73} as Fn<(u64, u64)>>::call(move _214, move _216) -> [return: bb69, unwind continue];
    }

    bb69: {
        switchInt(move _213) -> [0: bb83, otherwise: bb70];
    }

    bb70: {
        StorageDead(_221);
        StorageDead(_218);
        StorageDead(_217);
        StorageDead(_216);
        StorageDead(_214);
        StorageLive(_222);
        StorageLive(_223);
        _223 = const _;
        _224 = Len((*_4));
        _225 = Lt(_223, _224);
        assert(move _225, "index out of bounds: the length is {} but the index is {}", move _224, _223) -> [success: bb71, unwind continue];
    }

    bb71: {
        _222 = (*_4)[_223];
        StorageDead(_223);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        _231 = _222;
        _230 = move _231 as u128 (IntToInt);
        StorageDead(_231);
        StorageLive(_232);
        StorageLive(_233);
        _233 = _207;
        _232 = move _233 as u128 (IntToInt);
        StorageDead(_233);
        _234 = CheckedMul(_230, _232);
        assert(!move (_234.1: bool), "attempt to compute `{} * {}`, which would overflow", move _230, move _232) -> [success: bb72, unwind continue];
    }

    bb72: {
        _229 = move (_234.0: u128);
        StorageDead(_232);
        StorageDead(_230);
        _228 = U192::split_u128(move _229) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_229);
        StorageLive(_226);
        _226 = (_228.0: u64);
        StorageLive(_227);
        _227 = (_228.1: u64);
        StorageDead(_228);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        _238 = CheckedAdd(const _, const _);
        assert(!move (_238.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb74, unwind continue];
    }

    bb74: {
        _237 = move (_238.0: usize);
        _239 = Len(_6);
        _240 = Lt(_237, _239);
        assert(move _240, "index out of bounds: the length is {} but the index is {}", move _239, _237) -> [success: bb75, unwind continue];
    }

    bb75: {
        _236 = &mut _6[_237];
        StorageLive(_243);
        StorageLive(_244);
        _244 = _227;
        StorageLive(_245);
        _245 = (*_236);
        _243 = core::num::<impl u64>::overflowing_add(move _244, move _245) -> [return: bb76, unwind continue];
    }

    bb76: {
        StorageDead(_245);
        StorageDead(_244);
        StorageLive(_241);
        _241 = (_243.0: u64);
        StorageLive(_242);
        _242 = (_243.1: bool);
        StorageDead(_243);
        StorageLive(_246);
        _246 = _241;
        (*_236) = move _246;
        StorageDead(_246);
        _235 = _242;
        StorageDead(_242);
        StorageDead(_241);
        StorageDead(_237);
        StorageDead(_236);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        _251 = CheckedAdd(const _, const _);
        assert(!move (_251.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb77, unwind continue];
    }

    bb77: {
        _250 = move (_251.0: usize);
        _252 = CheckedAdd(_250, const 1_usize);
        assert(!move (_252.1: bool), "attempt to compute `{} + {}`, which would overflow", move _250, const 1_usize) -> [success: bb78, unwind continue];
    }

    bb78: {
        _249 = move (_252.0: usize);
        StorageDead(_250);
        _253 = Len(_6);
        _254 = Lt(_249, _253);
        assert(move _254, "index out of bounds: the length is {} but the index is {}", move _253, _249) -> [success: bb79, unwind continue];
    }

    bb79: {
        _248 = &mut _6[_249];
        StorageLive(_255);
        StorageLive(_256);
        _256 = _226;
        StorageLive(_257);
        StorageLive(_258);
        _258 = _235;
        _257 = move _258 as u64 (IntToInt);
        StorageDead(_258);
        _259 = CheckedAdd(_256, _257);
        assert(!move (_259.1: bool), "attempt to compute `{} + {}`, which would overflow", move _256, move _257) -> [success: bb80, unwind continue];
    }

    bb80: {
        _255 = move (_259.0: u64);
        StorageDead(_257);
        StorageDead(_256);
        StorageLive(_262);
        StorageLive(_263);
        _263 = _255;
        StorageLive(_264);
        _264 = _206;
        _262 = core::num::<impl u64>::overflowing_add(move _263, move _264) -> [return: bb81, unwind continue];
    }

    bb81: {
        StorageDead(_264);
        StorageDead(_263);
        StorageLive(_260);
        _260 = (_262.0: u64);
        StorageLive(_261);
        _261 = (_262.1: bool);
        StorageDead(_262);
        StorageLive(_267);
        StorageLive(_268);
        _268 = _260;
        StorageLive(_269);
        _269 = (*_248);
        _267 = core::num::<impl u64>::overflowing_add(move _268, move _269) -> [return: bb82, unwind continue];
    }

    bb82: {
        StorageDead(_269);
        StorageDead(_268);
        StorageLive(_265);
        _265 = (_267.0: u64);
        StorageLive(_266);
        _266 = (_267.1: bool);
        StorageDead(_267);
        StorageLive(_270);
        _270 = _265;
        (*_248) = move _270;
        StorageDead(_270);
        StorageLive(_271);
        StorageLive(_272);
        _272 = _261;
        StorageLive(_273);
        _273 = _266;
        _271 = BitOr(move _272, move _273);
        StorageDead(_273);
        StorageDead(_272);
        _247 = move _271 as u64 (IntToInt);
        StorageDead(_271);
        StorageDead(_266);
        StorageDead(_265);
        StorageDead(_261);
        StorageDead(_260);
        StorageDead(_255);
        StorageDead(_249);
        StorageDead(_248);
        _206 = move _247;
        _211 = const ();
        StorageDead(_247);
        StorageDead(_235);
        StorageDead(_227);
        StorageDead(_226);
        StorageDead(_222);
        goto -> bb84;
    }

    bb83: {
        StorageDead(_221);
        StorageDead(_218);
        StorageDead(_217);
        StorageDead(_216);
        StorageDead(_214);
        _211 = const ();
        goto -> bb84;
    }

    bb84: {
        StorageDead(_213);
        goto -> bb86;
    }

    bb85: {
        _211 = const ();
        goto -> bb86;
    }

    bb86: {
        StorageDead(_212);
        StorageDead(_211);
        StorageLive(_274);
        StorageLive(_275);
        _275 = Ge(const _, const 0_usize);
        switchInt(move _275) -> [0: bb105, otherwise: bb87];
    }

    bb87: {
        StorageLive(_276);
        StorageLive(_277);
        _613 = const _;
        _277 = &(*_613);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        _281 = const _;
        _282 = Len((*_4));
        _283 = Lt(_281, _282);
        assert(move _283, "index out of bounds: the length is {} but the index is {}", move _282, _281) -> [success: bb88, unwind continue];
    }

    bb88: {
        _280 = (*_4)[_281];
        StorageLive(_284);
        _284 = _206;
        _279 = (move _280, move _284);
        _276 = <{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:270:67: 270:73} as Fn<(u64, u64)>>::call(move _277, move _279) -> [return: bb89, unwind continue];
    }

    bb89: {
        switchInt(move _276) -> [0: bb103, otherwise: bb90];
    }

    bb90: {
        StorageDead(_284);
        StorageDead(_281);
        StorageDead(_280);
        StorageDead(_279);
        StorageDead(_277);
        StorageLive(_285);
        StorageLive(_286);
        _286 = const _;
        _287 = Len((*_4));
        _288 = Lt(_286, _287);
        assert(move _288, "index out of bounds: the length is {} but the index is {}", move _287, _286) -> [success: bb91, unwind continue];
    }

    bb91: {
        _285 = (*_4)[_286];
        StorageDead(_286);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        _294 = _285;
        _293 = move _294 as u128 (IntToInt);
        StorageDead(_294);
        StorageLive(_295);
        StorageLive(_296);
        _296 = _207;
        _295 = move _296 as u128 (IntToInt);
        StorageDead(_296);
        _297 = CheckedMul(_293, _295);
        assert(!move (_297.1: bool), "attempt to compute `{} * {}`, which would overflow", move _293, move _295) -> [success: bb92, unwind continue];
    }

    bb92: {
        _292 = move (_297.0: u128);
        StorageDead(_295);
        StorageDead(_293);
        _291 = U192::split_u128(move _292) -> [return: bb93, unwind continue];
    }

    bb93: {
        StorageDead(_292);
        StorageLive(_289);
        _289 = (_291.0: u64);
        StorageLive(_290);
        _290 = (_291.1: u64);
        StorageDead(_291);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        _301 = CheckedAdd(const _, const _);
        assert(!move (_301.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb94, unwind continue];
    }

    bb94: {
        _300 = move (_301.0: usize);
        _302 = Len(_6);
        _303 = Lt(_300, _302);
        assert(move _303, "index out of bounds: the length is {} but the index is {}", move _302, _300) -> [success: bb95, unwind continue];
    }

    bb95: {
        _299 = &mut _6[_300];
        StorageLive(_306);
        StorageLive(_307);
        _307 = _290;
        StorageLive(_308);
        _308 = (*_299);
        _306 = core::num::<impl u64>::overflowing_add(move _307, move _308) -> [return: bb96, unwind continue];
    }

    bb96: {
        StorageDead(_308);
        StorageDead(_307);
        StorageLive(_304);
        _304 = (_306.0: u64);
        StorageLive(_305);
        _305 = (_306.1: bool);
        StorageDead(_306);
        StorageLive(_309);
        _309 = _304;
        (*_299) = move _309;
        StorageDead(_309);
        _298 = _305;
        StorageDead(_305);
        StorageDead(_304);
        StorageDead(_300);
        StorageDead(_299);
        StorageLive(_310);
        StorageLive(_311);
        StorageLive(_312);
        StorageLive(_313);
        _314 = CheckedAdd(const _, const _);
        assert(!move (_314.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb97, unwind continue];
    }

    bb97: {
        _313 = move (_314.0: usize);
        _315 = CheckedAdd(_313, const 1_usize);
        assert(!move (_315.1: bool), "attempt to compute `{} + {}`, which would overflow", move _313, const 1_usize) -> [success: bb98, unwind continue];
    }

    bb98: {
        _312 = move (_315.0: usize);
        StorageDead(_313);
        _316 = Len(_6);
        _317 = Lt(_312, _316);
        assert(move _317, "index out of bounds: the length is {} but the index is {}", move _316, _312) -> [success: bb99, unwind continue];
    }

    bb99: {
        _311 = &mut _6[_312];
        StorageLive(_318);
        StorageLive(_319);
        _319 = _289;
        StorageLive(_320);
        StorageLive(_321);
        _321 = _298;
        _320 = move _321 as u64 (IntToInt);
        StorageDead(_321);
        _322 = CheckedAdd(_319, _320);
        assert(!move (_322.1: bool), "attempt to compute `{} + {}`, which would overflow", move _319, move _320) -> [success: bb100, unwind continue];
    }

    bb100: {
        _318 = move (_322.0: u64);
        StorageDead(_320);
        StorageDead(_319);
        StorageLive(_325);
        StorageLive(_326);
        _326 = _318;
        StorageLive(_327);
        _327 = _206;
        _325 = core::num::<impl u64>::overflowing_add(move _326, move _327) -> [return: bb101, unwind continue];
    }

    bb101: {
        StorageDead(_327);
        StorageDead(_326);
        StorageLive(_323);
        _323 = (_325.0: u64);
        StorageLive(_324);
        _324 = (_325.1: bool);
        StorageDead(_325);
        StorageLive(_330);
        StorageLive(_331);
        _331 = _323;
        StorageLive(_332);
        _332 = (*_311);
        _330 = core::num::<impl u64>::overflowing_add(move _331, move _332) -> [return: bb102, unwind continue];
    }

    bb102: {
        StorageDead(_332);
        StorageDead(_331);
        StorageLive(_328);
        _328 = (_330.0: u64);
        StorageLive(_329);
        _329 = (_330.1: bool);
        StorageDead(_330);
        StorageLive(_333);
        _333 = _328;
        (*_311) = move _333;
        StorageDead(_333);
        StorageLive(_334);
        StorageLive(_335);
        _335 = _324;
        StorageLive(_336);
        _336 = _329;
        _334 = BitOr(move _335, move _336);
        StorageDead(_336);
        StorageDead(_335);
        _310 = move _334 as u64 (IntToInt);
        StorageDead(_334);
        StorageDead(_329);
        StorageDead(_328);
        StorageDead(_324);
        StorageDead(_323);
        StorageDead(_318);
        StorageDead(_312);
        StorageDead(_311);
        _206 = move _310;
        _274 = const ();
        StorageDead(_310);
        StorageDead(_298);
        StorageDead(_290);
        StorageDead(_289);
        StorageDead(_285);
        goto -> bb104;
    }

    bb103: {
        StorageDead(_284);
        StorageDead(_281);
        StorageDead(_280);
        StorageDead(_279);
        StorageDead(_277);
        _274 = const ();
        goto -> bb104;
    }

    bb104: {
        StorageDead(_276);
        goto -> bb106;
    }

    bb105: {
        _274 = const ();
        goto -> bb106;
    }

    bb106: {
        StorageDead(_275);
        StorageDead(_274);
        StorageLive(_337);
        StorageLive(_338);
        _338 = Ge(const _, const 0_usize);
        switchInt(move _338) -> [0: bb125, otherwise: bb107];
    }

    bb107: {
        StorageLive(_339);
        StorageLive(_340);
        _612 = const _;
        _340 = &(*_612);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        _344 = const _;
        _345 = Len((*_4));
        _346 = Lt(_344, _345);
        assert(move _346, "index out of bounds: the length is {} but the index is {}", move _345, _344) -> [success: bb108, unwind continue];
    }

    bb108: {
        _343 = (*_4)[_344];
        StorageLive(_347);
        _347 = _206;
        _342 = (move _343, move _347);
        _339 = <{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:270:67: 270:73} as Fn<(u64, u64)>>::call(move _340, move _342) -> [return: bb109, unwind continue];
    }

    bb109: {
        switchInt(move _339) -> [0: bb123, otherwise: bb110];
    }

    bb110: {
        StorageDead(_347);
        StorageDead(_344);
        StorageDead(_343);
        StorageDead(_342);
        StorageDead(_340);
        StorageLive(_348);
        StorageLive(_349);
        _349 = const _;
        _350 = Len((*_4));
        _351 = Lt(_349, _350);
        assert(move _351, "index out of bounds: the length is {} but the index is {}", move _350, _349) -> [success: bb111, unwind continue];
    }

    bb111: {
        _348 = (*_4)[_349];
        StorageDead(_349);
        StorageLive(_354);
        StorageLive(_355);
        StorageLive(_356);
        StorageLive(_357);
        _357 = _348;
        _356 = move _357 as u128 (IntToInt);
        StorageDead(_357);
        StorageLive(_358);
        StorageLive(_359);
        _359 = _207;
        _358 = move _359 as u128 (IntToInt);
        StorageDead(_359);
        _360 = CheckedMul(_356, _358);
        assert(!move (_360.1: bool), "attempt to compute `{} * {}`, which would overflow", move _356, move _358) -> [success: bb112, unwind continue];
    }

    bb112: {
        _355 = move (_360.0: u128);
        StorageDead(_358);
        StorageDead(_356);
        _354 = U192::split_u128(move _355) -> [return: bb113, unwind continue];
    }

    bb113: {
        StorageDead(_355);
        StorageLive(_352);
        _352 = (_354.0: u64);
        StorageLive(_353);
        _353 = (_354.1: u64);
        StorageDead(_354);
        StorageLive(_361);
        StorageLive(_362);
        StorageLive(_363);
        _364 = CheckedAdd(const _, const _);
        assert(!move (_364.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb114, unwind continue];
    }

    bb114: {
        _363 = move (_364.0: usize);
        _365 = Len(_6);
        _366 = Lt(_363, _365);
        assert(move _366, "index out of bounds: the length is {} but the index is {}", move _365, _363) -> [success: bb115, unwind continue];
    }

    bb115: {
        _362 = &mut _6[_363];
        StorageLive(_369);
        StorageLive(_370);
        _370 = _353;
        StorageLive(_371);
        _371 = (*_362);
        _369 = core::num::<impl u64>::overflowing_add(move _370, move _371) -> [return: bb116, unwind continue];
    }

    bb116: {
        StorageDead(_371);
        StorageDead(_370);
        StorageLive(_367);
        _367 = (_369.0: u64);
        StorageLive(_368);
        _368 = (_369.1: bool);
        StorageDead(_369);
        StorageLive(_372);
        _372 = _367;
        (*_362) = move _372;
        StorageDead(_372);
        _361 = _368;
        StorageDead(_368);
        StorageDead(_367);
        StorageDead(_363);
        StorageDead(_362);
        StorageLive(_373);
        StorageLive(_374);
        StorageLive(_375);
        StorageLive(_376);
        _377 = CheckedAdd(const _, const _);
        assert(!move (_377.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb117, unwind continue];
    }

    bb117: {
        _376 = move (_377.0: usize);
        _378 = CheckedAdd(_376, const 1_usize);
        assert(!move (_378.1: bool), "attempt to compute `{} + {}`, which would overflow", move _376, const 1_usize) -> [success: bb118, unwind continue];
    }

    bb118: {
        _375 = move (_378.0: usize);
        StorageDead(_376);
        _379 = Len(_6);
        _380 = Lt(_375, _379);
        assert(move _380, "index out of bounds: the length is {} but the index is {}", move _379, _375) -> [success: bb119, unwind continue];
    }

    bb119: {
        _374 = &mut _6[_375];
        StorageLive(_381);
        StorageLive(_382);
        _382 = _352;
        StorageLive(_383);
        StorageLive(_384);
        _384 = _361;
        _383 = move _384 as u64 (IntToInt);
        StorageDead(_384);
        _385 = CheckedAdd(_382, _383);
        assert(!move (_385.1: bool), "attempt to compute `{} + {}`, which would overflow", move _382, move _383) -> [success: bb120, unwind continue];
    }

    bb120: {
        _381 = move (_385.0: u64);
        StorageDead(_383);
        StorageDead(_382);
        StorageLive(_388);
        StorageLive(_389);
        _389 = _381;
        StorageLive(_390);
        _390 = _206;
        _388 = core::num::<impl u64>::overflowing_add(move _389, move _390) -> [return: bb121, unwind continue];
    }

    bb121: {
        StorageDead(_390);
        StorageDead(_389);
        StorageLive(_386);
        _386 = (_388.0: u64);
        StorageLive(_387);
        _387 = (_388.1: bool);
        StorageDead(_388);
        StorageLive(_393);
        StorageLive(_394);
        _394 = _386;
        StorageLive(_395);
        _395 = (*_374);
        _393 = core::num::<impl u64>::overflowing_add(move _394, move _395) -> [return: bb122, unwind continue];
    }

    bb122: {
        StorageDead(_395);
        StorageDead(_394);
        StorageLive(_391);
        _391 = (_393.0: u64);
        StorageLive(_392);
        _392 = (_393.1: bool);
        StorageDead(_393);
        StorageLive(_396);
        _396 = _391;
        (*_374) = move _396;
        StorageDead(_396);
        StorageLive(_397);
        StorageLive(_398);
        _398 = _387;
        StorageLive(_399);
        _399 = _392;
        _397 = BitOr(move _398, move _399);
        StorageDead(_399);
        StorageDead(_398);
        _373 = move _397 as u64 (IntToInt);
        StorageDead(_397);
        StorageDead(_392);
        StorageDead(_391);
        StorageDead(_387);
        StorageDead(_386);
        StorageDead(_381);
        StorageDead(_375);
        StorageDead(_374);
        _206 = move _373;
        _337 = const ();
        StorageDead(_373);
        StorageDead(_361);
        StorageDead(_353);
        StorageDead(_352);
        StorageDead(_348);
        goto -> bb124;
    }

    bb123: {
        StorageDead(_347);
        StorageDead(_344);
        StorageDead(_343);
        StorageDead(_342);
        StorageDead(_340);
        _337 = const ();
        goto -> bb124;
    }

    bb124: {
        StorageDead(_339);
        goto -> bb126;
    }

    bb125: {
        _337 = const ();
        goto -> bb126;
    }

    bb126: {
        StorageDead(_338);
        StorageDead(_337);
        _204 = const ();
        StorageDead(_207);
        StorageDead(_206);
        goto -> bb128;
    }

    bb127: {
        _204 = const ();
        goto -> bb128;
    }

    bb128: {
        StorageDead(_205);
        StorageDead(_204);
        StorageLive(_400);
        StorageLive(_401);
        _401 = Ge(const _, const 0_usize);
        switchInt(move _401) -> [0: bb191, otherwise: bb129];
    }

    bb129: {
        StorageLive(_402);
        _402 = const 0_u64;
        StorageLive(_403);
        StorageLive(_404);
        _404 = const _;
        _405 = Len((*_5));
        _406 = Lt(_404, _405);
        assert(move _406, "index out of bounds: the length is {} but the index is {}", move _405, _404) -> [success: bb130, unwind continue];
    }

    bb130: {
        _403 = (*_5)[_404];
        StorageDead(_404);
        StorageLive(_407);
        StorageLive(_408);
        _408 = Ge(const _, const 0_usize);
        switchInt(move _408) -> [0: bb149, otherwise: bb131];
    }

    bb131: {
        StorageLive(_409);
        StorageLive(_410);
        _611 = const _;
        _410 = &(*_611);
        StorageLive(_412);
        StorageLive(_413);
        StorageLive(_414);
        _414 = const _;
        _415 = Len((*_4));
        _416 = Lt(_414, _415);
        assert(move _416, "index out of bounds: the length is {} but the index is {}", move _415, _414) -> [success: bb132, unwind continue];
    }

    bb132: {
        _413 = (*_4)[_414];
        StorageLive(_417);
        _417 = _402;
        _412 = (move _413, move _417);
        _409 = <{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:270:67: 270:73} as Fn<(u64, u64)>>::call(move _410, move _412) -> [return: bb133, unwind continue];
    }

    bb133: {
        switchInt(move _409) -> [0: bb147, otherwise: bb134];
    }

    bb134: {
        StorageDead(_417);
        StorageDead(_414);
        StorageDead(_413);
        StorageDead(_412);
        StorageDead(_410);
        StorageLive(_418);
        StorageLive(_419);
        _419 = const _;
        _420 = Len((*_4));
        _421 = Lt(_419, _420);
        assert(move _421, "index out of bounds: the length is {} but the index is {}", move _420, _419) -> [success: bb135, unwind continue];
    }

    bb135: {
        _418 = (*_4)[_419];
        StorageDead(_419);
        StorageLive(_424);
        StorageLive(_425);
        StorageLive(_426);
        StorageLive(_427);
        _427 = _418;
        _426 = move _427 as u128 (IntToInt);
        StorageDead(_427);
        StorageLive(_428);
        StorageLive(_429);
        _429 = _403;
        _428 = move _429 as u128 (IntToInt);
        StorageDead(_429);
        _430 = CheckedMul(_426, _428);
        assert(!move (_430.1: bool), "attempt to compute `{} * {}`, which would overflow", move _426, move _428) -> [success: bb136, unwind continue];
    }

    bb136: {
        _425 = move (_430.0: u128);
        StorageDead(_428);
        StorageDead(_426);
        _424 = U192::split_u128(move _425) -> [return: bb137, unwind continue];
    }

    bb137: {
        StorageDead(_425);
        StorageLive(_422);
        _422 = (_424.0: u64);
        StorageLive(_423);
        _423 = (_424.1: u64);
        StorageDead(_424);
        StorageLive(_431);
        StorageLive(_432);
        StorageLive(_433);
        _434 = CheckedAdd(const _, const _);
        assert(!move (_434.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb138, unwind continue];
    }

    bb138: {
        _433 = move (_434.0: usize);
        _435 = Len(_6);
        _436 = Lt(_433, _435);
        assert(move _436, "index out of bounds: the length is {} but the index is {}", move _435, _433) -> [success: bb139, unwind continue];
    }

    bb139: {
        _432 = &mut _6[_433];
        StorageLive(_439);
        StorageLive(_440);
        _440 = _423;
        StorageLive(_441);
        _441 = (*_432);
        _439 = core::num::<impl u64>::overflowing_add(move _440, move _441) -> [return: bb140, unwind continue];
    }

    bb140: {
        StorageDead(_441);
        StorageDead(_440);
        StorageLive(_437);
        _437 = (_439.0: u64);
        StorageLive(_438);
        _438 = (_439.1: bool);
        StorageDead(_439);
        StorageLive(_442);
        _442 = _437;
        (*_432) = move _442;
        StorageDead(_442);
        _431 = _438;
        StorageDead(_438);
        StorageDead(_437);
        StorageDead(_433);
        StorageDead(_432);
        StorageLive(_443);
        StorageLive(_444);
        StorageLive(_445);
        StorageLive(_446);
        _447 = CheckedAdd(const _, const _);
        assert(!move (_447.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb141, unwind continue];
    }

    bb141: {
        _446 = move (_447.0: usize);
        _448 = CheckedAdd(_446, const 1_usize);
        assert(!move (_448.1: bool), "attempt to compute `{} + {}`, which would overflow", move _446, const 1_usize) -> [success: bb142, unwind continue];
    }

    bb142: {
        _445 = move (_448.0: usize);
        StorageDead(_446);
        _449 = Len(_6);
        _450 = Lt(_445, _449);
        assert(move _450, "index out of bounds: the length is {} but the index is {}", move _449, _445) -> [success: bb143, unwind continue];
    }

    bb143: {
        _444 = &mut _6[_445];
        StorageLive(_451);
        StorageLive(_452);
        _452 = _422;
        StorageLive(_453);
        StorageLive(_454);
        _454 = _431;
        _453 = move _454 as u64 (IntToInt);
        StorageDead(_454);
        _455 = CheckedAdd(_452, _453);
        assert(!move (_455.1: bool), "attempt to compute `{} + {}`, which would overflow", move _452, move _453) -> [success: bb144, unwind continue];
    }

    bb144: {
        _451 = move (_455.0: u64);
        StorageDead(_453);
        StorageDead(_452);
        StorageLive(_458);
        StorageLive(_459);
        _459 = _451;
        StorageLive(_460);
        _460 = _402;
        _458 = core::num::<impl u64>::overflowing_add(move _459, move _460) -> [return: bb145, unwind continue];
    }

    bb145: {
        StorageDead(_460);
        StorageDead(_459);
        StorageLive(_456);
        _456 = (_458.0: u64);
        StorageLive(_457);
        _457 = (_458.1: bool);
        StorageDead(_458);
        StorageLive(_463);
        StorageLive(_464);
        _464 = _456;
        StorageLive(_465);
        _465 = (*_444);
        _463 = core::num::<impl u64>::overflowing_add(move _464, move _465) -> [return: bb146, unwind continue];
    }

    bb146: {
        StorageDead(_465);
        StorageDead(_464);
        StorageLive(_461);
        _461 = (_463.0: u64);
        StorageLive(_462);
        _462 = (_463.1: bool);
        StorageDead(_463);
        StorageLive(_466);
        _466 = _461;
        (*_444) = move _466;
        StorageDead(_466);
        StorageLive(_467);
        StorageLive(_468);
        _468 = _457;
        StorageLive(_469);
        _469 = _462;
        _467 = BitOr(move _468, move _469);
        StorageDead(_469);
        StorageDead(_468);
        _443 = move _467 as u64 (IntToInt);
        StorageDead(_467);
        StorageDead(_462);
        StorageDead(_461);
        StorageDead(_457);
        StorageDead(_456);
        StorageDead(_451);
        StorageDead(_445);
        StorageDead(_444);
        _402 = move _443;
        _407 = const ();
        StorageDead(_443);
        StorageDead(_431);
        StorageDead(_423);
        StorageDead(_422);
        StorageDead(_418);
        goto -> bb148;
    }

    bb147: {
        StorageDead(_417);
        StorageDead(_414);
        StorageDead(_413);
        StorageDead(_412);
        StorageDead(_410);
        _407 = const ();
        goto -> bb148;
    }

    bb148: {
        StorageDead(_409);
        goto -> bb150;
    }

    bb149: {
        _407 = const ();
        goto -> bb150;
    }

    bb150: {
        StorageDead(_408);
        StorageDead(_407);
        StorageLive(_470);
        StorageLive(_471);
        _471 = Ge(const _, const 0_usize);
        switchInt(move _471) -> [0: bb169, otherwise: bb151];
    }

    bb151: {
        StorageLive(_472);
        StorageLive(_473);
        _610 = const _;
        _473 = &(*_610);
        StorageLive(_475);
        StorageLive(_476);
        StorageLive(_477);
        _477 = const _;
        _478 = Len((*_4));
        _479 = Lt(_477, _478);
        assert(move _479, "index out of bounds: the length is {} but the index is {}", move _478, _477) -> [success: bb152, unwind continue];
    }

    bb152: {
        _476 = (*_4)[_477];
        StorageLive(_480);
        _480 = _402;
        _475 = (move _476, move _480);
        _472 = <{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:270:67: 270:73} as Fn<(u64, u64)>>::call(move _473, move _475) -> [return: bb153, unwind continue];
    }

    bb153: {
        switchInt(move _472) -> [0: bb167, otherwise: bb154];
    }

    bb154: {
        StorageDead(_480);
        StorageDead(_477);
        StorageDead(_476);
        StorageDead(_475);
        StorageDead(_473);
        StorageLive(_481);
        StorageLive(_482);
        _482 = const _;
        _483 = Len((*_4));
        _484 = Lt(_482, _483);
        assert(move _484, "index out of bounds: the length is {} but the index is {}", move _483, _482) -> [success: bb155, unwind continue];
    }

    bb155: {
        _481 = (*_4)[_482];
        StorageDead(_482);
        StorageLive(_487);
        StorageLive(_488);
        StorageLive(_489);
        StorageLive(_490);
        _490 = _481;
        _489 = move _490 as u128 (IntToInt);
        StorageDead(_490);
        StorageLive(_491);
        StorageLive(_492);
        _492 = _403;
        _491 = move _492 as u128 (IntToInt);
        StorageDead(_492);
        _493 = CheckedMul(_489, _491);
        assert(!move (_493.1: bool), "attempt to compute `{} * {}`, which would overflow", move _489, move _491) -> [success: bb156, unwind continue];
    }

    bb156: {
        _488 = move (_493.0: u128);
        StorageDead(_491);
        StorageDead(_489);
        _487 = U192::split_u128(move _488) -> [return: bb157, unwind continue];
    }

    bb157: {
        StorageDead(_488);
        StorageLive(_485);
        _485 = (_487.0: u64);
        StorageLive(_486);
        _486 = (_487.1: u64);
        StorageDead(_487);
        StorageLive(_494);
        StorageLive(_495);
        StorageLive(_496);
        _497 = CheckedAdd(const _, const _);
        assert(!move (_497.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb158, unwind continue];
    }

    bb158: {
        _496 = move (_497.0: usize);
        _498 = Len(_6);
        _499 = Lt(_496, _498);
        assert(move _499, "index out of bounds: the length is {} but the index is {}", move _498, _496) -> [success: bb159, unwind continue];
    }

    bb159: {
        _495 = &mut _6[_496];
        StorageLive(_502);
        StorageLive(_503);
        _503 = _486;
        StorageLive(_504);
        _504 = (*_495);
        _502 = core::num::<impl u64>::overflowing_add(move _503, move _504) -> [return: bb160, unwind continue];
    }

    bb160: {
        StorageDead(_504);
        StorageDead(_503);
        StorageLive(_500);
        _500 = (_502.0: u64);
        StorageLive(_501);
        _501 = (_502.1: bool);
        StorageDead(_502);
        StorageLive(_505);
        _505 = _500;
        (*_495) = move _505;
        StorageDead(_505);
        _494 = _501;
        StorageDead(_501);
        StorageDead(_500);
        StorageDead(_496);
        StorageDead(_495);
        StorageLive(_506);
        StorageLive(_507);
        StorageLive(_508);
        StorageLive(_509);
        _510 = CheckedAdd(const _, const _);
        assert(!move (_510.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb161, unwind continue];
    }

    bb161: {
        _509 = move (_510.0: usize);
        _511 = CheckedAdd(_509, const 1_usize);
        assert(!move (_511.1: bool), "attempt to compute `{} + {}`, which would overflow", move _509, const 1_usize) -> [success: bb162, unwind continue];
    }

    bb162: {
        _508 = move (_511.0: usize);
        StorageDead(_509);
        _512 = Len(_6);
        _513 = Lt(_508, _512);
        assert(move _513, "index out of bounds: the length is {} but the index is {}", move _512, _508) -> [success: bb163, unwind continue];
    }

    bb163: {
        _507 = &mut _6[_508];
        StorageLive(_514);
        StorageLive(_515);
        _515 = _485;
        StorageLive(_516);
        StorageLive(_517);
        _517 = _494;
        _516 = move _517 as u64 (IntToInt);
        StorageDead(_517);
        _518 = CheckedAdd(_515, _516);
        assert(!move (_518.1: bool), "attempt to compute `{} + {}`, which would overflow", move _515, move _516) -> [success: bb164, unwind continue];
    }

    bb164: {
        _514 = move (_518.0: u64);
        StorageDead(_516);
        StorageDead(_515);
        StorageLive(_521);
        StorageLive(_522);
        _522 = _514;
        StorageLive(_523);
        _523 = _402;
        _521 = core::num::<impl u64>::overflowing_add(move _522, move _523) -> [return: bb165, unwind continue];
    }

    bb165: {
        StorageDead(_523);
        StorageDead(_522);
        StorageLive(_519);
        _519 = (_521.0: u64);
        StorageLive(_520);
        _520 = (_521.1: bool);
        StorageDead(_521);
        StorageLive(_526);
        StorageLive(_527);
        _527 = _519;
        StorageLive(_528);
        _528 = (*_507);
        _526 = core::num::<impl u64>::overflowing_add(move _527, move _528) -> [return: bb166, unwind continue];
    }

    bb166: {
        StorageDead(_528);
        StorageDead(_527);
        StorageLive(_524);
        _524 = (_526.0: u64);
        StorageLive(_525);
        _525 = (_526.1: bool);
        StorageDead(_526);
        StorageLive(_529);
        _529 = _524;
        (*_507) = move _529;
        StorageDead(_529);
        StorageLive(_530);
        StorageLive(_531);
        _531 = _520;
        StorageLive(_532);
        _532 = _525;
        _530 = BitOr(move _531, move _532);
        StorageDead(_532);
        StorageDead(_531);
        _506 = move _530 as u64 (IntToInt);
        StorageDead(_530);
        StorageDead(_525);
        StorageDead(_524);
        StorageDead(_520);
        StorageDead(_519);
        StorageDead(_514);
        StorageDead(_508);
        StorageDead(_507);
        _402 = move _506;
        _470 = const ();
        StorageDead(_506);
        StorageDead(_494);
        StorageDead(_486);
        StorageDead(_485);
        StorageDead(_481);
        goto -> bb168;
    }

    bb167: {
        StorageDead(_480);
        StorageDead(_477);
        StorageDead(_476);
        StorageDead(_475);
        StorageDead(_473);
        _470 = const ();
        goto -> bb168;
    }

    bb168: {
        StorageDead(_472);
        goto -> bb170;
    }

    bb169: {
        _470 = const ();
        goto -> bb170;
    }

    bb170: {
        StorageDead(_471);
        StorageDead(_470);
        StorageLive(_533);
        StorageLive(_534);
        _534 = Ge(const _, const 0_usize);
        switchInt(move _534) -> [0: bb189, otherwise: bb171];
    }

    bb171: {
        StorageLive(_535);
        StorageLive(_536);
        _609 = const _;
        _536 = &(*_609);
        StorageLive(_538);
        StorageLive(_539);
        StorageLive(_540);
        _540 = const _;
        _541 = Len((*_4));
        _542 = Lt(_540, _541);
        assert(move _542, "index out of bounds: the length is {} but the index is {}", move _541, _540) -> [success: bb172, unwind continue];
    }

    bb172: {
        _539 = (*_4)[_540];
        StorageLive(_543);
        _543 = _402;
        _538 = (move _539, move _543);
        _535 = <{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:270:67: 270:73} as Fn<(u64, u64)>>::call(move _536, move _538) -> [return: bb173, unwind continue];
    }

    bb173: {
        switchInt(move _535) -> [0: bb187, otherwise: bb174];
    }

    bb174: {
        StorageDead(_543);
        StorageDead(_540);
        StorageDead(_539);
        StorageDead(_538);
        StorageDead(_536);
        StorageLive(_544);
        StorageLive(_545);
        _545 = const _;
        _546 = Len((*_4));
        _547 = Lt(_545, _546);
        assert(move _547, "index out of bounds: the length is {} but the index is {}", move _546, _545) -> [success: bb175, unwind continue];
    }

    bb175: {
        _544 = (*_4)[_545];
        StorageDead(_545);
        StorageLive(_550);
        StorageLive(_551);
        StorageLive(_552);
        StorageLive(_553);
        _553 = _544;
        _552 = move _553 as u128 (IntToInt);
        StorageDead(_553);
        StorageLive(_554);
        StorageLive(_555);
        _555 = _403;
        _554 = move _555 as u128 (IntToInt);
        StorageDead(_555);
        _556 = CheckedMul(_552, _554);
        assert(!move (_556.1: bool), "attempt to compute `{} * {}`, which would overflow", move _552, move _554) -> [success: bb176, unwind continue];
    }

    bb176: {
        _551 = move (_556.0: u128);
        StorageDead(_554);
        StorageDead(_552);
        _550 = U192::split_u128(move _551) -> [return: bb177, unwind continue];
    }

    bb177: {
        StorageDead(_551);
        StorageLive(_548);
        _548 = (_550.0: u64);
        StorageLive(_549);
        _549 = (_550.1: u64);
        StorageDead(_550);
        StorageLive(_557);
        StorageLive(_558);
        StorageLive(_559);
        _560 = CheckedAdd(const _, const _);
        assert(!move (_560.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb178, unwind continue];
    }

    bb178: {
        _559 = move (_560.0: usize);
        _561 = Len(_6);
        _562 = Lt(_559, _561);
        assert(move _562, "index out of bounds: the length is {} but the index is {}", move _561, _559) -> [success: bb179, unwind continue];
    }

    bb179: {
        _558 = &mut _6[_559];
        StorageLive(_565);
        StorageLive(_566);
        _566 = _549;
        StorageLive(_567);
        _567 = (*_558);
        _565 = core::num::<impl u64>::overflowing_add(move _566, move _567) -> [return: bb180, unwind continue];
    }

    bb180: {
        StorageDead(_567);
        StorageDead(_566);
        StorageLive(_563);
        _563 = (_565.0: u64);
        StorageLive(_564);
        _564 = (_565.1: bool);
        StorageDead(_565);
        StorageLive(_568);
        _568 = _563;
        (*_558) = move _568;
        StorageDead(_568);
        _557 = _564;
        StorageDead(_564);
        StorageDead(_563);
        StorageDead(_559);
        StorageDead(_558);
        StorageLive(_569);
        StorageLive(_570);
        StorageLive(_571);
        StorageLive(_572);
        _573 = CheckedAdd(const _, const _);
        assert(!move (_573.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb181, unwind continue];
    }

    bb181: {
        _572 = move (_573.0: usize);
        _574 = CheckedAdd(_572, const 1_usize);
        assert(!move (_574.1: bool), "attempt to compute `{} + {}`, which would overflow", move _572, const 1_usize) -> [success: bb182, unwind continue];
    }

    bb182: {
        _571 = move (_574.0: usize);
        StorageDead(_572);
        _575 = Len(_6);
        _576 = Lt(_571, _575);
        assert(move _576, "index out of bounds: the length is {} but the index is {}", move _575, _571) -> [success: bb183, unwind continue];
    }

    bb183: {
        _570 = &mut _6[_571];
        StorageLive(_577);
        StorageLive(_578);
        _578 = _548;
        StorageLive(_579);
        StorageLive(_580);
        _580 = _557;
        _579 = move _580 as u64 (IntToInt);
        StorageDead(_580);
        _581 = CheckedAdd(_578, _579);
        assert(!move (_581.1: bool), "attempt to compute `{} + {}`, which would overflow", move _578, move _579) -> [success: bb184, unwind continue];
    }

    bb184: {
        _577 = move (_581.0: u64);
        StorageDead(_579);
        StorageDead(_578);
        StorageLive(_584);
        StorageLive(_585);
        _585 = _577;
        StorageLive(_586);
        _586 = _402;
        _584 = core::num::<impl u64>::overflowing_add(move _585, move _586) -> [return: bb185, unwind continue];
    }

    bb185: {
        StorageDead(_586);
        StorageDead(_585);
        StorageLive(_582);
        _582 = (_584.0: u64);
        StorageLive(_583);
        _583 = (_584.1: bool);
        StorageDead(_584);
        StorageLive(_589);
        StorageLive(_590);
        _590 = _582;
        StorageLive(_591);
        _591 = (*_570);
        _589 = core::num::<impl u64>::overflowing_add(move _590, move _591) -> [return: bb186, unwind continue];
    }

    bb186: {
        StorageDead(_591);
        StorageDead(_590);
        StorageLive(_587);
        _587 = (_589.0: u64);
        StorageLive(_588);
        _588 = (_589.1: bool);
        StorageDead(_589);
        StorageLive(_592);
        _592 = _587;
        (*_570) = move _592;
        StorageDead(_592);
        StorageLive(_593);
        StorageLive(_594);
        _594 = _583;
        StorageLive(_595);
        _595 = _588;
        _593 = BitOr(move _594, move _595);
        StorageDead(_595);
        StorageDead(_594);
        _569 = move _593 as u64 (IntToInt);
        StorageDead(_593);
        StorageDead(_588);
        StorageDead(_587);
        StorageDead(_583);
        StorageDead(_582);
        StorageDead(_577);
        StorageDead(_571);
        StorageDead(_570);
        _402 = move _569;
        _533 = const ();
        StorageDead(_569);
        StorageDead(_557);
        StorageDead(_549);
        StorageDead(_548);
        StorageDead(_544);
        goto -> bb188;
    }

    bb187: {
        StorageDead(_543);
        StorageDead(_540);
        StorageDead(_539);
        StorageDead(_538);
        StorageDead(_536);
        _533 = const ();
        goto -> bb188;
    }

    bb188: {
        StorageDead(_535);
        goto -> bb190;
    }

    bb189: {
        _533 = const ();
        goto -> bb190;
    }

    bb190: {
        StorageDead(_534);
        StorageDead(_533);
        _400 = const ();
        StorageDead(_403);
        StorageDead(_402);
        goto -> bb192;
    }

    bb191: {
        _400 = const ();
        goto -> bb192;
    }

    bb192: {
        StorageDead(_401);
        StorageDead(_400);
        _7 = const ();
        StorageDead(_7);
        _3 = _6;
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_596);
        StorageLive(_597);
        _597 = _3;
        _596 = move _597 as [[u64; 3]; 2] (Transmute);
        StorageDead(_597);
        StorageLive(_598);
        StorageLive(_599);
        StorageLive(_600);
        _600 = const 0_usize;
        _601 = Len(_596);
        _602 = Lt(_600, _601);
        assert(move _602, "index out of bounds: the length is {} but the index is {}", move _601, _600) -> [success: bb193, unwind continue];
    }

    bb193: {
        _599 = _596[_600];
        _598 = U192(move _599);
        StorageDead(_599);
        StorageLive(_603);
        StorageLive(_604);
        StorageLive(_605);
        StorageLive(_606);
        _606 = const 1_usize;
        _607 = Len(_596);
        _608 = Lt(_606, _607);
        assert(move _608, "index out of bounds: the length is {} but the index is {}", move _607, _606) -> [success: bb194, unwind continue];
    }

    bb194: {
        _605 = &_596[_606];
        _604 = &(*_605);
        _603 = U192::overflowing_mul::any_nonzero(move _604) -> [return: bb195, unwind continue];
    }

    bb195: {
        StorageDead(_604);
        _0 = (move _598, move _603);
        StorageDead(_603);
        StorageDead(_598);
        StorageDead(_596);
        StorageDead(_3);
        StorageDead(_606);
        StorageDead(_605);
        StorageDead(_600);
        return;
    }
}
