// MIR for `rate_limiter::<impl at token-lending\sdk\src\state\rate_limiter.rs:40:1: 40:17>::current_outflow` before PreCodegen

fn rate_limiter::<impl at token-lending\sdk\src\state\rate_limiter.rs:40:1: 40:17>::current_outflow(_1: &rate_limiter::RateLimiter, _2: u64) -> Result<decimal::Decimal, ProgramError> {
    debug self => _1;
    debug cur_slot => _2;
    let mut _0: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let _3: ();
    let mut _4: bool;
    let mut _5: u64;
    let mut _6: !;
    let _7: ();
    let mut _8: &str;
    let _9: &str;
    let mut _10: solana_program::program_error::ProgramError;
    let mut _11: error::LendingError;
    let _12: math::decimal::Decimal;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _14: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _15: math::decimal::Decimal;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _17: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _18: math::decimal::Decimal;
    let mut _19: u64;
    let mut _20: math::decimal::Decimal;
    let mut _21: u64;
    let mut _22: u64;
    let mut _23: u64;
    let mut _24: u64;
    let mut _25: (u64, bool);
    let mut _26: (u64, bool);
    let mut _27: isize;
    let _28: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _29: !;
    let mut _30: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _31: math::decimal::Decimal;
    let mut _32: u64;
    let mut _33: isize;
    let _34: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _35: !;
    let mut _36: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _37: math::decimal::Decimal;
    let mut _38: math::decimal::Decimal;
    let mut _39: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _40: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _41: math::decimal::Decimal;
    let mut _42: math::decimal::Decimal;
    let mut _43: isize;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _48: math::decimal::Decimal;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: isize;
    let mut _52: isize;
    let mut _53: isize;
    let mut _54: isize;
    let mut _55: isize;
    let mut _56: isize;
    let mut _57: isize;
    let mut _58: isize;
    let mut _59: isize;
    let mut _60: isize;
    let mut _61: isize;
    let mut _62: isize;
    let mut _63: isize;
    let mut _64: isize;
    let mut _65: isize;
    scope 1 {
        debug prev_weight => _12;
        let _44: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _47: math::decimal::Decimal;
        scope 10 {
            debug residual => _44;
            scope 11 {
            }
        }
        scope 12 {
            debug val => _47;
            scope 13 {
            }
        }
    }
    scope 2 {
        debug residual => _28;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _31;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _34;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _37;
        scope 9 {
        }
    }

    bb0: {
        _49 = const false;
        _50 = const false;
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = (((*_1).0: state::rate_limiter::RateLimiterConfig).0: u64);
        _4 = Eq(move _5, const 0_u64);
        switchInt(move _4) -> [0: bb4, otherwise: bb1];
    }

    bb1: {
        StorageDead(_5);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = const "Window duration cannot be 0";
        _8 = &(*_9);
        _7 = solana_program::log::sol_log(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_8);
        StorageDead(_9);
        StorageDead(_7);
        StorageLive(_10);
        StorageLive(_11);
        _11 = LendingError::InvalidAccountInput;
        _10 = <LendingError as Into<ProgramError>>::into(move _11) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_11);
        _0 = Result::<decimal::Decimal, ProgramError>::Err(move _10);
        StorageDead(_10);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb27;
    }

    bb4: {
        StorageDead(_5);
        _3 = const ();
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = (((*_1).0: state::rate_limiter::RateLimiterConfig).0: u64);
        _18 = <decimal::Decimal as From<u64>>::from(move _19) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = _2;
        StorageLive(_24);
        _24 = ((*_1).2: u64);
        _25 = CheckedSub(_23, _24);
        assert(!move (_25.1: bool), "attempt to compute `{} - {}`, which would overflow", move _23, move _24) -> [success: bb6, unwind continue];
    }

    bb6: {
        _22 = move (_25.0: u64);
        StorageDead(_24);
        StorageDead(_23);
        _26 = CheckedAdd(_22, const 1_u64);
        assert(!move (_26.1: bool), "attempt to compute `{} + {}`, which would overflow", move _22, const 1_u64) -> [success: bb7, unwind continue];
    }

    bb7: {
        _21 = move (_26.0: u64);
        StorageDead(_22);
        _20 = <decimal::Decimal as From<u64>>::from(move _21) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_21);
        _17 = <decimal::Decimal as common::TrySub>::try_sub(move _18, move _20) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_20);
        StorageDead(_18);
        _16 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _17) -> [return: bb10, unwind: bb28];
    }

    bb10: {
        _49 = const true;
        StorageDead(_17);
        _27 = discriminant(_16);
        switchInt(move _27) -> [0: bb11, 1: bb13, otherwise: bb12];
    }

    bb11: {
        StorageLive(_31);
        _31 = ((_16 as Continue).0: math::decimal::Decimal);
        _15 = _31;
        StorageDead(_31);
        StorageLive(_32);
        _32 = (((*_1).0: state::rate_limiter::RateLimiterConfig).0: u64);
        _14 = <decimal::Decimal as common::TryDiv<u64>>::try_div(move _15, move _32) -> [return: bb15, unwind: bb31];
    }

    bb12: {
        unreachable;
    }

    bb13: {
        StorageLive(_28);
        _28 = move ((_16 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_30);
        _30 = move _28;
        _0 = <Result<decimal::Decimal, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _30) -> [return: bb14, unwind: bb31];
    }

    bb14: {
        StorageDead(_30);
        StorageDead(_28);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb26;
    }

    bb15: {
        StorageDead(_32);
        StorageDead(_15);
        _13 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _14) -> [return: bb16, unwind: bb31];
    }

    bb16: {
        StorageDead(_14);
        _33 = discriminant(_13);
        switchInt(move _33) -> [0: bb17, 1: bb18, otherwise: bb12];
    }

    bb17: {
        StorageLive(_37);
        _37 = ((_13 as Continue).0: math::decimal::Decimal);
        _12 = _37;
        StorageDead(_37);
        _51 = discriminant(_13);
        _53 = discriminant(_16);
        _49 = const false;
        StorageDead(_16);
        StorageDead(_13);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = _12;
        StorageLive(_42);
        _42 = ((*_1).1: math::decimal::Decimal);
        _40 = <decimal::Decimal as common::TryMul<decimal::Decimal>>::try_mul(move _41, move _42) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_34);
        _34 = move ((_13 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_36);
        _36 = move _34;
        _0 = <Result<decimal::Decimal, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _36) -> [return: bb19, unwind: bb30];
    }

    bb19: {
        StorageDead(_36);
        StorageDead(_34);
        _59 = discriminant(_13);
        goto -> bb26;
    }

    bb20: {
        StorageDead(_42);
        StorageDead(_41);
        _39 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _40) -> [return: bb21, unwind: bb28];
    }

    bb21: {
        _50 = const true;
        StorageDead(_40);
        _43 = discriminant(_39);
        switchInt(move _43) -> [0: bb22, 1: bb23, otherwise: bb12];
    }

    bb22: {
        StorageLive(_47);
        _47 = ((_39 as Continue).0: math::decimal::Decimal);
        _38 = _47;
        StorageDead(_47);
        StorageLive(_48);
        _48 = ((*_1).3: math::decimal::Decimal);
        _0 = <decimal::Decimal as common::TryAdd>::try_add(move _38, move _48) -> [return: bb25, unwind: bb29];
    }

    bb23: {
        StorageLive(_44);
        _44 = move ((_39 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_46);
        _46 = move _44;
        _0 = <Result<decimal::Decimal, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _46) -> [return: bb24, unwind: bb29];
    }

    bb24: {
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_38);
        StorageDead(_12);
        _57 = discriminant(_39);
        _50 = const false;
        StorageDead(_39);
        goto -> bb27;
    }

    bb25: {
        StorageDead(_48);
        StorageDead(_38);
        StorageDead(_12);
        _55 = discriminant(_39);
        _50 = const false;
        StorageDead(_39);
        goto -> bb27;
    }

    bb26: {
        _61 = discriminant(_16);
        _49 = const false;
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb27;
    }

    bb27: {
        return;
    }

    bb28 (cleanup): {
        resume;
    }

    bb29 (cleanup): {
        _63 = discriminant(_39);
        goto -> bb28;
    }

    bb30 (cleanup): {
        _64 = discriminant(_13);
        goto -> bb31;
    }

    bb31 (cleanup): {
        _65 = discriminant(_16);
        goto -> bb28;
    }
}
