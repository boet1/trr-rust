// MIR for `rate::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:196:3: 196:54>::try_from` before PreCodegen

fn rate::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:196:3: 196:54>::try_from(_1: U128) -> Result<u64, &str> {
    debug u => _1;
    let mut _0: std::result::Result<u64, &str>;
    let _2: [u64; 2];
    let mut _3: bool;
    let mut _4: &math::rate::U128;
    let mut _5: bool;
    let mut _6: u64;
    let _7: usize;
    let mut _8: usize;
    let mut _9: bool;
    let mut _10: u64;
    let mut _11: &str;
    let _12: &str;
    let mut _13: u64;
    let _14: usize;
    let mut _15: usize;
    let mut _16: bool;
    scope 1 {
        debug arr => _2;
    }

    bb0: {
        StorageLive(_2);
        _2 = (_1.0: [u64; 2]);
        StorageLive(_3);
        StorageLive(_4);
        _4 = &_1;
        _3 = U128::fits_word(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _3) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = const 0_usize;
        _8 = Len(_2);
        _9 = Lt(_7, _8);
        assert(move _9, "index out of bounds: the length is {} but the index is {}", move _8, _7) -> [success: bb4, unwind continue];
    }

    bb3: {
        StorageDead(_4);
        goto -> bb6;
    }

    bb4: {
        _6 = _2[_7];
        StorageLive(_10);
        _10 = core::num::<impl u64>::max_value() -> [return: bb5, unwind continue];
    }

    bb5: {
        _5 = Gt(move _6, move _10);
        switchInt(move _5) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_11);
        StorageLive(_12);
        _12 = const "integer overflow when casting to u64";
        _11 = &(*_12);
        _0 = Result::<u64, &str>::Err(move _11);
        StorageDead(_11);
        StorageDead(_12);
        goto -> bb9;
    }

    bb7: {
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_13);
        StorageLive(_14);
        _14 = const 0_usize;
        _15 = Len(_2);
        _16 = Lt(_14, _15);
        assert(move _16, "index out of bounds: the length is {} but the index is {}", move _15, _14) -> [success: bb8, unwind continue];
    }

    bb8: {
        _13 = _2[_14];
        _0 = Result::<u64, &str>::Ok(move _13);
        StorageDead(_13);
        StorageDead(_14);
        goto -> bb9;
    }

    bb9: {
        StorageDead(_5);
        StorageDead(_3);
        StorageDead(_2);
        return;
    }
}
