// MIR for `reserve::<impl at token-lending\sdk\src\state\reserve.rs:65:1: 65:13>::collateral_exchange_rate` after PreCodegen

fn reserve::<impl at token-lending\sdk\src\state\reserve.rs:65:1: 65:13>::collateral_exchange_rate(_1: &reserve::Reserve) -> Result<CollateralExchangeRate, ProgramError> {
    debug self => _1;
    let mut _0: std::result::Result<state::reserve::CollateralExchangeRate, solana_program::program_error::ProgramError>;
    let _2: math::decimal::Decimal;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _4: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _5: &state::reserve::ReserveLiquidity;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _8: !;
    let mut _9: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _10: math::decimal::Decimal;
    let mut _11: &state::reserve::ReserveCollateral;
    let mut _12: math::decimal::Decimal;
    let mut _13: isize;
    let mut _14: isize;
    let mut _15: isize;
    let mut _16: isize;
    let mut _17: isize;
    scope 1 {
        debug total_liquidity => _2;
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _10;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &((*_1).3: state::reserve::ReserveLiquidity);
        _4 = ReserveLiquidity::total_supply(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        _3 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _4) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        StorageDead(_4);
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_10);
        _10 = ((_3 as Continue).0: math::decimal::Decimal);
        _2 = _10;
        StorageDead(_10);
        _13 = discriminant(_3);
        StorageDead(_3);
        StorageLive(_11);
        _11 = &((*_1).4: state::reserve::ReserveCollateral);
        StorageLive(_12);
        _12 = _2;
        _0 = ReserveCollateral::exchange_rate(move _11, move _12) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_7);
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_9);
        _9 = move _7;
        _0 = <Result<CollateralExchangeRate, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _9) -> [return: bb6, unwind: bb10];
    }

    bb6: {
        StorageDead(_9);
        StorageDead(_7);
        _15 = discriminant(_3);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb8;
    }

    bb7: {
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_2);
        goto -> bb8;
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        resume;
    }

    bb10 (cleanup): {
        _17 = discriminant(_3);
        goto -> bb9;
    }
}
