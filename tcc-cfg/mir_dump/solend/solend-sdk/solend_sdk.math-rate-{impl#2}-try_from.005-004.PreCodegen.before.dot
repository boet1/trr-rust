digraph Mir_0_191 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn &lt;rate::Rate as TryFrom&lt;decimal::Decimal&gt;&gt;::try_from(_1: math::decimal::Decimal) -&gt; std::result::Result&lt;math::rate::Rate, solana_program::program_error::ProgramError&gt;<br align="left"/>let mut _2: math::rate::Rate;<br align="left"/>let mut _3: math::rate::U128;<br align="left"/>let mut _4: u128;<br align="left"/>let mut _5: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;, u128&gt;;<br align="left"/>let mut _6: std::result::Result&lt;u128, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _7: &amp;ReErased math::decimal::Decimal;<br align="left"/>let mut _8: isize;<br align="left"/>let _9: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _10: !;<br align="left"/>let mut _11: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let _12: u128;<br align="left"/>let mut _13: bool;<br align="left"/>let mut _14: isize;<br align="left"/>let mut _15: isize;<br align="left"/>let mut _16: isize;<br align="left"/>let mut _17: isize;<br align="left"/>let mut _18: isize;<br align="left"/>debug decimal =&gt; _1;<br align="left"/>debug residual =&gt; _9;<br align="left"/>debug val =&gt; _12;<br align="left"/>>;
    bb0__0_191 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_13 = const false<br/>StorageLive(_2)<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>_7 = &amp;_1<br/></td></tr><tr><td align="left">_6 = decimal::Decimal::to_scaled_val(move _7)</td></tr></table>>];
    bb1__0_191 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/></td></tr><tr><td align="left">_5 = &lt;Result&lt;u128, ProgramError&gt; as Try&gt;::branch(move _6)</td></tr></table>>];
    bb2__0_191 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_13 = const true<br/>StorageDead(_6)<br/>_8 = discriminant(_5)<br/></td></tr><tr><td align="left">switchInt(move _8)</td></tr></table>>];
    bb3__0_191 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_12)<br/>_12 = ((_5 as Continue).0: u128)<br/>_4 = _12<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">_3 = &lt;U128 as From&lt;u128&gt;&gt;::from(move _4)</td></tr></table>>];
    bb4__0_191 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_191 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_9)<br/>_9 = move ((_5 as Break).0: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;)<br/>StorageLive(_11)<br/>_11 = move _9<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;rate::Rate, ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, ProgramError&gt;&gt;&gt;::from_residual(move _11)</td></tr></table>>];
    bb6__0_191 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_9)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/>StorageDead(_2)<br/>_16 = discriminant(_5)<br/>_13 = const false<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_191 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>_2 = rate::Rate(move _3)<br/>StorageDead(_3)<br/>_0 = Result::&lt;rate::Rate, ProgramError&gt;::Ok(move _2)<br/>StorageDead(_2)<br/>_14 = discriminant(_5)<br/>_13 = const false<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_191 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">return</td></tr></table>>];
    bb9__0_191 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">9 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb10__0_191 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">10 (cleanup)</td></tr><tr><td align="left" balign="left">_18 = discriminant(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_191 -> bb1__0_191 [label="return"];
    bb1__0_191 -> bb2__0_191 [label="return"];
    bb1__0_191 -> bb9__0_191 [label="unwind"];
    bb2__0_191 -> bb3__0_191 [label="0"];
    bb2__0_191 -> bb5__0_191 [label="1"];
    bb2__0_191 -> bb4__0_191 [label="otherwise"];
    bb3__0_191 -> bb7__0_191 [label="return"];
    bb3__0_191 -> bb10__0_191 [label="unwind"];
    bb5__0_191 -> bb6__0_191 [label="return"];
    bb5__0_191 -> bb10__0_191 [label="unwind"];
    bb6__0_191 -> bb8__0_191 [label=""];
    bb7__0_191 -> bb8__0_191 [label=""];
    bb10__0_191 -> bb9__0_191 [label=""];
}
