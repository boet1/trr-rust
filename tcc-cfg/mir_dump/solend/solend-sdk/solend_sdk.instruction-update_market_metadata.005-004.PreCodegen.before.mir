// MIR for `update_market_metadata` before PreCodegen

fn update_market_metadata(_1: Pubkey, _2: lending_market_metadata::LendingMarketMetadata, _3: Pubkey, _4: Pubkey) -> Instruction {
    debug program_id => _1;
    debug metadata => _2;
    debug lending_market_pubkey => _3;
    debug lending_market_owner => _4;
    let mut _0: solana_program::instruction::Instruction;
    let _5: solana_program::pubkey::Pubkey;
    let _6: u8;
    let mut _7: (solana_program::pubkey::Pubkey, u8);
    let mut _8: &[&[u8]];
    let mut _9: &[&[u8]; 2];
    let _10: &[&[u8]; 2];
    let _11: [&[u8]; 2];
    let mut _12: &[u8];
    let _13: &[u8];
    let _14: &[u8];
    let mut _15: &[u8; 32];
    let _16: [u8; 32];
    let mut _17: solana_program::pubkey::Pubkey;
    let mut _18: std::ops::RangeTo<usize>;
    let mut _19: &[u8];
    let mut _20: &[u8; 8];
    let _21: &[u8; 8];
    let mut _22: &solana_program::pubkey::Pubkey;
    let _23: &solana_program::pubkey::Pubkey;
    let mut _24: u8;
    let _26: usize;
    let mut _27: usize;
    let mut _28: bool;
    let _29: ();
    let mut _30: &mut [u8];
    let mut _31: &mut [u8];
    let mut _32: &mut [u8; 830];
    let mut _33: std::ops::RangeFrom<usize>;
    let mut _34: &[u8];
    let _35: &[u8];
    let mut _36: &state::lending_market_metadata::LendingMarketMetadata;
    let _37: &state::lending_market_metadata::LendingMarketMetadata;
    let mut _38: solana_program::pubkey::Pubkey;
    let mut _39: std::vec::Vec<solana_program::instruction::AccountMeta>;
    let mut _40: std::boxed::Box<[solana_program::instruction::AccountMeta]>;
    let mut _41: std::boxed::Box<[solana_program::instruction::AccountMeta; 4]>;
    let mut _42: usize;
    let mut _43: usize;
    let mut _44: *mut u8;
    let mut _45: std::boxed::Box<[solana_program::instruction::AccountMeta; 4]>;
    let mut _46: solana_program::instruction::AccountMeta;
    let mut _47: solana_program::pubkey::Pubkey;
    let mut _48: solana_program::instruction::AccountMeta;
    let mut _49: solana_program::pubkey::Pubkey;
    let mut _50: solana_program::instruction::AccountMeta;
    let mut _51: solana_program::pubkey::Pubkey;
    let mut _52: solana_program::instruction::AccountMeta;
    let mut _53: solana_program::pubkey::Pubkey;
    let mut _54: std::vec::Vec<u8>;
    let mut _55: &[u8];
    let mut _56: &[u8; 830];
    let mut _57: *const [solana_program::instruction::AccountMeta; 4];
    scope 1 {
        debug lending_market_metadata_pubkey => _5;
        debug bump_seed => _6;
        let mut _25: [u8; 830];
        scope 2 {
            debug data => _25;
            let mut _58: *const ();
            let mut _59: usize;
            let mut _60: usize;
            let mut _61: usize;
            let mut _62: usize;
            let mut _63: bool;
            scope 3 {
            }
        }
    }

    bb0: {
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = _3;
        _16 = Pubkey::to_bytes(move _17) -> [return: bb1, unwind continue];
    }

    bb1: {
        _15 = &_16;
        StorageDead(_17);
        StorageLive(_18);
        _18 = RangeTo::<usize> { end: const _ };
        _14 = <[u8; 32] as Index<RangeTo<usize>>>::index(move _15, move _18) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_18);
        StorageDead(_15);
        _13 = &(*_14);
        _12 = &(*_13);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = const b"MetaData";
        _20 = &(*_21);
        _19 = move _20 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_20);
        _11 = [move _12, move _19];
        StorageDead(_19);
        StorageDead(_12);
        _10 = &_11;
        _9 = &(*_10);
        _8 = move _9 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_9);
        StorageLive(_22);
        StorageLive(_23);
        _23 = &_1;
        _22 = &(*_23);
        _7 = Pubkey::find_program_address(move _8, move _22) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_22);
        StorageDead(_8);
        StorageLive(_5);
        _5 = (_7.0: solana_program::pubkey::Pubkey);
        StorageLive(_6);
        _6 = (_7.1: u8);
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_7);
        StorageLive(_24);
        _24 = _6;
        (_2.0: u8) = move _24;
        StorageDead(_24);
        StorageLive(_25);
        _25 = [const 0_u8; 830];
        StorageLive(_26);
        _26 = const 0_usize;
        _27 = Len(_25);
        _28 = Lt(_26, _27);
        assert(move _28, "index out of bounds: the length is {} but the index is {}", move _27, _26) -> [success: bb4, unwind continue];
    }

    bb4: {
        _25[_26] = const 22_u8;
        StorageDead(_26);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = &mut _25;
        StorageLive(_33);
        _33 = RangeFrom::<usize> { start: const 1_usize };
        _31 = <[u8; 830] as IndexMut<RangeFrom<usize>>>::index_mut(move _32, move _33) -> [return: bb5, unwind continue];
    }

    bb5: {
        _30 = &mut (*_31);
        StorageDead(_33);
        StorageDead(_32);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &_2;
        _36 = &(*_37);
        _35 = bytes_of::<lending_market_metadata::LendingMarketMetadata>(move _36) -> [return: bb6, unwind continue];
    }

    bb6: {
        _34 = &(*_35);
        StorageDead(_36);
        _29 = core::slice::<impl [u8]>::copy_from_slice(move _30, move _34) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_34);
        StorageDead(_30);
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_31);
        StorageDead(_29);
        StorageLive(_38);
        _38 = _1;
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _42 = SizeOf([solana_program::instruction::AccountMeta; 4]);
        _43 = AlignOf([solana_program::instruction::AccountMeta; 4]);
        _44 = alloc::alloc::exchange_malloc(move _42, move _43) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageLive(_45);
        _45 = ShallowInitBox(move _44, [solana_program::instruction::AccountMeta; 4]);
        StorageLive(_46);
        StorageLive(_47);
        _47 = _3;
        _46 = AccountMeta::new_readonly(move _47, const false) -> [return: bb9, unwind: bb17];
    }

    bb9: {
        StorageDead(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = _4;
        _48 = AccountMeta::new(move _49, const true) -> [return: bb10, unwind: bb17];
    }

    bb10: {
        StorageDead(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = _5;
        _50 = AccountMeta::new(move _51, const false) -> [return: bb11, unwind: bb17];
    }

    bb11: {
        StorageDead(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = solana_program::system_program::id() -> [return: bb12, unwind: bb17];
    }

    bb12: {
        _52 = AccountMeta::new_readonly(move _53, const false) -> [return: bb13, unwind: bb17];
    }

    bb13: {
        StorageDead(_53);
        _57 = (((_45.0: std::ptr::Unique<[solana_program::instruction::AccountMeta; 4]>).0: std::ptr::NonNull<[solana_program::instruction::AccountMeta; 4]>).0: *const [solana_program::instruction::AccountMeta; 4]);
        _58 = _57 as *const () (PtrToPtr);
        _59 = _58 as usize (Transmute);
        _60 = AlignOf([solana_program::instruction::AccountMeta; 4]);
        _61 = Sub(_60, const 1_usize);
        _62 = BitAnd(_59, _61);
        _63 = Eq(_62, const 0_usize);
        assert(_63, "misaligned pointer dereference: address must be a multiple of {} but is {}", _60, _59) -> [success: bb19, unwind unreachable];
    }

    bb14: {
        StorageDead(_40);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = &_25;
        _55 = move _56 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_56);
        _54 = std::slice::<impl [u8]>::to_vec(move _55) -> [return: bb15, unwind: bb16];
    }

    bb15: {
        StorageDead(_55);
        _0 = Instruction { program_id: move _38, accounts: move _39, data: move _54 };
        StorageDead(_54);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_25);
        StorageDead(_6);
        StorageDead(_5);
        return;
    }

    bb16 (cleanup): {
        drop(_39) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        drop(_45) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        resume;
    }

    bb19: {
        (*_57) = [move _46, move _48, move _50, move _52];
        StorageDead(_52);
        StorageDead(_50);
        StorageDead(_48);
        StorageDead(_46);
        _41 = move _45;
        _40 = move _41 as std::boxed::Box<[solana_program::instruction::AccountMeta]> (PointerCoercion(Unsize));
        StorageDead(_45);
        StorageDead(_41);
        _39 = std::slice::<impl [AccountMeta]>::into_vec::<std::alloc::Global>(move _40) -> [return: bb14, unwind: bb18];
    }
}

alloc317 (size: 8, align: 1) {
    4d 65 74 61 44 61 74 61                         â”‚ MetaData
}
