// MIR for `decimal::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:587:3: 587:13>::is_zero` after PreCodegen

fn decimal::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:587:3: 587:13>::is_zero(_1: &U192) -> bool {
    debug self => _1;
    let mut _0: bool;
    let mut _2: !;
    let _3: &[u64; 3];
    let _4: ();
    let mut _5: std::ops::Range<usize>;
    let mut _6: std::ops::Range<usize>;
    let mut _8: ();
    let _9: ();
    let mut _10: std::option::Option<usize>;
    let mut _11: &mut std::ops::Range<usize>;
    let mut _12: &mut std::ops::Range<usize>;
    let mut _13: isize;
    let mut _14: !;
    let mut _16: bool;
    let mut _17: u64;
    let _18: usize;
    let mut _19: usize;
    let mut _20: bool;
    let mut _21: !;
    scope 1 {
        debug arr => _3;
        let mut _7: std::ops::Range<usize>;
        scope 2 {
            debug iter => _7;
            let _15: usize;
            scope 3 {
                debug i => _15;
            }
        }
    }

    bb0: {
        StorageLive(_3);
        _3 = &((*_1).0: [u64; 3]);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = std::ops::Range::<usize> { start: const 0_usize, end: const 3_usize };
        _5 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        StorageLive(_7);
        _7 = move _5;
        goto -> bb2;
    }

    bb2: {
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &mut _7;
        _11 = &mut (*_12);
        _10 = <std::ops::Range<usize> as Iterator>::next(move _11) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_11);
        _13 = discriminant(_10);
        switchInt(move _13) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        StorageLive(_15);
        _15 = ((_10 as Some).0: usize);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = _15;
        _19 = Len((*_3));
        _20 = Lt(_18, _19);
        assert(move _20, "index out of bounds: the length is {} but the index is {}", move _19, _18) -> [success: bb7, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _4 = const ();
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_4);
        _0 = const true;
        goto -> bb10;
    }

    bb7: {
        _17 = (*_3)[_18];
        _16 = Ne(move _17, const 0_u64);
        switchInt(move _16) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        StorageDead(_18);
        StorageDead(_17);
        _0 = const false;
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb10;
    }

    bb9: {
        StorageDead(_18);
        StorageDead(_17);
        _9 = const ();
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        _8 = const ();
        goto -> bb2;
    }

    bb10: {
        StorageDead(_3);
        return;
    }
}
