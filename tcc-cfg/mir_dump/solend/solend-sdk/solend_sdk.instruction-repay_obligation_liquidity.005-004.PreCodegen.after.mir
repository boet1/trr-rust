// MIR for `repay_obligation_liquidity` after PreCodegen

fn repay_obligation_liquidity(_1: Pubkey, _2: u64, _3: Pubkey, _4: Pubkey, _5: Pubkey, _6: Pubkey, _7: Pubkey, _8: Pubkey) -> Instruction {
    debug program_id => _1;
    debug liquidity_amount => _2;
    debug source_liquidity_pubkey => _3;
    debug destination_liquidity_pubkey => _4;
    debug repay_reserve_pubkey => _5;
    debug obligation_pubkey => _6;
    debug lending_market_pubkey => _7;
    debug user_transfer_authority_pubkey => _8;
    let mut _0: solana_program::instruction::Instruction;
    let mut _9: solana_program::pubkey::Pubkey;
    let mut _10: std::vec::Vec<solana_program::instruction::AccountMeta>;
    let mut _11: std::boxed::Box<[solana_program::instruction::AccountMeta]>;
    let mut _12: std::boxed::Box<[solana_program::instruction::AccountMeta; 7]>;
    let mut _13: usize;
    let mut _14: usize;
    let mut _15: *mut u8;
    let mut _16: std::boxed::Box<[solana_program::instruction::AccountMeta; 7]>;
    let mut _17: solana_program::instruction::AccountMeta;
    let mut _18: solana_program::pubkey::Pubkey;
    let mut _19: solana_program::instruction::AccountMeta;
    let mut _20: solana_program::pubkey::Pubkey;
    let mut _21: solana_program::instruction::AccountMeta;
    let mut _22: solana_program::pubkey::Pubkey;
    let mut _23: solana_program::instruction::AccountMeta;
    let mut _24: solana_program::pubkey::Pubkey;
    let mut _25: solana_program::instruction::AccountMeta;
    let mut _26: solana_program::pubkey::Pubkey;
    let mut _27: solana_program::instruction::AccountMeta;
    let mut _28: solana_program::pubkey::Pubkey;
    let mut _29: solana_program::instruction::AccountMeta;
    let mut _30: solana_program::pubkey::Pubkey;
    let mut _31: std::vec::Vec<u8>;
    let mut _32: &instruction::LendingInstruction;
    let _33: instruction::LendingInstruction;
    let mut _34: u64;
    let mut _35: *const [solana_program::instruction::AccountMeta; 7];
    let mut _36: *const ();
    let mut _37: usize;
    let mut _38: usize;
    let mut _39: usize;
    let mut _40: usize;
    let mut _41: bool;
    scope 1 {
    }

    bb0: {
        StorageLive(_9);
        _9 = _1;
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _13 = SizeOf([solana_program::instruction::AccountMeta; 7]);
        _14 = AlignOf([solana_program::instruction::AccountMeta; 7]);
        _15 = alloc::alloc::exchange_malloc(move _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_16);
        _16 = ShallowInitBox(move _15, [solana_program::instruction::AccountMeta; 7]);
        StorageLive(_17);
        StorageLive(_18);
        _18 = _3;
        _17 = AccountMeta::new(move _18, const false) -> [return: bb2, unwind: bb13];
    }

    bb2: {
        StorageDead(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = _4;
        _19 = AccountMeta::new(move _20, const false) -> [return: bb3, unwind: bb13];
    }

    bb3: {
        StorageDead(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = _5;
        _21 = AccountMeta::new(move _22, const false) -> [return: bb4, unwind: bb13];
    }

    bb4: {
        StorageDead(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = _6;
        _23 = AccountMeta::new(move _24, const false) -> [return: bb5, unwind: bb13];
    }

    bb5: {
        StorageDead(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = _7;
        _25 = AccountMeta::new_readonly(move _26, const false) -> [return: bb6, unwind: bb13];
    }

    bb6: {
        StorageDead(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = _8;
        _27 = AccountMeta::new_readonly(move _28, const true) -> [return: bb7, unwind: bb13];
    }

    bb7: {
        StorageDead(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = spl_token::id() -> [return: bb8, unwind: bb13];
    }

    bb8: {
        _29 = AccountMeta::new_readonly(move _30, const false) -> [return: bb9, unwind: bb13];
    }

    bb9: {
        StorageDead(_30);
        _35 = (((_16.0: std::ptr::Unique<[solana_program::instruction::AccountMeta; 7]>).0: std::ptr::NonNull<[solana_program::instruction::AccountMeta; 7]>).0: *const [solana_program::instruction::AccountMeta; 7]);
        _36 = _35 as *const () (PtrToPtr);
        _37 = _36 as usize (Transmute);
        _38 = AlignOf([solana_program::instruction::AccountMeta; 7]);
        _39 = Sub(_38, const 1_usize);
        _40 = BitAnd(_37, _39);
        _41 = Eq(_40, const 0_usize);
        assert(_41, "misaligned pointer dereference: address must be a multiple of {} but is {}", _38, _37) -> [success: bb15, unwind unreachable];
    }

    bb10: {
        StorageDead(_11);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = _2;
        _33 = LendingInstruction::RepayObligationLiquidity { liquidity_amount: move _34 };
        _32 = &_33;
        StorageDead(_34);
        _31 = LendingInstruction::pack(move _32) -> [return: bb11, unwind: bb12];
    }

    bb11: {
        StorageDead(_32);
        _0 = Instruction { program_id: move _9, accounts: move _10, data: move _31 };
        StorageDead(_31);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_33);
        return;
    }

    bb12 (cleanup): {
        drop(_10) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        drop(_16) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        resume;
    }

    bb15: {
        (*_35) = [move _17, move _19, move _21, move _23, move _25, move _27, move _29];
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_17);
        _12 = move _16;
        _11 = move _12 as std::boxed::Box<[solana_program::instruction::AccountMeta]> (PointerCoercion(Unsize));
        StorageDead(_16);
        StorageDead(_12);
        _10 = std::slice::<impl [AccountMeta]>::into_vec::<std::alloc::Global>(move _11) -> [return: bb10, unwind: bb14];
    }
}
