// MIR for `reserve::<impl at token-lending\sdk\src\state\reserve.rs:65:1: 65:13>::calculate_bonus` before PreCodegen

fn reserve::<impl at token-lending\sdk\src\state\reserve.rs:65:1: 65:13>::calculate_bonus(_1: &reserve::Reserve, _2: &obligation::Obligation) -> Result<Bonus, ProgramError> {
    debug self => _1;
    debug obligation => _2;
    let mut _0: std::result::Result<state::reserve::Bonus, solana_program::program_error::ProgramError>;
    let _3: ();
    let mut _4: bool;
    let mut _5: &math::decimal::Decimal;
    let mut _6: &math::decimal::Decimal;
    let mut _7: !;
    let _8: ();
    let mut _9: bool;
    let mut _10: !;
    let mut _11: state::reserve::Bonus;
    let mut _12: math::decimal::Decimal;
    let mut _13: math::decimal::Decimal;
    let _14: ();
    let mut _15: &str;
    let _16: &str;
    let mut _17: solana_program::program_error::ProgramError;
    let mut _18: error::LendingError;
    let _19: math::decimal::Decimal;
    let mut _20: u8;
    let mut _22: u8;
    let mut _24: u8;
    let _25: ();
    let mut _26: bool;
    let mut _27: &math::decimal::Decimal;
    let mut _28: &math::decimal::Decimal;
    let mut _29: !;
    let mut _30: state::reserve::Bonus;
    let mut _31: math::decimal::Decimal;
    let mut _32: math::decimal::Decimal;
    let mut _33: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _34: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _35: math::decimal::Decimal;
    let mut _36: math::decimal::Decimal;
    let mut _37: isize;
    let mut _39: !;
    let mut _40: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _42: math::decimal::Decimal;
    let mut _43: math::decimal::Decimal;
    let mut _45: math::decimal::Decimal;
    let mut _46: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _47: math::decimal::Decimal;
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _49: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _50: math::decimal::Decimal;
    let mut _51: math::decimal::Decimal;
    let mut _52: isize;
    let mut _54: !;
    let mut _55: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _57: math::decimal::Decimal;
    let mut _58: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _59: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _60: math::decimal::Decimal;
    let mut _61: math::decimal::Decimal;
    let mut _62: isize;
    let mut _64: !;
    let mut _65: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _67: {closure@token-lending\sdk\src\state\reserve.rs:420:33: 420:36};
    let mut _68: math::decimal::Decimal;
    let mut _70: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _71: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _72: math::decimal::Decimal;
    let mut _73: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _74: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _75: math::decimal::Decimal;
    let mut _76: math::decimal::Decimal;
    let mut _77: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _78: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _79: math::decimal::Decimal;
    let mut _80: math::decimal::Decimal;
    let mut _81: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _82: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _83: math::decimal::Decimal;
    let mut _84: math::decimal::Decimal;
    let mut _85: isize;
    let mut _87: !;
    let mut _88: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _90: isize;
    let mut _92: !;
    let mut _93: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _95: isize;
    let mut _97: !;
    let mut _98: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _100: math::decimal::Decimal;
    let mut _101: isize;
    let mut _103: !;
    let mut _104: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _106: state::reserve::Bonus;
    let mut _107: math::decimal::Decimal;
    let mut _108: math::decimal::Decimal;
    let mut _109: math::decimal::Decimal;
    let mut _110: math::decimal::Decimal;
    let mut _111: bool;
    let mut _112: bool;
    let mut _113: bool;
    let mut _114: bool;
    let mut _115: bool;
    let mut _116: bool;
    let mut _117: isize;
    let mut _118: isize;
    let mut _119: isize;
    let mut _120: isize;
    let mut _121: isize;
    let mut _122: isize;
    let mut _123: isize;
    let mut _124: isize;
    let mut _125: isize;
    let mut _126: isize;
    let mut _127: isize;
    let mut _128: isize;
    let mut _129: isize;
    let mut _130: isize;
    let mut _131: isize;
    let mut _132: isize;
    let mut _133: isize;
    let mut _134: isize;
    let mut _135: isize;
    let mut _136: isize;
    let mut _137: isize;
    let mut _138: isize;
    let mut _139: isize;
    let mut _140: isize;
    let mut _141: isize;
    let mut _142: isize;
    let mut _143: isize;
    let mut _144: isize;
    let mut _145: isize;
    let mut _146: isize;
    let mut _147: isize;
    let mut _148: isize;
    let mut _149: isize;
    scope 1 {
        debug liquidation_bonus => _19;
        let _21: math::decimal::Decimal;
        scope 2 {
            debug max_liquidation_bonus => _21;
            let _23: math::decimal::Decimal;
            scope 3 {
                debug protocol_liquidation_fee => _23;
                let _38: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                let _41: math::decimal::Decimal;
                let _44: math::decimal::Decimal;
                let _53: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                let _56: math::decimal::Decimal;
                let _63: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                let _66: math::decimal::Decimal;
                scope 4 {
                    debug residual => _38;
                    scope 5 {
                    }
                }
                scope 6 {
                    debug val => _41;
                    scope 7 {
                    }
                }
                scope 8 {
                    debug weight => _44;
                    let _69: math::decimal::Decimal;
                    let _86: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                    let _89: math::decimal::Decimal;
                    let _91: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                    let _94: math::decimal::Decimal;
                    let _96: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                    let _99: math::decimal::Decimal;
                    let _102: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                    let _105: math::decimal::Decimal;
                    scope 17 {
                        debug bonus => _69;
                    }
                    scope 18 {
                        debug residual => _86;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _89;
                        scope 21 {
                        }
                    }
                    scope 22 {
                        debug residual => _91;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug val => _94;
                        scope 25 {
                        }
                    }
                    scope 26 {
                        debug residual => _96;
                        scope 27 {
                        }
                    }
                    scope 28 {
                        debug val => _99;
                        scope 29 {
                        }
                    }
                    scope 30 {
                        debug residual => _102;
                        scope 31 {
                        }
                    }
                    scope 32 {
                        debug val => _105;
                        scope 33 {
                        }
                    }
                }
                scope 9 {
                    debug residual => _53;
                    scope 10 {
                    }
                }
                scope 11 {
                    debug val => _56;
                    scope 12 {
                    }
                }
                scope 13 {
                    debug residual => _63;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _66;
                    scope 16 {
                    }
                }
            }
        }
    }

    bb0: {
        _115 = const false;
        _114 = const false;
        _116 = const false;
        _113 = const false;
        _112 = const false;
        _111 = const false;
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &((*_2).7: math::decimal::Decimal);
        StorageLive(_6);
        _6 = &((*_2).11: math::decimal::Decimal);
        _4 = <decimal::Decimal as PartialOrd>::lt(move _5, move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _4) -> [0: bb9, otherwise: bb2];
    }

    bb2: {
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_8);
        StorageLive(_9);
        _9 = ((*_2).14: bool);
        switchInt(move _9) -> [0: bb6, otherwise: bb3];
    }

    bb3: {
        StorageLive(_11);
        StorageLive(_12);
        _12 = decimal::Decimal::zero() -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageLive(_13);
        _13 = decimal::Decimal::zero() -> [return: bb5, unwind continue];
    }

    bb5: {
        _11 = Bonus { total_bonus: move _12, protocol_liquidation_fee: move _13 };
        StorageDead(_13);
        StorageDead(_12);
        _0 = Result::<Bonus, ProgramError>::Ok(move _11);
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb65;
    }

    bb6: {
        _8 = const ();
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = const "Obligation is healthy so a liquidation bonus can't be calculated";
        _15 = &(*_16);
        _14 = solana_program::log::sol_log(move _15) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_15);
        StorageDead(_16);
        StorageDead(_14);
        StorageLive(_17);
        StorageLive(_18);
        _18 = LendingError::ObligationHealthy;
        _17 = <LendingError as Into<ProgramError>>::into(move _18) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_18);
        _0 = Result::<Bonus, ProgramError>::Err(move _17);
        StorageDead(_17);
        goto -> bb65;
    }

    bb9: {
        StorageDead(_6);
        StorageDead(_5);
        _3 = const ();
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_19);
        StorageLive(_20);
        _20 = (((*_1).5: state::reserve::ReserveConfig).3: u8);
        _19 = decimal::Decimal::from_percent(move _20) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = (((*_1).5: state::reserve::ReserveConfig).4: u8);
        _21 = decimal::Decimal::from_percent(move _22) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = (((*_1).5: state::reserve::ReserveConfig).15: u8);
        _23 = decimal::Decimal::from_deca_bps(move _24) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &((*_2).11: math::decimal::Decimal);
        StorageLive(_28);
        _28 = &((*_2).12: math::decimal::Decimal);
        _26 = <decimal::Decimal as PartialEq>::eq(move _27, move _28) -> [return: bb13, unwind continue];
    }

    bb13: {
        switchInt(move _26) -> [0: bb23, otherwise: bb14];
    }

    bb14: {
        StorageDead(_28);
        StorageDead(_27);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = _19;
        StorageLive(_36);
        _36 = _23;
        _34 = <decimal::Decimal as common::TryAdd>::try_add(move _35, move _36) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_36);
        StorageDead(_35);
        _33 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _34) -> [return: bb16, unwind: bb67];
    }

    bb16: {
        _115 = const true;
        StorageDead(_34);
        _37 = discriminant(_33);
        switchInt(move _37) -> [0: bb17, 1: bb19, otherwise: bb18];
    }

    bb17: {
        StorageLive(_41);
        _41 = ((_33 as Continue).0: math::decimal::Decimal);
        _32 = _41;
        StorageDead(_41);
        StorageLive(_42);
        _42 = decimal::Decimal::from_percent(const _) -> [return: bb21, unwind: bb76];
    }

    bb18: {
        unreachable;
    }

    bb19: {
        StorageLive(_38);
        _38 = move ((_33 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_40);
        _40 = move _38;
        _0 = <Result<Bonus, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _40) -> [return: bb20, unwind: bb76];
    }

    bb20: {
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_30);
        goto -> bb69;
    }

    bb21: {
        _31 = std::cmp::min::<decimal::Decimal>(move _32, move _42) -> [return: bb22, unwind: bb76];
    }

    bb22: {
        StorageDead(_42);
        StorageDead(_32);
        StorageLive(_43);
        _43 = _23;
        _30 = Bonus { total_bonus: move _31, protocol_liquidation_fee: move _43 };
        StorageDead(_43);
        StorageDead(_31);
        _0 = Result::<Bonus, ProgramError>::Ok(move _30);
        StorageDead(_30);
        goto -> bb69;
    }

    bb23: {
        StorageDead(_28);
        StorageDead(_27);
        _25 = const ();
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = ((*_2).7: math::decimal::Decimal);
        StorageLive(_51);
        _51 = ((*_2).11: math::decimal::Decimal);
        _49 = <decimal::Decimal as common::TrySub>::try_sub(move _50, move _51) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_51);
        StorageDead(_50);
        _48 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _49) -> [return: bb25, unwind: bb67];
    }

    bb25: {
        _114 = const true;
        StorageDead(_49);
        _52 = discriminant(_48);
        switchInt(move _52) -> [0: bb26, 1: bb27, otherwise: bb18];
    }

    bb26: {
        StorageLive(_56);
        _56 = ((_48 as Continue).0: math::decimal::Decimal);
        _47 = _56;
        StorageDead(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = ((*_2).12: math::decimal::Decimal);
        StorageLive(_61);
        _61 = ((*_2).11: math::decimal::Decimal);
        _59 = <decimal::Decimal as common::TrySub>::try_sub(move _60, move _61) -> [return: bb29, unwind: bb75];
    }

    bb27: {
        StorageLive(_53);
        _53 = move ((_48 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_55);
        _55 = move _53;
        _0 = <Result<Bonus, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _55) -> [return: bb28, unwind: bb75];
    }

    bb28: {
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_45);
        goto -> bb68;
    }

    bb29: {
        StorageDead(_61);
        StorageDead(_60);
        _58 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _59) -> [return: bb30, unwind: bb75];
    }

    bb30: {
        _116 = const true;
        StorageDead(_59);
        _62 = discriminant(_58);
        switchInt(move _62) -> [0: bb31, 1: bb32, otherwise: bb18];
    }

    bb31: {
        StorageLive(_66);
        _66 = ((_58 as Continue).0: math::decimal::Decimal);
        _57 = _66;
        StorageDead(_66);
        _46 = <decimal::Decimal as common::TryDiv<decimal::Decimal>>::try_div(move _47, move _57) -> [return: bb34, unwind: bb74];
    }

    bb32: {
        StorageLive(_63);
        _63 = move ((_58 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_65);
        _65 = move _63;
        _0 = <Result<Bonus, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _65) -> [return: bb33, unwind: bb74];
    }

    bb33: {
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_57);
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_45);
        _137 = discriminant(_58);
        _116 = const false;
        StorageDead(_58);
        goto -> bb68;
    }

    bb34: {
        StorageDead(_57);
        StorageDead(_47);
        StorageLive(_67);
        _67 = {closure@token-lending\sdk\src\state\reserve.rs:420:33: 420:36};
        _45 = Result::<decimal::Decimal, ProgramError>::unwrap_or_else::<{closure@token-lending\sdk\src\state\reserve.rs:420:33: 420:36}>(move _46, move _67) -> [return: bb35, unwind: bb74];
    }

    bb35: {
        StorageDead(_67);
        StorageDead(_46);
        StorageLive(_68);
        _68 = decimal::Decimal::one() -> [return: bb36, unwind: bb74];
    }

    bb36: {
        _44 = std::cmp::min::<decimal::Decimal>(move _45, move _68) -> [return: bb37, unwind: bb74];
    }

    bb37: {
        StorageDead(_68);
        StorageDead(_45);
        _117 = discriminant(_58);
        _116 = const false;
        StorageDead(_58);
        _119 = discriminant(_48);
        _114 = const false;
        StorageDead(_48);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = _19;
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = _44;
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _83 = _21;
        StorageLive(_84);
        _84 = _19;
        _82 = <decimal::Decimal as common::TrySub>::try_sub(move _83, move _84) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_84);
        StorageDead(_83);
        _81 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _82) -> [return: bb39, unwind: bb67];
    }

    bb39: {
        _113 = const true;
        StorageDead(_82);
        _85 = discriminant(_81);
        switchInt(move _85) -> [0: bb40, 1: bb41, otherwise: bb18];
    }

    bb40: {
        StorageLive(_89);
        _89 = ((_81 as Continue).0: math::decimal::Decimal);
        _80 = _89;
        StorageDead(_89);
        _78 = <decimal::Decimal as common::TryMul<decimal::Decimal>>::try_mul(move _79, move _80) -> [return: bb43, unwind: bb73];
    }

    bb41: {
        StorageLive(_86);
        _86 = move ((_81 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_88);
        _88 = move _86;
        _0 = <Result<Bonus, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _88) -> [return: bb42, unwind: bb73];
    }

    bb42: {
        StorageDead(_88);
        StorageDead(_86);
        StorageDead(_80);
        StorageDead(_79);
        StorageDead(_78);
        StorageDead(_76);
        StorageDead(_75);
        StorageDead(_74);
        StorageDead(_72);
        StorageDead(_71);
        goto -> bb62;
    }

    bb43: {
        StorageDead(_80);
        StorageDead(_79);
        _77 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _78) -> [return: bb44, unwind: bb73];
    }

    bb44: {
        _112 = const true;
        StorageDead(_78);
        _90 = discriminant(_77);
        switchInt(move _90) -> [0: bb45, 1: bb46, otherwise: bb18];
    }

    bb45: {
        StorageLive(_94);
        _94 = ((_77 as Continue).0: math::decimal::Decimal);
        _76 = _94;
        StorageDead(_94);
        _74 = <decimal::Decimal as common::TryAdd>::try_add(move _75, move _76) -> [return: bb48, unwind: bb72];
    }

    bb46: {
        StorageLive(_91);
        _91 = move ((_77 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_93);
        _93 = move _91;
        _0 = <Result<Bonus, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _93) -> [return: bb47, unwind: bb72];
    }

    bb47: {
        StorageDead(_93);
        StorageDead(_91);
        StorageDead(_76);
        StorageDead(_75);
        StorageDead(_74);
        StorageDead(_72);
        StorageDead(_71);
        goto -> bb61;
    }

    bb48: {
        StorageDead(_76);
        StorageDead(_75);
        _73 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _74) -> [return: bb49, unwind: bb72];
    }

    bb49: {
        _111 = const true;
        StorageDead(_74);
        _95 = discriminant(_73);
        switchInt(move _95) -> [0: bb50, 1: bb51, otherwise: bb18];
    }

    bb50: {
        StorageLive(_99);
        _99 = ((_73 as Continue).0: math::decimal::Decimal);
        _72 = _99;
        StorageDead(_99);
        StorageLive(_100);
        _100 = _23;
        _71 = <decimal::Decimal as common::TryAdd>::try_add(move _72, move _100) -> [return: bb53, unwind: bb71];
    }

    bb51: {
        StorageLive(_96);
        _96 = move ((_73 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_98);
        _98 = move _96;
        _0 = <Result<Bonus, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _98) -> [return: bb52, unwind: bb71];
    }

    bb52: {
        StorageDead(_98);
        StorageDead(_96);
        StorageDead(_72);
        StorageDead(_71);
        goto -> bb60;
    }

    bb53: {
        StorageDead(_100);
        StorageDead(_72);
        _70 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _71) -> [return: bb54, unwind: bb71];
    }

    bb54: {
        StorageDead(_71);
        _101 = discriminant(_70);
        switchInt(move _101) -> [0: bb55, 1: bb56, otherwise: bb18];
    }

    bb55: {
        StorageLive(_105);
        _105 = ((_70 as Continue).0: math::decimal::Decimal);
        _69 = _105;
        StorageDead(_105);
        _121 = discriminant(_70);
        _123 = discriminant(_73);
        _125 = discriminant(_77);
        _127 = discriminant(_81);
        _113 = const false;
        StorageDead(_81);
        _112 = const false;
        StorageDead(_77);
        _111 = const false;
        StorageDead(_73);
        StorageDead(_70);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        _108 = _69;
        StorageLive(_109);
        _109 = decimal::Decimal::from_percent(const _) -> [return: bb58, unwind continue];
    }

    bb56: {
        StorageLive(_102);
        _102 = move ((_70 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_104);
        _104 = move _102;
        _0 = <Result<Bonus, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _104) -> [return: bb57, unwind: bb70];
    }

    bb57: {
        StorageDead(_104);
        StorageDead(_102);
        _129 = discriminant(_70);
        goto -> bb60;
    }

    bb58: {
        _107 = std::cmp::min::<decimal::Decimal>(move _108, move _109) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_109);
        StorageDead(_108);
        StorageLive(_110);
        _110 = _23;
        _106 = Bonus { total_bonus: move _107, protocol_liquidation_fee: move _110 };
        StorageDead(_110);
        StorageDead(_107);
        _0 = Result::<Bonus, ProgramError>::Ok(move _106);
        StorageDead(_106);
        StorageDead(_69);
        StorageDead(_44);
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_19);
        goto -> bb66;
    }

    bb60: {
        _131 = discriminant(_73);
        goto -> bb61;
    }

    bb61: {
        _133 = discriminant(_77);
        goto -> bb62;
    }

    bb62: {
        _135 = discriminant(_81);
        _113 = const false;
        StorageDead(_81);
        _112 = const false;
        StorageDead(_77);
        _111 = const false;
        StorageDead(_73);
        StorageDead(_70);
        StorageDead(_69);
        goto -> bb63;
    }

    bb63: {
        StorageDead(_44);
        goto -> bb64;
    }

    bb64: {
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_19);
        goto -> bb66;
    }

    bb65: {
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb66;
    }

    bb66: {
        return;
    }

    bb67 (cleanup): {
        resume;
    }

    bb68: {
        _139 = discriminant(_48);
        _114 = const false;
        StorageDead(_48);
        goto -> bb63;
    }

    bb69: {
        _141 = discriminant(_33);
        _115 = const false;
        StorageDead(_33);
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb64;
    }

    bb70 (cleanup): {
        _143 = discriminant(_70);
        goto -> bb71;
    }

    bb71 (cleanup): {
        _144 = discriminant(_73);
        goto -> bb72;
    }

    bb72 (cleanup): {
        _145 = discriminant(_77);
        goto -> bb73;
    }

    bb73 (cleanup): {
        _146 = discriminant(_81);
        goto -> bb67;
    }

    bb74 (cleanup): {
        _147 = discriminant(_58);
        goto -> bb75;
    }

    bb75 (cleanup): {
        _148 = discriminant(_48);
        goto -> bb67;
    }

    bb76 (cleanup): {
        _149 = discriminant(_33);
        goto -> bb67;
    }
}
