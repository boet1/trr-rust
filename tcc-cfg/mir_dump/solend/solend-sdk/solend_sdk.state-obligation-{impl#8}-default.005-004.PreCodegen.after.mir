// MIR for `obligation::<impl at token-lending\sdk\src\state\obligation.rs:24:24: 24:31>::default` after PreCodegen

fn obligation::<impl at token-lending\sdk\src\state\obligation.rs:24:24: 24:31>::default() -> obligation::Obligation {
    let mut _0: state::obligation::Obligation;
    let mut _1: u8;
    let mut _2: state::last_update::LastUpdate;
    let mut _3: solana_program::pubkey::Pubkey;
    let mut _4: solana_program::pubkey::Pubkey;
    let mut _5: std::vec::Vec<state::obligation::ObligationCollateral>;
    let mut _6: std::vec::Vec<state::obligation::ObligationLiquidity>;
    let mut _7: math::decimal::Decimal;
    let mut _8: math::decimal::Decimal;
    let mut _9: math::decimal::Decimal;
    let mut _10: math::decimal::Decimal;
    let mut _11: math::decimal::Decimal;
    let mut _12: math::decimal::Decimal;
    let mut _13: math::decimal::Decimal;
    let mut _14: bool;
    let mut _15: bool;

    bb0: {
        StorageLive(_1);
        _1 = <u8 as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_2);
        _2 = <last_update::LastUpdate as Default>::default() -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageLive(_3);
        _3 = <Pubkey as Default>::default() -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageLive(_4);
        _4 = <Pubkey as Default>::default() -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageLive(_5);
        _5 = <Vec<obligation::ObligationCollateral> as Default>::default() -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageLive(_6);
        _6 = <Vec<obligation::ObligationLiquidity> as Default>::default() -> [return: bb6, unwind: bb17];
    }

    bb6: {
        StorageLive(_7);
        _7 = <decimal::Decimal as Default>::default() -> [return: bb7, unwind: bb16];
    }

    bb7: {
        StorageLive(_8);
        _8 = <decimal::Decimal as Default>::default() -> [return: bb8, unwind: bb16];
    }

    bb8: {
        StorageLive(_9);
        _9 = <decimal::Decimal as Default>::default() -> [return: bb9, unwind: bb16];
    }

    bb9: {
        StorageLive(_10);
        _10 = <decimal::Decimal as Default>::default() -> [return: bb10, unwind: bb16];
    }

    bb10: {
        StorageLive(_11);
        _11 = <decimal::Decimal as Default>::default() -> [return: bb11, unwind: bb16];
    }

    bb11: {
        StorageLive(_12);
        _12 = <decimal::Decimal as Default>::default() -> [return: bb12, unwind: bb16];
    }

    bb12: {
        StorageLive(_13);
        _13 = <decimal::Decimal as Default>::default() -> [return: bb13, unwind: bb16];
    }

    bb13: {
        StorageLive(_14);
        _14 = <bool as Default>::default() -> [return: bb14, unwind: bb16];
    }

    bb14: {
        StorageLive(_15);
        _15 = <bool as Default>::default() -> [return: bb15, unwind: bb16];
    }

    bb15: {
        _0 = obligation::Obligation { version: move _1, last_update: move _2, lending_market: move _3, owner: move _4, deposits: move _5, borrows: move _6, deposited_value: move _7, borrowed_value: move _8, unweighted_borrowed_value: move _9, borrowed_value_upper_bound: move _10, allowed_borrow_value: move _11, unhealthy_borrow_value: move _12, super_unhealthy_borrow_value: move _13, borrowing_isolated_asset: move _14, closeable: move _15 };
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }

    bb16 (cleanup): {
        drop(_6) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        drop(_5) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        resume;
    }
}
