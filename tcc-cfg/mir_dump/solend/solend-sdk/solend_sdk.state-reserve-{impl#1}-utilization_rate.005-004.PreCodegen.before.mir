// MIR for `reserve::<impl at token-lending\sdk\src\state\reserve.rs:669:1: 669:22>::utilization_rate` before PreCodegen

fn reserve::<impl at token-lending\sdk\src\state\reserve.rs:669:1: 669:22>::utilization_rate(_1: &ReserveLiquidity) -> Result<rate::Rate, ProgramError> {
    debug self => _1;
    let mut _0: std::result::Result<math::rate::Rate, solana_program::program_error::ProgramError>;
    let _2: math::decimal::Decimal;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _4: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _5: &state::reserve::ReserveLiquidity;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _8: !;
    let mut _9: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _10: math::decimal::Decimal;
    let _11: ();
    let mut _12: bool;
    let mut _13: &math::decimal::Decimal;
    let mut _14: &math::decimal::Decimal;
    let _15: math::decimal::Decimal;
    let mut _16: bool;
    let mut _17: &math::decimal::Decimal;
    let mut _18: &math::decimal::Decimal;
    let _19: math::decimal::Decimal;
    let mut _20: !;
    let mut _21: math::rate::Rate;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _24: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _25: math::decimal::Decimal;
    let mut _26: math::decimal::Decimal;
    let mut _27: u64;
    let mut _28: isize;
    let mut _30: !;
    let mut _31: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _33: math::decimal::Decimal;
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _35: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _36: math::decimal::Decimal;
    let mut _37: math::decimal::Decimal;
    let mut _38: isize;
    let mut _40: !;
    let mut _41: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _43: bool;
    let mut _44: isize;
    let mut _45: isize;
    let mut _46: isize;
    let mut _47: isize;
    let mut _48: isize;
    let mut _49: isize;
    let mut _50: isize;
    let mut _51: isize;
    let mut _52: isize;
    let mut _53: isize;
    let mut _54: isize;
    let mut _55: isize;
    let mut _56: isize;
    let mut _57: isize;
    let mut _58: isize;
    scope 1 {
        debug total_supply => _2;
        let _22: math::decimal::Decimal;
        let _29: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _32: math::decimal::Decimal;
        scope 6 {
            debug denominator => _22;
            let _39: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
            let _42: math::decimal::Decimal;
            scope 11 {
                debug residual => _39;
                scope 12 {
                }
            }
            scope 13 {
                debug val => _42;
                scope 14 {
                }
            }
        }
        scope 7 {
            debug residual => _29;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _32;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _10;
        scope 5 {
        }
    }

    bb0: {
        _43 = const false;
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &(*_1);
        _4 = ReserveLiquidity::total_supply(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        _3 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _4) -> [return: bb2, unwind: bb30];
    }

    bb2: {
        StorageDead(_4);
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_10);
        _10 = ((_3 as Continue).0: math::decimal::Decimal);
        _2 = _10;
        StorageDead(_10);
        _44 = discriminant(_3);
        StorageDead(_3);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &_2;
        StorageLive(_14);
        StorageLive(_15);
        _15 = decimal::Decimal::zero() -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_7);
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_9);
        _9 = move _7;
        _0 = <Result<rate::Rate, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _9) -> [return: bb6, unwind: bb33];
    }

    bb6: {
        StorageDead(_9);
        StorageDead(_7);
        _54 = discriminant(_3);
        StorageDead(_3);
        goto -> bb28;
    }

    bb7: {
        _14 = &_15;
        _12 = <decimal::Decimal as PartialEq>::eq(move _13, move _14) -> [return: bb8, unwind continue];
    }

    bb8: {
        switchInt(move _12) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb13;
    }

    bb10: {
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_16);
        StorageLive(_17);
        _17 = &((*_1).6: math::decimal::Decimal);
        StorageLive(_18);
        StorageLive(_19);
        _19 = decimal::Decimal::zero() -> [return: bb11, unwind continue];
    }

    bb11: {
        _18 = &_19;
        _16 = <decimal::Decimal as PartialEq>::eq(move _17, move _18) -> [return: bb12, unwind continue];
    }

    bb12: {
        switchInt(move _16) -> [0: bb15, otherwise: bb13];
    }

    bb13: {
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        StorageLive(_21);
        _21 = rate::Rate::zero() -> [return: bb14, unwind continue];
    }

    bb14: {
        _0 = Result::<rate::Rate, ProgramError>::Ok(move _21);
        StorageDead(_21);
        StorageDead(_16);
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb28;
    }

    bb15: {
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        _11 = const ();
        StorageDead(_16);
        StorageDead(_12);
        StorageDead(_11);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = ((*_1).6: math::decimal::Decimal);
        StorageLive(_26);
        StorageLive(_27);
        _27 = ((*_1).5: u64);
        _26 = <decimal::Decimal as From<u64>>::from(move _27) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_27);
        _24 = <decimal::Decimal as common::TryAdd>::try_add(move _25, move _26) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_26);
        StorageDead(_25);
        _23 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _24) -> [return: bb18, unwind: bb30];
    }

    bb18: {
        StorageDead(_24);
        _28 = discriminant(_23);
        switchInt(move _28) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_32);
        _32 = ((_23 as Continue).0: math::decimal::Decimal);
        _22 = _32;
        StorageDead(_32);
        _46 = discriminant(_23);
        StorageDead(_23);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = ((*_1).6: math::decimal::Decimal);
        StorageLive(_37);
        _37 = _22;
        _35 = <decimal::Decimal as common::TryDiv<decimal::Decimal>>::try_div(move _36, move _37) -> [return: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_29);
        _29 = move ((_23 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_31);
        _31 = move _29;
        _0 = <Result<rate::Rate, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _31) -> [return: bb21, unwind: bb32];
    }

    bb21: {
        StorageDead(_31);
        StorageDead(_29);
        _52 = discriminant(_23);
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb28;
    }

    bb22: {
        StorageDead(_37);
        StorageDead(_36);
        _34 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _35) -> [return: bb23, unwind: bb30];
    }

    bb23: {
        _43 = const true;
        StorageDead(_35);
        _38 = discriminant(_34);
        switchInt(move _38) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_42);
        _42 = ((_34 as Continue).0: math::decimal::Decimal);
        _33 = _42;
        StorageDead(_42);
        _0 = <decimal::Decimal as TryInto<rate::Rate>>::try_into(move _33) -> [return: bb27, unwind: bb31];
    }

    bb25: {
        StorageLive(_39);
        _39 = move ((_34 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_41);
        _41 = move _39;
        _0 = <Result<rate::Rate, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _41) -> [return: bb26, unwind: bb31];
    }

    bb26: {
        StorageDead(_41);
        StorageDead(_39);
        StorageDead(_33);
        StorageDead(_22);
        StorageDead(_2);
        _50 = discriminant(_34);
        _43 = const false;
        StorageDead(_34);
        goto -> bb29;
    }

    bb27: {
        StorageDead(_33);
        StorageDead(_22);
        StorageDead(_2);
        _48 = discriminant(_34);
        _43 = const false;
        StorageDead(_34);
        goto -> bb29;
    }

    bb28: {
        StorageDead(_2);
        goto -> bb29;
    }

    bb29: {
        return;
    }

    bb30 (cleanup): {
        resume;
    }

    bb31 (cleanup): {
        _56 = discriminant(_34);
        goto -> bb30;
    }

    bb32 (cleanup): {
        _57 = discriminant(_23);
        goto -> bb30;
    }

    bb33 (cleanup): {
        _58 = discriminant(_3);
        goto -> bb30;
    }
}
