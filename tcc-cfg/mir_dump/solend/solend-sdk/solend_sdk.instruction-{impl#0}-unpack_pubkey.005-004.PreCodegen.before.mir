// MIR for `instruction::<impl at token-lending\sdk\src\instruction.rs:533:1: 533:24>::unpack_pubkey` before PreCodegen

fn instruction::<impl at token-lending\sdk\src\instruction.rs:533:1: 533:24>::unpack_pubkey(_1: &[u8]) -> Result<(Pubkey, &[u8]), ProgramError> {
    debug input => _1;
    let mut _0: std::result::Result<(solana_program::pubkey::Pubkey, &[u8]), solana_program::program_error::ProgramError>;
    let _2: ();
    let mut _3: bool;
    let mut _4: usize;
    let mut _5: &[u8];
    let mut _6: !;
    let _7: ();
    let mut _8: &str;
    let _9: &str;
    let mut _10: solana_program::program_error::ProgramError;
    let mut _11: error::LendingError;
    let _12: &[u8];
    let _13: &[u8];
    let mut _14: (&[u8], &[u8]);
    let mut _15: &[u8];
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::LendingError>, solana_program::pubkey::Pubkey>;
    let mut _18: std::result::Result<solana_program::pubkey::Pubkey, error::LendingError>;
    let mut _19: std::result::Result<solana_program::pubkey::Pubkey, std::array::TryFromSliceError>;
    let mut _20: &[u8];
    let mut _21: {closure@token-lending\sdk\src\instruction.rs:858:48: 858:51};
    let mut _22: isize;
    let mut _24: !;
    let mut _25: std::result::Result<std::convert::Infallible, error::LendingError>;
    let mut _27: (solana_program::pubkey::Pubkey, &[u8]);
    let mut _28: solana_program::pubkey::Pubkey;
    let mut _29: &[u8];
    scope 1 {
        debug key => _12;
        debug rest => _13;
        let _16: solana_program::pubkey::Pubkey;
        let _23: std::result::Result<std::convert::Infallible, error::LendingError>;
        let _26: solana_program::pubkey::Pubkey;
        scope 2 {
            debug pk => _16;
        }
        scope 3 {
            debug residual => _23;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _26;
            scope 6 {
            }
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &(*_1);
        _4 = core::slice::<impl [u8]>::len(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        _3 = Lt(move _4, const _);
        switchInt(move _3) -> [0: bb5, otherwise: bb2];
    }

    bb2: {
        StorageDead(_4);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = const "Pubkey cannot be unpacked";
        _8 = &(*_9);
        _7 = solana_program::log::sol_log(move _8) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_8);
        StorageDead(_9);
        StorageDead(_7);
        StorageLive(_10);
        StorageLive(_11);
        _11 = LendingError::InstructionUnpackError;
        _10 = <LendingError as Into<ProgramError>>::into(move _11) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_11);
        _0 = Result::<(Pubkey, &[u8]), ProgramError>::Err(move _10);
        StorageDead(_10);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb14;
    }

    bb5: {
        StorageDead(_4);
        _2 = const ();
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &(*_1);
        _14 = core::slice::<impl [u8]>::split_at(move _15, const _) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_15);
        StorageLive(_12);
        _12 = (_14.0: &[u8]);
        StorageLive(_13);
        _13 = (_14.1: &[u8]);
        StorageDead(_14);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = _12;
        _19 = <Pubkey as TryFrom<&[u8]>>::try_from(move _20) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_20);
        StorageLive(_21);
        _21 = {closure@token-lending\sdk\src\instruction.rs:858:48: 858:51};
        _18 = Result::<Pubkey, TryFromSliceError>::map_err::<LendingError, {closure@token-lending\sdk\src\instruction.rs:858:48: 858:51}>(move _19, move _21) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_21);
        StorageDead(_19);
        _17 = <Result<Pubkey, LendingError> as Try>::branch(move _18) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_18);
        _22 = discriminant(_17);
        switchInt(move _22) -> [0: bb10, 1: bb12, otherwise: bb11];
    }

    bb10: {
        StorageLive(_26);
        _26 = ((_17 as Continue).0: solana_program::pubkey::Pubkey);
        _16 = _26;
        StorageDead(_26);
        StorageDead(_17);
        StorageLive(_27);
        StorageLive(_28);
        _28 = _16;
        StorageLive(_29);
        _29 = &(*_13);
        _27 = (move _28, move _29);
        StorageDead(_29);
        StorageDead(_28);
        _0 = Result::<(Pubkey, &[u8]), ProgramError>::Ok(move _27);
        StorageDead(_27);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb14;
    }

    bb11: {
        unreachable;
    }

    bb12: {
        StorageLive(_23);
        _23 = move ((_17 as Break).0: std::result::Result<std::convert::Infallible, error::LendingError>);
        StorageLive(_25);
        _25 = move _23;
        _0 = <Result<(Pubkey, &[u8]), ProgramError> as FromResidual<Result<Infallible, LendingError>>>::from_residual(move _25) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb14;
    }

    bb14: {
        return;
    }
}
