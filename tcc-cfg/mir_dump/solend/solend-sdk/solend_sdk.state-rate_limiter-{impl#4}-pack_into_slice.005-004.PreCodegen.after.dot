digraph Mir_0_403 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn &lt;rate_limiter::RateLimiter as Pack&gt;::pack_into_slice(_1: &amp;ReErased state::rate_limiter::RateLimiter, _2: &amp;ReErased mut [u8]) -&gt; ()<br align="left"/>let _3: &amp;ReErased mut [u8; 56_usize];<br align="left"/>let mut _4: &amp;ReErased mut [u8; 56_usize];<br align="left"/>let mut _5: &amp;ReErased mut [u8; 56_usize];<br align="left"/>let _6: usize;<br align="left"/>let _7: &amp;ReErased mut [u8];<br align="left"/>let mut _8: &amp;ReErased mut [u8];<br align="left"/>let mut _9: &amp;ReErased mut [u8];<br align="left"/>let mut _10: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _11: usize;<br align="left"/>let mut _12: usize;<br align="left"/>let mut _13: usize;<br align="left"/>let mut _14: (usize, bool);<br align="left"/>let mut _15: &amp;ReErased mut [u8; 56_usize];<br align="left"/>let mut _16: &amp;ReErased mut [u8];<br align="left"/>let _17: &amp;ReErased mut [u8; 8_usize];<br align="left"/>let _18: &amp;ReErased mut [u8; 8_usize];<br align="left"/>let _19: &amp;ReErased mut [u8; 16_usize];<br align="left"/>let _20: &amp;ReErased mut [u8; 8_usize];<br align="left"/>let _21: &amp;ReErased mut [u8; 16_usize];<br align="left"/>let mut _22: (&amp;ReErased mut [u8; 8_usize], &amp;ReErased mut [u8; 8_usize], &amp;ReErased mut [u8; 16_usize], &amp;ReErased mut [u8; 8_usize], &amp;ReErased mut [u8; 16_usize]);<br align="left"/>let _23: &amp;ReErased mut [u8; 56_usize];<br align="left"/>let mut _24: &amp;ReErased mut [u8; 56_usize];<br align="left"/>let mut _25: [u8; 8_usize];<br align="left"/>let mut _26: u64;<br align="left"/>let mut _27: [u8; 8_usize];<br align="left"/>let mut _28: u64;<br align="left"/>let _29: ();<br align="left"/>let mut _30: math::decimal::Decimal;<br align="left"/>let mut _31: &amp;ReErased mut [u8; 16_usize];<br align="left"/>let mut _32: [u8; 8_usize];<br align="left"/>let mut _33: u64;<br align="left"/>let _34: ();<br align="left"/>let mut _35: math::decimal::Decimal;<br align="left"/>let mut _36: &amp;ReErased mut [u8; 16_usize];<br align="left"/>debug self =&gt; _1;<br align="left"/>debug dst =&gt; _2;<br align="left"/>debug dst =&gt; _3;<br align="left"/>debug offset =&gt; _6;<br align="left"/>debug slice =&gt; _7;<br align="left"/>debug config_max_outflow_dst =&gt; _17;<br align="left"/>debug config_window_duration_dst =&gt; _18;<br align="left"/>debug prev_qty_dst =&gt; _19;<br align="left"/>debug window_start_dst =&gt; _20;<br align="left"/>debug cur_qty_dst =&gt; _21;<br align="left"/>debug input =&gt; _23;<br align="left"/>>;
    bb0__0_403 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = const 0_usize<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = &amp;mut (*_2)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>_11 = _6<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>_13 = _6<br/>_14 = CheckedAdd(_13, const _)<br/></td></tr><tr><td align="left">assert(!move (_14.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _13, const _)</td></tr></table>>];
    bb1__0_403 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_12 = move (_14.0: usize)<br/>StorageDead(_13)<br/>_10 = std::ops::Range::&lt;usize&gt; { start: move _11, end: move _12 }<br/>StorageDead(_12)<br/>StorageDead(_11)<br/></td></tr><tr><td align="left">_8 = &lt;[u8] as IndexMut&lt;std::ops::Range&lt;usize&gt;&gt;&gt;::index_mut(move _9, move _10)</td></tr></table>>];
    bb2__0_403 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_9)<br/>_7 = &amp;mut (*_8)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>_16 = &amp;mut (*_7)<br/></td></tr><tr><td align="left">_15 = &lt;rate_limiter::RateLimiter as Pack&gt;::pack_into_slice::as_array::&lt;u8&gt;(move _16)</td></tr></table>>];
    bb3__0_403 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>_5 = &amp;mut (*_15)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/>StorageDead(_6)<br/>_4 = &amp;mut (*_5)<br/>_3 = &amp;mut (*_4)<br/>StorageDead(_15)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>_23 = move _3<br/>StorageLive(_24)<br/>_24 = &amp;mut (*_23)<br/></td></tr><tr><td align="left">_22 = &lt;rate_limiter::RateLimiter as Pack&gt;::pack_into_slice::as_arrays::&lt;u8&gt;(move _24)</td></tr></table>>];
    bb4__0_403 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/>StorageDead(_23)<br/>StorageLive(_17)<br/>_17 = move (_22.0: &amp;mut [u8; 8])<br/>StorageLive(_18)<br/>_18 = move (_22.1: &amp;mut [u8; 8])<br/>StorageLive(_19)<br/>_19 = move (_22.2: &amp;mut [u8; 16])<br/>StorageLive(_20)<br/>_20 = move (_22.3: &amp;mut [u8; 8])<br/>StorageLive(_21)<br/>_21 = move (_22.4: &amp;mut [u8; 16])<br/>StorageDead(_22)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>_26 = (((*_1).0: state::rate_limiter::RateLimiterConfig).1: u64)<br/></td></tr><tr><td align="left">_25 = core::num::&lt;impl u64&gt;::to_le_bytes(move _26)</td></tr></table>>];
    bb5__0_403 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>(*_17) = move _25<br/>StorageDead(_25)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>_28 = (((*_1).0: state::rate_limiter::RateLimiterConfig).0: u64)<br/></td></tr><tr><td align="left">_27 = core::num::&lt;impl u64&gt;::to_le_bytes(move _28)</td></tr></table>>];
    bb6__0_403 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>(*_18) = move _27<br/>StorageDead(_27)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>_30 = ((*_1).1: math::decimal::Decimal)<br/>StorageLive(_31)<br/>_31 = &amp;mut (*_19)<br/></td></tr><tr><td align="left">_29 = state::pack_decimal(move _30, move _31)</td></tr></table>>];
    bb7__0_403 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/>StorageDead(_30)<br/>StorageDead(_29)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>_33 = ((*_1).2: u64)<br/></td></tr><tr><td align="left">_32 = core::num::&lt;impl u64&gt;::to_le_bytes(move _33)</td></tr></table>>];
    bb8__0_403 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>(*_20) = move _32<br/>StorageDead(_32)<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>_35 = ((*_1).3: math::decimal::Decimal)<br/>StorageLive(_36)<br/>_36 = &amp;mut (*_21)<br/></td></tr><tr><td align="left">_34 = state::pack_decimal(move _35, move _36)</td></tr></table>>];
    bb9__0_403 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_36)<br/>StorageDead(_35)<br/>StorageDead(_34)<br/>_0 = const ()<br/>StorageDead(_21)<br/>StorageDead(_20)<br/>StorageDead(_19)<br/>StorageDead(_18)<br/>StorageDead(_17)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_403 -> bb1__0_403 [label="success"];
    bb1__0_403 -> bb2__0_403 [label="return"];
    bb2__0_403 -> bb3__0_403 [label="return"];
    bb3__0_403 -> bb4__0_403 [label="return"];
    bb4__0_403 -> bb5__0_403 [label="return"];
    bb5__0_403 -> bb6__0_403 [label="return"];
    bb6__0_403 -> bb7__0_403 [label="return"];
    bb7__0_403 -> bb8__0_403 [label="return"];
    bb8__0_403 -> bb9__0_403 [label="return"];
}
