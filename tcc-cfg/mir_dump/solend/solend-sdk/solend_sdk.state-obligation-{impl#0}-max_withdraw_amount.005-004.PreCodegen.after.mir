// MIR for `obligation::<impl at token-lending\sdk\src\state\obligation.rs:68:1: 68:16>::max_withdraw_amount` after PreCodegen

fn obligation::<impl at token-lending\sdk\src\state\obligation.rs:68:1: 68:16>::max_withdraw_amount(_1: &obligation::Obligation, _2: &obligation::ObligationCollateral, _3: &reserve::Reserve) -> Result<u64, ProgramError> {
    debug self => _1;
    debug collateral => _2;
    debug withdraw_reserve => _3;
    let mut _0: std::result::Result<u64, solana_program::program_error::ProgramError>;
    let _4: ();
    let mut _5: bool;
    let mut _6: &std::vec::Vec<state::obligation::ObligationLiquidity>;
    let mut _7: !;
    let mut _8: u64;
    let _9: ();
    let mut _10: bool;
    let mut _11: &math::decimal::Decimal;
    let mut _12: &math::decimal::Decimal;
    let mut _13: !;
    let _14: math::rate::Rate;
    let mut _15: &state::reserve::Reserve;
    let _16: ();
    let mut _17: bool;
    let mut _18: &math::rate::Rate;
    let mut _19: &math::rate::Rate;
    let _20: math::rate::Rate;
    let mut _21: !;
    let mut _22: u64;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _25: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _26: math::decimal::Decimal;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _28: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _29: math::decimal::Decimal;
    let mut _30: math::decimal::Decimal;
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _36: math::rate::Rate;
    let mut _37: isize;
    let mut _39: !;
    let mut _40: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _43: &state::reserve::Reserve;
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::LendingError>, u64>;
    let mut _46: std::result::Result<u64, error::LendingError>;
    let mut _47: std::option::Option<u64>;
    let mut _48: u32;
    let mut _49: u8;
    let mut _50: error::LendingError;
    let mut _51: isize;
    let mut _53: !;
    let mut _54: std::result::Result<std::convert::Infallible, error::LendingError>;
    let mut _57: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _58: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _59: math::decimal::Decimal;
    let mut _60: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _61: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _62: math::decimal::Decimal;
    let mut _63: u64;
    let mut _64: isize;
    let mut _66: !;
    let mut _67: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _69: math::decimal::Decimal;
    let mut _70: isize;
    let mut _72: !;
    let mut _73: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _75: u64;
    let mut _76: u64;
    let mut _77: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, u64>;
    let mut _78: std::result::Result<u64, solana_program::program_error::ProgramError>;
    let mut _79: &math::decimal::Decimal;
    let _80: math::decimal::Decimal;
    let mut _81: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _82: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _83: &state::reserve::CollateralExchangeRate;
    let _84: state::reserve::CollateralExchangeRate;
    let mut _85: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, state::reserve::CollateralExchangeRate>;
    let mut _86: std::result::Result<state::reserve::CollateralExchangeRate, solana_program::program_error::ProgramError>;
    let mut _87: &state::reserve::Reserve;
    let mut _88: isize;
    let mut _90: !;
    let mut _91: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _93: math::decimal::Decimal;
    let mut _94: isize;
    let mut _96: !;
    let mut _97: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _99: isize;
    let mut _101: !;
    let mut _102: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _104: u64;
    let mut _105: bool;
    let mut _106: bool;
    let mut _107: bool;
    let mut _108: bool;
    let mut _109: bool;
    let mut _110: isize;
    let mut _111: isize;
    let mut _112: isize;
    let mut _113: isize;
    let mut _114: isize;
    let mut _115: isize;
    let mut _116: isize;
    let mut _117: isize;
    let mut _118: isize;
    let mut _119: isize;
    let mut _120: isize;
    let mut _121: isize;
    let mut _122: isize;
    let mut _123: isize;
    let mut _124: isize;
    let mut _125: isize;
    let mut _126: isize;
    let mut _127: isize;
    let mut _128: isize;
    let mut _129: isize;
    let mut _130: isize;
    let mut _131: isize;
    let mut _132: isize;
    let mut _133: isize;
    let mut _134: isize;
    let mut _135: isize;
    let mut _136: isize;
    let mut _137: isize;
    let mut _138: isize;
    let mut _139: isize;
    let mut _140: isize;
    let mut _141: isize;
    let mut _142: isize;
    let mut _143: isize;
    let mut _144: isize;
    scope 1 {
        debug loan_to_value_ratio => _14;
        let _23: math::decimal::Decimal;
        let _32: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _35: math::decimal::Decimal;
        let _38: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _41: math::decimal::Decimal;
        scope 2 {
            debug max_withdraw_value => _23;
            let _42: math::decimal::Decimal;
            scope 11 {
                debug price => _42;
                let _44: u64;
                let _52: std::result::Result<std::convert::Infallible, error::LendingError>;
                let _55: u64;
                scope 12 {
                    debug decimals => _44;
                    let _56: math::decimal::Decimal;
                    let _65: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                    let _68: math::decimal::Decimal;
                    let _71: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                    let _74: math::decimal::Decimal;
                    scope 17 {
                        debug max_withdraw_liquidity_amount => _56;
                        let _89: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                        let _92: state::reserve::CollateralExchangeRate;
                        let _95: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                        let _98: math::decimal::Decimal;
                        let _100: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                        let _103: u64;
                        scope 26 {
                            debug residual => _89;
                            scope 27 {
                            }
                        }
                        scope 28 {
                            debug val => _92;
                            scope 29 {
                            }
                        }
                        scope 30 {
                            debug residual => _95;
                            scope 31 {
                            }
                        }
                        scope 32 {
                            debug val => _98;
                            scope 33 {
                            }
                        }
                        scope 34 {
                            debug residual => _100;
                            scope 35 {
                            }
                        }
                        scope 36 {
                            debug val => _103;
                            scope 37 {
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _65;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _68;
                        scope 21 {
                        }
                    }
                    scope 22 {
                        debug residual => _71;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug val => _74;
                        scope 25 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _52;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _55;
                    scope 16 {
                    }
                }
            }
        }
        scope 3 {
            debug residual => _32;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _35;
            scope 6 {
            }
        }
        scope 7 {
            debug residual => _38;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _41;
            scope 10 {
            }
        }
    }

    bb0: {
        _108 = const false;
        _107 = const false;
        _106 = const false;
        _105 = const false;
        _109 = const false;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &((*_1).5: std::vec::Vec<state::obligation::ObligationLiquidity>);
        _5 = Vec::<obligation::ObligationLiquidity>::is_empty(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _5) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_6);
        StorageLive(_8);
        _8 = ((*_2).1: u64);
        _0 = Result::<u64, ProgramError>::Ok(move _8);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb63;
    }

    bb3: {
        StorageDead(_6);
        _4 = const ();
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &((*_1).10: math::decimal::Decimal);
        StorageLive(_12);
        _12 = &((*_1).9: math::decimal::Decimal);
        _10 = <decimal::Decimal as PartialOrd>::le(move _11, move _12) -> [return: bb4, unwind continue];
    }

    bb4: {
        switchInt(move _10) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        StorageDead(_12);
        StorageDead(_11);
        _0 = Result::<u64, ProgramError>::Ok(const 0_u64);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb63;
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_11);
        _9 = const ();
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &(*_3);
        _14 = reserve::Reserve::loan_to_value_ratio(move _15) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = &_14;
        StorageLive(_19);
        StorageLive(_20);
        _20 = rate::Rate::zero() -> [return: bb8, unwind continue];
    }

    bb8: {
        _19 = &_20;
        _17 = <rate::Rate as PartialEq>::eq(move _18, move _19) -> [return: bb9, unwind continue];
    }

    bb9: {
        switchInt(move _17) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageLive(_22);
        _22 = ((*_2).1: u64);
        _0 = Result::<u64, ProgramError>::Ok(move _22);
        StorageDead(_22);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb62;
    }

    bb11: {
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        _16 = const ();
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = ((*_1).10: math::decimal::Decimal);
        StorageLive(_30);
        _30 = ((*_1).9: math::decimal::Decimal);
        _28 = <decimal::Decimal as common::TrySub>::try_sub(move _29, move _30) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_30);
        StorageDead(_29);
        _27 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _28) -> [return: bb13, unwind: bb64];
    }

    bb13: {
        _108 = const true;
        StorageDead(_28);
        _31 = discriminant(_27);
        switchInt(move _31) -> [0: bb14, 1: bb16, otherwise: bb15];
    }

    bb14: {
        StorageLive(_35);
        _35 = ((_27 as Continue).0: math::decimal::Decimal);
        _26 = _35;
        StorageDead(_35);
        StorageLive(_36);
        _36 = _14;
        _25 = <decimal::Decimal as common::TryDiv<rate::Rate>>::try_div(move _26, move _36) -> [return: bb18, unwind: bb71];
    }

    bb15: {
        unreachable;
    }

    bb16: {
        StorageLive(_32);
        _32 = move ((_27 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_34);
        _34 = move _32;
        _0 = <Result<u64, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _34) -> [return: bb17, unwind: bb71];
    }

    bb17: {
        StorageDead(_34);
        StorageDead(_32);
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb60;
    }

    bb18: {
        StorageDead(_36);
        StorageDead(_26);
        _24 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _25) -> [return: bb19, unwind: bb71];
    }

    bb19: {
        StorageDead(_25);
        _37 = discriminant(_24);
        switchInt(move _37) -> [0: bb20, 1: bb21, otherwise: bb15];
    }

    bb20: {
        StorageLive(_41);
        _41 = ((_24 as Continue).0: math::decimal::Decimal);
        _23 = _41;
        StorageDead(_41);
        _110 = discriminant(_24);
        _112 = discriminant(_27);
        _108 = const false;
        StorageDead(_27);
        StorageDead(_24);
        StorageLive(_42);
        StorageLive(_43);
        _43 = &(*_3);
        _42 = reserve::Reserve::price_lower_bound(move _43) -> [return: bb23, unwind continue];
    }

    bb21: {
        StorageLive(_38);
        _38 = move ((_24 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_40);
        _40 = move _38;
        _0 = <Result<u64, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _40) -> [return: bb22, unwind: bb70];
    }

    bb22: {
        StorageDead(_40);
        StorageDead(_38);
        _134 = discriminant(_24);
        goto -> bb60;
    }

    bb23: {
        StorageDead(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = (((*_3).3: state::reserve::ReserveLiquidity).1: u8);
        _48 = move _49 as u32 (IntToInt);
        StorageDead(_49);
        _47 = core::num::<impl u64>::checked_pow(const 10_u64, move _48) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_48);
        StorageLive(_50);
        _50 = LendingError::MathOverflow;
        _46 = Option::<u64>::ok_or::<LendingError>(move _47, move _50) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_50);
        StorageDead(_47);
        _45 = <Result<u64, LendingError> as Try>::branch(move _46) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_46);
        _51 = discriminant(_45);
        switchInt(move _51) -> [0: bb27, 1: bb28, otherwise: bb15];
    }

    bb27: {
        StorageLive(_55);
        _55 = ((_45 as Continue).0: u64);
        _44 = _55;
        StorageDead(_55);
        StorageDead(_45);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = _23;
        StorageLive(_63);
        _63 = _44;
        _61 = <decimal::Decimal as common::TryMul<u64>>::try_mul(move _62, move _63) -> [return: bb30, unwind continue];
    }

    bb28: {
        StorageLive(_52);
        _52 = move ((_45 as Break).0: std::result::Result<std::convert::Infallible, error::LendingError>);
        StorageLive(_54);
        _54 = move _52;
        _0 = <Result<u64, ProgramError> as FromResidual<Result<Infallible, LendingError>>>::from_residual(move _54) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_54);
        StorageDead(_52);
        StorageDead(_45);
        goto -> bb59;
    }

    bb30: {
        StorageDead(_63);
        StorageDead(_62);
        _60 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _61) -> [return: bb31, unwind: bb64];
    }

    bb31: {
        _107 = const true;
        StorageDead(_61);
        _64 = discriminant(_60);
        switchInt(move _64) -> [0: bb32, 1: bb33, otherwise: bb15];
    }

    bb32: {
        StorageLive(_68);
        _68 = ((_60 as Continue).0: math::decimal::Decimal);
        _59 = _68;
        StorageDead(_68);
        StorageLive(_69);
        _69 = _42;
        _58 = <decimal::Decimal as common::TryDiv<decimal::Decimal>>::try_div(move _59, move _69) -> [return: bb35, unwind: bb69];
    }

    bb33: {
        StorageLive(_65);
        _65 = move ((_60 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_67);
        _67 = move _65;
        _0 = <Result<u64, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _67) -> [return: bb34, unwind: bb69];
    }

    bb34: {
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_59);
        StorageDead(_58);
        goto -> bb58;
    }

    bb35: {
        StorageDead(_69);
        StorageDead(_59);
        _57 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _58) -> [return: bb36, unwind: bb69];
    }

    bb36: {
        StorageDead(_58);
        _70 = discriminant(_57);
        switchInt(move _70) -> [0: bb37, 1: bb38, otherwise: bb15];
    }

    bb37: {
        StorageLive(_74);
        _74 = ((_57 as Continue).0: math::decimal::Decimal);
        _56 = _74;
        StorageDead(_74);
        _114 = discriminant(_57);
        _116 = discriminant(_60);
        _107 = const false;
        StorageDead(_60);
        StorageDead(_57);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _87 = &(*_3);
        _86 = reserve::Reserve::collateral_exchange_rate(move _87) -> [return: bb40, unwind continue];
    }

    bb38: {
        StorageLive(_71);
        _71 = move ((_57 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_73);
        _73 = move _71;
        _0 = <Result<u64, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _73) -> [return: bb39, unwind: bb68];
    }

    bb39: {
        StorageDead(_73);
        StorageDead(_71);
        _130 = discriminant(_57);
        goto -> bb58;
    }

    bb40: {
        StorageDead(_87);
        _85 = <Result<CollateralExchangeRate, ProgramError> as Try>::branch(move _86) -> [return: bb41, unwind: bb64];
    }

    bb41: {
        _106 = const true;
        StorageDead(_86);
        _88 = discriminant(_85);
        switchInt(move _88) -> [0: bb42, 1: bb43, otherwise: bb15];
    }

    bb42: {
        StorageLive(_92);
        _92 = ((_85 as Continue).0: state::reserve::CollateralExchangeRate);
        _84 = _92;
        StorageDead(_92);
        _83 = &_84;
        StorageLive(_93);
        _93 = _56;
        _82 = CollateralExchangeRate::decimal_liquidity_to_collateral(move _83, move _93) -> [return: bb45, unwind: bb67];
    }

    bb43: {
        StorageLive(_89);
        _89 = move ((_85 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_91);
        _91 = move _89;
        _0 = <Result<u64, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _91) -> [return: bb44, unwind: bb67];
    }

    bb44: {
        StorageDead(_91);
        StorageDead(_89);
        StorageDead(_83);
        StorageDead(_82);
        StorageDead(_79);
        StorageDead(_78);
        StorageDead(_76);
        StorageDead(_75);
        StorageDead(_56);
        StorageDead(_44);
        StorageDead(_42);
        StorageDead(_23);
        StorageDead(_14);
        goto -> bb57;
    }

    bb45: {
        StorageDead(_93);
        StorageDead(_83);
        _81 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _82) -> [return: bb46, unwind: bb67];
    }

    bb46: {
        _105 = const true;
        StorageDead(_82);
        _94 = discriminant(_81);
        switchInt(move _94) -> [0: bb47, 1: bb48, otherwise: bb15];
    }

    bb47: {
        StorageLive(_98);
        _98 = ((_81 as Continue).0: math::decimal::Decimal);
        _80 = _98;
        StorageDead(_98);
        _79 = &_80;
        _78 = decimal::Decimal::try_floor_u64(move _79) -> [return: bb50, unwind: bb66];
    }

    bb48: {
        StorageLive(_95);
        _95 = move ((_81 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_97);
        _97 = move _95;
        _0 = <Result<u64, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _97) -> [return: bb49, unwind: bb66];
    }

    bb49: {
        StorageDead(_97);
        StorageDead(_95);
        StorageDead(_79);
        StorageDead(_78);
        StorageDead(_76);
        StorageDead(_75);
        StorageDead(_56);
        StorageDead(_44);
        StorageDead(_42);
        StorageDead(_23);
        StorageDead(_14);
        goto -> bb56;
    }

    bb50: {
        StorageDead(_79);
        _77 = <Result<u64, ProgramError> as Try>::branch(move _78) -> [return: bb51, unwind: bb66];
    }

    bb51: {
        _109 = const true;
        StorageDead(_78);
        _99 = discriminant(_77);
        switchInt(move _99) -> [0: bb52, 1: bb53, otherwise: bb15];
    }

    bb52: {
        StorageLive(_103);
        _103 = ((_77 as Continue).0: u64);
        _76 = _103;
        StorageDead(_103);
        StorageLive(_104);
        _104 = ((*_2).1: u64);
        _75 = std::cmp::min::<u64>(move _76, move _104) -> [return: bb55, unwind: bb65];
    }

    bb53: {
        StorageLive(_100);
        _100 = move ((_77 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_102);
        _102 = move _100;
        _0 = <Result<u64, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _102) -> [return: bb54, unwind: bb65];
    }

    bb54: {
        StorageDead(_102);
        StorageDead(_100);
        StorageDead(_76);
        StorageDead(_75);
        StorageDead(_56);
        StorageDead(_44);
        StorageDead(_42);
        StorageDead(_23);
        StorageDead(_14);
        _124 = discriminant(_77);
        goto -> bb56;
    }

    bb55: {
        StorageDead(_104);
        StorageDead(_76);
        _0 = Result::<u64, ProgramError>::Ok(move _75);
        StorageDead(_75);
        StorageDead(_56);
        StorageDead(_44);
        StorageDead(_42);
        StorageDead(_23);
        StorageDead(_14);
        _118 = discriminant(_77);
        _120 = discriminant(_81);
        _122 = discriminant(_85);
        _106 = const false;
        StorageDead(_85);
        StorageDead(_84);
        _105 = const false;
        StorageDead(_81);
        StorageDead(_80);
        _109 = const false;
        StorageDead(_77);
        goto -> bb63;
    }

    bb56: {
        _126 = discriminant(_81);
        goto -> bb57;
    }

    bb57: {
        _128 = discriminant(_85);
        _106 = const false;
        StorageDead(_85);
        StorageDead(_84);
        _105 = const false;
        StorageDead(_81);
        StorageDead(_80);
        _109 = const false;
        StorageDead(_77);
        goto -> bb63;
    }

    bb58: {
        _132 = discriminant(_60);
        _107 = const false;
        StorageDead(_60);
        StorageDead(_57);
        StorageDead(_56);
        goto -> bb59;
    }

    bb59: {
        StorageDead(_44);
        StorageDead(_42);
        goto -> bb61;
    }

    bb60: {
        _136 = discriminant(_27);
        _108 = const false;
        StorageDead(_27);
        StorageDead(_24);
        goto -> bb61;
    }

    bb61: {
        StorageDead(_23);
        goto -> bb62;
    }

    bb62: {
        StorageDead(_14);
        goto -> bb63;
    }

    bb63: {
        return;
    }

    bb64 (cleanup): {
        resume;
    }

    bb65 (cleanup): {
        _138 = discriminant(_77);
        goto -> bb66;
    }

    bb66 (cleanup): {
        _139 = discriminant(_81);
        goto -> bb67;
    }

    bb67 (cleanup): {
        _140 = discriminant(_85);
        goto -> bb64;
    }

    bb68 (cleanup): {
        _141 = discriminant(_57);
        goto -> bb69;
    }

    bb69 (cleanup): {
        _142 = discriminant(_60);
        goto -> bb64;
    }

    bb70 (cleanup): {
        _143 = discriminant(_24);
        goto -> bb71;
    }

    bb71 (cleanup): {
        _144 = discriminant(_27);
        goto -> bb64;
    }
}
