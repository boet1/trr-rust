// MIR for `reserve::<impl at token-lending\sdk\src\state\reserve.rs:65:1: 65:13>::deposit_liquidity` before PreCodegen

fn reserve::<impl at token-lending\sdk\src\state\reserve.rs:65:1: 65:13>::deposit_liquidity(_1: &mut reserve::Reserve, _2: u64) -> Result<u64, ProgramError> {
    debug self => _1;
    debug liquidity_amount => _2;
    let mut _0: std::result::Result<u64, solana_program::program_error::ProgramError>;
    let _3: u64;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, u64>;
    let mut _5: std::result::Result<u64, solana_program::program_error::ProgramError>;
    let mut _6: &state::reserve::CollateralExchangeRate;
    let _7: state::reserve::CollateralExchangeRate;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, state::reserve::CollateralExchangeRate>;
    let mut _9: std::result::Result<state::reserve::CollateralExchangeRate, solana_program::program_error::ProgramError>;
    let mut _10: &state::reserve::Reserve;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _15: state::reserve::CollateralExchangeRate;
    let mut _16: u64;
    let mut _17: isize;
    let _18: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _21: u64;
    let _22: ();
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _24: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _25: &mut state::reserve::ReserveLiquidity;
    let mut _26: u64;
    let mut _27: isize;
    let mut _29: !;
    let mut _30: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _32: ();
    let mut _33: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _34: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _35: &mut state::reserve::ReserveCollateral;
    let mut _36: u64;
    let mut _37: isize;
    let mut _39: !;
    let mut _40: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _42: u64;
    let mut _43: bool;
    let mut _44: isize;
    let mut _45: isize;
    let mut _46: isize;
    let mut _47: isize;
    let mut _48: isize;
    let mut _49: isize;
    let mut _50: isize;
    let mut _51: isize;
    let mut _52: isize;
    let mut _53: isize;
    let mut _54: isize;
    let mut _55: isize;
    let mut _56: isize;
    let mut _57: isize;
    let mut _58: isize;
    let mut _59: isize;
    let mut _60: isize;
    let mut _61: isize;
    let mut _62: isize;
    let mut _63: isize;
    scope 1 {
        debug collateral_amount => _3;
        let _28: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _31: ();
        let _38: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _41: ();
        scope 10 {
            debug residual => _28;
            scope 11 {
            }
        }
        scope 12 {
            debug val => _31;
            scope 13 {
            }
        }
        scope 14 {
            debug residual => _38;
            scope 15 {
            }
        }
        scope 16 {
            debug val => _41;
            scope 17 {
            }
        }
    }
    scope 2 {
        debug residual => _12;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _15;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _18;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _21;
        scope 9 {
        }
    }

    bb0: {
        _43 = const false;
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_1);
        _9 = reserve::Reserve::collateral_exchange_rate(move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_10);
        _8 = <Result<CollateralExchangeRate, ProgramError> as Try>::branch(move _9) -> [return: bb2, unwind: bb25];
    }

    bb2: {
        _43 = const true;
        StorageDead(_9);
        _11 = discriminant(_8);
        switchInt(move _11) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_15);
        _15 = ((_8 as Continue).0: state::reserve::CollateralExchangeRate);
        _7 = _15;
        StorageDead(_15);
        _6 = &_7;
        StorageLive(_16);
        _16 = _2;
        _5 = CollateralExchangeRate::liquidity_to_collateral(move _6, move _16) -> [return: bb7, unwind: bb29];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_12);
        _12 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_14);
        _14 = move _12;
        _0 = <Result<u64, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _14) -> [return: bb6, unwind: bb29];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb22;
    }

    bb7: {
        StorageDead(_16);
        StorageDead(_6);
        _4 = <Result<u64, ProgramError> as Try>::branch(move _5) -> [return: bb8, unwind: bb29];
    }

    bb8: {
        StorageDead(_5);
        _17 = discriminant(_4);
        switchInt(move _17) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_21);
        _21 = ((_4 as Continue).0: u64);
        _3 = _21;
        StorageDead(_21);
        _44 = discriminant(_4);
        _46 = discriminant(_8);
        _43 = const false;
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_4);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &mut ((*_1).3: state::reserve::ReserveLiquidity);
        StorageLive(_26);
        _26 = _2;
        _24 = ReserveLiquidity::deposit(move _25, move _26) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_18);
        _18 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_20);
        _20 = move _18;
        _0 = <Result<u64, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _20) -> [return: bb11, unwind: bb28];
    }

    bb11: {
        StorageDead(_20);
        StorageDead(_18);
        _56 = discriminant(_4);
        goto -> bb22;
    }

    bb12: {
        StorageDead(_26);
        StorageDead(_25);
        _23 = <Result<(), ProgramError> as Try>::branch(move _24) -> [return: bb13, unwind: bb25];
    }

    bb13: {
        StorageDead(_24);
        _27 = discriminant(_23);
        switchInt(move _27) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_31);
        _31 = ((_23 as Continue).0: ());
        _22 = _31;
        StorageDead(_31);
        _48 = discriminant(_23);
        StorageDead(_23);
        StorageDead(_22);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = &mut ((*_1).4: state::reserve::ReserveCollateral);
        StorageLive(_36);
        _36 = _3;
        _34 = ReserveCollateral::mint(move _35, move _36) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_28);
        _28 = move ((_23 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_30);
        _30 = move _28;
        _0 = <Result<u64, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _30) -> [return: bb16, unwind: bb27];
    }

    bb16: {
        StorageDead(_30);
        StorageDead(_28);
        _54 = discriminant(_23);
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb23;
    }

    bb17: {
        StorageDead(_36);
        StorageDead(_35);
        _33 = <Result<(), ProgramError> as Try>::branch(move _34) -> [return: bb18, unwind: bb25];
    }

    bb18: {
        StorageDead(_34);
        _37 = discriminant(_33);
        switchInt(move _37) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_41);
        _41 = ((_33 as Continue).0: ());
        _32 = _41;
        StorageDead(_41);
        _50 = discriminant(_33);
        StorageDead(_33);
        StorageDead(_32);
        StorageLive(_42);
        _42 = _3;
        _0 = Result::<u64, ProgramError>::Ok(move _42);
        StorageDead(_42);
        StorageDead(_3);
        goto -> bb24;
    }

    bb20: {
        StorageLive(_38);
        _38 = move ((_33 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_40);
        _40 = move _38;
        _0 = <Result<u64, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _40) -> [return: bb21, unwind: bb26];
    }

    bb21: {
        StorageDead(_40);
        StorageDead(_38);
        _52 = discriminant(_33);
        StorageDead(_33);
        StorageDead(_32);
        goto -> bb23;
    }

    bb22: {
        _58 = discriminant(_8);
        _43 = const false;
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_4);
        goto -> bb23;
    }

    bb23: {
        StorageDead(_3);
        goto -> bb24;
    }

    bb24: {
        return;
    }

    bb25 (cleanup): {
        resume;
    }

    bb26 (cleanup): {
        _60 = discriminant(_33);
        goto -> bb25;
    }

    bb27 (cleanup): {
        _61 = discriminant(_23);
        goto -> bb25;
    }

    bb28 (cleanup): {
        _62 = discriminant(_4);
        goto -> bb29;
    }

    bb29 (cleanup): {
        _63 = discriminant(_8);
        goto -> bb25;
    }
}
