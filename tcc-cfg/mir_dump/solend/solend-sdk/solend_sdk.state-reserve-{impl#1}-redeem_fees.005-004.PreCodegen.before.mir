// MIR for `reserve::<impl at token-lending\sdk\src\state\reserve.rs:669:1: 669:22>::redeem_fees` before PreCodegen

fn reserve::<impl at token-lending\sdk\src\state\reserve.rs:669:1: 669:22>::redeem_fees(_1: &mut ReserveLiquidity, _2: u64) -> Result<(), ProgramError> {
    debug self => _1;
    debug withdraw_amount => _2;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _3: u64;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::LendingError>, u64>;
    let mut _5: std::result::Result<u64, error::LendingError>;
    let mut _6: std::option::Option<u64>;
    let mut _7: u64;
    let mut _8: u64;
    let mut _9: error::LendingError;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, error::LendingError>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, error::LendingError>;
    let _14: u64;
    let mut _15: math::decimal::Decimal;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _17: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _18: math::decimal::Decimal;
    let mut _19: math::decimal::Decimal;
    let mut _20: u64;
    let mut _21: isize;
    let _22: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _23: !;
    let mut _24: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _25: math::decimal::Decimal;
    let mut _26: ();
    let mut _27: isize;
    let mut _28: isize;
    let mut _29: isize;
    let mut _30: isize;
    let mut _31: isize;
    scope 1 {
        debug residual => _11;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _14;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _22;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _25;
        scope 8 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = ((*_1).5: u64);
        StorageLive(_8);
        _8 = _2;
        _6 = core::num::<impl u64>::checked_sub(move _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_9);
        _9 = LendingError::MathOverflow;
        _5 = Option::<u64>::ok_or::<LendingError>(move _6, move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_9);
        StorageDead(_6);
        _4 = <Result<u64, LendingError> as Try>::branch(move _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_5);
        _10 = discriminant(_4);
        switchInt(move _10) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_14);
        _14 = ((_4 as Continue).0: u64);
        _3 = _14;
        StorageDead(_14);
        ((*_1).5: u64) = move _3;
        StorageDead(_3);
        StorageDead(_4);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = ((*_1).8: math::decimal::Decimal);
        StorageLive(_19);
        StorageLive(_20);
        _20 = _2;
        _19 = <decimal::Decimal as From<u64>>::from(move _20) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_11);
        _11 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::LendingError>);
        StorageLive(_13);
        _13 = move _11;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, LendingError>>>::from_residual(move _13) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_3);
        StorageDead(_4);
        goto -> bb14;
    }

    bb8: {
        StorageDead(_20);
        _17 = <decimal::Decimal as common::TrySub>::try_sub(move _18, move _19) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_19);
        StorageDead(_18);
        _16 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _17) -> [return: bb10, unwind: bb15];
    }

    bb10: {
        StorageDead(_17);
        _21 = discriminant(_16);
        switchInt(move _21) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_25);
        _25 = ((_16 as Continue).0: math::decimal::Decimal);
        _15 = _25;
        StorageDead(_25);
        ((*_1).8: math::decimal::Decimal) = move _15;
        StorageDead(_15);
        _27 = discriminant(_16);
        StorageDead(_16);
        StorageLive(_26);
        _26 = ();
        _0 = Result::<(), ProgramError>::Ok(move _26);
        StorageDead(_26);
        goto -> bb14;
    }

    bb12: {
        StorageLive(_22);
        _22 = move ((_16 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_24);
        _24 = move _22;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _24) -> [return: bb13, unwind: bb16];
    }

    bb13: {
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_15);
        _29 = discriminant(_16);
        StorageDead(_16);
        goto -> bb14;
    }

    bb14: {
        return;
    }

    bb15 (cleanup): {
        resume;
    }

    bb16 (cleanup): {
        _31 = discriminant(_16);
        goto -> bb15;
    }
}
