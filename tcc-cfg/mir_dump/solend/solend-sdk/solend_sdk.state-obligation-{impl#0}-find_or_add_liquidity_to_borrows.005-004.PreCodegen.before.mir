// MIR for `obligation::<impl at token-lending\sdk\src\state\obligation.rs:68:1: 68:16>::find_or_add_liquidity_to_borrows` before PreCodegen

fn obligation::<impl at token-lending\sdk\src\state\obligation.rs:68:1: 68:16>::find_or_add_liquidity_to_borrows(_1: &mut obligation::Obligation, _2: Pubkey, _3: decimal::Decimal) -> Result<&mut obligation::ObligationLiquidity, ProgramError> {
    debug self => _1;
    debug borrow_reserve => _2;
    debug cumulative_borrow_rate_wads => _3;
    let mut _0: std::result::Result<&mut state::obligation::ObligationLiquidity, solana_program::program_error::ProgramError>;
    let _4: ();
    let mut _5: std::option::Option<usize>;
    let mut _6: &state::obligation::Obligation;
    let mut _7: solana_program::pubkey::Pubkey;
    let mut _8: isize;
    let mut _10: !;
    let mut _11: &mut state::obligation::ObligationLiquidity;
    let mut _12: &mut state::obligation::ObligationLiquidity;
    let mut _13: &mut state::obligation::ObligationLiquidity;
    let mut _14: &mut std::vec::Vec<state::obligation::ObligationLiquidity>;
    let mut _15: usize;
    let _16: ();
    let mut _17: bool;
    let mut _18: usize;
    let mut _19: usize;
    let mut _20: &std::vec::Vec<state::obligation::ObligationCollateral>;
    let mut _21: usize;
    let mut _22: &std::vec::Vec<state::obligation::ObligationLiquidity>;
    let mut _23: (usize, bool);
    let mut _24: !;
    let _25: ();
    let mut _26: &str;
    let _27: &str;
    let mut _28: &std::string::String;
    let _29: &std::string::String;
    let _30: std::string::String;
    let _31: std::string::String;
    let mut _32: std::fmt::Arguments<'_>;
    let mut _33: &[&str];
    let mut _34: &[&str; 2];
    let _35: &[&str; 2];
    let _36: [&str; 2];
    let mut _37: &[core::fmt::rt::Argument<'_>];
    let mut _38: &[core::fmt::rt::Argument<'_>; 1];
    let _39: &[core::fmt::rt::Argument<'_>; 1];
    let _40: [core::fmt::rt::Argument<'_>; 1];
    let mut _41: core::fmt::rt::Argument<'_>;
    let mut _42: &usize;
    let _43: &usize;
    let _44: usize;
    let mut _45: solana_program::program_error::ProgramError;
    let mut _46: error::LendingError;
    let _47: state::obligation::ObligationLiquidity;
    let mut _48: solana_program::pubkey::Pubkey;
    let mut _49: math::decimal::Decimal;
    let _50: ();
    let mut _51: &mut std::vec::Vec<state::obligation::ObligationLiquidity>;
    let mut _52: state::obligation::ObligationLiquidity;
    let mut _53: &mut state::obligation::ObligationLiquidity;
    let mut _54: &mut state::obligation::ObligationLiquidity;
    let mut _55: std::option::Option<&mut state::obligation::ObligationLiquidity>;
    let mut _56: &mut [state::obligation::ObligationLiquidity];
    let mut _57: &mut [state::obligation::ObligationLiquidity];
    let mut _58: &mut std::vec::Vec<state::obligation::ObligationLiquidity>;
    let mut _59: &usize;
    let mut _60: &[&str; 2];
    scope 1 {
        debug liquidity_index => _9;
        let _9: usize;
    }
    scope 2 {
        debug res => _31;
    }
    scope 3 {
        debug liquidity => _47;
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &(*_1);
        StorageLive(_7);
        _7 = _2;
        _5 = obligation::Obligation::_find_liquidity_index_in_borrows(move _6, move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        StorageDead(_6);
        _8 = discriminant(_5);
        switchInt(move _8) -> [1: bb2, otherwise: bb4];
    }

    bb2: {
        StorageLive(_9);
        _9 = ((_5 as Some).0: usize);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = &mut ((*_1).5: std::vec::Vec<state::obligation::ObligationLiquidity>);
        StorageLive(_15);
        _15 = _9;
        _13 = <Vec<obligation::ObligationLiquidity> as IndexMut<usize>>::index_mut(move _14, move _15) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_15);
        StorageDead(_14);
        _12 = &mut (*_13);
        _11 = &mut (*_12);
        _0 = Result::<&mut obligation::ObligationLiquidity, ProgramError>::Ok(move _11);
        StorageDead(_11);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_9);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb22;
    }

    bb4: {
        _4 = const ();
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = &((*_1).4: std::vec::Vec<state::obligation::ObligationCollateral>);
        _19 = Vec::<obligation::ObligationCollateral>::len(move _20) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = &((*_1).5: std::vec::Vec<state::obligation::ObligationLiquidity>);
        _21 = Vec::<obligation::ObligationLiquidity>::len(move _22) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_22);
        _23 = CheckedAdd(_19, _21);
        assert(!move (_23.1: bool), "attempt to compute `{} + {}`, which would overflow", move _19, move _21) -> [success: bb7, unwind continue];
    }

    bb7: {
        _18 = move (_23.0: usize);
        StorageDead(_21);
        StorageDead(_19);
        _17 = Ge(move _18, const _);
        switchInt(move _17) -> [0: bb16, otherwise: bb8];
    }

    bb8: {
        StorageDead(_18);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _60 = const _;
        _35 = &(*_60);
        _34 = &(*_35);
        _33 = move _34 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_34);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _59 = const _;
        _43 = &(*_59);
        _42 = &(*_43);
        _41 = core::fmt::rt::Argument::<'_>::new_display::<usize>(move _42) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_42);
        _40 = [move _41];
        StorageDead(_41);
        _39 = &_40;
        _38 = &(*_39);
        _37 = move _38 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_38);
        _32 = Arguments::<'_>::new_v1(move _33, move _37) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_37);
        StorageDead(_33);
        _31 = format(move _32) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_32);
        StorageDead(_43);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_35);
        _30 = move _31;
        StorageDead(_31);
        _29 = &_30;
        _28 = &(*_29);
        _27 = <String as Deref>::deref(move _28) -> [return: bb12, unwind: bb23];
    }

    bb12: {
        _26 = &(*_27);
        StorageDead(_28);
        _25 = solana_program::log::sol_log(move _26) -> [return: bb13, unwind: bb23];
    }

    bb13: {
        StorageDead(_26);
        drop(_30) -> [return: bb14, unwind: bb24];
    }

    bb14: {
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_25);
        StorageLive(_45);
        StorageLive(_46);
        _46 = LendingError::ObligationReserveLimit;
        _45 = <LendingError as Into<ProgramError>>::into(move _46) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_46);
        _0 = Result::<&mut obligation::ObligationLiquidity, ProgramError>::Err(move _45);
        StorageDead(_45);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb22;
    }

    bb16: {
        StorageDead(_18);
        _16 = const ();
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_47);
        StorageLive(_48);
        _48 = _2;
        StorageLive(_49);
        _49 = _3;
        _47 = obligation::ObligationLiquidity::new(move _48, move _49) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_49);
        StorageDead(_48);
        StorageLive(_50);
        StorageLive(_51);
        _51 = &mut ((*_1).5: std::vec::Vec<state::obligation::ObligationLiquidity>);
        StorageLive(_52);
        _52 = move _47;
        _50 = Vec::<obligation::ObligationLiquidity>::push(move _51, move _52) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_50);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _58 = &mut ((*_1).5: std::vec::Vec<state::obligation::ObligationLiquidity>);
        _57 = <Vec<obligation::ObligationLiquidity> as DerefMut>::deref_mut(move _58) -> [return: bb19, unwind continue];
    }

    bb19: {
        _56 = &mut (*_57);
        StorageDead(_58);
        _55 = core::slice::<impl [obligation::ObligationLiquidity]>::last_mut(move _56) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_56);
        _54 = Option::<&mut obligation::ObligationLiquidity>::unwrap(move _55) -> [return: bb21, unwind continue];
    }

    bb21: {
        _53 = &mut (*_54);
        StorageDead(_55);
        _0 = Result::<&mut obligation::ObligationLiquidity, ProgramError>::Ok(move _53);
        StorageDead(_53);
        StorageDead(_47);
        StorageDead(_57);
        StorageDead(_54);
        goto -> bb22;
    }

    bb22: {
        return;
    }

    bb23 (cleanup): {
        drop(_30) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        resume;
    }
}
