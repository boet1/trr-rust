// MIR for `reserve::<impl at token-lending\sdk\src\state\reserve.rs:65:1: 65:13>::calculate_borrow` after PreCodegen

fn reserve::<impl at token-lending\sdk\src\state\reserve.rs:65:1: 65:13>::calculate_borrow(_1: &reserve::Reserve, _2: u64, _3: decimal::Decimal, _4: decimal::Decimal) -> Result<CalculateBorrowResult, ProgramError> {
    debug self => _1;
    debug amount_to_borrow => _2;
    debug max_borrow_value => _3;
    debug remaining_reserve_borrow => _4;
    let mut _0: std::result::Result<state::reserve::CalculateBorrowResult, solana_program::program_error::ProgramError>;
    let _5: u64;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::LendingError>, u64>;
    let mut _7: std::result::Result<u64, error::LendingError>;
    let mut _8: std::option::Option<u64>;
    let mut _9: u32;
    let mut _10: u8;
    let mut _11: error::LendingError;
    let mut _12: isize;
    let _13: std::result::Result<std::convert::Infallible, error::LendingError>;
    let mut _14: !;
    let mut _15: std::result::Result<std::convert::Infallible, error::LendingError>;
    let _16: u64;
    let mut _17: bool;
    let mut _18: u64;
    let mut _20: math::decimal::Decimal;
    let mut _21: math::decimal::Decimal;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _23: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _24: math::decimal::Decimal;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _26: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _27: math::decimal::Decimal;
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _29: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _30: math::decimal::Decimal;
    let mut _31: u64;
    let mut _32: isize;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _37: math::decimal::Decimal;
    let mut _38: &state::reserve::Reserve;
    let mut _39: isize;
    let mut _41: !;
    let mut _42: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _44: math::decimal::Decimal;
    let mut _45: &state::reserve::Reserve;
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _51: math::decimal::Decimal;
    let mut _52: math::decimal::Decimal;
    let mut _53: u64;
    let mut _56: (u64, u64);
    let mut _57: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, (u64, u64)>;
    let mut _58: std::result::Result<(u64, u64), solana_program::program_error::ProgramError>;
    let mut _59: &state::reserve::ReserveFees;
    let mut _60: math::decimal::Decimal;
    let mut _61: state::reserve::FeeCalculation;
    let mut _62: isize;
    let mut _64: !;
    let mut _65: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _68: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::LendingError>, u64>;
    let mut _69: std::result::Result<u64, error::LendingError>;
    let mut _70: std::option::Option<u64>;
    let mut _71: u64;
    let mut _72: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, u64>;
    let mut _73: std::result::Result<u64, solana_program::program_error::ProgramError>;
    let mut _74: &math::decimal::Decimal;
    let mut _75: isize;
    let mut _77: !;
    let mut _78: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _80: u64;
    let mut _81: error::LendingError;
    let mut _82: isize;
    let mut _84: !;
    let mut _85: std::result::Result<std::convert::Infallible, error::LendingError>;
    let mut _87: state::reserve::CalculateBorrowResult;
    let mut _88: math::decimal::Decimal;
    let mut _89: u64;
    let mut _90: u64;
    let mut _91: u64;
    let mut _94: u64;
    let mut _97: (u64, u64);
    let mut _98: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, (u64, u64)>;
    let mut _99: std::result::Result<(u64, u64), solana_program::program_error::ProgramError>;
    let mut _100: &state::reserve::ReserveFees;
    let mut _101: math::decimal::Decimal;
    let mut _102: state::reserve::FeeCalculation;
    let mut _103: isize;
    let mut _105: !;
    let mut _106: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _109: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _110: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _111: math::decimal::Decimal;
    let mut _112: math::decimal::Decimal;
    let mut _113: u64;
    let mut _114: isize;
    let mut _116: !;
    let mut _117: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _120: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _121: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _122: math::decimal::Decimal;
    let mut _123: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _124: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _125: &state::reserve::Reserve;
    let mut _126: math::decimal::Decimal;
    let mut _127: isize;
    let mut _129: !;
    let mut _130: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _132: math::decimal::Decimal;
    let mut _133: &state::reserve::Reserve;
    let mut _134: isize;
    let mut _136: !;
    let mut _137: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _139: ();
    let mut _140: bool;
    let mut _141: &math::decimal::Decimal;
    let mut _142: &math::decimal::Decimal;
    let mut _143: !;
    let _144: ();
    let mut _145: &str;
    let _146: &str;
    let mut _147: solana_program::program_error::ProgramError;
    let mut _148: error::LendingError;
    let mut _149: state::reserve::CalculateBorrowResult;
    let mut _150: math::decimal::Decimal;
    let mut _151: u64;
    let mut _152: u64;
    let mut _153: u64;
    let mut _154: bool;
    let mut _155: bool;
    let mut _156: bool;
    let mut _157: bool;
    let mut _158: bool;
    let mut _159: isize;
    let mut _160: isize;
    let mut _161: isize;
    let mut _162: isize;
    let mut _163: isize;
    let mut _164: isize;
    let mut _165: isize;
    let mut _166: isize;
    let mut _167: isize;
    let mut _168: isize;
    let mut _169: isize;
    let mut _170: isize;
    let mut _171: isize;
    let mut _172: isize;
    let mut _173: isize;
    let mut _174: isize;
    let mut _175: isize;
    let mut _176: isize;
    let mut _177: isize;
    let mut _178: isize;
    let mut _179: isize;
    let mut _180: isize;
    let mut _181: isize;
    let mut _182: isize;
    let mut _183: isize;
    let mut _184: isize;
    let mut _185: isize;
    let mut _186: isize;
    let mut _187: isize;
    let mut _188: isize;
    let mut _189: isize;
    let mut _190: isize;
    let mut _191: isize;
    let mut _192: isize;
    let mut _193: isize;
    let mut _194: isize;
    let mut _195: isize;
    let mut _196: isize;
    let mut _197: isize;
    let mut _198: isize;
    let mut _199: isize;
    let mut _200: isize;
    let mut _201: isize;
    let mut _202: isize;
    let mut _203: isize;
    scope 1 {
        debug decimals => _5;
        let _19: math::decimal::Decimal;
        let _33: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _36: math::decimal::Decimal;
        let _40: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _43: math::decimal::Decimal;
        let _47: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _50: math::decimal::Decimal;
        let _92: u64;
        scope 6 {
            debug borrow_amount => _19;
            let _54: u64;
            let _55: u64;
            let _63: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
            let _66: (u64, u64);
            scope 19 {
                debug borrow_fee => _54;
                debug host_fee => _55;
                let _67: u64;
                let _76: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                let _79: u64;
                let _83: std::result::Result<std::convert::Infallible, error::LendingError>;
                let _86: u64;
                scope 24 {
                    debug receive_amount => _67;
                }
                scope 25 {
                    debug residual => _76;
                    scope 26 {
                    }
                }
                scope 27 {
                    debug val => _79;
                    scope 28 {
                    }
                }
                scope 29 {
                    debug residual => _83;
                    scope 30 {
                    }
                }
                scope 31 {
                    debug val => _86;
                    scope 32 {
                    }
                }
            }
            scope 20 {
                debug residual => _63;
                scope 21 {
                }
            }
            scope 22 {
                debug val => _66;
                scope 23 {
                }
            }
        }
        scope 7 {
            debug residual => _33;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _36;
            scope 10 {
            }
        }
        scope 11 {
            debug residual => _40;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _43;
            scope 14 {
            }
        }
        scope 15 {
            debug residual => _47;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _50;
            scope 18 {
            }
        }
        scope 33 {
            debug receive_amount => _92;
            let _93: math::decimal::Decimal;
            scope 34 {
                debug borrow_amount => _93;
                let _95: u64;
                let _96: u64;
                let _104: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                let _107: (u64, u64);
                scope 35 {
                    debug borrow_fee => _95;
                    debug host_fee => _96;
                    let _108: math::decimal::Decimal;
                    let _115: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                    let _118: math::decimal::Decimal;
                    scope 40 {
                        debug borrow_amount => _108;
                        let _119: math::decimal::Decimal;
                        let _128: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                        let _131: math::decimal::Decimal;
                        let _135: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                        let _138: math::decimal::Decimal;
                        scope 45 {
                            debug borrow_value => _119;
                        }
                        scope 46 {
                            debug residual => _128;
                            scope 47 {
                            }
                        }
                        scope 48 {
                            debug val => _131;
                            scope 49 {
                            }
                        }
                        scope 50 {
                            debug residual => _135;
                            scope 51 {
                            }
                        }
                        scope 52 {
                            debug val => _138;
                            scope 53 {
                            }
                        }
                    }
                    scope 41 {
                        debug residual => _115;
                        scope 42 {
                        }
                    }
                    scope 43 {
                        debug val => _118;
                        scope 44 {
                        }
                    }
                }
                scope 36 {
                    debug residual => _104;
                    scope 37 {
                    }
                }
                scope 38 {
                    debug val => _107;
                    scope 39 {
                    }
                }
            }
        }
    }
    scope 2 {
        debug residual => _13;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _16;
        scope 5 {
        }
    }

    bb0: {
        _157 = const false;
        _156 = const false;
        _158 = const false;
        _155 = const false;
        _154 = const false;
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = (((*_1).3: state::reserve::ReserveLiquidity).1: u8);
        _9 = move _10 as u32 (IntToInt);
        StorageDead(_10);
        _8 = core::num::<impl u64>::checked_pow(const 10_u64, move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        StorageLive(_11);
        _11 = LendingError::MathOverflow;
        _7 = Option::<u64>::ok_or::<LendingError>(move _8, move _11) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_11);
        StorageDead(_8);
        _6 = <Result<u64, LendingError> as Try>::branch(move _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_7);
        _12 = discriminant(_6);
        switchInt(move _12) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_16);
        _16 = ((_6 as Continue).0: u64);
        _5 = _16;
        StorageDead(_16);
        StorageDead(_6);
        StorageLive(_17);
        StorageLive(_18);
        _18 = _2;
        _17 = Eq(move _18, const _);
        switchInt(move _17) -> [0: bb9, otherwise: bb8];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_13);
        _13 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::LendingError>);
        StorageLive(_15);
        _15 = move _13;
        _0 = <Result<CalculateBorrowResult, ProgramError> as FromResidual<Result<Infallible, LendingError>>>::from_residual(move _15) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_6);
        goto -> bb83;
    }

    bb8: {
        StorageDead(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = _3;
        StorageLive(_31);
        _31 = _5;
        _29 = <decimal::Decimal as common::TryMul<u64>>::try_mul(move _30, move _31) -> [return: bb10, unwind continue];
    }

    bb9: {
        StorageDead(_18);
        StorageLive(_92);
        _92 = _2;
        StorageLive(_93);
        StorageLive(_94);
        _94 = _92;
        _93 = <decimal::Decimal as From<u64>>::from(move _94) -> [return: bb46, unwind continue];
    }

    bb10: {
        StorageDead(_31);
        StorageDead(_30);
        _28 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _29) -> [return: bb11, unwind: bb85];
    }

    bb11: {
        _157 = const true;
        StorageDead(_29);
        _32 = discriminant(_28);
        switchInt(move _32) -> [0: bb12, 1: bb13, otherwise: bb5];
    }

    bb12: {
        StorageLive(_36);
        _36 = ((_28 as Continue).0: math::decimal::Decimal);
        _27 = _36;
        StorageDead(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = &(*_1);
        _37 = reserve::Reserve::price_upper_bound(move _38) -> [return: bb15, unwind: bb95];
    }

    bb13: {
        StorageLive(_33);
        _33 = move ((_28 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_35);
        _35 = move _33;
        _0 = <Result<CalculateBorrowResult, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _35) -> [return: bb14, unwind: bb95];
    }

    bb14: {
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_20);
        goto -> bb80;
    }

    bb15: {
        StorageDead(_38);
        _26 = <decimal::Decimal as common::TryDiv<decimal::Decimal>>::try_div(move _27, move _37) -> [return: bb16, unwind: bb95];
    }

    bb16: {
        StorageDead(_37);
        StorageDead(_27);
        _25 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _26) -> [return: bb17, unwind: bb95];
    }

    bb17: {
        _156 = const true;
        StorageDead(_26);
        _39 = discriminant(_25);
        switchInt(move _39) -> [0: bb18, 1: bb19, otherwise: bb5];
    }

    bb18: {
        StorageLive(_43);
        _43 = ((_25 as Continue).0: math::decimal::Decimal);
        _24 = _43;
        StorageDead(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = &(*_1);
        _44 = reserve::Reserve::borrow_weight(move _45) -> [return: bb21, unwind: bb94];
    }

    bb19: {
        StorageLive(_40);
        _40 = move ((_25 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_42);
        _42 = move _40;
        _0 = <Result<CalculateBorrowResult, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _42) -> [return: bb20, unwind: bb94];
    }

    bb20: {
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_20);
        goto -> bb79;
    }

    bb21: {
        StorageDead(_45);
        _23 = <decimal::Decimal as common::TryDiv<decimal::Decimal>>::try_div(move _24, move _44) -> [return: bb22, unwind: bb94];
    }

    bb22: {
        StorageDead(_44);
        StorageDead(_24);
        _22 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _23) -> [return: bb23, unwind: bb94];
    }

    bb23: {
        _158 = const true;
        StorageDead(_23);
        _46 = discriminant(_22);
        switchInt(move _46) -> [0: bb24, 1: bb25, otherwise: bb5];
    }

    bb24: {
        StorageLive(_50);
        _50 = ((_22 as Continue).0: math::decimal::Decimal);
        _21 = _50;
        StorageDead(_50);
        StorageLive(_51);
        _51 = _4;
        _20 = <decimal::Decimal as Ord>::min(move _21, move _51) -> [return: bb27, unwind: bb93];
    }

    bb25: {
        StorageLive(_47);
        _47 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_49);
        _49 = move _47;
        _0 = <Result<CalculateBorrowResult, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _49) -> [return: bb26, unwind: bb93];
    }

    bb26: {
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_21);
        StorageDead(_20);
        _189 = discriminant(_22);
        goto -> bb79;
    }

    bb27: {
        StorageDead(_51);
        StorageDead(_21);
        StorageLive(_52);
        StorageLive(_53);
        _53 = (((*_1).3: state::reserve::ReserveLiquidity).5: u64);
        _52 = <u64 as Into<decimal::Decimal>>::into(move _53) -> [return: bb28, unwind: bb93];
    }

    bb28: {
        StorageDead(_53);
        _19 = <decimal::Decimal as Ord>::min(move _20, move _52) -> [return: bb29, unwind: bb93];
    }

    bb29: {
        StorageDead(_52);
        StorageDead(_20);
        _159 = discriminant(_22);
        _161 = discriminant(_25);
        _163 = discriminant(_28);
        _157 = const false;
        StorageDead(_28);
        _156 = const false;
        StorageDead(_25);
        _158 = const false;
        StorageDead(_22);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _59 = &(((*_1).5: state::reserve::ReserveConfig).11: state::reserve::ReserveFees);
        StorageLive(_60);
        _60 = _19;
        StorageLive(_61);
        _61 = FeeCalculation::Inclusive;
        _58 = reserve::ReserveFees::calculate_borrow_fees(move _59, move _60, move _61) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_59);
        _57 = <Result<(u64, u64), ProgramError> as Try>::branch(move _58) -> [return: bb31, unwind: bb85];
    }

    bb31: {
        StorageDead(_58);
        _62 = discriminant(_57);
        switchInt(move _62) -> [0: bb32, 1: bb33, otherwise: bb5];
    }

    bb32: {
        StorageLive(_66);
        _66 = ((_57 as Continue).0: (u64, u64));
        _56 = _66;
        StorageDead(_66);
        StorageLive(_54);
        _54 = (_56.0: u64);
        StorageLive(_55);
        _55 = (_56.1: u64);
        _165 = discriminant(_57);
        StorageDead(_57);
        StorageDead(_56);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = &_19;
        _73 = decimal::Decimal::try_floor_u64(move _74) -> [return: bb35, unwind continue];
    }

    bb33: {
        StorageLive(_63);
        _63 = move ((_57 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_65);
        _65 = move _63;
        _0 = <Result<CalculateBorrowResult, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _65) -> [return: bb34, unwind: bb92];
    }

    bb34: {
        StorageDead(_65);
        StorageDead(_63);
        _187 = discriminant(_57);
        StorageDead(_57);
        StorageDead(_56);
        goto -> bb81;
    }

    bb35: {
        StorageDead(_74);
        _72 = <Result<u64, ProgramError> as Try>::branch(move _73) -> [return: bb36, unwind: bb85];
    }

    bb36: {
        _155 = const true;
        StorageDead(_73);
        _75 = discriminant(_72);
        switchInt(move _75) -> [0: bb37, 1: bb38, otherwise: bb5];
    }

    bb37: {
        StorageLive(_79);
        _79 = ((_72 as Continue).0: u64);
        _71 = _79;
        StorageDead(_79);
        StorageLive(_80);
        _80 = _54;
        _70 = core::num::<impl u64>::checked_sub(move _71, move _80) -> [return: bb40, unwind: bb91];
    }

    bb38: {
        StorageLive(_76);
        _76 = move ((_72 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_78);
        _78 = move _76;
        _0 = <Result<CalculateBorrowResult, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _78) -> [return: bb39, unwind: bb91];
    }

    bb39: {
        StorageDead(_78);
        StorageDead(_76);
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_69);
        goto -> bb86;
    }

    bb40: {
        StorageDead(_80);
        StorageDead(_71);
        StorageLive(_81);
        _81 = LendingError::MathOverflow;
        _69 = Option::<u64>::ok_or::<LendingError>(move _70, move _81) -> [return: bb41, unwind: bb91];
    }

    bb41: {
        StorageDead(_81);
        StorageDead(_70);
        _68 = <Result<u64, LendingError> as Try>::branch(move _69) -> [return: bb42, unwind: bb91];
    }

    bb42: {
        StorageDead(_69);
        _82 = discriminant(_68);
        switchInt(move _82) -> [0: bb43, 1: bb44, otherwise: bb5];
    }

    bb43: {
        StorageLive(_86);
        _86 = ((_68 as Continue).0: u64);
        _67 = _86;
        StorageDead(_86);
        _167 = discriminant(_72);
        _155 = const false;
        StorageDead(_72);
        StorageDead(_68);
        StorageLive(_87);
        StorageLive(_88);
        _88 = _19;
        StorageLive(_89);
        _89 = _67;
        StorageLive(_90);
        _90 = _54;
        StorageLive(_91);
        _91 = _55;
        _87 = CalculateBorrowResult { borrow_amount: move _88, receive_amount: move _89, borrow_fee: move _90, host_fee: move _91 };
        StorageDead(_91);
        StorageDead(_90);
        StorageDead(_89);
        StorageDead(_88);
        _0 = Result::<CalculateBorrowResult, ProgramError>::Ok(move _87);
        StorageDead(_87);
        StorageDead(_67);
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_19);
        goto -> bb74;
    }

    bb44: {
        StorageLive(_83);
        _83 = move ((_68 as Break).0: std::result::Result<std::convert::Infallible, error::LendingError>);
        StorageLive(_85);
        _85 = move _83;
        _0 = <Result<CalculateBorrowResult, ProgramError> as FromResidual<Result<Infallible, LendingError>>>::from_residual(move _85) -> [return: bb45, unwind: bb91];
    }

    bb45: {
        StorageDead(_85);
        StorageDead(_83);
        goto -> bb86;
    }

    bb46: {
        StorageDead(_94);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = &(((*_1).5: state::reserve::ReserveConfig).11: state::reserve::ReserveFees);
        StorageLive(_101);
        _101 = _93;
        StorageLive(_102);
        _102 = FeeCalculation::Exclusive;
        _99 = reserve::ReserveFees::calculate_borrow_fees(move _100, move _101, move _102) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_100);
        _98 = <Result<(u64, u64), ProgramError> as Try>::branch(move _99) -> [return: bb48, unwind: bb85];
    }

    bb48: {
        StorageDead(_99);
        _103 = discriminant(_98);
        switchInt(move _103) -> [0: bb49, 1: bb50, otherwise: bb5];
    }

    bb49: {
        StorageLive(_107);
        _107 = ((_98 as Continue).0: (u64, u64));
        _97 = _107;
        StorageDead(_107);
        StorageLive(_95);
        _95 = (_97.0: u64);
        StorageLive(_96);
        _96 = (_97.1: u64);
        _169 = discriminant(_98);
        StorageDead(_98);
        StorageDead(_97);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        _111 = _93;
        StorageLive(_112);
        StorageLive(_113);
        _113 = _95;
        _112 = <u64 as Into<decimal::Decimal>>::into(move _113) -> [return: bb52, unwind continue];
    }

    bb50: {
        StorageLive(_104);
        _104 = move ((_98 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_106);
        _106 = move _104;
        _0 = <Result<CalculateBorrowResult, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _106) -> [return: bb51, unwind: bb90];
    }

    bb51: {
        StorageDead(_106);
        StorageDead(_104);
        _183 = discriminant(_98);
        StorageDead(_98);
        StorageDead(_97);
        goto -> bb78;
    }

    bb52: {
        StorageDead(_113);
        _110 = <decimal::Decimal as common::TryAdd>::try_add(move _111, move _112) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_112);
        StorageDead(_111);
        _109 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _110) -> [return: bb54, unwind: bb85];
    }

    bb54: {
        StorageDead(_110);
        _114 = discriminant(_109);
        switchInt(move _114) -> [0: bb55, 1: bb56, otherwise: bb5];
    }

    bb55: {
        StorageLive(_118);
        _118 = ((_109 as Continue).0: math::decimal::Decimal);
        _108 = _118;
        StorageDead(_118);
        _171 = discriminant(_109);
        StorageDead(_109);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _125 = &(*_1);
        StorageLive(_126);
        _126 = _108;
        _124 = reserve::Reserve::market_value_upper_bound(move _125, move _126) -> [return: bb58, unwind continue];
    }

    bb56: {
        StorageLive(_115);
        _115 = move ((_109 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_117);
        _117 = move _115;
        _0 = <Result<CalculateBorrowResult, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _117) -> [return: bb57, unwind: bb89];
    }

    bb57: {
        StorageDead(_117);
        StorageDead(_115);
        _181 = discriminant(_109);
        StorageDead(_109);
        goto -> bb77;
    }

    bb58: {
        StorageDead(_126);
        StorageDead(_125);
        _123 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _124) -> [return: bb59, unwind: bb85];
    }

    bb59: {
        _154 = const true;
        StorageDead(_124);
        _127 = discriminant(_123);
        switchInt(move _127) -> [0: bb60, 1: bb61, otherwise: bb5];
    }

    bb60: {
        StorageLive(_131);
        _131 = ((_123 as Continue).0: math::decimal::Decimal);
        _122 = _131;
        StorageDead(_131);
        StorageLive(_132);
        StorageLive(_133);
        _133 = &(*_1);
        _132 = reserve::Reserve::borrow_weight(move _133) -> [return: bb63, unwind: bb88];
    }

    bb61: {
        StorageLive(_128);
        _128 = move ((_123 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_130);
        _130 = move _128;
        _0 = <Result<CalculateBorrowResult, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _130) -> [return: bb62, unwind: bb88];
    }

    bb62: {
        StorageDead(_130);
        StorageDead(_128);
        StorageDead(_122);
        StorageDead(_121);
        goto -> bb75;
    }

    bb63: {
        StorageDead(_133);
        _121 = <decimal::Decimal as common::TryMul<decimal::Decimal>>::try_mul(move _122, move _132) -> [return: bb64, unwind: bb88];
    }

    bb64: {
        StorageDead(_132);
        StorageDead(_122);
        _120 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _121) -> [return: bb65, unwind: bb88];
    }

    bb65: {
        StorageDead(_121);
        _134 = discriminant(_120);
        switchInt(move _134) -> [0: bb66, 1: bb67, otherwise: bb5];
    }

    bb66: {
        StorageLive(_138);
        _138 = ((_120 as Continue).0: math::decimal::Decimal);
        _119 = _138;
        StorageDead(_138);
        _173 = discriminant(_120);
        _175 = discriminant(_123);
        _154 = const false;
        StorageDead(_123);
        StorageDead(_120);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        _141 = &_119;
        StorageLive(_142);
        _142 = &_3;
        _140 = <decimal::Decimal as PartialOrd>::gt(move _141, move _142) -> [return: bb69, unwind continue];
    }

    bb67: {
        StorageLive(_135);
        _135 = move ((_120 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_137);
        _137 = move _135;
        _0 = <Result<CalculateBorrowResult, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _137) -> [return: bb68, unwind: bb87];
    }

    bb68: {
        StorageDead(_137);
        StorageDead(_135);
        _177 = discriminant(_120);
        goto -> bb75;
    }

    bb69: {
        switchInt(move _140) -> [0: bb73, otherwise: bb70];
    }

    bb70: {
        StorageDead(_142);
        StorageDead(_141);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        _146 = const "Borrow value cannot exceed maximum borrow value";
        _145 = &(*_146);
        _144 = solana_program::log::sol_log(move _145) -> [return: bb71, unwind continue];
    }

    bb71: {
        StorageDead(_145);
        StorageDead(_146);
        StorageDead(_144);
        StorageLive(_147);
        StorageLive(_148);
        _148 = LendingError::BorrowTooLarge;
        _147 = <LendingError as Into<ProgramError>>::into(move _148) -> [return: bb72, unwind continue];
    }

    bb72: {
        StorageDead(_148);
        _0 = Result::<CalculateBorrowResult, ProgramError>::Err(move _147);
        StorageDead(_147);
        StorageDead(_140);
        StorageDead(_139);
        goto -> bb76;
    }

    bb73: {
        StorageDead(_142);
        StorageDead(_141);
        _139 = const ();
        StorageDead(_140);
        StorageDead(_139);
        StorageLive(_149);
        StorageLive(_150);
        _150 = _108;
        StorageLive(_151);
        _151 = _92;
        StorageLive(_152);
        _152 = _95;
        StorageLive(_153);
        _153 = _96;
        _149 = CalculateBorrowResult { borrow_amount: move _150, receive_amount: move _151, borrow_fee: move _152, host_fee: move _153 };
        StorageDead(_153);
        StorageDead(_152);
        StorageDead(_151);
        StorageDead(_150);
        _0 = Result::<CalculateBorrowResult, ProgramError>::Ok(move _149);
        StorageDead(_149);
        StorageDead(_119);
        StorageDead(_108);
        StorageDead(_96);
        StorageDead(_95);
        StorageDead(_93);
        StorageDead(_92);
        goto -> bb74;
    }

    bb74: {
        StorageDead(_17);
        StorageDead(_5);
        goto -> bb84;
    }

    bb75: {
        _179 = discriminant(_123);
        _154 = const false;
        StorageDead(_123);
        StorageDead(_120);
        goto -> bb76;
    }

    bb76: {
        StorageDead(_119);
        goto -> bb77;
    }

    bb77: {
        StorageDead(_108);
        StorageDead(_96);
        StorageDead(_95);
        goto -> bb78;
    }

    bb78: {
        StorageDead(_93);
        StorageDead(_92);
        goto -> bb82;
    }

    bb79: {
        _191 = discriminant(_25);
        goto -> bb80;
    }

    bb80: {
        _193 = discriminant(_28);
        _157 = const false;
        StorageDead(_28);
        _156 = const false;
        StorageDead(_25);
        _158 = const false;
        StorageDead(_22);
        goto -> bb81;
    }

    bb81: {
        StorageDead(_19);
        goto -> bb82;
    }

    bb82: {
        StorageDead(_17);
        goto -> bb83;
    }

    bb83: {
        StorageDead(_5);
        goto -> bb84;
    }

    bb84: {
        return;
    }

    bb85 (cleanup): {
        resume;
    }

    bb86: {
        _185 = discriminant(_72);
        _155 = const false;
        StorageDead(_72);
        StorageDead(_68);
        StorageDead(_67);
        StorageDead(_55);
        StorageDead(_54);
        goto -> bb81;
    }

    bb87 (cleanup): {
        _195 = discriminant(_120);
        goto -> bb88;
    }

    bb88 (cleanup): {
        _196 = discriminant(_123);
        goto -> bb85;
    }

    bb89 (cleanup): {
        _197 = discriminant(_109);
        goto -> bb85;
    }

    bb90 (cleanup): {
        _198 = discriminant(_98);
        goto -> bb85;
    }

    bb91 (cleanup): {
        _199 = discriminant(_72);
        goto -> bb85;
    }

    bb92 (cleanup): {
        _200 = discriminant(_57);
        goto -> bb85;
    }

    bb93 (cleanup): {
        _201 = discriminant(_22);
        goto -> bb94;
    }

    bb94 (cleanup): {
        _202 = discriminant(_25);
        goto -> bb95;
    }

    bb95 (cleanup): {
        _203 = discriminant(_28);
        goto -> bb85;
    }
}
