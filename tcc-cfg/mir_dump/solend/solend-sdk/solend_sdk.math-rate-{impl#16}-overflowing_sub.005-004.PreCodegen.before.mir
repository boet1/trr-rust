// MIR for `rate::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:587:3: 587:13>::overflowing_sub` before PreCodegen

fn rate::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:587:3: 587:13>::overflowing_sub(_1: U128, _2: U128) -> (U128, bool) {
    debug self => _1;
    debug other => _2;
    let mut _0: (math::rate::U128, bool);
    let _3: &[u64; 2];
    let mut _7: *mut [u64; 2];
    let mut _8: &mut [u64; 2];
    let _10: ();
    let _11: ();
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: u64;
    let mut _17: (u64, bool);
    let mut _18: u64;
    let _19: usize;
    let mut _20: usize;
    let mut _21: bool;
    let mut _22: u64;
    let _23: usize;
    let mut _24: usize;
    let mut _25: bool;
    let mut _28: (u64, bool);
    let mut _29: u64;
    let mut _30: u64;
    let _31: ();
    let mut _32: u64;
    let mut _33: *mut u64;
    let mut _34: *mut u64;
    let mut _35: isize;
    let mut _36: isize;
    let mut _37: u8;
    let mut _38: u8;
    let mut _39: bool;
    let mut _40: u8;
    let mut _41: bool;
    let mut _42: (u8, bool);
    let mut _45: (u64, bool);
    let mut _46: u64;
    let _47: usize;
    let mut _48: usize;
    let mut _49: bool;
    let mut _50: u64;
    let _51: usize;
    let mut _52: usize;
    let mut _53: bool;
    let _54: ();
    let mut _55: u64;
    let mut _56: *mut u64;
    let mut _57: *mut u64;
    let mut _58: isize;
    let mut _59: isize;
    let mut _60: bool;
    let _61: ();
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: u64;
    let mut _67: (u64, bool);
    let mut _68: u64;
    let _69: usize;
    let mut _70: usize;
    let mut _71: bool;
    let mut _72: u64;
    let _73: usize;
    let mut _74: usize;
    let mut _75: bool;
    let mut _78: (u64, bool);
    let mut _79: u64;
    let mut _80: u64;
    let _81: ();
    let mut _82: u64;
    let mut _83: *mut u64;
    let mut _84: *mut u64;
    let mut _85: isize;
    let mut _86: isize;
    let mut _87: u8;
    let mut _88: u8;
    let mut _89: bool;
    let mut _90: u8;
    let mut _91: bool;
    let mut _92: (u8, bool);
    let mut _95: (u64, bool);
    let mut _96: u64;
    let _97: usize;
    let mut _98: usize;
    let mut _99: bool;
    let mut _100: u64;
    let _101: usize;
    let mut _102: usize;
    let mut _103: bool;
    let _104: ();
    let mut _105: u64;
    let mut _106: *mut u64;
    let mut _107: *mut u64;
    let mut _108: isize;
    let mut _109: isize;
    let mut _110: bool;
    let mut _111: math::rate::U128;
    let mut _112: [u64; 2];
    let mut _113: bool;
    let mut _114: u64;
    scope 1 {
        debug me => _3;
        let _4: &[u64; 2];
        scope 2 {
            debug you => _4;
            let mut _5: [u64; 2];
            scope 3 {
                debug ret => _5;
                let _6: *mut u64;
                scope 4 {
                    debug ret_ptr => _6;
                    let mut _9: u64;
                    scope 5 {
                        debug carry => _9;
                        scope 6 {
                            let _15: u64;
                            let _16: bool;
                            let _43: u64;
                            let _44: bool;
                            let _65: u64;
                            let _66: bool;
                            let _93: u64;
                            let _94: bool;
                            scope 7 {
                                debug res1 => _15;
                                debug overflow1 => _16;
                                let _26: u64;
                                let _27: bool;
                                scope 8 {
                                    debug res2 => _26;
                                    debug overflow2 => _27;
                                    scope 9 {
                                        let mut _133: *const ();
                                        let mut _134: usize;
                                        let mut _135: usize;
                                        let mut _136: usize;
                                        let mut _137: usize;
                                        let mut _138: bool;
                                    }
                                }
                            }
                            scope 10 {
                                debug res => _43;
                                debug overflow => _44;
                                scope 11 {
                                    let mut _127: *const ();
                                    let mut _128: usize;
                                    let mut _129: usize;
                                    let mut _130: usize;
                                    let mut _131: usize;
                                    let mut _132: bool;
                                }
                            }
                            scope 12 {
                                debug res1 => _65;
                                debug overflow1 => _66;
                                let _76: u64;
                                let _77: bool;
                                scope 13 {
                                    debug res2 => _76;
                                    debug overflow2 => _77;
                                    scope 14 {
                                        let mut _121: *const ();
                                        let mut _122: usize;
                                        let mut _123: usize;
                                        let mut _124: usize;
                                        let mut _125: usize;
                                        let mut _126: bool;
                                    }
                                }
                            }
                            scope 15 {
                                debug res => _93;
                                debug overflow => _94;
                                scope 16 {
                                    let mut _115: *const ();
                                    let mut _116: usize;
                                    let mut _117: usize;
                                    let mut _118: usize;
                                    let mut _119: usize;
                                    let mut _120: bool;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_3);
        _3 = &(_1.0: [u64; 2]);
        StorageLive(_4);
        _4 = &(_2.0: [u64; 2]);
        StorageLive(_5);
        _5 = [const 0_u64; 2];
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &mut _5;
        _7 = &raw mut (*_8);
        _6 = move _7 as *mut u64 (PtrToPtr);
        StorageDead(_7);
        StorageDead(_8);
        StorageLive(_9);
        _9 = const 0_u64;
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = Ge(const _, const 0_usize);
        switchInt(move _12) -> [0: bb15, otherwise: bb1];
    }

    bb1: {
        StorageLive(_13);
        StorageLive(_14);
        _14 = _9;
        _13 = Ne(move _14, const 0_u64);
        switchInt(move _13) -> [0: bb9, otherwise: bb2];
    }

    bb2: {
        StorageDead(_14);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = const _;
        _20 = Len((*_3));
        _21 = Lt(_19, _20);
        assert(move _21, "index out of bounds: the length is {} but the index is {}", move _20, _19) -> [success: bb3, unwind continue];
    }

    bb3: {
        _18 = (*_3)[_19];
        StorageLive(_22);
        StorageLive(_23);
        _23 = const _;
        _24 = Len((*_4));
        _25 = Lt(_23, _24);
        assert(move _25, "index out of bounds: the length is {} but the index is {}", move _24, _23) -> [success: bb4, unwind continue];
    }

    bb4: {
        _22 = (*_4)[_23];
        _17 = core::num::<impl u64>::overflowing_sub(move _18, move _22) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_22);
        StorageDead(_18);
        StorageLive(_15);
        _15 = (_17.0: u64);
        StorageLive(_16);
        _16 = (_17.1: bool);
        StorageDead(_23);
        StorageDead(_19);
        StorageDead(_17);
        StorageLive(_28);
        StorageLive(_29);
        _29 = _15;
        StorageLive(_30);
        _30 = _9;
        _28 = core::num::<impl u64>::overflowing_sub(move _29, move _30) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_30);
        StorageDead(_29);
        StorageLive(_26);
        _26 = (_28.0: u64);
        StorageLive(_27);
        _27 = (_28.1: bool);
        StorageDead(_28);
        StorageLive(_31);
        StorageLive(_32);
        _32 = _26;
        StorageLive(_33);
        StorageLive(_34);
        _34 = _6;
        StorageLive(_35);
        StorageLive(_36);
        _36 = const _ as isize (IntToInt);
        _35 = _36;
        _33 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _34, move _35) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_35);
        StorageDead(_34);
        _133 = _33 as *const () (PtrToPtr);
        _134 = _133 as usize (Transmute);
        _135 = AlignOf(u64);
        _136 = Sub(_135, const 1_usize);
        _137 = BitAnd(_134, _136);
        _138 = Eq(_137, const 0_usize);
        assert(_138, "misaligned pointer dereference: address must be a multiple of {} but is {}", _135, _134) -> [success: bb36, unwind unreachable];
    }

    bb8: {
        _37 = move (_42.0: u8);
        StorageDead(_40);
        StorageDead(_38);
        _9 = move _37 as u64 (IntToInt);
        StorageDead(_37);
        _11 = const ();
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb14;
    }

    bb9: {
        StorageDead(_14);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = const _;
        _48 = Len((*_3));
        _49 = Lt(_47, _48);
        assert(move _49, "index out of bounds: the length is {} but the index is {}", move _48, _47) -> [success: bb10, unwind continue];
    }

    bb10: {
        _46 = (*_3)[_47];
        StorageLive(_50);
        StorageLive(_51);
        _51 = const _;
        _52 = Len((*_4));
        _53 = Lt(_51, _52);
        assert(move _53, "index out of bounds: the length is {} but the index is {}", move _52, _51) -> [success: bb11, unwind continue];
    }

    bb11: {
        _50 = (*_4)[_51];
        _45 = core::num::<impl u64>::overflowing_sub(move _46, move _50) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_50);
        StorageDead(_46);
        StorageLive(_43);
        _43 = (_45.0: u64);
        StorageLive(_44);
        _44 = (_45.1: bool);
        StorageDead(_51);
        StorageDead(_47);
        StorageDead(_45);
        StorageLive(_54);
        StorageLive(_55);
        _55 = _43;
        StorageLive(_56);
        StorageLive(_57);
        _57 = _6;
        StorageLive(_58);
        StorageLive(_59);
        _59 = const _ as isize (IntToInt);
        _58 = _59;
        _56 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _57, move _58) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_58);
        StorageDead(_57);
        _127 = _56 as *const () (PtrToPtr);
        _128 = _127 as usize (Transmute);
        _129 = AlignOf(u64);
        _130 = Sub(_129, const 1_usize);
        _131 = BitAnd(_128, _130);
        _132 = Eq(_131, const 0_usize);
        assert(_132, "misaligned pointer dereference: address must be a multiple of {} but is {}", _129, _128) -> [success: bb35, unwind unreachable];
    }

    bb14: {
        StorageDead(_13);
        goto -> bb16;
    }

    bb15: {
        _11 = const ();
        goto -> bb16;
    }

    bb16: {
        StorageDead(_12);
        StorageDead(_11);
        StorageLive(_61);
        StorageLive(_62);
        _62 = Ge(const _, const 0_usize);
        switchInt(move _62) -> [0: bb31, otherwise: bb17];
    }

    bb17: {
        StorageLive(_63);
        StorageLive(_64);
        _64 = _9;
        _63 = Ne(move _64, const 0_u64);
        switchInt(move _63) -> [0: bb25, otherwise: bb18];
    }

    bb18: {
        StorageDead(_64);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = const _;
        _70 = Len((*_3));
        _71 = Lt(_69, _70);
        assert(move _71, "index out of bounds: the length is {} but the index is {}", move _70, _69) -> [success: bb19, unwind continue];
    }

    bb19: {
        _68 = (*_3)[_69];
        StorageLive(_72);
        StorageLive(_73);
        _73 = const _;
        _74 = Len((*_4));
        _75 = Lt(_73, _74);
        assert(move _75, "index out of bounds: the length is {} but the index is {}", move _74, _73) -> [success: bb20, unwind continue];
    }

    bb20: {
        _72 = (*_4)[_73];
        _67 = core::num::<impl u64>::overflowing_sub(move _68, move _72) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_72);
        StorageDead(_68);
        StorageLive(_65);
        _65 = (_67.0: u64);
        StorageLive(_66);
        _66 = (_67.1: bool);
        StorageDead(_73);
        StorageDead(_69);
        StorageDead(_67);
        StorageLive(_78);
        StorageLive(_79);
        _79 = _65;
        StorageLive(_80);
        _80 = _9;
        _78 = core::num::<impl u64>::overflowing_sub(move _79, move _80) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_80);
        StorageDead(_79);
        StorageLive(_76);
        _76 = (_78.0: u64);
        StorageLive(_77);
        _77 = (_78.1: bool);
        StorageDead(_78);
        StorageLive(_81);
        StorageLive(_82);
        _82 = _76;
        StorageLive(_83);
        StorageLive(_84);
        _84 = _6;
        StorageLive(_85);
        StorageLive(_86);
        _86 = const _ as isize (IntToInt);
        _85 = _86;
        _83 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _84, move _85) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_85);
        StorageDead(_84);
        _121 = _83 as *const () (PtrToPtr);
        _122 = _121 as usize (Transmute);
        _123 = AlignOf(u64);
        _124 = Sub(_123, const 1_usize);
        _125 = BitAnd(_122, _124);
        _126 = Eq(_125, const 0_usize);
        assert(_126, "misaligned pointer dereference: address must be a multiple of {} but is {}", _123, _122) -> [success: bb34, unwind unreachable];
    }

    bb24: {
        _87 = move (_92.0: u8);
        StorageDead(_90);
        StorageDead(_88);
        _9 = move _87 as u64 (IntToInt);
        StorageDead(_87);
        _61 = const ();
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_66);
        StorageDead(_65);
        goto -> bb30;
    }

    bb25: {
        StorageDead(_64);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = const _;
        _98 = Len((*_3));
        _99 = Lt(_97, _98);
        assert(move _99, "index out of bounds: the length is {} but the index is {}", move _98, _97) -> [success: bb26, unwind continue];
    }

    bb26: {
        _96 = (*_3)[_97];
        StorageLive(_100);
        StorageLive(_101);
        _101 = const _;
        _102 = Len((*_4));
        _103 = Lt(_101, _102);
        assert(move _103, "index out of bounds: the length is {} but the index is {}", move _102, _101) -> [success: bb27, unwind continue];
    }

    bb27: {
        _100 = (*_4)[_101];
        _95 = core::num::<impl u64>::overflowing_sub(move _96, move _100) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_100);
        StorageDead(_96);
        StorageLive(_93);
        _93 = (_95.0: u64);
        StorageLive(_94);
        _94 = (_95.1: bool);
        StorageDead(_101);
        StorageDead(_97);
        StorageDead(_95);
        StorageLive(_104);
        StorageLive(_105);
        _105 = _93;
        StorageLive(_106);
        StorageLive(_107);
        _107 = _6;
        StorageLive(_108);
        StorageLive(_109);
        _109 = const _ as isize (IntToInt);
        _108 = _109;
        _106 = std::ptr::mut_ptr::<impl *mut u64>::offset(move _107, move _108) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_108);
        StorageDead(_107);
        _115 = _106 as *const () (PtrToPtr);
        _116 = _115 as usize (Transmute);
        _117 = AlignOf(u64);
        _118 = Sub(_117, const 1_usize);
        _119 = BitAnd(_116, _118);
        _120 = Eq(_119, const 0_usize);
        assert(_120, "misaligned pointer dereference: address must be a multiple of {} but is {}", _117, _116) -> [success: bb33, unwind unreachable];
    }

    bb30: {
        StorageDead(_63);
        goto -> bb32;
    }

    bb31: {
        _61 = const ();
        goto -> bb32;
    }

    bb32: {
        StorageDead(_62);
        StorageDead(_61);
        _10 = const ();
        StorageDead(_10);
        StorageLive(_111);
        StorageLive(_112);
        _112 = _5;
        _111 = U128(move _112);
        StorageDead(_112);
        StorageLive(_113);
        StorageLive(_114);
        _114 = _9;
        _113 = Gt(move _114, const 0_u64);
        StorageDead(_114);
        _0 = (move _111, move _113);
        StorageDead(_113);
        StorageDead(_111);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        return;
    }

    bb33: {
        (*_106) = move _105;
        _104 = const ();
        StorageDead(_105);
        StorageDead(_109);
        StorageDead(_106);
        StorageDead(_104);
        StorageLive(_110);
        _110 = _94;
        _9 = move _110 as u64 (IntToInt);
        StorageDead(_110);
        _61 = const ();
        StorageDead(_94);
        StorageDead(_93);
        goto -> bb30;
    }

    bb34: {
        (*_83) = move _82;
        _81 = const ();
        StorageDead(_82);
        StorageDead(_86);
        StorageDead(_83);
        StorageDead(_81);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = _66;
        _88 = move _89 as u8 (IntToInt);
        StorageDead(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = _77;
        _90 = move _91 as u8 (IntToInt);
        StorageDead(_91);
        _92 = CheckedAdd(_88, _90);
        assert(!move (_92.1: bool), "attempt to compute `{} + {}`, which would overflow", move _88, move _90) -> [success: bb24, unwind continue];
    }

    bb35: {
        (*_56) = move _55;
        _54 = const ();
        StorageDead(_55);
        StorageDead(_59);
        StorageDead(_56);
        StorageDead(_54);
        StorageLive(_60);
        _60 = _44;
        _9 = move _60 as u64 (IntToInt);
        StorageDead(_60);
        _11 = const ();
        StorageDead(_44);
        StorageDead(_43);
        goto -> bb14;
    }

    bb36: {
        (*_33) = move _32;
        _31 = const ();
        StorageDead(_32);
        StorageDead(_36);
        StorageDead(_33);
        StorageDead(_31);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = _16;
        _38 = move _39 as u8 (IntToInt);
        StorageDead(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = _27;
        _40 = move _41 as u8 (IntToInt);
        StorageDead(_41);
        _42 = CheckedAdd(_38, _40);
        assert(!move (_42.1: bool), "attempt to compute `{} + {}`, which would overflow", move _38, move _40) -> [success: bb8, unwind continue];
    }
}
