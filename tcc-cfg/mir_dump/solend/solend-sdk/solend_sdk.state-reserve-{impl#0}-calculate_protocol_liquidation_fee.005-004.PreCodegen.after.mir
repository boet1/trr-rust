// MIR for `reserve::<impl at token-lending\sdk\src\state\reserve.rs:65:1: 65:13>::calculate_protocol_liquidation_fee` after PreCodegen

fn reserve::<impl at token-lending\sdk\src\state\reserve.rs:65:1: 65:13>::calculate_protocol_liquidation_fee(_1: &reserve::Reserve, _2: u64, _3: &Bonus) -> Result<u64, ProgramError> {
    debug self => _1;
    debug amount_liquidated => _2;
    debug bonus => _3;
    let mut _0: std::result::Result<u64, solana_program::program_error::ProgramError>;
    let _4: ();
    let mut _5: bool;
    let mut _6: &math::decimal::Decimal;
    let mut _7: &math::decimal::Decimal;
    let _8: math::decimal::Decimal;
    let mut _9: !;
    let _10: ();
    let mut _11: &str;
    let _12: &str;
    let mut _13: solana_program::program_error::ProgramError;
    let mut _14: error::LendingError;
    let _15: math::decimal::Decimal;
    let mut _16: u64;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _19: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _20: math::decimal::Decimal;
    let mut _21: math::decimal::Decimal;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _23: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _24: math::decimal::Decimal;
    let mut _25: math::decimal::Decimal;
    let mut _26: isize;
    let mut _28: !;
    let mut _29: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _36: u64;
    let mut _37: u64;
    let mut _38: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, u64>;
    let mut _39: std::result::Result<u64, solana_program::program_error::ProgramError>;
    let mut _40: &math::decimal::Decimal;
    let _41: math::decimal::Decimal;
    let mut _42: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _43: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _44: math::decimal::Decimal;
    let mut _45: math::decimal::Decimal;
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _51: isize;
    let mut _53: !;
    let mut _54: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: isize;
    let mut _60: isize;
    let mut _61: isize;
    let mut _62: isize;
    let mut _63: isize;
    let mut _64: isize;
    let mut _65: isize;
    let mut _66: isize;
    let mut _67: isize;
    let mut _68: isize;
    let mut _69: isize;
    let mut _70: isize;
    let mut _71: isize;
    let mut _72: isize;
    let mut _73: isize;
    let mut _74: isize;
    let mut _75: isize;
    let mut _76: isize;
    let mut _77: isize;
    let mut _78: isize;
    scope 1 {
        debug amount_liquidated_wads => _15;
        let _17: math::decimal::Decimal;
        let _27: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _30: math::decimal::Decimal;
        let _32: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _35: math::decimal::Decimal;
        scope 2 {
            debug nonbonus_amount => _17;
            let _47: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
            let _50: math::decimal::Decimal;
            let _52: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
            let _55: u64;
            scope 11 {
                debug residual => _47;
                scope 12 {
                }
            }
            scope 13 {
                debug val => _50;
                scope 14 {
                }
            }
            scope 15 {
                debug residual => _52;
                scope 16 {
                }
            }
            scope 17 {
                debug val => _55;
                scope 18 {
                }
            }
        }
        scope 3 {
            debug residual => _27;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _30;
            scope 6 {
            }
        }
        scope 7 {
            debug residual => _32;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _35;
            scope 10 {
            }
        }
    }

    bb0: {
        _57 = const false;
        _56 = const false;
        _58 = const false;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &((*_3).0: math::decimal::Decimal);
        StorageLive(_7);
        StorageLive(_8);
        _8 = decimal::Decimal::from_percent(const _) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = &_8;
        _5 = <decimal::Decimal as PartialOrd>::gt(move _6, move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _5) -> [0: bb6, otherwise: bb3];
    }

    bb3: {
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = const "Bonus rate cannot exceed maximum bonus rate";
        _11 = &(*_12);
        _10 = solana_program::log::sol_log(move _11) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_11);
        StorageDead(_12);
        StorageDead(_10);
        StorageLive(_13);
        StorageLive(_14);
        _14 = LendingError::InvalidAmount;
        _13 = <LendingError as Into<ProgramError>>::into(move _14) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_14);
        _0 = Result::<u64, ProgramError>::Err(move _13);
        StorageDead(_13);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb33;
    }

    bb6: {
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        _4 = const ();
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_15);
        StorageLive(_16);
        _16 = _2;
        _15 = <decimal::Decimal as From<u64>>::from(move _16) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = _15;
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = decimal::Decimal::one() -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageLive(_25);
        _25 = ((*_3).0: math::decimal::Decimal);
        _23 = <decimal::Decimal as common::TryAdd>::try_add(move _24, move _25) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_25);
        StorageDead(_24);
        _22 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _23) -> [return: bb10, unwind: bb34];
    }

    bb10: {
        _57 = const true;
        StorageDead(_23);
        _26 = discriminant(_22);
        switchInt(move _26) -> [0: bb11, 1: bb13, otherwise: bb12];
    }

    bb11: {
        StorageLive(_30);
        _30 = ((_22 as Continue).0: math::decimal::Decimal);
        _21 = _30;
        StorageDead(_30);
        _19 = <decimal::Decimal as common::TryDiv<decimal::Decimal>>::try_div(move _20, move _21) -> [return: bb15, unwind: bb38];
    }

    bb12: {
        unreachable;
    }

    bb13: {
        StorageLive(_27);
        _27 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_29);
        _29 = move _27;
        _0 = <Result<u64, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _29) -> [return: bb14, unwind: bb38];
    }

    bb14: {
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        goto -> bb32;
    }

    bb15: {
        StorageDead(_21);
        StorageDead(_20);
        _18 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _19) -> [return: bb16, unwind: bb38];
    }

    bb16: {
        StorageDead(_19);
        _31 = discriminant(_18);
        switchInt(move _31) -> [0: bb17, 1: bb18, otherwise: bb12];
    }

    bb17: {
        StorageLive(_35);
        _35 = ((_18 as Continue).0: math::decimal::Decimal);
        _17 = _35;
        StorageDead(_35);
        _59 = discriminant(_18);
        _61 = discriminant(_22);
        _57 = const false;
        StorageDead(_22);
        StorageDead(_18);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = _17;
        StorageLive(_45);
        _45 = ((*_3).1: math::decimal::Decimal);
        _43 = <decimal::Decimal as common::TryMul<decimal::Decimal>>::try_mul(move _44, move _45) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_32);
        _32 = move ((_18 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_34);
        _34 = move _32;
        _0 = <Result<u64, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _34) -> [return: bb19, unwind: bb37];
    }

    bb19: {
        StorageDead(_34);
        StorageDead(_32);
        _71 = discriminant(_18);
        goto -> bb32;
    }

    bb20: {
        StorageDead(_45);
        StorageDead(_44);
        _42 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _43) -> [return: bb21, unwind: bb34];
    }

    bb21: {
        _56 = const true;
        StorageDead(_43);
        _46 = discriminant(_42);
        switchInt(move _46) -> [0: bb22, 1: bb23, otherwise: bb12];
    }

    bb22: {
        StorageLive(_50);
        _50 = ((_42 as Continue).0: math::decimal::Decimal);
        _41 = _50;
        StorageDead(_50);
        _40 = &_41;
        _39 = decimal::Decimal::try_ceil_u64(move _40) -> [return: bb25, unwind: bb36];
    }

    bb23: {
        StorageLive(_47);
        _47 = move ((_42 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_49);
        _49 = move _47;
        _0 = <Result<u64, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _49) -> [return: bb24, unwind: bb36];
    }

    bb24: {
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_17);
        StorageDead(_15);
        goto -> bb31;
    }

    bb25: {
        StorageDead(_40);
        _38 = <Result<u64, ProgramError> as Try>::branch(move _39) -> [return: bb26, unwind: bb36];
    }

    bb26: {
        _58 = const true;
        StorageDead(_39);
        _51 = discriminant(_38);
        switchInt(move _51) -> [0: bb27, 1: bb28, otherwise: bb12];
    }

    bb27: {
        StorageLive(_55);
        _55 = ((_38 as Continue).0: u64);
        _37 = _55;
        StorageDead(_55);
        _36 = std::cmp::max::<u64>(move _37, const 1_u64) -> [return: bb30, unwind: bb35];
    }

    bb28: {
        StorageLive(_52);
        _52 = move ((_38 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_54);
        _54 = move _52;
        _0 = <Result<u64, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _54) -> [return: bb29, unwind: bb35];
    }

    bb29: {
        StorageDead(_54);
        StorageDead(_52);
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_17);
        StorageDead(_15);
        _67 = discriminant(_38);
        goto -> bb31;
    }

    bb30: {
        StorageDead(_37);
        _0 = Result::<u64, ProgramError>::Ok(move _36);
        StorageDead(_36);
        StorageDead(_17);
        StorageDead(_15);
        _63 = discriminant(_38);
        _65 = discriminant(_42);
        _56 = const false;
        StorageDead(_42);
        StorageDead(_41);
        _58 = const false;
        StorageDead(_38);
        goto -> bb33;
    }

    bb31: {
        _69 = discriminant(_42);
        _56 = const false;
        StorageDead(_42);
        StorageDead(_41);
        _58 = const false;
        StorageDead(_38);
        goto -> bb33;
    }

    bb32: {
        _73 = discriminant(_22);
        _57 = const false;
        StorageDead(_22);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_15);
        goto -> bb33;
    }

    bb33: {
        return;
    }

    bb34 (cleanup): {
        resume;
    }

    bb35 (cleanup): {
        _75 = discriminant(_38);
        goto -> bb36;
    }

    bb36 (cleanup): {
        _76 = discriminant(_42);
        goto -> bb34;
    }

    bb37 (cleanup): {
        _77 = discriminant(_18);
        goto -> bb38;
    }

    bb38 (cleanup): {
        _78 = discriminant(_22);
        goto -> bb34;
    }
}
