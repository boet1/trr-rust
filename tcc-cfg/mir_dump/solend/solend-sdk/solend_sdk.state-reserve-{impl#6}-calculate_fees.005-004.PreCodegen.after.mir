// MIR for `reserve::<impl at token-lending\sdk\src\state\reserve.rs:1139:1: 1139:17>::calculate_fees` after PreCodegen

fn reserve::<impl at token-lending\sdk\src\state\reserve.rs:1139:1: 1139:17>::calculate_fees(_1: &reserve::ReserveFees, _2: decimal::Decimal, _3: u64, _4: FeeCalculation) -> Result<(u64, u64), ProgramError> {
    debug self => _1;
    debug amount => _2;
    debug fee_wad => _3;
    debug fee_calculation => _4;
    let mut _0: std::result::Result<(u64, u64), solana_program::program_error::ProgramError>;
    let _5: math::rate::Rate;
    let mut _6: u64;
    let mut _8: u8;
    let mut _9: bool;
    let mut _10: &math::rate::Rate;
    let mut _11: &math::rate::Rate;
    let _12: math::rate::Rate;
    let mut _13: bool;
    let mut _14: &math::decimal::Decimal;
    let mut _15: &math::decimal::Decimal;
    let _16: math::decimal::Decimal;
    let mut _18: &math::rate::Rate;
    let mut _19: &math::rate::Rate;
    let _20: math::rate::Rate;
    let mut _22: bool;
    let mut _24: isize;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _26: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _27: math::decimal::Decimal;
    let mut _28: math::rate::Rate;
    let mut _29: isize;
    let mut _31: !;
    let mut _32: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::rate::Rate>;
    let mut _36: std::result::Result<math::rate::Rate, solana_program::program_error::ProgramError>;
    let mut _37: math::rate::Rate;
    let mut _38: math::rate::Rate;
    let mut _39: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::rate::Rate>;
    let mut _40: std::result::Result<math::rate::Rate, solana_program::program_error::ProgramError>;
    let mut _41: math::rate::Rate;
    let mut _42: math::rate::Rate;
    let mut _43: isize;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _48: isize;
    let mut _50: !;
    let mut _51: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _53: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _54: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _55: math::decimal::Decimal;
    let mut _56: math::rate::Rate;
    let mut _57: isize;
    let mut _59: !;
    let mut _60: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _63: math::decimal::Decimal;
    let mut _64: math::decimal::Decimal;
    let mut _65: u64;
    let _66: ();
    let mut _67: bool;
    let mut _68: &math::decimal::Decimal;
    let mut _69: &math::decimal::Decimal;
    let mut _70: !;
    let _71: ();
    let mut _72: &str;
    let _73: &str;
    let mut _74: solana_program::program_error::ProgramError;
    let mut _75: error::LendingError;
    let mut _77: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, u64>;
    let mut _78: std::result::Result<u64, solana_program::program_error::ProgramError>;
    let mut _79: &math::decimal::Decimal;
    let mut _80: isize;
    let mut _82: !;
    let mut _83: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _86: bool;
    let mut _87: u64;
    let mut _88: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, u64>;
    let mut _89: std::result::Result<u64, solana_program::program_error::ProgramError>;
    let mut _90: &math::decimal::Decimal;
    let _91: math::decimal::Decimal;
    let mut _92: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _93: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _94: math::decimal::Decimal;
    let mut _95: math::rate::Rate;
    let mut _96: isize;
    let mut _98: !;
    let mut _99: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _101: isize;
    let mut _103: !;
    let mut _104: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _106: (u64, u64);
    let mut _107: u64;
    let mut _108: u64;
    let mut _109: (u64, u64);
    let mut _110: bool;
    let mut _111: bool;
    let mut _112: bool;
    let mut _113: isize;
    let mut _114: isize;
    let mut _115: isize;
    let mut _116: isize;
    let mut _117: isize;
    let mut _118: isize;
    let mut _119: isize;
    let mut _120: isize;
    let mut _121: isize;
    let mut _122: isize;
    let mut _123: isize;
    let mut _124: isize;
    let mut _125: isize;
    let mut _126: isize;
    let mut _127: isize;
    let mut _128: isize;
    let mut _129: isize;
    let mut _130: isize;
    let mut _131: isize;
    let mut _132: isize;
    let mut _133: isize;
    let mut _134: isize;
    let mut _135: isize;
    let mut _136: isize;
    let mut _137: isize;
    let mut _138: isize;
    let mut _139: isize;
    let mut _140: isize;
    let mut _141: isize;
    let mut _142: isize;
    let mut _143: isize;
    let mut _144: isize;
    let mut _145: isize;
    let mut _146: isize;
    let mut _147: isize;
    scope 1 {
        debug borrow_fee_rate => _5;
        let _7: math::rate::Rate;
        scope 2 {
            debug host_fee_rate => _7;
            let _17: bool;
            scope 3 {
                debug need_to_assess_host_fee => _17;
                let _21: u64;
                scope 4 {
                    debug minimum_fee => _21;
                    let _23: math::decimal::Decimal;
                    let _30: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                    let _33: math::decimal::Decimal;
                    let _34: math::rate::Rate;
                    let _44: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                    let _47: math::rate::Rate;
                    let _49: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                    let _52: math::rate::Rate;
                    scope 5 {
                        debug borrow_fee_amount => _23;
                        let _62: math::decimal::Decimal;
                        scope 23 {
                            debug borrow_fee_decimal => _62;
                            let _76: u64;
                            let _81: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                            let _84: u64;
                            scope 24 {
                                debug borrow_fee => _76;
                                let _85: u64;
                                let _97: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                let _100: math::decimal::Decimal;
                                let _102: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                let _105: u64;
                                scope 29 {
                                    debug host_fee => _85;
                                }
                                scope 30 {
                                    debug residual => _97;
                                    scope 31 {
                                    }
                                }
                                scope 32 {
                                    debug val => _100;
                                    scope 33 {
                                    }
                                }
                                scope 34 {
                                    debug residual => _102;
                                    scope 35 {
                                    }
                                }
                                scope 36 {
                                    debug val => _105;
                                    scope 37 {
                                    }
                                }
                            }
                            scope 25 {
                                debug residual => _81;
                                scope 26 {
                                }
                            }
                            scope 27 {
                                debug val => _84;
                                scope 28 {
                                }
                            }
                        }
                    }
                    scope 6 {
                        debug residual => _30;
                        scope 7 {
                        }
                    }
                    scope 8 {
                        debug val => _33;
                        scope 9 {
                        }
                    }
                    scope 10 {
                        debug borrow_fee_rate => _34;
                        let _58: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                        let _61: math::decimal::Decimal;
                        scope 19 {
                            debug residual => _58;
                            scope 20 {
                            }
                        }
                        scope 21 {
                            debug val => _61;
                            scope 22 {
                            }
                        }
                    }
                    scope 11 {
                        debug residual => _44;
                        scope 12 {
                        }
                    }
                    scope 13 {
                        debug val => _47;
                        scope 14 {
                        }
                    }
                    scope 15 {
                        debug residual => _49;
                        scope 16 {
                        }
                    }
                    scope 17 {
                        debug val => _52;
                        scope 18 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _111 = const false;
        _110 = const false;
        _112 = const false;
        StorageLive(_5);
        StorageLive(_6);
        _6 = _3;
        _5 = rate::Rate::from_scaled_val(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = ((*_1).2: u8);
        _7 = rate::Rate::from_percent(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &_5;
        StorageLive(_11);
        StorageLive(_12);
        _12 = rate::Rate::zero() -> [return: bb3, unwind continue];
    }

    bb3: {
        _11 = &_12;
        _9 = <rate::Rate as PartialOrd>::gt(move _10, move _11) -> [return: bb4, unwind continue];
    }

    bb4: {
        switchInt(move _9) -> [0: bb66, otherwise: bb5];
    }

    bb5: {
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_13);
        StorageLive(_14);
        _14 = &_2;
        StorageLive(_15);
        StorageLive(_16);
        _16 = decimal::Decimal::zero() -> [return: bb6, unwind continue];
    }

    bb6: {
        _15 = &_16;
        _13 = <decimal::Decimal as PartialOrd>::gt(move _14, move _15) -> [return: bb7, unwind continue];
    }

    bb7: {
        switchInt(move _13) -> [0: bb65, otherwise: bb8];
    }

    bb8: {
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_17);
        StorageLive(_18);
        _18 = &_7;
        StorageLive(_19);
        StorageLive(_20);
        _20 = rate::Rate::zero() -> [return: bb9, unwind continue];
    }

    bb9: {
        _19 = &_20;
        _17 = <rate::Rate as PartialOrd>::gt(move _18, move _19) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = _17;
        switchInt(move _22) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _21 = const 2_u64;
        goto -> bb13;
    }

    bb12: {
        _21 = const 1_u64;
        goto -> bb13;
    }

    bb13: {
        StorageDead(_22);
        StorageLive(_23);
        _24 = discriminant(_4);
        switchInt(move _24) -> [0: bb16, 1: bb14, otherwise: bb15];
    }

    bb14: {
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = _5;
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = _5;
        StorageLive(_42);
        _42 = rate::Rate::one() -> [return: bb22, unwind continue];
    }

    bb15: {
        unreachable;
    }

    bb16: {
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = _2;
        StorageLive(_28);
        _28 = _5;
        _26 = <decimal::Decimal as common::TryMul<rate::Rate>>::try_mul(move _27, move _28) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_28);
        StorageDead(_27);
        _25 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _26) -> [return: bb18, unwind: bb75];
    }

    bb18: {
        StorageDead(_26);
        _29 = discriminant(_25);
        switchInt(move _29) -> [0: bb19, 1: bb20, otherwise: bb15];
    }

    bb19: {
        StorageLive(_33);
        _33 = ((_25 as Continue).0: math::decimal::Decimal);
        _23 = _33;
        StorageDead(_33);
        _113 = discriminant(_25);
        StorageDead(_25);
        goto -> bb38;
    }

    bb20: {
        StorageLive(_30);
        _30 = move ((_25 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_32);
        _32 = move _30;
        _0 = <Result<(u64, u64), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _32) -> [return: bb21, unwind: bb82];
    }

    bb21: {
        StorageDead(_32);
        StorageDead(_30);
        _139 = discriminant(_25);
        StorageDead(_25);
        goto -> bb73;
    }

    bb22: {
        _40 = <rate::Rate as common::TryAdd>::try_add(move _41, move _42) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_42);
        StorageDead(_41);
        _39 = <Result<rate::Rate, ProgramError> as Try>::branch(move _40) -> [return: bb24, unwind: bb75];
    }

    bb24: {
        _111 = const true;
        StorageDead(_40);
        _43 = discriminant(_39);
        switchInt(move _43) -> [0: bb25, 1: bb26, otherwise: bb15];
    }

    bb25: {
        StorageLive(_47);
        _47 = ((_39 as Continue).0: math::rate::Rate);
        _38 = _47;
        StorageDead(_47);
        _36 = <rate::Rate as common::TryDiv<rate::Rate>>::try_div(move _37, move _38) -> [return: bb28, unwind: bb81];
    }

    bb26: {
        StorageLive(_44);
        _44 = move ((_39 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_46);
        _46 = move _44;
        _0 = <Result<(u64, u64), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _46) -> [return: bb27, unwind: bb81];
    }

    bb27: {
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_36);
        goto -> bb72;
    }

    bb28: {
        StorageDead(_38);
        StorageDead(_37);
        _35 = <Result<rate::Rate, ProgramError> as Try>::branch(move _36) -> [return: bb29, unwind: bb81];
    }

    bb29: {
        StorageDead(_36);
        _48 = discriminant(_35);
        switchInt(move _48) -> [0: bb30, 1: bb31, otherwise: bb15];
    }

    bb30: {
        StorageLive(_52);
        _52 = ((_35 as Continue).0: math::rate::Rate);
        _34 = _52;
        StorageDead(_52);
        _115 = discriminant(_35);
        _117 = discriminant(_39);
        _111 = const false;
        StorageDead(_39);
        StorageDead(_35);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = _2;
        StorageLive(_56);
        _56 = _34;
        _54 = <decimal::Decimal as common::TryMul<rate::Rate>>::try_mul(move _55, move _56) -> [return: bb33, unwind continue];
    }

    bb31: {
        StorageLive(_49);
        _49 = move ((_35 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_51);
        _51 = move _49;
        _0 = <Result<(u64, u64), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _51) -> [return: bb32, unwind: bb80];
    }

    bb32: {
        StorageDead(_51);
        StorageDead(_49);
        _135 = discriminant(_35);
        goto -> bb72;
    }

    bb33: {
        StorageDead(_56);
        StorageDead(_55);
        _53 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _54) -> [return: bb34, unwind: bb75];
    }

    bb34: {
        StorageDead(_54);
        _57 = discriminant(_53);
        switchInt(move _57) -> [0: bb35, 1: bb36, otherwise: bb15];
    }

    bb35: {
        StorageLive(_61);
        _61 = ((_53 as Continue).0: math::decimal::Decimal);
        _23 = _61;
        StorageDead(_61);
        StorageDead(_34);
        _119 = discriminant(_53);
        StorageDead(_53);
        goto -> bb38;
    }

    bb36: {
        StorageLive(_58);
        _58 = move ((_53 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_60);
        _60 = move _58;
        _0 = <Result<(u64, u64), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _60) -> [return: bb37, unwind: bb79];
    }

    bb37: {
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_34);
        _133 = discriminant(_53);
        StorageDead(_53);
        goto -> bb73;
    }

    bb38: {
        StorageLive(_62);
        StorageLive(_63);
        _63 = _23;
        StorageLive(_64);
        StorageLive(_65);
        _65 = _21;
        _64 = <u64 as Into<decimal::Decimal>>::into(move _65) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_65);
        _62 = <decimal::Decimal as Ord>::max(move _63, move _64) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_64);
        StorageDead(_63);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = &_62;
        StorageLive(_69);
        _69 = &_2;
        _67 = <decimal::Decimal as PartialOrd>::ge(move _68, move _69) -> [return: bb41, unwind continue];
    }

    bb41: {
        switchInt(move _67) -> [0: bb45, otherwise: bb42];
    }

    bb42: {
        StorageDead(_69);
        StorageDead(_68);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _73 = const "Borrow amount is too small to receive liquidity after fees";
        _72 = &(*_73);
        _71 = solana_program::log::sol_log(move _72) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_72);
        StorageDead(_73);
        StorageDead(_71);
        StorageLive(_74);
        StorageLive(_75);
        _75 = LendingError::BorrowTooSmall;
        _74 = <LendingError as Into<ProgramError>>::into(move _75) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_75);
        _0 = Result::<(u64, u64), ProgramError>::Err(move _74);
        StorageDead(_74);
        StorageDead(_67);
        StorageDead(_66);
        goto -> bb71;
    }

    bb45: {
        StorageDead(_69);
        StorageDead(_68);
        _66 = const ();
        StorageDead(_67);
        StorageDead(_66);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = &_62;
        _78 = decimal::Decimal::try_round_u64(move _79) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_79);
        _77 = <Result<u64, ProgramError> as Try>::branch(move _78) -> [return: bb47, unwind: bb75];
    }

    bb47: {
        StorageDead(_78);
        _80 = discriminant(_77);
        switchInt(move _80) -> [0: bb48, 1: bb49, otherwise: bb15];
    }

    bb48: {
        StorageLive(_84);
        _84 = ((_77 as Continue).0: u64);
        _76 = _84;
        StorageDead(_84);
        _121 = discriminant(_77);
        StorageDead(_77);
        StorageLive(_85);
        StorageLive(_86);
        _86 = _17;
        switchInt(move _86) -> [0: bb63, otherwise: bb51];
    }

    bb49: {
        StorageLive(_81);
        _81 = move ((_77 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_83);
        _83 = move _81;
        _0 = <Result<(u64, u64), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _83) -> [return: bb50, unwind: bb78];
    }

    bb50: {
        StorageDead(_83);
        StorageDead(_81);
        _131 = discriminant(_77);
        StorageDead(_77);
        goto -> bb70;
    }

    bb51: {
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _94 = _62;
        StorageLive(_95);
        _95 = _7;
        _93 = <decimal::Decimal as common::TryMul<rate::Rate>>::try_mul(move _94, move _95) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_95);
        StorageDead(_94);
        _92 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _93) -> [return: bb53, unwind: bb75];
    }

    bb53: {
        _110 = const true;
        StorageDead(_93);
        _96 = discriminant(_92);
        switchInt(move _96) -> [0: bb54, 1: bb55, otherwise: bb15];
    }

    bb54: {
        StorageLive(_100);
        _100 = ((_92 as Continue).0: math::decimal::Decimal);
        _91 = _100;
        StorageDead(_100);
        _90 = &_91;
        _89 = decimal::Decimal::try_round_u64(move _90) -> [return: bb57, unwind: bb77];
    }

    bb55: {
        StorageLive(_97);
        _97 = move ((_92 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_99);
        _99 = move _97;
        _0 = <Result<(u64, u64), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _99) -> [return: bb56, unwind: bb77];
    }

    bb56: {
        StorageDead(_99);
        StorageDead(_97);
        StorageDead(_90);
        StorageDead(_89);
        StorageDead(_87);
        goto -> bb69;
    }

    bb57: {
        StorageDead(_90);
        _88 = <Result<u64, ProgramError> as Try>::branch(move _89) -> [return: bb58, unwind: bb77];
    }

    bb58: {
        _112 = const true;
        StorageDead(_89);
        _101 = discriminant(_88);
        switchInt(move _101) -> [0: bb59, 1: bb60, otherwise: bb15];
    }

    bb59: {
        StorageLive(_105);
        _105 = ((_88 as Continue).0: u64);
        _87 = _105;
        StorageDead(_105);
        _85 = <u64 as Ord>::max(move _87, const 1_u64) -> [return: bb62, unwind: bb76];
    }

    bb60: {
        StorageLive(_102);
        _102 = move ((_88 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_104);
        _104 = move _102;
        _0 = <Result<(u64, u64), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _104) -> [return: bb61, unwind: bb76];
    }

    bb61: {
        StorageDead(_104);
        StorageDead(_102);
        StorageDead(_87);
        _127 = discriminant(_88);
        goto -> bb69;
    }

    bb62: {
        StorageDead(_87);
        _123 = discriminant(_88);
        _125 = discriminant(_92);
        _110 = const false;
        StorageDead(_92);
        StorageDead(_91);
        _112 = const false;
        StorageDead(_88);
        goto -> bb64;
    }

    bb63: {
        _85 = const 0_u64;
        goto -> bb64;
    }

    bb64: {
        StorageDead(_86);
        StorageLive(_106);
        StorageLive(_107);
        _107 = _76;
        StorageLive(_108);
        _108 = _85;
        _106 = (move _107, move _108);
        StorageDead(_108);
        StorageDead(_107);
        _0 = Result::<(u64, u64), ProgramError>::Ok(move _106);
        StorageDead(_106);
        StorageDead(_85);
        StorageDead(_76);
        StorageDead(_62);
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_17);
        goto -> bb68;
    }

    bb65: {
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb67;
    }

    bb66: {
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb67;
    }

    bb67: {
        StorageLive(_109);
        _109 = (const 0_u64, const 0_u64);
        _0 = Result::<(u64, u64), ProgramError>::Ok(move _109);
        StorageDead(_109);
        goto -> bb68;
    }

    bb68: {
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_7);
        StorageDead(_5);
        goto -> bb74;
    }

    bb69: {
        _129 = discriminant(_92);
        _110 = const false;
        StorageDead(_92);
        StorageDead(_91);
        _112 = const false;
        StorageDead(_88);
        StorageDead(_86);
        StorageDead(_85);
        goto -> bb70;
    }

    bb70: {
        StorageDead(_76);
        goto -> bb71;
    }

    bb71: {
        StorageDead(_62);
        goto -> bb73;
    }

    bb72: {
        _137 = discriminant(_39);
        _111 = const false;
        StorageDead(_39);
        StorageDead(_35);
        StorageDead(_34);
        goto -> bb73;
    }

    bb73: {
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_17);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_7);
        StorageDead(_5);
        goto -> bb74;
    }

    bb74: {
        return;
    }

    bb75 (cleanup): {
        resume;
    }

    bb76 (cleanup): {
        _141 = discriminant(_88);
        goto -> bb77;
    }

    bb77 (cleanup): {
        _142 = discriminant(_92);
        goto -> bb75;
    }

    bb78 (cleanup): {
        _143 = discriminant(_77);
        goto -> bb75;
    }

    bb79 (cleanup): {
        _144 = discriminant(_53);
        goto -> bb75;
    }

    bb80 (cleanup): {
        _145 = discriminant(_35);
        goto -> bb81;
    }

    bb81 (cleanup): {
        _146 = discriminant(_39);
        goto -> bb75;
    }

    bb82 (cleanup): {
        _147 = discriminant(_25);
        goto -> bb75;
    }
}
