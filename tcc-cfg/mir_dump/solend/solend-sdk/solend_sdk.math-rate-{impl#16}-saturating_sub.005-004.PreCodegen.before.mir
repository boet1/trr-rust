// MIR for `rate::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:587:3: 587:13>::saturating_sub` before PreCodegen

fn rate::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:587:3: 587:13>::saturating_sub(_1: U128, _2: U128) -> U128 {
    debug self => _1;
    debug other => _2;
    let mut _0: math::rate::U128;
    let mut _3: (math::rate::U128, bool);
    let mut _4: math::rate::U128;
    let mut _5: math::rate::U128;
    let _6: math::rate::U128;
    scope 1 {
        debug val => _6;
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = _1;
        StorageLive(_5);
        _5 = _2;
        _3 = U128::overflowing_sub(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        StorageDead(_4);
        switchInt((_3.1: bool)) -> [0: bb2, otherwise: bb3];
    }

    bb2: {
        StorageLive(_6);
        _6 = (_3.0: math::rate::U128);
        _0 = _6;
        StorageDead(_6);
        goto -> bb4;
    }

    bb3: {
        _0 = U128::zero() -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_3);
        return;
    }
}
