digraph Mir_0_834 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn U192::full_mul_u64(_1: math::decimal::U192, _2: u64) -&gt; [u64; 4_usize]<br align="left"/>let _3: math::decimal::U192;<br align="left"/>let _4: u64;<br align="left"/>let mut _5: (math::decimal::U192, u64);<br align="left"/>let mut _6: math::decimal::U192;<br align="left"/>let mut _7: u64;<br align="left"/>let mut _8: [u64; 4_usize];<br align="left"/>let _9: ();<br align="left"/>let mut _10: &amp;ReErased mut [u64];<br align="left"/>let mut _11: &amp;ReErased mut [u64];<br align="left"/>let mut _12: &amp;ReErased mut [u64; 4_usize];<br align="left"/>let mut _13: std::ops::RangeTo&lt;usize&gt;;<br align="left"/>let mut _14: &amp;ReErased [u64];<br align="left"/>let _15: &amp;ReErased [u64];<br align="left"/>let _16: &amp;ReErased [u64];<br align="left"/>let mut _17: &amp;ReErased [u64; 3_usize];<br align="left"/>let mut _18: std::ops::RangeFull;<br align="left"/>let mut _19: u64;<br align="left"/>let _20: usize;<br align="left"/>let mut _21: usize;<br align="left"/>let mut _22: bool;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug by =&gt; _2;<br align="left"/>debug prod =&gt; _3;<br align="left"/>debug carry =&gt; _4;<br align="left"/>debug res =&gt; _8;<br align="left"/>>;
    bb0__0_834 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = _1<br/>StorageLive(_7)<br/>_7 = _2<br/></td></tr><tr><td align="left">_5 = U192::overflowing_mul_u64(move _6, move _7)</td></tr></table>>];
    bb1__0_834 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>StorageDead(_6)<br/>StorageLive(_3)<br/>_3 = (_5.0: math::decimal::U192)<br/>StorageLive(_4)<br/>_4 = (_5.1: u64)<br/>StorageDead(_5)<br/>StorageLive(_8)<br/>_8 = [const 0_u64; 4]<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>_12 = &amp;mut _8<br/>StorageLive(_13)<br/>_13 = RangeTo::&lt;usize&gt; { end: const 3_usize }<br/></td></tr><tr><td align="left">_11 = &lt;[u64; 4] as IndexMut&lt;RangeTo&lt;usize&gt;&gt;&gt;::index_mut(move _12, move _13)</td></tr></table>>];
    bb2__0_834 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_10 = &amp;mut (*_11)<br/>StorageDead(_13)<br/>StorageDead(_12)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>_17 = &amp;(_3.0: [u64; 3])<br/>StorageLive(_18)<br/>_18 = RangeFull<br/></td></tr><tr><td align="left">_16 = &lt;[u64; 3] as Index&lt;RangeFull&gt;&gt;::index(move _17, move _18)</td></tr></table>>];
    bb3__0_834 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageDead(_17)<br/>_15 = &amp;(*_16)<br/>_14 = &amp;(*_15)<br/></td></tr><tr><td align="left">_9 = core::slice::&lt;impl [u64]&gt;::copy_from_slice(move _10, move _14)</td></tr></table>>];
    bb4__0_834 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageDead(_10)<br/>StorageDead(_16)<br/>StorageDead(_15)<br/>StorageDead(_11)<br/>StorageDead(_9)<br/>StorageLive(_19)<br/>_19 = _4<br/>StorageLive(_20)<br/>_20 = const 3_usize<br/>_21 = Len(_8)<br/>_22 = Lt(_20, _21)<br/></td></tr><tr><td align="left">assert(move _22, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _21, _20)</td></tr></table>>];
    bb5__0_834 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">_8[_20] = move _19<br/>StorageDead(_19)<br/>StorageDead(_20)<br/>_0 = _8<br/>StorageDead(_8)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_834 -> bb1__0_834 [label="return"];
    bb1__0_834 -> bb2__0_834 [label="return"];
    bb2__0_834 -> bb3__0_834 [label="return"];
    bb3__0_834 -> bb4__0_834 [label="return"];
    bb4__0_834 -> bb5__0_834 [label="success"];
}
