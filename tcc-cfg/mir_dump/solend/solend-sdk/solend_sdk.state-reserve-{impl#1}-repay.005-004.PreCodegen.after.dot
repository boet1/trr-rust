digraph Mir_0_488 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn ReserveLiquidity::repay(_1: &amp;ReErased mut state::reserve::ReserveLiquidity, _2: u64, _3: math::decimal::Decimal) -&gt; std::result::Result&lt;(), solana_program::program_error::ProgramError&gt;<br align="left"/>let mut _4: u64;<br align="left"/>let mut _5: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::LendingError&gt;, u64&gt;;<br align="left"/>let mut _6: std::result::Result&lt;u64, error::LendingError&gt;;<br align="left"/>let mut _7: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _8: u64;<br align="left"/>let mut _9: u64;<br align="left"/>let mut _10: error::LendingError;<br align="left"/>let mut _11: isize;<br align="left"/>let _12: std::result::Result&lt;std::convert::Infallible, error::LendingError&gt;;<br align="left"/>let mut _13: !;<br align="left"/>let mut _14: std::result::Result&lt;std::convert::Infallible, error::LendingError&gt;;<br align="left"/>let _15: u64;<br align="left"/>let _16: math::decimal::Decimal;<br align="left"/>let mut _17: math::decimal::Decimal;<br align="left"/>let mut _18: math::decimal::Decimal;<br align="left"/>let mut _19: math::decimal::Decimal;<br align="left"/>let mut _20: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;, math::decimal::Decimal&gt;;<br align="left"/>let mut _21: std::result::Result&lt;math::decimal::Decimal, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _22: math::decimal::Decimal;<br align="left"/>let mut _23: math::decimal::Decimal;<br align="left"/>let mut _24: isize;<br align="left"/>let _25: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _26: !;<br align="left"/>let mut _27: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let _28: math::decimal::Decimal;<br align="left"/>let mut _29: ();<br align="left"/>let mut _30: isize;<br align="left"/>let mut _31: isize;<br align="left"/>let mut _32: isize;<br align="left"/>let mut _33: isize;<br align="left"/>let mut _34: isize;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug repay_amount =&gt; _2;<br align="left"/>debug settle_amount =&gt; _3;<br align="left"/>debug residual =&gt; _12;<br align="left"/>debug val =&gt; _15;<br align="left"/>debug safe_settle_amount =&gt; _16;<br align="left"/>debug residual =&gt; _25;<br align="left"/>debug val =&gt; _28;<br align="left"/>>;
    bb0__0_488 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = ((*_1).5: u64)<br/>StorageLive(_9)<br/>_9 = _2<br/></td></tr><tr><td align="left">_7 = core::num::&lt;impl u64&gt;::checked_add(move _8, move _9)</td></tr></table>>];
    bb1__0_488 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_8)<br/>StorageLive(_10)<br/>_10 = LendingError::MathOverflow<br/></td></tr><tr><td align="left">_6 = Option::&lt;u64&gt;::ok_or::&lt;LendingError&gt;(move _7, move _10)</td></tr></table>>];
    bb2__0_488 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">_5 = &lt;Result&lt;u64, LendingError&gt; as Try&gt;::branch(move _6)</td></tr></table>>];
    bb3__0_488 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>_11 = discriminant(_5)<br/></td></tr><tr><td align="left">switchInt(move _11)</td></tr></table>>];
    bb4__0_488 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_15)<br/>_15 = ((_5 as Continue).0: u64)<br/>_4 = _15<br/>StorageDead(_15)<br/>((*_1).5: u64) = move _4<br/>StorageDead(_4)<br/>StorageDead(_5)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>_17 = _3<br/>StorageLive(_18)<br/>_18 = ((*_1).6: math::decimal::Decimal)<br/></td></tr><tr><td align="left">_16 = &lt;decimal::Decimal as Ord&gt;::min(move _17, move _18)</td></tr></table>>];
    bb5__0_488 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb6__0_488 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_12)<br/>_12 = move ((_5 as Break).0: std::result::Result&lt;std::convert::Infallible, error::LendingError&gt;)<br/>StorageLive(_14)<br/>_14 = move _12<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;(), ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, LendingError&gt;&gt;&gt;::from_residual(move _14)</td></tr></table>>];
    bb7__0_488 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageDead(_12)<br/>StorageDead(_4)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_488 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageDead(_17)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>_22 = ((*_1).6: math::decimal::Decimal)<br/>StorageLive(_23)<br/>_23 = _16<br/></td></tr><tr><td align="left">_21 = &lt;decimal::Decimal as common::TrySub&gt;::try_sub(move _22, move _23)</td></tr></table>>];
    bb9__0_488 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageDead(_22)<br/></td></tr><tr><td align="left">_20 = &lt;Result&lt;decimal::Decimal, ProgramError&gt; as Try&gt;::branch(move _21)</td></tr></table>>];
    bb10__0_488 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>_24 = discriminant(_20)<br/></td></tr><tr><td align="left">switchInt(move _24)</td></tr></table>>];
    bb11__0_488 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_28)<br/>_28 = ((_20 as Continue).0: math::decimal::Decimal)<br/>_19 = _28<br/>StorageDead(_28)<br/>((*_1).6: math::decimal::Decimal) = move _19<br/>StorageDead(_19)<br/>_30 = discriminant(_20)<br/>StorageDead(_20)<br/>StorageLive(_29)<br/>_29 = ()<br/>_0 = Result::&lt;(), ProgramError&gt;::Ok(move _29)<br/>StorageDead(_29)<br/>StorageDead(_16)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_488 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageLive(_25)<br/>_25 = move ((_20 as Break).0: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;)<br/>StorageLive(_27)<br/>_27 = move _25<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;(), ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, ProgramError&gt;&gt;&gt;::from_residual(move _27)</td></tr></table>>];
    bb13__0_488 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>StorageDead(_25)<br/>StorageDead(_19)<br/>_32 = discriminant(_20)<br/>StorageDead(_20)<br/>StorageDead(_16)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_488 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left">return</td></tr></table>>];
    bb15__0_488 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">15 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb16__0_488 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">16 (cleanup)</td></tr><tr><td align="left" balign="left">_34 = discriminant(_20)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_488 -> bb1__0_488 [label="return"];
    bb1__0_488 -> bb2__0_488 [label="return"];
    bb2__0_488 -> bb3__0_488 [label="return"];
    bb3__0_488 -> bb4__0_488 [label="0"];
    bb3__0_488 -> bb6__0_488 [label="1"];
    bb3__0_488 -> bb5__0_488 [label="otherwise"];
    bb4__0_488 -> bb8__0_488 [label="return"];
    bb6__0_488 -> bb7__0_488 [label="return"];
    bb7__0_488 -> bb14__0_488 [label=""];
    bb8__0_488 -> bb9__0_488 [label="return"];
    bb9__0_488 -> bb10__0_488 [label="return"];
    bb9__0_488 -> bb15__0_488 [label="unwind"];
    bb10__0_488 -> bb11__0_488 [label="0"];
    bb10__0_488 -> bb12__0_488 [label="1"];
    bb10__0_488 -> bb5__0_488 [label="otherwise"];
    bb11__0_488 -> bb14__0_488 [label=""];
    bb12__0_488 -> bb13__0_488 [label="return"];
    bb12__0_488 -> bb16__0_488 [label="unwind"];
    bb13__0_488 -> bb14__0_488 [label=""];
    bb16__0_488 -> bb15__0_488 [label=""];
}
