// MIR for `rate::<impl at token-lending\sdk\src\math\rate.rs:38:1: 38:10>::try_pow` before PreCodegen

fn rate::<impl at token-lending\sdk\src\math\rate.rs:38:1: 38:10>::try_pow(_1: &rate::Rate, _2: u64) -> Result<rate::Rate, ProgramError> {
    debug self => _1;
    debug exp => _2;
    let mut _0: std::result::Result<math::rate::Rate, solana_program::program_error::ProgramError>;
    let mut _3: math::rate::Rate;
    let mut _5: bool;
    let mut _6: u64;
    let mut _7: u64;
    let mut _8: bool;
    let mut _9: math::rate::U128;
    let _10: ();
    let mut _11: ();
    let mut _12: bool;
    let mut _13: u64;
    let mut _14: bool;
    let mut _15: math::rate::Rate;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::rate::Rate>;
    let mut _17: std::result::Result<math::rate::Rate, solana_program::program_error::ProgramError>;
    let mut _18: math::rate::Rate;
    let mut _19: math::rate::Rate;
    let mut _20: isize;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _25: bool;
    let mut _26: u64;
    let mut _27: u64;
    let mut _28: bool;
    let mut _29: math::rate::Rate;
    let mut _30: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::rate::Rate>;
    let mut _31: std::result::Result<math::rate::Rate, solana_program::program_error::ProgramError>;
    let mut _32: math::rate::Rate;
    let mut _33: math::rate::Rate;
    let mut _34: isize;
    let mut _36: !;
    let mut _37: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _39: !;
    let _40: ();
    let mut _41: !;
    let mut _42: math::rate::Rate;
    let mut _43: isize;
    let mut _44: isize;
    let mut _45: isize;
    let mut _46: isize;
    let mut _47: isize;
    let mut _48: isize;
    let mut _49: isize;
    let mut _50: isize;
    let mut _51: isize;
    let mut _52: isize;
    scope 1 {
        debug base => _3;
        let mut _4: math::rate::Rate;
        scope 2 {
            debug ret => _4;
            let _21: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
            let _24: math::rate::Rate;
            let _35: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
            let _38: math::rate::Rate;
            scope 3 {
                debug residual => _21;
                scope 4 {
                }
            }
            scope 5 {
                debug val => _24;
                scope 6 {
                }
            }
            scope 7 {
                debug residual => _35;
                scope 8 {
                }
            }
            scope 9 {
                debug val => _38;
                scope 10 {
                }
            }
        }
    }

    bb0: {
        StorageLive(_3);
        _3 = (*_1);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = _2;
        _8 = Eq(const 2_u64, const 0_u64);
        assert(!move _8, "attempt to calculate the remainder of `{}` with a divisor of zero", _7) -> [success: bb1, unwind continue];
    }

    bb1: {
        _6 = Rem(move _7, const 2_u64);
        StorageDead(_7);
        _5 = Ne(move _6, const 0_u64);
        switchInt(move _5) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_6);
        _4 = _3;
        goto -> bb5;
    }

    bb3: {
        StorageDead(_6);
        StorageLive(_9);
        _9 = rate::Rate::wad() -> [return: bb4, unwind continue];
    }

    bb4: {
        _4 = rate::Rate(move _9);
        StorageDead(_9);
        goto -> bb5;
    }

    bb5: {
        StorageDead(_5);
        StorageLive(_10);
        goto -> bb6;
    }

    bb6: {
        StorageLive(_12);
        StorageLive(_13);
        _13 = _2;
        _12 = Gt(move _13, const 0_u64);
        switchInt(move _12) -> [0: bb24, otherwise: bb7];
    }

    bb7: {
        StorageDead(_13);
        _14 = Eq(const 2_u64, const 0_u64);
        assert(!move _14, "attempt to divide `{}` by zero", _2) -> [success: bb8, unwind continue];
    }

    bb8: {
        _2 = Div(_2, const 2_u64);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = _3;
        StorageLive(_19);
        _19 = _3;
        _17 = <rate::Rate as common::TryMul<rate::Rate>>::try_mul(move _18, move _19) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_19);
        StorageDead(_18);
        _16 = <Result<rate::Rate, ProgramError> as Try>::branch(move _17) -> [return: bb10, unwind: bb27];
    }

    bb10: {
        StorageDead(_17);
        _20 = discriminant(_16);
        switchInt(move _20) -> [0: bb11, 1: bb13, otherwise: bb12];
    }

    bb11: {
        StorageLive(_24);
        _24 = ((_16 as Continue).0: math::rate::Rate);
        _15 = _24;
        StorageDead(_24);
        _3 = move _15;
        StorageDead(_15);
        _43 = discriminant(_16);
        StorageDead(_16);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = _2;
        _28 = Eq(const 2_u64, const 0_u64);
        assert(!move _28, "attempt to calculate the remainder of `{}` with a divisor of zero", _27) -> [success: bb15, unwind continue];
    }

    bb12: {
        unreachable;
    }

    bb13: {
        StorageLive(_21);
        _21 = move ((_16 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_23);
        _23 = move _21;
        _0 = <Result<rate::Rate, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _23) -> [return: bb14, unwind: bb29];
    }

    bb14: {
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_15);
        _49 = discriminant(_16);
        StorageDead(_16);
        goto -> bb25;
    }

    bb15: {
        _26 = Rem(move _27, const 2_u64);
        StorageDead(_27);
        _25 = Ne(move _26, const 0_u64);
        switchInt(move _25) -> [0: bb22, otherwise: bb16];
    }

    bb16: {
        StorageDead(_26);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = _4;
        StorageLive(_33);
        _33 = _3;
        _31 = <rate::Rate as common::TryMul<rate::Rate>>::try_mul(move _32, move _33) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_33);
        StorageDead(_32);
        _30 = <Result<rate::Rate, ProgramError> as Try>::branch(move _31) -> [return: bb18, unwind: bb27];
    }

    bb18: {
        StorageDead(_31);
        _34 = discriminant(_30);
        switchInt(move _34) -> [0: bb19, 1: bb20, otherwise: bb12];
    }

    bb19: {
        StorageLive(_38);
        _38 = ((_30 as Continue).0: math::rate::Rate);
        _29 = _38;
        StorageDead(_38);
        _4 = move _29;
        StorageDead(_29);
        _45 = discriminant(_30);
        StorageDead(_30);
        _11 = const ();
        goto -> bb23;
    }

    bb20: {
        StorageLive(_35);
        _35 = move ((_30 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_37);
        _37 = move _35;
        _0 = <Result<rate::Rate, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _37) -> [return: bb21, unwind: bb28];
    }

    bb21: {
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_29);
        _47 = discriminant(_30);
        StorageDead(_30);
        StorageDead(_25);
        goto -> bb25;
    }

    bb22: {
        StorageDead(_26);
        _11 = const ();
        goto -> bb23;
    }

    bb23: {
        StorageDead(_25);
        StorageDead(_12);
        goto -> bb6;
    }

    bb24: {
        StorageDead(_13);
        StorageLive(_40);
        _10 = const ();
        StorageDead(_40);
        StorageDead(_12);
        StorageDead(_10);
        StorageLive(_42);
        _42 = _4;
        _0 = Result::<rate::Rate, ProgramError>::Ok(move _42);
        StorageDead(_42);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb26;
    }

    bb25: {
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb26;
    }

    bb26: {
        return;
    }

    bb27 (cleanup): {
        resume;
    }

    bb28 (cleanup): {
        _51 = discriminant(_30);
        goto -> bb27;
    }

    bb29 (cleanup): {
        _52 = discriminant(_16);
        goto -> bb27;
    }
}
