digraph Mir_0_390 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn rate_limiter::RateLimiter::new(_1: state::rate_limiter::RateLimiterConfig, _2: u64) -&gt; state::rate_limiter::RateLimiter<br align="left"/>let _3: u64;<br align="left"/>let mut _4: bool;<br align="left"/>let mut _5: u64;<br align="left"/>let mut _6: u64;<br align="left"/>let mut _7: u64;<br align="left"/>let mut _8: u64;<br align="left"/>let mut _9: bool;<br align="left"/>let mut _10: u64;<br align="left"/>let mut _11: (u64, bool);<br align="left"/>let mut _12: state::rate_limiter::RateLimiterConfig;<br align="left"/>let mut _13: math::decimal::Decimal;<br align="left"/>let mut _14: u64;<br align="left"/>let mut _15: math::decimal::Decimal;<br align="left"/>debug config =&gt; _1;<br align="left"/>debug cur_slot =&gt; _2;<br align="left"/>debug slot_start =&gt; _3;<br align="left"/>>;
    bb0__0_390 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = (_1.0: u64)<br/>_4 = Ne(move _5, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _4)</td></tr></table>>];
    bb1__0_390 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>_7 = _2<br/>StorageLive(_8)<br/>_8 = (_1.0: u64)<br/>_9 = Eq(_8, const 0_u64)<br/></td></tr><tr><td align="left">assert(!move _9, &quot;attempt to divide `{}` by zero&quot;, _7)</td></tr></table>>];
    bb2__0_390 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_6 = Div(move _7, move _8)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/>StorageLive(_10)<br/>_10 = (_1.0: u64)<br/>_11 = CheckedMul(_6, _10)<br/></td></tr><tr><td align="left">assert(!move (_11.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, move _6, move _10)</td></tr></table>>];
    bb3__0_390 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_3 = move (_11.0: u64)<br/>StorageDead(_10)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb4__0_390 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>_3 = _2<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb5__0_390 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>StorageLive(_12)<br/>_12 = _1<br/>StorageLive(_13)<br/></td></tr><tr><td align="left">_13 = decimal::Decimal::zero()</td></tr></table>>];
    bb6__0_390 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_14)<br/>_14 = _3<br/>StorageLive(_15)<br/></td></tr><tr><td align="left">_15 = decimal::Decimal::zero()</td></tr></table>>];
    bb7__0_390 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_0 = rate_limiter::RateLimiter { config: move _12, prev_qty: move _13, window_start: move _14, cur_qty: move _15 }<br/>StorageDead(_15)<br/>StorageDead(_14)<br/>StorageDead(_13)<br/>StorageDead(_12)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_390 -> bb4__0_390 [label="0"];
    bb0__0_390 -> bb1__0_390 [label="otherwise"];
    bb1__0_390 -> bb2__0_390 [label="success"];
    bb2__0_390 -> bb3__0_390 [label="success"];
    bb3__0_390 -> bb5__0_390 [label=""];
    bb4__0_390 -> bb5__0_390 [label=""];
    bb5__0_390 -> bb6__0_390 [label="return"];
    bb6__0_390 -> bb7__0_390 [label="return"];
}
