// MIR for `obligation::<impl at token-lending\sdk\src\state\obligation.rs:368:1: 368:25>::borrow` before PreCodegen

fn obligation::<impl at token-lending\sdk\src\state\obligation.rs:368:1: 368:25>::borrow(_1: &mut obligation::ObligationLiquidity, _2: decimal::Decimal) -> Result<(), ProgramError> {
    debug self => _1;
    debug borrow_amount => _2;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _3: math::decimal::Decimal;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _5: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _6: math::decimal::Decimal;
    let mut _7: math::decimal::Decimal;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _12: math::decimal::Decimal;
    let mut _13: ();
    let mut _14: isize;
    let mut _15: isize;
    let mut _16: isize;
    let mut _17: isize;
    let mut _18: isize;
    scope 1 {
        debug residual => _9;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _12;
        scope 4 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = ((*_1).2: math::decimal::Decimal);
        StorageLive(_7);
        _7 = _2;
        _5 = <decimal::Decimal as common::TryAdd>::try_add(move _6, move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        StorageDead(_6);
        _4 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _5) -> [return: bb2, unwind: bb8];
    }

    bb2: {
        StorageDead(_5);
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_4 as Continue).0: math::decimal::Decimal);
        _3 = _12;
        StorageDead(_12);
        ((*_1).2: math::decimal::Decimal) = move _3;
        StorageDead(_3);
        _14 = discriminant(_4);
        StorageDead(_4);
        StorageLive(_13);
        _13 = ();
        _0 = Result::<(), ProgramError>::Ok(move _13);
        StorageDead(_13);
        goto -> bb7;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _11) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_3);
        _16 = discriminant(_4);
        StorageDead(_4);
        goto -> bb7;
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        resume;
    }

    bb9 (cleanup): {
        _18 = discriminant(_4);
        goto -> bb8;
    }
}
