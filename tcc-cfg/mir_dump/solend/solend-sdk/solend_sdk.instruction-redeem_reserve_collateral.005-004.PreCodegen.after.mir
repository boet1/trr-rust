// MIR for `redeem_reserve_collateral` after PreCodegen

fn redeem_reserve_collateral(_1: Pubkey, _2: u64, _3: Pubkey, _4: Pubkey, _5: Pubkey, _6: Pubkey, _7: Pubkey, _8: Pubkey, _9: Pubkey) -> Instruction {
    debug program_id => _1;
    debug collateral_amount => _2;
    debug source_collateral_pubkey => _3;
    debug destination_liquidity_pubkey => _4;
    debug reserve_pubkey => _5;
    debug reserve_collateral_mint_pubkey => _6;
    debug reserve_liquidity_supply_pubkey => _7;
    debug lending_market_pubkey => _8;
    debug user_transfer_authority_pubkey => _9;
    let mut _0: solana_program::instruction::Instruction;
    let _10: solana_program::pubkey::Pubkey;
    let _11: u8;
    let mut _12: (solana_program::pubkey::Pubkey, u8);
    let mut _13: &[&[u8]];
    let mut _14: &[&[u8]; 1];
    let _15: &[&[u8]; 1];
    let _16: [&[u8]; 1];
    let mut _17: &[u8];
    let _18: &[u8];
    let _19: &[u8];
    let mut _20: &[u8; 32];
    let _21: [u8; 32];
    let mut _22: solana_program::pubkey::Pubkey;
    let mut _23: std::ops::RangeTo<usize>;
    let mut _24: &solana_program::pubkey::Pubkey;
    let _25: &solana_program::pubkey::Pubkey;
    let mut _26: solana_program::pubkey::Pubkey;
    let mut _27: std::vec::Vec<solana_program::instruction::AccountMeta>;
    let mut _28: std::boxed::Box<[solana_program::instruction::AccountMeta]>;
    let mut _29: std::boxed::Box<[solana_program::instruction::AccountMeta; 9]>;
    let mut _30: usize;
    let mut _31: usize;
    let mut _32: *mut u8;
    let mut _33: std::boxed::Box<[solana_program::instruction::AccountMeta; 9]>;
    let mut _34: solana_program::instruction::AccountMeta;
    let mut _35: solana_program::pubkey::Pubkey;
    let mut _36: solana_program::instruction::AccountMeta;
    let mut _37: solana_program::pubkey::Pubkey;
    let mut _38: solana_program::instruction::AccountMeta;
    let mut _39: solana_program::pubkey::Pubkey;
    let mut _40: solana_program::instruction::AccountMeta;
    let mut _41: solana_program::pubkey::Pubkey;
    let mut _42: solana_program::instruction::AccountMeta;
    let mut _43: solana_program::pubkey::Pubkey;
    let mut _44: solana_program::instruction::AccountMeta;
    let mut _45: solana_program::pubkey::Pubkey;
    let mut _46: solana_program::instruction::AccountMeta;
    let mut _47: solana_program::pubkey::Pubkey;
    let mut _48: solana_program::instruction::AccountMeta;
    let mut _49: solana_program::pubkey::Pubkey;
    let mut _50: solana_program::instruction::AccountMeta;
    let mut _51: solana_program::pubkey::Pubkey;
    let mut _52: std::vec::Vec<u8>;
    let mut _53: &instruction::LendingInstruction;
    let _54: instruction::LendingInstruction;
    let mut _55: u64;
    let mut _56: *const [solana_program::instruction::AccountMeta; 9];
    scope 1 {
        debug lending_market_authority_pubkey => _10;
        debug _bump_seed => _11;
        let mut _57: *const ();
        let mut _58: usize;
        let mut _59: usize;
        let mut _60: usize;
        let mut _61: usize;
        let mut _62: bool;
        scope 2 {
        }
    }

    bb0: {
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = _8;
        _21 = Pubkey::to_bytes(move _22) -> [return: bb1, unwind continue];
    }

    bb1: {
        _20 = &_21;
        StorageDead(_22);
        StorageLive(_23);
        _23 = RangeTo::<usize> { end: const _ };
        _19 = <[u8; 32] as Index<RangeTo<usize>>>::index(move _20, move _23) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_23);
        StorageDead(_20);
        _18 = &(*_19);
        _17 = &(*_18);
        _16 = [move _17];
        StorageDead(_17);
        _15 = &_16;
        _14 = &(*_15);
        _13 = move _14 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_14);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &_1;
        _24 = &(*_25);
        _12 = Pubkey::find_program_address(move _13, move _24) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_24);
        StorageDead(_13);
        StorageLive(_10);
        _10 = (_12.0: solana_program::pubkey::Pubkey);
        StorageLive(_11);
        _11 = (_12.1: u8);
        StorageDead(_25);
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_12);
        StorageLive(_26);
        _26 = _1;
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _30 = SizeOf([solana_program::instruction::AccountMeta; 9]);
        _31 = AlignOf([solana_program::instruction::AccountMeta; 9]);
        _32 = alloc::alloc::exchange_malloc(move _30, move _31) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageLive(_33);
        _33 = ShallowInitBox(move _32, [solana_program::instruction::AccountMeta; 9]);
        StorageLive(_34);
        StorageLive(_35);
        _35 = _3;
        _34 = AccountMeta::new(move _35, const false) -> [return: bb5, unwind: bb18];
    }

    bb5: {
        StorageDead(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = _4;
        _36 = AccountMeta::new(move _37, const false) -> [return: bb6, unwind: bb18];
    }

    bb6: {
        StorageDead(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = _5;
        _38 = AccountMeta::new(move _39, const false) -> [return: bb7, unwind: bb18];
    }

    bb7: {
        StorageDead(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = _6;
        _40 = AccountMeta::new(move _41, const false) -> [return: bb8, unwind: bb18];
    }

    bb8: {
        StorageDead(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = _7;
        _42 = AccountMeta::new(move _43, const false) -> [return: bb9, unwind: bb18];
    }

    bb9: {
        StorageDead(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = _8;
        _44 = AccountMeta::new(move _45, const false) -> [return: bb10, unwind: bb18];
    }

    bb10: {
        StorageDead(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = _10;
        _46 = AccountMeta::new_readonly(move _47, const false) -> [return: bb11, unwind: bb18];
    }

    bb11: {
        StorageDead(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = _9;
        _48 = AccountMeta::new_readonly(move _49, const true) -> [return: bb12, unwind: bb18];
    }

    bb12: {
        StorageDead(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = spl_token::id() -> [return: bb13, unwind: bb18];
    }

    bb13: {
        _50 = AccountMeta::new_readonly(move _51, const false) -> [return: bb14, unwind: bb18];
    }

    bb14: {
        StorageDead(_51);
        _56 = (((_33.0: std::ptr::Unique<[solana_program::instruction::AccountMeta; 9]>).0: std::ptr::NonNull<[solana_program::instruction::AccountMeta; 9]>).0: *const [solana_program::instruction::AccountMeta; 9]);
        _57 = _56 as *const () (PtrToPtr);
        _58 = _57 as usize (Transmute);
        _59 = AlignOf([solana_program::instruction::AccountMeta; 9]);
        _60 = Sub(_59, const 1_usize);
        _61 = BitAnd(_58, _60);
        _62 = Eq(_61, const 0_usize);
        assert(_62, "misaligned pointer dereference: address must be a multiple of {} but is {}", _59, _58) -> [success: bb20, unwind unreachable];
    }

    bb15: {
        StorageDead(_28);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = _2;
        _54 = LendingInstruction::RedeemReserveCollateral { collateral_amount: move _55 };
        _53 = &_54;
        StorageDead(_55);
        _52 = LendingInstruction::pack(move _53) -> [return: bb16, unwind: bb17];
    }

    bb16: {
        StorageDead(_53);
        _0 = Instruction { program_id: move _26, accounts: move _27, data: move _52 };
        StorageDead(_52);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_54);
        return;
    }

    bb17 (cleanup): {
        drop(_27) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        drop(_33) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        resume;
    }

    bb20: {
        (*_56) = [move _34, move _36, move _38, move _40, move _42, move _44, move _46, move _48, move _50];
        StorageDead(_50);
        StorageDead(_48);
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_36);
        StorageDead(_34);
        _29 = move _33;
        _28 = move _29 as std::boxed::Box<[solana_program::instruction::AccountMeta]> (PointerCoercion(Unsize));
        StorageDead(_33);
        StorageDead(_29);
        _27 = std::slice::<impl [AccountMeta]>::into_vec::<std::alloc::Global>(move _28) -> [return: bb15, unwind: bb19];
    }
}
