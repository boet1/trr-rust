// MIR for `decimal::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:587:3: 587:13>::full_mul_u64` after PreCodegen

fn decimal::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:587:3: 587:13>::full_mul_u64(_1: U192, _2: u64) -> [u64; 4] {
    debug self => _1;
    debug by => _2;
    let mut _0: [u64; 4];
    let _3: math::decimal::U192;
    let _4: u64;
    let mut _5: (math::decimal::U192, u64);
    let mut _6: math::decimal::U192;
    let mut _7: u64;
    let _9: ();
    let mut _10: &mut [u64];
    let mut _11: &mut [u64];
    let mut _12: &mut [u64; 4];
    let mut _13: std::ops::RangeTo<usize>;
    let mut _14: &[u64];
    let _15: &[u64];
    let _16: &[u64];
    let mut _17: &[u64; 3];
    let mut _18: std::ops::RangeFull;
    let mut _19: u64;
    let _20: usize;
    let mut _21: usize;
    let mut _22: bool;
    scope 1 {
        debug prod => _3;
        debug carry => _4;
        let mut _8: [u64; 4];
        scope 2 {
            debug res => _8;
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        _6 = _1;
        StorageLive(_7);
        _7 = _2;
        _5 = U192::overflowing_mul_u64(move _6, move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_3);
        _3 = (_5.0: math::decimal::U192);
        StorageLive(_4);
        _4 = (_5.1: u64);
        StorageDead(_5);
        StorageLive(_8);
        _8 = [const 0_u64; 4];
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &mut _8;
        StorageLive(_13);
        _13 = RangeTo::<usize> { end: const 3_usize };
        _11 = <[u64; 4] as IndexMut<RangeTo<usize>>>::index_mut(move _12, move _13) -> [return: bb2, unwind continue];
    }

    bb2: {
        _10 = &mut (*_11);
        StorageDead(_13);
        StorageDead(_12);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = &(_3.0: [u64; 3]);
        StorageLive(_18);
        _18 = RangeFull;
        _16 = <[u64; 3] as Index<RangeFull>>::index(move _17, move _18) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_18);
        StorageDead(_17);
        _15 = &(*_16);
        _14 = &(*_15);
        _9 = core::slice::<impl [u64]>::copy_from_slice(move _10, move _14) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_14);
        StorageDead(_10);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_11);
        StorageDead(_9);
        StorageLive(_19);
        _19 = _4;
        StorageLive(_20);
        _20 = const 3_usize;
        _21 = Len(_8);
        _22 = Lt(_20, _21);
        assert(move _22, "index out of bounds: the length is {} but the index is {}", move _21, _20) -> [success: bb5, unwind continue];
    }

    bb5: {
        _8[_20] = move _19;
        StorageDead(_19);
        StorageDead(_20);
        _0 = _8;
        StorageDead(_8);
        StorageDead(_4);
        StorageDead(_3);
        return;
    }
}
