// MIR for `decimal::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:587:3: 587:13>::div_mod_word` after PreCodegen

fn decimal::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:587:3: 587:13>::div_mod_word(_1: u64, _2: u64, _3: u64) -> (u64, u64) {
    debug hi => _1;
    debug lo => _2;
    debug y => _3;
    let mut _0: (u64, u64);
    let _4: ();
    let mut _5: bool;
    let _6: ();
    let mut _7: bool;
    let mut _8: u64;
    let mut _9: u64;
    let mut _10: !;
    let _11: u32;
    let mut _12: u64;
    let mut _14: u64;
    let mut _15: u32;
    let mut _16: bool;
    let mut _19: (u64, u64);
    let mut _20: u64;
    let mut _22: u64;
    let mut _23: u64;
    let mut _24: u32;
    let mut _25: bool;
    let mut _26: u64;
    let mut _27: std::option::Option<u64>;
    let mut _28: u64;
    let mut _29: u32;
    let mut _30: u32;
    let mut _31: (u32, bool);
    let mut _33: u64;
    let mut _34: u32;
    let mut _35: bool;
    let mut _38: (u64, u64);
    let mut _39: u64;
    let mut _41: u64;
    let mut _42: u64;
    let mut _43: bool;
    let mut _45: u64;
    let mut _46: u64;
    let mut _47: u64;
    let mut _48: u64;
    let mut _49: (u64, bool);
    let mut _50: (u64, bool);
    let _51: ();
    let mut _52: ();
    let mut _53: bool;
    let mut _54: u64;
    let mut _55: bool;
    let mut _56: u64;
    let mut _57: u64;
    let mut _58: u64;
    let mut _59: (u64, bool);
    let mut _60: u64;
    let mut _61: u64;
    let mut _62: u64;
    let mut _63: (u64, bool);
    let mut _64: u64;
    let mut _65: (u64, bool);
    let mut _66: (u64, bool);
    let mut _67: u64;
    let mut _68: (u64, bool);
    let mut _69: bool;
    let mut _70: u64;
    let mut _71: !;
    let mut _72: !;
    let _73: ();
    let mut _74: !;
    let mut _76: u64;
    let mut _77: u64;
    let mut _78: u64;
    let mut _79: u64;
    let mut _80: u64;
    let mut _81: u64;
    let mut _82: u64;
    let mut _84: u64;
    let mut _85: u64;
    let mut _86: bool;
    let mut _87: u64;
    let mut _88: u64;
    let mut _89: u64;
    let mut _90: u64;
    let mut _91: u64;
    let _92: ();
    let mut _93: bool;
    let mut _94: u64;
    let mut _95: bool;
    let mut _96: u64;
    let mut _97: u64;
    let mut _98: u64;
    let mut _99: (u64, bool);
    let mut _100: u64;
    let mut _101: u64;
    let mut _102: u64;
    let mut _103: (u64, bool);
    let mut _104: u64;
    let mut _105: (u64, bool);
    let mut _106: (u64, bool);
    let mut _107: u64;
    let mut _108: (u64, bool);
    let mut _109: bool;
    let mut _110: u64;
    let mut _111: !;
    let mut _112: !;
    let _113: ();
    let mut _114: !;
    let mut _116: u64;
    let mut _117: u64;
    let mut _118: u64;
    let mut _119: u64;
    let mut _120: u64;
    let mut _121: u64;
    let mut _122: u64;
    let mut _123: u64;
    let mut _124: u64;
    let mut _125: u64;
    let mut _126: (u64, bool);
    let mut _127: u64;
    let mut _128: (u64, bool);
    let mut _129: u64;
    let mut _130: u64;
    let mut _131: u32;
    let mut _132: bool;
    scope 1 {
        debug s => _11;
        let _13: u64;
        scope 2 {
            debug y => _13;
            let _17: u64;
            let _18: u64;
            scope 3 {
                debug yn1 => _17;
                debug yn0 => _18;
                let _21: u64;
                scope 4 {
                    debug un32 => _21;
                    let _32: u64;
                    scope 5 {
                        debug un10 => _32;
                        let _36: u64;
                        let _37: u64;
                        scope 6 {
                            debug un1 => _36;
                            debug un0 => _37;
                            let mut _40: u64;
                            scope 7 {
                                debug q1 => _40;
                                let mut _44: u64;
                                scope 8 {
                                    debug rhat => _44;
                                    let _75: u64;
                                    scope 9 {
                                        debug un21 => _75;
                                        let mut _83: u64;
                                        scope 10 {
                                            debug q0 => _83;
                                            let _115: u64;
                                            scope 11 {
                                                debug rem => _115;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        _5 = const true;
        switchInt(move _5) -> [0: bb4, otherwise: bb1];
    }

    bb1: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _1;
        StorageLive(_9);
        _9 = _3;
        _7 = Lt(move _8, move _9);
        switchInt(move _7) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_9);
        StorageDead(_8);
        _6 = const ();
        StorageDead(_7);
        StorageDead(_6);
        _4 = const ();
        goto -> bb5;
    }

    bb3: {
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_10);
        _10 = panic(const "assertion failed: hi < y") -> unwind continue;
    }

    bb4: {
        _4 = const ();
        goto -> bb5;
    }

    bb5: {
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_11);
        StorageLive(_12);
        _12 = _3;
        _11 = core::num::<impl u64>::leading_zeros(move _12) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = _3;
        StorageLive(_15);
        _15 = _11;
        _16 = Lt(_15, const 64_u32);
        assert(move _16, "attempt to shift left by `{}`, which would overflow", _15) -> [success: bb7, unwind continue];
    }

    bb7: {
        _13 = Shl(move _14, move _15);
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_19);
        StorageLive(_20);
        _20 = _13;
        _19 = U192::split(move _20) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_20);
        StorageLive(_17);
        _17 = (_19.0: u64);
        StorageLive(_18);
        _18 = (_19.1: u64);
        StorageDead(_19);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = _1;
        StorageLive(_24);
        _24 = _11;
        _25 = Lt(_24, const 64_u32);
        assert(move _25, "attempt to shift left by `{}`, which would overflow", _24) -> [success: bb9, unwind continue];
    }

    bb9: {
        _22 = Shl(move _23, move _24);
        StorageDead(_24);
        StorageDead(_23);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = _2;
        StorageLive(_29);
        StorageLive(_30);
        _30 = _11;
        _31 = CheckedSub(const 64_u32, _30);
        assert(!move (_31.1: bool), "attempt to compute `{} - {}`, which would overflow", const 64_u32, move _30) -> [success: bb10, unwind continue];
    }

    bb10: {
        _29 = move (_31.0: u32);
        StorageDead(_30);
        _27 = core::num::<impl u64>::checked_shr(move _28, move _29) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_29);
        StorageDead(_28);
        _26 = Option::<u64>::unwrap_or(move _27, const 0_u64) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_27);
        _21 = BitOr(move _22, move _26);
        StorageDead(_26);
        StorageDead(_22);
        StorageLive(_32);
        StorageLive(_33);
        _33 = _2;
        StorageLive(_34);
        _34 = _11;
        _35 = Lt(_34, const 64_u32);
        assert(move _35, "attempt to shift left by `{}`, which would overflow", _34) -> [success: bb13, unwind continue];
    }

    bb13: {
        _32 = Shl(move _33, move _34);
        StorageDead(_34);
        StorageDead(_33);
        StorageLive(_38);
        StorageLive(_39);
        _39 = _32;
        _38 = U192::split(move _39) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_39);
        StorageLive(_36);
        _36 = (_38.0: u64);
        StorageLive(_37);
        _37 = (_38.1: u64);
        StorageDead(_38);
        StorageLive(_40);
        StorageLive(_41);
        _41 = _21;
        StorageLive(_42);
        _42 = _17;
        _43 = Eq(_42, const 0_u64);
        assert(!move _43, "attempt to divide `{}` by zero", _41) -> [success: bb15, unwind continue];
    }

    bb15: {
        _40 = Div(move _41, move _42);
        StorageDead(_42);
        StorageDead(_41);
        StorageLive(_44);
        StorageLive(_45);
        _45 = _21;
        StorageLive(_46);
        StorageLive(_47);
        _47 = _40;
        StorageLive(_48);
        _48 = _17;
        _49 = CheckedMul(_47, _48);
        assert(!move (_49.1: bool), "attempt to compute `{} * {}`, which would overflow", move _47, move _48) -> [success: bb16, unwind continue];
    }

    bb16: {
        _46 = move (_49.0: u64);
        StorageDead(_48);
        StorageDead(_47);
        _50 = CheckedSub(_45, _46);
        assert(!move (_50.1: bool), "attempt to compute `{} - {}`, which would overflow", move _45, move _46) -> [success: bb17, unwind continue];
    }

    bb17: {
        _44 = move (_50.0: u64);
        StorageDead(_46);
        StorageDead(_45);
        StorageLive(_51);
        goto -> bb18;
    }

    bb18: {
        StorageLive(_53);
        StorageLive(_54);
        _54 = _40;
        _53 = Ge(move _54, const _);
        switchInt(move _53) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        StorageDead(_54);
        goto -> bb24;
    }

    bb20: {
        StorageDead(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = _40;
        StorageLive(_58);
        _58 = _18;
        _59 = CheckedMul(_57, _58);
        assert(!move (_59.1: bool), "attempt to compute `{} * {}`, which would overflow", move _57, move _58) -> [success: bb21, unwind continue];
    }

    bb21: {
        _56 = move (_59.0: u64);
        StorageDead(_58);
        StorageDead(_57);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = _44;
        _63 = CheckedMul(const _, _62);
        assert(!move (_63.1: bool), "attempt to compute `{} * {}`, which would overflow", const _, move _62) -> [success: bb22, unwind continue];
    }

    bb22: {
        _61 = move (_63.0: u64);
        StorageDead(_62);
        StorageLive(_64);
        _64 = _36;
        _65 = CheckedAdd(_61, _64);
        assert(!move (_65.1: bool), "attempt to compute `{} + {}`, which would overflow", move _61, move _64) -> [success: bb23, unwind continue];
    }

    bb23: {
        _60 = move (_65.0: u64);
        StorageDead(_64);
        StorageDead(_61);
        _55 = Gt(move _56, move _60);
        switchInt(move _55) -> [0: bb29, otherwise: bb24];
    }

    bb24: {
        StorageDead(_60);
        StorageDead(_56);
        _66 = CheckedSub(_40, const 1_u64);
        assert(!move (_66.1: bool), "attempt to compute `{} - {}`, which would overflow", _40, const 1_u64) -> [success: bb25, unwind continue];
    }

    bb25: {
        _40 = move (_66.0: u64);
        StorageLive(_67);
        _67 = _17;
        _68 = CheckedAdd(_44, _67);
        assert(!move (_68.1: bool), "attempt to compute `{} + {}`, which would overflow", _44, move _67) -> [success: bb26, unwind continue];
    }

    bb26: {
        _44 = move (_68.0: u64);
        StorageDead(_67);
        StorageLive(_69);
        StorageLive(_70);
        _70 = _44;
        _69 = Ge(move _70, const _);
        switchInt(move _69) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        StorageDead(_70);
        _51 = const ();
        StorageDead(_69);
        goto -> bb30;
    }

    bb28: {
        StorageDead(_70);
        _52 = const ();
        StorageDead(_69);
        StorageDead(_55);
        StorageDead(_53);
        goto -> bb18;
    }

    bb29: {
        StorageDead(_60);
        StorageDead(_56);
        StorageLive(_73);
        _51 = const ();
        StorageDead(_73);
        goto -> bb30;
    }

    bb30: {
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_51);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = _21;
        _77 = core::num::<impl u64>::wrapping_mul(move _78, const _) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_78);
        StorageLive(_79);
        _79 = _36;
        _76 = core::num::<impl u64>::wrapping_add(move _77, move _79) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_79);
        StorageDead(_77);
        StorageLive(_80);
        StorageLive(_81);
        _81 = _40;
        StorageLive(_82);
        _82 = _13;
        _80 = core::num::<impl u64>::wrapping_mul(move _81, move _82) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_82);
        StorageDead(_81);
        _75 = core::num::<impl u64>::wrapping_sub(move _76, move _80) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_80);
        StorageDead(_76);
        StorageLive(_83);
        StorageLive(_84);
        _84 = _75;
        StorageLive(_85);
        _85 = _17;
        _86 = Eq(_85, const 0_u64);
        assert(!move _86, "attempt to divide `{}` by zero", _84) -> [success: bb35, unwind continue];
    }

    bb35: {
        _83 = Div(move _84, move _85);
        StorageDead(_85);
        StorageDead(_84);
        StorageLive(_87);
        StorageLive(_88);
        _88 = _75;
        StorageLive(_89);
        StorageLive(_90);
        _90 = _83;
        StorageLive(_91);
        _91 = _17;
        _89 = core::num::<impl u64>::wrapping_mul(move _90, move _91) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_91);
        StorageDead(_90);
        _87 = core::num::<impl u64>::wrapping_sub(move _88, move _89) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_89);
        StorageDead(_88);
        _44 = move _87;
        StorageDead(_87);
        StorageLive(_92);
        goto -> bb38;
    }

    bb38: {
        StorageLive(_93);
        StorageLive(_94);
        _94 = _83;
        _93 = Ge(move _94, const _);
        switchInt(move _93) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        StorageDead(_94);
        goto -> bb44;
    }

    bb40: {
        StorageDead(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = _83;
        StorageLive(_98);
        _98 = _18;
        _99 = CheckedMul(_97, _98);
        assert(!move (_99.1: bool), "attempt to compute `{} * {}`, which would overflow", move _97, move _98) -> [success: bb41, unwind continue];
    }

    bb41: {
        _96 = move (_99.0: u64);
        StorageDead(_98);
        StorageDead(_97);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _102 = _44;
        _103 = CheckedMul(const _, _102);
        assert(!move (_103.1: bool), "attempt to compute `{} * {}`, which would overflow", const _, move _102) -> [success: bb42, unwind continue];
    }

    bb42: {
        _101 = move (_103.0: u64);
        StorageDead(_102);
        StorageLive(_104);
        _104 = _37;
        _105 = CheckedAdd(_101, _104);
        assert(!move (_105.1: bool), "attempt to compute `{} + {}`, which would overflow", move _101, move _104) -> [success: bb43, unwind continue];
    }

    bb43: {
        _100 = move (_105.0: u64);
        StorageDead(_104);
        StorageDead(_101);
        _95 = Gt(move _96, move _100);
        switchInt(move _95) -> [0: bb49, otherwise: bb44];
    }

    bb44: {
        StorageDead(_100);
        StorageDead(_96);
        _106 = CheckedSub(_83, const 1_u64);
        assert(!move (_106.1: bool), "attempt to compute `{} - {}`, which would overflow", _83, const 1_u64) -> [success: bb45, unwind continue];
    }

    bb45: {
        _83 = move (_106.0: u64);
        StorageLive(_107);
        _107 = _17;
        _108 = CheckedAdd(_44, _107);
        assert(!move (_108.1: bool), "attempt to compute `{} + {}`, which would overflow", _44, move _107) -> [success: bb46, unwind continue];
    }

    bb46: {
        _44 = move (_108.0: u64);
        StorageDead(_107);
        StorageLive(_109);
        StorageLive(_110);
        _110 = _44;
        _109 = Ge(move _110, const _);
        switchInt(move _109) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        StorageDead(_110);
        _92 = const ();
        StorageDead(_109);
        goto -> bb50;
    }

    bb48: {
        StorageDead(_110);
        _52 = const ();
        StorageDead(_109);
        StorageDead(_95);
        StorageDead(_93);
        goto -> bb38;
    }

    bb49: {
        StorageDead(_100);
        StorageDead(_96);
        StorageLive(_113);
        _92 = const ();
        StorageDead(_113);
        goto -> bb50;
    }

    bb50: {
        StorageDead(_95);
        StorageDead(_93);
        StorageDead(_92);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        _118 = _75;
        _117 = core::num::<impl u64>::wrapping_mul(move _118, const _) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_118);
        StorageLive(_119);
        _119 = _37;
        _116 = core::num::<impl u64>::wrapping_add(move _117, move _119) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_119);
        StorageDead(_117);
        StorageLive(_120);
        StorageLive(_121);
        _121 = _13;
        StorageLive(_122);
        _122 = _83;
        _120 = core::num::<impl u64>::wrapping_mul(move _121, move _122) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_122);
        StorageDead(_121);
        _115 = core::num::<impl u64>::wrapping_sub(move _116, move _120) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_120);
        StorageDead(_116);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _125 = _40;
        _126 = CheckedMul(_125, const _);
        assert(!move (_126.1: bool), "attempt to compute `{} * {}`, which would overflow", move _125, const _) -> [success: bb55, unwind continue];
    }

    bb55: {
        _124 = move (_126.0: u64);
        StorageDead(_125);
        StorageLive(_127);
        _127 = _83;
        _128 = CheckedAdd(_124, _127);
        assert(!move (_128.1: bool), "attempt to compute `{} + {}`, which would overflow", move _124, move _127) -> [success: bb56, unwind continue];
    }

    bb56: {
        _123 = move (_128.0: u64);
        StorageDead(_127);
        StorageDead(_124);
        StorageLive(_129);
        StorageLive(_130);
        _130 = _115;
        StorageLive(_131);
        _131 = _11;
        _132 = Lt(_131, const 64_u32);
        assert(move _132, "attempt to shift right by `{}`, which would overflow", _131) -> [success: bb57, unwind continue];
    }

    bb57: {
        _129 = Shr(move _130, move _131);
        StorageDead(_131);
        StorageDead(_130);
        _0 = (move _123, move _129);
        StorageDead(_129);
        StorageDead(_123);
        StorageDead(_115);
        StorageDead(_83);
        StorageDead(_75);
        StorageDead(_44);
        StorageDead(_40);
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_32);
        StorageDead(_21);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_13);
        StorageDead(_11);
        return;
    }
}
