digraph Mir_0_1363 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn U128::full_shr(_1: [u64; 3_usize], _2: u32) -&gt; math::rate::U128<br align="left"/>let _3: ();<br align="left"/>let mut _4: bool;<br align="left"/>let _5: ();<br align="left"/>let mut _6: bool;<br align="left"/>let mut _7: u32;<br align="left"/>let mut _8: u32;<br align="left"/>let mut _9: !;<br align="left"/>let mut _10: math::rate::U128;<br align="left"/>let _11: ();<br align="left"/>let mut _12: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _13: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _14: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _15: ();<br align="left"/>let _16: ();<br align="left"/>let mut _17: std::option::Option&lt;usize&gt;;<br align="left"/>let mut _18: &amp;ReErased mut std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _19: &amp;ReErased mut std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _20: isize;<br align="left"/>let mut _21: !;<br align="left"/>let _22: usize;<br align="left"/>let mut _23: u64;<br align="left"/>let _24: usize;<br align="left"/>let mut _25: usize;<br align="left"/>let mut _26: bool;<br align="left"/>let mut _27: u32;<br align="left"/>let mut _28: bool;<br align="left"/>let _29: usize;<br align="left"/>let mut _30: usize;<br align="left"/>let mut _31: bool;<br align="left"/>let _32: ();<br align="left"/>let mut _33: bool;<br align="left"/>let mut _34: u32;<br align="left"/>let mut _35: std::ops::RangeInclusive&lt;usize&gt;;<br align="left"/>let mut _36: std::ops::RangeInclusive&lt;usize&gt;;<br align="left"/>let mut _37: std::ops::RangeInclusive&lt;usize&gt;;<br align="left"/>let _38: ();<br align="left"/>let mut _39: std::option::Option&lt;usize&gt;;<br align="left"/>let mut _40: &amp;ReErased mut std::ops::RangeInclusive&lt;usize&gt;;<br align="left"/>let mut _41: &amp;ReErased mut std::ops::RangeInclusive&lt;usize&gt;;<br align="left"/>let mut _42: isize;<br align="left"/>let mut _43: !;<br align="left"/>let _44: usize;<br align="left"/>let mut _45: u64;<br align="left"/>let mut _46: u64;<br align="left"/>let _47: usize;<br align="left"/>let mut _48: usize;<br align="left"/>let mut _49: bool;<br align="left"/>let mut _50: u32;<br align="left"/>let mut _51: u32;<br align="left"/>let mut _52: u32;<br align="left"/>let mut _53: (u32, bool);<br align="left"/>let mut _54: bool;<br align="left"/>let _55: usize;<br align="left"/>let mut _56: usize;<br align="left"/>let mut _57: (usize, bool);<br align="left"/>let mut _58: usize;<br align="left"/>let mut _59: bool;<br align="left"/>debug u =&gt; _1;<br align="left"/>debug shift =&gt; _2;<br align="left"/>debug res =&gt; _10;<br align="left"/>debug iter =&gt; _14;<br align="left"/>debug i =&gt; _22;<br align="left"/>debug iter =&gt; _37;<br align="left"/>debug i =&gt; _44;<br align="left"/>>;
    bb0__0_1363 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>_4 = const true<br/></td></tr><tr><td align="left">switchInt(move _4)</td></tr></table>>];
    bb1__0_1363 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>_7 = _2<br/>StorageLive(_8)<br/>_8 = const _ as u32 (IntToInt)<br/>_6 = Lt(move _7, move _8)<br/></td></tr><tr><td align="left">switchInt(move _6)</td></tr></table>>];
    bb2__0_1363 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageDead(_7)<br/>_5 = const ()<br/>StorageDead(_6)<br/>StorageDead(_5)<br/>_3 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb3__0_1363 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageDead(_7)<br/>StorageLive(_9)<br/></td></tr><tr><td align="left">_9 = panic(const &quot;assertion failed: shift &lt; Self::WORD_BITS as u32&quot;)</td></tr></table>>];
    bb4__0_1363 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_3 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb5__0_1363 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>StorageDead(_3)<br/>StorageLive(_10)<br/></td></tr><tr><td align="left">_10 = U128::zero()</td></tr></table>>];
    bb6__0_1363 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>_13 = std::ops::Range::&lt;usize&gt; { start: const 0_usize, end: const 2_usize }<br/></td></tr><tr><td align="left">_12 = &lt;std::ops::Range&lt;usize&gt; as IntoIterator&gt;::into_iter(move _13)</td></tr></table>>];
    bb7__0_1363 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>StorageLive(_14)<br/>_14 = move _12<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_1363 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>_19 = &amp;mut _14<br/>_18 = &amp;mut (*_19)<br/></td></tr><tr><td align="left">_17 = &lt;std::ops::Range&lt;usize&gt; as Iterator&gt;::next(move _18)</td></tr></table>>];
    bb9__0_1363 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>_20 = discriminant(_17)<br/></td></tr><tr><td align="left">switchInt(move _20)</td></tr></table>>];
    bb10__0_1363 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_22)<br/>_22 = ((_17 as Some).0: usize)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>_24 = _22<br/>_25 = Len(_1)<br/>_26 = Lt(_24, _25)<br/></td></tr><tr><td align="left">assert(move _26, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _25, _24)</td></tr></table>>];
    bb11__0_1363 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb12__0_1363 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">_11 = const ()<br/>StorageDead(_19)<br/>StorageDead(_17)<br/>StorageDead(_16)<br/>StorageDead(_14)<br/>StorageDead(_12)<br/>StorageDead(_11)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>_34 = _2<br/>_33 = Gt(move _34, const 0_u32)<br/></td></tr><tr><td align="left">switchInt(move _33)</td></tr></table>>];
    bb13__0_1363 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">_23 = _1[_24]<br/>StorageLive(_27)<br/>_27 = _2<br/>_28 = Lt(_27, const 64_u32)<br/></td></tr><tr><td align="left">assert(move _28, &quot;attempt to shift right by `{}`, which would overflow&quot;, _27)</td></tr></table>>];
    bb14__0_1363 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageLive(_29)<br/>_29 = _22<br/>_30 = Len((_10.0: [u64; 2]))<br/>_31 = Lt(_29, _30)<br/></td></tr><tr><td align="left">assert(move _31, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _30, _29)</td></tr></table>>];
    bb15__0_1363 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">(_10.0: [u64; 2])[_29] = Shr(move _23, move _27)<br/>StorageDead(_27)<br/>StorageDead(_23)<br/>StorageDead(_29)<br/>StorageDead(_24)<br/>_16 = const ()<br/>StorageDead(_22)<br/>StorageDead(_19)<br/>StorageDead(_17)<br/>StorageDead(_16)<br/>_15 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb16__0_1363 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>StorageLive(_35)<br/>StorageLive(_36)<br/></td></tr><tr><td align="left">_36 = RangeInclusive::&lt;usize&gt;::new(const 1_usize, const 2_usize)</td></tr></table>>];
    bb17__0_1363 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>_32 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_1363 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left">_35 = &lt;RangeInclusive&lt;usize&gt; as IntoIterator&gt;::into_iter(move _36)</td></tr></table>>];
    bb19__0_1363 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_36)<br/>StorageLive(_37)<br/>_37 = move _35<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_1363 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageLive(_38)<br/>StorageLive(_39)<br/>StorageLive(_40)<br/>StorageLive(_41)<br/>_41 = &amp;mut _37<br/>_40 = &amp;mut (*_41)<br/></td></tr><tr><td align="left">_39 = &lt;RangeInclusive&lt;usize&gt; as Iterator&gt;::next(move _40)</td></tr></table>>];
    bb21__0_1363 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_40)<br/>_42 = discriminant(_39)<br/></td></tr><tr><td align="left">switchInt(move _42)</td></tr></table>>];
    bb22__0_1363 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageLive(_44)<br/>_44 = ((_39 as Some).0: usize)<br/>StorageLive(_45)<br/>StorageLive(_46)<br/>StorageLive(_47)<br/>_47 = _44<br/>_48 = Len(_1)<br/>_49 = Lt(_47, _48)<br/></td></tr><tr><td align="left">assert(move _49, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _48, _47)</td></tr></table>>];
    bb23__0_1363 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">_32 = const ()<br/>StorageDead(_41)<br/>StorageDead(_39)<br/>StorageDead(_38)<br/>StorageDead(_37)<br/>StorageDead(_35)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb24__0_1363 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">_46 = _1[_47]<br/>StorageLive(_50)<br/>StorageLive(_51)<br/>_51 = const _ as u32 (IntToInt)<br/>StorageLive(_52)<br/>_52 = _2<br/>_53 = CheckedSub(_51, _52)<br/></td></tr><tr><td align="left">assert(!move (_53.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, move _51, move _52)</td></tr></table>>];
    bb25__0_1363 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">_50 = move (_53.0: u32)<br/>StorageDead(_52)<br/>StorageDead(_51)<br/>_54 = Lt(_50, const 64_u32)<br/></td></tr><tr><td align="left">assert(move _54, &quot;attempt to shift left by `{}`, which would overflow&quot;, _50)</td></tr></table>>];
    bb26__0_1363 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">_45 = Shl(move _46, move _50)<br/>StorageDead(_50)<br/>StorageDead(_46)<br/>StorageLive(_55)<br/>StorageLive(_56)<br/>_56 = _44<br/>_57 = CheckedSub(_56, const 1_usize)<br/></td></tr><tr><td align="left">assert(!move (_57.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, move _56, const 1_usize)</td></tr></table>>];
    bb27__0_1363 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">_55 = move (_57.0: usize)<br/>StorageDead(_56)<br/>_58 = Len((_10.0: [u64; 2]))<br/>_59 = Lt(_55, _58)<br/></td></tr><tr><td align="left">assert(move _59, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _58, _55)</td></tr></table>>];
    bb28__0_1363 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">(_10.0: [u64; 2])[_55] = BitOr((_10.0: [u64; 2])[_55], move _45)<br/>StorageDead(_45)<br/>StorageDead(_55)<br/>StorageDead(_47)<br/>_38 = const ()<br/>StorageDead(_44)<br/>StorageDead(_41)<br/>StorageDead(_39)<br/>StorageDead(_38)<br/>_15 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb29__0_1363 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>StorageDead(_32)<br/>_0 = _10<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_1363 -> bb4__0_1363 [label="0"];
    bb0__0_1363 -> bb1__0_1363 [label="otherwise"];
    bb1__0_1363 -> bb3__0_1363 [label="0"];
    bb1__0_1363 -> bb2__0_1363 [label="otherwise"];
    bb2__0_1363 -> bb5__0_1363 [label=""];
    bb4__0_1363 -> bb5__0_1363 [label=""];
    bb5__0_1363 -> bb6__0_1363 [label="return"];
    bb6__0_1363 -> bb7__0_1363 [label="return"];
    bb7__0_1363 -> bb8__0_1363 [label=""];
    bb8__0_1363 -> bb9__0_1363 [label="return"];
    bb9__0_1363 -> bb12__0_1363 [label="0"];
    bb9__0_1363 -> bb10__0_1363 [label="1"];
    bb9__0_1363 -> bb11__0_1363 [label="otherwise"];
    bb10__0_1363 -> bb13__0_1363 [label="success"];
    bb12__0_1363 -> bb17__0_1363 [label="0"];
    bb12__0_1363 -> bb16__0_1363 [label="otherwise"];
    bb13__0_1363 -> bb14__0_1363 [label="success"];
    bb14__0_1363 -> bb15__0_1363 [label="success"];
    bb15__0_1363 -> bb8__0_1363 [label=""];
    bb16__0_1363 -> bb18__0_1363 [label="return"];
    bb17__0_1363 -> bb29__0_1363 [label=""];
    bb18__0_1363 -> bb19__0_1363 [label="return"];
    bb19__0_1363 -> bb20__0_1363 [label=""];
    bb20__0_1363 -> bb21__0_1363 [label="return"];
    bb21__0_1363 -> bb23__0_1363 [label="0"];
    bb21__0_1363 -> bb22__0_1363 [label="1"];
    bb21__0_1363 -> bb11__0_1363 [label="otherwise"];
    bb22__0_1363 -> bb24__0_1363 [label="success"];
    bb23__0_1363 -> bb29__0_1363 [label=""];
    bb24__0_1363 -> bb25__0_1363 [label="success"];
    bb25__0_1363 -> bb26__0_1363 [label="success"];
    bb26__0_1363 -> bb27__0_1363 [label="success"];
    bb27__0_1363 -> bb28__0_1363 [label="success"];
    bb28__0_1363 -> bb20__0_1363 [label=""];
}
