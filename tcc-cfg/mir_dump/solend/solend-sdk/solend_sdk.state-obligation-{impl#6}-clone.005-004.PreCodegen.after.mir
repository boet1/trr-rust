// MIR for `obligation::<impl at token-lending\sdk\src\state\obligation.rs:24:10: 24:15>::clone` after PreCodegen

fn obligation::<impl at token-lending\sdk\src\state\obligation.rs:24:10: 24:15>::clone(_1: &obligation::Obligation) -> obligation::Obligation {
    debug self => _1;
    let mut _0: state::obligation::Obligation;
    let mut _2: u8;
    let mut _3: &u8;
    let _4: &u8;
    let mut _5: state::last_update::LastUpdate;
    let mut _6: &state::last_update::LastUpdate;
    let _7: &state::last_update::LastUpdate;
    let mut _8: solana_program::pubkey::Pubkey;
    let mut _9: &solana_program::pubkey::Pubkey;
    let _10: &solana_program::pubkey::Pubkey;
    let mut _11: solana_program::pubkey::Pubkey;
    let mut _12: &solana_program::pubkey::Pubkey;
    let _13: &solana_program::pubkey::Pubkey;
    let mut _14: std::vec::Vec<state::obligation::ObligationCollateral>;
    let mut _15: &std::vec::Vec<state::obligation::ObligationCollateral>;
    let _16: &std::vec::Vec<state::obligation::ObligationCollateral>;
    let mut _17: std::vec::Vec<state::obligation::ObligationLiquidity>;
    let mut _18: &std::vec::Vec<state::obligation::ObligationLiquidity>;
    let _19: &std::vec::Vec<state::obligation::ObligationLiquidity>;
    let mut _20: math::decimal::Decimal;
    let mut _21: &math::decimal::Decimal;
    let _22: &math::decimal::Decimal;
    let mut _23: math::decimal::Decimal;
    let mut _24: &math::decimal::Decimal;
    let _25: &math::decimal::Decimal;
    let mut _26: math::decimal::Decimal;
    let mut _27: &math::decimal::Decimal;
    let _28: &math::decimal::Decimal;
    let mut _29: math::decimal::Decimal;
    let mut _30: &math::decimal::Decimal;
    let _31: &math::decimal::Decimal;
    let mut _32: math::decimal::Decimal;
    let mut _33: &math::decimal::Decimal;
    let _34: &math::decimal::Decimal;
    let mut _35: math::decimal::Decimal;
    let mut _36: &math::decimal::Decimal;
    let _37: &math::decimal::Decimal;
    let mut _38: math::decimal::Decimal;
    let mut _39: &math::decimal::Decimal;
    let _40: &math::decimal::Decimal;
    let mut _41: bool;
    let mut _42: &bool;
    let _43: &bool;
    let mut _44: bool;
    let mut _45: &bool;
    let _46: &bool;

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = &((*_1).0: u8);
        _3 = &(*_4);
        _2 = <u8 as Clone>::clone(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_3);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &((*_1).1: state::last_update::LastUpdate);
        _6 = &(*_7);
        _5 = <last_update::LastUpdate as Clone>::clone(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &((*_1).2: solana_program::pubkey::Pubkey);
        _9 = &(*_10);
        _8 = <Pubkey as Clone>::clone(move _9) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_9);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &((*_1).3: solana_program::pubkey::Pubkey);
        _12 = &(*_13);
        _11 = <Pubkey as Clone>::clone(move _12) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_12);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &((*_1).4: std::vec::Vec<state::obligation::ObligationCollateral>);
        _15 = &(*_16);
        _14 = <Vec<obligation::ObligationCollateral> as Clone>::clone(move _15) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_15);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &((*_1).5: std::vec::Vec<state::obligation::ObligationLiquidity>);
        _18 = &(*_19);
        _17 = <Vec<obligation::ObligationLiquidity> as Clone>::clone(move _18) -> [return: bb6, unwind: bb17];
    }

    bb6: {
        StorageDead(_18);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = &((*_1).6: math::decimal::Decimal);
        _21 = &(*_22);
        _20 = <decimal::Decimal as Clone>::clone(move _21) -> [return: bb7, unwind: bb16];
    }

    bb7: {
        StorageDead(_21);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &((*_1).7: math::decimal::Decimal);
        _24 = &(*_25);
        _23 = <decimal::Decimal as Clone>::clone(move _24) -> [return: bb8, unwind: bb16];
    }

    bb8: {
        StorageDead(_24);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &((*_1).8: math::decimal::Decimal);
        _27 = &(*_28);
        _26 = <decimal::Decimal as Clone>::clone(move _27) -> [return: bb9, unwind: bb16];
    }

    bb9: {
        StorageDead(_27);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = &((*_1).9: math::decimal::Decimal);
        _30 = &(*_31);
        _29 = <decimal::Decimal as Clone>::clone(move _30) -> [return: bb10, unwind: bb16];
    }

    bb10: {
        StorageDead(_30);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &((*_1).10: math::decimal::Decimal);
        _33 = &(*_34);
        _32 = <decimal::Decimal as Clone>::clone(move _33) -> [return: bb11, unwind: bb16];
    }

    bb11: {
        StorageDead(_33);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &((*_1).11: math::decimal::Decimal);
        _36 = &(*_37);
        _35 = <decimal::Decimal as Clone>::clone(move _36) -> [return: bb12, unwind: bb16];
    }

    bb12: {
        StorageDead(_36);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &((*_1).12: math::decimal::Decimal);
        _39 = &(*_40);
        _38 = <decimal::Decimal as Clone>::clone(move _39) -> [return: bb13, unwind: bb16];
    }

    bb13: {
        StorageDead(_39);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = &((*_1).13: bool);
        _42 = &(*_43);
        _41 = <bool as Clone>::clone(move _42) -> [return: bb14, unwind: bb16];
    }

    bb14: {
        StorageDead(_42);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = &((*_1).14: bool);
        _45 = &(*_46);
        _44 = <bool as Clone>::clone(move _45) -> [return: bb15, unwind: bb16];
    }

    bb15: {
        StorageDead(_45);
        _0 = obligation::Obligation { version: move _2, last_update: move _5, lending_market: move _8, owner: move _11, deposits: move _14, borrows: move _17, deposited_value: move _20, borrowed_value: move _23, unweighted_borrowed_value: move _26, borrowed_value_upper_bound: move _29, allowed_borrow_value: move _32, unhealthy_borrow_value: move _35, super_unhealthy_borrow_value: move _38, borrowing_isolated_asset: move _41, closeable: move _44 };
        StorageDead(_44);
        StorageDead(_41);
        StorageDead(_38);
        StorageDead(_35);
        StorageDead(_32);
        StorageDead(_29);
        StorageDead(_26);
        StorageDead(_23);
        StorageDead(_20);
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_2);
        StorageDead(_46);
        StorageDead(_43);
        StorageDead(_40);
        StorageDead(_37);
        StorageDead(_34);
        StorageDead(_31);
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_22);
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_4);
        return;
    }

    bb16 (cleanup): {
        drop(_17) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        drop(_14) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        resume;
    }
}
