// MIR for `flash_borrow_reserve_liquidity` after PreCodegen

fn flash_borrow_reserve_liquidity(_1: Pubkey, _2: u64, _3: Pubkey, _4: Pubkey, _5: Pubkey, _6: Pubkey) -> Instruction {
    debug program_id => _1;
    debug liquidity_amount => _2;
    debug source_liquidity_pubkey => _3;
    debug destination_liquidity_pubkey => _4;
    debug reserve_pubkey => _5;
    debug lending_market_pubkey => _6;
    let mut _0: solana_program::instruction::Instruction;
    let _7: solana_program::pubkey::Pubkey;
    let _8: u8;
    let mut _9: (solana_program::pubkey::Pubkey, u8);
    let mut _10: &[&[u8]];
    let mut _11: &[&[u8]; 1];
    let _12: &[&[u8]; 1];
    let _13: [&[u8]; 1];
    let mut _14: &[u8];
    let _15: &[u8];
    let _16: &[u8];
    let mut _17: &[u8; 32];
    let _18: [u8; 32];
    let mut _19: solana_program::pubkey::Pubkey;
    let mut _20: std::ops::RangeTo<usize>;
    let mut _21: &solana_program::pubkey::Pubkey;
    let _22: &solana_program::pubkey::Pubkey;
    let mut _23: solana_program::pubkey::Pubkey;
    let mut _24: std::vec::Vec<solana_program::instruction::AccountMeta>;
    let mut _25: std::boxed::Box<[solana_program::instruction::AccountMeta]>;
    let mut _26: std::boxed::Box<[solana_program::instruction::AccountMeta; 7]>;
    let mut _27: usize;
    let mut _28: usize;
    let mut _29: *mut u8;
    let mut _30: std::boxed::Box<[solana_program::instruction::AccountMeta; 7]>;
    let mut _31: solana_program::instruction::AccountMeta;
    let mut _32: solana_program::pubkey::Pubkey;
    let mut _33: solana_program::instruction::AccountMeta;
    let mut _34: solana_program::pubkey::Pubkey;
    let mut _35: solana_program::instruction::AccountMeta;
    let mut _36: solana_program::pubkey::Pubkey;
    let mut _37: solana_program::instruction::AccountMeta;
    let mut _38: solana_program::pubkey::Pubkey;
    let mut _39: solana_program::instruction::AccountMeta;
    let mut _40: solana_program::pubkey::Pubkey;
    let mut _41: solana_program::instruction::AccountMeta;
    let mut _42: solana_program::pubkey::Pubkey;
    let mut _43: solana_program::instruction::AccountMeta;
    let mut _44: solana_program::pubkey::Pubkey;
    let mut _45: std::vec::Vec<u8>;
    let mut _46: &instruction::LendingInstruction;
    let _47: instruction::LendingInstruction;
    let mut _48: u64;
    let mut _49: *const [solana_program::instruction::AccountMeta; 7];
    scope 1 {
        debug lending_market_authority_pubkey => _7;
        debug _bump_seed => _8;
        let mut _50: *const ();
        let mut _51: usize;
        let mut _52: usize;
        let mut _53: usize;
        let mut _54: usize;
        let mut _55: bool;
        scope 2 {
        }
    }

    bb0: {
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = _6;
        _18 = Pubkey::to_bytes(move _19) -> [return: bb1, unwind continue];
    }

    bb1: {
        _17 = &_18;
        StorageDead(_19);
        StorageLive(_20);
        _20 = RangeTo::<usize> { end: const _ };
        _16 = <[u8; 32] as Index<RangeTo<usize>>>::index(move _17, move _20) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_20);
        StorageDead(_17);
        _15 = &(*_16);
        _14 = &(*_15);
        _13 = [move _14];
        StorageDead(_14);
        _12 = &_13;
        _11 = &(*_12);
        _10 = move _11 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_11);
        StorageLive(_21);
        StorageLive(_22);
        _22 = &_1;
        _21 = &(*_22);
        _9 = Pubkey::find_program_address(move _10, move _21) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_21);
        StorageDead(_10);
        StorageLive(_7);
        _7 = (_9.0: solana_program::pubkey::Pubkey);
        StorageLive(_8);
        _8 = (_9.1: u8);
        StorageDead(_22);
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_9);
        StorageLive(_23);
        _23 = _1;
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _27 = SizeOf([solana_program::instruction::AccountMeta; 7]);
        _28 = AlignOf([solana_program::instruction::AccountMeta; 7]);
        _29 = alloc::alloc::exchange_malloc(move _27, move _28) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageLive(_30);
        _30 = ShallowInitBox(move _29, [solana_program::instruction::AccountMeta; 7]);
        StorageLive(_31);
        StorageLive(_32);
        _32 = _3;
        _31 = AccountMeta::new(move _32, const false) -> [return: bb5, unwind: bb17];
    }

    bb5: {
        StorageDead(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = _4;
        _33 = AccountMeta::new(move _34, const false) -> [return: bb6, unwind: bb17];
    }

    bb6: {
        StorageDead(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = _5;
        _35 = AccountMeta::new(move _36, const false) -> [return: bb7, unwind: bb17];
    }

    bb7: {
        StorageDead(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = _6;
        _37 = AccountMeta::new_readonly(move _38, const false) -> [return: bb8, unwind: bb17];
    }

    bb8: {
        StorageDead(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = _7;
        _39 = AccountMeta::new_readonly(move _40, const false) -> [return: bb9, unwind: bb17];
    }

    bb9: {
        StorageDead(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = solana_program::sysvar::instructions::id() -> [return: bb10, unwind: bb17];
    }

    bb10: {
        _41 = AccountMeta::new_readonly(move _42, const false) -> [return: bb11, unwind: bb17];
    }

    bb11: {
        StorageDead(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = spl_token::id() -> [return: bb12, unwind: bb17];
    }

    bb12: {
        _43 = AccountMeta::new_readonly(move _44, const false) -> [return: bb13, unwind: bb17];
    }

    bb13: {
        StorageDead(_44);
        _49 = (((_30.0: std::ptr::Unique<[solana_program::instruction::AccountMeta; 7]>).0: std::ptr::NonNull<[solana_program::instruction::AccountMeta; 7]>).0: *const [solana_program::instruction::AccountMeta; 7]);
        _50 = _49 as *const () (PtrToPtr);
        _51 = _50 as usize (Transmute);
        _52 = AlignOf([solana_program::instruction::AccountMeta; 7]);
        _53 = Sub(_52, const 1_usize);
        _54 = BitAnd(_51, _53);
        _55 = Eq(_54, const 0_usize);
        assert(_55, "misaligned pointer dereference: address must be a multiple of {} but is {}", _52, _51) -> [success: bb19, unwind unreachable];
    }

    bb14: {
        StorageDead(_25);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = _2;
        _47 = LendingInstruction::FlashBorrowReserveLiquidity { liquidity_amount: move _48 };
        _46 = &_47;
        StorageDead(_48);
        _45 = LendingInstruction::pack(move _46) -> [return: bb15, unwind: bb16];
    }

    bb15: {
        StorageDead(_46);
        _0 = Instruction { program_id: move _23, accounts: move _24, data: move _45 };
        StorageDead(_45);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_47);
        return;
    }

    bb16 (cleanup): {
        drop(_24) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        drop(_30) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        resume;
    }

    bb19: {
        (*_49) = [move _31, move _33, move _35, move _37, move _39, move _41, move _43];
        StorageDead(_43);
        StorageDead(_41);
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_31);
        _26 = move _30;
        _25 = move _26 as std::boxed::Box<[solana_program::instruction::AccountMeta]> (PointerCoercion(Unsize));
        StorageDead(_30);
        StorageDead(_26);
        _24 = std::slice::<impl [AccountMeta]>::into_vec::<std::alloc::Global>(move _25) -> [return: bb14, unwind: bb18];
    }
}
