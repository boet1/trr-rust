// MIR for `rate::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:587:3: 587:13>::from_str_radix` after PreCodegen

fn rate::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:587:3: 587:13>::from_str_radix(_1: &str, _2: u32) -> Result<U128, FromStrRadixErr> {
    debug txt => _1;
    debug radix => _2;
    let mut _0: std::result::Result<math::rate::U128, uint::FromStrRadixErr>;
    let _3: math::rate::U128;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, uint::FromDecStrErr>, math::rate::U128>;
    let mut _5: std::result::Result<math::rate::U128, uint::FromDecStrErr>;
    let mut _6: &str;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, uint::FromDecStrErr>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, uint::FromDecStrErr>;
    let _11: math::rate::U128;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, uint::FromHexError>, math::rate::U128>;
    let mut _13: std::result::Result<math::rate::U128, uint::FromHexError>;
    let mut _14: &str;
    let mut _15: isize;
    let _16: std::result::Result<std::convert::Infallible, uint::FromHexError>;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, uint::FromHexError>;
    let _19: math::rate::U128;
    let mut _20: !;
    let mut _21: uint::FromStrRadixErr;
    let mut _22: math::rate::U128;
    scope 1 {
        debug parsed => _3;
    }
    scope 2 {
        debug residual => _8;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _11;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _16;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _19;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_3);
        switchInt(_2) -> [10: bb2, 16: bb9, otherwise: bb1];
    }

    bb1: {
        StorageLive(_21);
        _21 = FromStrRadixErr::unsupported() -> [return: bb15, unwind continue];
    }

    bb2: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &(*_1);
        _5 = U128::from_dec_str(move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_6);
        _4 = <Result<U128, FromDecStrErr> as Try>::branch(move _5) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_5);
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_11);
        _11 = ((_4 as Continue).0: math::rate::U128);
        _3 = _11;
        StorageDead(_11);
        StorageDead(_4);
        goto -> bb16;
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_8);
        _8 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, uint::FromDecStrErr>);
        StorageLive(_10);
        _10 = move _8;
        _0 = <Result<U128, FromStrRadixErr> as FromResidual<Result<Infallible, FromDecStrErr>>>::from_residual(move _10) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_4);
        goto -> bb17;
    }

    bb9: {
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = &(*_1);
        _13 = <U128 as FromStr>::from_str(move _14) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_14);
        _12 = <Result<U128, uint::FromHexError> as Try>::branch(move _13) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_13);
        _15 = discriminant(_12);
        switchInt(move _15) -> [0: bb12, 1: bb13, otherwise: bb6];
    }

    bb12: {
        StorageLive(_19);
        _19 = ((_12 as Continue).0: math::rate::U128);
        _3 = _19;
        StorageDead(_19);
        StorageDead(_12);
        goto -> bb16;
    }

    bb13: {
        StorageLive(_16);
        _16 = move ((_12 as Break).0: std::result::Result<std::convert::Infallible, uint::FromHexError>);
        StorageLive(_18);
        _18 = move _16;
        _0 = <Result<U128, FromStrRadixErr> as FromResidual<Result<Infallible, uint::FromHexError>>>::from_residual(move _18) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_12);
        goto -> bb17;
    }

    bb15: {
        _0 = Result::<U128, FromStrRadixErr>::Err(move _21);
        StorageDead(_21);
        goto -> bb17;
    }

    bb16: {
        StorageLive(_22);
        _22 = _3;
        _0 = Result::<U128, FromStrRadixErr>::Ok(move _22);
        StorageDead(_22);
        StorageDead(_3);
        goto -> bb18;
    }

    bb17: {
        StorageDead(_3);
        goto -> bb18;
    }

    bb18: {
        return;
    }
}
