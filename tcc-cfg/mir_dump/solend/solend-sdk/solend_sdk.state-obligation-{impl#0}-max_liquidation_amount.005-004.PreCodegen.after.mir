// MIR for `obligation::<impl at token-lending\sdk\src\state\obligation.rs:68:1: 68:16>::max_liquidation_amount` after PreCodegen

fn obligation::<impl at token-lending\sdk\src\state\obligation.rs:68:1: 68:16>::max_liquidation_amount(_1: &obligation::Obligation, _2: &obligation::ObligationLiquidity) -> Result<decimal::Decimal, ProgramError> {
    debug self => _1;
    debug liquidity => _2;
    let mut _0: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let _3: math::decimal::Decimal;
    let mut _4: math::decimal::Decimal;
    let mut _5: math::decimal::Decimal;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _7: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _8: math::decimal::Decimal;
    let mut _9: math::rate::Rate;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _14: math::decimal::Decimal;
    let mut _15: math::decimal::Decimal;
    let mut _16: math::decimal::Decimal;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _19: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _20: math::decimal::Decimal;
    let mut _21: math::decimal::Decimal;
    let mut _22: isize;
    let mut _24: !;
    let mut _25: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _27: math::decimal::Decimal;
    let mut _28: math::decimal::Decimal;
    let mut _29: bool;
    let mut _30: isize;
    let mut _31: isize;
    let mut _32: isize;
    let mut _33: isize;
    let mut _34: isize;
    let mut _35: isize;
    let mut _36: isize;
    let mut _37: isize;
    let mut _38: isize;
    let mut _39: isize;
    scope 1 {
        debug max_liquidation_value => _3;
        let _17: math::decimal::Decimal;
        let _23: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _26: math::decimal::Decimal;
        scope 6 {
            debug max_liquidation_pct => _17;
        }
        scope 7 {
            debug residual => _23;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _26;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _11;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _14;
        scope 5 {
        }
    }

    bb0: {
        _29 = const false;
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = ((*_1).7: math::decimal::Decimal);
        StorageLive(_9);
        _9 = rate::Rate::from_percent(const _) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = <decimal::Decimal as common::TryMul<rate::Rate>>::try_mul(move _8, move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_9);
        StorageDead(_8);
        _6 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _7) -> [return: bb3, unwind: bb19];
    }

    bb3: {
        _29 = const true;
        StorageDead(_7);
        _10 = discriminant(_6);
        switchInt(move _10) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_14);
        _14 = ((_6 as Continue).0: math::decimal::Decimal);
        _5 = _14;
        StorageDead(_14);
        StorageLive(_15);
        _15 = ((*_2).3: math::decimal::Decimal);
        _4 = <decimal::Decimal as Ord>::min(move _5, move _15) -> [return: bb8, unwind: bb21];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_11);
        _11 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_13);
        _13 = move _11;
        _0 = <Result<decimal::Decimal, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _13) -> [return: bb7, unwind: bb21];
    }

    bb7: {
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_5);
        StorageDead(_4);
        _36 = discriminant(_6);
        _29 = const false;
        StorageDead(_6);
        goto -> bb17;
    }

    bb8: {
        StorageDead(_15);
        StorageDead(_5);
        StorageLive(_16);
        _16 = <decimal::Decimal as From<u64>>::from(const _) -> [return: bb9, unwind: bb21];
    }

    bb9: {
        _3 = <decimal::Decimal as Ord>::min(move _4, move _16) -> [return: bb10, unwind: bb21];
    }

    bb10: {
        StorageDead(_16);
        StorageDead(_4);
        _30 = discriminant(_6);
        _29 = const false;
        StorageDead(_6);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = _3;
        StorageLive(_21);
        _21 = ((*_2).3: math::decimal::Decimal);
        _19 = <decimal::Decimal as common::TryDiv<decimal::Decimal>>::try_div(move _20, move _21) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_21);
        StorageDead(_20);
        _18 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _19) -> [return: bb12, unwind: bb19];
    }

    bb12: {
        StorageDead(_19);
        _22 = discriminant(_18);
        switchInt(move _22) -> [0: bb13, 1: bb14, otherwise: bb5];
    }

    bb13: {
        StorageLive(_26);
        _26 = ((_18 as Continue).0: math::decimal::Decimal);
        _17 = _26;
        StorageDead(_26);
        _32 = discriminant(_18);
        StorageDead(_18);
        StorageLive(_27);
        _27 = ((*_2).2: math::decimal::Decimal);
        StorageLive(_28);
        _28 = _17;
        _0 = <decimal::Decimal as common::TryMul<decimal::Decimal>>::try_mul(move _27, move _28) -> [return: bb16, unwind continue];
    }

    bb14: {
        StorageLive(_23);
        _23 = move ((_18 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_25);
        _25 = move _23;
        _0 = <Result<decimal::Decimal, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _25) -> [return: bb15, unwind: bb20];
    }

    bb15: {
        StorageDead(_25);
        StorageDead(_23);
        _34 = discriminant(_18);
        StorageDead(_18);
        StorageDead(_17);
        goto -> bb17;
    }

    bb16: {
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_17);
        StorageDead(_3);
        goto -> bb18;
    }

    bb17: {
        StorageDead(_3);
        goto -> bb18;
    }

    bb18: {
        return;
    }

    bb19 (cleanup): {
        resume;
    }

    bb20 (cleanup): {
        _38 = discriminant(_18);
        goto -> bb19;
    }

    bb21 (cleanup): {
        _39 = discriminant(_6);
        goto -> bb19;
    }
}
