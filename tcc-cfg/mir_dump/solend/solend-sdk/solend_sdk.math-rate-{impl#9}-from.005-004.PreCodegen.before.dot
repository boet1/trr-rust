digraph Mir_0_1308 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn &lt;U128 as From&lt;u128&gt;&gt;::from(_1: u128) -&gt; math::rate::U128<br align="left"/>let mut _2: [u64; 2_usize];<br align="left"/>let mut _3: u128;<br align="left"/>let _4: usize;<br align="left"/>let mut _5: usize;<br align="left"/>let mut _6: bool;<br align="left"/>let mut _7: u128;<br align="left"/>let mut _8: u128;<br align="left"/>let mut _9: u32;<br align="left"/>let mut _10: bool;<br align="left"/>let _11: usize;<br align="left"/>let mut _12: usize;<br align="left"/>let mut _13: bool;<br align="left"/>let mut _14: [u64; 2_usize];<br align="left"/>debug value =&gt; _1;<br align="left"/>debug ret =&gt; _2;<br align="left"/>>;
    bb0__0_1308 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>_2 = [const 0_u64; 2]<br/>StorageLive(_3)<br/>_3 = _1<br/>StorageLive(_4)<br/>_4 = const 0_usize<br/>_5 = Len(_2)<br/>_6 = Lt(_4, _5)<br/></td></tr><tr><td align="left">assert(move _6, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _5, _4)</td></tr></table>>];
    bb1__0_1308 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_2[_4] = move _3 as u64 (IntToInt)<br/>StorageDead(_3)<br/>StorageDead(_4)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = _1<br/>_9 = const 64_i32 as u32 (IntToInt)<br/>_10 = Lt(move _9, const 128_u32)<br/></td></tr><tr><td align="left">assert(move _10, &quot;attempt to shift right by `{}`, which would overflow&quot;, const 64_i32)</td></tr></table>>];
    bb2__0_1308 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_7 = Shr(move _8, const 64_i32)<br/>StorageDead(_8)<br/>StorageLive(_11)<br/>_11 = const 1_usize<br/>_12 = Len(_2)<br/>_13 = Lt(_11, _12)<br/></td></tr><tr><td align="left">assert(move _13, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _12, _11)</td></tr></table>>];
    bb3__0_1308 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_2[_11] = move _7 as u64 (IntToInt)<br/>StorageDead(_7)<br/>StorageDead(_11)<br/>StorageLive(_14)<br/>_14 = _2<br/>_0 = U128(move _14)<br/>StorageDead(_14)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_1308 -> bb1__0_1308 [label="success"];
    bb1__0_1308 -> bb2__0_1308 [label="success"];
    bb2__0_1308 -> bb3__0_1308 [label="success"];
}
