// MIR for `reserve::<impl at token-lending\sdk\src\state\reserve.rs:65:1: 65:13>::calculate_liquidation` after PreCodegen

fn reserve::<impl at token-lending\sdk\src\state\reserve.rs:65:1: 65:13>::calculate_liquidation(_1: &reserve::Reserve, _2: u64, _3: &obligation::Obligation, _4: &obligation::ObligationLiquidity, _5: &obligation::ObligationCollateral, _6: &Bonus) -> Result<CalculateLiquidationResult, ProgramError> {
    debug self => _1;
    debug amount_to_liquidate => _2;
    debug obligation => _3;
    debug liquidity => _4;
    debug collateral => _5;
    debug bonus => _6;
    let mut _0: std::result::Result<state::reserve::CalculateLiquidationResult, solana_program::program_error::ProgramError>;
    let _7: ();
    let mut _8: bool;
    let mut _9: &math::decimal::Decimal;
    let mut _10: &math::decimal::Decimal;
    let _11: math::decimal::Decimal;
    let mut _12: !;
    let _13: ();
    let mut _14: &str;
    let _15: &str;
    let mut _16: solana_program::program_error::ProgramError;
    let mut _17: error::LendingError;
    let _18: math::decimal::Decimal;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _20: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _21: math::decimal::Decimal;
    let mut _22: math::decimal::Decimal;
    let mut _23: isize;
    let _24: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _25: !;
    let mut _26: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _27: math::decimal::Decimal;
    let mut _29: bool;
    let mut _30: u64;
    let mut _31: math::decimal::Decimal;
    let mut _32: u64;
    let mut _33: math::decimal::Decimal;
    let _37: ();
    let mut _38: bool;
    let mut _39: &math::decimal::Decimal;
    let mut _40: &math::decimal::Decimal;
    let _41: math::decimal::Decimal;
    let mut _43: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _44: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _45: math::decimal::Decimal;
    let mut _46: math::decimal::Decimal;
    let mut _47: isize;
    let mut _49: !;
    let mut _50: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _52: std::cmp::Ordering;
    let mut _53: &math::decimal::Decimal;
    let mut _54: &math::decimal::Decimal;
    let _55: &math::decimal::Decimal;
    let mut _56: i8;
    let mut _58: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _59: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _60: math::decimal::Decimal;
    let mut _61: math::decimal::Decimal;
    let mut _62: isize;
    let mut _64: !;
    let mut _65: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _67: math::decimal::Decimal;
    let mut _68: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _69: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _70: math::decimal::Decimal;
    let mut _71: math::decimal::Decimal;
    let mut _72: isize;
    let mut _74: !;
    let mut _75: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _77: u64;
    let mut _78: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, u64>;
    let mut _79: std::result::Result<u64, solana_program::program_error::ProgramError>;
    let mut _80: &math::decimal::Decimal;
    let mut _81: isize;
    let mut _83: !;
    let mut _84: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _86: u64;
    let mut _87: math::decimal::Decimal;
    let mut _88: u64;
    let mut _89: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, u64>;
    let mut _90: std::result::Result<u64, solana_program::program_error::ProgramError>;
    let mut _91: &math::decimal::Decimal;
    let mut _92: isize;
    let mut _94: !;
    let mut _95: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _97: u64;
    let mut _99: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _100: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _101: math::decimal::Decimal;
    let mut _102: math::decimal::Decimal;
    let mut _103: isize;
    let mut _105: !;
    let mut _106: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _108: math::decimal::Decimal;
    let mut _109: u64;
    let mut _110: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, u64>;
    let mut _111: std::result::Result<u64, solana_program::program_error::ProgramError>;
    let mut _112: &math::decimal::Decimal;
    let mut _113: isize;
    let mut _115: !;
    let mut _116: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _118: ();
    let mut _119: bool;
    let mut _120: u64;
    let mut _121: !;
    let _122: ();
    let mut _123: &str;
    let _124: &str;
    let mut _125: solana_program::program_error::ProgramError;
    let mut _126: error::LendingError;
    let mut _127: u64;
    let mut _128: u64;
    let mut _129: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, u64>;
    let mut _130: std::result::Result<u64, solana_program::program_error::ProgramError>;
    let mut _131: &math::decimal::Decimal;
    let _132: math::decimal::Decimal;
    let mut _133: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _134: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _135: math::decimal::Decimal;
    let mut _136: u64;
    let mut _137: math::decimal::Decimal;
    let mut _138: isize;
    let mut _140: !;
    let mut _141: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _143: isize;
    let mut _145: !;
    let mut _146: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _149: math::decimal::Decimal;
    let mut _150: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _151: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _152: &state::obligation::Obligation;
    let mut _153: &state::obligation::ObligationLiquidity;
    let mut _154: isize;
    let mut _156: !;
    let mut _157: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _159: math::decimal::Decimal;
    let mut _161: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _162: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _163: math::decimal::Decimal;
    let mut _164: math::decimal::Decimal;
    let mut _165: isize;
    let mut _167: !;
    let mut _168: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _171: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _172: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _173: math::decimal::Decimal;
    let mut _174: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _175: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _176: math::decimal::Decimal;
    let mut _177: math::decimal::Decimal;
    let mut _178: isize;
    let mut _180: !;
    let mut _181: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _183: math::decimal::Decimal;
    let mut _184: isize;
    let mut _186: !;
    let mut _187: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _189: std::cmp::Ordering;
    let mut _190: &math::decimal::Decimal;
    let mut _191: &math::decimal::Decimal;
    let _192: &math::decimal::Decimal;
    let mut _193: i8;
    let mut _195: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _196: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _197: math::decimal::Decimal;
    let mut _198: math::decimal::Decimal;
    let mut _199: isize;
    let mut _201: !;
    let mut _202: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _204: math::decimal::Decimal;
    let mut _205: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _206: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _207: math::decimal::Decimal;
    let mut _208: math::decimal::Decimal;
    let mut _209: isize;
    let mut _211: !;
    let mut _212: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _214: u64;
    let mut _215: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, u64>;
    let mut _216: std::result::Result<u64, solana_program::program_error::ProgramError>;
    let mut _217: &math::decimal::Decimal;
    let mut _218: isize;
    let mut _220: !;
    let mut _221: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _223: u64;
    let mut _224: math::decimal::Decimal;
    let mut _225: u64;
    let mut _226: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, u64>;
    let mut _227: std::result::Result<u64, solana_program::program_error::ProgramError>;
    let mut _228: &math::decimal::Decimal;
    let mut _229: isize;
    let mut _231: !;
    let mut _232: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _234: u64;
    let mut _236: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _237: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _238: math::decimal::Decimal;
    let mut _239: math::decimal::Decimal;
    let mut _240: isize;
    let mut _242: !;
    let mut _243: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _245: math::decimal::Decimal;
    let mut _246: u64;
    let mut _247: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, u64>;
    let mut _248: std::result::Result<u64, solana_program::program_error::ProgramError>;
    let mut _249: &math::decimal::Decimal;
    let mut _250: isize;
    let mut _252: !;
    let mut _253: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _255: u64;
    let mut _256: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, u64>;
    let mut _257: std::result::Result<u64, solana_program::program_error::ProgramError>;
    let mut _258: &math::decimal::Decimal;
    let _259: math::decimal::Decimal;
    let mut _260: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _261: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _262: math::decimal::Decimal;
    let mut _263: u64;
    let mut _264: math::decimal::Decimal;
    let mut _265: isize;
    let mut _267: !;
    let mut _268: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _270: isize;
    let mut _272: !;
    let mut _273: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _275: state::reserve::CalculateLiquidationResult;
    let mut _276: math::decimal::Decimal;
    let mut _277: u64;
    let mut _278: u64;
    let mut _279: bool;
    let mut _280: bool;
    let mut _281: bool;
    let mut _282: bool;
    let mut _283: bool;
    let mut _284: isize;
    let mut _285: isize;
    let mut _286: isize;
    let mut _287: isize;
    let mut _288: isize;
    let mut _289: isize;
    let mut _290: isize;
    let mut _291: isize;
    let mut _292: isize;
    let mut _293: isize;
    let mut _294: isize;
    let mut _295: isize;
    let mut _296: isize;
    let mut _297: isize;
    let mut _298: isize;
    let mut _299: isize;
    let mut _300: isize;
    let mut _301: isize;
    let mut _302: isize;
    let mut _303: isize;
    let mut _304: isize;
    let mut _305: isize;
    let mut _306: isize;
    let mut _307: isize;
    let mut _308: isize;
    let mut _309: isize;
    let mut _310: isize;
    let mut _311: isize;
    let mut _312: isize;
    let mut _313: isize;
    let mut _314: isize;
    let mut _315: isize;
    let mut _316: isize;
    let mut _317: isize;
    let mut _318: isize;
    let mut _319: isize;
    let mut _320: isize;
    let mut _321: isize;
    let mut _322: isize;
    let mut _323: isize;
    let mut _324: isize;
    let mut _325: isize;
    let mut _326: isize;
    let mut _327: isize;
    let mut _328: isize;
    let mut _329: isize;
    let mut _330: isize;
    let mut _331: isize;
    let mut _332: isize;
    let mut _333: isize;
    let mut _334: isize;
    let mut _335: isize;
    let mut _336: isize;
    let mut _337: isize;
    let mut _338: isize;
    let mut _339: isize;
    let mut _340: isize;
    let mut _341: isize;
    let mut _342: isize;
    let mut _343: isize;
    let mut _344: isize;
    let mut _345: isize;
    let mut _346: isize;
    let mut _347: isize;
    let mut _348: isize;
    let mut _349: isize;
    let mut _350: isize;
    let mut _351: isize;
    let mut _352: isize;
    let mut _353: isize;
    let mut _354: isize;
    let mut _355: isize;
    let mut _356: isize;
    let mut _357: isize;
    let mut _358: isize;
    let mut _359: isize;
    let mut _360: isize;
    let mut _361: isize;
    let mut _362: isize;
    let mut _363: isize;
    let mut _364: isize;
    let mut _365: isize;
    let mut _366: isize;
    let mut _367: isize;
    let mut _368: isize;
    let mut _369: isize;
    let mut _370: isize;
    let mut _371: isize;
    let mut _372: isize;
    let mut _373: isize;
    let mut _374: isize;
    let mut _375: isize;
    let mut _376: isize;
    let mut _377: isize;
    let mut _378: isize;
    let mut _379: isize;
    let mut _380: isize;
    let mut _381: isize;
    let mut _382: isize;
    let mut _383: isize;
    let mut _384: isize;
    let mut _385: isize;
    let mut _386: isize;
    let mut _387: isize;
    let mut _388: isize;
    let mut _389: isize;
    let mut _390: isize;
    let mut _391: isize;
    let mut _392: isize;
    let mut _393: isize;
    scope 1 {
        debug bonus_rate => _18;
        let _28: math::decimal::Decimal;
        scope 6 {
            debug max_amount => _28;
            let _34: math::decimal::Decimal;
            scope 7 {
                debug settle_amount => _34;
                let _35: u64;
                scope 8 {
                    debug repay_amount => _35;
                    let _36: u64;
                    scope 9 {
                        debug withdraw_amount => _36;
                        let _42: math::decimal::Decimal;
                        let _48: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                        let _51: math::decimal::Decimal;
                        let _148: math::decimal::Decimal;
                        let _155: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                        let _158: math::decimal::Decimal;
                        scope 10 {
                            debug liquidation_value => _42;
                            let _57: math::decimal::Decimal;
                            let _63: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                            let _66: math::decimal::Decimal;
                            let _93: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                            let _96: u64;
                            let _98: math::decimal::Decimal;
                            let _104: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                            let _107: math::decimal::Decimal;
                            scope 15 {
                                debug repay_pct => _57;
                                let _73: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                let _76: math::decimal::Decimal;
                                let _82: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                let _85: u64;
                                scope 20 {
                                    debug residual => _73;
                                    scope 21 {
                                    }
                                }
                                scope 22 {
                                    debug val => _76;
                                    scope 23 {
                                    }
                                }
                                scope 24 {
                                    debug residual => _82;
                                    scope 25 {
                                    }
                                }
                                scope 26 {
                                    debug val => _85;
                                    scope 27 {
                                    }
                                }
                            }
                            scope 16 {
                                debug residual => _63;
                                scope 17 {
                                }
                            }
                            scope 18 {
                                debug val => _66;
                                scope 19 {
                                }
                            }
                            scope 28 {
                                debug residual => _93;
                                scope 29 {
                                }
                            }
                            scope 30 {
                                debug val => _96;
                                scope 31 {
                                }
                            }
                            scope 32 {
                                debug withdraw_pct => _98;
                                let _114: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                let _117: u64;
                                let _139: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                let _142: math::decimal::Decimal;
                                let _144: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                let _147: u64;
                                scope 37 {
                                    debug residual => _114;
                                    scope 38 {
                                    }
                                }
                                scope 39 {
                                    debug val => _117;
                                    scope 40 {
                                    }
                                }
                                scope 41 {
                                    debug residual => _139;
                                    scope 42 {
                                    }
                                }
                                scope 43 {
                                    debug val => _142;
                                    scope 44 {
                                    }
                                }
                                scope 45 {
                                    debug residual => _144;
                                    scope 46 {
                                    }
                                }
                                scope 47 {
                                    debug val => _147;
                                    scope 48 {
                                    }
                                }
                            }
                            scope 33 {
                                debug residual => _104;
                                scope 34 {
                                }
                            }
                            scope 35 {
                                debug val => _107;
                                scope 36 {
                                }
                            }
                        }
                        scope 11 {
                            debug residual => _48;
                            scope 12 {
                            }
                        }
                        scope 13 {
                            debug val => _51;
                            scope 14 {
                            }
                        }
                        scope 49 {
                            debug liquidation_amount => _148;
                            let _160: math::decimal::Decimal;
                            let _166: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                            let _169: math::decimal::Decimal;
                            scope 54 {
                                debug liquidation_pct => _160;
                                let _170: math::decimal::Decimal;
                                let _179: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                let _182: math::decimal::Decimal;
                                let _185: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                let _188: math::decimal::Decimal;
                                scope 59 {
                                    debug liquidation_value => _170;
                                    let _194: math::decimal::Decimal;
                                    let _200: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                    let _203: math::decimal::Decimal;
                                    let _230: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                    let _233: u64;
                                    let _235: math::decimal::Decimal;
                                    let _241: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                    let _244: math::decimal::Decimal;
                                    scope 68 {
                                        debug repay_pct => _194;
                                        let _210: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                        let _213: math::decimal::Decimal;
                                        let _219: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                        let _222: u64;
                                        scope 73 {
                                            debug residual => _210;
                                            scope 74 {
                                            }
                                        }
                                        scope 75 {
                                            debug val => _213;
                                            scope 76 {
                                            }
                                        }
                                        scope 77 {
                                            debug residual => _219;
                                            scope 78 {
                                            }
                                        }
                                        scope 79 {
                                            debug val => _222;
                                            scope 80 {
                                            }
                                        }
                                    }
                                    scope 69 {
                                        debug residual => _200;
                                        scope 70 {
                                        }
                                    }
                                    scope 71 {
                                        debug val => _203;
                                        scope 72 {
                                        }
                                    }
                                    scope 81 {
                                        debug residual => _230;
                                        scope 82 {
                                        }
                                    }
                                    scope 83 {
                                        debug val => _233;
                                        scope 84 {
                                        }
                                    }
                                    scope 85 {
                                        debug withdraw_pct => _235;
                                        let _251: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                        let _254: u64;
                                        let _266: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                        let _269: math::decimal::Decimal;
                                        let _271: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                        let _274: u64;
                                        scope 90 {
                                            debug residual => _251;
                                            scope 91 {
                                            }
                                        }
                                        scope 92 {
                                            debug val => _254;
                                            scope 93 {
                                            }
                                        }
                                        scope 94 {
                                            debug residual => _266;
                                            scope 95 {
                                            }
                                        }
                                        scope 96 {
                                            debug val => _269;
                                            scope 97 {
                                            }
                                        }
                                        scope 98 {
                                            debug residual => _271;
                                            scope 99 {
                                            }
                                        }
                                        scope 100 {
                                            debug val => _274;
                                            scope 101 {
                                            }
                                        }
                                    }
                                    scope 86 {
                                        debug residual => _241;
                                        scope 87 {
                                        }
                                    }
                                    scope 88 {
                                        debug val => _244;
                                        scope 89 {
                                        }
                                    }
                                }
                                scope 60 {
                                    debug residual => _179;
                                    scope 61 {
                                    }
                                }
                                scope 62 {
                                    debug val => _182;
                                    scope 63 {
                                    }
                                }
                                scope 64 {
                                    debug residual => _185;
                                    scope 65 {
                                    }
                                }
                                scope 66 {
                                    debug val => _188;
                                    scope 67 {
                                    }
                                }
                            }
                            scope 55 {
                                debug residual => _166;
                                scope 56 {
                                }
                            }
                            scope 57 {
                                debug val => _169;
                                scope 58 {
                                }
                            }
                        }
                        scope 50 {
                            debug residual => _155;
                            scope 51 {
                            }
                        }
                        scope 52 {
                            debug val => _158;
                            scope 53 {
                            }
                        }
                    }
                }
            }
        }
    }
    scope 2 {
        debug residual => _24;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _27;
        scope 5 {
        }
    }

    bb0: {
        _281 = const false;
        _283 = const false;
        _282 = const false;
        _280 = const false;
        _279 = const false;
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &((*_6).0: math::decimal::Decimal);
        StorageLive(_10);
        StorageLive(_11);
        _11 = decimal::Decimal::from_percent(const _) -> [return: bb1, unwind continue];
    }

    bb1: {
        _10 = &_11;
        _8 = <decimal::Decimal as PartialOrd>::gt(move _9, move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _8) -> [0: bb6, otherwise: bb3];
    }

    bb3: {
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = const "Bonus rate cannot exceed maximum bonus rate";
        _14 = &(*_15);
        _13 = solana_program::log::sol_log(move _14) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_14);
        StorageDead(_15);
        StorageDead(_13);
        StorageLive(_16);
        StorageLive(_17);
        _17 = LendingError::InvalidAmount;
        _16 = <LendingError as Into<ProgramError>>::into(move _17) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_17);
        _0 = Result::<CalculateLiquidationResult, ProgramError>::Err(move _16);
        StorageDead(_16);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb160;
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        _7 = const ();
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = ((*_6).0: math::decimal::Decimal);
        StorageLive(_22);
        _22 = decimal::Decimal::one() -> [return: bb7, unwind continue];
    }

    bb7: {
        _20 = <decimal::Decimal as common::TryAdd>::try_add(move _21, move _22) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_22);
        StorageDead(_21);
        _19 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _20) -> [return: bb9, unwind: bb161];
    }

    bb9: {
        StorageDead(_20);
        _23 = discriminant(_19);
        switchInt(move _23) -> [0: bb10, 1: bb12, otherwise: bb11];
    }

    bb10: {
        StorageLive(_27);
        _27 = ((_19 as Continue).0: math::decimal::Decimal);
        _18 = _27;
        StorageDead(_27);
        _284 = discriminant(_19);
        StorageDead(_19);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = _2;
        _29 = Eq(move _30, const _);
        switchInt(move _29) -> [0: bb15, otherwise: bb14];
    }

    bb11: {
        unreachable;
    }

    bb12: {
        StorageLive(_24);
        _24 = move ((_19 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_26);
        _26 = move _24;
        _0 = <Result<CalculateLiquidationResult, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _26) -> [return: bb13, unwind: bb183];
    }

    bb13: {
        StorageDead(_26);
        StorageDead(_24);
        _370 = discriminant(_19);
        StorageDead(_19);
        goto -> bb159;
    }

    bb14: {
        StorageDead(_30);
        _28 = ((*_4).2: math::decimal::Decimal);
        goto -> bb18;
    }

    bb15: {
        StorageDead(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = _2;
        _31 = <decimal::Decimal as From<u64>>::from(move _32) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_32);
        StorageLive(_33);
        _33 = ((*_4).2: math::decimal::Decimal);
        _28 = <decimal::Decimal as Ord>::min(move _31, move _33) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_33);
        StorageDead(_31);
        goto -> bb18;
    }

    bb18: {
        StorageDead(_29);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &((*_4).3: math::decimal::Decimal);
        StorageLive(_40);
        StorageLive(_41);
        _41 = decimal::Decimal::one() -> [return: bb19, unwind continue];
    }

    bb19: {
        _40 = &_41;
        _38 = <decimal::Decimal as PartialOrd>::le(move _39, move _40) -> [return: bb20, unwind continue];
    }

    bb20: {
        switchInt(move _38) -> [0: bb78, otherwise: bb21];
    }

    bb21: {
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = ((*_4).3: math::decimal::Decimal);
        StorageLive(_46);
        _46 = _18;
        _44 = <decimal::Decimal as common::TryMul<decimal::Decimal>>::try_mul(move _45, move _46) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_46);
        StorageDead(_45);
        _43 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _44) -> [return: bb23, unwind: bb161];
    }

    bb23: {
        StorageDead(_44);
        _47 = discriminant(_43);
        switchInt(move _47) -> [0: bb24, 1: bb25, otherwise: bb11];
    }

    bb24: {
        StorageLive(_51);
        _51 = ((_43 as Continue).0: math::decimal::Decimal);
        _42 = _51;
        StorageDead(_51);
        _286 = discriminant(_43);
        StorageDead(_43);
        StorageLive(_52);
        StorageLive(_53);
        _53 = &_42;
        StorageLive(_54);
        StorageLive(_55);
        _55 = &((*_5).2: math::decimal::Decimal);
        _54 = &(*_55);
        _52 = <decimal::Decimal as Ord>::cmp(move _53, move _54) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_48);
        _48 = move ((_43 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_50);
        _50 = move _48;
        _0 = <Result<CalculateLiquidationResult, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _50) -> [return: bb26, unwind: bb182];
    }

    bb26: {
        StorageDead(_50);
        StorageDead(_48);
        _368 = discriminant(_43);
        StorageDead(_43);
        StorageDead(_42);
        goto -> bb158;
    }

    bb27: {
        StorageDead(_54);
        StorageDead(_53);
        _56 = discriminant(_52);
        switchInt(move _56) -> [255: bb28, 0: bb45, 1: bb29, otherwise: bb11];
    }

    bb28: {
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _101 = _42;
        StorageLive(_102);
        _102 = ((*_5).2: math::decimal::Decimal);
        _100 = <decimal::Decimal as common::TryDiv<decimal::Decimal>>::try_div(move _101, move _102) -> [return: bb51, unwind continue];
    }

    bb29: {
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = ((*_5).2: math::decimal::Decimal);
        StorageLive(_61);
        _61 = _42;
        _59 = <decimal::Decimal as common::TryDiv<decimal::Decimal>>::try_div(move _60, move _61) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_61);
        StorageDead(_60);
        _58 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _59) -> [return: bb31, unwind: bb161];
    }

    bb31: {
        StorageDead(_59);
        _62 = discriminant(_58);
        switchInt(move _62) -> [0: bb32, 1: bb33, otherwise: bb11];
    }

    bb32: {
        StorageLive(_66);
        _66 = ((_58 as Continue).0: math::decimal::Decimal);
        _57 = _66;
        StorageDead(_66);
        _288 = discriminant(_58);
        StorageDead(_58);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = ((*_4).2: math::decimal::Decimal);
        StorageLive(_71);
        _71 = _57;
        _69 = <decimal::Decimal as common::TryMul<decimal::Decimal>>::try_mul(move _70, move _71) -> [return: bb35, unwind continue];
    }

    bb33: {
        StorageLive(_63);
        _63 = move ((_58 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_65);
        _65 = move _63;
        _0 = <Result<CalculateLiquidationResult, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _65) -> [return: bb34, unwind: bb181];
    }

    bb34: {
        StorageDead(_65);
        StorageDead(_63);
        _366 = discriminant(_58);
        StorageDead(_58);
        goto -> bb156;
    }

    bb35: {
        StorageDead(_71);
        StorageDead(_70);
        _68 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _69) -> [return: bb36, unwind: bb161];
    }

    bb36: {
        StorageDead(_69);
        _72 = discriminant(_68);
        switchInt(move _72) -> [0: bb37, 1: bb38, otherwise: bb11];
    }

    bb37: {
        StorageLive(_76);
        _76 = ((_68 as Continue).0: math::decimal::Decimal);
        _67 = _76;
        StorageDead(_76);
        _34 = move _67;
        StorageDead(_67);
        _290 = discriminant(_68);
        StorageDead(_68);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _80 = &_34;
        _79 = decimal::Decimal::try_ceil_u64(move _80) -> [return: bb40, unwind continue];
    }

    bb38: {
        StorageLive(_73);
        _73 = move ((_68 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_75);
        _75 = move _73;
        _0 = <Result<CalculateLiquidationResult, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _75) -> [return: bb39, unwind: bb180];
    }

    bb39: {
        StorageDead(_75);
        StorageDead(_73);
        StorageDead(_67);
        _364 = discriminant(_68);
        StorageDead(_68);
        goto -> bb156;
    }

    bb40: {
        StorageDead(_80);
        _78 = <Result<u64, ProgramError> as Try>::branch(move _79) -> [return: bb41, unwind: bb161];
    }

    bb41: {
        StorageDead(_79);
        _81 = discriminant(_78);
        switchInt(move _81) -> [0: bb42, 1: bb43, otherwise: bb11];
    }

    bb42: {
        StorageLive(_85);
        _85 = ((_78 as Continue).0: u64);
        _77 = _85;
        StorageDead(_85);
        _35 = move _77;
        StorageDead(_77);
        _292 = discriminant(_78);
        StorageDead(_78);
        StorageLive(_86);
        _86 = ((*_5).1: u64);
        _36 = move _86;
        StorageDead(_86);
        _37 = const ();
        StorageDead(_57);
        goto -> bb77;
    }

    bb43: {
        StorageLive(_82);
        _82 = move ((_78 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_84);
        _84 = move _82;
        _0 = <Result<CalculateLiquidationResult, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _84) -> [return: bb44, unwind: bb179];
    }

    bb44: {
        StorageDead(_84);
        StorageDead(_82);
        StorageDead(_77);
        _362 = discriminant(_78);
        StorageDead(_78);
        goto -> bb156;
    }

    bb45: {
        StorageLive(_87);
        _87 = ((*_4).2: math::decimal::Decimal);
        _34 = move _87;
        StorageDead(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = &_34;
        _90 = decimal::Decimal::try_ceil_u64(move _91) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_91);
        _89 = <Result<u64, ProgramError> as Try>::branch(move _90) -> [return: bb47, unwind: bb161];
    }

    bb47: {
        StorageDead(_90);
        _92 = discriminant(_89);
        switchInt(move _92) -> [0: bb48, 1: bb49, otherwise: bb11];
    }

    bb48: {
        StorageLive(_96);
        _96 = ((_89 as Continue).0: u64);
        _88 = _96;
        StorageDead(_96);
        _35 = move _88;
        StorageDead(_88);
        _294 = discriminant(_89);
        StorageDead(_89);
        StorageLive(_97);
        _97 = ((*_5).1: u64);
        _36 = move _97;
        StorageDead(_97);
        _37 = const ();
        goto -> bb77;
    }

    bb49: {
        StorageLive(_93);
        _93 = move ((_89 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_95);
        _95 = move _93;
        _0 = <Result<CalculateLiquidationResult, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _95) -> [return: bb50, unwind: bb178];
    }

    bb50: {
        StorageDead(_95);
        StorageDead(_93);
        StorageDead(_88);
        _360 = discriminant(_89);
        StorageDead(_89);
        goto -> bb157;
    }

    bb51: {
        StorageDead(_102);
        StorageDead(_101);
        _99 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _100) -> [return: bb52, unwind: bb161];
    }

    bb52: {
        StorageDead(_100);
        _103 = discriminant(_99);
        switchInt(move _103) -> [0: bb53, 1: bb54, otherwise: bb11];
    }

    bb53: {
        StorageLive(_107);
        _107 = ((_99 as Continue).0: math::decimal::Decimal);
        _98 = _107;
        StorageDead(_107);
        _296 = discriminant(_99);
        StorageDead(_99);
        StorageLive(_108);
        _108 = ((*_4).2: math::decimal::Decimal);
        _34 = move _108;
        StorageDead(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _112 = &_34;
        _111 = decimal::Decimal::try_ceil_u64(move _112) -> [return: bb56, unwind continue];
    }

    bb54: {
        StorageLive(_104);
        _104 = move ((_99 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_106);
        _106 = move _104;
        _0 = <Result<CalculateLiquidationResult, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _106) -> [return: bb55, unwind: bb177];
    }

    bb55: {
        StorageDead(_106);
        StorageDead(_104);
        _358 = discriminant(_99);
        StorageDead(_99);
        goto -> bb155;
    }

    bb56: {
        StorageDead(_112);
        _110 = <Result<u64, ProgramError> as Try>::branch(move _111) -> [return: bb57, unwind: bb161];
    }

    bb57: {
        StorageDead(_111);
        _113 = discriminant(_110);
        switchInt(move _113) -> [0: bb58, 1: bb59, otherwise: bb11];
    }

    bb58: {
        StorageLive(_117);
        _117 = ((_110 as Continue).0: u64);
        _109 = _117;
        StorageDead(_117);
        _35 = move _109;
        StorageDead(_109);
        _298 = discriminant(_110);
        StorageDead(_110);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        _120 = _35;
        _119 = Eq(move _120, const 0_u64);
        switchInt(move _119) -> [0: bb64, otherwise: bb61];
    }

    bb59: {
        StorageLive(_114);
        _114 = move ((_110 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_116);
        _116 = move _114;
        _0 = <Result<CalculateLiquidationResult, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _116) -> [return: bb60, unwind: bb176];
    }

    bb60: {
        StorageDead(_116);
        StorageDead(_114);
        StorageDead(_109);
        _356 = discriminant(_110);
        StorageDead(_110);
        goto -> bb155;
    }

    bb61: {
        StorageDead(_120);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        _124 = const "repay amount is zero";
        _123 = &(*_124);
        _122 = solana_program::log::sol_log(move _123) -> [return: bb62, unwind continue];
    }

    bb62: {
        StorageDead(_123);
        StorageDead(_124);
        StorageDead(_122);
        StorageLive(_125);
        StorageLive(_126);
        _126 = LendingError::LiquidationTooSmall;
        _125 = <LendingError as Into<ProgramError>>::into(move _126) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_126);
        _0 = Result::<CalculateLiquidationResult, ProgramError>::Err(move _125);
        StorageDead(_125);
        StorageDead(_119);
        StorageDead(_118);
        goto -> bb155;
    }

    bb64: {
        StorageDead(_120);
        _118 = const ();
        StorageDead(_119);
        StorageDead(_118);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        _136 = ((*_5).1: u64);
        _135 = <decimal::Decimal as From<u64>>::from(move _136) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_136);
        StorageLive(_137);
        _137 = _98;
        _134 = <decimal::Decimal as common::TryMul<decimal::Decimal>>::try_mul(move _135, move _137) -> [return: bb66, unwind continue];
    }

    bb66: {
        StorageDead(_137);
        StorageDead(_135);
        _133 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _134) -> [return: bb67, unwind: bb161];
    }

    bb67: {
        _281 = const true;
        StorageDead(_134);
        _138 = discriminant(_133);
        switchInt(move _138) -> [0: bb68, 1: bb69, otherwise: bb11];
    }

    bb68: {
        StorageLive(_142);
        _142 = ((_133 as Continue).0: math::decimal::Decimal);
        _132 = _142;
        StorageDead(_142);
        _131 = &_132;
        _130 = decimal::Decimal::try_floor_u64(move _131) -> [return: bb71, unwind: bb175];
    }

    bb69: {
        StorageLive(_139);
        _139 = move ((_133 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_141);
        _141 = move _139;
        _0 = <Result<CalculateLiquidationResult, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _141) -> [return: bb70, unwind: bb175];
    }

    bb70: {
        StorageDead(_141);
        StorageDead(_139);
        StorageDead(_131);
        StorageDead(_130);
        StorageDead(_128);
        StorageDead(_127);
        goto -> bb154;
    }

    bb71: {
        StorageDead(_131);
        _129 = <Result<u64, ProgramError> as Try>::branch(move _130) -> [return: bb72, unwind: bb175];
    }

    bb72: {
        _283 = const true;
        StorageDead(_130);
        _143 = discriminant(_129);
        switchInt(move _143) -> [0: bb73, 1: bb74, otherwise: bb11];
    }

    bb73: {
        StorageLive(_147);
        _147 = ((_129 as Continue).0: u64);
        _128 = _147;
        StorageDead(_147);
        _127 = std::cmp::max::<u64>(move _128, const 1_u64) -> [return: bb76, unwind: bb174];
    }

    bb74: {
        StorageLive(_144);
        _144 = move ((_129 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_146);
        _146 = move _144;
        _0 = <Result<CalculateLiquidationResult, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _146) -> [return: bb75, unwind: bb174];
    }

    bb75: {
        StorageDead(_146);
        StorageDead(_144);
        StorageDead(_128);
        StorageDead(_127);
        _352 = discriminant(_129);
        goto -> bb154;
    }

    bb76: {
        StorageDead(_128);
        _36 = move _127;
        StorageDead(_127);
        _300 = discriminant(_129);
        _302 = discriminant(_133);
        _281 = const false;
        StorageDead(_133);
        StorageDead(_132);
        _283 = const false;
        StorageDead(_129);
        _37 = const ();
        StorageDead(_98);
        goto -> bb77;
    }

    bb77: {
        StorageDead(_42);
        StorageDead(_55);
        StorageDead(_52);
        goto -> bb146;
    }

    bb78: {
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        _152 = &(*_3);
        StorageLive(_153);
        _153 = &(*_4);
        _151 = obligation::Obligation::max_liquidation_amount(move _152, move _153) -> [return: bb79, unwind continue];
    }

    bb79: {
        StorageDead(_153);
        StorageDead(_152);
        _150 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _151) -> [return: bb80, unwind: bb161];
    }

    bb80: {
        _282 = const true;
        StorageDead(_151);
        _154 = discriminant(_150);
        switchInt(move _154) -> [0: bb81, 1: bb82, otherwise: bb11];
    }

    bb81: {
        StorageLive(_158);
        _158 = ((_150 as Continue).0: math::decimal::Decimal);
        _149 = _158;
        StorageDead(_158);
        StorageLive(_159);
        _159 = _28;
        _148 = <decimal::Decimal as Ord>::min(move _149, move _159) -> [return: bb84, unwind: bb173];
    }

    bb82: {
        StorageLive(_155);
        _155 = move ((_150 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_157);
        _157 = move _155;
        _0 = <Result<CalculateLiquidationResult, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _157) -> [return: bb83, unwind: bb173];
    }

    bb83: {
        StorageDead(_157);
        StorageDead(_155);
        StorageDead(_149);
        _350 = discriminant(_150);
        _282 = const false;
        StorageDead(_150);
        goto -> bb153;
    }

    bb84: {
        StorageDead(_159);
        StorageDead(_149);
        _304 = discriminant(_150);
        _282 = const false;
        StorageDead(_150);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        _163 = _148;
        StorageLive(_164);
        _164 = ((*_4).2: math::decimal::Decimal);
        _162 = <decimal::Decimal as common::TryDiv<decimal::Decimal>>::try_div(move _163, move _164) -> [return: bb85, unwind continue];
    }

    bb85: {
        StorageDead(_164);
        StorageDead(_163);
        _161 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _162) -> [return: bb86, unwind: bb161];
    }

    bb86: {
        StorageDead(_162);
        _165 = discriminant(_161);
        switchInt(move _165) -> [0: bb87, 1: bb88, otherwise: bb11];
    }

    bb87: {
        StorageLive(_169);
        _169 = ((_161 as Continue).0: math::decimal::Decimal);
        _160 = _169;
        StorageDead(_169);
        _306 = discriminant(_161);
        StorageDead(_161);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        _176 = ((*_4).3: math::decimal::Decimal);
        StorageLive(_177);
        _177 = _160;
        _175 = <decimal::Decimal as common::TryMul<decimal::Decimal>>::try_mul(move _176, move _177) -> [return: bb90, unwind continue];
    }

    bb88: {
        StorageLive(_166);
        _166 = move ((_161 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_168);
        _168 = move _166;
        _0 = <Result<CalculateLiquidationResult, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _168) -> [return: bb89, unwind: bb172];
    }

    bb89: {
        StorageDead(_168);
        StorageDead(_166);
        _348 = discriminant(_161);
        StorageDead(_161);
        goto -> bb152;
    }

    bb90: {
        StorageDead(_177);
        StorageDead(_176);
        _174 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _175) -> [return: bb91, unwind: bb161];
    }

    bb91: {
        _280 = const true;
        StorageDead(_175);
        _178 = discriminant(_174);
        switchInt(move _178) -> [0: bb92, 1: bb93, otherwise: bb11];
    }

    bb92: {
        StorageLive(_182);
        _182 = ((_174 as Continue).0: math::decimal::Decimal);
        _173 = _182;
        StorageDead(_182);
        StorageLive(_183);
        _183 = _18;
        _172 = <decimal::Decimal as common::TryMul<decimal::Decimal>>::try_mul(move _173, move _183) -> [return: bb95, unwind: bb171];
    }

    bb93: {
        StorageLive(_179);
        _179 = move ((_174 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_181);
        _181 = move _179;
        _0 = <Result<CalculateLiquidationResult, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _181) -> [return: bb94, unwind: bb171];
    }

    bb94: {
        StorageDead(_181);
        StorageDead(_179);
        StorageDead(_173);
        StorageDead(_172);
        goto -> bb151;
    }

    bb95: {
        StorageDead(_183);
        StorageDead(_173);
        _171 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _172) -> [return: bb96, unwind: bb171];
    }

    bb96: {
        StorageDead(_172);
        _184 = discriminant(_171);
        switchInt(move _184) -> [0: bb97, 1: bb98, otherwise: bb11];
    }

    bb97: {
        StorageLive(_188);
        _188 = ((_171 as Continue).0: math::decimal::Decimal);
        _170 = _188;
        StorageDead(_188);
        _308 = discriminant(_171);
        _310 = discriminant(_174);
        _280 = const false;
        StorageDead(_174);
        StorageDead(_171);
        StorageLive(_189);
        StorageLive(_190);
        _190 = &_170;
        StorageLive(_191);
        StorageLive(_192);
        _192 = &((*_5).2: math::decimal::Decimal);
        _191 = &(*_192);
        _189 = <decimal::Decimal as Ord>::cmp(move _190, move _191) -> [return: bb100, unwind continue];
    }

    bb98: {
        StorageLive(_185);
        _185 = move ((_171 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_187);
        _187 = move _185;
        _0 = <Result<CalculateLiquidationResult, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _187) -> [return: bb99, unwind: bb170];
    }

    bb99: {
        StorageDead(_187);
        StorageDead(_185);
        _344 = discriminant(_171);
        goto -> bb151;
    }

    bb100: {
        StorageDead(_191);
        StorageDead(_190);
        _193 = discriminant(_189);
        switchInt(move _193) -> [255: bb101, 0: bb118, 1: bb102, otherwise: bb11];
    }

    bb101: {
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        _238 = _170;
        StorageLive(_239);
        _239 = ((*_5).2: math::decimal::Decimal);
        _237 = <decimal::Decimal as common::TryDiv<decimal::Decimal>>::try_div(move _238, move _239) -> [return: bb124, unwind continue];
    }

    bb102: {
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        _197 = ((*_5).2: math::decimal::Decimal);
        StorageLive(_198);
        _198 = _170;
        _196 = <decimal::Decimal as common::TryDiv<decimal::Decimal>>::try_div(move _197, move _198) -> [return: bb103, unwind continue];
    }

    bb103: {
        StorageDead(_198);
        StorageDead(_197);
        _195 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _196) -> [return: bb104, unwind: bb161];
    }

    bb104: {
        StorageDead(_196);
        _199 = discriminant(_195);
        switchInt(move _199) -> [0: bb105, 1: bb106, otherwise: bb11];
    }

    bb105: {
        StorageLive(_203);
        _203 = ((_195 as Continue).0: math::decimal::Decimal);
        _194 = _203;
        StorageDead(_203);
        _312 = discriminant(_195);
        StorageDead(_195);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        _207 = _148;
        StorageLive(_208);
        _208 = _194;
        _206 = <decimal::Decimal as common::TryMul<decimal::Decimal>>::try_mul(move _207, move _208) -> [return: bb108, unwind continue];
    }

    bb106: {
        StorageLive(_200);
        _200 = move ((_195 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_202);
        _202 = move _200;
        _0 = <Result<CalculateLiquidationResult, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _202) -> [return: bb107, unwind: bb169];
    }

    bb107: {
        StorageDead(_202);
        StorageDead(_200);
        _342 = discriminant(_195);
        StorageDead(_195);
        goto -> bb149;
    }

    bb108: {
        StorageDead(_208);
        StorageDead(_207);
        _205 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _206) -> [return: bb109, unwind: bb161];
    }

    bb109: {
        StorageDead(_206);
        _209 = discriminant(_205);
        switchInt(move _209) -> [0: bb110, 1: bb111, otherwise: bb11];
    }

    bb110: {
        StorageLive(_213);
        _213 = ((_205 as Continue).0: math::decimal::Decimal);
        _204 = _213;
        StorageDead(_213);
        _34 = move _204;
        StorageDead(_204);
        _314 = discriminant(_205);
        StorageDead(_205);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        _217 = &_34;
        _216 = decimal::Decimal::try_ceil_u64(move _217) -> [return: bb113, unwind continue];
    }

    bb111: {
        StorageLive(_210);
        _210 = move ((_205 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_212);
        _212 = move _210;
        _0 = <Result<CalculateLiquidationResult, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _212) -> [return: bb112, unwind: bb168];
    }

    bb112: {
        StorageDead(_212);
        StorageDead(_210);
        StorageDead(_204);
        _340 = discriminant(_205);
        StorageDead(_205);
        goto -> bb149;
    }

    bb113: {
        StorageDead(_217);
        _215 = <Result<u64, ProgramError> as Try>::branch(move _216) -> [return: bb114, unwind: bb161];
    }

    bb114: {
        StorageDead(_216);
        _218 = discriminant(_215);
        switchInt(move _218) -> [0: bb115, 1: bb116, otherwise: bb11];
    }

    bb115: {
        StorageLive(_222);
        _222 = ((_215 as Continue).0: u64);
        _214 = _222;
        StorageDead(_222);
        _35 = move _214;
        StorageDead(_214);
        _316 = discriminant(_215);
        StorageDead(_215);
        StorageLive(_223);
        _223 = ((*_5).1: u64);
        _36 = move _223;
        StorageDead(_223);
        _37 = const ();
        StorageDead(_194);
        goto -> bb145;
    }

    bb116: {
        StorageLive(_219);
        _219 = move ((_215 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_221);
        _221 = move _219;
        _0 = <Result<CalculateLiquidationResult, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _221) -> [return: bb117, unwind: bb167];
    }

    bb117: {
        StorageDead(_221);
        StorageDead(_219);
        StorageDead(_214);
        _338 = discriminant(_215);
        StorageDead(_215);
        goto -> bb149;
    }

    bb118: {
        StorageLive(_224);
        _224 = _148;
        _34 = move _224;
        StorageDead(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        _228 = &_34;
        _227 = decimal::Decimal::try_ceil_u64(move _228) -> [return: bb119, unwind continue];
    }

    bb119: {
        StorageDead(_228);
        _226 = <Result<u64, ProgramError> as Try>::branch(move _227) -> [return: bb120, unwind: bb161];
    }

    bb120: {
        StorageDead(_227);
        _229 = discriminant(_226);
        switchInt(move _229) -> [0: bb121, 1: bb122, otherwise: bb11];
    }

    bb121: {
        StorageLive(_233);
        _233 = ((_226 as Continue).0: u64);
        _225 = _233;
        StorageDead(_233);
        _35 = move _225;
        StorageDead(_225);
        _318 = discriminant(_226);
        StorageDead(_226);
        StorageLive(_234);
        _234 = ((*_5).1: u64);
        _36 = move _234;
        StorageDead(_234);
        _37 = const ();
        goto -> bb145;
    }

    bb122: {
        StorageLive(_230);
        _230 = move ((_226 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_232);
        _232 = move _230;
        _0 = <Result<CalculateLiquidationResult, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _232) -> [return: bb123, unwind: bb166];
    }

    bb123: {
        StorageDead(_232);
        StorageDead(_230);
        StorageDead(_225);
        _336 = discriminant(_226);
        StorageDead(_226);
        goto -> bb150;
    }

    bb124: {
        StorageDead(_239);
        StorageDead(_238);
        _236 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _237) -> [return: bb125, unwind: bb161];
    }

    bb125: {
        StorageDead(_237);
        _240 = discriminant(_236);
        switchInt(move _240) -> [0: bb126, 1: bb127, otherwise: bb11];
    }

    bb126: {
        StorageLive(_244);
        _244 = ((_236 as Continue).0: math::decimal::Decimal);
        _235 = _244;
        StorageDead(_244);
        _320 = discriminant(_236);
        StorageDead(_236);
        StorageLive(_245);
        _245 = _148;
        _34 = move _245;
        StorageDead(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        _249 = &_34;
        _248 = decimal::Decimal::try_ceil_u64(move _249) -> [return: bb129, unwind continue];
    }

    bb127: {
        StorageLive(_241);
        _241 = move ((_236 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_243);
        _243 = move _241;
        _0 = <Result<CalculateLiquidationResult, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _243) -> [return: bb128, unwind: bb165];
    }

    bb128: {
        StorageDead(_243);
        StorageDead(_241);
        _334 = discriminant(_236);
        StorageDead(_236);
        goto -> bb148;
    }

    bb129: {
        StorageDead(_249);
        _247 = <Result<u64, ProgramError> as Try>::branch(move _248) -> [return: bb130, unwind: bb161];
    }

    bb130: {
        StorageDead(_248);
        _250 = discriminant(_247);
        switchInt(move _250) -> [0: bb131, 1: bb132, otherwise: bb11];
    }

    bb131: {
        StorageLive(_254);
        _254 = ((_247 as Continue).0: u64);
        _246 = _254;
        StorageDead(_254);
        _35 = move _246;
        StorageDead(_246);
        _322 = discriminant(_247);
        StorageDead(_247);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        _263 = ((*_5).1: u64);
        _262 = <decimal::Decimal as From<u64>>::from(move _263) -> [return: bb134, unwind continue];
    }

    bb132: {
        StorageLive(_251);
        _251 = move ((_247 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_253);
        _253 = move _251;
        _0 = <Result<CalculateLiquidationResult, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _253) -> [return: bb133, unwind: bb164];
    }

    bb133: {
        StorageDead(_253);
        StorageDead(_251);
        StorageDead(_246);
        _332 = discriminant(_247);
        StorageDead(_247);
        goto -> bb148;
    }

    bb134: {
        StorageDead(_263);
        StorageLive(_264);
        _264 = _235;
        _261 = <decimal::Decimal as common::TryMul<decimal::Decimal>>::try_mul(move _262, move _264) -> [return: bb135, unwind continue];
    }

    bb135: {
        StorageDead(_264);
        StorageDead(_262);
        _260 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _261) -> [return: bb136, unwind: bb161];
    }

    bb136: {
        _279 = const true;
        StorageDead(_261);
        _265 = discriminant(_260);
        switchInt(move _265) -> [0: bb137, 1: bb138, otherwise: bb11];
    }

    bb137: {
        StorageLive(_269);
        _269 = ((_260 as Continue).0: math::decimal::Decimal);
        _259 = _269;
        StorageDead(_269);
        _258 = &_259;
        _257 = decimal::Decimal::try_floor_u64(move _258) -> [return: bb140, unwind: bb163];
    }

    bb138: {
        StorageLive(_266);
        _266 = move ((_260 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_268);
        _268 = move _266;
        _0 = <Result<CalculateLiquidationResult, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _268) -> [return: bb139, unwind: bb163];
    }

    bb139: {
        StorageDead(_268);
        StorageDead(_266);
        StorageDead(_258);
        StorageDead(_257);
        StorageDead(_255);
        goto -> bb147;
    }

    bb140: {
        StorageDead(_258);
        _256 = <Result<u64, ProgramError> as Try>::branch(move _257) -> [return: bb141, unwind: bb163];
    }

    bb141: {
        StorageDead(_257);
        _270 = discriminant(_256);
        switchInt(move _270) -> [0: bb142, 1: bb143, otherwise: bb11];
    }

    bb142: {
        StorageLive(_274);
        _274 = ((_256 as Continue).0: u64);
        _255 = _274;
        StorageDead(_274);
        _36 = move _255;
        StorageDead(_255);
        _324 = discriminant(_256);
        _326 = discriminant(_260);
        _279 = const false;
        StorageDead(_260);
        StorageDead(_259);
        StorageDead(_256);
        _37 = const ();
        StorageDead(_235);
        goto -> bb145;
    }

    bb143: {
        StorageLive(_271);
        _271 = move ((_256 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_273);
        _273 = move _271;
        _0 = <Result<CalculateLiquidationResult, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _273) -> [return: bb144, unwind: bb162];
    }

    bb144: {
        StorageDead(_273);
        StorageDead(_271);
        StorageDead(_255);
        _328 = discriminant(_256);
        goto -> bb147;
    }

    bb145: {
        StorageDead(_170);
        StorageDead(_160);
        StorageDead(_148);
        StorageDead(_192);
        StorageDead(_189);
        goto -> bb146;
    }

    bb146: {
        StorageDead(_38);
        StorageDead(_37);
        StorageLive(_275);
        StorageLive(_276);
        _276 = _34;
        StorageLive(_277);
        _277 = _35;
        StorageLive(_278);
        _278 = _36;
        _275 = CalculateLiquidationResult { settle_amount: move _276, repay_amount: move _277, withdraw_amount: move _278 };
        StorageDead(_278);
        StorageDead(_277);
        StorageDead(_276);
        _0 = Result::<CalculateLiquidationResult, ProgramError>::Ok(move _275);
        StorageDead(_275);
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_28);
        StorageDead(_18);
        goto -> bb160;
    }

    bb147: {
        _330 = discriminant(_260);
        _279 = const false;
        StorageDead(_260);
        StorageDead(_259);
        StorageDead(_256);
        goto -> bb148;
    }

    bb148: {
        StorageDead(_235);
        goto -> bb150;
    }

    bb149: {
        StorageDead(_194);
        goto -> bb150;
    }

    bb150: {
        StorageDead(_170);
        StorageDead(_160);
        StorageDead(_148);
        StorageDead(_192);
        StorageDead(_189);
        goto -> bb158;
    }

    bb151: {
        _346 = discriminant(_174);
        _280 = const false;
        StorageDead(_174);
        StorageDead(_171);
        StorageDead(_170);
        goto -> bb152;
    }

    bb152: {
        StorageDead(_160);
        goto -> bb153;
    }

    bb153: {
        StorageDead(_148);
        goto -> bb158;
    }

    bb154: {
        _354 = discriminant(_133);
        _281 = const false;
        StorageDead(_133);
        StorageDead(_132);
        _283 = const false;
        StorageDead(_129);
        goto -> bb155;
    }

    bb155: {
        StorageDead(_98);
        goto -> bb157;
    }

    bb156: {
        StorageDead(_57);
        goto -> bb157;
    }

    bb157: {
        StorageDead(_42);
        StorageDead(_55);
        StorageDead(_52);
        goto -> bb158;
    }

    bb158: {
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_28);
        goto -> bb159;
    }

    bb159: {
        StorageDead(_18);
        goto -> bb160;
    }

    bb160: {
        return;
    }

    bb161 (cleanup): {
        resume;
    }

    bb162 (cleanup): {
        _372 = discriminant(_256);
        goto -> bb163;
    }

    bb163 (cleanup): {
        _373 = discriminant(_260);
        goto -> bb161;
    }

    bb164 (cleanup): {
        _374 = discriminant(_247);
        goto -> bb161;
    }

    bb165 (cleanup): {
        _375 = discriminant(_236);
        goto -> bb161;
    }

    bb166 (cleanup): {
        _376 = discriminant(_226);
        goto -> bb161;
    }

    bb167 (cleanup): {
        _377 = discriminant(_215);
        goto -> bb161;
    }

    bb168 (cleanup): {
        _378 = discriminant(_205);
        goto -> bb161;
    }

    bb169 (cleanup): {
        _379 = discriminant(_195);
        goto -> bb161;
    }

    bb170 (cleanup): {
        _380 = discriminant(_171);
        goto -> bb171;
    }

    bb171 (cleanup): {
        _381 = discriminant(_174);
        goto -> bb161;
    }

    bb172 (cleanup): {
        _382 = discriminant(_161);
        goto -> bb161;
    }

    bb173 (cleanup): {
        _383 = discriminant(_150);
        goto -> bb161;
    }

    bb174 (cleanup): {
        _384 = discriminant(_129);
        goto -> bb175;
    }

    bb175 (cleanup): {
        _385 = discriminant(_133);
        goto -> bb161;
    }

    bb176 (cleanup): {
        _386 = discriminant(_110);
        goto -> bb161;
    }

    bb177 (cleanup): {
        _387 = discriminant(_99);
        goto -> bb161;
    }

    bb178 (cleanup): {
        _388 = discriminant(_89);
        goto -> bb161;
    }

    bb179 (cleanup): {
        _389 = discriminant(_78);
        goto -> bb161;
    }

    bb180 (cleanup): {
        _390 = discriminant(_68);
        goto -> bb161;
    }

    bb181 (cleanup): {
        _391 = discriminant(_58);
        goto -> bb161;
    }

    bb182 (cleanup): {
        _392 = discriminant(_43);
        goto -> bb161;
    }

    bb183 (cleanup): {
        _393 = discriminant(_19);
        goto -> bb161;
    }
}
