// MIR for `decimal::<impl at token-lending\sdk\src\math\decimal.rs:111:1: 111:30>::fmt` before PreCodegen

fn decimal::<impl at token-lending\sdk\src\math\decimal.rs:111:1: 111:30>::fmt(_1: &decimal::Decimal, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: std::string::String;
    let mut _4: &math::decimal::U192;
    let _5: ();
    let mut _6: bool;
    let mut _7: usize;
    let mut _8: &std::string::String;
    let _9: ();
    let mut _10: &mut std::string::String;
    let mut _11: &str;
    let _12: &str;
    let mut _13: &std::string::String;
    let _14: &std::string::String;
    let _15: std::string::String;
    let mut _16: &[&str];
    let _17: &[&str];
    let mut _18: &std::vec::Vec<&str>;
    let _19: std::vec::Vec<&str>;
    let mut _20: usize;
    let mut _21: usize;
    let mut _22: &std::string::String;
    let mut _23: (usize, bool);
    let mut _24: &str;
    let _25: &str;
    let _26: ();
    let mut _27: &mut std::string::String;
    let mut _28: &str;
    let _29: &str;
    let _30: ();
    let mut _31: &mut std::string::String;
    let mut _32: usize;
    let mut _33: usize;
    let mut _34: &std::string::String;
    let mut _35: (usize, bool);
    let mut _36: &mut std::fmt::Formatter<'_>;
    let mut _37: &str;
    let _38: &str;
    let mut _39: &std::string::String;
    let _40: &std::string::String;
    scope 1 {
        debug scaled_val => _3;
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = &((*_1).0: math::decimal::U192);
        _3 = <U192 as ToString>::to_string(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &_3;
        _7 = String::len(move _8) -> [return: bb2, unwind: bb24];
    }

    bb2: {
        StorageDead(_8);
        _6 = Le(move _7, const _);
        switchInt(move _6) -> [0: bb14, otherwise: bb3];
    }

    bb3: {
        StorageDead(_7);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &mut _3;
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = &_3;
        _21 = String::len(move _22) -> [return: bb4, unwind: bb24];
    }

    bb4: {
        StorageDead(_22);
        _23 = CheckedSub(const _, _21);
        assert(!move (_23.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, move _21) -> [success: bb5, unwind: bb24];
    }

    bb5: {
        _20 = move (_23.0: usize);
        StorageDead(_21);
        _19 = from_elem::<&str>(const "0", move _20) -> [return: bb6, unwind: bb24];
    }

    bb6: {
        _18 = &_19;
        _17 = <Vec<&str> as Deref>::deref(move _18) -> [return: bb7, unwind: bb23];
    }

    bb7: {
        _16 = &(*_17);
        StorageDead(_20);
        StorageDead(_18);
        StorageLive(_24);
        StorageLive(_25);
        _25 = const "";
        _24 = &(*_25);
        _15 = std::slice::<impl [&str]>::join::<&str>(move _16, move _24) -> [return: bb8, unwind: bb23];
    }

    bb8: {
        StorageDead(_24);
        StorageDead(_16);
        _14 = &_15;
        _13 = &(*_14);
        _12 = <String as Deref>::deref(move _13) -> [return: bb9, unwind: bb22];
    }

    bb9: {
        _11 = &(*_12);
        StorageDead(_13);
        _9 = String::insert_str(move _10, const 0_usize, move _11) -> [return: bb10, unwind: bb22];
    }

    bb10: {
        StorageDead(_11);
        StorageDead(_10);
        drop(_15) -> [return: bb11, unwind: bb23];
    }

    bb11: {
        StorageDead(_25);
        drop(_19) -> [return: bb12, unwind: bb24];
    }

    bb12: {
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_9);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &mut _3;
        StorageLive(_28);
        StorageLive(_29);
        _29 = const "0.";
        _28 = &(*_29);
        _26 = String::insert_str(move _27, const 0_usize, move _28) -> [return: bb13, unwind: bb24];
    }

    bb13: {
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_29);
        StorageDead(_26);
        _5 = const ();
        goto -> bb18;
    }

    bb14: {
        StorageDead(_7);
        StorageLive(_30);
        StorageLive(_31);
        _31 = &mut _3;
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &_3;
        _33 = String::len(move _34) -> [return: bb15, unwind: bb24];
    }

    bb15: {
        StorageDead(_34);
        _35 = CheckedSub(_33, const _);
        assert(!move (_35.1: bool), "attempt to compute `{} - {}`, which would overflow", move _33, const _) -> [success: bb16, unwind: bb24];
    }

    bb16: {
        _32 = move (_35.0: usize);
        StorageDead(_33);
        _30 = String::insert(move _31, move _32, const '.') -> [return: bb17, unwind: bb24];
    }

    bb17: {
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_30);
        _5 = const ();
        goto -> bb18;
    }

    bb18: {
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_36);
        _36 = &mut (*_2);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &_3;
        _39 = &(*_40);
        _38 = <String as Deref>::deref(move _39) -> [return: bb19, unwind: bb24];
    }

    bb19: {
        _37 = &(*_38);
        StorageDead(_39);
        _0 = Formatter::<'_>::write_str(move _36, move _37) -> [return: bb20, unwind: bb24];
    }

    bb20: {
        StorageDead(_37);
        StorageDead(_36);
        drop(_3) -> [return: bb21, unwind: bb25];
    }

    bb21: {
        StorageDead(_3);
        StorageDead(_40);
        StorageDead(_38);
        return;
    }

    bb22 (cleanup): {
        drop(_15) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        drop(_19) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_3) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        resume;
    }
}
