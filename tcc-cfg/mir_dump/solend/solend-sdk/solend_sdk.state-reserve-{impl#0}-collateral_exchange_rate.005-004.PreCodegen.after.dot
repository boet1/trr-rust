digraph Mir_0_466 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn reserve::Reserve::collateral_exchange_rate(_1: &amp;ReErased state::reserve::Reserve) -&gt; std::result::Result&lt;state::reserve::CollateralExchangeRate, solana_program::program_error::ProgramError&gt;<br align="left"/>let _2: math::decimal::Decimal;<br align="left"/>let mut _3: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;, math::decimal::Decimal&gt;;<br align="left"/>let mut _4: std::result::Result&lt;math::decimal::Decimal, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _5: &amp;ReErased state::reserve::ReserveLiquidity;<br align="left"/>let mut _6: isize;<br align="left"/>let _7: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _8: !;<br align="left"/>let mut _9: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let _10: math::decimal::Decimal;<br align="left"/>let mut _11: &amp;ReErased state::reserve::ReserveCollateral;<br align="left"/>let mut _12: math::decimal::Decimal;<br align="left"/>let mut _13: isize;<br align="left"/>let mut _14: isize;<br align="left"/>let mut _15: isize;<br align="left"/>let mut _16: isize;<br align="left"/>let mut _17: isize;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug total_liquidity =&gt; _2;<br align="left"/>debug residual =&gt; _7;<br align="left"/>debug val =&gt; _10;<br align="left"/>>;
    bb0__0_466 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = &amp;((*_1).3: state::reserve::ReserveLiquidity)<br/></td></tr><tr><td align="left">_4 = ReserveLiquidity::total_supply(move _5)</td></tr></table>>];
    bb1__0_466 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/></td></tr><tr><td align="left">_3 = &lt;Result&lt;decimal::Decimal, ProgramError&gt; as Try&gt;::branch(move _4)</td></tr></table>>];
    bb2__0_466 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>_6 = discriminant(_3)<br/></td></tr><tr><td align="left">switchInt(move _6)</td></tr></table>>];
    bb3__0_466 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_10)<br/>_10 = ((_3 as Continue).0: math::decimal::Decimal)<br/>_2 = _10<br/>StorageDead(_10)<br/>_13 = discriminant(_3)<br/>StorageDead(_3)<br/>StorageLive(_11)<br/>_11 = &amp;((*_1).4: state::reserve::ReserveCollateral)<br/>StorageLive(_12)<br/>_12 = _2<br/></td></tr><tr><td align="left">_0 = ReserveCollateral::exchange_rate(move _11, move _12)</td></tr></table>>];
    bb4__0_466 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_466 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_7)<br/>_7 = move ((_3 as Break).0: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;)<br/>StorageLive(_9)<br/>_9 = move _7<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;CollateralExchangeRate, ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, ProgramError&gt;&gt;&gt;::from_residual(move _9)</td></tr></table>>];
    bb6__0_466 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_7)<br/>_15 = discriminant(_3)<br/>StorageDead(_3)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_466 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_11)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_466 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">return</td></tr></table>>];
    bb9__0_466 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">9 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb10__0_466 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">10 (cleanup)</td></tr><tr><td align="left" balign="left">_17 = discriminant(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_466 -> bb1__0_466 [label="return"];
    bb1__0_466 -> bb2__0_466 [label="return"];
    bb1__0_466 -> bb9__0_466 [label="unwind"];
    bb2__0_466 -> bb3__0_466 [label="0"];
    bb2__0_466 -> bb5__0_466 [label="1"];
    bb2__0_466 -> bb4__0_466 [label="otherwise"];
    bb3__0_466 -> bb7__0_466 [label="return"];
    bb5__0_466 -> bb6__0_466 [label="return"];
    bb5__0_466 -> bb10__0_466 [label="unwind"];
    bb6__0_466 -> bb8__0_466 [label=""];
    bb7__0_466 -> bb8__0_466 [label=""];
    bb10__0_466 -> bb9__0_466 [label=""];
}
