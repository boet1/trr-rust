// MIR for `decimal::<impl at token-lending\sdk\src\math\decimal.rs:32:1: 32:13>::try_ceil_u64` after PreCodegen

fn decimal::<impl at token-lending\sdk\src\math\decimal.rs:32:1: 32:13>::try_ceil_u64(_1: &decimal::Decimal) -> Result<u64, ProgramError> {
    debug self => _1;
    let mut _0: std::result::Result<u64, solana_program::program_error::ProgramError>;
    let _2: math::decimal::U192;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::LendingError>, math::decimal::U192>;
    let mut _4: std::result::Result<math::decimal::U192, error::LendingError>;
    let mut _5: std::option::Option<math::decimal::U192>;
    let mut _6: math::decimal::U192;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::LendingError>, math::decimal::U192>;
    let mut _8: std::result::Result<math::decimal::U192, error::LendingError>;
    let mut _9: std::option::Option<math::decimal::U192>;
    let mut _10: math::decimal::U192;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::LendingError>, math::decimal::U192>;
    let mut _12: std::result::Result<math::decimal::U192, error::LendingError>;
    let mut _13: std::option::Option<math::decimal::U192>;
    let mut _14: math::decimal::U192;
    let mut _15: math::decimal::U192;
    let mut _16: error::LendingError;
    let mut _17: isize;
    let _18: std::result::Result<std::convert::Infallible, error::LendingError>;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, error::LendingError>;
    let _21: math::decimal::U192;
    let mut _22: math::decimal::U192;
    let mut _23: error::LendingError;
    let mut _24: isize;
    let _25: std::result::Result<std::convert::Infallible, error::LendingError>;
    let mut _26: !;
    let mut _27: std::result::Result<std::convert::Infallible, error::LendingError>;
    let _28: math::decimal::U192;
    let mut _29: math::decimal::U192;
    let mut _30: error::LendingError;
    let mut _31: isize;
    let _32: std::result::Result<std::convert::Infallible, error::LendingError>;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, error::LendingError>;
    let _35: math::decimal::U192;
    let mut _36: u64;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::LendingError>, u64>;
    let mut _38: std::result::Result<u64, error::LendingError>;
    let mut _39: std::result::Result<u64, &str>;
    let mut _40: math::decimal::U192;
    let mut _41: {closure@token-lending\sdk\src\math\decimal.rs:98:44: 98:47};
    let mut _42: isize;
    let mut _44: !;
    let mut _45: std::result::Result<std::convert::Infallible, error::LendingError>;
    scope 1 {
        debug ceil_val => _2;
        let _43: std::result::Result<std::convert::Infallible, error::LendingError>;
        let _46: u64;
        scope 14 {
            debug residual => _43;
            scope 15 {
            }
        }
        scope 16 {
            debug val => _46;
            scope 17 {
            }
        }
    }
    scope 2 {
        debug residual => _18;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _21;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _25;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _28;
        scope 9 {
        }
    }
    scope 10 {
        debug residual => _32;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _35;
        scope 13 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = decimal::Decimal::wad() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_15);
        _15 = <U192 as From<u64>>::from(const 1_u64) -> [return: bb2, unwind continue];
    }

    bb2: {
        _13 = U192::checked_sub(move _14, move _15) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_16);
        _16 = LendingError::MathOverflow;
        _12 = Option::<U192>::ok_or::<LendingError>(move _13, move _16) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_16);
        StorageDead(_13);
        _11 = <Result<U192, LendingError> as Try>::branch(move _12) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_12);
        _17 = discriminant(_11);
        switchInt(move _17) -> [0: bb6, 1: bb8, otherwise: bb7];
    }

    bb6: {
        StorageLive(_21);
        _21 = ((_11 as Continue).0: math::decimal::U192);
        _10 = _21;
        StorageDead(_21);
        StorageLive(_22);
        _22 = ((*_1).0: math::decimal::U192);
        _9 = U192::checked_add(move _10, move _22) -> [return: bb10, unwind continue];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        StorageLive(_18);
        _18 = move ((_11 as Break).0: std::result::Result<std::convert::Infallible, error::LendingError>);
        StorageLive(_20);
        _20 = move _18;
        _0 = <Result<u64, ProgramError> as FromResidual<Result<Infallible, LendingError>>>::from_residual(move _20) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb29;
    }

    bb10: {
        StorageDead(_22);
        StorageDead(_10);
        StorageLive(_23);
        _23 = LendingError::MathOverflow;
        _8 = Option::<U192>::ok_or::<LendingError>(move _9, move _23) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_23);
        StorageDead(_9);
        _7 = <Result<U192, LendingError> as Try>::branch(move _8) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_8);
        _24 = discriminant(_7);
        switchInt(move _24) -> [0: bb13, 1: bb14, otherwise: bb7];
    }

    bb13: {
        StorageLive(_28);
        _28 = ((_7 as Continue).0: math::decimal::U192);
        _6 = _28;
        StorageDead(_28);
        StorageLive(_29);
        _29 = decimal::Decimal::wad() -> [return: bb16, unwind continue];
    }

    bb14: {
        StorageLive(_25);
        _25 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::LendingError>);
        StorageLive(_27);
        _27 = move _25;
        _0 = <Result<u64, ProgramError> as FromResidual<Result<Infallible, LendingError>>>::from_residual(move _27) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_27);
        StorageDead(_25);
        goto -> bb29;
    }

    bb16: {
        _5 = U192::checked_div(move _6, move _29) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_29);
        StorageDead(_6);
        StorageLive(_30);
        _30 = LendingError::MathOverflow;
        _4 = Option::<U192>::ok_or::<LendingError>(move _5, move _30) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_30);
        StorageDead(_5);
        _3 = <Result<U192, LendingError> as Try>::branch(move _4) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_4);
        _31 = discriminant(_3);
        switchInt(move _31) -> [0: bb20, 1: bb21, otherwise: bb7];
    }

    bb20: {
        StorageLive(_35);
        _35 = ((_3 as Continue).0: math::decimal::U192);
        _2 = _35;
        StorageDead(_35);
        StorageDead(_11);
        StorageDead(_7);
        StorageDead(_3);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = _2;
        _39 = <u64 as TryFrom<U192>>::try_from(move _40) -> [return: bb23, unwind continue];
    }

    bb21: {
        StorageLive(_32);
        _32 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, error::LendingError>);
        StorageLive(_34);
        _34 = move _32;
        _0 = <Result<u64, ProgramError> as FromResidual<Result<Infallible, LendingError>>>::from_residual(move _34) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_34);
        StorageDead(_32);
        goto -> bb30;
    }

    bb23: {
        StorageDead(_40);
        StorageLive(_41);
        _41 = {closure@token-lending\sdk\src\math\decimal.rs:98:44: 98:47};
        _38 = Result::<u64, &str>::map_err::<LendingError, {closure@token-lending\sdk\src\math\decimal.rs:98:44: 98:47}>(move _39, move _41) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_41);
        StorageDead(_39);
        _37 = <Result<u64, LendingError> as Try>::branch(move _38) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_38);
        _42 = discriminant(_37);
        switchInt(move _42) -> [0: bb26, 1: bb27, otherwise: bb7];
    }

    bb26: {
        StorageLive(_46);
        _46 = ((_37 as Continue).0: u64);
        _36 = _46;
        StorageDead(_46);
        _0 = Result::<u64, ProgramError>::Ok(move _36);
        StorageDead(_36);
        StorageDead(_2);
        StorageDead(_37);
        goto -> bb31;
    }

    bb27: {
        StorageLive(_43);
        _43 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, error::LendingError>);
        StorageLive(_45);
        _45 = move _43;
        _0 = <Result<u64, ProgramError> as FromResidual<Result<Infallible, LendingError>>>::from_residual(move _45) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_45);
        StorageDead(_43);
        StorageDead(_36);
        StorageDead(_2);
        StorageDead(_37);
        goto -> bb31;
    }

    bb29: {
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb30;
    }

    bb30: {
        StorageDead(_11);
        StorageDead(_7);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb31;
    }

    bb31: {
        return;
    }
}
