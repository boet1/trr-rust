// MIR for `rate_limiter::<impl at token-lending\sdk\src\state\rate_limiter.rs:40:1: 40:17>::remaining_outflow` before PreCodegen

fn rate_limiter::<impl at token-lending\sdk\src\state\rate_limiter.rs:40:1: 40:17>::remaining_outflow(_1: &mut rate_limiter::RateLimiter, _2: u64) -> Result<decimal::Decimal, ProgramError> {
    debug self => _1;
    debug cur_slot => _2;
    let mut _0: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let _3: ();
    let mut _4: bool;
    let mut _5: u64;
    let mut _6: !;
    let mut _7: math::decimal::Decimal;
    let _8: ();
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _10: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _11: &mut state::rate_limiter::RateLimiter;
    let mut _12: u64;
    let mut _13: isize;
    let _14: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _15: !;
    let mut _16: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _17: ();
    let _18: math::decimal::Decimal;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _20: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _21: &state::rate_limiter::RateLimiter;
    let mut _22: u64;
    let mut _23: isize;
    let _24: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _25: !;
    let mut _26: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _27: math::decimal::Decimal;
    let _28: ();
    let mut _29: bool;
    let mut _30: &math::decimal::Decimal;
    let mut _31: &math::decimal::Decimal;
    let _32: math::decimal::Decimal;
    let mut _33: u64;
    let mut _34: !;
    let mut _35: math::decimal::Decimal;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _38: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _39: math::decimal::Decimal;
    let mut _40: u64;
    let mut _41: math::decimal::Decimal;
    let mut _42: isize;
    let mut _44: !;
    let mut _45: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _47: math::decimal::Decimal;
    let mut _48: isize;
    let mut _49: isize;
    let mut _50: isize;
    let mut _51: isize;
    let mut _52: isize;
    let mut _53: isize;
    let mut _54: isize;
    let mut _55: isize;
    let mut _56: isize;
    let mut _57: isize;
    let mut _58: isize;
    let mut _59: isize;
    let mut _60: isize;
    let mut _61: isize;
    let mut _62: isize;
    scope 1 {
        debug residual => _14;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _17;
        scope 4 {
        }
    }
    scope 5 {
        debug cur_outflow => _18;
        let _36: math::decimal::Decimal;
        let _43: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _46: math::decimal::Decimal;
        scope 10 {
            debug diff => _36;
        }
        scope 11 {
            debug residual => _43;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _46;
            scope 14 {
            }
        }
    }
    scope 6 {
        debug residual => _24;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _27;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = (((*_1).0: state::rate_limiter::RateLimiterConfig).0: u64);
        _4 = Eq(move _5, const 0_u64);
        switchInt(move _4) -> [0: bb3, otherwise: bb1];
    }

    bb1: {
        StorageDead(_5);
        StorageLive(_7);
        _7 = <decimal::Decimal as From<u64>>::from(const _) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = Result::<decimal::Decimal, ProgramError>::Ok(move _7);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb27;
    }

    bb3: {
        StorageDead(_5);
        _3 = const ();
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &mut (*_1);
        StorageLive(_12);
        _12 = _2;
        _10 = rate_limiter::RateLimiter::_update(move _11, move _12) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_12);
        StorageDead(_11);
        _9 = <Result<(), ProgramError> as Try>::branch(move _10) -> [return: bb5, unwind: bb28];
    }

    bb5: {
        StorageDead(_10);
        _13 = discriminant(_9);
        switchInt(move _13) -> [0: bb6, 1: bb8, otherwise: bb7];
    }

    bb6: {
        StorageLive(_17);
        _17 = ((_9 as Continue).0: ());
        _8 = _17;
        StorageDead(_17);
        _48 = discriminant(_9);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &(*_1);
        StorageLive(_22);
        _22 = _2;
        _20 = rate_limiter::RateLimiter::current_outflow(move _21, move _22) -> [return: bb10, unwind continue];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        StorageLive(_14);
        _14 = move ((_9 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_16);
        _16 = move _14;
        _0 = <Result<decimal::Decimal, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _16) -> [return: bb9, unwind: bb31];
    }

    bb9: {
        StorageDead(_16);
        StorageDead(_14);
        _58 = discriminant(_9);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb27;
    }

    bb10: {
        StorageDead(_22);
        StorageDead(_21);
        _19 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _20) -> [return: bb11, unwind: bb28];
    }

    bb11: {
        StorageDead(_20);
        _23 = discriminant(_19);
        switchInt(move _23) -> [0: bb12, 1: bb13, otherwise: bb7];
    }

    bb12: {
        StorageLive(_27);
        _27 = ((_19 as Continue).0: math::decimal::Decimal);
        _18 = _27;
        StorageDead(_27);
        _50 = discriminant(_19);
        StorageDead(_19);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = &_18;
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = (((*_1).0: state::rate_limiter::RateLimiterConfig).1: u64);
        _32 = <decimal::Decimal as From<u64>>::from(move _33) -> [return: bb15, unwind continue];
    }

    bb13: {
        StorageLive(_24);
        _24 = move ((_19 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_26);
        _26 = move _24;
        _0 = <Result<decimal::Decimal, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _26) -> [return: bb14, unwind: bb30];
    }

    bb14: {
        StorageDead(_26);
        StorageDead(_24);
        _56 = discriminant(_19);
        StorageDead(_19);
        goto -> bb26;
    }

    bb15: {
        _31 = &_32;
        StorageDead(_33);
        _29 = <decimal::Decimal as PartialOrd>::gt(move _30, move _31) -> [return: bb16, unwind continue];
    }

    bb16: {
        switchInt(move _29) -> [0: bb19, otherwise: bb17];
    }

    bb17: {
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_30);
        StorageLive(_35);
        _35 = decimal::Decimal::zero() -> [return: bb18, unwind continue];
    }

    bb18: {
        _0 = Result::<decimal::Decimal, ProgramError>::Ok(move _35);
        StorageDead(_35);
        StorageDead(_29);
        StorageDead(_28);
        goto -> bb26;
    }

    bb19: {
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_30);
        _28 = const ();
        StorageDead(_29);
        StorageDead(_28);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = (((*_1).0: state::rate_limiter::RateLimiterConfig).1: u64);
        _39 = <decimal::Decimal as From<u64>>::from(move _40) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_40);
        StorageLive(_41);
        _41 = _18;
        _38 = <decimal::Decimal as common::TrySub>::try_sub(move _39, move _41) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_41);
        StorageDead(_39);
        _37 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _38) -> [return: bb22, unwind: bb28];
    }

    bb22: {
        StorageDead(_38);
        _42 = discriminant(_37);
        switchInt(move _42) -> [0: bb23, 1: bb24, otherwise: bb7];
    }

    bb23: {
        StorageLive(_46);
        _46 = ((_37 as Continue).0: math::decimal::Decimal);
        _36 = _46;
        StorageDead(_46);
        _52 = discriminant(_37);
        StorageDead(_37);
        StorageLive(_47);
        _47 = _36;
        _0 = Result::<decimal::Decimal, ProgramError>::Ok(move _47);
        StorageDead(_47);
        StorageDead(_36);
        StorageDead(_18);
        goto -> bb27;
    }

    bb24: {
        StorageLive(_43);
        _43 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_45);
        _45 = move _43;
        _0 = <Result<decimal::Decimal, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _45) -> [return: bb25, unwind: bb29];
    }

    bb25: {
        StorageDead(_45);
        StorageDead(_43);
        _54 = discriminant(_37);
        StorageDead(_37);
        StorageDead(_36);
        goto -> bb26;
    }

    bb26: {
        StorageDead(_18);
        goto -> bb27;
    }

    bb27: {
        return;
    }

    bb28 (cleanup): {
        resume;
    }

    bb29 (cleanup): {
        _60 = discriminant(_37);
        goto -> bb28;
    }

    bb30 (cleanup): {
        _61 = discriminant(_19);
        goto -> bb28;
    }

    bb31 (cleanup): {
        _62 = discriminant(_9);
        goto -> bb28;
    }
}
