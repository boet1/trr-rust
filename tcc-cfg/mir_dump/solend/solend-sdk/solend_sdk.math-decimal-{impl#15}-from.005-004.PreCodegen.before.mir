// MIR for `decimal::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:492:4: 492:53>::from` before PreCodegen

fn decimal::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:492:4: 492:53>::from(_1: u128) -> U192 {
    debug value => _1;
    let mut _0: math::decimal::U192;
    let mut _2: [u64; 3];
    let mut _3: u128;
    let _4: usize;
    let mut _5: usize;
    let mut _6: bool;
    let mut _7: u128;
    let mut _8: u128;
    let mut _9: u32;
    let mut _10: bool;
    let _11: usize;
    let mut _12: usize;
    let mut _13: bool;
    let mut _14: [u64; 3];
    scope 1 {
        debug ret => _2;
    }

    bb0: {
        StorageLive(_2);
        _2 = [const 0_u64; 3];
        StorageLive(_3);
        _3 = _1;
        StorageLive(_4);
        _4 = const 0_usize;
        _5 = Len(_2);
        _6 = Lt(_4, _5);
        assert(move _6, "index out of bounds: the length is {} but the index is {}", move _5, _4) -> [success: bb1, unwind continue];
    }

    bb1: {
        _2[_4] = move _3 as u64 (IntToInt);
        StorageDead(_3);
        StorageDead(_4);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _1;
        _9 = const 64_i32 as u32 (IntToInt);
        _10 = Lt(move _9, const 128_u32);
        assert(move _10, "attempt to shift right by `{}`, which would overflow", const 64_i32) -> [success: bb2, unwind continue];
    }

    bb2: {
        _7 = Shr(move _8, const 64_i32);
        StorageDead(_8);
        StorageLive(_11);
        _11 = const 1_usize;
        _12 = Len(_2);
        _13 = Lt(_11, _12);
        assert(move _13, "index out of bounds: the length is {} but the index is {}", move _12, _11) -> [success: bb3, unwind continue];
    }

    bb3: {
        _2[_11] = move _7 as u64 (IntToInt);
        StorageDead(_7);
        StorageDead(_11);
        StorageLive(_14);
        _14 = _2;
        _0 = U192(move _14);
        StorageDead(_14);
        StorageDead(_2);
        return;
    }
}
