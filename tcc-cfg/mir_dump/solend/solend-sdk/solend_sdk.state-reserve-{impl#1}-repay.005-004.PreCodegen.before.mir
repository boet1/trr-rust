// MIR for `reserve::<impl at token-lending\sdk\src\state\reserve.rs:669:1: 669:22>::repay` before PreCodegen

fn reserve::<impl at token-lending\sdk\src\state\reserve.rs:669:1: 669:22>::repay(_1: &mut ReserveLiquidity, _2: u64, _3: decimal::Decimal) -> Result<(), ProgramError> {
    debug self => _1;
    debug repay_amount => _2;
    debug settle_amount => _3;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _4: u64;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::LendingError>, u64>;
    let mut _6: std::result::Result<u64, error::LendingError>;
    let mut _7: std::option::Option<u64>;
    let mut _8: u64;
    let mut _9: u64;
    let mut _10: error::LendingError;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, error::LendingError>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::LendingError>;
    let _15: u64;
    let _16: math::decimal::Decimal;
    let mut _17: math::decimal::Decimal;
    let mut _18: math::decimal::Decimal;
    let mut _19: math::decimal::Decimal;
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _21: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _22: math::decimal::Decimal;
    let mut _23: math::decimal::Decimal;
    let mut _24: isize;
    let mut _26: !;
    let mut _27: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _29: ();
    let mut _30: isize;
    let mut _31: isize;
    let mut _32: isize;
    let mut _33: isize;
    let mut _34: isize;
    scope 1 {
        debug residual => _12;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _15;
        scope 4 {
        }
    }
    scope 5 {
        debug safe_settle_amount => _16;
        let _25: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _28: math::decimal::Decimal;
        scope 6 {
            debug residual => _25;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _28;
            scope 9 {
            }
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = ((*_1).5: u64);
        StorageLive(_9);
        _9 = _2;
        _7 = core::num::<impl u64>::checked_add(move _8, move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_10);
        _10 = LendingError::MathOverflow;
        _6 = Option::<u64>::ok_or::<LendingError>(move _7, move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_7);
        _5 = <Result<u64, LendingError> as Try>::branch(move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_6);
        _11 = discriminant(_5);
        switchInt(move _11) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_15);
        _15 = ((_5 as Continue).0: u64);
        _4 = _15;
        StorageDead(_15);
        ((*_1).5: u64) = move _4;
        StorageDead(_4);
        StorageDead(_5);
        StorageLive(_16);
        StorageLive(_17);
        _17 = _3;
        StorageLive(_18);
        _18 = ((*_1).6: math::decimal::Decimal);
        _16 = <decimal::Decimal as Ord>::min(move _17, move _18) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_12);
        _12 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::LendingError>);
        StorageLive(_14);
        _14 = move _12;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, LendingError>>>::from_residual(move _14) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_4);
        StorageDead(_5);
        goto -> bb14;
    }

    bb8: {
        StorageDead(_18);
        StorageDead(_17);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = ((*_1).6: math::decimal::Decimal);
        StorageLive(_23);
        _23 = _16;
        _21 = <decimal::Decimal as common::TrySub>::try_sub(move _22, move _23) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_23);
        StorageDead(_22);
        _20 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _21) -> [return: bb10, unwind: bb15];
    }

    bb10: {
        StorageDead(_21);
        _24 = discriminant(_20);
        switchInt(move _24) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_28);
        _28 = ((_20 as Continue).0: math::decimal::Decimal);
        _19 = _28;
        StorageDead(_28);
        ((*_1).6: math::decimal::Decimal) = move _19;
        StorageDead(_19);
        _30 = discriminant(_20);
        StorageDead(_20);
        StorageLive(_29);
        _29 = ();
        _0 = Result::<(), ProgramError>::Ok(move _29);
        StorageDead(_29);
        StorageDead(_16);
        goto -> bb14;
    }

    bb12: {
        StorageLive(_25);
        _25 = move ((_20 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_27);
        _27 = move _25;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _27) -> [return: bb13, unwind: bb16];
    }

    bb13: {
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_19);
        _32 = discriminant(_20);
        StorageDead(_20);
        StorageDead(_16);
        goto -> bb14;
    }

    bb14: {
        return;
    }

    bb15 (cleanup): {
        resume;
    }

    bb16 (cleanup): {
        _34 = discriminant(_20);
        goto -> bb15;
    }
}
