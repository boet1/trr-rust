// MIR for `obligation::<impl at token-lending\sdk\src\state\obligation.rs:419:1: 419:25>::unpack_from_slice` after PreCodegen

fn obligation::<impl at token-lending\sdk\src\state\obligation.rs:419:1: 419:25>::unpack_from_slice(_1: &[u8]) -> Result<obligation::Obligation, ProgramError> {
    debug src => _1;
    let mut _0: std::result::Result<state::obligation::Obligation, solana_program::program_error::ProgramError>;
    let _2: &[u8; 1300];
    let _3: usize;
    let _5: &[u8];
    let mut _6: &[u8];
    let mut _7: std::ops::Range<usize>;
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: (usize, bool);
    let mut _12: &[u8];
    let mut _31: (&[u8; 1], &[u8; 8], &[u8; 1], &[u8; 32], &[u8; 32], &[u8; 16], &[u8; 16], &[u8; 16], &[u8; 16], &[u8; 16], &[u8; 1], &[u8; 16], &[u8; 16], &[u8; 1], &[u8; 14], &[u8; 1], &[u8; 1], &[u8; 1096]);
    let mut _33: &[u8; 1300];
    let mut _35: [u8; 1];
    let _36: ();
    let mut _37: bool;
    let mut _38: u8;
    let mut _39: !;
    let _40: ();
    let mut _41: &str;
    let _42: &str;
    let mut _43: solana_program::program_error::ProgramError;
    let mut _45: [u8; 1];
    let mut _47: [u8; 1];
    let mut _49: usize;
    let mut _50: usize;
    let mut _51: u8;
    let mut _52: (usize, bool);
    let mut _54: usize;
    let mut _55: usize;
    let mut _56: u8;
    let mut _57: (usize, bool);
    let _59: ();
    let mut _60: std::ops::Range<u8>;
    let mut _61: std::ops::Range<u8>;
    let mut _62: u8;
    let mut _64: ();
    let _65: ();
    let mut _66: std::option::Option<u8>;
    let mut _67: &mut std::ops::Range<u8>;
    let mut _68: &mut std::ops::Range<u8>;
    let mut _69: isize;
    let mut _70: !;
    let _74: &[u8];
    let mut _75: &[u8; 1096];
    let mut _76: std::ops::Range<usize>;
    let mut _77: usize;
    let mut _78: usize;
    let mut _79: usize;
    let mut _80: (usize, bool);
    let mut _81: &[u8];
    let mut _87: (&[u8; 32], &[u8; 8], &[u8; 16], &[u8; 16], &[u8; 16]);
    let mut _89: &[u8; 88];
    let _90: ();
    let mut _91: &mut std::vec::Vec<state::obligation::ObligationCollateral>;
    let mut _92: state::obligation::ObligationCollateral;
    let mut _93: solana_program::pubkey::Pubkey;
    let mut _94: [u8; 32];
    let mut _95: u64;
    let mut _96: [u8; 8];
    let mut _97: math::decimal::Decimal;
    let mut _98: &[u8; 16];
    let mut _99: math::decimal::Decimal;
    let mut _100: &[u8; 16];
    let mut _101: (usize, bool);
    let _102: ();
    let mut _103: std::ops::Range<u8>;
    let mut _104: std::ops::Range<u8>;
    let mut _105: u8;
    let _107: ();
    let mut _108: std::option::Option<u8>;
    let mut _109: &mut std::ops::Range<u8>;
    let mut _110: &mut std::ops::Range<u8>;
    let mut _111: isize;
    let mut _112: !;
    let _116: &[u8];
    let mut _117: &[u8; 1096];
    let mut _118: std::ops::Range<usize>;
    let mut _119: usize;
    let mut _120: usize;
    let mut _121: usize;
    let mut _122: (usize, bool);
    let mut _123: &[u8];
    let mut _129: (&[u8; 32], &[u8; 16], &[u8; 16], &[u8; 16], &[u8; 32]);
    let mut _131: &[u8; 112];
    let _132: ();
    let mut _133: &mut std::vec::Vec<state::obligation::ObligationLiquidity>;
    let mut _134: state::obligation::ObligationLiquidity;
    let mut _135: solana_program::pubkey::Pubkey;
    let mut _136: [u8; 32];
    let mut _137: math::decimal::Decimal;
    let mut _138: &[u8; 16];
    let mut _139: math::decimal::Decimal;
    let mut _140: &[u8; 16];
    let mut _141: math::decimal::Decimal;
    let mut _142: &[u8; 16];
    let mut _143: (usize, bool);
    let mut _144: state::obligation::Obligation;
    let mut _145: u8;
    let mut _146: state::last_update::LastUpdate;
    let mut _147: u64;
    let mut _148: [u8; 8];
    let mut _149: bool;
    let mut _150: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, bool>;
    let mut _151: std::result::Result<bool, solana_program::program_error::ProgramError>;
    let mut _152: &[u8; 1];
    let mut _153: isize;
    let mut _155: !;
    let mut _156: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _158: solana_program::pubkey::Pubkey;
    let mut _159: [u8; 32];
    let mut _160: solana_program::pubkey::Pubkey;
    let mut _161: [u8; 32];
    let mut _162: std::vec::Vec<state::obligation::ObligationCollateral>;
    let mut _163: std::vec::Vec<state::obligation::ObligationLiquidity>;
    let mut _164: math::decimal::Decimal;
    let mut _165: &[u8; 16];
    let mut _166: math::decimal::Decimal;
    let mut _167: &[u8; 16];
    let mut _168: math::decimal::Decimal;
    let mut _169: &[u8; 16];
    let mut _170: math::decimal::Decimal;
    let mut _171: &[u8; 16];
    let mut _172: math::decimal::Decimal;
    let mut _173: &[u8; 16];
    let mut _174: math::decimal::Decimal;
    let mut _175: &[u8; 16];
    let mut _176: math::decimal::Decimal;
    let mut _177: &[u8; 16];
    let mut _178: bool;
    let mut _179: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, bool>;
    let mut _180: std::result::Result<bool, solana_program::program_error::ProgramError>;
    let mut _181: &[u8; 1];
    let mut _182: isize;
    let mut _184: !;
    let mut _185: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _187: bool;
    let mut _188: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, bool>;
    let mut _189: std::result::Result<bool, solana_program::program_error::ProgramError>;
    let mut _190: &[u8; 1];
    let mut _191: isize;
    let mut _193: !;
    let mut _194: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _196: bool;
    let mut _197: bool;
    let mut _198: bool;
    let mut _199: bool;
    let mut _200: isize;
    let mut _201: isize;
    let mut _202: isize;
    let mut _203: isize;
    let mut _204: isize;
    let mut _205: isize;
    let mut _206: isize;
    let mut _207: isize;
    let mut _208: isize;
    let mut _209: isize;
    let mut _210: isize;
    let mut _211: isize;
    let mut _212: isize;
    let mut _213: isize;
    let mut _214: isize;
    scope 1 {
        debug input => _2;
        scope 6 {
            debug version => _13;
            debug last_update_slot => _14;
            debug last_update_stale => _15;
            debug lending_market => _16;
            debug owner => _17;
            debug deposited_value => _18;
            debug borrowed_value => _19;
            debug allowed_borrow_value => _20;
            debug unhealthy_borrow_value => _21;
            debug borrowed_value_upper_bound => _22;
            debug borrowing_isolated_asset => _23;
            debug super_unhealthy_borrow_value => _24;
            debug unweighted_borrowed_value => _25;
            debug closeable => _26;
            debug _padding => _27;
            debug deposits_len => _28;
            debug borrows_len => _29;
            debug data_flat => _30;
            let _34: u8;
            scope 11 {
                debug version => _34;
                let _44: u8;
                scope 12 {
                    debug deposits_len => _44;
                    let _46: u8;
                    scope 13 {
                        debug borrows_len => _46;
                        let mut _48: std::vec::Vec<state::obligation::ObligationCollateral>;
                        scope 14 {
                            debug deposits => _48;
                            let mut _53: std::vec::Vec<state::obligation::ObligationLiquidity>;
                            scope 15 {
                                debug borrows => _53;
                                let mut _58: usize;
                                scope 16 {
                                    debug offset => _58;
                                    let mut _63: std::ops::Range<u8>;
                                    let mut _106: std::ops::Range<u8>;
                                    let _154: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                    let _157: bool;
                                    let _183: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                    let _186: bool;
                                    let _192: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                    let _195: bool;
                                    scope 17 {
                                        debug iter => _63;
                                        let _71: &[u8; 88];
                                        let _72: usize;
                                        scope 18 {
                                            debug deposits_flat => _71;
                                            scope 23 {
                                                debug deposit_reserve => _82;
                                                debug deposited_amount => _83;
                                                debug market_value => _84;
                                                debug attributed_borrow_value => _85;
                                                debug _padding_deposit => _86;
                                            }
                                            scope 24 {
                                                let _82: &[u8; 32];
                                                let _83: &[u8; 8];
                                                let _84: &[u8; 16];
                                                let _85: &[u8; 16];
                                                let _86: &[u8; 16];
                                                let _88: &[u8; 88];
                                                scope 25 {
                                                    debug input => _88;
                                                    scope 26 {
                                                        scope 27 {
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        scope 19 {
                                            debug offset => _72;
                                            let _73: &[u8];
                                            scope 20 {
                                                debug slice => _73;
                                                scope 21 {
                                                    scope 22 {
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    scope 28 {
                                        debug iter => _106;
                                        let _113: &[u8; 112];
                                        let _114: usize;
                                        scope 29 {
                                            debug borrows_flat => _113;
                                            scope 34 {
                                                debug borrow_reserve => _124;
                                                debug cumulative_borrow_rate_wads => _125;
                                                debug borrowed_amount_wads => _126;
                                                debug market_value => _127;
                                                debug _padding_borrow => _128;
                                            }
                                            scope 35 {
                                                let _124: &[u8; 32];
                                                let _125: &[u8; 16];
                                                let _126: &[u8; 16];
                                                let _127: &[u8; 16];
                                                let _128: &[u8; 32];
                                                let _130: &[u8; 112];
                                                scope 36 {
                                                    debug input => _130;
                                                    scope 37 {
                                                        scope 38 {
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        scope 30 {
                                            debug offset => _114;
                                            let _115: &[u8];
                                            scope 31 {
                                                debug slice => _115;
                                                scope 32 {
                                                    scope 33 {
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    scope 39 {
                                        debug residual => _154;
                                        scope 40 {
                                        }
                                    }
                                    scope 41 {
                                        debug val => _157;
                                        scope 42 {
                                        }
                                    }
                                    scope 43 {
                                        debug residual => _183;
                                        scope 44 {
                                        }
                                    }
                                    scope 45 {
                                        debug val => _186;
                                        scope 46 {
                                        }
                                    }
                                    scope 47 {
                                        debug residual => _192;
                                        scope 48 {
                                        }
                                    }
                                    scope 49 {
                                        debug val => _195;
                                        scope 50 {
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        scope 7 {
            let _13: &[u8; 1];
            let _14: &[u8; 8];
            let _15: &[u8; 1];
            let _16: &[u8; 32];
            let _17: &[u8; 32];
            let _18: &[u8; 16];
            let _19: &[u8; 16];
            let _20: &[u8; 16];
            let _21: &[u8; 16];
            let _22: &[u8; 16];
            let _23: &[u8; 1];
            let _24: &[u8; 16];
            let _25: &[u8; 16];
            let _26: &[u8; 1];
            let _27: &[u8; 14];
            let _28: &[u8; 1];
            let _29: &[u8; 1];
            let _30: &[u8; 1096];
            let _32: &[u8; 1300];
            scope 8 {
                debug input => _32;
                scope 9 {
                    scope 10 {
                    }
                }
            }
        }
    }
    scope 2 {
        debug offset => _3;
        let _4: &[u8];
        scope 3 {
            debug slice => _4;
            scope 4 {
                scope 5 {
                }
            }
        }
    }

    bb0: {
        _199 = const false;
        _198 = const false;
        _197 = const false;
        _196 = const false;
        StorageLive(_2);
        StorageLive(_3);
        _3 = const 0_usize;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &(*_1);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _3;
        StorageLive(_9);
        StorageLive(_10);
        _10 = _3;
        _11 = CheckedAdd(_10, const _);
        assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", move _10, const _) -> [success: bb1, unwind continue];
    }

    bb1: {
        _9 = move (_11.0: usize);
        StorageDead(_10);
        _7 = std::ops::Range::<usize> { start: move _8, end: move _9 };
        StorageDead(_9);
        StorageDead(_8);
        _5 = <[u8] as Index<std::ops::Range<usize>>>::index(move _6, move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        StorageDead(_6);
        _4 = &(*_5);
        StorageLive(_12);
        _12 = &(*_4);
        _2 = <obligation::Obligation as Pack>::unpack_from_slice::as_array::<u8>(move _12) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_12);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_31);
        StorageLive(_32);
        _32 = _2;
        StorageLive(_33);
        _33 = &(*_32);
        _31 = <obligation::Obligation as Pack>::unpack_from_slice::as_arrays::<u8>(move _33) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_33);
        StorageDead(_32);
        StorageLive(_13);
        _13 = (_31.0: &[u8; 1]);
        StorageLive(_14);
        _14 = (_31.1: &[u8; 8]);
        StorageLive(_15);
        _15 = (_31.2: &[u8; 1]);
        StorageLive(_16);
        _16 = (_31.3: &[u8; 32]);
        StorageLive(_17);
        _17 = (_31.4: &[u8; 32]);
        StorageLive(_18);
        _18 = (_31.5: &[u8; 16]);
        StorageLive(_19);
        _19 = (_31.6: &[u8; 16]);
        StorageLive(_20);
        _20 = (_31.7: &[u8; 16]);
        StorageLive(_21);
        _21 = (_31.8: &[u8; 16]);
        StorageLive(_22);
        _22 = (_31.9: &[u8; 16]);
        StorageLive(_23);
        _23 = (_31.10: &[u8; 1]);
        StorageLive(_24);
        _24 = (_31.11: &[u8; 16]);
        StorageLive(_25);
        _25 = (_31.12: &[u8; 16]);
        StorageLive(_26);
        _26 = (_31.13: &[u8; 1]);
        StorageLive(_27);
        _27 = (_31.14: &[u8; 14]);
        StorageLive(_28);
        _28 = (_31.15: &[u8; 1]);
        StorageLive(_29);
        _29 = (_31.16: &[u8; 1]);
        StorageLive(_30);
        _30 = (_31.17: &[u8; 1096]);
        StorageDead(_31);
        StorageLive(_34);
        StorageLive(_35);
        _35 = (*_13);
        _34 = core::num::<impl u8>::from_le_bytes(move _35) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = _34;
        _37 = Gt(move _38, const _);
        switchInt(move _37) -> [0: bb8, otherwise: bb6];
    }

    bb6: {
        StorageDead(_38);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = const "Obligation version does not match lending program version";
        _41 = &(*_42);
        _40 = solana_program::log::sol_log(move _41) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_41);
        StorageDead(_42);
        StorageDead(_40);
        StorageLive(_43);
        _43 = solana_program::program_error::ProgramError::InvalidAccountData;
        _0 = Result::<obligation::Obligation, ProgramError>::Err(move _43);
        StorageDead(_43);
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_34);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_2);
        goto -> bb77;
    }

    bb8: {
        StorageDead(_38);
        _36 = const ();
        StorageDead(_37);
        StorageDead(_36);
        StorageLive(_44);
        StorageLive(_45);
        _45 = (*_28);
        _44 = core::num::<impl u8>::from_le_bytes(move _45) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = (*_29);
        _46 = core::num::<impl u8>::from_le_bytes(move _47) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = _44;
        _50 = move _51 as usize (IntToInt);
        StorageDead(_51);
        _52 = CheckedAdd(_50, const 1_usize);
        assert(!move (_52.1: bool), "attempt to compute `{} + {}`, which would overflow", move _50, const 1_usize) -> [success: bb11, unwind continue];
    }

    bb11: {
        _49 = move (_52.0: usize);
        StorageDead(_50);
        _199 = const true;
        _48 = Vec::<obligation::ObligationCollateral>::with_capacity(move _49) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_49);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = _46;
        _55 = move _56 as usize (IntToInt);
        StorageDead(_56);
        _57 = CheckedAdd(_55, const 1_usize);
        assert(!move (_57.1: bool), "attempt to compute `{} + {}`, which would overflow", move _55, const 1_usize) -> [success: bb13, unwind: bb86];
    }

    bb13: {
        _54 = move (_57.0: usize);
        StorageDead(_55);
        _53 = Vec::<obligation::ObligationLiquidity>::with_capacity(move _54) -> [return: bb14, unwind: bb86];
    }

    bb14: {
        _198 = const true;
        StorageDead(_54);
        StorageLive(_58);
        _58 = const 0_usize;
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = _44;
        _61 = std::ops::Range::<u8> { start: const 0_u8, end: move _62 };
        StorageDead(_62);
        _60 = <std::ops::Range<u8> as IntoIterator>::into_iter(move _61) -> [return: bb15, unwind: bb85];
    }

    bb15: {
        StorageDead(_61);
        StorageLive(_63);
        _63 = move _60;
        goto -> bb16;
    }

    bb16: {
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = &mut _63;
        _67 = &mut (*_68);
        _66 = <std::ops::Range<u8> as Iterator>::next(move _67) -> [return: bb17, unwind: bb85];
    }

    bb17: {
        StorageDead(_67);
        _69 = discriminant(_66);
        switchInt(move _69) -> [0: bb20, 1: bb18, otherwise: bb19];
    }

    bb18: {
        StorageLive(_71);
        StorageLive(_72);
        _72 = _58;
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = &(*_30);
        StorageLive(_76);
        StorageLive(_77);
        _77 = _72;
        StorageLive(_78);
        StorageLive(_79);
        _79 = _72;
        _80 = CheckedAdd(_79, const _);
        assert(!move (_80.1: bool), "attempt to compute `{} + {}`, which would overflow", move _79, const _) -> [success: bb21, unwind: bb85];
    }

    bb19: {
        unreachable;
    }

    bb20: {
        _59 = const ();
        StorageDead(_68);
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_60);
        StorageDead(_59);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _105 = _46;
        _104 = std::ops::Range::<u8> { start: const 0_u8, end: move _105 };
        StorageDead(_105);
        _103 = <std::ops::Range<u8> as IntoIterator>::into_iter(move _104) -> [return: bb31, unwind: bb85];
    }

    bb21: {
        _78 = move (_80.0: usize);
        StorageDead(_79);
        _76 = std::ops::Range::<usize> { start: move _77, end: move _78 };
        StorageDead(_78);
        StorageDead(_77);
        _74 = <[u8; 1096] as Index<std::ops::Range<usize>>>::index(move _75, move _76) -> [return: bb22, unwind: bb85];
    }

    bb22: {
        StorageDead(_76);
        StorageDead(_75);
        _73 = &(*_74);
        StorageLive(_81);
        _81 = &(*_73);
        _71 = <obligation::Obligation as Pack>::unpack_from_slice::as_array::<u8>(move _81) -> [return: bb23, unwind: bb85];
    }

    bb23: {
        StorageDead(_81);
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_72);
        StorageLive(_87);
        StorageLive(_88);
        _88 = _71;
        StorageLive(_89);
        _89 = &(*_88);
        _87 = <obligation::Obligation as Pack>::unpack_from_slice::as_arrays::<u8>(move _89) -> [return: bb24, unwind: bb85];
    }

    bb24: {
        StorageDead(_89);
        StorageDead(_88);
        StorageLive(_82);
        _82 = (_87.0: &[u8; 32]);
        StorageLive(_83);
        _83 = (_87.1: &[u8; 8]);
        StorageLive(_84);
        _84 = (_87.2: &[u8; 16]);
        StorageLive(_85);
        _85 = (_87.3: &[u8; 16]);
        StorageLive(_86);
        _86 = (_87.4: &[u8; 16]);
        StorageDead(_87);
        StorageLive(_90);
        StorageLive(_91);
        _91 = &mut _48;
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _94 = (*_82);
        _93 = <Pubkey as From<[u8; 32]>>::from(move _94) -> [return: bb25, unwind: bb85];
    }

    bb25: {
        StorageDead(_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = (*_83);
        _95 = core::num::<impl u64>::from_le_bytes(move _96) -> [return: bb26, unwind: bb85];
    }

    bb26: {
        StorageDead(_96);
        StorageLive(_97);
        StorageLive(_98);
        _98 = &(*_84);
        _97 = state::unpack_decimal(move _98) -> [return: bb27, unwind: bb85];
    }

    bb27: {
        StorageDead(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = &(*_85);
        _99 = state::unpack_decimal(move _100) -> [return: bb28, unwind: bb85];
    }

    bb28: {
        StorageDead(_100);
        _92 = obligation::ObligationCollateral { deposit_reserve: move _93, deposited_amount: move _95, market_value: move _97, attributed_borrow_value: move _99 };
        StorageDead(_99);
        StorageDead(_97);
        StorageDead(_95);
        StorageDead(_93);
        _90 = Vec::<obligation::ObligationCollateral>::push(move _91, move _92) -> [return: bb29, unwind: bb85];
    }

    bb29: {
        StorageDead(_92);
        StorageDead(_91);
        StorageDead(_90);
        _101 = CheckedAdd(_58, const _);
        assert(!move (_101.1: bool), "attempt to compute `{} + {}`, which would overflow", _58, const _) -> [success: bb30, unwind: bb85];
    }

    bb30: {
        _58 = move (_101.0: usize);
        _65 = const ();
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_84);
        StorageDead(_83);
        StorageDead(_82);
        StorageDead(_71);
        StorageDead(_68);
        StorageDead(_66);
        StorageDead(_65);
        _64 = const ();
        goto -> bb16;
    }

    bb31: {
        StorageDead(_104);
        StorageLive(_106);
        _106 = move _103;
        goto -> bb32;
    }

    bb32: {
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _110 = &mut _106;
        _109 = &mut (*_110);
        _108 = <std::ops::Range<u8> as Iterator>::next(move _109) -> [return: bb33, unwind: bb85];
    }

    bb33: {
        StorageDead(_109);
        _111 = discriminant(_108);
        switchInt(move _111) -> [0: bb35, 1: bb34, otherwise: bb19];
    }

    bb34: {
        StorageLive(_113);
        StorageLive(_114);
        _114 = _58;
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _117 = &(*_30);
        StorageLive(_118);
        StorageLive(_119);
        _119 = _114;
        StorageLive(_120);
        StorageLive(_121);
        _121 = _114;
        _122 = CheckedAdd(_121, const _);
        assert(!move (_122.1: bool), "attempt to compute `{} + {}`, which would overflow", move _121, const _) -> [success: bb36, unwind: bb85];
    }

    bb35: {
        _102 = const ();
        StorageDead(_110);
        StorageDead(_108);
        StorageDead(_107);
        StorageDead(_106);
        StorageDead(_103);
        StorageDead(_102);
        StorageLive(_144);
        StorageLive(_145);
        _145 = _34;
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        _148 = (*_14);
        _147 = core::num::<impl u64>::from_le_bytes(move _148) -> [return: bb46, unwind: bb85];
    }

    bb36: {
        _120 = move (_122.0: usize);
        StorageDead(_121);
        _118 = std::ops::Range::<usize> { start: move _119, end: move _120 };
        StorageDead(_120);
        StorageDead(_119);
        _116 = <[u8; 1096] as Index<std::ops::Range<usize>>>::index(move _117, move _118) -> [return: bb37, unwind: bb85];
    }

    bb37: {
        StorageDead(_118);
        StorageDead(_117);
        _115 = &(*_116);
        StorageLive(_123);
        _123 = &(*_115);
        _113 = <obligation::Obligation as Pack>::unpack_from_slice::as_array::<u8>(move _123) -> [return: bb38, unwind: bb85];
    }

    bb38: {
        StorageDead(_123);
        StorageDead(_116);
        StorageDead(_115);
        StorageDead(_114);
        StorageLive(_129);
        StorageLive(_130);
        _130 = _113;
        StorageLive(_131);
        _131 = &(*_130);
        _129 = <obligation::Obligation as Pack>::unpack_from_slice::as_arrays::<u8>(move _131) -> [return: bb39, unwind: bb85];
    }

    bb39: {
        StorageDead(_131);
        StorageDead(_130);
        StorageLive(_124);
        _124 = (_129.0: &[u8; 32]);
        StorageLive(_125);
        _125 = (_129.1: &[u8; 16]);
        StorageLive(_126);
        _126 = (_129.2: &[u8; 16]);
        StorageLive(_127);
        _127 = (_129.3: &[u8; 16]);
        StorageLive(_128);
        _128 = (_129.4: &[u8; 32]);
        StorageDead(_129);
        StorageLive(_132);
        StorageLive(_133);
        _133 = &mut _53;
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        _136 = (*_124);
        _135 = <Pubkey as From<[u8; 32]>>::from(move _136) -> [return: bb40, unwind: bb85];
    }

    bb40: {
        StorageDead(_136);
        StorageLive(_137);
        StorageLive(_138);
        _138 = &(*_125);
        _137 = state::unpack_decimal(move _138) -> [return: bb41, unwind: bb85];
    }

    bb41: {
        StorageDead(_138);
        StorageLive(_139);
        StorageLive(_140);
        _140 = &(*_126);
        _139 = state::unpack_decimal(move _140) -> [return: bb42, unwind: bb85];
    }

    bb42: {
        StorageDead(_140);
        StorageLive(_141);
        StorageLive(_142);
        _142 = &(*_127);
        _141 = state::unpack_decimal(move _142) -> [return: bb43, unwind: bb85];
    }

    bb43: {
        StorageDead(_142);
        _134 = obligation::ObligationLiquidity { borrow_reserve: move _135, cumulative_borrow_rate_wads: move _137, borrowed_amount_wads: move _139, market_value: move _141 };
        StorageDead(_141);
        StorageDead(_139);
        StorageDead(_137);
        StorageDead(_135);
        _132 = Vec::<obligation::ObligationLiquidity>::push(move _133, move _134) -> [return: bb44, unwind: bb85];
    }

    bb44: {
        StorageDead(_134);
        StorageDead(_133);
        StorageDead(_132);
        _143 = CheckedAdd(_58, const _);
        assert(!move (_143.1: bool), "attempt to compute `{} + {}`, which would overflow", _58, const _) -> [success: bb45, unwind: bb85];
    }

    bb45: {
        _58 = move (_143.0: usize);
        _107 = const ();
        StorageDead(_128);
        StorageDead(_127);
        StorageDead(_126);
        StorageDead(_125);
        StorageDead(_124);
        StorageDead(_113);
        StorageDead(_110);
        StorageDead(_108);
        StorageDead(_107);
        _64 = const ();
        goto -> bb32;
    }

    bb46: {
        StorageDead(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        _152 = &(*_15);
        _151 = state::unpack_bool(move _152) -> [return: bb47, unwind: bb85];
    }

    bb47: {
        StorageDead(_152);
        _150 = <Result<bool, ProgramError> as Try>::branch(move _151) -> [return: bb48, unwind: bb85];
    }

    bb48: {
        _197 = const true;
        StorageDead(_151);
        _153 = discriminant(_150);
        switchInt(move _153) -> [0: bb49, 1: bb50, otherwise: bb19];
    }

    bb49: {
        StorageLive(_157);
        _157 = ((_150 as Continue).0: bool);
        _149 = _157;
        StorageDead(_157);
        _146 = last_update::LastUpdate { slot: move _147, stale: move _149 };
        StorageDead(_149);
        StorageDead(_147);
        StorageLive(_158);
        StorageLive(_159);
        _159 = (*_16);
        _158 = Pubkey::new_from_array(move _159) -> [return: bb52, unwind: bb93];
    }

    bb50: {
        StorageLive(_154);
        _154 = move ((_150 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_156);
        _156 = move _154;
        _0 = <Result<obligation::Obligation, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _156) -> [return: bb51, unwind: bb93];
    }

    bb51: {
        StorageDead(_156);
        StorageDead(_154);
        StorageDead(_149);
        StorageDead(_147);
        StorageDead(_146);
        StorageDead(_145);
        StorageDead(_144);
        StorageDead(_58);
        drop(_53) -> [return: bb75, unwind: bb84];
    }

    bb52: {
        StorageDead(_159);
        StorageLive(_160);
        StorageLive(_161);
        _161 = (*_17);
        _160 = Pubkey::new_from_array(move _161) -> [return: bb53, unwind: bb93];
    }

    bb53: {
        StorageDead(_161);
        StorageLive(_162);
        _199 = const false;
        _162 = move _48;
        StorageLive(_163);
        _198 = const false;
        _163 = move _53;
        StorageLive(_164);
        StorageLive(_165);
        _165 = &(*_18);
        _164 = state::unpack_decimal(move _165) -> [return: bb54, unwind: bb82];
    }

    bb54: {
        StorageDead(_165);
        StorageLive(_166);
        StorageLive(_167);
        _167 = &(*_19);
        _166 = state::unpack_decimal(move _167) -> [return: bb55, unwind: bb82];
    }

    bb55: {
        StorageDead(_167);
        StorageLive(_168);
        StorageLive(_169);
        _169 = &(*_25);
        _168 = state::unpack_decimal(move _169) -> [return: bb56, unwind: bb82];
    }

    bb56: {
        StorageDead(_169);
        StorageLive(_170);
        StorageLive(_171);
        _171 = &(*_22);
        _170 = state::unpack_decimal(move _171) -> [return: bb57, unwind: bb82];
    }

    bb57: {
        StorageDead(_171);
        StorageLive(_172);
        StorageLive(_173);
        _173 = &(*_20);
        _172 = state::unpack_decimal(move _173) -> [return: bb58, unwind: bb82];
    }

    bb58: {
        StorageDead(_173);
        StorageLive(_174);
        StorageLive(_175);
        _175 = &(*_21);
        _174 = state::unpack_decimal(move _175) -> [return: bb59, unwind: bb82];
    }

    bb59: {
        StorageDead(_175);
        StorageLive(_176);
        StorageLive(_177);
        _177 = &(*_24);
        _176 = state::unpack_decimal(move _177) -> [return: bb60, unwind: bb82];
    }

    bb60: {
        StorageDead(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        _181 = &(*_23);
        _180 = state::unpack_bool(move _181) -> [return: bb61, unwind: bb82];
    }

    bb61: {
        StorageDead(_181);
        _179 = <Result<bool, ProgramError> as Try>::branch(move _180) -> [return: bb62, unwind: bb82];
    }

    bb62: {
        _196 = const true;
        StorageDead(_180);
        _182 = discriminant(_179);
        switchInt(move _182) -> [0: bb63, 1: bb64, otherwise: bb19];
    }

    bb63: {
        StorageLive(_186);
        _186 = ((_179 as Continue).0: bool);
        _178 = _186;
        StorageDead(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        _190 = &(*_26);
        _189 = state::unpack_bool(move _190) -> [return: bb66, unwind: bb80];
    }

    bb64: {
        StorageLive(_183);
        _183 = move ((_179 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_185);
        _185 = move _183;
        _0 = <Result<obligation::Obligation, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _185) -> [return: bb65, unwind: bb80];
    }

    bb65: {
        StorageDead(_185);
        StorageDead(_183);
        StorageDead(_178);
        StorageDead(_176);
        StorageDead(_174);
        StorageDead(_172);
        StorageDead(_170);
        StorageDead(_168);
        StorageDead(_166);
        StorageDead(_164);
        drop(_163) -> [return: bb73, unwind: bb81];
    }

    bb66: {
        StorageDead(_190);
        _188 = <Result<bool, ProgramError> as Try>::branch(move _189) -> [return: bb67, unwind: bb80];
    }

    bb67: {
        StorageDead(_189);
        _191 = discriminant(_188);
        switchInt(move _191) -> [0: bb68, 1: bb69, otherwise: bb19];
    }

    bb68: {
        StorageLive(_195);
        _195 = ((_188 as Continue).0: bool);
        _187 = _195;
        StorageDead(_195);
        _144 = obligation::Obligation { version: move _145, last_update: move _146, lending_market: move _158, owner: move _160, deposits: move _162, borrows: move _163, deposited_value: move _164, borrowed_value: move _166, unweighted_borrowed_value: move _168, borrowed_value_upper_bound: move _170, allowed_borrow_value: move _172, unhealthy_borrow_value: move _174, super_unhealthy_borrow_value: move _176, borrowing_isolated_asset: move _178, closeable: move _187 };
        StorageDead(_187);
        StorageDead(_178);
        StorageDead(_176);
        StorageDead(_174);
        StorageDead(_172);
        StorageDead(_170);
        StorageDead(_168);
        StorageDead(_166);
        StorageDead(_164);
        StorageDead(_163);
        StorageDead(_162);
        StorageDead(_160);
        StorageDead(_158);
        StorageDead(_146);
        StorageDead(_145);
        _0 = Result::<obligation::Obligation, ProgramError>::Ok(move _144);
        StorageDead(_144);
        StorageDead(_58);
        _198 = const false;
        StorageDead(_53);
        _199 = const false;
        StorageDead(_48);
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_34);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_2);
        _200 = discriminant(_188);
        StorageDead(_188);
        _202 = discriminant(_179);
        _196 = const false;
        StorageDead(_179);
        _204 = discriminant(_150);
        _197 = const false;
        StorageDead(_150);
        goto -> bb77;
    }

    bb69: {
        StorageLive(_192);
        _192 = move ((_188 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_194);
        _194 = move _192;
        _0 = <Result<obligation::Obligation, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _194) -> [return: bb70, unwind: bb78];
    }

    bb70: {
        StorageDead(_194);
        StorageDead(_192);
        StorageDead(_187);
        StorageDead(_178);
        StorageDead(_176);
        StorageDead(_174);
        StorageDead(_172);
        StorageDead(_170);
        StorageDead(_168);
        StorageDead(_166);
        StorageDead(_164);
        drop(_163) -> [return: bb71, unwind: bb79];
    }

    bb71: {
        StorageDead(_163);
        drop(_162) -> [return: bb72, unwind: bb90];
    }

    bb72: {
        StorageDead(_162);
        StorageDead(_160);
        StorageDead(_158);
        StorageDead(_146);
        StorageDead(_145);
        StorageDead(_144);
        StorageDead(_58);
        _198 = const false;
        StorageDead(_53);
        _199 = const false;
        StorageDead(_48);
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_34);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_2);
        _206 = discriminant(_188);
        StorageDead(_188);
        goto -> bb88;
    }

    bb73: {
        StorageDead(_163);
        drop(_162) -> [return: bb74, unwind: bb91];
    }

    bb74: {
        StorageDead(_162);
        StorageDead(_160);
        StorageDead(_158);
        StorageDead(_146);
        StorageDead(_145);
        StorageDead(_144);
        StorageDead(_58);
        _198 = const false;
        StorageDead(_53);
        _199 = const false;
        StorageDead(_48);
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_34);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_2);
        goto -> bb88;
    }

    bb75: {
        _198 = const false;
        StorageDead(_53);
        drop(_48) -> [return: bb76, unwind: bb95];
    }

    bb76: {
        _199 = const false;
        StorageDead(_48);
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_34);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_2);
        goto -> bb89;
    }

    bb77: {
        return;
    }

    bb78 (cleanup): {
        drop(_163) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        drop(_162) -> [return: bb90, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        drop(_163) -> [return: bb81, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        drop(_162) -> [return: bb91, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        drop(_163) -> [return: bb83, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        drop(_162) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        switchInt(_199) -> [0: bb95, otherwise: bb94];
    }

    bb85 (cleanup): {
        drop(_53) -> [return: bb86, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        drop(_48) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        resume;
    }

    bb88: {
        _208 = discriminant(_179);
        _196 = const false;
        StorageDead(_179);
        goto -> bb89;
    }

    bb89: {
        _210 = discriminant(_150);
        _197 = const false;
        StorageDead(_150);
        goto -> bb77;
    }

    bb90 (cleanup): {
        _212 = discriminant(_188);
        goto -> bb91;
    }

    bb91 (cleanup): {
        _213 = discriminant(_179);
        goto -> bb95;
    }

    bb92 (cleanup): {
        drop(_53) -> [return: bb84, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        switchInt(_198) -> [0: bb84, otherwise: bb92];
    }

    bb94 (cleanup): {
        drop(_48) -> [return: bb95, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        _214 = discriminant(_150);
        goto -> bb87;
    }
}
