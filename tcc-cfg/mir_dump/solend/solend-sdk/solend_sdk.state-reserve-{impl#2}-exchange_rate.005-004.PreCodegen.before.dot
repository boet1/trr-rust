digraph Mir_0_506 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn ReserveCollateral::exchange_rate(_1: &amp;ReErased state::reserve::ReserveCollateral, _2: math::decimal::Decimal) -&gt; std::result::Result&lt;state::reserve::CollateralExchangeRate, solana_program::program_error::ProgramError&gt;<br align="left"/>let _3: math::rate::Rate;<br align="left"/>let mut _4: bool;<br align="left"/>let mut _5: u64;<br align="left"/>let mut _6: bool;<br align="left"/>let mut _7: &amp;ReErased math::decimal::Decimal;<br align="left"/>let mut _8: &amp;ReErased math::decimal::Decimal;<br align="left"/>let _9: math::decimal::Decimal;<br align="left"/>let _10: math::decimal::Decimal;<br align="left"/>let mut _11: u64;<br align="left"/>let mut _12: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;, math::rate::Rate&gt;;<br align="left"/>let mut _13: std::result::Result&lt;math::rate::Rate, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _14: math::decimal::Decimal;<br align="left"/>let mut _15: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;, math::decimal::Decimal&gt;;<br align="left"/>let mut _16: std::result::Result&lt;math::decimal::Decimal, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _17: math::decimal::Decimal;<br align="left"/>let mut _18: math::decimal::Decimal;<br align="left"/>let mut _19: isize;<br align="left"/>let _20: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _21: !;<br align="left"/>let mut _22: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let _23: math::decimal::Decimal;<br align="left"/>let mut _24: isize;<br align="left"/>let _25: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _26: !;<br align="left"/>let mut _27: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let _28: math::rate::Rate;<br align="left"/>let mut _29: state::reserve::CollateralExchangeRate;<br align="left"/>let mut _30: math::rate::Rate;<br align="left"/>let mut _31: bool;<br align="left"/>let mut _32: isize;<br align="left"/>let mut _33: isize;<br align="left"/>let mut _34: isize;<br align="left"/>let mut _35: isize;<br align="left"/>let mut _36: isize;<br align="left"/>let mut _37: isize;<br align="left"/>let mut _38: isize;<br align="left"/>let mut _39: isize;<br align="left"/>let mut _40: isize;<br align="left"/>let mut _41: isize;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug total_liquidity =&gt; _2;<br align="left"/>debug rate =&gt; _3;<br align="left"/>debug mint_total_supply =&gt; _10;<br align="left"/>debug residual =&gt; _20;<br align="left"/>debug val =&gt; _23;<br align="left"/>debug residual =&gt; _25;<br align="left"/>debug val =&gt; _28;<br align="left"/>>;
    bb0__0_506 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_31 = const false<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = ((*_1).1: u64)<br/>_4 = Eq(move _5, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _4)</td></tr></table>>];
    bb1__0_506 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb2__0_506 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>_7 = &amp;_2<br/>StorageLive(_8)<br/>StorageLive(_9)<br/></td></tr><tr><td align="left">_9 = decimal::Decimal::zero()</td></tr></table>>];
    bb3__0_506 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_8 = &amp;_9<br/></td></tr><tr><td align="left">_6 = &lt;decimal::Decimal as PartialEq&gt;::eq(move _7, move _8)</td></tr></table>>];
    bb4__0_506 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">switchInt(move _6)</td></tr></table>>];
    bb5__0_506 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">_3 = rate::Rate::from_scaled_val(const _)</td></tr></table>>];
    bb6__0_506 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>_11 = ((*_1).1: u64)<br/></td></tr><tr><td align="left">_10 = &lt;decimal::Decimal as From&lt;u64&gt;&gt;::from(move _11)</td></tr></table>>];
    bb7__0_506 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>_17 = _10<br/>StorageLive(_18)<br/>_18 = _2<br/></td></tr><tr><td align="left">_16 = &lt;decimal::Decimal as common::TryDiv&lt;decimal::Decimal&gt;&gt;::try_div(move _17, move _18)</td></tr></table>>];
    bb8__0_506 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageDead(_17)<br/></td></tr><tr><td align="left">_15 = &lt;Result&lt;decimal::Decimal, ProgramError&gt; as Try&gt;::branch(move _16)</td></tr></table>>];
    bb9__0_506 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">_31 = const true<br/>StorageDead(_16)<br/>_19 = discriminant(_15)<br/></td></tr><tr><td align="left">switchInt(move _19)</td></tr></table>>];
    bb10__0_506 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_23)<br/>_23 = ((_15 as Continue).0: math::decimal::Decimal)<br/>_14 = _23<br/>StorageDead(_23)<br/></td></tr><tr><td align="left">_13 = &lt;rate::Rate as TryFrom&lt;decimal::Decimal&gt;&gt;::try_from(move _14)</td></tr></table>>];
    bb11__0_506 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb12__0_506 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageLive(_20)<br/>_20 = move ((_15 as Break).0: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;)<br/>StorageLive(_22)<br/>_22 = move _20<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;CollateralExchangeRate, ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, ProgramError&gt;&gt;&gt;::from_residual(move _22)</td></tr></table>>];
    bb13__0_506 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_22)<br/>StorageDead(_20)<br/>StorageDead(_14)<br/>StorageDead(_13)<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_506 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/></td></tr><tr><td align="left">_12 = &lt;Result&lt;rate::Rate, ProgramError&gt; as Try&gt;::branch(move _13)</td></tr></table>>];
    bb15__0_506 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>_24 = discriminant(_12)<br/></td></tr><tr><td align="left">switchInt(move _24)</td></tr></table>>];
    bb16__0_506 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageLive(_28)<br/>_28 = ((_12 as Continue).0: math::rate::Rate)<br/>_3 = _28<br/>StorageDead(_28)<br/>StorageDead(_10)<br/>_32 = discriminant(_12)<br/>_34 = discriminant(_15)<br/>_31 = const false<br/>StorageDead(_15)<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_506 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageLive(_25)<br/>_25 = move ((_12 as Break).0: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;)<br/>StorageLive(_27)<br/>_27 = move _25<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;CollateralExchangeRate, ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, ProgramError&gt;&gt;&gt;::from_residual(move _27)</td></tr></table>>];
    bb18__0_506 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>StorageDead(_25)<br/>StorageDead(_10)<br/>_36 = discriminant(_12)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb19__0_506 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageDead(_4)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>_30 = _3<br/>_29 = CollateralExchangeRate(move _30)<br/>StorageDead(_30)<br/>_0 = Result::&lt;CollateralExchangeRate, ProgramError&gt;::Ok(move _29)<br/>StorageDead(_29)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_506 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">_38 = discriminant(_15)<br/>_31 = const false<br/>StorageDead(_15)<br/>StorageDead(_12)<br/>StorageDead(_6)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb21__0_506 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left">return</td></tr></table>>];
    bb22__0_506 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">22 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb23__0_506 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">23 (cleanup)</td></tr><tr><td align="left" balign="left">_40 = discriminant(_12)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb24__0_506 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">24 (cleanup)</td></tr><tr><td align="left" balign="left">_41 = discriminant(_15)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_506 -> bb2__0_506 [label="0"];
    bb0__0_506 -> bb1__0_506 [label="otherwise"];
    bb1__0_506 -> bb5__0_506 [label=""];
    bb2__0_506 -> bb3__0_506 [label="return"];
    bb3__0_506 -> bb4__0_506 [label="return"];
    bb4__0_506 -> bb6__0_506 [label="0"];
    bb4__0_506 -> bb5__0_506 [label="otherwise"];
    bb5__0_506 -> bb19__0_506 [label="return"];
    bb6__0_506 -> bb7__0_506 [label="return"];
    bb7__0_506 -> bb8__0_506 [label="return"];
    bb8__0_506 -> bb9__0_506 [label="return"];
    bb8__0_506 -> bb22__0_506 [label="unwind"];
    bb9__0_506 -> bb10__0_506 [label="0"];
    bb9__0_506 -> bb12__0_506 [label="1"];
    bb9__0_506 -> bb11__0_506 [label="otherwise"];
    bb10__0_506 -> bb14__0_506 [label="return"];
    bb10__0_506 -> bb24__0_506 [label="unwind"];
    bb12__0_506 -> bb13__0_506 [label="return"];
    bb12__0_506 -> bb24__0_506 [label="unwind"];
    bb13__0_506 -> bb20__0_506 [label=""];
    bb14__0_506 -> bb15__0_506 [label="return"];
    bb14__0_506 -> bb24__0_506 [label="unwind"];
    bb15__0_506 -> bb16__0_506 [label="0"];
    bb15__0_506 -> bb17__0_506 [label="1"];
    bb15__0_506 -> bb11__0_506 [label="otherwise"];
    bb16__0_506 -> bb19__0_506 [label=""];
    bb17__0_506 -> bb18__0_506 [label="return"];
    bb17__0_506 -> bb23__0_506 [label="unwind"];
    bb18__0_506 -> bb20__0_506 [label=""];
    bb19__0_506 -> bb21__0_506 [label=""];
    bb20__0_506 -> bb21__0_506 [label=""];
    bb23__0_506 -> bb24__0_506 [label=""];
    bb24__0_506 -> bb22__0_506 [label=""];
}
