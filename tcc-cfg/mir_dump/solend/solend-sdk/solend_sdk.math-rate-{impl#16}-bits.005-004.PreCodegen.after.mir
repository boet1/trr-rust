// MIR for `rate::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:587:3: 587:13>::bits` after PreCodegen

fn rate::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:587:3: 587:13>::bits(_1: &U128) -> usize {
    debug self => _1;
    let mut _0: usize;
    let _2: &[u64; 2];
    let _3: ();
    let mut _4: std::ops::Range<usize>;
    let mut _5: std::ops::Range<usize>;
    let mut _7: ();
    let _8: ();
    let mut _9: std::option::Option<usize>;
    let mut _10: &mut std::ops::Range<usize>;
    let mut _11: &mut std::ops::Range<usize>;
    let mut _12: isize;
    let mut _13: !;
    let mut _15: bool;
    let mut _16: u64;
    let _17: usize;
    let mut _18: usize;
    let mut _19: (usize, bool);
    let mut _20: usize;
    let mut _21: bool;
    let mut _22: !;
    let mut _23: usize;
    let mut _24: usize;
    let mut _25: usize;
    let mut _26: usize;
    let mut _27: (usize, bool);
    let mut _28: (usize, bool);
    let mut _29: (usize, bool);
    let mut _30: usize;
    let mut _31: u32;
    let mut _32: u64;
    let _33: usize;
    let mut _34: usize;
    let mut _35: (usize, bool);
    let mut _36: usize;
    let mut _37: bool;
    let mut _38: (usize, bool);
    let mut _39: usize;
    let mut _40: u32;
    let mut _41: u64;
    let _42: usize;
    let mut _43: usize;
    let mut _44: bool;
    let mut _45: (usize, bool);
    scope 1 {
        debug arr => _2;
        let mut _6: std::ops::Range<usize>;
        scope 2 {
            debug iter => _6;
            let _14: usize;
            scope 3 {
                debug i => _14;
            }
        }
    }

    bb0: {
        StorageLive(_2);
        _2 = &((*_1).0: [u64; 2]);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = std::ops::Range::<usize> { start: const 1_usize, end: const 2_usize };
        _4 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        StorageLive(_6);
        _6 = move _4;
        goto -> bb2;
    }

    bb2: {
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &mut _6;
        _10 = &mut (*_11);
        _9 = <std::ops::Range<usize> as Iterator>::next(move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_10);
        _12 = discriminant(_9);
        switchInt(move _12) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        StorageLive(_14);
        _14 = ((_9 as Some).0: usize);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = _14;
        _19 = CheckedSub(const 2_usize, _18);
        assert(!move (_19.1: bool), "attempt to compute `{} - {}`, which would overflow", const 2_usize, move _18) -> [success: bb7, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _3 = const ();
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_6);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = const 0_usize;
        _43 = Len((*_2));
        _44 = Lt(_42, _43);
        assert(move _44, "index out of bounds: the length is {} but the index is {}", move _43, _42) -> [success: bb18, unwind continue];
    }

    bb7: {
        _17 = move (_19.0: usize);
        StorageDead(_18);
        _20 = Len((*_2));
        _21 = Lt(_17, _20);
        assert(move _21, "index out of bounds: the length is {} but the index is {}", move _20, _17) -> [success: bb8, unwind continue];
    }

    bb8: {
        _16 = (*_2)[_17];
        _15 = Gt(move _16, const 0_u64);
        switchInt(move _15) -> [0: bb17, otherwise: bb9];
    }

    bb9: {
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = _14;
        _27 = CheckedSub(const 2_usize, _26);
        assert(!move (_27.1: bool), "attempt to compute `{} - {}`, which would overflow", const 2_usize, move _26) -> [success: bb10, unwind continue];
    }

    bb10: {
        _25 = move (_27.0: usize);
        StorageDead(_26);
        _28 = CheckedAdd(_25, const 1_usize);
        assert(!move (_28.1: bool), "attempt to compute `{} + {}`, which would overflow", move _25, const 1_usize) -> [success: bb11, unwind continue];
    }

    bb11: {
        _24 = move (_28.0: usize);
        StorageDead(_25);
        _29 = CheckedMul(const 64_usize, _24);
        assert(!move (_29.1: bool), "attempt to compute `{} * {}`, which would overflow", const 64_usize, move _24) -> [success: bb12, unwind continue];
    }

    bb12: {
        _23 = move (_29.0: usize);
        StorageDead(_24);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = _14;
        _35 = CheckedSub(const 2_usize, _34);
        assert(!move (_35.1: bool), "attempt to compute `{} - {}`, which would overflow", const 2_usize, move _34) -> [success: bb13, unwind continue];
    }

    bb13: {
        _33 = move (_35.0: usize);
        StorageDead(_34);
        _36 = Len((*_2));
        _37 = Lt(_33, _36);
        assert(move _37, "index out of bounds: the length is {} but the index is {}", move _36, _33) -> [success: bb14, unwind continue];
    }

    bb14: {
        _32 = (*_2)[_33];
        _31 = core::num::<impl u64>::leading_zeros(move _32) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_32);
        _30 = move _31 as usize (IntToInt);
        StorageDead(_31);
        _38 = CheckedSub(_23, _30);
        assert(!move (_38.1: bool), "attempt to compute `{} - {}`, which would overflow", move _23, move _30) -> [success: bb16, unwind continue];
    }

    bb16: {
        _0 = move (_38.0: usize);
        StorageDead(_30);
        StorageDead(_23);
        StorageDead(_33);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_6);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb21;
    }

    bb17: {
        StorageDead(_17);
        StorageDead(_16);
        _8 = const ();
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_8);
        _7 = const ();
        goto -> bb2;
    }

    bb18: {
        _41 = (*_2)[_42];
        _40 = core::num::<impl u64>::leading_zeros(move _41) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_41);
        _39 = move _40 as usize (IntToInt);
        StorageDead(_40);
        _45 = CheckedSub(const 64_usize, _39);
        assert(!move (_45.1: bool), "attempt to compute `{} - {}`, which would overflow", const 64_usize, move _39) -> [success: bb20, unwind continue];
    }

    bb20: {
        _0 = move (_45.0: usize);
        StorageDead(_39);
        StorageDead(_2);
        StorageDead(_42);
        goto -> bb21;
    }

    bb21: {
        return;
    }
}
