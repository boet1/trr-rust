// MIR for `reserve::<impl at token-lending\sdk\src\state\reserve.rs:846:1: 846:23>::exchange_rate` before PreCodegen

fn reserve::<impl at token-lending\sdk\src\state\reserve.rs:846:1: 846:23>::exchange_rate(_1: &ReserveCollateral, _2: decimal::Decimal) -> Result<CollateralExchangeRate, ProgramError> {
    debug self => _1;
    debug total_liquidity => _2;
    let mut _0: std::result::Result<state::reserve::CollateralExchangeRate, solana_program::program_error::ProgramError>;
    let _3: math::rate::Rate;
    let mut _4: bool;
    let mut _5: u64;
    let mut _6: bool;
    let mut _7: &math::decimal::Decimal;
    let mut _8: &math::decimal::Decimal;
    let _9: math::decimal::Decimal;
    let _10: math::decimal::Decimal;
    let mut _11: u64;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::rate::Rate>;
    let mut _13: std::result::Result<math::rate::Rate, solana_program::program_error::ProgramError>;
    let mut _14: math::decimal::Decimal;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _16: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _17: math::decimal::Decimal;
    let mut _18: math::decimal::Decimal;
    let mut _19: isize;
    let mut _21: !;
    let mut _22: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _24: isize;
    let mut _26: !;
    let mut _27: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _29: state::reserve::CollateralExchangeRate;
    let mut _30: math::rate::Rate;
    let mut _31: bool;
    let mut _32: isize;
    let mut _33: isize;
    let mut _34: isize;
    let mut _35: isize;
    let mut _36: isize;
    let mut _37: isize;
    let mut _38: isize;
    let mut _39: isize;
    let mut _40: isize;
    let mut _41: isize;
    scope 1 {
        debug rate => _3;
    }
    scope 2 {
        debug mint_total_supply => _10;
        let _20: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _23: math::decimal::Decimal;
        let _25: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _28: math::rate::Rate;
        scope 3 {
            debug residual => _20;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _23;
            scope 6 {
            }
        }
        scope 7 {
            debug residual => _25;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _28;
            scope 10 {
            }
        }
    }

    bb0: {
        _31 = const false;
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = ((*_1).1: u64);
        _4 = Eq(move _5, const 0_u64);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_5);
        goto -> bb5;
    }

    bb2: {
        StorageDead(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &_2;
        StorageLive(_8);
        StorageLive(_9);
        _9 = decimal::Decimal::zero() -> [return: bb3, unwind continue];
    }

    bb3: {
        _8 = &_9;
        _6 = <decimal::Decimal as PartialEq>::eq(move _7, move _8) -> [return: bb4, unwind continue];
    }

    bb4: {
        switchInt(move _6) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        _3 = rate::Rate::from_scaled_val(const _) -> [return: bb19, unwind continue];
    }

    bb6: {
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_10);
        StorageLive(_11);
        _11 = ((*_1).1: u64);
        _10 = <decimal::Decimal as From<u64>>::from(move _11) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = _10;
        StorageLive(_18);
        _18 = _2;
        _16 = <decimal::Decimal as common::TryDiv<decimal::Decimal>>::try_div(move _17, move _18) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_18);
        StorageDead(_17);
        _15 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _16) -> [return: bb9, unwind: bb22];
    }

    bb9: {
        _31 = const true;
        StorageDead(_16);
        _19 = discriminant(_15);
        switchInt(move _19) -> [0: bb10, 1: bb12, otherwise: bb11];
    }

    bb10: {
        StorageLive(_23);
        _23 = ((_15 as Continue).0: math::decimal::Decimal);
        _14 = _23;
        StorageDead(_23);
        _13 = <rate::Rate as TryFrom<decimal::Decimal>>::try_from(move _14) -> [return: bb14, unwind: bb24];
    }

    bb11: {
        unreachable;
    }

    bb12: {
        StorageLive(_20);
        _20 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_22);
        _22 = move _20;
        _0 = <Result<CollateralExchangeRate, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _22) -> [return: bb13, unwind: bb24];
    }

    bb13: {
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_10);
        goto -> bb20;
    }

    bb14: {
        StorageDead(_14);
        _12 = <Result<rate::Rate, ProgramError> as Try>::branch(move _13) -> [return: bb15, unwind: bb24];
    }

    bb15: {
        StorageDead(_13);
        _24 = discriminant(_12);
        switchInt(move _24) -> [0: bb16, 1: bb17, otherwise: bb11];
    }

    bb16: {
        StorageLive(_28);
        _28 = ((_12 as Continue).0: math::rate::Rate);
        _3 = _28;
        StorageDead(_28);
        StorageDead(_10);
        _32 = discriminant(_12);
        _34 = discriminant(_15);
        _31 = const false;
        StorageDead(_15);
        StorageDead(_12);
        goto -> bb19;
    }

    bb17: {
        StorageLive(_25);
        _25 = move ((_12 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_27);
        _27 = move _25;
        _0 = <Result<CollateralExchangeRate, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _27) -> [return: bb18, unwind: bb23];
    }

    bb18: {
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_10);
        _36 = discriminant(_12);
        goto -> bb20;
    }

    bb19: {
        StorageDead(_6);
        StorageDead(_4);
        StorageLive(_29);
        StorageLive(_30);
        _30 = _3;
        _29 = CollateralExchangeRate(move _30);
        StorageDead(_30);
        _0 = Result::<CollateralExchangeRate, ProgramError>::Ok(move _29);
        StorageDead(_29);
        StorageDead(_3);
        goto -> bb21;
    }

    bb20: {
        _38 = discriminant(_15);
        _31 = const false;
        StorageDead(_15);
        StorageDead(_12);
        StorageDead(_6);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb21;
    }

    bb21: {
        return;
    }

    bb22 (cleanup): {
        resume;
    }

    bb23 (cleanup): {
        _40 = discriminant(_12);
        goto -> bb24;
    }

    bb24 (cleanup): {
        _41 = discriminant(_15);
        goto -> bb22;
    }
}
