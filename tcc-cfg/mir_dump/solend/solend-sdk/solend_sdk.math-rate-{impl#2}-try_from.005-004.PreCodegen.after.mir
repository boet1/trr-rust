// MIR for `rate::<impl at token-lending\sdk\src\math\rate.rs:110:1: 110:31>::try_from` after PreCodegen

fn rate::<impl at token-lending\sdk\src\math\rate.rs:110:1: 110:31>::try_from(_1: decimal::Decimal) -> Result<rate::Rate, ProgramError> {
    debug decimal => _1;
    let mut _0: std::result::Result<math::rate::Rate, solana_program::program_error::ProgramError>;
    let mut _2: math::rate::Rate;
    let mut _3: math::rate::U128;
    let mut _4: u128;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, u128>;
    let mut _6: std::result::Result<u128, solana_program::program_error::ProgramError>;
    let mut _7: &math::decimal::Decimal;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _12: u128;
    let mut _13: bool;
    let mut _14: isize;
    let mut _15: isize;
    let mut _16: isize;
    let mut _17: isize;
    let mut _18: isize;
    scope 1 {
        debug residual => _9;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _12;
        scope 4 {
        }
    }

    bb0: {
        _13 = const false;
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &_1;
        _6 = decimal::Decimal::to_scaled_val(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = <Result<u128, ProgramError> as Try>::branch(move _6) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        _13 = const true;
        StorageDead(_6);
        _8 = discriminant(_5);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_5 as Continue).0: u128);
        _4 = _12;
        StorageDead(_12);
        _3 = <U128 as From<u128>>::from(move _4) -> [return: bb7, unwind: bb10];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <Result<rate::Rate, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _11) -> [return: bb6, unwind: bb10];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        _16 = discriminant(_5);
        _13 = const false;
        StorageDead(_5);
        goto -> bb8;
    }

    bb7: {
        StorageDead(_4);
        _2 = rate::Rate(move _3);
        StorageDead(_3);
        _0 = Result::<rate::Rate, ProgramError>::Ok(move _2);
        StorageDead(_2);
        _14 = discriminant(_5);
        _13 = const false;
        StorageDead(_5);
        goto -> bb8;
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        resume;
    }

    bb10 (cleanup): {
        _18 = discriminant(_5);
        goto -> bb9;
    }
}
