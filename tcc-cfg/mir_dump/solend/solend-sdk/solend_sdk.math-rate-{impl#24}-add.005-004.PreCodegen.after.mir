// MIR for `rate::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:1383:3: 1383:68>::add` after PreCodegen

fn rate::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:1383:3: 1383:68>::add(_1: U128, _2: T) -> U128 {
    debug self => _1;
    debug other => _2;
    let mut _0: math::rate::U128;
    let _3: math::rate::U128;
    let _4: bool;
    let mut _5: (math::rate::U128, bool);
    let mut _6: math::rate::U128;
    let mut _7: math::rate::U128;
    let mut _8: T;
    let _9: ();
    let mut _10: bool;
    let mut _11: !;
    let _12: !;
    scope 1 {
        debug result => _3;
        debug overflow => _4;
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        _6 = _1;
        StorageLive(_7);
        StorageLive(_8);
        _8 = move _2;
        _7 = <T as Into<U128>>::into(move _8) -> [return: bb1, unwind: bb5];
    }

    bb1: {
        StorageDead(_8);
        _5 = U128::overflowing_add(move _6, move _7) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_3);
        _3 = (_5.0: math::rate::U128);
        StorageLive(_4);
        _4 = (_5.1: bool);
        StorageDead(_5);
        StorageLive(_9);
        StorageLive(_10);
        _10 = _4;
        switchInt(move _10) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageLive(_12);
        _12 = begin_panic::<&str>(const "arithmetic operation overflow") -> bb5;
    }

    bb4: {
        _9 = const ();
        StorageDead(_10);
        StorageDead(_9);
        _0 = _3;
        StorageDead(_4);
        StorageDead(_3);
        return;
    }

    bb5 (cleanup): {
        resume;
    }
}
