digraph Mir_0_1350 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn U128::to_little_endian(_1: &amp;ReErased math::rate::U128, _2: &amp;ReErased mut [u8]) -&gt; ()<br align="left"/>let _3: ();<br align="left"/>let mut _4: bool;<br align="left"/>let _5: ();<br align="left"/>let mut _6: bool;<br align="left"/>let mut _7: usize;<br align="left"/>let mut _8: (usize, bool);<br align="left"/>let mut _9: usize;<br align="left"/>let mut _10: &amp;ReErased [u8];<br align="left"/>let mut _11: !;<br align="left"/>let mut _12: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _13: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _14: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _15: ();<br align="left"/>let _16: ();<br align="left"/>let mut _17: std::option::Option&lt;usize&gt;;<br align="left"/>let mut _18: &amp;ReErased mut std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _19: &amp;ReErased mut std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _20: isize;<br align="left"/>let mut _21: !;<br align="left"/>let _22: usize;<br align="left"/>let _23: ();<br align="left"/>let mut _24: &amp;ReErased mut [u8];<br align="left"/>let mut _25: &amp;ReErased mut [u8];<br align="left"/>let mut _26: &amp;ReErased mut [u8];<br align="left"/>let mut _27: &amp;ReErased mut [u8];<br align="left"/>let mut _28: std::ops::RangeFrom&lt;usize&gt;;<br align="left"/>let mut _29: usize;<br align="left"/>let mut _30: usize;<br align="left"/>let mut _31: (usize, bool);<br align="left"/>let mut _32: u64;<br align="left"/>let _33: usize;<br align="left"/>let mut _34: usize;<br align="left"/>let mut _35: bool;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug bytes =&gt; _2;<br align="left"/>debug iter =&gt; _14;<br align="left"/>debug i =&gt; _22;<br align="left"/>>;
    bb0__0_1350 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>_4 = const true<br/></td></tr><tr><td align="left">switchInt(move _4)</td></tr></table>>];
    bb1__0_1350 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>_8 = CheckedMul(const 2_usize, const 8_usize)<br/></td></tr><tr><td align="left">assert(!move (_8.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, const 2_usize, const 8_usize)</td></tr></table>>];
    bb2__0_1350 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_7 = move (_8.0: usize)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>_10 = &amp;(*_2)<br/></td></tr><tr><td align="left">_9 = core::slice::&lt;impl [u8]&gt;::len(move _10)</td></tr></table>>];
    bb3__0_1350 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>_6 = Eq(move _7, move _9)<br/></td></tr><tr><td align="left">switchInt(move _6)</td></tr></table>>];
    bb4__0_1350 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_7)<br/>_5 = const ()<br/>StorageDead(_6)<br/>StorageDead(_5)<br/>_3 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb5__0_1350 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_7)<br/>StorageLive(_11)<br/></td></tr><tr><td align="left">_11 = panic(const &quot;assertion failed: 2 * 8 == bytes.len()&quot;)</td></tr></table>>];
    bb6__0_1350 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">_3 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_1350 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>StorageDead(_3)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>_13 = std::ops::Range::&lt;usize&gt; { start: const 0_usize, end: const 2_usize }<br/></td></tr><tr><td align="left">_12 = &lt;std::ops::Range&lt;usize&gt; as IntoIterator&gt;::into_iter(move _13)</td></tr></table>>];
    bb8__0_1350 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>StorageLive(_14)<br/>_14 = move _12<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_1350 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>_19 = &amp;mut _14<br/>_18 = &amp;mut (*_19)<br/></td></tr><tr><td align="left">_17 = &lt;std::ops::Range&lt;usize&gt; as Iterator&gt;::next(move _18)</td></tr></table>>];
    bb10__0_1350 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>_20 = discriminant(_17)<br/></td></tr><tr><td align="left">switchInt(move _20)</td></tr></table>>];
    bb11__0_1350 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_22)<br/>_22 = ((_17 as Some).0: usize)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>_27 = &amp;mut (*_2)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>_30 = _22<br/>_31 = CheckedMul(const 8_usize, _30)<br/></td></tr><tr><td align="left">assert(!move (_31.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, const 8_usize, move _30)</td></tr></table>>];
    bb12__0_1350 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb13__0_1350 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">_0 = const ()<br/>StorageDead(_19)<br/>StorageDead(_17)<br/>StorageDead(_16)<br/>StorageDead(_14)<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb14__0_1350 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">_29 = move (_31.0: usize)<br/>StorageDead(_30)<br/>_28 = RangeFrom::&lt;usize&gt; { start: move _29 }<br/>StorageDead(_29)<br/></td></tr><tr><td align="left">_26 = &lt;[u8] as IndexMut&lt;RangeFrom&lt;usize&gt;&gt;&gt;::index_mut(move _27, move _28)</td></tr></table>>];
    bb15__0_1350 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>StorageDead(_27)<br/>_25 = &amp;mut (*_26)<br/>_24 = &amp;mut (*_25)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>_33 = _22<br/>_34 = Len(((*_1).0: [u64; 2]))<br/>_35 = Lt(_33, _34)<br/></td></tr><tr><td align="left">assert(move _35, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _34, _33)</td></tr></table>>];
    bb16__0_1350 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">_32 = ((*_1).0: [u64; 2])[_33]<br/></td></tr><tr><td align="left">_23 = &lt;LittleEndian as ByteOrder&gt;::write_u64(move _24, move _32)</td></tr></table>>];
    bb17__0_1350 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_32)<br/>StorageDead(_24)<br/>StorageDead(_33)<br/>StorageDead(_26)<br/>StorageDead(_25)<br/>StorageDead(_23)<br/>_16 = const ()<br/>StorageDead(_22)<br/>StorageDead(_19)<br/>StorageDead(_17)<br/>StorageDead(_16)<br/>_15 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_1350 -> bb6__0_1350 [label="0"];
    bb0__0_1350 -> bb1__0_1350 [label="otherwise"];
    bb1__0_1350 -> bb2__0_1350 [label="success"];
    bb2__0_1350 -> bb3__0_1350 [label="return"];
    bb3__0_1350 -> bb5__0_1350 [label="0"];
    bb3__0_1350 -> bb4__0_1350 [label="otherwise"];
    bb4__0_1350 -> bb7__0_1350 [label=""];
    bb6__0_1350 -> bb7__0_1350 [label=""];
    bb7__0_1350 -> bb8__0_1350 [label="return"];
    bb8__0_1350 -> bb9__0_1350 [label=""];
    bb9__0_1350 -> bb10__0_1350 [label="return"];
    bb10__0_1350 -> bb13__0_1350 [label="0"];
    bb10__0_1350 -> bb11__0_1350 [label="1"];
    bb10__0_1350 -> bb12__0_1350 [label="otherwise"];
    bb11__0_1350 -> bb14__0_1350 [label="success"];
    bb14__0_1350 -> bb15__0_1350 [label="return"];
    bb15__0_1350 -> bb16__0_1350 [label="success"];
    bb16__0_1350 -> bb17__0_1350 [label="return"];
    bb17__0_1350 -> bb9__0_1350 [label=""];
}
