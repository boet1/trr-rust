digraph Mir_0_513 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn CollateralExchangeRate::liquidity_to_collateral(_1: &amp;ReErased state::reserve::CollateralExchangeRate, _2: u64) -&gt; std::result::Result&lt;u64, solana_program::program_error::ProgramError&gt;<br align="left"/>let mut _3: &amp;ReErased math::decimal::Decimal;<br align="left"/>let _4: math::decimal::Decimal;<br align="left"/>let mut _5: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;, math::decimal::Decimal&gt;;<br align="left"/>let mut _6: std::result::Result&lt;math::decimal::Decimal, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _7: &amp;ReErased state::reserve::CollateralExchangeRate;<br align="left"/>let mut _8: math::decimal::Decimal;<br align="left"/>let mut _9: u64;<br align="left"/>let mut _10: isize;<br align="left"/>let _11: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _12: !;<br align="left"/>let mut _13: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let _14: math::decimal::Decimal;<br align="left"/>let mut _15: bool;<br align="left"/>let mut _16: isize;<br align="left"/>let mut _17: isize;<br align="left"/>let mut _18: isize;<br align="left"/>let mut _19: isize;<br align="left"/>let mut _20: isize;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug liquidity_amount =&gt; _2;<br align="left"/>debug residual =&gt; _11;<br align="left"/>debug val =&gt; _14;<br align="left"/>>;
    bb0__0_513 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_15 = const false<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>_7 = &amp;(*_1)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = _2<br/></td></tr><tr><td align="left">_8 = &lt;u64 as Into&lt;decimal::Decimal&gt;&gt;::into(move _9)</td></tr></table>>];
    bb1__0_513 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/></td></tr><tr><td align="left">_6 = CollateralExchangeRate::decimal_liquidity_to_collateral(move _7, move _8)</td></tr></table>>];
    bb2__0_513 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">_5 = &lt;Result&lt;decimal::Decimal, ProgramError&gt; as Try&gt;::branch(move _6)</td></tr></table>>];
    bb3__0_513 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_15 = const true<br/>StorageDead(_6)<br/>_10 = discriminant(_5)<br/></td></tr><tr><td align="left">switchInt(move _10)</td></tr></table>>];
    bb4__0_513 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_14)<br/>_14 = ((_5 as Continue).0: math::decimal::Decimal)<br/>_4 = _14<br/>StorageDead(_14)<br/>_3 = &amp;_4<br/></td></tr><tr><td align="left">_0 = decimal::Decimal::try_floor_u64(move _3)</td></tr></table>>];
    bb5__0_513 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb6__0_513 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_11)<br/>_11 = move ((_5 as Break).0: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;)<br/>StorageLive(_13)<br/>_13 = move _11<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;u64, ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, ProgramError&gt;&gt;&gt;::from_residual(move _13)</td></tr></table>>];
    bb7__0_513 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>StorageDead(_11)<br/>StorageDead(_3)<br/>_18 = discriminant(_5)<br/>_15 = const false<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_513 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_3)<br/>_16 = discriminant(_5)<br/>_15 = const false<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_513 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left">return</td></tr></table>>];
    bb10__0_513 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">10 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb11__0_513 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">11 (cleanup)</td></tr><tr><td align="left" balign="left">_20 = discriminant(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_513 -> bb1__0_513 [label="return"];
    bb1__0_513 -> bb2__0_513 [label="return"];
    bb2__0_513 -> bb3__0_513 [label="return"];
    bb2__0_513 -> bb10__0_513 [label="unwind"];
    bb3__0_513 -> bb4__0_513 [label="0"];
    bb3__0_513 -> bb6__0_513 [label="1"];
    bb3__0_513 -> bb5__0_513 [label="otherwise"];
    bb4__0_513 -> bb8__0_513 [label="return"];
    bb4__0_513 -> bb11__0_513 [label="unwind"];
    bb6__0_513 -> bb7__0_513 [label="return"];
    bb6__0_513 -> bb11__0_513 [label="unwind"];
    bb7__0_513 -> bb9__0_513 [label=""];
    bb8__0_513 -> bb9__0_513 [label=""];
    bb11__0_513 -> bb10__0_513 [label=""];
}
