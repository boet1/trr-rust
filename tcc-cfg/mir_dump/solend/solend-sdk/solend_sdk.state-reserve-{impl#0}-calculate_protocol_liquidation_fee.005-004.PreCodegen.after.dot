digraph Mir_0_473 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn reserve::Reserve::calculate_protocol_liquidation_fee(_1: &amp;ReErased state::reserve::Reserve, _2: u64, _3: &amp;ReErased state::reserve::Bonus) -&gt; std::result::Result&lt;u64, solana_program::program_error::ProgramError&gt;<br align="left"/>let _4: ();<br align="left"/>let mut _5: bool;<br align="left"/>let mut _6: &amp;ReErased math::decimal::Decimal;<br align="left"/>let mut _7: &amp;ReErased math::decimal::Decimal;<br align="left"/>let _8: math::decimal::Decimal;<br align="left"/>let mut _9: !;<br align="left"/>let _10: ();<br align="left"/>let mut _11: &amp;ReErased str;<br align="left"/>let _12: &amp;ReErased str;<br align="left"/>let mut _13: solana_program::program_error::ProgramError;<br align="left"/>let mut _14: error::LendingError;<br align="left"/>let _15: math::decimal::Decimal;<br align="left"/>let mut _16: u64;<br align="left"/>let _17: math::decimal::Decimal;<br align="left"/>let mut _18: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;, math::decimal::Decimal&gt;;<br align="left"/>let mut _19: std::result::Result&lt;math::decimal::Decimal, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _20: math::decimal::Decimal;<br align="left"/>let mut _21: math::decimal::Decimal;<br align="left"/>let mut _22: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;, math::decimal::Decimal&gt;;<br align="left"/>let mut _23: std::result::Result&lt;math::decimal::Decimal, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _24: math::decimal::Decimal;<br align="left"/>let mut _25: math::decimal::Decimal;<br align="left"/>let mut _26: isize;<br align="left"/>let _27: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _28: !;<br align="left"/>let mut _29: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let _30: math::decimal::Decimal;<br align="left"/>let mut _31: isize;<br align="left"/>let _32: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _33: !;<br align="left"/>let mut _34: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let _35: math::decimal::Decimal;<br align="left"/>let mut _36: u64;<br align="left"/>let mut _37: u64;<br align="left"/>let mut _38: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;, u64&gt;;<br align="left"/>let mut _39: std::result::Result&lt;u64, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _40: &amp;ReErased math::decimal::Decimal;<br align="left"/>let _41: math::decimal::Decimal;<br align="left"/>let mut _42: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;, math::decimal::Decimal&gt;;<br align="left"/>let mut _43: std::result::Result&lt;math::decimal::Decimal, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _44: math::decimal::Decimal;<br align="left"/>let mut _45: math::decimal::Decimal;<br align="left"/>let mut _46: isize;<br align="left"/>let _47: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _48: !;<br align="left"/>let mut _49: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let _50: math::decimal::Decimal;<br align="left"/>let mut _51: isize;<br align="left"/>let _52: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _53: !;<br align="left"/>let mut _54: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let _55: u64;<br align="left"/>let mut _56: bool;<br align="left"/>let mut _57: bool;<br align="left"/>let mut _58: bool;<br align="left"/>let mut _59: isize;<br align="left"/>let mut _60: isize;<br align="left"/>let mut _61: isize;<br align="left"/>let mut _62: isize;<br align="left"/>let mut _63: isize;<br align="left"/>let mut _64: isize;<br align="left"/>let mut _65: isize;<br align="left"/>let mut _66: isize;<br align="left"/>let mut _67: isize;<br align="left"/>let mut _68: isize;<br align="left"/>let mut _69: isize;<br align="left"/>let mut _70: isize;<br align="left"/>let mut _71: isize;<br align="left"/>let mut _72: isize;<br align="left"/>let mut _73: isize;<br align="left"/>let mut _74: isize;<br align="left"/>let mut _75: isize;<br align="left"/>let mut _76: isize;<br align="left"/>let mut _77: isize;<br align="left"/>let mut _78: isize;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug amount_liquidated =&gt; _2;<br align="left"/>debug bonus =&gt; _3;<br align="left"/>debug amount_liquidated_wads =&gt; _15;<br align="left"/>debug nonbonus_amount =&gt; _17;<br align="left"/>debug residual =&gt; _27;<br align="left"/>debug val =&gt; _30;<br align="left"/>debug residual =&gt; _32;<br align="left"/>debug val =&gt; _35;<br align="left"/>debug residual =&gt; _47;<br align="left"/>debug val =&gt; _50;<br align="left"/>debug residual =&gt; _52;<br align="left"/>debug val =&gt; _55;<br align="left"/>>;
    bb0__0_473 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_57 = const false<br/>_56 = const false<br/>_58 = const false<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = &amp;((*_3).0: math::decimal::Decimal)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/></td></tr><tr><td align="left">_8 = decimal::Decimal::from_percent(const _)</td></tr></table>>];
    bb1__0_473 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_7 = &amp;_8<br/></td></tr><tr><td align="left">_5 = &lt;decimal::Decimal as PartialOrd&gt;::gt(move _6, move _7)</td></tr></table>>];
    bb2__0_473 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left">switchInt(move _5)</td></tr></table>>];
    bb3__0_473 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageDead(_7)<br/>StorageDead(_6)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>_12 = const &quot;Bonus rate cannot exceed maximum bonus rate&quot;<br/>_11 = &amp;(*_12)<br/></td></tr><tr><td align="left">_10 = solana_program::log::sol_log(move _11)</td></tr></table>>];
    bb4__0_473 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_12)<br/>StorageDead(_10)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>_14 = LendingError::InvalidAmount<br/></td></tr><tr><td align="left">_13 = &lt;LendingError as Into&lt;ProgramError&gt;&gt;::into(move _14)</td></tr></table>>];
    bb5__0_473 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>_0 = Result::&lt;u64, ProgramError&gt;::Err(move _13)<br/>StorageDead(_13)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb6__0_473 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageDead(_7)<br/>StorageDead(_6)<br/>_4 = const ()<br/>StorageDead(_5)<br/>StorageDead(_4)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>_16 = _2<br/></td></tr><tr><td align="left">_15 = &lt;decimal::Decimal as From&lt;u64&gt;&gt;::from(move _16)</td></tr></table>>];
    bb7__0_473 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>_20 = _15<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/></td></tr><tr><td align="left">_24 = decimal::Decimal::one()</td></tr></table>>];
    bb8__0_473 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageLive(_25)<br/>_25 = ((*_3).0: math::decimal::Decimal)<br/></td></tr><tr><td align="left">_23 = &lt;decimal::Decimal as common::TryAdd&gt;::try_add(move _24, move _25)</td></tr></table>>];
    bb9__0_473 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_24)<br/></td></tr><tr><td align="left">_22 = &lt;Result&lt;decimal::Decimal, ProgramError&gt; as Try&gt;::branch(move _23)</td></tr></table>>];
    bb10__0_473 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">_57 = const true<br/>StorageDead(_23)<br/>_26 = discriminant(_22)<br/></td></tr><tr><td align="left">switchInt(move _26)</td></tr></table>>];
    bb11__0_473 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_30)<br/>_30 = ((_22 as Continue).0: math::decimal::Decimal)<br/>_21 = _30<br/>StorageDead(_30)<br/></td></tr><tr><td align="left">_19 = &lt;decimal::Decimal as common::TryDiv&lt;decimal::Decimal&gt;&gt;::try_div(move _20, move _21)</td></tr></table>>];
    bb12__0_473 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb13__0_473 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageLive(_27)<br/>_27 = move ((_22 as Break).0: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;)<br/>StorageLive(_29)<br/>_29 = move _27<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;u64, ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, ProgramError&gt;&gt;&gt;::from_residual(move _29)</td></tr></table>>];
    bb14__0_473 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>StorageDead(_27)<br/>StorageDead(_21)<br/>StorageDead(_20)<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_473 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>StorageDead(_20)<br/></td></tr><tr><td align="left">_18 = &lt;Result&lt;decimal::Decimal, ProgramError&gt; as Try&gt;::branch(move _19)</td></tr></table>>];
    bb16__0_473 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>_31 = discriminant(_18)<br/></td></tr><tr><td align="left">switchInt(move _31)</td></tr></table>>];
    bb17__0_473 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageLive(_35)<br/>_35 = ((_18 as Continue).0: math::decimal::Decimal)<br/>_17 = _35<br/>StorageDead(_35)<br/>_59 = discriminant(_18)<br/>_61 = discriminant(_22)<br/>_57 = const false<br/>StorageDead(_22)<br/>StorageDead(_18)<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>StorageLive(_38)<br/>StorageLive(_39)<br/>StorageLive(_40)<br/>StorageLive(_41)<br/>StorageLive(_42)<br/>StorageLive(_43)<br/>StorageLive(_44)<br/>_44 = _17<br/>StorageLive(_45)<br/>_45 = ((*_3).1: math::decimal::Decimal)<br/></td></tr><tr><td align="left">_43 = &lt;decimal::Decimal as common::TryMul&lt;decimal::Decimal&gt;&gt;::try_mul(move _44, move _45)</td></tr></table>>];
    bb18__0_473 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageLive(_32)<br/>_32 = move ((_18 as Break).0: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;)<br/>StorageLive(_34)<br/>_34 = move _32<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;u64, ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, ProgramError&gt;&gt;&gt;::from_residual(move _34)</td></tr></table>>];
    bb19__0_473 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>StorageDead(_32)<br/>_71 = discriminant(_18)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_473 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_45)<br/>StorageDead(_44)<br/></td></tr><tr><td align="left">_42 = &lt;Result&lt;decimal::Decimal, ProgramError&gt; as Try&gt;::branch(move _43)</td></tr></table>>];
    bb21__0_473 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">_56 = const true<br/>StorageDead(_43)<br/>_46 = discriminant(_42)<br/></td></tr><tr><td align="left">switchInt(move _46)</td></tr></table>>];
    bb22__0_473 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageLive(_50)<br/>_50 = ((_42 as Continue).0: math::decimal::Decimal)<br/>_41 = _50<br/>StorageDead(_50)<br/>_40 = &amp;_41<br/></td></tr><tr><td align="left">_39 = decimal::Decimal::try_ceil_u64(move _40)</td></tr></table>>];
    bb23__0_473 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageLive(_47)<br/>_47 = move ((_42 as Break).0: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;)<br/>StorageLive(_49)<br/>_49 = move _47<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;u64, ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, ProgramError&gt;&gt;&gt;::from_residual(move _49)</td></tr></table>>];
    bb24__0_473 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_49)<br/>StorageDead(_47)<br/>StorageDead(_40)<br/>StorageDead(_39)<br/>StorageDead(_37)<br/>StorageDead(_36)<br/>StorageDead(_17)<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb25__0_473 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_40)<br/></td></tr><tr><td align="left">_38 = &lt;Result&lt;u64, ProgramError&gt; as Try&gt;::branch(move _39)</td></tr></table>>];
    bb26__0_473 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">_58 = const true<br/>StorageDead(_39)<br/>_51 = discriminant(_38)<br/></td></tr><tr><td align="left">switchInt(move _51)</td></tr></table>>];
    bb27__0_473 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageLive(_55)<br/>_55 = ((_38 as Continue).0: u64)<br/>_37 = _55<br/>StorageDead(_55)<br/></td></tr><tr><td align="left">_36 = std::cmp::max::&lt;u64&gt;(move _37, const 1_u64)</td></tr></table>>];
    bb28__0_473 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageLive(_52)<br/>_52 = move ((_38 as Break).0: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;)<br/>StorageLive(_54)<br/>_54 = move _52<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;u64, ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, ProgramError&gt;&gt;&gt;::from_residual(move _54)</td></tr></table>>];
    bb29__0_473 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_54)<br/>StorageDead(_52)<br/>StorageDead(_37)<br/>StorageDead(_36)<br/>StorageDead(_17)<br/>StorageDead(_15)<br/>_67 = discriminant(_38)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb30__0_473 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/>_0 = Result::&lt;u64, ProgramError&gt;::Ok(move _36)<br/>StorageDead(_36)<br/>StorageDead(_17)<br/>StorageDead(_15)<br/>_63 = discriminant(_38)<br/>_65 = discriminant(_42)<br/>_56 = const false<br/>StorageDead(_42)<br/>StorageDead(_41)<br/>_58 = const false<br/>StorageDead(_38)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb31__0_473 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">_69 = discriminant(_42)<br/>_56 = const false<br/>StorageDead(_42)<br/>StorageDead(_41)<br/>_58 = const false<br/>StorageDead(_38)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb32__0_473 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">_73 = discriminant(_22)<br/>_57 = const false<br/>StorageDead(_22)<br/>StorageDead(_18)<br/>StorageDead(_17)<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb33__0_473 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left">return</td></tr></table>>];
    bb34__0_473 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">34 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb35__0_473 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">35 (cleanup)</td></tr><tr><td align="left" balign="left">_75 = discriminant(_38)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb36__0_473 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">36 (cleanup)</td></tr><tr><td align="left" balign="left">_76 = discriminant(_42)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb37__0_473 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">37 (cleanup)</td></tr><tr><td align="left" balign="left">_77 = discriminant(_18)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb38__0_473 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">38 (cleanup)</td></tr><tr><td align="left" balign="left">_78 = discriminant(_22)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_473 -> bb1__0_473 [label="return"];
    bb1__0_473 -> bb2__0_473 [label="return"];
    bb2__0_473 -> bb6__0_473 [label="0"];
    bb2__0_473 -> bb3__0_473 [label="otherwise"];
    bb3__0_473 -> bb4__0_473 [label="return"];
    bb4__0_473 -> bb5__0_473 [label="return"];
    bb5__0_473 -> bb33__0_473 [label=""];
    bb6__0_473 -> bb7__0_473 [label="return"];
    bb7__0_473 -> bb8__0_473 [label="return"];
    bb8__0_473 -> bb9__0_473 [label="return"];
    bb9__0_473 -> bb10__0_473 [label="return"];
    bb9__0_473 -> bb34__0_473 [label="unwind"];
    bb10__0_473 -> bb11__0_473 [label="0"];
    bb10__0_473 -> bb13__0_473 [label="1"];
    bb10__0_473 -> bb12__0_473 [label="otherwise"];
    bb11__0_473 -> bb15__0_473 [label="return"];
    bb11__0_473 -> bb38__0_473 [label="unwind"];
    bb13__0_473 -> bb14__0_473 [label="return"];
    bb13__0_473 -> bb38__0_473 [label="unwind"];
    bb14__0_473 -> bb32__0_473 [label=""];
    bb15__0_473 -> bb16__0_473 [label="return"];
    bb15__0_473 -> bb38__0_473 [label="unwind"];
    bb16__0_473 -> bb17__0_473 [label="0"];
    bb16__0_473 -> bb18__0_473 [label="1"];
    bb16__0_473 -> bb12__0_473 [label="otherwise"];
    bb17__0_473 -> bb20__0_473 [label="return"];
    bb18__0_473 -> bb19__0_473 [label="return"];
    bb18__0_473 -> bb37__0_473 [label="unwind"];
    bb19__0_473 -> bb32__0_473 [label=""];
    bb20__0_473 -> bb21__0_473 [label="return"];
    bb20__0_473 -> bb34__0_473 [label="unwind"];
    bb21__0_473 -> bb22__0_473 [label="0"];
    bb21__0_473 -> bb23__0_473 [label="1"];
    bb21__0_473 -> bb12__0_473 [label="otherwise"];
    bb22__0_473 -> bb25__0_473 [label="return"];
    bb22__0_473 -> bb36__0_473 [label="unwind"];
    bb23__0_473 -> bb24__0_473 [label="return"];
    bb23__0_473 -> bb36__0_473 [label="unwind"];
    bb24__0_473 -> bb31__0_473 [label=""];
    bb25__0_473 -> bb26__0_473 [label="return"];
    bb25__0_473 -> bb36__0_473 [label="unwind"];
    bb26__0_473 -> bb27__0_473 [label="0"];
    bb26__0_473 -> bb28__0_473 [label="1"];
    bb26__0_473 -> bb12__0_473 [label="otherwise"];
    bb27__0_473 -> bb30__0_473 [label="return"];
    bb27__0_473 -> bb35__0_473 [label="unwind"];
    bb28__0_473 -> bb29__0_473 [label="return"];
    bb28__0_473 -> bb35__0_473 [label="unwind"];
    bb29__0_473 -> bb31__0_473 [label=""];
    bb30__0_473 -> bb33__0_473 [label=""];
    bb31__0_473 -> bb33__0_473 [label=""];
    bb32__0_473 -> bb33__0_473 [label=""];
    bb35__0_473 -> bb36__0_473 [label=""];
    bb36__0_473 -> bb34__0_473 [label=""];
    bb37__0_473 -> bb38__0_473 [label=""];
    bb38__0_473 -> bb34__0_473 [label=""];
}
