// MIR for `_IMPL_NUM_FromPrimitive_FOR_ReserveType::<impl at token-lending\sdk\src\state\reserve.rs:1097:54: 1097:67>::from_i64` after PreCodegen

fn _IMPL_NUM_FromPrimitive_FOR_ReserveType::<impl at token-lending\sdk\src\state\reserve.rs:1097:54: 1097:67>::from_i64(_1: i64) -> Option<reserve::ReserveType> {
    debug n => _1;
    let mut _0: std::option::Option<state::reserve::ReserveType>;
    let mut _2: bool;
    let mut _3: i64;
    let mut _4: i64;
    let mut _5: isize;
    let mut _6: (isize, bool);
    let mut _7: state::reserve::ReserveType;
    let mut _8: bool;
    let mut _9: i64;
    let mut _10: i64;
    let mut _11: isize;
    let mut _12: (isize, bool);
    let mut _13: state::reserve::ReserveType;

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = _1;
        StorageLive(_4);
        StorageLive(_5);
        _6 = CheckedAdd(const _, const 0_isize);
        assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 0_isize) -> [success: bb1, unwind continue];
    }

    bb1: {
        _5 = move (_6.0: isize);
        _4 = move _5 as i64 (IntToInt);
        StorageDead(_5);
        _2 = Eq(move _3, move _4);
        switchInt(move _2) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_7);
        _7 = reserve::ReserveType::Regular;
        _0 = Option::<reserve::ReserveType>::Some(move _7);
        StorageDead(_7);
        goto -> bb8;
    }

    bb3: {
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_8);
        StorageLive(_9);
        _9 = _1;
        StorageLive(_10);
        StorageLive(_11);
        _12 = CheckedAdd(const _, const 0_isize);
        assert(!move (_12.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 0_isize) -> [success: bb4, unwind continue];
    }

    bb4: {
        _11 = move (_12.0: isize);
        _10 = move _11 as i64 (IntToInt);
        StorageDead(_11);
        _8 = Eq(move _9, move _10);
        switchInt(move _8) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_13);
        _13 = reserve::ReserveType::Isolated;
        _0 = Option::<reserve::ReserveType>::Some(move _13);
        StorageDead(_13);
        goto -> bb7;
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_9);
        _0 = Option::<reserve::ReserveType>::None;
        goto -> bb7;
    }

    bb7: {
        StorageDead(_8);
        goto -> bb8;
    }

    bb8: {
        StorageDead(_2);
        return;
    }
}
