digraph Mir_0_493 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn ReserveLiquidity::compound_interest(_1: &amp;ReErased mut state::reserve::ReserveLiquidity, _2: math::rate::Rate, _3: u64, _4: math::rate::Rate) -&gt; std::result::Result&lt;(), solana_program::program_error::ProgramError&gt;<br align="left"/>let _5: math::rate::Rate;<br align="left"/>let mut _6: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;, math::rate::Rate&gt;;<br align="left"/>let mut _7: std::result::Result&lt;math::rate::Rate, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _8: math::rate::Rate;<br align="left"/>let mut _9: isize;<br align="left"/>let _10: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _11: !;<br align="left"/>let mut _12: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let _13: math::rate::Rate;<br align="left"/>let _14: math::rate::Rate;<br align="left"/>let mut _15: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;, math::rate::Rate&gt;;<br align="left"/>let mut _16: std::result::Result&lt;math::rate::Rate, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _17: &amp;ReErased math::rate::Rate;<br align="left"/>let _18: math::rate::Rate;<br align="left"/>let mut _19: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;, math::rate::Rate&gt;;<br align="left"/>let mut _20: std::result::Result&lt;math::rate::Rate, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _21: math::rate::Rate;<br align="left"/>let mut _22: math::rate::Rate;<br align="left"/>let mut _23: isize;<br align="left"/>let _24: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _25: !;<br align="left"/>let mut _26: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let _27: math::rate::Rate;<br align="left"/>let mut _28: u64;<br align="left"/>let mut _29: isize;<br align="left"/>let _30: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _31: !;<br align="left"/>let mut _32: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let _33: math::rate::Rate;<br align="left"/>let mut _34: math::decimal::Decimal;<br align="left"/>let mut _35: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;, math::decimal::Decimal&gt;;<br align="left"/>let mut _36: std::result::Result&lt;math::decimal::Decimal, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _37: math::decimal::Decimal;<br align="left"/>let mut _38: math::rate::Rate;<br align="left"/>let mut _39: isize;<br align="left"/>let _40: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _41: !;<br align="left"/>let mut _42: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let _43: math::decimal::Decimal;<br align="left"/>let _44: math::decimal::Decimal;<br align="left"/>let mut _45: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;, math::decimal::Decimal&gt;;<br align="left"/>let mut _46: std::result::Result&lt;math::decimal::Decimal, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _47: math::decimal::Decimal;<br align="left"/>let mut _48: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;, math::decimal::Decimal&gt;;<br align="left"/>let mut _49: std::result::Result&lt;math::decimal::Decimal, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _50: math::decimal::Decimal;<br align="left"/>let mut _51: math::rate::Rate;<br align="left"/>let mut _52: isize;<br align="left"/>let _53: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _54: !;<br align="left"/>let mut _55: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let _56: math::decimal::Decimal;<br align="left"/>let mut _57: math::decimal::Decimal;<br align="left"/>let mut _58: isize;<br align="left"/>let _59: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _60: !;<br align="left"/>let mut _61: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let _62: math::decimal::Decimal;<br align="left"/>let mut _63: math::decimal::Decimal;<br align="left"/>let mut _64: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;, math::decimal::Decimal&gt;;<br align="left"/>let mut _65: std::result::Result&lt;math::decimal::Decimal, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _66: math::decimal::Decimal;<br align="left"/>let mut _67: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;, math::decimal::Decimal&gt;;<br align="left"/>let mut _68: std::result::Result&lt;math::decimal::Decimal, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _69: math::decimal::Decimal;<br align="left"/>let mut _70: math::rate::Rate;<br align="left"/>let mut _71: isize;<br align="left"/>let _72: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _73: !;<br align="left"/>let mut _74: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let _75: math::decimal::Decimal;<br align="left"/>let mut _76: math::decimal::Decimal;<br align="left"/>let mut _77: isize;<br align="left"/>let _78: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _79: !;<br align="left"/>let mut _80: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let _81: math::decimal::Decimal;<br align="left"/>let mut _82: math::decimal::Decimal;<br align="left"/>let mut _83: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;, math::decimal::Decimal&gt;;<br align="left"/>let mut _84: std::result::Result&lt;math::decimal::Decimal, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _85: math::decimal::Decimal;<br align="left"/>let mut _86: math::decimal::Decimal;<br align="left"/>let mut _87: isize;<br align="left"/>let _88: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _89: !;<br align="left"/>let mut _90: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let _91: math::decimal::Decimal;<br align="left"/>let mut _92: ();<br align="left"/>let mut _93: bool;<br align="left"/>let mut _94: bool;<br align="left"/>let mut _95: bool;<br align="left"/>let mut _96: isize;<br align="left"/>let mut _97: isize;<br align="left"/>let mut _98: isize;<br align="left"/>let mut _99: isize;<br align="left"/>let mut _100: isize;<br align="left"/>let mut _101: isize;<br align="left"/>let mut _102: isize;<br align="left"/>let mut _103: isize;<br align="left"/>let mut _104: isize;<br align="left"/>let mut _105: isize;<br align="left"/>let mut _106: isize;<br align="left"/>let mut _107: isize;<br align="left"/>let mut _108: isize;<br align="left"/>let mut _109: isize;<br align="left"/>let mut _110: isize;<br align="left"/>let mut _111: isize;<br align="left"/>let mut _112: isize;<br align="left"/>let mut _113: isize;<br align="left"/>let mut _114: isize;<br align="left"/>let mut _115: isize;<br align="left"/>let mut _116: isize;<br align="left"/>let mut _117: isize;<br align="left"/>let mut _118: isize;<br align="left"/>let mut _119: isize;<br align="left"/>let mut _120: isize;<br align="left"/>let mut _121: isize;<br align="left"/>let mut _122: isize;<br align="left"/>let mut _123: isize;<br align="left"/>let mut _124: isize;<br align="left"/>let mut _125: isize;<br align="left"/>let mut _126: isize;<br align="left"/>let mut _127: isize;<br align="left"/>let mut _128: isize;<br align="left"/>let mut _129: isize;<br align="left"/>let mut _130: isize;<br align="left"/>let mut _131: isize;<br align="left"/>let mut _132: isize;<br align="left"/>let mut _133: isize;<br align="left"/>let mut _134: isize;<br align="left"/>let mut _135: isize;<br align="left"/>let mut _136: isize;<br align="left"/>let mut _137: isize;<br align="left"/>let mut _138: isize;<br align="left"/>let mut _139: isize;<br align="left"/>let mut _140: isize;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug current_borrow_rate =&gt; _2;<br align="left"/>debug slots_elapsed =&gt; _3;<br align="left"/>debug take_rate =&gt; _4;<br align="left"/>debug slot_interest_rate =&gt; _5;<br align="left"/>debug residual =&gt; _10;<br align="left"/>debug val =&gt; _13;<br align="left"/>debug compounded_interest_rate =&gt; _14;<br align="left"/>debug residual =&gt; _24;<br align="left"/>debug val =&gt; _27;<br align="left"/>debug residual =&gt; _30;<br align="left"/>debug val =&gt; _33;<br align="left"/>debug residual =&gt; _40;<br align="left"/>debug val =&gt; _43;<br align="left"/>debug net_new_debt =&gt; _44;<br align="left"/>debug residual =&gt; _53;<br align="left"/>debug val =&gt; _56;<br align="left"/>debug residual =&gt; _59;<br align="left"/>debug val =&gt; _62;<br align="left"/>debug residual =&gt; _72;<br align="left"/>debug val =&gt; _75;<br align="left"/>debug residual =&gt; _78;<br align="left"/>debug val =&gt; _81;<br align="left"/>debug residual =&gt; _88;<br align="left"/>debug val =&gt; _91;<br align="left"/>>;
    bb0__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_95 = const false<br/>_94 = const false<br/>_93 = const false<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = _2<br/></td></tr><tr><td align="left">_7 = &lt;rate::Rate as common::TryDiv&lt;u64&gt;&gt;::try_div(move _8, const _)</td></tr></table>>];
    bb1__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/></td></tr><tr><td align="left">_6 = &lt;Result&lt;rate::Rate, ProgramError&gt; as Try&gt;::branch(move _7)</td></tr></table>>];
    bb2__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>_9 = discriminant(_6)<br/></td></tr><tr><td align="left">switchInt(move _9)</td></tr></table>>];
    bb3__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_13)<br/>_13 = ((_6 as Continue).0: math::rate::Rate)<br/>_5 = _13<br/>StorageDead(_13)<br/>_96 = discriminant(_6)<br/>StorageDead(_6)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/></td></tr><tr><td align="left">_21 = rate::Rate::one()</td></tr></table>>];
    bb4__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_10)<br/>_10 = move ((_6 as Break).0: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;)<br/>StorageLive(_12)<br/>_12 = move _10<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;(), ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, ProgramError&gt;&gt;&gt;::from_residual(move _12)</td></tr></table>>];
    bb6__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_10)<br/>_130 = discriminant(_6)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageLive(_22)<br/>_22 = _5<br/></td></tr><tr><td align="left">_20 = &lt;rate::Rate as common::TryAdd&gt;::try_add(move _21, move _22)</td></tr></table>>];
    bb8__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_22)<br/>StorageDead(_21)<br/></td></tr><tr><td align="left">_19 = &lt;Result&lt;rate::Rate, ProgramError&gt; as Try&gt;::branch(move _20)</td></tr></table>>];
    bb9__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">_95 = const true<br/>StorageDead(_20)<br/>_23 = discriminant(_19)<br/></td></tr><tr><td align="left">switchInt(move _23)</td></tr></table>>];
    bb10__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_27)<br/>_27 = ((_19 as Continue).0: math::rate::Rate)<br/>_18 = _27<br/>StorageDead(_27)<br/>_17 = &amp;_18<br/>StorageLive(_28)<br/>_28 = _3<br/></td></tr><tr><td align="left">_16 = rate::Rate::try_pow(move _17, move _28)</td></tr></table>>];
    bb11__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_24)<br/>_24 = move ((_19 as Break).0: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;)<br/>StorageLive(_26)<br/>_26 = move _24<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;(), ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, ProgramError&gt;&gt;&gt;::from_residual(move _26)</td></tr></table>>];
    bb12__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>StorageDead(_24)<br/>StorageDead(_17)<br/>StorageDead(_16)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>StorageDead(_17)<br/></td></tr><tr><td align="left">_15 = &lt;Result&lt;rate::Rate, ProgramError&gt; as Try&gt;::branch(move _16)</td></tr></table>>];
    bb14__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>_29 = discriminant(_15)<br/></td></tr><tr><td align="left">switchInt(move _29)</td></tr></table>>];
    bb15__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_33)<br/>_33 = ((_15 as Continue).0: math::rate::Rate)<br/>_14 = _33<br/>StorageDead(_33)<br/>_98 = discriminant(_15)<br/>_100 = discriminant(_19)<br/>_95 = const false<br/>StorageDead(_19)<br/>StorageDead(_18)<br/>StorageDead(_15)<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>_37 = ((*_1).7: math::decimal::Decimal)<br/>StorageLive(_38)<br/>_38 = _14<br/></td></tr><tr><td align="left">_36 = &lt;decimal::Decimal as common::TryMul&lt;rate::Rate&gt;&gt;::try_mul(move _37, move _38)</td></tr></table>>];
    bb16__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageLive(_30)<br/>_30 = move ((_15 as Break).0: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;)<br/>StorageLive(_32)<br/>_32 = move _30<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;(), ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, ProgramError&gt;&gt;&gt;::from_residual(move _32)</td></tr></table>>];
    bb17__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_32)<br/>StorageDead(_30)<br/>_126 = discriminant(_15)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_38)<br/>StorageDead(_37)<br/></td></tr><tr><td align="left">_35 = &lt;Result&lt;decimal::Decimal, ProgramError&gt; as Try&gt;::branch(move _36)</td></tr></table>>];
    bb19__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_36)<br/>_39 = discriminant(_35)<br/></td></tr><tr><td align="left">switchInt(move _39)</td></tr></table>>];
    bb20__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageLive(_43)<br/>_43 = ((_35 as Continue).0: math::decimal::Decimal)<br/>_34 = _43<br/>StorageDead(_43)<br/>((*_1).7: math::decimal::Decimal) = move _34<br/>StorageDead(_34)<br/>_102 = discriminant(_35)<br/>StorageDead(_35)<br/>StorageLive(_44)<br/>StorageLive(_45)<br/>StorageLive(_46)<br/>StorageLive(_47)<br/>StorageLive(_48)<br/>StorageLive(_49)<br/>StorageLive(_50)<br/>_50 = ((*_1).6: math::decimal::Decimal)<br/>StorageLive(_51)<br/>_51 = _14<br/></td></tr><tr><td align="left">_49 = &lt;decimal::Decimal as common::TryMul&lt;rate::Rate&gt;&gt;::try_mul(move _50, move _51)</td></tr></table>>];
    bb21__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageLive(_40)<br/>_40 = move ((_35 as Break).0: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;)<br/>StorageLive(_42)<br/>_42 = move _40<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;(), ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, ProgramError&gt;&gt;&gt;::from_residual(move _42)</td></tr></table>>];
    bb22__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_42)<br/>StorageDead(_40)<br/>StorageDead(_34)<br/>_124 = discriminant(_35)<br/>StorageDead(_35)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb23__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_51)<br/>StorageDead(_50)<br/></td></tr><tr><td align="left">_48 = &lt;Result&lt;decimal::Decimal, ProgramError&gt; as Try&gt;::branch(move _49)</td></tr></table>>];
    bb24__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">_94 = const true<br/>StorageDead(_49)<br/>_52 = discriminant(_48)<br/></td></tr><tr><td align="left">switchInt(move _52)</td></tr></table>>];
    bb25__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageLive(_56)<br/>_56 = ((_48 as Continue).0: math::decimal::Decimal)<br/>_47 = _56<br/>StorageDead(_56)<br/>StorageLive(_57)<br/>_57 = ((*_1).6: math::decimal::Decimal)<br/></td></tr><tr><td align="left">_46 = &lt;decimal::Decimal as common::TrySub&gt;::try_sub(move _47, move _57)</td></tr></table>>];
    bb26__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageLive(_53)<br/>_53 = move ((_48 as Break).0: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;)<br/>StorageLive(_55)<br/>_55 = move _53<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;(), ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, ProgramError&gt;&gt;&gt;::from_residual(move _55)</td></tr></table>>];
    bb27__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_55)<br/>StorageDead(_53)<br/>StorageDead(_47)<br/>StorageDead(_46)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb28__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_57)<br/>StorageDead(_47)<br/></td></tr><tr><td align="left">_45 = &lt;Result&lt;decimal::Decimal, ProgramError&gt; as Try&gt;::branch(move _46)</td></tr></table>>];
    bb29__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_46)<br/>_58 = discriminant(_45)<br/></td></tr><tr><td align="left">switchInt(move _58)</td></tr></table>>];
    bb30__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageLive(_62)<br/>_62 = ((_45 as Continue).0: math::decimal::Decimal)<br/>_44 = _62<br/>StorageDead(_62)<br/>_104 = discriminant(_45)<br/>_106 = discriminant(_48)<br/>_94 = const false<br/>StorageDead(_48)<br/>StorageDead(_45)<br/>StorageLive(_63)<br/>StorageLive(_64)<br/>StorageLive(_65)<br/>StorageLive(_66)<br/>StorageLive(_67)<br/>StorageLive(_68)<br/>StorageLive(_69)<br/>_69 = _44<br/>StorageLive(_70)<br/>_70 = _4<br/></td></tr><tr><td align="left">_68 = &lt;decimal::Decimal as common::TryMul&lt;rate::Rate&gt;&gt;::try_mul(move _69, move _70)</td></tr></table>>];
    bb31__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageLive(_59)<br/>_59 = move ((_45 as Break).0: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;)<br/>StorageLive(_61)<br/>_61 = move _59<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;(), ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, ProgramError&gt;&gt;&gt;::from_residual(move _61)</td></tr></table>>];
    bb32__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageDead(_61)<br/>StorageDead(_59)<br/>_120 = discriminant(_45)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb33__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageDead(_70)<br/>StorageDead(_69)<br/></td></tr><tr><td align="left">_67 = &lt;Result&lt;decimal::Decimal, ProgramError&gt; as Try&gt;::branch(move _68)</td></tr></table>>];
    bb34__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">_93 = const true<br/>StorageDead(_68)<br/>_71 = discriminant(_67)<br/></td></tr><tr><td align="left">switchInt(move _71)</td></tr></table>>];
    bb35__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageLive(_75)<br/>_75 = ((_67 as Continue).0: math::decimal::Decimal)<br/>_66 = _75<br/>StorageDead(_75)<br/>StorageLive(_76)<br/>_76 = ((*_1).8: math::decimal::Decimal)<br/></td></tr><tr><td align="left">_65 = &lt;decimal::Decimal as common::TryAdd&gt;::try_add(move _66, move _76)</td></tr></table>>];
    bb36__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageLive(_72)<br/>_72 = move ((_67 as Break).0: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;)<br/>StorageLive(_74)<br/>_74 = move _72<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;(), ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, ProgramError&gt;&gt;&gt;::from_residual(move _74)</td></tr></table>>];
    bb37__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageDead(_74)<br/>StorageDead(_72)<br/>StorageDead(_66)<br/>StorageDead(_65)<br/>StorageDead(_63)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb38__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageDead(_76)<br/>StorageDead(_66)<br/></td></tr><tr><td align="left">_64 = &lt;Result&lt;decimal::Decimal, ProgramError&gt; as Try&gt;::branch(move _65)</td></tr></table>>];
    bb39__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageDead(_65)<br/>_77 = discriminant(_64)<br/></td></tr><tr><td align="left">switchInt(move _77)</td></tr></table>>];
    bb40__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">StorageLive(_81)<br/>_81 = ((_64 as Continue).0: math::decimal::Decimal)<br/>_63 = _81<br/>StorageDead(_81)<br/>((*_1).8: math::decimal::Decimal) = move _63<br/>StorageDead(_63)<br/>_108 = discriminant(_64)<br/>_110 = discriminant(_67)<br/>_93 = const false<br/>StorageDead(_67)<br/>StorageDead(_64)<br/>StorageLive(_82)<br/>StorageLive(_83)<br/>StorageLive(_84)<br/>StorageLive(_85)<br/>_85 = ((*_1).6: math::decimal::Decimal)<br/>StorageLive(_86)<br/>_86 = _44<br/></td></tr><tr><td align="left">_84 = &lt;decimal::Decimal as common::TryAdd&gt;::try_add(move _85, move _86)</td></tr></table>>];
    bb41__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">StorageLive(_78)<br/>_78 = move ((_64 as Break).0: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;)<br/>StorageLive(_80)<br/>_80 = move _78<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;(), ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, ProgramError&gt;&gt;&gt;::from_residual(move _80)</td></tr></table>>];
    bb42__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageDead(_80)<br/>StorageDead(_78)<br/>StorageDead(_63)<br/>_116 = discriminant(_64)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb43__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageDead(_86)<br/>StorageDead(_85)<br/></td></tr><tr><td align="left">_83 = &lt;Result&lt;decimal::Decimal, ProgramError&gt; as Try&gt;::branch(move _84)</td></tr></table>>];
    bb44__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">StorageDead(_84)<br/>_87 = discriminant(_83)<br/></td></tr><tr><td align="left">switchInt(move _87)</td></tr></table>>];
    bb45__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">StorageLive(_91)<br/>_91 = ((_83 as Continue).0: math::decimal::Decimal)<br/>_82 = _91<br/>StorageDead(_91)<br/>((*_1).6: math::decimal::Decimal) = move _82<br/>StorageDead(_82)<br/>_112 = discriminant(_83)<br/>StorageDead(_83)<br/>StorageLive(_92)<br/>_92 = ()<br/>_0 = Result::&lt;(), ProgramError&gt;::Ok(move _92)<br/>StorageDead(_92)<br/>StorageDead(_44)<br/>StorageDead(_14)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb46__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">StorageLive(_88)<br/>_88 = move ((_83 as Break).0: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;)<br/>StorageLive(_90)<br/>_90 = move _88<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;(), ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, ProgramError&gt;&gt;&gt;::from_residual(move _90)</td></tr></table>>];
    bb47__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left" balign="left">StorageDead(_90)<br/>StorageDead(_88)<br/>StorageDead(_82)<br/>_114 = discriminant(_83)<br/>StorageDead(_83)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb48__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left" balign="left">_118 = discriminant(_67)<br/>_93 = const false<br/>StorageDead(_67)<br/>StorageDead(_64)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb49__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left" balign="left">_122 = discriminant(_48)<br/>_94 = const false<br/>StorageDead(_48)<br/>StorageDead(_45)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb50__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">50</td></tr><tr><td align="left" balign="left">StorageDead(_44)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb51__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">51</td></tr><tr><td align="left" balign="left">_128 = discriminant(_19)<br/>_95 = const false<br/>StorageDead(_19)<br/>StorageDead(_18)<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb52__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">52</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb53__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">53</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb54__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">54</td></tr><tr><td align="left">return</td></tr></table>>];
    bb55__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">55 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb56__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">56 (cleanup)</td></tr><tr><td align="left" balign="left">_132 = discriminant(_83)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb57__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">57 (cleanup)</td></tr><tr><td align="left" balign="left">_133 = discriminant(_64)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb58__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">58 (cleanup)</td></tr><tr><td align="left" balign="left">_134 = discriminant(_67)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb59__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">59 (cleanup)</td></tr><tr><td align="left" balign="left">_135 = discriminant(_45)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb60__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">60 (cleanup)</td></tr><tr><td align="left" balign="left">_136 = discriminant(_48)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb61__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">61 (cleanup)</td></tr><tr><td align="left" balign="left">_137 = discriminant(_35)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb62__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">62 (cleanup)</td></tr><tr><td align="left" balign="left">_138 = discriminant(_15)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb63__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">63 (cleanup)</td></tr><tr><td align="left" balign="left">_139 = discriminant(_19)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb64__0_493 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">64 (cleanup)</td></tr><tr><td align="left" balign="left">_140 = discriminant(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_493 -> bb1__0_493 [label="return"];
    bb1__0_493 -> bb2__0_493 [label="return"];
    bb1__0_493 -> bb55__0_493 [label="unwind"];
    bb2__0_493 -> bb3__0_493 [label="0"];
    bb2__0_493 -> bb5__0_493 [label="1"];
    bb2__0_493 -> bb4__0_493 [label="otherwise"];
    bb3__0_493 -> bb7__0_493 [label="return"];
    bb5__0_493 -> bb6__0_493 [label="return"];
    bb5__0_493 -> bb64__0_493 [label="unwind"];
    bb6__0_493 -> bb53__0_493 [label=""];
    bb7__0_493 -> bb8__0_493 [label="return"];
    bb8__0_493 -> bb9__0_493 [label="return"];
    bb8__0_493 -> bb55__0_493 [label="unwind"];
    bb9__0_493 -> bb10__0_493 [label="0"];
    bb9__0_493 -> bb11__0_493 [label="1"];
    bb9__0_493 -> bb4__0_493 [label="otherwise"];
    bb10__0_493 -> bb13__0_493 [label="return"];
    bb10__0_493 -> bb63__0_493 [label="unwind"];
    bb11__0_493 -> bb12__0_493 [label="return"];
    bb11__0_493 -> bb63__0_493 [label="unwind"];
    bb12__0_493 -> bb51__0_493 [label=""];
    bb13__0_493 -> bb14__0_493 [label="return"];
    bb13__0_493 -> bb63__0_493 [label="unwind"];
    bb14__0_493 -> bb15__0_493 [label="0"];
    bb14__0_493 -> bb16__0_493 [label="1"];
    bb14__0_493 -> bb4__0_493 [label="otherwise"];
    bb15__0_493 -> bb18__0_493 [label="return"];
    bb16__0_493 -> bb17__0_493 [label="return"];
    bb16__0_493 -> bb62__0_493 [label="unwind"];
    bb17__0_493 -> bb51__0_493 [label=""];
    bb18__0_493 -> bb19__0_493 [label="return"];
    bb18__0_493 -> bb55__0_493 [label="unwind"];
    bb19__0_493 -> bb20__0_493 [label="0"];
    bb19__0_493 -> bb21__0_493 [label="1"];
    bb19__0_493 -> bb4__0_493 [label="otherwise"];
    bb20__0_493 -> bb23__0_493 [label="return"];
    bb21__0_493 -> bb22__0_493 [label="return"];
    bb21__0_493 -> bb61__0_493 [label="unwind"];
    bb22__0_493 -> bb52__0_493 [label=""];
    bb23__0_493 -> bb24__0_493 [label="return"];
    bb23__0_493 -> bb55__0_493 [label="unwind"];
    bb24__0_493 -> bb25__0_493 [label="0"];
    bb24__0_493 -> bb26__0_493 [label="1"];
    bb24__0_493 -> bb4__0_493 [label="otherwise"];
    bb25__0_493 -> bb28__0_493 [label="return"];
    bb25__0_493 -> bb60__0_493 [label="unwind"];
    bb26__0_493 -> bb27__0_493 [label="return"];
    bb26__0_493 -> bb60__0_493 [label="unwind"];
    bb27__0_493 -> bb49__0_493 [label=""];
    bb28__0_493 -> bb29__0_493 [label="return"];
    bb28__0_493 -> bb60__0_493 [label="unwind"];
    bb29__0_493 -> bb30__0_493 [label="0"];
    bb29__0_493 -> bb31__0_493 [label="1"];
    bb29__0_493 -> bb4__0_493 [label="otherwise"];
    bb30__0_493 -> bb33__0_493 [label="return"];
    bb31__0_493 -> bb32__0_493 [label="return"];
    bb31__0_493 -> bb59__0_493 [label="unwind"];
    bb32__0_493 -> bb49__0_493 [label=""];
    bb33__0_493 -> bb34__0_493 [label="return"];
    bb33__0_493 -> bb55__0_493 [label="unwind"];
    bb34__0_493 -> bb35__0_493 [label="0"];
    bb34__0_493 -> bb36__0_493 [label="1"];
    bb34__0_493 -> bb4__0_493 [label="otherwise"];
    bb35__0_493 -> bb38__0_493 [label="return"];
    bb35__0_493 -> bb58__0_493 [label="unwind"];
    bb36__0_493 -> bb37__0_493 [label="return"];
    bb36__0_493 -> bb58__0_493 [label="unwind"];
    bb37__0_493 -> bb48__0_493 [label=""];
    bb38__0_493 -> bb39__0_493 [label="return"];
    bb38__0_493 -> bb58__0_493 [label="unwind"];
    bb39__0_493 -> bb40__0_493 [label="0"];
    bb39__0_493 -> bb41__0_493 [label="1"];
    bb39__0_493 -> bb4__0_493 [label="otherwise"];
    bb40__0_493 -> bb43__0_493 [label="return"];
    bb41__0_493 -> bb42__0_493 [label="return"];
    bb41__0_493 -> bb57__0_493 [label="unwind"];
    bb42__0_493 -> bb48__0_493 [label=""];
    bb43__0_493 -> bb44__0_493 [label="return"];
    bb43__0_493 -> bb55__0_493 [label="unwind"];
    bb44__0_493 -> bb45__0_493 [label="0"];
    bb44__0_493 -> bb46__0_493 [label="1"];
    bb44__0_493 -> bb4__0_493 [label="otherwise"];
    bb45__0_493 -> bb54__0_493 [label=""];
    bb46__0_493 -> bb47__0_493 [label="return"];
    bb46__0_493 -> bb56__0_493 [label="unwind"];
    bb47__0_493 -> bb50__0_493 [label=""];
    bb48__0_493 -> bb50__0_493 [label=""];
    bb49__0_493 -> bb50__0_493 [label=""];
    bb50__0_493 -> bb52__0_493 [label=""];
    bb51__0_493 -> bb52__0_493 [label=""];
    bb52__0_493 -> bb53__0_493 [label=""];
    bb53__0_493 -> bb54__0_493 [label=""];
    bb56__0_493 -> bb55__0_493 [label=""];
    bb57__0_493 -> bb58__0_493 [label=""];
    bb58__0_493 -> bb55__0_493 [label=""];
    bb59__0_493 -> bb60__0_493 [label=""];
    bb60__0_493 -> bb55__0_493 [label=""];
    bb61__0_493 -> bb55__0_493 [label=""];
    bb62__0_493 -> bb63__0_493 [label=""];
    bb63__0_493 -> bb55__0_493 [label=""];
    bb64__0_493 -> bb55__0_493 [label=""];
}
