// MIR for `reserve::<impl at token-lending\sdk\src\state\reserve.rs:45:24: 45:31>::default` after PreCodegen

fn reserve::<impl at token-lending\sdk\src\state\reserve.rs:45:24: 45:31>::default() -> reserve::Reserve {
    let mut _0: state::reserve::Reserve;
    let mut _1: u8;
    let mut _2: state::last_update::LastUpdate;
    let mut _3: solana_program::pubkey::Pubkey;
    let mut _4: state::reserve::ReserveLiquidity;
    let mut _5: state::reserve::ReserveCollateral;
    let mut _6: state::reserve::ReserveConfig;
    let mut _7: state::rate_limiter::RateLimiter;
    let mut _8: math::decimal::Decimal;

    bb0: {
        StorageLive(_1);
        _1 = <u8 as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_2);
        _2 = <last_update::LastUpdate as Default>::default() -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageLive(_3);
        _3 = <Pubkey as Default>::default() -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageLive(_4);
        _4 = <ReserveLiquidity as Default>::default() -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageLive(_5);
        _5 = <ReserveCollateral as Default>::default() -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageLive(_6);
        _6 = <reserve::ReserveConfig as Default>::default() -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageLive(_7);
        _7 = <rate_limiter::RateLimiter as Default>::default() -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageLive(_8);
        _8 = <decimal::Decimal as Default>::default() -> [return: bb8, unwind continue];
    }

    bb8: {
        _0 = reserve::Reserve { version: move _1, last_update: move _2, lending_market: move _3, liquidity: move _4, collateral: move _5, config: move _6, rate_limiter: move _7, attributed_borrow_value: move _8 };
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}
