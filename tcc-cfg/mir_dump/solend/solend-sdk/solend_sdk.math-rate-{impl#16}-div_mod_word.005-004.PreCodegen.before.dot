digraph Mir_0_1393 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn U128::div_mod_word(_1: u64, _2: u64, _3: u64) -&gt; (u64, u64)<br align="left"/>let _4: ();<br align="left"/>let mut _5: bool;<br align="left"/>let _6: ();<br align="left"/>let mut _7: bool;<br align="left"/>let mut _8: u64;<br align="left"/>let mut _9: u64;<br align="left"/>let mut _10: !;<br align="left"/>let _11: u32;<br align="left"/>let mut _12: u64;<br align="left"/>let _13: u64;<br align="left"/>let mut _14: u64;<br align="left"/>let mut _15: u32;<br align="left"/>let mut _16: bool;<br align="left"/>let _17: u64;<br align="left"/>let _18: u64;<br align="left"/>let mut _19: (u64, u64);<br align="left"/>let mut _20: u64;<br align="left"/>let _21: u64;<br align="left"/>let mut _22: u64;<br align="left"/>let mut _23: u64;<br align="left"/>let mut _24: u32;<br align="left"/>let mut _25: bool;<br align="left"/>let mut _26: u64;<br align="left"/>let mut _27: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _28: u64;<br align="left"/>let mut _29: u32;<br align="left"/>let mut _30: u32;<br align="left"/>let mut _31: (u32, bool);<br align="left"/>let _32: u64;<br align="left"/>let mut _33: u64;<br align="left"/>let mut _34: u32;<br align="left"/>let mut _35: bool;<br align="left"/>let _36: u64;<br align="left"/>let _37: u64;<br align="left"/>let mut _38: (u64, u64);<br align="left"/>let mut _39: u64;<br align="left"/>let mut _40: u64;<br align="left"/>let mut _41: u64;<br align="left"/>let mut _42: u64;<br align="left"/>let mut _43: bool;<br align="left"/>let mut _44: u64;<br align="left"/>let mut _45: u64;<br align="left"/>let mut _46: u64;<br align="left"/>let mut _47: u64;<br align="left"/>let mut _48: u64;<br align="left"/>let mut _49: (u64, bool);<br align="left"/>let mut _50: (u64, bool);<br align="left"/>let _51: ();<br align="left"/>let mut _52: ();<br align="left"/>let mut _53: bool;<br align="left"/>let mut _54: u64;<br align="left"/>let mut _55: bool;<br align="left"/>let mut _56: u64;<br align="left"/>let mut _57: u64;<br align="left"/>let mut _58: u64;<br align="left"/>let mut _59: (u64, bool);<br align="left"/>let mut _60: u64;<br align="left"/>let mut _61: u64;<br align="left"/>let mut _62: u64;<br align="left"/>let mut _63: (u64, bool);<br align="left"/>let mut _64: u64;<br align="left"/>let mut _65: (u64, bool);<br align="left"/>let mut _66: (u64, bool);<br align="left"/>let mut _67: u64;<br align="left"/>let mut _68: (u64, bool);<br align="left"/>let mut _69: bool;<br align="left"/>let mut _70: u64;<br align="left"/>let mut _71: !;<br align="left"/>let mut _72: !;<br align="left"/>let _73: ();<br align="left"/>let mut _74: !;<br align="left"/>let _75: u64;<br align="left"/>let mut _76: u64;<br align="left"/>let mut _77: u64;<br align="left"/>let mut _78: u64;<br align="left"/>let mut _79: u64;<br align="left"/>let mut _80: u64;<br align="left"/>let mut _81: u64;<br align="left"/>let mut _82: u64;<br align="left"/>let mut _83: u64;<br align="left"/>let mut _84: u64;<br align="left"/>let mut _85: u64;<br align="left"/>let mut _86: bool;<br align="left"/>let mut _87: u64;<br align="left"/>let mut _88: u64;<br align="left"/>let mut _89: u64;<br align="left"/>let mut _90: u64;<br align="left"/>let mut _91: u64;<br align="left"/>let _92: ();<br align="left"/>let mut _93: bool;<br align="left"/>let mut _94: u64;<br align="left"/>let mut _95: bool;<br align="left"/>let mut _96: u64;<br align="left"/>let mut _97: u64;<br align="left"/>let mut _98: u64;<br align="left"/>let mut _99: (u64, bool);<br align="left"/>let mut _100: u64;<br align="left"/>let mut _101: u64;<br align="left"/>let mut _102: u64;<br align="left"/>let mut _103: (u64, bool);<br align="left"/>let mut _104: u64;<br align="left"/>let mut _105: (u64, bool);<br align="left"/>let mut _106: (u64, bool);<br align="left"/>let mut _107: u64;<br align="left"/>let mut _108: (u64, bool);<br align="left"/>let mut _109: bool;<br align="left"/>let mut _110: u64;<br align="left"/>let mut _111: !;<br align="left"/>let mut _112: !;<br align="left"/>let _113: ();<br align="left"/>let mut _114: !;<br align="left"/>let _115: u64;<br align="left"/>let mut _116: u64;<br align="left"/>let mut _117: u64;<br align="left"/>let mut _118: u64;<br align="left"/>let mut _119: u64;<br align="left"/>let mut _120: u64;<br align="left"/>let mut _121: u64;<br align="left"/>let mut _122: u64;<br align="left"/>let mut _123: u64;<br align="left"/>let mut _124: u64;<br align="left"/>let mut _125: u64;<br align="left"/>let mut _126: (u64, bool);<br align="left"/>let mut _127: u64;<br align="left"/>let mut _128: (u64, bool);<br align="left"/>let mut _129: u64;<br align="left"/>let mut _130: u64;<br align="left"/>let mut _131: u32;<br align="left"/>let mut _132: bool;<br align="left"/>debug hi =&gt; _1;<br align="left"/>debug lo =&gt; _2;<br align="left"/>debug y =&gt; _3;<br align="left"/>debug s =&gt; _11;<br align="left"/>debug y =&gt; _13;<br align="left"/>debug yn1 =&gt; _17;<br align="left"/>debug yn0 =&gt; _18;<br align="left"/>debug un32 =&gt; _21;<br align="left"/>debug un10 =&gt; _32;<br align="left"/>debug un1 =&gt; _36;<br align="left"/>debug un0 =&gt; _37;<br align="left"/>debug q1 =&gt; _40;<br align="left"/>debug rhat =&gt; _44;<br align="left"/>debug un21 =&gt; _75;<br align="left"/>debug q0 =&gt; _83;<br align="left"/>debug rem =&gt; _115;<br align="left"/>>;
    bb0__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = const true<br/></td></tr><tr><td align="left">switchInt(move _5)</td></tr></table>>];
    bb1__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = _1<br/>StorageLive(_9)<br/>_9 = _3<br/>_7 = Lt(move _8, move _9)<br/></td></tr><tr><td align="left">switchInt(move _7)</td></tr></table>>];
    bb2__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_8)<br/>_6 = const ()<br/>StorageDead(_7)<br/>StorageDead(_6)<br/>_4 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb3__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_8)<br/>StorageLive(_10)<br/></td></tr><tr><td align="left">_10 = panic(const &quot;assertion failed: hi &lt; y&quot;)</td></tr></table>>];
    bb4__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_4 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb5__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageDead(_4)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>_12 = _3<br/></td></tr><tr><td align="left">_11 = core::num::&lt;impl u64&gt;::leading_zeros(move _12)</td></tr></table>>];
    bb6__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>_14 = _3<br/>StorageLive(_15)<br/>_15 = _11<br/>_16 = Lt(_15, const 64_u32)<br/></td></tr><tr><td align="left">assert(move _16, &quot;attempt to shift left by `{}`, which would overflow&quot;, _15)</td></tr></table>>];
    bb7__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_13 = Shl(move _14, move _15)<br/>StorageDead(_15)<br/>StorageDead(_14)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>_20 = _13<br/></td></tr><tr><td align="left">_19 = U128::split(move _20)</td></tr></table>>];
    bb8__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageLive(_17)<br/>_17 = (_19.0: u64)<br/>StorageLive(_18)<br/>_18 = (_19.1: u64)<br/>StorageDead(_19)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>_23 = _1<br/>StorageLive(_24)<br/>_24 = _11<br/>_25 = Lt(_24, const 64_u32)<br/></td></tr><tr><td align="left">assert(move _25, &quot;attempt to shift left by `{}`, which would overflow&quot;, _24)</td></tr></table>>];
    bb9__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">_22 = Shl(move _23, move _24)<br/>StorageDead(_24)<br/>StorageDead(_23)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>_28 = _2<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>_30 = _11<br/>_31 = CheckedSub(const 64_u32, _30)<br/></td></tr><tr><td align="left">assert(!move (_31.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, const 64_u32, move _30)</td></tr></table>>];
    bb10__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">_29 = move (_31.0: u32)<br/>StorageDead(_30)<br/></td></tr><tr><td align="left">_27 = core::num::&lt;impl u64&gt;::checked_shr(move _28, move _29)</td></tr></table>>];
    bb11__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>StorageDead(_28)<br/></td></tr><tr><td align="left">_26 = Option::&lt;u64&gt;::unwrap_or(move _27, const 0_u64)</td></tr></table>>];
    bb12__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>_21 = BitOr(move _22, move _26)<br/>StorageDead(_26)<br/>StorageDead(_22)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>_33 = _2<br/>StorageLive(_34)<br/>_34 = _11<br/>_35 = Lt(_34, const 64_u32)<br/></td></tr><tr><td align="left">assert(move _35, &quot;attempt to shift left by `{}`, which would overflow&quot;, _34)</td></tr></table>>];
    bb13__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">_32 = Shl(move _33, move _34)<br/>StorageDead(_34)<br/>StorageDead(_33)<br/>StorageLive(_38)<br/>StorageLive(_39)<br/>_39 = _32<br/></td></tr><tr><td align="left">_38 = U128::split(move _39)</td></tr></table>>];
    bb14__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_39)<br/>StorageLive(_36)<br/>_36 = (_38.0: u64)<br/>StorageLive(_37)<br/>_37 = (_38.1: u64)<br/>StorageDead(_38)<br/>StorageLive(_40)<br/>StorageLive(_41)<br/>_41 = _21<br/>StorageLive(_42)<br/>_42 = _17<br/>_43 = Eq(_42, const 0_u64)<br/></td></tr><tr><td align="left">assert(!move _43, &quot;attempt to divide `{}` by zero&quot;, _41)</td></tr></table>>];
    bb15__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">_40 = Div(move _41, move _42)<br/>StorageDead(_42)<br/>StorageDead(_41)<br/>StorageLive(_44)<br/>StorageLive(_45)<br/>_45 = _21<br/>StorageLive(_46)<br/>StorageLive(_47)<br/>_47 = _40<br/>StorageLive(_48)<br/>_48 = _17<br/>_49 = CheckedMul(_47, _48)<br/></td></tr><tr><td align="left">assert(!move (_49.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, move _47, move _48)</td></tr></table>>];
    bb16__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">_46 = move (_49.0: u64)<br/>StorageDead(_48)<br/>StorageDead(_47)<br/>_50 = CheckedSub(_45, _46)<br/></td></tr><tr><td align="left">assert(!move (_50.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, move _45, move _46)</td></tr></table>>];
    bb17__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">_44 = move (_50.0: u64)<br/>StorageDead(_46)<br/>StorageDead(_45)<br/>StorageLive(_51)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageLive(_53)<br/>StorageLive(_54)<br/>_54 = _40<br/>_53 = Ge(move _54, const _)<br/></td></tr><tr><td align="left">switchInt(move _53)</td></tr></table>>];
    bb19__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_54)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_54)<br/>StorageLive(_55)<br/>StorageLive(_56)<br/>StorageLive(_57)<br/>_57 = _40<br/>StorageLive(_58)<br/>_58 = _18<br/>_59 = CheckedMul(_57, _58)<br/></td></tr><tr><td align="left">assert(!move (_59.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, move _57, move _58)</td></tr></table>>];
    bb21__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">_56 = move (_59.0: u64)<br/>StorageDead(_58)<br/>StorageDead(_57)<br/>StorageLive(_60)<br/>StorageLive(_61)<br/>StorageLive(_62)<br/>_62 = _44<br/>_63 = CheckedMul(const _, _62)<br/></td></tr><tr><td align="left">assert(!move (_63.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, const _, move _62)</td></tr></table>>];
    bb22__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">_61 = move (_63.0: u64)<br/>StorageDead(_62)<br/>StorageLive(_64)<br/>_64 = _36<br/>_65 = CheckedAdd(_61, _64)<br/></td></tr><tr><td align="left">assert(!move (_65.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _61, move _64)</td></tr></table>>];
    bb23__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">_60 = move (_65.0: u64)<br/>StorageDead(_64)<br/>StorageDead(_61)<br/>_55 = Gt(move _56, move _60)<br/></td></tr><tr><td align="left">switchInt(move _55)</td></tr></table>>];
    bb24__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_60)<br/>StorageDead(_56)<br/>_66 = CheckedSub(_40, const 1_u64)<br/></td></tr><tr><td align="left">assert(!move (_66.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, _40, const 1_u64)</td></tr></table>>];
    bb25__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">_40 = move (_66.0: u64)<br/>StorageLive(_67)<br/>_67 = _17<br/>_68 = CheckedAdd(_44, _67)<br/></td></tr><tr><td align="left">assert(!move (_68.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, _44, move _67)</td></tr></table>>];
    bb26__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">_44 = move (_68.0: u64)<br/>StorageDead(_67)<br/>StorageLive(_69)<br/>StorageLive(_70)<br/>_70 = _44<br/>_69 = Ge(move _70, const _)<br/></td></tr><tr><td align="left">switchInt(move _69)</td></tr></table>>];
    bb27__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_70)<br/>_51 = const ()<br/>StorageDead(_69)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb28__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_70)<br/>_52 = const ()<br/>StorageDead(_69)<br/>StorageDead(_55)<br/>StorageDead(_53)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb29__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_60)<br/>StorageDead(_56)<br/>StorageLive(_73)<br/>_51 = const ()<br/>StorageDead(_73)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb30__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_55)<br/>StorageDead(_53)<br/>StorageDead(_51)<br/>StorageLive(_75)<br/>StorageLive(_76)<br/>StorageLive(_77)<br/>StorageLive(_78)<br/>_78 = _21<br/></td></tr><tr><td align="left">_77 = core::num::&lt;impl u64&gt;::wrapping_mul(move _78, const _)</td></tr></table>>];
    bb31__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageDead(_78)<br/>StorageLive(_79)<br/>_79 = _36<br/></td></tr><tr><td align="left">_76 = core::num::&lt;impl u64&gt;::wrapping_add(move _77, move _79)</td></tr></table>>];
    bb32__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageDead(_79)<br/>StorageDead(_77)<br/>StorageLive(_80)<br/>StorageLive(_81)<br/>_81 = _40<br/>StorageLive(_82)<br/>_82 = _13<br/></td></tr><tr><td align="left">_80 = core::num::&lt;impl u64&gt;::wrapping_mul(move _81, move _82)</td></tr></table>>];
    bb33__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageDead(_82)<br/>StorageDead(_81)<br/></td></tr><tr><td align="left">_75 = core::num::&lt;impl u64&gt;::wrapping_sub(move _76, move _80)</td></tr></table>>];
    bb34__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_80)<br/>StorageDead(_76)<br/>StorageLive(_83)<br/>StorageLive(_84)<br/>_84 = _75<br/>StorageLive(_85)<br/>_85 = _17<br/>_86 = Eq(_85, const 0_u64)<br/></td></tr><tr><td align="left">assert(!move _86, &quot;attempt to divide `{}` by zero&quot;, _84)</td></tr></table>>];
    bb35__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">_83 = Div(move _84, move _85)<br/>StorageDead(_85)<br/>StorageDead(_84)<br/>StorageLive(_87)<br/>StorageLive(_88)<br/>_88 = _75<br/>StorageLive(_89)<br/>StorageLive(_90)<br/>_90 = _83<br/>StorageLive(_91)<br/>_91 = _17<br/></td></tr><tr><td align="left">_89 = core::num::&lt;impl u64&gt;::wrapping_mul(move _90, move _91)</td></tr></table>>];
    bb36__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageDead(_91)<br/>StorageDead(_90)<br/></td></tr><tr><td align="left">_87 = core::num::&lt;impl u64&gt;::wrapping_sub(move _88, move _89)</td></tr></table>>];
    bb37__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageDead(_89)<br/>StorageDead(_88)<br/>_44 = move _87<br/>StorageDead(_87)<br/>StorageLive(_92)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb38__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageLive(_93)<br/>StorageLive(_94)<br/>_94 = _83<br/>_93 = Ge(move _94, const _)<br/></td></tr><tr><td align="left">switchInt(move _93)</td></tr></table>>];
    bb39__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageDead(_94)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb40__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">StorageDead(_94)<br/>StorageLive(_95)<br/>StorageLive(_96)<br/>StorageLive(_97)<br/>_97 = _83<br/>StorageLive(_98)<br/>_98 = _18<br/>_99 = CheckedMul(_97, _98)<br/></td></tr><tr><td align="left">assert(!move (_99.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, move _97, move _98)</td></tr></table>>];
    bb41__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">_96 = move (_99.0: u64)<br/>StorageDead(_98)<br/>StorageDead(_97)<br/>StorageLive(_100)<br/>StorageLive(_101)<br/>StorageLive(_102)<br/>_102 = _44<br/>_103 = CheckedMul(const _, _102)<br/></td></tr><tr><td align="left">assert(!move (_103.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, const _, move _102)</td></tr></table>>];
    bb42__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">_101 = move (_103.0: u64)<br/>StorageDead(_102)<br/>StorageLive(_104)<br/>_104 = _37<br/>_105 = CheckedAdd(_101, _104)<br/></td></tr><tr><td align="left">assert(!move (_105.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _101, move _104)</td></tr></table>>];
    bb43__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">_100 = move (_105.0: u64)<br/>StorageDead(_104)<br/>StorageDead(_101)<br/>_95 = Gt(move _96, move _100)<br/></td></tr><tr><td align="left">switchInt(move _95)</td></tr></table>>];
    bb44__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">StorageDead(_100)<br/>StorageDead(_96)<br/>_106 = CheckedSub(_83, const 1_u64)<br/></td></tr><tr><td align="left">assert(!move (_106.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, _83, const 1_u64)</td></tr></table>>];
    bb45__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">_83 = move (_106.0: u64)<br/>StorageLive(_107)<br/>_107 = _17<br/>_108 = CheckedAdd(_44, _107)<br/></td></tr><tr><td align="left">assert(!move (_108.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, _44, move _107)</td></tr></table>>];
    bb46__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">_44 = move (_108.0: u64)<br/>StorageDead(_107)<br/>StorageLive(_109)<br/>StorageLive(_110)<br/>_110 = _44<br/>_109 = Ge(move _110, const _)<br/></td></tr><tr><td align="left">switchInt(move _109)</td></tr></table>>];
    bb47__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left" balign="left">StorageDead(_110)<br/>_92 = const ()<br/>StorageDead(_109)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb48__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left" balign="left">StorageDead(_110)<br/>_52 = const ()<br/>StorageDead(_109)<br/>StorageDead(_95)<br/>StorageDead(_93)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb49__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left" balign="left">StorageDead(_100)<br/>StorageDead(_96)<br/>StorageLive(_113)<br/>_92 = const ()<br/>StorageDead(_113)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb50__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">50</td></tr><tr><td align="left" balign="left">StorageDead(_95)<br/>StorageDead(_93)<br/>StorageDead(_92)<br/>StorageLive(_115)<br/>StorageLive(_116)<br/>StorageLive(_117)<br/>StorageLive(_118)<br/>_118 = _75<br/></td></tr><tr><td align="left">_117 = core::num::&lt;impl u64&gt;::wrapping_mul(move _118, const _)</td></tr></table>>];
    bb51__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">51</td></tr><tr><td align="left" balign="left">StorageDead(_118)<br/>StorageLive(_119)<br/>_119 = _37<br/></td></tr><tr><td align="left">_116 = core::num::&lt;impl u64&gt;::wrapping_add(move _117, move _119)</td></tr></table>>];
    bb52__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">52</td></tr><tr><td align="left" balign="left">StorageDead(_119)<br/>StorageDead(_117)<br/>StorageLive(_120)<br/>StorageLive(_121)<br/>_121 = _13<br/>StorageLive(_122)<br/>_122 = _83<br/></td></tr><tr><td align="left">_120 = core::num::&lt;impl u64&gt;::wrapping_mul(move _121, move _122)</td></tr></table>>];
    bb53__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">53</td></tr><tr><td align="left" balign="left">StorageDead(_122)<br/>StorageDead(_121)<br/></td></tr><tr><td align="left">_115 = core::num::&lt;impl u64&gt;::wrapping_sub(move _116, move _120)</td></tr></table>>];
    bb54__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">54</td></tr><tr><td align="left" balign="left">StorageDead(_120)<br/>StorageDead(_116)<br/>StorageLive(_123)<br/>StorageLive(_124)<br/>StorageLive(_125)<br/>_125 = _40<br/>_126 = CheckedMul(_125, const _)<br/></td></tr><tr><td align="left">assert(!move (_126.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, move _125, const _)</td></tr></table>>];
    bb55__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">55</td></tr><tr><td align="left" balign="left">_124 = move (_126.0: u64)<br/>StorageDead(_125)<br/>StorageLive(_127)<br/>_127 = _83<br/>_128 = CheckedAdd(_124, _127)<br/></td></tr><tr><td align="left">assert(!move (_128.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _124, move _127)</td></tr></table>>];
    bb56__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">56</td></tr><tr><td align="left" balign="left">_123 = move (_128.0: u64)<br/>StorageDead(_127)<br/>StorageDead(_124)<br/>StorageLive(_129)<br/>StorageLive(_130)<br/>_130 = _115<br/>StorageLive(_131)<br/>_131 = _11<br/>_132 = Lt(_131, const 64_u32)<br/></td></tr><tr><td align="left">assert(move _132, &quot;attempt to shift right by `{}`, which would overflow&quot;, _131)</td></tr></table>>];
    bb57__0_1393 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">57</td></tr><tr><td align="left" balign="left">_129 = Shr(move _130, move _131)<br/>StorageDead(_131)<br/>StorageDead(_130)<br/>_0 = (move _123, move _129)<br/>StorageDead(_129)<br/>StorageDead(_123)<br/>StorageDead(_115)<br/>StorageDead(_83)<br/>StorageDead(_75)<br/>StorageDead(_44)<br/>StorageDead(_40)<br/>StorageDead(_37)<br/>StorageDead(_36)<br/>StorageDead(_32)<br/>StorageDead(_21)<br/>StorageDead(_18)<br/>StorageDead(_17)<br/>StorageDead(_13)<br/>StorageDead(_11)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_1393 -> bb4__0_1393 [label="0"];
    bb0__0_1393 -> bb1__0_1393 [label="otherwise"];
    bb1__0_1393 -> bb3__0_1393 [label="0"];
    bb1__0_1393 -> bb2__0_1393 [label="otherwise"];
    bb2__0_1393 -> bb5__0_1393 [label=""];
    bb4__0_1393 -> bb5__0_1393 [label=""];
    bb5__0_1393 -> bb6__0_1393 [label="return"];
    bb6__0_1393 -> bb7__0_1393 [label="success"];
    bb7__0_1393 -> bb8__0_1393 [label="return"];
    bb8__0_1393 -> bb9__0_1393 [label="success"];
    bb9__0_1393 -> bb10__0_1393 [label="success"];
    bb10__0_1393 -> bb11__0_1393 [label="return"];
    bb11__0_1393 -> bb12__0_1393 [label="return"];
    bb12__0_1393 -> bb13__0_1393 [label="success"];
    bb13__0_1393 -> bb14__0_1393 [label="return"];
    bb14__0_1393 -> bb15__0_1393 [label="success"];
    bb15__0_1393 -> bb16__0_1393 [label="success"];
    bb16__0_1393 -> bb17__0_1393 [label="success"];
    bb17__0_1393 -> bb18__0_1393 [label=""];
    bb18__0_1393 -> bb20__0_1393 [label="0"];
    bb18__0_1393 -> bb19__0_1393 [label="otherwise"];
    bb19__0_1393 -> bb24__0_1393 [label=""];
    bb20__0_1393 -> bb21__0_1393 [label="success"];
    bb21__0_1393 -> bb22__0_1393 [label="success"];
    bb22__0_1393 -> bb23__0_1393 [label="success"];
    bb23__0_1393 -> bb29__0_1393 [label="0"];
    bb23__0_1393 -> bb24__0_1393 [label="otherwise"];
    bb24__0_1393 -> bb25__0_1393 [label="success"];
    bb25__0_1393 -> bb26__0_1393 [label="success"];
    bb26__0_1393 -> bb28__0_1393 [label="0"];
    bb26__0_1393 -> bb27__0_1393 [label="otherwise"];
    bb27__0_1393 -> bb30__0_1393 [label=""];
    bb28__0_1393 -> bb18__0_1393 [label=""];
    bb29__0_1393 -> bb30__0_1393 [label=""];
    bb30__0_1393 -> bb31__0_1393 [label="return"];
    bb31__0_1393 -> bb32__0_1393 [label="return"];
    bb32__0_1393 -> bb33__0_1393 [label="return"];
    bb33__0_1393 -> bb34__0_1393 [label="return"];
    bb34__0_1393 -> bb35__0_1393 [label="success"];
    bb35__0_1393 -> bb36__0_1393 [label="return"];
    bb36__0_1393 -> bb37__0_1393 [label="return"];
    bb37__0_1393 -> bb38__0_1393 [label=""];
    bb38__0_1393 -> bb40__0_1393 [label="0"];
    bb38__0_1393 -> bb39__0_1393 [label="otherwise"];
    bb39__0_1393 -> bb44__0_1393 [label=""];
    bb40__0_1393 -> bb41__0_1393 [label="success"];
    bb41__0_1393 -> bb42__0_1393 [label="success"];
    bb42__0_1393 -> bb43__0_1393 [label="success"];
    bb43__0_1393 -> bb49__0_1393 [label="0"];
    bb43__0_1393 -> bb44__0_1393 [label="otherwise"];
    bb44__0_1393 -> bb45__0_1393 [label="success"];
    bb45__0_1393 -> bb46__0_1393 [label="success"];
    bb46__0_1393 -> bb48__0_1393 [label="0"];
    bb46__0_1393 -> bb47__0_1393 [label="otherwise"];
    bb47__0_1393 -> bb50__0_1393 [label=""];
    bb48__0_1393 -> bb38__0_1393 [label=""];
    bb49__0_1393 -> bb50__0_1393 [label=""];
    bb50__0_1393 -> bb51__0_1393 [label="return"];
    bb51__0_1393 -> bb52__0_1393 [label="return"];
    bb52__0_1393 -> bb53__0_1393 [label="return"];
    bb53__0_1393 -> bb54__0_1393 [label="return"];
    bb54__0_1393 -> bb55__0_1393 [label="success"];
    bb55__0_1393 -> bb56__0_1393 [label="success"];
    bb56__0_1393 -> bb57__0_1393 [label="success"];
}
