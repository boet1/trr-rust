digraph Mir_0_127 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn decimal::Decimal::from_percent(_1: u8) -&gt; math::decimal::Decimal<br align="left"/>let mut _2: math::decimal::U192;<br align="left"/>let mut _3: u64;<br align="left"/>let mut _4: u64;<br align="left"/>let mut _5: u8;<br align="left"/>let mut _6: (u64, bool);<br align="left"/>debug percent =&gt; _1;<br align="left"/>>;
    bb0__0_127 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = _1<br/>_4 = move _5 as u64 (IntToInt)<br/>StorageDead(_5)<br/>_6 = CheckedMul(_4, const _)<br/></td></tr><tr><td align="left">assert(!move (_6.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, move _4, const _)</td></tr></table>>];
    bb1__0_127 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_3 = move (_6.0: u64)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">_2 = &lt;U192 as From&lt;u64&gt;&gt;::from(move _3)</td></tr></table>>];
    bb2__0_127 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_3)<br/>_0 = decimal::Decimal(move _2)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_127 -> bb1__0_127 [label="success"];
    bb1__0_127 -> bb2__0_127 [label="return"];
}
