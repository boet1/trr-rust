// MIR for `state::pack_decimal` after PreCodegen

fn state::pack_decimal(_1: decimal::Decimal, _2: &mut [u8; 16]) -> () {
    debug decimal => _1;
    debug dst => _2;
    let mut _0: ();
    let mut _3: [u8; 16];
    let mut _4: u128;
    let mut _5: std::result::Result<u128, solana_program::program_error::ProgramError>;
    let mut _6: &math::decimal::Decimal;
    let mut _7: &str;
    let _8: &str;

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &_1;
        _5 = decimal::Decimal::to_scaled_val(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = const "Decimal cannot be packed";
        _7 = &(*_8);
        _4 = Result::<u128, ProgramError>::expect(move _5, move _7) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        StorageDead(_7);
        StorageDead(_5);
        _3 = core::num::<impl u128>::to_le_bytes(move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_4);
        (*_2) = move _3;
        StorageDead(_3);
        StorageDead(_8);
        _0 = const ();
        return;
    }

    bb4 (cleanup): {
        resume;
    }
}
