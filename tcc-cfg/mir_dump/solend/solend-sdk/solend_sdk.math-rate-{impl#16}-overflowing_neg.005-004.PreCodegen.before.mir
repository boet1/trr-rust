// MIR for `rate::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:587:3: 587:13>::overflowing_neg` before PreCodegen

fn rate::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:587:3: 587:13>::overflowing_neg(_1: U128) -> (U128, bool) {
    debug self => _1;
    let mut _0: (math::rate::U128, bool);
    let mut _2: bool;
    let mut _3: &math::rate::U128;
    let mut _4: math::rate::U128;
    let mut _5: math::rate::U128;
    let mut _6: math::rate::U128;

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = &_1;
        _2 = U128::is_zero(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _2) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_3);
        StorageLive(_4);
        _4 = _1;
        _0 = (move _4, const false);
        StorageDead(_4);
        goto -> bb5;
    }

    bb3: {
        StorageDead(_3);
        StorageLive(_5);
        StorageLive(_6);
        _6 = _1;
        _5 = <U128 as Not>::not(move _6) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_6);
        _0 = (move _5, const true);
        StorageDead(_5);
        goto -> bb5;
    }

    bb5: {
        StorageDead(_2);
        return;
    }
}
