// MIR for `rate::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:587:3: 587:13>::binop_carry` after PreCodegen

fn rate::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:587:3: 587:13>::binop_carry(_1: u64, _2: u64, _3: bool, _4: impl Fn(u64, u64) -> (u64, bool)) -> (u64, bool) {
    debug a => _1;
    debug b => _2;
    debug c => _3;
    debug binop => _4;
    let mut _0: (u64, bool);
    let _5: u64;
    let _6: bool;
    let mut _7: (u64, bool);
    let mut _8: u64;
    let mut _9: u64;
    let mut _10: bool;
    let mut _13: (u64, bool);
    let mut _14: &impl Fn(u64, u64) -> (u64, bool);
    let mut _15: (u64, u64);
    let mut _16: u64;
    let mut _17: u64;
    let mut _18: u64;
    let mut _19: bool;
    let mut _20: bool;
    scope 1 {
        debug res1 => _5;
        debug overflow1 => _6;
        let _11: u64;
        let _12: bool;
        scope 2 {
            debug res2 => _11;
            debug overflow2 => _12;
        }
    }

    bb0: {
        StorageLive(_7);
        StorageLive(_8);
        _8 = _2;
        StorageLive(_9);
        StorageLive(_10);
        _10 = _3;
        _9 = <u64 as From<bool>>::from(move _10) -> [return: bb1, unwind: bb8];
    }

    bb1: {
        StorageDead(_10);
        _7 = core::num::<impl u64>::overflowing_add(move _8, move _9) -> [return: bb2, unwind: bb8];
    }

    bb2: {
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_5);
        _5 = (_7.0: u64);
        StorageLive(_6);
        _6 = (_7.1: bool);
        StorageDead(_7);
        StorageLive(_13);
        StorageLive(_14);
        _14 = &_4;
        StorageLive(_15);
        StorageLive(_16);
        _16 = _1;
        StorageLive(_17);
        _17 = _5;
        _15 = (move _16, move _17);
        _13 = <impl Fn(u64, u64) -> (u64, bool) as Fn<(u64, u64)>>::call(move _14, move _15) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_11);
        _11 = (_13.0: u64);
        StorageLive(_12);
        _12 = (_13.1: bool);
        StorageDead(_13);
        StorageLive(_18);
        _18 = _11;
        StorageLive(_19);
        StorageLive(_20);
        _20 = _6;
        switchInt(move _20) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _19 = const true;
        goto -> bb6;
    }

    bb5: {
        _19 = _12;
        goto -> bb6;
    }

    bb6: {
        StorageDead(_20);
        _0 = (move _18, move _19);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_6);
        StorageDead(_5);
        drop(_4) -> [return: bb7, unwind: bb9];
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_4) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        resume;
    }
}
