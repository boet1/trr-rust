// MIR for `reserve::<impl at token-lending\sdk\src\state\reserve.rs:1232:1: 1232:22>::unpack_from_slice` after PreCodegen

fn reserve::<impl at token-lending\sdk\src\state\reserve.rs:1232:1: 1232:22>::unpack_from_slice(_1: &[u8]) -> Result<reserve::Reserve, ProgramError> {
    debug input => _1;
    let mut _0: std::result::Result<state::reserve::Reserve, solana_program::program_error::ProgramError>;
    let _2: &[u8; 619];
    let _3: usize;
    let _5: &[u8];
    let mut _6: &[u8];
    let mut _7: std::ops::Range<usize>;
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: (usize, bool);
    let mut _12: &[u8];
    let mut _61: (&[u8; 1], &[u8; 8], &[u8; 1], &[u8; 32], &[u8; 32], &[u8; 1], &[u8; 32], &[u8; 32], &[u8; 32], &[u8; 8], &[u8; 16], &[u8; 16], &[u8; 16], &[u8; 32], &[u8; 8], &[u8; 32], &[u8; 1], &[u8; 1], &[u8; 1], &[u8; 1], &[u8; 1], &[u8; 1], &[u8; 1], &[u8; 8], &[u8; 8], &[u8; 1], &[u8; 8], &[u8; 8], &[u8; 32], &[u8; 1], &[u8; 1], &[u8; 16], &[u8; 56], &[u8; 8], &[u8; 16], &[u8; 1], &[u8; 1], &[u8; 8], &[u8; 1], &[u8; 1], &[u8; 8], &[u8; 32], &[u8; 1], &[u8; 16], &[u8; 16], &[u8; 8], &[u8; 8], &[u8; 49]);
    let mut _63: &[u8; 619];
    let mut _65: [u8; 1];
    let _66: ();
    let mut _67: bool;
    let mut _68: u8;
    let mut _69: !;
    let _70: ();
    let mut _71: &str;
    let _72: &str;
    let mut _73: solana_program::program_error::ProgramError;
    let mut _75: [u8; 1];
    let mut _77: [u8; 1];
    let mut _79: [u8; 1];
    let mut _81: u8;
    let mut _82: u8;
    let mut _83: [u8; 1];
    let mut _85: [u8; 1];
    let mut _87: u8;
    let mut _88: u8;
    let mut _89: [u8; 1];
    let mut _90: state::reserve::Reserve;
    let mut _91: u8;
    let mut _92: state::last_update::LastUpdate;
    let mut _93: u64;
    let mut _94: [u8; 8];
    let mut _95: bool;
    let mut _96: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, bool>;
    let mut _97: std::result::Result<bool, solana_program::program_error::ProgramError>;
    let mut _98: &[u8; 1];
    let mut _99: isize;
    let mut _101: !;
    let mut _102: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _104: solana_program::pubkey::Pubkey;
    let mut _105: [u8; 32];
    let mut _106: state::reserve::ReserveLiquidity;
    let mut _107: solana_program::pubkey::Pubkey;
    let mut _108: [u8; 32];
    let mut _109: u8;
    let mut _110: [u8; 1];
    let mut _111: solana_program::pubkey::Pubkey;
    let mut _112: [u8; 32];
    let mut _113: solana_program::pubkey::Pubkey;
    let mut _114: [u8; 32];
    let mut _115: solana_program::pubkey::Pubkey;
    let mut _116: [u8; 32];
    let mut _117: u64;
    let mut _118: [u8; 8];
    let mut _119: math::decimal::Decimal;
    let mut _120: &[u8; 16];
    let mut _121: math::decimal::Decimal;
    let mut _122: &[u8; 16];
    let mut _123: math::decimal::Decimal;
    let mut _124: &[u8; 16];
    let mut _125: math::decimal::Decimal;
    let mut _126: &[u8; 16];
    let mut _127: math::decimal::Decimal;
    let mut _128: &[u8; 16];
    let mut _129: std::option::Option<math::decimal::Decimal>;
    let _130: usize;
    let mut _131: usize;
    let mut _132: bool;
    let mut _133: math::decimal::Decimal;
    let mut _134: &[u8; 16];
    let mut _135: !;
    let _136: ();
    let mut _137: &str;
    let _138: &str;
    let mut _139: solana_program::program_error::ProgramError;
    let mut _140: state::reserve::ReserveCollateral;
    let mut _141: solana_program::pubkey::Pubkey;
    let mut _142: [u8; 32];
    let mut _143: u64;
    let mut _144: [u8; 8];
    let mut _145: solana_program::pubkey::Pubkey;
    let mut _146: [u8; 32];
    let mut _147: state::reserve::ReserveConfig;
    let mut _148: u8;
    let mut _149: u8;
    let mut _150: u8;
    let mut _151: u8;
    let mut _152: [u8; 1];
    let mut _153: u8;
    let mut _154: [u8; 1];
    let mut _155: u8;
    let mut _156: u8;
    let mut _157: u8;
    let mut _158: u8;
    let mut _159: u8;
    let mut _160: [u8; 1];
    let mut _161: u8;
    let mut _162: [u8; 1];
    let mut _163: u8;
    let mut _164: u64;
    let mut _165: u64;
    let mut _166: u8;
    let mut _167: u64;
    let mut _168: [u8; 8];
    let mut _169: state::reserve::ReserveFees;
    let mut _170: u64;
    let mut _171: [u8; 8];
    let mut _172: u64;
    let mut _173: [u8; 8];
    let mut _174: u8;
    let mut _175: [u8; 1];
    let mut _176: u64;
    let mut _177: [u8; 8];
    let mut _178: u64;
    let mut _179: [u8; 8];
    let mut _180: solana_program::pubkey::Pubkey;
    let mut _181: [u8; 32];
    let mut _182: u8;
    let mut _183: u8;
    let mut _184: [u8; 1];
    let mut _185: u8;
    let mut _186: [u8; 1];
    let mut _187: u64;
    let mut _188: [u8; 8];
    let mut _189: state::reserve::ReserveType;
    let mut _190: std::option::Option<state::reserve::ReserveType>;
    let mut _191: u8;
    let _192: usize;
    let mut _193: usize;
    let mut _194: bool;
    let mut _195: i64;
    let mut _196: [u8; 8];
    let mut _197: std::option::Option<solana_program::pubkey::Pubkey>;
    let mut _198: bool;
    let mut _199: &&[u8; 32];
    let mut _200: &&[u8; 32];
    let _201: &[u8; 32];
    let _202: [u8; 32];
    let mut _203: solana_program::pubkey::Pubkey;
    let mut _204: [u8; 32];
    let mut _205: u64;
    let mut _207: [u8; 8];
    let mut _208: bool;
    let mut _209: u64;
    let mut _210: u64;
    let mut _212: [u8; 8];
    let mut _213: bool;
    let mut _214: u64;
    let mut _215: state::rate_limiter::RateLimiter;
    let mut _216: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, state::rate_limiter::RateLimiter>;
    let mut _217: std::result::Result<state::rate_limiter::RateLimiter, solana_program::program_error::ProgramError>;
    let mut _218: &[u8];
    let mut _219: &[u8; 56];
    let mut _220: isize;
    let mut _222: !;
    let mut _223: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _225: math::decimal::Decimal;
    let mut _226: &[u8; 16];
    let mut _228: bool;
    let mut _229: bool;
    let mut _230: isize;
    let mut _231: isize;
    let mut _232: isize;
    let mut _233: isize;
    let mut _234: isize;
    let mut _235: isize;
    let mut _236: isize;
    let mut _237: isize;
    let mut _238: isize;
    let mut _239: isize;
    scope 1 {
        debug input => _2;
        scope 6 {
            debug version => _13;
            debug last_update_slot => _14;
            debug last_update_stale => _15;
            debug lending_market => _16;
            debug liquidity_mint_pubkey => _17;
            debug liquidity_mint_decimals => _18;
            debug liquidity_supply_pubkey => _19;
            debug liquidity_pyth_oracle_pubkey => _20;
            debug liquidity_switchboard_oracle_pubkey => _21;
            debug liquidity_available_amount => _22;
            debug liquidity_borrowed_amount_wads => _23;
            debug liquidity_cumulative_borrow_rate_wads => _24;
            debug liquidity_market_price => _25;
            debug collateral_mint_pubkey => _26;
            debug collateral_mint_total_supply => _27;
            debug collateral_supply_pubkey => _28;
            debug config_optimal_utilization_rate => _29;
            debug config_loan_to_value_ratio => _30;
            debug config_liquidation_bonus => _31;
            debug config_liquidation_threshold => _32;
            debug config_min_borrow_rate => _33;
            debug config_optimal_borrow_rate => _34;
            debug config_max_borrow_rate => _35;
            debug config_fees_borrow_fee_wad => _36;
            debug config_fees_flash_loan_fee_wad => _37;
            debug config_fees_host_fee_percentage => _38;
            debug config_deposit_limit => _39;
            debug config_borrow_limit => _40;
            debug config_fee_receiver => _41;
            debug config_protocol_liquidation_fee => _42;
            debug config_protocol_take_rate => _43;
            debug liquidity_accumulated_protocol_fees_wads => _44;
            debug rate_limiter => _45;
            debug config_added_borrow_weight_bps => _46;
            debug liquidity_smoothed_market_price => _47;
            debug config_asset_type => _48;
            debug config_max_utilization_rate => _49;
            debug config_super_max_borrow_rate => _50;
            debug config_max_liquidation_bonus => _51;
            debug config_max_liquidation_threshold => _52;
            debug config_scaled_price_offset_bps => _53;
            debug config_extra_oracle_pubkey => _54;
            debug liquidity_extra_market_price_flag => _55;
            debug liquidity_extra_market_price => _56;
            debug attributed_borrow_value => _57;
            debug config_attributed_borrow_limit_open => _58;
            debug config_attributed_borrow_limit_close => _59;
            debug _padding => _60;
            let _64: u8;
            scope 11 {
                debug version => _64;
                let _74: u8;
                scope 12 {
                    debug optimal_utilization_rate => _74;
                    let _76: u8;
                    scope 13 {
                        debug max_borrow_rate => _76;
                        let _78: u8;
                        scope 14 {
                            debug liquidation_bonus => _78;
                            let _80: u8;
                            scope 15 {
                                debug max_liquidation_bonus => _80;
                                let _84: u8;
                                scope 16 {
                                    debug liquidation_threshold => _84;
                                    let _86: u8;
                                    scope 17 {
                                        debug max_liquidation_threshold => _86;
                                        let _100: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                        let _103: bool;
                                        let _206: u64;
                                        let _211: u64;
                                        let _221: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                        let _224: state::rate_limiter::RateLimiter;
                                        let mut _227: &&[u8; 32];
                                        scope 18 {
                                            debug residual => _100;
                                            scope 19 {
                                            }
                                        }
                                        scope 20 {
                                            debug val => _103;
                                            scope 21 {
                                            }
                                        }
                                        scope 22 {
                                            debug value => _206;
                                        }
                                        scope 23 {
                                            debug value => _211;
                                        }
                                        scope 24 {
                                            debug residual => _221;
                                            scope 25 {
                                            }
                                        }
                                        scope 26 {
                                            debug val => _224;
                                            scope 27 {
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        scope 7 {
            let _13: &[u8; 1];
            let _14: &[u8; 8];
            let _15: &[u8; 1];
            let _16: &[u8; 32];
            let _17: &[u8; 32];
            let _18: &[u8; 1];
            let _19: &[u8; 32];
            let _20: &[u8; 32];
            let _21: &[u8; 32];
            let _22: &[u8; 8];
            let _23: &[u8; 16];
            let _24: &[u8; 16];
            let _25: &[u8; 16];
            let _26: &[u8; 32];
            let _27: &[u8; 8];
            let _28: &[u8; 32];
            let _29: &[u8; 1];
            let _30: &[u8; 1];
            let _31: &[u8; 1];
            let _32: &[u8; 1];
            let _33: &[u8; 1];
            let _34: &[u8; 1];
            let _35: &[u8; 1];
            let _36: &[u8; 8];
            let _37: &[u8; 8];
            let _38: &[u8; 1];
            let _39: &[u8; 8];
            let _40: &[u8; 8];
            let _41: &[u8; 32];
            let _42: &[u8; 1];
            let _43: &[u8; 1];
            let _44: &[u8; 16];
            let _45: &[u8; 56];
            let _46: &[u8; 8];
            let _47: &[u8; 16];
            let _48: &[u8; 1];
            let _49: &[u8; 1];
            let _50: &[u8; 8];
            let _51: &[u8; 1];
            let _52: &[u8; 1];
            let _53: &[u8; 8];
            let _54: &[u8; 32];
            let _55: &[u8; 1];
            let _56: &[u8; 16];
            let _57: &[u8; 16];
            let _58: &[u8; 8];
            let _59: &[u8; 8];
            let _60: &[u8; 49];
            let _62: &[u8; 619];
            scope 8 {
                debug input => _62;
                scope 9 {
                    scope 10 {
                    }
                }
            }
        }
    }
    scope 2 {
        debug offset => _3;
        let _4: &[u8];
        scope 3 {
            debug slice => _4;
            scope 4 {
                scope 5 {
                }
            }
        }
    }

    bb0: {
        _228 = const false;
        _229 = const false;
        StorageLive(_2);
        StorageLive(_3);
        _3 = const 0_usize;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &(*_1);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _3;
        StorageLive(_9);
        StorageLive(_10);
        _10 = _3;
        _11 = CheckedAdd(_10, const _);
        assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", move _10, const _) -> [success: bb1, unwind continue];
    }

    bb1: {
        _9 = move (_11.0: usize);
        StorageDead(_10);
        _7 = std::ops::Range::<usize> { start: move _8, end: move _9 };
        StorageDead(_9);
        StorageDead(_8);
        _5 = <[u8] as Index<std::ops::Range<usize>>>::index(move _6, move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        StorageDead(_6);
        _4 = &(*_5);
        StorageLive(_12);
        _12 = &(*_4);
        _2 = <reserve::Reserve as Pack>::unpack_from_slice::as_array::<u8>(move _12) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_12);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_61);
        StorageLive(_62);
        _62 = _2;
        StorageLive(_63);
        _63 = &(*_62);
        _61 = <reserve::Reserve as Pack>::unpack_from_slice::as_arrays::<u8>(move _63) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_63);
        StorageDead(_62);
        StorageLive(_13);
        _13 = (_61.0: &[u8; 1]);
        StorageLive(_14);
        _14 = (_61.1: &[u8; 8]);
        StorageLive(_15);
        _15 = (_61.2: &[u8; 1]);
        StorageLive(_16);
        _16 = (_61.3: &[u8; 32]);
        StorageLive(_17);
        _17 = (_61.4: &[u8; 32]);
        StorageLive(_18);
        _18 = (_61.5: &[u8; 1]);
        StorageLive(_19);
        _19 = (_61.6: &[u8; 32]);
        StorageLive(_20);
        _20 = (_61.7: &[u8; 32]);
        StorageLive(_21);
        _21 = (_61.8: &[u8; 32]);
        StorageLive(_22);
        _22 = (_61.9: &[u8; 8]);
        StorageLive(_23);
        _23 = (_61.10: &[u8; 16]);
        StorageLive(_24);
        _24 = (_61.11: &[u8; 16]);
        StorageLive(_25);
        _25 = (_61.12: &[u8; 16]);
        StorageLive(_26);
        _26 = (_61.13: &[u8; 32]);
        StorageLive(_27);
        _27 = (_61.14: &[u8; 8]);
        StorageLive(_28);
        _28 = (_61.15: &[u8; 32]);
        StorageLive(_29);
        _29 = (_61.16: &[u8; 1]);
        StorageLive(_30);
        _30 = (_61.17: &[u8; 1]);
        StorageLive(_31);
        _31 = (_61.18: &[u8; 1]);
        StorageLive(_32);
        _32 = (_61.19: &[u8; 1]);
        StorageLive(_33);
        _33 = (_61.20: &[u8; 1]);
        StorageLive(_34);
        _34 = (_61.21: &[u8; 1]);
        StorageLive(_35);
        _35 = (_61.22: &[u8; 1]);
        StorageLive(_36);
        _36 = (_61.23: &[u8; 8]);
        StorageLive(_37);
        _37 = (_61.24: &[u8; 8]);
        StorageLive(_38);
        _38 = (_61.25: &[u8; 1]);
        StorageLive(_39);
        _39 = (_61.26: &[u8; 8]);
        StorageLive(_40);
        _40 = (_61.27: &[u8; 8]);
        StorageLive(_41);
        _41 = (_61.28: &[u8; 32]);
        StorageLive(_42);
        _42 = (_61.29: &[u8; 1]);
        StorageLive(_43);
        _43 = (_61.30: &[u8; 1]);
        StorageLive(_44);
        _44 = (_61.31: &[u8; 16]);
        StorageLive(_45);
        _45 = (_61.32: &[u8; 56]);
        StorageLive(_46);
        _46 = (_61.33: &[u8; 8]);
        StorageLive(_47);
        _47 = (_61.34: &[u8; 16]);
        StorageLive(_48);
        _48 = (_61.35: &[u8; 1]);
        StorageLive(_49);
        _49 = (_61.36: &[u8; 1]);
        StorageLive(_50);
        _50 = (_61.37: &[u8; 8]);
        StorageLive(_51);
        _51 = (_61.38: &[u8; 1]);
        StorageLive(_52);
        _52 = (_61.39: &[u8; 1]);
        StorageLive(_53);
        _53 = (_61.40: &[u8; 8]);
        StorageLive(_54);
        _54 = (_61.41: &[u8; 32]);
        StorageLive(_55);
        _55 = (_61.42: &[u8; 1]);
        StorageLive(_56);
        _56 = (_61.43: &[u8; 16]);
        StorageLive(_57);
        _57 = (_61.44: &[u8; 16]);
        StorageLive(_58);
        _58 = (_61.45: &[u8; 8]);
        StorageLive(_59);
        _59 = (_61.46: &[u8; 8]);
        StorageLive(_60);
        _60 = (_61.47: &[u8; 49]);
        StorageDead(_61);
        StorageLive(_64);
        StorageLive(_65);
        _65 = (*_13);
        _64 = core::num::<impl u8>::from_le_bytes(move _65) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = _64;
        _67 = Gt(move _68, const _);
        switchInt(move _67) -> [0: bb8, otherwise: bb6];
    }

    bb6: {
        StorageDead(_68);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        _72 = const "Reserve version does not match lending program version";
        _71 = &(*_72);
        _70 = solana_program::log::sol_log(move _71) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_71);
        StorageDead(_72);
        StorageDead(_70);
        StorageLive(_73);
        _73 = solana_program::program_error::ProgramError::InvalidAccountData;
        _0 = Result::<reserve::Reserve, ProgramError>::Err(move _73);
        StorageDead(_73);
        StorageDead(_67);
        StorageDead(_66);
        StorageDead(_64);
        StorageDead(_60);
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_48);
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_2);
        goto -> bb87;
    }

    bb8: {
        StorageDead(_68);
        _66 = const ();
        StorageDead(_67);
        StorageDead(_66);
        StorageLive(_74);
        StorageLive(_75);
        _75 = (*_29);
        _74 = core::num::<impl u8>::from_le_bytes(move _75) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_75);
        StorageLive(_76);
        StorageLive(_77);
        _77 = (*_35);
        _76 = core::num::<impl u8>::from_le_bytes(move _77) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = (*_31);
        _78 = core::num::<impl u8>::from_le_bytes(move _79) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_79);
        StorageLive(_80);
        StorageLive(_81);
        _81 = _78;
        StorageLive(_82);
        StorageLive(_83);
        _83 = (*_51);
        _82 = core::num::<impl u8>::from_le_bytes(move _83) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_83);
        _80 = std::cmp::max::<u8>(move _81, move _82) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_82);
        StorageDead(_81);
        StorageLive(_84);
        StorageLive(_85);
        _85 = (*_32);
        _84 = core::num::<impl u8>::from_le_bytes(move _85) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_85);
        StorageLive(_86);
        StorageLive(_87);
        _87 = _84;
        StorageLive(_88);
        StorageLive(_89);
        _89 = (*_52);
        _88 = core::num::<impl u8>::from_le_bytes(move _89) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_89);
        _86 = std::cmp::max::<u8>(move _87, move _88) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_88);
        StorageDead(_87);
        StorageLive(_90);
        StorageLive(_91);
        _91 = _64;
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _94 = (*_14);
        _93 = core::num::<impl u64>::from_le_bytes(move _94) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        _98 = &(*_15);
        _97 = state::unpack_bool(move _98) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_98);
        _96 = <Result<bool, ProgramError> as Try>::branch(move _97) -> [return: bb19, unwind: bb88];
    }

    bb19: {
        _228 = const true;
        StorageDead(_97);
        _99 = discriminant(_96);
        switchInt(move _99) -> [0: bb20, 1: bb22, otherwise: bb21];
    }

    bb20: {
        StorageLive(_103);
        _103 = ((_96 as Continue).0: bool);
        _95 = _103;
        StorageDead(_103);
        _92 = last_update::LastUpdate { slot: move _93, stale: move _95 };
        StorageDead(_95);
        StorageDead(_93);
        StorageLive(_104);
        StorageLive(_105);
        _105 = (*_16);
        _104 = Pubkey::new_from_array(move _105) -> [return: bb24, unwind: bb91];
    }

    bb21: {
        unreachable;
    }

    bb22: {
        StorageLive(_100);
        _100 = move ((_96 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_102);
        _102 = move _100;
        _0 = <Result<reserve::Reserve, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _102) -> [return: bb23, unwind: bb91];
    }

    bb23: {
        StorageDead(_102);
        StorageDead(_100);
        StorageDead(_95);
        StorageDead(_93);
        StorageDead(_92);
        StorageDead(_91);
        StorageDead(_90);
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_76);
        StorageDead(_74);
        StorageDead(_64);
        StorageDead(_60);
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_48);
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_2);
        goto -> bb89;
    }

    bb24: {
        StorageDead(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        _108 = (*_17);
        _107 = Pubkey::new_from_array(move _108) -> [return: bb25, unwind: bb91];
    }

    bb25: {
        StorageDead(_108);
        StorageLive(_109);
        StorageLive(_110);
        _110 = (*_18);
        _109 = core::num::<impl u8>::from_le_bytes(move _110) -> [return: bb26, unwind: bb91];
    }

    bb26: {
        StorageDead(_110);
        StorageLive(_111);
        StorageLive(_112);
        _112 = (*_19);
        _111 = Pubkey::new_from_array(move _112) -> [return: bb27, unwind: bb91];
    }

    bb27: {
        StorageDead(_112);
        StorageLive(_113);
        StorageLive(_114);
        _114 = (*_20);
        _113 = Pubkey::new_from_array(move _114) -> [return: bb28, unwind: bb91];
    }

    bb28: {
        StorageDead(_114);
        StorageLive(_115);
        StorageLive(_116);
        _116 = (*_21);
        _115 = Pubkey::new_from_array(move _116) -> [return: bb29, unwind: bb91];
    }

    bb29: {
        StorageDead(_116);
        StorageLive(_117);
        StorageLive(_118);
        _118 = (*_22);
        _117 = core::num::<impl u64>::from_le_bytes(move _118) -> [return: bb30, unwind: bb91];
    }

    bb30: {
        StorageDead(_118);
        StorageLive(_119);
        StorageLive(_120);
        _120 = &(*_23);
        _119 = state::unpack_decimal(move _120) -> [return: bb31, unwind: bb91];
    }

    bb31: {
        StorageDead(_120);
        StorageLive(_121);
        StorageLive(_122);
        _122 = &(*_24);
        _121 = state::unpack_decimal(move _122) -> [return: bb32, unwind: bb91];
    }

    bb32: {
        StorageDead(_122);
        StorageLive(_123);
        StorageLive(_124);
        _124 = &(*_44);
        _123 = state::unpack_decimal(move _124) -> [return: bb33, unwind: bb91];
    }

    bb33: {
        StorageDead(_124);
        StorageLive(_125);
        StorageLive(_126);
        _126 = &(*_25);
        _125 = state::unpack_decimal(move _126) -> [return: bb34, unwind: bb91];
    }

    bb34: {
        StorageDead(_126);
        StorageLive(_127);
        StorageLive(_128);
        _128 = &(*_47);
        _127 = state::unpack_decimal(move _128) -> [return: bb35, unwind: bb91];
    }

    bb35: {
        StorageDead(_128);
        StorageLive(_129);
        StorageLive(_130);
        _130 = const 0_usize;
        _131 = Len((*_55));
        _132 = Lt(_130, _131);
        assert(move _132, "index out of bounds: the length is {} but the index is {}", move _131, _130) -> [success: bb36, unwind: bb91];
    }

    bb36: {
        switchInt((*_55)[_130]) -> [0: bb38, 1: bb39, otherwise: bb37];
    }

    bb37: {
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        _138 = const "Invalid extra market price flag";
        _137 = &(*_138);
        _136 = solana_program::log::sol_log(move _137) -> [return: bb41, unwind: bb91];
    }

    bb38: {
        _129 = Option::<decimal::Decimal>::None;
        goto -> bb42;
    }

    bb39: {
        StorageLive(_133);
        StorageLive(_134);
        _134 = &(*_56);
        _133 = state::unpack_decimal(move _134) -> [return: bb40, unwind: bb91];
    }

    bb40: {
        StorageDead(_134);
        _129 = Option::<decimal::Decimal>::Some(move _133);
        StorageDead(_133);
        goto -> bb42;
    }

    bb41: {
        StorageDead(_137);
        StorageDead(_138);
        StorageDead(_136);
        StorageLive(_139);
        _139 = solana_program::program_error::ProgramError::InvalidAccountData;
        _0 = Result::<reserve::Reserve, ProgramError>::Err(move _139);
        StorageDead(_139);
        StorageDead(_129);
        StorageDead(_127);
        StorageDead(_125);
        StorageDead(_123);
        StorageDead(_121);
        StorageDead(_119);
        StorageDead(_117);
        StorageDead(_115);
        StorageDead(_113);
        StorageDead(_111);
        StorageDead(_109);
        StorageDead(_107);
        StorageDead(_106);
        StorageDead(_104);
        StorageDead(_92);
        StorageDead(_91);
        StorageDead(_90);
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_76);
        StorageDead(_74);
        StorageDead(_64);
        StorageDead(_60);
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_48);
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_2);
        goto -> bb86;
    }

    bb42: {
        _106 = ReserveLiquidity { mint_pubkey: move _107, mint_decimals: move _109, supply_pubkey: move _111, pyth_oracle_pubkey: move _113, switchboard_oracle_pubkey: move _115, available_amount: move _117, borrowed_amount_wads: move _119, cumulative_borrow_rate_wads: move _121, accumulated_protocol_fees_wads: move _123, market_price: move _125, smoothed_market_price: move _127, extra_market_price: move _129 };
        StorageDead(_129);
        StorageDead(_127);
        StorageDead(_125);
        StorageDead(_123);
        StorageDead(_121);
        StorageDead(_119);
        StorageDead(_117);
        StorageDead(_115);
        StorageDead(_113);
        StorageDead(_111);
        StorageDead(_109);
        StorageDead(_107);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        _142 = (*_26);
        _141 = Pubkey::new_from_array(move _142) -> [return: bb43, unwind: bb91];
    }

    bb43: {
        StorageDead(_142);
        StorageLive(_143);
        StorageLive(_144);
        _144 = (*_27);
        _143 = core::num::<impl u64>::from_le_bytes(move _144) -> [return: bb44, unwind: bb91];
    }

    bb44: {
        StorageDead(_144);
        StorageLive(_145);
        StorageLive(_146);
        _146 = (*_28);
        _145 = Pubkey::new_from_array(move _146) -> [return: bb45, unwind: bb91];
    }

    bb45: {
        StorageDead(_146);
        _140 = ReserveCollateral { mint_pubkey: move _141, mint_total_supply: move _143, supply_pubkey: move _145 };
        StorageDead(_145);
        StorageDead(_143);
        StorageDead(_141);
        StorageLive(_147);
        StorageLive(_148);
        _148 = _74;
        StorageLive(_149);
        StorageLive(_150);
        _150 = _74;
        StorageLive(_151);
        StorageLive(_152);
        _152 = (*_49);
        _151 = core::num::<impl u8>::from_le_bytes(move _152) -> [return: bb46, unwind: bb91];
    }

    bb46: {
        StorageDead(_152);
        _149 = std::cmp::max::<u8>(move _150, move _151) -> [return: bb47, unwind: bb91];
    }

    bb47: {
        StorageDead(_151);
        StorageDead(_150);
        StorageLive(_153);
        StorageLive(_154);
        _154 = (*_30);
        _153 = core::num::<impl u8>::from_le_bytes(move _154) -> [return: bb48, unwind: bb91];
    }

    bb48: {
        StorageDead(_154);
        StorageLive(_155);
        _155 = _78;
        StorageLive(_156);
        _156 = _80;
        StorageLive(_157);
        _157 = _84;
        StorageLive(_158);
        _158 = _86;
        StorageLive(_159);
        StorageLive(_160);
        _160 = (*_33);
        _159 = core::num::<impl u8>::from_le_bytes(move _160) -> [return: bb49, unwind: bb91];
    }

    bb49: {
        StorageDead(_160);
        StorageLive(_161);
        StorageLive(_162);
        _162 = (*_34);
        _161 = core::num::<impl u8>::from_le_bytes(move _162) -> [return: bb50, unwind: bb91];
    }

    bb50: {
        StorageDead(_162);
        StorageLive(_163);
        _163 = _76;
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        _166 = _76;
        _165 = move _166 as u64 (IntToInt);
        StorageDead(_166);
        StorageLive(_167);
        StorageLive(_168);
        _168 = (*_50);
        _167 = core::num::<impl u64>::from_le_bytes(move _168) -> [return: bb51, unwind: bb91];
    }

    bb51: {
        StorageDead(_168);
        _164 = std::cmp::max::<u64>(move _165, move _167) -> [return: bb52, unwind: bb91];
    }

    bb52: {
        StorageDead(_167);
        StorageDead(_165);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        _171 = (*_36);
        _170 = core::num::<impl u64>::from_le_bytes(move _171) -> [return: bb53, unwind: bb91];
    }

    bb53: {
        StorageDead(_171);
        StorageLive(_172);
        StorageLive(_173);
        _173 = (*_37);
        _172 = core::num::<impl u64>::from_le_bytes(move _173) -> [return: bb54, unwind: bb91];
    }

    bb54: {
        StorageDead(_173);
        StorageLive(_174);
        StorageLive(_175);
        _175 = (*_38);
        _174 = core::num::<impl u8>::from_le_bytes(move _175) -> [return: bb55, unwind: bb91];
    }

    bb55: {
        StorageDead(_175);
        _169 = reserve::ReserveFees { borrow_fee_wad: move _170, flash_loan_fee_wad: move _172, host_fee_percentage: move _174 };
        StorageDead(_174);
        StorageDead(_172);
        StorageDead(_170);
        StorageLive(_176);
        StorageLive(_177);
        _177 = (*_39);
        _176 = core::num::<impl u64>::from_le_bytes(move _177) -> [return: bb56, unwind: bb91];
    }

    bb56: {
        StorageDead(_177);
        StorageLive(_178);
        StorageLive(_179);
        _179 = (*_40);
        _178 = core::num::<impl u64>::from_le_bytes(move _179) -> [return: bb57, unwind: bb91];
    }

    bb57: {
        StorageDead(_179);
        StorageLive(_180);
        StorageLive(_181);
        _181 = (*_41);
        _180 = Pubkey::new_from_array(move _181) -> [return: bb58, unwind: bb91];
    }

    bb58: {
        StorageDead(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        _184 = (*_42);
        _183 = core::num::<impl u8>::from_le_bytes(move _184) -> [return: bb59, unwind: bb91];
    }

    bb59: {
        StorageDead(_184);
        _182 = std::cmp::min::<u8>(move _183, const _) -> [return: bb60, unwind: bb91];
    }

    bb60: {
        StorageDead(_183);
        StorageLive(_185);
        StorageLive(_186);
        _186 = (*_43);
        _185 = core::num::<impl u8>::from_le_bytes(move _186) -> [return: bb61, unwind: bb91];
    }

    bb61: {
        StorageDead(_186);
        StorageLive(_187);
        StorageLive(_188);
        _188 = (*_46);
        _187 = core::num::<impl u64>::from_le_bytes(move _188) -> [return: bb62, unwind: bb91];
    }

    bb62: {
        StorageDead(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        _192 = const 0_usize;
        _193 = Len((*_48));
        _194 = Lt(_192, _193);
        assert(move _194, "index out of bounds: the length is {} but the index is {}", move _193, _192) -> [success: bb63, unwind: bb91];
    }

    bb63: {
        _191 = (*_48)[_192];
        _190 = <reserve::ReserveType as FromPrimitive>::from_u8(move _191) -> [return: bb64, unwind: bb91];
    }

    bb64: {
        StorageDead(_191);
        _189 = Option::<reserve::ReserveType>::unwrap(move _190) -> [return: bb65, unwind: bb91];
    }

    bb65: {
        StorageDead(_190);
        StorageLive(_195);
        StorageLive(_196);
        _196 = (*_53);
        _195 = core::num::<impl i64>::from_le_bytes(move _196) -> [return: bb66, unwind: bb91];
    }

    bb66: {
        StorageDead(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        _199 = &_54;
        StorageLive(_200);
        _227 = const _;
        _200 = &(*_227);
        _198 = <&[u8; 32] as PartialEq>::eq(move _199, move _200) -> [return: bb67, unwind: bb91];
    }

    bb67: {
        switchInt(move _198) -> [0: bb69, otherwise: bb68];
    }

    bb68: {
        StorageDead(_200);
        StorageDead(_199);
        _197 = Option::<Pubkey>::None;
        goto -> bb71;
    }

    bb69: {
        StorageDead(_200);
        StorageDead(_199);
        StorageLive(_203);
        StorageLive(_204);
        _204 = (*_54);
        _203 = Pubkey::new_from_array(move _204) -> [return: bb70, unwind: bb91];
    }

    bb70: {
        StorageDead(_204);
        _197 = Option::<Pubkey>::Some(move _203);
        StorageDead(_203);
        goto -> bb71;
    }

    bb71: {
        StorageDead(_198);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        _207 = (*_58);
        _206 = core::num::<impl u64>::from_le_bytes(move _207) -> [return: bb72, unwind: bb91];
    }

    bb72: {
        StorageDead(_207);
        StorageLive(_208);
        StorageLive(_209);
        _209 = _206;
        _208 = Eq(move _209, const 0_u64);
        switchInt(move _208) -> [0: bb74, otherwise: bb73];
    }

    bb73: {
        StorageDead(_209);
        _205 = const _;
        goto -> bb75;
    }

    bb74: {
        StorageDead(_209);
        _205 = _206;
        goto -> bb75;
    }

    bb75: {
        StorageDead(_208);
        StorageDead(_206);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        _212 = (*_59);
        _211 = core::num::<impl u64>::from_le_bytes(move _212) -> [return: bb76, unwind: bb91];
    }

    bb76: {
        StorageDead(_212);
        StorageLive(_213);
        StorageLive(_214);
        _214 = _211;
        _213 = Eq(move _214, const 0_u64);
        switchInt(move _213) -> [0: bb78, otherwise: bb77];
    }

    bb77: {
        StorageDead(_214);
        _210 = const _;
        goto -> bb79;
    }

    bb78: {
        StorageDead(_214);
        _210 = _211;
        goto -> bb79;
    }

    bb79: {
        StorageDead(_213);
        StorageDead(_211);
        _147 = reserve::ReserveConfig { optimal_utilization_rate: move _148, max_utilization_rate: move _149, loan_to_value_ratio: move _153, liquidation_bonus: move _155, max_liquidation_bonus: move _156, liquidation_threshold: move _157, max_liquidation_threshold: move _158, min_borrow_rate: move _159, optimal_borrow_rate: move _161, max_borrow_rate: move _163, super_max_borrow_rate: move _164, fees: move _169, deposit_limit: move _176, borrow_limit: move _178, fee_receiver: move _180, protocol_liquidation_fee: move _182, protocol_take_rate: move _185, added_borrow_weight_bps: move _187, reserve_type: move _189, scaled_price_offset_bps: move _195, extra_oracle_pubkey: move _197, attributed_borrow_limit_open: move _205, attributed_borrow_limit_close: move _210 };
        StorageDead(_210);
        StorageDead(_205);
        StorageDead(_197);
        StorageDead(_195);
        StorageDead(_189);
        StorageDead(_187);
        StorageDead(_185);
        StorageDead(_182);
        StorageDead(_180);
        StorageDead(_178);
        StorageDead(_176);
        StorageDead(_169);
        StorageDead(_164);
        StorageDead(_163);
        StorageDead(_161);
        StorageDead(_159);
        StorageDead(_158);
        StorageDead(_157);
        StorageDead(_156);
        StorageDead(_155);
        StorageDead(_153);
        StorageDead(_149);
        StorageDead(_148);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        _219 = &(*_45);
        _218 = move _219 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_219);
        _217 = <rate_limiter::RateLimiter as Pack>::unpack_from_slice(move _218) -> [return: bb80, unwind: bb91];
    }

    bb80: {
        StorageDead(_218);
        _216 = <Result<rate_limiter::RateLimiter, ProgramError> as Try>::branch(move _217) -> [return: bb81, unwind: bb91];
    }

    bb81: {
        _229 = const true;
        StorageDead(_217);
        _220 = discriminant(_216);
        switchInt(move _220) -> [0: bb82, 1: bb83, otherwise: bb21];
    }

    bb82: {
        StorageLive(_224);
        _224 = ((_216 as Continue).0: state::rate_limiter::RateLimiter);
        _215 = _224;
        StorageDead(_224);
        StorageLive(_225);
        StorageLive(_226);
        _226 = &(*_57);
        _225 = state::unpack_decimal(move _226) -> [return: bb85, unwind: bb90];
    }

    bb83: {
        StorageLive(_221);
        _221 = move ((_216 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_223);
        _223 = move _221;
        _0 = <Result<reserve::Reserve, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _223) -> [return: bb84, unwind: bb90];
    }

    bb84: {
        StorageDead(_223);
        StorageDead(_221);
        StorageDead(_215);
        StorageDead(_147);
        StorageDead(_140);
        StorageDead(_106);
        StorageDead(_104);
        StorageDead(_92);
        StorageDead(_91);
        StorageDead(_90);
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_76);
        StorageDead(_74);
        StorageDead(_64);
        StorageDead(_60);
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_48);
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_2);
        _234 = discriminant(_216);
        _229 = const false;
        StorageDead(_216);
        StorageDead(_192);
        goto -> bb86;
    }

    bb85: {
        StorageDead(_226);
        _90 = reserve::Reserve { version: move _91, last_update: move _92, lending_market: move _104, liquidity: move _106, collateral: move _140, config: move _147, rate_limiter: move _215, attributed_borrow_value: move _225 };
        StorageDead(_225);
        StorageDead(_215);
        StorageDead(_147);
        StorageDead(_140);
        StorageDead(_106);
        StorageDead(_104);
        StorageDead(_92);
        StorageDead(_91);
        _0 = Result::<reserve::Reserve, ProgramError>::Ok(move _90);
        StorageDead(_90);
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_76);
        StorageDead(_74);
        StorageDead(_64);
        StorageDead(_60);
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_48);
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_2);
        _230 = discriminant(_216);
        _229 = const false;
        StorageDead(_216);
        StorageDead(_192);
        StorageDead(_130);
        _232 = discriminant(_96);
        _228 = const false;
        StorageDead(_96);
        goto -> bb87;
    }

    bb86: {
        StorageDead(_130);
        goto -> bb89;
    }

    bb87: {
        return;
    }

    bb88 (cleanup): {
        resume;
    }

    bb89: {
        _236 = discriminant(_96);
        _228 = const false;
        StorageDead(_96);
        goto -> bb87;
    }

    bb90 (cleanup): {
        _238 = discriminant(_216);
        goto -> bb91;
    }

    bb91 (cleanup): {
        _239 = discriminant(_96);
        goto -> bb88;
    }
}
