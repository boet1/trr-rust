digraph Mir_0_469 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn reserve::Reserve::calculate_repay(_1: &amp;ReErased state::reserve::Reserve, _2: u64, _3: math::decimal::Decimal) -&gt; std::result::Result&lt;state::reserve::CalculateRepayResult, solana_program::program_error::ProgramError&gt;<br align="left"/>let _4: math::decimal::Decimal;<br align="left"/>let mut _5: bool;<br align="left"/>let mut _6: u64;<br align="left"/>let mut _7: math::decimal::Decimal;<br align="left"/>let mut _8: u64;<br align="left"/>let mut _9: math::decimal::Decimal;<br align="left"/>let _10: u64;<br align="left"/>let mut _11: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;, u64&gt;;<br align="left"/>let mut _12: std::result::Result&lt;u64, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _13: &amp;ReErased math::decimal::Decimal;<br align="left"/>let mut _14: isize;<br align="left"/>let _15: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _16: !;<br align="left"/>let mut _17: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let _18: u64;<br align="left"/>let mut _19: state::reserve::CalculateRepayResult;<br align="left"/>let mut _20: math::decimal::Decimal;<br align="left"/>let mut _21: u64;<br align="left"/>let mut _22: isize;<br align="left"/>let mut _23: isize;<br align="left"/>let mut _24: isize;<br align="left"/>let mut _25: isize;<br align="left"/>let mut _26: isize;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug amount_to_repay =&gt; _2;<br align="left"/>debug borrowed_amount =&gt; _3;<br align="left"/>debug settle_amount =&gt; _4;<br align="left"/>debug repay_amount =&gt; _10;<br align="left"/>debug residual =&gt; _15;<br align="left"/>debug val =&gt; _18;<br align="left"/>>;
    bb0__0_469 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = _2<br/>_5 = Eq(move _6, const _)<br/></td></tr><tr><td align="left">switchInt(move _5)</td></tr></table>>];
    bb1__0_469 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>_4 = _3<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb2__0_469 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = _2<br/></td></tr><tr><td align="left">_7 = &lt;decimal::Decimal as From&lt;u64&gt;&gt;::from(move _8)</td></tr></table>>];
    bb3__0_469 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageLive(_9)<br/>_9 = _3<br/></td></tr><tr><td align="left">_4 = &lt;decimal::Decimal as Ord&gt;::min(move _7, move _9)</td></tr></table>>];
    bb4__0_469 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb5__0_469 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>_13 = &amp;_4<br/></td></tr><tr><td align="left">_12 = decimal::Decimal::try_ceil_u64(move _13)</td></tr></table>>];
    bb6__0_469 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/></td></tr><tr><td align="left">_11 = &lt;Result&lt;u64, ProgramError&gt; as Try&gt;::branch(move _12)</td></tr></table>>];
    bb7__0_469 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>_14 = discriminant(_11)<br/></td></tr><tr><td align="left">switchInt(move _14)</td></tr></table>>];
    bb8__0_469 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageLive(_18)<br/>_18 = ((_11 as Continue).0: u64)<br/>_10 = _18<br/>StorageDead(_18)<br/>_22 = discriminant(_11)<br/>StorageDead(_11)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>_20 = _4<br/>StorageLive(_21)<br/>_21 = _10<br/>_19 = CalculateRepayResult { settle_amount: move _20, repay_amount: move _21 }<br/>StorageDead(_21)<br/>StorageDead(_20)<br/>_0 = Result::&lt;CalculateRepayResult, ProgramError&gt;::Ok(move _19)<br/>StorageDead(_19)<br/>StorageDead(_10)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_469 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb10__0_469 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_15)<br/>_15 = move ((_11 as Break).0: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;)<br/>StorageLive(_17)<br/>_17 = move _15<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;CalculateRepayResult, ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, ProgramError&gt;&gt;&gt;::from_residual(move _17)</td></tr></table>>];
    bb11__0_469 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageDead(_15)<br/>_24 = discriminant(_11)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_469 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left">return</td></tr></table>>];
    bb13__0_469 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">13 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb14__0_469 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">14 (cleanup)</td></tr><tr><td align="left" balign="left">_26 = discriminant(_11)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_469 -> bb2__0_469 [label="0"];
    bb0__0_469 -> bb1__0_469 [label="otherwise"];
    bb1__0_469 -> bb5__0_469 [label=""];
    bb2__0_469 -> bb3__0_469 [label="return"];
    bb3__0_469 -> bb4__0_469 [label="return"];
    bb4__0_469 -> bb5__0_469 [label=""];
    bb5__0_469 -> bb6__0_469 [label="return"];
    bb6__0_469 -> bb7__0_469 [label="return"];
    bb6__0_469 -> bb13__0_469 [label="unwind"];
    bb7__0_469 -> bb8__0_469 [label="0"];
    bb7__0_469 -> bb10__0_469 [label="1"];
    bb7__0_469 -> bb9__0_469 [label="otherwise"];
    bb8__0_469 -> bb12__0_469 [label=""];
    bb10__0_469 -> bb11__0_469 [label="return"];
    bb10__0_469 -> bb14__0_469 [label="unwind"];
    bb11__0_469 -> bb12__0_469 [label=""];
    bb14__0_469 -> bb13__0_469 [label=""];
}
