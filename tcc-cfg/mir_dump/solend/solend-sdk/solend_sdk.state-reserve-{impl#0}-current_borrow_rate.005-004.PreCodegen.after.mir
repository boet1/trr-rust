// MIR for `reserve::<impl at token-lending\sdk\src\state\reserve.rs:65:1: 65:13>::current_borrow_rate` after PreCodegen

fn reserve::<impl at token-lending\sdk\src\state\reserve.rs:65:1: 65:13>::current_borrow_rate(_1: &reserve::Reserve) -> Result<rate::Rate, ProgramError> {
    debug self => _1;
    let mut _0: std::result::Result<math::rate::Rate, solana_program::program_error::ProgramError>;
    let _2: math::rate::Rate;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::rate::Rate>;
    let mut _4: std::result::Result<math::rate::Rate, solana_program::program_error::ProgramError>;
    let mut _5: &state::reserve::ReserveLiquidity;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _8: !;
    let mut _9: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _10: math::rate::Rate;
    let mut _12: u8;
    let mut _14: u8;
    let mut _15: bool;
    let mut _16: &math::rate::Rate;
    let mut _17: &math::rate::Rate;
    let mut _19: u8;
    let _20: ();
    let mut _21: bool;
    let mut _22: &math::rate::Rate;
    let mut _23: &math::rate::Rate;
    let _24: math::rate::Rate;
    let mut _25: !;
    let mut _26: math::rate::Rate;
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::rate::Rate>;
    let mut _29: std::result::Result<math::rate::Rate, solana_program::program_error::ProgramError>;
    let mut _30: math::rate::Rate;
    let mut _31: math::rate::Rate;
    let mut _32: isize;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _38: u8;
    let mut _39: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::LendingError>, u8>;
    let mut _40: std::result::Result<u8, error::LendingError>;
    let mut _41: std::option::Option<u8>;
    let mut _42: u8;
    let mut _43: u8;
    let mut _44: error::LendingError;
    let mut _45: isize;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, error::LendingError>;
    let mut _50: math::rate::Rate;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::rate::Rate>;
    let mut _52: std::result::Result<math::rate::Rate, solana_program::program_error::ProgramError>;
    let mut _53: math::rate::Rate;
    let mut _54: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::rate::Rate>;
    let mut _55: std::result::Result<math::rate::Rate, solana_program::program_error::ProgramError>;
    let mut _56: math::rate::Rate;
    let mut _57: math::rate::Rate;
    let mut _58: isize;
    let mut _60: !;
    let mut _61: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _63: math::rate::Rate;
    let mut _64: isize;
    let mut _66: !;
    let mut _67: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _69: bool;
    let mut _70: &math::rate::Rate;
    let mut _71: &math::rate::Rate;
    let mut _73: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::rate::Rate>;
    let mut _74: std::result::Result<math::rate::Rate, solana_program::program_error::ProgramError>;
    let mut _75: math::rate::Rate;
    let mut _76: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::rate::Rate>;
    let mut _77: std::result::Result<math::rate::Rate, solana_program::program_error::ProgramError>;
    let mut _78: math::rate::Rate;
    let mut _79: math::rate::Rate;
    let mut _80: isize;
    let mut _82: !;
    let mut _83: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _85: math::rate::Rate;
    let mut _86: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::rate::Rate>;
    let mut _87: std::result::Result<math::rate::Rate, solana_program::program_error::ProgramError>;
    let mut _88: math::rate::Rate;
    let mut _89: math::rate::Rate;
    let mut _90: isize;
    let mut _92: !;
    let mut _93: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _95: isize;
    let mut _97: !;
    let mut _98: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _101: u8;
    let mut _103: u8;
    let mut _105: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::rate::Rate>;
    let mut _106: std::result::Result<math::rate::Rate, solana_program::program_error::ProgramError>;
    let mut _107: math::rate::Rate;
    let mut _108: math::rate::Rate;
    let mut _109: isize;
    let mut _111: !;
    let mut _112: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _114: math::rate::Rate;
    let mut _115: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::rate::Rate>;
    let mut _116: std::result::Result<math::rate::Rate, solana_program::program_error::ProgramError>;
    let mut _117: math::rate::Rate;
    let mut _118: math::rate::Rate;
    let mut _119: isize;
    let mut _121: !;
    let mut _122: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _124: math::rate::Rate;
    let mut _126: math::rate::Rate;
    let mut _127: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::rate::Rate>;
    let mut _128: std::result::Result<math::rate::Rate, solana_program::program_error::ProgramError>;
    let mut _129: math::rate::Rate;
    let mut _130: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::rate::Rate>;
    let mut _131: std::result::Result<math::rate::Rate, solana_program::program_error::ProgramError>;
    let mut _132: math::rate::Rate;
    let mut _133: math::rate::Rate;
    let mut _134: isize;
    let mut _136: !;
    let mut _137: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _139: math::rate::Rate;
    let mut _140: u8;
    let mut _141: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::LendingError>, u8>;
    let mut _142: std::result::Result<u8, error::LendingError>;
    let mut _143: std::option::Option<u8>;
    let mut _144: u8;
    let mut _145: error::LendingError;
    let mut _146: isize;
    let mut _148: !;
    let mut _149: std::result::Result<std::convert::Infallible, error::LendingError>;
    let mut _151: isize;
    let mut _153: !;
    let mut _154: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _157: u8;
    let mut _159: u64;
    let mut _161: math::rate::Rate;
    let mut _162: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::rate::Rate>;
    let mut _163: std::result::Result<math::rate::Rate, solana_program::program_error::ProgramError>;
    let mut _164: math::rate::Rate;
    let mut _165: math::rate::Rate;
    let mut _166: isize;
    let mut _168: !;
    let mut _169: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _171: math::decimal::Decimal;
    let mut _172: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _173: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _174: math::decimal::Decimal;
    let mut _175: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _176: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _177: math::decimal::Decimal;
    let mut _178: math::decimal::Decimal;
    let mut _179: isize;
    let mut _181: !;
    let mut _182: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _184: math::decimal::Decimal;
    let mut _185: math::rate::Rate;
    let mut _186: isize;
    let mut _188: !;
    let mut _189: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _191: bool;
    let mut _192: bool;
    let mut _193: bool;
    let mut _194: bool;
    let mut _195: bool;
    let mut _196: bool;
    let mut _197: bool;
    let mut _198: bool;
    let mut _199: bool;
    let mut _200: isize;
    let mut _201: isize;
    let mut _202: isize;
    let mut _203: isize;
    let mut _204: isize;
    let mut _205: isize;
    let mut _206: isize;
    let mut _207: isize;
    let mut _208: isize;
    let mut _209: isize;
    let mut _210: isize;
    let mut _211: isize;
    let mut _212: isize;
    let mut _213: isize;
    let mut _214: isize;
    let mut _215: isize;
    let mut _216: isize;
    let mut _217: isize;
    let mut _218: isize;
    let mut _219: isize;
    let mut _220: isize;
    let mut _221: isize;
    let mut _222: isize;
    let mut _223: isize;
    let mut _224: isize;
    let mut _225: isize;
    let mut _226: isize;
    let mut _227: isize;
    let mut _228: isize;
    let mut _229: isize;
    let mut _230: isize;
    let mut _231: isize;
    let mut _232: isize;
    let mut _233: isize;
    let mut _234: isize;
    let mut _235: isize;
    let mut _236: isize;
    let mut _237: isize;
    let mut _238: isize;
    let mut _239: isize;
    let mut _240: isize;
    let mut _241: isize;
    let mut _242: isize;
    let mut _243: isize;
    let mut _244: isize;
    let mut _245: isize;
    let mut _246: isize;
    let mut _247: isize;
    let mut _248: isize;
    let mut _249: isize;
    let mut _250: isize;
    let mut _251: isize;
    let mut _252: isize;
    let mut _253: isize;
    let mut _254: isize;
    let mut _255: isize;
    let mut _256: isize;
    let mut _257: isize;
    let mut _258: isize;
    let mut _259: isize;
    let mut _260: isize;
    let mut _261: isize;
    let mut _262: isize;
    let mut _263: isize;
    let mut _264: isize;
    let mut _265: isize;
    let mut _266: isize;
    let mut _267: isize;
    let mut _268: isize;
    let mut _269: isize;
    scope 1 {
        debug utilization_rate => _2;
        let _11: math::rate::Rate;
        scope 6 {
            debug optimal_utilization_rate => _11;
            let _13: math::rate::Rate;
            scope 7 {
                debug max_utilization_rate => _13;
                let _18: math::rate::Rate;
                let _72: math::rate::Rate;
                let _81: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                let _84: math::rate::Rate;
                let _91: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                let _94: math::rate::Rate;
                let _96: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                let _99: math::rate::Rate;
                let _125: math::decimal::Decimal;
                let _135: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                let _138: math::rate::Rate;
                let _147: std::result::Result<std::convert::Infallible, error::LendingError>;
                let _150: u8;
                let _152: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                let _155: math::rate::Rate;
                scope 8 {
                    debug min_rate => _18;
                    let _27: math::rate::Rate;
                    let _33: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                    let _36: math::rate::Rate;
                    scope 9 {
                        debug normalized_rate => _27;
                        let _37: math::rate::Rate;
                        let _46: std::result::Result<std::convert::Infallible, error::LendingError>;
                        let _49: u8;
                        scope 14 {
                            debug rate_range => _37;
                            let _59: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                            let _62: math::rate::Rate;
                            let _65: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                            let _68: math::rate::Rate;
                            scope 19 {
                                debug residual => _59;
                                scope 20 {
                                }
                            }
                            scope 21 {
                                debug val => _62;
                                scope 22 {
                                }
                            }
                            scope 23 {
                                debug residual => _65;
                                scope 24 {
                                }
                            }
                            scope 25 {
                                debug val => _68;
                                scope 26 {
                                }
                            }
                        }
                        scope 15 {
                            debug residual => _46;
                            scope 16 {
                            }
                        }
                        scope 17 {
                            debug val => _49;
                            scope 18 {
                            }
                        }
                    }
                    scope 10 {
                        debug residual => _33;
                        scope 11 {
                        }
                    }
                    scope 12 {
                        debug val => _36;
                        scope 13 {
                        }
                    }
                }
                scope 27 {
                    debug weight => _72;
                    let _100: math::rate::Rate;
                    scope 40 {
                        debug optimal_borrow_rate => _100;
                        let _102: math::rate::Rate;
                        scope 41 {
                            debug max_borrow_rate => _102;
                            let _104: math::rate::Rate;
                            let _110: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                            let _113: math::rate::Rate;
                            scope 42 {
                                debug rate_range => _104;
                                let _120: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                let _123: math::rate::Rate;
                                scope 47 {
                                    debug residual => _120;
                                    scope 48 {
                                    }
                                }
                                scope 49 {
                                    debug val => _123;
                                    scope 50 {
                                    }
                                }
                            }
                            scope 43 {
                                debug residual => _110;
                                scope 44 {
                                }
                            }
                            scope 45 {
                                debug val => _113;
                                scope 46 {
                                }
                            }
                        }
                    }
                }
                scope 28 {
                    debug residual => _81;
                    scope 29 {
                    }
                }
                scope 30 {
                    debug val => _84;
                    scope 31 {
                    }
                }
                scope 32 {
                    debug residual => _91;
                    scope 33 {
                    }
                }
                scope 34 {
                    debug val => _94;
                    scope 35 {
                    }
                }
                scope 36 {
                    debug residual => _96;
                    scope 37 {
                    }
                }
                scope 38 {
                    debug val => _99;
                    scope 39 {
                    }
                }
                scope 51 {
                    debug weight => _125;
                    let _156: math::rate::Rate;
                    scope 64 {
                        debug max_borrow_rate => _156;
                        let _158: math::rate::Rate;
                        scope 65 {
                            debug super_max_borrow_rate => _158;
                            let _160: math::decimal::Decimal;
                            let _167: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                            let _170: math::rate::Rate;
                            scope 66 {
                                debug rate_range => _160;
                                let _180: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                let _183: math::decimal::Decimal;
                                let _187: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
                                let _190: math::decimal::Decimal;
                                scope 71 {
                                    debug residual => _180;
                                    scope 72 {
                                    }
                                }
                                scope 73 {
                                    debug val => _183;
                                    scope 74 {
                                    }
                                }
                                scope 75 {
                                    debug residual => _187;
                                    scope 76 {
                                    }
                                }
                                scope 77 {
                                    debug val => _190;
                                    scope 78 {
                                    }
                                }
                            }
                            scope 67 {
                                debug residual => _167;
                                scope 68 {
                                }
                            }
                            scope 69 {
                                debug val => _170;
                                scope 70 {
                                }
                            }
                        }
                    }
                }
                scope 52 {
                    debug residual => _135;
                    scope 53 {
                    }
                }
                scope 54 {
                    debug val => _138;
                    scope 55 {
                    }
                }
                scope 56 {
                    debug residual => _147;
                    scope 57 {
                    }
                }
                scope 58 {
                    debug val => _150;
                    scope 59 {
                    }
                }
                scope 60 {
                    debug residual => _152;
                    scope 61 {
                    }
                }
                scope 62 {
                    debug val => _155;
                    scope 63 {
                    }
                }
            }
        }
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _10;
        scope 5 {
        }
    }

    bb0: {
        _195 = const false;
        _194 = const false;
        _193 = const false;
        _199 = const false;
        _192 = const false;
        _198 = const false;
        _197 = const false;
        _191 = const false;
        _196 = const false;
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &((*_1).3: state::reserve::ReserveLiquidity);
        _4 = ReserveLiquidity::utilization_rate(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        _3 = <Result<rate::Rate, ProgramError> as Try>::branch(move _4) -> [return: bb2, unwind: bb122];
    }

    bb2: {
        StorageDead(_4);
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_10);
        _10 = ((_3 as Continue).0: math::rate::Rate);
        _2 = _10;
        StorageDead(_10);
        _200 = discriminant(_3);
        StorageDead(_3);
        StorageLive(_11);
        StorageLive(_12);
        _12 = (((*_1).5: state::reserve::ReserveConfig).0: u8);
        _11 = rate::Rate::from_percent(move _12) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_7);
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_9);
        _9 = move _7;
        _0 = <Result<rate::Rate, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _9) -> [return: bb6, unwind: bb138];
    }

    bb6: {
        StorageDead(_9);
        StorageDead(_7);
        _254 = discriminant(_3);
        StorageDead(_3);
        goto -> bb120;
    }

    bb7: {
        StorageDead(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = (((*_1).5: state::reserve::ReserveConfig).1: u8);
        _13 = rate::Rate::from_percent(move _14) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &_2;
        StorageLive(_17);
        _17 = &_11;
        _15 = <rate::Rate as PartialOrd>::le(move _16, move _17) -> [return: bb9, unwind continue];
    }

    bb9: {
        switchInt(move _15) -> [0: bb38, otherwise: bb10];
    }

    bb10: {
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_18);
        StorageLive(_19);
        _19 = (((*_1).5: state::reserve::ReserveConfig).7: u8);
        _18 = rate::Rate::from_percent(move _19) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = &_11;
        StorageLive(_23);
        StorageLive(_24);
        _24 = rate::Rate::zero() -> [return: bb12, unwind continue];
    }

    bb12: {
        _23 = &_24;
        _21 = <rate::Rate as PartialEq>::eq(move _22, move _23) -> [return: bb13, unwind continue];
    }

    bb13: {
        switchInt(move _21) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        StorageLive(_26);
        _26 = _18;
        _0 = Result::<rate::Rate, ProgramError>::Ok(move _26);
        StorageDead(_26);
        StorageDead(_21);
        StorageDead(_20);
        goto -> bb118;
    }

    bb15: {
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        _20 = const ();
        StorageDead(_21);
        StorageDead(_20);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = _2;
        StorageLive(_31);
        _31 = _11;
        _29 = <rate::Rate as common::TryDiv<rate::Rate>>::try_div(move _30, move _31) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_31);
        StorageDead(_30);
        _28 = <Result<rate::Rate, ProgramError> as Try>::branch(move _29) -> [return: bb17, unwind: bb122];
    }

    bb17: {
        StorageDead(_29);
        _32 = discriminant(_28);
        switchInt(move _32) -> [0: bb18, 1: bb19, otherwise: bb4];
    }

    bb18: {
        StorageLive(_36);
        _36 = ((_28 as Continue).0: math::rate::Rate);
        _27 = _36;
        StorageDead(_36);
        _202 = discriminant(_28);
        StorageDead(_28);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = (((*_1).5: state::reserve::ReserveConfig).8: u8);
        StorageLive(_43);
        _43 = (((*_1).5: state::reserve::ReserveConfig).7: u8);
        _41 = core::num::<impl u8>::checked_sub(move _42, move _43) -> [return: bb21, unwind continue];
    }

    bb19: {
        StorageLive(_33);
        _33 = move ((_28 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_35);
        _35 = move _33;
        _0 = <Result<rate::Rate, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _35) -> [return: bb20, unwind: bb137];
    }

    bb20: {
        StorageDead(_35);
        StorageDead(_33);
        _252 = discriminant(_28);
        StorageDead(_28);
        goto -> bb117;
    }

    bb21: {
        StorageDead(_43);
        StorageDead(_42);
        StorageLive(_44);
        _44 = LendingError::MathOverflow;
        _40 = Option::<u8>::ok_or::<LendingError>(move _41, move _44) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_44);
        StorageDead(_41);
        _39 = <Result<u8, LendingError> as Try>::branch(move _40) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_40);
        _45 = discriminant(_39);
        switchInt(move _45) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_49);
        _49 = ((_39 as Continue).0: u8);
        _38 = _49;
        StorageDead(_49);
        _37 = rate::Rate::from_percent(move _38) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_46);
        _46 = move ((_39 as Break).0: std::result::Result<std::convert::Infallible, error::LendingError>);
        StorageLive(_48);
        _48 = move _46;
        _0 = <Result<rate::Rate, ProgramError> as FromResidual<Result<Infallible, LendingError>>>::from_residual(move _48) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_48);
        StorageDead(_46);
        StorageDead(_38);
        StorageDead(_39);
        StorageDead(_37);
        goto -> bb117;
    }

    bb27: {
        StorageDead(_38);
        StorageDead(_39);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = _27;
        StorageLive(_57);
        _57 = _37;
        _55 = <rate::Rate as common::TryMul<rate::Rate>>::try_mul(move _56, move _57) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_57);
        StorageDead(_56);
        _54 = <Result<rate::Rate, ProgramError> as Try>::branch(move _55) -> [return: bb29, unwind: bb122];
    }

    bb29: {
        _195 = const true;
        StorageDead(_55);
        _58 = discriminant(_54);
        switchInt(move _58) -> [0: bb30, 1: bb31, otherwise: bb4];
    }

    bb30: {
        StorageLive(_62);
        _62 = ((_54 as Continue).0: math::rate::Rate);
        _53 = _62;
        StorageDead(_62);
        StorageLive(_63);
        _63 = _18;
        _52 = <rate::Rate as common::TryAdd>::try_add(move _53, move _63) -> [return: bb33, unwind: bb136];
    }

    bb31: {
        StorageLive(_59);
        _59 = move ((_54 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_61);
        _61 = move _59;
        _0 = <Result<rate::Rate, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _61) -> [return: bb32, unwind: bb136];
    }

    bb32: {
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_50);
        StorageDead(_37);
        StorageDead(_27);
        StorageDead(_18);
        goto -> bb116;
    }

    bb33: {
        StorageDead(_63);
        StorageDead(_53);
        _51 = <Result<rate::Rate, ProgramError> as Try>::branch(move _52) -> [return: bb34, unwind: bb136];
    }

    bb34: {
        StorageDead(_52);
        _64 = discriminant(_51);
        switchInt(move _64) -> [0: bb35, 1: bb36, otherwise: bb4];
    }

    bb35: {
        StorageLive(_68);
        _68 = ((_51 as Continue).0: math::rate::Rate);
        _50 = _68;
        StorageDead(_68);
        _0 = Result::<rate::Rate, ProgramError>::Ok(move _50);
        StorageDead(_50);
        StorageDead(_37);
        StorageDead(_27);
        StorageDead(_18);
        _204 = discriminant(_51);
        _206 = discriminant(_54);
        _195 = const false;
        StorageDead(_54);
        StorageDead(_51);
        goto -> bb109;
    }

    bb36: {
        StorageLive(_65);
        _65 = move ((_51 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_67);
        _67 = move _65;
        _0 = <Result<rate::Rate, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _67) -> [return: bb37, unwind: bb135];
    }

    bb37: {
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_50);
        StorageDead(_37);
        StorageDead(_27);
        StorageDead(_18);
        _248 = discriminant(_51);
        goto -> bb116;
    }

    bb38: {
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &_2;
        StorageLive(_71);
        _71 = &_13;
        _69 = <rate::Rate as PartialOrd>::le(move _70, move _71) -> [return: bb39, unwind continue];
    }

    bb39: {
        switchInt(move _69) -> [0: bb69, otherwise: bb40];
    }

    bb40: {
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = _2;
        StorageLive(_79);
        _79 = _11;
        _77 = <rate::Rate as common::TrySub>::try_sub(move _78, move _79) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_79);
        StorageDead(_78);
        _76 = <Result<rate::Rate, ProgramError> as Try>::branch(move _77) -> [return: bb42, unwind: bb122];
    }

    bb42: {
        _194 = const true;
        StorageDead(_77);
        _80 = discriminant(_76);
        switchInt(move _80) -> [0: bb43, 1: bb44, otherwise: bb4];
    }

    bb43: {
        StorageLive(_84);
        _84 = ((_76 as Continue).0: math::rate::Rate);
        _75 = _84;
        StorageDead(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _88 = _13;
        StorageLive(_89);
        _89 = _11;
        _87 = <rate::Rate as common::TrySub>::try_sub(move _88, move _89) -> [return: bb46, unwind: bb134];
    }

    bb44: {
        StorageLive(_81);
        _81 = move ((_76 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_83);
        _83 = move _81;
        _0 = <Result<rate::Rate, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _83) -> [return: bb45, unwind: bb134];
    }

    bb45: {
        StorageDead(_83);
        StorageDead(_81);
        StorageDead(_75);
        StorageDead(_74);
        goto -> bb124;
    }

    bb46: {
        StorageDead(_89);
        StorageDead(_88);
        _86 = <Result<rate::Rate, ProgramError> as Try>::branch(move _87) -> [return: bb47, unwind: bb134];
    }

    bb47: {
        _193 = const true;
        StorageDead(_87);
        _90 = discriminant(_86);
        switchInt(move _90) -> [0: bb48, 1: bb49, otherwise: bb4];
    }

    bb48: {
        StorageLive(_94);
        _94 = ((_86 as Continue).0: math::rate::Rate);
        _85 = _94;
        StorageDead(_94);
        _74 = <rate::Rate as common::TryDiv<rate::Rate>>::try_div(move _75, move _85) -> [return: bb51, unwind: bb133];
    }

    bb49: {
        StorageLive(_91);
        _91 = move ((_86 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_93);
        _93 = move _91;
        _0 = <Result<rate::Rate, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _93) -> [return: bb50, unwind: bb133];
    }

    bb50: {
        StorageDead(_93);
        StorageDead(_91);
        StorageDead(_85);
        StorageDead(_75);
        StorageDead(_74);
        goto -> bb113;
    }

    bb51: {
        StorageDead(_85);
        StorageDead(_75);
        _73 = <Result<rate::Rate, ProgramError> as Try>::branch(move _74) -> [return: bb52, unwind: bb133];
    }

    bb52: {
        StorageDead(_74);
        _95 = discriminant(_73);
        switchInt(move _95) -> [0: bb53, 1: bb54, otherwise: bb4];
    }

    bb53: {
        StorageLive(_99);
        _99 = ((_73 as Continue).0: math::rate::Rate);
        _72 = _99;
        StorageDead(_99);
        _208 = discriminant(_73);
        _210 = discriminant(_86);
        _193 = const false;
        StorageDead(_86);
        _212 = discriminant(_76);
        _194 = const false;
        StorageDead(_76);
        StorageDead(_73);
        StorageLive(_100);
        StorageLive(_101);
        _101 = (((*_1).5: state::reserve::ReserveConfig).8: u8);
        _100 = rate::Rate::from_percent(move _101) -> [return: bb56, unwind continue];
    }

    bb54: {
        StorageLive(_96);
        _96 = move ((_73 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_98);
        _98 = move _96;
        _0 = <Result<rate::Rate, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _98) -> [return: bb55, unwind: bb132];
    }

    bb55: {
        StorageDead(_98);
        StorageDead(_96);
        _242 = discriminant(_73);
        goto -> bb113;
    }

    bb56: {
        StorageDead(_101);
        StorageLive(_102);
        StorageLive(_103);
        _103 = (((*_1).5: state::reserve::ReserveConfig).9: u8);
        _102 = rate::Rate::from_percent(move _103) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        _107 = _102;
        StorageLive(_108);
        _108 = _100;
        _106 = <rate::Rate as common::TrySub>::try_sub(move _107, move _108) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_108);
        StorageDead(_107);
        _105 = <Result<rate::Rate, ProgramError> as Try>::branch(move _106) -> [return: bb59, unwind: bb122];
    }

    bb59: {
        StorageDead(_106);
        _109 = discriminant(_105);
        switchInt(move _109) -> [0: bb60, 1: bb61, otherwise: bb4];
    }

    bb60: {
        StorageLive(_113);
        _113 = ((_105 as Continue).0: math::rate::Rate);
        _104 = _113;
        StorageDead(_113);
        _214 = discriminant(_105);
        StorageDead(_105);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _117 = _72;
        StorageLive(_118);
        _118 = _104;
        _116 = <rate::Rate as common::TryMul<rate::Rate>>::try_mul(move _117, move _118) -> [return: bb63, unwind continue];
    }

    bb61: {
        StorageLive(_110);
        _110 = move ((_105 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_112);
        _112 = move _110;
        _0 = <Result<rate::Rate, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _112) -> [return: bb62, unwind: bb131];
    }

    bb62: {
        StorageDead(_112);
        StorageDead(_110);
        _240 = discriminant(_105);
        StorageDead(_105);
        StorageDead(_104);
        StorageDead(_102);
        StorageDead(_100);
        goto -> bb114;
    }

    bb63: {
        StorageDead(_118);
        StorageDead(_117);
        _115 = <Result<rate::Rate, ProgramError> as Try>::branch(move _116) -> [return: bb64, unwind: bb122];
    }

    bb64: {
        _199 = const true;
        StorageDead(_116);
        _119 = discriminant(_115);
        switchInt(move _119) -> [0: bb65, 1: bb66, otherwise: bb4];
    }

    bb65: {
        StorageLive(_123);
        _123 = ((_115 as Continue).0: math::rate::Rate);
        _114 = _123;
        StorageDead(_123);
        StorageLive(_124);
        _124 = _100;
        _0 = <rate::Rate as common::TryAdd>::try_add(move _114, move _124) -> [return: bb68, unwind: bb130];
    }

    bb66: {
        StorageLive(_120);
        _120 = move ((_115 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_122);
        _122 = move _120;
        _0 = <Result<rate::Rate, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _122) -> [return: bb67, unwind: bb130];
    }

    bb67: {
        StorageDead(_122);
        StorageDead(_120);
        StorageDead(_114);
        StorageDead(_104);
        StorageDead(_102);
        StorageDead(_100);
        StorageDead(_72);
        _238 = discriminant(_115);
        _199 = const false;
        StorageDead(_115);
        goto -> bb115;
    }

    bb68: {
        StorageDead(_124);
        StorageDead(_114);
        StorageDead(_104);
        StorageDead(_102);
        StorageDead(_100);
        StorageDead(_72);
        _216 = discriminant(_115);
        _199 = const false;
        StorageDead(_115);
        goto -> bb108;
    }

    bb69: {
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        _132 = _2;
        StorageLive(_133);
        _133 = _13;
        _131 = <rate::Rate as common::TrySub>::try_sub(move _132, move _133) -> [return: bb70, unwind continue];
    }

    bb70: {
        StorageDead(_133);
        StorageDead(_132);
        _130 = <Result<rate::Rate, ProgramError> as Try>::branch(move _131) -> [return: bb71, unwind: bb122];
    }

    bb71: {
        _192 = const true;
        StorageDead(_131);
        _134 = discriminant(_130);
        switchInt(move _134) -> [0: bb72, 1: bb73, otherwise: bb4];
    }

    bb72: {
        StorageLive(_138);
        _138 = ((_130 as Continue).0: math::rate::Rate);
        _129 = _138;
        StorageDead(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        _144 = (((*_1).5: state::reserve::ReserveConfig).1: u8);
        _143 = core::num::<impl u8>::checked_sub(const 100_u8, move _144) -> [return: bb75, unwind: bb129];
    }

    bb73: {
        StorageLive(_135);
        _135 = move ((_130 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_137);
        _137 = move _135;
        _0 = <Result<rate::Rate, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _137) -> [return: bb74, unwind: bb129];
    }

    bb74: {
        StorageDead(_137);
        StorageDead(_135);
        StorageDead(_129);
        StorageDead(_128);
        StorageDead(_126);
        goto -> bb123;
    }

    bb75: {
        StorageDead(_144);
        StorageLive(_145);
        _145 = LendingError::MathOverflow;
        _142 = Option::<u8>::ok_or::<LendingError>(move _143, move _145) -> [return: bb76, unwind: bb129];
    }

    bb76: {
        StorageDead(_145);
        StorageDead(_143);
        _141 = <Result<u8, LendingError> as Try>::branch(move _142) -> [return: bb77, unwind: bb129];
    }

    bb77: {
        StorageDead(_142);
        _146 = discriminant(_141);
        switchInt(move _146) -> [0: bb78, 1: bb79, otherwise: bb4];
    }

    bb78: {
        StorageLive(_150);
        _150 = ((_141 as Continue).0: u8);
        _140 = _150;
        StorageDead(_150);
        _139 = rate::Rate::from_percent(move _140) -> [return: bb81, unwind: bb129];
    }

    bb79: {
        StorageLive(_147);
        _147 = move ((_141 as Break).0: std::result::Result<std::convert::Infallible, error::LendingError>);
        StorageLive(_149);
        _149 = move _147;
        _0 = <Result<rate::Rate, ProgramError> as FromResidual<Result<Infallible, LendingError>>>::from_residual(move _149) -> [return: bb80, unwind: bb129];
    }

    bb80: {
        StorageDead(_149);
        StorageDead(_147);
        StorageDead(_140);
        StorageDead(_139);
        StorageDead(_129);
        StorageDead(_128);
        StorageDead(_126);
        goto -> bb111;
    }

    bb81: {
        StorageDead(_140);
        _128 = <rate::Rate as common::TryDiv<rate::Rate>>::try_div(move _129, move _139) -> [return: bb82, unwind: bb129];
    }

    bb82: {
        StorageDead(_139);
        StorageDead(_129);
        _127 = <Result<rate::Rate, ProgramError> as Try>::branch(move _128) -> [return: bb83, unwind: bb129];
    }

    bb83: {
        _198 = const true;
        StorageDead(_128);
        _151 = discriminant(_127);
        switchInt(move _151) -> [0: bb84, 1: bb85, otherwise: bb4];
    }

    bb84: {
        StorageLive(_155);
        _155 = ((_127 as Continue).0: math::rate::Rate);
        _126 = _155;
        StorageDead(_155);
        _125 = <rate::Rate as Into<decimal::Decimal>>::into(move _126) -> [return: bb87, unwind: bb128];
    }

    bb85: {
        StorageLive(_152);
        _152 = move ((_127 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_154);
        _154 = move _152;
        _0 = <Result<rate::Rate, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _154) -> [return: bb86, unwind: bb128];
    }

    bb86: {
        StorageDead(_154);
        StorageDead(_152);
        StorageDead(_126);
        _234 = discriminant(_127);
        goto -> bb111;
    }

    bb87: {
        StorageDead(_126);
        _218 = discriminant(_127);
        StorageDead(_141);
        _220 = discriminant(_130);
        _192 = const false;
        StorageDead(_130);
        _198 = const false;
        StorageDead(_127);
        StorageLive(_156);
        StorageLive(_157);
        _157 = (((*_1).5: state::reserve::ReserveConfig).9: u8);
        _156 = rate::Rate::from_percent(move _157) -> [return: bb88, unwind continue];
    }

    bb88: {
        StorageDead(_157);
        StorageLive(_158);
        StorageLive(_159);
        _159 = (((*_1).5: state::reserve::ReserveConfig).10: u64);
        _158 = rate::Rate::from_percent_u64(move _159) -> [return: bb89, unwind continue];
    }

    bb89: {
        StorageDead(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        _164 = _158;
        StorageLive(_165);
        _165 = _156;
        _163 = <rate::Rate as common::TrySub>::try_sub(move _164, move _165) -> [return: bb90, unwind continue];
    }

    bb90: {
        StorageDead(_165);
        StorageDead(_164);
        _162 = <Result<rate::Rate, ProgramError> as Try>::branch(move _163) -> [return: bb91, unwind: bb122];
    }

    bb91: {
        _197 = const true;
        StorageDead(_163);
        _166 = discriminant(_162);
        switchInt(move _166) -> [0: bb92, 1: bb93, otherwise: bb4];
    }

    bb92: {
        StorageLive(_170);
        _170 = ((_162 as Continue).0: math::rate::Rate);
        _161 = _170;
        StorageDead(_170);
        _160 = <rate::Rate as Into<decimal::Decimal>>::into(move _161) -> [return: bb95, unwind: bb127];
    }

    bb93: {
        StorageLive(_167);
        _167 = move ((_162 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_169);
        _169 = move _167;
        _0 = <Result<rate::Rate, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _169) -> [return: bb94, unwind: bb127];
    }

    bb94: {
        StorageDead(_169);
        StorageDead(_167);
        StorageDead(_161);
        _232 = discriminant(_162);
        _197 = const false;
        StorageDead(_162);
        StorageDead(_160);
        StorageDead(_158);
        StorageDead(_156);
        goto -> bb112;
    }

    bb95: {
        StorageDead(_161);
        _222 = discriminant(_162);
        _197 = const false;
        StorageDead(_162);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        _177 = _125;
        StorageLive(_178);
        _178 = _160;
        _176 = <decimal::Decimal as common::TryMul<decimal::Decimal>>::try_mul(move _177, move _178) -> [return: bb96, unwind continue];
    }

    bb96: {
        StorageDead(_178);
        StorageDead(_177);
        _175 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _176) -> [return: bb97, unwind: bb122];
    }

    bb97: {
        _191 = const true;
        StorageDead(_176);
        _179 = discriminant(_175);
        switchInt(move _179) -> [0: bb98, 1: bb99, otherwise: bb4];
    }

    bb98: {
        StorageLive(_183);
        _183 = ((_175 as Continue).0: math::decimal::Decimal);
        _174 = _183;
        StorageDead(_183);
        StorageLive(_184);
        StorageLive(_185);
        _185 = _156;
        _184 = <rate::Rate as Into<decimal::Decimal>>::into(move _185) -> [return: bb101, unwind: bb126];
    }

    bb99: {
        StorageLive(_180);
        _180 = move ((_175 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_182);
        _182 = move _180;
        _0 = <Result<rate::Rate, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _182) -> [return: bb100, unwind: bb126];
    }

    bb100: {
        StorageDead(_182);
        StorageDead(_180);
        StorageDead(_174);
        StorageDead(_173);
        StorageDead(_171);
        StorageDead(_160);
        StorageDead(_158);
        StorageDead(_156);
        StorageDead(_125);
        goto -> bb110;
    }

    bb101: {
        StorageDead(_185);
        _173 = <decimal::Decimal as common::TryAdd>::try_add(move _174, move _184) -> [return: bb102, unwind: bb126];
    }

    bb102: {
        StorageDead(_184);
        StorageDead(_174);
        _172 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _173) -> [return: bb103, unwind: bb126];
    }

    bb103: {
        _196 = const true;
        StorageDead(_173);
        _186 = discriminant(_172);
        switchInt(move _186) -> [0: bb104, 1: bb105, otherwise: bb4];
    }

    bb104: {
        StorageLive(_190);
        _190 = ((_172 as Continue).0: math::decimal::Decimal);
        _171 = _190;
        StorageDead(_190);
        _0 = <decimal::Decimal as TryInto<rate::Rate>>::try_into(move _171) -> [return: bb107, unwind: bb125];
    }

    bb105: {
        StorageLive(_187);
        _187 = move ((_172 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_189);
        _189 = move _187;
        _0 = <Result<rate::Rate, ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _189) -> [return: bb106, unwind: bb125];
    }

    bb106: {
        StorageDead(_189);
        StorageDead(_187);
        StorageDead(_171);
        StorageDead(_160);
        StorageDead(_158);
        StorageDead(_156);
        StorageDead(_125);
        _228 = discriminant(_172);
        goto -> bb110;
    }

    bb107: {
        StorageDead(_171);
        StorageDead(_160);
        StorageDead(_158);
        StorageDead(_156);
        StorageDead(_125);
        _224 = discriminant(_172);
        _226 = discriminant(_175);
        _191 = const false;
        StorageDead(_175);
        _196 = const false;
        StorageDead(_172);
        goto -> bb108;
    }

    bb108: {
        StorageDead(_69);
        goto -> bb109;
    }

    bb109: {
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_2);
        goto -> bb121;
    }

    bb110: {
        _230 = discriminant(_175);
        _191 = const false;
        StorageDead(_175);
        _196 = const false;
        StorageDead(_172);
        goto -> bb115;
    }

    bb111: {
        StorageDead(_141);
        goto -> bb123;
    }

    bb112: {
        StorageDead(_125);
        goto -> bb115;
    }

    bb113: {
        _244 = discriminant(_86);
        _193 = const false;
        StorageDead(_86);
        goto -> bb124;
    }

    bb114: {
        StorageDead(_72);
        goto -> bb115;
    }

    bb115: {
        StorageDead(_69);
        goto -> bb119;
    }

    bb116: {
        _250 = discriminant(_54);
        _195 = const false;
        StorageDead(_54);
        StorageDead(_51);
        goto -> bb119;
    }

    bb117: {
        StorageDead(_27);
        goto -> bb118;
    }

    bb118: {
        StorageDead(_18);
        goto -> bb119;
    }

    bb119: {
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_11);
        goto -> bb120;
    }

    bb120: {
        StorageDead(_2);
        goto -> bb121;
    }

    bb121: {
        return;
    }

    bb122 (cleanup): {
        resume;
    }

    bb123: {
        _236 = discriminant(_130);
        _192 = const false;
        StorageDead(_130);
        _198 = const false;
        StorageDead(_127);
        goto -> bb112;
    }

    bb124: {
        _246 = discriminant(_76);
        _194 = const false;
        StorageDead(_76);
        StorageDead(_73);
        goto -> bb114;
    }

    bb125 (cleanup): {
        _256 = discriminant(_172);
        goto -> bb126;
    }

    bb126 (cleanup): {
        _257 = discriminant(_175);
        goto -> bb122;
    }

    bb127 (cleanup): {
        _258 = discriminant(_162);
        goto -> bb122;
    }

    bb128 (cleanup): {
        _259 = discriminant(_127);
        goto -> bb129;
    }

    bb129 (cleanup): {
        _260 = discriminant(_130);
        goto -> bb122;
    }

    bb130 (cleanup): {
        _261 = discriminant(_115);
        goto -> bb122;
    }

    bb131 (cleanup): {
        _262 = discriminant(_105);
        goto -> bb122;
    }

    bb132 (cleanup): {
        _263 = discriminant(_73);
        goto -> bb133;
    }

    bb133 (cleanup): {
        _264 = discriminant(_86);
        goto -> bb134;
    }

    bb134 (cleanup): {
        _265 = discriminant(_76);
        goto -> bb122;
    }

    bb135 (cleanup): {
        _266 = discriminant(_51);
        goto -> bb136;
    }

    bb136 (cleanup): {
        _267 = discriminant(_54);
        goto -> bb122;
    }

    bb137 (cleanup): {
        _268 = discriminant(_28);
        goto -> bb122;
    }

    bb138 (cleanup): {
        _269 = discriminant(_3);
        goto -> bb122;
    }
}
