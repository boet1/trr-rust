// MIR for `decimal::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:587:3: 587:13>::binop_slice` before PreCodegen

fn decimal::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:587:3: 587:13>::binop_slice(_1: &mut [u64], _2: &[u64], _3: impl Fn(u64, u64) -> (u64, bool) + Copy) -> bool {
    debug a => _1;
    debug b => _2;
    debug binop => _3;
    let mut _0: bool;
    let mut _4: bool;
    let _5: ();
    let mut _6: std::iter::Zip<std::slice::IterMut<'_, u64>, std::slice::Iter<'_, u64>>;
    let mut _7: std::slice::IterMut<'_, u64>;
    let mut _8: &mut [u64];
    let mut _9: std::slice::Iter<'_, u64>;
    let mut _10: &[u64];
    let mut _11: {closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:1233:41: 1233:49};
    let mut _12: &mut bool;
    let mut _13: &impl Fn(u64, u64) -> (u64, bool) + Copy;
    scope 1 {
        debug c => _4;
    }

    bb0: {
        StorageLive(_4);
        _4 = const false;
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &mut (*_1);
        _7 = core::slice::<impl [u64]>::iter_mut(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_2);
        _9 = core::slice::<impl [u64]>::iter(move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        _6 = <std::slice::IterMut<'_, u64> as Iterator>::zip::<std::slice::Iter<'_, u64>>(move _7, move _9) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_9);
        StorageDead(_7);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &mut _4;
        StorageLive(_13);
        _13 = &_3;
        _11 = {closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:1233:41: 1233:49} { c: move _12, binop: move _13 };
        StorageDead(_13);
        StorageDead(_12);
        _5 = <Zip<std::slice::IterMut<'_, u64>, std::slice::Iter<'_, u64>> as Iterator>::for_each::<{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:1233:41: 1233:49}>(move _6, move _11) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_11);
        StorageDead(_6);
        StorageDead(_5);
        _0 = _4;
        StorageDead(_4);
        return;
    }
}
