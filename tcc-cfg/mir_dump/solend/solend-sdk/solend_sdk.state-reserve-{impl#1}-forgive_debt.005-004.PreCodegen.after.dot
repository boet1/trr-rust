digraph Mir_0_489 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn ReserveLiquidity::forgive_debt(_1: &amp;ReErased mut state::reserve::ReserveLiquidity, _2: math::decimal::Decimal) -&gt; std::result::Result&lt;(), solana_program::program_error::ProgramError&gt;<br align="left"/>let mut _3: math::decimal::Decimal;<br align="left"/>let mut _4: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;, math::decimal::Decimal&gt;;<br align="left"/>let mut _5: std::result::Result&lt;math::decimal::Decimal, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _6: math::decimal::Decimal;<br align="left"/>let mut _7: math::decimal::Decimal;<br align="left"/>let mut _8: isize;<br align="left"/>let _9: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _10: !;<br align="left"/>let mut _11: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let _12: math::decimal::Decimal;<br align="left"/>let mut _13: ();<br align="left"/>let mut _14: isize;<br align="left"/>let mut _15: isize;<br align="left"/>let mut _16: isize;<br align="left"/>let mut _17: isize;<br align="left"/>let mut _18: isize;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug liquidity_amount =&gt; _2;<br align="left"/>debug residual =&gt; _9;<br align="left"/>debug val =&gt; _12;<br align="left"/>>;
    bb0__0_489 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = ((*_1).6: math::decimal::Decimal)<br/>StorageLive(_7)<br/>_7 = _2<br/></td></tr><tr><td align="left">_5 = &lt;decimal::Decimal as common::TrySub&gt;::try_sub(move _6, move _7)</td></tr></table>>];
    bb1__0_489 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">_4 = &lt;Result&lt;decimal::Decimal, ProgramError&gt; as Try&gt;::branch(move _5)</td></tr></table>>];
    bb2__0_489 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>_8 = discriminant(_4)<br/></td></tr><tr><td align="left">switchInt(move _8)</td></tr></table>>];
    bb3__0_489 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_12)<br/>_12 = ((_4 as Continue).0: math::decimal::Decimal)<br/>_3 = _12<br/>StorageDead(_12)<br/>((*_1).6: math::decimal::Decimal) = move _3<br/>StorageDead(_3)<br/>_14 = discriminant(_4)<br/>StorageDead(_4)<br/>StorageLive(_13)<br/>_13 = ()<br/>_0 = Result::&lt;(), ProgramError&gt;::Ok(move _13)<br/>StorageDead(_13)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb4__0_489 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_489 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_9)<br/>_9 = move ((_4 as Break).0: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;)<br/>StorageLive(_11)<br/>_11 = move _9<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;(), ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, ProgramError&gt;&gt;&gt;::from_residual(move _11)</td></tr></table>>];
    bb6__0_489 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_9)<br/>StorageDead(_3)<br/>_16 = discriminant(_4)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_489 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left">return</td></tr></table>>];
    bb8__0_489 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">8 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb9__0_489 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">9 (cleanup)</td></tr><tr><td align="left" balign="left">_18 = discriminant(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_489 -> bb1__0_489 [label="return"];
    bb1__0_489 -> bb2__0_489 [label="return"];
    bb1__0_489 -> bb8__0_489 [label="unwind"];
    bb2__0_489 -> bb3__0_489 [label="0"];
    bb2__0_489 -> bb5__0_489 [label="1"];
    bb2__0_489 -> bb4__0_489 [label="otherwise"];
    bb3__0_489 -> bb7__0_489 [label=""];
    bb5__0_489 -> bb6__0_489 [label="return"];
    bb5__0_489 -> bb9__0_489 [label="unwind"];
    bb6__0_489 -> bb7__0_489 [label=""];
    bb9__0_489 -> bb8__0_489 [label=""];
}
