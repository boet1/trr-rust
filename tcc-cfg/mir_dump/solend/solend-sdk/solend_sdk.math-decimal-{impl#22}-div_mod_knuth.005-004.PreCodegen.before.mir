// MIR for `decimal::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:587:3: 587:13>::div_mod_knuth` before PreCodegen

fn decimal::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.1\src\uint.rs:587:3: 587:13>::div_mod_knuth(_1: U192, _2: U192, _3: usize, _4: usize) -> (U192, U192) {
    debug self => _1;
    debug v => _2;
    debug n => _3;
    debug m => _4;
    let mut _0: (math::decimal::U192, math::decimal::U192);
    let _5: ();
    let mut _6: bool;
    let _7: ();
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: &math::decimal::U192;
    let mut _11: usize;
    let mut _12: &math::decimal::U192;
    let mut _13: bool;
    let mut _14: &math::decimal::U192;
    let mut _15: !;
    let _16: ();
    let mut _17: bool;
    let _18: ();
    let mut _19: bool;
    let mut _20: usize;
    let mut _21: usize;
    let mut _22: usize;
    let mut _23: (usize, bool);
    let mut _24: !;
    let _25: u32;
    let mut _26: u64;
    let _27: usize;
    let mut _28: usize;
    let mut _29: (usize, bool);
    let mut _30: usize;
    let mut _31: bool;
    let _32: ();
    let mut _33: &mut math::decimal::U192;
    let mut _34: u32;
    let mut _36: math::decimal::U192;
    let mut _37: u32;
    let _40: usize;
    let mut _41: usize;
    let mut _42: (usize, bool);
    let mut _43: usize;
    let mut _44: bool;
    let _46: usize;
    let mut _47: usize;
    let mut _48: (usize, bool);
    let mut _49: usize;
    let mut _50: bool;
    let _51: ();
    let mut _52: std::iter::Rev<std::ops::RangeInclusive<usize>>;
    let mut _53: std::iter::Rev<std::ops::RangeInclusive<usize>>;
    let mut _54: std::ops::RangeInclusive<usize>;
    let mut _55: usize;
    let mut _57: ();
    let _58: ();
    let mut _59: std::option::Option<usize>;
    let mut _60: &mut std::iter::Rev<std::ops::RangeInclusive<usize>>;
    let mut _61: &mut std::iter::Rev<std::ops::RangeInclusive<usize>>;
    let mut _62: isize;
    let mut _63: !;
    let _66: usize;
    let mut _67: usize;
    let mut _68: usize;
    let mut _69: (usize, bool);
    let mut _70: usize;
    let mut _71: bool;
    let mut _73: bool;
    let mut _74: u64;
    let mut _75: u64;
    let mut _78: (u64, u64);
    let mut _79: u64;
    let mut _80: u64;
    let _81: usize;
    let mut _82: usize;
    let mut _83: usize;
    let mut _84: usize;
    let mut _85: (usize, bool);
    let mut _86: (usize, bool);
    let mut _87: usize;
    let mut _88: bool;
    let mut _89: u64;
    let _90: ();
    let mut _93: (u64, u64);
    let mut _94: u128;
    let mut _95: u128;
    let mut _96: u64;
    let mut _97: u128;
    let mut _98: u64;
    let mut _99: (u128, bool);
    let _100: ();
    let mut _101: bool;
    let mut _102: &(u64, u64);
    let _103: (u64, u64);
    let mut _104: u64;
    let mut _105: u64;
    let mut _106: &(u64, u64);
    let _107: (u64, u64);
    let mut _108: u64;
    let mut _109: u64;
    let _110: usize;
    let mut _111: usize;
    let mut _112: usize;
    let mut _113: usize;
    let mut _114: (usize, bool);
    let mut _115: (usize, bool);
    let mut _116: usize;
    let mut _117: bool;
    let mut _118: !;
    let mut _119: (u64, bool);
    let mut _122: (u64, bool);
    let mut _123: u64;
    let mut _124: u64;
    let mut _125: u64;
    let mut _126: bool;
    let mut _127: !;
    let mut _129: math::decimal::U192;
    let mut _130: u64;
    let mut _132: &mut [u64];
    let mut _133: &mut [u64];
    let mut _134: &mut [u64];
    let mut _135: &mut [u64; 4];
    let mut _136: std::ops::RangeFrom<usize>;
    let mut _137: usize;
    let mut _138: &[u64];
    let _139: &[u64];
    let _140: &[u64];
    let mut _141: &[u64; 4];
    let mut _142: std::ops::RangeTo<usize>;
    let mut _143: usize;
    let mut _144: usize;
    let mut _145: (usize, bool);
    let _146: ();
    let mut _147: bool;
    let mut _148: (u64, bool);
    let mut _150: &mut [u64];
    let mut _151: &mut [u64];
    let mut _152: &mut [u64];
    let mut _153: &mut [u64; 4];
    let mut _154: std::ops::RangeFrom<usize>;
    let mut _155: usize;
    let mut _156: &[u64];
    let _157: &[u64];
    let _158: &[u64];
    let mut _159: &[u64; 3];
    let mut _160: std::ops::RangeTo<usize>;
    let mut _161: usize;
    let mut _162: u64;
    let mut _163: u64;
    let _164: usize;
    let mut _165: usize;
    let mut _166: usize;
    let mut _167: (usize, bool);
    let mut _168: usize;
    let mut _169: bool;
    let mut _170: u64;
    let mut _171: bool;
    let _172: usize;
    let mut _173: usize;
    let mut _174: usize;
    let mut _175: (usize, bool);
    let mut _176: usize;
    let mut _177: bool;
    let mut _178: u64;
    let _179: usize;
    let mut _180: usize;
    let mut _181: bool;
    let mut _183: [u64; 4];
    let mut _184: u32;
    let mut _185: math::decimal::U192;
    let mut _186: math::decimal::U192;
    scope 1 {
        debug shift => _25;
        let mut _35: [u64; 4];
        scope 2 {
            debug u => _35;
            let mut _38: math::decimal::U192;
            scope 3 {
                debug q => _38;
                let _39: u64;
                scope 4 {
                    debug v_n_1 => _39;
                    let _45: u64;
                    scope 5 {
                        debug v_n_2 => _45;
                        let mut _56: std::iter::Rev<std::ops::RangeInclusive<usize>>;
                        let _182: math::decimal::U192;
                        scope 6 {
                            debug iter => _56;
                            let _64: usize;
                            scope 7 {
                                debug j => _64;
                                let _65: u64;
                                scope 8 {
                                    debug u_jn => _65;
                                    let mut _72: u64;
                                    let mut _76: u64;
                                    let mut _77: u64;
                                    scope 9 {
                                        debug q_hat => _72;
                                        let _128: [u64; 4];
                                        scope 13 {
                                            debug q_hat_v => _128;
                                            let _131: bool;
                                            scope 14 {
                                                debug c => _131;
                                                let _149: bool;
                                                scope 15 {
                                                    debug c => _149;
                                                }
                                            }
                                        }
                                    }
                                    scope 10 {
                                        debug q_hat => _76;
                                        debug r_hat => _77;
                                        let _91: u64;
                                        let _92: u64;
                                        scope 11 {
                                            debug hi => _91;
                                            debug lo => _92;
                                            let _120: u64;
                                            let _121: bool;
                                            scope 12 {
                                                debug new_r_hat => _120;
                                                debug overflow => _121;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        scope 16 {
                            debug remainder => _182;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        _6 = const true;
        switchInt(move _6) -> [0: bb10, otherwise: bb1];
    }

    bb1: {
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &_1;
        _9 = U192::bits(move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &_2;
        _11 = U192::bits(move _12) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_12);
        _8 = Ge(move _9, move _11);
        switchInt(move _8) -> [0: bb8, otherwise: bb4];
    }

    bb4: {
        StorageDead(_11);
        StorageDead(_9);
        StorageLive(_13);
        StorageLive(_14);
        _14 = &_2;
        _13 = U192::fits_word(move _14) -> [return: bb5, unwind continue];
    }

    bb5: {
        switchInt(move _13) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        StorageDead(_14);
        goto -> bb9;
    }

    bb7: {
        StorageDead(_14);
        _7 = const ();
        StorageDead(_13);
        StorageDead(_8);
        StorageDead(_7);
        _5 = const ();
        goto -> bb11;
    }

    bb8: {
        StorageDead(_11);
        StorageDead(_9);
        goto -> bb9;
    }

    bb9: {
        StorageLive(_15);
        _15 = panic(const "assertion failed: self.bits() >= v.bits() && !v.fits_word()") -> unwind continue;
    }

    bb10: {
        _5 = const ();
        goto -> bb11;
    }

    bb11: {
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_16);
        StorageLive(_17);
        _17 = const true;
        switchInt(move _17) -> [0: bb16, otherwise: bb12];
    }

    bb12: {
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = _3;
        StorageLive(_22);
        _22 = _4;
        _23 = CheckedAdd(_21, _22);
        assert(!move (_23.1: bool), "attempt to compute `{} + {}`, which would overflow", move _21, move _22) -> [success: bb13, unwind continue];
    }

    bb13: {
        _20 = move (_23.0: usize);
        StorageDead(_22);
        StorageDead(_21);
        _19 = Le(move _20, const 3_usize);
        switchInt(move _19) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        StorageDead(_20);
        _18 = const ();
        StorageDead(_19);
        StorageDead(_18);
        _16 = const ();
        goto -> bb17;
    }

    bb15: {
        StorageDead(_20);
        StorageLive(_24);
        _24 = panic(const "assertion failed: n + m <= 3") -> unwind continue;
    }

    bb16: {
        _16 = const ();
        goto -> bb17;
    }

    bb17: {
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = _3;
        _29 = CheckedSub(_28, const 1_usize);
        assert(!move (_29.1: bool), "attempt to compute `{} - {}`, which would overflow", move _28, const 1_usize) -> [success: bb18, unwind continue];
    }

    bb18: {
        _27 = move (_29.0: usize);
        StorageDead(_28);
        _30 = Len((_2.0: [u64; 3]));
        _31 = Lt(_27, _30);
        assert(move _31, "index out of bounds: the length is {} but the index is {}", move _30, _27) -> [success: bb19, unwind continue];
    }

    bb19: {
        _26 = (_2.0: [u64; 3])[_27];
        _25 = core::num::<impl u64>::leading_zeros(move _26) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_26);
        StorageDead(_27);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &mut _2;
        StorageLive(_34);
        _34 = _25;
        _32 = <U192 as ShlAssign<u32>>::shl_assign(move _33, move _34) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_32);
        StorageLive(_35);
        StorageLive(_36);
        _36 = _1;
        StorageLive(_37);
        _37 = _25;
        _35 = U192::full_shl(move _36, move _37) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_37);
        StorageDead(_36);
        StorageLive(_38);
        _38 = U192::zero() -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = _3;
        _42 = CheckedSub(_41, const 1_usize);
        assert(!move (_42.1: bool), "attempt to compute `{} - {}`, which would overflow", move _41, const 1_usize) -> [success: bb24, unwind continue];
    }

    bb24: {
        _40 = move (_42.0: usize);
        StorageDead(_41);
        _43 = Len((_2.0: [u64; 3]));
        _44 = Lt(_40, _43);
        assert(move _44, "index out of bounds: the length is {} but the index is {}", move _43, _40) -> [success: bb25, unwind continue];
    }

    bb25: {
        _39 = (_2.0: [u64; 3])[_40];
        StorageDead(_40);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = _3;
        _48 = CheckedSub(_47, const 2_usize);
        assert(!move (_48.1: bool), "attempt to compute `{} - {}`, which would overflow", move _47, const 2_usize) -> [success: bb26, unwind continue];
    }

    bb26: {
        _46 = move (_48.0: usize);
        StorageDead(_47);
        _49 = Len((_2.0: [u64; 3]));
        _50 = Lt(_46, _49);
        assert(move _50, "index out of bounds: the length is {} but the index is {}", move _49, _46) -> [success: bb27, unwind continue];
    }

    bb27: {
        _45 = (_2.0: [u64; 3])[_46];
        StorageDead(_46);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = _4;
        _54 = RangeInclusive::<usize>::new(const 0_usize, move _55) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_55);
        _53 = <RangeInclusive<usize> as Iterator>::rev(move _54) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_54);
        _52 = <Rev<RangeInclusive<usize>> as IntoIterator>::into_iter(move _53) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_53);
        StorageLive(_56);
        _56 = move _52;
        goto -> bb31;
    }

    bb31: {
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = &mut _56;
        _60 = &mut (*_61);
        _59 = <Rev<RangeInclusive<usize>> as Iterator>::next(move _60) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_60);
        _62 = discriminant(_59);
        switchInt(move _62) -> [0: bb35, 1: bb33, otherwise: bb34];
    }

    bb33: {
        StorageLive(_64);
        _64 = ((_59 as Some).0: usize);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        _67 = _64;
        StorageLive(_68);
        _68 = _3;
        _69 = CheckedAdd(_67, _68);
        assert(!move (_69.1: bool), "attempt to compute `{} + {}`, which would overflow", move _67, move _68) -> [success: bb36, unwind continue];
    }

    bb34: {
        unreachable;
    }

    bb35: {
        _51 = const ();
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_52);
        StorageDead(_51);
        StorageLive(_182);
        StorageLive(_183);
        _183 = _35;
        StorageLive(_184);
        _184 = _25;
        _182 = U192::full_shr(move _183, move _184) -> [return: bb80, unwind continue];
    }

    bb36: {
        _66 = move (_69.0: usize);
        StorageDead(_68);
        StorageDead(_67);
        _70 = Len(_35);
        _71 = Lt(_66, _70);
        assert(move _71, "index out of bounds: the length is {} but the index is {}", move _70, _66) -> [success: bb37, unwind continue];
    }

    bb37: {
        _65 = _35[_66];
        StorageDead(_66);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = _65;
        StorageLive(_75);
        _75 = _39;
        _73 = Lt(move _74, move _75);
        switchInt(move _73) -> [0: bb59, otherwise: bb38];
    }

    bb38: {
        StorageDead(_75);
        StorageDead(_74);
        StorageLive(_78);
        StorageLive(_79);
        _79 = _65;
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _83 = _64;
        StorageLive(_84);
        _84 = _3;
        _85 = CheckedAdd(_83, _84);
        assert(!move (_85.1: bool), "attempt to compute `{} + {}`, which would overflow", move _83, move _84) -> [success: bb39, unwind continue];
    }

    bb39: {
        _82 = move (_85.0: usize);
        StorageDead(_84);
        StorageDead(_83);
        _86 = CheckedSub(_82, const 1_usize);
        assert(!move (_86.1: bool), "attempt to compute `{} - {}`, which would overflow", move _82, const 1_usize) -> [success: bb40, unwind continue];
    }

    bb40: {
        _81 = move (_86.0: usize);
        StorageDead(_82);
        _87 = Len(_35);
        _88 = Lt(_81, _87);
        assert(move _88, "index out of bounds: the length is {} but the index is {}", move _87, _81) -> [success: bb41, unwind continue];
    }

    bb41: {
        _80 = _35[_81];
        StorageLive(_89);
        _89 = _39;
        _78 = U192::div_mod_word(move _79, move _80, move _89) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_89);
        StorageDead(_80);
        StorageDead(_79);
        StorageLive(_76);
        _76 = (_78.0: u64);
        StorageLive(_77);
        _77 = (_78.1: u64);
        StorageDead(_81);
        StorageDead(_78);
        StorageLive(_90);
        goto -> bb43;
    }

    bb43: {
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = _76;
        _95 = <u128 as From<u64>>::from(move _96) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_96);
        StorageLive(_97);
        StorageLive(_98);
        _98 = _45;
        _97 = <u128 as From<u64>>::from(move _98) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_98);
        _99 = CheckedMul(_95, _97);
        assert(!move (_99.1: bool), "attempt to compute `{} * {}`, which would overflow", move _95, move _97) -> [success: bb46, unwind continue];
    }

    bb46: {
        _94 = move (_99.0: u128);
        StorageDead(_97);
        StorageDead(_95);
        _93 = U192::split_u128(move _94) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_94);
        StorageLive(_91);
        _91 = (_93.0: u64);
        StorageLive(_92);
        _92 = (_93.1: u64);
        StorageDead(_93);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _104 = _91;
        StorageLive(_105);
        _105 = _92;
        _103 = (move _104, move _105);
        _102 = &_103;
        StorageDead(_105);
        StorageDead(_104);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        _108 = _77;
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _112 = _64;
        StorageLive(_113);
        _113 = _3;
        _114 = CheckedAdd(_112, _113);
        assert(!move (_114.1: bool), "attempt to compute `{} + {}`, which would overflow", move _112, move _113) -> [success: bb48, unwind continue];
    }

    bb48: {
        _111 = move (_114.0: usize);
        StorageDead(_113);
        StorageDead(_112);
        _115 = CheckedSub(_111, const 2_usize);
        assert(!move (_115.1: bool), "attempt to compute `{} - {}`, which would overflow", move _111, const 2_usize) -> [success: bb49, unwind continue];
    }

    bb49: {
        _110 = move (_115.0: usize);
        StorageDead(_111);
        _116 = Len(_35);
        _117 = Lt(_110, _116);
        assert(move _117, "index out of bounds: the length is {} but the index is {}", move _116, _110) -> [success: bb50, unwind continue];
    }

    bb50: {
        _109 = _35[_110];
        _107 = (move _108, move _109);
        _106 = &_107;
        StorageDead(_109);
        StorageDead(_108);
        _101 = <(u64, u64) as PartialOrd>::le(move _102, move _106) -> [return: bb51, unwind continue];
    }

    bb51: {
        switchInt(move _101) -> [0: bb53, otherwise: bb52];
    }

    bb52: {
        StorageDead(_110);
        StorageDead(_107);
        StorageDead(_106);
        StorageDead(_103);
        StorageDead(_102);
        _90 = const ();
        StorageDead(_101);
        StorageDead(_100);
        goto -> bb58;
    }

    bb53: {
        StorageDead(_110);
        StorageDead(_107);
        StorageDead(_106);
        StorageDead(_103);
        StorageDead(_102);
        _100 = const ();
        StorageDead(_101);
        StorageDead(_100);
        _119 = CheckedSub(_76, const 1_u64);
        assert(!move (_119.1: bool), "attempt to compute `{} - {}`, which would overflow", _76, const 1_u64) -> [success: bb54, unwind continue];
    }

    bb54: {
        _76 = move (_119.0: u64);
        StorageLive(_122);
        StorageLive(_123);
        _123 = _77;
        StorageLive(_124);
        _124 = _39;
        _122 = core::num::<impl u64>::overflowing_add(move _123, move _124) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_124);
        StorageDead(_123);
        StorageLive(_120);
        _120 = (_122.0: u64);
        StorageLive(_121);
        _121 = (_122.1: bool);
        StorageDead(_122);
        StorageLive(_125);
        _125 = _120;
        _77 = move _125;
        StorageDead(_125);
        StorageLive(_126);
        _126 = _121;
        switchInt(move _126) -> [0: bb57, otherwise: bb56];
    }

    bb56: {
        _90 = const ();
        StorageDead(_126);
        StorageDead(_121);
        StorageDead(_120);
        goto -> bb58;
    }

    bb57: {
        _57 = const ();
        StorageDead(_126);
        StorageDead(_121);
        StorageDead(_120);
        StorageDead(_92);
        StorageDead(_91);
        goto -> bb43;
    }

    bb58: {
        StorageDead(_92);
        StorageDead(_91);
        StorageDead(_90);
        _72 = _76;
        StorageDead(_77);
        StorageDead(_76);
        goto -> bb60;
    }

    bb59: {
        StorageDead(_75);
        StorageDead(_74);
        _72 = core::num::<impl u64>::max_value() -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_73);
        StorageLive(_128);
        StorageLive(_129);
        _129 = _2;
        StorageLive(_130);
        _130 = _72;
        _128 = U192::full_mul_u64(move _129, move _130) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_130);
        StorageDead(_129);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        _135 = &mut _35;
        StorageLive(_136);
        StorageLive(_137);
        _137 = _64;
        _136 = RangeFrom::<usize> { start: move _137 };
        StorageDead(_137);
        _134 = <[u64; 4] as IndexMut<RangeFrom<usize>>>::index_mut(move _135, move _136) -> [return: bb62, unwind continue];
    }

    bb62: {
        StorageDead(_136);
        StorageDead(_135);
        _133 = &mut (*_134);
        _132 = &mut (*_133);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        _141 = &_128;
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        _144 = _3;
        _145 = CheckedAdd(_144, const 1_usize);
        assert(!move (_145.1: bool), "attempt to compute `{} + {}`, which would overflow", move _144, const 1_usize) -> [success: bb63, unwind continue];
    }

    bb63: {
        _143 = move (_145.0: usize);
        StorageDead(_144);
        _142 = RangeTo::<usize> { end: move _143 };
        StorageDead(_143);
        _140 = <[u64; 4] as Index<RangeTo<usize>>>::index(move _141, move _142) -> [return: bb64, unwind continue];
    }

    bb64: {
        StorageDead(_142);
        StorageDead(_141);
        _139 = &(*_140);
        _138 = &(*_139);
        _131 = U192::sub_slice(move _132, move _138) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_138);
        StorageDead(_132);
        StorageDead(_140);
        StorageDead(_139);
        StorageDead(_134);
        StorageDead(_133);
        StorageLive(_146);
        StorageLive(_147);
        _147 = _131;
        switchInt(move _147) -> [0: bb77, otherwise: bb66];
    }

    bb66: {
        _148 = CheckedSub(_72, const 1_u64);
        assert(!move (_148.1: bool), "attempt to compute `{} - {}`, which would overflow", _72, const 1_u64) -> [success: bb67, unwind continue];
    }

    bb67: {
        _72 = move (_148.0: u64);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        _153 = &mut _35;
        StorageLive(_154);
        StorageLive(_155);
        _155 = _64;
        _154 = RangeFrom::<usize> { start: move _155 };
        StorageDead(_155);
        _152 = <[u64; 4] as IndexMut<RangeFrom<usize>>>::index_mut(move _153, move _154) -> [return: bb68, unwind continue];
    }

    bb68: {
        StorageDead(_154);
        StorageDead(_153);
        _151 = &mut (*_152);
        _150 = &mut (*_151);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        _159 = &(_2.0: [u64; 3]);
        StorageLive(_160);
        StorageLive(_161);
        _161 = _3;
        _160 = RangeTo::<usize> { end: move _161 };
        StorageDead(_161);
        _158 = <[u64; 3] as Index<RangeTo<usize>>>::index(move _159, move _160) -> [return: bb69, unwind continue];
    }

    bb69: {
        StorageDead(_160);
        StorageDead(_159);
        _157 = &(*_158);
        _156 = &(*_157);
        _149 = U192::add_slice(move _150, move _156) -> [return: bb70, unwind continue];
    }

    bb70: {
        StorageDead(_156);
        StorageDead(_150);
        StorageDead(_158);
        StorageDead(_157);
        StorageDead(_152);
        StorageDead(_151);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        _165 = _64;
        StorageLive(_166);
        _166 = _3;
        _167 = CheckedAdd(_165, _166);
        assert(!move (_167.1: bool), "attempt to compute `{} + {}`, which would overflow", move _165, move _166) -> [success: bb71, unwind continue];
    }

    bb71: {
        _164 = move (_167.0: usize);
        StorageDead(_166);
        StorageDead(_165);
        _168 = Len(_35);
        _169 = Lt(_164, _168);
        assert(move _169, "index out of bounds: the length is {} but the index is {}", move _168, _164) -> [success: bb72, unwind continue];
    }

    bb72: {
        _163 = _35[_164];
        StorageLive(_170);
        StorageLive(_171);
        _171 = _149;
        _170 = <u64 as From<bool>>::from(move _171) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_171);
        _162 = core::num::<impl u64>::wrapping_add(move _163, move _170) -> [return: bb74, unwind continue];
    }

    bb74: {
        StorageDead(_170);
        StorageDead(_163);
        StorageLive(_172);
        StorageLive(_173);
        _173 = _64;
        StorageLive(_174);
        _174 = _3;
        _175 = CheckedAdd(_173, _174);
        assert(!move (_175.1: bool), "attempt to compute `{} + {}`, which would overflow", move _173, move _174) -> [success: bb75, unwind continue];
    }

    bb75: {
        _172 = move (_175.0: usize);
        StorageDead(_174);
        StorageDead(_173);
        _176 = Len(_35);
        _177 = Lt(_172, _176);
        assert(move _177, "index out of bounds: the length is {} but the index is {}", move _176, _172) -> [success: bb76, unwind continue];
    }

    bb76: {
        _35[_172] = move _162;
        StorageDead(_162);
        StorageDead(_172);
        StorageDead(_164);
        _146 = const ();
        StorageDead(_149);
        goto -> bb78;
    }

    bb77: {
        _146 = const ();
        goto -> bb78;
    }

    bb78: {
        StorageDead(_147);
        StorageDead(_146);
        StorageLive(_178);
        _178 = _72;
        StorageLive(_179);
        _179 = _64;
        _180 = Len((_38.0: [u64; 3]));
        _181 = Lt(_179, _180);
        assert(move _181, "index out of bounds: the length is {} but the index is {}", move _180, _179) -> [success: bb79, unwind continue];
    }

    bb79: {
        (_38.0: [u64; 3])[_179] = move _178;
        StorageDead(_178);
        StorageDead(_179);
        _58 = const ();
        StorageDead(_131);
        StorageDead(_128);
        StorageDead(_72);
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_58);
        _57 = const ();
        goto -> bb31;
    }

    bb80: {
        StorageDead(_184);
        StorageDead(_183);
        StorageLive(_185);
        _185 = _38;
        StorageLive(_186);
        _186 = _182;
        _0 = (move _185, move _186);
        StorageDead(_186);
        StorageDead(_185);
        StorageDead(_182);
        StorageDead(_45);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_35);
        StorageDead(_25);
        return;
    }
}
