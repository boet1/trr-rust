digraph Mir_0_166 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn &lt;decimal::Decimal as common::TryMul&lt;decimal::Decimal&gt;&gt;::try_mul(_1: math::decimal::Decimal, _2: math::decimal::Decimal) -&gt; std::result::Result&lt;math::decimal::Decimal, solana_program::program_error::ProgramError&gt;<br align="left"/>let mut _3: math::decimal::Decimal;<br align="left"/>let mut _4: math::decimal::U192;<br align="left"/>let mut _5: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::LendingError&gt;, math::decimal::U192&gt;;<br align="left"/>let mut _6: std::result::Result&lt;math::decimal::U192, error::LendingError&gt;;<br align="left"/>let mut _7: std::option::Option&lt;math::decimal::U192&gt;;<br align="left"/>let mut _8: math::decimal::U192;<br align="left"/>let mut _9: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::LendingError&gt;, math::decimal::U192&gt;;<br align="left"/>let mut _10: std::result::Result&lt;math::decimal::U192, error::LendingError&gt;;<br align="left"/>let mut _11: std::option::Option&lt;math::decimal::U192&gt;;<br align="left"/>let mut _12: math::decimal::U192;<br align="left"/>let mut _13: math::decimal::U192;<br align="left"/>let mut _14: error::LendingError;<br align="left"/>let mut _15: isize;<br align="left"/>let _16: std::result::Result&lt;std::convert::Infallible, error::LendingError&gt;;<br align="left"/>let mut _17: !;<br align="left"/>let mut _18: std::result::Result&lt;std::convert::Infallible, error::LendingError&gt;;<br align="left"/>let _19: math::decimal::U192;<br align="left"/>let mut _20: math::decimal::U192;<br align="left"/>let mut _21: error::LendingError;<br align="left"/>let mut _22: isize;<br align="left"/>let _23: std::result::Result&lt;std::convert::Infallible, error::LendingError&gt;;<br align="left"/>let mut _24: !;<br align="left"/>let mut _25: std::result::Result&lt;std::convert::Infallible, error::LendingError&gt;;<br align="left"/>let _26: math::decimal::U192;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug rhs =&gt; _2;<br align="left"/>debug residual =&gt; _16;<br align="left"/>debug val =&gt; _19;<br align="left"/>debug residual =&gt; _23;<br align="left"/>debug val =&gt; _26;<br align="left"/>>;
    bb0__0_166 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>_12 = (_1.0: math::decimal::U192)<br/>StorageLive(_13)<br/>_13 = (_2.0: math::decimal::U192)<br/></td></tr><tr><td align="left">_11 = U192::checked_mul(move _12, move _13)</td></tr></table>>];
    bb1__0_166 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>StorageDead(_12)<br/>StorageLive(_14)<br/>_14 = LendingError::MathOverflow<br/></td></tr><tr><td align="left">_10 = Option::&lt;U192&gt;::ok_or::&lt;LendingError&gt;(move _11, move _14)</td></tr></table>>];
    bb2__0_166 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageDead(_11)<br/></td></tr><tr><td align="left">_9 = &lt;Result&lt;U192, LendingError&gt; as Try&gt;::branch(move _10)</td></tr></table>>];
    bb3__0_166 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>_15 = discriminant(_9)<br/></td></tr><tr><td align="left">switchInt(move _15)</td></tr></table>>];
    bb4__0_166 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_19)<br/>_19 = ((_9 as Continue).0: math::decimal::U192)<br/>_8 = _19<br/>StorageDead(_19)<br/>StorageLive(_20)<br/></td></tr><tr><td align="left">_20 = decimal::Decimal::wad()</td></tr></table>>];
    bb5__0_166 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb6__0_166 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_16)<br/>_16 = move ((_9 as Break).0: std::result::Result&lt;std::convert::Infallible, error::LendingError&gt;)<br/>StorageLive(_18)<br/>_18 = move _16<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;decimal::Decimal, ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, LendingError&gt;&gt;&gt;::from_residual(move _18)</td></tr></table>>];
    bb7__0_166 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageDead(_16)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_166 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">_7 = U192::checked_div(move _8, move _20)</td></tr></table>>];
    bb9__0_166 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageDead(_8)<br/>StorageLive(_21)<br/>_21 = LendingError::MathOverflow<br/></td></tr><tr><td align="left">_6 = Option::&lt;U192&gt;::ok_or::&lt;LendingError&gt;(move _7, move _21)</td></tr></table>>];
    bb10__0_166 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">_5 = &lt;Result&lt;U192, LendingError&gt; as Try&gt;::branch(move _6)</td></tr></table>>];
    bb11__0_166 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>_22 = discriminant(_5)<br/></td></tr><tr><td align="left">switchInt(move _22)</td></tr></table>>];
    bb12__0_166 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageLive(_26)<br/>_26 = ((_5 as Continue).0: math::decimal::U192)<br/>_4 = _26<br/>StorageDead(_26)<br/>_3 = decimal::Decimal(move _4)<br/>StorageDead(_4)<br/>_0 = Result::&lt;decimal::Decimal, ProgramError&gt;::Ok(move _3)<br/>StorageDead(_3)<br/>StorageDead(_9)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_166 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageLive(_23)<br/>_23 = move ((_5 as Break).0: std::result::Result&lt;std::convert::Infallible, error::LendingError&gt;)<br/>StorageLive(_25)<br/>_25 = move _23<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;decimal::Decimal, ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, LendingError&gt;&gt;&gt;::from_residual(move _25)</td></tr></table>>];
    bb14__0_166 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_23)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_166 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>StorageDead(_3)<br/>StorageDead(_9)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb16__0_166 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_166 -> bb1__0_166 [label="return"];
    bb1__0_166 -> bb2__0_166 [label="return"];
    bb2__0_166 -> bb3__0_166 [label="return"];
    bb3__0_166 -> bb4__0_166 [label="0"];
    bb3__0_166 -> bb6__0_166 [label="1"];
    bb3__0_166 -> bb5__0_166 [label="otherwise"];
    bb4__0_166 -> bb8__0_166 [label="return"];
    bb6__0_166 -> bb7__0_166 [label="return"];
    bb7__0_166 -> bb15__0_166 [label=""];
    bb8__0_166 -> bb9__0_166 [label="return"];
    bb9__0_166 -> bb10__0_166 [label="return"];
    bb10__0_166 -> bb11__0_166 [label="return"];
    bb11__0_166 -> bb12__0_166 [label="0"];
    bb11__0_166 -> bb13__0_166 [label="1"];
    bb11__0_166 -> bb5__0_166 [label="otherwise"];
    bb12__0_166 -> bb16__0_166 [label=""];
    bb13__0_166 -> bb14__0_166 [label="return"];
    bb14__0_166 -> bb15__0_166 [label=""];
    bb15__0_166 -> bb16__0_166 [label=""];
}
