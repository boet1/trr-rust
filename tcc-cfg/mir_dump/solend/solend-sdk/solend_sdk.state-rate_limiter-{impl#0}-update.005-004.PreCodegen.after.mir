// MIR for `rate_limiter::<impl at token-lending\sdk\src\state\rate_limiter.rs:40:1: 40:17>::update` after PreCodegen

fn rate_limiter::<impl at token-lending\sdk\src\state\rate_limiter.rs:40:1: 40:17>::update(_1: &mut rate_limiter::RateLimiter, _2: u64, _3: decimal::Decimal) -> Result<(), ProgramError> {
    debug self => _1;
    debug cur_slot => _2;
    debug qty => _3;
    let mut _0: std::result::Result<(), solana_program::program_error::ProgramError>;
    let _4: ();
    let mut _5: bool;
    let mut _6: u64;
    let mut _7: !;
    let mut _8: ();
    let _9: ();
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>>;
    let mut _11: std::result::Result<(), solana_program::program_error::ProgramError>;
    let mut _12: &mut state::rate_limiter::RateLimiter;
    let mut _13: u64;
    let mut _14: isize;
    let _15: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _16: !;
    let mut _17: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _18: ();
    let _19: math::decimal::Decimal;
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _21: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _22: &state::rate_limiter::RateLimiter;
    let mut _23: u64;
    let mut _24: isize;
    let _25: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _26: !;
    let mut _27: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let _28: math::decimal::Decimal;
    let mut _29: bool;
    let mut _30: &math::decimal::Decimal;
    let _31: math::decimal::Decimal;
    let mut _32: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _33: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _34: math::decimal::Decimal;
    let mut _35: math::decimal::Decimal;
    let mut _36: isize;
    let mut _38: !;
    let mut _39: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _41: &math::decimal::Decimal;
    let _42: math::decimal::Decimal;
    let mut _43: u64;
    let mut _44: solana_program::program_error::ProgramError;
    let mut _45: error::LendingError;
    let mut _46: math::decimal::Decimal;
    let mut _47: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>, math::decimal::Decimal>;
    let mut _48: std::result::Result<math::decimal::Decimal, solana_program::program_error::ProgramError>;
    let mut _49: math::decimal::Decimal;
    let mut _50: math::decimal::Decimal;
    let mut _51: isize;
    let mut _53: !;
    let mut _54: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
    let mut _56: ();
    let mut _57: bool;
    let mut _58: isize;
    let mut _59: isize;
    let mut _60: isize;
    let mut _61: isize;
    let mut _62: isize;
    let mut _63: isize;
    let mut _64: isize;
    let mut _65: isize;
    let mut _66: isize;
    let mut _67: isize;
    let mut _68: isize;
    let mut _69: isize;
    let mut _70: isize;
    let mut _71: isize;
    let mut _72: isize;
    let mut _73: isize;
    let mut _74: isize;
    let mut _75: isize;
    let mut _76: isize;
    let mut _77: isize;
    let mut _78: isize;
    let mut _79: isize;
    scope 1 {
        debug residual => _15;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _18;
        scope 4 {
        }
    }
    scope 5 {
        debug cur_outflow => _19;
        let _37: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _40: math::decimal::Decimal;
        let _52: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>;
        let _55: math::decimal::Decimal;
        scope 10 {
            debug residual => _37;
            scope 11 {
            }
        }
        scope 12 {
            debug val => _40;
            scope 13 {
            }
        }
        scope 14 {
            debug residual => _52;
            scope 15 {
            }
        }
        scope 16 {
            debug val => _55;
            scope 17 {
            }
        }
    }
    scope 6 {
        debug residual => _25;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _28;
        scope 9 {
        }
    }

    bb0: {
        _57 = const false;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = (((*_1).0: state::rate_limiter::RateLimiterConfig).0: u64);
        _5 = Eq(move _6, const 0_u64);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_6);
        StorageLive(_8);
        _8 = ();
        _0 = Result::<(), ProgramError>::Ok(move _8);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb32;
    }

    bb2: {
        StorageDead(_6);
        _4 = const ();
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &mut (*_1);
        StorageLive(_13);
        _13 = _2;
        _11 = rate_limiter::RateLimiter::_update(move _12, move _13) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_13);
        StorageDead(_12);
        _10 = <Result<(), ProgramError> as Try>::branch(move _11) -> [return: bb4, unwind: bb33];
    }

    bb4: {
        StorageDead(_11);
        _14 = discriminant(_10);
        switchInt(move _14) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_18);
        _18 = ((_10 as Continue).0: ());
        _9 = _18;
        StorageDead(_18);
        _58 = discriminant(_10);
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = &(*_1);
        StorageLive(_23);
        _23 = _2;
        _21 = rate_limiter::RateLimiter::current_outflow(move _22, move _23) -> [return: bb9, unwind continue];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_15);
        _15 = move ((_10 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_17);
        _17 = move _15;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _17) -> [return: bb8, unwind: bb37];
    }

    bb8: {
        StorageDead(_17);
        StorageDead(_15);
        _74 = discriminant(_10);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb32;
    }

    bb9: {
        StorageDead(_23);
        StorageDead(_22);
        _20 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _21) -> [return: bb10, unwind: bb33];
    }

    bb10: {
        StorageDead(_21);
        _24 = discriminant(_20);
        switchInt(move _24) -> [0: bb11, 1: bb12, otherwise: bb6];
    }

    bb11: {
        StorageLive(_28);
        _28 = ((_20 as Continue).0: math::decimal::Decimal);
        _19 = _28;
        StorageDead(_28);
        _60 = discriminant(_20);
        StorageDead(_20);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = _19;
        StorageLive(_35);
        _35 = _3;
        _33 = <decimal::Decimal as common::TryAdd>::try_add(move _34, move _35) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_25);
        _25 = move ((_20 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_27);
        _27 = move _25;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _27) -> [return: bb13, unwind: bb36];
    }

    bb13: {
        StorageDead(_27);
        StorageDead(_25);
        _72 = discriminant(_20);
        StorageDead(_20);
        goto -> bb31;
    }

    bb14: {
        StorageDead(_35);
        StorageDead(_34);
        _32 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _33) -> [return: bb15, unwind: bb33];
    }

    bb15: {
        _57 = const true;
        StorageDead(_33);
        _36 = discriminant(_32);
        switchInt(move _36) -> [0: bb16, 1: bb17, otherwise: bb6];
    }

    bb16: {
        StorageLive(_40);
        _40 = ((_32 as Continue).0: math::decimal::Decimal);
        _31 = _40;
        StorageDead(_40);
        _30 = &_31;
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = (((*_1).0: state::rate_limiter::RateLimiterConfig).1: u64);
        _42 = <decimal::Decimal as From<u64>>::from(move _43) -> [return: bb19, unwind: bb35];
    }

    bb17: {
        StorageLive(_37);
        _37 = move ((_32 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_39);
        _39 = move _37;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _39) -> [return: bb18, unwind: bb35];
    }

    bb18: {
        StorageDead(_39);
        StorageDead(_37);
        _70 = discriminant(_32);
        _57 = const false;
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_30);
        goto -> bb30;
    }

    bb19: {
        _41 = &_42;
        StorageDead(_43);
        _29 = <decimal::Decimal as PartialOrd>::gt(move _30, move _41) -> [return: bb20, unwind: bb35];
    }

    bb20: {
        switchInt(move _29) -> [0: bb23, otherwise: bb21];
    }

    bb21: {
        StorageDead(_42);
        StorageDead(_41);
        _62 = discriminant(_32);
        _57 = const false;
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_30);
        StorageLive(_44);
        StorageLive(_45);
        _45 = LendingError::OutflowRateLimitExceeded;
        _44 = <LendingError as Into<ProgramError>>::into(move _45) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_45);
        _0 = Result::<(), ProgramError>::Err(move _44);
        StorageDead(_44);
        goto -> bb29;
    }

    bb23: {
        StorageDead(_42);
        StorageDead(_41);
        _64 = discriminant(_32);
        _57 = const false;
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_30);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = ((*_1).3: math::decimal::Decimal);
        StorageLive(_50);
        _50 = _3;
        _48 = <decimal::Decimal as common::TryAdd>::try_add(move _49, move _50) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_50);
        StorageDead(_49);
        _47 = <Result<decimal::Decimal, ProgramError> as Try>::branch(move _48) -> [return: bb25, unwind: bb33];
    }

    bb25: {
        StorageDead(_48);
        _51 = discriminant(_47);
        switchInt(move _51) -> [0: bb26, 1: bb27, otherwise: bb6];
    }

    bb26: {
        StorageLive(_55);
        _55 = ((_47 as Continue).0: math::decimal::Decimal);
        _46 = _55;
        StorageDead(_55);
        ((*_1).3: math::decimal::Decimal) = move _46;
        StorageDead(_46);
        _66 = discriminant(_47);
        StorageDead(_47);
        StorageLive(_56);
        _56 = ();
        _0 = Result::<(), ProgramError>::Ok(move _56);
        StorageDead(_56);
        goto -> bb29;
    }

    bb27: {
        StorageLive(_52);
        _52 = move ((_47 as Break).0: std::result::Result<std::convert::Infallible, solana_program::program_error::ProgramError>);
        StorageLive(_54);
        _54 = move _52;
        _0 = <Result<(), ProgramError> as FromResidual<Result<Infallible, ProgramError>>>::from_residual(move _54) -> [return: bb28, unwind: bb34];
    }

    bb28: {
        StorageDead(_54);
        StorageDead(_52);
        StorageDead(_46);
        _68 = discriminant(_47);
        StorageDead(_47);
        goto -> bb30;
    }

    bb29: {
        StorageDead(_29);
        StorageDead(_19);
        goto -> bb32;
    }

    bb30: {
        StorageDead(_29);
        goto -> bb31;
    }

    bb31: {
        StorageDead(_19);
        goto -> bb32;
    }

    bb32: {
        return;
    }

    bb33 (cleanup): {
        resume;
    }

    bb34 (cleanup): {
        _76 = discriminant(_47);
        goto -> bb33;
    }

    bb35 (cleanup): {
        _77 = discriminant(_32);
        goto -> bb33;
    }

    bb36 (cleanup): {
        _78 = discriminant(_20);
        goto -> bb33;
    }

    bb37 (cleanup): {
        _79 = discriminant(_10);
        goto -> bb33;
    }
}
