// MIR for `obligation::<impl at token-lending\sdk\src\state\obligation.rs:313:33: 313:42>::eq` before PreCodegen

fn obligation::<impl at token-lending\sdk\src\state\obligation.rs:313:33: 313:42>::eq(_1: &obligation::ObligationCollateral, _2: &obligation::ObligationCollateral) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: &solana_program::pubkey::Pubkey;
    let mut _5: &solana_program::pubkey::Pubkey;
    let mut _6: bool;
    let mut _7: u64;
    let mut _8: u64;
    let mut _9: bool;
    let mut _10: &math::decimal::Decimal;
    let mut _11: &math::decimal::Decimal;
    let mut _12: &math::decimal::Decimal;
    let mut _13: &math::decimal::Decimal;

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = &((*_1).0: solana_program::pubkey::Pubkey);
        StorageLive(_5);
        _5 = &((*_2).0: solana_program::pubkey::Pubkey);
        _3 = <Pubkey as PartialEq>::eq(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _3) -> [0: bb8, otherwise: bb2];
    }

    bb2: {
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_6);
        StorageLive(_7);
        _7 = ((*_1).1: u64);
        StorageLive(_8);
        _8 = ((*_2).1: u64);
        _6 = Eq(move _7, move _8);
        switchInt(move _6) -> [0: bb7, otherwise: bb3];
    }

    bb3: {
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &((*_1).2: math::decimal::Decimal);
        StorageLive(_11);
        _11 = &((*_2).2: math::decimal::Decimal);
        _9 = <decimal::Decimal as PartialEq>::eq(move _10, move _11) -> [return: bb4, unwind continue];
    }

    bb4: {
        switchInt(move _9) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_12);
        _12 = &((*_1).3: math::decimal::Decimal);
        StorageLive(_13);
        _13 = &((*_2).3: math::decimal::Decimal);
        _0 = <decimal::Decimal as PartialEq>::eq(move _12, move _13) -> [return: bb10, unwind continue];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb9;
    }

    bb7: {
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb9;
    }

    bb8: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb9;
    }

    bb9: {
        _0 = const false;
        goto -> bb11;
    }

    bb10: {
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb11;
    }

    bb11: {
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_3);
        return;
    }
}
