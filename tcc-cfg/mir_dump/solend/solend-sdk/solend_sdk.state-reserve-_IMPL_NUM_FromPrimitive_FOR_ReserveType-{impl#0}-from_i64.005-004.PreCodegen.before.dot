digraph Mir_0_2421 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn _IMPL_NUM_FromPrimitive_FOR_ReserveType::&lt;impl FromPrimitive for reserve::ReserveType&gt;::from_i64(_1: i64) -&gt; std::option::Option&lt;state::reserve::ReserveType&gt;<br align="left"/>let mut _2: bool;<br align="left"/>let mut _3: i64;<br align="left"/>let mut _4: i64;<br align="left"/>let mut _5: isize;<br align="left"/>let mut _6: (isize, bool);<br align="left"/>let mut _7: state::reserve::ReserveType;<br align="left"/>let mut _8: bool;<br align="left"/>let mut _9: i64;<br align="left"/>let mut _10: i64;<br align="left"/>let mut _11: isize;<br align="left"/>let mut _12: (isize, bool);<br align="left"/>let mut _13: state::reserve::ReserveType;<br align="left"/>debug n =&gt; _1;<br align="left"/>>;
    bb0__0_2421 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>StorageLive(_3)<br/>_3 = _1<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>_6 = CheckedAdd(const _, const 0_isize)<br/></td></tr><tr><td align="left">assert(!move (_6.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, const _, const 0_isize)</td></tr></table>>];
    bb1__0_2421 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_5 = move (_6.0: isize)<br/>_4 = move _5 as i64 (IntToInt)<br/>StorageDead(_5)<br/>_2 = Eq(move _3, move _4)<br/></td></tr><tr><td align="left">switchInt(move _2)</td></tr></table>>];
    bb2__0_2421 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>StorageDead(_3)<br/>StorageLive(_7)<br/>_7 = reserve::ReserveType::Regular<br/>_0 = Option::&lt;reserve::ReserveType&gt;::Some(move _7)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb3__0_2421 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>StorageDead(_3)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = _1<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>_12 = CheckedAdd(const _, const 0_isize)<br/></td></tr><tr><td align="left">assert(!move (_12.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, const _, const 0_isize)</td></tr></table>>];
    bb4__0_2421 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_11 = move (_12.0: isize)<br/>_10 = move _11 as i64 (IntToInt)<br/>StorageDead(_11)<br/>_8 = Eq(move _9, move _10)<br/></td></tr><tr><td align="left">switchInt(move _8)</td></tr></table>>];
    bb5__0_2421 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_9)<br/>StorageLive(_13)<br/>_13 = reserve::ReserveType::Isolated<br/>_0 = Option::&lt;reserve::ReserveType&gt;::Some(move _13)<br/>StorageDead(_13)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb6__0_2421 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_9)<br/>_0 = Option::&lt;reserve::ReserveType&gt;::None<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_2421 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_2421 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_2)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2421 -> bb1__0_2421 [label="success"];
    bb1__0_2421 -> bb3__0_2421 [label="0"];
    bb1__0_2421 -> bb2__0_2421 [label="otherwise"];
    bb2__0_2421 -> bb8__0_2421 [label=""];
    bb3__0_2421 -> bb4__0_2421 [label="success"];
    bb4__0_2421 -> bb6__0_2421 [label="0"];
    bb4__0_2421 -> bb5__0_2421 [label="otherwise"];
    bb5__0_2421 -> bb7__0_2421 [label=""];
    bb6__0_2421 -> bb7__0_2421 [label=""];
    bb7__0_2421 -> bb8__0_2421 [label=""];
}
