digraph Mir_0_329 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn obligation::Obligation::max_liquidation_amount(_1: &amp;ReErased state::obligation::Obligation, _2: &amp;ReErased state::obligation::ObligationLiquidity) -&gt; std::result::Result&lt;math::decimal::Decimal, solana_program::program_error::ProgramError&gt;<br align="left"/>let _3: math::decimal::Decimal;<br align="left"/>let mut _4: math::decimal::Decimal;<br align="left"/>let mut _5: math::decimal::Decimal;<br align="left"/>let mut _6: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;, math::decimal::Decimal&gt;;<br align="left"/>let mut _7: std::result::Result&lt;math::decimal::Decimal, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _8: math::decimal::Decimal;<br align="left"/>let mut _9: math::rate::Rate;<br align="left"/>let mut _10: isize;<br align="left"/>let _11: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _12: !;<br align="left"/>let mut _13: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let _14: math::decimal::Decimal;<br align="left"/>let mut _15: math::decimal::Decimal;<br align="left"/>let mut _16: math::decimal::Decimal;<br align="left"/>let _17: math::decimal::Decimal;<br align="left"/>let mut _18: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;, math::decimal::Decimal&gt;;<br align="left"/>let mut _19: std::result::Result&lt;math::decimal::Decimal, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _20: math::decimal::Decimal;<br align="left"/>let mut _21: math::decimal::Decimal;<br align="left"/>let mut _22: isize;<br align="left"/>let _23: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _24: !;<br align="left"/>let mut _25: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let _26: math::decimal::Decimal;<br align="left"/>let mut _27: math::decimal::Decimal;<br align="left"/>let mut _28: math::decimal::Decimal;<br align="left"/>let mut _29: bool;<br align="left"/>let mut _30: isize;<br align="left"/>let mut _31: isize;<br align="left"/>let mut _32: isize;<br align="left"/>let mut _33: isize;<br align="left"/>let mut _34: isize;<br align="left"/>let mut _35: isize;<br align="left"/>let mut _36: isize;<br align="left"/>let mut _37: isize;<br align="left"/>let mut _38: isize;<br align="left"/>let mut _39: isize;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug liquidity =&gt; _2;<br align="left"/>debug max_liquidation_value =&gt; _3;<br align="left"/>debug residual =&gt; _11;<br align="left"/>debug val =&gt; _14;<br align="left"/>debug max_liquidation_pct =&gt; _17;<br align="left"/>debug residual =&gt; _23;<br align="left"/>debug val =&gt; _26;<br align="left"/>>;
    bb0__0_329 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_29 = const false<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = ((*_1).7: math::decimal::Decimal)<br/>StorageLive(_9)<br/></td></tr><tr><td align="left">_9 = rate::Rate::from_percent(const _)</td></tr></table>>];
    bb1__0_329 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">_7 = &lt;decimal::Decimal as common::TryMul&lt;rate::Rate&gt;&gt;::try_mul(move _8, move _9)</td></tr></table>>];
    bb2__0_329 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">_6 = &lt;Result&lt;decimal::Decimal, ProgramError&gt; as Try&gt;::branch(move _7)</td></tr></table>>];
    bb3__0_329 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_29 = const true<br/>StorageDead(_7)<br/>_10 = discriminant(_6)<br/></td></tr><tr><td align="left">switchInt(move _10)</td></tr></table>>];
    bb4__0_329 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_14)<br/>_14 = ((_6 as Continue).0: math::decimal::Decimal)<br/>_5 = _14<br/>StorageDead(_14)<br/>StorageLive(_15)<br/>_15 = ((*_2).3: math::decimal::Decimal)<br/></td></tr><tr><td align="left">_4 = &lt;decimal::Decimal as Ord&gt;::min(move _5, move _15)</td></tr></table>>];
    bb5__0_329 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb6__0_329 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_11)<br/>_11 = move ((_6 as Break).0: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;)<br/>StorageLive(_13)<br/>_13 = move _11<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;decimal::Decimal, ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, ProgramError&gt;&gt;&gt;::from_residual(move _13)</td></tr></table>>];
    bb7__0_329 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>StorageDead(_11)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/>_36 = discriminant(_6)<br/>_29 = const false<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_329 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageDead(_5)<br/>StorageLive(_16)<br/></td></tr><tr><td align="left">_16 = &lt;decimal::Decimal as From&lt;u64&gt;&gt;::from(const _)</td></tr></table>>];
    bb9__0_329 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left">_3 = &lt;decimal::Decimal as Ord&gt;::min(move _4, move _16)</td></tr></table>>];
    bb10__0_329 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageDead(_4)<br/>_30 = discriminant(_6)<br/>_29 = const false<br/>StorageDead(_6)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>_20 = _3<br/>StorageLive(_21)<br/>_21 = ((*_2).3: math::decimal::Decimal)<br/></td></tr><tr><td align="left">_19 = &lt;decimal::Decimal as common::TryDiv&lt;decimal::Decimal&gt;&gt;::try_div(move _20, move _21)</td></tr></table>>];
    bb11__0_329 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>StorageDead(_20)<br/></td></tr><tr><td align="left">_18 = &lt;Result&lt;decimal::Decimal, ProgramError&gt; as Try&gt;::branch(move _19)</td></tr></table>>];
    bb12__0_329 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>_22 = discriminant(_18)<br/></td></tr><tr><td align="left">switchInt(move _22)</td></tr></table>>];
    bb13__0_329 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageLive(_26)<br/>_26 = ((_18 as Continue).0: math::decimal::Decimal)<br/>_17 = _26<br/>StorageDead(_26)<br/>_32 = discriminant(_18)<br/>StorageDead(_18)<br/>StorageLive(_27)<br/>_27 = ((*_2).2: math::decimal::Decimal)<br/>StorageLive(_28)<br/>_28 = _17<br/></td></tr><tr><td align="left">_0 = &lt;decimal::Decimal as common::TryMul&lt;decimal::Decimal&gt;&gt;::try_mul(move _27, move _28)</td></tr></table>>];
    bb14__0_329 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageLive(_23)<br/>_23 = move ((_18 as Break).0: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;)<br/>StorageLive(_25)<br/>_25 = move _23<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;decimal::Decimal, ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, ProgramError&gt;&gt;&gt;::from_residual(move _25)</td></tr></table>>];
    bb15__0_329 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_23)<br/>_34 = discriminant(_18)<br/>StorageDead(_18)<br/>StorageDead(_17)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb16__0_329 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>StorageDead(_27)<br/>StorageDead(_17)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_329 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_329 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left">return</td></tr></table>>];
    bb19__0_329 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">19 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb20__0_329 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">20 (cleanup)</td></tr><tr><td align="left" balign="left">_38 = discriminant(_18)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb21__0_329 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">21 (cleanup)</td></tr><tr><td align="left" balign="left">_39 = discriminant(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_329 -> bb1__0_329 [label="return"];
    bb1__0_329 -> bb2__0_329 [label="return"];
    bb2__0_329 -> bb3__0_329 [label="return"];
    bb2__0_329 -> bb19__0_329 [label="unwind"];
    bb3__0_329 -> bb4__0_329 [label="0"];
    bb3__0_329 -> bb6__0_329 [label="1"];
    bb3__0_329 -> bb5__0_329 [label="otherwise"];
    bb4__0_329 -> bb8__0_329 [label="return"];
    bb4__0_329 -> bb21__0_329 [label="unwind"];
    bb6__0_329 -> bb7__0_329 [label="return"];
    bb6__0_329 -> bb21__0_329 [label="unwind"];
    bb7__0_329 -> bb17__0_329 [label=""];
    bb8__0_329 -> bb9__0_329 [label="return"];
    bb8__0_329 -> bb21__0_329 [label="unwind"];
    bb9__0_329 -> bb10__0_329 [label="return"];
    bb9__0_329 -> bb21__0_329 [label="unwind"];
    bb10__0_329 -> bb11__0_329 [label="return"];
    bb11__0_329 -> bb12__0_329 [label="return"];
    bb11__0_329 -> bb19__0_329 [label="unwind"];
    bb12__0_329 -> bb13__0_329 [label="0"];
    bb12__0_329 -> bb14__0_329 [label="1"];
    bb12__0_329 -> bb5__0_329 [label="otherwise"];
    bb13__0_329 -> bb16__0_329 [label="return"];
    bb14__0_329 -> bb15__0_329 [label="return"];
    bb14__0_329 -> bb20__0_329 [label="unwind"];
    bb15__0_329 -> bb17__0_329 [label=""];
    bb16__0_329 -> bb18__0_329 [label=""];
    bb17__0_329 -> bb18__0_329 [label=""];
    bb20__0_329 -> bb19__0_329 [label=""];
    bb21__0_329 -> bb19__0_329 [label=""];
}
