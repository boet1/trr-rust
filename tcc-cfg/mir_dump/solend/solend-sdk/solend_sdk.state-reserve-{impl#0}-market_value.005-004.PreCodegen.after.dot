digraph Mir_0_460 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn reserve::Reserve::market_value(_1: &amp;ReErased state::reserve::Reserve, _2: math::decimal::Decimal) -&gt; std::result::Result&lt;math::decimal::Decimal, solana_program::program_error::ProgramError&gt;<br align="left"/>let mut _3: math::decimal::Decimal;<br align="left"/>let mut _4: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;, math::decimal::Decimal&gt;;<br align="left"/>let mut _5: std::result::Result&lt;math::decimal::Decimal, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _6: math::decimal::Decimal;<br align="left"/>let mut _7: math::decimal::Decimal;<br align="left"/>let mut _8: isize;<br align="left"/>let _9: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let mut _10: !;<br align="left"/>let mut _11: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;;<br align="left"/>let _12: math::decimal::Decimal;<br align="left"/>let mut _13: math::decimal::Decimal;<br align="left"/>let mut _14: u128;<br align="left"/>let mut _15: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::LendingError&gt;, u128&gt;;<br align="left"/>let mut _16: std::result::Result&lt;u128, error::LendingError&gt;;<br align="left"/>let mut _17: std::option::Option&lt;u128&gt;;<br align="left"/>let mut _18: u32;<br align="left"/>let mut _19: u8;<br align="left"/>let mut _20: error::LendingError;<br align="left"/>let mut _21: isize;<br align="left"/>let _22: std::result::Result&lt;std::convert::Infallible, error::LendingError&gt;;<br align="left"/>let mut _23: !;<br align="left"/>let mut _24: std::result::Result&lt;std::convert::Infallible, error::LendingError&gt;;<br align="left"/>let _25: u128;<br align="left"/>let mut _26: bool;<br align="left"/>let mut _27: isize;<br align="left"/>let mut _28: isize;<br align="left"/>let mut _29: isize;<br align="left"/>let mut _30: isize;<br align="left"/>let mut _31: isize;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug liquidity_amount =&gt; _2;<br align="left"/>debug residual =&gt; _9;<br align="left"/>debug val =&gt; _12;<br align="left"/>debug residual =&gt; _22;<br align="left"/>debug val =&gt; _25;<br align="left"/>>;
    bb0__0_460 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_26 = const false<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = (((*_1).3: state::reserve::ReserveLiquidity).9: math::decimal::Decimal)<br/>StorageLive(_7)<br/>_7 = _2<br/></td></tr><tr><td align="left">_5 = &lt;decimal::Decimal as common::TryMul&lt;decimal::Decimal&gt;&gt;::try_mul(move _6, move _7)</td></tr></table>>];
    bb1__0_460 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">_4 = &lt;Result&lt;decimal::Decimal, ProgramError&gt; as Try&gt;::branch(move _5)</td></tr></table>>];
    bb2__0_460 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_26 = const true<br/>StorageDead(_5)<br/>_8 = discriminant(_4)<br/></td></tr><tr><td align="left">switchInt(move _8)</td></tr></table>>];
    bb3__0_460 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_12)<br/>_12 = ((_4 as Continue).0: math::decimal::Decimal)<br/>_3 = _12<br/>StorageDead(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>_19 = (((*_1).3: state::reserve::ReserveLiquidity).1: u8)<br/>_18 = move _19 as u32 (IntToInt)<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">_17 = core::num::&lt;impl u128&gt;::checked_pow(const 10_u128, move _18)</td></tr></table>>];
    bb4__0_460 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_460 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_9)<br/>_9 = move ((_4 as Break).0: std::result::Result&lt;std::convert::Infallible, solana_program::program_error::ProgramError&gt;)<br/>StorageLive(_11)<br/>_11 = move _9<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;decimal::Decimal, ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, ProgramError&gt;&gt;&gt;::from_residual(move _11)</td></tr></table>>];
    bb6__0_460 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_9)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_460 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageLive(_20)<br/>_20 = LendingError::MathOverflow<br/></td></tr><tr><td align="left">_16 = Option::&lt;u128&gt;::ok_or::&lt;LendingError&gt;(move _17, move _20)</td></tr></table>>];
    bb8__0_460 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageDead(_17)<br/></td></tr><tr><td align="left">_15 = &lt;Result&lt;u128, LendingError&gt; as Try&gt;::branch(move _16)</td></tr></table>>];
    bb9__0_460 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>_21 = discriminant(_15)<br/></td></tr><tr><td align="left">switchInt(move _21)</td></tr></table>>];
    bb10__0_460 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_25)<br/>_25 = ((_15 as Continue).0: u128)<br/>_14 = _25<br/>StorageDead(_25)<br/></td></tr><tr><td align="left">_13 = &lt;decimal::Decimal as From&lt;u128&gt;&gt;::from(move _14)</td></tr></table>>];
    bb11__0_460 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_22)<br/>_22 = move ((_15 as Break).0: std::result::Result&lt;std::convert::Infallible, error::LendingError&gt;)<br/>StorageLive(_24)<br/>_24 = move _22<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;decimal::Decimal, ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, LendingError&gt;&gt;&gt;::from_residual(move _24)</td></tr></table>>];
    bb12__0_460 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/>StorageDead(_22)<br/>StorageDead(_14)<br/>StorageDead(_13)<br/>StorageDead(_3)<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_460 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/></td></tr><tr><td align="left">_0 = &lt;decimal::Decimal as common::TryDiv&lt;decimal::Decimal&gt;&gt;::try_div(move _3, move _13)</td></tr></table>>];
    bb14__0_460 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>StorageDead(_3)<br/>StorageDead(_15)<br/>_27 = discriminant(_4)<br/>_26 = const false<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_460 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left">return</td></tr></table>>];
    bb16__0_460 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">16 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb17__0_460 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">_29 = discriminant(_4)<br/>_26 = const false<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_460 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">18 (cleanup)</td></tr><tr><td align="left" balign="left">_31 = discriminant(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_460 -> bb1__0_460 [label="return"];
    bb1__0_460 -> bb2__0_460 [label="return"];
    bb1__0_460 -> bb16__0_460 [label="unwind"];
    bb2__0_460 -> bb3__0_460 [label="0"];
    bb2__0_460 -> bb5__0_460 [label="1"];
    bb2__0_460 -> bb4__0_460 [label="otherwise"];
    bb3__0_460 -> bb7__0_460 [label="return"];
    bb3__0_460 -> bb18__0_460 [label="unwind"];
    bb5__0_460 -> bb6__0_460 [label="return"];
    bb5__0_460 -> bb18__0_460 [label="unwind"];
    bb6__0_460 -> bb17__0_460 [label=""];
    bb7__0_460 -> bb8__0_460 [label="return"];
    bb7__0_460 -> bb18__0_460 [label="unwind"];
    bb8__0_460 -> bb9__0_460 [label="return"];
    bb8__0_460 -> bb18__0_460 [label="unwind"];
    bb9__0_460 -> bb10__0_460 [label="0"];
    bb9__0_460 -> bb11__0_460 [label="1"];
    bb9__0_460 -> bb4__0_460 [label="otherwise"];
    bb10__0_460 -> bb13__0_460 [label="return"];
    bb10__0_460 -> bb18__0_460 [label="unwind"];
    bb11__0_460 -> bb12__0_460 [label="return"];
    bb11__0_460 -> bb18__0_460 [label="unwind"];
    bb12__0_460 -> bb17__0_460 [label=""];
    bb13__0_460 -> bb14__0_460 [label="return"];
    bb13__0_460 -> bb18__0_460 [label="unwind"];
    bb14__0_460 -> bb15__0_460 [label=""];
    bb17__0_460 -> bb15__0_460 [label=""];
    bb18__0_460 -> bb16__0_460 [label=""];
}
