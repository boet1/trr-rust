// MIR for `obligation::<impl at token-lending\sdk\src\state\obligation.rs:24:33: 24:42>::eq` before PreCodegen

fn obligation::<impl at token-lending\sdk\src\state\obligation.rs:24:33: 24:42>::eq(_1: &obligation::Obligation, _2: &obligation::Obligation) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: u8;
    let mut _5: u8;
    let mut _6: bool;
    let mut _7: &state::last_update::LastUpdate;
    let mut _8: &state::last_update::LastUpdate;
    let mut _9: bool;
    let mut _10: &solana_program::pubkey::Pubkey;
    let mut _11: &solana_program::pubkey::Pubkey;
    let mut _12: bool;
    let mut _13: &solana_program::pubkey::Pubkey;
    let mut _14: &solana_program::pubkey::Pubkey;
    let mut _15: bool;
    let mut _16: &std::vec::Vec<state::obligation::ObligationCollateral>;
    let mut _17: &std::vec::Vec<state::obligation::ObligationCollateral>;
    let mut _18: bool;
    let mut _19: &std::vec::Vec<state::obligation::ObligationLiquidity>;
    let mut _20: &std::vec::Vec<state::obligation::ObligationLiquidity>;
    let mut _21: bool;
    let mut _22: &math::decimal::Decimal;
    let mut _23: &math::decimal::Decimal;
    let mut _24: bool;
    let mut _25: &math::decimal::Decimal;
    let mut _26: &math::decimal::Decimal;
    let mut _27: bool;
    let mut _28: &math::decimal::Decimal;
    let mut _29: &math::decimal::Decimal;
    let mut _30: bool;
    let mut _31: &math::decimal::Decimal;
    let mut _32: &math::decimal::Decimal;
    let mut _33: bool;
    let mut _34: &math::decimal::Decimal;
    let mut _35: &math::decimal::Decimal;
    let mut _36: bool;
    let mut _37: &math::decimal::Decimal;
    let mut _38: &math::decimal::Decimal;
    let mut _39: bool;
    let mut _40: &math::decimal::Decimal;
    let mut _41: &math::decimal::Decimal;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: bool;

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = ((*_1).0: u8);
        StorageLive(_5);
        _5 = ((*_2).0: u8);
        _3 = Eq(move _4, move _5);
        switchInt(move _3) -> [0: bb40, otherwise: bb1];
    }

    bb1: {
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &((*_1).1: state::last_update::LastUpdate);
        StorageLive(_8);
        _8 = &((*_2).1: state::last_update::LastUpdate);
        _6 = <last_update::LastUpdate as PartialEq>::eq(move _7, move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _6) -> [0: bb39, otherwise: bb3];
    }

    bb3: {
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &((*_1).2: solana_program::pubkey::Pubkey);
        StorageLive(_11);
        _11 = &((*_2).2: solana_program::pubkey::Pubkey);
        _9 = <Pubkey as PartialEq>::eq(move _10, move _11) -> [return: bb4, unwind continue];
    }

    bb4: {
        switchInt(move _9) -> [0: bb38, otherwise: bb5];
    }

    bb5: {
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &((*_1).3: solana_program::pubkey::Pubkey);
        StorageLive(_14);
        _14 = &((*_2).3: solana_program::pubkey::Pubkey);
        _12 = <Pubkey as PartialEq>::eq(move _13, move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        switchInt(move _12) -> [0: bb37, otherwise: bb7];
    }

    bb7: {
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &((*_1).4: std::vec::Vec<state::obligation::ObligationCollateral>);
        StorageLive(_17);
        _17 = &((*_2).4: std::vec::Vec<state::obligation::ObligationCollateral>);
        _15 = <Vec<obligation::ObligationCollateral> as PartialEq>::eq(move _16, move _17) -> [return: bb8, unwind continue];
    }

    bb8: {
        switchInt(move _15) -> [0: bb36, otherwise: bb9];
    }

    bb9: {
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &((*_1).5: std::vec::Vec<state::obligation::ObligationLiquidity>);
        StorageLive(_20);
        _20 = &((*_2).5: std::vec::Vec<state::obligation::ObligationLiquidity>);
        _18 = <Vec<obligation::ObligationLiquidity> as PartialEq>::eq(move _19, move _20) -> [return: bb10, unwind continue];
    }

    bb10: {
        switchInt(move _18) -> [0: bb35, otherwise: bb11];
    }

    bb11: {
        StorageDead(_20);
        StorageDead(_19);
        StorageLive(_21);
        StorageLive(_22);
        _22 = &((*_1).6: math::decimal::Decimal);
        StorageLive(_23);
        _23 = &((*_2).6: math::decimal::Decimal);
        _21 = <decimal::Decimal as PartialEq>::eq(move _22, move _23) -> [return: bb12, unwind continue];
    }

    bb12: {
        switchInt(move _21) -> [0: bb34, otherwise: bb13];
    }

    bb13: {
        StorageDead(_23);
        StorageDead(_22);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &((*_1).7: math::decimal::Decimal);
        StorageLive(_26);
        _26 = &((*_2).7: math::decimal::Decimal);
        _24 = <decimal::Decimal as PartialEq>::eq(move _25, move _26) -> [return: bb14, unwind continue];
    }

    bb14: {
        switchInt(move _24) -> [0: bb33, otherwise: bb15];
    }

    bb15: {
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &((*_1).8: math::decimal::Decimal);
        StorageLive(_29);
        _29 = &((*_2).8: math::decimal::Decimal);
        _27 = <decimal::Decimal as PartialEq>::eq(move _28, move _29) -> [return: bb16, unwind continue];
    }

    bb16: {
        switchInt(move _27) -> [0: bb32, otherwise: bb17];
    }

    bb17: {
        StorageDead(_29);
        StorageDead(_28);
        StorageLive(_30);
        StorageLive(_31);
        _31 = &((*_1).9: math::decimal::Decimal);
        StorageLive(_32);
        _32 = &((*_2).9: math::decimal::Decimal);
        _30 = <decimal::Decimal as PartialEq>::eq(move _31, move _32) -> [return: bb18, unwind continue];
    }

    bb18: {
        switchInt(move _30) -> [0: bb31, otherwise: bb19];
    }

    bb19: {
        StorageDead(_32);
        StorageDead(_31);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &((*_1).10: math::decimal::Decimal);
        StorageLive(_35);
        _35 = &((*_2).10: math::decimal::Decimal);
        _33 = <decimal::Decimal as PartialEq>::eq(move _34, move _35) -> [return: bb20, unwind continue];
    }

    bb20: {
        switchInt(move _33) -> [0: bb30, otherwise: bb21];
    }

    bb21: {
        StorageDead(_35);
        StorageDead(_34);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &((*_1).11: math::decimal::Decimal);
        StorageLive(_38);
        _38 = &((*_2).11: math::decimal::Decimal);
        _36 = <decimal::Decimal as PartialEq>::eq(move _37, move _38) -> [return: bb22, unwind continue];
    }

    bb22: {
        switchInt(move _36) -> [0: bb29, otherwise: bb23];
    }

    bb23: {
        StorageDead(_38);
        StorageDead(_37);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &((*_1).12: math::decimal::Decimal);
        StorageLive(_41);
        _41 = &((*_2).12: math::decimal::Decimal);
        _39 = <decimal::Decimal as PartialEq>::eq(move _40, move _41) -> [return: bb24, unwind continue];
    }

    bb24: {
        switchInt(move _39) -> [0: bb28, otherwise: bb25];
    }

    bb25: {
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_42);
        StorageLive(_43);
        _43 = ((*_1).13: bool);
        StorageLive(_44);
        _44 = ((*_2).13: bool);
        _42 = Eq(move _43, move _44);
        switchInt(move _42) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        StorageDead(_44);
        StorageDead(_43);
        StorageLive(_45);
        _45 = ((*_1).14: bool);
        StorageLive(_46);
        _46 = ((*_2).14: bool);
        _0 = Eq(move _45, move _46);
        StorageDead(_46);
        StorageDead(_45);
        goto -> bb42;
    }

    bb27: {
        StorageDead(_44);
        StorageDead(_43);
        goto -> bb41;
    }

    bb28: {
        StorageDead(_41);
        StorageDead(_40);
        goto -> bb41;
    }

    bb29: {
        StorageDead(_38);
        StorageDead(_37);
        goto -> bb41;
    }

    bb30: {
        StorageDead(_35);
        StorageDead(_34);
        goto -> bb41;
    }

    bb31: {
        StorageDead(_32);
        StorageDead(_31);
        goto -> bb41;
    }

    bb32: {
        StorageDead(_29);
        StorageDead(_28);
        goto -> bb41;
    }

    bb33: {
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb41;
    }

    bb34: {
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb41;
    }

    bb35: {
        StorageDead(_20);
        StorageDead(_19);
        goto -> bb41;
    }

    bb36: {
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb41;
    }

    bb37: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb41;
    }

    bb38: {
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb41;
    }

    bb39: {
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb41;
    }

    bb40: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb41;
    }

    bb41: {
        _0 = const false;
        goto -> bb42;
    }

    bb42: {
        StorageDead(_42);
        StorageDead(_39);
        StorageDead(_36);
        StorageDead(_33);
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_24);
        StorageDead(_21);
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_12);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_3);
        return;
    }
}
