digraph Mir_0_1537 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn &lt;U128 as LowerHex&gt;::fmt(_1: &amp;ReErased math::rate::U128, _2: &amp;ReErased mut std::fmt::Formatter&lt;ReErased&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt;<br align="left"/>let _3: &amp;ReErased [u64; 2_usize];<br align="left"/>let _4: ();<br align="left"/>let mut _5: bool;<br align="left"/>let mut _6: &amp;ReErased std::fmt::Formatter&lt;ReErased&gt;;<br align="left"/>let _7: ();<br align="left"/>let mut _8: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, std::fmt::Error&gt;, ()&gt;;<br align="left"/>let mut _9: std::result::Result&lt;(), std::fmt::Error&gt;;<br align="left"/>let mut _10: &amp;ReErased mut std::fmt::Formatter&lt;ReErased&gt;;<br align="left"/>let mut _11: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _12: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _13: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _14: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _15: [&amp;ReErased str; 1_usize];<br align="left"/>let mut _16: isize;<br align="left"/>let _17: std::result::Result&lt;std::convert::Infallible, std::fmt::Error&gt;;<br align="left"/>let mut _18: !;<br align="left"/>let mut _19: std::result::Result&lt;std::convert::Infallible, std::fmt::Error&gt;;<br align="left"/>let _20: ();<br align="left"/>let _21: ();<br align="left"/>let mut _22: bool;<br align="left"/>let mut _23: &amp;ReErased math::rate::U128;<br align="left"/>let mut _24: !;<br align="left"/>let mut _25: &amp;ReErased mut std::fmt::Formatter&lt;ReErased&gt;;<br align="left"/>let mut _26: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _27: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _28: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _29: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _30: [&amp;ReErased str; 1_usize];<br align="left"/>let mut _31: bool;<br align="left"/>let _32: ();<br align="left"/>let mut _33: std::iter::Rev&lt;std::slice::Iter&lt;ReErased, u64&gt;&gt;;<br align="left"/>let mut _34: std::iter::Rev&lt;std::slice::Iter&lt;ReErased, u64&gt;&gt;;<br align="left"/>let mut _35: std::slice::Iter&lt;ReErased, u64&gt;;<br align="left"/>let mut _36: &amp;ReErased [u64];<br align="left"/>let mut _37: &amp;ReErased [u64; 2_usize];<br align="left"/>let mut _38: std::iter::Rev&lt;std::slice::Iter&lt;ReErased, u64&gt;&gt;;<br align="left"/>let mut _39: ();<br align="left"/>let _40: ();<br align="left"/>let mut _41: std::option::Option&lt;&amp;ReErased u64&gt;;<br align="left"/>let mut _42: &amp;ReErased mut std::iter::Rev&lt;std::slice::Iter&lt;ReErased, u64&gt;&gt;;<br align="left"/>let mut _43: &amp;ReErased mut std::iter::Rev&lt;std::slice::Iter&lt;ReErased, u64&gt;&gt;;<br align="left"/>let mut _44: isize;<br align="left"/>let mut _45: !;<br align="left"/>let _46: &amp;ReErased u64;<br align="left"/>let mut _47: std::ops::Range&lt;i32&gt;;<br align="left"/>let mut _48: std::ops::Range&lt;i32&gt;;<br align="left"/>let mut _49: std::ops::Range&lt;i32&gt;;<br align="left"/>let _50: ();<br align="left"/>let mut _51: std::option::Option&lt;i32&gt;;<br align="left"/>let mut _52: &amp;ReErased mut std::ops::Range&lt;i32&gt;;<br align="left"/>let mut _53: &amp;ReErased mut std::ops::Range&lt;i32&gt;;<br align="left"/>let mut _54: isize;<br align="left"/>let mut _55: !;<br align="left"/>let _56: i32;<br align="left"/>let _57: u64;<br align="left"/>let mut _58: u64;<br align="left"/>let mut _59: &amp;ReErased u64;<br align="left"/>let mut _60: u64;<br align="left"/>let mut _61: u64;<br align="left"/>let mut _62: i32;<br align="left"/>let mut _63: i32;<br align="left"/>let mut _64: i32;<br align="left"/>let mut _65: (i32, bool);<br align="left"/>let mut _66: (i32, bool);<br align="left"/>let mut _67: bool;<br align="left"/>let mut _68: u64;<br align="left"/>let mut _69: i32;<br align="left"/>let mut _70: i32;<br align="left"/>let mut _71: i32;<br align="left"/>let mut _72: (i32, bool);<br align="left"/>let mut _73: (i32, bool);<br align="left"/>let mut _74: bool;<br align="left"/>let _75: ();<br align="left"/>let mut _76: bool;<br align="left"/>let mut _77: u64;<br align="left"/>let mut _78: bool;<br align="left"/>let _79: ();<br align="left"/>let mut _80: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, std::fmt::Error&gt;, ()&gt;;<br align="left"/>let mut _81: std::result::Result&lt;(), std::fmt::Error&gt;;<br align="left"/>let mut _82: &amp;ReErased mut std::fmt::Formatter&lt;ReErased&gt;;<br align="left"/>let mut _83: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _84: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _85: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _86: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _87: [&amp;ReErased str; 1_usize];<br align="left"/>let mut _88: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _89: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _90: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _91: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _92: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _93: &amp;ReErased u64;<br align="left"/>let _94: &amp;ReErased u64;<br align="left"/>let mut _95: isize;<br align="left"/>let _96: std::result::Result&lt;std::convert::Infallible, std::fmt::Error&gt;;<br align="left"/>let mut _97: !;<br align="left"/>let mut _98: std::result::Result&lt;std::convert::Infallible, std::fmt::Error&gt;;<br align="left"/>let _99: ();<br align="left"/>let mut _100: ();<br align="left"/>let mut _101: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let mut _102: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let mut _103: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>debug self =&gt; _1;<br align="left"/>debug f =&gt; _2;<br align="left"/>debug data =&gt; _3;<br align="left"/>debug residual =&gt; _17;<br align="left"/>debug val =&gt; _20;<br align="left"/>debug latch =&gt; _31;<br align="left"/>debug iter =&gt; _38;<br align="left"/>debug ch =&gt; _46;<br align="left"/>debug iter =&gt; _49;<br align="left"/>debug x =&gt; _56;<br align="left"/>debug nibble =&gt; _57;<br align="left"/>debug residual =&gt; _96;<br align="left"/>debug val =&gt; _99;<br align="left"/>>;
    bb0__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>_3 = &amp;((*_1).0: [u64; 2])<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = &amp;(*_2)<br/></td></tr><tr><td align="left">_5 = Formatter::&lt;'_&gt;::alternate(move _6)</td></tr></table>>];
    bb1__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">switchInt(move _5)</td></tr></table>>];
    bb2__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>_10 = &amp;mut (*_2)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>_103 = const _<br/>_14 = &amp;(*_103)<br/>_13 = &amp;(*_14)<br/>_12 = move _13 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_13)<br/></td></tr><tr><td align="left">_11 = Arguments::&lt;'_&gt;::new_const(move _12)</td></tr></table>>];
    bb3__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/></td></tr><tr><td align="left">_9 = Formatter::&lt;'_&gt;::write_fmt(move _10, move _11)</td></tr></table>>];
    bb4__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">_8 = &lt;Result&lt;(), std::fmt::Error&gt; as Try&gt;::branch(move _9)</td></tr></table>>];
    bb5__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>_16 = discriminant(_8)<br/></td></tr><tr><td align="left">switchInt(move _16)</td></tr></table>>];
    bb6__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_20)<br/>_20 = ((_8 as Continue).0: ())<br/>_7 = _20<br/>StorageDead(_20)<br/>StorageDead(_14)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/>_4 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb8__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageLive(_17)<br/>_17 = ((_8 as Break).0: std::result::Result&lt;std::convert::Infallible, std::fmt::Error&gt;)<br/>StorageLive(_19)<br/>_19 = _17<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;(), std::fmt::Error&gt; as FromResidual&lt;Result&lt;Infallible, std::fmt::Error&gt;&gt;&gt;::from_residual(move _19)</td></tr></table>>];
    bb9__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageDead(_17)<br/>StorageDead(_14)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>_4 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb11__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageDead(_4)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>_23 = &amp;(*_1)<br/></td></tr><tr><td align="left">_22 = U128::is_zero(move _23)</td></tr></table>>];
    bb12__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left">switchInt(move _22)</td></tr></table>>];
    bb13__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageLive(_25)<br/>_25 = &amp;mut (*_2)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>_101 = const _<br/>_29 = &amp;(*_101)<br/>_28 = &amp;(*_29)<br/>_27 = move _28 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_28)<br/></td></tr><tr><td align="left">_26 = Arguments::&lt;'_&gt;::new_const(move _27)</td></tr></table>>];
    bb14__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/></td></tr><tr><td align="left">_0 = Formatter::&lt;'_&gt;::write_fmt(move _25, move _26)</td></tr></table>>];
    bb15__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>StorageDead(_25)<br/>StorageDead(_29)<br/>StorageDead(_22)<br/>StorageDead(_21)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb16__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>_21 = const ()<br/>StorageDead(_22)<br/>StorageDead(_21)<br/>StorageLive(_31)<br/>_31 = const false<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>_37 = &amp;(*_3)<br/>_36 = move _37 as &amp;[u64] (PointerCoercion(Unsize))<br/>StorageDead(_37)<br/></td></tr><tr><td align="left">_35 = core::slice::&lt;impl [u64]&gt;::iter(move _36)</td></tr></table>>];
    bb17__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_36)<br/></td></tr><tr><td align="left">_34 = &lt;std::slice::Iter&lt;'_, u64&gt; as Iterator&gt;::rev(move _35)</td></tr></table>>];
    bb18__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_35)<br/></td></tr><tr><td align="left">_33 = &lt;Rev&lt;std::slice::Iter&lt;'_, u64&gt;&gt; as IntoIterator&gt;::into_iter(move _34)</td></tr></table>>];
    bb19__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>StorageLive(_38)<br/>_38 = move _33<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageLive(_40)<br/>StorageLive(_41)<br/>StorageLive(_42)<br/>StorageLive(_43)<br/>_43 = &amp;mut _38<br/>_42 = &amp;mut (*_43)<br/></td></tr><tr><td align="left">_41 = &lt;Rev&lt;std::slice::Iter&lt;'_, u64&gt;&gt; as Iterator&gt;::next(move _42)</td></tr></table>>];
    bb21__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_42)<br/>_44 = discriminant(_41)<br/></td></tr><tr><td align="left">switchInt(move _44)</td></tr></table>>];
    bb22__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageLive(_46)<br/>_46 = ((_41 as Some).0: &amp;u64)<br/>StorageLive(_47)<br/>StorageLive(_48)<br/>_48 = std::ops::Range::&lt;i32&gt; { start: const 0_i32, end: const 16_i32 }<br/></td></tr><tr><td align="left">_47 = &lt;std::ops::Range&lt;i32&gt; as IntoIterator&gt;::into_iter(move _48)</td></tr></table>>];
    bb23__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">_32 = const ()<br/>StorageDead(_43)<br/>StorageDead(_41)<br/>StorageDead(_40)<br/>StorageDead(_38)<br/>StorageDead(_33)<br/>StorageDead(_32)<br/>StorageLive(_100)<br/>_100 = ()<br/>_0 = Result::&lt;(), std::fmt::Error&gt;::Ok(move _100)<br/>StorageDead(_100)<br/>StorageDead(_31)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb24__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_48)<br/>StorageLive(_49)<br/>_49 = move _47<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb25__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageLive(_50)<br/>StorageLive(_51)<br/>StorageLive(_52)<br/>StorageLive(_53)<br/>_53 = &amp;mut _49<br/>_52 = &amp;mut (*_53)<br/></td></tr><tr><td align="left">_51 = &lt;std::ops::Range&lt;i32&gt; as Iterator&gt;::next(move _52)</td></tr></table>>];
    bb26__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_52)<br/>_54 = discriminant(_51)<br/></td></tr><tr><td align="left">switchInt(move _54)</td></tr></table>>];
    bb27__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageLive(_56)<br/>_56 = ((_51 as Some).0: i32)<br/>StorageLive(_57)<br/>StorageLive(_58)<br/>StorageLive(_59)<br/>_59 = _46<br/>StorageLive(_60)<br/>StorageLive(_61)<br/>StorageLive(_62)<br/>StorageLive(_63)<br/>StorageLive(_64)<br/>_64 = _56<br/>_65 = CheckedSub(const 15_i32, _64)<br/></td></tr><tr><td align="left">assert(!move (_65.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, const 15_i32, move _64)</td></tr></table>>];
    bb28__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">_40 = const ()<br/>StorageDead(_53)<br/>StorageDead(_51)<br/>StorageDead(_50)<br/>StorageDead(_49)<br/>StorageDead(_47)<br/>StorageDead(_46)<br/>StorageDead(_43)<br/>StorageDead(_41)<br/>StorageDead(_40)<br/>_39 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb29__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">_63 = move (_65.0: i32)<br/>StorageDead(_64)<br/>_66 = CheckedMul(_63, const 4_i32)<br/></td></tr><tr><td align="left">assert(!move (_66.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, move _63, const 4_i32)</td></tr></table>>];
    bb30__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">_62 = move (_66.0: i32)<br/>StorageDead(_63)<br/>_61 = move _62 as u64 (IntToInt)<br/>StorageDead(_62)<br/>_67 = Lt(_61, const 64_u64)<br/></td></tr><tr><td align="left">assert(move _67, &quot;attempt to shift left by `{}`, which would overflow&quot;, _61)</td></tr></table>>];
    bb31__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">_60 = Shl(const 15_u64, move _61)<br/>StorageDead(_61)<br/></td></tr><tr><td align="left">_58 = &lt;&amp;u64 as BitAnd&lt;u64&gt;&gt;::bitand(move _59, move _60)</td></tr></table>>];
    bb32__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageDead(_60)<br/>StorageDead(_59)<br/>StorageLive(_68)<br/>StorageLive(_69)<br/>StorageLive(_70)<br/>StorageLive(_71)<br/>_71 = _56<br/>_72 = CheckedSub(const 15_i32, _71)<br/></td></tr><tr><td align="left">assert(!move (_72.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, const 15_i32, move _71)</td></tr></table>>];
    bb33__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">_70 = move (_72.0: i32)<br/>StorageDead(_71)<br/>_73 = CheckedMul(_70, const 4_i32)<br/></td></tr><tr><td align="left">assert(!move (_73.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, move _70, const 4_i32)</td></tr></table>>];
    bb34__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">_69 = move (_73.0: i32)<br/>StorageDead(_70)<br/>_68 = move _69 as u64 (IntToInt)<br/>StorageDead(_69)<br/>_74 = Lt(_68, const 64_u64)<br/></td></tr><tr><td align="left">assert(move _74, &quot;attempt to shift right by `{}`, which would overflow&quot;, _68)</td></tr></table>>];
    bb35__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">_57 = Shr(move _58, move _68)<br/>StorageDead(_68)<br/>StorageDead(_58)<br/>StorageLive(_75)<br/>StorageLive(_76)<br/>_76 = _31<br/></td></tr><tr><td align="left">switchInt(move _76)</td></tr></table>>];
    bb36__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageLive(_77)<br/>_77 = _57<br/>_31 = Ne(move _77, const 0_u64)<br/>StorageDead(_77)<br/>_75 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb37__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">_75 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb38__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageDead(_76)<br/>StorageDead(_75)<br/>StorageLive(_78)<br/>_78 = _31<br/></td></tr><tr><td align="left">switchInt(move _78)</td></tr></table>>];
    bb39__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageLive(_79)<br/>StorageLive(_80)<br/>StorageLive(_81)<br/>StorageLive(_82)<br/>_82 = &amp;mut (*_2)<br/>StorageLive(_83)<br/>StorageLive(_84)<br/>StorageLive(_85)<br/>StorageLive(_86)<br/>_102 = const _<br/>_86 = &amp;(*_102)<br/>_85 = &amp;(*_86)<br/>_84 = move _85 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_85)<br/>StorageLive(_88)<br/>StorageLive(_89)<br/>StorageLive(_90)<br/>StorageLive(_91)<br/>StorageLive(_92)<br/>StorageLive(_93)<br/>StorageLive(_94)<br/>_94 = &amp;_57<br/>_93 = &amp;(*_94)<br/></td></tr><tr><td align="left">_92 = core::fmt::rt::Argument::&lt;'_&gt;::new_lower_hex::&lt;u64&gt;(move _93)</td></tr></table>>];
    bb40__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">StorageDead(_93)<br/>_91 = [move _92]<br/>StorageDead(_92)<br/>_90 = &amp;_91<br/>_89 = &amp;(*_90)<br/>_88 = move _89 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_89)<br/></td></tr><tr><td align="left">_83 = Arguments::&lt;'_&gt;::new_v1(move _84, move _88)</td></tr></table>>];
    bb41__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">StorageDead(_88)<br/>StorageDead(_84)<br/></td></tr><tr><td align="left">_81 = Formatter::&lt;'_&gt;::write_fmt(move _82, move _83)</td></tr></table>>];
    bb42__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageDead(_83)<br/>StorageDead(_82)<br/></td></tr><tr><td align="left">_80 = &lt;Result&lt;(), std::fmt::Error&gt; as Try&gt;::branch(move _81)</td></tr></table>>];
    bb43__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageDead(_81)<br/>_95 = discriminant(_80)<br/></td></tr><tr><td align="left">switchInt(move _95)</td></tr></table>>];
    bb44__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">StorageLive(_99)<br/>_99 = ((_80 as Continue).0: ())<br/>_79 = _99<br/>StorageDead(_99)<br/>StorageDead(_94)<br/>StorageDead(_91)<br/>StorageDead(_90)<br/>StorageDead(_86)<br/>StorageDead(_80)<br/>StorageDead(_79)<br/>_50 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb45__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">StorageLive(_96)<br/>_96 = ((_80 as Break).0: std::result::Result&lt;std::convert::Infallible, std::fmt::Error&gt;)<br/>StorageLive(_98)<br/>_98 = _96<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;(), std::fmt::Error&gt; as FromResidual&lt;Result&lt;Infallible, std::fmt::Error&gt;&gt;&gt;::from_residual(move _98)</td></tr></table>>];
    bb46__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">StorageDead(_98)<br/>StorageDead(_96)<br/>StorageDead(_94)<br/>StorageDead(_91)<br/>StorageDead(_90)<br/>StorageDead(_86)<br/>StorageDead(_80)<br/>StorageDead(_79)<br/>StorageDead(_78)<br/>StorageDead(_57)<br/>StorageDead(_56)<br/>StorageDead(_53)<br/>StorageDead(_51)<br/>StorageDead(_50)<br/>StorageDead(_49)<br/>StorageDead(_47)<br/>StorageDead(_46)<br/>StorageDead(_43)<br/>StorageDead(_41)<br/>StorageDead(_40)<br/>StorageDead(_38)<br/>StorageDead(_33)<br/>StorageDead(_32)<br/>StorageDead(_31)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb47__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left" balign="left">_50 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb48__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left" balign="left">StorageDead(_78)<br/>StorageDead(_57)<br/>StorageDead(_56)<br/>StorageDead(_53)<br/>StorageDead(_51)<br/>StorageDead(_50)<br/>_39 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb49__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left" balign="left">StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb50__0_1537 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">50</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_1537 -> bb1__0_1537 [label="return"];
    bb1__0_1537 -> bb10__0_1537 [label="0"];
    bb1__0_1537 -> bb2__0_1537 [label="otherwise"];
    bb2__0_1537 -> bb3__0_1537 [label="return"];
    bb3__0_1537 -> bb4__0_1537 [label="return"];
    bb4__0_1537 -> bb5__0_1537 [label="return"];
    bb5__0_1537 -> bb6__0_1537 [label="0"];
    bb5__0_1537 -> bb8__0_1537 [label="1"];
    bb5__0_1537 -> bb7__0_1537 [label="otherwise"];
    bb6__0_1537 -> bb11__0_1537 [label=""];
    bb8__0_1537 -> bb9__0_1537 [label="return"];
    bb9__0_1537 -> bb49__0_1537 [label=""];
    bb10__0_1537 -> bb11__0_1537 [label=""];
    bb11__0_1537 -> bb12__0_1537 [label="return"];
    bb12__0_1537 -> bb16__0_1537 [label="0"];
    bb12__0_1537 -> bb13__0_1537 [label="otherwise"];
    bb13__0_1537 -> bb14__0_1537 [label="return"];
    bb14__0_1537 -> bb15__0_1537 [label="return"];
    bb15__0_1537 -> bb49__0_1537 [label=""];
    bb16__0_1537 -> bb17__0_1537 [label="return"];
    bb17__0_1537 -> bb18__0_1537 [label="return"];
    bb18__0_1537 -> bb19__0_1537 [label="return"];
    bb19__0_1537 -> bb20__0_1537 [label=""];
    bb20__0_1537 -> bb21__0_1537 [label="return"];
    bb21__0_1537 -> bb23__0_1537 [label="0"];
    bb21__0_1537 -> bb22__0_1537 [label="1"];
    bb21__0_1537 -> bb7__0_1537 [label="otherwise"];
    bb22__0_1537 -> bb24__0_1537 [label="return"];
    bb23__0_1537 -> bb50__0_1537 [label=""];
    bb24__0_1537 -> bb25__0_1537 [label=""];
    bb25__0_1537 -> bb26__0_1537 [label="return"];
    bb26__0_1537 -> bb28__0_1537 [label="0"];
    bb26__0_1537 -> bb27__0_1537 [label="1"];
    bb26__0_1537 -> bb7__0_1537 [label="otherwise"];
    bb27__0_1537 -> bb29__0_1537 [label="success"];
    bb28__0_1537 -> bb20__0_1537 [label=""];
    bb29__0_1537 -> bb30__0_1537 [label="success"];
    bb30__0_1537 -> bb31__0_1537 [label="success"];
    bb31__0_1537 -> bb32__0_1537 [label="return"];
    bb32__0_1537 -> bb33__0_1537 [label="success"];
    bb33__0_1537 -> bb34__0_1537 [label="success"];
    bb34__0_1537 -> bb35__0_1537 [label="success"];
    bb35__0_1537 -> bb36__0_1537 [label="0"];
    bb35__0_1537 -> bb37__0_1537 [label="otherwise"];
    bb36__0_1537 -> bb38__0_1537 [label=""];
    bb37__0_1537 -> bb38__0_1537 [label=""];
    bb38__0_1537 -> bb47__0_1537 [label="0"];
    bb38__0_1537 -> bb39__0_1537 [label="otherwise"];
    bb39__0_1537 -> bb40__0_1537 [label="return"];
    bb40__0_1537 -> bb41__0_1537 [label="return"];
    bb41__0_1537 -> bb42__0_1537 [label="return"];
    bb42__0_1537 -> bb43__0_1537 [label="return"];
    bb43__0_1537 -> bb44__0_1537 [label="0"];
    bb43__0_1537 -> bb45__0_1537 [label="1"];
    bb43__0_1537 -> bb7__0_1537 [label="otherwise"];
    bb44__0_1537 -> bb48__0_1537 [label=""];
    bb45__0_1537 -> bb46__0_1537 [label="return"];
    bb46__0_1537 -> bb49__0_1537 [label=""];
    bb47__0_1537 -> bb48__0_1537 [label=""];
    bb48__0_1537 -> bb25__0_1537 [label=""];
    bb49__0_1537 -> bb50__0_1537 [label=""];
}
