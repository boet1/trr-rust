digraph Mir_0_152 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn &lt;decimal::Decimal as common::TrySub&gt;::try_sub(_1: math::decimal::Decimal, _2: math::decimal::Decimal) -&gt; std::result::Result&lt;math::decimal::Decimal, solana_program::program_error::ProgramError&gt;<br align="left"/>let mut _3: math::decimal::Decimal;<br align="left"/>let mut _4: math::decimal::U192;<br align="left"/>let mut _5: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::LendingError&gt;, math::decimal::U192&gt;;<br align="left"/>let mut _6: std::result::Result&lt;math::decimal::U192, error::LendingError&gt;;<br align="left"/>let mut _7: std::option::Option&lt;math::decimal::U192&gt;;<br align="left"/>let mut _8: math::decimal::U192;<br align="left"/>let mut _9: math::decimal::U192;<br align="left"/>let mut _10: error::LendingError;<br align="left"/>let mut _11: isize;<br align="left"/>let _12: std::result::Result&lt;std::convert::Infallible, error::LendingError&gt;;<br align="left"/>let mut _13: !;<br align="left"/>let mut _14: std::result::Result&lt;std::convert::Infallible, error::LendingError&gt;;<br align="left"/>let _15: math::decimal::U192;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug rhs =&gt; _2;<br align="left"/>debug residual =&gt; _12;<br align="left"/>debug val =&gt; _15;<br align="left"/>>;
    bb0__0_152 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = (_1.0: math::decimal::U192)<br/>StorageLive(_9)<br/>_9 = (_2.0: math::decimal::U192)<br/></td></tr><tr><td align="left">_7 = U192::checked_sub(move _8, move _9)</td></tr></table>>];
    bb1__0_152 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_8)<br/>StorageLive(_10)<br/>_10 = LendingError::MathOverflow<br/></td></tr><tr><td align="left">_6 = Option::&lt;U192&gt;::ok_or::&lt;LendingError&gt;(move _7, move _10)</td></tr></table>>];
    bb2__0_152 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">_5 = &lt;Result&lt;U192, LendingError&gt; as Try&gt;::branch(move _6)</td></tr></table>>];
    bb3__0_152 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>_11 = discriminant(_5)<br/></td></tr><tr><td align="left">switchInt(move _11)</td></tr></table>>];
    bb4__0_152 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_15)<br/>_15 = ((_5 as Continue).0: math::decimal::U192)<br/>_4 = _15<br/>StorageDead(_15)<br/>_3 = decimal::Decimal(move _4)<br/>StorageDead(_4)<br/>_0 = Result::&lt;decimal::Decimal, ProgramError&gt;::Ok(move _3)<br/>StorageDead(_3)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb5__0_152 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb6__0_152 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_12)<br/>_12 = move ((_5 as Break).0: std::result::Result&lt;std::convert::Infallible, error::LendingError&gt;)<br/>StorageLive(_14)<br/>_14 = move _12<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;decimal::Decimal, ProgramError&gt; as FromResidual&lt;Result&lt;Infallible, LendingError&gt;&gt;&gt;::from_residual(move _14)</td></tr></table>>];
    bb7__0_152 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageDead(_12)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_152 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_152 -> bb1__0_152 [label="return"];
    bb1__0_152 -> bb2__0_152 [label="return"];
    bb2__0_152 -> bb3__0_152 [label="return"];
    bb3__0_152 -> bb4__0_152 [label="0"];
    bb3__0_152 -> bb6__0_152 [label="1"];
    bb3__0_152 -> bb5__0_152 [label="otherwise"];
    bb4__0_152 -> bb8__0_152 [label=""];
    bb6__0_152 -> bb7__0_152 [label="return"];
    bb7__0_152 -> bb8__0_152 [label=""];
}
