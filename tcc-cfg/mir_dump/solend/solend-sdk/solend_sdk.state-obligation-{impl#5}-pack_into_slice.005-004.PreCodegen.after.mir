// MIR for `obligation::<impl at token-lending\sdk\src\state\obligation.rs:419:1: 419:25>::pack_into_slice` after PreCodegen

fn obligation::<impl at token-lending\sdk\src\state\obligation.rs:419:1: 419:25>::pack_into_slice(_1: &obligation::Obligation, _2: &mut [u8]) -> () {
    debug self => _1;
    debug dst => _2;
    let mut _0: ();
    let _3: &mut [u8; 1300];
    let mut _4: &mut [u8; 1300];
    let mut _5: &mut [u8; 1300];
    let _6: usize;
    let mut _8: &mut [u8];
    let mut _9: &mut [u8];
    let mut _10: std::ops::Range<usize>;
    let mut _11: usize;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: (usize, bool);
    let mut _15: &mut [u8; 1300];
    let mut _16: &mut [u8];
    let mut _35: (&mut [u8; 1], &mut [u8; 8], &mut [u8; 1], &mut [u8; 32], &mut [u8; 32], &mut [u8; 16], &mut [u8; 16], &mut [u8; 16], &mut [u8; 16], &mut [u8; 16], &mut [u8; 1], &mut [u8; 16], &mut [u8; 16], &mut [u8; 1], &mut [u8; 14], &mut [u8; 1], &mut [u8; 1], &mut [u8; 1096]);
    let mut _37: &mut [u8; 1300];
    let mut _38: [u8; 1];
    let mut _39: u8;
    let mut _40: [u8; 8];
    let mut _41: u64;
    let _42: ();
    let mut _43: bool;
    let mut _44: &mut [u8; 1];
    let _45: ();
    let mut _46: &mut [u8];
    let mut _47: &mut [u8; 32];
    let mut _48: &[u8];
    let _49: &[u8];
    let mut _50: &solana_program::pubkey::Pubkey;
    let _51: ();
    let mut _52: &mut [u8];
    let mut _53: &mut [u8; 32];
    let mut _54: &[u8];
    let _55: &[u8];
    let mut _56: &solana_program::pubkey::Pubkey;
    let _57: ();
    let mut _58: math::decimal::Decimal;
    let mut _59: &mut [u8; 16];
    let _60: ();
    let mut _61: math::decimal::Decimal;
    let mut _62: &mut [u8; 16];
    let _63: ();
    let mut _64: math::decimal::Decimal;
    let mut _65: &mut [u8; 16];
    let _66: ();
    let mut _67: math::decimal::Decimal;
    let mut _68: &mut [u8; 16];
    let _69: ();
    let mut _70: math::decimal::Decimal;
    let mut _71: &mut [u8; 16];
    let _72: ();
    let mut _73: bool;
    let mut _74: &mut [u8; 1];
    let _75: ();
    let mut _76: math::decimal::Decimal;
    let mut _77: &mut [u8; 16];
    let _78: ();
    let mut _79: math::decimal::Decimal;
    let mut _80: &mut [u8; 16];
    let _81: ();
    let mut _82: bool;
    let mut _83: &mut [u8; 1];
    let mut _84: [u8; 1];
    let mut _85: u8;
    let mut _86: std::result::Result<u8, std::num::TryFromIntError>;
    let mut _87: usize;
    let mut _88: &std::vec::Vec<state::obligation::ObligationCollateral>;
    let mut _89: [u8; 1];
    let mut _90: u8;
    let mut _91: std::result::Result<u8, std::num::TryFromIntError>;
    let mut _92: usize;
    let mut _93: &std::vec::Vec<state::obligation::ObligationLiquidity>;
    let _95: ();
    let mut _96: std::slice::Iter<'_, state::obligation::ObligationCollateral>;
    let mut _97: &std::vec::Vec<state::obligation::ObligationCollateral>;
    let mut _99: ();
    let _100: ();
    let mut _101: std::option::Option<&state::obligation::ObligationCollateral>;
    let mut _102: &mut std::slice::Iter<'_, state::obligation::ObligationCollateral>;
    let mut _103: &mut std::slice::Iter<'_, state::obligation::ObligationCollateral>;
    let mut _104: isize;
    let mut _105: !;
    let mut _108: &mut [u8; 88];
    let mut _109: &mut [u8; 88];
    let mut _112: &mut [u8];
    let mut _113: &mut [u8; 1096];
    let mut _114: std::ops::Range<usize>;
    let mut _115: usize;
    let mut _116: usize;
    let mut _117: usize;
    let mut _118: (usize, bool);
    let mut _119: &mut [u8; 88];
    let mut _120: &mut [u8];
    let mut _126: (&mut [u8; 32], &mut [u8; 8], &mut [u8; 16], &mut [u8; 16], &mut [u8; 16]);
    let mut _128: &mut [u8; 88];
    let _129: ();
    let mut _130: &mut [u8];
    let mut _131: &mut [u8; 32];
    let mut _132: &[u8];
    let _133: &[u8];
    let mut _134: &solana_program::pubkey::Pubkey;
    let mut _135: [u8; 8];
    let mut _136: u64;
    let _137: ();
    let mut _138: math::decimal::Decimal;
    let mut _139: &mut [u8; 16];
    let _140: ();
    let mut _141: math::decimal::Decimal;
    let mut _142: &mut [u8; 16];
    let mut _143: (usize, bool);
    let mut _144: std::slice::Iter<'_, state::obligation::ObligationLiquidity>;
    let mut _145: &std::vec::Vec<state::obligation::ObligationLiquidity>;
    let _147: ();
    let mut _148: std::option::Option<&state::obligation::ObligationLiquidity>;
    let mut _149: &mut std::slice::Iter<'_, state::obligation::ObligationLiquidity>;
    let mut _150: &mut std::slice::Iter<'_, state::obligation::ObligationLiquidity>;
    let mut _151: isize;
    let mut _152: !;
    let mut _155: &mut [u8; 112];
    let mut _156: &mut [u8; 112];
    let mut _159: &mut [u8];
    let mut _160: &mut [u8; 1096];
    let mut _161: std::ops::Range<usize>;
    let mut _162: usize;
    let mut _163: usize;
    let mut _164: usize;
    let mut _165: (usize, bool);
    let mut _166: &mut [u8; 112];
    let mut _167: &mut [u8];
    let mut _173: (&mut [u8; 32], &mut [u8; 16], &mut [u8; 16], &mut [u8; 16], &mut [u8; 32]);
    let mut _175: &mut [u8; 112];
    let _176: ();
    let mut _177: &mut [u8];
    let mut _178: &mut [u8; 32];
    let mut _179: &[u8];
    let _180: &[u8];
    let mut _181: &solana_program::pubkey::Pubkey;
    let _182: ();
    let mut _183: math::decimal::Decimal;
    let mut _184: &mut [u8; 16];
    let _185: ();
    let mut _186: math::decimal::Decimal;
    let mut _187: &mut [u8; 16];
    let _188: ();
    let mut _189: math::decimal::Decimal;
    let mut _190: &mut [u8; 16];
    let mut _191: (usize, bool);
    scope 1 {
        debug output => _3;
        scope 6 {
            debug version => _17;
            debug last_update_slot => _18;
            debug last_update_stale => _19;
            debug lending_market => _20;
            debug owner => _21;
            debug deposited_value => _22;
            debug borrowed_value => _23;
            debug allowed_borrow_value => _24;
            debug unhealthy_borrow_value => _25;
            debug borrowed_value_upper_bound => _26;
            debug borrowing_isolated_asset => _27;
            debug super_unhealthy_borrow_value => _28;
            debug unweighted_borrowed_value => _29;
            debug closeable => _30;
            debug _padding => _31;
            debug deposits_len => _32;
            debug borrows_len => _33;
            debug data_flat => _34;
            let mut _94: usize;
            scope 11 {
                debug offset => _94;
                let mut _98: std::slice::Iter<'_, state::obligation::ObligationCollateral>;
                let mut _146: std::slice::Iter<'_, state::obligation::ObligationLiquidity>;
                scope 12 {
                    debug iter => _98;
                    let _106: &state::obligation::ObligationCollateral;
                    scope 13 {
                        debug collateral => _106;
                        let _107: &mut [u8; 88];
                        let _110: usize;
                        scope 14 {
                            debug deposits_flat => _107;
                            scope 19 {
                                debug deposit_reserve => _121;
                                debug deposited_amount => _122;
                                debug market_value => _123;
                                debug attributed_borrow_value => _124;
                                debug _padding_deposit => _125;
                            }
                            scope 20 {
                                let _121: &mut [u8; 32];
                                let _122: &mut [u8; 8];
                                let _123: &mut [u8; 16];
                                let _124: &mut [u8; 16];
                                let _125: &mut [u8; 16];
                                let _127: &mut [u8; 88];
                                scope 21 {
                                    debug input => _127;
                                    scope 22 {
                                        scope 23 {
                                        }
                                    }
                                }
                            }
                        }
                        scope 15 {
                            debug offset => _110;
                            let _111: &mut [u8];
                            scope 16 {
                                debug slice => _111;
                                scope 17 {
                                    scope 18 {
                                    }
                                }
                            }
                        }
                    }
                }
                scope 24 {
                    debug iter => _146;
                    let _153: &state::obligation::ObligationLiquidity;
                    scope 25 {
                        debug liquidity => _153;
                        let _154: &mut [u8; 112];
                        let _157: usize;
                        scope 26 {
                            debug borrows_flat => _154;
                            scope 31 {
                                debug borrow_reserve => _168;
                                debug cumulative_borrow_rate_wads => _169;
                                debug borrowed_amount_wads => _170;
                                debug market_value => _171;
                                debug _padding_borrow => _172;
                            }
                            scope 32 {
                                let _168: &mut [u8; 32];
                                let _169: &mut [u8; 16];
                                let _170: &mut [u8; 16];
                                let _171: &mut [u8; 16];
                                let _172: &mut [u8; 32];
                                let _174: &mut [u8; 112];
                                scope 33 {
                                    debug input => _174;
                                    scope 34 {
                                        scope 35 {
                                        }
                                    }
                                }
                            }
                        }
                        scope 27 {
                            debug offset => _157;
                            let _158: &mut [u8];
                            scope 28 {
                                debug slice => _158;
                                scope 29 {
                                    scope 30 {
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        scope 7 {
            let _17: &mut [u8; 1];
            let _18: &mut [u8; 8];
            let _19: &mut [u8; 1];
            let _20: &mut [u8; 32];
            let _21: &mut [u8; 32];
            let _22: &mut [u8; 16];
            let _23: &mut [u8; 16];
            let _24: &mut [u8; 16];
            let _25: &mut [u8; 16];
            let _26: &mut [u8; 16];
            let _27: &mut [u8; 1];
            let _28: &mut [u8; 16];
            let _29: &mut [u8; 16];
            let _30: &mut [u8; 1];
            let _31: &mut [u8; 14];
            let _32: &mut [u8; 1];
            let _33: &mut [u8; 1];
            let _34: &mut [u8; 1096];
            let _36: &mut [u8; 1300];
            scope 8 {
                debug input => _36;
                scope 9 {
                    scope 10 {
                    }
                }
            }
        }
    }
    scope 2 {
        debug offset => _6;
        let _7: &mut [u8];
        scope 3 {
            debug slice => _7;
            scope 4 {
                scope 5 {
                }
            }
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = const 0_usize;
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &mut (*_2);
        StorageLive(_10);
        StorageLive(_11);
        _11 = _6;
        StorageLive(_12);
        StorageLive(_13);
        _13 = _6;
        _14 = CheckedAdd(_13, const _);
        assert(!move (_14.1: bool), "attempt to compute `{} + {}`, which would overflow", move _13, const _) -> [success: bb1, unwind continue];
    }

    bb1: {
        _12 = move (_14.0: usize);
        StorageDead(_13);
        _10 = std::ops::Range::<usize> { start: move _11, end: move _12 };
        StorageDead(_12);
        StorageDead(_11);
        _8 = <[u8] as IndexMut<std::ops::Range<usize>>>::index_mut(move _9, move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_9);
        _7 = &mut (*_8);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &mut (*_7);
        _15 = <obligation::Obligation as Pack>::pack_into_slice::as_array::<u8>(move _16) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_16);
        _5 = &mut (*_15);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        _4 = &mut (*_5);
        _3 = &mut (*_4);
        StorageDead(_15);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_35);
        StorageLive(_36);
        _36 = move _3;
        StorageLive(_37);
        _37 = &mut (*_36);
        _35 = <obligation::Obligation as Pack>::pack_into_slice::as_arrays::<u8>(move _37) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_37);
        StorageDead(_36);
        StorageLive(_17);
        _17 = move (_35.0: &mut [u8; 1]);
        StorageLive(_18);
        _18 = move (_35.1: &mut [u8; 8]);
        StorageLive(_19);
        _19 = move (_35.2: &mut [u8; 1]);
        StorageLive(_20);
        _20 = move (_35.3: &mut [u8; 32]);
        StorageLive(_21);
        _21 = move (_35.4: &mut [u8; 32]);
        StorageLive(_22);
        _22 = move (_35.5: &mut [u8; 16]);
        StorageLive(_23);
        _23 = move (_35.6: &mut [u8; 16]);
        StorageLive(_24);
        _24 = move (_35.7: &mut [u8; 16]);
        StorageLive(_25);
        _25 = move (_35.8: &mut [u8; 16]);
        StorageLive(_26);
        _26 = move (_35.9: &mut [u8; 16]);
        StorageLive(_27);
        _27 = move (_35.10: &mut [u8; 1]);
        StorageLive(_28);
        _28 = move (_35.11: &mut [u8; 16]);
        StorageLive(_29);
        _29 = move (_35.12: &mut [u8; 16]);
        StorageLive(_30);
        _30 = move (_35.13: &mut [u8; 1]);
        StorageLive(_31);
        _31 = move (_35.14: &mut [u8; 14]);
        StorageLive(_32);
        _32 = move (_35.15: &mut [u8; 1]);
        StorageLive(_33);
        _33 = move (_35.16: &mut [u8; 1]);
        StorageLive(_34);
        _34 = move (_35.17: &mut [u8; 1096]);
        StorageDead(_35);
        StorageLive(_38);
        StorageLive(_39);
        _39 = ((*_1).0: u8);
        _38 = core::num::<impl u8>::to_le_bytes(move _39) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_39);
        (*_17) = move _38;
        StorageDead(_38);
        StorageLive(_40);
        StorageLive(_41);
        _41 = (((*_1).1: state::last_update::LastUpdate).0: u64);
        _40 = core::num::<impl u64>::to_le_bytes(move _41) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_41);
        (*_18) = move _40;
        StorageDead(_40);
        StorageLive(_42);
        StorageLive(_43);
        _43 = (((*_1).1: state::last_update::LastUpdate).1: bool);
        StorageLive(_44);
        _44 = &mut (*_19);
        _42 = state::pack_bool(move _43, move _44) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = &mut (*_20);
        _46 = move _47 as &mut [u8] (PointerCoercion(Unsize));
        StorageDead(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = &((*_1).2: solana_program::pubkey::Pubkey);
        _49 = <Pubkey as AsRef<[u8]>>::as_ref(move _50) -> [return: bb8, unwind continue];
    }

    bb8: {
        _48 = &(*_49);
        StorageDead(_50);
        _45 = core::slice::<impl [u8]>::copy_from_slice(move _46, move _48) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_48);
        StorageDead(_46);
        StorageDead(_49);
        StorageDead(_45);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = &mut (*_21);
        _52 = move _53 as &mut [u8] (PointerCoercion(Unsize));
        StorageDead(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = &((*_1).3: solana_program::pubkey::Pubkey);
        _55 = <Pubkey as AsRef<[u8]>>::as_ref(move _56) -> [return: bb10, unwind continue];
    }

    bb10: {
        _54 = &(*_55);
        StorageDead(_56);
        _51 = core::slice::<impl [u8]>::copy_from_slice(move _52, move _54) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_54);
        StorageDead(_52);
        StorageDead(_55);
        StorageDead(_51);
        StorageLive(_57);
        StorageLive(_58);
        _58 = ((*_1).6: math::decimal::Decimal);
        StorageLive(_59);
        _59 = &mut (*_22);
        _57 = state::pack_decimal(move _58, move _59) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        StorageLive(_60);
        StorageLive(_61);
        _61 = ((*_1).7: math::decimal::Decimal);
        StorageLive(_62);
        _62 = &mut (*_23);
        _60 = state::pack_decimal(move _61, move _62) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_60);
        StorageLive(_63);
        StorageLive(_64);
        _64 = ((*_1).9: math::decimal::Decimal);
        StorageLive(_65);
        _65 = &mut (*_26);
        _63 = state::pack_decimal(move _64, move _65) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_63);
        StorageLive(_66);
        StorageLive(_67);
        _67 = ((*_1).10: math::decimal::Decimal);
        StorageLive(_68);
        _68 = &mut (*_24);
        _66 = state::pack_decimal(move _67, move _68) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_68);
        StorageDead(_67);
        StorageDead(_66);
        StorageLive(_69);
        StorageLive(_70);
        _70 = ((*_1).11: math::decimal::Decimal);
        StorageLive(_71);
        _71 = &mut (*_25);
        _69 = state::pack_decimal(move _70, move _71) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_72);
        StorageLive(_73);
        _73 = ((*_1).13: bool);
        StorageLive(_74);
        _74 = &mut (*_27);
        _72 = state::pack_bool(move _73, move _74) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_72);
        StorageLive(_75);
        StorageLive(_76);
        _76 = ((*_1).12: math::decimal::Decimal);
        StorageLive(_77);
        _77 = &mut (*_28);
        _75 = state::pack_decimal(move _76, move _77) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_75);
        StorageLive(_78);
        StorageLive(_79);
        _79 = ((*_1).8: math::decimal::Decimal);
        StorageLive(_80);
        _80 = &mut (*_29);
        _78 = state::pack_decimal(move _79, move _80) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_80);
        StorageDead(_79);
        StorageDead(_78);
        StorageLive(_81);
        StorageLive(_82);
        _82 = ((*_1).14: bool);
        StorageLive(_83);
        _83 = &mut (*_30);
        _81 = state::pack_bool(move _82, move _83) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_83);
        StorageDead(_82);
        StorageDead(_81);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _88 = &((*_1).4: std::vec::Vec<state::obligation::ObligationCollateral>);
        _87 = Vec::<obligation::ObligationCollateral>::len(move _88) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_88);
        _86 = <u8 as TryFrom<usize>>::try_from(move _87) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_87);
        _85 = Result::<u8, TryFromIntError>::unwrap(move _86) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_86);
        _84 = core::num::<impl u8>::to_le_bytes(move _85) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_85);
        (*_32) = move _84;
        StorageDead(_84);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _93 = &((*_1).5: std::vec::Vec<state::obligation::ObligationLiquidity>);
        _92 = Vec::<obligation::ObligationLiquidity>::len(move _93) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_93);
        _91 = <u8 as TryFrom<usize>>::try_from(move _92) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_92);
        _90 = Result::<u8, TryFromIntError>::unwrap(move _91) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_91);
        _89 = core::num::<impl u8>::to_le_bytes(move _90) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_90);
        (*_33) = move _89;
        StorageDead(_89);
        StorageLive(_94);
        _94 = const 0_usize;
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = &((*_1).4: std::vec::Vec<state::obligation::ObligationCollateral>);
        _96 = <&Vec<obligation::ObligationCollateral> as IntoIterator>::into_iter(move _97) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_97);
        StorageLive(_98);
        _98 = move _96;
        goto -> bb30;
    }

    bb30: {
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        _103 = &mut _98;
        _102 = &mut (*_103);
        _101 = <std::slice::Iter<'_, obligation::ObligationCollateral> as Iterator>::next(move _102) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_102);
        _104 = discriminant(_101);
        switchInt(move _104) -> [0: bb34, 1: bb32, otherwise: bb33];
    }

    bb32: {
        StorageLive(_106);
        _106 = ((_101 as Some).0: &state::obligation::ObligationCollateral);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _110 = _94;
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        _113 = &mut (*_34);
        StorageLive(_114);
        StorageLive(_115);
        _115 = _110;
        StorageLive(_116);
        StorageLive(_117);
        _117 = _110;
        _118 = CheckedAdd(_117, const _);
        assert(!move (_118.1: bool), "attempt to compute `{} + {}`, which would overflow", move _117, const _) -> [success: bb35, unwind continue];
    }

    bb33: {
        unreachable;
    }

    bb34: {
        _95 = const ();
        StorageDead(_103);
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_98);
        StorageDead(_96);
        StorageDead(_95);
        StorageLive(_144);
        StorageLive(_145);
        _145 = &((*_1).5: std::vec::Vec<state::obligation::ObligationLiquidity>);
        _144 = <&Vec<obligation::ObligationLiquidity> as IntoIterator>::into_iter(move _145) -> [return: bb45, unwind continue];
    }

    bb35: {
        _116 = move (_118.0: usize);
        StorageDead(_117);
        _114 = std::ops::Range::<usize> { start: move _115, end: move _116 };
        StorageDead(_116);
        StorageDead(_115);
        _112 = <[u8; 1096] as IndexMut<std::ops::Range<usize>>>::index_mut(move _113, move _114) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_114);
        StorageDead(_113);
        _111 = &mut (*_112);
        StorageLive(_119);
        StorageLive(_120);
        _120 = &mut (*_111);
        _119 = <obligation::Obligation as Pack>::pack_into_slice::as_array::<u8>(move _120) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_120);
        _109 = &mut (*_119);
        StorageDead(_112);
        StorageDead(_111);
        StorageDead(_110);
        _108 = &mut (*_109);
        _107 = &mut (*_108);
        StorageDead(_119);
        StorageDead(_109);
        StorageDead(_108);
        StorageLive(_126);
        StorageLive(_127);
        _127 = move _107;
        StorageLive(_128);
        _128 = &mut (*_127);
        _126 = <obligation::Obligation as Pack>::pack_into_slice::as_arrays::<u8>(move _128) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_128);
        StorageDead(_127);
        StorageLive(_121);
        _121 = move (_126.0: &mut [u8; 32]);
        StorageLive(_122);
        _122 = move (_126.1: &mut [u8; 8]);
        StorageLive(_123);
        _123 = move (_126.2: &mut [u8; 16]);
        StorageLive(_124);
        _124 = move (_126.3: &mut [u8; 16]);
        StorageLive(_125);
        _125 = move (_126.4: &mut [u8; 16]);
        StorageDead(_126);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        _131 = &mut (*_121);
        _130 = move _131 as &mut [u8] (PointerCoercion(Unsize));
        StorageDead(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        _134 = &((*_106).0: solana_program::pubkey::Pubkey);
        _133 = <Pubkey as AsRef<[u8]>>::as_ref(move _134) -> [return: bb39, unwind continue];
    }

    bb39: {
        _132 = &(*_133);
        StorageDead(_134);
        _129 = core::slice::<impl [u8]>::copy_from_slice(move _130, move _132) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_132);
        StorageDead(_130);
        StorageDead(_133);
        StorageDead(_129);
        StorageLive(_135);
        StorageLive(_136);
        _136 = ((*_106).1: u64);
        _135 = core::num::<impl u64>::to_le_bytes(move _136) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_136);
        (*_122) = move _135;
        StorageDead(_135);
        StorageLive(_137);
        StorageLive(_138);
        _138 = ((*_106).2: math::decimal::Decimal);
        StorageLive(_139);
        _139 = &mut (*_123);
        _137 = state::pack_decimal(move _138, move _139) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_139);
        StorageDead(_138);
        StorageDead(_137);
        StorageLive(_140);
        StorageLive(_141);
        _141 = ((*_106).3: math::decimal::Decimal);
        StorageLive(_142);
        _142 = &mut (*_124);
        _140 = state::pack_decimal(move _141, move _142) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_142);
        StorageDead(_141);
        StorageDead(_140);
        _143 = CheckedAdd(_94, const _);
        assert(!move (_143.1: bool), "attempt to compute `{} + {}`, which would overflow", _94, const _) -> [success: bb44, unwind continue];
    }

    bb44: {
        _94 = move (_143.0: usize);
        _100 = const ();
        StorageDead(_125);
        StorageDead(_124);
        StorageDead(_123);
        StorageDead(_122);
        StorageDead(_121);
        StorageDead(_107);
        StorageDead(_106);
        StorageDead(_103);
        StorageDead(_101);
        StorageDead(_100);
        _99 = const ();
        goto -> bb30;
    }

    bb45: {
        StorageDead(_145);
        StorageLive(_146);
        _146 = move _144;
        goto -> bb46;
    }

    bb46: {
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        _150 = &mut _146;
        _149 = &mut (*_150);
        _148 = <std::slice::Iter<'_, obligation::ObligationLiquidity> as Iterator>::next(move _149) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_149);
        _151 = discriminant(_148);
        switchInt(move _151) -> [0: bb49, 1: bb48, otherwise: bb33];
    }

    bb48: {
        StorageLive(_153);
        _153 = ((_148 as Some).0: &state::obligation::ObligationLiquidity);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        _157 = _94;
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        _160 = &mut (*_34);
        StorageLive(_161);
        StorageLive(_162);
        _162 = _157;
        StorageLive(_163);
        StorageLive(_164);
        _164 = _157;
        _165 = CheckedAdd(_164, const _);
        assert(!move (_165.1: bool), "attempt to compute `{} + {}`, which would overflow", move _164, const _) -> [success: bb50, unwind continue];
    }

    bb49: {
        _0 = const ();
        StorageDead(_150);
        StorageDead(_148);
        StorageDead(_147);
        StorageDead(_146);
        StorageDead(_144);
        StorageDead(_94);
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_3);
        return;
    }

    bb50: {
        _163 = move (_165.0: usize);
        StorageDead(_164);
        _161 = std::ops::Range::<usize> { start: move _162, end: move _163 };
        StorageDead(_163);
        StorageDead(_162);
        _159 = <[u8; 1096] as IndexMut<std::ops::Range<usize>>>::index_mut(move _160, move _161) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_161);
        StorageDead(_160);
        _158 = &mut (*_159);
        StorageLive(_166);
        StorageLive(_167);
        _167 = &mut (*_158);
        _166 = <obligation::Obligation as Pack>::pack_into_slice::as_array::<u8>(move _167) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_167);
        _156 = &mut (*_166);
        StorageDead(_159);
        StorageDead(_158);
        StorageDead(_157);
        _155 = &mut (*_156);
        _154 = &mut (*_155);
        StorageDead(_166);
        StorageDead(_156);
        StorageDead(_155);
        StorageLive(_173);
        StorageLive(_174);
        _174 = move _154;
        StorageLive(_175);
        _175 = &mut (*_174);
        _173 = <obligation::Obligation as Pack>::pack_into_slice::as_arrays::<u8>(move _175) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_175);
        StorageDead(_174);
        StorageLive(_168);
        _168 = move (_173.0: &mut [u8; 32]);
        StorageLive(_169);
        _169 = move (_173.1: &mut [u8; 16]);
        StorageLive(_170);
        _170 = move (_173.2: &mut [u8; 16]);
        StorageLive(_171);
        _171 = move (_173.3: &mut [u8; 16]);
        StorageLive(_172);
        _172 = move (_173.4: &mut [u8; 32]);
        StorageDead(_173);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        _178 = &mut (*_168);
        _177 = move _178 as &mut [u8] (PointerCoercion(Unsize));
        StorageDead(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        _181 = &((*_153).0: solana_program::pubkey::Pubkey);
        _180 = <Pubkey as AsRef<[u8]>>::as_ref(move _181) -> [return: bb54, unwind continue];
    }

    bb54: {
        _179 = &(*_180);
        StorageDead(_181);
        _176 = core::slice::<impl [u8]>::copy_from_slice(move _177, move _179) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_179);
        StorageDead(_177);
        StorageDead(_180);
        StorageDead(_176);
        StorageLive(_182);
        StorageLive(_183);
        _183 = ((*_153).1: math::decimal::Decimal);
        StorageLive(_184);
        _184 = &mut (*_169);
        _182 = state::pack_decimal(move _183, move _184) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_184);
        StorageDead(_183);
        StorageDead(_182);
        StorageLive(_185);
        StorageLive(_186);
        _186 = ((*_153).2: math::decimal::Decimal);
        StorageLive(_187);
        _187 = &mut (*_170);
        _185 = state::pack_decimal(move _186, move _187) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_187);
        StorageDead(_186);
        StorageDead(_185);
        StorageLive(_188);
        StorageLive(_189);
        _189 = ((*_153).3: math::decimal::Decimal);
        StorageLive(_190);
        _190 = &mut (*_171);
        _188 = state::pack_decimal(move _189, move _190) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_190);
        StorageDead(_189);
        StorageDead(_188);
        _191 = CheckedAdd(_94, const _);
        assert(!move (_191.1: bool), "attempt to compute `{} + {}`, which would overflow", _94, const _) -> [success: bb59, unwind continue];
    }

    bb59: {
        _94 = move (_191.0: usize);
        _147 = const ();
        StorageDead(_172);
        StorageDead(_171);
        StorageDead(_170);
        StorageDead(_169);
        StorageDead(_168);
        StorageDead(_154);
        StorageDead(_153);
        StorageDead(_150);
        StorageDead(_148);
        StorageDead(_147);
        _99 = const ();
        goto -> bb46;
    }
}
