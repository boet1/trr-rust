// MIR for `handlers::handler_update_reserve_allocation::process` before PreCodegen

fn handlers::handler_update_reserve_allocation::process(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>>, _2: u64, _3: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug target_allocation_weight => _2;
    debug allocation_cap => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: &mut std::cell::RefMut<'_, state::VaultState>;
    let mut _5: std::cell::RefMut<'_, state::VaultState>;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::VaultState>>;
    let mut _7: std::result::Result<std::cell::RefMut<'_, state::VaultState>, anchor_lang::error::Error>;
    let mut _8: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _13: std::cell::RefMut<'_, state::VaultState>;
    let _15: std::cell::Ref<'_, kamino_lending::Reserve>;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, kamino_lending::Reserve>>;
    let mut _17: std::result::Result<std::cell::Ref<'_, kamino_lending::Reserve>, anchor_lang::error::Error>;
    let mut _18: &anchor_lang::prelude::AccountLoader<'_, kamino_lending::Reserve>;
    let mut _19: isize;
    let mut _21: !;
    let mut _22: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _25: &anchor_lang::prelude::AccountLoader<'_, kamino_lending::Reserve>;
    let mut _27: &state::VaultState;
    let _28: &state::VaultState;
    let mut _29: &std::cell::RefMut<'_, state::VaultState>;
    let mut _30: &anchor_lang::prelude::Pubkey;
    let _31: &anchor_lang::prelude::Pubkey;
    let mut _33: &anchor_lang::prelude::Pubkey;
    let _34: anchor_lang::prelude::Pubkey;
    let mut _35: &anchor_lang::prelude::Signer<'_>;
    let mut _36: &anchor_lang::prelude::Pubkey;
    let _37: &state::VaultState;
    let mut _38: &std::cell::RefMut<'_, state::VaultState>;
    let mut _40: &anchor_lang::prelude::Pubkey;
    let _41: anchor_lang::prelude::Pubkey;
    let mut _42: &anchor_lang::prelude::Signer<'_>;
    let mut _43: &anchor_lang::prelude::Pubkey;
    let _44: &state::VaultState;
    let mut _45: &std::cell::RefMut<'_, state::VaultState>;
    let _46: ();
    let mut _47: isize;
    let _48: ();
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: !;
    let mut _52: anchor_lang::error::Error;
    let mut _53: anchor_lang::error::AnchorError;
    let mut _54: std::string::String;
    let mut _55: &KaminoVaultError;
    let _56: KaminoVaultError;
    let mut _57: u32;
    let mut _58: KaminoVaultError;
    let mut _59: std::string::String;
    let mut _60: &KaminoVaultError;
    let _61: KaminoVaultError;
    let mut _62: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _63: anchor_lang::error::ErrorOrigin;
    let mut _64: anchor_lang::error::Source;
    let mut _65: std::option::Option<anchor_lang::error::ComparedValues>;
    let _66: ();
    let mut _67: bool;
    let mut _68: !;
    let mut _69: anchor_lang::error::Error;
    let mut _70: anchor_lang::error::AnchorError;
    let mut _71: std::string::String;
    let mut _72: &KaminoVaultError;
    let _73: KaminoVaultError;
    let mut _74: u32;
    let mut _75: KaminoVaultError;
    let mut _76: std::string::String;
    let mut _77: &KaminoVaultError;
    let _78: KaminoVaultError;
    let mut _79: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _80: anchor_lang::error::ErrorOrigin;
    let mut _81: anchor_lang::error::Source;
    let mut _82: std::option::Option<anchor_lang::error::ComparedValues>;
    let _84: ();
    let _85: ();
    let _86: ();
    let mut _87: std::fmt::Arguments<'_>;
    let mut _88: &[&str];
    let mut _89: &[&str; 5];
    let _90: &[&str; 5];
    let _91: [&str; 5];
    let mut _92: &[core::fmt::rt::Argument<'_>];
    let mut _93: &[core::fmt::rt::Argument<'_>; 4];
    let _94: &[core::fmt::rt::Argument<'_>; 4];
    let _95: [core::fmt::rt::Argument<'_>; 4];
    let mut _96: core::fmt::rt::Argument<'_>;
    let mut _97: &&str;
    let _98: &&str;
    let _99: &str;
    let mut _100: &kamino_lending::Reserve;
    let _101: &kamino_lending::Reserve;
    let mut _102: &std::cell::Ref<'_, kamino_lending::Reserve>;
    let mut _103: core::fmt::rt::Argument<'_>;
    let mut _104: &anchor_lang::prelude::Pubkey;
    let _105: &anchor_lang::prelude::Pubkey;
    let mut _106: core::fmt::rt::Argument<'_>;
    let mut _107: &u64;
    let _108: &u64;
    let mut _109: core::fmt::rt::Argument<'_>;
    let mut _110: &u64;
    let _111: &u64;
    let _112: ();
    let mut _113: bool;
    let mut _114: &anchor_lang::prelude::Pubkey;
    let _115: &kamino_lending::Reserve;
    let mut _116: &std::cell::Ref<'_, kamino_lending::Reserve>;
    let mut _117: &anchor_lang::prelude::Pubkey;
    let _118: &state::VaultState;
    let mut _119: &std::cell::RefMut<'_, state::VaultState>;
    let mut _120: !;
    let mut _121: anchor_lang::error::Error;
    let mut _122: anchor_lang::error::Error;
    let mut _123: anchor_lang::error::AnchorError;
    let mut _124: std::string::String;
    let mut _125: &anchor_lang::error::ErrorCode;
    let _126: anchor_lang::error::ErrorCode;
    let mut _127: u32;
    let mut _128: anchor_lang::error::ErrorCode;
    let mut _129: std::string::String;
    let mut _130: &anchor_lang::error::ErrorCode;
    let _131: anchor_lang::error::ErrorCode;
    let mut _132: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _133: anchor_lang::error::ErrorOrigin;
    let mut _134: anchor_lang::error::Source;
    let mut _135: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _136: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _137: anchor_lang::prelude::Pubkey;
    let mut _138: &kamino_lending::Reserve;
    let mut _139: &std::cell::Ref<'_, kamino_lending::Reserve>;
    let mut _140: anchor_lang::prelude::Pubkey;
    let mut _141: &state::VaultState;
    let mut _142: &std::cell::RefMut<'_, state::VaultState>;
    let _143: ();
    let mut _144: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _145: std::result::Result<(), anchor_lang::error::Error>;
    let mut _146: &mut state::VaultState;
    let mut _147: &mut state::VaultState;
    let mut _148: &mut std::cell::RefMut<'_, state::VaultState>;
    let mut _149: anchor_lang::prelude::Pubkey;
    let mut _150: anchor_lang::prelude::Pubkey;
    let mut _151: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _152: u64;
    let mut _153: u8;
    let mut _154: u64;
    let mut _155: u64;
    let mut _156: isize;
    let mut _158: !;
    let mut _159: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _161: ();
    let mut _169: &mut handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>;
    let mut _170: &mut handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>;
    let mut _171: &mut handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>;
    let mut _172: &mut handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>;
    let mut _173: &mut handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>;
    let mut _174: &mut handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>;
    let mut _175: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _176: bool;
    let mut _177: isize;
    let mut _178: isize;
    let mut _179: isize;
    let mut _180: isize;
    let mut _181: isize;
    let mut _182: isize;
    let mut _183: isize;
    let mut _184: isize;
    let mut _185: isize;
    let mut _186: isize;
    let mut _187: isize;
    let mut _188: isize;
    let mut _189: isize;
    let mut _190: isize;
    let mut _191: isize;
    let mut _192: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug vault => _4;
        let _14: &std::cell::Ref<'_, kamino_lending::Reserve>;
        let _20: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _23: std::cell::Ref<'_, kamino_lending::Reserve>;
        scope 6 {
            debug reserve => _14;
            let _24: anchor_lang::prelude::Pubkey;
            scope 11 {
                debug reserve_key => _24;
                let _26: std::option::Option<usize>;
                scope 12 {
                    debug idx => _26;
                    let _32: bool;
                    scope 13 {
                        debug is_vault_admin => _32;
                        let _39: bool;
                        scope 14 {
                            debug is_allocation_admin => _39;
                            let _83: u8;
                            let mut _165: &KaminoVaultError;
                            let mut _166: &KaminoVaultError;
                            let mut _167: &KaminoVaultError;
                            let mut _168: &KaminoVaultError;
                            scope 15 {
                                debug ctoken_vault_bump => _83;
                                let _157: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _160: ();
                                let mut _162: &anchor_lang::error::ErrorCode;
                                let mut _163: &anchor_lang::error::ErrorCode;
                                let mut _164: &[&str; 5];
                                scope 16 {
                                    debug residual => _157;
                                    scope 17 {
                                    }
                                }
                                scope 18 {
                                    debug val => _160;
                                    scope 19 {
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        scope 7 {
            debug residual => _20;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _23;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _10;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _13;
        scope 5 {
        }
    }

    bb0: {
        _176 = const false;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _169 = deref_copy (_1.1: &mut handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>);
        _8 = &((*_169).1: anchor_lang::prelude::AccountLoader<'_, state::VaultState>);
        _7 = anchor_lang::prelude::AccountLoader::<'_, state::VaultState>::load_mut(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        _6 = <std::result::Result<RefMut<'_, state::VaultState>, anchor_lang::error::Error> as Try>::branch(move _7) -> [return: bb2, unwind: bb78];
    }

    bb2: {
        StorageDead(_7);
        _9 = discriminant(_6);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = move ((_6 as Continue).0: std::cell::RefMut<'_, state::VaultState>);
        _5 = move _13;
        StorageDead(_13);
        _4 = &mut _5;
        _177 = discriminant(_6);
        StorageDead(_6);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _170 = deref_copy (_1.1: &mut handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>);
        _18 = &((*_170).4: anchor_lang::prelude::AccountLoader<'_, kamino_lending::Reserve>);
        _17 = anchor_lang::prelude::AccountLoader::<'_, kamino_lending::Reserve>::load(move _18) -> [return: bb7, unwind: bb77];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_12);
        _12 = move _10;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _12) -> [return: bb6, unwind: bb83];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        _187 = discriminant(_6);
        StorageDead(_6);
        goto -> bb71;
    }

    bb7: {
        StorageDead(_18);
        _16 = <std::result::Result<Ref<'_, kamino_lending::Reserve>, anchor_lang::error::Error> as Try>::branch(move _17) -> [return: bb8, unwind: bb77];
    }

    bb8: {
        StorageDead(_17);
        _19 = discriminant(_16);
        switchInt(move _19) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_23);
        _23 = move ((_16 as Continue).0: std::cell::Ref<'_, kamino_lending::Reserve>);
        _15 = move _23;
        StorageDead(_23);
        _14 = &_15;
        _179 = discriminant(_16);
        StorageDead(_16);
        StorageLive(_24);
        StorageLive(_25);
        _171 = deref_copy (_1.1: &mut handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>);
        _25 = &((*_171).4: anchor_lang::prelude::AccountLoader<'_, kamino_lending::Reserve>);
        _24 = <anchor_lang::prelude::AccountLoader<'_, kamino_lending::Reserve> as anchor_lang::Key>::key(move _25) -> [return: bb12, unwind: bb76];
    }

    bb10: {
        StorageLive(_20);
        _20 = move ((_16 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_22);
        _22 = move _20;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _22) -> [return: bb11, unwind: bb82];
    }

    bb11: {
        StorageDead(_22);
        StorageDead(_20);
        _185 = discriminant(_16);
        StorageDead(_16);
        goto -> bb70;
    }

    bb12: {
        StorageDead(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = &(*_4);
        _28 = <RefMut<'_, state::VaultState> as Deref>::deref(move _29) -> [return: bb13, unwind: bb76];
    }

    bb13: {
        _27 = &(*_28);
        StorageDead(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = &_24;
        _30 = &(*_31);
        _26 = state::VaultState::get_reserve_idx_in_allocation(move _27, move _30) -> [return: bb14, unwind: bb76];
    }

    bb14: {
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_31);
        StorageDead(_28);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _172 = deref_copy (_1.1: &mut handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>);
        _35 = &((*_172).0: anchor_lang::prelude::Signer<'_>);
        _34 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _35) -> [return: bb15, unwind: bb76];
    }

    bb15: {
        _33 = &_34;
        StorageDead(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = &(*_4);
        _37 = <RefMut<'_, state::VaultState> as Deref>::deref(move _38) -> [return: bb16, unwind: bb76];
    }

    bb16: {
        StorageDead(_38);
        _36 = &((*_37).0: anchor_lang::prelude::Pubkey);
        _32 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _33, move _36) -> [return: bb17, unwind: bb76];
    }

    bb17: {
        StorageDead(_36);
        StorageDead(_33);
        StorageDead(_37);
        StorageDead(_34);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _173 = deref_copy (_1.1: &mut handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>);
        _42 = &((*_173).0: anchor_lang::prelude::Signer<'_>);
        _41 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _42) -> [return: bb18, unwind: bb76];
    }

    bb18: {
        _40 = &_41;
        StorageDead(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = &(*_4);
        _44 = <RefMut<'_, state::VaultState> as Deref>::deref(move _45) -> [return: bb19, unwind: bb76];
    }

    bb19: {
        StorageDead(_45);
        _43 = &((*_44).34: anchor_lang::prelude::Pubkey);
        _39 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _40, move _43) -> [return: bb20, unwind: bb76];
    }

    bb20: {
        StorageDead(_43);
        StorageDead(_40);
        StorageDead(_44);
        StorageDead(_41);
        StorageLive(_46);
        _47 = discriminant(_26);
        switchInt(move _47) -> [0: bb21, 1: bb22, otherwise: bb4];
    }

    bb21: {
        StorageLive(_66);
        StorageLive(_67);
        _67 = _32;
        switchInt(move _67) -> [0: bb30, otherwise: bb35];
    }

    bb22: {
        StorageLive(_48);
        StorageLive(_49);
        _49 = _39;
        switchInt(move _49) -> [0: bb23, otherwise: bb29];
    }

    bb23: {
        StorageLive(_50);
        _50 = _32;
        switchInt(move _50) -> [0: bb24, otherwise: bb29];
    }

    bb24: {
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _168 = const _;
        _55 = &(*_168);
        _54 = KaminoVaultError::name(move _55) -> [return: bb25, unwind: bb76];
    }

    bb25: {
        StorageDead(_55);
        StorageLive(_57);
        StorageLive(_58);
        _58 = KaminoVaultError::WrongAdminOrAllocationAdmin;
        _57 = <KaminoVaultError as Into<u32>>::into(move _58) -> [return: bb26, unwind: bb75];
    }

    bb26: {
        StorageDead(_58);
        StorageLive(_59);
        StorageLive(_60);
        _167 = const _;
        _60 = &(*_167);
        _59 = <KaminoVaultError as ToString>::to_string(move _60) -> [return: bb27, unwind: bb75];
    }

    bb27: {
        StorageDead(_60);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\handlers\\handler_update_reserve_allocation.rs", line: const 26_u32 };
        _63 = anchor_lang::error::ErrorOrigin::Source(move _64);
        StorageDead(_64);
        _62 = Option::<ErrorOrigin>::Some(move _63);
        StorageDead(_63);
        StorageLive(_65);
        _65 = Option::<ComparedValues>::None;
        _53 = anchor_lang::error::AnchorError { error_name: move _54, error_code_number: move _57, error_msg: move _59, error_origin: move _62, compared_values: move _65 };
        StorageDead(_65);
        StorageDead(_62);
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_54);
        _52 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _53) -> [return: bb28, unwind: bb76];
    }

    bb28: {
        StorageDead(_53);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _52);
        StorageDead(_52);
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_48);
        goto -> bb68;
    }

    bb29: {
        _48 = const ();
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_48);
        _46 = const ();
        goto -> bb36;
    }

    bb30: {
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        _166 = const _;
        _72 = &(*_166);
        _71 = KaminoVaultError::name(move _72) -> [return: bb31, unwind: bb76];
    }

    bb31: {
        StorageDead(_72);
        StorageLive(_74);
        StorageLive(_75);
        _75 = KaminoVaultError::WrongAdminOrAllocationAdmin;
        _74 = <KaminoVaultError as Into<u32>>::into(move _75) -> [return: bb32, unwind: bb74];
    }

    bb32: {
        StorageDead(_75);
        StorageLive(_76);
        StorageLive(_77);
        _165 = const _;
        _77 = &(*_165);
        _76 = <KaminoVaultError as ToString>::to_string(move _77) -> [return: bb33, unwind: bb74];
    }

    bb33: {
        StorageDead(_77);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        _81 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\handlers\\handler_update_reserve_allocation.rs", line: const 32_u32 };
        _80 = anchor_lang::error::ErrorOrigin::Source(move _81);
        StorageDead(_81);
        _79 = Option::<ErrorOrigin>::Some(move _80);
        StorageDead(_80);
        StorageLive(_82);
        _82 = Option::<ComparedValues>::None;
        _70 = anchor_lang::error::AnchorError { error_name: move _71, error_code_number: move _74, error_msg: move _76, error_origin: move _79, compared_values: move _82 };
        StorageDead(_82);
        StorageDead(_79);
        StorageDead(_76);
        StorageDead(_74);
        StorageDead(_71);
        _69 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _70) -> [return: bb34, unwind: bb76];
    }

    bb34: {
        StorageDead(_70);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _69);
        StorageDead(_69);
        StorageDead(_67);
        StorageDead(_66);
        goto -> bb68;
    }

    bb35: {
        _66 = const ();
        StorageDead(_67);
        StorageDead(_66);
        _46 = const ();
        goto -> bb36;
    }

    bb36: {
        StorageDead(_46);
        StorageLive(_83);
        _83 = ((_1.3: handlers::handler_update_reserve_allocation::UpdateReserveAllocationBumps).0: u8);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        _164 = const _;
        _90 = &(*_164);
        _89 = &(*_90);
        _88 = move _89 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_89);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _102 = &(*_14);
        _101 = <Ref<'_, kamino_lending::Reserve> as Deref>::deref(move _102) -> [return: bb37, unwind: bb76];
    }

    bb37: {
        _100 = &(*_101);
        StorageDead(_102);
        _99 = kamino_lending::Reserve::token_symbol(move _100) -> [return: bb38, unwind: bb76];
    }

    bb38: {
        StorageDead(_100);
        _98 = &_99;
        _97 = &(*_98);
        _96 = core::fmt::rt::Argument::<'_>::new_debug::<&str>(move _97) -> [return: bb39, unwind: bb76];
    }

    bb39: {
        StorageDead(_97);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _105 = &_24;
        _104 = &(*_105);
        _103 = core::fmt::rt::Argument::<'_>::new_display::<anchor_lang::prelude::Pubkey>(move _104) -> [return: bb40, unwind: bb76];
    }

    bb40: {
        StorageDead(_104);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        _108 = &_2;
        _107 = &(*_108);
        _106 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _107) -> [return: bb41, unwind: bb76];
    }

    bb41: {
        StorageDead(_107);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        _111 = &_3;
        _110 = &(*_111);
        _109 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _110) -> [return: bb42, unwind: bb76];
    }

    bb42: {
        StorageDead(_110);
        _95 = [move _96, move _103, move _106, move _109];
        StorageDead(_109);
        StorageDead(_106);
        StorageDead(_103);
        StorageDead(_96);
        _94 = &_95;
        _93 = &(*_94);
        _92 = move _93 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_93);
        _87 = Arguments::<'_>::new_v1(move _88, move _92) -> [return: bb43, unwind: bb76];
    }

    bb43: {
        StorageDead(_92);
        StorageDead(_88);
        _86 = _print(move _87) -> [return: bb44, unwind: bb76];
    }

    bb44: {
        StorageDead(_87);
        StorageDead(_111);
        StorageDead(_108);
        StorageDead(_105);
        StorageDead(_101);
        StorageDead(_99);
        StorageDead(_98);
        StorageDead(_95);
        StorageDead(_94);
        StorageDead(_90);
        StorageDead(_86);
        _85 = const ();
        StorageDead(_85);
        _84 = const ();
        StorageDead(_84);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        _116 = &(*_14);
        _115 = <Ref<'_, kamino_lending::Reserve> as Deref>::deref(move _116) -> [return: bb45, unwind: bb76];
    }

    bb45: {
        StorageDead(_116);
        _114 = &(((*_115).5: kamino_lending::ReserveLiquidity).0: anchor_lang::prelude::Pubkey);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        _119 = &(*_4);
        _118 = <RefMut<'_, state::VaultState> as Deref>::deref(move _119) -> [return: bb46, unwind: bb76];
    }

    bb46: {
        StorageDead(_119);
        _117 = &((*_118).3: anchor_lang::prelude::Pubkey);
        _113 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _114, move _117) -> [return: bb47, unwind: bb76];
    }

    bb47: {
        switchInt(move _113) -> [0: bb56, otherwise: bb48];
    }

    bb48: {
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_115);
        StorageDead(_114);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _163 = const _;
        _125 = &(*_163);
        _124 = anchor_lang::error::ErrorCode::name(move _125) -> [return: bb49, unwind: bb76];
    }

    bb49: {
        StorageDead(_125);
        StorageLive(_127);
        StorageLive(_128);
        _128 = RequireEqViolated;
        _127 = <anchor_lang::error::ErrorCode as Into<u32>>::into(move _128) -> [return: bb50, unwind: bb73];
    }

    bb50: {
        StorageDead(_128);
        StorageLive(_129);
        StorageLive(_130);
        _162 = const _;
        _130 = &(*_162);
        _129 = <anchor_lang::error::ErrorCode as ToString>::to_string(move _130) -> [return: bb51, unwind: bb73];
    }

    bb51: {
        StorageDead(_130);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        _134 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\handlers\\handler_update_reserve_allocation.rs", line: const 44_u32 };
        _133 = anchor_lang::error::ErrorOrigin::Source(move _134);
        StorageDead(_134);
        _132 = Option::<ErrorOrigin>::Some(move _133);
        StorageDead(_133);
        StorageLive(_135);
        _135 = Option::<ComparedValues>::None;
        _123 = anchor_lang::error::AnchorError { error_name: move _124, error_code_number: move _127, error_msg: move _129, error_origin: move _132, compared_values: move _135 };
        StorageDead(_135);
        StorageDead(_132);
        StorageDead(_129);
        StorageDead(_127);
        StorageDead(_124);
        _122 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _123) -> [return: bb52, unwind: bb76];
    }

    bb52: {
        _176 = const true;
        StorageDead(_123);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _139 = &(*_14);
        _138 = <Ref<'_, kamino_lending::Reserve> as Deref>::deref(move _139) -> [return: bb53, unwind: bb81];
    }

    bb53: {
        StorageDead(_139);
        _137 = (((*_138).5: kamino_lending::ReserveLiquidity).0: anchor_lang::prelude::Pubkey);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        _142 = &(*_4);
        _141 = <RefMut<'_, state::VaultState> as Deref>::deref(move _142) -> [return: bb54, unwind: bb81];
    }

    bb54: {
        StorageDead(_142);
        _140 = ((*_141).3: anchor_lang::prelude::Pubkey);
        _136 = (move _137, move _140);
        StorageDead(_140);
        StorageDead(_137);
        _176 = const false;
        _121 = anchor_lang::error::Error::with_values::<anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey>(move _122, move _136) -> [return: bb55, unwind: bb81];
    }

    bb55: {
        StorageDead(_136);
        _176 = const false;
        StorageDead(_122);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _121);
        StorageDead(_121);
        StorageDead(_141);
        StorageDead(_138);
        StorageDead(_113);
        StorageDead(_112);
        goto -> bb67;
    }

    bb56: {
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_115);
        StorageDead(_114);
        _112 = const ();
        StorageDead(_113);
        StorageDead(_112);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        _148 = &mut (*_4);
        _147 = <RefMut<'_, state::VaultState> as DerefMut>::deref_mut(move _148) -> [return: bb57, unwind: bb76];
    }

    bb57: {
        _146 = &mut (*_147);
        StorageDead(_148);
        StorageLive(_149);
        _149 = _24;
        StorageLive(_150);
        StorageLive(_151);
        _174 = deref_copy (_1.1: &mut handlers::handler_update_reserve_allocation::UpdateReserveAllocation<'_>);
        _175 = deref_copy ((*_174).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _192 = (((_175.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _151 = &(*_192);
        _150 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _151) -> [return: bb58, unwind: bb76];
    }

    bb58: {
        StorageDead(_151);
        StorageLive(_152);
        StorageLive(_153);
        _153 = _83;
        _152 = <u64 as From<u8>>::from(move _153) -> [return: bb59, unwind: bb76];
    }

    bb59: {
        StorageDead(_153);
        StorageLive(_154);
        _154 = _2;
        StorageLive(_155);
        _155 = _3;
        _145 = state::VaultState::upsert_reserve_allocation(move _146, move _149, move _150, move _152, move _154, move _155) -> [return: bb60, unwind: bb76];
    }

    bb60: {
        StorageDead(_155);
        StorageDead(_154);
        StorageDead(_152);
        StorageDead(_150);
        StorageDead(_149);
        StorageDead(_146);
        _144 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _145) -> [return: bb61, unwind: bb76];
    }

    bb61: {
        StorageDead(_145);
        _156 = discriminant(_144);
        switchInt(move _156) -> [0: bb62, 1: bb63, otherwise: bb4];
    }

    bb62: {
        StorageLive(_160);
        _160 = ((_144 as Continue).0: ());
        _143 = _160;
        StorageDead(_160);
        _181 = discriminant(_144);
        StorageDead(_147);
        StorageDead(_144);
        StorageDead(_143);
        StorageLive(_161);
        _161 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _161);
        StorageDead(_161);
        StorageDead(_83);
        StorageDead(_39);
        StorageDead(_32);
        StorageDead(_26);
        StorageDead(_24);
        drop(_15) -> [return: bb65, unwind: bb77];
    }

    bb63: {
        StorageLive(_157);
        _157 = move ((_144 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_159);
        _159 = move _157;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _159) -> [return: bb64, unwind: bb79];
    }

    bb64: {
        StorageDead(_159);
        StorageDead(_157);
        _183 = discriminant(_144);
        StorageDead(_147);
        StorageDead(_144);
        StorageDead(_143);
        goto -> bb67;
    }

    bb65: {
        StorageDead(_15);
        StorageDead(_14);
        drop(_5) -> [return: bb66, unwind: bb78];
    }

    bb66: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb72;
    }

    bb67: {
        StorageDead(_83);
        goto -> bb69;
    }

    bb68: {
        StorageDead(_46);
        goto -> bb69;
    }

    bb69: {
        StorageDead(_39);
        StorageDead(_32);
        StorageDead(_26);
        StorageDead(_24);
        drop(_15) -> [return: bb70, unwind: bb77];
    }

    bb70: {
        StorageDead(_15);
        StorageDead(_14);
        drop(_5) -> [return: bb71, unwind: bb78];
    }

    bb71: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb72;
    }

    bb72: {
        return;
    }

    bb73 (cleanup): {
        drop(_124) -> [return: bb76, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        drop(_71) -> [return: bb76, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        drop(_54) -> [return: bb76, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        drop(_15) -> [return: bb77, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        drop(_5) -> [return: bb78, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        resume;
    }

    bb79 (cleanup): {
        _189 = discriminant(_144);
        goto -> bb76;
    }

    bb80 (cleanup): {
        drop(_122) -> [return: bb76, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        switchInt(_176) -> [0: bb76, otherwise: bb80];
    }

    bb82 (cleanup): {
        _190 = discriminant(_16);
        goto -> bb77;
    }

    bb83 (cleanup): {
        _191 = discriminant(_6);
        goto -> bb78;
    }
}
