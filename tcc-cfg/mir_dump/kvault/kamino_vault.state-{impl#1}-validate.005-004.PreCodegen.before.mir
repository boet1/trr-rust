// MIR for `state::<impl at programs\kvault\src\state.rs:82:1: 82:16>::validate` before PreCodegen

fn state::<impl at programs\kvault\src\state.rs:82:1: 82:16>::validate(_1: &state::VaultState) -> std::result::Result<(), anchor_lang::error::Error> {
    debug self => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: ();
    let mut _3: bool;
    let mut _4: &anchor_lang::prelude::Pubkey;
    let mut _5: &anchor_lang::prelude::Pubkey;
    let _6: anchor_lang::prelude::Pubkey;
    let mut _7: !;
    let mut _8: anchor_lang::error::Error;
    let mut _9: anchor_lang::error::AnchorError;
    let mut _10: std::string::String;
    let mut _11: &KaminoVaultError;
    let _12: KaminoVaultError;
    let mut _13: u32;
    let mut _14: KaminoVaultError;
    let mut _15: std::string::String;
    let mut _16: &KaminoVaultError;
    let _17: KaminoVaultError;
    let mut _18: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _19: anchor_lang::error::ErrorOrigin;
    let mut _20: anchor_lang::error::Source;
    let mut _21: std::option::Option<anchor_lang::error::ComparedValues>;
    let _22: ();
    let mut _23: bool;
    let mut _24: &anchor_lang::prelude::Pubkey;
    let mut _25: &anchor_lang::prelude::Pubkey;
    let _26: anchor_lang::prelude::Pubkey;
    let mut _27: !;
    let mut _28: anchor_lang::error::Error;
    let mut _29: anchor_lang::error::AnchorError;
    let mut _30: std::string::String;
    let mut _31: &KaminoVaultError;
    let _32: KaminoVaultError;
    let mut _33: u32;
    let mut _34: KaminoVaultError;
    let mut _35: std::string::String;
    let mut _36: &KaminoVaultError;
    let _37: KaminoVaultError;
    let mut _38: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _39: anchor_lang::error::ErrorOrigin;
    let mut _40: anchor_lang::error::Source;
    let mut _41: std::option::Option<anchor_lang::error::ComparedValues>;
    let _42: ();
    let mut _43: bool;
    let mut _44: u64;
    let mut _45: u64;
    let mut _46: !;
    let mut _47: anchor_lang::error::Error;
    let mut _48: anchor_lang::error::AnchorError;
    let mut _49: std::string::String;
    let mut _50: &KaminoVaultError;
    let _51: KaminoVaultError;
    let mut _52: u32;
    let mut _53: KaminoVaultError;
    let mut _54: std::string::String;
    let mut _55: &KaminoVaultError;
    let _56: KaminoVaultError;
    let mut _57: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _58: anchor_lang::error::ErrorOrigin;
    let mut _59: anchor_lang::error::Source;
    let mut _60: std::option::Option<anchor_lang::error::ComparedValues>;
    let _61: ();
    let mut _62: bool;
    let mut _63: &anchor_lang::prelude::Pubkey;
    let mut _64: &anchor_lang::prelude::Pubkey;
    let _65: anchor_lang::prelude::Pubkey;
    let mut _66: !;
    let mut _67: anchor_lang::error::Error;
    let mut _68: anchor_lang::error::AnchorError;
    let mut _69: std::string::String;
    let mut _70: &KaminoVaultError;
    let _71: KaminoVaultError;
    let mut _72: u32;
    let mut _73: KaminoVaultError;
    let mut _74: std::string::String;
    let mut _75: &KaminoVaultError;
    let _76: KaminoVaultError;
    let mut _77: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _78: anchor_lang::error::ErrorOrigin;
    let mut _79: anchor_lang::error::Source;
    let mut _80: std::option::Option<anchor_lang::error::ComparedValues>;
    let _81: ();
    let mut _82: bool;
    let mut _83: u64;
    let mut _84: !;
    let mut _85: anchor_lang::error::Error;
    let mut _86: anchor_lang::error::AnchorError;
    let mut _87: std::string::String;
    let mut _88: &KaminoVaultError;
    let _89: KaminoVaultError;
    let mut _90: u32;
    let mut _91: KaminoVaultError;
    let mut _92: std::string::String;
    let mut _93: &KaminoVaultError;
    let _94: KaminoVaultError;
    let mut _95: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _96: anchor_lang::error::ErrorOrigin;
    let mut _97: anchor_lang::error::Source;
    let mut _98: std::option::Option<anchor_lang::error::ComparedValues>;
    let _99: ();
    let mut _100: bool;
    let mut _101: &anchor_lang::prelude::Pubkey;
    let mut _102: &anchor_lang::prelude::Pubkey;
    let _103: anchor_lang::prelude::Pubkey;
    let mut _104: !;
    let mut _105: anchor_lang::error::Error;
    let mut _106: anchor_lang::error::AnchorError;
    let mut _107: std::string::String;
    let mut _108: &KaminoVaultError;
    let _109: KaminoVaultError;
    let mut _110: u32;
    let mut _111: KaminoVaultError;
    let mut _112: std::string::String;
    let mut _113: &KaminoVaultError;
    let _114: KaminoVaultError;
    let mut _115: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _116: anchor_lang::error::ErrorOrigin;
    let mut _117: anchor_lang::error::Source;
    let mut _118: std::option::Option<anchor_lang::error::ComparedValues>;
    let _119: ();
    let mut _120: bool;
    let mut _121: &anchor_lang::prelude::Pubkey;
    let mut _122: &anchor_lang::prelude::Pubkey;
    let _123: anchor_lang::prelude::Pubkey;
    let mut _124: !;
    let mut _125: anchor_lang::error::Error;
    let mut _126: anchor_lang::error::AnchorError;
    let mut _127: std::string::String;
    let mut _128: &KaminoVaultError;
    let _129: KaminoVaultError;
    let mut _130: u32;
    let mut _131: KaminoVaultError;
    let mut _132: std::string::String;
    let mut _133: &KaminoVaultError;
    let _134: KaminoVaultError;
    let mut _135: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _136: anchor_lang::error::ErrorOrigin;
    let mut _137: anchor_lang::error::Source;
    let mut _138: std::option::Option<anchor_lang::error::ComparedValues>;
    let _139: ();
    let mut _140: bool;
    let mut _141: u64;
    let mut _142: !;
    let mut _143: anchor_lang::error::Error;
    let mut _144: anchor_lang::error::AnchorError;
    let mut _145: std::string::String;
    let mut _146: &KaminoVaultError;
    let _147: KaminoVaultError;
    let mut _148: u32;
    let mut _149: KaminoVaultError;
    let mut _150: std::string::String;
    let mut _151: &KaminoVaultError;
    let _152: KaminoVaultError;
    let mut _153: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _154: anchor_lang::error::ErrorOrigin;
    let mut _155: anchor_lang::error::Source;
    let mut _156: std::option::Option<anchor_lang::error::ComparedValues>;
    let _157: ();
    let mut _158: bool;
    let mut _159: u64;
    let mut _160: bool;
    let mut _161: u64;
    let mut _162: bool;
    let mut _163: u64;
    let mut _164: bool;
    let mut _165: u64;
    let mut _166: bool;
    let mut _167: u128;
    let mut _168: bool;
    let mut _169: u64;
    let mut _170: bool;
    let mut _171: u128;
    let mut _172: !;
    let mut _173: anchor_lang::error::Error;
    let mut _174: anchor_lang::error::AnchorError;
    let mut _175: std::string::String;
    let mut _176: &KaminoVaultError;
    let _177: KaminoVaultError;
    let mut _178: u32;
    let mut _179: KaminoVaultError;
    let mut _180: std::string::String;
    let mut _181: &KaminoVaultError;
    let _182: KaminoVaultError;
    let mut _183: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _184: anchor_lang::error::ErrorOrigin;
    let mut _185: anchor_lang::error::Source;
    let mut _186: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _187: ();
    let mut _188: &KaminoVaultError;
    let mut _189: &KaminoVaultError;
    let mut _190: &KaminoVaultError;
    let mut _191: &KaminoVaultError;
    let mut _192: &KaminoVaultError;
    let mut _193: &KaminoVaultError;
    let mut _194: &KaminoVaultError;
    let mut _195: &KaminoVaultError;
    let mut _196: &KaminoVaultError;
    let mut _197: &KaminoVaultError;
    let mut _198: &KaminoVaultError;
    let mut _199: &KaminoVaultError;
    let mut _200: &KaminoVaultError;
    let mut _201: &KaminoVaultError;
    let mut _202: &KaminoVaultError;
    let mut _203: &KaminoVaultError;
    let mut _204: &KaminoVaultError;
    let mut _205: &KaminoVaultError;

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = &((*_1).0: anchor_lang::prelude::Pubkey);
        StorageLive(_5);
        StorageLive(_6);
        _6 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &_6;
        _3 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _3) -> [0: bb8, otherwise: bb3];
    }

    bb3: {
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _189 = const _;
        _11 = &(*_189);
        _10 = KaminoVaultError::name(move _11) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_11);
        StorageLive(_13);
        StorageLive(_14);
        _14 = KaminoVaultError::AdminAuthorityIncorrect;
        _13 = <KaminoVaultError as Into<u32>>::into(move _14) -> [return: bb5, unwind: bb86];
    }

    bb5: {
        StorageDead(_14);
        StorageLive(_15);
        StorageLive(_16);
        _188 = const _;
        _16 = &(*_188);
        _15 = <KaminoVaultError as ToString>::to_string(move _16) -> [return: bb6, unwind: bb86];
    }

    bb6: {
        StorageDead(_16);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\state.rs", line: const 154_u32 };
        _19 = anchor_lang::error::ErrorOrigin::Source(move _20);
        StorageDead(_20);
        _18 = Option::<ErrorOrigin>::Some(move _19);
        StorageDead(_19);
        StorageLive(_21);
        _21 = Option::<ComparedValues>::None;
        _9 = anchor_lang::error::AnchorError { error_name: move _10, error_code_number: move _13, error_msg: move _15, error_origin: move _18, compared_values: move _21 };
        StorageDead(_21);
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_10);
        _8 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _9) -> [return: bb7, unwind: bb87];
    }

    bb7: {
        StorageDead(_9);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _8);
        StorageDead(_8);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb77;
    }

    bb8: {
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        _2 = const ();
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &((*_1).1: anchor_lang::prelude::Pubkey);
        StorageLive(_25);
        StorageLive(_26);
        _26 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb9, unwind continue];
    }

    bb9: {
        _25 = &_26;
        _23 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _24, move _25) -> [return: bb10, unwind continue];
    }

    bb10: {
        switchInt(move _23) -> [0: bb16, otherwise: bb11];
    }

    bb11: {
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _191 = const _;
        _31 = &(*_191);
        _30 = KaminoVaultError::name(move _31) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_31);
        StorageLive(_33);
        StorageLive(_34);
        _34 = KaminoVaultError::BaseVaultAuthorityIncorrect;
        _33 = <KaminoVaultError as Into<u32>>::into(move _34) -> [return: bb13, unwind: bb85];
    }

    bb13: {
        StorageDead(_34);
        StorageLive(_35);
        StorageLive(_36);
        _190 = const _;
        _36 = &(*_190);
        _35 = <KaminoVaultError as ToString>::to_string(move _36) -> [return: bb14, unwind: bb85];
    }

    bb14: {
        StorageDead(_36);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\state.rs", line: const 158_u32 };
        _39 = anchor_lang::error::ErrorOrigin::Source(move _40);
        StorageDead(_40);
        _38 = Option::<ErrorOrigin>::Some(move _39);
        StorageDead(_39);
        StorageLive(_41);
        _41 = Option::<ComparedValues>::None;
        _29 = anchor_lang::error::AnchorError { error_name: move _30, error_code_number: move _33, error_msg: move _35, error_origin: move _38, compared_values: move _41 };
        StorageDead(_41);
        StorageDead(_38);
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_30);
        _28 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _29) -> [return: bb15, unwind: bb87];
    }

    bb15: {
        StorageDead(_29);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _28);
        StorageDead(_28);
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb77;
    }

    bb16: {
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        _22 = const ();
        StorageDead(_23);
        StorageDead(_22);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = ((*_1).2: u64);
        StorageLive(_45);
        _45 = const _ as u64 (IntToInt);
        _43 = Gt(move _44, move _45);
        switchInt(move _43) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        StorageDead(_45);
        StorageDead(_44);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _193 = const _;
        _50 = &(*_193);
        _49 = KaminoVaultError::name(move _50) -> [return: bb19, unwind continue];
    }

    bb18: {
        StorageDead(_45);
        StorageDead(_44);
        _42 = const ();
        StorageDead(_43);
        StorageDead(_42);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = &((*_1).3: anchor_lang::prelude::Pubkey);
        StorageLive(_64);
        StorageLive(_65);
        _65 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb23, unwind continue];
    }

    bb19: {
        StorageDead(_50);
        StorageLive(_52);
        StorageLive(_53);
        _53 = KaminoVaultError::BaseVaultAuthorityBumpIncorrect;
        _52 = <KaminoVaultError as Into<u32>>::into(move _53) -> [return: bb20, unwind: bb84];
    }

    bb20: {
        StorageDead(_53);
        StorageLive(_54);
        StorageLive(_55);
        _192 = const _;
        _55 = &(*_192);
        _54 = <KaminoVaultError as ToString>::to_string(move _55) -> [return: bb21, unwind: bb84];
    }

    bb21: {
        StorageDead(_55);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _59 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\state.rs", line: const 162_u32 };
        _58 = anchor_lang::error::ErrorOrigin::Source(move _59);
        StorageDead(_59);
        _57 = Option::<ErrorOrigin>::Some(move _58);
        StorageDead(_58);
        StorageLive(_60);
        _60 = Option::<ComparedValues>::None;
        _48 = anchor_lang::error::AnchorError { error_name: move _49, error_code_number: move _52, error_msg: move _54, error_origin: move _57, compared_values: move _60 };
        StorageDead(_60);
        StorageDead(_57);
        StorageDead(_54);
        StorageDead(_52);
        StorageDead(_49);
        _47 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _48) -> [return: bb22, unwind: bb87];
    }

    bb22: {
        StorageDead(_48);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _47);
        StorageDead(_47);
        StorageDead(_43);
        StorageDead(_42);
        goto -> bb77;
    }

    bb23: {
        _64 = &_65;
        _62 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _63, move _64) -> [return: bb24, unwind continue];
    }

    bb24: {
        switchInt(move _62) -> [0: bb30, otherwise: bb25];
    }

    bb25: {
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_63);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _195 = const _;
        _70 = &(*_195);
        _69 = KaminoVaultError::name(move _70) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_70);
        StorageLive(_72);
        StorageLive(_73);
        _73 = KaminoVaultError::TokenMintIncorrect;
        _72 = <KaminoVaultError as Into<u32>>::into(move _73) -> [return: bb27, unwind: bb83];
    }

    bb27: {
        StorageDead(_73);
        StorageLive(_74);
        StorageLive(_75);
        _194 = const _;
        _75 = &(*_194);
        _74 = <KaminoVaultError as ToString>::to_string(move _75) -> [return: bb28, unwind: bb83];
    }

    bb28: {
        StorageDead(_75);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\state.rs", line: const 166_u32 };
        _78 = anchor_lang::error::ErrorOrigin::Source(move _79);
        StorageDead(_79);
        _77 = Option::<ErrorOrigin>::Some(move _78);
        StorageDead(_78);
        StorageLive(_80);
        _80 = Option::<ComparedValues>::None;
        _68 = anchor_lang::error::AnchorError { error_name: move _69, error_code_number: move _72, error_msg: move _74, error_origin: move _77, compared_values: move _80 };
        StorageDead(_80);
        StorageDead(_77);
        StorageDead(_74);
        StorageDead(_72);
        StorageDead(_69);
        _67 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _68) -> [return: bb29, unwind: bb87];
    }

    bb29: {
        StorageDead(_68);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _67);
        StorageDead(_67);
        StorageDead(_62);
        StorageDead(_61);
        goto -> bb77;
    }

    bb30: {
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_63);
        _61 = const ();
        StorageDead(_62);
        StorageDead(_61);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _83 = ((*_1).4: u64);
        _82 = Eq(move _83, const 0_u64);
        switchInt(move _82) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        StorageDead(_83);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _197 = const _;
        _88 = &(*_197);
        _87 = KaminoVaultError::name(move _88) -> [return: bb33, unwind continue];
    }

    bb32: {
        StorageDead(_83);
        _81 = const ();
        StorageDead(_82);
        StorageDead(_81);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _101 = &((*_1).5: anchor_lang::prelude::Pubkey);
        StorageLive(_102);
        StorageLive(_103);
        _103 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb37, unwind continue];
    }

    bb33: {
        StorageDead(_88);
        StorageLive(_90);
        StorageLive(_91);
        _91 = KaminoVaultError::TokenMintDecimalsIncorrect;
        _90 = <KaminoVaultError as Into<u32>>::into(move _91) -> [return: bb34, unwind: bb82];
    }

    bb34: {
        StorageDead(_91);
        StorageLive(_92);
        StorageLive(_93);
        _196 = const _;
        _93 = &(*_196);
        _92 = <KaminoVaultError as ToString>::to_string(move _93) -> [return: bb35, unwind: bb82];
    }

    bb35: {
        StorageDead(_93);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\state.rs", line: const 170_u32 };
        _96 = anchor_lang::error::ErrorOrigin::Source(move _97);
        StorageDead(_97);
        _95 = Option::<ErrorOrigin>::Some(move _96);
        StorageDead(_96);
        StorageLive(_98);
        _98 = Option::<ComparedValues>::None;
        _86 = anchor_lang::error::AnchorError { error_name: move _87, error_code_number: move _90, error_msg: move _92, error_origin: move _95, compared_values: move _98 };
        StorageDead(_98);
        StorageDead(_95);
        StorageDead(_92);
        StorageDead(_90);
        StorageDead(_87);
        _85 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _86) -> [return: bb36, unwind: bb87];
    }

    bb36: {
        StorageDead(_86);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _85);
        StorageDead(_85);
        StorageDead(_82);
        StorageDead(_81);
        goto -> bb77;
    }

    bb37: {
        _102 = &_103;
        _100 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _101, move _102) -> [return: bb38, unwind continue];
    }

    bb38: {
        switchInt(move _100) -> [0: bb44, otherwise: bb39];
    }

    bb39: {
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_101);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        _199 = const _;
        _108 = &(*_199);
        _107 = KaminoVaultError::name(move _108) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_108);
        StorageLive(_110);
        StorageLive(_111);
        _111 = KaminoVaultError::TokenVaultIncorrect;
        _110 = <KaminoVaultError as Into<u32>>::into(move _111) -> [return: bb41, unwind: bb81];
    }

    bb41: {
        StorageDead(_111);
        StorageLive(_112);
        StorageLive(_113);
        _198 = const _;
        _113 = &(*_198);
        _112 = <KaminoVaultError as ToString>::to_string(move _113) -> [return: bb42, unwind: bb81];
    }

    bb42: {
        StorageDead(_113);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _117 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\state.rs", line: const 174_u32 };
        _116 = anchor_lang::error::ErrorOrigin::Source(move _117);
        StorageDead(_117);
        _115 = Option::<ErrorOrigin>::Some(move _116);
        StorageDead(_116);
        StorageLive(_118);
        _118 = Option::<ComparedValues>::None;
        _106 = anchor_lang::error::AnchorError { error_name: move _107, error_code_number: move _110, error_msg: move _112, error_origin: move _115, compared_values: move _118 };
        StorageDead(_118);
        StorageDead(_115);
        StorageDead(_112);
        StorageDead(_110);
        StorageDead(_107);
        _105 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _106) -> [return: bb43, unwind: bb87];
    }

    bb43: {
        StorageDead(_106);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _105);
        StorageDead(_105);
        StorageDead(_100);
        StorageDead(_99);
        goto -> bb77;
    }

    bb44: {
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_101);
        _99 = const ();
        StorageDead(_100);
        StorageDead(_99);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        _121 = &((*_1).7: anchor_lang::prelude::Pubkey);
        StorageLive(_122);
        StorageLive(_123);
        _123 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb45, unwind continue];
    }

    bb45: {
        _122 = &_123;
        _120 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _121, move _122) -> [return: bb46, unwind continue];
    }

    bb46: {
        switchInt(move _120) -> [0: bb52, otherwise: bb47];
    }

    bb47: {
        StorageDead(_123);
        StorageDead(_122);
        StorageDead(_121);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        _201 = const _;
        _128 = &(*_201);
        _127 = KaminoVaultError::name(move _128) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_128);
        StorageLive(_130);
        StorageLive(_131);
        _131 = KaminoVaultError::SharesMintIncorrect;
        _130 = <KaminoVaultError as Into<u32>>::into(move _131) -> [return: bb49, unwind: bb80];
    }

    bb49: {
        StorageDead(_131);
        StorageLive(_132);
        StorageLive(_133);
        _200 = const _;
        _133 = &(*_200);
        _132 = <KaminoVaultError as ToString>::to_string(move _133) -> [return: bb50, unwind: bb80];
    }

    bb50: {
        StorageDead(_133);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        _137 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\state.rs", line: const 178_u32 };
        _136 = anchor_lang::error::ErrorOrigin::Source(move _137);
        StorageDead(_137);
        _135 = Option::<ErrorOrigin>::Some(move _136);
        StorageDead(_136);
        StorageLive(_138);
        _138 = Option::<ComparedValues>::None;
        _126 = anchor_lang::error::AnchorError { error_name: move _127, error_code_number: move _130, error_msg: move _132, error_origin: move _135, compared_values: move _138 };
        StorageDead(_138);
        StorageDead(_135);
        StorageDead(_132);
        StorageDead(_130);
        StorageDead(_127);
        _125 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _126) -> [return: bb51, unwind: bb87];
    }

    bb51: {
        StorageDead(_126);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _125);
        StorageDead(_125);
        StorageDead(_120);
        StorageDead(_119);
        goto -> bb77;
    }

    bb52: {
        StorageDead(_123);
        StorageDead(_122);
        StorageDead(_121);
        _119 = const ();
        StorageDead(_120);
        StorageDead(_119);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        _141 = ((*_1).8: u64);
        _140 = Eq(move _141, const 0_u64);
        switchInt(move _140) -> [0: bb54, otherwise: bb53];
    }

    bb53: {
        StorageDead(_141);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        _203 = const _;
        _146 = &(*_203);
        _145 = KaminoVaultError::name(move _146) -> [return: bb55, unwind continue];
    }

    bb54: {
        StorageDead(_141);
        _139 = const ();
        StorageDead(_140);
        StorageDead(_139);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        _159 = ((*_1).9: u64);
        _158 = Ne(move _159, const 0_u64);
        switchInt(move _158) -> [0: bb60, otherwise: bb59];
    }

    bb55: {
        StorageDead(_146);
        StorageLive(_148);
        StorageLive(_149);
        _149 = KaminoVaultError::SharesMintDecimalsIncorrect;
        _148 = <KaminoVaultError as Into<u32>>::into(move _149) -> [return: bb56, unwind: bb79];
    }

    bb56: {
        StorageDead(_149);
        StorageLive(_150);
        StorageLive(_151);
        _202 = const _;
        _151 = &(*_202);
        _150 = <KaminoVaultError as ToString>::to_string(move _151) -> [return: bb57, unwind: bb79];
    }

    bb57: {
        StorageDead(_151);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        _155 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\state.rs", line: const 182_u32 };
        _154 = anchor_lang::error::ErrorOrigin::Source(move _155);
        StorageDead(_155);
        _153 = Option::<ErrorOrigin>::Some(move _154);
        StorageDead(_154);
        StorageLive(_156);
        _156 = Option::<ComparedValues>::None;
        _144 = anchor_lang::error::AnchorError { error_name: move _145, error_code_number: move _148, error_msg: move _150, error_origin: move _153, compared_values: move _156 };
        StorageDead(_156);
        StorageDead(_153);
        StorageDead(_150);
        StorageDead(_148);
        StorageDead(_145);
        _143 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _144) -> [return: bb58, unwind: bb87];
    }

    bb58: {
        StorageDead(_144);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _143);
        StorageDead(_143);
        StorageDead(_140);
        StorageDead(_139);
        goto -> bb77;
    }

    bb59: {
        StorageDead(_159);
        goto -> bb61;
    }

    bb60: {
        StorageDead(_159);
        StorageLive(_160);
        StorageLive(_161);
        _161 = ((*_1).10: u64);
        _160 = Ne(move _161, const 0_u64);
        switchInt(move _160) -> [0: bb62, otherwise: bb61];
    }

    bb61: {
        StorageDead(_161);
        goto -> bb63;
    }

    bb62: {
        StorageDead(_161);
        StorageLive(_162);
        StorageLive(_163);
        _163 = ((*_1).13: u64);
        _162 = Ne(move _163, const 0_u64);
        switchInt(move _162) -> [0: bb64, otherwise: bb63];
    }

    bb63: {
        StorageDead(_163);
        goto -> bb65;
    }

    bb64: {
        StorageDead(_163);
        StorageLive(_164);
        StorageLive(_165);
        _165 = ((*_1).14: u64);
        _164 = Ne(move _165, const 0_u64);
        switchInt(move _164) -> [0: bb66, otherwise: bb65];
    }

    bb65: {
        StorageDead(_165);
        goto -> bb67;
    }

    bb66: {
        StorageDead(_165);
        StorageLive(_166);
        StorageLive(_167);
        _167 = ((*_1).17: u128);
        _166 = Ne(move _167, const 0_u128);
        switchInt(move _166) -> [0: bb68, otherwise: bb67];
    }

    bb67: {
        StorageDead(_167);
        goto -> bb69;
    }

    bb68: {
        StorageDead(_167);
        StorageLive(_168);
        StorageLive(_169);
        _169 = ((*_1).15: u64);
        _168 = Ne(move _169, const 0_u64);
        switchInt(move _168) -> [0: bb70, otherwise: bb69];
    }

    bb69: {
        StorageDead(_169);
        goto -> bb71;
    }

    bb70: {
        StorageDead(_169);
        StorageLive(_170);
        StorageLive(_171);
        _171 = ((*_1).16: u128);
        _170 = Ne(move _171, const 0_u128);
        switchInt(move _170) -> [0: bb72, otherwise: bb71];
    }

    bb71: {
        StorageDead(_171);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        _205 = const _;
        _176 = &(*_205);
        _175 = KaminoVaultError::name(move _176) -> [return: bb73, unwind continue];
    }

    bb72: {
        StorageDead(_171);
        _157 = const ();
        StorageDead(_170);
        StorageDead(_168);
        StorageDead(_166);
        StorageDead(_164);
        StorageDead(_162);
        StorageDead(_160);
        StorageDead(_158);
        StorageDead(_157);
        StorageLive(_187);
        _187 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _187);
        StorageDead(_187);
        goto -> bb77;
    }

    bb73: {
        StorageDead(_176);
        StorageLive(_178);
        StorageLive(_179);
        _179 = KaminoVaultError::InitialAccountingIncorrect;
        _178 = <KaminoVaultError as Into<u32>>::into(move _179) -> [return: bb74, unwind: bb78];
    }

    bb74: {
        StorageDead(_179);
        StorageLive(_180);
        StorageLive(_181);
        _204 = const _;
        _181 = &(*_204);
        _180 = <KaminoVaultError as ToString>::to_string(move _181) -> [return: bb75, unwind: bb78];
    }

    bb75: {
        StorageDead(_181);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        _185 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\state.rs", line: const 193_u32 };
        _184 = anchor_lang::error::ErrorOrigin::Source(move _185);
        StorageDead(_185);
        _183 = Option::<ErrorOrigin>::Some(move _184);
        StorageDead(_184);
        StorageLive(_186);
        _186 = Option::<ComparedValues>::None;
        _174 = anchor_lang::error::AnchorError { error_name: move _175, error_code_number: move _178, error_msg: move _180, error_origin: move _183, compared_values: move _186 };
        StorageDead(_186);
        StorageDead(_183);
        StorageDead(_180);
        StorageDead(_178);
        StorageDead(_175);
        _173 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _174) -> [return: bb76, unwind: bb87];
    }

    bb76: {
        StorageDead(_174);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _173);
        StorageDead(_173);
        StorageDead(_170);
        StorageDead(_168);
        StorageDead(_166);
        StorageDead(_164);
        StorageDead(_162);
        StorageDead(_160);
        StorageDead(_158);
        StorageDead(_157);
        goto -> bb77;
    }

    bb77: {
        return;
    }

    bb78 (cleanup): {
        drop(_175) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        drop(_145) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        drop(_127) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        drop(_107) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        drop(_87) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        drop(_69) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        drop(_49) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        drop(_30) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        drop(_10) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        resume;
    }
}
