// MIR for `give_up_pending_fee` after PreCodegen

fn give_up_pending_fee(_1: &mut state::VaultState, _2: impl Iterator<Item = T>, _3: u64, _4: u64, _5: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug vault => _1;
    debug reserves_iter => _2;
    debug current_slot => _3;
    debug current_timestamp => _4;
    debug max_amount_to_give_up => _5;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _6: operations::vault_operations::common::Holdings;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, operations::vault_operations::common::Holdings>;
    let mut _8: std::result::Result<operations::vault_operations::common::Holdings, anchor_lang::error::Error>;
    let mut _9: &state::VaultState;
    let mut _10: impl Iterator<Item = T>;
    let mut _11: u64;
    let mut _12: isize;
    let _13: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _14: !;
    let mut _15: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _16: operations::vault_operations::common::Holdings;
    let _17: ();
    let mut _18: &str;
    let _19: &str;
    let mut _20: &std::string::String;
    let _21: &std::string::String;
    let _22: std::string::String;
    let mut _24: std::fmt::Arguments<'_>;
    let mut _25: &[&str];
    let mut _26: &[&str; 1];
    let _27: &[&str; 1];
    let _28: [&str; 1];
    let mut _29: &[core::fmt::rt::Argument<'_>];
    let mut _30: &[core::fmt::rt::Argument<'_>; 1];
    let _31: &[core::fmt::rt::Argument<'_>; 1];
    let _32: [core::fmt::rt::Argument<'_>; 1];
    let mut _33: core::fmt::rt::Argument<'_>;
    let mut _34: &operations::vault_operations::common::Holdings;
    let _35: &operations::vault_operations::common::Holdings;
    let _37: ();
    let mut _38: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _39: std::result::Result<(), anchor_lang::error::Error>;
    let mut _40: &mut state::VaultState;
    let mut _41: &operations::vault_operations::common::Invested;
    let mut _42: u64;
    let mut _43: isize;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _49: u64;
    let mut _51: &state::VaultState;
    let mut _53: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _54: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _55: ();
    let mut _56: &str;
    let _57: &str;
    let mut _58: &std::string::String;
    let _59: &std::string::String;
    let _60: std::string::String;
    let mut _62: std::fmt::Arguments<'_>;
    let mut _63: &[&str];
    let mut _64: &[&str; 3];
    let _65: &[&str; 3];
    let _66: [&str; 3];
    let mut _67: &[core::fmt::rt::Argument<'_>];
    let mut _68: &[core::fmt::rt::Argument<'_>; 2];
    let _69: &[core::fmt::rt::Argument<'_>; 2];
    let _70: [core::fmt::rt::Argument<'_>; 2];
    let mut _71: core::fmt::rt::Argument<'_>;
    let mut _72: &kamino_lending::utils::FractionDisplay<'_>;
    let _73: &kamino_lending::utils::FractionDisplay<'_>;
    let _74: kamino_lending::utils::FractionDisplay<'_>;
    let mut _75: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _76: core::fmt::rt::Argument<'_>;
    let mut _77: &kamino_lending::utils::FractionDisplay<'_>;
    let _78: &kamino_lending::utils::FractionDisplay<'_>;
    let _79: kamino_lending::utils::FractionDisplay<'_>;
    let mut _80: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _82: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _83: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _84: ();
    let mut _85: &mut state::VaultState;
    let mut _86: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _87: u64;
    let mut _89: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _90: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _91: ();
    let mut _92: &str;
    let _93: &str;
    let mut _94: &std::string::String;
    let _95: &std::string::String;
    let _96: std::string::String;
    let mut _98: std::fmt::Arguments<'_>;
    let mut _99: &[&str];
    let mut _100: &[&str; 1];
    let _101: &[&str; 1];
    let _102: [&str; 1];
    let mut _103: &[core::fmt::rt::Argument<'_>];
    let mut _104: &[core::fmt::rt::Argument<'_>; 1];
    let _105: &[core::fmt::rt::Argument<'_>; 1];
    let _106: [core::fmt::rt::Argument<'_>; 1];
    let mut _107: core::fmt::rt::Argument<'_>;
    let mut _108: &kamino_lending::utils::FractionDisplay<'_>;
    let _109: &kamino_lending::utils::FractionDisplay<'_>;
    let _110: kamino_lending::utils::FractionDisplay<'_>;
    let mut _111: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _112: ();
    let mut _113: &str;
    let _114: &str;
    let mut _115: &std::string::String;
    let _116: &std::string::String;
    let _117: std::string::String;
    let mut _119: std::fmt::Arguments<'_>;
    let mut _120: &[&str];
    let mut _121: &[&str; 1];
    let _122: &[&str; 1];
    let _123: [&str; 1];
    let mut _124: &[core::fmt::rt::Argument<'_>];
    let mut _125: &[core::fmt::rt::Argument<'_>; 1];
    let _126: &[core::fmt::rt::Argument<'_>; 1];
    let _127: [core::fmt::rt::Argument<'_>; 1];
    let mut _128: core::fmt::rt::Argument<'_>;
    let mut _129: &kamino_lending::utils::FractionDisplay<'_>;
    let _130: &kamino_lending::utils::FractionDisplay<'_>;
    let _131: kamino_lending::utils::FractionDisplay<'_>;
    let mut _132: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _133: ();
    let mut _134: &str;
    let _135: &str;
    let mut _136: &std::string::String;
    let _137: &std::string::String;
    let _138: std::string::String;
    let mut _140: std::fmt::Arguments<'_>;
    let mut _141: &[&str];
    let mut _142: &[&str; 1];
    let _143: &[&str; 1];
    let _144: [&str; 1];
    let mut _145: &[core::fmt::rt::Argument<'_>];
    let mut _146: &[core::fmt::rt::Argument<'_>; 1];
    let _147: &[core::fmt::rt::Argument<'_>; 1];
    let _148: [core::fmt::rt::Argument<'_>; 1];
    let mut _149: core::fmt::rt::Argument<'_>;
    let mut _150: &kamino_lending::utils::FractionDisplay<'_>;
    let _151: &kamino_lending::utils::FractionDisplay<'_>;
    let _152: kamino_lending::utils::FractionDisplay<'_>;
    let mut _153: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _154: ();
    let mut _155: &mut state::VaultState;
    let mut _156: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _157: ();
    let mut _163: isize;
    let mut _164: isize;
    let mut _165: isize;
    let mut _166: isize;
    let mut _167: isize;
    let mut _168: isize;
    let mut _169: isize;
    let mut _170: isize;
    let mut _171: isize;
    let mut _172: isize;
    scope 1 {
        debug holdings => _6;
        let _23: std::string::String;
        let _36: &operations::vault_operations::common::Invested;
        let mut _162: &[&str; 1];
        scope 6 {
            debug res => _23;
        }
        scope 7 {
            debug invested => _36;
            let _44: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _47: ();
            let _48: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
            scope 8 {
                debug residual => _44;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _47;
                scope 11 {
                }
            }
            scope 12 {
                debug amount => _48;
                let _50: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                scope 13 {
                    debug pending_fees => _50;
                    let _52: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                    scope 14 {
                        debug amount_to_give_up => _52;
                        let _61: std::string::String;
                        let _81: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                        let mut _161: &[&str; 3];
                        scope 15 {
                            debug res => _61;
                        }
                        scope 16 {
                            debug new_pending_fees => _81;
                            let _88: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                            scope 17 {
                                debug prev_aum => _88;
                                let _97: std::string::String;
                                let _118: std::string::String;
                                let _139: std::string::String;
                                let mut _158: &[&str; 1];
                                let mut _159: &[&str; 1];
                                let mut _160: &[&str; 1];
                                scope 18 {
                                    debug res => _97;
                                }
                                scope 19 {
                                    debug res => _118;
                                }
                                scope 20 {
                                    debug res => _139;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    scope 2 {
        debug residual => _13;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _16;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &(*_1);
        StorageLive(_10);
        _10 = move _2;
        StorageLive(_11);
        _11 = _3;
        _8 = holdings::<'_, T, impl Iterator<Item = T>>(move _9, move _10, move _11) -> [return: bb1, unwind: bb64];
    }

    bb1: {
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        _7 = <std::result::Result<Holdings, anchor_lang::error::Error> as Try>::branch(move _8) -> [return: bb2, unwind: bb64];
    }

    bb2: {
        StorageDead(_8);
        _12 = discriminant(_7);
        switchInt(move _12) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_16);
        _16 = move ((_7 as Continue).0: operations::vault_operations::common::Holdings);
        _6 = move _16;
        StorageDead(_16);
        _163 = discriminant(_7);
        StorageDead(_7);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _162 = const _;
        _27 = &(*_162);
        _26 = &(*_27);
        _25 = move _26 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_26);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = &_6;
        _34 = &(*_35);
        _33 = core::fmt::rt::Argument::<'_>::new_debug::<Holdings>(move _34) -> [return: bb7, unwind: bb63];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_13);
        _13 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_15);
        _15 = move _13;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _15) -> [return: bb6, unwind: bb66];
    }

    bb6: {
        StorageDead(_15);
        StorageDead(_13);
        _169 = discriminant(_7);
        StorageDead(_7);
        goto -> bb56;
    }

    bb7: {
        StorageDead(_34);
        _32 = [move _33];
        StorageDead(_33);
        _31 = &_32;
        _30 = &(*_31);
        _29 = move _30 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_30);
        _24 = Arguments::<'_>::new_v1(move _25, move _29) -> [return: bb8, unwind: bb63];
    }

    bb8: {
        StorageDead(_29);
        StorageDead(_25);
        _23 = format(move _24) -> [return: bb9, unwind: bb63];
    }

    bb9: {
        StorageDead(_24);
        StorageDead(_35);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_27);
        _22 = move _23;
        StorageDead(_23);
        _21 = &_22;
        _20 = &(*_21);
        _19 = <String as Deref>::deref(move _20) -> [return: bb10, unwind: bb62];
    }

    bb10: {
        _18 = &(*_19);
        StorageDead(_20);
        _17 = solana_program::log::sol_log(move _18) -> [return: bb11, unwind: bb62];
    }

    bb11: {
        StorageDead(_18);
        drop(_22) -> [return: bb12, unwind: bb63];
    }

    bb12: {
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_17);
        StorageLive(_36);
        _36 = &(_6.1: operations::vault_operations::common::Invested);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &mut (*_1);
        StorageLive(_41);
        _41 = &(*_36);
        StorageLive(_42);
        _42 = _4;
        _39 = charge_fees(move _40, move _41, move _42) -> [return: bb13, unwind: bb63];
    }

    bb13: {
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        _38 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _39) -> [return: bb14, unwind: bb63];
    }

    bb14: {
        StorageDead(_39);
        _43 = discriminant(_38);
        switchInt(move _43) -> [0: bb15, 1: bb16, otherwise: bb4];
    }

    bb15: {
        StorageLive(_47);
        _47 = ((_38 as Continue).0: ());
        _37 = _47;
        StorageDead(_47);
        _165 = discriminant(_38);
        StorageDead(_38);
        StorageDead(_37);
        StorageLive(_48);
        StorageLive(_49);
        _49 = _5;
        _48 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as From<u64>>::from(move _49) -> [return: bb18, unwind: bb63];
    }

    bb16: {
        StorageLive(_44);
        _44 = move ((_38 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_46);
        _46 = move _44;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _46) -> [return: bb17, unwind: bb65];
    }

    bb17: {
        StorageDead(_46);
        StorageDead(_44);
        _167 = discriminant(_38);
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_36);
        drop(_6) -> [return: bb56, unwind: bb64];
    }

    bb18: {
        StorageDead(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = &(*_1);
        _50 = state::VaultState::get_pending_fees(move _51) -> [return: bb19, unwind: bb63];
    }

    bb19: {
        StorageDead(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = _48;
        StorageLive(_54);
        _54 = _50;
        _52 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as Ord>::min(move _53, move _54) -> [return: bb20, unwind: bb63];
    }

    bb20: {
        StorageDead(_54);
        StorageDead(_53);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _161 = const _;
        _65 = &(*_161);
        _64 = &(*_65);
        _63 = move _64 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_64);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = &_52;
        _74 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as kamino_lending::utils::FractionExtra>::to_display(move _75) -> [return: bb21, unwind: bb63];
    }

    bb21: {
        StorageDead(_75);
        _73 = &_74;
        _72 = &(*_73);
        _71 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _72) -> [return: bb22, unwind: bb63];
    }

    bb22: {
        StorageDead(_72);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _80 = &_50;
        _79 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as kamino_lending::utils::FractionExtra>::to_display(move _80) -> [return: bb23, unwind: bb63];
    }

    bb23: {
        StorageDead(_80);
        _78 = &_79;
        _77 = &(*_78);
        _76 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _77) -> [return: bb24, unwind: bb63];
    }

    bb24: {
        StorageDead(_77);
        _70 = [move _71, move _76];
        StorageDead(_76);
        StorageDead(_71);
        _69 = &_70;
        _68 = &(*_69);
        _67 = move _68 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_68);
        _62 = Arguments::<'_>::new_v1(move _63, move _67) -> [return: bb25, unwind: bb63];
    }

    bb25: {
        StorageDead(_67);
        StorageDead(_63);
        _61 = format(move _62) -> [return: bb26, unwind: bb63];
    }

    bb26: {
        StorageDead(_62);
        StorageDead(_79);
        StorageDead(_78);
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_70);
        StorageDead(_69);
        StorageDead(_65);
        _60 = move _61;
        StorageDead(_61);
        _59 = &_60;
        _58 = &(*_59);
        _57 = <String as Deref>::deref(move _58) -> [return: bb27, unwind: bb61];
    }

    bb27: {
        _56 = &(*_57);
        StorageDead(_58);
        _55 = solana_program::log::sol_log(move _56) -> [return: bb28, unwind: bb61];
    }

    bb28: {
        StorageDead(_56);
        drop(_60) -> [return: bb29, unwind: bb63];
    }

    bb29: {
        StorageDead(_60);
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_55);
        StorageLive(_81);
        StorageLive(_82);
        _82 = _50;
        StorageLive(_83);
        _83 = _52;
        _81 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as Sub>::sub(move _82, move _83) -> [return: bb30, unwind: bb63];
    }

    bb30: {
        StorageDead(_83);
        StorageDead(_82);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &mut (*_1);
        StorageLive(_86);
        _86 = _81;
        _84 = update_pending_fees(move _85, move _86) -> [return: bb31, unwind: bb63];
    }

    bb31: {
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_84);
        StorageLive(_87);
        _87 = _4;
        ((*_1).15: u64) = move _87;
        StorageDead(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = (_6.2: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>);
        StorageLive(_90);
        _90 = _81;
        _88 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::saturating_sub(move _89, move _90) -> [return: bb32, unwind: bb63];
    }

    bb32: {
        StorageDead(_90);
        StorageDead(_89);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _160 = const _;
        _101 = &(*_160);
        _100 = &(*_101);
        _99 = move _100 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_100);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        _111 = &(_6.2: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>);
        _110 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as kamino_lending::utils::FractionExtra>::to_display(move _111) -> [return: bb33, unwind: bb63];
    }

    bb33: {
        StorageDead(_111);
        _109 = &_110;
        _108 = &(*_109);
        _107 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _108) -> [return: bb34, unwind: bb63];
    }

    bb34: {
        StorageDead(_108);
        _106 = [move _107];
        StorageDead(_107);
        _105 = &_106;
        _104 = &(*_105);
        _103 = move _104 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_104);
        _98 = Arguments::<'_>::new_v1(move _99, move _103) -> [return: bb35, unwind: bb63];
    }

    bb35: {
        StorageDead(_103);
        StorageDead(_99);
        _97 = format(move _98) -> [return: bb36, unwind: bb63];
    }

    bb36: {
        StorageDead(_98);
        StorageDead(_110);
        StorageDead(_109);
        StorageDead(_106);
        StorageDead(_105);
        StorageDead(_101);
        _96 = move _97;
        StorageDead(_97);
        _95 = &_96;
        _94 = &(*_95);
        _93 = <String as Deref>::deref(move _94) -> [return: bb37, unwind: bb60];
    }

    bb37: {
        _92 = &(*_93);
        StorageDead(_94);
        _91 = solana_program::log::sol_log(move _92) -> [return: bb38, unwind: bb60];
    }

    bb38: {
        StorageDead(_92);
        drop(_96) -> [return: bb39, unwind: bb63];
    }

    bb39: {
        StorageDead(_96);
        StorageDead(_95);
        StorageDead(_93);
        StorageDead(_91);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        _159 = const _;
        _122 = &(*_159);
        _121 = &(*_122);
        _120 = move _121 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_121);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        _132 = &_81;
        _131 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as kamino_lending::utils::FractionExtra>::to_display(move _132) -> [return: bb40, unwind: bb63];
    }

    bb40: {
        StorageDead(_132);
        _130 = &_131;
        _129 = &(*_130);
        _128 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _129) -> [return: bb41, unwind: bb63];
    }

    bb41: {
        StorageDead(_129);
        _127 = [move _128];
        StorageDead(_128);
        _126 = &_127;
        _125 = &(*_126);
        _124 = move _125 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_125);
        _119 = Arguments::<'_>::new_v1(move _120, move _124) -> [return: bb42, unwind: bb63];
    }

    bb42: {
        StorageDead(_124);
        StorageDead(_120);
        _118 = format(move _119) -> [return: bb43, unwind: bb63];
    }

    bb43: {
        StorageDead(_119);
        StorageDead(_131);
        StorageDead(_130);
        StorageDead(_127);
        StorageDead(_126);
        StorageDead(_122);
        _117 = move _118;
        StorageDead(_118);
        _116 = &_117;
        _115 = &(*_116);
        _114 = <String as Deref>::deref(move _115) -> [return: bb44, unwind: bb59];
    }

    bb44: {
        _113 = &(*_114);
        StorageDead(_115);
        _112 = solana_program::log::sol_log(move _113) -> [return: bb45, unwind: bb59];
    }

    bb45: {
        StorageDead(_113);
        drop(_117) -> [return: bb46, unwind: bb63];
    }

    bb46: {
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_114);
        StorageDead(_112);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        _158 = const _;
        _143 = &(*_158);
        _142 = &(*_143);
        _141 = move _142 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_142);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        _153 = &_88;
        _152 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as kamino_lending::utils::FractionExtra>::to_display(move _153) -> [return: bb47, unwind: bb63];
    }

    bb47: {
        StorageDead(_153);
        _151 = &_152;
        _150 = &(*_151);
        _149 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _150) -> [return: bb48, unwind: bb63];
    }

    bb48: {
        StorageDead(_150);
        _148 = [move _149];
        StorageDead(_149);
        _147 = &_148;
        _146 = &(*_147);
        _145 = move _146 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_146);
        _140 = Arguments::<'_>::new_v1(move _141, move _145) -> [return: bb49, unwind: bb63];
    }

    bb49: {
        StorageDead(_145);
        StorageDead(_141);
        _139 = format(move _140) -> [return: bb50, unwind: bb63];
    }

    bb50: {
        StorageDead(_140);
        StorageDead(_152);
        StorageDead(_151);
        StorageDead(_148);
        StorageDead(_147);
        StorageDead(_143);
        _138 = move _139;
        StorageDead(_139);
        _137 = &_138;
        _136 = &(*_137);
        _135 = <String as Deref>::deref(move _136) -> [return: bb51, unwind: bb58];
    }

    bb51: {
        _134 = &(*_135);
        StorageDead(_136);
        _133 = solana_program::log::sol_log(move _134) -> [return: bb52, unwind: bb58];
    }

    bb52: {
        StorageDead(_134);
        drop(_138) -> [return: bb53, unwind: bb63];
    }

    bb53: {
        StorageDead(_138);
        StorageDead(_137);
        StorageDead(_135);
        StorageDead(_133);
        StorageLive(_154);
        StorageLive(_155);
        _155 = &mut (*_1);
        StorageLive(_156);
        _156 = _88;
        _154 = update_prev_aum(move _155, move _156) -> [return: bb54, unwind: bb63];
    }

    bb54: {
        StorageDead(_156);
        StorageDead(_155);
        StorageDead(_154);
        StorageLive(_157);
        _157 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _157);
        StorageDead(_157);
        StorageDead(_88);
        StorageDead(_81);
        StorageDead(_52);
        StorageDead(_50);
        StorageDead(_48);
        StorageDead(_36);
        drop(_6) -> [return: bb55, unwind: bb64];
    }

    bb55: {
        StorageDead(_6);
        goto -> bb57;
    }

    bb56: {
        StorageDead(_6);
        goto -> bb57;
    }

    bb57: {
        return;
    }

    bb58 (cleanup): {
        drop(_138) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_117) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_96) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_60) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_22) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        drop(_6) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        resume;
    }

    bb65 (cleanup): {
        _171 = discriminant(_38);
        goto -> bb63;
    }

    bb66 (cleanup): {
        _172 = discriminant(_7);
        goto -> bb64;
    }
}
