// MIR for `holdings` before PreCodegen

fn holdings(_1: &state::VaultState, _2: impl Iterator<Item = T>, _3: u64) -> std::result::Result<Holdings, anchor_lang::error::Error> {
    debug vault => _1;
    debug reserves_iter => _2;
    debug slot => _3;
    let mut _0: std::result::Result<operations::vault_operations::common::Holdings, anchor_lang::error::Error>;
    let _4: u64;
    let _5: operations::vault_operations::common::Invested;
    let mut _6: (u64, operations::vault_operations::common::Invested);
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, (u64, operations::vault_operations::common::Invested)>;
    let mut _8: std::result::Result<(u64, operations::vault_operations::common::Invested), anchor_lang::error::Error>;
    let mut _9: &state::VaultState;
    let mut _10: impl Iterator<Item = T>;
    let mut _11: u64;
    let mut _12: isize;
    let _13: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _14: !;
    let mut _15: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _16: (u64, operations::vault_operations::common::Invested);
    let mut _18: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _19: u64;
    let mut _20: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _21: operations::vault_operations::common::Holdings;
    let mut _22: u64;
    let mut _23: operations::vault_operations::common::Invested;
    let mut _24: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _25: isize;
    let mut _26: isize;
    let mut _27: isize;
    let mut _28: isize;
    let mut _29: isize;
    let mut _30: isize;
    scope 1 {
        debug available => _4;
        debug invested => _5;
        let _17: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
        scope 6 {
            debug total_sum => _17;
        }
    }
    scope 2 {
        debug residual => _13;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _16;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &(*_1);
        StorageLive(_10);
        _10 = move _2;
        StorageLive(_11);
        _11 = _3;
        _8 = underlying_inventory::<'_, T, impl Iterator<Item = T>>(move _9, move _10, move _11) -> [return: bb1, unwind: bb11];
    }

    bb1: {
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        _7 = <std::result::Result<(u64, Invested), anchor_lang::error::Error> as Try>::branch(move _8) -> [return: bb2, unwind: bb11];
    }

    bb2: {
        StorageDead(_8);
        _12 = discriminant(_7);
        switchInt(move _12) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_16);
        _16 = move ((_7 as Continue).0: (u64, operations::vault_operations::common::Invested));
        _6 = move _16;
        StorageDead(_16);
        StorageLive(_4);
        _4 = (_6.0: u64);
        StorageLive(_5);
        _5 = move (_6.1: operations::vault_operations::common::Invested);
        _25 = discriminant(_7);
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = _4;
        _18 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as From<u64>>::from(move _19) -> [return: bb7, unwind: bb10];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_13);
        _13 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_15);
        _15 = move _13;
        _0 = <std::result::Result<Holdings, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _15) -> [return: bb6, unwind: bb12];
    }

    bb6: {
        StorageDead(_15);
        StorageDead(_13);
        _27 = discriminant(_7);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb9;
    }

    bb7: {
        StorageDead(_19);
        StorageLive(_20);
        _20 = (_5.1: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>);
        _17 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as Add>::add(move _18, move _20) -> [return: bb8, unwind: bb10];
    }

    bb8: {
        StorageDead(_20);
        StorageDead(_18);
        StorageLive(_21);
        StorageLive(_22);
        _22 = _4;
        StorageLive(_23);
        _23 = move _5;
        StorageLive(_24);
        _24 = _17;
        _21 = Holdings { available: move _22, invested: move _23, total_sum: move _24 };
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        _0 = std::result::Result::<Holdings, anchor_lang::error::Error>::Ok(move _21);
        StorageDead(_21);
        StorageDead(_17);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb9;
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_5) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }

    bb12 (cleanup): {
        _30 = discriminant(_7);
        goto -> bb11;
    }
}
