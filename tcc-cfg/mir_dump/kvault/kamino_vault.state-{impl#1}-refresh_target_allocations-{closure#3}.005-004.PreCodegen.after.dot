digraph Mir_0_510 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn state::VaultState::refresh_target_allocations::{closure#3}(_1: &amp;ReErased mut Closure(DefId(0:510 ~ kamino_vault[b3c4]::state::{impl#1}::refresh_target_allocations::{closure#3}), [i16, Binder(extern &quot;RustCall&quot; fn((&amp;ReBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon }) (&amp;ReErased mut state::VaultAllocation, &amp;ReErased fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;),)) -&gt; bool, [Region(BrAnon)]), ()]), _2: &amp;ReErased (&amp;ReErased mut state::VaultAllocation, &amp;ReErased fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;)) -&gt; bool<br align="left"/>let _3: &amp;ReErased &amp;ReErased mut state::VaultAllocation;<br align="left"/>let mut _4: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _5: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _6: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _7: &amp;ReErased mut state::VaultAllocation;<br align="left"/>debug allocation =&gt; _3;<br align="left"/>>;
    bb0__0_510 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>_3 = &amp;((*_2).0: &amp;mut state::VaultAllocation)<br/>StorageLive(_4)<br/>_7 = deref_copy (*_3)<br/>_4 = &amp;((*_7).0: anchor_lang::prelude::Pubkey)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/></td></tr><tr><td align="left">_6 = &lt;anchor_lang::prelude::Pubkey as Default&gt;::default()</td></tr></table>>];
    bb1__0_510 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_5 = &amp;_6<br/></td></tr><tr><td align="left">_0 = &lt;anchor_lang::prelude::Pubkey as PartialEq&gt;::ne(move _4, move _5)</td></tr></table>>];
    bb2__0_510 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_510 -> bb1__0_510 [label="return"];
    bb1__0_510 -> bb2__0_510 [label="return"];
}
