// MIR for `__global::update_shares_metadata` after PreCodegen

fn __global::update_shares_metadata(_1: &anchor_lang::prelude::Pubkey, _2: &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8]) -> std::result::Result<(), anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: ();
    let mut _5: &str;
    let _6: &str;
    let _7: instruction::UpdateSharesMetadata;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>, instruction::UpdateSharesMetadata>;
    let mut _9: std::result::Result<instruction::UpdateSharesMetadata, anchor_lang::error::ErrorCode>;
    let mut _10: std::result::Result<instruction::UpdateSharesMetadata, std::io::Error>;
    let mut _11: &mut &[u8];
    let mut _12: &mut &[u8];
    let mut _13: &[u8];
    let _14: &[u8];
    let mut _15: &[u8];
    let mut _16: std::ops::RangeFull;
    let mut _17: {closure@programs\kvault\src\lib.rs:32:1: 32:11};
    let mut _18: isize;
    let _19: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
    let mut _20: !;
    let mut _21: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
    let _22: instruction::UpdateSharesMetadata;
    let mut _30: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, handlers::handler_update_metadata::UpdateSharesMetadata<'_>>;
    let mut _31: std::result::Result<handlers::handler_update_metadata::UpdateSharesMetadata<'_>, anchor_lang::error::Error>;
    let mut _32: &anchor_lang::prelude::Pubkey;
    let mut _33: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _34: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _35: &[u8];
    let mut _36: &mut handlers::handler_update_metadata::UpdateSharesMetadataBumps;
    let mut _37: &mut handlers::handler_update_metadata::UpdateSharesMetadataBumps;
    let mut _38: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _39: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _40: isize;
    let mut _42: !;
    let mut _43: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _46: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _47: std::result::Result<(), anchor_lang::error::Error>;
    let mut _48: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_update_metadata::UpdateSharesMetadata<'_>>;
    let mut _49: &anchor_lang::prelude::Pubkey;
    let mut _50: &mut handlers::handler_update_metadata::UpdateSharesMetadata<'_>;
    let mut _51: &mut handlers::handler_update_metadata::UpdateSharesMetadata<'_>;
    let mut _52: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _53: handlers::handler_update_metadata::UpdateSharesMetadataBumps;
    let mut _54: std::string::String;
    let mut _55: std::string::String;
    let mut _56: std::string::String;
    let mut _57: isize;
    let mut _59: !;
    let mut _60: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _62: &handlers::handler_update_metadata::UpdateSharesMetadata<'_>;
    let mut _63: &anchor_lang::prelude::Pubkey;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: isize;
    let mut _71: isize;
    let mut _72: isize;
    let mut _73: isize;
    let mut _74: isize;
    let mut _75: isize;
    let mut _76: isize;
    let mut _77: isize;
    let mut _78: isize;
    let mut _79: isize;
    let mut _80: isize;
    let mut _81: isize;
    let mut _82: isize;
    let mut _83: isize;
    let mut _84: isize;
    scope 1 {
        debug ix => _7;
        let _23: std::string::String;
        let _24: std::string::String;
        let _25: std::string::String;
        scope 6 {
            debug name => _23;
            debug symbol => _24;
            debug uri => _25;
            let mut _26: handlers::handler_update_metadata::UpdateSharesMetadataBumps;
            scope 7 {
                debug __bumps => _26;
                let mut _27: std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
                scope 8 {
                    debug __reallocs => _27;
                    let mut _28: &[anchor_lang::prelude::AccountInfo<'_>];
                    scope 9 {
                        debug __remaining_accounts => _28;
                        let mut _29: handlers::handler_update_metadata::UpdateSharesMetadata<'_>;
                        let _41: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _44: handlers::handler_update_metadata::UpdateSharesMetadata<'_>;
                        scope 10 {
                            debug __accounts => _29;
                            let _45: ();
                            let _58: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _61: ();
                            scope 15 {
                                debug result => _45;
                            }
                            scope 16 {
                                debug residual => _58;
                                scope 17 {
                                }
                            }
                            scope 18 {
                                debug val => _61;
                                scope 19 {
                                }
                            }
                        }
                        scope 11 {
                            debug residual => _41;
                            scope 12 {
                            }
                        }
                        scope 13 {
                            debug val => _44;
                            scope 14 {
                            }
                        }
                    }
                }
            }
        }
    }
    scope 2 {
        debug residual => _19;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _22;
        scope 5 {
        }
    }

    bb0: {
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _69 = const false;
        _68 = const false;
        _67 = const false;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = const "Instruction: UpdateSharesMetadata";
        _5 = &(*_6);
        _4 = solana_program::log::sol_log(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        StorageDead(_6);
        StorageDead(_4);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &(*_3);
        StorageLive(_16);
        _16 = RangeFull;
        _14 = <[u8] as Index<RangeFull>>::index(move _15, move _16) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_16);
        StorageDead(_15);
        _13 = &(*_14);
        _12 = &mut _13;
        _11 = &mut (*_12);
        _10 = <instruction::UpdateSharesMetadata as BorshDeserialize>::deserialize(move _11) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_11);
        StorageLive(_17);
        _17 = {closure@programs\kvault\src\lib.rs:32:1: 32:11};
        _9 = std::result::Result::<instruction::UpdateSharesMetadata, std::io::Error>::map_err::<anchor_lang::error::ErrorCode, {closure@programs\kvault\src\lib.rs:32:1: 32:11}>(move _10, move _17) -> [return: bb4, unwind: bb38];
    }

    bb4: {
        StorageDead(_17);
        StorageDead(_10);
        _8 = <std::result::Result<instruction::UpdateSharesMetadata, anchor_lang::error::ErrorCode> as Try>::branch(move _9) -> [return: bb5, unwind: bb38];
    }

    bb5: {
        StorageDead(_9);
        _18 = discriminant(_8);
        switchInt(move _18) -> [0: bb6, 1: bb8, otherwise: bb7];
    }

    bb6: {
        StorageLive(_22);
        _22 = move ((_8 as Continue).0: instruction::UpdateSharesMetadata);
        _67 = const true;
        _68 = const true;
        _69 = const true;
        _7 = move _22;
        StorageDead(_22);
        _72 = discriminant(_8);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_8);
        StorageLive(_23);
        _69 = const false;
        _66 = const true;
        _23 = move (_7.0: std::string::String);
        StorageLive(_24);
        _68 = const false;
        _65 = const true;
        _24 = move (_7.1: std::string::String);
        StorageLive(_25);
        _67 = const false;
        _64 = const true;
        _25 = move (_7.2: std::string::String);
        StorageLive(_26);
        _26 = <UpdateSharesMetadataBumps as Default>::default() -> [return: bb10, unwind: bb45];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        StorageLive(_19);
        _19 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>);
        StorageLive(_21);
        _21 = _19;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::ErrorCode>>>::from_residual(move _21) -> [return: bb9, unwind: bb53];
    }

    bb9: {
        StorageDead(_21);
        StorageDead(_19);
        _70 = discriminant(_8);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_8);
        goto -> bb31;
    }

    bb10: {
        StorageLive(_27);
        _27 = BTreeSet::<anchor_lang::prelude::Pubkey>::new() -> [return: bb11, unwind: bb45];
    }

    bb11: {
        StorageLive(_28);
        _28 = &(*_2);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = &(*_1);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &mut _28;
        _33 = &mut (*_34);
        StorageLive(_35);
        _35 = &(*_3);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &mut _26;
        _36 = &mut (*_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &mut _27;
        _38 = &mut (*_39);
        _31 = <handlers::handler_update_metadata::UpdateSharesMetadata<'_> as anchor_lang::Accounts<'_, UpdateSharesMetadataBumps>>::try_accounts(move _32, move _33, move _35, move _36, move _38) -> [return: bb12, unwind: bb34];
    }

    bb12: {
        StorageDead(_38);
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_32);
        _30 = <std::result::Result<handlers::handler_update_metadata::UpdateSharesMetadata<'_>, anchor_lang::error::Error> as Try>::branch(move _31) -> [return: bb13, unwind: bb34];
    }

    bb13: {
        StorageDead(_31);
        _40 = discriminant(_30);
        switchInt(move _40) -> [0: bb14, 1: bb15, otherwise: bb7];
    }

    bb14: {
        StorageLive(_44);
        _44 = move ((_30 as Continue).0: handlers::handler_update_metadata::UpdateSharesMetadata<'_>);
        _29 = move _44;
        StorageDead(_44);
        _74 = discriminant(_30);
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_34);
        StorageDead(_30);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = &(*_1);
        StorageLive(_50);
        StorageLive(_51);
        _51 = &mut _29;
        _50 = &mut (*_51);
        StorageLive(_52);
        _52 = &(*_28);
        StorageLive(_53);
        _53 = move _26;
        _48 = anchor_lang::context::Context::<'_, '_, '_, '_, handlers::handler_update_metadata::UpdateSharesMetadata<'_>>::new(move _49, move _50, move _52, move _53) -> [return: bb17, unwind: bb33];
    }

    bb15: {
        StorageLive(_41);
        _41 = move ((_30 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_43);
        _43 = move _41;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _43) -> [return: bb16, unwind: bb43];
    }

    bb16: {
        StorageDead(_43);
        StorageDead(_41);
        _80 = discriminant(_30);
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_34);
        StorageDead(_30);
        goto -> bb26;
    }

    bb17: {
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_50);
        StorageDead(_49);
        StorageLive(_54);
        _66 = const false;
        _54 = move _23;
        StorageLive(_55);
        _65 = const false;
        _55 = move _24;
        StorageLive(_56);
        _64 = const false;
        _56 = move _25;
        _47 = kamino_vault::update_shares_metadata(move _48, move _54, move _55, move _56) -> [return: bb18, unwind: bb33];
    }

    bb18: {
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_48);
        _46 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _47) -> [return: bb19, unwind: bb33];
    }

    bb19: {
        StorageDead(_47);
        _57 = discriminant(_46);
        switchInt(move _57) -> [0: bb20, 1: bb21, otherwise: bb7];
    }

    bb20: {
        StorageLive(_61);
        _61 = ((_46 as Continue).0: ());
        _45 = _61;
        StorageDead(_61);
        _76 = discriminant(_46);
        StorageDead(_51);
        StorageDead(_46);
        StorageLive(_62);
        _62 = &_29;
        StorageLive(_63);
        _63 = &(*_1);
        _0 = <handlers::handler_update_metadata::UpdateSharesMetadata<'_> as anchor_lang::AccountsExit<'_>>::exit(move _62, move _63) -> [return: bb23, unwind: bb33];
    }

    bb21: {
        StorageLive(_58);
        _58 = move ((_46 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_60);
        _60 = move _58;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _60) -> [return: bb22, unwind: bb42];
    }

    bb22: {
        StorageDead(_60);
        StorageDead(_58);
        _78 = discriminant(_46);
        StorageDead(_51);
        StorageDead(_46);
        StorageDead(_45);
        drop(_29) -> [return: bb26, unwind: bb34];
    }

    bb23: {
        StorageDead(_63);
        StorageDead(_62);
        StorageDead(_45);
        drop(_29) -> [return: bb24, unwind: bb34];
    }

    bb24: {
        StorageDead(_29);
        StorageDead(_28);
        drop(_27) -> [return: bb25, unwind: bb45];
    }

    bb25: {
        StorageDead(_27);
        StorageDead(_26);
        _64 = const false;
        StorageDead(_25);
        _65 = const false;
        StorageDead(_24);
        _66 = const false;
        StorageDead(_23);
        _67 = const false;
        _68 = const false;
        _69 = const false;
        StorageDead(_7);
        goto -> bb32;
    }

    bb26: {
        StorageDead(_29);
        StorageDead(_28);
        drop(_27) -> [return: bb27, unwind: bb45];
    }

    bb27: {
        StorageDead(_27);
        StorageDead(_26);
        switchInt(_64) -> [0: bb28, otherwise: bb39];
    }

    bb28: {
        _64 = const false;
        StorageDead(_25);
        switchInt(_65) -> [0: bb29, otherwise: bb40];
    }

    bb29: {
        _65 = const false;
        StorageDead(_24);
        switchInt(_66) -> [0: bb30, otherwise: bb41];
    }

    bb30: {
        _66 = const false;
        StorageDead(_23);
        goto -> bb31;
    }

    bb31: {
        _67 = const false;
        _68 = const false;
        _69 = const false;
        StorageDead(_7);
        goto -> bb32;
    }

    bb32: {
        return;
    }

    bb33 (cleanup): {
        drop(_29) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop(_27) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        switchInt(_65) -> [0: bb36, otherwise: bb46];
    }

    bb36 (cleanup): {
        switchInt(_66) -> [0: bb37, otherwise: bb47];
    }

    bb37 (cleanup): {
        switchInt(_69) -> [0: bb50, otherwise: bb52];
    }

    bb38 (cleanup): {
        resume;
    }

    bb39: {
        drop(_25) -> [return: bb28, unwind: bb35];
    }

    bb40: {
        drop(_24) -> [return: bb29, unwind: bb36];
    }

    bb41: {
        drop(_23) -> [return: bb30, unwind: bb37];
    }

    bb42 (cleanup): {
        _82 = discriminant(_46);
        goto -> bb33;
    }

    bb43 (cleanup): {
        _83 = discriminant(_30);
        goto -> bb34;
    }

    bb44 (cleanup): {
        drop(_25) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        switchInt(_64) -> [0: bb35, otherwise: bb44];
    }

    bb46 (cleanup): {
        drop(_24) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        drop(_23) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        switchInt(_67) -> [0: bb38, otherwise: bb49];
    }

    bb49 (cleanup): {
        drop((_7.2: std::string::String)) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        switchInt(_68) -> [0: bb48, otherwise: bb51];
    }

    bb51 (cleanup): {
        drop((_7.1: std::string::String)) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop((_7.0: std::string::String)) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        _84 = discriminant(_8);
        goto -> bb38;
    }
}
