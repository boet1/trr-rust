// MIR for `utils::metadata::update` after PreCodegen

fn utils::metadata::update(_1: anchor_lang::prelude::AccountInfo<'_>, _2: anchor_lang::prelude::AccountInfo<'_>, _3: anchor_lang::prelude::AccountInfo<'_>, _4: anchor_lang::prelude::AccountInfo<'_>, _5: u64, _6: utils::metadata::TokenMetadata) -> std::result::Result<(), anchor_lang::error::Error> {
    debug vault_state => _1;
    debug metadata_program => _2;
    debug shares_mint_authority => _3;
    debug shares_metadata => _4;
    debug mint_authority_bump => _5;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _7: std::string::String;
    let _8: std::string::String;
    let _9: std::string::String;
    let mut _11: &anchor_lang::prelude::AccountInfo<'_>;
    let _13: [&[u8]; 3];
    let mut _14: &[u8];
    let mut _15: &[u8];
    let mut _16: &[u8; 9];
    let _17: &[u8; 9];
    let mut _18: &[u8];
    let _19: &[u8];
    let mut _20: &[u8];
    let _21: &[u8];
    let mut _22: &anchor_lang::prelude::Pubkey;
    let mut _23: &[u8];
    let mut _24: &[u8; 1];
    let _25: &[u8; 1];
    let _26: [u8; 1];
    let mut _27: u8;
    let mut _28: u64;
    let mut _30: &[&[&[u8]]; 1];
    let _31: &[&[&[u8]]; 1];
    let _32: [&[&[u8]]; 1];
    let mut _33: &[&[u8]];
    let mut _34: &[&[u8]; 3];
    let _35: ();
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _37: std::result::Result<(), anchor_lang::error::Error>;
    let mut _38: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_spl::metadata::UpdateMetadataAccountsV2<'_>>;
    let mut _39: anchor_lang::prelude::AccountInfo<'_>;
    let mut _40: anchor_spl::metadata::UpdateMetadataAccountsV2<'_>;
    let mut _41: anchor_lang::prelude::AccountInfo<'_>;
    let mut _42: anchor_lang::prelude::AccountInfo<'_>;
    let mut _43: &[&[&[u8]]];
    let mut _44: std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _45: std::option::Option<anchor_spl::metadata::mpl_token_metadata::types::DataV2>;
    let mut _46: anchor_spl::metadata::mpl_token_metadata::types::DataV2;
    let mut _47: std::string::String;
    let mut _48: std::string::String;
    let mut _49: std::string::String;
    let mut _50: std::option::Option<std::vec::Vec<anchor_spl::metadata::mpl_token_metadata::types::Creator>>;
    let mut _51: std::option::Option<anchor_spl::metadata::mpl_token_metadata::types::Collection>;
    let mut _52: std::option::Option<anchor_spl::metadata::mpl_token_metadata::types::Uses>;
    let mut _53: std::option::Option<bool>;
    let mut _54: std::option::Option<bool>;
    let mut _55: isize;
    let mut _57: !;
    let mut _58: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _60: ();
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: isize;
    let mut _68: isize;
    let mut _69: isize;
    let mut _70: isize;
    let mut _71: isize;
    scope 1 {
        debug name => _7;
        debug symbol => _8;
        debug uri => _9;
        let _10: anchor_lang::prelude::Pubkey;
        scope 2 {
            debug vault_state_key => _10;
            let _12: &[&[u8]; 3];
            scope 3 {
                debug seeds => _12;
                let _29: &[&[&[u8]]];
                scope 4 {
                    debug signer_seeds => _29;
                    let _56: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _59: ();
                    scope 5 {
                        debug residual => _56;
                        scope 6 {
                        }
                    }
                    scope 7 {
                        debug val => _59;
                        scope 8 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _66 = const true;
        _65 = const true;
        _64 = const true;
        StorageLive(_7);
        _63 = const true;
        _7 = move (_6.0: std::string::String);
        StorageLive(_8);
        _62 = const true;
        _8 = move (_6.1: std::string::String);
        StorageLive(_9);
        _61 = const true;
        _9 = move (_6.2: std::string::String);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &_1;
        _10 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _11) -> [return: bb1, unwind: bb21];
    }

    bb1: {
        StorageDead(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = const _;
        _16 = &(*_17);
        _15 = move _16 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_16);
        _14 = _15;
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = &_10;
        _21 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _22) -> [return: bb2, unwind: bb21];
    }

    bb2: {
        _20 = &(*_21);
        StorageDead(_22);
        _19 = <[u8] as AsRef<[u8]>>::as_ref(move _20) -> [return: bb3, unwind: bb21];
    }

    bb3: {
        _18 = &(*_19);
        StorageDead(_20);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = _5;
        _27 = move _28 as u8 (IntToInt);
        StorageDead(_28);
        _26 = [move _27];
        StorageDead(_27);
        _25 = &_26;
        _24 = &(*_25);
        _23 = move _24 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_24);
        _13 = [move _14, move _18, move _23];
        StorageDead(_23);
        StorageDead(_18);
        StorageDead(_14);
        _12 = &_13;
        StorageDead(_25);
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_15);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &(*_12);
        _33 = move _34 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_34);
        _32 = [move _33];
        StorageDead(_33);
        _31 = &_32;
        _30 = &(*_31);
        _29 = move _30 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_30);
        StorageDead(_31);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _66 = const false;
        _39 = move _2;
        StorageLive(_40);
        StorageLive(_41);
        _64 = const false;
        _41 = move _4;
        StorageLive(_42);
        _65 = const false;
        _42 = move _3;
        _40 = UpdateMetadataAccountsV2::<'_> { metadata: move _41, update_authority: move _42 };
        StorageDead(_42);
        StorageDead(_41);
        StorageLive(_43);
        _43 = &(*_29);
        _38 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, UpdateMetadataAccountsV2<'_>>::new_with_signer(move _39, move _40, move _43) -> [return: bb4, unwind: bb21];
    }

    bb4: {
        StorageDead(_43);
        StorageDead(_40);
        StorageDead(_39);
        StorageLive(_44);
        _44 = Option::<anchor_lang::prelude::Pubkey>::None;
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _63 = const false;
        _47 = move _7;
        StorageLive(_48);
        _62 = const false;
        _48 = move _8;
        StorageLive(_49);
        _61 = const false;
        _49 = move _9;
        StorageLive(_50);
        _50 = Option::<Vec<anchor_spl::metadata::mpl_token_metadata::types::Creator>>::None;
        StorageLive(_51);
        _51 = Option::<anchor_spl::metadata::mpl_token_metadata::types::Collection>::None;
        StorageLive(_52);
        _52 = Option::<Uses>::None;
        _46 = DataV2 { name: move _47, symbol: move _48, uri: move _49, seller_fee_basis_points: const 0_u16, creators: move _50, collection: move _51, uses: move _52 };
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_48);
        StorageDead(_47);
        _45 = Option::<DataV2>::Some(move _46);
        StorageDead(_46);
        StorageLive(_53);
        _53 = Option::<bool>::None;
        StorageLive(_54);
        _54 = Option::<bool>::None;
        _37 = update_metadata_accounts_v2(move _38, move _44, move _45, move _53, move _54) -> [return: bb5, unwind: bb21];
    }

    bb5: {
        StorageDead(_54);
        StorageDead(_53);
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_38);
        _36 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _37) -> [return: bb6, unwind: bb21];
    }

    bb6: {
        StorageDead(_37);
        _55 = discriminant(_36);
        switchInt(move _55) -> [0: bb7, 1: bb9, otherwise: bb8];
    }

    bb7: {
        StorageLive(_59);
        _59 = ((_36 as Continue).0: ());
        _35 = _59;
        StorageDead(_59);
        _67 = discriminant(_36);
        StorageDead(_36);
        StorageDead(_35);
        StorageLive(_60);
        _60 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _60);
        StorageDead(_60);
        StorageDead(_32);
        StorageDead(_29);
        StorageDead(_26);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_10);
        _61 = const false;
        StorageDead(_9);
        _62 = const false;
        StorageDead(_8);
        _63 = const false;
        StorageDead(_7);
        drop(_1) -> [return: bb11, unwind: bb18];
    }

    bb8: {
        unreachable;
    }

    bb9: {
        StorageLive(_56);
        _56 = move ((_36 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_58);
        _58 = move _56;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _58) -> [return: bb10, unwind: bb19];
    }

    bb10: {
        StorageDead(_58);
        StorageDead(_56);
        _69 = discriminant(_36);
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_32);
        StorageDead(_29);
        StorageDead(_26);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_10);
        _61 = const false;
        StorageDead(_9);
        _62 = const false;
        StorageDead(_8);
        _63 = const false;
        StorageDead(_7);
        drop(_1) -> [return: bb11, unwind: bb18];
    }

    bb11: {
        return;
    }

    bb12 (cleanup): {
        switchInt(_62) -> [0: bb13, otherwise: bb22];
    }

    bb13 (cleanup): {
        switchInt(_63) -> [0: bb14, otherwise: bb23];
    }

    bb14 (cleanup): {
        switchInt(_64) -> [0: bb15, otherwise: bb24];
    }

    bb15 (cleanup): {
        switchInt(_65) -> [0: bb16, otherwise: bb25];
    }

    bb16 (cleanup): {
        switchInt(_66) -> [0: bb17, otherwise: bb26];
    }

    bb17 (cleanup): {
        drop(_1) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        resume;
    }

    bb19 (cleanup): {
        _71 = discriminant(_36);
        goto -> bb21;
    }

    bb20 (cleanup): {
        drop(_9) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        switchInt(_61) -> [0: bb12, otherwise: bb20];
    }

    bb22 (cleanup): {
        drop(_8) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        drop(_7) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_4) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_3) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_2) -> [return: bb17, unwind terminate(cleanup)];
    }
}
