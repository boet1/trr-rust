// MIR for `get_shares_to_mint` after PreCodegen

fn get_shares_to_mint(_1: FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, _2: u64, _3: u64) -> std::result::Result<u64, anchor_lang::error::Error> {
    debug holdings_aum => _1;
    debug user_token_amount => _2;
    debug shares_issued => _3;
    let mut _0: std::result::Result<u64, anchor_lang::error::Error>;
    let _4: ();
    let mut _5: bool;
    let mut _6: u64;
    let mut _7: !;
    let mut _8: u64;
    let _9: ();
    let mut _10: bool;
    let mut _11: u64;
    let mut _12: bool;
    let mut _13: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _14: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _15: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _16: !;
    let mut _17: anchor_lang::error::Error;
    let mut _18: anchor_lang::error::AnchorError;
    let mut _19: std::string::String;
    let mut _20: &KaminoVaultError;
    let _21: KaminoVaultError;
    let mut _22: u32;
    let mut _23: KaminoVaultError;
    let mut _24: std::string::String;
    let mut _25: &KaminoVaultError;
    let _26: KaminoVaultError;
    let mut _27: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _28: anchor_lang::error::ErrorOrigin;
    let mut _29: anchor_lang::error::Source;
    let mut _30: std::option::Option<anchor_lang::error::ComparedValues>;
    let _31: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _32: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _33: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _34: u64;
    let mut _35: u64;
    let mut _36: u64;
    let mut _37: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _38: u64;
    let mut _39: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _40: &KaminoVaultError;
    let mut _41: &KaminoVaultError;
    let mut _42: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    scope 1 {
        debug shares_to_mint => _31;
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = _3;
        _5 = Eq(move _6, const 0_u64);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_6);
        StorageLive(_8);
        _8 = _2;
        _0 = std::result::Result::<u64, anchor_lang::error::Error>::Ok(move _8);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb17;
    }

    bb2: {
        StorageDead(_6);
        _4 = const ();
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = _3;
        _10 = Ne(move _11, const 0_u64);
        switchInt(move _10) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageDead(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &_1;
        StorageLive(_14);
        _42 = const _;
        _14 = &(*_42);
        _12 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialEq>::eq(move _13, move _14) -> [return: bb5, unwind continue];
    }

    bb4: {
        StorageDead(_11);
        goto -> bb12;
    }

    bb5: {
        switchInt(move _12) -> [0: bb11, otherwise: bb6];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _41 = const _;
        _20 = &(*_41);
        _19 = KaminoVaultError::name(move _20) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_20);
        StorageLive(_22);
        StorageLive(_23);
        _23 = KaminoVaultError::VaultAUMZero;
        _22 = <KaminoVaultError as Into<u32>>::into(move _23) -> [return: bb8, unwind: bb18];
    }

    bb8: {
        StorageDead(_23);
        StorageLive(_24);
        StorageLive(_25);
        _40 = const _;
        _25 = &(*_40);
        _24 = <KaminoVaultError as ToString>::to_string(move _25) -> [return: bb9, unwind: bb18];
    }

    bb9: {
        StorageDead(_25);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\operations\\vault_operations.rs", line: const 615_u32 };
        _28 = anchor_lang::error::ErrorOrigin::Source(move _29);
        StorageDead(_29);
        _27 = Option::<ErrorOrigin>::Some(move _28);
        StorageDead(_28);
        StorageLive(_30);
        _30 = Option::<ComparedValues>::None;
        _18 = anchor_lang::error::AnchorError { error_name: move _19, error_code_number: move _22, error_msg: move _24, error_origin: move _27, compared_values: move _30 };
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_19);
        _17 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _18) -> [return: bb10, unwind: bb19];
    }

    bb10: {
        StorageDead(_18);
        _0 = std::result::Result::<u64, anchor_lang::error::Error>::Err(move _17);
        StorageDead(_17);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb17;
    }

    bb11: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb12;
    }

    bb12: {
        _9 = const ();
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = _3;
        _33 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as From<u64>>::from(move _34) -> [return: bb13, unwind continue];
    }

    bb13: {
        _32 = &_33;
        StorageDead(_34);
        StorageLive(_35);
        _35 = _2;
        StorageLive(_36);
        StorageLive(_37);
        _37 = &_1;
        _36 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as kamino_lending::utils::FractionExtra>::to_ceil::<u64>(move _37) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_37);
        _31 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as kamino_lending::utils::FractionExtra>::full_mul_int_ratio::<u64, u64>(move _32, move _35, move _36) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_32);
        StorageDead(_33);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &_31;
        _38 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as kamino_lending::utils::FractionExtra>::to_floor::<u64>(move _39) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_39);
        _0 = std::result::Result::<u64, anchor_lang::error::Error>::Ok(move _38);
        StorageDead(_38);
        StorageDead(_31);
        goto -> bb17;
    }

    bb17: {
        return;
    }

    bb18 (cleanup): {
        drop(_19) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        resume;
    }
}
