// MIR for `cpi_refresh_reserves` before PreCodegen

fn cpi_refresh_reserves(_1: &mut cpi_mem::CpiMemoryLender<'_>, _2: impl Iterator<Item = &'a AccountInfo<'info>>, _3: usize) -> std::result::Result<(), anchor_lang::error::Error> {
    debug cpi => _1;
    debug reserve_account_infos_iter => _2;
    debug reserve_count => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: ();
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: !;
    let mut _8: ();
    let mut _9: [anchor_lang::prelude::AccountMeta; 50];
    let mut _10: [(); 50];
    let mut _11: ();
    let mut _12: {closure@programs\kvault\src\operations\klend_operations.rs:26:61: 26:64};
    let _14: ();
    let mut _15: std::iter::Zip<std::slice::ChunksMut<'_, anchor_lang::prelude::AccountMeta>, impl Iterator<Item = &'a AccountInfo<'info>>>;
    let mut _16: std::iter::Zip<std::slice::ChunksMut<'_, anchor_lang::prelude::AccountMeta>, impl Iterator<Item = &'a AccountInfo<'info>>>;
    let mut _17: std::slice::ChunksMut<'_, anchor_lang::prelude::AccountMeta>;
    let mut _18: &mut [anchor_lang::prelude::AccountMeta];
    let mut _19: &mut [anchor_lang::prelude::AccountMeta; 50];
    let mut _20: impl Iterator<Item = &'a AccountInfo<'info>>;
    let mut _22: ();
    let _23: ();
    let mut _24: std::option::Option<(&mut [anchor_lang::prelude::AccountMeta], &anchor_lang::prelude::AccountInfo<'_>)>;
    let mut _25: &mut std::iter::Zip<std::slice::ChunksMut<'_, anchor_lang::prelude::AccountMeta>, impl Iterator<Item = &'a AccountInfo<'info>>>;
    let mut _26: &mut std::iter::Zip<std::slice::ChunksMut<'_, anchor_lang::prelude::AccountMeta>, impl Iterator<Item = &'a AccountInfo<'info>>>;
    let mut _27: isize;
    let mut _28: !;
    let mut _31: anchor_lang::prelude::AccountMeta;
    let mut _32: anchor_lang::prelude::Pubkey;
    let _33: usize;
    let mut _34: usize;
    let mut _35: bool;
    let mut _37: &kamino_lending::Reserve;
    let mut _38: &std::cell::Ref<'_, kamino_lending::Reserve>;
    let _39: std::cell::Ref<'_, kamino_lending::Reserve>;
    let mut _40: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, kamino_lending::Reserve>>;
    let mut _41: std::result::Result<std::cell::Ref<'_, kamino_lending::Reserve>, anchor_lang::error::Error>;
    let mut _42: &kamino_lending::utils::FatAccountLoader<'_, kamino_lending::Reserve>;
    let _43: kamino_lending::utils::FatAccountLoader<'_, kamino_lending::Reserve>;
    let mut _44: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, kamino_lending::utils::FatAccountLoader<'_, kamino_lending::Reserve>>;
    let mut _45: std::result::Result<kamino_lending::utils::FatAccountLoader<'_, kamino_lending::Reserve>, anchor_lang::error::Error>;
    let mut _46: &anchor_lang::prelude::Pubkey;
    let _47: &anchor_lang::prelude::Pubkey;
    let _48: anchor_lang::prelude::Pubkey;
    let mut _49: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _50: isize;
    let mut _52: !;
    let mut _53: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _55: isize;
    let mut _57: !;
    let mut _58: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _60: anchor_lang::prelude::AccountMeta;
    let mut _61: anchor_lang::prelude::Pubkey;
    let _62: usize;
    let mut _63: usize;
    let mut _64: bool;
    let mut _65: (usize, bool);
    let _66: ();
    let mut _67: bool;
    let mut _68: usize;
    let mut _69: usize;
    let mut _70: !;
    let mut _71: anchor_lang::error::Error;
    let mut _72: anchor_lang::error::AnchorError;
    let mut _73: std::string::String;
    let mut _74: &KaminoVaultError;
    let _75: KaminoVaultError;
    let mut _76: u32;
    let mut _77: KaminoVaultError;
    let mut _78: std::string::String;
    let mut _79: &KaminoVaultError;
    let _80: KaminoVaultError;
    let mut _81: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _82: anchor_lang::error::ErrorOrigin;
    let mut _83: anchor_lang::error::Source;
    let mut _84: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _85: std::result::Result<(), anchor_lang::prelude::ProgramError>;
    let mut _86: &mut utils::cpi_mem::CpiMemoryLender<'_>;
    let mut _87: &anchor_lang::prelude::Pubkey;
    let _88: &anchor_lang::prelude::Pubkey;
    let _89: anchor_lang::prelude::Pubkey;
    let mut _90: &[anchor_lang::prelude::AccountMeta];
    let _91: &[anchor_lang::prelude::AccountMeta];
    let _92: &[anchor_lang::prelude::AccountMeta];
    let mut _93: &[anchor_lang::prelude::AccountMeta; 50];
    let mut _94: std::ops::RangeTo<usize>;
    let mut _95: usize;
    let mut _96: usize;
    let mut _97: (usize, bool);
    let mut _98: &[u8];
    let _99: &[u8];
    let mut _100: &std::vec::Vec<u8>;
    let _101: &std::vec::Vec<u8>;
    let _102: std::vec::Vec<u8>;
    let mut _103: &kamino_lending::instruction::RefreshReservesBatch;
    let _104: kamino_lending::instruction::RefreshReservesBatch;
    let mut _108: &anchor_lang::prelude::Pubkey;
    let mut _109: bool;
    let mut _110: bool;
    let mut _111: bool;
    let mut _112: bool;
    let mut _113: bool;
    let mut _114: isize;
    let mut _115: isize;
    let mut _116: isize;
    let mut _117: isize;
    let mut _118: isize;
    let mut _119: isize;
    let mut _120: isize;
    let mut _121: isize;
    let mut _122: isize;
    let mut _123: isize;
    scope 1 {
        debug accounts_metadatas => _9;
        let mut _13: usize;
        scope 2 {
            debug num_reserves => _13;
            let mut _21: std::iter::Zip<std::slice::ChunksMut<'_, anchor_lang::prelude::AccountMeta>, impl Iterator<Item = &'a AccountInfo<'info>>>;
            let mut _105: &KaminoVaultError;
            let mut _106: &KaminoVaultError;
            let mut _107: &kamino_lending::instruction::RefreshReservesBatch;
            scope 3 {
                debug iter => _21;
                let _29: &mut [anchor_lang::prelude::AccountMeta];
                let _30: &anchor_lang::prelude::AccountInfo<'_>;
                scope 4 {
                    debug account_meta => _29;
                    debug reserve_account_info => _30;
                    let _36: anchor_lang::prelude::Pubkey;
                    let _51: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _54: kamino_lending::utils::FatAccountLoader<'_, kamino_lending::Reserve>;
                    let _56: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _59: std::cell::Ref<'_, kamino_lending::Reserve>;
                    scope 5 {
                        debug lending_market_pk => _36;
                    }
                    scope 6 {
                        debug residual => _51;
                        scope 7 {
                        }
                    }
                    scope 8 {
                        debug val => _54;
                        scope 9 {
                        }
                    }
                    scope 10 {
                        debug residual => _56;
                        scope 11 {
                        }
                    }
                    scope 12 {
                        debug val => _59;
                        scope 13 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _111 = const false;
        _110 = const false;
        _109 = const false;
        _113 = const false;
        _112 = const false;
        _111 = const true;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = _3;
        _5 = Eq(move _6, const 0_usize);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_6);
        StorageLive(_8);
        _8 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _8);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb57;
    }

    bb2: {
        StorageDead(_6);
        _4 = const ();
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = ();
        _10 = [move _11; 50];
        StorageDead(_11);
        StorageLive(_12);
        _12 = {closure@programs\kvault\src\operations\klend_operations.rs:26:61: 26:64};
        _9 = array::<impl [(); 50]>::map::<{closure@programs\kvault\src\operations\klend_operations.rs:26:61: 26:64}, AccountMeta>(move _10, move _12) -> [return: bb3, unwind: bb61];
    }

    bb3: {
        StorageDead(_12);
        StorageDead(_10);
        StorageLive(_13);
        _13 = const 0_usize;
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &mut _9;
        _18 = move _19 as &mut [anchor_lang::prelude::AccountMeta] (PointerCoercion(Unsize));
        StorageDead(_19);
        _17 = core::slice::<impl [AccountMeta]>::chunks_mut(move _18, const 2_usize) -> [return: bb4, unwind: bb61];
    }

    bb4: {
        StorageDead(_18);
        StorageLive(_20);
        _111 = const false;
        _20 = move _2;
        _16 = <ChunksMut<'_, AccountMeta> as Iterator>::zip::<impl Iterator<Item = &'a AccountInfo<'info>>>(move _17, move _20) -> [return: bb5, unwind: bb61];
    }

    bb5: {
        StorageDead(_20);
        StorageDead(_17);
        _15 = <Zip<ChunksMut<'_, AccountMeta>, impl Iterator<Item = &'a AccountInfo<'info>>> as IntoIterator>::into_iter(move _16) -> [return: bb6, unwind: bb61];
    }

    bb6: {
        StorageDead(_16);
        StorageLive(_21);
        _21 = move _15;
        goto -> bb7;
    }

    bb7: {
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = &mut _21;
        _25 = &mut (*_26);
        _24 = <Zip<ChunksMut<'_, AccountMeta>, impl Iterator<Item = &'a AccountInfo<'info>>> as Iterator>::next(move _25) -> [return: bb8, unwind: bb51];
    }

    bb8: {
        StorageDead(_25);
        _27 = discriminant(_24);
        switchInt(move _27) -> [0: bb11, 1: bb9, otherwise: bb10];
    }

    bb9: {
        StorageLive(_29);
        _29 = move (((_24 as Some).0: (&mut [anchor_lang::prelude::AccountMeta], &anchor_lang::prelude::AccountInfo<'_>)).0: &mut [anchor_lang::prelude::AccountMeta]);
        StorageLive(_30);
        _30 = (((_24 as Some).0: (&mut [anchor_lang::prelude::AccountMeta], &anchor_lang::prelude::AccountInfo<'_>)).1: &anchor_lang::prelude::AccountInfo<'_>);
        StorageLive(_31);
        StorageLive(_32);
        _108 = deref_copy ((*_30).0: &anchor_lang::prelude::Pubkey);
        _32 = (*_108);
        _31 = AccountMeta::new(move _32, const false) -> [return: bb12, unwind: bb51];
    }

    bb10: {
        unreachable;
    }

    bb11: {
        _14 = const ();
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_23);
        drop(_21) -> [return: bb29, unwind: bb61];
    }

    bb12: {
        StorageDead(_32);
        StorageLive(_33);
        _33 = const 0_usize;
        _34 = Len((*_29));
        _35 = Lt(_33, _34);
        assert(move _35, "index out of bounds: the length is {} but the index is {}", move _34, _33) -> [success: bb13, unwind: bb51];
    }

    bb13: {
        (*_29)[_33] = move _31;
        StorageDead(_31);
        StorageDead(_33);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = kamino_lending::id() -> [return: bb14, unwind: bb51];
    }

    bb14: {
        _47 = &_48;
        _46 = &(*_47);
        StorageLive(_49);
        _49 = &(*_30);
        _45 = kamino_lending::utils::FatAccountLoader::<'_, kamino_lending::Reserve>::try_from_unchecked(move _46, move _49) -> [return: bb15, unwind: bb51];
    }

    bb15: {
        StorageDead(_49);
        StorageDead(_46);
        _44 = <std::result::Result<kamino_lending::utils::FatAccountLoader<'_, kamino_lending::Reserve>, anchor_lang::error::Error> as Try>::branch(move _45) -> [return: bb16, unwind: bb51];
    }

    bb16: {
        _109 = const true;
        _110 = const true;
        StorageDead(_45);
        _50 = discriminant(_44);
        switchInt(move _50) -> [0: bb17, 1: bb18, otherwise: bb10];
    }

    bb17: {
        StorageLive(_54);
        _54 = move ((_44 as Continue).0: kamino_lending::utils::FatAccountLoader<'_, kamino_lending::Reserve>);
        _43 = move _54;
        StorageDead(_54);
        _42 = &_43;
        _41 = kamino_lending::utils::FatAccountLoader::<'_, kamino_lending::Reserve>::load(move _42) -> [return: bb20, unwind: bb50];
    }

    bb18: {
        StorageLive(_51);
        _51 = move ((_44 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_53);
        _53 = move _51;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _53) -> [return: bb19, unwind: bb59];
    }

    bb19: {
        StorageDead(_53);
        StorageDead(_51);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_38);
        goto -> bb55;
    }

    bb20: {
        StorageDead(_42);
        _40 = <std::result::Result<Ref<'_, kamino_lending::Reserve>, anchor_lang::error::Error> as Try>::branch(move _41) -> [return: bb21, unwind: bb50];
    }

    bb21: {
        _112 = const true;
        _113 = const true;
        StorageDead(_41);
        _55 = discriminant(_40);
        switchInt(move _55) -> [0: bb22, 1: bb23, otherwise: bb10];
    }

    bb22: {
        StorageLive(_59);
        _59 = move ((_40 as Continue).0: std::cell::Ref<'_, kamino_lending::Reserve>);
        _39 = move _59;
        StorageDead(_59);
        _38 = &_39;
        _37 = <Ref<'_, kamino_lending::Reserve> as Deref>::deref(move _38) -> [return: bb25, unwind: bb49];
    }

    bb23: {
        StorageLive(_56);
        _56 = move ((_40 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_58);
        _58 = move _56;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _58) -> [return: bb24, unwind: bb58];
    }

    bb24: {
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_38);
        _118 = discriminant(_40);
        drop(_43) -> [return: bb55, unwind: bb59];
    }

    bb25: {
        StorageDead(_38);
        _36 = ((*_37).2: anchor_lang::prelude::Pubkey);
        drop(_39) -> [return: bb53, unwind: bb58];
    }

    bb26: {
        StorageDead(_61);
        StorageLive(_62);
        _62 = const 1_usize;
        _63 = Len((*_29));
        _64 = Lt(_62, _63);
        assert(move _64, "index out of bounds: the length is {} but the index is {}", move _63, _62) -> [success: bb27, unwind: bb51];
    }

    bb27: {
        (*_29)[_62] = move _60;
        StorageDead(_60);
        StorageDead(_62);
        _65 = CheckedAdd(_13, const 1_usize);
        assert(!move (_65.1: bool), "attempt to compute `{} + {}`, which would overflow", _13, const 1_usize) -> [success: bb28, unwind: bb51];
    }

    bb28: {
        _13 = move (_65.0: usize);
        _23 = const ();
        StorageDead(_36);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_23);
        _22 = const ();
        goto -> bb7;
    }

    bb29: {
        StorageDead(_21);
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = _3;
        StorageLive(_69);
        _69 = _13;
        _67 = Ne(move _68, move _69);
        switchInt(move _67) -> [0: bb35, otherwise: bb30];
    }

    bb30: {
        StorageDead(_69);
        StorageDead(_68);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _106 = const _;
        _74 = &(*_106);
        _73 = KaminoVaultError::name(move _74) -> [return: bb31, unwind: bb61];
    }

    bb31: {
        StorageDead(_74);
        StorageLive(_76);
        StorageLive(_77);
        _77 = KaminoVaultError::MissingReserveForBatchRefresh;
        _76 = <KaminoVaultError as Into<u32>>::into(move _77) -> [return: bb32, unwind: bb48];
    }

    bb32: {
        StorageDead(_77);
        StorageLive(_78);
        StorageLive(_79);
        _105 = const _;
        _79 = &(*_105);
        _78 = <KaminoVaultError as ToString>::to_string(move _79) -> [return: bb33, unwind: bb48];
    }

    bb33: {
        StorageDead(_79);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _83 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\operations\\klend_operations.rs", line: const 45_u32 };
        _82 = anchor_lang::error::ErrorOrigin::Source(move _83);
        StorageDead(_83);
        _81 = Option::<ErrorOrigin>::Some(move _82);
        StorageDead(_82);
        StorageLive(_84);
        _84 = Option::<ComparedValues>::None;
        _72 = anchor_lang::error::AnchorError { error_name: move _73, error_code_number: move _76, error_msg: move _78, error_origin: move _81, compared_values: move _84 };
        StorageDead(_84);
        StorageDead(_81);
        StorageDead(_78);
        StorageDead(_76);
        StorageDead(_73);
        _71 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _72) -> [return: bb34, unwind: bb61];
    }

    bb34: {
        StorageDead(_72);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _71);
        StorageDead(_71);
        StorageDead(_67);
        StorageDead(_66);
        goto -> bb45;
    }

    bb35: {
        StorageDead(_69);
        StorageDead(_68);
        _66 = const ();
        StorageDead(_67);
        StorageDead(_66);
        StorageLive(_85);
        StorageLive(_86);
        _86 = &mut (*_1);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = kamino_lending::id() -> [return: bb36, unwind: bb61];
    }

    bb36: {
        _88 = &_89;
        _87 = &(*_88);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _93 = &_9;
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = _13;
        _97 = CheckedMul(_96, const 2_usize);
        assert(!move (_97.1: bool), "attempt to compute `{} * {}`, which would overflow", move _96, const 2_usize) -> [success: bb37, unwind: bb61];
    }

    bb37: {
        _95 = move (_97.0: usize);
        StorageDead(_96);
        _94 = RangeTo::<usize> { end: move _95 };
        StorageDead(_95);
        _92 = <[AccountMeta; 50] as Index<RangeTo<usize>>>::index(move _93, move _94) -> [return: bb38, unwind: bb61];
    }

    bb38: {
        StorageDead(_94);
        StorageDead(_93);
        _91 = &(*_92);
        _90 = &(*_91);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        _107 = const _;
        _103 = &(*_107);
        _102 = <kamino_lending::instruction::RefreshReservesBatch as InstructionData>::data(move _103) -> [return: bb39, unwind: bb61];
    }

    bb39: {
        StorageDead(_103);
        _101 = &_102;
        _100 = &(*_101);
        _99 = <Vec<u8> as Deref>::deref(move _100) -> [return: bb40, unwind: bb47];
    }

    bb40: {
        _98 = &(*_99);
        StorageDead(_100);
        _85 = cpi_mem::CpiMemoryLender::<'_>::program_invoke(move _86, move _87, move _90, move _98) -> [return: bb41, unwind: bb47];
    }

    bb41: {
        StorageDead(_98);
        StorageDead(_90);
        StorageDead(_87);
        StorageDead(_86);
        _0 = std::result::Result::<(), anchor_lang::prelude::ProgramError>::map_err::<anchor_lang::error::Error, fn(anchor_lang::prelude::ProgramError) -> anchor_lang::error::Error {<anchor_lang::prelude::ProgramError as Into<anchor_lang::error::Error>>::into}>(move _85, <anchor_lang::prelude::ProgramError as Into<anchor_lang::error::Error>>::into) -> [return: bb42, unwind: bb47];
    }

    bb42: {
        StorageDead(_85);
        StorageDead(_13);
        StorageDead(_9);
        drop(_102) -> [return: bb43, unwind: bb61];
    }

    bb43: {
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_99);
        StorageDead(_92);
        StorageDead(_91);
        StorageDead(_89);
        StorageDead(_88);
        goto -> bb46;
    }

    bb44: {
        StorageDead(_21);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb45;
    }

    bb45: {
        StorageDead(_13);
        StorageDead(_9);
        goto -> bb57;
    }

    bb46: {
        return;
    }

    bb47 (cleanup): {
        drop(_102) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        drop(_73) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop(_39) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_43) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_21) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        resume;
    }

    bb53: {
        _114 = discriminant(_40);
        drop(_43) -> [return: bb54, unwind: bb59];
    }

    bb54: {
        _116 = discriminant(_44);
        StorageDead(_48);
        StorageDead(_47);
        _109 = const false;
        _110 = const false;
        StorageDead(_44);
        StorageDead(_43);
        _112 = const false;
        _113 = const false;
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_37);
        StorageLive(_60);
        StorageLive(_61);
        _61 = _36;
        _60 = AccountMeta::new_readonly(move _61, const false) -> [return: bb26, unwind: bb51];
    }

    bb55: {
        _120 = discriminant(_44);
        StorageDead(_48);
        StorageDead(_47);
        _109 = const false;
        _110 = const false;
        StorageDead(_44);
        StorageDead(_43);
        _112 = const false;
        _113 = const false;
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_23);
        drop(_21) -> [return: bb44, unwind: bb61];
    }

    bb56: {
        drop(_2) -> [return: bb46, unwind: bb52];
    }

    bb57: {
        switchInt(_111) -> [0: bb46, otherwise: bb56];
    }

    bb58 (cleanup): {
        _122 = discriminant(_40);
        goto -> bb50;
    }

    bb59 (cleanup): {
        _123 = discriminant(_44);
        goto -> bb51;
    }

    bb60 (cleanup): {
        drop(_2) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        switchInt(_111) -> [0: bb52, otherwise: bb60];
    }
}
