// MIR for `vault_checks::post_transfer_withdraw_balance_checks` after PreCodegen

fn vault_checks::post_transfer_withdraw_balance_checks(_1: vault_checks::VaultAndUserBalances, _2: vault_checks::VaultAndUserBalances, _3: effects::WithdrawEffects) -> std::result::Result<(), anchor_lang::error::Error> {
    debug amounts_before => _1;
    debug amounts_after => _2;
    debug withdraw_effects => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: u64;
    let _5: u64;
    let _6: u64;
    let _7: u64;
    let _8: u64;
    let mut _10: i128;
    let mut _11: u64;
    let mut _12: i128;
    let mut _13: u64;
    let mut _14: (i128, bool);
    let mut _16: u64;
    let mut _17: u64;
    let mut _18: (u64, bool);
    let mut _20: i128;
    let mut _21: u64;
    let mut _22: i128;
    let mut _23: u64;
    let mut _24: (i128, bool);
    let mut _26: u64;
    let mut _27: u64;
    let mut _28: (u64, bool);
    let mut _30: i128;
    let mut _31: u64;
    let mut _32: i128;
    let mut _33: u64;
    let mut _34: (i128, bool);
    let mut _36: i128;
    let mut _37: u64;
    let mut _38: i128;
    let mut _39: u64;
    let mut _40: (i128, bool);
    let _41: ();
    let mut _42: bool;
    let mut _43: i128;
    let mut _44: i128;
    let mut _45: i128;
    let mut _46: i128;
    let mut _47: (i128, bool);
    let mut _48: !;
    let _49: ();
    let mut _50: &str;
    let _51: &str;
    let mut _52: &std::string::String;
    let _53: &std::string::String;
    let _54: std::string::String;
    let mut _56: std::fmt::Arguments<'_>;
    let mut _57: &[&str];
    let mut _58: &[&str; 2];
    let _59: &[&str; 2];
    let _60: [&str; 2];
    let mut _61: &[core::fmt::rt::Argument<'_>];
    let mut _62: &[core::fmt::rt::Argument<'_>; 2];
    let _63: &[core::fmt::rt::Argument<'_>; 2];
    let _64: [core::fmt::rt::Argument<'_>; 2];
    let mut _65: (&i128, &i128);
    let mut _66: &i128;
    let _67: i128;
    let mut _68: i128;
    let mut _69: i128;
    let mut _70: (i128, bool);
    let mut _71: &i128;
    let mut _73: core::fmt::rt::Argument<'_>;
    let mut _74: &i128;
    let mut _75: core::fmt::rt::Argument<'_>;
    let mut _76: &i128;
    let mut _77: anchor_lang::error::Error;
    let mut _78: anchor_lang::error::AnchorError;
    let mut _79: std::string::String;
    let mut _80: &KaminoVaultError;
    let _81: KaminoVaultError;
    let mut _82: u32;
    let mut _83: KaminoVaultError;
    let mut _84: std::string::String;
    let mut _85: &KaminoVaultError;
    let _86: KaminoVaultError;
    let mut _87: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _88: anchor_lang::error::ErrorOrigin;
    let mut _89: anchor_lang::error::Source;
    let mut _90: std::option::Option<anchor_lang::error::ComparedValues>;
    let _91: ();
    let mut _92: bool;
    let mut _93: u64;
    let mut _94: u64;
    let mut _95: !;
    let _96: ();
    let mut _97: &str;
    let _98: &str;
    let mut _99: &std::string::String;
    let _100: &std::string::String;
    let _101: std::string::String;
    let mut _103: std::fmt::Arguments<'_>;
    let mut _104: &[&str];
    let mut _105: &[&str; 2];
    let _106: &[&str; 2];
    let _107: [&str; 2];
    let mut _108: &[core::fmt::rt::Argument<'_>];
    let mut _109: &[core::fmt::rt::Argument<'_>; 2];
    let _110: &[core::fmt::rt::Argument<'_>; 2];
    let _111: [core::fmt::rt::Argument<'_>; 2];
    let mut _112: core::fmt::rt::Argument<'_>;
    let mut _113: &u64;
    let _114: &u64;
    let mut _115: core::fmt::rt::Argument<'_>;
    let mut _116: &u64;
    let _117: &u64;
    let mut _118: anchor_lang::error::Error;
    let mut _119: anchor_lang::error::AnchorError;
    let mut _120: std::string::String;
    let mut _121: &KaminoVaultError;
    let _122: KaminoVaultError;
    let mut _123: u32;
    let mut _124: KaminoVaultError;
    let mut _125: std::string::String;
    let mut _126: &KaminoVaultError;
    let _127: KaminoVaultError;
    let mut _128: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _129: anchor_lang::error::ErrorOrigin;
    let mut _130: anchor_lang::error::Source;
    let mut _131: std::option::Option<anchor_lang::error::ComparedValues>;
    let _132: ();
    let mut _133: bool;
    let mut _134: i128;
    let mut _135: i128;
    let mut _136: !;
    let _137: ();
    let mut _138: &str;
    let _139: &str;
    let mut _140: &std::string::String;
    let _141: &std::string::String;
    let _142: std::string::String;
    let mut _144: std::fmt::Arguments<'_>;
    let mut _145: &[&str];
    let mut _146: &[&str; 2];
    let _147: &[&str; 2];
    let _148: [&str; 2];
    let mut _149: &[core::fmt::rt::Argument<'_>];
    let mut _150: &[core::fmt::rt::Argument<'_>; 2];
    let _151: &[core::fmt::rt::Argument<'_>; 2];
    let _152: [core::fmt::rt::Argument<'_>; 2];
    let mut _153: core::fmt::rt::Argument<'_>;
    let mut _154: &i128;
    let _155: &i128;
    let mut _156: core::fmt::rt::Argument<'_>;
    let mut _157: &i128;
    let _158: &i128;
    let mut _159: anchor_lang::error::Error;
    let mut _160: anchor_lang::error::AnchorError;
    let mut _161: std::string::String;
    let mut _162: &KaminoVaultError;
    let _163: KaminoVaultError;
    let mut _164: u32;
    let mut _165: KaminoVaultError;
    let mut _166: std::string::String;
    let mut _167: &KaminoVaultError;
    let _168: KaminoVaultError;
    let mut _169: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _170: anchor_lang::error::ErrorOrigin;
    let mut _171: anchor_lang::error::Source;
    let mut _172: std::option::Option<anchor_lang::error::ComparedValues>;
    let _173: ();
    let mut _174: bool;
    let mut _175: u64;
    let mut _176: u64;
    let mut _177: !;
    let _178: ();
    let mut _179: &str;
    let _180: &str;
    let mut _181: &std::string::String;
    let _182: &std::string::String;
    let _183: std::string::String;
    let mut _185: std::fmt::Arguments<'_>;
    let mut _186: &[&str];
    let mut _187: &[&str; 2];
    let _188: &[&str; 2];
    let _189: [&str; 2];
    let mut _190: &[core::fmt::rt::Argument<'_>];
    let mut _191: &[core::fmt::rt::Argument<'_>; 2];
    let _192: &[core::fmt::rt::Argument<'_>; 2];
    let _193: [core::fmt::rt::Argument<'_>; 2];
    let mut _194: core::fmt::rt::Argument<'_>;
    let mut _195: &u64;
    let _196: &u64;
    let mut _197: core::fmt::rt::Argument<'_>;
    let mut _198: &u64;
    let _199: &u64;
    let mut _200: anchor_lang::error::Error;
    let mut _201: anchor_lang::error::AnchorError;
    let mut _202: std::string::String;
    let mut _203: &KaminoVaultError;
    let _204: KaminoVaultError;
    let mut _205: u32;
    let mut _206: KaminoVaultError;
    let mut _207: std::string::String;
    let mut _208: &KaminoVaultError;
    let _209: KaminoVaultError;
    let mut _210: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _211: anchor_lang::error::ErrorOrigin;
    let mut _212: anchor_lang::error::Source;
    let mut _213: std::option::Option<anchor_lang::error::ComparedValues>;
    let _214: ();
    let mut _215: bool;
    let mut _216: i128;
    let mut _217: i128;
    let mut _218: u64;
    let mut _219: !;
    let _220: ();
    let mut _221: &str;
    let _222: &str;
    let mut _223: &std::string::String;
    let _224: &std::string::String;
    let _225: std::string::String;
    let mut _227: std::fmt::Arguments<'_>;
    let mut _228: &[&str];
    let mut _229: &[&str; 2];
    let _230: &[&str; 2];
    let _231: [&str; 2];
    let mut _232: &[core::fmt::rt::Argument<'_>];
    let mut _233: &[core::fmt::rt::Argument<'_>; 2];
    let _234: &[core::fmt::rt::Argument<'_>; 2];
    let _235: [core::fmt::rt::Argument<'_>; 2];
    let mut _236: (&u64, &i128);
    let mut _237: &u64;
    let mut _238: &i128;
    let mut _240: core::fmt::rt::Argument<'_>;
    let mut _241: &i128;
    let mut _242: core::fmt::rt::Argument<'_>;
    let mut _243: &u64;
    let mut _244: anchor_lang::error::Error;
    let mut _245: anchor_lang::error::AnchorError;
    let mut _246: std::string::String;
    let mut _247: &KaminoVaultError;
    let _248: KaminoVaultError;
    let mut _249: u32;
    let mut _250: KaminoVaultError;
    let mut _251: std::string::String;
    let mut _252: &KaminoVaultError;
    let _253: KaminoVaultError;
    let mut _254: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _255: anchor_lang::error::ErrorOrigin;
    let mut _256: anchor_lang::error::Source;
    let mut _257: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _258: ();
    let mut _274: &i128;
    let mut _275: &i128;
    let mut _276: &i128;
    let mut _277: &u64;
    scope 1 {
        debug shares_to_burn => _4;
        debug available_to_send_to_user => _5;
        debug invested_to_disinvest_ctokens => _6;
        debug invested_liquidity_to_send_to_user => _7;
        debug invested_liquidity_to_disinvest => _8;
        let _9: i128;
        scope 2 {
            debug token_vault_diff => _9;
            let _15: u64;
            scope 3 {
                debug ctoken_vault_decrease => _15;
                let _19: i128;
                scope 4 {
                    debug user_ata_increase => _19;
                    let _25: u64;
                    scope 5 {
                        debug user_shares_diff => _25;
                        let _29: i128;
                        scope 6 {
                            debug reserve_supply_liquidity_diff => _29;
                            let _35: i128;
                            scope 7 {
                                debug total_amount_sent_to_user => _35;
                                let _55: std::string::String;
                                let _72: (&i128, &i128);
                                let _102: std::string::String;
                                let _143: std::string::String;
                                let _184: std::string::String;
                                let _226: std::string::String;
                                let _239: (&u64, &i128);
                                let mut _259: &KaminoVaultError;
                                let mut _260: &KaminoVaultError;
                                let mut _261: &[&str; 2];
                                let mut _262: &KaminoVaultError;
                                let mut _263: &KaminoVaultError;
                                let mut _264: &[&str; 2];
                                let mut _265: &KaminoVaultError;
                                let mut _266: &KaminoVaultError;
                                let mut _267: &[&str; 2];
                                let mut _268: &KaminoVaultError;
                                let mut _269: &KaminoVaultError;
                                let mut _270: &[&str; 2];
                                let mut _271: &KaminoVaultError;
                                let mut _272: &KaminoVaultError;
                                let mut _273: &[&str; 2];
                                scope 8 {
                                    debug res => _55;
                                }
                                scope 9 {
                                    debug args => _72;
                                }
                                scope 10 {
                                    debug res => _102;
                                }
                                scope 11 {
                                    debug res => _143;
                                }
                                scope 12 {
                                    debug res => _184;
                                }
                                scope 13 {
                                    debug res => _226;
                                }
                                scope 14 {
                                    debug args => _239;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_4);
        _4 = (_3.0: u64);
        StorageLive(_5);
        _5 = (_3.1: u64);
        StorageLive(_6);
        _6 = (_3.2: u64);
        StorageLive(_7);
        _7 = (_3.3: u64);
        StorageLive(_8);
        _8 = (_3.4: u64);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = (_1.1: u64);
        _10 = <i128 as From<u64>>::from(move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = (_2.1: u64);
        _12 = <i128 as From<u64>>::from(move _13) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_13);
        _14 = CheckedSub(_10, _12);
        assert(!move (_14.1: bool), "attempt to compute `{} - {}`, which would overflow", move _10, move _12) -> [success: bb3, unwind continue];
    }

    bb3: {
        _9 = move (_14.0: i128);
        StorageDead(_12);
        StorageDead(_10);
        StorageLive(_15);
        StorageLive(_16);
        _16 = (_1.2: u64);
        StorageLive(_17);
        _17 = (_2.2: u64);
        _18 = CheckedSub(_16, _17);
        assert(!move (_18.1: bool), "attempt to compute `{} - {}`, which would overflow", move _16, move _17) -> [success: bb4, unwind continue];
    }

    bb4: {
        _15 = move (_18.0: u64);
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = (_2.3: u64);
        _20 = <i128 as From<u64>>::from(move _21) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = (_1.3: u64);
        _22 = <i128 as From<u64>>::from(move _23) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_23);
        _24 = CheckedSub(_20, _22);
        assert(!move (_24.1: bool), "attempt to compute `{} - {}`, which would overflow", move _20, move _22) -> [success: bb7, unwind continue];
    }

    bb7: {
        _19 = move (_24.0: i128);
        StorageDead(_22);
        StorageDead(_20);
        StorageLive(_25);
        StorageLive(_26);
        _26 = (_1.4: u64);
        StorageLive(_27);
        _27 = (_2.4: u64);
        _28 = CheckedSub(_26, _27);
        assert(!move (_28.1: bool), "attempt to compute `{} - {}`, which would overflow", move _26, move _27) -> [success: bb8, unwind continue];
    }

    bb8: {
        _25 = move (_28.0: u64);
        StorageDead(_27);
        StorageDead(_26);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = (_1.0: u64);
        _30 = <i128 as From<u64>>::from(move _31) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = (_2.0: u64);
        _32 = <i128 as From<u64>>::from(move _33) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_33);
        _34 = CheckedSub(_30, _32);
        assert(!move (_34.1: bool), "attempt to compute `{} - {}`, which would overflow", move _30, move _32) -> [success: bb11, unwind continue];
    }

    bb11: {
        _29 = move (_34.0: i128);
        StorageDead(_32);
        StorageDead(_30);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = _5;
        _36 = <i128 as From<u64>>::from(move _37) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = _7;
        _38 = <i128 as From<u64>>::from(move _39) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_39);
        _40 = CheckedAdd(_36, _38);
        assert(!move (_40.1: bool), "attempt to compute `{} + {}`, which would overflow", move _36, move _38) -> [success: bb14, unwind continue];
    }

    bb14: {
        _35 = move (_40.0: i128);
        StorageDead(_38);
        StorageDead(_36);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = _35;
        StorageLive(_44);
        StorageLive(_45);
        _45 = _29;
        StorageLive(_46);
        _46 = _9;
        _47 = CheckedAdd(_45, _46);
        assert(!move (_47.1: bool), "attempt to compute `{} + {}`, which would overflow", move _45, move _46) -> [success: bb15, unwind continue];
    }

    bb15: {
        _44 = move (_47.0: i128);
        StorageDead(_46);
        StorageDead(_45);
        _42 = Eq(move _43, move _44);
        switchInt(move _42) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        StorageDead(_44);
        StorageDead(_43);
        _41 = const ();
        StorageDead(_42);
        StorageDead(_41);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _93 = _15;
        StorageLive(_94);
        _94 = _6;
        _92 = Eq(move _93, move _94);
        switchInt(move _92) -> [0: bb31, otherwise: bb30];
    }

    bb17: {
        StorageDead(_44);
        StorageDead(_43);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _273 = const _;
        _59 = &(*_273);
        _58 = &(*_59);
        _57 = move _58 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_58);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = _29;
        StorageLive(_69);
        _69 = _9;
        _70 = CheckedAdd(_68, _69);
        assert(!move (_70.1: bool), "attempt to compute `{} + {}`, which would overflow", move _68, move _69) -> [success: bb18, unwind continue];
    }

    bb18: {
        _67 = move (_70.0: i128);
        StorageDead(_69);
        StorageDead(_68);
        _66 = &_67;
        StorageLive(_71);
        _71 = &_35;
        _65 = (move _66, move _71);
        StorageDead(_71);
        StorageDead(_66);
        StorageLive(_72);
        _72 = _65;
        StorageLive(_73);
        StorageLive(_74);
        _274 = deref_copy (_72.1: &i128);
        _74 = &(*_274);
        _73 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _74) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_74);
        StorageLive(_75);
        StorageLive(_76);
        _275 = deref_copy (_72.0: &i128);
        _76 = &(*_275);
        _75 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _76) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_76);
        _64 = [move _73, move _75];
        StorageDead(_75);
        StorageDead(_73);
        StorageDead(_72);
        _63 = &_64;
        _62 = &(*_63);
        _61 = move _62 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_62);
        _56 = Arguments::<'_>::new_v1(move _57, move _61) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_61);
        StorageDead(_57);
        _55 = format(move _56) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_56);
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_63);
        StorageDead(_59);
        _54 = move _55;
        StorageDead(_55);
        _53 = &_54;
        _52 = &(*_53);
        _51 = <String as Deref>::deref(move _52) -> [return: bb23, unwind: bb94];
    }

    bb23: {
        _50 = &(*_51);
        StorageDead(_52);
        _49 = solana_program::log::sol_log(move _50) -> [return: bb24, unwind: bb94];
    }

    bb24: {
        StorageDead(_50);
        drop(_54) -> [return: bb25, unwind: bb95];
    }

    bb25: {
        StorageDead(_54);
        StorageDead(_53);
        StorageDead(_51);
        StorageDead(_49);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _272 = const _;
        _80 = &(*_272);
        _79 = KaminoVaultError::name(move _80) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_80);
        StorageLive(_82);
        StorageLive(_83);
        _83 = KaminoVaultError::AmountToWithdrawDoesNotMatch;
        _82 = <KaminoVaultError as Into<u32>>::into(move _83) -> [return: bb27, unwind: bb93];
    }

    bb27: {
        StorageDead(_83);
        StorageLive(_84);
        StorageLive(_85);
        _271 = const _;
        _85 = &(*_271);
        _84 = <KaminoVaultError as ToString>::to_string(move _85) -> [return: bb28, unwind: bb93];
    }

    bb28: {
        StorageDead(_85);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\operations\\vault_checks.rs", line: const 51_u32 };
        _88 = anchor_lang::error::ErrorOrigin::Source(move _89);
        StorageDead(_89);
        _87 = Option::<ErrorOrigin>::Some(move _88);
        StorageDead(_88);
        StorageLive(_90);
        _90 = Option::<ComparedValues>::None;
        _78 = anchor_lang::error::AnchorError { error_name: move _79, error_code_number: move _82, error_msg: move _84, error_origin: move _87, compared_values: move _90 };
        StorageDead(_90);
        StorageDead(_87);
        StorageDead(_84);
        StorageDead(_82);
        StorageDead(_79);
        _77 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _78) -> [return: bb29, unwind: bb95];
    }

    bb29: {
        StorageDead(_78);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _77);
        StorageDead(_77);
        StorageDead(_42);
        StorageDead(_41);
        goto -> bb83;
    }

    bb30: {
        StorageDead(_94);
        StorageDead(_93);
        _91 = const ();
        StorageDead(_92);
        StorageDead(_91);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        _134 = _19;
        StorageLive(_135);
        _135 = _35;
        _133 = Eq(move _134, move _135);
        switchInt(move _133) -> [0: bb44, otherwise: bb43];
    }

    bb31: {
        StorageDead(_94);
        StorageDead(_93);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        _270 = const _;
        _106 = &(*_270);
        _105 = &(*_106);
        _104 = move _105 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_105);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        _114 = &_15;
        _113 = &(*_114);
        _112 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _113) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_113);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _117 = &_6;
        _116 = &(*_117);
        _115 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _116) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_116);
        _111 = [move _112, move _115];
        StorageDead(_115);
        StorageDead(_112);
        _110 = &_111;
        _109 = &(*_110);
        _108 = move _109 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_109);
        _103 = Arguments::<'_>::new_v1(move _104, move _108) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_108);
        StorageDead(_104);
        _102 = format(move _103) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_103);
        StorageDead(_117);
        StorageDead(_114);
        StorageDead(_111);
        StorageDead(_110);
        StorageDead(_106);
        _101 = move _102;
        StorageDead(_102);
        _100 = &_101;
        _99 = &(*_100);
        _98 = <String as Deref>::deref(move _99) -> [return: bb36, unwind: bb92];
    }

    bb36: {
        _97 = &(*_98);
        StorageDead(_99);
        _96 = solana_program::log::sol_log(move _97) -> [return: bb37, unwind: bb92];
    }

    bb37: {
        StorageDead(_97);
        drop(_101) -> [return: bb38, unwind: bb95];
    }

    bb38: {
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_98);
        StorageDead(_96);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        _269 = const _;
        _121 = &(*_269);
        _120 = KaminoVaultError::name(move _121) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_121);
        StorageLive(_123);
        StorageLive(_124);
        _124 = KaminoVaultError::LiquidityToWithdrawDoesNotMatch;
        _123 = <KaminoVaultError as Into<u32>>::into(move _124) -> [return: bb40, unwind: bb91];
    }

    bb40: {
        StorageDead(_124);
        StorageLive(_125);
        StorageLive(_126);
        _268 = const _;
        _126 = &(*_268);
        _125 = <KaminoVaultError as ToString>::to_string(move _126) -> [return: bb41, unwind: bb91];
    }

    bb41: {
        StorageDead(_126);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _130 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\operations\\vault_checks.rs", line: const 60_u32 };
        _129 = anchor_lang::error::ErrorOrigin::Source(move _130);
        StorageDead(_130);
        _128 = Option::<ErrorOrigin>::Some(move _129);
        StorageDead(_129);
        StorageLive(_131);
        _131 = Option::<ComparedValues>::None;
        _119 = anchor_lang::error::AnchorError { error_name: move _120, error_code_number: move _123, error_msg: move _125, error_origin: move _128, compared_values: move _131 };
        StorageDead(_131);
        StorageDead(_128);
        StorageDead(_125);
        StorageDead(_123);
        StorageDead(_120);
        _118 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _119) -> [return: bb42, unwind: bb95];
    }

    bb42: {
        StorageDead(_119);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _118);
        StorageDead(_118);
        StorageDead(_92);
        StorageDead(_91);
        goto -> bb83;
    }

    bb43: {
        StorageDead(_135);
        StorageDead(_134);
        _132 = const ();
        StorageDead(_133);
        StorageDead(_132);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        _175 = _25;
        StorageLive(_176);
        _176 = _4;
        _174 = Eq(move _175, move _176);
        switchInt(move _174) -> [0: bb57, otherwise: bb56];
    }

    bb44: {
        StorageDead(_135);
        StorageDead(_134);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        _267 = const _;
        _147 = &(*_267);
        _146 = &(*_147);
        _145 = move _146 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_146);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        _155 = &_19;
        _154 = &(*_155);
        _153 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _154) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_154);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        _158 = &_35;
        _157 = &(*_158);
        _156 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _157) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_157);
        _152 = [move _153, move _156];
        StorageDead(_156);
        StorageDead(_153);
        _151 = &_152;
        _150 = &(*_151);
        _149 = move _150 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_150);
        _144 = Arguments::<'_>::new_v1(move _145, move _149) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_149);
        StorageDead(_145);
        _143 = format(move _144) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_144);
        StorageDead(_158);
        StorageDead(_155);
        StorageDead(_152);
        StorageDead(_151);
        StorageDead(_147);
        _142 = move _143;
        StorageDead(_143);
        _141 = &_142;
        _140 = &(*_141);
        _139 = <String as Deref>::deref(move _140) -> [return: bb49, unwind: bb90];
    }

    bb49: {
        _138 = &(*_139);
        StorageDead(_140);
        _137 = solana_program::log::sol_log(move _138) -> [return: bb50, unwind: bb90];
    }

    bb50: {
        StorageDead(_138);
        drop(_142) -> [return: bb51, unwind: bb95];
    }

    bb51: {
        StorageDead(_142);
        StorageDead(_141);
        StorageDead(_139);
        StorageDead(_137);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        _266 = const _;
        _162 = &(*_266);
        _161 = KaminoVaultError::name(move _162) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_162);
        StorageLive(_164);
        StorageLive(_165);
        _165 = KaminoVaultError::UserReceivedAmountDoesNotMatch;
        _164 = <KaminoVaultError as Into<u32>>::into(move _165) -> [return: bb53, unwind: bb89];
    }

    bb53: {
        StorageDead(_165);
        StorageLive(_166);
        StorageLive(_167);
        _265 = const _;
        _167 = &(*_265);
        _166 = <KaminoVaultError as ToString>::to_string(move _167) -> [return: bb54, unwind: bb89];
    }

    bb54: {
        StorageDead(_167);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        _171 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\operations\\vault_checks.rs", line: const 66_u32 };
        _170 = anchor_lang::error::ErrorOrigin::Source(move _171);
        StorageDead(_171);
        _169 = Option::<ErrorOrigin>::Some(move _170);
        StorageDead(_170);
        StorageLive(_172);
        _172 = Option::<ComparedValues>::None;
        _160 = anchor_lang::error::AnchorError { error_name: move _161, error_code_number: move _164, error_msg: move _166, error_origin: move _169, compared_values: move _172 };
        StorageDead(_172);
        StorageDead(_169);
        StorageDead(_166);
        StorageDead(_164);
        StorageDead(_161);
        _159 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _160) -> [return: bb55, unwind: bb95];
    }

    bb55: {
        StorageDead(_160);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _159);
        StorageDead(_159);
        StorageDead(_133);
        StorageDead(_132);
        goto -> bb83;
    }

    bb56: {
        StorageDead(_176);
        StorageDead(_175);
        _173 = const ();
        StorageDead(_174);
        StorageDead(_173);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        _216 = _29;
        StorageLive(_217);
        StorageLive(_218);
        _218 = _8;
        _217 = <i128 as From<u64>>::from(move _218) -> [return: bb69, unwind continue];
    }

    bb57: {
        StorageDead(_176);
        StorageDead(_175);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        _264 = const _;
        _188 = &(*_264);
        _187 = &(*_188);
        _186 = move _187 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_187);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        _196 = &_25;
        _195 = &(*_196);
        _194 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _195) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_195);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        _199 = &_4;
        _198 = &(*_199);
        _197 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _198) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_198);
        _193 = [move _194, move _197];
        StorageDead(_197);
        StorageDead(_194);
        _192 = &_193;
        _191 = &(*_192);
        _190 = move _191 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_191);
        _185 = Arguments::<'_>::new_v1(move _186, move _190) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_190);
        StorageDead(_186);
        _184 = format(move _185) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_185);
        StorageDead(_199);
        StorageDead(_196);
        StorageDead(_193);
        StorageDead(_192);
        StorageDead(_188);
        _183 = move _184;
        StorageDead(_184);
        _182 = &_183;
        _181 = &(*_182);
        _180 = <String as Deref>::deref(move _181) -> [return: bb62, unwind: bb88];
    }

    bb62: {
        _179 = &(*_180);
        StorageDead(_181);
        _178 = solana_program::log::sol_log(move _179) -> [return: bb63, unwind: bb88];
    }

    bb63: {
        StorageDead(_179);
        drop(_183) -> [return: bb64, unwind: bb95];
    }

    bb64: {
        StorageDead(_183);
        StorageDead(_182);
        StorageDead(_180);
        StorageDead(_178);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        _263 = const _;
        _203 = &(*_263);
        _202 = KaminoVaultError::name(move _203) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_203);
        StorageLive(_205);
        StorageLive(_206);
        _206 = KaminoVaultError::SharesBurnedAmountDoesNotMatch;
        _205 = <KaminoVaultError as Into<u32>>::into(move _206) -> [return: bb66, unwind: bb87];
    }

    bb66: {
        StorageDead(_206);
        StorageLive(_207);
        StorageLive(_208);
        _262 = const _;
        _208 = &(*_262);
        _207 = <KaminoVaultError as ToString>::to_string(move _208) -> [return: bb67, unwind: bb87];
    }

    bb67: {
        StorageDead(_208);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        _212 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\operations\\vault_checks.rs", line: const 72_u32 };
        _211 = anchor_lang::error::ErrorOrigin::Source(move _212);
        StorageDead(_212);
        _210 = Option::<ErrorOrigin>::Some(move _211);
        StorageDead(_211);
        StorageLive(_213);
        _213 = Option::<ComparedValues>::None;
        _201 = anchor_lang::error::AnchorError { error_name: move _202, error_code_number: move _205, error_msg: move _207, error_origin: move _210, compared_values: move _213 };
        StorageDead(_213);
        StorageDead(_210);
        StorageDead(_207);
        StorageDead(_205);
        StorageDead(_202);
        _200 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _201) -> [return: bb68, unwind: bb95];
    }

    bb68: {
        StorageDead(_201);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _200);
        StorageDead(_200);
        StorageDead(_174);
        StorageDead(_173);
        goto -> bb83;
    }

    bb69: {
        StorageDead(_218);
        _215 = Eq(move _216, move _217);
        switchInt(move _215) -> [0: bb71, otherwise: bb70];
    }

    bb70: {
        StorageDead(_217);
        StorageDead(_216);
        _214 = const ();
        StorageDead(_215);
        StorageDead(_214);
        StorageLive(_258);
        _258 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _258);
        StorageDead(_258);
        StorageDead(_35);
        StorageDead(_29);
        StorageDead(_25);
        StorageDead(_19);
        StorageDead(_15);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb84;
    }

    bb71: {
        StorageDead(_217);
        StorageDead(_216);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        _261 = const _;
        _230 = &(*_261);
        _229 = &(*_230);
        _228 = move _229 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_229);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        _237 = &_8;
        StorageLive(_238);
        _238 = &_29;
        _236 = (move _237, move _238);
        StorageDead(_238);
        StorageDead(_237);
        StorageLive(_239);
        _239 = _236;
        StorageLive(_240);
        StorageLive(_241);
        _276 = deref_copy (_239.1: &i128);
        _241 = &(*_276);
        _240 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _241) -> [return: bb72, unwind continue];
    }

    bb72: {
        StorageDead(_241);
        StorageLive(_242);
        StorageLive(_243);
        _277 = deref_copy (_239.0: &u64);
        _243 = &(*_277);
        _242 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _243) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_243);
        _235 = [move _240, move _242];
        StorageDead(_242);
        StorageDead(_240);
        StorageDead(_239);
        _234 = &_235;
        _233 = &(*_234);
        _232 = move _233 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_233);
        _227 = Arguments::<'_>::new_v1(move _228, move _232) -> [return: bb74, unwind continue];
    }

    bb74: {
        StorageDead(_232);
        StorageDead(_228);
        _226 = format(move _227) -> [return: bb75, unwind continue];
    }

    bb75: {
        StorageDead(_227);
        StorageDead(_236);
        StorageDead(_235);
        StorageDead(_234);
        StorageDead(_230);
        _225 = move _226;
        StorageDead(_226);
        _224 = &_225;
        _223 = &(*_224);
        _222 = <String as Deref>::deref(move _223) -> [return: bb76, unwind: bb86];
    }

    bb76: {
        _221 = &(*_222);
        StorageDead(_223);
        _220 = solana_program::log::sol_log(move _221) -> [return: bb77, unwind: bb86];
    }

    bb77: {
        StorageDead(_221);
        drop(_225) -> [return: bb78, unwind: bb95];
    }

    bb78: {
        StorageDead(_225);
        StorageDead(_224);
        StorageDead(_222);
        StorageDead(_220);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        _260 = const _;
        _247 = &(*_260);
        _246 = KaminoVaultError::name(move _247) -> [return: bb79, unwind continue];
    }

    bb79: {
        StorageDead(_247);
        StorageLive(_249);
        StorageLive(_250);
        _250 = KaminoVaultError::DisinvestedLiquidityAmountDoesNotMatch;
        _249 = <KaminoVaultError as Into<u32>>::into(move _250) -> [return: bb80, unwind: bb85];
    }

    bb80: {
        StorageDead(_250);
        StorageLive(_251);
        StorageLive(_252);
        _259 = const _;
        _252 = &(*_259);
        _251 = <KaminoVaultError as ToString>::to_string(move _252) -> [return: bb81, unwind: bb85];
    }

    bb81: {
        StorageDead(_252);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        _256 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\operations\\vault_checks.rs", line: const 78_u32 };
        _255 = anchor_lang::error::ErrorOrigin::Source(move _256);
        StorageDead(_256);
        _254 = Option::<ErrorOrigin>::Some(move _255);
        StorageDead(_255);
        StorageLive(_257);
        _257 = Option::<ComparedValues>::None;
        _245 = anchor_lang::error::AnchorError { error_name: move _246, error_code_number: move _249, error_msg: move _251, error_origin: move _254, compared_values: move _257 };
        StorageDead(_257);
        StorageDead(_254);
        StorageDead(_251);
        StorageDead(_249);
        StorageDead(_246);
        _244 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _245) -> [return: bb82, unwind: bb95];
    }

    bb82: {
        StorageDead(_245);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _244);
        StorageDead(_244);
        StorageDead(_215);
        StorageDead(_214);
        goto -> bb83;
    }

    bb83: {
        StorageDead(_35);
        StorageDead(_29);
        StorageDead(_25);
        StorageDead(_19);
        StorageDead(_15);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb84;
    }

    bb84: {
        return;
    }

    bb85 (cleanup): {
        drop(_246) -> [return: bb95, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        drop(_225) -> [return: bb95, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        drop(_202) -> [return: bb95, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        drop(_183) -> [return: bb95, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        drop(_161) -> [return: bb95, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        drop(_142) -> [return: bb95, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        drop(_120) -> [return: bb95, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        drop(_101) -> [return: bb95, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        drop(_79) -> [return: bb95, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        drop(_54) -> [return: bb95, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        resume;
    }
}
