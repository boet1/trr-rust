digraph Mir_0_885 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn &lt;handlers::handler_init_vault::InitVault&lt;'info&gt; as anchor_lang::Accounts&lt;'info, InitVaultBumps&gt;&gt;::try_accounts::{closure#8}(_1: Closure(DefId(0:885 ~ kamino_vault[b3c4]::handlers::handler_init_vault::{impl#0}::try_accounts::{closure#8}), [ReErased, i32, Binder(extern &quot;RustCall&quot; fn((&amp;ReErased anchor_lang::prelude::Pubkey,)) -&gt; bool, []), ()]), _2: &amp;ReErased anchor_lang::prelude::Pubkey) -&gt; bool<br align="left"/>let mut _3: std::option::Option&lt;bool&gt;;<br align="left"/>let mut _4: std::option::Option&lt;&amp;ReErased &amp;ReErased anchor_lang::prelude::Pubkey&gt;;<br align="left"/>let mut _5: &amp;ReErased std::option::Option&lt;&amp;ReErased anchor_lang::prelude::Pubkey&gt;;<br align="left"/>let _6: std::option::Option&lt;&amp;ReErased anchor_lang::prelude::Pubkey&gt;;<br align="left"/>let mut _7: Closure(DefId(0:886 ~ kamino_vault[b3c4]::handlers::handler_init_vault::{impl#0}::try_accounts::{closure#8}::{closure#0}), [ReErased, i32, Binder(extern &quot;RustCall&quot; fn((&amp;ReErased &amp;ReErased anchor_lang::prelude::Pubkey,)) -&gt; bool, []), (&amp;ReErased &amp;ReErased anchor_lang::prelude::Pubkey,)]);<br align="left"/>let mut _8: &amp;ReErased &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _9: &amp;ReErased std::option::Option&lt;&amp;ReErased anchor_lang::prelude::Pubkey&gt;;<br align="left"/>debug fa =&gt; _2;<br align="left"/>>;
    bb0__0_885 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>_9 = const _<br/>_5 = &amp;(*_9)<br/></td></tr><tr><td align="left">_4 = Option::&lt;&amp;anchor_lang::prelude::Pubkey&gt;::as_ref(move _5)</td></tr></table>>];
    bb1__0_885 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = &amp;_2<br/>_7 = {closure@programs\kvault\src\handlers\handler_init_vault.rs:78:10: 78:18} { fa: move _8 }<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">_3 = Option::&lt;&amp;&amp;anchor_lang::prelude::Pubkey&gt;::map::&lt;bool, {closure@programs\kvault\src\handlers\handler_init_vault.rs:78:10: 78:18}&gt;(move _4, move _7)</td></tr></table>>];
    bb2__0_885 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">_0 = Option::&lt;bool&gt;::unwrap_or(move _3, const true)</td></tr></table>>];
    bb3__0_885 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_3)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_885 -> bb1__0_885 [label="return"];
    bb1__0_885 -> bb2__0_885 [label="return"];
    bb2__0_885 -> bb3__0_885 [label="return"];
}
