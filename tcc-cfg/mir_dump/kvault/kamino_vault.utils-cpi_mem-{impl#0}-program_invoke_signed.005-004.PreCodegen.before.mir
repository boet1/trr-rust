// MIR for `cpi_mem::<impl at programs\kvault\src\utils\cpi_mem.rs:24:1: 24:35>::program_invoke_signed` before PreCodegen

fn cpi_mem::<impl at programs\kvault\src\utils\cpi_mem.rs:24:1: 24:35>::program_invoke_signed(_1: &mut cpi_mem::CpiMemoryLender<'_>, _2: &anchor_lang::prelude::Pubkey, _3: &[AccountMeta], _4: &[u8], _5: &[&[&[u8]]]) -> std::result::Result<(), anchor_lang::prelude::ProgramError> {
    debug self => _1;
    debug program_id => _2;
    debug ix_accounts => _3;
    debug ix_data => _4;
    debug signer_seeds => _5;
    let mut _0: std::result::Result<(), anchor_lang::prelude::ProgramError>;
    let _6: solana_program::instruction::Instruction;
    let mut _7: &mut utils::cpi_mem::CpiMemoryLender<'_>;
    let mut _8: &anchor_lang::prelude::Pubkey;
    let mut _9: &[anchor_lang::prelude::AccountMeta];
    let mut _10: &[u8];
    let mut _12: &solana_program::instruction::Instruction;
    let _13: &solana_program::instruction::Instruction;
    let mut _14: &[anchor_lang::prelude::AccountInfo<'_>];
    let _15: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _16: &std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>;
    let _17: &std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _18: &[&[&[u8]]];
    let _19: ();
    let mut _20: &mut utils::cpi_mem::CpiMemoryLender<'_>;
    let mut _21: solana_program::instruction::Instruction;
    let mut _22: bool;
    scope 1 {
        debug ix => _6;
        let _11: std::result::Result<(), anchor_lang::prelude::ProgramError>;
        scope 2 {
            debug res => _11;
        }
    }

    bb0: {
        _22 = const false;
        StorageLive(_6);
        StorageLive(_7);
        _7 = &mut (*_1);
        StorageLive(_8);
        _8 = &(*_2);
        StorageLive(_9);
        _9 = &(*_3);
        StorageLive(_10);
        _10 = &(*_4);
        _22 = const true;
        _6 = cpi_mem::CpiMemoryLender::<'_>::ix(move _7, move _8, move _9, move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &_6;
        _12 = &(*_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = &((*_1).2: std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>);
        _16 = &(*_17);
        _15 = <Vec<anchor_lang::prelude::AccountInfo<'_>> as Deref>::deref(move _16) -> [return: bb2, unwind: bb8];
    }

    bb2: {
        _14 = &(*_15);
        StorageDead(_16);
        StorageLive(_18);
        _18 = &(*_5);
        _11 = invoke_signed(move _12, move _14, move _18) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        StorageDead(_18);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_13);
        StorageLive(_19);
        StorageLive(_20);
        _20 = &mut (*_1);
        StorageLive(_21);
        _22 = const false;
        _21 = move _6;
        _19 = cpi_mem::CpiMemoryLender::<'_>::del_ix(move _20, move _21) -> [return: bb4, unwind: bb5];
    }

    bb4: {
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        _0 = move _11;
        StorageDead(_11);
        _22 = const false;
        StorageDead(_6);
        return;
    }

    bb5 (cleanup): {
        drop(_11) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        resume;
    }

    bb7 (cleanup): {
        drop(_6) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        switchInt(_22) -> [0: bb6, otherwise: bb7];
    }
}
