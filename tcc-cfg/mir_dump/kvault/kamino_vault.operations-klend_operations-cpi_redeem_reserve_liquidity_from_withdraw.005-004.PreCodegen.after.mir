// MIR for `cpi_redeem_reserve_liquidity_from_withdraw` after PreCodegen

fn cpi_redeem_reserve_liquidity_from_withdraw(_1: &handlers::handler_withdraw::WithdrawFromAvailable<'_>, _2: &handlers::handler_withdraw::WithdrawFromInvested<'_>, _3: &mut cpi_mem::CpiMemoryLender<'_>, _4: u8, _5: u64) -> std::result::Result<(), anchor_lang::error::Error> {
    debug from_available_ctx => _1;
    debug from_invested_ctx => _2;
    debug cpi => _3;
    debug base_vault_authority_bump => _4;
    debug collateral_amount => _5;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _6: &handlers::handler_withdraw::WithdrawFromAvailable<'_>;
    let mut _9: &kamino_lending::accounts::RedeemReserveCollateral;
    let _10: kamino_lending::accounts::RedeemReserveCollateral;
    let mut _11: anchor_lang::prelude::Pubkey;
    let mut _12: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _13: anchor_lang::prelude::Pubkey;
    let mut _14: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _15: anchor_lang::prelude::Pubkey;
    let mut _16: &anchor_lang::prelude::AccountLoader<'_, kamino_lending::Reserve>;
    let mut _17: anchor_lang::prelude::Pubkey;
    let mut _18: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _19: anchor_lang::prelude::Pubkey;
    let mut _20: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _21: anchor_lang::prelude::Pubkey;
    let mut _22: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _23: anchor_lang::prelude::Pubkey;
    let mut _24: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _25: anchor_lang::prelude::Pubkey;
    let mut _26: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _27: anchor_lang::prelude::Pubkey;
    let mut _28: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _29: anchor_lang::prelude::Pubkey;
    let mut _30: &anchor_lang::prelude::AccountInfo<'_>;
    let _31: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _32: &anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _33: anchor_lang::prelude::Pubkey;
    let mut _34: &anchor_lang::prelude::AccountInfo<'_>;
    let _35: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _36: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _37: anchor_lang::prelude::Pubkey;
    let mut _38: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _39: std::option::Option<bool>;
    let _41: ();
    let mut _42: &mut [u8];
    let mut _43: &mut [u8];
    let mut _44: &mut [u8; 40];
    let mut _45: std::ops::Range<usize>;
    let mut _46: &[u8];
    let mut _47: &[u8; 8];
    let _48: &[u8; 8];
    let _49: [u8; 8];
    let mut _51: &mut [u8];
    let mut _52: &mut [u8; 40];
    let mut _53: std::ops::Range<usize>;
    let _54: ();
    let mut _55: std::result::Result<(), std::io::Error>;
    let mut _56: &mut &mut [u8];
    let mut _57: &u64;
    let _58: &u64;
    let mut _60: std::boxed::Box<[u8]>;
    let mut _61: std::boxed::Box<[u8; 1]>;
    let mut _62: usize;
    let mut _63: usize;
    let mut _64: *mut u8;
    let mut _65: std::boxed::Box<[u8; 1]>;
    let mut _66: u8;
    let mut _68: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _70: &[u8];
    let mut _71: &[u8; 9];
    let _72: &[u8; 9];
    let mut _73: &[u8];
    let mut _74: &anchor_lang::prelude::Pubkey;
    let mut _75: &[u8];
    let _76: &[u8];
    let mut _77: &std::vec::Vec<u8>;
    let _79: [&[&[u8]]; 1];
    let mut _80: &[&[u8]];
    let _81: &[&[u8]];
    let mut _82: &[&[u8]; 3];
    let mut _83: std::ops::RangeFull;
    let mut _84: std::result::Result<(), anchor_lang::prelude::ProgramError>;
    let mut _85: &mut utils::cpi_mem::CpiMemoryLender<'_>;
    let mut _86: &anchor_lang::prelude::Pubkey;
    let _87: &anchor_lang::prelude::Pubkey;
    let _88: anchor_lang::prelude::Pubkey;
    let mut _89: &anchor_lang::prelude::AccountInfo<'_>;
    let _90: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _91: &anchor_lang::prelude::Program<'_, kamino_lending::program::KaminoLending>;
    let mut _92: &[anchor_lang::prelude::AccountMeta];
    let _93: &[anchor_lang::prelude::AccountMeta];
    let mut _94: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let _95: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _96: &[u8];
    let mut _97: &[u8; 40];
    let _98: &[u8; 40];
    let mut _99: &[&[&[u8]]];
    let mut _100: &[&[&[u8]]; 1];
    let mut _102: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _103: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _104: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _105: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _106: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _107: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _108: *const [u8; 1];
    scope 1 {
        debug from_available_accounts => _6;
        let _7: &handlers::handler_withdraw::WithdrawFromInvested<'_>;
        scope 2 {
            debug from_invested_accounts => _7;
            let _8: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
            scope 3 {
                debug accs => _8;
                let mut _40: [u8; 40];
                scope 4 {
                    debug data => _40;
                    let mut _50: &mut [u8];
                    let mut _101: &[u8; 8];
                    scope 5 {
                        debug writer => _50;
                        let _59: std::vec::Vec<u8>;
                        scope 6 {
                            debug base_vault_authority_bump => _59;
                            let _67: anchor_lang::prelude::Pubkey;
                            scope 8 {
                                debug vault_state_key => _67;
                                let _69: [&[u8]; 3];
                                scope 9 {
                                    debug inner_seeds => _69;
                                    let _78: &[&[&[u8]]; 1];
                                    scope 10 {
                                        debug signer_seeds => _78;
                                    }
                                }
                            }
                        }
                        scope 7 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_6);
        _6 = _1;
        StorageLive(_7);
        _7 = _2;
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &((*_6).3: anchor_lang::prelude::AccountInfo<'_>);
        _11 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = &((*_7).3: anchor_lang::prelude::AccountInfo<'_>);
        _13 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _14) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &((*_7).1: anchor_lang::prelude::AccountLoader<'_, kamino_lending::Reserve>);
        _15 = <anchor_lang::prelude::AccountLoader<'_, kamino_lending::Reserve> as anchor_lang::Key>::key(move _16) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = &((*_7).4: anchor_lang::prelude::AccountInfo<'_>);
        _17 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _18) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = &((*_6).5: anchor_lang::prelude::AccountInfo<'_>);
        _19 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _20) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = &((*_7).6: anchor_lang::prelude::AccountInfo<'_>);
        _21 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _22) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_22);
        StorageLive(_23);
        StorageLive(_24);
        _102 = deref_copy ((*_7).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _105 = (((_102.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _24 = &(*_105);
        _23 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _24) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_24);
        StorageLive(_25);
        StorageLive(_26);
        _103 = deref_copy ((*_7).2: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _106 = (((_103.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _26 = &(*_106);
        _25 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _26) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_26);
        StorageLive(_27);
        StorageLive(_28);
        _104 = deref_copy ((*_6).2: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _107 = (((_104.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _28 = &(*_107);
        _27 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _28) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = &((*_7).7: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>);
        _31 = <anchor_lang::prelude::Program<'_, Token> as Deref>::deref(move _32) -> [return: bb10, unwind continue];
    }

    bb10: {
        _30 = &(*_31);
        StorageDead(_32);
        _29 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _30) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_30);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = &((*_6).8: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _35 = <anchor_lang::prelude::Interface<'_, TokenInterface> as Deref>::deref(move _36) -> [return: bb12, unwind continue];
    }

    bb12: {
        _34 = &(*_35);
        StorageDead(_36);
        _33 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _34) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_34);
        StorageLive(_37);
        StorageLive(_38);
        _38 = &((*_7).8: anchor_lang::prelude::AccountInfo<'_>);
        _37 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _38) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_38);
        _10 = kamino_lending::accounts::RedeemReserveCollateral { owner: move _11, lending_market: move _13, reserve: move _15, lending_market_authority: move _17, reserve_liquidity_mint: move _19, reserve_collateral_mint: move _21, reserve_liquidity_supply: move _23, user_source_collateral: move _25, user_destination_liquidity: move _27, collateral_token_program: move _29, liquidity_token_program: move _33, instruction_sysvar_account: move _37 };
        _9 = &_10;
        StorageDead(_37);
        StorageDead(_33);
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_11);
        StorageLive(_39);
        _39 = Option::<bool>::None;
        _8 = <kamino_lending::accounts::RedeemReserveCollateral as anchor_lang::ToAccountMetas>::to_account_metas(move _9, move _39) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_39);
        StorageDead(_9);
        StorageDead(_35);
        StorageDead(_31);
        StorageDead(_10);
        StorageLive(_40);
        _40 = [const 0_u8; 40];
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = &mut _40;
        StorageLive(_45);
        _45 = std::ops::Range::<usize> { start: const 0_usize, end: const 8_usize };
        _43 = <[u8; 40] as IndexMut<std::ops::Range<usize>>>::index_mut(move _44, move _45) -> [return: bb16, unwind: bb35];
    }

    bb16: {
        _42 = &mut (*_43);
        StorageDead(_45);
        StorageDead(_44);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _101 = const _;
        _48 = &(*_101);
        _47 = &(*_48);
        _46 = move _47 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_47);
        _41 = core::slice::<impl [u8]>::copy_from_slice(move _42, move _46) -> [return: bb17, unwind: bb35];
    }

    bb17: {
        StorageDead(_46);
        StorageDead(_42);
        StorageDead(_48);
        StorageDead(_43);
        StorageDead(_41);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = &mut _40;
        StorageLive(_53);
        _53 = std::ops::Range::<usize> { start: const 8_usize, end: const 40_usize };
        _51 = <[u8; 40] as IndexMut<std::ops::Range<usize>>>::index_mut(move _52, move _53) -> [return: bb18, unwind: bb35];
    }

    bb18: {
        StorageDead(_53);
        StorageDead(_52);
        _50 = &mut (*_51);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = &mut _50;
        StorageLive(_57);
        StorageLive(_58);
        _58 = &_5;
        _57 = &(*_58);
        _55 = to_writer::<u64, &mut &mut [u8]>(move _56, move _57) -> [return: bb19, unwind: bb35];
    }

    bb19: {
        StorageDead(_57);
        StorageDead(_56);
        _54 = std::result::Result::<(), std::io::Error>::unwrap(move _55) -> [return: bb20, unwind: bb35];
    }

    bb20: {
        StorageDead(_55);
        StorageDead(_58);
        StorageDead(_54);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _62 = SizeOf([u8; 1]);
        _63 = AlignOf([u8; 1]);
        _64 = alloc::alloc::exchange_malloc(move _62, move _63) -> [return: bb21, unwind: bb35];
    }

    bb21: {
        StorageLive(_65);
        _65 = ShallowInitBox(move _64, [u8; 1]);
        StorageLive(_66);
        _66 = _4;
        _108 = (((_65.0: std::ptr::Unique<[u8; 1]>).0: std::ptr::NonNull<[u8; 1]>).0: *const [u8; 1]);
        (*_108) = [move _66];
        StorageDead(_66);
        _61 = move _65;
        _60 = move _61 as std::boxed::Box<[u8]> (PointerCoercion(Unsize));
        StorageDead(_65);
        StorageDead(_61);
        _59 = std::slice::<impl [u8]>::into_vec::<std::alloc::Global>(move _60) -> [return: bb22, unwind: bb35];
    }

    bb22: {
        StorageDead(_60);
        StorageLive(_67);
        StorageLive(_68);
        _68 = &((*_6).1: anchor_lang::prelude::AccountLoader<'_, state::VaultState>);
        _67 = <anchor_lang::prelude::AccountLoader<'_, state::VaultState> as anchor_lang::Key>::key(move _68) -> [return: bb23, unwind: bb34];
    }

    bb23: {
        StorageDead(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        _72 = const _;
        _71 = &(*_72);
        _70 = move _71 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_71);
        StorageLive(_73);
        StorageLive(_74);
        _74 = &_67;
        _73 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _74) -> [return: bb24, unwind: bb34];
    }

    bb24: {
        StorageDead(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _77 = &_59;
        _76 = <Vec<u8> as AsRef<[u8]>>::as_ref(move _77) -> [return: bb25, unwind: bb34];
    }

    bb25: {
        _75 = &(*_76);
        StorageDead(_77);
        _69 = [move _70, move _73, move _75];
        StorageDead(_75);
        StorageDead(_73);
        StorageDead(_70);
        StorageDead(_76);
        StorageDead(_72);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = &_69;
        StorageLive(_83);
        _83 = RangeFull;
        _81 = <[&[u8]; 3] as Index<RangeFull>>::index(move _82, move _83) -> [return: bb26, unwind: bb34];
    }

    bb26: {
        StorageDead(_83);
        StorageDead(_82);
        _80 = &(*_81);
        _79 = [move _80];
        StorageDead(_80);
        _78 = &_79;
        StorageLive(_84);
        StorageLive(_85);
        _85 = &mut (*_3);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = &((*_6).10: anchor_lang::prelude::Program<'_, kamino_lending::program::KaminoLending>);
        _90 = <anchor_lang::prelude::Program<'_, KaminoLending> as Deref>::deref(move _91) -> [return: bb27, unwind: bb34];
    }

    bb27: {
        _89 = &(*_90);
        StorageDead(_91);
        _88 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _89) -> [return: bb28, unwind: bb34];
    }

    bb28: {
        StorageDead(_89);
        _87 = &_88;
        _86 = &(*_87);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        _95 = &_8;
        _94 = &(*_95);
        _93 = <Vec<AccountMeta> as Deref>::deref(move _94) -> [return: bb29, unwind: bb34];
    }

    bb29: {
        _92 = &(*_93);
        StorageDead(_94);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        _98 = &_40;
        _97 = &(*_98);
        _96 = move _97 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_97);
        StorageLive(_99);
        StorageLive(_100);
        _100 = &(*_78);
        _99 = move _100 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_100);
        _84 = cpi_mem::CpiMemoryLender::<'_>::program_invoke_signed(move _85, move _86, move _92, move _96, move _99) -> [return: bb30, unwind: bb34];
    }

    bb30: {
        StorageDead(_99);
        StorageDead(_96);
        StorageDead(_92);
        StorageDead(_86);
        StorageDead(_85);
        _0 = std::result::Result::<(), anchor_lang::prelude::ProgramError>::map_err::<anchor_lang::error::Error, fn(anchor_lang::prelude::ProgramError) -> anchor_lang::error::Error {<anchor_lang::prelude::ProgramError as Into<anchor_lang::error::Error>>::into}>(move _84, <anchor_lang::prelude::ProgramError as Into<anchor_lang::error::Error>>::into) -> [return: bb31, unwind: bb34];
    }

    bb31: {
        StorageDead(_84);
        StorageDead(_81);
        StorageDead(_79);
        StorageDead(_78);
        StorageDead(_69);
        StorageDead(_67);
        drop(_59) -> [return: bb32, unwind: bb35];
    }

    bb32: {
        StorageDead(_59);
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_40);
        drop(_8) -> [return: bb33, unwind: bb36];
    }

    bb33: {
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_98);
        StorageDead(_95);
        StorageDead(_93);
        StorageDead(_90);
        StorageDead(_88);
        StorageDead(_87);
        return;
    }

    bb34 (cleanup): {
        drop(_59) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_8) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        resume;
    }
}
