digraph Mir_0_348 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn post_transfer_invest_checks(_1: operations::vault_checks::VaultBalances, _2: operations::vault_checks::VaultBalances, _3: operations::effects::InvestEffects, _4: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;, _5: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;) -&gt; std::result::Result&lt;(), anchor_lang::error::Error&gt;<br align="left"/>let _6: operations::effects::InvestingDirection;<br align="left"/>let _7: u64;<br align="left"/>let _8: u64;<br align="left"/>let _9: u64;<br align="left"/>let _10: ();<br align="left"/>let mut _11: isize;<br align="left"/>let _12: ();<br align="left"/>let mut _13: bool;<br align="left"/>let mut _14: u64;<br align="left"/>let mut _15: u64;<br align="left"/>let mut _16: u64;<br align="left"/>let mut _17: (u64, bool);<br align="left"/>let mut _18: u64;<br align="left"/>let mut _19: u64;<br align="left"/>let mut _20: u64;<br align="left"/>let mut _21: (u64, bool);<br align="left"/>let mut _22: !;<br align="left"/>let mut _23: anchor_lang::error::Error;<br align="left"/>let mut _24: anchor_lang::error::Error;<br align="left"/>let mut _25: anchor_lang::error::AnchorError;<br align="left"/>let mut _26: std::string::String;<br align="left"/>let mut _27: &amp;ReErased anchor_lang::error::ErrorCode;<br align="left"/>let _28: anchor_lang::error::ErrorCode;<br align="left"/>let mut _29: u32;<br align="left"/>let mut _30: anchor_lang::error::ErrorCode;<br align="left"/>let mut _31: std::string::String;<br align="left"/>let mut _32: &amp;ReErased anchor_lang::error::ErrorCode;<br align="left"/>let _33: anchor_lang::error::ErrorCode;<br align="left"/>let mut _34: std::option::Option&lt;anchor_lang::error::ErrorOrigin&gt;;<br align="left"/>let mut _35: anchor_lang::error::ErrorOrigin;<br align="left"/>let mut _36: anchor_lang::error::Source;<br align="left"/>let mut _37: std::option::Option&lt;anchor_lang::error::ComparedValues&gt;;<br align="left"/>let mut _38: (u64, u64);<br align="left"/>let mut _39: u64;<br align="left"/>let mut _40: u64;<br align="left"/>let mut _41: u64;<br align="left"/>let mut _42: (u64, bool);<br align="left"/>let mut _43: u64;<br align="left"/>let mut _44: u64;<br align="left"/>let mut _45: u64;<br align="left"/>let mut _46: (u64, bool);<br align="left"/>let _47: ();<br align="left"/>let mut _48: bool;<br align="left"/>let mut _49: u64;<br align="left"/>let mut _50: u64;<br align="left"/>let mut _51: u64;<br align="left"/>let mut _52: (u64, bool);<br align="left"/>let mut _53: u64;<br align="left"/>let mut _54: !;<br align="left"/>let mut _55: anchor_lang::error::Error;<br align="left"/>let mut _56: anchor_lang::error::Error;<br align="left"/>let mut _57: anchor_lang::error::AnchorError;<br align="left"/>let mut _58: std::string::String;<br align="left"/>let mut _59: &amp;ReErased anchor_lang::error::ErrorCode;<br align="left"/>let _60: anchor_lang::error::ErrorCode;<br align="left"/>let mut _61: u32;<br align="left"/>let mut _62: anchor_lang::error::ErrorCode;<br align="left"/>let mut _63: std::string::String;<br align="left"/>let mut _64: &amp;ReErased anchor_lang::error::ErrorCode;<br align="left"/>let _65: anchor_lang::error::ErrorCode;<br align="left"/>let mut _66: std::option::Option&lt;anchor_lang::error::ErrorOrigin&gt;;<br align="left"/>let mut _67: anchor_lang::error::ErrorOrigin;<br align="left"/>let mut _68: anchor_lang::error::Source;<br align="left"/>let mut _69: std::option::Option&lt;anchor_lang::error::ComparedValues&gt;;<br align="left"/>let mut _70: (u64, u64);<br align="left"/>let mut _71: u64;<br align="left"/>let mut _72: u64;<br align="left"/>let mut _73: u64;<br align="left"/>let mut _74: (u64, bool);<br align="left"/>let mut _75: u64;<br align="left"/>let _76: ();<br align="left"/>let mut _77: bool;<br align="left"/>let mut _78: u64;<br align="left"/>let mut _79: u64;<br align="left"/>let mut _80: u64;<br align="left"/>let mut _81: (u64, bool);<br align="left"/>let mut _82: u64;<br align="left"/>let mut _83: !;<br align="left"/>let mut _84: anchor_lang::error::Error;<br align="left"/>let mut _85: anchor_lang::error::Error;<br align="left"/>let mut _86: anchor_lang::error::AnchorError;<br align="left"/>let mut _87: std::string::String;<br align="left"/>let mut _88: &amp;ReErased anchor_lang::error::ErrorCode;<br align="left"/>let _89: anchor_lang::error::ErrorCode;<br align="left"/>let mut _90: u32;<br align="left"/>let mut _91: anchor_lang::error::ErrorCode;<br align="left"/>let mut _92: std::string::String;<br align="left"/>let mut _93: &amp;ReErased anchor_lang::error::ErrorCode;<br align="left"/>let _94: anchor_lang::error::ErrorCode;<br align="left"/>let mut _95: std::option::Option&lt;anchor_lang::error::ErrorOrigin&gt;;<br align="left"/>let mut _96: anchor_lang::error::ErrorOrigin;<br align="left"/>let mut _97: anchor_lang::error::Source;<br align="left"/>let mut _98: std::option::Option&lt;anchor_lang::error::ComparedValues&gt;;<br align="left"/>let mut _99: (u64, u64);<br align="left"/>let mut _100: u64;<br align="left"/>let mut _101: u64;<br align="left"/>let mut _102: u64;<br align="left"/>let mut _103: (u64, bool);<br align="left"/>let mut _104: u64;<br align="left"/>let _105: ();<br align="left"/>let mut _106: bool;<br align="left"/>let mut _107: u64;<br align="left"/>let mut _108: u64;<br align="left"/>let mut _109: u64;<br align="left"/>let mut _110: (u64, bool);<br align="left"/>let mut _111: u64;<br align="left"/>let mut _112: u64;<br align="left"/>let mut _113: u64;<br align="left"/>let mut _114: (u64, bool);<br align="left"/>let mut _115: !;<br align="left"/>let mut _116: anchor_lang::error::Error;<br align="left"/>let mut _117: anchor_lang::error::Error;<br align="left"/>let mut _118: anchor_lang::error::AnchorError;<br align="left"/>let mut _119: std::string::String;<br align="left"/>let mut _120: &amp;ReErased anchor_lang::error::ErrorCode;<br align="left"/>let _121: anchor_lang::error::ErrorCode;<br align="left"/>let mut _122: u32;<br align="left"/>let mut _123: anchor_lang::error::ErrorCode;<br align="left"/>let mut _124: std::string::String;<br align="left"/>let mut _125: &amp;ReErased anchor_lang::error::ErrorCode;<br align="left"/>let _126: anchor_lang::error::ErrorCode;<br align="left"/>let mut _127: std::option::Option&lt;anchor_lang::error::ErrorOrigin&gt;;<br align="left"/>let mut _128: anchor_lang::error::ErrorOrigin;<br align="left"/>let mut _129: anchor_lang::error::Source;<br align="left"/>let mut _130: std::option::Option&lt;anchor_lang::error::ComparedValues&gt;;<br align="left"/>let mut _131: (u64, u64);<br align="left"/>let mut _132: u64;<br align="left"/>let mut _133: u64;<br align="left"/>let mut _134: u64;<br align="left"/>let mut _135: (u64, bool);<br align="left"/>let mut _136: u64;<br align="left"/>let mut _137: u64;<br align="left"/>let mut _138: u64;<br align="left"/>let mut _139: (u64, bool);<br align="left"/>let _140: ();<br align="left"/>let mut _141: bool;<br align="left"/>let mut _142: u64;<br align="left"/>let mut _143: u64;<br align="left"/>let mut _144: u64;<br align="left"/>let mut _145: (u64, bool);<br align="left"/>let mut _146: u64;<br align="left"/>let mut _147: !;<br align="left"/>let mut _148: anchor_lang::error::Error;<br align="left"/>let mut _149: anchor_lang::error::Error;<br align="left"/>let mut _150: anchor_lang::error::AnchorError;<br align="left"/>let mut _151: std::string::String;<br align="left"/>let mut _152: &amp;ReErased anchor_lang::error::ErrorCode;<br align="left"/>let _153: anchor_lang::error::ErrorCode;<br align="left"/>let mut _154: u32;<br align="left"/>let mut _155: anchor_lang::error::ErrorCode;<br align="left"/>let mut _156: std::string::String;<br align="left"/>let mut _157: &amp;ReErased anchor_lang::error::ErrorCode;<br align="left"/>let _158: anchor_lang::error::ErrorCode;<br align="left"/>let mut _159: std::option::Option&lt;anchor_lang::error::ErrorOrigin&gt;;<br align="left"/>let mut _160: anchor_lang::error::ErrorOrigin;<br align="left"/>let mut _161: anchor_lang::error::Source;<br align="left"/>let mut _162: std::option::Option&lt;anchor_lang::error::ComparedValues&gt;;<br align="left"/>let mut _163: (u64, u64);<br align="left"/>let mut _164: u64;<br align="left"/>let mut _165: u64;<br align="left"/>let mut _166: u64;<br align="left"/>let mut _167: (u64, bool);<br align="left"/>let mut _168: u64;<br align="left"/>let _169: ();<br align="left"/>let mut _170: bool;<br align="left"/>let mut _171: u64;<br align="left"/>let mut _172: u64;<br align="left"/>let mut _173: u64;<br align="left"/>let mut _174: (u64, bool);<br align="left"/>let mut _175: u64;<br align="left"/>let mut _176: !;<br align="left"/>let mut _177: anchor_lang::error::Error;<br align="left"/>let mut _178: anchor_lang::error::Error;<br align="left"/>let mut _179: anchor_lang::error::AnchorError;<br align="left"/>let mut _180: std::string::String;<br align="left"/>let mut _181: &amp;ReErased anchor_lang::error::ErrorCode;<br align="left"/>let _182: anchor_lang::error::ErrorCode;<br align="left"/>let mut _183: u32;<br align="left"/>let mut _184: anchor_lang::error::ErrorCode;<br align="left"/>let mut _185: std::string::String;<br align="left"/>let mut _186: &amp;ReErased anchor_lang::error::ErrorCode;<br align="left"/>let _187: anchor_lang::error::ErrorCode;<br align="left"/>let mut _188: std::option::Option&lt;anchor_lang::error::ErrorOrigin&gt;;<br align="left"/>let mut _189: anchor_lang::error::ErrorOrigin;<br align="left"/>let mut _190: anchor_lang::error::Source;<br align="left"/>let mut _191: std::option::Option&lt;anchor_lang::error::ComparedValues&gt;;<br align="left"/>let mut _192: (u64, u64);<br align="left"/>let mut _193: u64;<br align="left"/>let mut _194: u64;<br align="left"/>let mut _195: u64;<br align="left"/>let mut _196: (u64, bool);<br align="left"/>let mut _197: u64;<br align="left"/>let _198: ();<br align="left"/>let mut _199: bool;<br align="left"/>let mut _200: &amp;ReErased fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _201: &amp;ReErased fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let _202: &amp;ReErased fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _203: !;<br align="left"/>let mut _204: anchor_lang::error::Error;<br align="left"/>let mut _205: anchor_lang::error::AnchorError;<br align="left"/>let mut _206: std::string::String;<br align="left"/>let mut _207: &amp;ReErased KaminoVaultError;<br align="left"/>let _208: KaminoVaultError;<br align="left"/>let mut _209: u32;<br align="left"/>let mut _210: KaminoVaultError;<br align="left"/>let mut _211: std::string::String;<br align="left"/>let mut _212: &amp;ReErased KaminoVaultError;<br align="left"/>let _213: KaminoVaultError;<br align="left"/>let mut _214: std::option::Option&lt;anchor_lang::error::ErrorOrigin&gt;;<br align="left"/>let mut _215: anchor_lang::error::ErrorOrigin;<br align="left"/>let mut _216: anchor_lang::error::Source;<br align="left"/>let mut _217: std::option::Option&lt;anchor_lang::error::ComparedValues&gt;;<br align="left"/>let mut _218: ();<br align="left"/>let mut _219: &amp;ReErased anchor_lang::error::ErrorCode;<br align="left"/>let mut _220: &amp;ReErased anchor_lang::error::ErrorCode;<br align="left"/>let mut _221: &amp;ReErased anchor_lang::error::ErrorCode;<br align="left"/>let mut _222: &amp;ReErased anchor_lang::error::ErrorCode;<br align="left"/>let mut _223: &amp;ReErased anchor_lang::error::ErrorCode;<br align="left"/>let mut _224: &amp;ReErased anchor_lang::error::ErrorCode;<br align="left"/>let mut _225: &amp;ReErased KaminoVaultError;<br align="left"/>let mut _226: &amp;ReErased KaminoVaultError;<br align="left"/>let mut _227: &amp;ReErased anchor_lang::error::ErrorCode;<br align="left"/>let mut _228: &amp;ReErased anchor_lang::error::ErrorCode;<br align="left"/>let mut _229: &amp;ReErased anchor_lang::error::ErrorCode;<br align="left"/>let mut _230: &amp;ReErased anchor_lang::error::ErrorCode;<br align="left"/>let mut _231: &amp;ReErased anchor_lang::error::ErrorCode;<br align="left"/>let mut _232: &amp;ReErased anchor_lang::error::ErrorCode;<br align="left"/>let mut _233: bool;<br align="left"/>let mut _234: bool;<br align="left"/>let mut _235: bool;<br align="left"/>let mut _236: bool;<br align="left"/>let mut _237: bool;<br align="left"/>let mut _238: bool;<br align="left"/>debug amounts_before =&gt; _1;<br align="left"/>debug amounts_after =&gt; _2;<br align="left"/>debug invest_effects =&gt; _3;<br align="left"/>debug aum_before =&gt; _4;<br align="left"/>debug aum_after =&gt; _5;<br align="left"/>debug direction =&gt; _6;<br align="left"/>debug liquidity_amount =&gt; _7;<br align="left"/>debug collateral_amount =&gt; _8;<br align="left"/>debug rounding_loss =&gt; _9;<br align="left"/>>;
    bb0__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_238 = const false<br/>_237 = const false<br/>_236 = const false<br/>_235 = const false<br/>_234 = const false<br/>_233 = const false<br/>StorageLive(_6)<br/>_6 = (_3.0: operations::effects::InvestingDirection)<br/>StorageLive(_7)<br/>_7 = (_3.1: u64)<br/>StorageLive(_8)<br/>_8 = (_3.2: u64)<br/>StorageLive(_9)<br/>_9 = (_3.3: u64)<br/>StorageLive(_10)<br/>_11 = discriminant(_6)<br/></td></tr><tr><td align="left">switchInt(move _11)</td></tr></table>>];
    bb1__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageLive(_105)<br/>StorageLive(_106)<br/>StorageLive(_107)<br/>StorageLive(_108)<br/>_108 = (_1.1: u64)<br/>StorageLive(_109)<br/>_109 = _7<br/>_110 = CheckedAdd(_108, _109)<br/></td></tr><tr><td align="left">assert(!move (_110.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _108, move _109)</td></tr></table>>];
    bb2__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb3__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>_15 = (_1.1: u64)<br/>StorageLive(_16)<br/>_16 = _7<br/>_17 = CheckedSub(_15, _16)<br/></td></tr><tr><td align="left">assert(!move (_17.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, move _15, move _16)</td></tr></table>>];
    bb4__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_14 = move (_17.0: u64)<br/>StorageDead(_16)<br/>StorageDead(_15)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>_19 = (_2.1: u64)<br/>StorageLive(_20)<br/>_20 = _9<br/>_21 = CheckedSub(_19, _20)<br/></td></tr><tr><td align="left">assert(!move (_21.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, move _19, move _20)</td></tr></table>>];
    bb5__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">_18 = move (_21.0: u64)<br/>StorageDead(_20)<br/>StorageDead(_19)<br/>_13 = Ne(move _14, move _18)<br/></td></tr><tr><td align="left">switchInt(move _13)</td></tr></table>>];
    bb6__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageDead(_14)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>_228 = const _<br/>_27 = &amp;(*_228)<br/></td></tr><tr><td align="left">_26 = anchor_lang::error::ErrorCode::name(move _27)</td></tr></table>>];
    bb7__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>_30 = RequireEqViolated<br/></td></tr><tr><td align="left">_29 = &lt;anchor_lang::error::ErrorCode as Into&lt;u32&gt;&gt;::into(move _30)</td></tr></table>>];
    bb8__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>_227 = const _<br/>_32 = &amp;(*_227)<br/></td></tr><tr><td align="left">_31 = &lt;anchor_lang::error::ErrorCode as ToString&gt;::to_string(move _32)</td></tr></table>>];
    bb9__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_32)<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>StorageLive(_36)<br/>_36 = anchor_lang::error::Source { filename: const &quot;programs\\kvault\\src\\operations\\vault_checks.rs&quot;, line: const 166_u32 }<br/>_35 = anchor_lang::error::ErrorOrigin::Source(move _36)<br/>StorageDead(_36)<br/>_34 = Option::&lt;ErrorOrigin&gt;::Some(move _35)<br/>StorageDead(_35)<br/>StorageLive(_37)<br/>_37 = Option::&lt;ComparedValues&gt;::None<br/>_25 = anchor_lang::error::AnchorError { error_name: move _26, error_code_number: move _29, error_msg: move _31, error_origin: move _34, compared_values: move _37 }<br/>StorageDead(_37)<br/>StorageDead(_34)<br/>StorageDead(_31)<br/>StorageDead(_29)<br/>StorageDead(_26)<br/></td></tr><tr><td align="left">_24 = &lt;anchor_lang::error::Error as From&lt;anchor_lang::error::AnchorError&gt;&gt;::from(move _25)</td></tr></table>>];
    bb10__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">_238 = const true<br/>StorageDead(_25)<br/>StorageLive(_38)<br/>StorageLive(_39)<br/>StorageLive(_40)<br/>_40 = (_1.1: u64)<br/>StorageLive(_41)<br/>_41 = _7<br/>_42 = CheckedSub(_40, _41)<br/></td></tr><tr><td align="left">assert(!move (_42.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, move _40, move _41)</td></tr></table>>];
    bb11__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">_39 = move (_42.0: u64)<br/>StorageDead(_41)<br/>StorageDead(_40)<br/>StorageLive(_43)<br/>StorageLive(_44)<br/>_44 = (_2.1: u64)<br/>StorageLive(_45)<br/>_45 = _9<br/>_46 = CheckedSub(_44, _45)<br/></td></tr><tr><td align="left">assert(!move (_46.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, move _44, move _45)</td></tr></table>>];
    bb12__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">_43 = move (_46.0: u64)<br/>StorageDead(_45)<br/>StorageDead(_44)<br/>_38 = (move _39, move _43)<br/>StorageDead(_43)<br/>StorageDead(_39)<br/>_238 = const false<br/></td></tr><tr><td align="left">_23 = anchor_lang::error::Error::with_values::&lt;u64, u64&gt;(move _24, move _38)</td></tr></table>>];
    bb13__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_38)<br/>_238 = const false<br/>StorageDead(_24)<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Err(move _23)<br/>StorageDead(_23)<br/>StorageDead(_13)<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageDead(_14)<br/>_12 = const ()<br/>StorageDead(_13)<br/>StorageDead(_12)<br/>StorageLive(_47)<br/>StorageLive(_48)<br/>StorageLive(_49)<br/>StorageLive(_50)<br/>_50 = (_1.2: u64)<br/>StorageLive(_51)<br/>_51 = _8<br/>_52 = CheckedAdd(_50, _51)<br/></td></tr><tr><td align="left">assert(!move (_52.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _50, move _51)</td></tr></table>>];
    bb15__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">_49 = move (_52.0: u64)<br/>StorageDead(_51)<br/>StorageDead(_50)<br/>StorageLive(_53)<br/>_53 = (_2.2: u64)<br/>_48 = Ne(move _49, move _53)<br/></td></tr><tr><td align="left">switchInt(move _48)</td></tr></table>>];
    bb16__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_53)<br/>StorageDead(_49)<br/>StorageLive(_55)<br/>StorageLive(_56)<br/>StorageLive(_57)<br/>StorageLive(_58)<br/>StorageLive(_59)<br/>_230 = const _<br/>_59 = &amp;(*_230)<br/></td></tr><tr><td align="left">_58 = anchor_lang::error::ErrorCode::name(move _59)</td></tr></table>>];
    bb17__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_59)<br/>StorageLive(_61)<br/>StorageLive(_62)<br/>_62 = RequireEqViolated<br/></td></tr><tr><td align="left">_61 = &lt;anchor_lang::error::ErrorCode as Into&lt;u32&gt;&gt;::into(move _62)</td></tr></table>>];
    bb18__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_62)<br/>StorageLive(_63)<br/>StorageLive(_64)<br/>_229 = const _<br/>_64 = &amp;(*_229)<br/></td></tr><tr><td align="left">_63 = &lt;anchor_lang::error::ErrorCode as ToString&gt;::to_string(move _64)</td></tr></table>>];
    bb19__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_64)<br/>StorageLive(_66)<br/>StorageLive(_67)<br/>StorageLive(_68)<br/>_68 = anchor_lang::error::Source { filename: const &quot;programs\\kvault\\src\\operations\\vault_checks.rs&quot;, line: const 170_u32 }<br/>_67 = anchor_lang::error::ErrorOrigin::Source(move _68)<br/>StorageDead(_68)<br/>_66 = Option::&lt;ErrorOrigin&gt;::Some(move _67)<br/>StorageDead(_67)<br/>StorageLive(_69)<br/>_69 = Option::&lt;ComparedValues&gt;::None<br/>_57 = anchor_lang::error::AnchorError { error_name: move _58, error_code_number: move _61, error_msg: move _63, error_origin: move _66, compared_values: move _69 }<br/>StorageDead(_69)<br/>StorageDead(_66)<br/>StorageDead(_63)<br/>StorageDead(_61)<br/>StorageDead(_58)<br/></td></tr><tr><td align="left">_56 = &lt;anchor_lang::error::Error as From&lt;anchor_lang::error::AnchorError&gt;&gt;::from(move _57)</td></tr></table>>];
    bb20__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">_237 = const true<br/>StorageDead(_57)<br/>StorageLive(_70)<br/>StorageLive(_71)<br/>StorageLive(_72)<br/>_72 = (_1.2: u64)<br/>StorageLive(_73)<br/>_73 = _8<br/>_74 = CheckedAdd(_72, _73)<br/></td></tr><tr><td align="left">assert(!move (_74.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _72, move _73)</td></tr></table>>];
    bb21__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">_71 = move (_74.0: u64)<br/>StorageDead(_73)<br/>StorageDead(_72)<br/>StorageLive(_75)<br/>_75 = (_2.2: u64)<br/>_70 = (move _71, move _75)<br/>StorageDead(_75)<br/>StorageDead(_71)<br/>_237 = const false<br/></td></tr><tr><td align="left">_55 = anchor_lang::error::Error::with_values::&lt;u64, u64&gt;(move _56, move _70)</td></tr></table>>];
    bb22__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_70)<br/>_237 = const false<br/>StorageDead(_56)<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Err(move _55)<br/>StorageDead(_55)<br/>StorageDead(_48)<br/>StorageDead(_47)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb23__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_53)<br/>StorageDead(_49)<br/>_47 = const ()<br/>StorageDead(_48)<br/>StorageDead(_47)<br/>StorageLive(_76)<br/>StorageLive(_77)<br/>StorageLive(_78)<br/>StorageLive(_79)<br/>_79 = (_1.0: u64)<br/>StorageLive(_80)<br/>_80 = _7<br/>_81 = CheckedAdd(_79, _80)<br/></td></tr><tr><td align="left">assert(!move (_81.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _79, move _80)</td></tr></table>>];
    bb24__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">_78 = move (_81.0: u64)<br/>StorageDead(_80)<br/>StorageDead(_79)<br/>StorageLive(_82)<br/>_82 = (_2.0: u64)<br/>_77 = Ne(move _78, move _82)<br/></td></tr><tr><td align="left">switchInt(move _77)</td></tr></table>>];
    bb25__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_82)<br/>StorageDead(_78)<br/>StorageLive(_84)<br/>StorageLive(_85)<br/>StorageLive(_86)<br/>StorageLive(_87)<br/>StorageLive(_88)<br/>_232 = const _<br/>_88 = &amp;(*_232)<br/></td></tr><tr><td align="left">_87 = anchor_lang::error::ErrorCode::name(move _88)</td></tr></table>>];
    bb26__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_88)<br/>StorageLive(_90)<br/>StorageLive(_91)<br/>_91 = RequireEqViolated<br/></td></tr><tr><td align="left">_90 = &lt;anchor_lang::error::ErrorCode as Into&lt;u32&gt;&gt;::into(move _91)</td></tr></table>>];
    bb27__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_91)<br/>StorageLive(_92)<br/>StorageLive(_93)<br/>_231 = const _<br/>_93 = &amp;(*_231)<br/></td></tr><tr><td align="left">_92 = &lt;anchor_lang::error::ErrorCode as ToString&gt;::to_string(move _93)</td></tr></table>>];
    bb28__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_93)<br/>StorageLive(_95)<br/>StorageLive(_96)<br/>StorageLive(_97)<br/>_97 = anchor_lang::error::Source { filename: const &quot;programs\\kvault\\src\\operations\\vault_checks.rs&quot;, line: const 174_u32 }<br/>_96 = anchor_lang::error::ErrorOrigin::Source(move _97)<br/>StorageDead(_97)<br/>_95 = Option::&lt;ErrorOrigin&gt;::Some(move _96)<br/>StorageDead(_96)<br/>StorageLive(_98)<br/>_98 = Option::&lt;ComparedValues&gt;::None<br/>_86 = anchor_lang::error::AnchorError { error_name: move _87, error_code_number: move _90, error_msg: move _92, error_origin: move _95, compared_values: move _98 }<br/>StorageDead(_98)<br/>StorageDead(_95)<br/>StorageDead(_92)<br/>StorageDead(_90)<br/>StorageDead(_87)<br/></td></tr><tr><td align="left">_85 = &lt;anchor_lang::error::Error as From&lt;anchor_lang::error::AnchorError&gt;&gt;::from(move _86)</td></tr></table>>];
    bb29__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">_236 = const true<br/>StorageDead(_86)<br/>StorageLive(_99)<br/>StorageLive(_100)<br/>StorageLive(_101)<br/>_101 = (_1.0: u64)<br/>StorageLive(_102)<br/>_102 = _7<br/>_103 = CheckedAdd(_101, _102)<br/></td></tr><tr><td align="left">assert(!move (_103.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _101, move _102)</td></tr></table>>];
    bb30__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">_100 = move (_103.0: u64)<br/>StorageDead(_102)<br/>StorageDead(_101)<br/>StorageLive(_104)<br/>_104 = (_2.0: u64)<br/>_99 = (move _100, move _104)<br/>StorageDead(_104)<br/>StorageDead(_100)<br/>_236 = const false<br/></td></tr><tr><td align="left">_84 = anchor_lang::error::Error::with_values::&lt;u64, u64&gt;(move _85, move _99)</td></tr></table>>];
    bb31__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageDead(_99)<br/>_236 = const false<br/>StorageDead(_85)<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Err(move _84)<br/>StorageDead(_84)<br/>StorageDead(_77)<br/>StorageDead(_76)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb32__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageDead(_82)<br/>StorageDead(_78)<br/>_76 = const ()<br/>StorageDead(_77)<br/>StorageDead(_76)<br/>_10 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb33__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">_107 = move (_110.0: u64)<br/>StorageDead(_109)<br/>StorageDead(_108)<br/>StorageLive(_111)<br/>StorageLive(_112)<br/>_112 = (_2.1: u64)<br/>StorageLive(_113)<br/>_113 = _9<br/>_114 = CheckedSub(_112, _113)<br/></td></tr><tr><td align="left">assert(!move (_114.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, move _112, move _113)</td></tr></table>>];
    bb34__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">_111 = move (_114.0: u64)<br/>StorageDead(_113)<br/>StorageDead(_112)<br/>_106 = Ne(move _107, move _111)<br/></td></tr><tr><td align="left">switchInt(move _106)</td></tr></table>>];
    bb35__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_111)<br/>StorageDead(_107)<br/>StorageLive(_116)<br/>StorageLive(_117)<br/>StorageLive(_118)<br/>StorageLive(_119)<br/>StorageLive(_120)<br/>_220 = const _<br/>_120 = &amp;(*_220)<br/></td></tr><tr><td align="left">_119 = anchor_lang::error::ErrorCode::name(move _120)</td></tr></table>>];
    bb36__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageDead(_120)<br/>StorageLive(_122)<br/>StorageLive(_123)<br/>_123 = RequireEqViolated<br/></td></tr><tr><td align="left">_122 = &lt;anchor_lang::error::ErrorCode as Into&lt;u32&gt;&gt;::into(move _123)</td></tr></table>>];
    bb37__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageDead(_123)<br/>StorageLive(_124)<br/>StorageLive(_125)<br/>_219 = const _<br/>_125 = &amp;(*_219)<br/></td></tr><tr><td align="left">_124 = &lt;anchor_lang::error::ErrorCode as ToString&gt;::to_string(move _125)</td></tr></table>>];
    bb38__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageDead(_125)<br/>StorageLive(_127)<br/>StorageLive(_128)<br/>StorageLive(_129)<br/>_129 = anchor_lang::error::Source { filename: const &quot;programs\\kvault\\src\\operations\\vault_checks.rs&quot;, line: const 180_u32 }<br/>_128 = anchor_lang::error::ErrorOrigin::Source(move _129)<br/>StorageDead(_129)<br/>_127 = Option::&lt;ErrorOrigin&gt;::Some(move _128)<br/>StorageDead(_128)<br/>StorageLive(_130)<br/>_130 = Option::&lt;ComparedValues&gt;::None<br/>_118 = anchor_lang::error::AnchorError { error_name: move _119, error_code_number: move _122, error_msg: move _124, error_origin: move _127, compared_values: move _130 }<br/>StorageDead(_130)<br/>StorageDead(_127)<br/>StorageDead(_124)<br/>StorageDead(_122)<br/>StorageDead(_119)<br/></td></tr><tr><td align="left">_117 = &lt;anchor_lang::error::Error as From&lt;anchor_lang::error::AnchorError&gt;&gt;::from(move _118)</td></tr></table>>];
    bb39__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">_235 = const true<br/>StorageDead(_118)<br/>StorageLive(_131)<br/>StorageLive(_132)<br/>StorageLive(_133)<br/>_133 = (_1.1: u64)<br/>StorageLive(_134)<br/>_134 = _7<br/>_135 = CheckedAdd(_133, _134)<br/></td></tr><tr><td align="left">assert(!move (_135.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _133, move _134)</td></tr></table>>];
    bb40__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">_132 = move (_135.0: u64)<br/>StorageDead(_134)<br/>StorageDead(_133)<br/>StorageLive(_136)<br/>StorageLive(_137)<br/>_137 = (_2.1: u64)<br/>StorageLive(_138)<br/>_138 = _9<br/>_139 = CheckedSub(_137, _138)<br/></td></tr><tr><td align="left">assert(!move (_139.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, move _137, move _138)</td></tr></table>>];
    bb41__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">_136 = move (_139.0: u64)<br/>StorageDead(_138)<br/>StorageDead(_137)<br/>_131 = (move _132, move _136)<br/>StorageDead(_136)<br/>StorageDead(_132)<br/>_235 = const false<br/></td></tr><tr><td align="left">_116 = anchor_lang::error::Error::with_values::&lt;u64, u64&gt;(move _117, move _131)</td></tr></table>>];
    bb42__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageDead(_131)<br/>_235 = const false<br/>StorageDead(_117)<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Err(move _116)<br/>StorageDead(_116)<br/>StorageDead(_106)<br/>StorageDead(_105)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb43__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageDead(_111)<br/>StorageDead(_107)<br/>_105 = const ()<br/>StorageDead(_106)<br/>StorageDead(_105)<br/>StorageLive(_140)<br/>StorageLive(_141)<br/>StorageLive(_142)<br/>StorageLive(_143)<br/>_143 = (_1.2: u64)<br/>StorageLive(_144)<br/>_144 = _8<br/>_145 = CheckedSub(_143, _144)<br/></td></tr><tr><td align="left">assert(!move (_145.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, move _143, move _144)</td></tr></table>>];
    bb44__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">_142 = move (_145.0: u64)<br/>StorageDead(_144)<br/>StorageDead(_143)<br/>StorageLive(_146)<br/>_146 = (_2.2: u64)<br/>_141 = Ne(move _142, move _146)<br/></td></tr><tr><td align="left">switchInt(move _141)</td></tr></table>>];
    bb45__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">StorageDead(_146)<br/>StorageDead(_142)<br/>StorageLive(_148)<br/>StorageLive(_149)<br/>StorageLive(_150)<br/>StorageLive(_151)<br/>StorageLive(_152)<br/>_222 = const _<br/>_152 = &amp;(*_222)<br/></td></tr><tr><td align="left">_151 = anchor_lang::error::ErrorCode::name(move _152)</td></tr></table>>];
    bb46__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">StorageDead(_152)<br/>StorageLive(_154)<br/>StorageLive(_155)<br/>_155 = RequireEqViolated<br/></td></tr><tr><td align="left">_154 = &lt;anchor_lang::error::ErrorCode as Into&lt;u32&gt;&gt;::into(move _155)</td></tr></table>>];
    bb47__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left" balign="left">StorageDead(_155)<br/>StorageLive(_156)<br/>StorageLive(_157)<br/>_221 = const _<br/>_157 = &amp;(*_221)<br/></td></tr><tr><td align="left">_156 = &lt;anchor_lang::error::ErrorCode as ToString&gt;::to_string(move _157)</td></tr></table>>];
    bb48__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left" balign="left">StorageDead(_157)<br/>StorageLive(_159)<br/>StorageLive(_160)<br/>StorageLive(_161)<br/>_161 = anchor_lang::error::Source { filename: const &quot;programs\\kvault\\src\\operations\\vault_checks.rs&quot;, line: const 184_u32 }<br/>_160 = anchor_lang::error::ErrorOrigin::Source(move _161)<br/>StorageDead(_161)<br/>_159 = Option::&lt;ErrorOrigin&gt;::Some(move _160)<br/>StorageDead(_160)<br/>StorageLive(_162)<br/>_162 = Option::&lt;ComparedValues&gt;::None<br/>_150 = anchor_lang::error::AnchorError { error_name: move _151, error_code_number: move _154, error_msg: move _156, error_origin: move _159, compared_values: move _162 }<br/>StorageDead(_162)<br/>StorageDead(_159)<br/>StorageDead(_156)<br/>StorageDead(_154)<br/>StorageDead(_151)<br/></td></tr><tr><td align="left">_149 = &lt;anchor_lang::error::Error as From&lt;anchor_lang::error::AnchorError&gt;&gt;::from(move _150)</td></tr></table>>];
    bb49__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left" balign="left">_234 = const true<br/>StorageDead(_150)<br/>StorageLive(_163)<br/>StorageLive(_164)<br/>StorageLive(_165)<br/>_165 = (_1.2: u64)<br/>StorageLive(_166)<br/>_166 = _8<br/>_167 = CheckedSub(_165, _166)<br/></td></tr><tr><td align="left">assert(!move (_167.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, move _165, move _166)</td></tr></table>>];
    bb50__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">50</td></tr><tr><td align="left" balign="left">_164 = move (_167.0: u64)<br/>StorageDead(_166)<br/>StorageDead(_165)<br/>StorageLive(_168)<br/>_168 = (_2.2: u64)<br/>_163 = (move _164, move _168)<br/>StorageDead(_168)<br/>StorageDead(_164)<br/>_234 = const false<br/></td></tr><tr><td align="left">_148 = anchor_lang::error::Error::with_values::&lt;u64, u64&gt;(move _149, move _163)</td></tr></table>>];
    bb51__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">51</td></tr><tr><td align="left" balign="left">StorageDead(_163)<br/>_234 = const false<br/>StorageDead(_149)<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Err(move _148)<br/>StorageDead(_148)<br/>StorageDead(_141)<br/>StorageDead(_140)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb52__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">52</td></tr><tr><td align="left" balign="left">StorageDead(_146)<br/>StorageDead(_142)<br/>_140 = const ()<br/>StorageDead(_141)<br/>StorageDead(_140)<br/>StorageLive(_169)<br/>StorageLive(_170)<br/>StorageLive(_171)<br/>StorageLive(_172)<br/>_172 = (_1.0: u64)<br/>StorageLive(_173)<br/>_173 = _7<br/>_174 = CheckedSub(_172, _173)<br/></td></tr><tr><td align="left">assert(!move (_174.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, move _172, move _173)</td></tr></table>>];
    bb53__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">53</td></tr><tr><td align="left" balign="left">_171 = move (_174.0: u64)<br/>StorageDead(_173)<br/>StorageDead(_172)<br/>StorageLive(_175)<br/>_175 = (_2.0: u64)<br/>_170 = Ne(move _171, move _175)<br/></td></tr><tr><td align="left">switchInt(move _170)</td></tr></table>>];
    bb54__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">54</td></tr><tr><td align="left" balign="left">StorageDead(_175)<br/>StorageDead(_171)<br/>StorageLive(_177)<br/>StorageLive(_178)<br/>StorageLive(_179)<br/>StorageLive(_180)<br/>StorageLive(_181)<br/>_224 = const _<br/>_181 = &amp;(*_224)<br/></td></tr><tr><td align="left">_180 = anchor_lang::error::ErrorCode::name(move _181)</td></tr></table>>];
    bb55__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">55</td></tr><tr><td align="left" balign="left">StorageDead(_181)<br/>StorageLive(_183)<br/>StorageLive(_184)<br/>_184 = RequireEqViolated<br/></td></tr><tr><td align="left">_183 = &lt;anchor_lang::error::ErrorCode as Into&lt;u32&gt;&gt;::into(move _184)</td></tr></table>>];
    bb56__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">56</td></tr><tr><td align="left" balign="left">StorageDead(_184)<br/>StorageLive(_185)<br/>StorageLive(_186)<br/>_223 = const _<br/>_186 = &amp;(*_223)<br/></td></tr><tr><td align="left">_185 = &lt;anchor_lang::error::ErrorCode as ToString&gt;::to_string(move _186)</td></tr></table>>];
    bb57__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">57</td></tr><tr><td align="left" balign="left">StorageDead(_186)<br/>StorageLive(_188)<br/>StorageLive(_189)<br/>StorageLive(_190)<br/>_190 = anchor_lang::error::Source { filename: const &quot;programs\\kvault\\src\\operations\\vault_checks.rs&quot;, line: const 188_u32 }<br/>_189 = anchor_lang::error::ErrorOrigin::Source(move _190)<br/>StorageDead(_190)<br/>_188 = Option::&lt;ErrorOrigin&gt;::Some(move _189)<br/>StorageDead(_189)<br/>StorageLive(_191)<br/>_191 = Option::&lt;ComparedValues&gt;::None<br/>_179 = anchor_lang::error::AnchorError { error_name: move _180, error_code_number: move _183, error_msg: move _185, error_origin: move _188, compared_values: move _191 }<br/>StorageDead(_191)<br/>StorageDead(_188)<br/>StorageDead(_185)<br/>StorageDead(_183)<br/>StorageDead(_180)<br/></td></tr><tr><td align="left">_178 = &lt;anchor_lang::error::Error as From&lt;anchor_lang::error::AnchorError&gt;&gt;::from(move _179)</td></tr></table>>];
    bb58__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">58</td></tr><tr><td align="left" balign="left">_233 = const true<br/>StorageDead(_179)<br/>StorageLive(_192)<br/>StorageLive(_193)<br/>StorageLive(_194)<br/>_194 = (_1.0: u64)<br/>StorageLive(_195)<br/>_195 = _7<br/>_196 = CheckedSub(_194, _195)<br/></td></tr><tr><td align="left">assert(!move (_196.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, move _194, move _195)</td></tr></table>>];
    bb59__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">59</td></tr><tr><td align="left" balign="left">_193 = move (_196.0: u64)<br/>StorageDead(_195)<br/>StorageDead(_194)<br/>StorageLive(_197)<br/>_197 = (_2.0: u64)<br/>_192 = (move _193, move _197)<br/>StorageDead(_197)<br/>StorageDead(_193)<br/>_233 = const false<br/></td></tr><tr><td align="left">_177 = anchor_lang::error::Error::with_values::&lt;u64, u64&gt;(move _178, move _192)</td></tr></table>>];
    bb60__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">60</td></tr><tr><td align="left" balign="left">StorageDead(_192)<br/>_233 = const false<br/>StorageDead(_178)<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Err(move _177)<br/>StorageDead(_177)<br/>StorageDead(_170)<br/>StorageDead(_169)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb61__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">61</td></tr><tr><td align="left" balign="left">StorageDead(_175)<br/>StorageDead(_171)<br/>_169 = const ()<br/>StorageDead(_170)<br/>StorageDead(_169)<br/>_10 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb62__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">62</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageLive(_198)<br/>StorageLive(_199)<br/>StorageLive(_200)<br/>_200 = &amp;_5<br/>StorageLive(_201)<br/>StorageLive(_202)<br/>_202 = &amp;_4<br/>_201 = &amp;(*_202)<br/></td></tr><tr><td align="left">_199 = &lt;FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt; as PartialOrd&gt;::ge(move _200, move _201)</td></tr></table>>];
    bb63__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">63</td></tr><tr><td align="left">switchInt(move _199)</td></tr></table>>];
    bb64__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">64</td></tr><tr><td align="left" balign="left">StorageDead(_201)<br/>StorageDead(_200)<br/>StorageDead(_202)<br/>_198 = const ()<br/>StorageDead(_199)<br/>StorageDead(_198)<br/>StorageLive(_218)<br/>_218 = ()<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Ok(move _218)<br/>StorageDead(_218)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb65__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">65</td></tr><tr><td align="left" balign="left">StorageDead(_201)<br/>StorageDead(_200)<br/>StorageDead(_202)<br/>StorageLive(_204)<br/>StorageLive(_205)<br/>StorageLive(_206)<br/>StorageLive(_207)<br/>_226 = const _<br/>_207 = &amp;(*_226)<br/></td></tr><tr><td align="left">_206 = KaminoVaultError::name(move _207)</td></tr></table>>];
    bb66__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">66</td></tr><tr><td align="left" balign="left">StorageDead(_207)<br/>StorageLive(_209)<br/>StorageLive(_210)<br/>_210 = KaminoVaultError::AUMDecreasedAfterInvest<br/></td></tr><tr><td align="left">_209 = &lt;KaminoVaultError as Into&lt;u32&gt;&gt;::into(move _210)</td></tr></table>>];
    bb67__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">67</td></tr><tr><td align="left" balign="left">StorageDead(_210)<br/>StorageLive(_211)<br/>StorageLive(_212)<br/>_225 = const _<br/>_212 = &amp;(*_225)<br/></td></tr><tr><td align="left">_211 = &lt;KaminoVaultError as ToString&gt;::to_string(move _212)</td></tr></table>>];
    bb68__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">68</td></tr><tr><td align="left" balign="left">StorageDead(_212)<br/>StorageLive(_214)<br/>StorageLive(_215)<br/>StorageLive(_216)<br/>_216 = anchor_lang::error::Source { filename: const &quot;programs\\kvault\\src\\operations\\vault_checks.rs&quot;, line: const 195_u32 }<br/>_215 = anchor_lang::error::ErrorOrigin::Source(move _216)<br/>StorageDead(_216)<br/>_214 = Option::&lt;ErrorOrigin&gt;::Some(move _215)<br/>StorageDead(_215)<br/>StorageLive(_217)<br/>_217 = Option::&lt;ComparedValues&gt;::None<br/>_205 = anchor_lang::error::AnchorError { error_name: move _206, error_code_number: move _209, error_msg: move _211, error_origin: move _214, compared_values: move _217 }<br/>StorageDead(_217)<br/>StorageDead(_214)<br/>StorageDead(_211)<br/>StorageDead(_209)<br/>StorageDead(_206)<br/></td></tr><tr><td align="left">_204 = &lt;anchor_lang::error::Error as From&lt;anchor_lang::error::AnchorError&gt;&gt;::from(move _205)</td></tr></table>>];
    bb69__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">69</td></tr><tr><td align="left" balign="left">StorageDead(_205)<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Err(move _204)<br/>StorageDead(_204)<br/>StorageDead(_199)<br/>StorageDead(_198)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb70__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">70</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb71__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">71</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb72__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">72</td></tr><tr><td align="left">return</td></tr></table>>];
    bb73__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">73 (cleanup)</td></tr><tr><td align="left">drop(_206)</td></tr></table>>];
    bb74__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">74 (cleanup)</td></tr><tr><td align="left">drop(_180)</td></tr></table>>];
    bb75__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">75 (cleanup)</td></tr><tr><td align="left">drop(_151)</td></tr></table>>];
    bb76__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">76 (cleanup)</td></tr><tr><td align="left">drop(_119)</td></tr></table>>];
    bb77__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">77 (cleanup)</td></tr><tr><td align="left">drop(_87)</td></tr></table>>];
    bb78__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">78 (cleanup)</td></tr><tr><td align="left">drop(_58)</td></tr></table>>];
    bb79__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">79 (cleanup)</td></tr><tr><td align="left">drop(_26)</td></tr></table>>];
    bb80__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">80 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb81__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">81 (cleanup)</td></tr><tr><td align="left">drop(_178)</td></tr></table>>];
    bb82__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">82 (cleanup)</td></tr><tr><td align="left">switchInt(_233)</td></tr></table>>];
    bb83__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">83 (cleanup)</td></tr><tr><td align="left">drop(_149)</td></tr></table>>];
    bb84__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">84 (cleanup)</td></tr><tr><td align="left">switchInt(_234)</td></tr></table>>];
    bb85__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">85 (cleanup)</td></tr><tr><td align="left">drop(_117)</td></tr></table>>];
    bb86__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">86 (cleanup)</td></tr><tr><td align="left">switchInt(_235)</td></tr></table>>];
    bb87__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">87 (cleanup)</td></tr><tr><td align="left">drop(_85)</td></tr></table>>];
    bb88__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">88 (cleanup)</td></tr><tr><td align="left">switchInt(_236)</td></tr></table>>];
    bb89__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">89 (cleanup)</td></tr><tr><td align="left">drop(_56)</td></tr></table>>];
    bb90__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">90 (cleanup)</td></tr><tr><td align="left">switchInt(_237)</td></tr></table>>];
    bb91__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">91 (cleanup)</td></tr><tr><td align="left">drop(_24)</td></tr></table>>];
    bb92__0_348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">92 (cleanup)</td></tr><tr><td align="left">switchInt(_238)</td></tr></table>>];
    bb0__0_348 -> bb3__0_348 [label="0"];
    bb0__0_348 -> bb1__0_348 [label="1"];
    bb0__0_348 -> bb2__0_348 [label="otherwise"];
    bb1__0_348 -> bb33__0_348 [label="success"];
    bb3__0_348 -> bb4__0_348 [label="success"];
    bb4__0_348 -> bb5__0_348 [label="success"];
    bb5__0_348 -> bb14__0_348 [label="0"];
    bb5__0_348 -> bb6__0_348 [label="otherwise"];
    bb6__0_348 -> bb7__0_348 [label="return"];
    bb7__0_348 -> bb8__0_348 [label="return"];
    bb7__0_348 -> bb79__0_348 [label="unwind"];
    bb8__0_348 -> bb9__0_348 [label="return"];
    bb8__0_348 -> bb79__0_348 [label="unwind"];
    bb9__0_348 -> bb10__0_348 [label="return"];
    bb9__0_348 -> bb80__0_348 [label="unwind"];
    bb10__0_348 -> bb11__0_348 [label="success"];
    bb10__0_348 -> bb92__0_348 [label="unwind"];
    bb11__0_348 -> bb12__0_348 [label="success"];
    bb11__0_348 -> bb92__0_348 [label="unwind"];
    bb12__0_348 -> bb13__0_348 [label="return"];
    bb12__0_348 -> bb92__0_348 [label="unwind"];
    bb13__0_348 -> bb70__0_348 [label=""];
    bb14__0_348 -> bb15__0_348 [label="success"];
    bb15__0_348 -> bb23__0_348 [label="0"];
    bb15__0_348 -> bb16__0_348 [label="otherwise"];
    bb16__0_348 -> bb17__0_348 [label="return"];
    bb17__0_348 -> bb18__0_348 [label="return"];
    bb17__0_348 -> bb78__0_348 [label="unwind"];
    bb18__0_348 -> bb19__0_348 [label="return"];
    bb18__0_348 -> bb78__0_348 [label="unwind"];
    bb19__0_348 -> bb20__0_348 [label="return"];
    bb19__0_348 -> bb80__0_348 [label="unwind"];
    bb20__0_348 -> bb21__0_348 [label="success"];
    bb20__0_348 -> bb90__0_348 [label="unwind"];
    bb21__0_348 -> bb22__0_348 [label="return"];
    bb21__0_348 -> bb90__0_348 [label="unwind"];
    bb22__0_348 -> bb70__0_348 [label=""];
    bb23__0_348 -> bb24__0_348 [label="success"];
    bb24__0_348 -> bb32__0_348 [label="0"];
    bb24__0_348 -> bb25__0_348 [label="otherwise"];
    bb25__0_348 -> bb26__0_348 [label="return"];
    bb26__0_348 -> bb27__0_348 [label="return"];
    bb26__0_348 -> bb77__0_348 [label="unwind"];
    bb27__0_348 -> bb28__0_348 [label="return"];
    bb27__0_348 -> bb77__0_348 [label="unwind"];
    bb28__0_348 -> bb29__0_348 [label="return"];
    bb28__0_348 -> bb80__0_348 [label="unwind"];
    bb29__0_348 -> bb30__0_348 [label="success"];
    bb29__0_348 -> bb88__0_348 [label="unwind"];
    bb30__0_348 -> bb31__0_348 [label="return"];
    bb30__0_348 -> bb88__0_348 [label="unwind"];
    bb31__0_348 -> bb70__0_348 [label=""];
    bb32__0_348 -> bb62__0_348 [label=""];
    bb33__0_348 -> bb34__0_348 [label="success"];
    bb34__0_348 -> bb43__0_348 [label="0"];
    bb34__0_348 -> bb35__0_348 [label="otherwise"];
    bb35__0_348 -> bb36__0_348 [label="return"];
    bb36__0_348 -> bb37__0_348 [label="return"];
    bb36__0_348 -> bb76__0_348 [label="unwind"];
    bb37__0_348 -> bb38__0_348 [label="return"];
    bb37__0_348 -> bb76__0_348 [label="unwind"];
    bb38__0_348 -> bb39__0_348 [label="return"];
    bb38__0_348 -> bb80__0_348 [label="unwind"];
    bb39__0_348 -> bb40__0_348 [label="success"];
    bb39__0_348 -> bb86__0_348 [label="unwind"];
    bb40__0_348 -> bb41__0_348 [label="success"];
    bb40__0_348 -> bb86__0_348 [label="unwind"];
    bb41__0_348 -> bb42__0_348 [label="return"];
    bb41__0_348 -> bb86__0_348 [label="unwind"];
    bb42__0_348 -> bb70__0_348 [label=""];
    bb43__0_348 -> bb44__0_348 [label="success"];
    bb44__0_348 -> bb52__0_348 [label="0"];
    bb44__0_348 -> bb45__0_348 [label="otherwise"];
    bb45__0_348 -> bb46__0_348 [label="return"];
    bb46__0_348 -> bb47__0_348 [label="return"];
    bb46__0_348 -> bb75__0_348 [label="unwind"];
    bb47__0_348 -> bb48__0_348 [label="return"];
    bb47__0_348 -> bb75__0_348 [label="unwind"];
    bb48__0_348 -> bb49__0_348 [label="return"];
    bb48__0_348 -> bb80__0_348 [label="unwind"];
    bb49__0_348 -> bb50__0_348 [label="success"];
    bb49__0_348 -> bb84__0_348 [label="unwind"];
    bb50__0_348 -> bb51__0_348 [label="return"];
    bb50__0_348 -> bb84__0_348 [label="unwind"];
    bb51__0_348 -> bb70__0_348 [label=""];
    bb52__0_348 -> bb53__0_348 [label="success"];
    bb53__0_348 -> bb61__0_348 [label="0"];
    bb53__0_348 -> bb54__0_348 [label="otherwise"];
    bb54__0_348 -> bb55__0_348 [label="return"];
    bb55__0_348 -> bb56__0_348 [label="return"];
    bb55__0_348 -> bb74__0_348 [label="unwind"];
    bb56__0_348 -> bb57__0_348 [label="return"];
    bb56__0_348 -> bb74__0_348 [label="unwind"];
    bb57__0_348 -> bb58__0_348 [label="return"];
    bb57__0_348 -> bb80__0_348 [label="unwind"];
    bb58__0_348 -> bb59__0_348 [label="success"];
    bb58__0_348 -> bb82__0_348 [label="unwind"];
    bb59__0_348 -> bb60__0_348 [label="return"];
    bb59__0_348 -> bb82__0_348 [label="unwind"];
    bb60__0_348 -> bb70__0_348 [label=""];
    bb61__0_348 -> bb62__0_348 [label=""];
    bb62__0_348 -> bb63__0_348 [label="return"];
    bb63__0_348 -> bb65__0_348 [label="0"];
    bb63__0_348 -> bb64__0_348 [label="otherwise"];
    bb64__0_348 -> bb72__0_348 [label=""];
    bb65__0_348 -> bb66__0_348 [label="return"];
    bb66__0_348 -> bb67__0_348 [label="return"];
    bb66__0_348 -> bb73__0_348 [label="unwind"];
    bb67__0_348 -> bb68__0_348 [label="return"];
    bb67__0_348 -> bb73__0_348 [label="unwind"];
    bb68__0_348 -> bb69__0_348 [label="return"];
    bb68__0_348 -> bb80__0_348 [label="unwind"];
    bb69__0_348 -> bb71__0_348 [label=""];
    bb70__0_348 -> bb71__0_348 [label=""];
    bb71__0_348 -> bb72__0_348 [label=""];
    bb73__0_348 -> bb80__0_348 [label="return"];
    bb74__0_348 -> bb80__0_348 [label="return"];
    bb75__0_348 -> bb80__0_348 [label="return"];
    bb76__0_348 -> bb80__0_348 [label="return"];
    bb77__0_348 -> bb80__0_348 [label="return"];
    bb78__0_348 -> bb80__0_348 [label="return"];
    bb79__0_348 -> bb80__0_348 [label="return"];
    bb81__0_348 -> bb80__0_348 [label="return"];
    bb82__0_348 -> bb80__0_348 [label="0"];
    bb82__0_348 -> bb81__0_348 [label="otherwise"];
    bb83__0_348 -> bb80__0_348 [label="return"];
    bb84__0_348 -> bb80__0_348 [label="0"];
    bb84__0_348 -> bb83__0_348 [label="otherwise"];
    bb85__0_348 -> bb80__0_348 [label="return"];
    bb86__0_348 -> bb80__0_348 [label="0"];
    bb86__0_348 -> bb85__0_348 [label="otherwise"];
    bb87__0_348 -> bb80__0_348 [label="return"];
    bb88__0_348 -> bb80__0_348 [label="0"];
    bb88__0_348 -> bb87__0_348 [label="otherwise"];
    bb89__0_348 -> bb80__0_348 [label="return"];
    bb90__0_348 -> bb80__0_348 [label="0"];
    bb90__0_348 -> bb89__0_348 [label="otherwise"];
    bb91__0_348 -> bb80__0_348 [label="return"];
    bb92__0_348 -> bb80__0_348 [label="0"];
    bb92__0_348 -> bb91__0_348 [label="otherwise"];
}
