// MIR for `state::<impl at programs\kvault\src\state.rs:82:1: 82:16>::compute_aum` after PreCodegen

fn state::<impl at programs\kvault\src\state.rs:82:1: 82:16>::compute_aum(_1: &state::VaultState, _2: &FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>) -> std::result::Result<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error> {
    debug self => _1;
    debug invested_total => _2;
    let mut _0: std::result::Result<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error>;
    let _3: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _4: &state::VaultState;
    let _5: ();
    let mut _6: bool;
    let mut _7: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _8: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _9: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _10: u64;
    let mut _11: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _12: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _13: !;
    let mut _14: anchor_lang::error::Error;
    let mut _15: anchor_lang::error::AnchorError;
    let mut _16: std::string::String;
    let mut _17: &KaminoVaultError;
    let _18: KaminoVaultError;
    let mut _19: u32;
    let mut _20: KaminoVaultError;
    let mut _21: std::string::String;
    let mut _22: &KaminoVaultError;
    let _23: KaminoVaultError;
    let mut _24: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _25: anchor_lang::error::ErrorOrigin;
    let mut _26: anchor_lang::error::Source;
    let mut _27: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _28: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _29: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _30: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _31: u64;
    let mut _32: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _33: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    scope 1 {
        debug pending_fees => _3;
        let mut _34: &KaminoVaultError;
        let mut _35: &KaminoVaultError;
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = &(*_1);
        _3 = state::VaultState::get_pending_fees(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = ((*_1).9: u64);
        _9 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as From<u64>>::from(move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        StorageLive(_11);
        _11 = _2;
        _8 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as Add<&FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>>::add(move _9, move _11) -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = &_8;
        StorageDead(_11);
        StorageDead(_9);
        StorageLive(_12);
        _12 = &_3;
        _6 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd>::lt(move _7, move _12) -> [return: bb4, unwind continue];
    }

    bb4: {
        switchInt(move _6) -> [0: bb10, otherwise: bb5];
    }

    bb5: {
        StorageDead(_12);
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _35 = const _;
        _17 = &(*_35);
        _16 = KaminoVaultError::name(move _17) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_17);
        StorageLive(_19);
        StorageLive(_20);
        _20 = KaminoVaultError::AUMBelowPendingFees;
        _19 = <KaminoVaultError as Into<u32>>::into(move _20) -> [return: bb7, unwind: bb15];
    }

    bb7: {
        StorageDead(_20);
        StorageLive(_21);
        StorageLive(_22);
        _34 = const _;
        _22 = &(*_34);
        _21 = <KaminoVaultError as ToString>::to_string(move _22) -> [return: bb8, unwind: bb15];
    }

    bb8: {
        StorageDead(_22);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\state.rs", line: const 146_u32 };
        _25 = anchor_lang::error::ErrorOrigin::Source(move _26);
        StorageDead(_26);
        _24 = Option::<ErrorOrigin>::Some(move _25);
        StorageDead(_25);
        StorageLive(_27);
        _27 = Option::<ComparedValues>::None;
        _15 = anchor_lang::error::AnchorError { error_name: move _16, error_code_number: move _19, error_msg: move _21, error_origin: move _24, compared_values: move _27 };
        StorageDead(_27);
        StorageDead(_24);
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_16);
        _14 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _15) -> [return: bb9, unwind: bb16];
    }

    bb9: {
        StorageDead(_15);
        _0 = std::result::Result::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error>::Err(move _14);
        StorageDead(_14);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_3);
        goto -> bb14;
    }

    bb10: {
        StorageDead(_12);
        StorageDead(_8);
        StorageDead(_7);
        _5 = const ();
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = ((*_1).9: u64);
        _30 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as From<u64>>::from(move _31) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_31);
        StorageLive(_32);
        _32 = _2;
        _29 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as Add<&FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>>::add(move _30, move _32) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_32);
        StorageDead(_30);
        StorageLive(_33);
        _33 = _3;
        _28 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as Sub>::sub(move _29, move _33) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_33);
        StorageDead(_29);
        _0 = std::result::Result::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error>::Ok(move _28);
        StorageDead(_28);
        StorageDead(_3);
        goto -> bb14;
    }

    bb14: {
        return;
    }

    bb15 (cleanup): {
        drop(_16) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        resume;
    }
}
