digraph Mir_0_422 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn holdings(_1: &amp;ReErased state::VaultState, _2: impl Iterator&lt;Item = T&gt;/#2, _3: u64) -&gt; std::result::Result&lt;operations::vault_operations::common::Holdings, anchor_lang::error::Error&gt;<br align="left"/>let _4: u64;<br align="left"/>let _5: operations::vault_operations::common::Invested;<br align="left"/>let mut _6: (u64, operations::vault_operations::common::Invested);<br align="left"/>let mut _7: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, (u64, operations::vault_operations::common::Invested)&gt;;<br align="left"/>let mut _8: std::result::Result&lt;(u64, operations::vault_operations::common::Invested), anchor_lang::error::Error&gt;;<br align="left"/>let mut _9: &amp;ReErased state::VaultState;<br align="left"/>let mut _10: impl Iterator&lt;Item = T&gt;/#2;<br align="left"/>let mut _11: u64;<br align="left"/>let mut _12: isize;<br align="left"/>let _13: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _14: !;<br align="left"/>let mut _15: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _16: (u64, operations::vault_operations::common::Invested);<br align="left"/>let _17: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _18: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _19: u64;<br align="left"/>let mut _20: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _21: operations::vault_operations::common::Holdings;<br align="left"/>let mut _22: u64;<br align="left"/>let mut _23: operations::vault_operations::common::Invested;<br align="left"/>let mut _24: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;;<br align="left"/>let mut _25: isize;<br align="left"/>let mut _26: isize;<br align="left"/>let mut _27: isize;<br align="left"/>let mut _28: isize;<br align="left"/>let mut _29: isize;<br align="left"/>let mut _30: isize;<br align="left"/>debug vault =&gt; _1;<br align="left"/>debug reserves_iter =&gt; _2;<br align="left"/>debug slot =&gt; _3;<br align="left"/>debug available =&gt; _4;<br align="left"/>debug invested =&gt; _5;<br align="left"/>debug residual =&gt; _13;<br align="left"/>debug val =&gt; _16;<br align="left"/>debug total_sum =&gt; _17;<br align="left"/>>;
    bb0__0_422 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = &amp;(*_1)<br/>StorageLive(_10)<br/>_10 = move _2<br/>StorageLive(_11)<br/>_11 = _3<br/></td></tr><tr><td align="left">_8 = underlying_inventory::&lt;'_, T, impl Iterator&lt;Item = T&gt;&gt;(move _9, move _10, move _11)</td></tr></table>>];
    bb1__0_422 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_10)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">_7 = &lt;std::result::Result&lt;(u64, Invested), anchor_lang::error::Error&gt; as Try&gt;::branch(move _8)</td></tr></table>>];
    bb2__0_422 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>_12 = discriminant(_7)<br/></td></tr><tr><td align="left">switchInt(move _12)</td></tr></table>>];
    bb3__0_422 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_16)<br/>_16 = move ((_7 as Continue).0: (u64, operations::vault_operations::common::Invested))<br/>_6 = move _16<br/>StorageDead(_16)<br/>StorageLive(_4)<br/>_4 = (_6.0: u64)<br/>StorageLive(_5)<br/>_5 = move (_6.1: operations::vault_operations::common::Invested)<br/>_25 = discriminant(_7)<br/>StorageDead(_7)<br/>StorageDead(_6)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>_19 = _4<br/></td></tr><tr><td align="left">_18 = &lt;FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt; as From&lt;u64&gt;&gt;::from(move _19)</td></tr></table>>];
    bb4__0_422 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_422 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_13)<br/>_13 = move ((_7 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_15)<br/>_15 = move _13<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;Holdings, anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _15)</td></tr></table>>];
    bb6__0_422 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageDead(_13)<br/>_27 = discriminant(_7)<br/>StorageDead(_7)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_422 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageLive(_20)<br/>_20 = (_5.1: fixed::FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt;)<br/></td></tr><tr><td align="left">_17 = &lt;FixedU128&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B1&gt;, typenum::bit::B0&gt;, typenum::bit::B0&gt;&gt; as Add&gt;::add(move _18, move _20)</td></tr></table>>];
    bb8__0_422 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageDead(_18)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>_22 = _4<br/>StorageLive(_23)<br/>_23 = move _5<br/>StorageLive(_24)<br/>_24 = _17<br/>_21 = Holdings { available: move _22, invested: move _23, total_sum: move _24 }<br/>StorageDead(_24)<br/>StorageDead(_23)<br/>StorageDead(_22)<br/>_0 = std::result::Result::&lt;Holdings, anchor_lang::error::Error&gt;::Ok(move _21)<br/>StorageDead(_21)<br/>StorageDead(_17)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_422 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left">return</td></tr></table>>];
    bb10__0_422 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">10 (cleanup)</td></tr><tr><td align="left">drop(_5)</td></tr></table>>];
    bb11__0_422 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">11 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb12__0_422 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">12 (cleanup)</td></tr><tr><td align="left" balign="left">_30 = discriminant(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_422 -> bb1__0_422 [label="return"];
    bb0__0_422 -> bb11__0_422 [label="unwind"];
    bb1__0_422 -> bb2__0_422 [label="return"];
    bb1__0_422 -> bb11__0_422 [label="unwind"];
    bb2__0_422 -> bb3__0_422 [label="0"];
    bb2__0_422 -> bb5__0_422 [label="1"];
    bb2__0_422 -> bb4__0_422 [label="otherwise"];
    bb3__0_422 -> bb7__0_422 [label="return"];
    bb3__0_422 -> bb10__0_422 [label="unwind"];
    bb5__0_422 -> bb6__0_422 [label="return"];
    bb5__0_422 -> bb12__0_422 [label="unwind"];
    bb6__0_422 -> bb9__0_422 [label=""];
    bb7__0_422 -> bb8__0_422 [label="return"];
    bb7__0_422 -> bb10__0_422 [label="unwind"];
    bb8__0_422 -> bb9__0_422 [label=""];
    bb10__0_422 -> bb11__0_422 [label="return"];
    bb12__0_422 -> bb11__0_422 [label=""];
}
