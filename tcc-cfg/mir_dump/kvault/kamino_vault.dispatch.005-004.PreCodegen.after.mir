// MIR for `dispatch` after PreCodegen

fn dispatch(_1: &anchor_lang::prelude::Pubkey, _2: &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8]) -> std::result::Result<(), anchor_lang::error::Error> {
    debug program_id => _1;
    debug accounts => _2;
    debug data => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let mut _4: &[u8];
    let _7: ();
    let mut _8: &mut [u8];
    let mut _9: &mut [u8; 8];
    let mut _10: &[u8];
    let _11: &[u8];
    let _12: &[u8];
    let mut _13: &[u8];
    let mut _14: std::ops::RangeTo<usize>;
    let mut _15: &[u8];
    let _16: &[u8];
    let _17: &[u8];
    let mut _18: &[u8];
    let mut _19: std::ops::RangeFrom<usize>;
    let mut _20: &anchor_lang::prelude::Pubkey;
    let mut _21: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _22: &[u8];
    let mut _23: &anchor_lang::prelude::Pubkey;
    let mut _24: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _25: &[u8];
    let mut _26: &anchor_lang::prelude::Pubkey;
    let mut _27: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _28: &[u8];
    let mut _29: &anchor_lang::prelude::Pubkey;
    let mut _30: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _31: &[u8];
    let mut _32: &anchor_lang::prelude::Pubkey;
    let mut _33: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _34: &[u8];
    let mut _35: &anchor_lang::prelude::Pubkey;
    let mut _36: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _37: &[u8];
    let mut _38: &anchor_lang::prelude::Pubkey;
    let mut _39: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _40: &[u8];
    let mut _41: &anchor_lang::prelude::Pubkey;
    let mut _42: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _43: &[u8];
    let mut _44: &anchor_lang::prelude::Pubkey;
    let mut _45: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _46: &[u8];
    let mut _47: &anchor_lang::prelude::Pubkey;
    let mut _48: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _49: &[u8];
    let mut _50: &anchor_lang::prelude::Pubkey;
    let mut _51: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _52: &[u8];
    let mut _53: &anchor_lang::prelude::Pubkey;
    let mut _54: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _55: &[u8];
    let mut _56: &anchor_lang::prelude::Pubkey;
    let mut _57: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _58: &[u8];
    let mut _59: &anchor_lang::prelude::Pubkey;
    let mut _60: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _61: &[u8];
    let _62: &&[u8];
    let mut _63: &anchor_lang::prelude::Pubkey;
    let mut _64: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _65: &[u8];
    let _66: &&[u8];
    let mut _67: anchor_lang::error::Error;
    let mut _68: anchor_lang::error::ErrorCode;
    let mut _69: &[u8];
    let mut _70: &[u8];
    scope 1 {
        debug ix_data => _4;
        let _5: [u8; 8];
        let mut _6: [u8; 8];
        scope 2 {
            debug sighash => _5;
        }
        scope 3 {
            debug sighash => _6;
        }
    }

    bb0: {
        StorageLive(_4);
        _4 = &(*_3);
        StorageLive(_5);
        StorageLive(_6);
        _6 = [const 0_u8; 8];
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &mut _6;
        _8 = move _9 as &mut [u8] (PointerCoercion(Unsize));
        StorageDead(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &(*_4);
        StorageLive(_14);
        _14 = RangeTo::<usize> { end: const 8_usize };
        _12 = <[u8] as Index<RangeTo<usize>>>::index(move _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        StorageDead(_13);
        _11 = &(*_12);
        _10 = &(*_11);
        _7 = core::slice::<impl [u8]>::copy_from_slice(move _8, move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_7);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = &(*_4);
        StorageLive(_19);
        _19 = RangeFrom::<usize> { start: const 8_usize };
        _17 = <[u8] as Index<RangeFrom<usize>>>::index(move _18, move _19) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_19);
        StorageDead(_18);
        _16 = &(*_17);
        _15 = &(*_16);
        _4 = move _15;
        StorageDead(_15);
        StorageDead(_17);
        StorageDead(_16);
        _5 = _6;
        StorageDead(_6);
        switchInt(_5[0 of 8]) -> [77: bb4, 5: bb12, 242: bb19, 183: bb26, 13: bb33, 122: bb40, 131: bb47, 161: bb54, 177: bb61, 3: bb68, 155: bb75, 19: bb82, 32: bb89, 64: bb96, 228: bb103, otherwise: bb11];
    }

    bb4: {
        switchInt(_5[1 of 8]) -> [79: bb5, otherwise: bb11];
    }

    bb5: {
        switchInt(_5[2 of 8]) -> [85: bb6, otherwise: bb11];
    }

    bb6: {
        switchInt(_5[3 of 8]) -> [150: bb7, otherwise: bb11];
    }

    bb7: {
        switchInt(_5[4 of 8]) -> [33: bb8, otherwise: bb11];
    }

    bb8: {
        switchInt(_5[5 of 8]) -> [217: bb9, otherwise: bb11];
    }

    bb9: {
        switchInt(_5[6 of 8]) -> [52: bb10, otherwise: bb11];
    }

    bb10: {
        switchInt(_5[7 of 8]) -> [106: bb110, otherwise: bb11];
    }

    bb11: {
        StorageLive(_67);
        StorageLive(_68);
        _68 = InstructionFallbackNotFound;
        _67 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _68) -> [return: bb140, unwind continue];
    }

    bb12: {
        switchInt(_5[1 of 8]) -> [54: bb13, otherwise: bb11];
    }

    bb13: {
        switchInt(_5[2 of 8]) -> [213: bb14, otherwise: bb11];
    }

    bb14: {
        switchInt(_5[3 of 8]) -> [112: bb15, otherwise: bb11];
    }

    bb15: {
        switchInt(_5[4 of 8]) -> [75: bb16, otherwise: bb11];
    }

    bb16: {
        switchInt(_5[5 of 8]) -> [232: bb17, otherwise: bb11];
    }

    bb17: {
        switchInt(_5[6 of 8]) -> [117: bb18, otherwise: bb11];
    }

    bb18: {
        switchInt(_5[7 of 8]) -> [37: bb112, otherwise: bb11];
    }

    bb19: {
        switchInt(_5[1 of 8]) -> [35: bb20, otherwise: bb11];
    }

    bb20: {
        switchInt(_5[2 of 8]) -> [198: bb21, otherwise: bb11];
    }

    bb21: {
        switchInt(_5[3 of 8]) -> [137: bb22, otherwise: bb11];
    }

    bb22: {
        switchInt(_5[4 of 8]) -> [82: bb23, otherwise: bb11];
    }

    bb23: {
        switchInt(_5[5 of 8]) -> [225: bb24, otherwise: bb11];
    }

    bb24: {
        switchInt(_5[6 of 8]) -> [242: bb25, otherwise: bb11];
    }

    bb25: {
        switchInt(_5[7 of 8]) -> [182: bb114, otherwise: bb11];
    }

    bb26: {
        switchInt(_5[1 of 8]) -> [18: bb27, otherwise: bb11];
    }

    bb27: {
        switchInt(_5[2 of 8]) -> [70: bb28, otherwise: bb11];
    }

    bb28: {
        switchInt(_5[3 of 8]) -> [156: bb29, otherwise: bb11];
    }

    bb29: {
        switchInt(_5[4 of 8]) -> [148: bb30, otherwise: bb11];
    }

    bb30: {
        switchInt(_5[5 of 8]) -> [109: bb31, otherwise: bb11];
    }

    bb31: {
        switchInt(_5[6 of 8]) -> [161: bb32, otherwise: bb11];
    }

    bb32: {
        switchInt(_5[7 of 8]) -> [34: bb116, otherwise: bb11];
    }

    bb33: {
        switchInt(_5[1 of 8]) -> [245: bb34, otherwise: bb11];
    }

    bb34: {
        switchInt(_5[2 of 8]) -> [180: bb35, otherwise: bb11];
    }

    bb35: {
        switchInt(_5[3 of 8]) -> [103: bb36, otherwise: bb11];
    }

    bb36: {
        switchInt(_5[4 of 8]) -> [254: bb37, otherwise: bb11];
    }

    bb37: {
        switchInt(_5[5 of 8]) -> [182: bb38, otherwise: bb11];
    }

    bb38: {
        switchInt(_5[6 of 8]) -> [121: bb39, otherwise: bb11];
    }

    bb39: {
        switchInt(_5[7 of 8]) -> [4: bb118, otherwise: bb11];
    }

    bb40: {
        switchInt(_5[1 of 8]) -> [3: bb41, otherwise: bb11];
    }

    bb41: {
        switchInt(_5[2 of 8]) -> [21: bb42, otherwise: bb11];
    }

    bb42: {
        switchInt(_5[3 of 8]) -> [222: bb43, otherwise: bb11];
    }

    bb43: {
        switchInt(_5[4 of 8]) -> [158: bb44, otherwise: bb11];
    }

    bb44: {
        switchInt(_5[5 of 8]) -> [255: bb45, otherwise: bb11];
    }

    bb45: {
        switchInt(_5[6 of 8]) -> [238: bb46, otherwise: bb11];
    }

    bb46: {
        switchInt(_5[7 of 8]) -> [157: bb120, otherwise: bb11];
    }

    bb47: {
        switchInt(_5[1 of 8]) -> [194: bb48, otherwise: bb11];
    }

    bb48: {
        switchInt(_5[2 of 8]) -> [200: bb49, otherwise: bb11];
    }

    bb49: {
        switchInt(_5[3 of 8]) -> [140: bb50, otherwise: bb11];
    }

    bb50: {
        switchInt(_5[4 of 8]) -> [175: bb51, otherwise: bb11];
    }

    bb51: {
        switchInt(_5[5 of 8]) -> [244: bb52, otherwise: bb11];
    }

    bb52: {
        switchInt(_5[6 of 8]) -> [217: bb53, otherwise: bb11];
    }

    bb53: {
        switchInt(_5[7 of 8]) -> [183: bb122, otherwise: bb11];
    }

    bb54: {
        switchInt(_5[1 of 8]) -> [176: bb55, otherwise: bb11];
    }

    bb55: {
        switchInt(_5[2 of 8]) -> [40: bb56, otherwise: bb11];
    }

    bb56: {
        switchInt(_5[3 of 8]) -> [213: bb57, otherwise: bb11];
    }

    bb57: {
        switchInt(_5[4 of 8]) -> [60: bb58, otherwise: bb11];
    }

    bb58: {
        switchInt(_5[5 of 8]) -> [184: bb59, otherwise: bb11];
    }

    bb59: {
        switchInt(_5[6 of 8]) -> [179: bb60, otherwise: bb11];
    }

    bb60: {
        switchInt(_5[7 of 8]) -> [228: bb124, otherwise: bb11];
    }

    bb61: {
        switchInt(_5[1 of 8]) -> [200: bb62, otherwise: bb11];
    }

    bb62: {
        switchInt(_5[2 of 8]) -> [120: bb63, otherwise: bb11];
    }

    bb63: {
        switchInt(_5[3 of 8]) -> [134: bb64, otherwise: bb11];
    }

    bb64: {
        switchInt(_5[4 of 8]) -> [110: bb65, otherwise: bb11];
    }

    bb65: {
        switchInt(_5[5 of 8]) -> [217: bb66, otherwise: bb11];
    }

    bb66: {
        switchInt(_5[6 of 8]) -> [147: bb67, otherwise: bb11];
    }

    bb67: {
        switchInt(_5[7 of 8]) -> [81: bb126, otherwise: bb11];
    }

    bb68: {
        switchInt(_5[1 of 8]) -> [15: bb69, otherwise: bb11];
    }

    bb69: {
        switchInt(_5[2 of 8]) -> [172: bb70, otherwise: bb11];
    }

    bb70: {
        switchInt(_5[3 of 8]) -> [114: bb71, otherwise: bb11];
    }

    bb71: {
        switchInt(_5[4 of 8]) -> [200: bb72, otherwise: bb11];
    }

    bb72: {
        switchInt(_5[5 of 8]) -> [0: bb73, otherwise: bb11];
    }

    bb73: {
        switchInt(_5[6 of 8]) -> [131: bb74, otherwise: bb11];
    }

    bb74: {
        switchInt(_5[7 of 8]) -> [32: bb128, otherwise: bb11];
    }

    bb75: {
        switchInt(_5[1 of 8]) -> [34: bb76, otherwise: bb11];
    }

    bb76: {
        switchInt(_5[2 of 8]) -> [122: bb77, otherwise: bb11];
    }

    bb77: {
        switchInt(_5[3 of 8]) -> [165: bb78, otherwise: bb11];
    }

    bb78: {
        switchInt(_5[4 of 8]) -> [245: bb79, otherwise: bb11];
    }

    bb79: {
        switchInt(_5[5 of 8]) -> [137: bb80, otherwise: bb11];
    }

    bb80: {
        switchInt(_5[6 of 8]) -> [147: bb81, otherwise: bb11];
    }

    bb81: {
        switchInt(_5[7 of 8]) -> [107: bb130, otherwise: bb11];
    }

    bb82: {
        switchInt(_5[1 of 8]) -> [131: bb83, otherwise: bb11];
    }

    bb83: {
        switchInt(_5[2 of 8]) -> [112: bb84, otherwise: bb11];
    }

    bb84: {
        switchInt(_5[3 of 8]) -> [155: bb85, otherwise: bb11];
    }

    bb85: {
        switchInt(_5[4 of 8]) -> [170: bb86, otherwise: bb11];
    }

    bb86: {
        switchInt(_5[5 of 8]) -> [220: bb87, otherwise: bb11];
    }

    bb87: {
        switchInt(_5[6 of 8]) -> [34: bb88, otherwise: bb11];
    }

    bb88: {
        switchInt(_5[7 of 8]) -> [57: bb132, otherwise: bb11];
    }

    bb89: {
        switchInt(_5[1 of 8]) -> [220: bb90, otherwise: bb11];
    }

    bb90: {
        switchInt(_5[2 of 8]) -> [211: bb91, otherwise: bb11];
    }

    bb91: {
        switchInt(_5[3 of 8]) -> [141: bb92, otherwise: bb11];
    }

    bb92: {
        switchInt(_5[4 of 8]) -> [209: bb93, otherwise: bb11];
    }

    bb93: {
        switchInt(_5[5 of 8]) -> [231: bb94, otherwise: bb11];
    }

    bb94: {
        switchInt(_5[6 of 8]) -> [73: bb95, otherwise: bb11];
    }

    bb95: {
        switchInt(_5[7 of 8]) -> [76: bb134, otherwise: bb11];
    }

    bb96: {
        switchInt(_5[1 of 8]) -> [244: bb97, otherwise: bb11];
    }

    bb97: {
        switchInt(_5[2 of 8]) -> [188: bb98, otherwise: bb11];
    }

    bb98: {
        switchInt(_5[3 of 8]) -> [120: bb99, otherwise: bb11];
    }

    bb99: {
        switchInt(_5[4 of 8]) -> [167: bb100, otherwise: bb11];
    }

    bb100: {
        switchInt(_5[5 of 8]) -> [233: bb101, otherwise: bb11];
    }

    bb101: {
        switchInt(_5[6 of 8]) -> [105: bb102, otherwise: bb11];
    }

    bb102: {
        switchInt(_5[7 of 8]) -> [10: bb136, otherwise: bb11];
    }

    bb103: {
        switchInt(_5[1 of 8]) -> [69: bb104, otherwise: bb11];
    }

    bb104: {
        switchInt(_5[2 of 8]) -> [165: bb105, otherwise: bb11];
    }

    bb105: {
        switchInt(_5[3 of 8]) -> [46: bb106, otherwise: bb11];
    }

    bb106: {
        switchInt(_5[4 of 8]) -> [81: bb107, otherwise: bb11];
    }

    bb107: {
        switchInt(_5[5 of 8]) -> [203: bb108, otherwise: bb11];
    }

    bb108: {
        switchInt(_5[6 of 8]) -> [154: bb109, otherwise: bb11];
    }

    bb109: {
        switchInt(_5[7 of 8]) -> [29: bb138, otherwise: bb11];
    }

    bb110: {
        StorageLive(_20);
        _20 = &(*_1);
        StorageLive(_21);
        _21 = &(*_2);
        StorageLive(_22);
        _22 = &(*_4);
        _0 = __global::init_vault(move _20, move _21, move _22) -> [return: bb111, unwind continue];
    }

    bb111: {
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        goto -> bb141;
    }

    bb112: {
        StorageLive(_23);
        _23 = &(*_1);
        StorageLive(_24);
        _24 = &(*_2);
        StorageLive(_25);
        _25 = &(*_4);
        _0 = __global::update_reserve_allocation(move _23, move _24, move _25) -> [return: bb113, unwind continue];
    }

    bb113: {
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb141;
    }

    bb114: {
        StorageLive(_26);
        _26 = &(*_1);
        StorageLive(_27);
        _27 = &(*_2);
        StorageLive(_28);
        _28 = &(*_4);
        _0 = __global::deposit(move _26, move _27, move _28) -> [return: bb115, unwind continue];
    }

    bb115: {
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        goto -> bb141;
    }

    bb116: {
        StorageLive(_29);
        _29 = &(*_1);
        StorageLive(_30);
        _30 = &(*_2);
        StorageLive(_31);
        _31 = &(*_4);
        _0 = __global::withdraw(move _29, move _30, move _31) -> [return: bb117, unwind continue];
    }

    bb117: {
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_29);
        goto -> bb141;
    }

    bb118: {
        StorageLive(_32);
        _32 = &(*_1);
        StorageLive(_33);
        _33 = &(*_2);
        StorageLive(_34);
        _34 = &(*_4);
        _0 = __global::invest(move _32, move _33, move _34) -> [return: bb119, unwind continue];
    }

    bb119: {
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_32);
        goto -> bb141;
    }

    bb120: {
        StorageLive(_35);
        _35 = &(*_1);
        StorageLive(_36);
        _36 = &(*_2);
        StorageLive(_37);
        _37 = &(*_4);
        _0 = __global::update_vault_config(move _35, move _36, move _37) -> [return: bb121, unwind continue];
    }

    bb121: {
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_35);
        goto -> bb141;
    }

    bb122: {
        StorageLive(_38);
        _38 = &(*_1);
        StorageLive(_39);
        _39 = &(*_2);
        StorageLive(_40);
        _40 = &(*_4);
        _0 = __global::withdraw_pending_fees(move _38, move _39, move _40) -> [return: bb123, unwind continue];
    }

    bb123: {
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_38);
        goto -> bb141;
    }

    bb124: {
        StorageLive(_41);
        _41 = &(*_1);
        StorageLive(_42);
        _42 = &(*_2);
        StorageLive(_43);
        _43 = &(*_4);
        _0 = __global::update_admin(move _41, move _42, move _43) -> [return: bb125, unwind continue];
    }

    bb125: {
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        goto -> bb141;
    }

    bb126: {
        StorageLive(_44);
        _44 = &(*_1);
        StorageLive(_45);
        _45 = &(*_2);
        StorageLive(_46);
        _46 = &(*_4);
        _0 = __global::give_up_pending_fees(move _44, move _45, move _46) -> [return: bb127, unwind continue];
    }

    bb127: {
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_44);
        goto -> bb141;
    }

    bb128: {
        StorageLive(_47);
        _47 = &(*_1);
        StorageLive(_48);
        _48 = &(*_2);
        StorageLive(_49);
        _49 = &(*_4);
        _0 = __global::initialize_shares_metadata(move _47, move _48, move _49) -> [return: bb129, unwind continue];
    }

    bb129: {
        StorageDead(_49);
        StorageDead(_48);
        StorageDead(_47);
        goto -> bb141;
    }

    bb130: {
        StorageLive(_50);
        _50 = &(*_1);
        StorageLive(_51);
        _51 = &(*_2);
        StorageLive(_52);
        _52 = &(*_4);
        _0 = __global::update_shares_metadata(move _50, move _51, move _52) -> [return: bb131, unwind continue];
    }

    bb131: {
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_50);
        goto -> bb141;
    }

    bb132: {
        StorageLive(_53);
        _53 = &(*_1);
        StorageLive(_54);
        _54 = &(*_2);
        StorageLive(_55);
        _55 = &(*_4);
        _0 = __global::withdraw_from_available(move _53, move _54, move _55) -> [return: bb133, unwind continue];
    }

    bb133: {
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_53);
        goto -> bb141;
    }

    bb134: {
        StorageLive(_56);
        _56 = &(*_1);
        StorageLive(_57);
        _57 = &(*_2);
        StorageLive(_58);
        _58 = &(*_4);
        _0 = __global::remove_allocation(move _56, move _57, move _58) -> [return: bb135, unwind continue];
    }

    bb135: {
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        goto -> bb141;
    }

    bb136: {
        StorageLive(_59);
        _59 = &(*_1);
        StorageLive(_60);
        _60 = &(*_2);
        StorageLive(_61);
        StorageLive(_62);
        _62 = &_4;
        _69 = deref_copy (*_62);
        _61 = &(*_69);
        _0 = __idl_dispatch(move _59, move _60, move _61) -> [return: bb137, unwind continue];
    }

    bb137: {
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_59);
        StorageDead(_62);
        goto -> bb141;
    }

    bb138: {
        StorageLive(_63);
        _63 = &(*_1);
        StorageLive(_64);
        _64 = &(*_2);
        StorageLive(_65);
        StorageLive(_66);
        _66 = &_4;
        _70 = deref_copy (*_66);
        _65 = &(*_70);
        _0 = __event_dispatch(move _63, move _64, move _65) -> [return: bb139, unwind continue];
    }

    bb139: {
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_63);
        StorageDead(_66);
        goto -> bb141;
    }

    bb140: {
        StorageDead(_68);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _67);
        StorageDead(_67);
        goto -> bb141;
    }

    bb141: {
        StorageDead(_5);
        StorageDead(_4);
        return;
    }
}
