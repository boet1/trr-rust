// MIR for `cpi_mem::<impl at programs\kvault\src\utils\cpi_mem.rs:24:1: 24:35>::ix` before PreCodegen

fn cpi_mem::<impl at programs\kvault\src\utils\cpi_mem.rs:24:1: 24:35>::ix(_1: &mut cpi_mem::CpiMemoryLender<'_>, _2: &anchor_lang::prelude::Pubkey, _3: &[AccountMeta], _4: &[u8]) -> Instruction {
    debug self => _1;
    debug program_id => _2;
    debug ix_accounts => _3;
    debug ix_data => _4;
    let mut _0: solana_program::instruction::Instruction;
    let mut _5: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _6: std::option::Option<std::vec::Vec<anchor_lang::prelude::AccountMeta>>;
    let mut _7: &mut std::option::Option<std::vec::Vec<anchor_lang::prelude::AccountMeta>>;
    let mut _9: std::option::Option<std::vec::Vec<u8>>;
    let mut _10: &mut std::option::Option<std::vec::Vec<u8>>;
    let _11: ();
    let mut _12: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let _13: ();
    let mut _14: &mut std::vec::Vec<u8>;
    let _15: ();
    let mut _16: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _17: &[anchor_lang::prelude::AccountMeta];
    let _18: ();
    let mut _19: &mut std::vec::Vec<u8>;
    let mut _20: &[u8];
    let mut _21: anchor_lang::prelude::Pubkey;
    let mut _22: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _23: std::vec::Vec<u8>;
    scope 1 {
        debug accounts => _5;
        let mut _8: std::vec::Vec<u8>;
        scope 2 {
            debug data => _8;
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &mut ((*_1).0: std::option::Option<std::vec::Vec<anchor_lang::prelude::AccountMeta>>);
        _6 = Option::<Vec<AccountMeta>>::take(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = Option::<Vec<AccountMeta>>::unwrap(move _6) -> [return: bb2, unwind: bb11];
    }

    bb2: {
        StorageDead(_6);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &mut ((*_1).1: std::option::Option<std::vec::Vec<u8>>);
        _9 = Option::<Vec<u8>>::take(move _10) -> [return: bb3, unwind: bb10];
    }

    bb3: {
        StorageDead(_10);
        _8 = Option::<Vec<u8>>::unwrap(move _9) -> [return: bb4, unwind: bb10];
    }

    bb4: {
        StorageDead(_9);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &mut _5;
        _11 = Vec::<AccountMeta>::clear(move _12) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        StorageDead(_12);
        StorageDead(_11);
        StorageLive(_13);
        StorageLive(_14);
        _14 = &mut _8;
        _13 = Vec::<u8>::clear(move _14) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &mut _5;
        StorageLive(_17);
        _17 = &(*_3);
        _15 = Vec::<AccountMeta>::extend_from_slice(move _16, move _17) -> [return: bb7, unwind: bb9];
    }

    bb7: {
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &mut _8;
        StorageLive(_20);
        _20 = &(*_4);
        _18 = Vec::<u8>::extend_from_slice(move _19, move _20) -> [return: bb8, unwind: bb9];
    }

    bb8: {
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageLive(_21);
        _21 = (*_2);
        StorageLive(_22);
        _22 = move _5;
        StorageLive(_23);
        _23 = move _8;
        _0 = Instruction { program_id: move _21, accounts: move _22, data: move _23 };
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_8);
        StorageDead(_5);
        return;
    }

    bb9 (cleanup): {
        drop(_8) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        drop(_5) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }
}
