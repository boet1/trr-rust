// MIR for `state::<impl at programs\kvault\src\state.rs:82:1: 82:16>::get_reserves_with_allocation_count` before PreCodegen

fn state::<impl at programs\kvault\src\state.rs:82:1: 82:16>::get_reserves_with_allocation_count(_1: &state::VaultState) -> usize {
    debug self => _1;
    let mut _0: usize;
    let mut _2: std::iter::Filter<std::slice::Iter<'_, state::VaultAllocation>, {closure@programs\kvault\src\state.rs:109:21: 109:24}>;
    let mut _3: std::slice::Iter<'_, state::VaultAllocation>;
    let mut _4: &[state::VaultAllocation];
    let mut _5: &[state::VaultAllocation; 25];
    let mut _6: {closure@programs\kvault\src\state.rs:109:21: 109:24};

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &((*_1).18: [state::VaultAllocation; 25]);
        _4 = move _5 as &[state::VaultAllocation] (PointerCoercion(Unsize));
        StorageDead(_5);
        _3 = core::slice::<impl [VaultAllocation]>::iter(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_4);
        StorageLive(_6);
        _6 = {closure@programs\kvault\src\state.rs:109:21: 109:24};
        _2 = <std::slice::Iter<'_, VaultAllocation> as Iterator>::filter::<{closure@programs\kvault\src\state.rs:109:21: 109:24}>(move _3, move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        StorageDead(_3);
        _0 = <Filter<std::slice::Iter<'_, VaultAllocation>, {closure@programs\kvault\src\state.rs:109:21: 109:24}> as Iterator>::count(move _2) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_2);
        return;
    }
}
