// MIR for `handlers::handler_update_metadata::<impl at programs\kvault\src\handlers\handler_update_metadata.rs:27:10: 27:18>::try_accounts` before PreCodegen

fn handlers::handler_update_metadata::<impl at programs\kvault\src\handlers\handler_update_metadata.rs:27:10: 27:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut UpdateSharesMetadataBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<handlers::handler_update_metadata::UpdateSharesMetadata<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<handlers::handler_update_metadata::UpdateSharesMetadata<'_>, anchor_lang::error::Error>;
    let _6: anchor_lang::prelude::Signer<'_>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _8: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _9: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _10: &anchor_lang::prelude::Pubkey;
    let mut _11: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _12: &[u8];
    let mut _13: &mut handlers::handler_update_metadata::UpdateSharesMetadataBumps;
    let mut _14: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _15: {closure@programs\kvault\src\handlers\handler_update_metadata.rs:27:10: 27:18};
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _20: anchor_lang::prelude::Signer<'_>;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::VaultState>>;
    let mut _23: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::VaultState>, anchor_lang::error::Error>;
    let mut _24: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::VaultState>, anchor_lang::error::Error>;
    let mut _25: &anchor_lang::prelude::Pubkey;
    let mut _26: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _27: &[u8];
    let mut _28: &mut handlers::handler_update_metadata::UpdateSharesMetadataBumps;
    let mut _29: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _30: {closure@programs\kvault\src\handlers\handler_update_metadata.rs:27:10: 27:18};
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _38: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _39: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _40: &anchor_lang::prelude::Pubkey;
    let mut _41: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _42: &[u8];
    let mut _43: &mut handlers::handler_update_metadata::UpdateSharesMetadataBumps;
    let mut _44: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _45: {closure@programs\kvault\src\handlers\handler_update_metadata.rs:27:10: 27:18};
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Account<'_, anchor_spl::metadata::MetadataAccount>>;
    let mut _53: std::result::Result<anchor_lang::prelude::Account<'_, anchor_spl::metadata::MetadataAccount>, anchor_lang::error::Error>;
    let mut _54: std::result::Result<anchor_lang::prelude::Account<'_, anchor_spl::metadata::MetadataAccount>, anchor_lang::error::Error>;
    let mut _55: &anchor_lang::prelude::Pubkey;
    let mut _56: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _57: &[u8];
    let mut _58: &mut handlers::handler_update_metadata::UpdateSharesMetadataBumps;
    let mut _59: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _60: {closure@programs\kvault\src\handlers\handler_update_metadata.rs:27:10: 27:18};
    let mut _61: isize;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Program<'_, anchor_spl::metadata::Metadata>>;
    let mut _68: std::result::Result<anchor_lang::prelude::Program<'_, anchor_spl::metadata::Metadata>, anchor_lang::error::Error>;
    let mut _69: std::result::Result<anchor_lang::prelude::Program<'_, anchor_spl::metadata::Metadata>, anchor_lang::error::Error>;
    let mut _70: &anchor_lang::prelude::Pubkey;
    let mut _71: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _72: &[u8];
    let mut _73: &mut handlers::handler_update_metadata::UpdateSharesMetadataBumps;
    let mut _74: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _75: {closure@programs\kvault\src\handlers\handler_update_metadata.rs:27:10: 27:18};
    let mut _76: isize;
    let mut _78: !;
    let mut _79: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _81: ();
    let mut _82: bool;
    let mut _83: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _84: &anchor_lang::prelude::Signer<'_>;
    let _85: &anchor_lang::prelude::Signer<'_>;
    let mut _86: !;
    let mut _87: anchor_lang::error::Error;
    let mut _88: anchor_lang::error::Error;
    let mut _89: anchor_lang::error::ErrorCode;
    let _90: ();
    let mut _92: &state::VaultState;
    let mut _93: &std::cell::Ref<'_, state::VaultState>;
    let _94: std::cell::Ref<'_, state::VaultState>;
    let mut _95: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::VaultState>>;
    let mut _96: std::result::Result<std::cell::Ref<'_, state::VaultState>, anchor_lang::error::Error>;
    let mut _97: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _98: isize;
    let mut _100: !;
    let mut _101: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _104: &anchor_lang::prelude::Signer<'_>;
    let mut _105: bool;
    let mut _106: &anchor_lang::prelude::Pubkey;
    let mut _107: &anchor_lang::prelude::Pubkey;
    let mut _108: !;
    let mut _109: anchor_lang::error::Error;
    let mut _110: anchor_lang::error::Error;
    let mut _111: anchor_lang::error::Error;
    let mut _112: anchor_lang::error::ErrorCode;
    let mut _113: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _114: anchor_lang::prelude::Pubkey;
    let mut _115: anchor_lang::prelude::Pubkey;
    let _116: ();
    let mut _118: &state::VaultState;
    let mut _119: &std::cell::Ref<'_, state::VaultState>;
    let _120: std::cell::Ref<'_, state::VaultState>;
    let mut _121: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::VaultState>>;
    let mut _122: std::result::Result<std::cell::Ref<'_, state::VaultState>, anchor_lang::error::Error>;
    let mut _123: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _124: isize;
    let mut _126: !;
    let mut _127: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _130: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _131: bool;
    let mut _132: &anchor_lang::prelude::Pubkey;
    let mut _133: &anchor_lang::prelude::Pubkey;
    let mut _134: !;
    let mut _135: anchor_lang::error::Error;
    let mut _136: anchor_lang::error::Error;
    let mut _137: anchor_lang::error::Error;
    let mut _138: anchor_lang::error::ErrorCode;
    let mut _139: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _140: anchor_lang::prelude::Pubkey;
    let mut _141: anchor_lang::prelude::Pubkey;
    let _142: ();
    let mut _143: bool;
    let mut _144: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _145: &anchor_lang::prelude::Account<'_, anchor_spl::metadata::MetadataAccount>;
    let _146: &anchor_lang::prelude::Account<'_, anchor_spl::metadata::MetadataAccount>;
    let mut _147: !;
    let mut _148: anchor_lang::error::Error;
    let mut _149: anchor_lang::error::Error;
    let mut _150: anchor_lang::error::ErrorCode;
    let _151: ();
    let mut _152: bool;
    let mut _153: &anchor_lang::prelude::Pubkey;
    let _154: &anchor_spl::metadata::mpl_token_metadata::accounts::Metadata;
    let mut _155: &anchor_spl::metadata::MetadataAccount;
    let _156: &anchor_spl::metadata::MetadataAccount;
    let mut _157: &anchor_lang::prelude::Account<'_, anchor_spl::metadata::MetadataAccount>;
    let mut _158: &anchor_lang::prelude::Pubkey;
    let _159: &state::VaultState;
    let mut _160: &std::cell::Ref<'_, state::VaultState>;
    let _161: std::cell::Ref<'_, state::VaultState>;
    let mut _162: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::VaultState>>;
    let mut _163: std::result::Result<std::cell::Ref<'_, state::VaultState>, anchor_lang::error::Error>;
    let mut _164: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _165: isize;
    let mut _167: !;
    let mut _168: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _170: !;
    let mut _171: anchor_lang::error::Error;
    let mut _172: anchor_lang::error::Error;
    let mut _173: anchor_lang::error::ErrorCode;
    let _174: ();
    let mut _175: bool;
    let mut _176: &anchor_lang::prelude::Pubkey;
    let _177: &anchor_spl::metadata::mpl_token_metadata::accounts::Metadata;
    let mut _178: &anchor_spl::metadata::MetadataAccount;
    let _179: &anchor_spl::metadata::MetadataAccount;
    let mut _180: &anchor_lang::prelude::Account<'_, anchor_spl::metadata::MetadataAccount>;
    let mut _181: &anchor_lang::prelude::Pubkey;
    let _182: &state::VaultState;
    let mut _183: &std::cell::Ref<'_, state::VaultState>;
    let _184: std::cell::Ref<'_, state::VaultState>;
    let mut _185: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::VaultState>>;
    let mut _186: std::result::Result<std::cell::Ref<'_, state::VaultState>, anchor_lang::error::Error>;
    let mut _187: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _188: isize;
    let mut _190: !;
    let mut _191: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _193: !;
    let mut _194: anchor_lang::error::Error;
    let mut _195: anchor_lang::error::Error;
    let mut _196: anchor_lang::error::ErrorCode;
    let mut _197: handlers::handler_update_metadata::UpdateSharesMetadata<'_>;
    let mut _198: anchor_lang::prelude::Signer<'_>;
    let mut _199: anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _200: anchor_lang::prelude::AccountInfo<'_>;
    let mut _201: anchor_lang::prelude::Account<'_, anchor_spl::metadata::MetadataAccount>;
    let mut _202: anchor_lang::prelude::Program<'_, anchor_spl::metadata::Metadata>;
    let mut _203: bool;
    let mut _204: bool;
    let mut _205: bool;
    let mut _206: bool;
    let mut _207: bool;
    let mut _208: bool;
    let mut _209: bool;
    let mut _210: bool;
    let mut _211: isize;
    let mut _212: isize;
    let mut _213: isize;
    let mut _214: isize;
    let mut _215: isize;
    let mut _216: isize;
    let mut _217: isize;
    let mut _218: isize;
    let mut _219: isize;
    let mut _220: isize;
    let mut _221: isize;
    let mut _222: isize;
    let mut _223: isize;
    let mut _224: isize;
    let mut _225: isize;
    let mut _226: isize;
    let mut _227: isize;
    let mut _228: isize;
    let mut _229: isize;
    let mut _230: isize;
    let mut _231: isize;
    let mut _232: isize;
    let mut _233: isize;
    let mut _234: isize;
    let mut _235: isize;
    let mut _236: isize;
    let mut _237: isize;
    let mut _238: isize;
    let mut _239: isize;
    let mut _240: isize;
    let mut _241: isize;
    let mut _242: isize;
    let mut _243: isize;
    let mut _244: isize;
    let mut _245: isize;
    let mut _246: isize;
    let mut _247: isize;
    let mut _248: isize;
    let mut _249: isize;
    let mut _250: isize;
    let mut _251: isize;
    let mut _252: isize;
    let mut _253: isize;
    let mut _254: isize;
    let mut _255: isize;
    let mut _256: isize;
    let mut _257: isize;
    let mut _258: isize;
    let mut _259: isize;
    scope 1 {
        debug vault_admin_authority => _6;
        let _21: anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
        let _32: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _35: anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
        scope 6 {
            debug vault_state => _21;
            let _36: anchor_lang::prelude::AccountInfo<'_>;
            let _47: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _50: anchor_lang::prelude::AccountInfo<'_>;
            scope 11 {
                debug base_vault_authority => _36;
                let _51: anchor_lang::prelude::Account<'_, anchor_spl::metadata::MetadataAccount>;
                let _62: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _65: anchor_lang::prelude::Account<'_, anchor_spl::metadata::MetadataAccount>;
                scope 16 {
                    debug shares_metadata => _51;
                    let _66: anchor_lang::prelude::Program<'_, anchor_spl::metadata::Metadata>;
                    let _77: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _80: anchor_lang::prelude::Program<'_, anchor_spl::metadata::Metadata>;
                    scope 21 {
                        debug metadata_program => _66;
                        let _91: anchor_lang::prelude::Pubkey;
                        let _99: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _102: std::cell::Ref<'_, state::VaultState>;
                        let _117: anchor_lang::prelude::Pubkey;
                        let _125: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _128: std::cell::Ref<'_, state::VaultState>;
                        let _166: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _169: std::cell::Ref<'_, state::VaultState>;
                        let _189: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _192: std::cell::Ref<'_, state::VaultState>;
                        scope 26 {
                            debug my_key => _91;
                            let _103: anchor_lang::prelude::Pubkey;
                            scope 31 {
                                debug target_key => _103;
                            }
                        }
                        scope 27 {
                            debug residual => _99;
                            scope 28 {
                            }
                        }
                        scope 29 {
                            debug val => _102;
                            scope 30 {
                            }
                        }
                        scope 32 {
                            debug my_key => _117;
                            let _129: anchor_lang::prelude::Pubkey;
                            scope 37 {
                                debug target_key => _129;
                            }
                        }
                        scope 33 {
                            debug residual => _125;
                            scope 34 {
                            }
                        }
                        scope 35 {
                            debug val => _128;
                            scope 36 {
                            }
                        }
                        scope 38 {
                            debug residual => _166;
                            scope 39 {
                            }
                        }
                        scope 40 {
                            debug val => _169;
                            scope 41 {
                            }
                        }
                        scope 42 {
                            debug residual => _189;
                            scope 43 {
                            }
                        }
                        scope 44 {
                            debug val => _192;
                            scope 45 {
                            }
                        }
                    }
                    scope 22 {
                        debug residual => _77;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug val => _80;
                        scope 25 {
                        }
                    }
                }
                scope 17 {
                    debug residual => _62;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _65;
                    scope 20 {
                    }
                }
            }
            scope 12 {
                debug residual => _47;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _50;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _32;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _35;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _17;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _20;
        scope 5 {
        }
    }

    bb0: {
        _210 = const false;
        _209 = const false;
        _208 = const false;
        _207 = const false;
        _206 = const false;
        _205 = const false;
        _204 = const false;
        _203 = const false;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_1);
        StorageLive(_11);
        _11 = &mut (*_2);
        StorageLive(_12);
        _12 = &(*_3);
        StorageLive(_13);
        _13 = &mut (*_4);
        StorageLive(_14);
        _14 = &mut (*_5);
        _9 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, UpdateSharesMetadataBumps>>::try_accounts(move _10, move _11, move _12, move _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_15);
        _15 = {closure@programs\kvault\src\handlers\handler_update_metadata.rs:27:10: 27:18};
        _8 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_update_metadata.rs:27:10: 27:18}>(move _9, move _15) -> [return: bb2, unwind: bb110];
    }

    bb2: {
        StorageDead(_15);
        StorageDead(_9);
        _7 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _8) -> [return: bb3, unwind: bb110];
    }

    bb3: {
        StorageDead(_8);
        _16 = discriminant(_7);
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_20);
        _20 = move ((_7 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _6 = move _20;
        StorageDead(_20);
        _211 = discriminant(_7);
        StorageDead(_7);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &(*_1);
        StorageLive(_26);
        _26 = &mut (*_2);
        StorageLive(_27);
        _27 = &(*_3);
        StorageLive(_28);
        _28 = &mut (*_4);
        StorageLive(_29);
        _29 = &mut (*_5);
        _24 = <anchor_lang::prelude::AccountLoader<'_, state::VaultState> as anchor_lang::Accounts<'_, UpdateSharesMetadataBumps>>::try_accounts(move _25, move _26, move _27, move _28, move _29) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_17);
        _17 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<handlers::handler_update_metadata::UpdateSharesMetadata<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _19) -> [return: bb7, unwind: bb125];
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_17);
        _249 = discriminant(_7);
        StorageDead(_7);
        goto -> bb102;
    }

    bb8: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_30);
        _30 = {closure@programs\kvault\src\handlers\handler_update_metadata.rs:27:10: 27:18};
        _23 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, state::VaultState>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_update_metadata.rs:27:10: 27:18}>(move _24, move _30) -> [return: bb9, unwind: bb110];
    }

    bb9: {
        StorageDead(_30);
        StorageDead(_24);
        _22 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::VaultState>, anchor_lang::error::Error> as Try>::branch(move _23) -> [return: bb10, unwind: bb110];
    }

    bb10: {
        StorageDead(_23);
        _31 = discriminant(_22);
        switchInt(move _31) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_35);
        _35 = move ((_22 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::VaultState>);
        _21 = move _35;
        StorageDead(_35);
        _213 = discriminant(_22);
        StorageDead(_22);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &(*_1);
        StorageLive(_41);
        _41 = &mut (*_2);
        StorageLive(_42);
        _42 = &(*_3);
        StorageLive(_43);
        _43 = &mut (*_4);
        StorageLive(_44);
        _44 = &mut (*_5);
        _39 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, UpdateSharesMetadataBumps>>::try_accounts(move _40, move _41, move _42, move _43, move _44) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_32);
        _32 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_34);
        _34 = move _32;
        _0 = <std::result::Result<handlers::handler_update_metadata::UpdateSharesMetadata<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _34) -> [return: bb13, unwind: bb124];
    }

    bb13: {
        StorageDead(_34);
        StorageDead(_32);
        _247 = discriminant(_22);
        StorageDead(_22);
        goto -> bb101;
    }

    bb14: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_45);
        _45 = {closure@programs\kvault\src\handlers\handler_update_metadata.rs:27:10: 27:18};
        _38 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_update_metadata.rs:27:10: 27:18}>(move _39, move _45) -> [return: bb15, unwind: bb110];
    }

    bb15: {
        StorageDead(_45);
        StorageDead(_39);
        _37 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _38) -> [return: bb16, unwind: bb110];
    }

    bb16: {
        StorageDead(_38);
        _46 = discriminant(_37);
        switchInt(move _46) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_50);
        _50 = move ((_37 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _36 = move _50;
        StorageDead(_50);
        _215 = discriminant(_37);
        StorageDead(_37);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &(*_1);
        StorageLive(_56);
        _56 = &mut (*_2);
        StorageLive(_57);
        _57 = &(*_3);
        StorageLive(_58);
        _58 = &mut (*_4);
        StorageLive(_59);
        _59 = &mut (*_5);
        _54 = <anchor_lang::prelude::Account<'_, MetadataAccount> as anchor_lang::Accounts<'_, UpdateSharesMetadataBumps>>::try_accounts(move _55, move _56, move _57, move _58, move _59) -> [return: bb20, unwind: bb109];
    }

    bb18: {
        StorageLive(_47);
        _47 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_49);
        _49 = move _47;
        _0 = <std::result::Result<handlers::handler_update_metadata::UpdateSharesMetadata<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _49) -> [return: bb19, unwind: bb123];
    }

    bb19: {
        StorageDead(_49);
        StorageDead(_47);
        _245 = discriminant(_37);
        StorageDead(_37);
        goto -> bb100;
    }

    bb20: {
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageLive(_60);
        _60 = {closure@programs\kvault\src\handlers\handler_update_metadata.rs:27:10: 27:18};
        _53 = std::result::Result::<anchor_lang::prelude::Account<'_, MetadataAccount>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_update_metadata.rs:27:10: 27:18}>(move _54, move _60) -> [return: bb21, unwind: bb109];
    }

    bb21: {
        StorageDead(_60);
        StorageDead(_54);
        _52 = <std::result::Result<anchor_lang::prelude::Account<'_, MetadataAccount>, anchor_lang::error::Error> as Try>::branch(move _53) -> [return: bb22, unwind: bb109];
    }

    bb22: {
        StorageDead(_53);
        _61 = discriminant(_52);
        switchInt(move _61) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_65);
        _65 = move ((_52 as Continue).0: anchor_lang::prelude::Account<'_, anchor_spl::metadata::MetadataAccount>);
        _51 = move _65;
        StorageDead(_65);
        _217 = discriminant(_52);
        StorageDead(_52);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &(*_1);
        StorageLive(_71);
        _71 = &mut (*_2);
        StorageLive(_72);
        _72 = &(*_3);
        StorageLive(_73);
        _73 = &mut (*_4);
        StorageLive(_74);
        _74 = &mut (*_5);
        _69 = <anchor_lang::prelude::Program<'_, anchor_spl::metadata::Metadata> as anchor_lang::Accounts<'_, UpdateSharesMetadataBumps>>::try_accounts(move _70, move _71, move _72, move _73, move _74) -> [return: bb26, unwind: bb108];
    }

    bb24: {
        StorageLive(_62);
        _62 = move ((_52 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_64);
        _64 = move _62;
        _0 = <std::result::Result<handlers::handler_update_metadata::UpdateSharesMetadata<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _64) -> [return: bb25, unwind: bb122];
    }

    bb25: {
        StorageDead(_64);
        StorageDead(_62);
        _243 = discriminant(_52);
        StorageDead(_52);
        goto -> bb99;
    }

    bb26: {
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_75);
        _75 = {closure@programs\kvault\src\handlers\handler_update_metadata.rs:27:10: 27:18};
        _68 = std::result::Result::<anchor_lang::prelude::Program<'_, anchor_spl::metadata::Metadata>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_update_metadata.rs:27:10: 27:18}>(move _69, move _75) -> [return: bb27, unwind: bb108];
    }

    bb27: {
        StorageDead(_75);
        StorageDead(_69);
        _67 = <std::result::Result<anchor_lang::prelude::Program<'_, anchor_spl::metadata::Metadata>, anchor_lang::error::Error> as Try>::branch(move _68) -> [return: bb28, unwind: bb108];
    }

    bb28: {
        StorageDead(_68);
        _76 = discriminant(_67);
        switchInt(move _76) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_80);
        _80 = move ((_67 as Continue).0: anchor_lang::prelude::Program<'_, anchor_spl::metadata::Metadata>);
        _66 = move _80;
        StorageDead(_80);
        _219 = discriminant(_67);
        StorageDead(_67);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &_6;
        _84 = &(*_85);
        _83 = <anchor_lang::prelude::Signer<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _84) -> [return: bb32, unwind: bb108];
    }

    bb30: {
        StorageLive(_77);
        _77 = move ((_67 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_79);
        _79 = move _77;
        _0 = <std::result::Result<handlers::handler_update_metadata::UpdateSharesMetadata<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _79) -> [return: bb31, unwind: bb121];
    }

    bb31: {
        StorageDead(_79);
        StorageDead(_77);
        _241 = discriminant(_67);
        StorageDead(_67);
        goto -> bb98;
    }

    bb32: {
        StorageDead(_84);
        _82 = ((*_83).6: bool);
        switchInt(move _82) -> [0: bb33, otherwise: bb36];
    }

    bb33: {
        StorageDead(_85);
        StorageDead(_83);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = ConstraintMut;
        _88 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _89) -> [return: bb34, unwind: bb108];
    }

    bb34: {
        StorageDead(_89);
        _87 = anchor_lang::error::Error::with_account_name::<&str>(move _88, const "vault_admin_authority") -> [return: bb35, unwind: bb108];
    }

    bb35: {
        StorageDead(_88);
        _0 = std::result::Result::<handlers::handler_update_metadata::UpdateSharesMetadata<'_>, anchor_lang::error::Error>::Err(move _87);
        StorageDead(_87);
        StorageDead(_82);
        StorageDead(_81);
        goto -> bb98;
    }

    bb36: {
        StorageDead(_85);
        StorageDead(_83);
        _81 = const ();
        StorageDead(_82);
        StorageDead(_81);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = &_21;
        _96 = anchor_lang::prelude::AccountLoader::<'_, state::VaultState>::load(move _97) -> [return: bb37, unwind: bb108];
    }

    bb37: {
        StorageDead(_97);
        _95 = <std::result::Result<Ref<'_, state::VaultState>, anchor_lang::error::Error> as Try>::branch(move _96) -> [return: bb38, unwind: bb108];
    }

    bb38: {
        _209 = const true;
        _210 = const true;
        StorageDead(_96);
        _98 = discriminant(_95);
        switchInt(move _98) -> [0: bb39, 1: bb40, otherwise: bb5];
    }

    bb39: {
        StorageLive(_102);
        _102 = move ((_95 as Continue).0: std::cell::Ref<'_, state::VaultState>);
        _94 = move _102;
        StorageDead(_102);
        _93 = &_94;
        _92 = <Ref<'_, state::VaultState> as Deref>::deref(move _93) -> [return: bb42, unwind: bb107];
    }

    bb40: {
        StorageLive(_99);
        _99 = move ((_95 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_101);
        _101 = move _99;
        _0 = <std::result::Result<handlers::handler_update_metadata::UpdateSharesMetadata<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _101) -> [return: bb41, unwind: bb120];
    }

    bb41: {
        StorageDead(_101);
        StorageDead(_99);
        StorageDead(_93);
        _239 = discriminant(_95);
        _209 = const false;
        _210 = const false;
        StorageDead(_95);
        StorageDead(_94);
        StorageDead(_92);
        goto -> bb97;
    }

    bb42: {
        StorageDead(_93);
        _91 = ((*_92).0: anchor_lang::prelude::Pubkey);
        drop(_94) -> [return: bb111, unwind: bb120];
    }

    bb43: {
        StorageDead(_104);
        StorageLive(_105);
        StorageLive(_106);
        _106 = &_91;
        StorageLive(_107);
        _107 = &_103;
        _105 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _106, move _107) -> [return: bb44, unwind: bb108];
    }

    bb44: {
        switchInt(move _105) -> [0: bb49, otherwise: bb45];
    }

    bb45: {
        StorageDead(_107);
        StorageDead(_106);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _112 = ConstraintHasOne;
        _111 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _112) -> [return: bb46, unwind: bb108];
    }

    bb46: {
        StorageDead(_112);
        _110 = anchor_lang::error::Error::with_account_name::<&str>(move _111, const "vault_state") -> [return: bb47, unwind: bb108];
    }

    bb47: {
        StorageDead(_111);
        StorageLive(_113);
        StorageLive(_114);
        _114 = _91;
        StorageLive(_115);
        _115 = _103;
        _113 = (move _114, move _115);
        StorageDead(_115);
        StorageDead(_114);
        _109 = anchor_lang::error::Error::with_pubkeys(move _110, move _113) -> [return: bb48, unwind: bb108];
    }

    bb48: {
        StorageDead(_113);
        StorageDead(_110);
        _0 = std::result::Result::<handlers::handler_update_metadata::UpdateSharesMetadata<'_>, anchor_lang::error::Error>::Err(move _109);
        StorageDead(_109);
        StorageDead(_105);
        StorageDead(_103);
        goto -> bb97;
    }

    bb49: {
        StorageDead(_107);
        StorageDead(_106);
        _90 = const ();
        StorageDead(_105);
        StorageDead(_103);
        StorageDead(_91);
        StorageDead(_90);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _123 = &_21;
        _122 = anchor_lang::prelude::AccountLoader::<'_, state::VaultState>::load(move _123) -> [return: bb50, unwind: bb108];
    }

    bb50: {
        StorageDead(_123);
        _121 = <std::result::Result<Ref<'_, state::VaultState>, anchor_lang::error::Error> as Try>::branch(move _122) -> [return: bb51, unwind: bb108];
    }

    bb51: {
        _207 = const true;
        _208 = const true;
        StorageDead(_122);
        _124 = discriminant(_121);
        switchInt(move _124) -> [0: bb52, 1: bb53, otherwise: bb5];
    }

    bb52: {
        StorageLive(_128);
        _128 = move ((_121 as Continue).0: std::cell::Ref<'_, state::VaultState>);
        _120 = move _128;
        StorageDead(_128);
        _119 = &_120;
        _118 = <Ref<'_, state::VaultState> as Deref>::deref(move _119) -> [return: bb55, unwind: bb106];
    }

    bb53: {
        StorageLive(_125);
        _125 = move ((_121 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_127);
        _127 = move _125;
        _0 = <std::result::Result<handlers::handler_update_metadata::UpdateSharesMetadata<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _127) -> [return: bb54, unwind: bb119];
    }

    bb54: {
        StorageDead(_127);
        StorageDead(_125);
        StorageDead(_119);
        _237 = discriminant(_121);
        _207 = const false;
        _208 = const false;
        StorageDead(_121);
        StorageDead(_120);
        StorageDead(_118);
        goto -> bb96;
    }

    bb55: {
        StorageDead(_119);
        _117 = ((*_118).1: anchor_lang::prelude::Pubkey);
        drop(_120) -> [return: bb112, unwind: bb119];
    }

    bb56: {
        StorageDead(_130);
        StorageLive(_131);
        StorageLive(_132);
        _132 = &_117;
        StorageLive(_133);
        _133 = &_129;
        _131 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _132, move _133) -> [return: bb57, unwind: bb108];
    }

    bb57: {
        switchInt(move _131) -> [0: bb62, otherwise: bb58];
    }

    bb58: {
        StorageDead(_133);
        StorageDead(_132);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        _138 = ConstraintHasOne;
        _137 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _138) -> [return: bb59, unwind: bb108];
    }

    bb59: {
        StorageDead(_138);
        _136 = anchor_lang::error::Error::with_account_name::<&str>(move _137, const "vault_state") -> [return: bb60, unwind: bb108];
    }

    bb60: {
        StorageDead(_137);
        StorageLive(_139);
        StorageLive(_140);
        _140 = _117;
        StorageLive(_141);
        _141 = _129;
        _139 = (move _140, move _141);
        StorageDead(_141);
        StorageDead(_140);
        _135 = anchor_lang::error::Error::with_pubkeys(move _136, move _139) -> [return: bb61, unwind: bb108];
    }

    bb61: {
        StorageDead(_139);
        StorageDead(_136);
        _0 = std::result::Result::<handlers::handler_update_metadata::UpdateSharesMetadata<'_>, anchor_lang::error::Error>::Err(move _135);
        StorageDead(_135);
        StorageDead(_131);
        StorageDead(_129);
        goto -> bb96;
    }

    bb62: {
        StorageDead(_133);
        StorageDead(_132);
        _116 = const ();
        StorageDead(_131);
        StorageDead(_129);
        StorageDead(_117);
        StorageDead(_116);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        _146 = &_51;
        _145 = &(*_146);
        _144 = <anchor_lang::prelude::Account<'_, MetadataAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _145) -> [return: bb63, unwind: bb108];
    }

    bb63: {
        StorageDead(_145);
        _143 = ((*_144).6: bool);
        switchInt(move _143) -> [0: bb64, otherwise: bb67];
    }

    bb64: {
        StorageDead(_146);
        StorageDead(_144);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        _150 = ConstraintMut;
        _149 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _150) -> [return: bb65, unwind: bb108];
    }

    bb65: {
        StorageDead(_150);
        _148 = anchor_lang::error::Error::with_account_name::<&str>(move _149, const "shares_metadata") -> [return: bb66, unwind: bb108];
    }

    bb66: {
        StorageDead(_149);
        _0 = std::result::Result::<handlers::handler_update_metadata::UpdateSharesMetadata<'_>, anchor_lang::error::Error>::Err(move _148);
        StorageDead(_148);
        StorageDead(_143);
        StorageDead(_142);
        goto -> bb98;
    }

    bb67: {
        StorageDead(_146);
        StorageDead(_144);
        _142 = const ();
        StorageDead(_143);
        StorageDead(_142);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        _157 = &_51;
        _156 = <anchor_lang::prelude::Account<'_, MetadataAccount> as Deref>::deref(move _157) -> [return: bb68, unwind: bb108];
    }

    bb68: {
        _155 = &(*_156);
        _154 = <MetadataAccount as Deref>::deref(move _155) -> [return: bb69, unwind: bb108];
    }

    bb69: {
        StorageDead(_157);
        StorageDead(_155);
        _153 = &((*_154).1: anchor_lang::prelude::Pubkey);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        _164 = &_21;
        _163 = anchor_lang::prelude::AccountLoader::<'_, state::VaultState>::load(move _164) -> [return: bb70, unwind: bb108];
    }

    bb70: {
        StorageDead(_164);
        _162 = <std::result::Result<Ref<'_, state::VaultState>, anchor_lang::error::Error> as Try>::branch(move _163) -> [return: bb71, unwind: bb108];
    }

    bb71: {
        _205 = const true;
        _206 = const true;
        StorageDead(_163);
        _165 = discriminant(_162);
        switchInt(move _165) -> [0: bb72, 1: bb73, otherwise: bb5];
    }

    bb72: {
        StorageLive(_169);
        _169 = move ((_162 as Continue).0: std::cell::Ref<'_, state::VaultState>);
        _161 = move _169;
        StorageDead(_169);
        _160 = &_161;
        _159 = <Ref<'_, state::VaultState> as Deref>::deref(move _160) -> [return: bb75, unwind: bb105];
    }

    bb73: {
        StorageLive(_166);
        _166 = move ((_162 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_168);
        _168 = move _166;
        _0 = <std::result::Result<handlers::handler_update_metadata::UpdateSharesMetadata<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _168) -> [return: bb74, unwind: bb118];
    }

    bb74: {
        StorageDead(_168);
        StorageDead(_166);
        StorageDead(_160);
        StorageDead(_158);
        StorageDead(_153);
        _235 = discriminant(_162);
        _205 = const false;
        _206 = const false;
        StorageDead(_162);
        StorageDead(_161);
        StorageDead(_159);
        StorageDead(_156);
        StorageDead(_154);
        goto -> bb95;
    }

    bb75: {
        StorageDead(_160);
        _158 = &((*_159).1: anchor_lang::prelude::Pubkey);
        _152 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _153, move _158) -> [return: bb76, unwind: bb105];
    }

    bb76: {
        switchInt(move _152) -> [0: bb78, otherwise: bb77];
    }

    bb77: {
        StorageDead(_158);
        StorageDead(_153);
        drop(_161) -> [return: bb114, unwind: bb118];
    }

    bb78: {
        StorageDead(_158);
        StorageDead(_153);
        drop(_161) -> [return: bb113, unwind: bb118];
    }

    bb79: {
        StorageDead(_173);
        _171 = anchor_lang::error::Error::with_account_name::<&str>(move _172, const "shares_metadata") -> [return: bb80, unwind: bb108];
    }

    bb80: {
        StorageDead(_172);
        _0 = std::result::Result::<handlers::handler_update_metadata::UpdateSharesMetadata<'_>, anchor_lang::error::Error>::Err(move _171);
        StorageDead(_171);
        goto -> bb95;
    }

    bb81: {
        _178 = &(*_179);
        _177 = <MetadataAccount as Deref>::deref(move _178) -> [return: bb82, unwind: bb108];
    }

    bb82: {
        StorageDead(_180);
        StorageDead(_178);
        _176 = &((*_177).2: anchor_lang::prelude::Pubkey);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        _187 = &_21;
        _186 = anchor_lang::prelude::AccountLoader::<'_, state::VaultState>::load(move _187) -> [return: bb83, unwind: bb108];
    }

    bb83: {
        StorageDead(_187);
        _185 = <std::result::Result<Ref<'_, state::VaultState>, anchor_lang::error::Error> as Try>::branch(move _186) -> [return: bb84, unwind: bb108];
    }

    bb84: {
        _203 = const true;
        _204 = const true;
        StorageDead(_186);
        _188 = discriminant(_185);
        switchInt(move _188) -> [0: bb85, 1: bb86, otherwise: bb5];
    }

    bb85: {
        StorageLive(_192);
        _192 = move ((_185 as Continue).0: std::cell::Ref<'_, state::VaultState>);
        _184 = move _192;
        StorageDead(_192);
        _183 = &_184;
        _182 = <Ref<'_, state::VaultState> as Deref>::deref(move _183) -> [return: bb88, unwind: bb104];
    }

    bb86: {
        StorageLive(_189);
        _189 = move ((_185 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_191);
        _191 = move _189;
        _0 = <std::result::Result<handlers::handler_update_metadata::UpdateSharesMetadata<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _191) -> [return: bb87, unwind: bb117];
    }

    bb87: {
        StorageDead(_191);
        StorageDead(_189);
        StorageDead(_183);
        StorageDead(_181);
        StorageDead(_176);
        _233 = discriminant(_185);
        _203 = const false;
        _204 = const false;
        StorageDead(_185);
        StorageDead(_184);
        StorageDead(_182);
        StorageDead(_179);
        StorageDead(_177);
        goto -> bb94;
    }

    bb88: {
        StorageDead(_183);
        _181 = &((*_182).7: anchor_lang::prelude::Pubkey);
        _175 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _176, move _181) -> [return: bb89, unwind: bb104];
    }

    bb89: {
        switchInt(move _175) -> [0: bb91, otherwise: bb90];
    }

    bb90: {
        StorageDead(_181);
        StorageDead(_176);
        drop(_184) -> [return: bb116, unwind: bb117];
    }

    bb91: {
        StorageDead(_181);
        StorageDead(_176);
        drop(_184) -> [return: bb115, unwind: bb117];
    }

    bb92: {
        StorageDead(_196);
        _194 = anchor_lang::error::Error::with_account_name::<&str>(move _195, const "shares_metadata") -> [return: bb93, unwind: bb108];
    }

    bb93: {
        StorageDead(_195);
        _0 = std::result::Result::<handlers::handler_update_metadata::UpdateSharesMetadata<'_>, anchor_lang::error::Error>::Err(move _194);
        StorageDead(_194);
        goto -> bb94;
    }

    bb94: {
        StorageDead(_175);
        StorageDead(_174);
        goto -> bb98;
    }

    bb95: {
        StorageDead(_152);
        StorageDead(_151);
        goto -> bb98;
    }

    bb96: {
        StorageDead(_117);
        StorageDead(_116);
        goto -> bb98;
    }

    bb97: {
        StorageDead(_91);
        StorageDead(_90);
        goto -> bb98;
    }

    bb98: {
        StorageDead(_66);
        drop(_51) -> [return: bb99, unwind: bb109];
    }

    bb99: {
        StorageDead(_51);
        drop(_36) -> [return: bb100, unwind: bb110];
    }

    bb100: {
        StorageDead(_36);
        goto -> bb101;
    }

    bb101: {
        StorageDead(_21);
        goto -> bb102;
    }

    bb102: {
        StorageDead(_6);
        goto -> bb103;
    }

    bb103: {
        return;
    }

    bb104 (cleanup): {
        drop(_184) -> [return: bb117, unwind terminate(cleanup)];
    }

    bb105 (cleanup): {
        drop(_161) -> [return: bb118, unwind terminate(cleanup)];
    }

    bb106 (cleanup): {
        drop(_120) -> [return: bb119, unwind terminate(cleanup)];
    }

    bb107 (cleanup): {
        drop(_94) -> [return: bb120, unwind terminate(cleanup)];
    }

    bb108 (cleanup): {
        drop(_51) -> [return: bb109, unwind terminate(cleanup)];
    }

    bb109 (cleanup): {
        drop(_36) -> [return: bb110, unwind terminate(cleanup)];
    }

    bb110 (cleanup): {
        resume;
    }

    bb111: {
        _221 = discriminant(_95);
        _209 = const false;
        _210 = const false;
        StorageDead(_95);
        StorageDead(_94);
        StorageDead(_92);
        StorageLive(_103);
        StorageLive(_104);
        _104 = &_6;
        _103 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _104) -> [return: bb43, unwind: bb108];
    }

    bb112: {
        _223 = discriminant(_121);
        _207 = const false;
        _208 = const false;
        StorageDead(_121);
        StorageDead(_120);
        StorageDead(_118);
        StorageLive(_129);
        StorageLive(_130);
        _130 = &_36;
        _129 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _130) -> [return: bb56, unwind: bb108];
    }

    bb113: {
        _225 = discriminant(_162);
        _205 = const false;
        _206 = const false;
        StorageDead(_162);
        StorageDead(_161);
        StorageDead(_159);
        StorageDead(_156);
        StorageDead(_154);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        _173 = ConstraintRaw;
        _172 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _173) -> [return: bb79, unwind: bb108];
    }

    bb114: {
        _227 = discriminant(_162);
        _205 = const false;
        _206 = const false;
        StorageDead(_162);
        StorageDead(_161);
        StorageDead(_159);
        StorageDead(_156);
        StorageDead(_154);
        _151 = const ();
        StorageDead(_152);
        StorageDead(_151);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        _180 = &_51;
        _179 = <anchor_lang::prelude::Account<'_, MetadataAccount> as Deref>::deref(move _180) -> [return: bb81, unwind: bb108];
    }

    bb115: {
        _229 = discriminant(_185);
        _203 = const false;
        _204 = const false;
        StorageDead(_185);
        StorageDead(_184);
        StorageDead(_182);
        StorageDead(_179);
        StorageDead(_177);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        _196 = ConstraintRaw;
        _195 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _196) -> [return: bb92, unwind: bb108];
    }

    bb116: {
        _231 = discriminant(_185);
        _203 = const false;
        _204 = const false;
        StorageDead(_185);
        StorageDead(_184);
        StorageDead(_182);
        StorageDead(_179);
        StorageDead(_177);
        _174 = const ();
        StorageDead(_175);
        StorageDead(_174);
        StorageLive(_197);
        StorageLive(_198);
        _198 = move _6;
        StorageLive(_199);
        _199 = move _21;
        StorageLive(_200);
        _200 = move _36;
        StorageLive(_201);
        _201 = move _51;
        StorageLive(_202);
        _202 = move _66;
        _197 = handlers::handler_update_metadata::UpdateSharesMetadata::<'_> { vault_admin_authority: move _198, vault_state: move _199, base_vault_authority: move _200, shares_metadata: move _201, metadata_program: move _202 };
        StorageDead(_202);
        StorageDead(_201);
        StorageDead(_200);
        StorageDead(_199);
        StorageDead(_198);
        _0 = std::result::Result::<handlers::handler_update_metadata::UpdateSharesMetadata<'_>, anchor_lang::error::Error>::Ok(move _197);
        StorageDead(_197);
        StorageDead(_66);
        StorageDead(_51);
        StorageDead(_36);
        StorageDead(_21);
        StorageDead(_6);
        goto -> bb103;
    }

    bb117 (cleanup): {
        _251 = discriminant(_185);
        goto -> bb108;
    }

    bb118 (cleanup): {
        _252 = discriminant(_162);
        goto -> bb108;
    }

    bb119 (cleanup): {
        _253 = discriminant(_121);
        goto -> bb108;
    }

    bb120 (cleanup): {
        _254 = discriminant(_95);
        goto -> bb108;
    }

    bb121 (cleanup): {
        _255 = discriminant(_67);
        goto -> bb108;
    }

    bb122 (cleanup): {
        _256 = discriminant(_52);
        goto -> bb109;
    }

    bb123 (cleanup): {
        _257 = discriminant(_37);
        goto -> bb110;
    }

    bb124 (cleanup): {
        _258 = discriminant(_22);
        goto -> bb110;
    }

    bb125 (cleanup): {
        _259 = discriminant(_7);
        goto -> bb110;
    }
}
