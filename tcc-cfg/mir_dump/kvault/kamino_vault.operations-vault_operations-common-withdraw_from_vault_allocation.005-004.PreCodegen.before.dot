digraph Mir_0_436 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn withdraw_from_vault_allocation(_1: &amp;ReErased mut state::VaultState, _2: u64, _3: &amp;ReErased anchor_lang::prelude::Pubkey) -&gt; std::result::Result&lt;(), anchor_lang::error::Error&gt;<br align="left"/>let _4: usize;<br align="left"/>let mut _5: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, usize&gt;;<br align="left"/>let mut _6: std::result::Result&lt;usize, anchor_lang::error::Error&gt;;<br align="left"/>let mut _7: std::option::Option&lt;usize&gt;;<br align="left"/>let mut _8: &amp;ReErased state::VaultState;<br align="left"/>let mut _9: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _10: anchor_lang::error::Error;<br align="left"/>let mut _11: anchor_lang::error::AnchorError;<br align="left"/>let mut _12: std::string::String;<br align="left"/>let mut _13: &amp;ReErased KaminoVaultError;<br align="left"/>let _14: KaminoVaultError;<br align="left"/>let mut _15: u32;<br align="left"/>let mut _16: KaminoVaultError;<br align="left"/>let mut _17: std::string::String;<br align="left"/>let mut _18: &amp;ReErased KaminoVaultError;<br align="left"/>let _19: KaminoVaultError;<br align="left"/>let mut _20: std::option::Option&lt;anchor_lang::error::ErrorOrigin&gt;;<br align="left"/>let mut _21: anchor_lang::error::ErrorOrigin;<br align="left"/>let mut _22: anchor_lang::error::Source;<br align="left"/>let mut _23: std::option::Option&lt;anchor_lang::error::ComparedValues&gt;;<br align="left"/>let mut _24: isize;<br align="left"/>let _25: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _26: !;<br align="left"/>let mut _27: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _28: usize;<br align="left"/>let mut _29: u64;<br align="left"/>let mut _30: &amp;ReErased mut state::VaultAllocation;<br align="left"/>let mut _31: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, &amp;ReErased mut state::VaultAllocation&gt;;<br align="left"/>let mut _32: std::result::Result&lt;&amp;ReErased mut state::VaultAllocation, anchor_lang::error::Error&gt;;<br align="left"/>let mut _33: &amp;ReErased mut state::VaultState;<br align="left"/>let mut _34: usize;<br align="left"/>let mut _35: isize;<br align="left"/>let _36: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _37: !;<br align="left"/>let mut _38: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _39: &amp;ReErased mut state::VaultAllocation;<br align="left"/>let mut _40: (u64, bool);<br align="left"/>let mut _41: ();<br align="left"/>let mut _42: &amp;ReErased KaminoVaultError;<br align="left"/>let mut _43: &amp;ReErased KaminoVaultError;<br align="left"/>let mut _44: bool;<br align="left"/>let mut _45: bool;<br align="left"/>let mut _46: isize;<br align="left"/>let mut _47: isize;<br align="left"/>let mut _48: isize;<br align="left"/>let mut _49: isize;<br align="left"/>let mut _50: isize;<br align="left"/>let mut _51: isize;<br align="left"/>let mut _52: isize;<br align="left"/>let mut _53: isize;<br align="left"/>let mut _54: isize;<br align="left"/>let mut _55: isize;<br align="left"/>debug vault =&gt; _1;<br align="left"/>debug ctokens =&gt; _2;<br align="left"/>debug reserve =&gt; _3;<br align="left"/>debug idx =&gt; _4;<br align="left"/>debug residual =&gt; _25;<br align="left"/>debug val =&gt; _28;<br align="left"/>debug residual =&gt; _36;<br align="left"/>debug val =&gt; _39;<br align="left"/>>;
    bb0__0_436 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_45 = const false<br/>_44 = const false<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = &amp;(*_1)<br/>StorageLive(_9)<br/>_9 = &amp;(*_3)<br/></td></tr><tr><td align="left">_7 = state::VaultState::get_reserve_idx_in_allocation(move _8, move _9)</td></tr></table>>];
    bb1__0_436 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_8)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>_43 = const _<br/>_13 = &amp;(*_43)<br/></td></tr><tr><td align="left">_12 = KaminoVaultError::name(move _13)</td></tr></table>>];
    bb2__0_436 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>_16 = KaminoVaultError::CannotFindReserveInAllocations<br/></td></tr><tr><td align="left">_15 = &lt;KaminoVaultError as Into&lt;u32&gt;&gt;::into(move _16)</td></tr></table>>];
    bb3__0_436 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>_42 = const _<br/>_18 = &amp;(*_42)<br/></td></tr><tr><td align="left">_17 = &lt;KaminoVaultError as ToString&gt;::to_string(move _18)</td></tr></table>>];
    bb4__0_436 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>_22 = anchor_lang::error::Source { filename: const &quot;programs\\kvault\\src\\operations\\vault_operations.rs&quot;, line: const 808_u32 }<br/>_21 = anchor_lang::error::ErrorOrigin::Source(move _22)<br/>StorageDead(_22)<br/>_20 = Option::&lt;ErrorOrigin&gt;::Some(move _21)<br/>StorageDead(_21)<br/>StorageLive(_23)<br/>_23 = Option::&lt;ComparedValues&gt;::None<br/>_11 = anchor_lang::error::AnchorError { error_name: move _12, error_code_number: move _15, error_msg: move _17, error_origin: move _20, compared_values: move _23 }<br/>StorageDead(_23)<br/>StorageDead(_20)<br/>StorageDead(_17)<br/>StorageDead(_15)<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">_10 = &lt;anchor_lang::error::Error as From&lt;anchor_lang::error::AnchorError&gt;&gt;::from(move _11)</td></tr></table>>];
    bb5__0_436 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/></td></tr><tr><td align="left">_6 = Option::&lt;usize&gt;::ok_or::&lt;anchor_lang::error::Error&gt;(move _7, move _10)</td></tr></table>>];
    bb6__0_436 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">_5 = &lt;std::result::Result&lt;usize, anchor_lang::error::Error&gt; as Try&gt;::branch(move _6)</td></tr></table>>];
    bb7__0_436 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>_24 = discriminant(_5)<br/></td></tr><tr><td align="left">switchInt(move _24)</td></tr></table>>];
    bb8__0_436 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageLive(_28)<br/>_28 = ((_5 as Continue).0: usize)<br/>_4 = _28<br/>StorageDead(_28)<br/>_46 = discriminant(_5)<br/>StorageDead(_5)<br/>StorageLive(_29)<br/>_29 = _2<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>_33 = &amp;mut (*_1)<br/>StorageLive(_34)<br/>_34 = _4<br/></td></tr><tr><td align="left">_32 = state::VaultState::get_reserve_allocation_mut(move _33, move _34)</td></tr></table>>];
    bb9__0_436 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb10__0_436 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_25)<br/>_25 = move ((_5 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_27)<br/>_27 = move _25<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _27)</td></tr></table>>];
    bb11__0_436 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>StorageDead(_25)<br/>_52 = discriminant(_5)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_436 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>StorageDead(_33)<br/></td></tr><tr><td align="left">_31 = &lt;std::result::Result&lt;&amp;mut VaultAllocation, anchor_lang::error::Error&gt; as Try&gt;::branch(move _32)</td></tr></table>>];
    bb13__0_436 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">_44 = const true<br/>_45 = const true<br/>StorageDead(_32)<br/>_35 = discriminant(_31)<br/></td></tr><tr><td align="left">switchInt(move _35)</td></tr></table>>];
    bb14__0_436 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageLive(_39)<br/>_39 = move ((_31 as Continue).0: &amp;mut state::VaultAllocation)<br/>_30 = move _39<br/>StorageDead(_39)<br/>_40 = CheckedSub(((*_30).6: u64), _29)<br/></td></tr><tr><td align="left">assert(!move (_40.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, ((*_30).6: u64), move _29)</td></tr></table>>];
    bb15__0_436 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_36)<br/>_36 = move ((_31 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_38)<br/>_38 = move _36<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _38)</td></tr></table>>];
    bb16__0_436 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_38)<br/>StorageDead(_36)<br/>StorageDead(_29)<br/>_50 = discriminant(_31)<br/>_44 = const false<br/>_45 = const false<br/>StorageDead(_31)<br/>StorageDead(_30)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_436 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">((*_30).6: u64) = move (_40.0: u64)<br/>StorageDead(_29)<br/>_48 = discriminant(_31)<br/>_44 = const false<br/>_45 = const false<br/>StorageDead(_31)<br/>StorageDead(_30)<br/>StorageLive(_41)<br/>_41 = ()<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Ok(move _41)<br/>StorageDead(_41)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_436 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb19__0_436 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left">return</td></tr></table>>];
    bb20__0_436 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">20 (cleanup)</td></tr><tr><td align="left">drop(_12)</td></tr></table>>];
    bb21__0_436 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">21 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb22__0_436 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">22 (cleanup)</td></tr><tr><td align="left" balign="left">_54 = discriminant(_31)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb23__0_436 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">23 (cleanup)</td></tr><tr><td align="left" balign="left">_55 = discriminant(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_436 -> bb1__0_436 [label="return"];
    bb1__0_436 -> bb2__0_436 [label="return"];
    bb2__0_436 -> bb3__0_436 [label="return"];
    bb2__0_436 -> bb20__0_436 [label="unwind"];
    bb3__0_436 -> bb4__0_436 [label="return"];
    bb3__0_436 -> bb20__0_436 [label="unwind"];
    bb4__0_436 -> bb5__0_436 [label="return"];
    bb4__0_436 -> bb21__0_436 [label="unwind"];
    bb5__0_436 -> bb6__0_436 [label="return"];
    bb5__0_436 -> bb21__0_436 [label="unwind"];
    bb6__0_436 -> bb7__0_436 [label="return"];
    bb6__0_436 -> bb21__0_436 [label="unwind"];
    bb7__0_436 -> bb8__0_436 [label="0"];
    bb7__0_436 -> bb10__0_436 [label="1"];
    bb7__0_436 -> bb9__0_436 [label="otherwise"];
    bb8__0_436 -> bb12__0_436 [label="return"];
    bb10__0_436 -> bb11__0_436 [label="return"];
    bb10__0_436 -> bb23__0_436 [label="unwind"];
    bb11__0_436 -> bb18__0_436 [label=""];
    bb12__0_436 -> bb13__0_436 [label="return"];
    bb12__0_436 -> bb21__0_436 [label="unwind"];
    bb13__0_436 -> bb14__0_436 [label="0"];
    bb13__0_436 -> bb15__0_436 [label="1"];
    bb13__0_436 -> bb9__0_436 [label="otherwise"];
    bb14__0_436 -> bb17__0_436 [label="success"];
    bb14__0_436 -> bb22__0_436 [label="unwind"];
    bb15__0_436 -> bb16__0_436 [label="return"];
    bb15__0_436 -> bb22__0_436 [label="unwind"];
    bb16__0_436 -> bb18__0_436 [label=""];
    bb17__0_436 -> bb19__0_436 [label=""];
    bb18__0_436 -> bb19__0_436 [label=""];
    bb20__0_436 -> bb21__0_436 [label="return"];
    bb22__0_436 -> bb21__0_436 [label=""];
    bb23__0_436 -> bb21__0_436 [label=""];
}
