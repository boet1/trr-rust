// MIR for `post_transfer_invest_checks` after PreCodegen

fn post_transfer_invest_checks(_1: VaultBalances, _2: VaultBalances, _3: InvestEffects, _4: FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, _5: FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug amounts_before => _1;
    debug amounts_after => _2;
    debug invest_effects => _3;
    debug aum_before => _4;
    debug aum_after => _5;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _6: operations::effects::InvestingDirection;
    let _7: u64;
    let _8: u64;
    let _9: u64;
    let _10: ();
    let mut _11: isize;
    let _12: ();
    let mut _13: bool;
    let mut _14: u64;
    let mut _15: u64;
    let mut _16: u64;
    let mut _17: (u64, bool);
    let mut _18: u64;
    let mut _19: u64;
    let mut _20: u64;
    let mut _21: (u64, bool);
    let mut _22: !;
    let mut _23: anchor_lang::error::Error;
    let mut _24: anchor_lang::error::Error;
    let mut _25: anchor_lang::error::AnchorError;
    let mut _26: std::string::String;
    let mut _27: &anchor_lang::error::ErrorCode;
    let _28: anchor_lang::error::ErrorCode;
    let mut _29: u32;
    let mut _30: anchor_lang::error::ErrorCode;
    let mut _31: std::string::String;
    let mut _32: &anchor_lang::error::ErrorCode;
    let _33: anchor_lang::error::ErrorCode;
    let mut _34: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _35: anchor_lang::error::ErrorOrigin;
    let mut _36: anchor_lang::error::Source;
    let mut _37: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _38: (u64, u64);
    let mut _39: u64;
    let mut _40: u64;
    let mut _41: u64;
    let mut _42: (u64, bool);
    let mut _43: u64;
    let mut _44: u64;
    let mut _45: u64;
    let mut _46: (u64, bool);
    let _47: ();
    let mut _48: bool;
    let mut _49: u64;
    let mut _50: u64;
    let mut _51: u64;
    let mut _52: (u64, bool);
    let mut _53: u64;
    let mut _54: !;
    let mut _55: anchor_lang::error::Error;
    let mut _56: anchor_lang::error::Error;
    let mut _57: anchor_lang::error::AnchorError;
    let mut _58: std::string::String;
    let mut _59: &anchor_lang::error::ErrorCode;
    let _60: anchor_lang::error::ErrorCode;
    let mut _61: u32;
    let mut _62: anchor_lang::error::ErrorCode;
    let mut _63: std::string::String;
    let mut _64: &anchor_lang::error::ErrorCode;
    let _65: anchor_lang::error::ErrorCode;
    let mut _66: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _67: anchor_lang::error::ErrorOrigin;
    let mut _68: anchor_lang::error::Source;
    let mut _69: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _70: (u64, u64);
    let mut _71: u64;
    let mut _72: u64;
    let mut _73: u64;
    let mut _74: (u64, bool);
    let mut _75: u64;
    let _76: ();
    let mut _77: bool;
    let mut _78: u64;
    let mut _79: u64;
    let mut _80: u64;
    let mut _81: (u64, bool);
    let mut _82: u64;
    let mut _83: !;
    let mut _84: anchor_lang::error::Error;
    let mut _85: anchor_lang::error::Error;
    let mut _86: anchor_lang::error::AnchorError;
    let mut _87: std::string::String;
    let mut _88: &anchor_lang::error::ErrorCode;
    let _89: anchor_lang::error::ErrorCode;
    let mut _90: u32;
    let mut _91: anchor_lang::error::ErrorCode;
    let mut _92: std::string::String;
    let mut _93: &anchor_lang::error::ErrorCode;
    let _94: anchor_lang::error::ErrorCode;
    let mut _95: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _96: anchor_lang::error::ErrorOrigin;
    let mut _97: anchor_lang::error::Source;
    let mut _98: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _99: (u64, u64);
    let mut _100: u64;
    let mut _101: u64;
    let mut _102: u64;
    let mut _103: (u64, bool);
    let mut _104: u64;
    let _105: ();
    let mut _106: bool;
    let mut _107: u64;
    let mut _108: u64;
    let mut _109: u64;
    let mut _110: (u64, bool);
    let mut _111: u64;
    let mut _112: u64;
    let mut _113: u64;
    let mut _114: (u64, bool);
    let mut _115: !;
    let mut _116: anchor_lang::error::Error;
    let mut _117: anchor_lang::error::Error;
    let mut _118: anchor_lang::error::AnchorError;
    let mut _119: std::string::String;
    let mut _120: &anchor_lang::error::ErrorCode;
    let _121: anchor_lang::error::ErrorCode;
    let mut _122: u32;
    let mut _123: anchor_lang::error::ErrorCode;
    let mut _124: std::string::String;
    let mut _125: &anchor_lang::error::ErrorCode;
    let _126: anchor_lang::error::ErrorCode;
    let mut _127: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _128: anchor_lang::error::ErrorOrigin;
    let mut _129: anchor_lang::error::Source;
    let mut _130: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _131: (u64, u64);
    let mut _132: u64;
    let mut _133: u64;
    let mut _134: u64;
    let mut _135: (u64, bool);
    let mut _136: u64;
    let mut _137: u64;
    let mut _138: u64;
    let mut _139: (u64, bool);
    let _140: ();
    let mut _141: bool;
    let mut _142: u64;
    let mut _143: u64;
    let mut _144: u64;
    let mut _145: (u64, bool);
    let mut _146: u64;
    let mut _147: !;
    let mut _148: anchor_lang::error::Error;
    let mut _149: anchor_lang::error::Error;
    let mut _150: anchor_lang::error::AnchorError;
    let mut _151: std::string::String;
    let mut _152: &anchor_lang::error::ErrorCode;
    let _153: anchor_lang::error::ErrorCode;
    let mut _154: u32;
    let mut _155: anchor_lang::error::ErrorCode;
    let mut _156: std::string::String;
    let mut _157: &anchor_lang::error::ErrorCode;
    let _158: anchor_lang::error::ErrorCode;
    let mut _159: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _160: anchor_lang::error::ErrorOrigin;
    let mut _161: anchor_lang::error::Source;
    let mut _162: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _163: (u64, u64);
    let mut _164: u64;
    let mut _165: u64;
    let mut _166: u64;
    let mut _167: (u64, bool);
    let mut _168: u64;
    let _169: ();
    let mut _170: bool;
    let mut _171: u64;
    let mut _172: u64;
    let mut _173: u64;
    let mut _174: (u64, bool);
    let mut _175: u64;
    let mut _176: !;
    let mut _177: anchor_lang::error::Error;
    let mut _178: anchor_lang::error::Error;
    let mut _179: anchor_lang::error::AnchorError;
    let mut _180: std::string::String;
    let mut _181: &anchor_lang::error::ErrorCode;
    let _182: anchor_lang::error::ErrorCode;
    let mut _183: u32;
    let mut _184: anchor_lang::error::ErrorCode;
    let mut _185: std::string::String;
    let mut _186: &anchor_lang::error::ErrorCode;
    let _187: anchor_lang::error::ErrorCode;
    let mut _188: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _189: anchor_lang::error::ErrorOrigin;
    let mut _190: anchor_lang::error::Source;
    let mut _191: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _192: (u64, u64);
    let mut _193: u64;
    let mut _194: u64;
    let mut _195: u64;
    let mut _196: (u64, bool);
    let mut _197: u64;
    let _198: ();
    let mut _199: bool;
    let mut _200: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _201: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _202: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _203: !;
    let mut _204: anchor_lang::error::Error;
    let mut _205: anchor_lang::error::AnchorError;
    let mut _206: std::string::String;
    let mut _207: &KaminoVaultError;
    let _208: KaminoVaultError;
    let mut _209: u32;
    let mut _210: KaminoVaultError;
    let mut _211: std::string::String;
    let mut _212: &KaminoVaultError;
    let _213: KaminoVaultError;
    let mut _214: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _215: anchor_lang::error::ErrorOrigin;
    let mut _216: anchor_lang::error::Source;
    let mut _217: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _218: ();
    let mut _233: bool;
    let mut _234: bool;
    let mut _235: bool;
    let mut _236: bool;
    let mut _237: bool;
    let mut _238: bool;
    scope 1 {
        debug direction => _6;
        debug liquidity_amount => _7;
        debug collateral_amount => _8;
        debug rounding_loss => _9;
        let mut _219: &anchor_lang::error::ErrorCode;
        let mut _220: &anchor_lang::error::ErrorCode;
        let mut _221: &anchor_lang::error::ErrorCode;
        let mut _222: &anchor_lang::error::ErrorCode;
        let mut _223: &anchor_lang::error::ErrorCode;
        let mut _224: &anchor_lang::error::ErrorCode;
        let mut _225: &KaminoVaultError;
        let mut _226: &KaminoVaultError;
        let mut _227: &anchor_lang::error::ErrorCode;
        let mut _228: &anchor_lang::error::ErrorCode;
        let mut _229: &anchor_lang::error::ErrorCode;
        let mut _230: &anchor_lang::error::ErrorCode;
        let mut _231: &anchor_lang::error::ErrorCode;
        let mut _232: &anchor_lang::error::ErrorCode;
    }

    bb0: {
        _238 = const false;
        _237 = const false;
        _236 = const false;
        _235 = const false;
        _234 = const false;
        _233 = const false;
        StorageLive(_6);
        _6 = (_3.0: operations::effects::InvestingDirection);
        StorageLive(_7);
        _7 = (_3.1: u64);
        StorageLive(_8);
        _8 = (_3.2: u64);
        StorageLive(_9);
        _9 = (_3.3: u64);
        StorageLive(_10);
        _11 = discriminant(_6);
        switchInt(move _11) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        _108 = (_1.1: u64);
        StorageLive(_109);
        _109 = _7;
        _110 = CheckedAdd(_108, _109);
        assert(!move (_110.1: bool), "attempt to compute `{} + {}`, which would overflow", move _108, move _109) -> [success: bb33, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = (_1.1: u64);
        StorageLive(_16);
        _16 = _7;
        _17 = CheckedSub(_15, _16);
        assert(!move (_17.1: bool), "attempt to compute `{} - {}`, which would overflow", move _15, move _16) -> [success: bb4, unwind continue];
    }

    bb4: {
        _14 = move (_17.0: u64);
        StorageDead(_16);
        StorageDead(_15);
        StorageLive(_18);
        StorageLive(_19);
        _19 = (_2.1: u64);
        StorageLive(_20);
        _20 = _9;
        _21 = CheckedSub(_19, _20);
        assert(!move (_21.1: bool), "attempt to compute `{} - {}`, which would overflow", move _19, move _20) -> [success: bb5, unwind continue];
    }

    bb5: {
        _18 = move (_21.0: u64);
        StorageDead(_20);
        StorageDead(_19);
        _13 = Ne(move _14, move _18);
        switchInt(move _13) -> [0: bb14, otherwise: bb6];
    }

    bb6: {
        StorageDead(_18);
        StorageDead(_14);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _228 = const _;
        _27 = &(*_228);
        _26 = anchor_lang::error::ErrorCode::name(move _27) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_27);
        StorageLive(_29);
        StorageLive(_30);
        _30 = RequireEqViolated;
        _29 = <anchor_lang::error::ErrorCode as Into<u32>>::into(move _30) -> [return: bb8, unwind: bb79];
    }

    bb8: {
        StorageDead(_30);
        StorageLive(_31);
        StorageLive(_32);
        _227 = const _;
        _32 = &(*_227);
        _31 = <anchor_lang::error::ErrorCode as ToString>::to_string(move _32) -> [return: bb9, unwind: bb79];
    }

    bb9: {
        StorageDead(_32);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\operations\\vault_checks.rs", line: const 166_u32 };
        _35 = anchor_lang::error::ErrorOrigin::Source(move _36);
        StorageDead(_36);
        _34 = Option::<ErrorOrigin>::Some(move _35);
        StorageDead(_35);
        StorageLive(_37);
        _37 = Option::<ComparedValues>::None;
        _25 = anchor_lang::error::AnchorError { error_name: move _26, error_code_number: move _29, error_msg: move _31, error_origin: move _34, compared_values: move _37 };
        StorageDead(_37);
        StorageDead(_34);
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_26);
        _24 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _25) -> [return: bb10, unwind: bb80];
    }

    bb10: {
        _238 = const true;
        StorageDead(_25);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = (_1.1: u64);
        StorageLive(_41);
        _41 = _7;
        _42 = CheckedSub(_40, _41);
        assert(!move (_42.1: bool), "attempt to compute `{} - {}`, which would overflow", move _40, move _41) -> [success: bb11, unwind: bb92];
    }

    bb11: {
        _39 = move (_42.0: u64);
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_43);
        StorageLive(_44);
        _44 = (_2.1: u64);
        StorageLive(_45);
        _45 = _9;
        _46 = CheckedSub(_44, _45);
        assert(!move (_46.1: bool), "attempt to compute `{} - {}`, which would overflow", move _44, move _45) -> [success: bb12, unwind: bb92];
    }

    bb12: {
        _43 = move (_46.0: u64);
        StorageDead(_45);
        StorageDead(_44);
        _38 = (move _39, move _43);
        StorageDead(_43);
        StorageDead(_39);
        _238 = const false;
        _23 = anchor_lang::error::Error::with_values::<u64, u64>(move _24, move _38) -> [return: bb13, unwind: bb92];
    }

    bb13: {
        StorageDead(_38);
        _238 = const false;
        StorageDead(_24);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _23);
        StorageDead(_23);
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb70;
    }

    bb14: {
        StorageDead(_18);
        StorageDead(_14);
        _12 = const ();
        StorageDead(_13);
        StorageDead(_12);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = (_1.2: u64);
        StorageLive(_51);
        _51 = _8;
        _52 = CheckedAdd(_50, _51);
        assert(!move (_52.1: bool), "attempt to compute `{} + {}`, which would overflow", move _50, move _51) -> [success: bb15, unwind continue];
    }

    bb15: {
        _49 = move (_52.0: u64);
        StorageDead(_51);
        StorageDead(_50);
        StorageLive(_53);
        _53 = (_2.2: u64);
        _48 = Ne(move _49, move _53);
        switchInt(move _48) -> [0: bb23, otherwise: bb16];
    }

    bb16: {
        StorageDead(_53);
        StorageDead(_49);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _230 = const _;
        _59 = &(*_230);
        _58 = anchor_lang::error::ErrorCode::name(move _59) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_59);
        StorageLive(_61);
        StorageLive(_62);
        _62 = RequireEqViolated;
        _61 = <anchor_lang::error::ErrorCode as Into<u32>>::into(move _62) -> [return: bb18, unwind: bb78];
    }

    bb18: {
        StorageDead(_62);
        StorageLive(_63);
        StorageLive(_64);
        _229 = const _;
        _64 = &(*_229);
        _63 = <anchor_lang::error::ErrorCode as ToString>::to_string(move _64) -> [return: bb19, unwind: bb78];
    }

    bb19: {
        StorageDead(_64);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\operations\\vault_checks.rs", line: const 170_u32 };
        _67 = anchor_lang::error::ErrorOrigin::Source(move _68);
        StorageDead(_68);
        _66 = Option::<ErrorOrigin>::Some(move _67);
        StorageDead(_67);
        StorageLive(_69);
        _69 = Option::<ComparedValues>::None;
        _57 = anchor_lang::error::AnchorError { error_name: move _58, error_code_number: move _61, error_msg: move _63, error_origin: move _66, compared_values: move _69 };
        StorageDead(_69);
        StorageDead(_66);
        StorageDead(_63);
        StorageDead(_61);
        StorageDead(_58);
        _56 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _57) -> [return: bb20, unwind: bb80];
    }

    bb20: {
        _237 = const true;
        StorageDead(_57);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        _72 = (_1.2: u64);
        StorageLive(_73);
        _73 = _8;
        _74 = CheckedAdd(_72, _73);
        assert(!move (_74.1: bool), "attempt to compute `{} + {}`, which would overflow", move _72, move _73) -> [success: bb21, unwind: bb90];
    }

    bb21: {
        _71 = move (_74.0: u64);
        StorageDead(_73);
        StorageDead(_72);
        StorageLive(_75);
        _75 = (_2.2: u64);
        _70 = (move _71, move _75);
        StorageDead(_75);
        StorageDead(_71);
        _237 = const false;
        _55 = anchor_lang::error::Error::with_values::<u64, u64>(move _56, move _70) -> [return: bb22, unwind: bb90];
    }

    bb22: {
        StorageDead(_70);
        _237 = const false;
        StorageDead(_56);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _55);
        StorageDead(_55);
        StorageDead(_48);
        StorageDead(_47);
        goto -> bb70;
    }

    bb23: {
        StorageDead(_53);
        StorageDead(_49);
        _47 = const ();
        StorageDead(_48);
        StorageDead(_47);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = (_1.0: u64);
        StorageLive(_80);
        _80 = _7;
        _81 = CheckedAdd(_79, _80);
        assert(!move (_81.1: bool), "attempt to compute `{} + {}`, which would overflow", move _79, move _80) -> [success: bb24, unwind continue];
    }

    bb24: {
        _78 = move (_81.0: u64);
        StorageDead(_80);
        StorageDead(_79);
        StorageLive(_82);
        _82 = (_2.0: u64);
        _77 = Ne(move _78, move _82);
        switchInt(move _77) -> [0: bb32, otherwise: bb25];
    }

    bb25: {
        StorageDead(_82);
        StorageDead(_78);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _232 = const _;
        _88 = &(*_232);
        _87 = anchor_lang::error::ErrorCode::name(move _88) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_88);
        StorageLive(_90);
        StorageLive(_91);
        _91 = RequireEqViolated;
        _90 = <anchor_lang::error::ErrorCode as Into<u32>>::into(move _91) -> [return: bb27, unwind: bb77];
    }

    bb27: {
        StorageDead(_91);
        StorageLive(_92);
        StorageLive(_93);
        _231 = const _;
        _93 = &(*_231);
        _92 = <anchor_lang::error::ErrorCode as ToString>::to_string(move _93) -> [return: bb28, unwind: bb77];
    }

    bb28: {
        StorageDead(_93);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\operations\\vault_checks.rs", line: const 174_u32 };
        _96 = anchor_lang::error::ErrorOrigin::Source(move _97);
        StorageDead(_97);
        _95 = Option::<ErrorOrigin>::Some(move _96);
        StorageDead(_96);
        StorageLive(_98);
        _98 = Option::<ComparedValues>::None;
        _86 = anchor_lang::error::AnchorError { error_name: move _87, error_code_number: move _90, error_msg: move _92, error_origin: move _95, compared_values: move _98 };
        StorageDead(_98);
        StorageDead(_95);
        StorageDead(_92);
        StorageDead(_90);
        StorageDead(_87);
        _85 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _86) -> [return: bb29, unwind: bb80];
    }

    bb29: {
        _236 = const true;
        StorageDead(_86);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _101 = (_1.0: u64);
        StorageLive(_102);
        _102 = _7;
        _103 = CheckedAdd(_101, _102);
        assert(!move (_103.1: bool), "attempt to compute `{} + {}`, which would overflow", move _101, move _102) -> [success: bb30, unwind: bb88];
    }

    bb30: {
        _100 = move (_103.0: u64);
        StorageDead(_102);
        StorageDead(_101);
        StorageLive(_104);
        _104 = (_2.0: u64);
        _99 = (move _100, move _104);
        StorageDead(_104);
        StorageDead(_100);
        _236 = const false;
        _84 = anchor_lang::error::Error::with_values::<u64, u64>(move _85, move _99) -> [return: bb31, unwind: bb88];
    }

    bb31: {
        StorageDead(_99);
        _236 = const false;
        StorageDead(_85);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _84);
        StorageDead(_84);
        StorageDead(_77);
        StorageDead(_76);
        goto -> bb70;
    }

    bb32: {
        StorageDead(_82);
        StorageDead(_78);
        _76 = const ();
        StorageDead(_77);
        StorageDead(_76);
        _10 = const ();
        goto -> bb62;
    }

    bb33: {
        _107 = move (_110.0: u64);
        StorageDead(_109);
        StorageDead(_108);
        StorageLive(_111);
        StorageLive(_112);
        _112 = (_2.1: u64);
        StorageLive(_113);
        _113 = _9;
        _114 = CheckedSub(_112, _113);
        assert(!move (_114.1: bool), "attempt to compute `{} - {}`, which would overflow", move _112, move _113) -> [success: bb34, unwind continue];
    }

    bb34: {
        _111 = move (_114.0: u64);
        StorageDead(_113);
        StorageDead(_112);
        _106 = Ne(move _107, move _111);
        switchInt(move _106) -> [0: bb43, otherwise: bb35];
    }

    bb35: {
        StorageDead(_111);
        StorageDead(_107);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        _220 = const _;
        _120 = &(*_220);
        _119 = anchor_lang::error::ErrorCode::name(move _120) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_120);
        StorageLive(_122);
        StorageLive(_123);
        _123 = RequireEqViolated;
        _122 = <anchor_lang::error::ErrorCode as Into<u32>>::into(move _123) -> [return: bb37, unwind: bb76];
    }

    bb37: {
        StorageDead(_123);
        StorageLive(_124);
        StorageLive(_125);
        _219 = const _;
        _125 = &(*_219);
        _124 = <anchor_lang::error::ErrorCode as ToString>::to_string(move _125) -> [return: bb38, unwind: bb76];
    }

    bb38: {
        StorageDead(_125);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _129 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\operations\\vault_checks.rs", line: const 180_u32 };
        _128 = anchor_lang::error::ErrorOrigin::Source(move _129);
        StorageDead(_129);
        _127 = Option::<ErrorOrigin>::Some(move _128);
        StorageDead(_128);
        StorageLive(_130);
        _130 = Option::<ComparedValues>::None;
        _118 = anchor_lang::error::AnchorError { error_name: move _119, error_code_number: move _122, error_msg: move _124, error_origin: move _127, compared_values: move _130 };
        StorageDead(_130);
        StorageDead(_127);
        StorageDead(_124);
        StorageDead(_122);
        StorageDead(_119);
        _117 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _118) -> [return: bb39, unwind: bb80];
    }

    bb39: {
        _235 = const true;
        StorageDead(_118);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        _133 = (_1.1: u64);
        StorageLive(_134);
        _134 = _7;
        _135 = CheckedAdd(_133, _134);
        assert(!move (_135.1: bool), "attempt to compute `{} + {}`, which would overflow", move _133, move _134) -> [success: bb40, unwind: bb86];
    }

    bb40: {
        _132 = move (_135.0: u64);
        StorageDead(_134);
        StorageDead(_133);
        StorageLive(_136);
        StorageLive(_137);
        _137 = (_2.1: u64);
        StorageLive(_138);
        _138 = _9;
        _139 = CheckedSub(_137, _138);
        assert(!move (_139.1: bool), "attempt to compute `{} - {}`, which would overflow", move _137, move _138) -> [success: bb41, unwind: bb86];
    }

    bb41: {
        _136 = move (_139.0: u64);
        StorageDead(_138);
        StorageDead(_137);
        _131 = (move _132, move _136);
        StorageDead(_136);
        StorageDead(_132);
        _235 = const false;
        _116 = anchor_lang::error::Error::with_values::<u64, u64>(move _117, move _131) -> [return: bb42, unwind: bb86];
    }

    bb42: {
        StorageDead(_131);
        _235 = const false;
        StorageDead(_117);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _116);
        StorageDead(_116);
        StorageDead(_106);
        StorageDead(_105);
        goto -> bb70;
    }

    bb43: {
        StorageDead(_111);
        StorageDead(_107);
        _105 = const ();
        StorageDead(_106);
        StorageDead(_105);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        _143 = (_1.2: u64);
        StorageLive(_144);
        _144 = _8;
        _145 = CheckedSub(_143, _144);
        assert(!move (_145.1: bool), "attempt to compute `{} - {}`, which would overflow", move _143, move _144) -> [success: bb44, unwind continue];
    }

    bb44: {
        _142 = move (_145.0: u64);
        StorageDead(_144);
        StorageDead(_143);
        StorageLive(_146);
        _146 = (_2.2: u64);
        _141 = Ne(move _142, move _146);
        switchInt(move _141) -> [0: bb52, otherwise: bb45];
    }

    bb45: {
        StorageDead(_146);
        StorageDead(_142);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        _222 = const _;
        _152 = &(*_222);
        _151 = anchor_lang::error::ErrorCode::name(move _152) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_152);
        StorageLive(_154);
        StorageLive(_155);
        _155 = RequireEqViolated;
        _154 = <anchor_lang::error::ErrorCode as Into<u32>>::into(move _155) -> [return: bb47, unwind: bb75];
    }

    bb47: {
        StorageDead(_155);
        StorageLive(_156);
        StorageLive(_157);
        _221 = const _;
        _157 = &(*_221);
        _156 = <anchor_lang::error::ErrorCode as ToString>::to_string(move _157) -> [return: bb48, unwind: bb75];
    }

    bb48: {
        StorageDead(_157);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        _161 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\operations\\vault_checks.rs", line: const 184_u32 };
        _160 = anchor_lang::error::ErrorOrigin::Source(move _161);
        StorageDead(_161);
        _159 = Option::<ErrorOrigin>::Some(move _160);
        StorageDead(_160);
        StorageLive(_162);
        _162 = Option::<ComparedValues>::None;
        _150 = anchor_lang::error::AnchorError { error_name: move _151, error_code_number: move _154, error_msg: move _156, error_origin: move _159, compared_values: move _162 };
        StorageDead(_162);
        StorageDead(_159);
        StorageDead(_156);
        StorageDead(_154);
        StorageDead(_151);
        _149 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _150) -> [return: bb49, unwind: bb80];
    }

    bb49: {
        _234 = const true;
        StorageDead(_150);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        _165 = (_1.2: u64);
        StorageLive(_166);
        _166 = _8;
        _167 = CheckedSub(_165, _166);
        assert(!move (_167.1: bool), "attempt to compute `{} - {}`, which would overflow", move _165, move _166) -> [success: bb50, unwind: bb84];
    }

    bb50: {
        _164 = move (_167.0: u64);
        StorageDead(_166);
        StorageDead(_165);
        StorageLive(_168);
        _168 = (_2.2: u64);
        _163 = (move _164, move _168);
        StorageDead(_168);
        StorageDead(_164);
        _234 = const false;
        _148 = anchor_lang::error::Error::with_values::<u64, u64>(move _149, move _163) -> [return: bb51, unwind: bb84];
    }

    bb51: {
        StorageDead(_163);
        _234 = const false;
        StorageDead(_149);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _148);
        StorageDead(_148);
        StorageDead(_141);
        StorageDead(_140);
        goto -> bb70;
    }

    bb52: {
        StorageDead(_146);
        StorageDead(_142);
        _140 = const ();
        StorageDead(_141);
        StorageDead(_140);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        _172 = (_1.0: u64);
        StorageLive(_173);
        _173 = _7;
        _174 = CheckedSub(_172, _173);
        assert(!move (_174.1: bool), "attempt to compute `{} - {}`, which would overflow", move _172, move _173) -> [success: bb53, unwind continue];
    }

    bb53: {
        _171 = move (_174.0: u64);
        StorageDead(_173);
        StorageDead(_172);
        StorageLive(_175);
        _175 = (_2.0: u64);
        _170 = Ne(move _171, move _175);
        switchInt(move _170) -> [0: bb61, otherwise: bb54];
    }

    bb54: {
        StorageDead(_175);
        StorageDead(_171);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        _224 = const _;
        _181 = &(*_224);
        _180 = anchor_lang::error::ErrorCode::name(move _181) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_181);
        StorageLive(_183);
        StorageLive(_184);
        _184 = RequireEqViolated;
        _183 = <anchor_lang::error::ErrorCode as Into<u32>>::into(move _184) -> [return: bb56, unwind: bb74];
    }

    bb56: {
        StorageDead(_184);
        StorageLive(_185);
        StorageLive(_186);
        _223 = const _;
        _186 = &(*_223);
        _185 = <anchor_lang::error::ErrorCode as ToString>::to_string(move _186) -> [return: bb57, unwind: bb74];
    }

    bb57: {
        StorageDead(_186);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        _190 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\operations\\vault_checks.rs", line: const 188_u32 };
        _189 = anchor_lang::error::ErrorOrigin::Source(move _190);
        StorageDead(_190);
        _188 = Option::<ErrorOrigin>::Some(move _189);
        StorageDead(_189);
        StorageLive(_191);
        _191 = Option::<ComparedValues>::None;
        _179 = anchor_lang::error::AnchorError { error_name: move _180, error_code_number: move _183, error_msg: move _185, error_origin: move _188, compared_values: move _191 };
        StorageDead(_191);
        StorageDead(_188);
        StorageDead(_185);
        StorageDead(_183);
        StorageDead(_180);
        _178 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _179) -> [return: bb58, unwind: bb80];
    }

    bb58: {
        _233 = const true;
        StorageDead(_179);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        _194 = (_1.0: u64);
        StorageLive(_195);
        _195 = _7;
        _196 = CheckedSub(_194, _195);
        assert(!move (_196.1: bool), "attempt to compute `{} - {}`, which would overflow", move _194, move _195) -> [success: bb59, unwind: bb82];
    }

    bb59: {
        _193 = move (_196.0: u64);
        StorageDead(_195);
        StorageDead(_194);
        StorageLive(_197);
        _197 = (_2.0: u64);
        _192 = (move _193, move _197);
        StorageDead(_197);
        StorageDead(_193);
        _233 = const false;
        _177 = anchor_lang::error::Error::with_values::<u64, u64>(move _178, move _192) -> [return: bb60, unwind: bb82];
    }

    bb60: {
        StorageDead(_192);
        _233 = const false;
        StorageDead(_178);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _177);
        StorageDead(_177);
        StorageDead(_170);
        StorageDead(_169);
        goto -> bb70;
    }

    bb61: {
        StorageDead(_175);
        StorageDead(_171);
        _169 = const ();
        StorageDead(_170);
        StorageDead(_169);
        _10 = const ();
        goto -> bb62;
    }

    bb62: {
        StorageDead(_10);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        _200 = &_5;
        StorageLive(_201);
        StorageLive(_202);
        _202 = &_4;
        _201 = &(*_202);
        _199 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd>::ge(move _200, move _201) -> [return: bb63, unwind continue];
    }

    bb63: {
        switchInt(move _199) -> [0: bb65, otherwise: bb64];
    }

    bb64: {
        StorageDead(_201);
        StorageDead(_200);
        StorageDead(_202);
        _198 = const ();
        StorageDead(_199);
        StorageDead(_198);
        StorageLive(_218);
        _218 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _218);
        StorageDead(_218);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb72;
    }

    bb65: {
        StorageDead(_201);
        StorageDead(_200);
        StorageDead(_202);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        _226 = const _;
        _207 = &(*_226);
        _206 = KaminoVaultError::name(move _207) -> [return: bb66, unwind continue];
    }

    bb66: {
        StorageDead(_207);
        StorageLive(_209);
        StorageLive(_210);
        _210 = KaminoVaultError::AUMDecreasedAfterInvest;
        _209 = <KaminoVaultError as Into<u32>>::into(move _210) -> [return: bb67, unwind: bb73];
    }

    bb67: {
        StorageDead(_210);
        StorageLive(_211);
        StorageLive(_212);
        _225 = const _;
        _212 = &(*_225);
        _211 = <KaminoVaultError as ToString>::to_string(move _212) -> [return: bb68, unwind: bb73];
    }

    bb68: {
        StorageDead(_212);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        _216 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\operations\\vault_checks.rs", line: const 195_u32 };
        _215 = anchor_lang::error::ErrorOrigin::Source(move _216);
        StorageDead(_216);
        _214 = Option::<ErrorOrigin>::Some(move _215);
        StorageDead(_215);
        StorageLive(_217);
        _217 = Option::<ComparedValues>::None;
        _205 = anchor_lang::error::AnchorError { error_name: move _206, error_code_number: move _209, error_msg: move _211, error_origin: move _214, compared_values: move _217 };
        StorageDead(_217);
        StorageDead(_214);
        StorageDead(_211);
        StorageDead(_209);
        StorageDead(_206);
        _204 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _205) -> [return: bb69, unwind: bb80];
    }

    bb69: {
        StorageDead(_205);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _204);
        StorageDead(_204);
        StorageDead(_199);
        StorageDead(_198);
        goto -> bb71;
    }

    bb70: {
        StorageDead(_10);
        goto -> bb71;
    }

    bb71: {
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb72;
    }

    bb72: {
        return;
    }

    bb73 (cleanup): {
        drop(_206) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        drop(_180) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        drop(_151) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        drop(_119) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        drop(_87) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        drop(_58) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        drop(_26) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        resume;
    }

    bb81 (cleanup): {
        drop(_178) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        switchInt(_233) -> [0: bb80, otherwise: bb81];
    }

    bb83 (cleanup): {
        drop(_149) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        switchInt(_234) -> [0: bb80, otherwise: bb83];
    }

    bb85 (cleanup): {
        drop(_117) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        switchInt(_235) -> [0: bb80, otherwise: bb85];
    }

    bb87 (cleanup): {
        drop(_85) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        switchInt(_236) -> [0: bb80, otherwise: bb87];
    }

    bb89 (cleanup): {
        drop(_56) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        switchInt(_237) -> [0: bb80, otherwise: bb89];
    }

    bb91 (cleanup): {
        drop(_24) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        switchInt(_238) -> [0: bb80, otherwise: bb91];
    }
}
