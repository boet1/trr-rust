// MIR for `amounts_invested` before PreCodegen

fn amounts_invested(_1: &state::VaultState, _2: impl Iterator<Item = T>, _3: u64) -> std::result::Result<Invested, anchor_lang::error::Error> {
    debug vault => _1;
    debug reserves_iter => _2;
    debug slot => _3;
    let mut _0: std::result::Result<operations::vault_operations::common::Invested, anchor_lang::error::Error>;
    let mut _4: operations::vault_operations::common::Invested;
    let _6: ();
    let mut _7: std::iter::Zip<std::slice::Iter<'_, state::VaultAllocation>, std::slice::IterMut<'_, operations::vault_operations::common::InvestedReserve>>;
    let mut _8: std::iter::Zip<std::slice::Iter<'_, state::VaultAllocation>, std::slice::IterMut<'_, operations::vault_operations::common::InvestedReserve>>;
    let mut _9: std::slice::Iter<'_, state::VaultAllocation>;
    let mut _10: &[state::VaultAllocation];
    let mut _11: &[state::VaultAllocation; 25];
    let mut _12: std::slice::IterMut<'_, operations::vault_operations::common::InvestedReserve>;
    let mut _13: &mut [operations::vault_operations::common::InvestedReserve];
    let mut _14: &mut [operations::vault_operations::common::InvestedReserve; 25];
    let mut _16: ();
    let _17: ();
    let mut _18: std::option::Option<(&state::VaultAllocation, &mut operations::vault_operations::common::InvestedReserve)>;
    let mut _19: &mut std::iter::Zip<std::slice::Iter<'_, state::VaultAllocation>, std::slice::IterMut<'_, operations::vault_operations::common::InvestedReserve>>;
    let mut _20: &mut std::iter::Zip<std::slice::Iter<'_, state::VaultAllocation>, std::slice::IterMut<'_, operations::vault_operations::common::InvestedReserve>>;
    let mut _21: isize;
    let mut _22: !;
    let _25: ();
    let mut _26: bool;
    let mut _27: &anchor_lang::prelude::Pubkey;
    let mut _28: &anchor_lang::prelude::Pubkey;
    let _29: anchor_lang::prelude::Pubkey;
    let mut _30: !;
    let mut _31: !;
    let mut _32: anchor_lang::error::Error;
    let mut _33: anchor_lang::error::AnchorError;
    let mut _34: std::string::String;
    let mut _35: &KaminoVaultError;
    let _36: KaminoVaultError;
    let mut _37: u32;
    let mut _38: KaminoVaultError;
    let mut _39: std::string::String;
    let mut _40: &KaminoVaultError;
    let _41: KaminoVaultError;
    let mut _42: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _43: anchor_lang::error::ErrorOrigin;
    let mut _44: anchor_lang::error::Source;
    let mut _45: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _47: std::option::Option<T>;
    let mut _48: &mut impl Iterator<Item = T>;
    let mut _49: isize;
    let mut _51: &T;
    let mut _53: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, kamino_lending::Reserve>>;
    let mut _54: std::result::Result<std::cell::Ref<'_, kamino_lending::Reserve>, anchor_lang::error::Error>;
    let mut _55: std::result::Result<std::cell::Ref<'_, kamino_lending::Reserve>, anchor_lang::error::Error>;
    let mut _56: &T;
    let mut _57: {closure@programs\kvault\src\operations\vault_operations.rs:652:26: 652:29};
    let mut _58: isize;
    let mut _60: !;
    let mut _61: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _63: ();
    let mut _64: bool;
    let mut _65: &anchor_lang::prelude::Pubkey;
    let mut _66: &anchor_lang::prelude::Pubkey;
    let mut _67: !;
    let mut _68: anchor_lang::error::Error;
    let mut _69: anchor_lang::error::AnchorError;
    let mut _70: std::string::String;
    let mut _71: &KaminoVaultError;
    let _72: KaminoVaultError;
    let mut _73: u32;
    let mut _74: KaminoVaultError;
    let mut _75: std::string::String;
    let mut _76: &KaminoVaultError;
    let _77: KaminoVaultError;
    let mut _78: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _79: anchor_lang::error::ErrorOrigin;
    let mut _80: anchor_lang::error::Source;
    let mut _81: std::option::Option<anchor_lang::error::ComparedValues>;
    let _82: ();
    let mut _83: bool;
    let mut _84: std::result::Result<bool, anchor_lang::error::Error>;
    let mut _85: &kamino_lending::LastUpdate;
    let _86: &kamino_lending::Reserve;
    let mut _87: &std::cell::Ref<'_, kamino_lending::Reserve>;
    let mut _88: u64;
    let mut _89: !;
    let mut _90: anchor_lang::error::Error;
    let mut _91: anchor_lang::error::AnchorError;
    let mut _92: std::string::String;
    let mut _93: &KaminoVaultError;
    let _94: KaminoVaultError;
    let mut _95: u32;
    let mut _96: KaminoVaultError;
    let mut _97: std::string::String;
    let mut _98: &KaminoVaultError;
    let _99: KaminoVaultError;
    let mut _100: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _101: anchor_lang::error::ErrorOrigin;
    let mut _102: anchor_lang::error::Source;
    let mut _103: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _106: &kamino_lending::CollateralExchangeRate;
    let _107: kamino_lending::CollateralExchangeRate;
    let mut _108: &kamino_lending::Reserve;
    let _109: &kamino_lending::Reserve;
    let mut _110: &std::cell::Ref<'_, kamino_lending::Reserve>;
    let mut _111: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _112: u64;
    let mut _113: anchor_lang::prelude::Pubkey;
    let mut _114: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _115: u64;
    let mut _116: u64;
    let _117: ();
    let mut _118: &mut fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _119: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _120: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _121: operations::vault_operations::common::Invested;
    let mut _128: std::boxed::Box<[operations::vault_operations::common::InvestedReserve; 25]>;
    let mut _129: bool;
    let mut _130: isize;
    let mut _131: isize;
    let mut _132: isize;
    let mut _133: isize;
    let mut _134: isize;
    let mut _135: isize;
    let mut _136: isize;
    let mut _137: *const [operations::vault_operations::common::InvestedReserve; 25];
    scope 1 {
        debug invested => _4;
        let mut _5: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
        scope 2 {
            debug total => _5;
            let mut _15: std::iter::Zip<std::slice::Iter<'_, state::VaultAllocation>, std::slice::IterMut<'_, operations::vault_operations::common::InvestedReserve>>;
            scope 3 {
                debug iter => _15;
                let _23: &state::VaultAllocation;
                let _24: &mut operations::vault_operations::common::InvestedReserve;
                scope 4 {
                    debug allocation_state => _23;
                    debug computed_invested_allocation => _24;
                    let _46: T;
                    let mut _122: &KaminoVaultError;
                    let mut _123: &KaminoVaultError;
                    scope 5 {
                        debug reserve => _46;
                        let _50: anchor_lang::prelude::Pubkey;
                        scope 6 {
                            debug reserve_key => _50;
                            let _52: std::cell::Ref<'_, kamino_lending::Reserve>;
                            let _59: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _62: std::cell::Ref<'_, kamino_lending::Reserve>;
                            scope 7 {
                                debug reserve => _52;
                                let _104: u64;
                                let mut _124: &KaminoVaultError;
                                let mut _125: &KaminoVaultError;
                                let mut _126: &KaminoVaultError;
                                let mut _127: &KaminoVaultError;
                                scope 12 {
                                    debug ctoken_amount => _104;
                                    let _105: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                                    scope 13 {
                                        debug liquidity_amount => _105;
                                    }
                                }
                            }
                            scope 8 {
                                debug residual => _59;
                                scope 9 {
                                }
                            }
                            scope 10 {
                                debug val => _62;
                                scope 11 {
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _129 = const false;
        StorageLive(_4);
        _4 = <Invested as Default>::default() -> [return: bb1, unwind: bb64];
    }

    bb1: {
        StorageLive(_5);
        _5 = const _;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &((*_1).18: [state::VaultAllocation; 25]);
        _10 = move _11 as &[state::VaultAllocation] (PointerCoercion(Unsize));
        StorageDead(_11);
        _9 = core::slice::<impl [VaultAllocation]>::iter(move _10) -> [return: bb2, unwind: bb63];
    }

    bb2: {
        StorageDead(_10);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _128 = deref_copy (_4.0: std::boxed::Box<[operations::vault_operations::common::InvestedReserve; 25]>);
        _137 = (((_128.0: std::ptr::Unique<[operations::vault_operations::common::InvestedReserve; 25]>).0: std::ptr::NonNull<[operations::vault_operations::common::InvestedReserve; 25]>).0: *const [operations::vault_operations::common::InvestedReserve; 25]);
        _14 = &mut (*_137);
        _13 = move _14 as &mut [operations::vault_operations::common::InvestedReserve] (PointerCoercion(Unsize));
        StorageDead(_14);
        _12 = core::slice::<impl [InvestedReserve]>::iter_mut(move _13) -> [return: bb3, unwind: bb63];
    }

    bb3: {
        StorageDead(_13);
        _8 = <std::slice::Iter<'_, VaultAllocation> as Iterator>::zip::<std::slice::IterMut<'_, InvestedReserve>>(move _9, move _12) -> [return: bb4, unwind: bb63];
    }

    bb4: {
        StorageDead(_12);
        StorageDead(_9);
        _7 = <Zip<std::slice::Iter<'_, VaultAllocation>, std::slice::IterMut<'_, InvestedReserve>> as IntoIterator>::into_iter(move _8) -> [return: bb5, unwind: bb63];
    }

    bb5: {
        StorageDead(_8);
        StorageLive(_15);
        _15 = move _7;
        goto -> bb6;
    }

    bb6: {
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = &mut _15;
        _19 = &mut (*_20);
        _18 = <Zip<std::slice::Iter<'_, VaultAllocation>, std::slice::IterMut<'_, InvestedReserve>> as Iterator>::next(move _19) -> [return: bb7, unwind: bb63];
    }

    bb7: {
        StorageDead(_19);
        _21 = discriminant(_18);
        switchInt(move _21) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        StorageLive(_23);
        _23 = (((_18 as Some).0: (&state::VaultAllocation, &mut operations::vault_operations::common::InvestedReserve)).0: &state::VaultAllocation);
        StorageLive(_24);
        _24 = move (((_18 as Some).0: (&state::VaultAllocation, &mut operations::vault_operations::common::InvestedReserve)).1: &mut operations::vault_operations::common::InvestedReserve);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &((*_23).0: anchor_lang::prelude::Pubkey);
        StorageLive(_28);
        StorageLive(_29);
        _29 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb11, unwind: bb63];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _6 = const ();
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_120);
        _120 = _5;
        (_4.1: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>) = move _120;
        StorageDead(_120);
        StorageLive(_121);
        _121 = move _4;
        _0 = std::result::Result::<Invested, anchor_lang::error::Error>::Ok(move _121);
        StorageDead(_121);
        StorageDead(_5);
        StorageDead(_4);
        drop(_2) -> [return: bb58, unwind: bb65];
    }

    bb11: {
        _28 = &_29;
        _26 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _27, move _28) -> [return: bb12, unwind: bb63];
    }

    bb12: {
        switchInt(move _26) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_17);
        goto -> bb6;
    }

    bb14: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        _25 = const ();
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = &mut _2;
        _47 = <impl Iterator<Item = T> as Iterator>::next(move _48) -> [return: bb19, unwind: bb63];
    }

    bb15: {
        StorageDead(_35);
        StorageLive(_37);
        StorageLive(_38);
        _38 = KaminoVaultError::ReserveNotProvidedInTheAccounts;
        _37 = <KaminoVaultError as Into<u32>>::into(move _38) -> [return: bb16, unwind: bb62];
    }

    bb16: {
        StorageDead(_38);
        StorageLive(_39);
        StorageLive(_40);
        _122 = const _;
        _40 = &(*_122);
        _39 = <KaminoVaultError as ToString>::to_string(move _40) -> [return: bb17, unwind: bb62];
    }

    bb17: {
        StorageDead(_40);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\operations\\vault_operations.rs", line: const 646_u32 };
        _43 = anchor_lang::error::ErrorOrigin::Source(move _44);
        StorageDead(_44);
        _42 = Option::<ErrorOrigin>::Some(move _43);
        StorageDead(_43);
        StorageLive(_45);
        _45 = Option::<ComparedValues>::None;
        _33 = anchor_lang::error::AnchorError { error_name: move _34, error_code_number: move _37, error_msg: move _39, error_origin: move _42, compared_values: move _45 };
        StorageDead(_45);
        StorageDead(_42);
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_34);
        _32 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _33) -> [return: bb18, unwind: bb63];
    }

    bb18: {
        StorageDead(_33);
        _0 = std::result::Result::<Invested, anchor_lang::error::Error>::Err(move _32);
        StorageDead(_32);
        goto -> bb56;
    }

    bb19: {
        StorageDead(_48);
        _49 = discriminant(_47);
        switchInt(move _49) -> [1: bb20, otherwise: bb21];
    }

    bb20: {
        _129 = const true;
        _46 = move ((_47 as Some).0: T);
        _130 = discriminant(_47);
        StorageDead(_47);
        StorageLive(_50);
        StorageLive(_51);
        _51 = &_46;
        _50 = <T as AnyAccountLoader<'_, kamino_lending::Reserve>>::get_pubkey(move _51) -> [return: bb23, unwind: bb68];
    }

    bb21: {
        drop(_47) -> [return: bb22, unwind: bb68];
    }

    bb22: {
        StorageDead(_47);
        _129 = const false;
        StorageDead(_46);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _123 = const _;
        _35 = &(*_123);
        _34 = KaminoVaultError::name(move _35) -> [return: bb15, unwind: bb63];
    }

    bb23: {
        StorageDead(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = &_46;
        _55 = <T as AnyAccountLoader<'_, kamino_lending::Reserve>>::get(move _56) -> [return: bb24, unwind: bb68];
    }

    bb24: {
        StorageDead(_56);
        StorageLive(_57);
        _57 = {closure@programs\kvault\src\operations\vault_operations.rs:652:26: 652:29};
        _54 = std::result::Result::<Ref<'_, kamino_lending::Reserve>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\operations\vault_operations.rs:652:26: 652:29}>(move _55, move _57) -> [return: bb25, unwind: bb68];
    }

    bb25: {
        StorageDead(_57);
        StorageDead(_55);
        _53 = <std::result::Result<Ref<'_, kamino_lending::Reserve>, anchor_lang::error::Error> as Try>::branch(move _54) -> [return: bb26, unwind: bb68];
    }

    bb26: {
        StorageDead(_54);
        _58 = discriminant(_53);
        switchInt(move _58) -> [0: bb27, 1: bb28, otherwise: bb9];
    }

    bb27: {
        StorageLive(_62);
        _62 = move ((_53 as Continue).0: std::cell::Ref<'_, kamino_lending::Reserve>);
        _52 = move _62;
        StorageDead(_62);
        _132 = discriminant(_53);
        StorageDead(_53);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = &_50;
        StorageLive(_66);
        _66 = &((*_23).0: anchor_lang::prelude::Pubkey);
        _64 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _65, move _66) -> [return: bb30, unwind: bb61];
    }

    bb28: {
        StorageLive(_59);
        _59 = move ((_53 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_61);
        _61 = move _59;
        _0 = <std::result::Result<Invested, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _61) -> [return: bb29, unwind: bb66];
    }

    bb29: {
        StorageDead(_61);
        StorageDead(_59);
        _134 = discriminant(_53);
        StorageDead(_53);
        goto -> bb54;
    }

    bb30: {
        switchInt(move _64) -> [0: bb36, otherwise: bb31];
    }

    bb31: {
        StorageDead(_66);
        StorageDead(_65);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _125 = const _;
        _71 = &(*_125);
        _70 = KaminoVaultError::name(move _71) -> [return: bb32, unwind: bb61];
    }

    bb32: {
        StorageDead(_71);
        StorageLive(_73);
        StorageLive(_74);
        _74 = KaminoVaultError::ReserveAccountAndKeyMismatch;
        _73 = <KaminoVaultError as Into<u32>>::into(move _74) -> [return: bb33, unwind: bb60];
    }

    bb33: {
        StorageDead(_74);
        StorageLive(_75);
        StorageLive(_76);
        _124 = const _;
        _76 = &(*_124);
        _75 = <KaminoVaultError as ToString>::to_string(move _76) -> [return: bb34, unwind: bb60];
    }

    bb34: {
        StorageDead(_76);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _80 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\operations\\vault_operations.rs", line: const 655_u32 };
        _79 = anchor_lang::error::ErrorOrigin::Source(move _80);
        StorageDead(_80);
        _78 = Option::<ErrorOrigin>::Some(move _79);
        StorageDead(_79);
        StorageLive(_81);
        _81 = Option::<ComparedValues>::None;
        _69 = anchor_lang::error::AnchorError { error_name: move _70, error_code_number: move _73, error_msg: move _75, error_origin: move _78, compared_values: move _81 };
        StorageDead(_81);
        StorageDead(_78);
        StorageDead(_75);
        StorageDead(_73);
        StorageDead(_70);
        _68 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _69) -> [return: bb35, unwind: bb61];
    }

    bb35: {
        StorageDead(_69);
        _0 = std::result::Result::<Invested, anchor_lang::error::Error>::Err(move _68);
        StorageDead(_68);
        StorageDead(_64);
        StorageDead(_63);
        goto -> bb53;
    }

    bb36: {
        StorageDead(_66);
        StorageDead(_65);
        _63 = const ();
        StorageDead(_64);
        StorageDead(_63);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _87 = &_52;
        _86 = <Ref<'_, kamino_lending::Reserve> as Deref>::deref(move _87) -> [return: bb37, unwind: bb61];
    }

    bb37: {
        StorageDead(_87);
        _85 = &((*_86).1: kamino_lending::LastUpdate);
        StorageLive(_88);
        _88 = _3;
        _84 = LastUpdate::is_stale(move _85, move _88, const _) -> [return: bb38, unwind: bb61];
    }

    bb38: {
        StorageDead(_88);
        StorageDead(_85);
        _83 = std::result::Result::<bool, anchor_lang::error::Error>::unwrap(move _84) -> [return: bb39, unwind: bb61];
    }

    bb39: {
        switchInt(move _83) -> [0: bb45, otherwise: bb40];
    }

    bb40: {
        StorageDead(_86);
        StorageDead(_84);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _127 = const _;
        _93 = &(*_127);
        _92 = KaminoVaultError::name(move _93) -> [return: bb41, unwind: bb61];
    }

    bb41: {
        StorageDead(_93);
        StorageLive(_95);
        StorageLive(_96);
        _96 = KaminoVaultError::ReserveIsStale;
        _95 = <KaminoVaultError as Into<u32>>::into(move _96) -> [return: bb42, unwind: bb59];
    }

    bb42: {
        StorageDead(_96);
        StorageLive(_97);
        StorageLive(_98);
        _126 = const _;
        _98 = &(*_126);
        _97 = <KaminoVaultError as ToString>::to_string(move _98) -> [return: bb43, unwind: bb59];
    }

    bb43: {
        StorageDead(_98);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _102 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\operations\\vault_operations.rs", line: const 663_u32 };
        _101 = anchor_lang::error::ErrorOrigin::Source(move _102);
        StorageDead(_102);
        _100 = Option::<ErrorOrigin>::Some(move _101);
        StorageDead(_101);
        StorageLive(_103);
        _103 = Option::<ComparedValues>::None;
        _91 = anchor_lang::error::AnchorError { error_name: move _92, error_code_number: move _95, error_msg: move _97, error_origin: move _100, compared_values: move _103 };
        StorageDead(_103);
        StorageDead(_100);
        StorageDead(_97);
        StorageDead(_95);
        StorageDead(_92);
        _90 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _91) -> [return: bb44, unwind: bb61];
    }

    bb44: {
        StorageDead(_91);
        _0 = std::result::Result::<Invested, anchor_lang::error::Error>::Err(move _90);
        StorageDead(_90);
        StorageDead(_83);
        StorageDead(_82);
        goto -> bb53;
    }

    bb45: {
        StorageDead(_86);
        StorageDead(_84);
        _82 = const ();
        StorageDead(_83);
        StorageDead(_82);
        StorageLive(_104);
        _104 = ((*_23).6: u64);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _110 = &_52;
        _109 = <Ref<'_, kamino_lending::Reserve> as Deref>::deref(move _110) -> [return: bb46, unwind: bb61];
    }

    bb46: {
        _108 = &(*_109);
        StorageDead(_110);
        _107 = kamino_lending::Reserve::collateral_exchange_rate(move _108) -> [return: bb47, unwind: bb61];
    }

    bb47: {
        _106 = &_107;
        StorageDead(_108);
        StorageLive(_111);
        StorageLive(_112);
        _112 = _104;
        _111 = <u64 as Into<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>>::into(move _112) -> [return: bb48, unwind: bb61];
    }

    bb48: {
        StorageDead(_112);
        _105 = CollateralExchangeRate::fraction_collateral_to_liquidity(move _106, move _111) -> [return: bb49, unwind: bb61];
    }

    bb49: {
        StorageDead(_111);
        StorageDead(_106);
        StorageDead(_109);
        StorageDead(_107);
        StorageLive(_113);
        _113 = ((*_23).0: anchor_lang::prelude::Pubkey);
        ((*_24).0: anchor_lang::prelude::Pubkey) = move _113;
        StorageDead(_113);
        StorageLive(_114);
        _114 = _105;
        ((*_24).1: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>) = move _114;
        StorageDead(_114);
        StorageLive(_115);
        _115 = _104;
        ((*_24).2: u64) = move _115;
        StorageDead(_115);
        StorageLive(_116);
        _116 = ((*_23).2: u64);
        ((*_24).3: u64) = move _116;
        StorageDead(_116);
        StorageLive(_117);
        StorageLive(_118);
        _118 = &mut _5;
        StorageLive(_119);
        _119 = _105;
        _117 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as AddAssign>::add_assign(move _118, move _119) -> [return: bb50, unwind: bb61];
    }

    bb50: {
        StorageDead(_119);
        StorageDead(_118);
        StorageDead(_117);
        _17 = const ();
        StorageDead(_105);
        StorageDead(_104);
        drop(_52) -> [return: bb51, unwind: bb68];
    }

    bb51: {
        StorageDead(_52);
        StorageDead(_50);
        drop(_46) -> [return: bb52, unwind: bb63];
    }

    bb52: {
        _129 = const false;
        StorageDead(_46);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_17);
        _16 = const ();
        goto -> bb6;
    }

    bb53: {
        drop(_52) -> [return: bb54, unwind: bb68];
    }

    bb54: {
        StorageDead(_52);
        StorageDead(_50);
        drop(_46) -> [return: bb55, unwind: bb63];
    }

    bb55: {
        _129 = const false;
        StorageDead(_46);
        goto -> bb56;
    }

    bb56: {
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        drop(_4) -> [return: bb57, unwind: bb64];
    }

    bb57: {
        StorageDead(_4);
        drop(_2) -> [return: bb58, unwind: bb65];
    }

    bb58: {
        return;
    }

    bb59 (cleanup): {
        drop(_92) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_70) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_52) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_34) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        drop(_4) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        drop(_2) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        resume;
    }

    bb66 (cleanup): {
        _136 = discriminant(_53);
        goto -> bb68;
    }

    bb67 (cleanup): {
        drop(_46) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        switchInt(_129) -> [0: bb63, otherwise: bb67];
    }
}
