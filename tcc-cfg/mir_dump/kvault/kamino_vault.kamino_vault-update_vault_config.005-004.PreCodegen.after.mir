// MIR for `kamino_vault::update_vault_config` after PreCodegen

fn kamino_vault::update_vault_config(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_update_vault_config::UpdateVaultConfig<'_>>, _2: handlers::handler_update_vault_config::VaultConfigField, _3: Vec<u8>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug entry => _2;
    debug data => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let mut _4: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_update_vault_config::UpdateVaultConfig<'_>>;
    let mut _5: handlers::handler_update_vault_config::VaultConfigField;
    let mut _6: &[u8];
    let _7: &[u8];
    let mut _8: &std::vec::Vec<u8>;
    let _9: &std::vec::Vec<u8>;

    bb0: {
        StorageLive(_4);
        _4 = move _1;
        StorageLive(_5);
        _5 = _2;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &_3;
        _8 = &(*_9);
        _7 = <Vec<u8> as Deref>::deref(move _8) -> [return: bb1, unwind: bb4];
    }

    bb1: {
        _6 = &(*_7);
        StorageDead(_8);
        _0 = handlers::handler_update_vault_config::process(move _4, move _5, move _6) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_9);
        StorageDead(_7);
        drop(_3) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_3) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb5 (cleanup): {
        resume;
    }
}
