// MIR for `handlers::handler_init_vault::<impl at programs\kvault\src\handlers\handler_init_vault.rs:78:10: 78:18>::try_accounts` after PreCodegen

fn handlers::handler_init_vault::<impl at programs\kvault\src\handlers\handler_init_vault.rs:78:10: 78:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut InitVaultBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error>;
    let _6: anchor_lang::prelude::Signer<'_>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _8: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _9: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _10: &anchor_lang::prelude::Pubkey;
    let mut _11: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _12: &[u8];
    let mut _13: &mut handlers::handler_init_vault::InitVaultBumps;
    let mut _14: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _15: {closure@programs\kvault\src\handlers\handler_init_vault.rs:78:10: 78:18};
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _20: anchor_lang::prelude::Signer<'_>;
    let _21: ();
    let mut _22: bool;
    let mut _23: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _24: !;
    let mut _25: anchor_lang::error::Error;
    let mut _26: anchor_lang::error::ErrorCode;
    let _28: usize;
    let mut _29: usize;
    let mut _30: bool;
    let mut _31: &[anchor_lang::prelude::AccountInfo<'_>];
    let _32: &[anchor_lang::prelude::AccountInfo<'_>];
    let _33: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _34: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _35: std::ops::RangeFrom<usize>;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _38: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _39: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _40: &anchor_lang::prelude::Pubkey;
    let mut _41: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _42: &[u8];
    let mut _43: &mut handlers::handler_init_vault::InitVaultBumps;
    let mut _44: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _45: {closure@programs\kvault\src\handlers\handler_init_vault.rs:78:10: 78:18};
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _51: ();
    let mut _52: bool;
    let mut _53: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _54: !;
    let mut _55: anchor_lang::error::Error;
    let mut _56: anchor_lang::error::ErrorCode;
    let _58: usize;
    let mut _59: usize;
    let mut _60: bool;
    let mut _61: &[anchor_lang::prelude::AccountInfo<'_>];
    let _62: &[anchor_lang::prelude::AccountInfo<'_>];
    let _63: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _64: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _65: std::ops::RangeFrom<usize>;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>;
    let mut _68: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>;
    let mut _69: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>;
    let mut _70: &anchor_lang::prelude::Pubkey;
    let mut _71: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _72: &[u8];
    let mut _73: &mut handlers::handler_init_vault::InitVaultBumps;
    let mut _74: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _75: {closure@programs\kvault\src\handlers\handler_init_vault.rs:78:10: 78:18};
    let mut _76: isize;
    let mut _78: !;
    let mut _79: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _81: ();
    let mut _82: bool;
    let mut _83: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _84: !;
    let mut _85: anchor_lang::error::Error;
    let mut _86: anchor_lang::error::ErrorCode;
    let _88: usize;
    let mut _89: usize;
    let mut _90: bool;
    let mut _91: &[anchor_lang::prelude::AccountInfo<'_>];
    let _92: &[anchor_lang::prelude::AccountInfo<'_>];
    let _93: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _94: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _95: std::ops::RangeFrom<usize>;
    let mut _97: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _98: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _99: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _100: &anchor_lang::prelude::Pubkey;
    let mut _101: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _102: &[u8];
    let mut _103: &mut handlers::handler_init_vault::InitVaultBumps;
    let mut _104: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _105: {closure@programs\kvault\src\handlers\handler_init_vault.rs:78:10: 78:18};
    let mut _106: isize;
    let mut _108: !;
    let mut _109: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _112: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>>;
    let mut _113: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _114: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _115: &anchor_lang::prelude::Pubkey;
    let mut _116: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _117: &[u8];
    let mut _118: &mut handlers::handler_init_vault::InitVaultBumps;
    let mut _119: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _120: {closure@programs\kvault\src\handlers\handler_init_vault.rs:78:10: 78:18};
    let mut _121: isize;
    let mut _123: !;
    let mut _124: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _127: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>>;
    let mut _128: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _129: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _130: &anchor_lang::prelude::Pubkey;
    let mut _131: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _132: &[u8];
    let mut _133: &mut handlers::handler_init_vault::InitVaultBumps;
    let mut _134: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _135: {closure@programs\kvault\src\handlers\handler_init_vault.rs:78:10: 78:18};
    let mut _136: isize;
    let mut _138: !;
    let mut _139: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _142: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>>;
    let mut _143: std::result::Result<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>, anchor_lang::error::Error>;
    let mut _144: std::result::Result<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>, anchor_lang::error::Error>;
    let mut _145: &anchor_lang::prelude::Pubkey;
    let mut _146: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _147: &[u8];
    let mut _148: &mut handlers::handler_init_vault::InitVaultBumps;
    let mut _149: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _150: {closure@programs\kvault\src\handlers\handler_init_vault.rs:78:10: 78:18};
    let mut _151: isize;
    let mut _153: !;
    let mut _154: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _157: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Program<'_, anchor_spl::token::Token>>;
    let mut _158: std::result::Result<anchor_lang::prelude::Program<'_, anchor_spl::token::Token>, anchor_lang::error::Error>;
    let mut _159: std::result::Result<anchor_lang::prelude::Program<'_, anchor_spl::token::Token>, anchor_lang::error::Error>;
    let mut _160: &anchor_lang::prelude::Pubkey;
    let mut _161: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _162: &[u8];
    let mut _163: &mut handlers::handler_init_vault::InitVaultBumps;
    let mut _164: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _165: {closure@programs\kvault\src\handlers\handler_init_vault.rs:78:10: 78:18};
    let mut _166: isize;
    let mut _168: !;
    let mut _169: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _172: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Rent>;
    let mut _173: std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError>;
    let mut _174: isize;
    let mut _176: !;
    let mut _177: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _181: (anchor_lang::prelude::Pubkey, u8);
    let mut _182: &[&[u8]];
    let mut _183: &[&[u8]; 2];
    let _184: &[&[u8]; 2];
    let _185: [&[u8]; 2];
    let mut _186: &[u8];
    let mut _187: &[u8; 11];
    let _188: &[u8; 11];
    let mut _189: &[u8];
    let _190: &[u8];
    let mut _191: &anchor_lang::prelude::Pubkey;
    let _192: anchor_lang::prelude::Pubkey;
    let mut _193: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _194: &anchor_lang::prelude::Pubkey;
    let mut _195: u8;
    let _196: ();
    let mut _197: bool;
    let mut _198: &anchor_lang::prelude::Pubkey;
    let _199: anchor_lang::prelude::Pubkey;
    let mut _200: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _201: &anchor_lang::prelude::Pubkey;
    let mut _202: !;
    let mut _203: anchor_lang::error::Error;
    let mut _204: anchor_lang::error::Error;
    let mut _205: anchor_lang::error::Error;
    let mut _206: anchor_lang::error::ErrorCode;
    let mut _207: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _208: anchor_lang::prelude::Pubkey;
    let mut _209: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _210: anchor_lang::prelude::Pubkey;
    let mut _213: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _214: &anchor_lang::prelude::AccountInfo<'_>;
    let _215: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _216: &anchor_lang::prelude::AccountInfo<'_>;
    let _217: ();
    let mut _218: bool;
    let mut _219: bool;
    let mut _220: &&anchor_lang::prelude::Pubkey;
    let mut _221: &&anchor_lang::prelude::Pubkey;
    let _222: &anchor_lang::prelude::Pubkey;
    let _223: anchor_lang::prelude::Pubkey;
    let mut _225: &anchor_lang::prelude::AccountInfo<'_>;
    let _226: ();
    let mut _227: bool;
    let mut _228: u64;
    let mut _231: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _232: bool;
    let mut _233: &anchor_lang::prelude::Pubkey;
    let mut _234: &anchor_lang::prelude::Pubkey;
    let _235: anchor_lang::prelude::Pubkey;
    let mut _237: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _238: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _239: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _240: isize;
    let mut _242: !;
    let mut _243: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _246: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>>;
    let mut _247: std::result::Result<anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>, anchor_lang::prelude::ProgramError>;
    let mut _248: &[u8];
    let _249: &&mut [u8];
    let mut _250: &std::cell::Ref<'_, &mut [u8]>;
    let _251: &std::cell::Ref<'_, &mut [u8]>;
    let mut _252: isize;
    let mut _254: !;
    let mut _255: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _258: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>>;
    let mut _259: std::result::Result<std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>, anchor_lang::prelude::ProgramError>;
    let mut _260: &anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
    let mut _261: isize;
    let mut _263: !;
    let mut _264: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _267: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let _268: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let mut _269: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let _270: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _271: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _272: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _273: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let _274: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let mut _275: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let _276: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _277: isize;
    let mut _279: !;
    let mut _280: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _283: &anchor_lang::prelude::Rent;
    let mut _284: usize;
    let mut _286: anchor_lang::prelude::AccountInfo<'_>;
    let mut _287: &anchor_lang::prelude::Signer<'_>;
    let mut _288: anchor_lang::prelude::AccountInfo<'_>;
    let mut _289: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _291: anchor_lang::prelude::AccountInfo<'_>;
    let mut _292: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _293: anchor_lang::system_program::CreateAccount<'_>;
    let _294: ();
    let mut _295: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _296: std::result::Result<(), anchor_lang::error::Error>;
    let mut _297: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _298: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _299: &[&[&[u8]]];
    let mut _300: &[&[&[u8]]; 1];
    let _301: &[&[&[u8]]; 1];
    let _302: [&[&[u8]]; 1];
    let mut _303: &[&[u8]];
    let _304: &[&[u8]];
    let _305: &[&[u8]];
    let mut _306: &[&[u8]; 3];
    let _307: [&[u8]; 3];
    let mut _308: &[u8];
    let mut _309: &[u8; 11];
    let _310: &[u8; 11];
    let mut _311: &[u8];
    let mut _312: &anchor_lang::prelude::Pubkey;
    let _313: anchor_lang::prelude::Pubkey;
    let mut _314: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _315: &[u8];
    let _316: &[u8];
    let _317: &[u8];
    let mut _318: &[u8; 1];
    let _319: [u8; 1];
    let mut _320: u8;
    let mut _321: std::ops::RangeFull;
    let mut _322: std::ops::RangeFull;
    let mut _323: u64;
    let mut _324: u64;
    let mut _325: usize;
    let mut _326: &anchor_lang::prelude::Pubkey;
    let _327: &anchor_lang::prelude::Pubkey;
    let _328: anchor_lang::prelude::Pubkey;
    let mut _329: &anchor_lang::prelude::AccountInfo<'_>;
    let _330: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _331: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _332: isize;
    let mut _334: !;
    let mut _335: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _337: ();
    let mut _338: bool;
    let mut _339: &anchor_lang::prelude::Pubkey;
    let _340: anchor_lang::prelude::Pubkey;
    let mut _341: &anchor_lang::prelude::Signer<'_>;
    let mut _342: &anchor_lang::prelude::Pubkey;
    let _343: anchor_lang::prelude::Pubkey;
    let mut _344: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _345: !;
    let mut _346: anchor_lang::error::Error;
    let mut _347: anchor_lang::error::Error;
    let mut _348: anchor_lang::error::AnchorError;
    let mut _349: std::string::String;
    let mut _350: &anchor_lang::error::ErrorCode;
    let _351: anchor_lang::error::ErrorCode;
    let mut _352: u32;
    let mut _353: anchor_lang::error::ErrorCode;
    let mut _354: std::string::String;
    let mut _355: &anchor_lang::error::ErrorCode;
    let _356: anchor_lang::error::ErrorCode;
    let mut _357: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _358: anchor_lang::error::ErrorOrigin;
    let mut _359: anchor_lang::error::Source;
    let mut _360: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _361: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _362: anchor_lang::prelude::Pubkey;
    let mut _363: &anchor_lang::prelude::Signer<'_>;
    let mut _364: anchor_lang::prelude::Pubkey;
    let mut _365: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _367: u64;
    let mut _368: u64;
    let mut _369: &anchor_lang::prelude::Rent;
    let mut _370: usize;
    let mut _372: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _373: bool;
    let mut _374: &anchor_lang::prelude::Pubkey;
    let mut _375: &anchor_lang::prelude::Pubkey;
    let _376: anchor_lang::prelude::Pubkey;
    let mut _378: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _379: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _380: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _381: isize;
    let mut _383: !;
    let mut _384: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _387: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>>;
    let mut _388: std::result::Result<anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>, anchor_lang::prelude::ProgramError>;
    let mut _389: &[u8];
    let _390: &&mut [u8];
    let mut _391: &std::cell::Ref<'_, &mut [u8]>;
    let _392: &std::cell::Ref<'_, &mut [u8]>;
    let mut _393: isize;
    let mut _395: !;
    let mut _396: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _399: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>>;
    let mut _400: std::result::Result<std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>, anchor_lang::prelude::ProgramError>;
    let mut _401: &anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
    let mut _402: isize;
    let mut _404: !;
    let mut _405: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _408: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let _409: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let mut _410: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let _411: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _412: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _413: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _414: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let _415: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let mut _416: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let _417: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _418: isize;
    let mut _420: !;
    let mut _421: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _423: u64;
    let _424: ();
    let mut _425: bool;
    let mut _426: u64;
    let mut _428: anchor_lang::prelude::AccountInfo<'_>;
    let mut _429: &anchor_lang::prelude::Signer<'_>;
    let mut _430: anchor_lang::prelude::AccountInfo<'_>;
    let mut _431: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _433: anchor_lang::prelude::AccountInfo<'_>;
    let mut _434: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _435: anchor_lang::system_program::Transfer<'_>;
    let _436: ();
    let mut _437: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _438: std::result::Result<(), anchor_lang::error::Error>;
    let mut _439: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
    let mut _440: u64;
    let mut _441: isize;
    let mut _443: !;
    let mut _444: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _447: anchor_lang::prelude::AccountInfo<'_>;
    let mut _448: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _450: anchor_lang::prelude::AccountInfo<'_>;
    let mut _451: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _452: anchor_lang::system_program::Allocate<'_>;
    let _453: ();
    let mut _454: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _455: std::result::Result<(), anchor_lang::error::Error>;
    let mut _456: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _457: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _458: &[&[&[u8]]];
    let mut _459: &[&[&[u8]]; 1];
    let _460: &[&[&[u8]]; 1];
    let _461: [&[&[u8]]; 1];
    let mut _462: &[&[u8]];
    let _463: &[&[u8]];
    let _464: &[&[u8]];
    let mut _465: &[&[u8]; 3];
    let _466: [&[u8]; 3];
    let mut _467: &[u8];
    let mut _468: &[u8; 11];
    let _469: &[u8; 11];
    let mut _470: &[u8];
    let mut _471: &anchor_lang::prelude::Pubkey;
    let _472: anchor_lang::prelude::Pubkey;
    let mut _473: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _474: &[u8];
    let _475: &[u8];
    let _476: &[u8];
    let mut _477: &[u8; 1];
    let _478: [u8; 1];
    let mut _479: u8;
    let mut _480: std::ops::RangeFull;
    let mut _481: std::ops::RangeFull;
    let mut _482: u64;
    let mut _483: usize;
    let mut _485: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _486: bool;
    let mut _487: &anchor_lang::prelude::Pubkey;
    let mut _488: &anchor_lang::prelude::Pubkey;
    let _489: anchor_lang::prelude::Pubkey;
    let mut _491: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _492: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _493: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _494: isize;
    let mut _496: !;
    let mut _497: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _500: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>>;
    let mut _501: std::result::Result<anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>, anchor_lang::prelude::ProgramError>;
    let mut _502: &[u8];
    let _503: &&mut [u8];
    let mut _504: &std::cell::Ref<'_, &mut [u8]>;
    let _505: &std::cell::Ref<'_, &mut [u8]>;
    let mut _506: isize;
    let mut _508: !;
    let mut _509: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _512: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>>;
    let mut _513: std::result::Result<std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>, anchor_lang::prelude::ProgramError>;
    let mut _514: &anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
    let mut _515: isize;
    let mut _517: !;
    let mut _518: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _521: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let _522: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let mut _523: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let _524: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _525: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _526: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _527: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let _528: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let mut _529: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let _530: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _531: isize;
    let mut _533: !;
    let mut _534: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _536: isize;
    let mut _538: !;
    let mut _539: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _542: anchor_lang::prelude::AccountInfo<'_>;
    let mut _543: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _545: anchor_lang::prelude::AccountInfo<'_>;
    let mut _546: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _547: anchor_lang::system_program::Assign<'_>;
    let _548: ();
    let mut _549: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _550: std::result::Result<(), anchor_lang::error::Error>;
    let mut _551: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _552: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _553: &[&[&[u8]]];
    let mut _554: &[&[&[u8]]; 1];
    let _555: &[&[&[u8]]; 1];
    let _556: [&[&[u8]]; 1];
    let mut _557: &[&[u8]];
    let _558: &[&[u8]];
    let _559: &[&[u8]];
    let mut _560: &[&[u8]; 3];
    let _561: [&[u8]; 3];
    let mut _562: &[u8];
    let mut _563: &[u8; 11];
    let _564: &[u8; 11];
    let mut _565: &[u8];
    let mut _566: &anchor_lang::prelude::Pubkey;
    let _567: anchor_lang::prelude::Pubkey;
    let mut _568: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _569: &[u8];
    let _570: &[u8];
    let _571: &[u8];
    let mut _572: &[u8; 1];
    let _573: [u8; 1];
    let mut _574: u8;
    let mut _575: std::ops::RangeFull;
    let mut _576: std::ops::RangeFull;
    let mut _577: &anchor_lang::prelude::Pubkey;
    let _578: &anchor_lang::prelude::Pubkey;
    let _579: anchor_lang::prelude::Pubkey;
    let mut _580: &anchor_lang::prelude::AccountInfo<'_>;
    let _581: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _582: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _583: isize;
    let mut _585: !;
    let mut _586: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _589: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _591: anchor_lang::prelude::AccountInfo<'_>;
    let mut _592: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _593: anchor_lang::prelude::AccountInfo<'_>;
    let mut _594: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _595: anchor_lang::prelude::AccountInfo<'_>;
    let mut _596: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _598: anchor_lang::prelude::AccountInfo<'_>;
    let mut _599: anchor_spl::token_2022::InitializeAccount3<'_>;
    let _600: ();
    let mut _601: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _602: std::result::Result<(), anchor_lang::error::Error>;
    let mut _603: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_spl::token_2022::InitializeAccount3<'_>>;
    let mut _604: isize;
    let mut _606: !;
    let mut _607: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _610: anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _611: std::result::Result<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>, anchor_lang::error::Error>;
    let mut _612: &anchor_lang::prelude::AccountInfo<'_>;
    let _613: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _614: isize;
    let mut _617: !;
    let mut _618: anchor_lang::error::Error;
    let mut _619: anchor_lang::error::Error;
    let _620: ();
    let mut _621: bool;
    let _622: ();
    let mut _623: bool;
    let mut _624: &anchor_lang::prelude::Pubkey;
    let _625: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _626: &anchor_spl::token_interface::TokenAccount;
    let _627: &anchor_spl::token_interface::TokenAccount;
    let mut _628: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _629: &anchor_lang::prelude::Pubkey;
    let _630: anchor_lang::prelude::Pubkey;
    let mut _631: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _632: !;
    let mut _633: anchor_lang::error::Error;
    let mut _634: anchor_lang::error::Error;
    let mut _635: anchor_lang::error::Error;
    let mut _636: anchor_lang::error::ErrorCode;
    let mut _637: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _638: anchor_lang::prelude::Pubkey;
    let mut _639: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _640: &anchor_spl::token_interface::TokenAccount;
    let _641: &anchor_spl::token_interface::TokenAccount;
    let mut _642: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _643: anchor_lang::prelude::Pubkey;
    let mut _644: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let _645: ();
    let mut _646: bool;
    let mut _647: &anchor_lang::prelude::Pubkey;
    let _648: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _649: &anchor_spl::token_interface::TokenAccount;
    let _650: &anchor_spl::token_interface::TokenAccount;
    let mut _651: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _652: &anchor_lang::prelude::Pubkey;
    let _653: anchor_lang::prelude::Pubkey;
    let mut _654: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _655: !;
    let mut _656: anchor_lang::error::Error;
    let mut _657: anchor_lang::error::Error;
    let mut _658: anchor_lang::error::Error;
    let mut _659: anchor_lang::error::ErrorCode;
    let mut _660: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _661: anchor_lang::prelude::Pubkey;
    let mut _662: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _663: &anchor_spl::token_interface::TokenAccount;
    let _664: &anchor_spl::token_interface::TokenAccount;
    let mut _665: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _666: anchor_lang::prelude::Pubkey;
    let mut _667: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _668: bool;
    let mut _669: &&anchor_lang::prelude::Pubkey;
    let mut _670: &&anchor_lang::prelude::Pubkey;
    let _671: &anchor_lang::prelude::Pubkey;
    let _672: anchor_lang::prelude::Pubkey;
    let mut _673: &anchor_lang::prelude::AccountInfo<'_>;
    let _674: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _675: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _676: !;
    let mut _677: anchor_lang::error::Error;
    let mut _678: anchor_lang::error::Error;
    let mut _679: anchor_lang::error::Error;
    let mut _680: anchor_lang::error::ErrorCode;
    let mut _681: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _682: anchor_lang::prelude::Pubkey;
    let mut _683: anchor_lang::prelude::Pubkey;
    let mut _684: &anchor_lang::prelude::AccountInfo<'_>;
    let _685: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _686: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let _687: ();
    let mut _688: bool;
    let mut _689: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _690: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _691: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _692: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _693: !;
    let mut _694: anchor_lang::error::Error;
    let mut _695: anchor_lang::error::Error;
    let mut _696: anchor_lang::error::ErrorCode;
    let _697: ();
    let mut _698: bool;
    let mut _699: &anchor_lang::prelude::Rent;
    let mut _700: u64;
    let mut _701: &anchor_lang::prelude::AccountInfo<'_>;
    let _702: anchor_lang::prelude::AccountInfo<'_>;
    let mut _703: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _704: usize;
    let mut _705: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _706: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _707: &anchor_lang::prelude::AccountInfo<'_>;
    let _708: anchor_lang::prelude::AccountInfo<'_>;
    let mut _709: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _710: isize;
    let mut _712: !;
    let mut _713: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _715: !;
    let mut _716: anchor_lang::error::Error;
    let mut _717: anchor_lang::error::Error;
    let mut _718: anchor_lang::error::ErrorCode;
    let mut _720: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Rent>;
    let mut _721: std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError>;
    let mut _722: isize;
    let mut _724: !;
    let mut _725: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _729: (anchor_lang::prelude::Pubkey, u8);
    let mut _730: &[&[u8]];
    let mut _731: &[&[u8]; 2];
    let _732: &[&[u8]; 2];
    let _733: [&[u8]; 2];
    let mut _734: &[u8];
    let mut _735: &[u8; 6];
    let _736: &[u8; 6];
    let mut _737: &[u8];
    let _738: &[u8];
    let mut _739: &anchor_lang::prelude::Pubkey;
    let _740: anchor_lang::prelude::Pubkey;
    let mut _741: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _742: &anchor_lang::prelude::Pubkey;
    let mut _743: u8;
    let _744: ();
    let mut _745: bool;
    let mut _746: &anchor_lang::prelude::Pubkey;
    let _747: anchor_lang::prelude::Pubkey;
    let mut _748: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _749: &anchor_lang::prelude::Pubkey;
    let mut _750: !;
    let mut _751: anchor_lang::error::Error;
    let mut _752: anchor_lang::error::Error;
    let mut _753: anchor_lang::error::Error;
    let mut _754: anchor_lang::error::ErrorCode;
    let mut _755: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _756: anchor_lang::prelude::Pubkey;
    let mut _757: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _758: anchor_lang::prelude::Pubkey;
    let mut _761: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _762: &&anchor_lang::prelude::AccountInfo<'_>;
    let _763: &&anchor_lang::prelude::AccountInfo<'_>;
    let _764: ();
    let mut _765: bool;
    let mut _766: bool;
    let mut _767: &&anchor_lang::prelude::Pubkey;
    let mut _768: &&anchor_lang::prelude::Pubkey;
    let _769: &anchor_lang::prelude::Pubkey;
    let _770: anchor_lang::prelude::Pubkey;
    let mut _772: &anchor_lang::prelude::AccountInfo<'_>;
    let _773: ();
    let mut _774: bool;
    let mut _775: u64;
    let mut _778: &anchor_lang::prelude::Rent;
    let mut _779: usize;
    let mut _781: anchor_lang::prelude::AccountInfo<'_>;
    let mut _782: &anchor_lang::prelude::Signer<'_>;
    let mut _783: anchor_lang::prelude::AccountInfo<'_>;
    let mut _784: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _786: anchor_lang::prelude::AccountInfo<'_>;
    let mut _787: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _788: anchor_lang::system_program::CreateAccount<'_>;
    let _789: ();
    let mut _790: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _791: std::result::Result<(), anchor_lang::error::Error>;
    let mut _792: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _793: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _794: &[&[&[u8]]];
    let mut _795: &[&[&[u8]]; 1];
    let _796: &[&[&[u8]]; 1];
    let _797: [&[&[u8]]; 1];
    let mut _798: &[&[u8]];
    let _799: &[&[u8]];
    let _800: &[&[u8]];
    let mut _801: &[&[u8]; 3];
    let _802: [&[u8]; 3];
    let mut _803: &[u8];
    let mut _804: &[u8; 6];
    let _805: &[u8; 6];
    let mut _806: &[u8];
    let mut _807: &anchor_lang::prelude::Pubkey;
    let _808: anchor_lang::prelude::Pubkey;
    let mut _809: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _810: &[u8];
    let _811: &[u8];
    let _812: &[u8];
    let mut _813: &[u8; 1];
    let _814: [u8; 1];
    let mut _815: u8;
    let mut _816: std::ops::RangeFull;
    let mut _817: std::ops::RangeFull;
    let mut _818: u64;
    let mut _819: u64;
    let mut _820: usize;
    let mut _821: &anchor_lang::prelude::Pubkey;
    let _822: &anchor_lang::prelude::Pubkey;
    let _823: anchor_lang::prelude::Pubkey;
    let mut _824: &anchor_lang::prelude::AccountInfo<'_>;
    let _825: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _826: &anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _827: isize;
    let mut _829: !;
    let mut _830: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _832: ();
    let mut _833: bool;
    let mut _834: &anchor_lang::prelude::Pubkey;
    let _835: anchor_lang::prelude::Pubkey;
    let mut _836: &anchor_lang::prelude::Signer<'_>;
    let mut _837: &anchor_lang::prelude::Pubkey;
    let _838: anchor_lang::prelude::Pubkey;
    let mut _839: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _840: !;
    let mut _841: anchor_lang::error::Error;
    let mut _842: anchor_lang::error::Error;
    let mut _843: anchor_lang::error::AnchorError;
    let mut _844: std::string::String;
    let mut _845: &anchor_lang::error::ErrorCode;
    let _846: anchor_lang::error::ErrorCode;
    let mut _847: u32;
    let mut _848: anchor_lang::error::ErrorCode;
    let mut _849: std::string::String;
    let mut _850: &anchor_lang::error::ErrorCode;
    let _851: anchor_lang::error::ErrorCode;
    let mut _852: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _853: anchor_lang::error::ErrorOrigin;
    let mut _854: anchor_lang::error::Source;
    let mut _855: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _856: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _857: anchor_lang::prelude::Pubkey;
    let mut _858: &anchor_lang::prelude::Signer<'_>;
    let mut _859: anchor_lang::prelude::Pubkey;
    let mut _860: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _862: u64;
    let mut _863: u64;
    let mut _864: &anchor_lang::prelude::Rent;
    let mut _865: u64;
    let _866: ();
    let mut _867: bool;
    let mut _868: u64;
    let mut _870: anchor_lang::prelude::AccountInfo<'_>;
    let mut _871: &anchor_lang::prelude::Signer<'_>;
    let mut _872: anchor_lang::prelude::AccountInfo<'_>;
    let mut _873: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _875: anchor_lang::prelude::AccountInfo<'_>;
    let mut _876: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _877: anchor_lang::system_program::Transfer<'_>;
    let _878: ();
    let mut _879: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _880: std::result::Result<(), anchor_lang::error::Error>;
    let mut _881: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
    let mut _882: u64;
    let mut _883: isize;
    let mut _885: !;
    let mut _886: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _889: anchor_lang::prelude::AccountInfo<'_>;
    let mut _890: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _892: anchor_lang::prelude::AccountInfo<'_>;
    let mut _893: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _894: anchor_lang::system_program::Allocate<'_>;
    let _895: ();
    let mut _896: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _897: std::result::Result<(), anchor_lang::error::Error>;
    let mut _898: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _899: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _900: &[&[&[u8]]];
    let mut _901: &[&[&[u8]]; 1];
    let _902: &[&[&[u8]]; 1];
    let _903: [&[&[u8]]; 1];
    let mut _904: &[&[u8]];
    let _905: &[&[u8]];
    let _906: &[&[u8]];
    let mut _907: &[&[u8]; 3];
    let _908: [&[u8]; 3];
    let mut _909: &[u8];
    let mut _910: &[u8; 6];
    let _911: &[u8; 6];
    let mut _912: &[u8];
    let mut _913: &anchor_lang::prelude::Pubkey;
    let _914: anchor_lang::prelude::Pubkey;
    let mut _915: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _916: &[u8];
    let _917: &[u8];
    let _918: &[u8];
    let mut _919: &[u8; 1];
    let _920: [u8; 1];
    let mut _921: u8;
    let mut _922: std::ops::RangeFull;
    let mut _923: std::ops::RangeFull;
    let mut _924: u64;
    let mut _925: isize;
    let mut _927: !;
    let mut _928: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _931: anchor_lang::prelude::AccountInfo<'_>;
    let mut _932: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _934: anchor_lang::prelude::AccountInfo<'_>;
    let mut _935: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _936: anchor_lang::system_program::Assign<'_>;
    let _937: ();
    let mut _938: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _939: std::result::Result<(), anchor_lang::error::Error>;
    let mut _940: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _941: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _942: &[&[&[u8]]];
    let mut _943: &[&[&[u8]]; 1];
    let _944: &[&[&[u8]]; 1];
    let _945: [&[&[u8]]; 1];
    let mut _946: &[&[u8]];
    let _947: &[&[u8]];
    let _948: &[&[u8]];
    let mut _949: &[&[u8]; 3];
    let _950: [&[u8]; 3];
    let mut _951: &[u8];
    let mut _952: &[u8; 6];
    let _953: &[u8; 6];
    let mut _954: &[u8];
    let mut _955: &anchor_lang::prelude::Pubkey;
    let _956: anchor_lang::prelude::Pubkey;
    let mut _957: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _958: &[u8];
    let _959: &[u8];
    let _960: &[u8];
    let mut _961: &[u8; 1];
    let _962: [u8; 1];
    let mut _963: u8;
    let mut _964: std::ops::RangeFull;
    let mut _965: std::ops::RangeFull;
    let mut _966: &anchor_lang::prelude::Pubkey;
    let _967: &anchor_lang::prelude::Pubkey;
    let _968: anchor_lang::prelude::Pubkey;
    let mut _969: &anchor_lang::prelude::AccountInfo<'_>;
    let _970: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _971: &anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _972: isize;
    let mut _974: !;
    let mut _975: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _978: &anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _980: anchor_lang::prelude::AccountInfo<'_>;
    let mut _981: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _983: anchor_lang::prelude::AccountInfo<'_>;
    let mut _984: anchor_spl::token_2022::InitializeMint2<'_>;
    let _985: ();
    let mut _986: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _987: std::result::Result<(), anchor_lang::error::Error>;
    let mut _988: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_spl::token_2022::InitializeMint2<'_>>;
    let mut _989: u8;
    let mut _990: &anchor_spl::token_2022::spl_token_2022::state::Mint;
    let mut _991: &anchor_spl::token_interface::Mint;
    let _992: &anchor_spl::token_interface::Mint;
    let mut _993: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _994: &anchor_lang::prelude::Pubkey;
    let _995: &anchor_lang::prelude::Pubkey;
    let _996: anchor_lang::prelude::Pubkey;
    let mut _997: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _998: std::option::Option<&anchor_lang::prelude::Pubkey>;
    let mut _999: isize;
    let mut _1001: !;
    let mut _1002: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _1005: anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1006: std::result::Result<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>, anchor_lang::error::Error>;
    let mut _1007: &anchor_lang::prelude::AccountInfo<'_>;
    let _1008: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _1009: isize;
    let mut _1012: !;
    let mut _1013: anchor_lang::error::Error;
    let mut _1014: anchor_lang::error::Error;
    let _1015: ();
    let mut _1016: bool;
    let _1017: ();
    let mut _1018: bool;
    let mut _1019: &solana_program::program_option::COption<anchor_lang::prelude::Pubkey>;
    let _1020: &anchor_spl::token_2022::spl_token_2022::state::Mint;
    let mut _1021: &anchor_spl::token_interface::Mint;
    let _1022: &anchor_spl::token_interface::Mint;
    let mut _1023: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1024: &solana_program::program_option::COption<anchor_lang::prelude::Pubkey>;
    let _1025: solana_program::program_option::COption<anchor_lang::prelude::Pubkey>;
    let mut _1026: anchor_lang::prelude::Pubkey;
    let mut _1027: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1028: !;
    let mut _1029: anchor_lang::error::Error;
    let mut _1030: anchor_lang::error::Error;
    let mut _1031: anchor_lang::error::ErrorCode;
    let _1032: ();
    let mut _1033: bool;
    let mut _1034: solana_program::program_option::COption<bool>;
    let mut _1035: solana_program::program_option::COption<&anchor_lang::prelude::Pubkey>;
    let mut _1036: &solana_program::program_option::COption<anchor_lang::prelude::Pubkey>;
    let _1037: &anchor_spl::token_2022::spl_token_2022::state::Mint;
    let mut _1038: &anchor_spl::token_interface::Mint;
    let _1039: &anchor_spl::token_interface::Mint;
    let mut _1040: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1041: {closure@programs\kvault\src\handlers\handler_init_vault.rs:78:10: 78:18};
    let mut _1042: bool;
    let mut _1043: &std::option::Option<&anchor_lang::prelude::Pubkey>;
    let _1044: std::option::Option<&anchor_lang::prelude::Pubkey>;
    let mut _1045: !;
    let mut _1046: anchor_lang::error::Error;
    let mut _1047: anchor_lang::error::Error;
    let mut _1048: anchor_lang::error::ErrorCode;
    let _1049: ();
    let mut _1050: bool;
    let mut _1051: u8;
    let mut _1052: &anchor_spl::token_2022::spl_token_2022::state::Mint;
    let mut _1053: &anchor_spl::token_interface::Mint;
    let _1054: &anchor_spl::token_interface::Mint;
    let mut _1055: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1056: u8;
    let mut _1057: &anchor_spl::token_2022::spl_token_2022::state::Mint;
    let mut _1058: &anchor_spl::token_interface::Mint;
    let _1059: &anchor_spl::token_interface::Mint;
    let mut _1060: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1061: !;
    let mut _1062: anchor_lang::error::Error;
    let mut _1063: anchor_lang::error::Error;
    let mut _1064: anchor_lang::error::Error;
    let mut _1065: anchor_lang::error::ErrorCode;
    let mut _1066: (u8, u8);
    let mut _1067: u8;
    let mut _1068: &anchor_spl::token_2022::spl_token_2022::state::Mint;
    let mut _1069: &anchor_spl::token_interface::Mint;
    let _1070: &anchor_spl::token_interface::Mint;
    let mut _1071: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1072: u8;
    let mut _1073: &anchor_spl::token_2022::spl_token_2022::state::Mint;
    let mut _1074: &anchor_spl::token_interface::Mint;
    let _1075: &anchor_spl::token_interface::Mint;
    let mut _1076: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1077: bool;
    let mut _1078: &&anchor_lang::prelude::Pubkey;
    let mut _1079: &&anchor_lang::prelude::Pubkey;
    let _1080: &anchor_lang::prelude::Pubkey;
    let _1081: anchor_lang::prelude::Pubkey;
    let mut _1082: &anchor_lang::prelude::AccountInfo<'_>;
    let _1083: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1084: &anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _1085: !;
    let mut _1086: anchor_lang::error::Error;
    let mut _1087: anchor_lang::error::Error;
    let mut _1088: anchor_lang::error::Error;
    let mut _1089: anchor_lang::error::ErrorCode;
    let mut _1090: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _1091: anchor_lang::prelude::Pubkey;
    let mut _1092: anchor_lang::prelude::Pubkey;
    let mut _1093: &anchor_lang::prelude::AccountInfo<'_>;
    let _1094: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1095: &anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let _1096: ();
    let mut _1097: bool;
    let mut _1098: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1099: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let _1100: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1101: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _1102: !;
    let mut _1103: anchor_lang::error::Error;
    let mut _1104: anchor_lang::error::Error;
    let mut _1105: anchor_lang::error::ErrorCode;
    let _1106: ();
    let mut _1107: bool;
    let mut _1108: &anchor_lang::prelude::Rent;
    let mut _1109: u64;
    let mut _1110: &anchor_lang::prelude::AccountInfo<'_>;
    let _1111: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1112: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1113: usize;
    let mut _1114: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _1115: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _1116: &anchor_lang::prelude::AccountInfo<'_>;
    let _1117: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1118: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1119: isize;
    let mut _1121: !;
    let mut _1122: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _1124: !;
    let mut _1125: anchor_lang::error::Error;
    let mut _1126: anchor_lang::error::Error;
    let mut _1127: anchor_lang::error::ErrorCode;
    let _1128: ();
    let mut _1129: bool;
    let mut _1130: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1131: &anchor_lang::prelude::Signer<'_>;
    let _1132: &anchor_lang::prelude::Signer<'_>;
    let mut _1133: !;
    let mut _1134: anchor_lang::error::Error;
    let mut _1135: anchor_lang::error::Error;
    let mut _1136: anchor_lang::error::ErrorCode;
    let mut _1138: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Rent>;
    let mut _1139: std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError>;
    let mut _1140: isize;
    let mut _1142: !;
    let mut _1143: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _1147: &&mut [u8];
    let mut _1148: &std::cell::Ref<'_, &mut [u8]>;
    let _1149: &std::cell::Ref<'_, &mut [u8]>;
    let _1150: std::cell::Ref<'_, &mut [u8]>;
    let mut _1151: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _1152: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _1153: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1154: isize;
    let mut _1156: !;
    let mut _1157: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _1160: ();
    let mut _1161: &mut [u8];
    let mut _1162: &mut [u8; 8];
    let mut _1163: &[u8];
    let _1164: &[u8];
    let _1165: &[u8];
    let mut _1166: &[u8];
    let mut _1167: std::ops::RangeTo<usize>;
    let mut _1169: [u8; 8];
    let _1170: ();
    let mut _1171: bool;
    let mut _1172: u64;
    let mut _1173: !;
    let mut _1174: anchor_lang::error::Error;
    let mut _1175: anchor_lang::error::Error;
    let mut _1176: anchor_lang::error::ErrorCode;
    let mut _1177: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::VaultState>, anchor_lang::error::Error>;
    let mut _1178: &anchor_lang::prelude::Pubkey;
    let mut _1179: &anchor_lang::prelude::AccountInfo<'_>;
    let _1180: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _1181: isize;
    let mut _1184: !;
    let mut _1185: anchor_lang::error::Error;
    let mut _1186: anchor_lang::error::Error;
    let _1187: ();
    let mut _1188: bool;
    let mut _1189: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1190: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let _1191: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _1192: !;
    let mut _1193: anchor_lang::error::Error;
    let mut _1194: anchor_lang::error::Error;
    let mut _1195: anchor_lang::error::ErrorCode;
    let _1196: ();
    let mut _1197: bool;
    let mut _1198: &anchor_lang::prelude::Rent;
    let mut _1199: u64;
    let mut _1200: &anchor_lang::prelude::AccountInfo<'_>;
    let _1201: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1202: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _1203: usize;
    let mut _1204: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _1205: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _1206: &anchor_lang::prelude::AccountInfo<'_>;
    let _1207: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1208: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _1209: isize;
    let mut _1211: !;
    let mut _1212: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _1214: !;
    let mut _1215: anchor_lang::error::Error;
    let mut _1216: anchor_lang::error::Error;
    let mut _1217: anchor_lang::error::ErrorCode;
    let mut _1220: (anchor_lang::prelude::Pubkey, u8);
    let mut _1221: &[&[u8]];
    let mut _1222: &[&[u8]; 2];
    let _1223: &[&[u8]; 2];
    let _1224: [&[u8]; 2];
    let mut _1225: &[u8];
    let mut _1226: &[u8; 9];
    let _1227: &[u8; 9];
    let mut _1228: &[u8];
    let _1229: &[u8];
    let mut _1230: &anchor_lang::prelude::Pubkey;
    let _1231: anchor_lang::prelude::Pubkey;
    let mut _1232: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _1233: &anchor_lang::prelude::Pubkey;
    let _1234: &&anchor_lang::prelude::Pubkey;
    let mut _1235: u8;
    let _1236: ();
    let mut _1237: bool;
    let mut _1238: &anchor_lang::prelude::Pubkey;
    let _1239: anchor_lang::prelude::Pubkey;
    let mut _1240: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1241: &anchor_lang::prelude::Pubkey;
    let mut _1242: !;
    let mut _1243: anchor_lang::error::Error;
    let mut _1244: anchor_lang::error::Error;
    let mut _1245: anchor_lang::error::Error;
    let mut _1246: anchor_lang::error::ErrorCode;
    let mut _1247: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _1248: anchor_lang::prelude::Pubkey;
    let mut _1249: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1250: anchor_lang::prelude::Pubkey;
    let _1251: ();
    let mut _1252: bool;
    let mut _1253: &&anchor_lang::prelude::Pubkey;
    let _1254: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1255: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let _1256: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1257: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _1258: &&anchor_lang::prelude::Pubkey;
    let _1259: &anchor_lang::prelude::Pubkey;
    let _1260: anchor_lang::prelude::Pubkey;
    let mut _1261: &anchor_lang::prelude::AccountInfo<'_>;
    let _1262: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1263: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _1264: !;
    let mut _1265: anchor_lang::error::Error;
    let mut _1266: anchor_lang::error::ErrorCode;
    let _1267: ();
    let mut _1268: bool;
    let mut _1269: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1270: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _1271: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1272: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1273: !;
    let mut _1274: anchor_lang::error::Error;
    let mut _1275: anchor_lang::error::Error;
    let mut _1276: anchor_lang::error::ErrorCode;
    let _1277: ();
    let _1278: ();
    let mut _1279: bool;
    let mut _1280: &anchor_lang::prelude::Pubkey;
    let _1281: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _1282: &anchor_spl::token_interface::TokenAccount;
    let _1283: &anchor_spl::token_interface::TokenAccount;
    let mut _1284: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1285: &anchor_lang::prelude::Pubkey;
    let _1286: anchor_lang::prelude::Pubkey;
    let mut _1287: &anchor_lang::prelude::Signer<'_>;
    let mut _1288: !;
    let mut _1289: anchor_lang::error::Error;
    let mut _1290: anchor_lang::error::ErrorCode;
    let mut _1291: bool;
    let mut _1292: &anchor_lang::prelude::Pubkey;
    let _1293: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _1294: &anchor_spl::token_interface::TokenAccount;
    let _1295: &anchor_spl::token_interface::TokenAccount;
    let mut _1296: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1297: &anchor_lang::prelude::Pubkey;
    let _1298: anchor_lang::prelude::Pubkey;
    let mut _1299: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1300: !;
    let mut _1301: anchor_lang::error::Error;
    let mut _1302: anchor_lang::error::ErrorCode;
    let mut _1303: handlers::handler_init_vault::InitVault<'_>;
    let mut _1304: anchor_lang::prelude::Signer<'_>;
    let mut _1305: anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _1306: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1307: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1308: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _1309: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _1310: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1311: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _1312: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
    let mut _1313: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _1314: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _1322: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1323: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1324: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1325: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1326: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1327: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1328: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1329: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1330: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1331: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1332: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1333: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1334: &anchor_lang::prelude::Pubkey;
    let mut _1335: &mut [u8];
    let mut _1336: &anchor_lang::prelude::Pubkey;
    let mut _1337: &mut [u8];
    let mut _1338: &anchor_lang::prelude::Pubkey;
    let mut _1339: &mut [u8];
    let mut _1340: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1341: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1342: &mut [u8];
    let mut _1343: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1344: &anchor_lang::prelude::Pubkey;
    let mut _1345: bool;
    let mut _1346: bool;
    let mut _1347: bool;
    let mut _1348: bool;
    let mut _1349: bool;
    let mut _1350: bool;
    let mut _1351: bool;
    let mut _1352: bool;
    let mut _1353: bool;
    let mut _1354: bool;
    let mut _1355: bool;
    let mut _1356: bool;
    let mut _1357: bool;
    let mut _1358: bool;
    let mut _1359: bool;
    let mut _1360: bool;
    let mut _1361: bool;
    let mut _1362: bool;
    let mut _1363: bool;
    let mut _1364: bool;
    let mut _1365: bool;
    let mut _1366: bool;
    let mut _1367: bool;
    let mut _1368: bool;
    let mut _1369: bool;
    let mut _1370: bool;
    let mut _1371: bool;
    let mut _1372: bool;
    let mut _1373: bool;
    let mut _1374: bool;
    let mut _1375: bool;
    let mut _1376: bool;
    let mut _1377: bool;
    let mut _1378: bool;
    let mut _1379: bool;
    let mut _1380: bool;
    let mut _1381: bool;
    let mut _1382: bool;
    let mut _1383: bool;
    let mut _1384: bool;
    let mut _1385: bool;
    let mut _1386: bool;
    let mut _1387: bool;
    let mut _1388: bool;
    let mut _1389: isize;
    let mut _1390: isize;
    let mut _1391: isize;
    let mut _1392: isize;
    let mut _1393: isize;
    let mut _1394: isize;
    let mut _1395: isize;
    let mut _1396: isize;
    let mut _1397: isize;
    let mut _1398: isize;
    let mut _1399: isize;
    let mut _1400: isize;
    let mut _1401: isize;
    let mut _1402: isize;
    let mut _1403: isize;
    let mut _1404: isize;
    let mut _1405: isize;
    let mut _1406: isize;
    let mut _1407: isize;
    let mut _1408: isize;
    let mut _1409: isize;
    let mut _1410: isize;
    let mut _1411: isize;
    let mut _1412: isize;
    let mut _1413: isize;
    let mut _1414: isize;
    let mut _1415: isize;
    let mut _1416: isize;
    let mut _1417: isize;
    let mut _1418: isize;
    let mut _1419: isize;
    let mut _1420: isize;
    let mut _1421: isize;
    let mut _1422: isize;
    let mut _1423: isize;
    let mut _1424: isize;
    let mut _1425: isize;
    let mut _1426: isize;
    let mut _1427: isize;
    let mut _1428: isize;
    let mut _1429: isize;
    let mut _1430: isize;
    let mut _1431: isize;
    let mut _1432: isize;
    let mut _1433: isize;
    let mut _1434: isize;
    let mut _1435: isize;
    let mut _1436: isize;
    let mut _1437: isize;
    let mut _1438: isize;
    let mut _1439: isize;
    let mut _1440: isize;
    let mut _1441: isize;
    let mut _1442: isize;
    let mut _1443: isize;
    let mut _1444: isize;
    let mut _1445: isize;
    let mut _1446: isize;
    let mut _1447: isize;
    let mut _1448: isize;
    let mut _1449: isize;
    let mut _1450: isize;
    let mut _1451: isize;
    let mut _1452: isize;
    let mut _1453: isize;
    let mut _1454: isize;
    let mut _1455: isize;
    let mut _1456: isize;
    let mut _1457: isize;
    let mut _1458: isize;
    let mut _1459: isize;
    let mut _1460: isize;
    let mut _1461: isize;
    let mut _1462: isize;
    let mut _1463: isize;
    let mut _1464: isize;
    let mut _1465: isize;
    let mut _1466: isize;
    let mut _1467: isize;
    let mut _1468: isize;
    let mut _1469: isize;
    let mut _1470: isize;
    let mut _1471: isize;
    let mut _1472: isize;
    let mut _1473: isize;
    let mut _1474: isize;
    let mut _1475: isize;
    let mut _1476: isize;
    let mut _1477: isize;
    let mut _1478: isize;
    let mut _1479: isize;
    let mut _1480: isize;
    let mut _1481: isize;
    let mut _1482: isize;
    let mut _1483: isize;
    let mut _1484: isize;
    let mut _1485: isize;
    let mut _1486: isize;
    let mut _1487: isize;
    let mut _1488: isize;
    let mut _1489: isize;
    let mut _1490: isize;
    let mut _1491: isize;
    let mut _1492: isize;
    let mut _1493: isize;
    let mut _1494: isize;
    let mut _1495: isize;
    let mut _1496: isize;
    let mut _1497: isize;
    let mut _1498: isize;
    let mut _1499: isize;
    let mut _1500: isize;
    let mut _1501: isize;
    let mut _1502: isize;
    let mut _1503: isize;
    let mut _1504: isize;
    let mut _1505: isize;
    let mut _1506: isize;
    let mut _1507: isize;
    let mut _1508: isize;
    let mut _1509: isize;
    let mut _1510: isize;
    let mut _1511: isize;
    let mut _1512: isize;
    let mut _1513: isize;
    let mut _1514: isize;
    let mut _1515: isize;
    let mut _1516: isize;
    let mut _1517: isize;
    let mut _1518: isize;
    let mut _1519: isize;
    let mut _1520: isize;
    let mut _1521: isize;
    let mut _1522: isize;
    let mut _1523: isize;
    let mut _1524: isize;
    let mut _1525: isize;
    let mut _1526: isize;
    let mut _1527: isize;
    let mut _1528: isize;
    let mut _1529: isize;
    let mut _1530: isize;
    let mut _1531: isize;
    let mut _1532: isize;
    let mut _1533: isize;
    let mut _1534: isize;
    let mut _1535: isize;
    let mut _1536: isize;
    let mut _1537: isize;
    let mut _1538: isize;
    let mut _1539: isize;
    let mut _1540: isize;
    let mut _1541: isize;
    let mut _1542: isize;
    let mut _1543: isize;
    let mut _1544: isize;
    let mut _1545: isize;
    let mut _1546: isize;
    let mut _1547: isize;
    let mut _1548: isize;
    let mut _1549: isize;
    let mut _1550: isize;
    let mut _1551: isize;
    let mut _1552: isize;
    let mut _1553: isize;
    let mut _1554: isize;
    let mut _1555: isize;
    let mut _1556: isize;
    let mut _1557: isize;
    let mut _1558: isize;
    let mut _1559: isize;
    let mut _1560: isize;
    let mut _1561: isize;
    let mut _1562: isize;
    let mut _1563: isize;
    let mut _1564: isize;
    let mut _1565: isize;
    let mut _1566: isize;
    let mut _1567: isize;
    let mut _1568: isize;
    let mut _1569: isize;
    let mut _1570: isize;
    let mut _1571: isize;
    let mut _1572: isize;
    let mut _1573: isize;
    let mut _1574: isize;
    let mut _1575: isize;
    let mut _1576: isize;
    let mut _1577: isize;
    let mut _1578: isize;
    let mut _1579: isize;
    let mut _1580: isize;
    let mut _1581: isize;
    let mut _1582: isize;
    let mut _1583: isize;
    let mut _1584: isize;
    let mut _1585: isize;
    let mut _1586: isize;
    let mut _1587: isize;
    let mut _1588: isize;
    let mut _1589: isize;
    let mut _1590: isize;
    let mut _1591: isize;
    let mut _1592: isize;
    let mut _1593: isize;
    let mut _1594: isize;
    let mut _1595: isize;
    let mut _1596: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1597: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1598: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1599: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1600: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1601: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1602: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1603: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1604: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1605: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1606: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1607: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1608: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1609: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1610: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1611: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1612: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1613: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1614: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1615: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1616: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1617: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1618: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1619: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    scope 1 {
        debug admin_authority => _6;
        let _27: &anchor_lang::prelude::AccountInfo<'_>;
        scope 6 {
            debug vault_state => _27;
            let _36: anchor_lang::prelude::AccountInfo<'_>;
            let _47: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _50: anchor_lang::prelude::AccountInfo<'_>;
            scope 7 {
                debug base_vault_authority => _36;
                let _57: &anchor_lang::prelude::AccountInfo<'_>;
                scope 12 {
                    debug token_vault => _57;
                    let _66: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                    let _77: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _80: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                    scope 13 {
                        debug base_token_mint => _66;
                        let _87: &anchor_lang::prelude::AccountInfo<'_>;
                        scope 18 {
                            debug shares_mint => _87;
                            let _96: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                            let _107: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _110: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                            scope 19 {
                                debug admin_token_account => _96;
                                let _111: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                                let _122: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _125: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                                scope 24 {
                                    debug system_program => _111;
                                    let _126: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                                    let _137: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                    let _140: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                                    scope 29 {
                                        debug rent => _126;
                                        let _141: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
                                        let _152: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                        let _155: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
                                        scope 34 {
                                            debug token_program => _141;
                                            let _156: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
                                            let _167: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                            let _170: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
                                            scope 39 {
                                                debug shares_token_program => _156;
                                                let _171: anchor_lang::prelude::Rent;
                                                let _175: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                let _178: anchor_lang::prelude::Rent;
                                                scope 44 {
                                                    debug __anchor_rent => _171;
                                                    let _179: anchor_lang::prelude::Pubkey;
                                                    let _180: u8;
                                                    scope 49 {
                                                        debug __pda_address => _179;
                                                        debug __bump => _180;
                                                        let _211: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                                        let _212: &anchor_lang::prelude::Pubkey;
                                                        scope 50 {
                                                            debug token_vault => _211;
                                                            let _711: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                            let _714: usize;
                                                            let _719: anchor_lang::prelude::Rent;
                                                            let _723: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                            let _726: anchor_lang::prelude::Rent;
                                                            scope 153 {
                                                                debug residual => _711;
                                                                scope 154 {
                                                                }
                                                            }
                                                            scope 155 {
                                                                debug val => _714;
                                                                scope 156 {
                                                                }
                                                            }
                                                            scope 157 {
                                                                debug __anchor_rent => _719;
                                                                let _727: anchor_lang::prelude::Pubkey;
                                                                let _728: u8;
                                                                scope 162 {
                                                                    debug __pda_address => _727;
                                                                    debug __bump => _728;
                                                                    let _759: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                                                                    let _760: &anchor_lang::prelude::Pubkey;
                                                                    scope 163 {
                                                                        debug shares_mint => _759;
                                                                        let _1120: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                        let _1123: usize;
                                                                        let _1137: anchor_lang::prelude::Rent;
                                                                        let _1141: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                        let _1144: anchor_lang::prelude::Rent;
                                                                        scope 203 {
                                                                            debug residual => _1120;
                                                                            scope 204 {
                                                                            }
                                                                        }
                                                                        scope 205 {
                                                                            debug val => _1123;
                                                                            scope 206 {
                                                                            }
                                                                        }
                                                                        scope 207 {
                                                                            debug __anchor_rent => _1137;
                                                                            let _1145: anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
                                                                            let mut _1146: &[u8];
                                                                            let _1155: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                            let _1158: std::cell::Ref<'_, &mut [u8]>;
                                                                            scope 212 {
                                                                                debug vault_state => _1145;
                                                                                let _1210: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                let _1213: usize;
                                                                                let _1218: anchor_lang::prelude::Pubkey;
                                                                                let _1219: u8;
                                                                                scope 222 {
                                                                                    debug residual => _1210;
                                                                                    scope 223 {
                                                                                    }
                                                                                }
                                                                                scope 224 {
                                                                                    debug val => _1213;
                                                                                    scope 225 {
                                                                                    }
                                                                                }
                                                                                scope 226 {
                                                                                    debug __pda_address => _1218;
                                                                                    debug __bump => _1219;
                                                                                }
                                                                            }
                                                                            scope 213 {
                                                                                debug __data => _1146;
                                                                                let mut _1159: [u8; 8];
                                                                                scope 218 {
                                                                                    debug __disc_bytes => _1159;
                                                                                    let _1168: u64;
                                                                                    scope 219 {
                                                                                        debug __discriminator => _1168;
                                                                                        let _1182: anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
                                                                                        let _1183: anchor_lang::error::Error;
                                                                                        scope 220 {
                                                                                            debug val => _1182;
                                                                                        }
                                                                                        scope 221 {
                                                                                            debug e => _1183;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 214 {
                                                                                debug residual => _1155;
                                                                                scope 215 {
                                                                                }
                                                                            }
                                                                            scope 216 {
                                                                                debug val => _1158;
                                                                                scope 217 {
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 208 {
                                                                            debug residual => _1141;
                                                                            scope 209 {
                                                                            }
                                                                        }
                                                                        scope 210 {
                                                                            debug val => _1144;
                                                                            scope 211 {
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 164 {
                                                                        debug owner_program => _760;
                                                                        let _771: u64;
                                                                        let _1004: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                                                                        let _1010: anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
                                                                        let _1011: anchor_lang::error::Error;
                                                                        let mut _1318: &&anchor_lang::prelude::Pubkey;
                                                                        scope 165 {
                                                                            debug __current_lamports => _771;
                                                                            let _776: usize;
                                                                            let _861: u64;
                                                                            let _977: anchor_lang::prelude::AccountInfo<'_>;
                                                                            let mut _1316: &anchor_lang::error::ErrorCode;
                                                                            let mut _1317: &anchor_lang::error::ErrorCode;
                                                                            scope 166 {
                                                                                debug space => _776;
                                                                                let _777: u64;
                                                                                scope 167 {
                                                                                    debug lamports => _777;
                                                                                    let _780: anchor_lang::system_program::CreateAccount<'_>;
                                                                                    scope 168 {
                                                                                        debug cpi_accounts => _780;
                                                                                        let _785: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
                                                                                        scope 169 {
                                                                                            debug cpi_context => _785;
                                                                                            let _828: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                            let _831: ();
                                                                                            scope 170 {
                                                                                                debug residual => _828;
                                                                                                scope 171 {
                                                                                                }
                                                                                            }
                                                                                            scope 172 {
                                                                                                debug val => _831;
                                                                                                scope 173 {
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 174 {
                                                                                debug required_lamports => _861;
                                                                                let _869: anchor_lang::system_program::Transfer<'_>;
                                                                                let _888: anchor_lang::system_program::Allocate<'_>;
                                                                                scope 175 {
                                                                                    debug cpi_accounts => _869;
                                                                                    let _874: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
                                                                                    scope 176 {
                                                                                        debug cpi_context => _874;
                                                                                        let _884: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                        let _887: ();
                                                                                        scope 177 {
                                                                                            debug residual => _884;
                                                                                            scope 178 {
                                                                                            }
                                                                                        }
                                                                                        scope 179 {
                                                                                            debug val => _887;
                                                                                            scope 180 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                scope 181 {
                                                                                    debug cpi_accounts => _888;
                                                                                    let _891: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
                                                                                    scope 182 {
                                                                                        debug cpi_context => _891;
                                                                                        let _926: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                        let _929: ();
                                                                                        let _930: anchor_lang::system_program::Assign<'_>;
                                                                                        scope 183 {
                                                                                            debug residual => _926;
                                                                                            scope 184 {
                                                                                            }
                                                                                        }
                                                                                        scope 185 {
                                                                                            debug val => _929;
                                                                                            scope 186 {
                                                                                            }
                                                                                        }
                                                                                        scope 187 {
                                                                                            debug cpi_accounts => _930;
                                                                                            let _933: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
                                                                                            scope 188 {
                                                                                                debug cpi_context => _933;
                                                                                                let _973: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                                let _976: ();
                                                                                                scope 189 {
                                                                                                    debug residual => _973;
                                                                                                    scope 190 {
                                                                                                    }
                                                                                                }
                                                                                                scope 191 {
                                                                                                    debug val => _976;
                                                                                                    scope 192 {
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 193 {
                                                                                debug cpi_program => _977;
                                                                                let _979: anchor_spl::token_2022::InitializeMint2<'_>;
                                                                                scope 194 {
                                                                                    debug accounts => _979;
                                                                                    let _982: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_spl::token_2022::InitializeMint2<'_>>;
                                                                                    scope 195 {
                                                                                        debug cpi_ctx => _982;
                                                                                        let _1000: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                        let _1003: ();
                                                                                        scope 196 {
                                                                                            debug residual => _1000;
                                                                                            scope 197 {
                                                                                            }
                                                                                        }
                                                                                        scope 198 {
                                                                                            debug val => _1003;
                                                                                            scope 199 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 200 {
                                                                            debug pa => _1004;
                                                                            let mut _1315: &std::option::Option<&anchor_lang::prelude::Pubkey>;
                                                                        }
                                                                        scope 201 {
                                                                            debug val => _1010;
                                                                        }
                                                                        scope 202 {
                                                                            debug e => _1011;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            scope 158 {
                                                                debug residual => _723;
                                                                scope 159 {
                                                                }
                                                            }
                                                            scope 160 {
                                                                debug val => _726;
                                                                scope 161 {
                                                                }
                                                            }
                                                        }
                                                        scope 51 {
                                                            debug owner_program => _212;
                                                            let _224: u64;
                                                            let _609: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                                            let _615: anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
                                                            let _616: anchor_lang::error::Error;
                                                            let mut _1321: &&anchor_lang::prelude::Pubkey;
                                                            scope 52 {
                                                                debug __current_lamports => _224;
                                                                let _229: usize;
                                                                let _230: anchor_lang::prelude::AccountInfo<'_>;
                                                                let _366: u64;
                                                                let _371: anchor_lang::prelude::AccountInfo<'_>;
                                                                let _588: anchor_lang::prelude::AccountInfo<'_>;
                                                                let mut _1319: &anchor_lang::error::ErrorCode;
                                                                let mut _1320: &anchor_lang::error::ErrorCode;
                                                                scope 53 {
                                                                    debug space => _229;
                                                                    let _282: u64;
                                                                    scope 75 {
                                                                        debug lamports => _282;
                                                                        let _285: anchor_lang::system_program::CreateAccount<'_>;
                                                                        scope 76 {
                                                                            debug cpi_accounts => _285;
                                                                            let _290: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
                                                                            scope 77 {
                                                                                debug cpi_context => _290;
                                                                                let _333: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                let _336: ();
                                                                                scope 78 {
                                                                                    debug residual => _333;
                                                                                    scope 79 {
                                                                                    }
                                                                                }
                                                                                scope 80 {
                                                                                    debug val => _336;
                                                                                    scope 81 {
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                scope 54 {
                                                                    debug mint_info => _230;
                                                                    let _236: std::cell::Ref<'_, &mut [u8]>;
                                                                    let _241: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                    let _244: std::cell::Ref<'_, &mut [u8]>;
                                                                    scope 55 {
                                                                        debug mint_data => _236;
                                                                        let _245: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
                                                                        let _253: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                        let _256: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
                                                                        scope 60 {
                                                                            debug mint_state => _245;
                                                                            let _257: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                            let _262: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                            let _265: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                            scope 65 {
                                                                                debug mint_extensions => _257;
                                                                                let _266: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                scope 70 {
                                                                                    debug required_extensions => _266;
                                                                                    let _278: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                    let _281: usize;
                                                                                    scope 71 {
                                                                                        debug residual => _278;
                                                                                        scope 72 {
                                                                                        }
                                                                                    }
                                                                                    scope 73 {
                                                                                        debug val => _281;
                                                                                        scope 74 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 66 {
                                                                                debug residual => _262;
                                                                                scope 67 {
                                                                                }
                                                                            }
                                                                            scope 68 {
                                                                                debug val => _265;
                                                                                scope 69 {
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 61 {
                                                                            debug residual => _253;
                                                                            scope 62 {
                                                                            }
                                                                        }
                                                                        scope 63 {
                                                                            debug val => _256;
                                                                            scope 64 {
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 56 {
                                                                        debug residual => _241;
                                                                        scope 57 {
                                                                        }
                                                                    }
                                                                    scope 58 {
                                                                        debug val => _244;
                                                                        scope 59 {
                                                                        }
                                                                    }
                                                                }
                                                                scope 82 {
                                                                    debug required_lamports => _366;
                                                                    let _427: anchor_lang::system_program::Transfer<'_>;
                                                                    let _446: anchor_lang::system_program::Allocate<'_>;
                                                                    scope 104 {
                                                                        debug cpi_accounts => _427;
                                                                        let _432: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
                                                                        scope 105 {
                                                                            debug cpi_context => _432;
                                                                            let _442: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                            let _445: ();
                                                                            scope 106 {
                                                                                debug residual => _442;
                                                                                scope 107 {
                                                                                }
                                                                            }
                                                                            scope 108 {
                                                                                debug val => _445;
                                                                                scope 109 {
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 110 {
                                                                        debug cpi_accounts => _446;
                                                                        let _449: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
                                                                        scope 111 {
                                                                            debug cpi_context => _449;
                                                                            let _484: anchor_lang::prelude::AccountInfo<'_>;
                                                                            let _537: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                            let _540: ();
                                                                            let _541: anchor_lang::system_program::Assign<'_>;
                                                                            scope 112 {
                                                                                debug mint_info => _484;
                                                                                let _490: std::cell::Ref<'_, &mut [u8]>;
                                                                                let _495: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                let _498: std::cell::Ref<'_, &mut [u8]>;
                                                                                scope 113 {
                                                                                    debug mint_data => _490;
                                                                                    let _499: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
                                                                                    let _507: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                    let _510: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
                                                                                    scope 118 {
                                                                                        debug mint_state => _499;
                                                                                        let _511: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                        let _516: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                        let _519: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                        scope 123 {
                                                                                            debug mint_extensions => _511;
                                                                                            let _520: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                            scope 128 {
                                                                                                debug required_extensions => _520;
                                                                                                let _532: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                let _535: usize;
                                                                                                scope 129 {
                                                                                                    debug residual => _532;
                                                                                                    scope 130 {
                                                                                                    }
                                                                                                }
                                                                                                scope 131 {
                                                                                                    debug val => _535;
                                                                                                    scope 132 {
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 124 {
                                                                                            debug residual => _516;
                                                                                            scope 125 {
                                                                                            }
                                                                                        }
                                                                                        scope 126 {
                                                                                            debug val => _519;
                                                                                            scope 127 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    scope 119 {
                                                                                        debug residual => _507;
                                                                                        scope 120 {
                                                                                        }
                                                                                    }
                                                                                    scope 121 {
                                                                                        debug val => _510;
                                                                                        scope 122 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                                scope 114 {
                                                                                    debug residual => _495;
                                                                                    scope 115 {
                                                                                    }
                                                                                }
                                                                                scope 116 {
                                                                                    debug val => _498;
                                                                                    scope 117 {
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 133 {
                                                                                debug residual => _537;
                                                                                scope 134 {
                                                                                }
                                                                            }
                                                                            scope 135 {
                                                                                debug val => _540;
                                                                                scope 136 {
                                                                                }
                                                                            }
                                                                            scope 137 {
                                                                                debug cpi_accounts => _541;
                                                                                let _544: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
                                                                                scope 138 {
                                                                                    debug cpi_context => _544;
                                                                                    let _584: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                    let _587: ();
                                                                                    scope 139 {
                                                                                        debug residual => _584;
                                                                                        scope 140 {
                                                                                        }
                                                                                    }
                                                                                    scope 141 {
                                                                                        debug val => _587;
                                                                                        scope 142 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                scope 83 {
                                                                    debug mint_info => _371;
                                                                    let _377: std::cell::Ref<'_, &mut [u8]>;
                                                                    let _382: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                    let _385: std::cell::Ref<'_, &mut [u8]>;
                                                                    scope 84 {
                                                                        debug mint_data => _377;
                                                                        let _386: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
                                                                        let _394: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                        let _397: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
                                                                        scope 89 {
                                                                            debug mint_state => _386;
                                                                            let _398: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                            let _403: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                            let _406: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                            scope 94 {
                                                                                debug mint_extensions => _398;
                                                                                let _407: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                scope 99 {
                                                                                    debug required_extensions => _407;
                                                                                    let _419: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                    let _422: usize;
                                                                                    scope 100 {
                                                                                        debug residual => _419;
                                                                                        scope 101 {
                                                                                        }
                                                                                    }
                                                                                    scope 102 {
                                                                                        debug val => _422;
                                                                                        scope 103 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 95 {
                                                                                debug residual => _403;
                                                                                scope 96 {
                                                                                }
                                                                            }
                                                                            scope 97 {
                                                                                debug val => _406;
                                                                                scope 98 {
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 90 {
                                                                            debug residual => _394;
                                                                            scope 91 {
                                                                            }
                                                                        }
                                                                        scope 92 {
                                                                            debug val => _397;
                                                                            scope 93 {
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 85 {
                                                                        debug residual => _382;
                                                                        scope 86 {
                                                                        }
                                                                    }
                                                                    scope 87 {
                                                                        debug val => _385;
                                                                        scope 88 {
                                                                        }
                                                                    }
                                                                }
                                                                scope 143 {
                                                                    debug cpi_program => _588;
                                                                    let _590: anchor_spl::token_2022::InitializeAccount3<'_>;
                                                                    scope 144 {
                                                                        debug accounts => _590;
                                                                        let _597: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_spl::token_2022::InitializeAccount3<'_>>;
                                                                        scope 145 {
                                                                            debug cpi_ctx => _597;
                                                                            let _605: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                            let _608: ();
                                                                            scope 146 {
                                                                                debug residual => _605;
                                                                                scope 147 {
                                                                                }
                                                                            }
                                                                            scope 148 {
                                                                                debug val => _608;
                                                                                scope 149 {
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            scope 150 {
                                                                debug pa => _609;
                                                            }
                                                            scope 151 {
                                                                debug val => _615;
                                                            }
                                                            scope 152 {
                                                                debug e => _616;
                                                            }
                                                        }
                                                    }
                                                }
                                                scope 45 {
                                                    debug residual => _175;
                                                    scope 46 {
                                                    }
                                                }
                                                scope 47 {
                                                    debug val => _178;
                                                    scope 48 {
                                                    }
                                                }
                                            }
                                            scope 40 {
                                                debug residual => _167;
                                                scope 41 {
                                                }
                                            }
                                            scope 42 {
                                                debug val => _170;
                                                scope 43 {
                                                }
                                            }
                                        }
                                        scope 35 {
                                            debug residual => _152;
                                            scope 36 {
                                            }
                                        }
                                        scope 37 {
                                            debug val => _155;
                                            scope 38 {
                                            }
                                        }
                                    }
                                    scope 30 {
                                        debug residual => _137;
                                        scope 31 {
                                        }
                                    }
                                    scope 32 {
                                        debug val => _140;
                                        scope 33 {
                                        }
                                    }
                                }
                                scope 25 {
                                    debug residual => _122;
                                    scope 26 {
                                    }
                                }
                                scope 27 {
                                    debug val => _125;
                                    scope 28 {
                                    }
                                }
                            }
                            scope 20 {
                                debug residual => _107;
                                scope 21 {
                                }
                            }
                            scope 22 {
                                debug val => _110;
                                scope 23 {
                                }
                            }
                        }
                    }
                    scope 14 {
                        debug residual => _77;
                        scope 15 {
                        }
                    }
                    scope 16 {
                        debug val => _80;
                        scope 17 {
                        }
                    }
                }
            }
            scope 8 {
                debug residual => _47;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _50;
                scope 11 {
                }
            }
        }
    }
    scope 2 {
        debug residual => _17;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _20;
        scope 5 {
        }
    }

    bb0: {
        _1388 = const false;
        _1386 = const false;
        _1384 = const false;
        _1385 = const false;
        _1383 = const false;
        _1381 = const false;
        _1380 = const false;
        _1378 = const false;
        _1379 = const false;
        _1376 = const false;
        _1374 = const false;
        _1375 = const false;
        _1373 = const false;
        _1370 = const false;
        _1369 = const false;
        _1368 = const false;
        _1366 = const false;
        _1365 = const false;
        _1363 = const false;
        _1364 = const false;
        _1362 = const false;
        _1361 = const false;
        _1360 = const false;
        _1359 = const false;
        _1358 = const false;
        _1356 = const false;
        _1357 = const false;
        _1355 = const false;
        _1354 = const false;
        _1351 = const false;
        _1350 = const false;
        _1345 = const false;
        _1387 = const false;
        _1382 = const false;
        _1377 = const false;
        _1372 = const false;
        _1371 = const false;
        _1367 = const false;
        _1353 = const false;
        _1352 = const false;
        _1349 = const false;
        _1348 = const false;
        _1347 = const false;
        _1346 = const false;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_1);
        StorageLive(_11);
        _11 = &mut (*_2);
        StorageLive(_12);
        _12 = &(*_3);
        StorageLive(_13);
        _13 = &mut (*_4);
        StorageLive(_14);
        _14 = &mut (*_5);
        _9 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, InitVaultBumps>>::try_accounts(move _10, move _11, move _12, move _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_15);
        _15 = {closure@programs\kvault\src\handlers\handler_init_vault.rs:78:10: 78:18};
        _8 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_init_vault.rs:78:10: 78:18}>(move _9, move _15) -> [return: bb2, unwind: bb731];
    }

    bb2: {
        StorageDead(_15);
        StorageDead(_9);
        _7 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _8) -> [return: bb3, unwind: bb731];
    }

    bb3: {
        StorageDead(_8);
        _16 = discriminant(_7);
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_20);
        _20 = move ((_7 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _6 = move _20;
        StorageDead(_20);
        _1389 = discriminant(_7);
        StorageDead(_7);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _1322 = deref_copy (*_2);
        _23 = &(*_1322);
        _22 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::is_empty(move _23) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_17);
        _17 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _19) -> [return: bb7, unwind: bb835];
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_17);
        _1553 = discriminant(_7);
        StorageDead(_7);
        goto -> bb684;
    }

    bb8: {
        switchInt(move _22) -> [0: bb11, otherwise: bb9];
    }

    bb9: {
        StorageDead(_23);
        StorageLive(_25);
        StorageLive(_26);
        _26 = AccountNotEnoughKeys;
        _25 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _26) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_26);
        _0 = std::result::Result::<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error>::Err(move _25);
        StorageDead(_25);
        StorageDead(_22);
        StorageDead(_21);
        goto -> bb684;
    }

    bb11: {
        StorageDead(_23);
        _21 = const ();
        StorageDead(_22);
        StorageDead(_21);
        StorageLive(_27);
        StorageLive(_28);
        _28 = const 0_usize;
        _1323 = deref_copy (*_2);
        _29 = Len((*_1323));
        _30 = Lt(_28, _29);
        assert(move _30, "index out of bounds: the length is {} but the index is {}", move _29, _28) -> [success: bb12, unwind continue];
    }

    bb12: {
        _1324 = deref_copy (*_2);
        _27 = &(*_1324)[_28];
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _1325 = deref_copy (*_2);
        _34 = &(*_1325);
        StorageLive(_35);
        _35 = RangeFrom::<usize> { start: const 1_usize };
        _33 = <[anchor_lang::prelude::AccountInfo<'_>] as Index<RangeFrom<usize>>>::index(move _34, move _35) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_35);
        StorageDead(_34);
        _32 = &(*_33);
        _31 = &(*_32);
        (*_2) = move _31;
        StorageDead(_31);
        StorageDead(_33);
        StorageDead(_32);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &(*_1);
        StorageLive(_41);
        _41 = &mut (*_2);
        StorageLive(_42);
        _42 = &(*_3);
        StorageLive(_43);
        _43 = &mut (*_4);
        StorageLive(_44);
        _44 = &mut (*_5);
        _39 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, InitVaultBumps>>::try_accounts(move _40, move _41, move _42, move _43, move _44) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_45);
        _45 = {closure@programs\kvault\src\handlers\handler_init_vault.rs:78:10: 78:18};
        _38 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_init_vault.rs:78:10: 78:18}>(move _39, move _45) -> [return: bb15, unwind: bb731];
    }

    bb15: {
        StorageDead(_45);
        StorageDead(_39);
        _37 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _38) -> [return: bb16, unwind: bb731];
    }

    bb16: {
        StorageDead(_38);
        _46 = discriminant(_37);
        switchInt(move _46) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_50);
        _50 = move ((_37 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _36 = move _50;
        StorageDead(_50);
        _1391 = discriminant(_37);
        StorageDead(_37);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _1326 = deref_copy (*_2);
        _53 = &(*_1326);
        _52 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::is_empty(move _53) -> [return: bb20, unwind: bb730];
    }

    bb18: {
        StorageLive(_47);
        _47 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_49);
        _49 = move _47;
        _0 = <std::result::Result<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _49) -> [return: bb19, unwind: bb834];
    }

    bb19: {
        StorageDead(_49);
        StorageDead(_47);
        _1551 = discriminant(_37);
        StorageDead(_37);
        goto -> bb683;
    }

    bb20: {
        switchInt(move _52) -> [0: bb23, otherwise: bb21];
    }

    bb21: {
        StorageDead(_53);
        StorageLive(_55);
        StorageLive(_56);
        _56 = AccountNotEnoughKeys;
        _55 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _56) -> [return: bb22, unwind: bb730];
    }

    bb22: {
        StorageDead(_56);
        _0 = std::result::Result::<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error>::Err(move _55);
        StorageDead(_55);
        StorageDead(_52);
        StorageDead(_51);
        goto -> bb682;
    }

    bb23: {
        StorageDead(_53);
        _51 = const ();
        StorageDead(_52);
        StorageDead(_51);
        StorageLive(_57);
        StorageLive(_58);
        _58 = const 0_usize;
        _1327 = deref_copy (*_2);
        _59 = Len((*_1327));
        _60 = Lt(_58, _59);
        assert(move _60, "index out of bounds: the length is {} but the index is {}", move _59, _58) -> [success: bb24, unwind: bb730];
    }

    bb24: {
        _1328 = deref_copy (*_2);
        _57 = &(*_1328)[_58];
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _1329 = deref_copy (*_2);
        _64 = &(*_1329);
        StorageLive(_65);
        _65 = RangeFrom::<usize> { start: const 1_usize };
        _63 = <[anchor_lang::prelude::AccountInfo<'_>] as Index<RangeFrom<usize>>>::index(move _64, move _65) -> [return: bb25, unwind: bb730];
    }

    bb25: {
        StorageDead(_65);
        StorageDead(_64);
        _62 = &(*_63);
        _61 = &(*_62);
        (*_2) = move _61;
        StorageDead(_61);
        StorageDead(_63);
        StorageDead(_62);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &(*_1);
        StorageLive(_71);
        _71 = &mut (*_2);
        StorageLive(_72);
        _72 = &(*_3);
        StorageLive(_73);
        _73 = &mut (*_4);
        StorageLive(_74);
        _74 = &mut (*_5);
        _69 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>> as anchor_lang::Accounts<'_, InitVaultBumps>>::try_accounts(move _70, move _71, move _72, move _73, move _74) -> [return: bb26, unwind: bb730];
    }

    bb26: {
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_75);
        _75 = {closure@programs\kvault\src\handlers\handler_init_vault.rs:78:10: 78:18};
        _68 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_init_vault.rs:78:10: 78:18}>(move _69, move _75) -> [return: bb27, unwind: bb730];
    }

    bb27: {
        StorageDead(_75);
        StorageDead(_69);
        _67 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error> as Try>::branch(move _68) -> [return: bb28, unwind: bb730];
    }

    bb28: {
        StorageDead(_68);
        _76 = discriminant(_67);
        switchInt(move _76) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_80);
        _80 = move ((_67 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _66 = move _80;
        StorageDead(_80);
        _1393 = discriminant(_67);
        StorageDead(_67);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _1330 = deref_copy (*_2);
        _83 = &(*_1330);
        _82 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::is_empty(move _83) -> [return: bb32, unwind: bb729];
    }

    bb30: {
        StorageLive(_77);
        _77 = move ((_67 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_79);
        _79 = move _77;
        _0 = <std::result::Result<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _79) -> [return: bb31, unwind: bb833];
    }

    bb31: {
        StorageDead(_79);
        StorageDead(_77);
        _1549 = discriminant(_67);
        StorageDead(_67);
        goto -> bb681;
    }

    bb32: {
        switchInt(move _82) -> [0: bb35, otherwise: bb33];
    }

    bb33: {
        StorageDead(_83);
        StorageLive(_85);
        StorageLive(_86);
        _86 = AccountNotEnoughKeys;
        _85 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _86) -> [return: bb34, unwind: bb729];
    }

    bb34: {
        StorageDead(_86);
        _0 = std::result::Result::<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error>::Err(move _85);
        StorageDead(_85);
        StorageDead(_82);
        StorageDead(_81);
        goto -> bb680;
    }

    bb35: {
        StorageDead(_83);
        _81 = const ();
        StorageDead(_82);
        StorageDead(_81);
        StorageLive(_87);
        StorageLive(_88);
        _88 = const 0_usize;
        _1331 = deref_copy (*_2);
        _89 = Len((*_1331));
        _90 = Lt(_88, _89);
        assert(move _90, "index out of bounds: the length is {} but the index is {}", move _89, _88) -> [success: bb36, unwind: bb729];
    }

    bb36: {
        _1332 = deref_copy (*_2);
        _87 = &(*_1332)[_88];
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _1333 = deref_copy (*_2);
        _94 = &(*_1333);
        StorageLive(_95);
        _95 = RangeFrom::<usize> { start: const 1_usize };
        _93 = <[anchor_lang::prelude::AccountInfo<'_>] as Index<RangeFrom<usize>>>::index(move _94, move _95) -> [return: bb37, unwind: bb729];
    }

    bb37: {
        StorageDead(_95);
        StorageDead(_94);
        _92 = &(*_93);
        _91 = &(*_92);
        (*_2) = move _91;
        StorageDead(_91);
        StorageDead(_93);
        StorageDead(_92);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = &(*_1);
        StorageLive(_101);
        _101 = &mut (*_2);
        StorageLive(_102);
        _102 = &(*_3);
        StorageLive(_103);
        _103 = &mut (*_4);
        StorageLive(_104);
        _104 = &mut (*_5);
        _99 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, InitVaultBumps>>::try_accounts(move _100, move _101, move _102, move _103, move _104) -> [return: bb38, unwind: bb729];
    }

    bb38: {
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_100);
        StorageLive(_105);
        _105 = {closure@programs\kvault\src\handlers\handler_init_vault.rs:78:10: 78:18};
        _98 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_init_vault.rs:78:10: 78:18}>(move _99, move _105) -> [return: bb39, unwind: bb729];
    }

    bb39: {
        StorageDead(_105);
        StorageDead(_99);
        _97 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _98) -> [return: bb40, unwind: bb729];
    }

    bb40: {
        StorageDead(_98);
        _106 = discriminant(_97);
        switchInt(move _106) -> [0: bb41, 1: bb42, otherwise: bb5];
    }

    bb41: {
        StorageLive(_110);
        _110 = move ((_97 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _96 = move _110;
        StorageDead(_110);
        _1395 = discriminant(_97);
        StorageDead(_97);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        _115 = &(*_1);
        StorageLive(_116);
        _116 = &mut (*_2);
        StorageLive(_117);
        _117 = &(*_3);
        StorageLive(_118);
        _118 = &mut (*_4);
        StorageLive(_119);
        _119 = &mut (*_5);
        _114 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::Accounts<'_, InitVaultBumps>>::try_accounts(move _115, move _116, move _117, move _118, move _119) -> [return: bb44, unwind: bb728];
    }

    bb42: {
        StorageLive(_107);
        _107 = move ((_97 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_109);
        _109 = move _107;
        _0 = <std::result::Result<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _109) -> [return: bb43, unwind: bb832];
    }

    bb43: {
        StorageDead(_109);
        StorageDead(_107);
        _1547 = discriminant(_97);
        StorageDead(_97);
        goto -> bb679;
    }

    bb44: {
        StorageDead(_119);
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_115);
        StorageLive(_120);
        _120 = {closure@programs\kvault\src\handlers\handler_init_vault.rs:78:10: 78:18};
        _113 = std::result::Result::<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_init_vault.rs:78:10: 78:18}>(move _114, move _120) -> [return: bb45, unwind: bb728];
    }

    bb45: {
        StorageDead(_120);
        StorageDead(_114);
        _112 = <std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error> as Try>::branch(move _113) -> [return: bb46, unwind: bb728];
    }

    bb46: {
        StorageDead(_113);
        _121 = discriminant(_112);
        switchInt(move _121) -> [0: bb47, 1: bb48, otherwise: bb5];
    }

    bb47: {
        StorageLive(_125);
        _125 = move ((_112 as Continue).0: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>);
        _111 = move _125;
        StorageDead(_125);
        _1397 = discriminant(_112);
        StorageDead(_112);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _130 = &(*_1);
        StorageLive(_131);
        _131 = &mut (*_2);
        StorageLive(_132);
        _132 = &(*_3);
        StorageLive(_133);
        _133 = &mut (*_4);
        StorageLive(_134);
        _134 = &mut (*_5);
        _129 = <anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent> as anchor_lang::Accounts<'_, InitVaultBumps>>::try_accounts(move _130, move _131, move _132, move _133, move _134) -> [return: bb50, unwind: bb728];
    }

    bb48: {
        StorageLive(_122);
        _122 = move ((_112 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_124);
        _124 = move _122;
        _0 = <std::result::Result<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _124) -> [return: bb49, unwind: bb831];
    }

    bb49: {
        StorageDead(_124);
        StorageDead(_122);
        _1545 = discriminant(_112);
        StorageDead(_112);
        goto -> bb678;
    }

    bb50: {
        StorageDead(_134);
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_131);
        StorageDead(_130);
        StorageLive(_135);
        _135 = {closure@programs\kvault\src\handlers\handler_init_vault.rs:78:10: 78:18};
        _128 = std::result::Result::<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_init_vault.rs:78:10: 78:18}>(move _129, move _135) -> [return: bb51, unwind: bb728];
    }

    bb51: {
        StorageDead(_135);
        StorageDead(_129);
        _127 = <std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error> as Try>::branch(move _128) -> [return: bb52, unwind: bb728];
    }

    bb52: {
        StorageDead(_128);
        _136 = discriminant(_127);
        switchInt(move _136) -> [0: bb53, 1: bb54, otherwise: bb5];
    }

    bb53: {
        StorageLive(_140);
        _140 = move ((_127 as Continue).0: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>);
        _126 = move _140;
        StorageDead(_140);
        _1399 = discriminant(_127);
        StorageDead(_127);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        _145 = &(*_1);
        StorageLive(_146);
        _146 = &mut (*_2);
        StorageLive(_147);
        _147 = &(*_3);
        StorageLive(_148);
        _148 = &mut (*_4);
        StorageLive(_149);
        _149 = &mut (*_5);
        _144 = <anchor_lang::prelude::Interface<'_, TokenInterface> as anchor_lang::Accounts<'_, InitVaultBumps>>::try_accounts(move _145, move _146, move _147, move _148, move _149) -> [return: bb56, unwind: bb728];
    }

    bb54: {
        StorageLive(_137);
        _137 = move ((_127 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_139);
        _139 = move _137;
        _0 = <std::result::Result<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _139) -> [return: bb55, unwind: bb830];
    }

    bb55: {
        StorageDead(_139);
        StorageDead(_137);
        _1543 = discriminant(_127);
        StorageDead(_127);
        goto -> bb677;
    }

    bb56: {
        StorageDead(_149);
        StorageDead(_148);
        StorageDead(_147);
        StorageDead(_146);
        StorageDead(_145);
        StorageLive(_150);
        _150 = {closure@programs\kvault\src\handlers\handler_init_vault.rs:78:10: 78:18};
        _143 = std::result::Result::<anchor_lang::prelude::Interface<'_, TokenInterface>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_init_vault.rs:78:10: 78:18}>(move _144, move _150) -> [return: bb57, unwind: bb728];
    }

    bb57: {
        StorageDead(_150);
        StorageDead(_144);
        _142 = <std::result::Result<anchor_lang::prelude::Interface<'_, TokenInterface>, anchor_lang::error::Error> as Try>::branch(move _143) -> [return: bb58, unwind: bb728];
    }

    bb58: {
        StorageDead(_143);
        _151 = discriminant(_142);
        switchInt(move _151) -> [0: bb59, 1: bb60, otherwise: bb5];
    }

    bb59: {
        StorageLive(_155);
        _155 = move ((_142 as Continue).0: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _141 = move _155;
        StorageDead(_155);
        _1401 = discriminant(_142);
        StorageDead(_142);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        _160 = &(*_1);
        StorageLive(_161);
        _161 = &mut (*_2);
        StorageLive(_162);
        _162 = &(*_3);
        StorageLive(_163);
        _163 = &mut (*_4);
        StorageLive(_164);
        _164 = &mut (*_5);
        _159 = <anchor_lang::prelude::Program<'_, Token> as anchor_lang::Accounts<'_, InitVaultBumps>>::try_accounts(move _160, move _161, move _162, move _163, move _164) -> [return: bb62, unwind: bb728];
    }

    bb60: {
        StorageLive(_152);
        _152 = move ((_142 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_154);
        _154 = move _152;
        _0 = <std::result::Result<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _154) -> [return: bb61, unwind: bb829];
    }

    bb61: {
        StorageDead(_154);
        StorageDead(_152);
        _1541 = discriminant(_142);
        StorageDead(_142);
        goto -> bb676;
    }

    bb62: {
        StorageDead(_164);
        StorageDead(_163);
        StorageDead(_162);
        StorageDead(_161);
        StorageDead(_160);
        StorageLive(_165);
        _165 = {closure@programs\kvault\src\handlers\handler_init_vault.rs:78:10: 78:18};
        _158 = std::result::Result::<anchor_lang::prelude::Program<'_, Token>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs\kvault\src\handlers\handler_init_vault.rs:78:10: 78:18}>(move _159, move _165) -> [return: bb63, unwind: bb728];
    }

    bb63: {
        StorageDead(_165);
        StorageDead(_159);
        _157 = <std::result::Result<anchor_lang::prelude::Program<'_, Token>, anchor_lang::error::Error> as Try>::branch(move _158) -> [return: bb64, unwind: bb728];
    }

    bb64: {
        StorageDead(_158);
        _166 = discriminant(_157);
        switchInt(move _166) -> [0: bb65, 1: bb66, otherwise: bb5];
    }

    bb65: {
        StorageLive(_170);
        _170 = move ((_157 as Continue).0: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>);
        _156 = move _170;
        StorageDead(_170);
        _1403 = discriminant(_157);
        StorageDead(_157);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        _173 = <anchor_lang::prelude::Rent as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb68, unwind: bb728];
    }

    bb66: {
        StorageLive(_167);
        _167 = move ((_157 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_169);
        _169 = move _167;
        _0 = <std::result::Result<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _169) -> [return: bb67, unwind: bb828];
    }

    bb67: {
        StorageDead(_169);
        StorageDead(_167);
        _1539 = discriminant(_157);
        StorageDead(_157);
        goto -> bb675;
    }

    bb68: {
        _172 = <std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError> as Try>::branch(move _173) -> [return: bb69, unwind: bb728];
    }

    bb69: {
        StorageDead(_173);
        _174 = discriminant(_172);
        switchInt(move _174) -> [0: bb70, 1: bb71, otherwise: bb5];
    }

    bb70: {
        StorageLive(_178);
        _178 = ((_172 as Continue).0: anchor_lang::prelude::Rent);
        _171 = _178;
        StorageDead(_178);
        _1405 = discriminant(_172);
        StorageDead(_172);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        _188 = const _;
        _187 = &(*_188);
        _186 = move _187 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_187);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        _193 = &(*_27);
        _192 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _193) -> [return: bb73, unwind: bb728];
    }

    bb71: {
        StorageLive(_175);
        _175 = move ((_172 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_177);
        _177 = move _175;
        _0 = <std::result::Result<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _177) -> [return: bb72, unwind: bb827];
    }

    bb72: {
        StorageDead(_177);
        StorageDead(_175);
        _1537 = discriminant(_172);
        StorageDead(_172);
        goto -> bb674;
    }

    bb73: {
        _191 = &_192;
        StorageDead(_193);
        _190 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _191) -> [return: bb74, unwind: bb728];
    }

    bb74: {
        _189 = &(*_190);
        StorageDead(_191);
        _185 = [move _186, move _189];
        StorageDead(_189);
        StorageDead(_186);
        _184 = &_185;
        _183 = &(*_184);
        _182 = move _183 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_183);
        StorageLive(_194);
        _194 = &(*_1);
        _181 = anchor_lang::prelude::Pubkey::find_program_address(move _182, move _194) -> [return: bb75, unwind: bb728];
    }

    bb75: {
        StorageDead(_194);
        StorageDead(_182);
        StorageLive(_179);
        _179 = (_181.0: anchor_lang::prelude::Pubkey);
        StorageLive(_180);
        _180 = (_181.1: u8);
        StorageDead(_192);
        StorageDead(_190);
        StorageDead(_188);
        StorageDead(_185);
        StorageDead(_184);
        StorageDead(_181);
        StorageLive(_195);
        _195 = _180;
        ((*_4).1: u8) = move _195;
        StorageDead(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        _200 = &(*_57);
        _199 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _200) -> [return: bb76, unwind: bb728];
    }

    bb76: {
        _198 = &_199;
        StorageDead(_200);
        StorageLive(_201);
        _201 = &_179;
        _197 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _198, move _201) -> [return: bb77, unwind: bb728];
    }

    bb77: {
        switchInt(move _197) -> [0: bb83, otherwise: bb78];
    }

    bb78: {
        StorageDead(_201);
        StorageDead(_199);
        StorageDead(_198);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        _206 = ConstraintSeeds;
        _205 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _206) -> [return: bb79, unwind: bb728];
    }

    bb79: {
        StorageDead(_206);
        _204 = anchor_lang::error::Error::with_account_name::<&str>(move _205, const "token_vault") -> [return: bb80, unwind: bb728];
    }

    bb80: {
        _1388 = const true;
        StorageDead(_205);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        _209 = &(*_57);
        _208 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _209) -> [return: bb81, unwind: bb826];
    }

    bb81: {
        StorageDead(_209);
        StorageLive(_210);
        _210 = _179;
        _207 = (move _208, move _210);
        StorageDead(_210);
        StorageDead(_208);
        _1388 = const false;
        _203 = anchor_lang::error::Error::with_pubkeys(move _204, move _207) -> [return: bb82, unwind: bb826];
    }

    bb82: {
        StorageDead(_207);
        _1388 = const false;
        StorageDead(_204);
        _0 = std::result::Result::<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error>::Err(move _203);
        StorageDead(_203);
        StorageDead(_197);
        StorageDead(_196);
        goto -> bb673;
    }

    bb83: {
        StorageDead(_201);
        StorageDead(_199);
        StorageDead(_198);
        _196 = const ();
        StorageDead(_197);
        StorageDead(_196);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        _216 = &(*_57);
        _215 = <anchor_lang::prelude::AccountInfo<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _216) -> [return: bb84, unwind: bb728];
    }

    bb84: {
        _214 = &(*_215);
        StorageDead(_216);
        _213 = <anchor_lang::prelude::AccountInfo<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _214) -> [return: bb85, unwind: bb728];
    }

    bb85: {
        StorageDead(_214);
        _212 = ((*_213).3: &anchor_lang::prelude::Pubkey);
        StorageDead(_215);
        StorageDead(_213);
        StorageLive(_217);
        StorageLive(_218);
        _218 = const false;
        switchInt(move _218) -> [0: bb88, otherwise: bb86];
    }

    bb86: {
        StorageLive(_219);
        StorageLive(_220);
        _220 = &_212;
        StorageLive(_221);
        _1321 = const _;
        _221 = &(*_1321);
        _219 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _220, move _221) -> [return: bb87, unwind: bb728];
    }

    bb87: {
        switchInt(move _219) -> [0: bb277, otherwise: bb88];
    }

    bb88: {
        StorageDead(_221);
        StorageDead(_220);
        StorageLive(_224);
        StorageLive(_225);
        _225 = &(*_57);
        _224 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _225) -> [return: bb89, unwind: bb728];
    }

    bb89: {
        StorageDead(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        _228 = _224;
        _227 = Eq(move _228, const 0_u64);
        switchInt(move _227) -> [0: bb142, otherwise: bb90];
    }

    bb90: {
        StorageDead(_228);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        _1596 = (((_66.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _231 = &(*_1596);
        _230 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _231) -> [return: bb91, unwind: bb728];
    }

    bb91: {
        StorageDead(_231);
        StorageLive(_232);
        StorageLive(_233);
        _1334 = deref_copy (_230.3: &anchor_lang::prelude::Pubkey);
        _233 = &(*_1334);
        StorageLive(_234);
        StorageLive(_235);
        _235 = <Token2022 as anchor_lang::Id>::id() -> [return: bb92, unwind: bb727];
    }

    bb92: {
        _234 = &_235;
        _232 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _233, move _234) -> [return: bb93, unwind: bb727];
    }

    bb93: {
        switchInt(move _232) -> [0: bb122, otherwise: bb94];
    }

    bb94: {
        StorageDead(_235);
        StorageDead(_234);
        StorageDead(_233);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        _239 = &_230;
        _238 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _239) -> [return: bb95, unwind: bb727];
    }

    bb95: {
        StorageDead(_239);
        _237 = <std::result::Result<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError> as Try>::branch(move _238) -> [return: bb96, unwind: bb727];
    }

    bb96: {
        StorageDead(_238);
        _240 = discriminant(_237);
        switchInt(move _240) -> [0: bb97, 1: bb98, otherwise: bb5];
    }

    bb97: {
        StorageLive(_244);
        _244 = move ((_237 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _236 = move _244;
        StorageDead(_244);
        _1407 = discriminant(_237);
        StorageDead(_237);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        _251 = &_236;
        _250 = &(*_251);
        _249 = <Ref<'_, &mut [u8]> as Deref>::deref(move _250) -> [return: bb100, unwind: bb726];
    }

    bb98: {
        StorageLive(_241);
        _241 = move ((_237 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_243);
        _243 = move _241;
        _0 = <std::result::Result<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _243) -> [return: bb99, unwind: bb824];
    }

    bb99: {
        StorageDead(_243);
        StorageDead(_241);
        _1535 = discriminant(_237);
        StorageDead(_237);
        goto -> bb665;
    }

    bb100: {
        _1335 = deref_copy (*_249);
        _248 = &(*_1335);
        StorageDead(_250);
        _247 = StateWithExtensions::<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>::unpack(move _248) -> [return: bb101, unwind: bb726];
    }

    bb101: {
        StorageDead(_248);
        _246 = <std::result::Result<StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>, anchor_lang::prelude::ProgramError> as Try>::branch(move _247) -> [return: bb102, unwind: bb726];
    }

    bb102: {
        StorageDead(_247);
        _252 = discriminant(_246);
        switchInt(move _252) -> [0: bb103, 1: bb104, otherwise: bb5];
    }

    bb103: {
        StorageLive(_256);
        _256 = move ((_246 as Continue).0: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>);
        _245 = move _256;
        StorageDead(_256);
        _1409 = discriminant(_246);
        StorageDead(_251);
        StorageDead(_249);
        StorageDead(_246);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        _260 = &_245;
        _259 = <StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint> as BaseStateWithExtensions<anchor_spl::token_2022::spl_token_2022::state::Mint>>::get_extension_types(move _260) -> [return: bb106, unwind: bb726];
    }

    bb104: {
        StorageLive(_253);
        _253 = move ((_246 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_255);
        _255 = move _253;
        _0 = <std::result::Result<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _255) -> [return: bb105, unwind: bb823];
    }

    bb105: {
        StorageDead(_255);
        StorageDead(_253);
        _1533 = discriminant(_246);
        StorageDead(_251);
        StorageDead(_249);
        StorageDead(_246);
        goto -> bb664;
    }

    bb106: {
        StorageDead(_260);
        _258 = <std::result::Result<Vec<ExtensionType>, anchor_lang::prelude::ProgramError> as Try>::branch(move _259) -> [return: bb107, unwind: bb726];
    }

    bb107: {
        StorageDead(_259);
        _261 = discriminant(_258);
        switchInt(move _261) -> [0: bb108, 1: bb109, otherwise: bb5];
    }

    bb108: {
        StorageLive(_265);
        _265 = move ((_258 as Continue).0: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>);
        _257 = move _265;
        StorageDead(_265);
        _1411 = discriminant(_258);
        StorageDead(_258);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        _270 = &_257;
        _269 = &(*_270);
        _268 = <Vec<ExtensionType> as Deref>::deref(move _269) -> [return: bb111, unwind: bb725];
    }

    bb109: {
        StorageLive(_262);
        _262 = move ((_258 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_264);
        _264 = move _262;
        _0 = <std::result::Result<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _264) -> [return: bb110, unwind: bb822];
    }

    bb110: {
        StorageDead(_264);
        StorageDead(_262);
        _1531 = discriminant(_258);
        StorageDead(_258);
        StorageDead(_257);
        goto -> bb664;
    }

    bb111: {
        _267 = &(*_268);
        StorageDead(_269);
        _266 = ExtensionType::get_required_init_account_extensions(move _267) -> [return: bb112, unwind: bb725];
    }

    bb112: {
        StorageDead(_267);
        StorageDead(_270);
        StorageDead(_268);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        _276 = &_266;
        _275 = &(*_276);
        _274 = <Vec<ExtensionType> as Deref>::deref(move _275) -> [return: bb113, unwind: bb724];
    }

    bb113: {
        _273 = &(*_274);
        StorageDead(_275);
        _272 = ExtensionType::try_calculate_account_len::<anchor_spl::token_2022::spl_token_2022::state::Account>(move _273) -> [return: bb114, unwind: bb724];
    }

    bb114: {
        StorageDead(_273);
        _271 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _272) -> [return: bb115, unwind: bb724];
    }

    bb115: {
        _1387 = const true;
        StorageDead(_272);
        _277 = discriminant(_271);
        switchInt(move _277) -> [0: bb116, 1: bb117, otherwise: bb5];
    }

    bb116: {
        StorageLive(_281);
        _281 = ((_271 as Continue).0: usize);
        _229 = _281;
        StorageDead(_281);
        drop(_266) -> [return: bb119, unwind: bb722];
    }

    bb117: {
        StorageLive(_278);
        _278 = move ((_271 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_280);
        _280 = move _278;
        _0 = <std::result::Result<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _280) -> [return: bb118, unwind: bb721];
    }

    bb118: {
        StorageDead(_280);
        StorageDead(_278);
        drop(_266) -> [return: bb661, unwind: bb722];
    }

    bb119: {
        StorageDead(_266);
        drop(_257) -> [return: bb120, unwind: bb723];
    }

    bb120: {
        StorageDead(_257);
        StorageDead(_245);
        drop(_236) -> [return: bb121, unwind: bb821];
    }

    bb121: {
        StorageDead(_236);
        _1413 = discriminant(_271);
        StorageDead(_276);
        StorageDead(_274);
        _1387 = const false;
        StorageDead(_271);
        goto -> bb123;
    }

    bb122: {
        StorageDead(_235);
        StorageDead(_234);
        StorageDead(_233);
        _229 = const _;
        goto -> bb123;
    }

    bb123: {
        StorageDead(_232);
        drop(_230) -> [return: bb124, unwind: bb728];
    }

    bb124: {
        StorageDead(_230);
        StorageLive(_282);
        StorageLive(_283);
        _283 = &_171;
        StorageLive(_284);
        _284 = _229;
        _282 = anchor_lang::prelude::Rent::minimum_balance(move _283, move _284) -> [return: bb125, unwind: bb728];
    }

    bb125: {
        StorageDead(_284);
        StorageDead(_283);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        _287 = &_6;
        _286 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _287) -> [return: bb126, unwind: bb728];
    }

    bb126: {
        StorageDead(_287);
        StorageLive(_288);
        StorageLive(_289);
        _289 = &(*_57);
        _288 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _289) -> [return: bb127, unwind: bb720];
    }

    bb127: {
        StorageDead(_289);
        _1386 = const true;
        _285 = anchor_lang::system_program::CreateAccount::<'_> { from: move _286, to: move _288 };
        StorageDead(_288);
        StorageDead(_286);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        _292 = &_111;
        _291 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _292) -> [return: bb128, unwind: bb820];
    }

    bb128: {
        StorageDead(_292);
        StorageLive(_293);
        _1386 = const false;
        _293 = move _285;
        _290 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::new(move _291, move _293) -> [return: bb129, unwind: bb820];
    }

    bb129: {
        StorageDead(_293);
        StorageDead(_291);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        StorageLive(_298);
        _1385 = const true;
        _298 = move _290;
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        _310 = const _;
        _309 = &(*_310);
        _308 = move _309 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_309);
        StorageLive(_311);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        _314 = &(*_27);
        _313 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _314) -> [return: bb130, unwind: bb818];
    }

    bb130: {
        _312 = &_313;
        StorageDead(_314);
        _311 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _312) -> [return: bb131, unwind: bb818];
    }

    bb131: {
        StorageDead(_312);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        _320 = _180;
        _319 = [move _320];
        _318 = &_319;
        StorageDead(_320);
        StorageLive(_321);
        _321 = RangeFull;
        _317 = <[u8; 1] as Index<RangeFull>>::index(move _318, move _321) -> [return: bb132, unwind: bb818];
    }

    bb132: {
        StorageDead(_321);
        StorageDead(_318);
        _316 = &(*_317);
        _315 = &(*_316);
        _307 = [move _308, move _311, move _315];
        _306 = &_307;
        StorageDead(_315);
        StorageDead(_311);
        StorageDead(_308);
        StorageLive(_322);
        _322 = RangeFull;
        _305 = <[&[u8]; 3] as Index<RangeFull>>::index(move _306, move _322) -> [return: bb133, unwind: bb818];
    }

    bb133: {
        StorageDead(_322);
        StorageDead(_306);
        _304 = &(*_305);
        _303 = &(*_304);
        _302 = [move _303];
        StorageDead(_303);
        _301 = &_302;
        _300 = &(*_301);
        _299 = move _300 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_300);
        _1385 = const false;
        _297 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::with_signer(move _298, move _299) -> [return: bb134, unwind: bb818];
    }

    bb134: {
        _1384 = const true;
        StorageDead(_299);
        _1385 = const false;
        StorageDead(_298);
        StorageLive(_323);
        _323 = _282;
        StorageLive(_324);
        StorageLive(_325);
        _325 = _229;
        _324 = move _325 as u64 (IntToInt);
        StorageDead(_325);
        StorageLive(_326);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        _331 = &_141;
        _330 = <anchor_lang::prelude::Interface<'_, TokenInterface> as Deref>::deref(move _331) -> [return: bb135, unwind: bb816];
    }

    bb135: {
        _329 = &(*_330);
        StorageDead(_331);
        _328 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _329) -> [return: bb136, unwind: bb816];
    }

    bb136: {
        StorageDead(_329);
        _327 = &_328;
        _326 = &(*_327);
        _1384 = const false;
        _296 = anchor_lang::system_program::create_account(move _297, move _323, move _324, move _326) -> [return: bb137, unwind: bb816];
    }

    bb137: {
        StorageDead(_326);
        StorageDead(_324);
        StorageDead(_323);
        _1384 = const false;
        StorageDead(_297);
        _295 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _296) -> [return: bb138, unwind: bb820];
    }

    bb138: {
        StorageDead(_296);
        _332 = discriminant(_295);
        switchInt(move _332) -> [0: bb139, 1: bb140, otherwise: bb5];
    }

    bb139: {
        StorageLive(_336);
        _336 = ((_295 as Continue).0: ());
        _294 = _336;
        StorageDead(_336);
        _1415 = discriminant(_295);
        StorageDead(_330);
        StorageDead(_328);
        StorageDead(_327);
        StorageDead(_319);
        StorageDead(_317);
        StorageDead(_316);
        StorageDead(_313);
        StorageDead(_310);
        StorageDead(_307);
        StorageDead(_305);
        StorageDead(_304);
        StorageDead(_302);
        StorageDead(_301);
        StorageDead(_295);
        StorageDead(_294);
        _226 = const ();
        StorageDead(_290);
        _1386 = const false;
        StorageDead(_285);
        StorageDead(_282);
        StorageDead(_229);
        goto -> bb266;
    }

    bb140: {
        StorageLive(_333);
        _333 = move ((_295 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_335);
        _335 = move _333;
        _0 = <std::result::Result<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _335) -> [return: bb141, unwind: bb814];
    }

    bb141: {
        StorageDead(_335);
        StorageDead(_333);
        _1527 = discriminant(_295);
        StorageDead(_330);
        StorageDead(_328);
        StorageDead(_327);
        StorageDead(_319);
        StorageDead(_317);
        StorageDead(_316);
        StorageDead(_313);
        StorageDead(_310);
        StorageDead(_307);
        StorageDead(_305);
        StorageDead(_304);
        StorageDead(_302);
        StorageDead(_301);
        StorageDead(_295);
        StorageDead(_294);
        StorageDead(_290);
        _1386 = const false;
        StorageDead(_285);
        StorageDead(_282);
        goto -> bb668;
    }

    bb142: {
        StorageDead(_228);
        StorageLive(_337);
        StorageLive(_338);
        StorageLive(_339);
        StorageLive(_340);
        StorageLive(_341);
        _341 = &_6;
        _340 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _341) -> [return: bb143, unwind: bb728];
    }

    bb143: {
        _339 = &_340;
        StorageDead(_341);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        _344 = &(*_57);
        _343 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _344) -> [return: bb144, unwind: bb728];
    }

    bb144: {
        _342 = &_343;
        StorageDead(_344);
        _338 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _339, move _342) -> [return: bb145, unwind: bb728];
    }

    bb145: {
        switchInt(move _338) -> [0: bb154, otherwise: bb146];
    }

    bb146: {
        StorageDead(_343);
        StorageDead(_342);
        StorageDead(_340);
        StorageDead(_339);
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        StorageLive(_349);
        StorageLive(_350);
        _1320 = const _;
        _350 = &(*_1320);
        _349 = anchor_lang::error::ErrorCode::name(move _350) -> [return: bb147, unwind: bb728];
    }

    bb147: {
        StorageDead(_350);
        StorageLive(_352);
        StorageLive(_353);
        _353 = TryingToInitPayerAsProgramAccount;
        _352 = <anchor_lang::error::ErrorCode as Into<u32>>::into(move _353) -> [return: bb148, unwind: bb719];
    }

    bb148: {
        StorageDead(_353);
        StorageLive(_354);
        StorageLive(_355);
        _1319 = const _;
        _355 = &(*_1319);
        _354 = <anchor_lang::error::ErrorCode as ToString>::to_string(move _355) -> [return: bb149, unwind: bb719];
    }

    bb149: {
        StorageDead(_355);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        _359 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\handlers\\handler_init_vault.rs", line: const 78_u32 };
        _358 = anchor_lang::error::ErrorOrigin::Source(move _359);
        StorageDead(_359);
        _357 = Option::<ErrorOrigin>::Some(move _358);
        StorageDead(_358);
        StorageLive(_360);
        _360 = Option::<ComparedValues>::None;
        _348 = anchor_lang::error::AnchorError { error_name: move _349, error_code_number: move _352, error_msg: move _354, error_origin: move _357, compared_values: move _360 };
        StorageDead(_360);
        StorageDead(_357);
        StorageDead(_354);
        StorageDead(_352);
        StorageDead(_349);
        _347 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _348) -> [return: bb150, unwind: bb728];
    }

    bb150: {
        _1383 = const true;
        StorageDead(_348);
        StorageLive(_361);
        StorageLive(_362);
        StorageLive(_363);
        _363 = &_6;
        _362 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _363) -> [return: bb151, unwind: bb813];
    }

    bb151: {
        StorageDead(_363);
        StorageLive(_364);
        StorageLive(_365);
        _365 = &(*_57);
        _364 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _365) -> [return: bb152, unwind: bb813];
    }

    bb152: {
        StorageDead(_365);
        _361 = (move _362, move _364);
        StorageDead(_364);
        StorageDead(_362);
        _1383 = const false;
        _346 = anchor_lang::error::Error::with_pubkeys(move _347, move _361) -> [return: bb153, unwind: bb813];
    }

    bb153: {
        StorageDead(_361);
        _1383 = const false;
        StorageDead(_347);
        _0 = std::result::Result::<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error>::Err(move _346);
        StorageDead(_346);
        StorageDead(_338);
        StorageDead(_337);
        goto -> bb669;
    }

    bb154: {
        StorageDead(_343);
        StorageDead(_342);
        StorageDead(_340);
        StorageDead(_339);
        _337 = const ();
        StorageDead(_338);
        StorageDead(_337);
        StorageLive(_366);
        StorageLive(_367);
        StorageLive(_368);
        StorageLive(_369);
        _369 = &_171;
        StorageLive(_370);
        StorageLive(_371);
        StorageLive(_372);
        _1597 = (((_66.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _372 = &(*_1597);
        _371 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _372) -> [return: bb155, unwind: bb728];
    }

    bb155: {
        StorageDead(_372);
        StorageLive(_373);
        StorageLive(_374);
        _1336 = deref_copy (_371.3: &anchor_lang::prelude::Pubkey);
        _374 = &(*_1336);
        StorageLive(_375);
        StorageLive(_376);
        _376 = <Token2022 as anchor_lang::Id>::id() -> [return: bb156, unwind: bb718];
    }

    bb156: {
        _375 = &_376;
        _373 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _374, move _375) -> [return: bb157, unwind: bb718];
    }

    bb157: {
        switchInt(move _373) -> [0: bb186, otherwise: bb158];
    }

    bb158: {
        StorageDead(_376);
        StorageDead(_375);
        StorageDead(_374);
        StorageLive(_377);
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        _380 = &_371;
        _379 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _380) -> [return: bb159, unwind: bb718];
    }

    bb159: {
        StorageDead(_380);
        _378 = <std::result::Result<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError> as Try>::branch(move _379) -> [return: bb160, unwind: bb718];
    }

    bb160: {
        StorageDead(_379);
        _381 = discriminant(_378);
        switchInt(move _381) -> [0: bb161, 1: bb162, otherwise: bb5];
    }

    bb161: {
        StorageLive(_385);
        _385 = move ((_378 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _377 = move _385;
        StorageDead(_385);
        _1417 = discriminant(_378);
        StorageDead(_378);
        StorageLive(_386);
        StorageLive(_387);
        StorageLive(_388);
        StorageLive(_389);
        StorageLive(_390);
        StorageLive(_391);
        StorageLive(_392);
        _392 = &_377;
        _391 = &(*_392);
        _390 = <Ref<'_, &mut [u8]> as Deref>::deref(move _391) -> [return: bb164, unwind: bb717];
    }

    bb162: {
        StorageLive(_382);
        _382 = move ((_378 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_384);
        _384 = move _382;
        _0 = <std::result::Result<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _384) -> [return: bb163, unwind: bb811];
    }

    bb163: {
        StorageDead(_384);
        StorageDead(_382);
        _1525 = discriminant(_378);
        StorageDead(_378);
        goto -> bb657;
    }

    bb164: {
        _1337 = deref_copy (*_390);
        _389 = &(*_1337);
        StorageDead(_391);
        _388 = StateWithExtensions::<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>::unpack(move _389) -> [return: bb165, unwind: bb717];
    }

    bb165: {
        StorageDead(_389);
        _387 = <std::result::Result<StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>, anchor_lang::prelude::ProgramError> as Try>::branch(move _388) -> [return: bb166, unwind: bb717];
    }

    bb166: {
        StorageDead(_388);
        _393 = discriminant(_387);
        switchInt(move _393) -> [0: bb167, 1: bb168, otherwise: bb5];
    }

    bb167: {
        StorageLive(_397);
        _397 = move ((_387 as Continue).0: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>);
        _386 = move _397;
        StorageDead(_397);
        _1419 = discriminant(_387);
        StorageDead(_392);
        StorageDead(_390);
        StorageDead(_387);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        StorageLive(_401);
        _401 = &_386;
        _400 = <StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint> as BaseStateWithExtensions<anchor_spl::token_2022::spl_token_2022::state::Mint>>::get_extension_types(move _401) -> [return: bb170, unwind: bb717];
    }

    bb168: {
        StorageLive(_394);
        _394 = move ((_387 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_396);
        _396 = move _394;
        _0 = <std::result::Result<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _396) -> [return: bb169, unwind: bb810];
    }

    bb169: {
        StorageDead(_396);
        StorageDead(_394);
        _1523 = discriminant(_387);
        StorageDead(_392);
        StorageDead(_390);
        StorageDead(_387);
        goto -> bb656;
    }

    bb170: {
        StorageDead(_401);
        _399 = <std::result::Result<Vec<ExtensionType>, anchor_lang::prelude::ProgramError> as Try>::branch(move _400) -> [return: bb171, unwind: bb717];
    }

    bb171: {
        StorageDead(_400);
        _402 = discriminant(_399);
        switchInt(move _402) -> [0: bb172, 1: bb173, otherwise: bb5];
    }

    bb172: {
        StorageLive(_406);
        _406 = move ((_399 as Continue).0: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>);
        _398 = move _406;
        StorageDead(_406);
        _1421 = discriminant(_399);
        StorageDead(_399);
        StorageLive(_407);
        StorageLive(_408);
        StorageLive(_409);
        StorageLive(_410);
        StorageLive(_411);
        _411 = &_398;
        _410 = &(*_411);
        _409 = <Vec<ExtensionType> as Deref>::deref(move _410) -> [return: bb175, unwind: bb716];
    }

    bb173: {
        StorageLive(_403);
        _403 = move ((_399 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_405);
        _405 = move _403;
        _0 = <std::result::Result<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _405) -> [return: bb174, unwind: bb809];
    }

    bb174: {
        StorageDead(_405);
        StorageDead(_403);
        _1521 = discriminant(_399);
        StorageDead(_399);
        StorageDead(_398);
        goto -> bb656;
    }

    bb175: {
        _408 = &(*_409);
        StorageDead(_410);
        _407 = ExtensionType::get_required_init_account_extensions(move _408) -> [return: bb176, unwind: bb716];
    }

    bb176: {
        StorageDead(_408);
        StorageDead(_411);
        StorageDead(_409);
        StorageLive(_412);
        StorageLive(_413);
        StorageLive(_414);
        StorageLive(_415);
        StorageLive(_416);
        StorageLive(_417);
        _417 = &_407;
        _416 = &(*_417);
        _415 = <Vec<ExtensionType> as Deref>::deref(move _416) -> [return: bb177, unwind: bb715];
    }

    bb177: {
        _414 = &(*_415);
        StorageDead(_416);
        _413 = ExtensionType::try_calculate_account_len::<anchor_spl::token_2022::spl_token_2022::state::Account>(move _414) -> [return: bb178, unwind: bb715];
    }

    bb178: {
        StorageDead(_414);
        _412 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _413) -> [return: bb179, unwind: bb715];
    }

    bb179: {
        _1382 = const true;
        StorageDead(_413);
        _418 = discriminant(_412);
        switchInt(move _418) -> [0: bb180, 1: bb181, otherwise: bb5];
    }

    bb180: {
        StorageLive(_422);
        _422 = ((_412 as Continue).0: usize);
        _370 = _422;
        StorageDead(_422);
        drop(_407) -> [return: bb183, unwind: bb713];
    }

    bb181: {
        StorageLive(_419);
        _419 = move ((_412 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_421);
        _421 = move _419;
        _0 = <std::result::Result<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _421) -> [return: bb182, unwind: bb712];
    }

    bb182: {
        StorageDead(_421);
        StorageDead(_419);
        drop(_407) -> [return: bb653, unwind: bb713];
    }

    bb183: {
        StorageDead(_407);
        drop(_398) -> [return: bb184, unwind: bb714];
    }

    bb184: {
        StorageDead(_398);
        StorageDead(_386);
        drop(_377) -> [return: bb185, unwind: bb808];
    }

    bb185: {
        StorageDead(_377);
        _1423 = discriminant(_412);
        StorageDead(_417);
        StorageDead(_415);
        _1382 = const false;
        StorageDead(_412);
        goto -> bb187;
    }

    bb186: {
        StorageDead(_376);
        StorageDead(_375);
        StorageDead(_374);
        _370 = const _;
        goto -> bb187;
    }

    bb187: {
        StorageDead(_373);
        drop(_371) -> [return: bb188, unwind: bb728];
    }

    bb188: {
        StorageDead(_371);
        _368 = anchor_lang::prelude::Rent::minimum_balance(move _369, move _370) -> [return: bb189, unwind: bb728];
    }

    bb189: {
        StorageDead(_370);
        StorageDead(_369);
        _367 = <u64 as Ord>::max(move _368, const 1_u64) -> [return: bb190, unwind: bb728];
    }

    bb190: {
        StorageDead(_368);
        StorageLive(_423);
        _423 = _224;
        _366 = core::num::<impl u64>::saturating_sub(move _367, move _423) -> [return: bb191, unwind: bb728];
    }

    bb191: {
        StorageDead(_423);
        StorageDead(_367);
        StorageLive(_424);
        StorageLive(_425);
        StorageLive(_426);
        _426 = _366;
        _425 = Gt(move _426, const 0_u64);
        switchInt(move _425) -> [0: bb202, otherwise: bb192];
    }

    bb192: {
        StorageDead(_426);
        StorageLive(_427);
        StorageLive(_428);
        StorageLive(_429);
        _429 = &_6;
        _428 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _429) -> [return: bb193, unwind: bb728];
    }

    bb193: {
        StorageDead(_429);
        StorageLive(_430);
        StorageLive(_431);
        _431 = &(*_57);
        _430 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _431) -> [return: bb194, unwind: bb711];
    }

    bb194: {
        StorageDead(_431);
        _1381 = const true;
        _427 = anchor_lang::system_program::Transfer::<'_> { from: move _428, to: move _430 };
        StorageDead(_430);
        StorageDead(_428);
        StorageLive(_432);
        StorageLive(_433);
        StorageLive(_434);
        _434 = &_111;
        _433 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _434) -> [return: bb195, unwind: bb807];
    }

    bb195: {
        StorageDead(_434);
        StorageLive(_435);
        _1381 = const false;
        _435 = move _427;
        _432 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>::new(move _433, move _435) -> [return: bb196, unwind: bb807];
    }

    bb196: {
        StorageDead(_435);
        StorageDead(_433);
        StorageLive(_436);
        StorageLive(_437);
        StorageLive(_438);
        StorageLive(_439);
        _439 = move _432;
        StorageLive(_440);
        _440 = _366;
        _438 = anchor_lang::system_program::transfer(move _439, move _440) -> [return: bb197, unwind: bb807];
    }

    bb197: {
        StorageDead(_440);
        StorageDead(_439);
        _437 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _438) -> [return: bb198, unwind: bb807];
    }

    bb198: {
        StorageDead(_438);
        _441 = discriminant(_437);
        switchInt(move _441) -> [0: bb199, 1: bb200, otherwise: bb5];
    }

    bb199: {
        StorageLive(_445);
        _445 = ((_437 as Continue).0: ());
        _436 = _445;
        StorageDead(_445);
        _1425 = discriminant(_437);
        StorageDead(_437);
        StorageDead(_436);
        _424 = const ();
        StorageDead(_432);
        _1381 = const false;
        StorageDead(_427);
        goto -> bb203;
    }

    bb200: {
        StorageLive(_442);
        _442 = move ((_437 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_444);
        _444 = move _442;
        _0 = <std::result::Result<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _444) -> [return: bb201, unwind: bb805];
    }

    bb201: {
        StorageDead(_444);
        StorageDead(_442);
        _1517 = discriminant(_437);
        StorageDead(_437);
        StorageDead(_436);
        StorageDead(_432);
        _1381 = const false;
        StorageDead(_427);
        StorageDead(_425);
        StorageDead(_424);
        goto -> bb660;
    }

    bb202: {
        StorageDead(_426);
        _424 = const ();
        goto -> bb203;
    }

    bb203: {
        StorageDead(_425);
        StorageDead(_424);
        StorageLive(_446);
        StorageLive(_447);
        StorageLive(_448);
        _448 = &(*_57);
        _447 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _448) -> [return: bb204, unwind: bb728];
    }

    bb204: {
        StorageDead(_448);
        _1380 = const true;
        _446 = anchor_lang::system_program::Allocate::<'_> { account_to_allocate: move _447 };
        StorageDead(_447);
        StorageLive(_449);
        StorageLive(_450);
        StorageLive(_451);
        _451 = &_111;
        _450 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _451) -> [return: bb205, unwind: bb804];
    }

    bb205: {
        StorageDead(_451);
        StorageLive(_452);
        _1380 = const false;
        _452 = move _446;
        _449 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::new(move _450, move _452) -> [return: bb206, unwind: bb804];
    }

    bb206: {
        StorageDead(_452);
        StorageDead(_450);
        StorageLive(_453);
        StorageLive(_454);
        StorageLive(_455);
        StorageLive(_456);
        StorageLive(_457);
        _1379 = const true;
        _457 = move _449;
        StorageLive(_458);
        StorageLive(_459);
        StorageLive(_460);
        StorageLive(_461);
        StorageLive(_462);
        StorageLive(_463);
        StorageLive(_464);
        StorageLive(_465);
        StorageLive(_466);
        StorageLive(_467);
        StorageLive(_468);
        StorageLive(_469);
        _469 = const _;
        _468 = &(*_469);
        _467 = move _468 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_468);
        StorageLive(_470);
        StorageLive(_471);
        StorageLive(_472);
        StorageLive(_473);
        _473 = &(*_27);
        _472 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _473) -> [return: bb207, unwind: bb802];
    }

    bb207: {
        _471 = &_472;
        StorageDead(_473);
        _470 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _471) -> [return: bb208, unwind: bb802];
    }

    bb208: {
        StorageDead(_471);
        StorageLive(_474);
        StorageLive(_475);
        StorageLive(_476);
        StorageLive(_477);
        StorageLive(_478);
        StorageLive(_479);
        _479 = _180;
        _478 = [move _479];
        _477 = &_478;
        StorageDead(_479);
        StorageLive(_480);
        _480 = RangeFull;
        _476 = <[u8; 1] as Index<RangeFull>>::index(move _477, move _480) -> [return: bb209, unwind: bb802];
    }

    bb209: {
        StorageDead(_480);
        StorageDead(_477);
        _475 = &(*_476);
        _474 = &(*_475);
        _466 = [move _467, move _470, move _474];
        _465 = &_466;
        StorageDead(_474);
        StorageDead(_470);
        StorageDead(_467);
        StorageLive(_481);
        _481 = RangeFull;
        _464 = <[&[u8]; 3] as Index<RangeFull>>::index(move _465, move _481) -> [return: bb210, unwind: bb802];
    }

    bb210: {
        StorageDead(_481);
        StorageDead(_465);
        _463 = &(*_464);
        _462 = &(*_463);
        _461 = [move _462];
        StorageDead(_462);
        _460 = &_461;
        _459 = &(*_460);
        _458 = move _459 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_459);
        _1379 = const false;
        _456 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::with_signer(move _457, move _458) -> [return: bb211, unwind: bb802];
    }

    bb211: {
        _1378 = const true;
        StorageDead(_458);
        _1379 = const false;
        StorageDead(_457);
        StorageLive(_482);
        StorageLive(_483);
        StorageLive(_484);
        StorageLive(_485);
        _1598 = (((_66.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _485 = &(*_1598);
        _484 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _485) -> [return: bb212, unwind: bb800];
    }

    bb212: {
        StorageDead(_485);
        StorageLive(_486);
        StorageLive(_487);
        _1338 = deref_copy (_484.3: &anchor_lang::prelude::Pubkey);
        _487 = &(*_1338);
        StorageLive(_488);
        StorageLive(_489);
        _489 = <Token2022 as anchor_lang::Id>::id() -> [return: bb213, unwind: bb710];
    }

    bb213: {
        _488 = &_489;
        _486 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _487, move _488) -> [return: bb214, unwind: bb710];
    }

    bb214: {
        switchInt(move _486) -> [0: bb243, otherwise: bb215];
    }

    bb215: {
        StorageDead(_489);
        StorageDead(_488);
        StorageDead(_487);
        StorageLive(_490);
        StorageLive(_491);
        StorageLive(_492);
        StorageLive(_493);
        _493 = &_484;
        _492 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _493) -> [return: bb216, unwind: bb710];
    }

    bb216: {
        StorageDead(_493);
        _491 = <std::result::Result<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError> as Try>::branch(move _492) -> [return: bb217, unwind: bb710];
    }

    bb217: {
        StorageDead(_492);
        _494 = discriminant(_491);
        switchInt(move _494) -> [0: bb218, 1: bb219, otherwise: bb5];
    }

    bb218: {
        StorageLive(_498);
        _498 = move ((_491 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _490 = move _498;
        StorageDead(_498);
        _1427 = discriminant(_491);
        StorageDead(_491);
        StorageLive(_499);
        StorageLive(_500);
        StorageLive(_501);
        StorageLive(_502);
        StorageLive(_503);
        StorageLive(_504);
        StorageLive(_505);
        _505 = &_490;
        _504 = &(*_505);
        _503 = <Ref<'_, &mut [u8]> as Deref>::deref(move _504) -> [return: bb221, unwind: bb709];
    }

    bb219: {
        StorageLive(_495);
        _495 = move ((_491 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_497);
        _497 = move _495;
        _0 = <std::result::Result<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _497) -> [return: bb220, unwind: bb798];
    }

    bb220: {
        StorageDead(_497);
        StorageDead(_495);
        _1515 = discriminant(_491);
        StorageDead(_491);
        goto -> bb647;
    }

    bb221: {
        _1339 = deref_copy (*_503);
        _502 = &(*_1339);
        StorageDead(_504);
        _501 = StateWithExtensions::<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>::unpack(move _502) -> [return: bb222, unwind: bb709];
    }

    bb222: {
        StorageDead(_502);
        _500 = <std::result::Result<StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>, anchor_lang::prelude::ProgramError> as Try>::branch(move _501) -> [return: bb223, unwind: bb709];
    }

    bb223: {
        StorageDead(_501);
        _506 = discriminant(_500);
        switchInt(move _506) -> [0: bb224, 1: bb225, otherwise: bb5];
    }

    bb224: {
        StorageLive(_510);
        _510 = move ((_500 as Continue).0: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>);
        _499 = move _510;
        StorageDead(_510);
        _1429 = discriminant(_500);
        StorageDead(_505);
        StorageDead(_503);
        StorageDead(_500);
        StorageLive(_511);
        StorageLive(_512);
        StorageLive(_513);
        StorageLive(_514);
        _514 = &_499;
        _513 = <StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint> as BaseStateWithExtensions<anchor_spl::token_2022::spl_token_2022::state::Mint>>::get_extension_types(move _514) -> [return: bb227, unwind: bb709];
    }

    bb225: {
        StorageLive(_507);
        _507 = move ((_500 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_509);
        _509 = move _507;
        _0 = <std::result::Result<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _509) -> [return: bb226, unwind: bb797];
    }

    bb226: {
        StorageDead(_509);
        StorageDead(_507);
        _1513 = discriminant(_500);
        StorageDead(_505);
        StorageDead(_503);
        StorageDead(_500);
        goto -> bb646;
    }

    bb227: {
        StorageDead(_514);
        _512 = <std::result::Result<Vec<ExtensionType>, anchor_lang::prelude::ProgramError> as Try>::branch(move _513) -> [return: bb228, unwind: bb709];
    }

    bb228: {
        StorageDead(_513);
        _515 = discriminant(_512);
        switchInt(move _515) -> [0: bb229, 1: bb230, otherwise: bb5];
    }

    bb229: {
        StorageLive(_519);
        _519 = move ((_512 as Continue).0: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>);
        _511 = move _519;
        StorageDead(_519);
        _1431 = discriminant(_512);
        StorageDead(_512);
        StorageLive(_520);
        StorageLive(_521);
        StorageLive(_522);
        StorageLive(_523);
        StorageLive(_524);
        _524 = &_511;
        _523 = &(*_524);
        _522 = <Vec<ExtensionType> as Deref>::deref(move _523) -> [return: bb232, unwind: bb708];
    }

    bb230: {
        StorageLive(_516);
        _516 = move ((_512 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_518);
        _518 = move _516;
        _0 = <std::result::Result<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _518) -> [return: bb231, unwind: bb796];
    }

    bb231: {
        StorageDead(_518);
        StorageDead(_516);
        _1511 = discriminant(_512);
        StorageDead(_512);
        StorageDead(_511);
        goto -> bb646;
    }

    bb232: {
        _521 = &(*_522);
        StorageDead(_523);
        _520 = ExtensionType::get_required_init_account_extensions(move _521) -> [return: bb233, unwind: bb708];
    }

    bb233: {
        StorageDead(_521);
        StorageDead(_524);
        StorageDead(_522);
        StorageLive(_525);
        StorageLive(_526);
        StorageLive(_527);
        StorageLive(_528);
        StorageLive(_529);
        StorageLive(_530);
        _530 = &_520;
        _529 = &(*_530);
        _528 = <Vec<ExtensionType> as Deref>::deref(move _529) -> [return: bb234, unwind: bb707];
    }

    bb234: {
        _527 = &(*_528);
        StorageDead(_529);
        _526 = ExtensionType::try_calculate_account_len::<anchor_spl::token_2022::spl_token_2022::state::Account>(move _527) -> [return: bb235, unwind: bb707];
    }

    bb235: {
        StorageDead(_527);
        _525 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _526) -> [return: bb236, unwind: bb707];
    }

    bb236: {
        _1377 = const true;
        StorageDead(_526);
        _531 = discriminant(_525);
        switchInt(move _531) -> [0: bb237, 1: bb238, otherwise: bb5];
    }

    bb237: {
        StorageLive(_535);
        _535 = ((_525 as Continue).0: usize);
        _483 = _535;
        StorageDead(_535);
        drop(_520) -> [return: bb240, unwind: bb705];
    }

    bb238: {
        StorageLive(_532);
        _532 = move ((_525 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_534);
        _534 = move _532;
        _0 = <std::result::Result<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _534) -> [return: bb239, unwind: bb704];
    }

    bb239: {
        StorageDead(_534);
        StorageDead(_532);
        drop(_520) -> [return: bb643, unwind: bb705];
    }

    bb240: {
        StorageDead(_520);
        drop(_511) -> [return: bb241, unwind: bb706];
    }

    bb241: {
        StorageDead(_511);
        StorageDead(_499);
        drop(_490) -> [return: bb242, unwind: bb795];
    }

    bb242: {
        StorageDead(_490);
        _1433 = discriminant(_525);
        StorageDead(_530);
        StorageDead(_528);
        _1377 = const false;
        StorageDead(_525);
        goto -> bb244;
    }

    bb243: {
        StorageDead(_489);
        StorageDead(_488);
        StorageDead(_487);
        _483 = const _;
        goto -> bb244;
    }

    bb244: {
        StorageDead(_486);
        drop(_484) -> [return: bb245, unwind: bb800];
    }

    bb245: {
        StorageDead(_484);
        _482 = move _483 as u64 (IntToInt);
        StorageDead(_483);
        _1378 = const false;
        _455 = anchor_lang::system_program::allocate(move _456, move _482) -> [return: bb246, unwind: bb800];
    }

    bb246: {
        StorageDead(_482);
        _1378 = const false;
        StorageDead(_456);
        _454 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _455) -> [return: bb247, unwind: bb804];
    }

    bb247: {
        StorageDead(_455);
        _536 = discriminant(_454);
        switchInt(move _536) -> [0: bb248, 1: bb249, otherwise: bb5];
    }

    bb248: {
        StorageLive(_540);
        _540 = ((_454 as Continue).0: ());
        _453 = _540;
        StorageDead(_540);
        _1435 = discriminant(_454);
        StorageDead(_478);
        StorageDead(_476);
        StorageDead(_475);
        StorageDead(_472);
        StorageDead(_469);
        StorageDead(_466);
        StorageDead(_464);
        StorageDead(_463);
        StorageDead(_461);
        StorageDead(_460);
        StorageDead(_454);
        StorageDead(_453);
        StorageLive(_541);
        StorageLive(_542);
        StorageLive(_543);
        _543 = &(*_57);
        _542 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _543) -> [return: bb251, unwind: bb804];
    }

    bb249: {
        StorageLive(_537);
        _537 = move ((_454 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_539);
        _539 = move _537;
        _0 = <std::result::Result<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _539) -> [return: bb250, unwind: bb794];
    }

    bb250: {
        StorageDead(_539);
        StorageDead(_537);
        _1507 = discriminant(_454);
        goto -> bb651;
    }

    bb251: {
        StorageDead(_543);
        _1376 = const true;
        _541 = anchor_lang::system_program::Assign::<'_> { account_to_assign: move _542 };
        StorageDead(_542);
        StorageLive(_544);
        StorageLive(_545);
        StorageLive(_546);
        _546 = &_111;
        _545 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _546) -> [return: bb252, unwind: bb793];
    }

    bb252: {
        StorageDead(_546);
        StorageLive(_547);
        _1376 = const false;
        _547 = move _541;
        _544 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::new(move _545, move _547) -> [return: bb253, unwind: bb793];
    }

    bb253: {
        StorageDead(_547);
        StorageDead(_545);
        StorageLive(_548);
        StorageLive(_549);
        StorageLive(_550);
        StorageLive(_551);
        StorageLive(_552);
        _1375 = const true;
        _552 = move _544;
        StorageLive(_553);
        StorageLive(_554);
        StorageLive(_555);
        StorageLive(_556);
        StorageLive(_557);
        StorageLive(_558);
        StorageLive(_559);
        StorageLive(_560);
        StorageLive(_561);
        StorageLive(_562);
        StorageLive(_563);
        StorageLive(_564);
        _564 = const _;
        _563 = &(*_564);
        _562 = move _563 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_563);
        StorageLive(_565);
        StorageLive(_566);
        StorageLive(_567);
        StorageLive(_568);
        _568 = &(*_27);
        _567 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _568) -> [return: bb254, unwind: bb791];
    }

    bb254: {
        _566 = &_567;
        StorageDead(_568);
        _565 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _566) -> [return: bb255, unwind: bb791];
    }

    bb255: {
        StorageDead(_566);
        StorageLive(_569);
        StorageLive(_570);
        StorageLive(_571);
        StorageLive(_572);
        StorageLive(_573);
        StorageLive(_574);
        _574 = _180;
        _573 = [move _574];
        _572 = &_573;
        StorageDead(_574);
        StorageLive(_575);
        _575 = RangeFull;
        _571 = <[u8; 1] as Index<RangeFull>>::index(move _572, move _575) -> [return: bb256, unwind: bb791];
    }

    bb256: {
        StorageDead(_575);
        StorageDead(_572);
        _570 = &(*_571);
        _569 = &(*_570);
        _561 = [move _562, move _565, move _569];
        _560 = &_561;
        StorageDead(_569);
        StorageDead(_565);
        StorageDead(_562);
        StorageLive(_576);
        _576 = RangeFull;
        _559 = <[&[u8]; 3] as Index<RangeFull>>::index(move _560, move _576) -> [return: bb257, unwind: bb791];
    }

    bb257: {
        StorageDead(_576);
        StorageDead(_560);
        _558 = &(*_559);
        _557 = &(*_558);
        _556 = [move _557];
        StorageDead(_557);
        _555 = &_556;
        _554 = &(*_555);
        _553 = move _554 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_554);
        _1375 = const false;
        _551 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::with_signer(move _552, move _553) -> [return: bb258, unwind: bb791];
    }

    bb258: {
        _1374 = const true;
        StorageDead(_553);
        _1375 = const false;
        StorageDead(_552);
        StorageLive(_577);
        StorageLive(_578);
        StorageLive(_579);
        StorageLive(_580);
        StorageLive(_581);
        StorageLive(_582);
        _582 = &_141;
        _581 = <anchor_lang::prelude::Interface<'_, TokenInterface> as Deref>::deref(move _582) -> [return: bb259, unwind: bb789];
    }

    bb259: {
        _580 = &(*_581);
        StorageDead(_582);
        _579 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _580) -> [return: bb260, unwind: bb789];
    }

    bb260: {
        StorageDead(_580);
        _578 = &_579;
        _577 = &(*_578);
        _1374 = const false;
        _550 = anchor_lang::system_program::assign(move _551, move _577) -> [return: bb261, unwind: bb789];
    }

    bb261: {
        StorageDead(_577);
        _1374 = const false;
        StorageDead(_551);
        _549 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _550) -> [return: bb262, unwind: bb793];
    }

    bb262: {
        StorageDead(_550);
        _583 = discriminant(_549);
        switchInt(move _583) -> [0: bb263, 1: bb264, otherwise: bb5];
    }

    bb263: {
        StorageLive(_587);
        _587 = ((_549 as Continue).0: ());
        _548 = _587;
        StorageDead(_587);
        _1437 = discriminant(_549);
        StorageDead(_581);
        StorageDead(_579);
        StorageDead(_578);
        StorageDead(_573);
        StorageDead(_571);
        StorageDead(_570);
        StorageDead(_567);
        StorageDead(_564);
        StorageDead(_561);
        StorageDead(_559);
        StorageDead(_558);
        StorageDead(_556);
        StorageDead(_555);
        StorageDead(_549);
        StorageDead(_548);
        _226 = const ();
        StorageDead(_544);
        _1376 = const false;
        StorageDead(_541);
        StorageDead(_449);
        _1380 = const false;
        StorageDead(_446);
        StorageDead(_366);
        goto -> bb266;
    }

    bb264: {
        StorageLive(_584);
        _584 = move ((_549 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_586);
        _586 = move _584;
        _0 = <std::result::Result<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _586) -> [return: bb265, unwind: bb787];
    }

    bb265: {
        StorageDead(_586);
        StorageDead(_584);
        _1505 = discriminant(_549);
        StorageDead(_581);
        StorageDead(_579);
        StorageDead(_578);
        StorageDead(_573);
        StorageDead(_571);
        StorageDead(_570);
        StorageDead(_567);
        StorageDead(_564);
        StorageDead(_561);
        StorageDead(_559);
        StorageDead(_558);
        StorageDead(_556);
        StorageDead(_555);
        StorageDead(_549);
        StorageDead(_548);
        StorageDead(_544);
        _1376 = const false;
        StorageDead(_541);
        goto -> bb652;
    }

    bb266: {
        StorageDead(_227);
        StorageDead(_226);
        StorageLive(_588);
        StorageLive(_589);
        _589 = &_141;
        _588 = <anchor_lang::prelude::Interface<'_, TokenInterface> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _589) -> [return: bb267, unwind: bb728];
    }

    bb267: {
        _1373 = const true;
        StorageDead(_589);
        StorageLive(_590);
        StorageLive(_591);
        StorageLive(_592);
        _592 = &(*_57);
        _591 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _592) -> [return: bb268, unwind: bb786];
    }

    bb268: {
        StorageDead(_592);
        StorageLive(_593);
        StorageLive(_594);
        _1599 = (((_66.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _594 = &(*_1599);
        _593 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _594) -> [return: bb269, unwind: bb703];
    }

    bb269: {
        StorageDead(_594);
        StorageLive(_595);
        StorageLive(_596);
        _596 = &_36;
        _595 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _596) -> [return: bb270, unwind: bb702];
    }

    bb270: {
        StorageDead(_596);
        _590 = anchor_spl::token_2022::InitializeAccount3::<'_> { account: move _591, mint: move _593, authority: move _595 };
        StorageDead(_595);
        StorageDead(_593);
        StorageDead(_591);
        StorageLive(_597);
        StorageLive(_598);
        _1373 = const false;
        _598 = move _588;
        StorageLive(_599);
        _599 = move _590;
        _597 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_spl::token_2022::InitializeAccount3<'_>>::new(move _598, move _599) -> [return: bb271, unwind: bb786];
    }

    bb271: {
        StorageDead(_599);
        StorageDead(_598);
        StorageLive(_600);
        StorageLive(_601);
        StorageLive(_602);
        StorageLive(_603);
        _603 = move _597;
        _602 = anchor_spl::token_2022::initialize_account3(move _603) -> [return: bb272, unwind: bb786];
    }

    bb272: {
        StorageDead(_603);
        _601 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _602) -> [return: bb273, unwind: bb786];
    }

    bb273: {
        StorageDead(_602);
        _604 = discriminant(_601);
        switchInt(move _604) -> [0: bb274, 1: bb275, otherwise: bb5];
    }

    bb274: {
        StorageLive(_608);
        _608 = ((_601 as Continue).0: ());
        _600 = _608;
        StorageDead(_608);
        _1439 = discriminant(_601);
        StorageDead(_601);
        StorageDead(_600);
        _217 = const ();
        StorageDead(_597);
        StorageDead(_590);
        _1373 = const false;
        StorageDead(_588);
        StorageDead(_224);
        goto -> bb278;
    }

    bb275: {
        StorageLive(_605);
        _605 = move ((_601 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_607);
        _607 = move _605;
        _0 = <std::result::Result<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _607) -> [return: bb276, unwind: bb784];
    }

    bb276: {
        StorageDead(_607);
        StorageDead(_605);
        _1503 = discriminant(_601);
        StorageDead(_601);
        StorageDead(_600);
        StorageDead(_597);
        StorageDead(_590);
        _1373 = const false;
        StorageDead(_588);
        goto -> bb670;
    }

    bb277: {
        StorageDead(_221);
        StorageDead(_220);
        _217 = const ();
        goto -> bb278;
    }

    bb278: {
        StorageDead(_219);
        StorageDead(_218);
        StorageDead(_217);
        StorageLive(_609);
        StorageLive(_610);
        StorageLive(_611);
        StorageLive(_612);
        StorageLive(_613);
        _613 = &_57;
        _1340 = deref_copy (*_613);
        _612 = &(*_1340);
        _611 = anchor_lang::prelude::InterfaceAccount::<'_, anchor_spl::token_interface::TokenAccount>::try_from_unchecked(move _612) -> [return: bb279, unwind: bb728];
    }

    bb279: {
        _1371 = const true;
        _1372 = const true;
        StorageDead(_612);
        _614 = discriminant(_611);
        switchInt(move _614) -> [0: bb281, 1: bb280, otherwise: bb5];
    }

    bb280: {
        StorageLive(_616);
        _616 = move ((_611 as Err).0: anchor_lang::error::Error);
        StorageLive(_618);
        StorageLive(_619);
        _619 = move _616;
        _618 = anchor_lang::error::Error::with_account_name::<&str>(move _619, const "token_vault") -> [return: bb282, unwind: bb783];
    }

    bb281: {
        StorageLive(_615);
        _615 = move ((_611 as Ok).0: anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _610 = move _615;
        StorageDead(_615);
        _609 = Box::<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>::new(move _610) -> [return: bb283, unwind: bb783];
    }

    bb282: {
        StorageDead(_619);
        _0 = std::result::Result::<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error>::Err(move _618);
        StorageDead(_618);
        StorageDead(_616);
        StorageDead(_610);
        _1501 = discriminant(_611);
        StorageDead(_613);
        _1371 = const false;
        _1372 = const false;
        StorageDead(_611);
        goto -> bb642;
    }

    bb283: {
        StorageDead(_610);
        _1441 = discriminant(_611);
        StorageDead(_613);
        _1371 = const false;
        _1372 = const false;
        StorageDead(_611);
        StorageLive(_620);
        StorageLive(_621);
        _621 = const false;
        switchInt(move _621) -> [0: bb319, otherwise: bb284];
    }

    bb284: {
        StorageLive(_622);
        StorageLive(_623);
        StorageLive(_624);
        StorageLive(_625);
        StorageLive(_626);
        StorageLive(_627);
        StorageLive(_628);
        _1600 = (((_609.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _628 = &(*_1600);
        _627 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _628) -> [return: bb285, unwind: bb701];
    }

    bb285: {
        _626 = &(*_627);
        _625 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _626) -> [return: bb286, unwind: bb701];
    }

    bb286: {
        StorageDead(_628);
        StorageDead(_626);
        _624 = &((*_625).0: anchor_lang::prelude::Pubkey);
        StorageLive(_629);
        StorageLive(_630);
        StorageLive(_631);
        _1601 = (((_66.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _631 = &(*_1601);
        _630 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _631) -> [return: bb287, unwind: bb701];
    }

    bb287: {
        _629 = &_630;
        StorageDead(_631);
        _623 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _624, move _629) -> [return: bb288, unwind: bb701];
    }

    bb288: {
        switchInt(move _623) -> [0: bb296, otherwise: bb289];
    }

    bb289: {
        StorageDead(_630);
        StorageDead(_629);
        StorageDead(_627);
        StorageDead(_625);
        StorageDead(_624);
        StorageLive(_633);
        StorageLive(_634);
        StorageLive(_635);
        StorageLive(_636);
        _636 = ConstraintTokenMint;
        _635 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _636) -> [return: bb290, unwind: bb701];
    }

    bb290: {
        StorageDead(_636);
        _634 = anchor_lang::error::Error::with_account_name::<&str>(move _635, const "token_vault") -> [return: bb291, unwind: bb701];
    }

    bb291: {
        _1370 = const true;
        StorageDead(_635);
        StorageLive(_637);
        StorageLive(_638);
        StorageLive(_639);
        StorageLive(_640);
        StorageLive(_641);
        StorageLive(_642);
        _1602 = (((_609.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _642 = &(*_1602);
        _641 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _642) -> [return: bb292, unwind: bb782];
    }

    bb292: {
        _640 = &(*_641);
        _639 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _640) -> [return: bb293, unwind: bb782];
    }

    bb293: {
        StorageDead(_642);
        StorageDead(_640);
        _638 = ((*_639).0: anchor_lang::prelude::Pubkey);
        StorageLive(_643);
        StorageLive(_644);
        _1603 = (((_66.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _644 = &(*_1603);
        _643 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _644) -> [return: bb294, unwind: bb782];
    }

    bb294: {
        StorageDead(_644);
        _637 = (move _638, move _643);
        StorageDead(_643);
        StorageDead(_638);
        _1370 = const false;
        _633 = anchor_lang::error::Error::with_pubkeys(move _634, move _637) -> [return: bb295, unwind: bb782];
    }

    bb295: {
        StorageDead(_637);
        _1370 = const false;
        StorageDead(_634);
        _0 = std::result::Result::<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error>::Err(move _633);
        StorageDead(_633);
        StorageDead(_641);
        StorageDead(_639);
        StorageDead(_623);
        StorageDead(_622);
        goto -> bb641;
    }

    bb296: {
        StorageDead(_630);
        StorageDead(_629);
        StorageDead(_627);
        StorageDead(_625);
        StorageDead(_624);
        _622 = const ();
        StorageDead(_623);
        StorageDead(_622);
        StorageLive(_645);
        StorageLive(_646);
        StorageLive(_647);
        StorageLive(_648);
        StorageLive(_649);
        StorageLive(_650);
        StorageLive(_651);
        _1604 = (((_609.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _651 = &(*_1604);
        _650 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _651) -> [return: bb297, unwind: bb701];
    }

    bb297: {
        _649 = &(*_650);
        _648 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _649) -> [return: bb298, unwind: bb701];
    }

    bb298: {
        StorageDead(_651);
        StorageDead(_649);
        _647 = &((*_648).1: anchor_lang::prelude::Pubkey);
        StorageLive(_652);
        StorageLive(_653);
        StorageLive(_654);
        _654 = &_36;
        _653 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _654) -> [return: bb299, unwind: bb701];
    }

    bb299: {
        _652 = &_653;
        StorageDead(_654);
        _646 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _647, move _652) -> [return: bb300, unwind: bb701];
    }

    bb300: {
        switchInt(move _646) -> [0: bb308, otherwise: bb301];
    }

    bb301: {
        StorageDead(_653);
        StorageDead(_652);
        StorageDead(_650);
        StorageDead(_648);
        StorageDead(_647);
        StorageLive(_656);
        StorageLive(_657);
        StorageLive(_658);
        StorageLive(_659);
        _659 = ConstraintTokenOwner;
        _658 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _659) -> [return: bb302, unwind: bb701];
    }

    bb302: {
        StorageDead(_659);
        _657 = anchor_lang::error::Error::with_account_name::<&str>(move _658, const "token_vault") -> [return: bb303, unwind: bb701];
    }

    bb303: {
        _1369 = const true;
        StorageDead(_658);
        StorageLive(_660);
        StorageLive(_661);
        StorageLive(_662);
        StorageLive(_663);
        StorageLive(_664);
        StorageLive(_665);
        _1605 = (((_609.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _665 = &(*_1605);
        _664 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _665) -> [return: bb304, unwind: bb780];
    }

    bb304: {
        _663 = &(*_664);
        _662 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _663) -> [return: bb305, unwind: bb780];
    }

    bb305: {
        StorageDead(_665);
        StorageDead(_663);
        _661 = ((*_662).1: anchor_lang::prelude::Pubkey);
        StorageLive(_666);
        StorageLive(_667);
        _667 = &_36;
        _666 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _667) -> [return: bb306, unwind: bb780];
    }

    bb306: {
        StorageDead(_667);
        _660 = (move _661, move _666);
        StorageDead(_666);
        StorageDead(_661);
        _1369 = const false;
        _656 = anchor_lang::error::Error::with_pubkeys(move _657, move _660) -> [return: bb307, unwind: bb780];
    }

    bb307: {
        StorageDead(_660);
        _1369 = const false;
        StorageDead(_657);
        _0 = std::result::Result::<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error>::Err(move _656);
        StorageDead(_656);
        StorageDead(_664);
        StorageDead(_662);
        StorageDead(_646);
        StorageDead(_645);
        goto -> bb641;
    }

    bb308: {
        StorageDead(_653);
        StorageDead(_652);
        StorageDead(_650);
        StorageDead(_648);
        StorageDead(_647);
        _645 = const ();
        StorageDead(_646);
        StorageDead(_645);
        StorageLive(_668);
        StorageLive(_669);
        _669 = &_212;
        StorageLive(_670);
        StorageLive(_671);
        StorageLive(_672);
        StorageLive(_673);
        StorageLive(_674);
        StorageLive(_675);
        _675 = &_141;
        _674 = <anchor_lang::prelude::Interface<'_, TokenInterface> as Deref>::deref(move _675) -> [return: bb309, unwind: bb701];
    }

    bb309: {
        _673 = &(*_674);
        StorageDead(_675);
        _672 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _673) -> [return: bb310, unwind: bb701];
    }

    bb310: {
        StorageDead(_673);
        _671 = &_672;
        _670 = &_671;
        _668 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _669, move _670) -> [return: bb311, unwind: bb701];
    }

    bb311: {
        switchInt(move _668) -> [0: bb318, otherwise: bb312];
    }

    bb312: {
        StorageDead(_674);
        StorageDead(_672);
        StorageDead(_671);
        StorageDead(_670);
        StorageDead(_669);
        StorageLive(_677);
        StorageLive(_678);
        StorageLive(_679);
        StorageLive(_680);
        _680 = ConstraintTokenTokenProgram;
        _679 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _680) -> [return: bb313, unwind: bb701];
    }

    bb313: {
        StorageDead(_680);
        _678 = anchor_lang::error::Error::with_account_name::<&str>(move _679, const "token_vault") -> [return: bb314, unwind: bb701];
    }

    bb314: {
        _1368 = const true;
        StorageDead(_679);
        StorageLive(_681);
        StorageLive(_682);
        _682 = (*_212);
        StorageLive(_683);
        StorageLive(_684);
        StorageLive(_685);
        StorageLive(_686);
        _686 = &_141;
        _685 = <anchor_lang::prelude::Interface<'_, TokenInterface> as Deref>::deref(move _686) -> [return: bb315, unwind: bb778];
    }

    bb315: {
        _684 = &(*_685);
        StorageDead(_686);
        _683 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _684) -> [return: bb316, unwind: bb778];
    }

    bb316: {
        StorageDead(_684);
        _681 = (move _682, move _683);
        StorageDead(_683);
        StorageDead(_682);
        _1368 = const false;
        _677 = anchor_lang::error::Error::with_pubkeys(move _678, move _681) -> [return: bb317, unwind: bb778];
    }

    bb317: {
        StorageDead(_681);
        _1368 = const false;
        StorageDead(_678);
        _0 = std::result::Result::<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error>::Err(move _677);
        StorageDead(_677);
        StorageDead(_685);
        StorageDead(_668);
        goto -> bb641;
    }

    bb318: {
        StorageDead(_674);
        StorageDead(_672);
        StorageDead(_671);
        StorageDead(_670);
        StorageDead(_669);
        _620 = const ();
        StorageDead(_668);
        goto -> bb320;
    }

    bb319: {
        _620 = const ();
        goto -> bb320;
    }

    bb320: {
        StorageDead(_621);
        StorageDead(_620);
        _211 = move _609;
        StorageDead(_609);
        StorageDead(_212);
        StorageLive(_687);
        StorageLive(_688);
        StorageLive(_689);
        StorageLive(_690);
        StorageLive(_691);
        StorageLive(_692);
        _692 = &_211;
        _691 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _692) -> [return: bb321, unwind: bb700];
    }

    bb321: {
        _690 = &(*_691);
        StorageDead(_692);
        _689 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _690) -> [return: bb322, unwind: bb700];
    }

    bb322: {
        StorageDead(_690);
        _688 = ((*_689).6: bool);
        switchInt(move _688) -> [0: bb323, otherwise: bb326];
    }

    bb323: {
        StorageDead(_691);
        StorageDead(_689);
        StorageLive(_694);
        StorageLive(_695);
        StorageLive(_696);
        _696 = ConstraintMut;
        _695 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _696) -> [return: bb324, unwind: bb700];
    }

    bb324: {
        StorageDead(_696);
        _694 = anchor_lang::error::Error::with_account_name::<&str>(move _695, const "token_vault") -> [return: bb325, unwind: bb700];
    }

    bb325: {
        StorageDead(_695);
        _0 = std::result::Result::<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error>::Err(move _694);
        StorageDead(_694);
        StorageDead(_688);
        StorageDead(_687);
        goto -> bb640;
    }

    bb326: {
        StorageDead(_691);
        StorageDead(_689);
        _687 = const ();
        StorageDead(_688);
        StorageDead(_687);
        StorageLive(_697);
        StorageLive(_698);
        StorageLive(_699);
        _699 = &_171;
        StorageLive(_700);
        StorageLive(_701);
        StorageLive(_702);
        StorageLive(_703);
        _1606 = (((_211.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _703 = &(*_1606);
        _702 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _703) -> [return: bb327, unwind: bb700];
    }

    bb327: {
        _701 = &_702;
        StorageDead(_703);
        _700 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _701) -> [return: bb328, unwind: bb699];
    }

    bb328: {
        StorageDead(_701);
        StorageLive(_704);
        StorageLive(_705);
        StorageLive(_706);
        StorageLive(_707);
        StorageLive(_708);
        StorageLive(_709);
        _1607 = (((_211.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _709 = &(*_1607);
        _708 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _709) -> [return: bb329, unwind: bb699];
    }

    bb329: {
        _707 = &_708;
        StorageDead(_709);
        _706 = anchor_lang::prelude::AccountInfo::<'_>::try_data_len(move _707) -> [return: bb330, unwind: bb698];
    }

    bb330: {
        StorageDead(_707);
        _705 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _706) -> [return: bb331, unwind: bb698];
    }

    bb331: {
        _1367 = const true;
        StorageDead(_706);
        _710 = discriminant(_705);
        switchInt(move _710) -> [0: bb332, 1: bb333, otherwise: bb5];
    }

    bb332: {
        StorageLive(_714);
        _714 = ((_705 as Continue).0: usize);
        _704 = _714;
        StorageDead(_714);
        _698 = anchor_lang::prelude::Rent::is_exempt(move _699, move _700, move _704) -> [return: bb335, unwind: bb776];
    }

    bb333: {
        StorageLive(_711);
        _711 = move ((_705 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_713);
        _713 = move _711;
        _0 = <std::result::Result<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _713) -> [return: bb334, unwind: bb776];
    }

    bb334: {
        StorageDead(_713);
        StorageDead(_711);
        StorageDead(_704);
        StorageDead(_700);
        StorageDead(_699);
        _1499 = discriminant(_705);
        drop(_708) -> [return: bb637, unwind: bb699];
    }

    bb335: {
        switchInt(move _698) -> [0: bb337, otherwise: bb336];
    }

    bb336: {
        StorageDead(_704);
        StorageDead(_700);
        StorageDead(_699);
        _1443 = discriminant(_705);
        drop(_708) -> [return: bb342, unwind: bb699];
    }

    bb337: {
        StorageDead(_704);
        StorageDead(_700);
        StorageDead(_699);
        _1445 = discriminant(_705);
        drop(_708) -> [return: bb338, unwind: bb699];
    }

    bb338: {
        StorageDead(_708);
        _1367 = const false;
        StorageDead(_705);
        drop(_702) -> [return: bb339, unwind: bb700];
    }

    bb339: {
        StorageDead(_702);
        StorageLive(_716);
        StorageLive(_717);
        StorageLive(_718);
        _718 = ConstraintRentExempt;
        _717 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _718) -> [return: bb340, unwind: bb700];
    }

    bb340: {
        StorageDead(_718);
        _716 = anchor_lang::error::Error::with_account_name::<&str>(move _717, const "token_vault") -> [return: bb341, unwind: bb700];
    }

    bb341: {
        StorageDead(_717);
        _0 = std::result::Result::<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error>::Err(move _716);
        StorageDead(_716);
        goto -> bb639;
    }

    bb342: {
        StorageDead(_708);
        _1367 = const false;
        StorageDead(_705);
        drop(_702) -> [return: bb343, unwind: bb700];
    }

    bb343: {
        StorageDead(_702);
        _697 = const ();
        StorageDead(_698);
        StorageDead(_697);
        StorageLive(_719);
        StorageLive(_720);
        StorageLive(_721);
        _721 = <anchor_lang::prelude::Rent as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb344, unwind: bb700];
    }

    bb344: {
        _720 = <std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError> as Try>::branch(move _721) -> [return: bb345, unwind: bb700];
    }

    bb345: {
        StorageDead(_721);
        _722 = discriminant(_720);
        switchInt(move _722) -> [0: bb346, 1: bb347, otherwise: bb5];
    }

    bb346: {
        StorageLive(_726);
        _726 = ((_720 as Continue).0: anchor_lang::prelude::Rent);
        _719 = _726;
        StorageDead(_726);
        _1447 = discriminant(_720);
        StorageDead(_720);
        StorageLive(_729);
        StorageLive(_730);
        StorageLive(_731);
        StorageLive(_732);
        StorageLive(_733);
        StorageLive(_734);
        StorageLive(_735);
        StorageLive(_736);
        _736 = const _;
        _735 = &(*_736);
        _734 = move _735 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_735);
        StorageLive(_737);
        StorageLive(_738);
        StorageLive(_739);
        StorageLive(_740);
        StorageLive(_741);
        _741 = &(*_27);
        _740 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _741) -> [return: bb349, unwind: bb700];
    }

    bb347: {
        StorageLive(_723);
        _723 = move ((_720 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_725);
        _725 = move _723;
        _0 = <std::result::Result<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _725) -> [return: bb348, unwind: bb775];
    }

    bb348: {
        StorageDead(_725);
        StorageDead(_723);
        _1497 = discriminant(_720);
        StorageDead(_720);
        goto -> bb636;
    }

    bb349: {
        _739 = &_740;
        StorageDead(_741);
        _738 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _739) -> [return: bb350, unwind: bb700];
    }

    bb350: {
        _737 = &(*_738);
        StorageDead(_739);
        _733 = [move _734, move _737];
        StorageDead(_737);
        StorageDead(_734);
        _732 = &_733;
        _731 = &(*_732);
        _730 = move _731 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_731);
        StorageLive(_742);
        _742 = &(*_1);
        _729 = anchor_lang::prelude::Pubkey::find_program_address(move _730, move _742) -> [return: bb351, unwind: bb700];
    }

    bb351: {
        StorageDead(_742);
        StorageDead(_730);
        StorageLive(_727);
        _727 = (_729.0: anchor_lang::prelude::Pubkey);
        StorageLive(_728);
        _728 = (_729.1: u8);
        StorageDead(_740);
        StorageDead(_738);
        StorageDead(_736);
        StorageDead(_733);
        StorageDead(_732);
        StorageDead(_729);
        StorageLive(_743);
        _743 = _728;
        ((*_4).2: u8) = move _743;
        StorageDead(_743);
        StorageLive(_744);
        StorageLive(_745);
        StorageLive(_746);
        StorageLive(_747);
        StorageLive(_748);
        _748 = &(*_87);
        _747 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _748) -> [return: bb352, unwind: bb700];
    }

    bb352: {
        _746 = &_747;
        StorageDead(_748);
        StorageLive(_749);
        _749 = &_727;
        _745 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _746, move _749) -> [return: bb353, unwind: bb700];
    }

    bb353: {
        switchInt(move _745) -> [0: bb359, otherwise: bb354];
    }

    bb354: {
        StorageDead(_749);
        StorageDead(_747);
        StorageDead(_746);
        StorageLive(_751);
        StorageLive(_752);
        StorageLive(_753);
        StorageLive(_754);
        _754 = ConstraintSeeds;
        _753 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _754) -> [return: bb355, unwind: bb700];
    }

    bb355: {
        StorageDead(_754);
        _752 = anchor_lang::error::Error::with_account_name::<&str>(move _753, const "shares_mint") -> [return: bb356, unwind: bb700];
    }

    bb356: {
        _1366 = const true;
        StorageDead(_753);
        StorageLive(_755);
        StorageLive(_756);
        StorageLive(_757);
        _757 = &(*_87);
        _756 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _757) -> [return: bb357, unwind: bb774];
    }

    bb357: {
        StorageDead(_757);
        StorageLive(_758);
        _758 = _727;
        _755 = (move _756, move _758);
        StorageDead(_758);
        StorageDead(_756);
        _1366 = const false;
        _751 = anchor_lang::error::Error::with_pubkeys(move _752, move _755) -> [return: bb358, unwind: bb774];
    }

    bb358: {
        StorageDead(_755);
        _1366 = const false;
        StorageDead(_752);
        _0 = std::result::Result::<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error>::Err(move _751);
        StorageDead(_751);
        StorageDead(_745);
        StorageDead(_744);
        goto -> bb635;
    }

    bb359: {
        StorageDead(_749);
        StorageDead(_747);
        StorageDead(_746);
        _744 = const ();
        StorageDead(_745);
        StorageDead(_744);
        StorageLive(_759);
        StorageLive(_760);
        StorageLive(_761);
        StorageLive(_762);
        StorageLive(_763);
        _763 = &_87;
        _762 = &(*_763);
        _761 = <&anchor_lang::prelude::AccountInfo<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _762) -> [return: bb360, unwind: bb700];
    }

    bb360: {
        StorageDead(_762);
        _760 = ((*_761).3: &anchor_lang::prelude::Pubkey);
        StorageDead(_763);
        StorageDead(_761);
        StorageLive(_764);
        StorageLive(_765);
        _765 = const false;
        switchInt(move _765) -> [0: bb363, otherwise: bb361];
    }

    bb361: {
        StorageLive(_766);
        StorageLive(_767);
        _767 = &_760;
        StorageLive(_768);
        _1318 = const _;
        _768 = &(*_1318);
        _766 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _767, move _768) -> [return: bb362, unwind: bb700];
    }

    bb362: {
        switchInt(move _766) -> [0: bb451, otherwise: bb363];
    }

    bb363: {
        StorageDead(_768);
        StorageDead(_767);
        StorageLive(_771);
        StorageLive(_772);
        _772 = &(*_87);
        _771 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _772) -> [return: bb364, unwind: bb700];
    }

    bb364: {
        StorageDead(_772);
        StorageLive(_773);
        StorageLive(_774);
        StorageLive(_775);
        _775 = _771;
        _774 = Eq(move _775, const 0_u64);
        switchInt(move _774) -> [0: bb383, otherwise: bb365];
    }

    bb365: {
        StorageDead(_775);
        StorageLive(_776);
        _776 = const _;
        StorageLive(_777);
        StorageLive(_778);
        _778 = &_719;
        StorageLive(_779);
        _779 = _776;
        _777 = anchor_lang::prelude::Rent::minimum_balance(move _778, move _779) -> [return: bb366, unwind: bb700];
    }

    bb366: {
        StorageDead(_779);
        StorageDead(_778);
        StorageLive(_780);
        StorageLive(_781);
        StorageLive(_782);
        _782 = &_6;
        _781 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _782) -> [return: bb367, unwind: bb700];
    }

    bb367: {
        StorageDead(_782);
        StorageLive(_783);
        StorageLive(_784);
        _784 = &(*_87);
        _783 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _784) -> [return: bb368, unwind: bb697];
    }

    bb368: {
        StorageDead(_784);
        _1365 = const true;
        _780 = anchor_lang::system_program::CreateAccount::<'_> { from: move _781, to: move _783 };
        StorageDead(_783);
        StorageDead(_781);
        StorageLive(_785);
        StorageLive(_786);
        StorageLive(_787);
        _787 = &_111;
        _786 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _787) -> [return: bb369, unwind: bb772];
    }

    bb369: {
        StorageDead(_787);
        StorageLive(_788);
        _1365 = const false;
        _788 = move _780;
        _785 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::new(move _786, move _788) -> [return: bb370, unwind: bb772];
    }

    bb370: {
        StorageDead(_788);
        StorageDead(_786);
        StorageLive(_789);
        StorageLive(_790);
        StorageLive(_791);
        StorageLive(_792);
        StorageLive(_793);
        _1364 = const true;
        _793 = move _785;
        StorageLive(_794);
        StorageLive(_795);
        StorageLive(_796);
        StorageLive(_797);
        StorageLive(_798);
        StorageLive(_799);
        StorageLive(_800);
        StorageLive(_801);
        StorageLive(_802);
        StorageLive(_803);
        StorageLive(_804);
        StorageLive(_805);
        _805 = const _;
        _804 = &(*_805);
        _803 = move _804 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_804);
        StorageLive(_806);
        StorageLive(_807);
        StorageLive(_808);
        StorageLive(_809);
        _809 = &(*_27);
        _808 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _809) -> [return: bb371, unwind: bb770];
    }

    bb371: {
        _807 = &_808;
        StorageDead(_809);
        _806 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _807) -> [return: bb372, unwind: bb770];
    }

    bb372: {
        StorageDead(_807);
        StorageLive(_810);
        StorageLive(_811);
        StorageLive(_812);
        StorageLive(_813);
        StorageLive(_814);
        StorageLive(_815);
        _815 = _728;
        _814 = [move _815];
        _813 = &_814;
        StorageDead(_815);
        StorageLive(_816);
        _816 = RangeFull;
        _812 = <[u8; 1] as Index<RangeFull>>::index(move _813, move _816) -> [return: bb373, unwind: bb770];
    }

    bb373: {
        StorageDead(_816);
        StorageDead(_813);
        _811 = &(*_812);
        _810 = &(*_811);
        _802 = [move _803, move _806, move _810];
        _801 = &_802;
        StorageDead(_810);
        StorageDead(_806);
        StorageDead(_803);
        StorageLive(_817);
        _817 = RangeFull;
        _800 = <[&[u8]; 3] as Index<RangeFull>>::index(move _801, move _817) -> [return: bb374, unwind: bb770];
    }

    bb374: {
        StorageDead(_817);
        StorageDead(_801);
        _799 = &(*_800);
        _798 = &(*_799);
        _797 = [move _798];
        StorageDead(_798);
        _796 = &_797;
        _795 = &(*_796);
        _794 = move _795 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_795);
        _1364 = const false;
        _792 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::with_signer(move _793, move _794) -> [return: bb375, unwind: bb770];
    }

    bb375: {
        _1363 = const true;
        StorageDead(_794);
        _1364 = const false;
        StorageDead(_793);
        StorageLive(_818);
        _818 = _777;
        StorageLive(_819);
        StorageLive(_820);
        _820 = _776;
        _819 = move _820 as u64 (IntToInt);
        StorageDead(_820);
        StorageLive(_821);
        StorageLive(_822);
        StorageLive(_823);
        StorageLive(_824);
        StorageLive(_825);
        StorageLive(_826);
        _826 = &_156;
        _825 = <anchor_lang::prelude::Program<'_, Token> as Deref>::deref(move _826) -> [return: bb376, unwind: bb768];
    }

    bb376: {
        _824 = &(*_825);
        StorageDead(_826);
        _823 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _824) -> [return: bb377, unwind: bb768];
    }

    bb377: {
        StorageDead(_824);
        _822 = &_823;
        _821 = &(*_822);
        _1363 = const false;
        _791 = anchor_lang::system_program::create_account(move _792, move _818, move _819, move _821) -> [return: bb378, unwind: bb768];
    }

    bb378: {
        StorageDead(_821);
        StorageDead(_819);
        StorageDead(_818);
        _1363 = const false;
        StorageDead(_792);
        _790 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _791) -> [return: bb379, unwind: bb772];
    }

    bb379: {
        StorageDead(_791);
        _827 = discriminant(_790);
        switchInt(move _827) -> [0: bb380, 1: bb381, otherwise: bb5];
    }

    bb380: {
        StorageLive(_831);
        _831 = ((_790 as Continue).0: ());
        _789 = _831;
        StorageDead(_831);
        _1449 = discriminant(_790);
        StorageDead(_825);
        StorageDead(_823);
        StorageDead(_822);
        StorageDead(_814);
        StorageDead(_812);
        StorageDead(_811);
        StorageDead(_808);
        StorageDead(_805);
        StorageDead(_802);
        StorageDead(_800);
        StorageDead(_799);
        StorageDead(_797);
        StorageDead(_796);
        StorageDead(_790);
        StorageDead(_789);
        _773 = const ();
        StorageDead(_785);
        _1365 = const false;
        StorageDead(_780);
        StorageDead(_777);
        StorageDead(_776);
        goto -> bb439;
    }

    bb381: {
        StorageLive(_828);
        _828 = move ((_790 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_830);
        _830 = move _828;
        _0 = <std::result::Result<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _830) -> [return: bb382, unwind: bb766];
    }

    bb382: {
        StorageDead(_830);
        StorageDead(_828);
        _1495 = discriminant(_790);
        StorageDead(_825);
        StorageDead(_823);
        StorageDead(_822);
        StorageDead(_814);
        StorageDead(_812);
        StorageDead(_811);
        StorageDead(_808);
        StorageDead(_805);
        StorageDead(_802);
        StorageDead(_800);
        StorageDead(_799);
        StorageDead(_797);
        StorageDead(_796);
        StorageDead(_790);
        StorageDead(_789);
        StorageDead(_785);
        _1365 = const false;
        StorageDead(_780);
        StorageDead(_777);
        StorageDead(_776);
        goto -> bb631;
    }

    bb383: {
        StorageDead(_775);
        StorageLive(_832);
        StorageLive(_833);
        StorageLive(_834);
        StorageLive(_835);
        StorageLive(_836);
        _836 = &_6;
        _835 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _836) -> [return: bb384, unwind: bb700];
    }

    bb384: {
        _834 = &_835;
        StorageDead(_836);
        StorageLive(_837);
        StorageLive(_838);
        StorageLive(_839);
        _839 = &(*_87);
        _838 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _839) -> [return: bb385, unwind: bb700];
    }

    bb385: {
        _837 = &_838;
        StorageDead(_839);
        _833 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _834, move _837) -> [return: bb386, unwind: bb700];
    }

    bb386: {
        switchInt(move _833) -> [0: bb395, otherwise: bb387];
    }

    bb387: {
        StorageDead(_838);
        StorageDead(_837);
        StorageDead(_835);
        StorageDead(_834);
        StorageLive(_841);
        StorageLive(_842);
        StorageLive(_843);
        StorageLive(_844);
        StorageLive(_845);
        _1317 = const _;
        _845 = &(*_1317);
        _844 = anchor_lang::error::ErrorCode::name(move _845) -> [return: bb388, unwind: bb700];
    }

    bb388: {
        StorageDead(_845);
        StorageLive(_847);
        StorageLive(_848);
        _848 = TryingToInitPayerAsProgramAccount;
        _847 = <anchor_lang::error::ErrorCode as Into<u32>>::into(move _848) -> [return: bb389, unwind: bb696];
    }

    bb389: {
        StorageDead(_848);
        StorageLive(_849);
        StorageLive(_850);
        _1316 = const _;
        _850 = &(*_1316);
        _849 = <anchor_lang::error::ErrorCode as ToString>::to_string(move _850) -> [return: bb390, unwind: bb696];
    }

    bb390: {
        StorageDead(_850);
        StorageLive(_852);
        StorageLive(_853);
        StorageLive(_854);
        _854 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\handlers\\handler_init_vault.rs", line: const 78_u32 };
        _853 = anchor_lang::error::ErrorOrigin::Source(move _854);
        StorageDead(_854);
        _852 = Option::<ErrorOrigin>::Some(move _853);
        StorageDead(_853);
        StorageLive(_855);
        _855 = Option::<ComparedValues>::None;
        _843 = anchor_lang::error::AnchorError { error_name: move _844, error_code_number: move _847, error_msg: move _849, error_origin: move _852, compared_values: move _855 };
        StorageDead(_855);
        StorageDead(_852);
        StorageDead(_849);
        StorageDead(_847);
        StorageDead(_844);
        _842 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _843) -> [return: bb391, unwind: bb700];
    }

    bb391: {
        _1362 = const true;
        StorageDead(_843);
        StorageLive(_856);
        StorageLive(_857);
        StorageLive(_858);
        _858 = &_6;
        _857 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _858) -> [return: bb392, unwind: bb765];
    }

    bb392: {
        StorageDead(_858);
        StorageLive(_859);
        StorageLive(_860);
        _860 = &(*_87);
        _859 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _860) -> [return: bb393, unwind: bb765];
    }

    bb393: {
        StorageDead(_860);
        _856 = (move _857, move _859);
        StorageDead(_859);
        StorageDead(_857);
        _1362 = const false;
        _841 = anchor_lang::error::Error::with_pubkeys(move _842, move _856) -> [return: bb394, unwind: bb765];
    }

    bb394: {
        StorageDead(_856);
        _1362 = const false;
        StorageDead(_842);
        _0 = std::result::Result::<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error>::Err(move _841);
        StorageDead(_841);
        StorageDead(_833);
        StorageDead(_832);
        goto -> bb631;
    }

    bb395: {
        StorageDead(_838);
        StorageDead(_837);
        StorageDead(_835);
        StorageDead(_834);
        _832 = const ();
        StorageDead(_833);
        StorageDead(_832);
        StorageLive(_861);
        StorageLive(_862);
        StorageLive(_863);
        StorageLive(_864);
        _864 = &_719;
        _863 = anchor_lang::prelude::Rent::minimum_balance(move _864, const _) -> [return: bb396, unwind: bb700];
    }

    bb396: {
        StorageDead(_864);
        _862 = <u64 as Ord>::max(move _863, const 1_u64) -> [return: bb397, unwind: bb700];
    }

    bb397: {
        StorageDead(_863);
        StorageLive(_865);
        _865 = _771;
        _861 = core::num::<impl u64>::saturating_sub(move _862, move _865) -> [return: bb398, unwind: bb700];
    }

    bb398: {
        StorageDead(_865);
        StorageDead(_862);
        StorageLive(_866);
        StorageLive(_867);
        StorageLive(_868);
        _868 = _861;
        _867 = Gt(move _868, const 0_u64);
        switchInt(move _867) -> [0: bb409, otherwise: bb399];
    }

    bb399: {
        StorageDead(_868);
        StorageLive(_869);
        StorageLive(_870);
        StorageLive(_871);
        _871 = &_6;
        _870 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _871) -> [return: bb400, unwind: bb700];
    }

    bb400: {
        StorageDead(_871);
        StorageLive(_872);
        StorageLive(_873);
        _873 = &(*_87);
        _872 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _873) -> [return: bb401, unwind: bb695];
    }

    bb401: {
        StorageDead(_873);
        _1361 = const true;
        _869 = anchor_lang::system_program::Transfer::<'_> { from: move _870, to: move _872 };
        StorageDead(_872);
        StorageDead(_870);
        StorageLive(_874);
        StorageLive(_875);
        StorageLive(_876);
        _876 = &_111;
        _875 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _876) -> [return: bb402, unwind: bb763];
    }

    bb402: {
        StorageDead(_876);
        StorageLive(_877);
        _1361 = const false;
        _877 = move _869;
        _874 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>::new(move _875, move _877) -> [return: bb403, unwind: bb763];
    }

    bb403: {
        StorageDead(_877);
        StorageDead(_875);
        StorageLive(_878);
        StorageLive(_879);
        StorageLive(_880);
        StorageLive(_881);
        _881 = move _874;
        StorageLive(_882);
        _882 = _861;
        _880 = anchor_lang::system_program::transfer(move _881, move _882) -> [return: bb404, unwind: bb763];
    }

    bb404: {
        StorageDead(_882);
        StorageDead(_881);
        _879 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _880) -> [return: bb405, unwind: bb763];
    }

    bb405: {
        StorageDead(_880);
        _883 = discriminant(_879);
        switchInt(move _883) -> [0: bb406, 1: bb407, otherwise: bb5];
    }

    bb406: {
        StorageLive(_887);
        _887 = ((_879 as Continue).0: ());
        _878 = _887;
        StorageDead(_887);
        _1451 = discriminant(_879);
        StorageDead(_879);
        StorageDead(_878);
        _866 = const ();
        StorageDead(_874);
        _1361 = const false;
        StorageDead(_869);
        goto -> bb410;
    }

    bb407: {
        StorageLive(_884);
        _884 = move ((_879 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_886);
        _886 = move _884;
        _0 = <std::result::Result<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _886) -> [return: bb408, unwind: bb761];
    }

    bb408: {
        StorageDead(_886);
        StorageDead(_884);
        _1493 = discriminant(_879);
        StorageDead(_879);
        StorageDead(_878);
        StorageDead(_874);
        _1361 = const false;
        StorageDead(_869);
        StorageDead(_867);
        StorageDead(_866);
        goto -> bb630;
    }

    bb409: {
        StorageDead(_868);
        _866 = const ();
        goto -> bb410;
    }

    bb410: {
        StorageDead(_867);
        StorageDead(_866);
        StorageLive(_888);
        StorageLive(_889);
        StorageLive(_890);
        _890 = &(*_87);
        _889 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _890) -> [return: bb411, unwind: bb700];
    }

    bb411: {
        StorageDead(_890);
        _1360 = const true;
        _888 = anchor_lang::system_program::Allocate::<'_> { account_to_allocate: move _889 };
        StorageDead(_889);
        StorageLive(_891);
        StorageLive(_892);
        StorageLive(_893);
        _893 = &_111;
        _892 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _893) -> [return: bb412, unwind: bb760];
    }

    bb412: {
        StorageDead(_893);
        StorageLive(_894);
        _1360 = const false;
        _894 = move _888;
        _891 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::new(move _892, move _894) -> [return: bb413, unwind: bb760];
    }

    bb413: {
        StorageDead(_894);
        StorageDead(_892);
        StorageLive(_895);
        StorageLive(_896);
        StorageLive(_897);
        StorageLive(_898);
        StorageLive(_899);
        _1359 = const true;
        _899 = move _891;
        StorageLive(_900);
        StorageLive(_901);
        StorageLive(_902);
        StorageLive(_903);
        StorageLive(_904);
        StorageLive(_905);
        StorageLive(_906);
        StorageLive(_907);
        StorageLive(_908);
        StorageLive(_909);
        StorageLive(_910);
        StorageLive(_911);
        _911 = const _;
        _910 = &(*_911);
        _909 = move _910 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_910);
        StorageLive(_912);
        StorageLive(_913);
        StorageLive(_914);
        StorageLive(_915);
        _915 = &(*_27);
        _914 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _915) -> [return: bb414, unwind: bb758];
    }

    bb414: {
        _913 = &_914;
        StorageDead(_915);
        _912 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _913) -> [return: bb415, unwind: bb758];
    }

    bb415: {
        StorageDead(_913);
        StorageLive(_916);
        StorageLive(_917);
        StorageLive(_918);
        StorageLive(_919);
        StorageLive(_920);
        StorageLive(_921);
        _921 = _728;
        _920 = [move _921];
        _919 = &_920;
        StorageDead(_921);
        StorageLive(_922);
        _922 = RangeFull;
        _918 = <[u8; 1] as Index<RangeFull>>::index(move _919, move _922) -> [return: bb416, unwind: bb758];
    }

    bb416: {
        StorageDead(_922);
        StorageDead(_919);
        _917 = &(*_918);
        _916 = &(*_917);
        _908 = [move _909, move _912, move _916];
        _907 = &_908;
        StorageDead(_916);
        StorageDead(_912);
        StorageDead(_909);
        StorageLive(_923);
        _923 = RangeFull;
        _906 = <[&[u8]; 3] as Index<RangeFull>>::index(move _907, move _923) -> [return: bb417, unwind: bb758];
    }

    bb417: {
        StorageDead(_923);
        StorageDead(_907);
        _905 = &(*_906);
        _904 = &(*_905);
        _903 = [move _904];
        StorageDead(_904);
        _902 = &_903;
        _901 = &(*_902);
        _900 = move _901 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_901);
        _1359 = const false;
        _898 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::with_signer(move _899, move _900) -> [return: bb418, unwind: bb758];
    }

    bb418: {
        StorageDead(_900);
        _1359 = const false;
        StorageDead(_899);
        StorageLive(_924);
        _924 = const _ as u64 (IntToInt);
        _897 = anchor_lang::system_program::allocate(move _898, move _924) -> [return: bb419, unwind: bb760];
    }

    bb419: {
        StorageDead(_924);
        StorageDead(_898);
        _896 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _897) -> [return: bb420, unwind: bb760];
    }

    bb420: {
        StorageDead(_897);
        _925 = discriminant(_896);
        switchInt(move _925) -> [0: bb421, 1: bb422, otherwise: bb5];
    }

    bb421: {
        StorageLive(_929);
        _929 = ((_896 as Continue).0: ());
        _895 = _929;
        StorageDead(_929);
        _1453 = discriminant(_896);
        StorageDead(_920);
        StorageDead(_918);
        StorageDead(_917);
        StorageDead(_914);
        StorageDead(_911);
        StorageDead(_908);
        StorageDead(_906);
        StorageDead(_905);
        StorageDead(_903);
        StorageDead(_902);
        StorageDead(_896);
        StorageDead(_895);
        StorageLive(_930);
        StorageLive(_931);
        StorageLive(_932);
        _932 = &(*_87);
        _931 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _932) -> [return: bb424, unwind: bb760];
    }

    bb422: {
        StorageLive(_926);
        _926 = move ((_896 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_928);
        _928 = move _926;
        _0 = <std::result::Result<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _928) -> [return: bb423, unwind: bb756];
    }

    bb423: {
        StorageDead(_928);
        StorageDead(_926);
        _1491 = discriminant(_896);
        StorageDead(_920);
        StorageDead(_918);
        StorageDead(_917);
        StorageDead(_914);
        StorageDead(_911);
        StorageDead(_908);
        StorageDead(_906);
        StorageDead(_905);
        StorageDead(_903);
        StorageDead(_902);
        StorageDead(_896);
        StorageDead(_895);
        goto -> bb629;
    }

    bb424: {
        StorageDead(_932);
        _1358 = const true;
        _930 = anchor_lang::system_program::Assign::<'_> { account_to_assign: move _931 };
        StorageDead(_931);
        StorageLive(_933);
        StorageLive(_934);
        StorageLive(_935);
        _935 = &_111;
        _934 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _935) -> [return: bb425, unwind: bb755];
    }

    bb425: {
        StorageDead(_935);
        StorageLive(_936);
        _1358 = const false;
        _936 = move _930;
        _933 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::new(move _934, move _936) -> [return: bb426, unwind: bb755];
    }

    bb426: {
        StorageDead(_936);
        StorageDead(_934);
        StorageLive(_937);
        StorageLive(_938);
        StorageLive(_939);
        StorageLive(_940);
        StorageLive(_941);
        _1357 = const true;
        _941 = move _933;
        StorageLive(_942);
        StorageLive(_943);
        StorageLive(_944);
        StorageLive(_945);
        StorageLive(_946);
        StorageLive(_947);
        StorageLive(_948);
        StorageLive(_949);
        StorageLive(_950);
        StorageLive(_951);
        StorageLive(_952);
        StorageLive(_953);
        _953 = const _;
        _952 = &(*_953);
        _951 = move _952 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_952);
        StorageLive(_954);
        StorageLive(_955);
        StorageLive(_956);
        StorageLive(_957);
        _957 = &(*_27);
        _956 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _957) -> [return: bb427, unwind: bb753];
    }

    bb427: {
        _955 = &_956;
        StorageDead(_957);
        _954 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _955) -> [return: bb428, unwind: bb753];
    }

    bb428: {
        StorageDead(_955);
        StorageLive(_958);
        StorageLive(_959);
        StorageLive(_960);
        StorageLive(_961);
        StorageLive(_962);
        StorageLive(_963);
        _963 = _728;
        _962 = [move _963];
        _961 = &_962;
        StorageDead(_963);
        StorageLive(_964);
        _964 = RangeFull;
        _960 = <[u8; 1] as Index<RangeFull>>::index(move _961, move _964) -> [return: bb429, unwind: bb753];
    }

    bb429: {
        StorageDead(_964);
        StorageDead(_961);
        _959 = &(*_960);
        _958 = &(*_959);
        _950 = [move _951, move _954, move _958];
        _949 = &_950;
        StorageDead(_958);
        StorageDead(_954);
        StorageDead(_951);
        StorageLive(_965);
        _965 = RangeFull;
        _948 = <[&[u8]; 3] as Index<RangeFull>>::index(move _949, move _965) -> [return: bb430, unwind: bb753];
    }

    bb430: {
        StorageDead(_965);
        StorageDead(_949);
        _947 = &(*_948);
        _946 = &(*_947);
        _945 = [move _946];
        StorageDead(_946);
        _944 = &_945;
        _943 = &(*_944);
        _942 = move _943 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_943);
        _1357 = const false;
        _940 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::with_signer(move _941, move _942) -> [return: bb431, unwind: bb753];
    }

    bb431: {
        _1356 = const true;
        StorageDead(_942);
        _1357 = const false;
        StorageDead(_941);
        StorageLive(_966);
        StorageLive(_967);
        StorageLive(_968);
        StorageLive(_969);
        StorageLive(_970);
        StorageLive(_971);
        _971 = &_156;
        _970 = <anchor_lang::prelude::Program<'_, Token> as Deref>::deref(move _971) -> [return: bb432, unwind: bb751];
    }

    bb432: {
        _969 = &(*_970);
        StorageDead(_971);
        _968 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _969) -> [return: bb433, unwind: bb751];
    }

    bb433: {
        StorageDead(_969);
        _967 = &_968;
        _966 = &(*_967);
        _1356 = const false;
        _939 = anchor_lang::system_program::assign(move _940, move _966) -> [return: bb434, unwind: bb751];
    }

    bb434: {
        StorageDead(_966);
        _1356 = const false;
        StorageDead(_940);
        _938 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _939) -> [return: bb435, unwind: bb755];
    }

    bb435: {
        StorageDead(_939);
        _972 = discriminant(_938);
        switchInt(move _972) -> [0: bb436, 1: bb437, otherwise: bb5];
    }

    bb436: {
        StorageLive(_976);
        _976 = ((_938 as Continue).0: ());
        _937 = _976;
        StorageDead(_976);
        _1455 = discriminant(_938);
        StorageDead(_970);
        StorageDead(_968);
        StorageDead(_967);
        StorageDead(_962);
        StorageDead(_960);
        StorageDead(_959);
        StorageDead(_956);
        StorageDead(_953);
        StorageDead(_950);
        StorageDead(_948);
        StorageDead(_947);
        StorageDead(_945);
        StorageDead(_944);
        StorageDead(_938);
        StorageDead(_937);
        _773 = const ();
        StorageDead(_933);
        _1358 = const false;
        StorageDead(_930);
        StorageDead(_891);
        _1360 = const false;
        StorageDead(_888);
        StorageDead(_861);
        goto -> bb439;
    }

    bb437: {
        StorageLive(_973);
        _973 = move ((_938 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_975);
        _975 = move _973;
        _0 = <std::result::Result<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _975) -> [return: bb438, unwind: bb749];
    }

    bb438: {
        StorageDead(_975);
        StorageDead(_973);
        _1489 = discriminant(_938);
        StorageDead(_970);
        StorageDead(_968);
        StorageDead(_967);
        StorageDead(_962);
        StorageDead(_960);
        StorageDead(_959);
        StorageDead(_956);
        StorageDead(_953);
        StorageDead(_950);
        StorageDead(_948);
        StorageDead(_947);
        StorageDead(_945);
        StorageDead(_944);
        StorageDead(_938);
        StorageDead(_937);
        StorageDead(_933);
        _1358 = const false;
        StorageDead(_930);
        goto -> bb629;
    }

    bb439: {
        StorageDead(_774);
        StorageDead(_773);
        StorageLive(_977);
        StorageLive(_978);
        _978 = &_156;
        _977 = <anchor_lang::prelude::Program<'_, Token> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _978) -> [return: bb440, unwind: bb700];
    }

    bb440: {
        _1355 = const true;
        StorageDead(_978);
        StorageLive(_979);
        StorageLive(_980);
        StorageLive(_981);
        _981 = &(*_87);
        _980 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _981) -> [return: bb441, unwind: bb748];
    }

    bb441: {
        StorageDead(_981);
        _979 = anchor_spl::token_2022::InitializeMint2::<'_> { mint: move _980 };
        StorageDead(_980);
        StorageLive(_982);
        StorageLive(_983);
        _1355 = const false;
        _983 = move _977;
        StorageLive(_984);
        _984 = move _979;
        _982 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_spl::token_2022::InitializeMint2<'_>>::new(move _983, move _984) -> [return: bb442, unwind: bb748];
    }

    bb442: {
        StorageDead(_984);
        StorageDead(_983);
        StorageLive(_985);
        StorageLive(_986);
        StorageLive(_987);
        StorageLive(_988);
        _1354 = const true;
        _988 = move _982;
        StorageLive(_989);
        StorageLive(_990);
        StorageLive(_991);
        StorageLive(_992);
        StorageLive(_993);
        _1608 = (((_66.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _993 = &(*_1608);
        _992 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as Deref>::deref(move _993) -> [return: bb443, unwind: bb746];
    }

    bb443: {
        _991 = &(*_992);
        _990 = <anchor_spl::token_interface::Mint as Deref>::deref(move _991) -> [return: bb444, unwind: bb746];
    }

    bb444: {
        StorageDead(_993);
        StorageDead(_991);
        _989 = ((*_990).2: u8);
        StorageLive(_994);
        StorageLive(_995);
        StorageLive(_996);
        StorageLive(_997);
        _997 = &_36;
        _996 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _997) -> [return: bb445, unwind: bb746];
    }

    bb445: {
        StorageDead(_997);
        _995 = &_996;
        _994 = &(*_995);
        StorageLive(_998);
        _998 = Option::<&anchor_lang::prelude::Pubkey>::None;
        _1354 = const false;
        _987 = anchor_spl::token_2022::initialize_mint2(move _988, move _989, move _994, move _998) -> [return: bb446, unwind: bb746];
    }

    bb446: {
        StorageDead(_998);
        StorageDead(_994);
        StorageDead(_989);
        _1354 = const false;
        StorageDead(_988);
        _986 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _987) -> [return: bb447, unwind: bb748];
    }

    bb447: {
        StorageDead(_987);
        _999 = discriminant(_986);
        switchInt(move _999) -> [0: bb448, 1: bb449, otherwise: bb5];
    }

    bb448: {
        StorageLive(_1003);
        _1003 = ((_986 as Continue).0: ());
        _985 = _1003;
        StorageDead(_1003);
        _1457 = discriminant(_986);
        StorageDead(_996);
        StorageDead(_995);
        StorageDead(_992);
        StorageDead(_990);
        StorageDead(_986);
        StorageDead(_985);
        _764 = const ();
        StorageDead(_982);
        StorageDead(_979);
        _1355 = const false;
        StorageDead(_977);
        StorageDead(_771);
        goto -> bb452;
    }

    bb449: {
        StorageLive(_1000);
        _1000 = move ((_986 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_1002);
        _1002 = move _1000;
        _0 = <std::result::Result<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _1002) -> [return: bb450, unwind: bb744];
    }

    bb450: {
        StorageDead(_1002);
        StorageDead(_1000);
        _1487 = discriminant(_986);
        StorageDead(_996);
        StorageDead(_995);
        StorageDead(_992);
        StorageDead(_990);
        StorageDead(_986);
        StorageDead(_985);
        StorageDead(_982);
        StorageDead(_979);
        _1355 = const false;
        StorageDead(_977);
        goto -> bb632;
    }

    bb451: {
        StorageDead(_768);
        StorageDead(_767);
        _764 = const ();
        goto -> bb452;
    }

    bb452: {
        StorageDead(_766);
        StorageDead(_765);
        StorageDead(_764);
        StorageLive(_1004);
        StorageLive(_1005);
        StorageLive(_1006);
        StorageLive(_1007);
        StorageLive(_1008);
        _1008 = &_87;
        _1341 = deref_copy (*_1008);
        _1007 = &(*_1341);
        _1006 = anchor_lang::prelude::InterfaceAccount::<'_, anchor_spl::token_interface::Mint>::try_from_unchecked(move _1007) -> [return: bb453, unwind: bb700];
    }

    bb453: {
        _1352 = const true;
        _1353 = const true;
        StorageDead(_1007);
        _1009 = discriminant(_1006);
        switchInt(move _1009) -> [0: bb455, 1: bb454, otherwise: bb5];
    }

    bb454: {
        StorageLive(_1011);
        _1011 = move ((_1006 as Err).0: anchor_lang::error::Error);
        StorageLive(_1013);
        StorageLive(_1014);
        _1014 = move _1011;
        _1013 = anchor_lang::error::Error::with_account_name::<&str>(move _1014, const "shares_mint") -> [return: bb456, unwind: bb743];
    }

    bb455: {
        StorageLive(_1010);
        _1010 = move ((_1006 as Ok).0: anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _1005 = move _1010;
        StorageDead(_1010);
        _1004 = Box::<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>::new(move _1005) -> [return: bb457, unwind: bb743];
    }

    bb456: {
        StorageDead(_1014);
        _0 = std::result::Result::<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error>::Err(move _1013);
        StorageDead(_1013);
        StorageDead(_1011);
        StorageDead(_1005);
        _1485 = discriminant(_1006);
        StorageDead(_1008);
        _1352 = const false;
        _1353 = const false;
        StorageDead(_1006);
        goto -> bb628;
    }

    bb457: {
        StorageDead(_1005);
        _1459 = discriminant(_1006);
        StorageDead(_1008);
        _1352 = const false;
        _1353 = const false;
        StorageDead(_1006);
        StorageLive(_1015);
        StorageLive(_1016);
        _1016 = const false;
        switchInt(move _1016) -> [0: bb500, otherwise: bb458];
    }

    bb458: {
        StorageLive(_1017);
        StorageLive(_1018);
        StorageLive(_1019);
        StorageLive(_1020);
        StorageLive(_1021);
        StorageLive(_1022);
        StorageLive(_1023);
        _1609 = (((_1004.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _1023 = &(*_1609);
        _1022 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as Deref>::deref(move _1023) -> [return: bb459, unwind: bb694];
    }

    bb459: {
        _1021 = &(*_1022);
        _1020 = <anchor_spl::token_interface::Mint as Deref>::deref(move _1021) -> [return: bb460, unwind: bb694];
    }

    bb460: {
        StorageDead(_1023);
        StorageDead(_1021);
        _1019 = &((*_1020).0: solana_program::program_option::COption<anchor_lang::prelude::Pubkey>);
        StorageLive(_1024);
        StorageLive(_1025);
        StorageLive(_1026);
        StorageLive(_1027);
        _1027 = &_36;
        _1026 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _1027) -> [return: bb461, unwind: bb694];
    }

    bb461: {
        StorageDead(_1027);
        _1025 = COption::<anchor_lang::prelude::Pubkey>::Some(move _1026);
        _1024 = &_1025;
        StorageDead(_1026);
        _1018 = <COption<anchor_lang::prelude::Pubkey> as PartialEq>::ne(move _1019, move _1024) -> [return: bb462, unwind: bb694];
    }

    bb462: {
        switchInt(move _1018) -> [0: bb466, otherwise: bb463];
    }

    bb463: {
        StorageDead(_1025);
        StorageDead(_1024);
        StorageDead(_1022);
        StorageDead(_1020);
        StorageDead(_1019);
        StorageLive(_1029);
        StorageLive(_1030);
        StorageLive(_1031);
        _1031 = ConstraintMintMintAuthority;
        _1030 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _1031) -> [return: bb464, unwind: bb694];
    }

    bb464: {
        StorageDead(_1031);
        _1029 = anchor_lang::error::Error::with_account_name::<&str>(move _1030, const "shares_mint") -> [return: bb465, unwind: bb694];
    }

    bb465: {
        StorageDead(_1030);
        _0 = std::result::Result::<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error>::Err(move _1029);
        StorageDead(_1029);
        StorageDead(_1018);
        StorageDead(_1017);
        goto -> bb627;
    }

    bb466: {
        StorageDead(_1025);
        StorageDead(_1024);
        StorageDead(_1022);
        StorageDead(_1020);
        StorageDead(_1019);
        _1017 = const ();
        StorageDead(_1018);
        StorageDead(_1017);
        StorageLive(_1032);
        StorageLive(_1033);
        StorageLive(_1034);
        StorageLive(_1035);
        StorageLive(_1036);
        StorageLive(_1037);
        StorageLive(_1038);
        StorageLive(_1039);
        StorageLive(_1040);
        _1610 = (((_1004.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _1040 = &(*_1610);
        _1039 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as Deref>::deref(move _1040) -> [return: bb467, unwind: bb694];
    }

    bb467: {
        _1038 = &(*_1039);
        _1037 = <anchor_spl::token_interface::Mint as Deref>::deref(move _1038) -> [return: bb468, unwind: bb694];
    }

    bb468: {
        StorageDead(_1040);
        StorageDead(_1038);
        _1036 = &((*_1037).4: solana_program::program_option::COption<anchor_lang::prelude::Pubkey>);
        _1035 = COption::<anchor_lang::prelude::Pubkey>::as_ref(move _1036) -> [return: bb469, unwind: bb694];
    }

    bb469: {
        StorageDead(_1036);
        StorageLive(_1041);
        _1041 = {closure@programs\kvault\src\handlers\handler_init_vault.rs:78:10: 78:18};
        _1034 = COption::<&anchor_lang::prelude::Pubkey>::map::<bool, {closure@programs\kvault\src\handlers\handler_init_vault.rs:78:10: 78:18}>(move _1035, move _1041) -> [return: bb470, unwind: bb694];
    }

    bb470: {
        StorageDead(_1041);
        StorageDead(_1035);
        StorageLive(_1042);
        StorageLive(_1043);
        _1315 = const _;
        _1043 = &(*_1315);
        _1042 = Option::<&anchor_lang::prelude::Pubkey>::is_some(move _1043) -> [return: bb471, unwind: bb694];
    }

    bb471: {
        StorageDead(_1043);
        _1033 = COption::<bool>::unwrap_or(move _1034, move _1042) -> [return: bb472, unwind: bb694];
    }

    bb472: {
        switchInt(move _1033) -> [0: bb476, otherwise: bb473];
    }

    bb473: {
        StorageDead(_1042);
        StorageDead(_1039);
        StorageDead(_1037);
        StorageDead(_1034);
        StorageLive(_1046);
        StorageLive(_1047);
        StorageLive(_1048);
        _1048 = ConstraintMintFreezeAuthority;
        _1047 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _1048) -> [return: bb474, unwind: bb694];
    }

    bb474: {
        StorageDead(_1048);
        _1046 = anchor_lang::error::Error::with_account_name::<&str>(move _1047, const "shares_mint") -> [return: bb475, unwind: bb694];
    }

    bb475: {
        StorageDead(_1047);
        _0 = std::result::Result::<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error>::Err(move _1046);
        StorageDead(_1046);
        StorageDead(_1033);
        StorageDead(_1032);
        goto -> bb627;
    }

    bb476: {
        StorageDead(_1042);
        StorageDead(_1039);
        StorageDead(_1037);
        StorageDead(_1034);
        _1032 = const ();
        StorageDead(_1033);
        StorageDead(_1032);
        StorageLive(_1049);
        StorageLive(_1050);
        StorageLive(_1051);
        StorageLive(_1052);
        StorageLive(_1053);
        StorageLive(_1054);
        StorageLive(_1055);
        _1611 = (((_1004.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _1055 = &(*_1611);
        _1054 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as Deref>::deref(move _1055) -> [return: bb477, unwind: bb694];
    }

    bb477: {
        _1053 = &(*_1054);
        _1052 = <anchor_spl::token_interface::Mint as Deref>::deref(move _1053) -> [return: bb478, unwind: bb694];
    }

    bb478: {
        StorageDead(_1055);
        StorageDead(_1053);
        _1051 = ((*_1052).2: u8);
        StorageLive(_1056);
        StorageLive(_1057);
        StorageLive(_1058);
        StorageLive(_1059);
        StorageLive(_1060);
        _1612 = (((_66.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _1060 = &(*_1612);
        _1059 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as Deref>::deref(move _1060) -> [return: bb479, unwind: bb694];
    }

    bb479: {
        _1058 = &(*_1059);
        _1057 = <anchor_spl::token_interface::Mint as Deref>::deref(move _1058) -> [return: bb480, unwind: bb694];
    }

    bb480: {
        StorageDead(_1060);
        StorageDead(_1058);
        _1056 = ((*_1057).2: u8);
        _1050 = Ne(move _1051, move _1056);
        switchInt(move _1050) -> [0: bb489, otherwise: bb481];
    }

    bb481: {
        StorageDead(_1059);
        StorageDead(_1057);
        StorageDead(_1056);
        StorageDead(_1054);
        StorageDead(_1052);
        StorageDead(_1051);
        StorageLive(_1062);
        StorageLive(_1063);
        StorageLive(_1064);
        StorageLive(_1065);
        _1065 = ConstraintMintDecimals;
        _1064 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _1065) -> [return: bb482, unwind: bb694];
    }

    bb482: {
        StorageDead(_1065);
        _1063 = anchor_lang::error::Error::with_account_name::<&str>(move _1064, const "shares_mint") -> [return: bb483, unwind: bb694];
    }

    bb483: {
        _1351 = const true;
        StorageDead(_1064);
        StorageLive(_1066);
        StorageLive(_1067);
        StorageLive(_1068);
        StorageLive(_1069);
        StorageLive(_1070);
        StorageLive(_1071);
        _1613 = (((_1004.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _1071 = &(*_1613);
        _1070 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as Deref>::deref(move _1071) -> [return: bb484, unwind: bb742];
    }

    bb484: {
        _1069 = &(*_1070);
        _1068 = <anchor_spl::token_interface::Mint as Deref>::deref(move _1069) -> [return: bb485, unwind: bb742];
    }

    bb485: {
        StorageDead(_1071);
        StorageDead(_1069);
        _1067 = ((*_1068).2: u8);
        StorageLive(_1072);
        StorageLive(_1073);
        StorageLive(_1074);
        StorageLive(_1075);
        StorageLive(_1076);
        _1614 = (((_66.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _1076 = &(*_1614);
        _1075 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as Deref>::deref(move _1076) -> [return: bb486, unwind: bb742];
    }

    bb486: {
        _1074 = &(*_1075);
        _1073 = <anchor_spl::token_interface::Mint as Deref>::deref(move _1074) -> [return: bb487, unwind: bb742];
    }

    bb487: {
        StorageDead(_1076);
        StorageDead(_1074);
        _1072 = ((*_1073).2: u8);
        _1066 = (move _1067, move _1072);
        StorageDead(_1072);
        StorageDead(_1067);
        _1351 = const false;
        _1062 = anchor_lang::error::Error::with_values::<u8, u8>(move _1063, move _1066) -> [return: bb488, unwind: bb742];
    }

    bb488: {
        StorageDead(_1066);
        _1351 = const false;
        StorageDead(_1063);
        _0 = std::result::Result::<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error>::Err(move _1062);
        StorageDead(_1062);
        StorageDead(_1075);
        StorageDead(_1073);
        StorageDead(_1070);
        StorageDead(_1068);
        StorageDead(_1050);
        StorageDead(_1049);
        goto -> bb627;
    }

    bb489: {
        StorageDead(_1059);
        StorageDead(_1057);
        StorageDead(_1056);
        StorageDead(_1054);
        StorageDead(_1052);
        StorageDead(_1051);
        _1049 = const ();
        StorageDead(_1050);
        StorageDead(_1049);
        StorageLive(_1077);
        StorageLive(_1078);
        _1078 = &_760;
        StorageLive(_1079);
        StorageLive(_1080);
        StorageLive(_1081);
        StorageLive(_1082);
        StorageLive(_1083);
        StorageLive(_1084);
        _1084 = &_156;
        _1083 = <anchor_lang::prelude::Program<'_, Token> as Deref>::deref(move _1084) -> [return: bb490, unwind: bb694];
    }

    bb490: {
        _1082 = &(*_1083);
        StorageDead(_1084);
        _1081 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _1082) -> [return: bb491, unwind: bb694];
    }

    bb491: {
        StorageDead(_1082);
        _1080 = &_1081;
        _1079 = &_1080;
        _1077 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _1078, move _1079) -> [return: bb492, unwind: bb694];
    }

    bb492: {
        switchInt(move _1077) -> [0: bb499, otherwise: bb493];
    }

    bb493: {
        StorageDead(_1083);
        StorageDead(_1081);
        StorageDead(_1080);
        StorageDead(_1079);
        StorageDead(_1078);
        StorageLive(_1086);
        StorageLive(_1087);
        StorageLive(_1088);
        StorageLive(_1089);
        _1089 = ConstraintMintTokenProgram;
        _1088 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _1089) -> [return: bb494, unwind: bb694];
    }

    bb494: {
        StorageDead(_1089);
        _1087 = anchor_lang::error::Error::with_account_name::<&str>(move _1088, const "shares_mint") -> [return: bb495, unwind: bb694];
    }

    bb495: {
        _1350 = const true;
        StorageDead(_1088);
        StorageLive(_1090);
        StorageLive(_1091);
        _1091 = (*_760);
        StorageLive(_1092);
        StorageLive(_1093);
        StorageLive(_1094);
        StorageLive(_1095);
        _1095 = &_156;
        _1094 = <anchor_lang::prelude::Program<'_, Token> as Deref>::deref(move _1095) -> [return: bb496, unwind: bb740];
    }

    bb496: {
        _1093 = &(*_1094);
        StorageDead(_1095);
        _1092 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _1093) -> [return: bb497, unwind: bb740];
    }

    bb497: {
        StorageDead(_1093);
        _1090 = (move _1091, move _1092);
        StorageDead(_1092);
        StorageDead(_1091);
        _1350 = const false;
        _1086 = anchor_lang::error::Error::with_pubkeys(move _1087, move _1090) -> [return: bb498, unwind: bb740];
    }

    bb498: {
        StorageDead(_1090);
        _1350 = const false;
        StorageDead(_1087);
        _0 = std::result::Result::<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error>::Err(move _1086);
        StorageDead(_1086);
        StorageDead(_1094);
        StorageDead(_1077);
        goto -> bb627;
    }

    bb499: {
        StorageDead(_1083);
        StorageDead(_1081);
        StorageDead(_1080);
        StorageDead(_1079);
        StorageDead(_1078);
        _1015 = const ();
        StorageDead(_1077);
        goto -> bb501;
    }

    bb500: {
        _1015 = const ();
        goto -> bb501;
    }

    bb501: {
        StorageDead(_1016);
        StorageDead(_1015);
        _759 = move _1004;
        StorageDead(_1004);
        StorageDead(_760);
        StorageLive(_1096);
        StorageLive(_1097);
        StorageLive(_1098);
        StorageLive(_1099);
        StorageLive(_1100);
        StorageLive(_1101);
        _1101 = &_759;
        _1100 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>::as_ref(move _1101) -> [return: bb502, unwind: bb693];
    }

    bb502: {
        _1099 = &(*_1100);
        StorageDead(_1101);
        _1098 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _1099) -> [return: bb503, unwind: bb693];
    }

    bb503: {
        StorageDead(_1099);
        _1097 = ((*_1098).6: bool);
        switchInt(move _1097) -> [0: bb504, otherwise: bb507];
    }

    bb504: {
        StorageDead(_1100);
        StorageDead(_1098);
        StorageLive(_1103);
        StorageLive(_1104);
        StorageLive(_1105);
        _1105 = ConstraintMut;
        _1104 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _1105) -> [return: bb505, unwind: bb693];
    }

    bb505: {
        StorageDead(_1105);
        _1103 = anchor_lang::error::Error::with_account_name::<&str>(move _1104, const "shares_mint") -> [return: bb506, unwind: bb693];
    }

    bb506: {
        StorageDead(_1104);
        _0 = std::result::Result::<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error>::Err(move _1103);
        StorageDead(_1103);
        StorageDead(_1097);
        StorageDead(_1096);
        goto -> bb626;
    }

    bb507: {
        StorageDead(_1100);
        StorageDead(_1098);
        _1096 = const ();
        StorageDead(_1097);
        StorageDead(_1096);
        StorageLive(_1106);
        StorageLive(_1107);
        StorageLive(_1108);
        _1108 = &_719;
        StorageLive(_1109);
        StorageLive(_1110);
        StorageLive(_1111);
        StorageLive(_1112);
        _1615 = (((_759.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _1112 = &(*_1615);
        _1111 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1112) -> [return: bb508, unwind: bb693];
    }

    bb508: {
        _1110 = &_1111;
        StorageDead(_1112);
        _1109 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _1110) -> [return: bb509, unwind: bb692];
    }

    bb509: {
        StorageDead(_1110);
        StorageLive(_1113);
        StorageLive(_1114);
        StorageLive(_1115);
        StorageLive(_1116);
        StorageLive(_1117);
        StorageLive(_1118);
        _1616 = (((_759.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _1118 = &(*_1616);
        _1117 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1118) -> [return: bb510, unwind: bb692];
    }

    bb510: {
        _1116 = &_1117;
        StorageDead(_1118);
        _1115 = anchor_lang::prelude::AccountInfo::<'_>::try_data_len(move _1116) -> [return: bb511, unwind: bb691];
    }

    bb511: {
        StorageDead(_1116);
        _1114 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _1115) -> [return: bb512, unwind: bb691];
    }

    bb512: {
        _1349 = const true;
        StorageDead(_1115);
        _1119 = discriminant(_1114);
        switchInt(move _1119) -> [0: bb513, 1: bb514, otherwise: bb5];
    }

    bb513: {
        StorageLive(_1123);
        _1123 = ((_1114 as Continue).0: usize);
        _1113 = _1123;
        StorageDead(_1123);
        _1107 = anchor_lang::prelude::Rent::is_exempt(move _1108, move _1109, move _1113) -> [return: bb516, unwind: bb738];
    }

    bb514: {
        StorageLive(_1120);
        _1120 = move ((_1114 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_1122);
        _1122 = move _1120;
        _0 = <std::result::Result<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _1122) -> [return: bb515, unwind: bb738];
    }

    bb515: {
        StorageDead(_1122);
        StorageDead(_1120);
        StorageDead(_1113);
        StorageDead(_1109);
        StorageDead(_1108);
        _1483 = discriminant(_1114);
        drop(_1117) -> [return: bb623, unwind: bb692];
    }

    bb516: {
        switchInt(move _1107) -> [0: bb518, otherwise: bb517];
    }

    bb517: {
        StorageDead(_1113);
        StorageDead(_1109);
        StorageDead(_1108);
        _1461 = discriminant(_1114);
        drop(_1117) -> [return: bb523, unwind: bb692];
    }

    bb518: {
        StorageDead(_1113);
        StorageDead(_1109);
        StorageDead(_1108);
        _1463 = discriminant(_1114);
        drop(_1117) -> [return: bb519, unwind: bb692];
    }

    bb519: {
        StorageDead(_1117);
        _1349 = const false;
        StorageDead(_1114);
        drop(_1111) -> [return: bb520, unwind: bb693];
    }

    bb520: {
        StorageDead(_1111);
        StorageLive(_1125);
        StorageLive(_1126);
        StorageLive(_1127);
        _1127 = ConstraintRentExempt;
        _1126 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _1127) -> [return: bb521, unwind: bb693];
    }

    bb521: {
        StorageDead(_1127);
        _1125 = anchor_lang::error::Error::with_account_name::<&str>(move _1126, const "shares_mint") -> [return: bb522, unwind: bb693];
    }

    bb522: {
        StorageDead(_1126);
        _0 = std::result::Result::<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error>::Err(move _1125);
        StorageDead(_1125);
        goto -> bb625;
    }

    bb523: {
        StorageDead(_1117);
        _1349 = const false;
        StorageDead(_1114);
        drop(_1111) -> [return: bb524, unwind: bb693];
    }

    bb524: {
        StorageDead(_1111);
        _1106 = const ();
        StorageDead(_1107);
        StorageDead(_1106);
        StorageLive(_1128);
        StorageLive(_1129);
        StorageLive(_1130);
        StorageLive(_1131);
        StorageLive(_1132);
        _1132 = &_6;
        _1131 = &(*_1132);
        _1130 = <anchor_lang::prelude::Signer<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _1131) -> [return: bb525, unwind: bb693];
    }

    bb525: {
        StorageDead(_1131);
        _1129 = ((*_1130).6: bool);
        switchInt(move _1129) -> [0: bb526, otherwise: bb529];
    }

    bb526: {
        StorageDead(_1132);
        StorageDead(_1130);
        StorageLive(_1134);
        StorageLive(_1135);
        StorageLive(_1136);
        _1136 = ConstraintMut;
        _1135 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _1136) -> [return: bb527, unwind: bb693];
    }

    bb527: {
        StorageDead(_1136);
        _1134 = anchor_lang::error::Error::with_account_name::<&str>(move _1135, const "admin_authority") -> [return: bb528, unwind: bb693];
    }

    bb528: {
        StorageDead(_1135);
        _0 = std::result::Result::<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error>::Err(move _1134);
        StorageDead(_1134);
        StorageDead(_1129);
        StorageDead(_1128);
        goto -> bb626;
    }

    bb529: {
        StorageDead(_1132);
        StorageDead(_1130);
        _1128 = const ();
        StorageDead(_1129);
        StorageDead(_1128);
        StorageLive(_1137);
        StorageLive(_1138);
        StorageLive(_1139);
        _1139 = <anchor_lang::prelude::Rent as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb530, unwind: bb693];
    }

    bb530: {
        _1138 = <std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError> as Try>::branch(move _1139) -> [return: bb531, unwind: bb693];
    }

    bb531: {
        StorageDead(_1139);
        _1140 = discriminant(_1138);
        switchInt(move _1140) -> [0: bb532, 1: bb533, otherwise: bb5];
    }

    bb532: {
        StorageLive(_1144);
        _1144 = ((_1138 as Continue).0: anchor_lang::prelude::Rent);
        _1137 = _1144;
        StorageDead(_1144);
        _1465 = discriminant(_1138);
        StorageDead(_1138);
        StorageLive(_1145);
        StorageLive(_1146);
        StorageLive(_1147);
        StorageLive(_1148);
        StorageLive(_1149);
        StorageLive(_1150);
        StorageLive(_1151);
        StorageLive(_1152);
        StorageLive(_1153);
        _1153 = &(*_27);
        _1152 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _1153) -> [return: bb535, unwind: bb693];
    }

    bb533: {
        StorageLive(_1141);
        _1141 = move ((_1138 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_1143);
        _1143 = move _1141;
        _0 = <std::result::Result<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _1143) -> [return: bb534, unwind: bb737];
    }

    bb534: {
        StorageDead(_1143);
        StorageDead(_1141);
        _1481 = discriminant(_1138);
        StorageDead(_1138);
        goto -> bb622;
    }

    bb535: {
        StorageDead(_1153);
        _1151 = <std::result::Result<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError> as Try>::branch(move _1152) -> [return: bb536, unwind: bb693];
    }

    bb536: {
        StorageDead(_1152);
        _1154 = discriminant(_1151);
        switchInt(move _1154) -> [0: bb537, 1: bb538, otherwise: bb5];
    }

    bb537: {
        StorageLive(_1158);
        _1158 = move ((_1151 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _1150 = move _1158;
        StorageDead(_1158);
        _1149 = &_1150;
        _1148 = &(*_1149);
        _1147 = <Ref<'_, &mut [u8]> as Deref>::deref(move _1148) -> [return: bb540, unwind: bb689];
    }

    bb538: {
        StorageLive(_1155);
        _1155 = move ((_1151 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_1157);
        _1157 = move _1155;
        _0 = <std::result::Result<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _1157) -> [return: bb539, unwind: bb736];
    }

    bb539: {
        StorageDead(_1157);
        StorageDead(_1155);
        StorageDead(_1148);
        _1479 = discriminant(_1151);
        StorageDead(_1151);
        StorageDead(_1149);
        StorageDead(_1147);
        goto -> bb620;
    }

    bb540: {
        _1342 = deref_copy (*_1147);
        _1146 = &(*_1342);
        StorageDead(_1148);
        _1467 = discriminant(_1151);
        StorageDead(_1151);
        StorageDead(_1149);
        StorageDead(_1147);
        StorageLive(_1159);
        _1159 = [const 0_u8; 8];
        StorageLive(_1160);
        StorageLive(_1161);
        StorageLive(_1162);
        _1162 = &mut _1159;
        _1161 = move _1162 as &mut [u8] (PointerCoercion(Unsize));
        StorageDead(_1162);
        StorageLive(_1163);
        StorageLive(_1164);
        StorageLive(_1165);
        StorageLive(_1166);
        _1166 = &(*_1146);
        StorageLive(_1167);
        _1167 = RangeTo::<usize> { end: const 8_usize };
        _1165 = <[u8] as Index<RangeTo<usize>>>::index(move _1166, move _1167) -> [return: bb541, unwind: bb690];
    }

    bb541: {
        StorageDead(_1167);
        StorageDead(_1166);
        _1164 = &(*_1165);
        _1163 = &(*_1164);
        _1160 = core::slice::<impl [u8]>::copy_from_slice(move _1161, move _1163) -> [return: bb542, unwind: bb690];
    }

    bb542: {
        StorageDead(_1163);
        StorageDead(_1161);
        StorageDead(_1165);
        StorageDead(_1164);
        StorageDead(_1160);
        StorageLive(_1168);
        StorageLive(_1169);
        _1169 = _1159;
        _1168 = core::num::<impl u64>::from_le_bytes(move _1169) -> [return: bb543, unwind: bb690];
    }

    bb543: {
        StorageDead(_1169);
        StorageLive(_1170);
        StorageLive(_1171);
        StorageLive(_1172);
        _1172 = _1168;
        _1171 = Ne(move _1172, const 0_u64);
        switchInt(move _1171) -> [0: bb547, otherwise: bb544];
    }

    bb544: {
        StorageDead(_1172);
        StorageLive(_1174);
        StorageLive(_1175);
        StorageLive(_1176);
        _1176 = ConstraintZero;
        _1175 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _1176) -> [return: bb545, unwind: bb690];
    }

    bb545: {
        StorageDead(_1176);
        _1174 = anchor_lang::error::Error::with_account_name::<&str>(move _1175, const "vault_state") -> [return: bb546, unwind: bb690];
    }

    bb546: {
        StorageDead(_1175);
        _0 = std::result::Result::<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error>::Err(move _1174);
        StorageDead(_1174);
        StorageDead(_1171);
        StorageDead(_1170);
        StorageDead(_1168);
        StorageDead(_1159);
        drop(_1150) -> [return: bb620, unwind: bb693];
    }

    bb547: {
        StorageDead(_1172);
        _1170 = const ();
        StorageDead(_1171);
        StorageDead(_1170);
        StorageLive(_1177);
        StorageLive(_1178);
        _1178 = &(*_1);
        StorageLive(_1179);
        StorageLive(_1180);
        _1180 = &_27;
        _1343 = deref_copy (*_1180);
        _1179 = &(*_1343);
        _1177 = anchor_lang::prelude::AccountLoader::<'_, state::VaultState>::try_from_unchecked(move _1178, move _1179) -> [return: bb548, unwind: bb690];
    }

    bb548: {
        _1347 = const true;
        _1348 = const true;
        StorageDead(_1179);
        StorageDead(_1178);
        _1181 = discriminant(_1177);
        switchInt(move _1181) -> [0: bb550, 1: bb549, otherwise: bb5];
    }

    bb549: {
        StorageLive(_1183);
        _1183 = move ((_1177 as Err).0: anchor_lang::error::Error);
        StorageLive(_1185);
        StorageLive(_1186);
        _1186 = move _1183;
        _1185 = anchor_lang::error::Error::with_account_name::<&str>(move _1186, const "vault_state") -> [return: bb551, unwind: bb688];
    }

    bb550: {
        StorageLive(_1182);
        _1182 = move ((_1177 as Ok).0: anchor_lang::prelude::AccountLoader<'_, state::VaultState>);
        _1145 = move _1182;
        StorageDead(_1182);
        StorageDead(_1168);
        StorageDead(_1159);
        drop(_1150) -> [return: bb552, unwind: bb735];
    }

    bb551: {
        StorageDead(_1186);
        _0 = std::result::Result::<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error>::Err(move _1185);
        StorageDead(_1185);
        StorageDead(_1183);
        StorageDead(_1168);
        StorageDead(_1159);
        drop(_1150) -> [return: bb619, unwind: bb735];
    }

    bb552: {
        StorageDead(_1150);
        StorageDead(_1146);
        _1469 = discriminant(_1177);
        StorageDead(_1180);
        _1347 = const false;
        _1348 = const false;
        StorageDead(_1177);
        StorageLive(_1187);
        StorageLive(_1188);
        StorageLive(_1189);
        StorageLive(_1190);
        StorageLive(_1191);
        _1191 = &_1145;
        _1190 = &(*_1191);
        _1189 = <anchor_lang::prelude::AccountLoader<'_, state::VaultState> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _1190) -> [return: bb553, unwind: bb693];
    }

    bb553: {
        StorageDead(_1190);
        _1188 = ((*_1189).6: bool);
        switchInt(move _1188) -> [0: bb554, otherwise: bb557];
    }

    bb554: {
        StorageDead(_1191);
        StorageDead(_1189);
        StorageLive(_1193);
        StorageLive(_1194);
        StorageLive(_1195);
        _1195 = ConstraintMut;
        _1194 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _1195) -> [return: bb555, unwind: bb693];
    }

    bb555: {
        StorageDead(_1195);
        _1193 = anchor_lang::error::Error::with_account_name::<&str>(move _1194, const "vault_state") -> [return: bb556, unwind: bb693];
    }

    bb556: {
        StorageDead(_1194);
        _0 = std::result::Result::<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error>::Err(move _1193);
        StorageDead(_1193);
        StorageDead(_1188);
        StorageDead(_1187);
        goto -> bb621;
    }

    bb557: {
        StorageDead(_1191);
        StorageDead(_1189);
        _1187 = const ();
        StorageDead(_1188);
        StorageDead(_1187);
        StorageLive(_1196);
        StorageLive(_1197);
        StorageLive(_1198);
        _1198 = &_1137;
        StorageLive(_1199);
        StorageLive(_1200);
        StorageLive(_1201);
        StorageLive(_1202);
        _1202 = &_1145;
        _1201 = <anchor_lang::prelude::AccountLoader<'_, state::VaultState> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1202) -> [return: bb558, unwind: bb693];
    }

    bb558: {
        _1200 = &_1201;
        StorageDead(_1202);
        _1199 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _1200) -> [return: bb559, unwind: bb687];
    }

    bb559: {
        StorageDead(_1200);
        StorageLive(_1203);
        StorageLive(_1204);
        StorageLive(_1205);
        StorageLive(_1206);
        StorageLive(_1207);
        StorageLive(_1208);
        _1208 = &_1145;
        _1207 = <anchor_lang::prelude::AccountLoader<'_, state::VaultState> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1208) -> [return: bb560, unwind: bb687];
    }

    bb560: {
        _1206 = &_1207;
        StorageDead(_1208);
        _1205 = anchor_lang::prelude::AccountInfo::<'_>::try_data_len(move _1206) -> [return: bb561, unwind: bb686];
    }

    bb561: {
        StorageDead(_1206);
        _1204 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _1205) -> [return: bb562, unwind: bb686];
    }

    bb562: {
        _1346 = const true;
        StorageDead(_1205);
        _1209 = discriminant(_1204);
        switchInt(move _1209) -> [0: bb563, 1: bb564, otherwise: bb5];
    }

    bb563: {
        StorageLive(_1213);
        _1213 = ((_1204 as Continue).0: usize);
        _1203 = _1213;
        StorageDead(_1213);
        _1197 = anchor_lang::prelude::Rent::is_exempt(move _1198, move _1199, move _1203) -> [return: bb566, unwind: bb734];
    }

    bb564: {
        StorageLive(_1210);
        _1210 = move ((_1204 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_1212);
        _1212 = move _1210;
        _0 = <std::result::Result<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _1212) -> [return: bb565, unwind: bb734];
    }

    bb565: {
        StorageDead(_1212);
        StorageDead(_1210);
        StorageDead(_1203);
        StorageDead(_1199);
        StorageDead(_1198);
        _1475 = discriminant(_1204);
        drop(_1207) -> [return: bb616, unwind: bb687];
    }

    bb566: {
        switchInt(move _1197) -> [0: bb568, otherwise: bb567];
    }

    bb567: {
        StorageDead(_1203);
        StorageDead(_1199);
        StorageDead(_1198);
        _1471 = discriminant(_1204);
        drop(_1207) -> [return: bb573, unwind: bb687];
    }

    bb568: {
        StorageDead(_1203);
        StorageDead(_1199);
        StorageDead(_1198);
        _1473 = discriminant(_1204);
        drop(_1207) -> [return: bb569, unwind: bb687];
    }

    bb569: {
        StorageDead(_1207);
        _1346 = const false;
        StorageDead(_1204);
        drop(_1201) -> [return: bb570, unwind: bb693];
    }

    bb570: {
        StorageDead(_1201);
        StorageLive(_1215);
        StorageLive(_1216);
        StorageLive(_1217);
        _1217 = ConstraintRentExempt;
        _1216 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _1217) -> [return: bb571, unwind: bb693];
    }

    bb571: {
        StorageDead(_1217);
        _1215 = anchor_lang::error::Error::with_account_name::<&str>(move _1216, const "vault_state") -> [return: bb572, unwind: bb693];
    }

    bb572: {
        StorageDead(_1216);
        _0 = std::result::Result::<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error>::Err(move _1215);
        StorageDead(_1215);
        goto -> bb618;
    }

    bb573: {
        StorageDead(_1207);
        _1346 = const false;
        StorageDead(_1204);
        drop(_1201) -> [return: bb574, unwind: bb693];
    }

    bb574: {
        StorageDead(_1201);
        _1196 = const ();
        StorageDead(_1197);
        StorageDead(_1196);
        StorageLive(_1220);
        StorageLive(_1221);
        StorageLive(_1222);
        StorageLive(_1223);
        StorageLive(_1224);
        StorageLive(_1225);
        StorageLive(_1226);
        StorageLive(_1227);
        _1227 = const _;
        _1226 = &(*_1227);
        _1225 = move _1226 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_1226);
        StorageLive(_1228);
        StorageLive(_1229);
        StorageLive(_1230);
        StorageLive(_1231);
        StorageLive(_1232);
        _1232 = &_1145;
        _1231 = <anchor_lang::prelude::AccountLoader<'_, state::VaultState> as anchor_lang::Key>::key(move _1232) -> [return: bb575, unwind: bb693];
    }

    bb575: {
        _1230 = &_1231;
        StorageDead(_1232);
        _1229 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _1230) -> [return: bb576, unwind: bb693];
    }

    bb576: {
        _1228 = &(*_1229);
        StorageDead(_1230);
        _1224 = [move _1225, move _1228];
        StorageDead(_1228);
        StorageDead(_1225);
        _1223 = &_1224;
        _1222 = &(*_1223);
        _1221 = move _1222 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_1222);
        StorageLive(_1233);
        StorageLive(_1234);
        _1234 = &_1;
        _1344 = deref_copy (*_1234);
        _1233 = &(*_1344);
        _1220 = anchor_lang::prelude::Pubkey::find_program_address(move _1221, move _1233) -> [return: bb577, unwind: bb693];
    }

    bb577: {
        StorageDead(_1233);
        StorageDead(_1221);
        StorageLive(_1218);
        _1218 = (_1220.0: anchor_lang::prelude::Pubkey);
        StorageLive(_1219);
        _1219 = (_1220.1: u8);
        StorageDead(_1234);
        StorageDead(_1231);
        StorageDead(_1229);
        StorageDead(_1227);
        StorageDead(_1224);
        StorageDead(_1223);
        StorageDead(_1220);
        StorageLive(_1235);
        _1235 = _1219;
        ((*_4).0: u8) = move _1235;
        StorageDead(_1235);
        StorageLive(_1236);
        StorageLive(_1237);
        StorageLive(_1238);
        StorageLive(_1239);
        StorageLive(_1240);
        _1240 = &_36;
        _1239 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _1240) -> [return: bb578, unwind: bb693];
    }

    bb578: {
        _1238 = &_1239;
        StorageDead(_1240);
        StorageLive(_1241);
        _1241 = &_1218;
        _1237 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _1238, move _1241) -> [return: bb579, unwind: bb693];
    }

    bb579: {
        switchInt(move _1237) -> [0: bb585, otherwise: bb580];
    }

    bb580: {
        StorageDead(_1241);
        StorageDead(_1239);
        StorageDead(_1238);
        StorageLive(_1243);
        StorageLive(_1244);
        StorageLive(_1245);
        StorageLive(_1246);
        _1246 = ConstraintSeeds;
        _1245 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _1246) -> [return: bb581, unwind: bb693];
    }

    bb581: {
        StorageDead(_1246);
        _1244 = anchor_lang::error::Error::with_account_name::<&str>(move _1245, const "base_vault_authority") -> [return: bb582, unwind: bb693];
    }

    bb582: {
        _1345 = const true;
        StorageDead(_1245);
        StorageLive(_1247);
        StorageLive(_1248);
        StorageLive(_1249);
        _1249 = &_36;
        _1248 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _1249) -> [return: bb583, unwind: bb733];
    }

    bb583: {
        StorageDead(_1249);
        StorageLive(_1250);
        _1250 = _1218;
        _1247 = (move _1248, move _1250);
        StorageDead(_1250);
        StorageDead(_1248);
        _1345 = const false;
        _1243 = anchor_lang::error::Error::with_pubkeys(move _1244, move _1247) -> [return: bb584, unwind: bb733];
    }

    bb584: {
        StorageDead(_1247);
        _1345 = const false;
        StorageDead(_1244);
        _0 = std::result::Result::<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error>::Err(move _1243);
        StorageDead(_1243);
        StorageDead(_1237);
        StorageDead(_1236);
        goto -> bb615;
    }

    bb585: {
        StorageDead(_1241);
        StorageDead(_1239);
        StorageDead(_1238);
        _1236 = const ();
        StorageDead(_1237);
        StorageDead(_1236);
        StorageLive(_1251);
        StorageLive(_1252);
        StorageLive(_1253);
        StorageLive(_1254);
        StorageLive(_1255);
        StorageLive(_1256);
        StorageLive(_1257);
        _1257 = &_66;
        _1256 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>::as_ref(move _1257) -> [return: bb586, unwind: bb693];
    }

    bb586: {
        _1255 = &(*_1256);
        StorageDead(_1257);
        _1254 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _1255) -> [return: bb587, unwind: bb693];
    }

    bb587: {
        StorageDead(_1255);
        _1253 = &((*_1254).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_1258);
        StorageLive(_1259);
        StorageLive(_1260);
        StorageLive(_1261);
        StorageLive(_1262);
        StorageLive(_1263);
        _1263 = &_141;
        _1262 = <anchor_lang::prelude::Interface<'_, TokenInterface> as Deref>::deref(move _1263) -> [return: bb588, unwind: bb693];
    }

    bb588: {
        _1261 = &(*_1262);
        StorageDead(_1263);
        _1260 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _1261) -> [return: bb589, unwind: bb693];
    }

    bb589: {
        StorageDead(_1261);
        _1259 = &_1260;
        _1258 = &_1259;
        _1252 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _1253, move _1258) -> [return: bb590, unwind: bb693];
    }

    bb590: {
        switchInt(move _1252) -> [0: bb593, otherwise: bb591];
    }

    bb591: {
        StorageDead(_1262);
        StorageDead(_1260);
        StorageDead(_1259);
        StorageDead(_1258);
        StorageDead(_1256);
        StorageDead(_1254);
        StorageDead(_1253);
        StorageLive(_1265);
        StorageLive(_1266);
        _1266 = ConstraintMintTokenProgram;
        _1265 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _1266) -> [return: bb592, unwind: bb693];
    }

    bb592: {
        StorageDead(_1266);
        _0 = std::result::Result::<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error>::Err(move _1265);
        StorageDead(_1265);
        StorageDead(_1252);
        StorageDead(_1251);
        goto -> bb615;
    }

    bb593: {
        StorageDead(_1262);
        StorageDead(_1260);
        StorageDead(_1259);
        StorageDead(_1258);
        StorageDead(_1256);
        StorageDead(_1254);
        StorageDead(_1253);
        _1251 = const ();
        StorageDead(_1252);
        StorageDead(_1251);
        StorageLive(_1267);
        StorageLive(_1268);
        StorageLive(_1269);
        StorageLive(_1270);
        StorageLive(_1271);
        StorageLive(_1272);
        _1272 = &_96;
        _1271 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _1272) -> [return: bb594, unwind: bb693];
    }

    bb594: {
        _1270 = &(*_1271);
        StorageDead(_1272);
        _1269 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _1270) -> [return: bb595, unwind: bb693];
    }

    bb595: {
        StorageDead(_1270);
        _1268 = ((*_1269).6: bool);
        switchInt(move _1268) -> [0: bb596, otherwise: bb599];
    }

    bb596: {
        StorageDead(_1271);
        StorageDead(_1269);
        StorageLive(_1274);
        StorageLive(_1275);
        StorageLive(_1276);
        _1276 = ConstraintMut;
        _1275 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _1276) -> [return: bb597, unwind: bb693];
    }

    bb597: {
        StorageDead(_1276);
        _1274 = anchor_lang::error::Error::with_account_name::<&str>(move _1275, const "admin_token_account") -> [return: bb598, unwind: bb693];
    }

    bb598: {
        StorageDead(_1275);
        _0 = std::result::Result::<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error>::Err(move _1274);
        StorageDead(_1274);
        StorageDead(_1268);
        StorageDead(_1267);
        goto -> bb615;
    }

    bb599: {
        StorageDead(_1271);
        StorageDead(_1269);
        _1267 = const ();
        StorageDead(_1268);
        StorageDead(_1267);
        StorageLive(_1277);
        StorageLive(_1278);
        StorageLive(_1279);
        StorageLive(_1280);
        StorageLive(_1281);
        StorageLive(_1282);
        StorageLive(_1283);
        StorageLive(_1284);
        _1617 = (((_96.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _1284 = &(*_1617);
        _1283 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _1284) -> [return: bb600, unwind: bb693];
    }

    bb600: {
        _1282 = &(*_1283);
        _1281 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _1282) -> [return: bb601, unwind: bb693];
    }

    bb601: {
        StorageDead(_1284);
        StorageDead(_1282);
        _1280 = &((*_1281).1: anchor_lang::prelude::Pubkey);
        StorageLive(_1285);
        StorageLive(_1286);
        StorageLive(_1287);
        _1287 = &_6;
        _1286 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _1287) -> [return: bb602, unwind: bb693];
    }

    bb602: {
        _1285 = &_1286;
        StorageDead(_1287);
        _1279 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _1280, move _1285) -> [return: bb603, unwind: bb693];
    }

    bb603: {
        switchInt(move _1279) -> [0: bb606, otherwise: bb604];
    }

    bb604: {
        StorageDead(_1286);
        StorageDead(_1285);
        StorageDead(_1283);
        StorageDead(_1281);
        StorageDead(_1280);
        StorageLive(_1289);
        StorageLive(_1290);
        _1290 = ConstraintTokenOwner;
        _1289 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _1290) -> [return: bb605, unwind: bb693];
    }

    bb605: {
        StorageDead(_1290);
        _0 = std::result::Result::<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error>::Err(move _1289);
        StorageDead(_1289);
        StorageDead(_1279);
        StorageDead(_1278);
        goto -> bb614;
    }

    bb606: {
        StorageDead(_1286);
        StorageDead(_1285);
        StorageDead(_1283);
        StorageDead(_1281);
        StorageDead(_1280);
        _1278 = const ();
        StorageDead(_1279);
        StorageDead(_1278);
        StorageLive(_1291);
        StorageLive(_1292);
        StorageLive(_1293);
        StorageLive(_1294);
        StorageLive(_1295);
        StorageLive(_1296);
        _1618 = (((_96.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _1296 = &(*_1618);
        _1295 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _1296) -> [return: bb607, unwind: bb693];
    }

    bb607: {
        _1294 = &(*_1295);
        _1293 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _1294) -> [return: bb608, unwind: bb693];
    }

    bb608: {
        StorageDead(_1296);
        StorageDead(_1294);
        _1292 = &((*_1293).0: anchor_lang::prelude::Pubkey);
        StorageLive(_1297);
        StorageLive(_1298);
        StorageLive(_1299);
        _1619 = (((_66.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _1299 = &(*_1619);
        _1298 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _1299) -> [return: bb609, unwind: bb693];
    }

    bb609: {
        _1297 = &_1298;
        StorageDead(_1299);
        _1291 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _1292, move _1297) -> [return: bb610, unwind: bb693];
    }

    bb610: {
        switchInt(move _1291) -> [0: bb613, otherwise: bb611];
    }

    bb611: {
        StorageDead(_1298);
        StorageDead(_1297);
        StorageDead(_1295);
        StorageDead(_1293);
        StorageDead(_1292);
        StorageLive(_1301);
        StorageLive(_1302);
        _1302 = ConstraintTokenMint;
        _1301 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _1302) -> [return: bb612, unwind: bb693];
    }

    bb612: {
        StorageDead(_1302);
        _0 = std::result::Result::<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error>::Err(move _1301);
        StorageDead(_1301);
        StorageDead(_1291);
        goto -> bb614;
    }

    bb613: {
        StorageDead(_1298);
        StorageDead(_1297);
        StorageDead(_1295);
        StorageDead(_1293);
        StorageDead(_1292);
        _1277 = const ();
        StorageDead(_1291);
        StorageDead(_1277);
        StorageLive(_1303);
        StorageLive(_1304);
        _1304 = move _6;
        StorageLive(_1305);
        _1305 = move _1145;
        StorageLive(_1306);
        _1306 = move _36;
        StorageLive(_1307);
        _1307 = move _211;
        StorageLive(_1308);
        _1308 = move _66;
        StorageLive(_1309);
        _1309 = move _759;
        StorageLive(_1310);
        _1310 = move _96;
        StorageLive(_1311);
        _1311 = move _111;
        StorageLive(_1312);
        _1312 = move _126;
        StorageLive(_1313);
        _1313 = move _141;
        StorageLive(_1314);
        _1314 = move _156;
        _1303 = handlers::handler_init_vault::InitVault::<'_> { admin_authority: move _1304, vault_state: move _1305, base_vault_authority: move _1306, token_vault: move _1307, base_token_mint: move _1308, shares_mint: move _1309, admin_token_account: move _1310, system_program: move _1311, rent: move _1312, token_program: move _1313, shares_token_program: move _1314 };
        StorageDead(_1314);
        StorageDead(_1313);
        StorageDead(_1312);
        StorageDead(_1311);
        StorageDead(_1310);
        StorageDead(_1309);
        StorageDead(_1308);
        StorageDead(_1307);
        StorageDead(_1306);
        StorageDead(_1305);
        StorageDead(_1304);
        _0 = std::result::Result::<handlers::handler_init_vault::InitVault<'_>, anchor_lang::error::Error>::Ok(move _1303);
        StorageDead(_1303);
        StorageDead(_1219);
        StorageDead(_1218);
        StorageDead(_1145);
        StorageDead(_1137);
        StorageDead(_759);
        StorageDead(_728);
        StorageDead(_727);
        StorageDead(_719);
        StorageDead(_211);
        StorageDead(_180);
        StorageDead(_179);
        StorageDead(_171);
        StorageDead(_156);
        StorageDead(_141);
        StorageDead(_126);
        StorageDead(_111);
        StorageDead(_96);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_66);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_36);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_6);
        goto -> bb685;
    }

    bb614: {
        StorageDead(_1277);
        goto -> bb615;
    }

    bb615: {
        StorageDead(_1219);
        StorageDead(_1218);
        goto -> bb621;
    }

    bb616: {
        StorageDead(_1207);
        _1346 = const false;
        StorageDead(_1204);
        drop(_1201) -> [return: bb617, unwind: bb693];
    }

    bb617: {
        StorageDead(_1201);
        goto -> bb618;
    }

    bb618: {
        StorageDead(_1197);
        StorageDead(_1196);
        goto -> bb621;
    }

    bb619: {
        StorageDead(_1150);
        StorageDead(_1146);
        _1477 = discriminant(_1177);
        StorageDead(_1180);
        _1347 = const false;
        _1348 = const false;
        StorageDead(_1177);
        goto -> bb621;
    }

    bb620: {
        StorageDead(_1150);
        StorageDead(_1146);
        goto -> bb621;
    }

    bb621: {
        StorageDead(_1145);
        goto -> bb622;
    }

    bb622: {
        StorageDead(_1137);
        goto -> bb626;
    }

    bb623: {
        StorageDead(_1117);
        _1349 = const false;
        StorageDead(_1114);
        drop(_1111) -> [return: bb624, unwind: bb693];
    }

    bb624: {
        StorageDead(_1111);
        goto -> bb625;
    }

    bb625: {
        StorageDead(_1107);
        StorageDead(_1106);
        goto -> bb626;
    }

    bb626: {
        drop(_759) -> [return: bb634, unwind: bb700];
    }

    bb627: {
        StorageDead(_1016);
        StorageDead(_1015);
        drop(_1004) -> [return: bb628, unwind: bb700];
    }

    bb628: {
        StorageDead(_1004);
        goto -> bb633;
    }

    bb629: {
        StorageDead(_891);
        _1360 = const false;
        StorageDead(_888);
        goto -> bb630;
    }

    bb630: {
        StorageDead(_861);
        goto -> bb631;
    }

    bb631: {
        StorageDead(_774);
        StorageDead(_773);
        goto -> bb632;
    }

    bb632: {
        StorageDead(_771);
        StorageDead(_766);
        StorageDead(_765);
        StorageDead(_764);
        goto -> bb633;
    }

    bb633: {
        StorageDead(_760);
        goto -> bb634;
    }

    bb634: {
        StorageDead(_759);
        goto -> bb635;
    }

    bb635: {
        StorageDead(_728);
        StorageDead(_727);
        goto -> bb636;
    }

    bb636: {
        StorageDead(_719);
        goto -> bb640;
    }

    bb637: {
        StorageDead(_708);
        _1367 = const false;
        StorageDead(_705);
        drop(_702) -> [return: bb638, unwind: bb700];
    }

    bb638: {
        StorageDead(_702);
        goto -> bb639;
    }

    bb639: {
        StorageDead(_698);
        StorageDead(_697);
        goto -> bb640;
    }

    bb640: {
        drop(_211) -> [return: bb672, unwind: bb728];
    }

    bb641: {
        StorageDead(_621);
        StorageDead(_620);
        drop(_609) -> [return: bb642, unwind: bb728];
    }

    bb642: {
        StorageDead(_609);
        goto -> bb671;
    }

    bb643: {
        StorageDead(_520);
        drop(_511) -> [return: bb644, unwind: bb706];
    }

    bb644: {
        StorageDead(_511);
        StorageDead(_499);
        drop(_490) -> [return: bb645, unwind: bb795];
    }

    bb645: {
        StorageDead(_490);
        _1509 = discriminant(_525);
        StorageDead(_530);
        StorageDead(_528);
        _1377 = const false;
        StorageDead(_525);
        goto -> bb648;
    }

    bb646: {
        StorageDead(_499);
        drop(_490) -> [return: bb647, unwind: bb710];
    }

    bb647: {
        StorageDead(_490);
        goto -> bb648;
    }

    bb648: {
        StorageDead(_486);
        drop(_484) -> [return: bb649, unwind: bb800];
    }

    bb649: {
        StorageDead(_484);
        StorageDead(_483);
        StorageDead(_482);
        drop(_456) -> [return: bb650, unwind: bb804];
    }

    bb650: {
        _1378 = const false;
        StorageDead(_456);
        StorageDead(_455);
        goto -> bb651;
    }

    bb651: {
        StorageDead(_478);
        StorageDead(_476);
        StorageDead(_475);
        StorageDead(_472);
        StorageDead(_469);
        StorageDead(_466);
        StorageDead(_464);
        StorageDead(_463);
        StorageDead(_461);
        StorageDead(_460);
        StorageDead(_454);
        StorageDead(_453);
        goto -> bb652;
    }

    bb652: {
        StorageDead(_449);
        _1380 = const false;
        StorageDead(_446);
        goto -> bb660;
    }

    bb653: {
        StorageDead(_407);
        drop(_398) -> [return: bb654, unwind: bb714];
    }

    bb654: {
        StorageDead(_398);
        StorageDead(_386);
        drop(_377) -> [return: bb655, unwind: bb808];
    }

    bb655: {
        StorageDead(_377);
        _1519 = discriminant(_412);
        StorageDead(_417);
        StorageDead(_415);
        _1382 = const false;
        StorageDead(_412);
        goto -> bb658;
    }

    bb656: {
        StorageDead(_386);
        drop(_377) -> [return: bb657, unwind: bb718];
    }

    bb657: {
        StorageDead(_377);
        goto -> bb658;
    }

    bb658: {
        StorageDead(_373);
        drop(_371) -> [return: bb659, unwind: bb728];
    }

    bb659: {
        StorageDead(_371);
        StorageDead(_370);
        StorageDead(_369);
        StorageDead(_368);
        StorageDead(_367);
        goto -> bb660;
    }

    bb660: {
        StorageDead(_366);
        goto -> bb669;
    }

    bb661: {
        StorageDead(_266);
        drop(_257) -> [return: bb662, unwind: bb723];
    }

    bb662: {
        StorageDead(_257);
        StorageDead(_245);
        drop(_236) -> [return: bb663, unwind: bb821];
    }

    bb663: {
        StorageDead(_236);
        _1529 = discriminant(_271);
        StorageDead(_276);
        StorageDead(_274);
        _1387 = const false;
        StorageDead(_271);
        goto -> bb666;
    }

    bb664: {
        StorageDead(_245);
        drop(_236) -> [return: bb665, unwind: bb727];
    }

    bb665: {
        StorageDead(_236);
        goto -> bb666;
    }

    bb666: {
        StorageDead(_232);
        drop(_230) -> [return: bb667, unwind: bb728];
    }

    bb667: {
        StorageDead(_230);
        goto -> bb668;
    }

    bb668: {
        StorageDead(_229);
        goto -> bb669;
    }

    bb669: {
        StorageDead(_227);
        StorageDead(_226);
        goto -> bb670;
    }

    bb670: {
        StorageDead(_224);
        StorageDead(_219);
        StorageDead(_218);
        StorageDead(_217);
        goto -> bb671;
    }

    bb671: {
        StorageDead(_212);
        goto -> bb672;
    }

    bb672: {
        StorageDead(_211);
        goto -> bb673;
    }

    bb673: {
        StorageDead(_180);
        StorageDead(_179);
        goto -> bb674;
    }

    bb674: {
        StorageDead(_171);
        goto -> bb675;
    }

    bb675: {
        StorageDead(_156);
        goto -> bb676;
    }

    bb676: {
        StorageDead(_141);
        goto -> bb677;
    }

    bb677: {
        StorageDead(_126);
        goto -> bb678;
    }

    bb678: {
        StorageDead(_111);
        drop(_96) -> [return: bb679, unwind: bb729];
    }

    bb679: {
        StorageDead(_96);
        StorageDead(_88);
        StorageDead(_87);
        goto -> bb680;
    }

    bb680: {
        drop(_66) -> [return: bb681, unwind: bb730];
    }

    bb681: {
        StorageDead(_66);
        StorageDead(_58);
        StorageDead(_57);
        goto -> bb682;
    }

    bb682: {
        drop(_36) -> [return: bb683, unwind: bb731];
    }

    bb683: {
        StorageDead(_36);
        StorageDead(_28);
        StorageDead(_27);
        goto -> bb684;
    }

    bb684: {
        StorageDead(_6);
        goto -> bb685;
    }

    bb685: {
        return;
    }

    bb686 (cleanup): {
        drop(_1207) -> [return: bb687, unwind terminate(cleanup)];
    }

    bb687 (cleanup): {
        drop(_1201) -> [return: bb693, unwind terminate(cleanup)];
    }

    bb688 (cleanup): {
        drop(_1150) -> [return: bb735, unwind terminate(cleanup)];
    }

    bb689 (cleanup): {
        _1557 = discriminant(_1151);
        goto -> bb690;
    }

    bb690 (cleanup): {
        drop(_1150) -> [return: bb693, unwind terminate(cleanup)];
    }

    bb691 (cleanup): {
        drop(_1117) -> [return: bb692, unwind terminate(cleanup)];
    }

    bb692 (cleanup): {
        drop(_1111) -> [return: bb693, unwind terminate(cleanup)];
    }

    bb693 (cleanup): {
        drop(_759) -> [return: bb700, unwind terminate(cleanup)];
    }

    bb694 (cleanup): {
        drop(_1004) -> [return: bb700, unwind terminate(cleanup)];
    }

    bb695 (cleanup): {
        drop(_870) -> [return: bb700, unwind terminate(cleanup)];
    }

    bb696 (cleanup): {
        drop(_844) -> [return: bb700, unwind terminate(cleanup)];
    }

    bb697 (cleanup): {
        drop(_781) -> [return: bb700, unwind terminate(cleanup)];
    }

    bb698 (cleanup): {
        drop(_708) -> [return: bb699, unwind terminate(cleanup)];
    }

    bb699 (cleanup): {
        drop(_702) -> [return: bb700, unwind terminate(cleanup)];
    }

    bb700 (cleanup): {
        drop(_211) -> [return: bb728, unwind terminate(cleanup)];
    }

    bb701 (cleanup): {
        drop(_609) -> [return: bb728, unwind terminate(cleanup)];
    }

    bb702 (cleanup): {
        drop(_593) -> [return: bb703, unwind terminate(cleanup)];
    }

    bb703 (cleanup): {
        drop(_591) -> [return: bb786, unwind terminate(cleanup)];
    }

    bb704 (cleanup): {
        drop(_520) -> [return: bb705, unwind terminate(cleanup)];
    }

    bb705 (cleanup): {
        drop(_511) -> [return: bb706, unwind terminate(cleanup)];
    }

    bb706 (cleanup): {
        drop(_490) -> [return: bb795, unwind terminate(cleanup)];
    }

    bb707 (cleanup): {
        drop(_520) -> [return: bb708, unwind terminate(cleanup)];
    }

    bb708 (cleanup): {
        drop(_511) -> [return: bb709, unwind terminate(cleanup)];
    }

    bb709 (cleanup): {
        drop(_490) -> [return: bb710, unwind terminate(cleanup)];
    }

    bb710 (cleanup): {
        drop(_484) -> [return: bb800, unwind terminate(cleanup)];
    }

    bb711 (cleanup): {
        drop(_428) -> [return: bb728, unwind terminate(cleanup)];
    }

    bb712 (cleanup): {
        drop(_407) -> [return: bb713, unwind terminate(cleanup)];
    }

    bb713 (cleanup): {
        drop(_398) -> [return: bb714, unwind terminate(cleanup)];
    }

    bb714 (cleanup): {
        drop(_377) -> [return: bb808, unwind terminate(cleanup)];
    }

    bb715 (cleanup): {
        drop(_407) -> [return: bb716, unwind terminate(cleanup)];
    }

    bb716 (cleanup): {
        drop(_398) -> [return: bb717, unwind terminate(cleanup)];
    }

    bb717 (cleanup): {
        drop(_377) -> [return: bb718, unwind terminate(cleanup)];
    }

    bb718 (cleanup): {
        drop(_371) -> [return: bb728, unwind terminate(cleanup)];
    }

    bb719 (cleanup): {
        drop(_349) -> [return: bb728, unwind terminate(cleanup)];
    }

    bb720 (cleanup): {
        drop(_286) -> [return: bb728, unwind terminate(cleanup)];
    }

    bb721 (cleanup): {
        drop(_266) -> [return: bb722, unwind terminate(cleanup)];
    }

    bb722 (cleanup): {
        drop(_257) -> [return: bb723, unwind terminate(cleanup)];
    }

    bb723 (cleanup): {
        drop(_236) -> [return: bb821, unwind terminate(cleanup)];
    }

    bb724 (cleanup): {
        drop(_266) -> [return: bb725, unwind terminate(cleanup)];
    }

    bb725 (cleanup): {
        drop(_257) -> [return: bb726, unwind terminate(cleanup)];
    }

    bb726 (cleanup): {
        drop(_236) -> [return: bb727, unwind terminate(cleanup)];
    }

    bb727 (cleanup): {
        drop(_230) -> [return: bb728, unwind terminate(cleanup)];
    }

    bb728 (cleanup): {
        drop(_96) -> [return: bb729, unwind terminate(cleanup)];
    }

    bb729 (cleanup): {
        drop(_66) -> [return: bb730, unwind terminate(cleanup)];
    }

    bb730 (cleanup): {
        drop(_36) -> [return: bb731, unwind terminate(cleanup)];
    }

    bb731 (cleanup): {
        resume;
    }

    bb732 (cleanup): {
        drop(_1244) -> [return: bb693, unwind terminate(cleanup)];
    }

    bb733 (cleanup): {
        switchInt(_1345) -> [0: bb693, otherwise: bb732];
    }

    bb734 (cleanup): {
        _1555 = discriminant(_1204);
        goto -> bb686;
    }

    bb735 (cleanup): {
        _1556 = discriminant(_1177);
        goto -> bb693;
    }

    bb736 (cleanup): {
        _1558 = discriminant(_1151);
        goto -> bb693;
    }

    bb737 (cleanup): {
        _1559 = discriminant(_1138);
        goto -> bb693;
    }

    bb738 (cleanup): {
        _1560 = discriminant(_1114);
        goto -> bb691;
    }

    bb739 (cleanup): {
        drop(_1087) -> [return: bb694, unwind terminate(cleanup)];
    }

    bb740 (cleanup): {
        switchInt(_1350) -> [0: bb694, otherwise: bb739];
    }

    bb741 (cleanup): {
        drop(_1063) -> [return: bb694, unwind terminate(cleanup)];
    }

    bb742 (cleanup): {
        switchInt(_1351) -> [0: bb694, otherwise: bb741];
    }

    bb743 (cleanup): {
        _1561 = discriminant(_1006);
        goto -> bb700;
    }

    bb744 (cleanup): {
        _1562 = discriminant(_986);
        goto -> bb748;
    }

    bb745 (cleanup): {
        drop(_988) -> [return: bb748, unwind terminate(cleanup)];
    }

    bb746 (cleanup): {
        switchInt(_1354) -> [0: bb748, otherwise: bb745];
    }

    bb747 (cleanup): {
        drop(_977) -> [return: bb700, unwind terminate(cleanup)];
    }

    bb748 (cleanup): {
        switchInt(_1355) -> [0: bb700, otherwise: bb747];
    }

    bb749 (cleanup): {
        _1563 = discriminant(_938);
        goto -> bb755;
    }

    bb750 (cleanup): {
        drop(_940) -> [return: bb755, unwind terminate(cleanup)];
    }

    bb751 (cleanup): {
        switchInt(_1356) -> [0: bb755, otherwise: bb750];
    }

    bb752 (cleanup): {
        drop(_941) -> [return: bb755, unwind terminate(cleanup)];
    }

    bb753 (cleanup): {
        switchInt(_1357) -> [0: bb755, otherwise: bb752];
    }

    bb754 (cleanup): {
        drop(_930) -> [return: bb760, unwind terminate(cleanup)];
    }

    bb755 (cleanup): {
        switchInt(_1358) -> [0: bb760, otherwise: bb754];
    }

    bb756 (cleanup): {
        _1564 = discriminant(_896);
        goto -> bb760;
    }

    bb757 (cleanup): {
        drop(_899) -> [return: bb760, unwind terminate(cleanup)];
    }

    bb758 (cleanup): {
        switchInt(_1359) -> [0: bb760, otherwise: bb757];
    }

    bb759 (cleanup): {
        drop(_888) -> [return: bb700, unwind terminate(cleanup)];
    }

    bb760 (cleanup): {
        switchInt(_1360) -> [0: bb700, otherwise: bb759];
    }

    bb761 (cleanup): {
        _1565 = discriminant(_879);
        goto -> bb763;
    }

    bb762 (cleanup): {
        drop(_869) -> [return: bb700, unwind terminate(cleanup)];
    }

    bb763 (cleanup): {
        switchInt(_1361) -> [0: bb700, otherwise: bb762];
    }

    bb764 (cleanup): {
        drop(_842) -> [return: bb700, unwind terminate(cleanup)];
    }

    bb765 (cleanup): {
        switchInt(_1362) -> [0: bb700, otherwise: bb764];
    }

    bb766 (cleanup): {
        _1566 = discriminant(_790);
        goto -> bb772;
    }

    bb767 (cleanup): {
        drop(_792) -> [return: bb772, unwind terminate(cleanup)];
    }

    bb768 (cleanup): {
        switchInt(_1363) -> [0: bb772, otherwise: bb767];
    }

    bb769 (cleanup): {
        drop(_793) -> [return: bb772, unwind terminate(cleanup)];
    }

    bb770 (cleanup): {
        switchInt(_1364) -> [0: bb772, otherwise: bb769];
    }

    bb771 (cleanup): {
        drop(_780) -> [return: bb700, unwind terminate(cleanup)];
    }

    bb772 (cleanup): {
        switchInt(_1365) -> [0: bb700, otherwise: bb771];
    }

    bb773 (cleanup): {
        drop(_752) -> [return: bb700, unwind terminate(cleanup)];
    }

    bb774 (cleanup): {
        switchInt(_1366) -> [0: bb700, otherwise: bb773];
    }

    bb775 (cleanup): {
        _1567 = discriminant(_720);
        goto -> bb700;
    }

    bb776 (cleanup): {
        _1568 = discriminant(_705);
        goto -> bb698;
    }

    bb777 (cleanup): {
        drop(_678) -> [return: bb701, unwind terminate(cleanup)];
    }

    bb778 (cleanup): {
        switchInt(_1368) -> [0: bb701, otherwise: bb777];
    }

    bb779 (cleanup): {
        drop(_657) -> [return: bb701, unwind terminate(cleanup)];
    }

    bb780 (cleanup): {
        switchInt(_1369) -> [0: bb701, otherwise: bb779];
    }

    bb781 (cleanup): {
        drop(_634) -> [return: bb701, unwind terminate(cleanup)];
    }

    bb782 (cleanup): {
        switchInt(_1370) -> [0: bb701, otherwise: bb781];
    }

    bb783 (cleanup): {
        _1569 = discriminant(_611);
        goto -> bb728;
    }

    bb784 (cleanup): {
        _1570 = discriminant(_601);
        goto -> bb786;
    }

    bb785 (cleanup): {
        drop(_588) -> [return: bb728, unwind terminate(cleanup)];
    }

    bb786 (cleanup): {
        switchInt(_1373) -> [0: bb728, otherwise: bb785];
    }

    bb787 (cleanup): {
        _1571 = discriminant(_549);
        goto -> bb793;
    }

    bb788 (cleanup): {
        drop(_551) -> [return: bb793, unwind terminate(cleanup)];
    }

    bb789 (cleanup): {
        switchInt(_1374) -> [0: bb793, otherwise: bb788];
    }

    bb790 (cleanup): {
        drop(_552) -> [return: bb793, unwind terminate(cleanup)];
    }

    bb791 (cleanup): {
        switchInt(_1375) -> [0: bb793, otherwise: bb790];
    }

    bb792 (cleanup): {
        drop(_541) -> [return: bb804, unwind terminate(cleanup)];
    }

    bb793 (cleanup): {
        switchInt(_1376) -> [0: bb804, otherwise: bb792];
    }

    bb794 (cleanup): {
        _1572 = discriminant(_454);
        goto -> bb804;
    }

    bb795 (cleanup): {
        _1573 = discriminant(_525);
        goto -> bb710;
    }

    bb796 (cleanup): {
        _1574 = discriminant(_512);
        goto -> bb709;
    }

    bb797 (cleanup): {
        _1575 = discriminant(_500);
        goto -> bb709;
    }

    bb798 (cleanup): {
        _1576 = discriminant(_491);
        goto -> bb710;
    }

    bb799 (cleanup): {
        drop(_456) -> [return: bb804, unwind terminate(cleanup)];
    }

    bb800 (cleanup): {
        switchInt(_1378) -> [0: bb804, otherwise: bb799];
    }

    bb801 (cleanup): {
        drop(_457) -> [return: bb804, unwind terminate(cleanup)];
    }

    bb802 (cleanup): {
        switchInt(_1379) -> [0: bb804, otherwise: bb801];
    }

    bb803 (cleanup): {
        drop(_446) -> [return: bb728, unwind terminate(cleanup)];
    }

    bb804 (cleanup): {
        switchInt(_1380) -> [0: bb728, otherwise: bb803];
    }

    bb805 (cleanup): {
        _1577 = discriminant(_437);
        goto -> bb807;
    }

    bb806 (cleanup): {
        drop(_427) -> [return: bb728, unwind terminate(cleanup)];
    }

    bb807 (cleanup): {
        switchInt(_1381) -> [0: bb728, otherwise: bb806];
    }

    bb808 (cleanup): {
        _1578 = discriminant(_412);
        goto -> bb718;
    }

    bb809 (cleanup): {
        _1579 = discriminant(_399);
        goto -> bb717;
    }

    bb810 (cleanup): {
        _1580 = discriminant(_387);
        goto -> bb717;
    }

    bb811 (cleanup): {
        _1581 = discriminant(_378);
        goto -> bb718;
    }

    bb812 (cleanup): {
        drop(_347) -> [return: bb728, unwind terminate(cleanup)];
    }

    bb813 (cleanup): {
        switchInt(_1383) -> [0: bb728, otherwise: bb812];
    }

    bb814 (cleanup): {
        _1582 = discriminant(_295);
        goto -> bb820;
    }

    bb815 (cleanup): {
        drop(_297) -> [return: bb820, unwind terminate(cleanup)];
    }

    bb816 (cleanup): {
        switchInt(_1384) -> [0: bb820, otherwise: bb815];
    }

    bb817 (cleanup): {
        drop(_298) -> [return: bb820, unwind terminate(cleanup)];
    }

    bb818 (cleanup): {
        switchInt(_1385) -> [0: bb820, otherwise: bb817];
    }

    bb819 (cleanup): {
        drop(_285) -> [return: bb728, unwind terminate(cleanup)];
    }

    bb820 (cleanup): {
        switchInt(_1386) -> [0: bb728, otherwise: bb819];
    }

    bb821 (cleanup): {
        _1583 = discriminant(_271);
        goto -> bb727;
    }

    bb822 (cleanup): {
        _1584 = discriminant(_258);
        goto -> bb726;
    }

    bb823 (cleanup): {
        _1585 = discriminant(_246);
        goto -> bb726;
    }

    bb824 (cleanup): {
        _1586 = discriminant(_237);
        goto -> bb727;
    }

    bb825 (cleanup): {
        drop(_204) -> [return: bb728, unwind terminate(cleanup)];
    }

    bb826 (cleanup): {
        switchInt(_1388) -> [0: bb728, otherwise: bb825];
    }

    bb827 (cleanup): {
        _1587 = discriminant(_172);
        goto -> bb728;
    }

    bb828 (cleanup): {
        _1588 = discriminant(_157);
        goto -> bb728;
    }

    bb829 (cleanup): {
        _1589 = discriminant(_142);
        goto -> bb728;
    }

    bb830 (cleanup): {
        _1590 = discriminant(_127);
        goto -> bb728;
    }

    bb831 (cleanup): {
        _1591 = discriminant(_112);
        goto -> bb728;
    }

    bb832 (cleanup): {
        _1592 = discriminant(_97);
        goto -> bb729;
    }

    bb833 (cleanup): {
        _1593 = discriminant(_67);
        goto -> bb730;
    }

    bb834 (cleanup): {
        _1594 = discriminant(_37);
        goto -> bb731;
    }

    bb835 (cleanup): {
        _1595 = discriminant(_7);
        goto -> bb731;
    }
}
