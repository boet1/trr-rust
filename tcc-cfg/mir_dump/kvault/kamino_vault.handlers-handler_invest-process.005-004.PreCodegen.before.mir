// MIR for `handlers::handler_invest::process` before PreCodegen

fn handlers::handler_invest::process(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_invest::Invest<'_>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let mut _2: utils::cpi_mem::CpiMemoryLender<'_>;
    let mut _3: std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _4: &handlers::handler_invest::Invest<'_>;
    let mut _5: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _7: std::cell::RefMut<'_, state::VaultState>;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::VaultState>>;
    let mut _9: std::result::Result<std::cell::RefMut<'_, state::VaultState>, anchor_lang::error::Error>;
    let mut _10: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _11: isize;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _17: &state::VaultState;
    let mut _18: &std::cell::RefMut<'_, state::VaultState>;
    let mut _20: &state::VaultState;
    let _21: &state::VaultState;
    let mut _22: &std::cell::RefMut<'_, state::VaultState>;
    let _23: ();
    let _24: ();
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _26: std::result::Result<(), anchor_lang::error::Error>;
    let mut _27: &mut utils::cpi_mem::CpiMemoryLender<'_>;
    let mut _28: &mut utils::cpi_mem::CpiMemoryLender<'_>;
    let mut _29: std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _30: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _31: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _32: usize;
    let mut _33: usize;
    let mut _34: isize;
    let mut _36: !;
    let mut _37: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _40: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, kamino_lending::Reserve>>;
    let mut _41: std::result::Result<std::cell::Ref<'_, kamino_lending::Reserve>, anchor_lang::error::Error>;
    let mut _42: &anchor_lang::prelude::AccountLoader<'_, kamino_lending::Reserve>;
    let mut _43: isize;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _49: anchor_lang::prelude::AccountInfo<'_>;
    let mut _50: &anchor_lang::prelude::AccountLoader<'_, kamino_lending::Reserve>;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, u64>;
    let mut _53: std::result::Result<u64, anchor_lang::error::Error>;
    let mut _54: &anchor_lang::prelude::AccountInfo<'_>;
    let _55: &anchor_lang::prelude::AccountInfo<'_>;
    let _56: anchor_lang::prelude::AccountInfo<'_>;
    let mut _57: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _58: isize;
    let mut _60: !;
    let mut _61: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _64: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, u64>;
    let mut _65: std::result::Result<u64, anchor_lang::error::Error>;
    let mut _66: &anchor_lang::prelude::AccountInfo<'_>;
    let _67: &anchor_lang::prelude::AccountInfo<'_>;
    let _68: anchor_lang::prelude::AccountInfo<'_>;
    let mut _69: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _70: isize;
    let mut _72: !;
    let mut _73: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _76: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, u64>;
    let mut _77: std::result::Result<u64, anchor_lang::error::Error>;
    let mut _78: &anchor_lang::prelude::AccountInfo<'_>;
    let _79: &anchor_lang::prelude::AccountInfo<'_>;
    let _80: anchor_lang::prelude::AccountInfo<'_>;
    let mut _81: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _82: isize;
    let mut _84: !;
    let mut _85: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _89: anchor_lang::prelude::Clock;
    let mut _90: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _91: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _92: isize;
    let mut _94: !;
    let mut _95: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _98: std::result::Result<u64, std::num::TryFromIntError>;
    let mut _99: i64;
    let mut _101: std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _102: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _103: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _104: usize;
    let mut _105: {closure@programs\kvault\src\handlers\handler_invest.rs:67:14: 67:28};
    let mut _107: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, operations::effects::InvestEffects>;
    let mut _108: std::result::Result<operations::effects::InvestEffects, anchor_lang::error::Error>;
    let mut _109: &mut state::VaultState;
    let mut _110: &mut state::VaultState;
    let mut _111: &mut std::cell::RefMut<'_, state::VaultState>;
    let mut _112: std::iter::Map<std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>, {closure@programs\kvault\src\handlers\handler_invest.rs:67:14: 67:28}>;
    let mut _113: &std::iter::Map<std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>, {closure@programs\kvault\src\handlers\handler_invest.rs:67:14: 67:28}>;
    let mut _114: &kamino_lending::Reserve;
    let _115: &kamino_lending::Reserve;
    let mut _116: &std::cell::Ref<'_, kamino_lending::Reserve>;
    let _117: &std::cell::Ref<'_, kamino_lending::Reserve>;
    let mut _118: &anchor_lang::prelude::Pubkey;
    let mut _119: u64;
    let mut _120: u64;
    let mut _121: isize;
    let mut _123: !;
    let mut _124: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _130: ();
    let mut _131: usize;
    let mut _132: &str;
    let _133: &str;
    let mut _134: bool;
    let mut _135: bool;
    let mut _136: bool;
    let mut _137: bool;
    let mut _138: bool;
    let mut _139: bool;
    let _142: ();
    let mut _143: std::result::Result<(), std::fmt::Error>;
    let mut _144: &mut arrform::ArrForm<150>;
    let mut _145: std::fmt::Arguments<'_>;
    let mut _146: &[&str];
    let mut _147: &[&str; 4];
    let _148: &[&str; 4];
    let _149: [&str; 4];
    let mut _150: &[core::fmt::rt::Argument<'_>];
    let mut _151: &[core::fmt::rt::Argument<'_>; 4];
    let _152: &[core::fmt::rt::Argument<'_>; 4];
    let _153: [core::fmt::rt::Argument<'_>; 4];
    let mut _154: core::fmt::rt::Argument<'_>;
    let mut _155: &operations::effects::InvestingDirection;
    let _156: &operations::effects::InvestingDirection;
    let mut _157: core::fmt::rt::Argument<'_>;
    let mut _158: &u64;
    let _159: &u64;
    let mut _160: core::fmt::rt::Argument<'_>;
    let mut _161: &u64;
    let _162: &u64;
    let mut _163: core::fmt::rt::Argument<'_>;
    let mut _164: &u64;
    let _165: &u64;
    let mut _166: {closure@programs\kvault\src\utils\macros.rs:75:58: 75:61};
    let mut _167: &mut arrform::ArrForm<150>;
    let _168: ();
    let mut _169: &str;
    let _170: &str;
    let mut _171: &std::string::String;
    let _172: &std::string::String;
    let _173: std::string::String;
    let mut _175: std::fmt::Arguments<'_>;
    let mut _176: &[&str];
    let mut _177: &[&str; 1];
    let _178: &[&str; 1];
    let _179: [&str; 1];
    let mut _180: &[core::fmt::rt::Argument<'_>];
    let mut _181: &[core::fmt::rt::Argument<'_>; 1];
    let _182: &[core::fmt::rt::Argument<'_>; 1];
    let _183: [core::fmt::rt::Argument<'_>; 1];
    let mut _184: core::fmt::rt::Argument<'_>;
    let mut _185: &&str;
    let _186: &&str;
    let _187: &str;
    let mut _188: &arrform::ArrForm<150>;
    let _191: ();
    let mut _192: std::result::Result<(), std::fmt::Error>;
    let mut _193: &mut arrform::ArrForm<300>;
    let mut _194: std::fmt::Arguments<'_>;
    let mut _195: &[&str];
    let mut _196: &[&str; 4];
    let _197: &[&str; 4];
    let _198: [&str; 4];
    let mut _199: &[core::fmt::rt::Argument<'_>];
    let mut _200: &[core::fmt::rt::Argument<'_>; 4];
    let _201: &[core::fmt::rt::Argument<'_>; 4];
    let _202: [core::fmt::rt::Argument<'_>; 4];
    let mut _203: core::fmt::rt::Argument<'_>;
    let mut _204: &operations::effects::InvestingDirection;
    let _205: &operations::effects::InvestingDirection;
    let mut _206: core::fmt::rt::Argument<'_>;
    let mut _207: &u64;
    let _208: &u64;
    let mut _209: core::fmt::rt::Argument<'_>;
    let mut _210: &u64;
    let _211: &u64;
    let mut _212: core::fmt::rt::Argument<'_>;
    let mut _213: &u64;
    let _214: &u64;
    let mut _215: {closure@programs\kvault\src\utils\macros.rs:75:58: 75:61};
    let mut _216: &mut arrform::ArrForm<300>;
    let _217: ();
    let mut _218: &str;
    let _219: &str;
    let mut _220: &std::string::String;
    let _221: &std::string::String;
    let _222: std::string::String;
    let mut _224: std::fmt::Arguments<'_>;
    let mut _225: &[&str];
    let mut _226: &[&str; 1];
    let _227: &[&str; 1];
    let _228: [&str; 1];
    let mut _229: &[core::fmt::rt::Argument<'_>];
    let mut _230: &[core::fmt::rt::Argument<'_>; 1];
    let _231: &[core::fmt::rt::Argument<'_>; 1];
    let _232: [core::fmt::rt::Argument<'_>; 1];
    let mut _233: core::fmt::rt::Argument<'_>;
    let mut _234: &&str;
    let _235: &&str;
    let _236: &str;
    let mut _237: &arrform::ArrForm<300>;
    let _240: ();
    let mut _241: std::result::Result<(), std::fmt::Error>;
    let mut _242: &mut arrform::ArrForm<600>;
    let mut _243: std::fmt::Arguments<'_>;
    let mut _244: &[&str];
    let mut _245: &[&str; 4];
    let _246: &[&str; 4];
    let _247: [&str; 4];
    let mut _248: &[core::fmt::rt::Argument<'_>];
    let mut _249: &[core::fmt::rt::Argument<'_>; 4];
    let _250: &[core::fmt::rt::Argument<'_>; 4];
    let _251: [core::fmt::rt::Argument<'_>; 4];
    let mut _252: core::fmt::rt::Argument<'_>;
    let mut _253: &operations::effects::InvestingDirection;
    let _254: &operations::effects::InvestingDirection;
    let mut _255: core::fmt::rt::Argument<'_>;
    let mut _256: &u64;
    let _257: &u64;
    let mut _258: core::fmt::rt::Argument<'_>;
    let mut _259: &u64;
    let _260: &u64;
    let mut _261: core::fmt::rt::Argument<'_>;
    let mut _262: &u64;
    let _263: &u64;
    let mut _264: {closure@programs\kvault\src\utils\macros.rs:75:58: 75:61};
    let mut _265: &mut arrform::ArrForm<600>;
    let _266: ();
    let mut _267: &str;
    let _268: &str;
    let mut _269: &std::string::String;
    let _270: &std::string::String;
    let _271: std::string::String;
    let mut _273: std::fmt::Arguments<'_>;
    let mut _274: &[&str];
    let mut _275: &[&str; 1];
    let _276: &[&str; 1];
    let _277: [&str; 1];
    let mut _278: &[core::fmt::rt::Argument<'_>];
    let mut _279: &[core::fmt::rt::Argument<'_>; 1];
    let _280: &[core::fmt::rt::Argument<'_>; 1];
    let _281: [core::fmt::rt::Argument<'_>; 1];
    let mut _282: core::fmt::rt::Argument<'_>;
    let mut _283: &&str;
    let _284: &&str;
    let _285: &str;
    let mut _286: &arrform::ArrForm<600>;
    let _289: ();
    let mut _290: std::result::Result<(), std::fmt::Error>;
    let mut _291: &mut arrform::ArrForm<1200>;
    let mut _292: std::fmt::Arguments<'_>;
    let mut _293: &[&str];
    let mut _294: &[&str; 4];
    let _295: &[&str; 4];
    let _296: [&str; 4];
    let mut _297: &[core::fmt::rt::Argument<'_>];
    let mut _298: &[core::fmt::rt::Argument<'_>; 4];
    let _299: &[core::fmt::rt::Argument<'_>; 4];
    let _300: [core::fmt::rt::Argument<'_>; 4];
    let mut _301: core::fmt::rt::Argument<'_>;
    let mut _302: &operations::effects::InvestingDirection;
    let _303: &operations::effects::InvestingDirection;
    let mut _304: core::fmt::rt::Argument<'_>;
    let mut _305: &u64;
    let _306: &u64;
    let mut _307: core::fmt::rt::Argument<'_>;
    let mut _308: &u64;
    let _309: &u64;
    let mut _310: core::fmt::rt::Argument<'_>;
    let mut _311: &u64;
    let _312: &u64;
    let mut _313: {closure@programs\kvault\src\utils\macros.rs:75:58: 75:61};
    let mut _314: &mut arrform::ArrForm<1200>;
    let _315: ();
    let mut _316: &str;
    let _317: &str;
    let mut _318: &std::string::String;
    let _319: &std::string::String;
    let _320: std::string::String;
    let mut _322: std::fmt::Arguments<'_>;
    let mut _323: &[&str];
    let mut _324: &[&str; 1];
    let _325: &[&str; 1];
    let _326: [&str; 1];
    let mut _327: &[core::fmt::rt::Argument<'_>];
    let mut _328: &[core::fmt::rt::Argument<'_>; 1];
    let _329: &[core::fmt::rt::Argument<'_>; 1];
    let _330: [core::fmt::rt::Argument<'_>; 1];
    let mut _331: core::fmt::rt::Argument<'_>;
    let mut _332: &&str;
    let _333: &&str;
    let _334: &str;
    let mut _335: &arrform::ArrForm<1200>;
    let mut _337: operations::vault_operations::common::Holdings;
    let mut _338: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, operations::vault_operations::common::Holdings>;
    let mut _339: std::result::Result<operations::vault_operations::common::Holdings, anchor_lang::error::Error>;
    let mut _340: &state::VaultState;
    let _341: &state::VaultState;
    let mut _342: &std::cell::RefMut<'_, state::VaultState>;
    let mut _343: std::iter::Map<std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>, {closure@programs\kvault\src\handlers\handler_invest.rs:67:14: 67:28}>;
    let mut _344: &std::iter::Map<std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>, {closure@programs\kvault\src\handlers\handler_invest.rs:67:14: 67:28}>;
    let mut _345: u64;
    let mut _346: isize;
    let mut _348: !;
    let mut _349: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _352: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>;
    let mut _353: std::result::Result<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error>;
    let mut _354: &state::VaultState;
    let _355: &state::VaultState;
    let mut _356: &std::cell::RefMut<'_, state::VaultState>;
    let mut _357: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _358: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _359: isize;
    let mut _361: !;
    let mut _362: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _364: ();
    let mut _365: std::cell::Ref<'_, kamino_lending::Reserve>;
    let _366: ();
    let mut _367: bool;
    let mut _368: u64;
    let _369: ();
    let mut _370: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _371: std::result::Result<(), anchor_lang::error::Error>;
    let mut _372: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_spl::token_2022::TransferChecked<'_>>;
    let mut _373: anchor_lang::prelude::AccountInfo<'_>;
    let mut _374: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _375: anchor_spl::token_2022::TransferChecked<'_>;
    let mut _376: anchor_lang::prelude::AccountInfo<'_>;
    let mut _377: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _378: anchor_lang::prelude::AccountInfo<'_>;
    let mut _379: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _380: anchor_lang::prelude::AccountInfo<'_>;
    let mut _381: &anchor_lang::prelude::Signer<'_>;
    let mut _382: anchor_lang::prelude::AccountInfo<'_>;
    let mut _383: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _384: u64;
    let mut _385: u8;
    let mut _386: &anchor_spl::token_2022::spl_token_2022::state::Mint;
    let mut _387: &anchor_spl::token_interface::Mint;
    let _388: &anchor_spl::token_interface::Mint;
    let mut _389: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _390: isize;
    let mut _392: !;
    let mut _393: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _395: ();
    let mut _396: bool;
    let mut _397: u64;
    let mut _398: isize;
    let _399: ();
    let mut _400: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _401: std::result::Result<(), anchor_lang::error::Error>;
    let mut _402: &anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_invest::Invest<'_>>;
    let _403: &anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_invest::Invest<'_>>;
    let mut _404: &mut utils::cpi_mem::CpiMemoryLender<'_>;
    let mut _405: &mut utils::cpi_mem::CpiMemoryLender<'_>;
    let mut _406: u8;
    let mut _407: u64;
    let mut _408: u64;
    let mut _409: isize;
    let mut _411: !;
    let mut _412: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _414: ();
    let mut _415: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _416: std::result::Result<(), anchor_lang::error::Error>;
    let mut _417: &anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_invest::Invest<'_>>;
    let _418: &anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_invest::Invest<'_>>;
    let mut _419: &mut utils::cpi_mem::CpiMemoryLender<'_>;
    let mut _420: &mut utils::cpi_mem::CpiMemoryLender<'_>;
    let mut _421: u8;
    let mut _422: u64;
    let mut _423: u64;
    let mut _424: isize;
    let mut _426: !;
    let mut _427: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _429: ();
    let mut _430: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _431: std::result::Result<(), anchor_lang::error::Error>;
    let mut _432: &mut utils::cpi_mem::CpiMemoryLender<'_>;
    let mut _433: &mut utils::cpi_mem::CpiMemoryLender<'_>;
    let mut _434: std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _435: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _436: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _437: usize;
    let mut _438: usize;
    let mut _439: isize;
    let mut _441: !;
    let mut _442: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _444: ();
    let mut _445: utils::cpi_mem::CpiMemoryLender<'_>;
    let mut _447: (u64, operations::vault_operations::common::Invested);
    let mut _448: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, (u64, operations::vault_operations::common::Invested)>;
    let mut _449: std::result::Result<(u64, operations::vault_operations::common::Invested), anchor_lang::error::Error>;
    let mut _450: &state::VaultState;
    let _451: &state::VaultState;
    let mut _452: &std::cell::RefMut<'_, state::VaultState>;
    let mut _453: std::iter::Map<std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>, {closure@programs\kvault\src\handlers\handler_invest.rs:67:14: 67:28}>;
    let mut _454: &std::iter::Map<std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>, {closure@programs\kvault\src\handlers\handler_invest.rs:67:14: 67:28}>;
    let mut _455: u64;
    let mut _456: isize;
    let mut _458: !;
    let mut _459: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _462: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>;
    let mut _463: std::result::Result<fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error>;
    let mut _464: &state::VaultState;
    let _465: &state::VaultState;
    let mut _466: &std::cell::RefMut<'_, state::VaultState>;
    let mut _467: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _468: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _469: isize;
    let mut _471: !;
    let mut _472: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _475: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, u64>;
    let mut _476: std::result::Result<u64, anchor_lang::error::Error>;
    let mut _477: &anchor_lang::prelude::AccountInfo<'_>;
    let _478: &anchor_lang::prelude::AccountInfo<'_>;
    let _479: anchor_lang::prelude::AccountInfo<'_>;
    let mut _480: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _481: isize;
    let mut _483: !;
    let mut _484: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _487: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, u64>;
    let mut _488: std::result::Result<u64, anchor_lang::error::Error>;
    let mut _489: &anchor_lang::prelude::AccountInfo<'_>;
    let _490: &anchor_lang::prelude::AccountInfo<'_>;
    let _491: anchor_lang::prelude::AccountInfo<'_>;
    let mut _492: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _493: isize;
    let mut _495: !;
    let mut _496: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _499: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, u64>;
    let mut _500: std::result::Result<u64, anchor_lang::error::Error>;
    let mut _501: &anchor_lang::prelude::AccountInfo<'_>;
    let _502: &anchor_lang::prelude::AccountInfo<'_>;
    let _503: anchor_lang::prelude::AccountInfo<'_>;
    let mut _504: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _505: isize;
    let mut _507: !;
    let mut _508: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _510: ();
    let mut _511: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _512: std::result::Result<(), anchor_lang::error::Error>;
    let mut _513: operations::vault_checks::VaultBalances;
    let mut _514: u64;
    let mut _515: u64;
    let mut _516: u64;
    let mut _517: operations::vault_checks::VaultBalances;
    let mut _518: u64;
    let mut _519: u64;
    let mut _520: u64;
    let mut _521: operations::effects::InvestEffects;
    let mut _522: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _523: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _524: isize;
    let mut _526: !;
    let mut _527: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _529: ();
    let mut _538: &mut handlers::handler_invest::Invest<'_>;
    let mut _539: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _540: &mut handlers::handler_invest::Invest<'_>;
    let mut _541: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _542: &mut handlers::handler_invest::Invest<'_>;
    let mut _543: &mut handlers::handler_invest::Invest<'_>;
    let mut _544: &mut handlers::handler_invest::Invest<'_>;
    let mut _545: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _546: &mut handlers::handler_invest::Invest<'_>;
    let mut _547: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _548: &mut handlers::handler_invest::Invest<'_>;
    let mut _549: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _550: &mut handlers::handler_invest::Invest<'_>;
    let mut _551: &mut handlers::handler_invest::Invest<'_>;
    let mut _552: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _553: &mut handlers::handler_invest::Invest<'_>;
    let mut _554: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _555: &mut handlers::handler_invest::Invest<'_>;
    let mut _556: &mut handlers::handler_invest::Invest<'_>;
    let mut _557: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _558: &mut handlers::handler_invest::Invest<'_>;
    let mut _559: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _560: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _561: &mut handlers::handler_invest::Invest<'_>;
    let mut _562: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _563: &mut handlers::handler_invest::Invest<'_>;
    let mut _564: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _565: &mut handlers::handler_invest::Invest<'_>;
    let mut _566: bool;
    let mut _567: bool;
    let mut _568: bool;
    let mut _569: bool;
    let mut _570: bool;
    let mut _571: bool;
    let mut _572: isize;
    let mut _573: isize;
    let mut _574: isize;
    let mut _575: isize;
    let mut _576: isize;
    let mut _577: isize;
    let mut _578: isize;
    let mut _579: isize;
    let mut _580: isize;
    let mut _581: isize;
    let mut _582: isize;
    let mut _583: isize;
    let mut _584: isize;
    let mut _585: isize;
    let mut _586: isize;
    let mut _587: isize;
    let mut _588: isize;
    let mut _589: isize;
    let mut _590: isize;
    let mut _591: isize;
    let mut _592: isize;
    let mut _593: isize;
    let mut _594: isize;
    let mut _595: isize;
    let mut _596: isize;
    let mut _597: isize;
    let mut _598: isize;
    let mut _599: isize;
    let mut _600: isize;
    let mut _601: isize;
    let mut _602: isize;
    let mut _603: isize;
    let mut _604: isize;
    let mut _605: isize;
    let mut _606: isize;
    let mut _607: isize;
    let mut _608: isize;
    let mut _609: isize;
    let mut _610: isize;
    let mut _611: isize;
    let mut _612: isize;
    let mut _613: isize;
    let mut _614: isize;
    let mut _615: isize;
    let mut _616: isize;
    let mut _617: isize;
    let mut _618: isize;
    let mut _619: isize;
    let mut _620: isize;
    let mut _621: isize;
    let mut _622: isize;
    let mut _623: isize;
    let mut _624: isize;
    let mut _625: isize;
    let mut _626: isize;
    let mut _627: isize;
    let mut _628: isize;
    let mut _629: isize;
    let mut _630: isize;
    let mut _631: isize;
    let mut _632: isize;
    let mut _633: isize;
    let mut _634: isize;
    let mut _635: isize;
    let mut _636: isize;
    let mut _637: isize;
    let mut _638: isize;
    let mut _639: isize;
    let mut _640: isize;
    let mut _641: isize;
    let mut _642: isize;
    let mut _643: isize;
    let mut _644: isize;
    let mut _645: isize;
    let mut _646: isize;
    let mut _647: isize;
    let mut _648: isize;
    let mut _649: isize;
    let mut _650: isize;
    let mut _651: isize;
    let mut _652: isize;
    let mut _653: isize;
    let mut _654: isize;
    let mut _655: isize;
    let mut _656: isize;
    let mut _657: isize;
    let mut _658: isize;
    let mut _659: isize;
    let mut _660: isize;
    let mut _661: isize;
    let mut _662: isize;
    let mut _663: isize;
    let mut _664: isize;
    let mut _665: isize;
    let mut _666: isize;
    let mut _667: isize;
    let mut _668: isize;
    let mut _669: isize;
    let mut _670: isize;
    let mut _671: isize;
    let mut _672: isize;
    let mut _673: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _674: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _675: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _676: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _677: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _678: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _679: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _680: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug cpi_mem => _2;
        let _6: &mut std::cell::RefMut<'_, state::VaultState>;
        let _12: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _15: std::cell::RefMut<'_, state::VaultState>;
        scope 2 {
            debug vault_state => _6;
            let _16: u64;
            scope 7 {
                debug bump => _16;
                let _19: usize;
                scope 8 {
                    debug reserves_count => _19;
                    let _35: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _38: ();
                    let _39: std::cell::Ref<'_, kamino_lending::Reserve>;
                    let _44: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _47: std::cell::Ref<'_, kamino_lending::Reserve>;
                    scope 9 {
                        debug residual => _35;
                        scope 10 {
                        }
                    }
                    scope 11 {
                        debug val => _38;
                        scope 12 {
                        }
                    }
                    scope 13 {
                        debug reserve => _39;
                        let _48: &anchor_lang::prelude::Pubkey;
                        scope 18 {
                            debug reserve_address => _48;
                            let _51: u64;
                            let _59: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _62: u64;
                            scope 19 {
                                debug token_vault_before => _51;
                                let _63: u64;
                                let _71: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _74: u64;
                                scope 24 {
                                    debug ctoken_vault_before => _63;
                                    let _75: u64;
                                    let _83: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                    let _86: u64;
                                    scope 29 {
                                        debug reserve_liquidity_before => _75;
                                        let _87: u64;
                                        let _88: i64;
                                        let _93: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                        let _96: anchor_lang::prelude::Clock;
                                        scope 34 {
                                            debug current_slot => _87;
                                            debug unix_timestamp => _88;
                                            let _97: u64;
                                            scope 39 {
                                                debug current_timestamp => _97;
                                                let _100: std::iter::Map<std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>, {closure@programs\kvault\src\handlers\handler_invest.rs:67:14: 67:28}>;
                                                scope 40 {
                                                    debug reserves_iter => _100;
                                                    let _106: operations::effects::InvestEffects;
                                                    let _122: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                    let _125: operations::effects::InvestEffects;
                                                    scope 41 {
                                                        debug invest_effects => _106;
                                                        let _126: operations::effects::InvestingDirection;
                                                        let _127: u64;
                                                        let _128: u64;
                                                        let _129: u64;
                                                        scope 46 {
                                                            debug direction => _126;
                                                            debug liquidity_amount => _127;
                                                            debug collateral_amount => _128;
                                                            debug rounding_loss => _129;
                                                            let _140: arrform::ArrForm<150>;
                                                            let mut _141: arrform::ArrForm<150>;
                                                            let _189: arrform::ArrForm<300>;
                                                            let mut _190: arrform::ArrForm<300>;
                                                            let _238: arrform::ArrForm<600>;
                                                            let mut _239: arrform::ArrForm<600>;
                                                            let _287: arrform::ArrForm<1200>;
                                                            let mut _288: arrform::ArrForm<1200>;
                                                            let _336: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                                                            let _347: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                            let _350: operations::vault_operations::common::Holdings;
                                                            scope 47 {
                                                                debug formatted => _140;
                                                                let _174: std::string::String;
                                                                let mut _536: &[&str; 1];
                                                                scope 49 {
                                                                    debug res => _174;
                                                                }
                                                            }
                                                            scope 48 {
                                                                debug af => _141;
                                                                let mut _537: &[&str; 4];
                                                            }
                                                            scope 50 {
                                                                debug formatted => _189;
                                                                let _223: std::string::String;
                                                                let mut _534: &[&str; 1];
                                                                scope 52 {
                                                                    debug res => _223;
                                                                }
                                                            }
                                                            scope 51 {
                                                                debug af => _190;
                                                                let mut _535: &[&str; 4];
                                                            }
                                                            scope 53 {
                                                                debug formatted => _238;
                                                                let _272: std::string::String;
                                                                let mut _532: &[&str; 1];
                                                                scope 55 {
                                                                    debug res => _272;
                                                                }
                                                            }
                                                            scope 54 {
                                                                debug af => _239;
                                                                let mut _533: &[&str; 4];
                                                            }
                                                            scope 56 {
                                                                debug formatted => _287;
                                                                let _321: std::string::String;
                                                                let mut _530: &[&str; 1];
                                                                scope 58 {
                                                                    debug res => _321;
                                                                }
                                                            }
                                                            scope 57 {
                                                                debug af => _288;
                                                                let mut _531: &[&str; 4];
                                                            }
                                                            scope 59 {
                                                                debug invested_total => _336;
                                                                let _351: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                                                                let _360: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                let _363: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                                                                scope 64 {
                                                                    debug initial_aum => _351;
                                                                    let _391: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                    let _394: ();
                                                                    let _410: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                    let _413: ();
                                                                    let _425: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                    let _428: ();
                                                                    let _440: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                    let _443: ();
                                                                    let _446: operations::vault_operations::common::Invested;
                                                                    let _457: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                    let _460: (u64, operations::vault_operations::common::Invested);
                                                                    scope 69 {
                                                                        debug residual => _391;
                                                                        scope 70 {
                                                                        }
                                                                    }
                                                                    scope 71 {
                                                                        debug val => _394;
                                                                        scope 72 {
                                                                        }
                                                                    }
                                                                    scope 73 {
                                                                        debug residual => _410;
                                                                        scope 74 {
                                                                        }
                                                                    }
                                                                    scope 75 {
                                                                        debug val => _413;
                                                                        scope 76 {
                                                                        }
                                                                    }
                                                                    scope 77 {
                                                                        debug residual => _425;
                                                                        scope 78 {
                                                                        }
                                                                    }
                                                                    scope 79 {
                                                                        debug val => _428;
                                                                        scope 80 {
                                                                        }
                                                                    }
                                                                    scope 81 {
                                                                        debug residual => _440;
                                                                        scope 82 {
                                                                        }
                                                                    }
                                                                    scope 83 {
                                                                        debug val => _443;
                                                                        scope 84 {
                                                                        }
                                                                    }
                                                                    scope 85 {
                                                                        debug invested_after => _446;
                                                                        let _461: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                                                                        let _470: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                        let _473: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                                                                        scope 90 {
                                                                            debug aum_after_invest => _461;
                                                                            let _474: u64;
                                                                            let _482: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                            let _485: u64;
                                                                            scope 95 {
                                                                                debug token_vault_after => _474;
                                                                                let _486: u64;
                                                                                let _494: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                let _497: u64;
                                                                                scope 100 {
                                                                                    debug ctoken_vault_after => _486;
                                                                                    let _498: u64;
                                                                                    let _506: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                    let _509: u64;
                                                                                    scope 105 {
                                                                                        debug reserve_liquidity_after => _498;
                                                                                        let _525: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                        let _528: ();
                                                                                        scope 110 {
                                                                                            debug residual => _525;
                                                                                            scope 111 {
                                                                                            }
                                                                                        }
                                                                                        scope 112 {
                                                                                            debug val => _528;
                                                                                            scope 113 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    scope 106 {
                                                                                        debug residual => _506;
                                                                                        scope 107 {
                                                                                        }
                                                                                    }
                                                                                    scope 108 {
                                                                                        debug val => _509;
                                                                                        scope 109 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                                scope 101 {
                                                                                    debug residual => _494;
                                                                                    scope 102 {
                                                                                    }
                                                                                }
                                                                                scope 103 {
                                                                                    debug val => _497;
                                                                                    scope 104 {
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 96 {
                                                                                debug residual => _482;
                                                                                scope 97 {
                                                                                }
                                                                            }
                                                                            scope 98 {
                                                                                debug val => _485;
                                                                                scope 99 {
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 91 {
                                                                            debug residual => _470;
                                                                            scope 92 {
                                                                            }
                                                                        }
                                                                        scope 93 {
                                                                            debug val => _473;
                                                                            scope 94 {
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 86 {
                                                                        debug residual => _457;
                                                                        scope 87 {
                                                                        }
                                                                    }
                                                                    scope 88 {
                                                                        debug val => _460;
                                                                        scope 89 {
                                                                        }
                                                                    }
                                                                }
                                                                scope 65 {
                                                                    debug residual => _360;
                                                                    scope 66 {
                                                                    }
                                                                }
                                                                scope 67 {
                                                                    debug val => _363;
                                                                    scope 68 {
                                                                    }
                                                                }
                                                            }
                                                            scope 60 {
                                                                debug residual => _347;
                                                                scope 61 {
                                                                }
                                                            }
                                                            scope 62 {
                                                                debug val => _350;
                                                                scope 63 {
                                                                }
                                                            }
                                                        }
                                                    }
                                                    scope 42 {
                                                        debug residual => _122;
                                                        scope 43 {
                                                        }
                                                    }
                                                    scope 44 {
                                                        debug val => _125;
                                                        scope 45 {
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        scope 35 {
                                            debug residual => _93;
                                            scope 36 {
                                            }
                                        }
                                        scope 37 {
                                            debug val => _96;
                                            scope 38 {
                                            }
                                        }
                                    }
                                    scope 30 {
                                        debug residual => _83;
                                        scope 31 {
                                        }
                                    }
                                    scope 32 {
                                        debug val => _86;
                                        scope 33 {
                                        }
                                    }
                                }
                                scope 25 {
                                    debug residual => _71;
                                    scope 26 {
                                    }
                                }
                                scope 27 {
                                    debug val => _74;
                                    scope 28 {
                                    }
                                }
                            }
                            scope 20 {
                                debug residual => _59;
                                scope 21 {
                                }
                            }
                            scope 22 {
                                debug val => _62;
                                scope 23 {
                                }
                            }
                        }
                    }
                    scope 14 {
                        debug residual => _44;
                        scope 15 {
                        }
                    }
                    scope 16 {
                        debug val => _47;
                        scope 17 {
                        }
                    }
                }
            }
        }
        scope 3 {
            debug residual => _12;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _15;
            scope 6 {
            }
        }
    }

    bb0: {
        _567 = const false;
        _566 = const false;
        _568 = const false;
        _569 = const false;
        _571 = const false;
        _570 = const false;
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _538 = deref_copy (_1.1: &mut handlers::handler_invest::Invest<'_>);
        _4 = &(*_538);
        _3 = <handlers::handler_invest::Invest<'_> as anchor_lang::ToAccountInfos<'_>>::to_account_infos(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_4);
        StorageLive(_5);
        _539 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _5 = &(*_539);
        _2 = cpi_mem::CpiMemoryLender::<'_>::build_cpi_memory_lender(move _3, move _5) -> [return: bb2, unwind: bb269];
    }

    bb2: {
        _567 = const true;
        StorageDead(_5);
        StorageDead(_3);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _540 = deref_copy (_1.1: &mut handlers::handler_invest::Invest<'_>);
        _10 = &((*_540).2: anchor_lang::prelude::AccountLoader<'_, state::VaultState>);
        _9 = anchor_lang::prelude::AccountLoader::<'_, state::VaultState>::load_mut(move _10) -> [return: bb3, unwind: bb299];
    }

    bb3: {
        StorageDead(_10);
        _8 = <std::result::Result<RefMut<'_, state::VaultState>, anchor_lang::error::Error> as Try>::branch(move _9) -> [return: bb4, unwind: bb299];
    }

    bb4: {
        StorageDead(_9);
        _11 = discriminant(_8);
        switchInt(move _11) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_15);
        _15 = move ((_8 as Continue).0: std::cell::RefMut<'_, state::VaultState>);
        _7 = move _15;
        StorageDead(_15);
        _6 = &mut _7;
        _572 = discriminant(_8);
        StorageDead(_8);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = &(*_6);
        _17 = <RefMut<'_, state::VaultState> as Deref>::deref(move _18) -> [return: bb9, unwind: bb268];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_12);
        _12 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_14);
        _14 = move _12;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _14) -> [return: bb8, unwind: bb297];
    }

    bb8: {
        StorageDead(_14);
        StorageDead(_12);
        _650 = discriminant(_8);
        StorageDead(_8);
        goto -> bb251;
    }

    bb9: {
        StorageDead(_18);
        _16 = ((*_17).2: u64);
        StorageDead(_17);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = &(*_6);
        _21 = <RefMut<'_, state::VaultState> as Deref>::deref(move _22) -> [return: bb10, unwind: bb268];
    }

    bb10: {
        _20 = &(*_21);
        StorageDead(_22);
        _19 = state::VaultState::get_reserves_count(move _20) -> [return: bb11, unwind: bb268];
    }

    bb11: {
        StorageDead(_20);
        StorageDead(_21);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &mut _2;
        _27 = &mut (*_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _541 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _31 = &(*_541);
        _30 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _31) -> [return: bb12, unwind: bb268];
    }

    bb12: {
        StorageDead(_31);
        StorageLive(_32);
        _32 = _19;
        _29 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::take(move _30, move _32) -> [return: bb13, unwind: bb268];
    }

    bb13: {
        StorageDead(_32);
        StorageDead(_30);
        StorageLive(_33);
        _33 = _19;
        _26 = cpi_refresh_reserves::<'_, '_, std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>(move _27, move _29, move _33) -> [return: bb14, unwind: bb268];
    }

    bb14: {
        StorageDead(_33);
        StorageDead(_29);
        StorageDead(_27);
        _25 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _26) -> [return: bb15, unwind: bb268];
    }

    bb15: {
        StorageDead(_26);
        _34 = discriminant(_25);
        switchInt(move _34) -> [0: bb16, 1: bb17, otherwise: bb6];
    }

    bb16: {
        StorageLive(_38);
        _38 = ((_25 as Continue).0: ());
        _24 = _38;
        StorageDead(_38);
        _574 = discriminant(_25);
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_24);
        _23 = const ();
        StorageDead(_23);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _542 = deref_copy (_1.1: &mut handlers::handler_invest::Invest<'_>);
        _42 = &((*_542).7: anchor_lang::prelude::AccountLoader<'_, kamino_lending::Reserve>);
        _41 = anchor_lang::prelude::AccountLoader::<'_, kamino_lending::Reserve>::load(move _42) -> [return: bb19, unwind: bb268];
    }

    bb17: {
        StorageLive(_35);
        _35 = move ((_25 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_37);
        _37 = move _35;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _37) -> [return: bb18, unwind: bb296];
    }

    bb18: {
        StorageDead(_37);
        StorageDead(_35);
        _648 = discriminant(_25);
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb250;
    }

    bb19: {
        StorageDead(_42);
        _40 = <std::result::Result<Ref<'_, kamino_lending::Reserve>, anchor_lang::error::Error> as Try>::branch(move _41) -> [return: bb20, unwind: bb268];
    }

    bb20: {
        StorageDead(_41);
        _43 = discriminant(_40);
        switchInt(move _43) -> [0: bb21, 1: bb22, otherwise: bb6];
    }

    bb21: {
        StorageLive(_47);
        _47 = move ((_40 as Continue).0: std::cell::Ref<'_, kamino_lending::Reserve>);
        _566 = const true;
        _39 = move _47;
        StorageDead(_47);
        _576 = discriminant(_40);
        StorageDead(_40);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _543 = deref_copy (_1.1: &mut handlers::handler_invest::Invest<'_>);
        _50 = &((*_543).7: anchor_lang::prelude::AccountLoader<'_, kamino_lending::Reserve>);
        _49 = <anchor_lang::prelude::AccountLoader<'_, kamino_lending::Reserve> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _50) -> [return: bb24, unwind: bb294];
    }

    bb22: {
        StorageLive(_44);
        _44 = move ((_40 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_46);
        _46 = move _44;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _46) -> [return: bb23, unwind: bb295];
    }

    bb23: {
        StorageDead(_46);
        StorageDead(_44);
        _646 = discriminant(_40);
        StorageDead(_40);
        goto -> bb249;
    }

    bb24: {
        StorageDead(_50);
        _48 = (_49.0: &anchor_lang::prelude::Pubkey);
        drop(_49) -> [return: bb25, unwind: bb294];
    }

    bb25: {
        StorageDead(_49);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _544 = deref_copy (_1.1: &mut handlers::handler_invest::Invest<'_>);
        _545 = deref_copy ((*_544).3: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _673 = (((_545.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _57 = &(*_673);
        _56 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _57) -> [return: bb26, unwind: bb294];
    }

    bb26: {
        StorageDead(_57);
        _55 = &_56;
        _54 = &(*_55);
        _53 = anchor_spl::token::accessor::amount(move _54) -> [return: bb27, unwind: bb267];
    }

    bb27: {
        StorageDead(_54);
        _52 = <std::result::Result<u64, anchor_lang::error::Error> as Try>::branch(move _53) -> [return: bb28, unwind: bb267];
    }

    bb28: {
        StorageDead(_53);
        _58 = discriminant(_52);
        switchInt(move _58) -> [0: bb29, 1: bb30, otherwise: bb6];
    }

    bb29: {
        StorageLive(_62);
        _62 = ((_52 as Continue).0: u64);
        _51 = _62;
        StorageDead(_62);
        _578 = discriminant(_52);
        drop(_56) -> [return: bb32, unwind: bb294];
    }

    bb30: {
        StorageLive(_59);
        _59 = move ((_52 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_61);
        _61 = move _59;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _61) -> [return: bb31, unwind: bb292];
    }

    bb31: {
        StorageDead(_61);
        StorageDead(_59);
        _644 = discriminant(_52);
        drop(_56) -> [return: bb247, unwind: bb294];
    }

    bb32: {
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_52);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _546 = deref_copy (_1.1: &mut handlers::handler_invest::Invest<'_>);
        _547 = deref_copy ((*_546).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _674 = (((_547.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _69 = &(*_674);
        _68 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _69) -> [return: bb33, unwind: bb294];
    }

    bb33: {
        StorageDead(_69);
        _67 = &_68;
        _66 = &(*_67);
        _65 = anchor_spl::token::accessor::amount(move _66) -> [return: bb34, unwind: bb266];
    }

    bb34: {
        StorageDead(_66);
        _64 = <std::result::Result<u64, anchor_lang::error::Error> as Try>::branch(move _65) -> [return: bb35, unwind: bb266];
    }

    bb35: {
        StorageDead(_65);
        _70 = discriminant(_64);
        switchInt(move _70) -> [0: bb36, 1: bb37, otherwise: bb6];
    }

    bb36: {
        StorageLive(_74);
        _74 = ((_64 as Continue).0: u64);
        _63 = _74;
        StorageDead(_74);
        _580 = discriminant(_64);
        drop(_68) -> [return: bb39, unwind: bb294];
    }

    bb37: {
        StorageLive(_71);
        _71 = move ((_64 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_73);
        _73 = move _71;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _73) -> [return: bb38, unwind: bb291];
    }

    bb38: {
        StorageDead(_73);
        StorageDead(_71);
        _642 = discriminant(_64);
        drop(_68) -> [return: bb245, unwind: bb294];
    }

    bb39: {
        StorageDead(_68);
        StorageDead(_67);
        StorageDead(_64);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        _548 = deref_copy (_1.1: &mut handlers::handler_invest::Invest<'_>);
        _81 = &((*_548).10: anchor_lang::prelude::AccountInfo<'_>);
        _80 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _81) -> [return: bb40, unwind: bb294];
    }

    bb40: {
        StorageDead(_81);
        _79 = &_80;
        _78 = &(*_79);
        _77 = anchor_spl::token::accessor::amount(move _78) -> [return: bb41, unwind: bb265];
    }

    bb41: {
        StorageDead(_78);
        _76 = <std::result::Result<u64, anchor_lang::error::Error> as Try>::branch(move _77) -> [return: bb42, unwind: bb265];
    }

    bb42: {
        StorageDead(_77);
        _82 = discriminant(_76);
        switchInt(move _82) -> [0: bb43, 1: bb44, otherwise: bb6];
    }

    bb43: {
        StorageLive(_86);
        _86 = ((_76 as Continue).0: u64);
        _75 = _86;
        StorageDead(_86);
        _582 = discriminant(_76);
        drop(_80) -> [return: bb46, unwind: bb294];
    }

    bb44: {
        StorageLive(_83);
        _83 = move ((_76 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_85);
        _85 = move _83;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _85) -> [return: bb45, unwind: bb290];
    }

    bb45: {
        StorageDead(_85);
        StorageDead(_83);
        _640 = discriminant(_76);
        drop(_80) -> [return: bb243, unwind: bb294];
    }

    bb46: {
        StorageDead(_80);
        StorageDead(_79);
        StorageDead(_76);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb47, unwind: bb294];
    }

    bb47: {
        _90 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _91) -> [return: bb48, unwind: bb294];
    }

    bb48: {
        StorageDead(_91);
        _92 = discriminant(_90);
        switchInt(move _92) -> [0: bb49, 1: bb50, otherwise: bb6];
    }

    bb49: {
        StorageLive(_96);
        _96 = move ((_90 as Continue).0: anchor_lang::prelude::Clock);
        _89 = move _96;
        StorageDead(_96);
        StorageLive(_87);
        _87 = (_89.0: u64);
        StorageLive(_88);
        _88 = (_89.4: i64);
        _584 = discriminant(_90);
        StorageDead(_90);
        StorageDead(_89);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = _88;
        _98 = <i64 as TryInto<u64>>::try_into(move _99) -> [return: bb52, unwind: bb294];
    }

    bb50: {
        StorageLive(_93);
        _93 = move ((_90 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_95);
        _95 = move _93;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _95) -> [return: bb51, unwind: bb289];
    }

    bb51: {
        StorageDead(_95);
        StorageDead(_93);
        _638 = discriminant(_90);
        StorageDead(_90);
        StorageDead(_89);
        goto -> bb244;
    }

    bb52: {
        StorageDead(_99);
        _97 = std::result::Result::<u64, TryFromIntError>::unwrap(move _98) -> [return: bb53, unwind: bb294];
    }

    bb53: {
        StorageDead(_98);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        _549 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _103 = &(*_549);
        _102 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _103) -> [return: bb54, unwind: bb294];
    }

    bb54: {
        StorageDead(_103);
        StorageLive(_104);
        _104 = _19;
        _101 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::take(move _102, move _104) -> [return: bb55, unwind: bb294];
    }

    bb55: {
        StorageDead(_104);
        StorageDead(_102);
        StorageLive(_105);
        _105 = {closure@programs\kvault\src\handlers\handler_invest.rs:67:14: 67:28};
        _100 = <std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>> as Iterator>::map::<kamino_lending::utils::FatAccountLoader<'_, kamino_lending::Reserve>, {closure@programs\kvault\src\handlers\handler_invest.rs:67:14: 67:28}>(move _101, move _105) -> [return: bb56, unwind: bb294];
    }

    bb56: {
        StorageDead(_105);
        StorageDead(_101);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        _111 = &mut (*_6);
        _110 = <RefMut<'_, state::VaultState> as DerefMut>::deref_mut(move _111) -> [return: bb57, unwind: bb294];
    }

    bb57: {
        _109 = &mut (*_110);
        StorageDead(_111);
        StorageLive(_112);
        StorageLive(_113);
        _113 = &_100;
        _112 = <Map<std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>, {closure@programs\kvault\src\handlers\handler_invest.rs:67:14: 67:28}> as Clone>::clone(move _113) -> [return: bb58, unwind: bb294];
    }

    bb58: {
        StorageDead(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _117 = &_39;
        _116 = &(*_117);
        _115 = <Ref<'_, kamino_lending::Reserve> as Deref>::deref(move _116) -> [return: bb59, unwind: bb294];
    }

    bb59: {
        _114 = &(*_115);
        StorageDead(_116);
        StorageLive(_118);
        _118 = &(*_48);
        StorageLive(_119);
        _119 = _87;
        StorageLive(_120);
        _120 = _97;
        _108 = operations::vault_operations::invest::<'_, kamino_lending::utils::FatAccountLoader<'_, kamino_lending::Reserve>, Map<std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>, {closure@programs\kvault\src\handlers\handler_invest.rs:67:14: 67:28}>>(move _109, move _112, move _114, move _118, move _119, move _120) -> [return: bb60, unwind: bb294];
    }

    bb60: {
        StorageDead(_120);
        StorageDead(_119);
        StorageDead(_118);
        StorageDead(_114);
        StorageDead(_112);
        StorageDead(_109);
        _107 = <std::result::Result<InvestEffects, anchor_lang::error::Error> as Try>::branch(move _108) -> [return: bb61, unwind: bb294];
    }

    bb61: {
        StorageDead(_108);
        _121 = discriminant(_107);
        switchInt(move _121) -> [0: bb62, 1: bb63, otherwise: bb6];
    }

    bb62: {
        StorageLive(_125);
        _125 = move ((_107 as Continue).0: operations::effects::InvestEffects);
        _106 = move _125;
        StorageDead(_125);
        _586 = discriminant(_107);
        StorageDead(_117);
        StorageDead(_115);
        StorageDead(_110);
        StorageDead(_107);
        StorageLive(_126);
        _126 = (_106.0: operations::effects::InvestingDirection);
        StorageLive(_127);
        _127 = (_106.1: u64);
        StorageLive(_128);
        _128 = (_106.2: u64);
        StorageLive(_129);
        _129 = (_106.3: u64);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        _133 = const "InvestEffects direction={:?} liquidity_amount={}, collateral_amount={}, rounding_loss={}";
        _132 = &(*_133);
        _131 = core::str::<impl str>::len(move _132) -> [return: bb65, unwind: bb294];
    }

    bb63: {
        StorageLive(_122);
        _122 = move ((_107 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_124);
        _124 = move _122;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _124) -> [return: bb64, unwind: bb288];
    }

    bb64: {
        StorageDead(_124);
        StorageDead(_122);
        _636 = discriminant(_107);
        StorageDead(_117);
        StorageDead(_115);
        StorageDead(_110);
        StorageDead(_107);
        goto -> bb242;
    }

    bb65: {
        StorageDead(_132);
        _138 = Le(const 0_usize, _131);
        switchInt(move _138) -> [0: bb67, otherwise: bb66];
    }

    bb66: {
        _139 = Le(_131, const 50_usize);
        switchInt(move _139) -> [0: bb67, otherwise: bb72];
    }

    bb67: {
        _136 = Le(const 51_usize, _131);
        switchInt(move _136) -> [0: bb69, otherwise: bb68];
    }

    bb68: {
        _137 = Le(_131, const 100_usize);
        switchInt(move _137) -> [0: bb69, otherwise: bb88];
    }

    bb69: {
        _134 = Le(const 101_usize, _131);
        switchInt(move _134) -> [0: bb71, otherwise: bb70];
    }

    bb70: {
        _135 = Le(_131, const 200_usize);
        switchInt(move _135) -> [0: bb71, otherwise: bb104];
    }

    bb71: {
        StorageLive(_287);
        StorageLive(_288);
        _288 = ArrForm::<1200>::new() -> [return: bb120, unwind: bb294];
    }

    bb72: {
        StorageLive(_140);
        StorageLive(_141);
        _141 = ArrForm::<150>::new() -> [return: bb73, unwind: bb294];
    }

    bb73: {
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        _144 = &mut _141;
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        _537 = const _;
        _148 = &(*_537);
        _147 = &(*_148);
        _146 = move _147 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_147);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        _156 = &_126;
        _155 = &(*_156);
        _154 = core::fmt::rt::Argument::<'_>::new_debug::<InvestingDirection>(move _155) -> [return: bb74, unwind: bb294];
    }

    bb74: {
        StorageDead(_155);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        _159 = &_127;
        _158 = &(*_159);
        _157 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _158) -> [return: bb75, unwind: bb294];
    }

    bb75: {
        StorageDead(_158);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        _162 = &_128;
        _161 = &(*_162);
        _160 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _161) -> [return: bb76, unwind: bb294];
    }

    bb76: {
        StorageDead(_161);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        _165 = &_129;
        _164 = &(*_165);
        _163 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _164) -> [return: bb77, unwind: bb294];
    }

    bb77: {
        StorageDead(_164);
        _153 = [move _154, move _157, move _160, move _163];
        StorageDead(_163);
        StorageDead(_160);
        StorageDead(_157);
        StorageDead(_154);
        _152 = &_153;
        _151 = &(*_152);
        _150 = move _151 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_151);
        _145 = Arguments::<'_>::new_v1(move _146, move _150) -> [return: bb78, unwind: bb294];
    }

    bb78: {
        StorageDead(_150);
        StorageDead(_146);
        _143 = ArrForm::<150>::format(move _144, move _145) -> [return: bb79, unwind: bb294];
    }

    bb79: {
        StorageDead(_145);
        StorageDead(_144);
        StorageLive(_166);
        StorageLive(_167);
        _167 = &mut _141;
        _166 = {closure@programs\kvault\src\utils\macros.rs:75:58: 75:61} { af: move _167 };
        StorageDead(_167);
        _142 = std::result::Result::<(), std::fmt::Error>::unwrap_or_else::<{closure@programs\kvault\src\utils\macros.rs:75:58: 75:61}>(move _143, move _166) -> [return: bb80, unwind: bb294];
    }

    bb80: {
        StorageDead(_166);
        StorageDead(_143);
        StorageDead(_165);
        StorageDead(_162);
        StorageDead(_159);
        StorageDead(_156);
        StorageDead(_153);
        StorageDead(_152);
        StorageDead(_148);
        StorageDead(_142);
        _140 = move _141;
        StorageDead(_141);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        _536 = const _;
        _178 = &(*_536);
        _177 = &(*_178);
        _176 = move _177 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_177);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        _188 = &_140;
        _187 = ArrForm::<150>::as_str(move _188) -> [return: bb81, unwind: bb294];
    }

    bb81: {
        StorageDead(_188);
        _186 = &_187;
        _185 = &(*_186);
        _184 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _185) -> [return: bb82, unwind: bb294];
    }

    bb82: {
        StorageDead(_185);
        _183 = [move _184];
        StorageDead(_184);
        _182 = &_183;
        _181 = &(*_182);
        _180 = move _181 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_181);
        _175 = Arguments::<'_>::new_v1(move _176, move _180) -> [return: bb83, unwind: bb294];
    }

    bb83: {
        StorageDead(_180);
        StorageDead(_176);
        _174 = format(move _175) -> [return: bb84, unwind: bb294];
    }

    bb84: {
        StorageDead(_175);
        StorageDead(_187);
        StorageDead(_186);
        StorageDead(_183);
        StorageDead(_182);
        StorageDead(_178);
        _173 = move _174;
        StorageDead(_174);
        _172 = &_173;
        _171 = &(*_172);
        _170 = <String as Deref>::deref(move _171) -> [return: bb85, unwind: bb264];
    }

    bb85: {
        _169 = &(*_170);
        StorageDead(_171);
        _168 = solana_program::log::sol_log(move _169) -> [return: bb86, unwind: bb264];
    }

    bb86: {
        StorageDead(_169);
        drop(_173) -> [return: bb87, unwind: bb294];
    }

    bb87: {
        StorageDead(_173);
        StorageDead(_172);
        StorageDead(_170);
        StorageDead(_168);
        _130 = const ();
        StorageDead(_140);
        goto -> bb135;
    }

    bb88: {
        StorageLive(_189);
        StorageLive(_190);
        _190 = ArrForm::<300>::new() -> [return: bb89, unwind: bb294];
    }

    bb89: {
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        _193 = &mut _190;
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        _535 = const _;
        _197 = &(*_535);
        _196 = &(*_197);
        _195 = move _196 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_196);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        _205 = &_126;
        _204 = &(*_205);
        _203 = core::fmt::rt::Argument::<'_>::new_debug::<InvestingDirection>(move _204) -> [return: bb90, unwind: bb294];
    }

    bb90: {
        StorageDead(_204);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        _208 = &_127;
        _207 = &(*_208);
        _206 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _207) -> [return: bb91, unwind: bb294];
    }

    bb91: {
        StorageDead(_207);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        _211 = &_128;
        _210 = &(*_211);
        _209 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _210) -> [return: bb92, unwind: bb294];
    }

    bb92: {
        StorageDead(_210);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        _214 = &_129;
        _213 = &(*_214);
        _212 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _213) -> [return: bb93, unwind: bb294];
    }

    bb93: {
        StorageDead(_213);
        _202 = [move _203, move _206, move _209, move _212];
        StorageDead(_212);
        StorageDead(_209);
        StorageDead(_206);
        StorageDead(_203);
        _201 = &_202;
        _200 = &(*_201);
        _199 = move _200 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_200);
        _194 = Arguments::<'_>::new_v1(move _195, move _199) -> [return: bb94, unwind: bb294];
    }

    bb94: {
        StorageDead(_199);
        StorageDead(_195);
        _192 = ArrForm::<300>::format(move _193, move _194) -> [return: bb95, unwind: bb294];
    }

    bb95: {
        StorageDead(_194);
        StorageDead(_193);
        StorageLive(_215);
        StorageLive(_216);
        _216 = &mut _190;
        _215 = {closure@programs\kvault\src\utils\macros.rs:75:58: 75:61} { af: move _216 };
        StorageDead(_216);
        _191 = std::result::Result::<(), std::fmt::Error>::unwrap_or_else::<{closure@programs\kvault\src\utils\macros.rs:75:58: 75:61}>(move _192, move _215) -> [return: bb96, unwind: bb294];
    }

    bb96: {
        StorageDead(_215);
        StorageDead(_192);
        StorageDead(_214);
        StorageDead(_211);
        StorageDead(_208);
        StorageDead(_205);
        StorageDead(_202);
        StorageDead(_201);
        StorageDead(_197);
        StorageDead(_191);
        _189 = move _190;
        StorageDead(_190);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        _534 = const _;
        _227 = &(*_534);
        _226 = &(*_227);
        _225 = move _226 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_226);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        _237 = &_189;
        _236 = ArrForm::<300>::as_str(move _237) -> [return: bb97, unwind: bb294];
    }

    bb97: {
        StorageDead(_237);
        _235 = &_236;
        _234 = &(*_235);
        _233 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _234) -> [return: bb98, unwind: bb294];
    }

    bb98: {
        StorageDead(_234);
        _232 = [move _233];
        StorageDead(_233);
        _231 = &_232;
        _230 = &(*_231);
        _229 = move _230 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_230);
        _224 = Arguments::<'_>::new_v1(move _225, move _229) -> [return: bb99, unwind: bb294];
    }

    bb99: {
        StorageDead(_229);
        StorageDead(_225);
        _223 = format(move _224) -> [return: bb100, unwind: bb294];
    }

    bb100: {
        StorageDead(_224);
        StorageDead(_236);
        StorageDead(_235);
        StorageDead(_232);
        StorageDead(_231);
        StorageDead(_227);
        _222 = move _223;
        StorageDead(_223);
        _221 = &_222;
        _220 = &(*_221);
        _219 = <String as Deref>::deref(move _220) -> [return: bb101, unwind: bb263];
    }

    bb101: {
        _218 = &(*_219);
        StorageDead(_220);
        _217 = solana_program::log::sol_log(move _218) -> [return: bb102, unwind: bb263];
    }

    bb102: {
        StorageDead(_218);
        drop(_222) -> [return: bb103, unwind: bb294];
    }

    bb103: {
        StorageDead(_222);
        StorageDead(_221);
        StorageDead(_219);
        StorageDead(_217);
        _130 = const ();
        StorageDead(_189);
        goto -> bb135;
    }

    bb104: {
        StorageLive(_238);
        StorageLive(_239);
        _239 = ArrForm::<600>::new() -> [return: bb105, unwind: bb294];
    }

    bb105: {
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        _242 = &mut _239;
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        _533 = const _;
        _246 = &(*_533);
        _245 = &(*_246);
        _244 = move _245 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_245);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        _254 = &_126;
        _253 = &(*_254);
        _252 = core::fmt::rt::Argument::<'_>::new_debug::<InvestingDirection>(move _253) -> [return: bb106, unwind: bb294];
    }

    bb106: {
        StorageDead(_253);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        _257 = &_127;
        _256 = &(*_257);
        _255 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _256) -> [return: bb107, unwind: bb294];
    }

    bb107: {
        StorageDead(_256);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        _260 = &_128;
        _259 = &(*_260);
        _258 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _259) -> [return: bb108, unwind: bb294];
    }

    bb108: {
        StorageDead(_259);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        _263 = &_129;
        _262 = &(*_263);
        _261 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _262) -> [return: bb109, unwind: bb294];
    }

    bb109: {
        StorageDead(_262);
        _251 = [move _252, move _255, move _258, move _261];
        StorageDead(_261);
        StorageDead(_258);
        StorageDead(_255);
        StorageDead(_252);
        _250 = &_251;
        _249 = &(*_250);
        _248 = move _249 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_249);
        _243 = Arguments::<'_>::new_v1(move _244, move _248) -> [return: bb110, unwind: bb294];
    }

    bb110: {
        StorageDead(_248);
        StorageDead(_244);
        _241 = ArrForm::<600>::format(move _242, move _243) -> [return: bb111, unwind: bb294];
    }

    bb111: {
        StorageDead(_243);
        StorageDead(_242);
        StorageLive(_264);
        StorageLive(_265);
        _265 = &mut _239;
        _264 = {closure@programs\kvault\src\utils\macros.rs:75:58: 75:61} { af: move _265 };
        StorageDead(_265);
        _240 = std::result::Result::<(), std::fmt::Error>::unwrap_or_else::<{closure@programs\kvault\src\utils\macros.rs:75:58: 75:61}>(move _241, move _264) -> [return: bb112, unwind: bb294];
    }

    bb112: {
        StorageDead(_264);
        StorageDead(_241);
        StorageDead(_263);
        StorageDead(_260);
        StorageDead(_257);
        StorageDead(_254);
        StorageDead(_251);
        StorageDead(_250);
        StorageDead(_246);
        StorageDead(_240);
        _238 = move _239;
        StorageDead(_239);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        _532 = const _;
        _276 = &(*_532);
        _275 = &(*_276);
        _274 = move _275 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_275);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        _286 = &_238;
        _285 = ArrForm::<600>::as_str(move _286) -> [return: bb113, unwind: bb294];
    }

    bb113: {
        StorageDead(_286);
        _284 = &_285;
        _283 = &(*_284);
        _282 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _283) -> [return: bb114, unwind: bb294];
    }

    bb114: {
        StorageDead(_283);
        _281 = [move _282];
        StorageDead(_282);
        _280 = &_281;
        _279 = &(*_280);
        _278 = move _279 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_279);
        _273 = Arguments::<'_>::new_v1(move _274, move _278) -> [return: bb115, unwind: bb294];
    }

    bb115: {
        StorageDead(_278);
        StorageDead(_274);
        _272 = format(move _273) -> [return: bb116, unwind: bb294];
    }

    bb116: {
        StorageDead(_273);
        StorageDead(_285);
        StorageDead(_284);
        StorageDead(_281);
        StorageDead(_280);
        StorageDead(_276);
        _271 = move _272;
        StorageDead(_272);
        _270 = &_271;
        _269 = &(*_270);
        _268 = <String as Deref>::deref(move _269) -> [return: bb117, unwind: bb262];
    }

    bb117: {
        _267 = &(*_268);
        StorageDead(_269);
        _266 = solana_program::log::sol_log(move _267) -> [return: bb118, unwind: bb262];
    }

    bb118: {
        StorageDead(_267);
        drop(_271) -> [return: bb119, unwind: bb294];
    }

    bb119: {
        StorageDead(_271);
        StorageDead(_270);
        StorageDead(_268);
        StorageDead(_266);
        _130 = const ();
        StorageDead(_238);
        goto -> bb135;
    }

    bb120: {
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        _291 = &mut _288;
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        StorageLive(_295);
        _531 = const _;
        _295 = &(*_531);
        _294 = &(*_295);
        _293 = move _294 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_294);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        _303 = &_126;
        _302 = &(*_303);
        _301 = core::fmt::rt::Argument::<'_>::new_debug::<InvestingDirection>(move _302) -> [return: bb121, unwind: bb294];
    }

    bb121: {
        StorageDead(_302);
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        _306 = &_127;
        _305 = &(*_306);
        _304 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _305) -> [return: bb122, unwind: bb294];
    }

    bb122: {
        StorageDead(_305);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        _309 = &_128;
        _308 = &(*_309);
        _307 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _308) -> [return: bb123, unwind: bb294];
    }

    bb123: {
        StorageDead(_308);
        StorageLive(_310);
        StorageLive(_311);
        StorageLive(_312);
        _312 = &_129;
        _311 = &(*_312);
        _310 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _311) -> [return: bb124, unwind: bb294];
    }

    bb124: {
        StorageDead(_311);
        _300 = [move _301, move _304, move _307, move _310];
        StorageDead(_310);
        StorageDead(_307);
        StorageDead(_304);
        StorageDead(_301);
        _299 = &_300;
        _298 = &(*_299);
        _297 = move _298 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_298);
        _292 = Arguments::<'_>::new_v1(move _293, move _297) -> [return: bb125, unwind: bb294];
    }

    bb125: {
        StorageDead(_297);
        StorageDead(_293);
        _290 = ArrForm::<1200>::format(move _291, move _292) -> [return: bb126, unwind: bb294];
    }

    bb126: {
        StorageDead(_292);
        StorageDead(_291);
        StorageLive(_313);
        StorageLive(_314);
        _314 = &mut _288;
        _313 = {closure@programs\kvault\src\utils\macros.rs:75:58: 75:61} { af: move _314 };
        StorageDead(_314);
        _289 = std::result::Result::<(), std::fmt::Error>::unwrap_or_else::<{closure@programs\kvault\src\utils\macros.rs:75:58: 75:61}>(move _290, move _313) -> [return: bb127, unwind: bb294];
    }

    bb127: {
        StorageDead(_313);
        StorageDead(_290);
        StorageDead(_312);
        StorageDead(_309);
        StorageDead(_306);
        StorageDead(_303);
        StorageDead(_300);
        StorageDead(_299);
        StorageDead(_295);
        StorageDead(_289);
        _287 = move _288;
        StorageDead(_288);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        StorageLive(_325);
        _530 = const _;
        _325 = &(*_530);
        _324 = &(*_325);
        _323 = move _324 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_324);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        _335 = &_287;
        _334 = ArrForm::<1200>::as_str(move _335) -> [return: bb128, unwind: bb294];
    }

    bb128: {
        StorageDead(_335);
        _333 = &_334;
        _332 = &(*_333);
        _331 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _332) -> [return: bb129, unwind: bb294];
    }

    bb129: {
        StorageDead(_332);
        _330 = [move _331];
        StorageDead(_331);
        _329 = &_330;
        _328 = &(*_329);
        _327 = move _328 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_328);
        _322 = Arguments::<'_>::new_v1(move _323, move _327) -> [return: bb130, unwind: bb294];
    }

    bb130: {
        StorageDead(_327);
        StorageDead(_323);
        _321 = format(move _322) -> [return: bb131, unwind: bb294];
    }

    bb131: {
        StorageDead(_322);
        StorageDead(_334);
        StorageDead(_333);
        StorageDead(_330);
        StorageDead(_329);
        StorageDead(_325);
        _320 = move _321;
        StorageDead(_321);
        _319 = &_320;
        _318 = &(*_319);
        _317 = <String as Deref>::deref(move _318) -> [return: bb132, unwind: bb261];
    }

    bb132: {
        _316 = &(*_317);
        StorageDead(_318);
        _315 = solana_program::log::sol_log(move _316) -> [return: bb133, unwind: bb261];
    }

    bb133: {
        StorageDead(_316);
        drop(_320) -> [return: bb134, unwind: bb294];
    }

    bb134: {
        StorageDead(_320);
        StorageDead(_319);
        StorageDead(_317);
        StorageDead(_315);
        _130 = const ();
        StorageDead(_287);
        goto -> bb135;
    }

    bb135: {
        StorageDead(_133);
        StorageDead(_131);
        StorageDead(_130);
        StorageLive(_336);
        StorageLive(_337);
        StorageLive(_338);
        StorageLive(_339);
        StorageLive(_340);
        StorageLive(_341);
        StorageLive(_342);
        _342 = &(*_6);
        _341 = <RefMut<'_, state::VaultState> as Deref>::deref(move _342) -> [return: bb136, unwind: bb294];
    }

    bb136: {
        _340 = &(*_341);
        StorageDead(_342);
        StorageLive(_343);
        StorageLive(_344);
        _344 = &_100;
        _343 = <Map<std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>, {closure@programs\kvault\src\handlers\handler_invest.rs:67:14: 67:28}> as Clone>::clone(move _344) -> [return: bb137, unwind: bb294];
    }

    bb137: {
        StorageDead(_344);
        StorageLive(_345);
        _345 = _87;
        _339 = holdings::<'_, kamino_lending::utils::FatAccountLoader<'_, kamino_lending::Reserve>, Map<std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>, {closure@programs\kvault\src\handlers\handler_invest.rs:67:14: 67:28}>>(move _340, move _343, move _345) -> [return: bb138, unwind: bb294];
    }

    bb138: {
        StorageDead(_345);
        StorageDead(_343);
        StorageDead(_340);
        _338 = <std::result::Result<Holdings, anchor_lang::error::Error> as Try>::branch(move _339) -> [return: bb139, unwind: bb294];
    }

    bb139: {
        _570 = const true;
        _571 = const true;
        StorageDead(_339);
        _346 = discriminant(_338);
        switchInt(move _346) -> [0: bb140, 1: bb141, otherwise: bb6];
    }

    bb140: {
        StorageLive(_350);
        _350 = move ((_338 as Continue).0: operations::vault_operations::common::Holdings);
        _337 = move _350;
        StorageDead(_350);
        _336 = ((_337.1: operations::vault_operations::common::Invested).1: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>);
        drop(_337) -> [return: bb143, unwind: bb287];
    }

    bb141: {
        StorageLive(_347);
        _347 = move ((_338 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_349);
        _349 = move _347;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _349) -> [return: bb142, unwind: bb287];
    }

    bb142: {
        StorageDead(_349);
        StorageDead(_347);
        _634 = discriminant(_338);
        StorageDead(_341);
        _570 = const false;
        _571 = const false;
        StorageDead(_338);
        StorageDead(_337);
        goto -> bb241;
    }

    bb143: {
        _588 = discriminant(_338);
        StorageDead(_341);
        _570 = const false;
        _571 = const false;
        StorageDead(_338);
        StorageDead(_337);
        StorageLive(_351);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        StorageLive(_355);
        StorageLive(_356);
        _356 = &(*_6);
        _355 = <RefMut<'_, state::VaultState> as Deref>::deref(move _356) -> [return: bb144, unwind: bb294];
    }

    bb144: {
        _354 = &(*_355);
        StorageDead(_356);
        StorageLive(_357);
        StorageLive(_358);
        _358 = &_336;
        _357 = &(*_358);
        _353 = state::VaultState::compute_aum(move _354, move _357) -> [return: bb145, unwind: bb294];
    }

    bb145: {
        StorageDead(_357);
        StorageDead(_354);
        _352 = <std::result::Result<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error> as Try>::branch(move _353) -> [return: bb146, unwind: bb294];
    }

    bb146: {
        StorageDead(_353);
        _359 = discriminant(_352);
        switchInt(move _359) -> [0: bb147, 1: bb148, otherwise: bb6];
    }

    bb147: {
        StorageLive(_363);
        _363 = ((_352 as Continue).0: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>);
        _351 = _363;
        StorageDead(_363);
        _590 = discriminant(_352);
        StorageDead(_358);
        StorageDead(_355);
        StorageDead(_352);
        StorageLive(_364);
        StorageLive(_365);
        _566 = const false;
        _365 = move _39;
        _364 = std::mem::drop::<Ref<'_, kamino_lending::Reserve>>(move _365) -> [return: bb150, unwind: bb294];
    }

    bb148: {
        StorageLive(_360);
        _360 = move ((_352 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_362);
        _362 = move _360;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _362) -> [return: bb149, unwind: bb286];
    }

    bb149: {
        StorageDead(_362);
        StorageDead(_360);
        _632 = discriminant(_352);
        StorageDead(_358);
        StorageDead(_355);
        StorageDead(_352);
        goto -> bb240;
    }

    bb150: {
        StorageDead(_365);
        StorageDead(_364);
        StorageLive(_366);
        StorageLive(_367);
        StorageLive(_368);
        _368 = _129;
        _367 = Gt(move _368, const 0_u64);
        switchInt(move _367) -> [0: bb165, otherwise: bb151];
    }

    bb151: {
        StorageDead(_368);
        StorageLive(_369);
        StorageLive(_370);
        StorageLive(_371);
        StorageLive(_372);
        StorageLive(_373);
        StorageLive(_374);
        _550 = deref_copy (_1.1: &mut handlers::handler_invest::Invest<'_>);
        _374 = &((*_550).14: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _373 = <anchor_lang::prelude::Interface<'_, TokenInterface> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _374) -> [return: bb152, unwind: bb294];
    }

    bb152: {
        _569 = const true;
        StorageDead(_374);
        StorageLive(_375);
        StorageLive(_376);
        StorageLive(_377);
        _551 = deref_copy (_1.1: &mut handlers::handler_invest::Invest<'_>);
        _552 = deref_copy ((*_551).1: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _675 = (((_552.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _377 = &(*_675);
        _376 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _377) -> [return: bb153, unwind: bb285];
    }

    bb153: {
        StorageDead(_377);
        StorageLive(_378);
        StorageLive(_379);
        _553 = deref_copy (_1.1: &mut handlers::handler_invest::Invest<'_>);
        _554 = deref_copy ((*_553).3: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _676 = (((_554.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _379 = &(*_676);
        _378 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _379) -> [return: bb154, unwind: bb260];
    }

    bb154: {
        StorageDead(_379);
        StorageLive(_380);
        StorageLive(_381);
        _555 = deref_copy (_1.1: &mut handlers::handler_invest::Invest<'_>);
        _381 = &((*_555).0: anchor_lang::prelude::Signer<'_>);
        _380 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _381) -> [return: bb155, unwind: bb259];
    }

    bb155: {
        StorageDead(_381);
        StorageLive(_382);
        StorageLive(_383);
        _556 = deref_copy (_1.1: &mut handlers::handler_invest::Invest<'_>);
        _557 = deref_copy ((*_556).4: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _677 = (((_557.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _383 = &(*_677);
        _382 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _383) -> [return: bb156, unwind: bb258];
    }

    bb156: {
        StorageDead(_383);
        _375 = anchor_spl::token_2022::TransferChecked::<'_> { from: move _376, mint: move _382, to: move _378, authority: move _380 };
        StorageDead(_382);
        StorageDead(_380);
        StorageDead(_378);
        StorageDead(_376);
        _569 = const false;
        _372 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_spl::token_2022::TransferChecked<'_>>::new(move _373, move _375) -> [return: bb157, unwind: bb285];
    }

    bb157: {
        _568 = const true;
        StorageDead(_375);
        _569 = const false;
        StorageDead(_373);
        StorageLive(_384);
        _384 = _129;
        StorageLive(_385);
        StorageLive(_386);
        StorageLive(_387);
        StorageLive(_388);
        StorageLive(_389);
        _558 = deref_copy (_1.1: &mut handlers::handler_invest::Invest<'_>);
        _559 = deref_copy ((*_558).4: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _678 = (((_559.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _389 = &(*_678);
        _388 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as Deref>::deref(move _389) -> [return: bb158, unwind: bb283];
    }

    bb158: {
        _387 = &(*_388);
        _386 = <anchor_spl::token_interface::Mint as Deref>::deref(move _387) -> [return: bb159, unwind: bb283];
    }

    bb159: {
        StorageDead(_389);
        StorageDead(_387);
        _385 = ((*_386).2: u8);
        _568 = const false;
        _371 = anchor_spl::token_2022::transfer_checked(move _372, move _384, move _385) -> [return: bb160, unwind: bb283];
    }

    bb160: {
        StorageDead(_385);
        StorageDead(_384);
        _568 = const false;
        StorageDead(_372);
        _370 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _371) -> [return: bb161, unwind: bb294];
    }

    bb161: {
        StorageDead(_371);
        _390 = discriminant(_370);
        switchInt(move _390) -> [0: bb162, 1: bb163, otherwise: bb6];
    }

    bb162: {
        StorageLive(_394);
        _394 = ((_370 as Continue).0: ());
        _369 = _394;
        StorageDead(_394);
        _592 = discriminant(_370);
        StorageDead(_388);
        StorageDead(_386);
        StorageDead(_370);
        StorageDead(_369);
        _366 = const ();
        goto -> bb166;
    }

    bb163: {
        StorageLive(_391);
        _391 = move ((_370 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_393);
        _393 = move _391;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _393) -> [return: bb164, unwind: bb281];
    }

    bb164: {
        StorageDead(_393);
        StorageDead(_391);
        _630 = discriminant(_370);
        StorageDead(_388);
        StorageDead(_386);
        StorageDead(_370);
        StorageDead(_369);
        StorageDead(_367);
        StorageDead(_366);
        goto -> bb240;
    }

    bb165: {
        StorageDead(_368);
        _366 = const ();
        goto -> bb166;
    }

    bb166: {
        StorageDead(_367);
        StorageDead(_366);
        StorageLive(_395);
        StorageLive(_396);
        StorageLive(_397);
        _397 = _127;
        _396 = Gt(move _397, const 0_u64);
        switchInt(move _396) -> [0: bb180, otherwise: bb167];
    }

    bb167: {
        StorageDead(_397);
        _398 = discriminant(_126);
        switchInt(move _398) -> [0: bb169, 1: bb168, otherwise: bb6];
    }

    bb168: {
        StorageLive(_414);
        StorageLive(_415);
        StorageLive(_416);
        StorageLive(_417);
        StorageLive(_418);
        _418 = &_1;
        _417 = &(*_418);
        StorageLive(_419);
        StorageLive(_420);
        _420 = &mut _2;
        _419 = &mut (*_420);
        StorageLive(_421);
        StorageLive(_422);
        _422 = _16;
        _421 = move _422 as u8 (IntToInt);
        StorageDead(_422);
        StorageLive(_423);
        _423 = _128;
        _416 = cpi_redeem_reserve_liquidity_from_invest(move _417, move _419, move _421, move _423) -> [return: bb175, unwind: bb294];
    }

    bb169: {
        StorageLive(_399);
        StorageLive(_400);
        StorageLive(_401);
        StorageLive(_402);
        StorageLive(_403);
        _403 = &_1;
        _402 = &(*_403);
        StorageLive(_404);
        StorageLive(_405);
        _405 = &mut _2;
        _404 = &mut (*_405);
        StorageLive(_406);
        StorageLive(_407);
        _407 = _16;
        _406 = move _407 as u8 (IntToInt);
        StorageDead(_407);
        StorageLive(_408);
        _408 = _127;
        _401 = cpi_deposit_reserve_liquidity(move _402, move _404, move _406, move _408) -> [return: bb170, unwind: bb294];
    }

    bb170: {
        StorageDead(_408);
        StorageDead(_406);
        StorageDead(_404);
        StorageDead(_402);
        _400 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _401) -> [return: bb171, unwind: bb294];
    }

    bb171: {
        StorageDead(_401);
        _409 = discriminant(_400);
        switchInt(move _409) -> [0: bb172, 1: bb173, otherwise: bb6];
    }

    bb172: {
        StorageLive(_413);
        _413 = ((_400 as Continue).0: ());
        _399 = _413;
        StorageDead(_413);
        _594 = discriminant(_400);
        StorageDead(_405);
        StorageDead(_403);
        StorageDead(_400);
        StorageDead(_399);
        _395 = const ();
        goto -> bb181;
    }

    bb173: {
        StorageLive(_410);
        _410 = move ((_400 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_412);
        _412 = move _410;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _412) -> [return: bb174, unwind: bb280];
    }

    bb174: {
        StorageDead(_412);
        StorageDead(_410);
        _628 = discriminant(_400);
        StorageDead(_405);
        StorageDead(_403);
        StorageDead(_400);
        StorageDead(_399);
        goto -> bb239;
    }

    bb175: {
        StorageDead(_423);
        StorageDead(_421);
        StorageDead(_419);
        StorageDead(_417);
        _415 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _416) -> [return: bb176, unwind: bb294];
    }

    bb176: {
        StorageDead(_416);
        _424 = discriminant(_415);
        switchInt(move _424) -> [0: bb177, 1: bb178, otherwise: bb6];
    }

    bb177: {
        StorageLive(_428);
        _428 = ((_415 as Continue).0: ());
        _414 = _428;
        StorageDead(_428);
        _596 = discriminant(_415);
        StorageDead(_420);
        StorageDead(_418);
        StorageDead(_415);
        StorageDead(_414);
        _395 = const ();
        goto -> bb181;
    }

    bb178: {
        StorageLive(_425);
        _425 = move ((_415 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_427);
        _427 = move _425;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _427) -> [return: bb179, unwind: bb279];
    }

    bb179: {
        StorageDead(_427);
        StorageDead(_425);
        _626 = discriminant(_415);
        StorageDead(_420);
        StorageDead(_418);
        StorageDead(_415);
        StorageDead(_414);
        goto -> bb239;
    }

    bb180: {
        StorageDead(_397);
        _395 = const ();
        goto -> bb181;
    }

    bb181: {
        StorageDead(_396);
        StorageDead(_395);
        StorageLive(_429);
        StorageLive(_430);
        StorageLive(_431);
        StorageLive(_432);
        StorageLive(_433);
        _433 = &mut _2;
        _432 = &mut (*_433);
        StorageLive(_434);
        StorageLive(_435);
        StorageLive(_436);
        _560 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _436 = &(*_560);
        _435 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _436) -> [return: bb182, unwind: bb294];
    }

    bb182: {
        StorageDead(_436);
        StorageLive(_437);
        _437 = _19;
        _434 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::take(move _435, move _437) -> [return: bb183, unwind: bb294];
    }

    bb183: {
        StorageDead(_437);
        StorageDead(_435);
        StorageLive(_438);
        _438 = _19;
        _431 = cpi_refresh_reserves::<'_, '_, std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>(move _432, move _434, move _438) -> [return: bb184, unwind: bb294];
    }

    bb184: {
        StorageDead(_438);
        StorageDead(_434);
        StorageDead(_432);
        _430 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _431) -> [return: bb185, unwind: bb294];
    }

    bb185: {
        StorageDead(_431);
        _439 = discriminant(_430);
        switchInt(move _439) -> [0: bb186, 1: bb187, otherwise: bb6];
    }

    bb186: {
        StorageLive(_443);
        _443 = ((_430 as Continue).0: ());
        _429 = _443;
        StorageDead(_443);
        _598 = discriminant(_430);
        StorageDead(_433);
        StorageDead(_430);
        StorageDead(_429);
        StorageLive(_444);
        StorageLive(_445);
        _567 = const false;
        _445 = move _2;
        _444 = std::mem::drop::<cpi_mem::CpiMemoryLender<'_>>(move _445) -> [return: bb189, unwind: bb294];
    }

    bb187: {
        StorageLive(_440);
        _440 = move ((_430 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_442);
        _442 = move _440;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _442) -> [return: bb188, unwind: bb278];
    }

    bb188: {
        StorageDead(_442);
        StorageDead(_440);
        _624 = discriminant(_430);
        StorageDead(_433);
        StorageDead(_430);
        StorageDead(_429);
        goto -> bb240;
    }

    bb189: {
        StorageDead(_445);
        StorageDead(_444);
        StorageLive(_447);
        StorageLive(_448);
        StorageLive(_449);
        StorageLive(_450);
        StorageLive(_451);
        StorageLive(_452);
        _452 = &(*_6);
        _451 = <RefMut<'_, state::VaultState> as Deref>::deref(move _452) -> [return: bb190, unwind: bb294];
    }

    bb190: {
        _450 = &(*_451);
        StorageDead(_452);
        StorageLive(_453);
        StorageLive(_454);
        _454 = &_100;
        _453 = <Map<std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>, {closure@programs\kvault\src\handlers\handler_invest.rs:67:14: 67:28}> as Clone>::clone(move _454) -> [return: bb191, unwind: bb294];
    }

    bb191: {
        StorageDead(_454);
        StorageLive(_455);
        _455 = _87;
        _449 = underlying_inventory::<'_, kamino_lending::utils::FatAccountLoader<'_, kamino_lending::Reserve>, Map<std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>, {closure@programs\kvault\src\handlers\handler_invest.rs:67:14: 67:28}>>(move _450, move _453, move _455) -> [return: bb192, unwind: bb294];
    }

    bb192: {
        StorageDead(_455);
        StorageDead(_453);
        StorageDead(_450);
        _448 = <std::result::Result<(u64, Invested), anchor_lang::error::Error> as Try>::branch(move _449) -> [return: bb193, unwind: bb294];
    }

    bb193: {
        StorageDead(_449);
        _456 = discriminant(_448);
        switchInt(move _456) -> [0: bb194, 1: bb195, otherwise: bb6];
    }

    bb194: {
        StorageLive(_460);
        _460 = move ((_448 as Continue).0: (u64, operations::vault_operations::common::Invested));
        _447 = move _460;
        StorageDead(_460);
        StorageLive(_446);
        _446 = move (_447.1: operations::vault_operations::common::Invested);
        _600 = discriminant(_448);
        StorageDead(_451);
        StorageDead(_448);
        StorageDead(_447);
        StorageLive(_461);
        StorageLive(_462);
        StorageLive(_463);
        StorageLive(_464);
        StorageLive(_465);
        StorageLive(_466);
        _466 = &(*_6);
        _465 = <RefMut<'_, state::VaultState> as Deref>::deref(move _466) -> [return: bb197, unwind: bb257];
    }

    bb195: {
        StorageLive(_457);
        _457 = move ((_448 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_459);
        _459 = move _457;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _459) -> [return: bb196, unwind: bb277];
    }

    bb196: {
        StorageDead(_459);
        StorageDead(_457);
        _622 = discriminant(_448);
        StorageDead(_451);
        StorageDead(_448);
        StorageDead(_447);
        goto -> bb240;
    }

    bb197: {
        _464 = &(*_465);
        StorageDead(_466);
        StorageLive(_467);
        StorageLive(_468);
        _468 = &(_446.1: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>);
        _467 = &(*_468);
        _463 = state::VaultState::compute_aum(move _464, move _467) -> [return: bb198, unwind: bb257];
    }

    bb198: {
        StorageDead(_467);
        StorageDead(_464);
        _462 = <std::result::Result<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, anchor_lang::error::Error> as Try>::branch(move _463) -> [return: bb199, unwind: bb257];
    }

    bb199: {
        StorageDead(_463);
        _469 = discriminant(_462);
        switchInt(move _469) -> [0: bb200, 1: bb201, otherwise: bb6];
    }

    bb200: {
        StorageLive(_473);
        _473 = ((_462 as Continue).0: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>);
        _461 = _473;
        StorageDead(_473);
        _602 = discriminant(_462);
        StorageDead(_468);
        StorageDead(_465);
        StorageDead(_462);
        StorageLive(_474);
        StorageLive(_475);
        StorageLive(_476);
        StorageLive(_477);
        StorageLive(_478);
        StorageLive(_479);
        StorageLive(_480);
        _561 = deref_copy (_1.1: &mut handlers::handler_invest::Invest<'_>);
        _562 = deref_copy ((*_561).3: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _679 = (((_562.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _480 = &(*_679);
        _479 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _480) -> [return: bb203, unwind: bb257];
    }

    bb201: {
        StorageLive(_470);
        _470 = move ((_462 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_472);
        _472 = move _470;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _472) -> [return: bb202, unwind: bb276];
    }

    bb202: {
        StorageDead(_472);
        StorageDead(_470);
        _620 = discriminant(_462);
        StorageDead(_468);
        StorageDead(_465);
        StorageDead(_462);
        goto -> bb237;
    }

    bb203: {
        StorageDead(_480);
        _478 = &_479;
        _477 = &(*_478);
        _476 = anchor_spl::token::accessor::amount(move _477) -> [return: bb204, unwind: bb256];
    }

    bb204: {
        StorageDead(_477);
        _475 = <std::result::Result<u64, anchor_lang::error::Error> as Try>::branch(move _476) -> [return: bb205, unwind: bb256];
    }

    bb205: {
        StorageDead(_476);
        _481 = discriminant(_475);
        switchInt(move _481) -> [0: bb206, 1: bb207, otherwise: bb6];
    }

    bb206: {
        StorageLive(_485);
        _485 = ((_475 as Continue).0: u64);
        _474 = _485;
        StorageDead(_485);
        _604 = discriminant(_475);
        drop(_479) -> [return: bb209, unwind: bb257];
    }

    bb207: {
        StorageLive(_482);
        _482 = move ((_475 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_484);
        _484 = move _482;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _484) -> [return: bb208, unwind: bb275];
    }

    bb208: {
        StorageDead(_484);
        StorageDead(_482);
        _618 = discriminant(_475);
        drop(_479) -> [return: bb235, unwind: bb257];
    }

    bb209: {
        StorageDead(_479);
        StorageDead(_478);
        StorageDead(_475);
        StorageLive(_486);
        StorageLive(_487);
        StorageLive(_488);
        StorageLive(_489);
        StorageLive(_490);
        StorageLive(_491);
        StorageLive(_492);
        _563 = deref_copy (_1.1: &mut handlers::handler_invest::Invest<'_>);
        _564 = deref_copy ((*_563).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _680 = (((_564.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _492 = &(*_680);
        _491 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _492) -> [return: bb210, unwind: bb257];
    }

    bb210: {
        StorageDead(_492);
        _490 = &_491;
        _489 = &(*_490);
        _488 = anchor_spl::token::accessor::amount(move _489) -> [return: bb211, unwind: bb255];
    }

    bb211: {
        StorageDead(_489);
        _487 = <std::result::Result<u64, anchor_lang::error::Error> as Try>::branch(move _488) -> [return: bb212, unwind: bb255];
    }

    bb212: {
        StorageDead(_488);
        _493 = discriminant(_487);
        switchInt(move _493) -> [0: bb213, 1: bb214, otherwise: bb6];
    }

    bb213: {
        StorageLive(_497);
        _497 = ((_487 as Continue).0: u64);
        _486 = _497;
        StorageDead(_497);
        _606 = discriminant(_487);
        drop(_491) -> [return: bb216, unwind: bb257];
    }

    bb214: {
        StorageLive(_494);
        _494 = move ((_487 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_496);
        _496 = move _494;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _496) -> [return: bb215, unwind: bb274];
    }

    bb215: {
        StorageDead(_496);
        StorageDead(_494);
        _616 = discriminant(_487);
        drop(_491) -> [return: bb233, unwind: bb257];
    }

    bb216: {
        StorageDead(_491);
        StorageDead(_490);
        StorageDead(_487);
        StorageLive(_498);
        StorageLive(_499);
        StorageLive(_500);
        StorageLive(_501);
        StorageLive(_502);
        StorageLive(_503);
        StorageLive(_504);
        _565 = deref_copy (_1.1: &mut handlers::handler_invest::Invest<'_>);
        _504 = &((*_565).10: anchor_lang::prelude::AccountInfo<'_>);
        _503 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _504) -> [return: bb217, unwind: bb257];
    }

    bb217: {
        StorageDead(_504);
        _502 = &_503;
        _501 = &(*_502);
        _500 = anchor_spl::token::accessor::amount(move _501) -> [return: bb218, unwind: bb254];
    }

    bb218: {
        StorageDead(_501);
        _499 = <std::result::Result<u64, anchor_lang::error::Error> as Try>::branch(move _500) -> [return: bb219, unwind: bb254];
    }

    bb219: {
        StorageDead(_500);
        _505 = discriminant(_499);
        switchInt(move _505) -> [0: bb220, 1: bb221, otherwise: bb6];
    }

    bb220: {
        StorageLive(_509);
        _509 = ((_499 as Continue).0: u64);
        _498 = _509;
        StorageDead(_509);
        _608 = discriminant(_499);
        drop(_503) -> [return: bb223, unwind: bb257];
    }

    bb221: {
        StorageLive(_506);
        _506 = move ((_499 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_508);
        _508 = move _506;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _508) -> [return: bb222, unwind: bb273];
    }

    bb222: {
        StorageDead(_508);
        StorageDead(_506);
        _614 = discriminant(_499);
        drop(_503) -> [return: bb231, unwind: bb257];
    }

    bb223: {
        StorageDead(_503);
        StorageDead(_502);
        StorageDead(_499);
        StorageLive(_510);
        StorageLive(_511);
        StorageLive(_512);
        StorageLive(_513);
        StorageLive(_514);
        _514 = _51;
        StorageLive(_515);
        _515 = _63;
        StorageLive(_516);
        _516 = _75;
        _513 = VaultBalances { reserve_supply_liquidity_balance: move _516, vault_token_balance: move _514, vault_ctoken_balance: move _515 };
        StorageDead(_516);
        StorageDead(_515);
        StorageDead(_514);
        StorageLive(_517);
        StorageLive(_518);
        _518 = _474;
        StorageLive(_519);
        _519 = _486;
        StorageLive(_520);
        _520 = _498;
        _517 = VaultBalances { reserve_supply_liquidity_balance: move _520, vault_token_balance: move _518, vault_ctoken_balance: move _519 };
        StorageDead(_520);
        StorageDead(_519);
        StorageDead(_518);
        StorageLive(_521);
        _521 = move _106;
        StorageLive(_522);
        _522 = _351;
        StorageLive(_523);
        _523 = _461;
        _512 = post_transfer_invest_checks(move _513, move _517, move _521, move _522, move _523) -> [return: bb224, unwind: bb257];
    }

    bb224: {
        StorageDead(_523);
        StorageDead(_522);
        StorageDead(_521);
        StorageDead(_517);
        StorageDead(_513);
        _511 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _512) -> [return: bb225, unwind: bb257];
    }

    bb225: {
        StorageDead(_512);
        _524 = discriminant(_511);
        switchInt(move _524) -> [0: bb226, 1: bb227, otherwise: bb6];
    }

    bb226: {
        StorageLive(_528);
        _528 = ((_511 as Continue).0: ());
        _510 = _528;
        StorageDead(_528);
        _610 = discriminant(_511);
        StorageDead(_511);
        StorageDead(_510);
        StorageLive(_529);
        _529 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _529);
        StorageDead(_529);
        StorageDead(_498);
        StorageDead(_486);
        StorageDead(_474);
        StorageDead(_461);
        drop(_446) -> [return: bb229, unwind: bb294];
    }

    bb227: {
        StorageLive(_525);
        _525 = move ((_511 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_527);
        _527 = move _525;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _527) -> [return: bb228, unwind: bb272];
    }

    bb228: {
        StorageDead(_527);
        StorageDead(_525);
        _612 = discriminant(_511);
        StorageDead(_511);
        StorageDead(_510);
        goto -> bb232;
    }

    bb229: {
        StorageDead(_446);
        StorageDead(_351);
        StorageDead(_336);
        StorageDead(_129);
        StorageDead(_128);
        StorageDead(_127);
        StorageDead(_126);
        StorageDead(_106);
        StorageDead(_100);
        StorageDead(_97);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_75);
        StorageDead(_63);
        StorageDead(_51);
        StorageDead(_48);
        _566 = const false;
        StorageDead(_39);
        StorageDead(_19);
        StorageDead(_16);
        drop(_7) -> [return: bb230, unwind: bb299];
    }

    bb230: {
        StorageDead(_7);
        StorageDead(_6);
        _567 = const false;
        StorageDead(_2);
        goto -> bb253;
    }

    bb231: {
        StorageDead(_503);
        StorageDead(_502);
        StorageDead(_499);
        goto -> bb232;
    }

    bb232: {
        StorageDead(_498);
        goto -> bb234;
    }

    bb233: {
        StorageDead(_491);
        StorageDead(_490);
        StorageDead(_487);
        goto -> bb234;
    }

    bb234: {
        StorageDead(_486);
        goto -> bb236;
    }

    bb235: {
        StorageDead(_479);
        StorageDead(_478);
        StorageDead(_475);
        goto -> bb236;
    }

    bb236: {
        StorageDead(_474);
        goto -> bb237;
    }

    bb237: {
        StorageDead(_461);
        drop(_446) -> [return: bb238, unwind: bb294];
    }

    bb238: {
        StorageDead(_446);
        goto -> bb240;
    }

    bb239: {
        StorageDead(_396);
        StorageDead(_395);
        goto -> bb240;
    }

    bb240: {
        StorageDead(_351);
        goto -> bb241;
    }

    bb241: {
        StorageDead(_336);
        StorageDead(_129);
        StorageDead(_128);
        StorageDead(_127);
        StorageDead(_126);
        goto -> bb242;
    }

    bb242: {
        StorageDead(_106);
        StorageDead(_100);
        StorageDead(_97);
        StorageDead(_88);
        StorageDead(_87);
        goto -> bb244;
    }

    bb243: {
        StorageDead(_80);
        StorageDead(_79);
        StorageDead(_76);
        goto -> bb244;
    }

    bb244: {
        StorageDead(_75);
        goto -> bb246;
    }

    bb245: {
        StorageDead(_68);
        StorageDead(_67);
        StorageDead(_64);
        goto -> bb246;
    }

    bb246: {
        StorageDead(_63);
        goto -> bb248;
    }

    bb247: {
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_52);
        goto -> bb248;
    }

    bb248: {
        StorageDead(_51);
        StorageDead(_48);
        switchInt(_566) -> [0: bb249, otherwise: bb270];
    }

    bb249: {
        _566 = const false;
        StorageDead(_39);
        goto -> bb250;
    }

    bb250: {
        StorageDead(_19);
        StorageDead(_16);
        drop(_7) -> [return: bb251, unwind: bb299];
    }

    bb251: {
        StorageDead(_7);
        StorageDead(_6);
        switchInt(_567) -> [0: bb252, otherwise: bb271];
    }

    bb252: {
        _567 = const false;
        StorageDead(_2);
        goto -> bb253;
    }

    bb253: {
        return;
    }

    bb254 (cleanup): {
        drop(_503) -> [return: bb257, unwind terminate(cleanup)];
    }

    bb255 (cleanup): {
        drop(_491) -> [return: bb257, unwind terminate(cleanup)];
    }

    bb256 (cleanup): {
        drop(_479) -> [return: bb257, unwind terminate(cleanup)];
    }

    bb257 (cleanup): {
        drop(_446) -> [return: bb294, unwind terminate(cleanup)];
    }

    bb258 (cleanup): {
        drop(_380) -> [return: bb259, unwind terminate(cleanup)];
    }

    bb259 (cleanup): {
        drop(_378) -> [return: bb260, unwind terminate(cleanup)];
    }

    bb260 (cleanup): {
        drop(_376) -> [return: bb285, unwind terminate(cleanup)];
    }

    bb261 (cleanup): {
        drop(_320) -> [return: bb294, unwind terminate(cleanup)];
    }

    bb262 (cleanup): {
        drop(_271) -> [return: bb294, unwind terminate(cleanup)];
    }

    bb263 (cleanup): {
        drop(_222) -> [return: bb294, unwind terminate(cleanup)];
    }

    bb264 (cleanup): {
        drop(_173) -> [return: bb294, unwind terminate(cleanup)];
    }

    bb265 (cleanup): {
        drop(_80) -> [return: bb294, unwind terminate(cleanup)];
    }

    bb266 (cleanup): {
        drop(_68) -> [return: bb294, unwind terminate(cleanup)];
    }

    bb267 (cleanup): {
        drop(_56) -> [return: bb294, unwind terminate(cleanup)];
    }

    bb268 (cleanup): {
        drop(_7) -> [return: bb299, unwind terminate(cleanup)];
    }

    bb269 (cleanup): {
        resume;
    }

    bb270: {
        drop(_39) -> [return: bb249, unwind: bb268];
    }

    bb271: {
        drop(_2) -> [return: bb252, unwind: bb269];
    }

    bb272 (cleanup): {
        _652 = discriminant(_511);
        goto -> bb257;
    }

    bb273 (cleanup): {
        _653 = discriminant(_499);
        goto -> bb254;
    }

    bb274 (cleanup): {
        _654 = discriminant(_487);
        goto -> bb255;
    }

    bb275 (cleanup): {
        _655 = discriminant(_475);
        goto -> bb256;
    }

    bb276 (cleanup): {
        _656 = discriminant(_462);
        goto -> bb257;
    }

    bb277 (cleanup): {
        _658 = discriminant(_448);
        goto -> bb294;
    }

    bb278 (cleanup): {
        _659 = discriminant(_430);
        goto -> bb294;
    }

    bb279 (cleanup): {
        _660 = discriminant(_415);
        goto -> bb294;
    }

    bb280 (cleanup): {
        _661 = discriminant(_400);
        goto -> bb294;
    }

    bb281 (cleanup): {
        _662 = discriminant(_370);
        goto -> bb294;
    }

    bb282 (cleanup): {
        drop(_372) -> [return: bb294, unwind terminate(cleanup)];
    }

    bb283 (cleanup): {
        switchInt(_568) -> [0: bb294, otherwise: bb282];
    }

    bb284 (cleanup): {
        drop(_373) -> [return: bb294, unwind terminate(cleanup)];
    }

    bb285 (cleanup): {
        switchInt(_569) -> [0: bb294, otherwise: bb284];
    }

    bb286 (cleanup): {
        _663 = discriminant(_352);
        goto -> bb294;
    }

    bb287 (cleanup): {
        _664 = discriminant(_338);
        goto -> bb294;
    }

    bb288 (cleanup): {
        _665 = discriminant(_107);
        goto -> bb294;
    }

    bb289 (cleanup): {
        _666 = discriminant(_90);
        goto -> bb294;
    }

    bb290 (cleanup): {
        _667 = discriminant(_76);
        goto -> bb265;
    }

    bb291 (cleanup): {
        _668 = discriminant(_64);
        goto -> bb266;
    }

    bb292 (cleanup): {
        _669 = discriminant(_52);
        goto -> bb267;
    }

    bb293 (cleanup): {
        drop(_39) -> [return: bb268, unwind terminate(cleanup)];
    }

    bb294 (cleanup): {
        switchInt(_566) -> [0: bb268, otherwise: bb293];
    }

    bb295 (cleanup): {
        _670 = discriminant(_40);
        goto -> bb268;
    }

    bb296 (cleanup): {
        _671 = discriminant(_25);
        goto -> bb268;
    }

    bb297 (cleanup): {
        _672 = discriminant(_8);
        goto -> bb299;
    }

    bb298 (cleanup): {
        drop(_2) -> [return: bb269, unwind terminate(cleanup)];
    }

    bb299 (cleanup): {
        switchInt(_567) -> [0: bb269, otherwise: bb298];
    }
}
