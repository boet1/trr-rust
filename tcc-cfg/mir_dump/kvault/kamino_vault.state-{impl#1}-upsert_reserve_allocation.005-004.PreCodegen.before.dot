digraph Mir_0_500 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn state::VaultState::upsert_reserve_allocation(_1: &amp;ReErased mut state::VaultState, _2: anchor_lang::prelude::Pubkey, _3: anchor_lang::prelude::Pubkey, _4: u64, _5: u64, _6: u64) -&gt; std::result::Result&lt;(), anchor_lang::error::Error&gt;<br align="left"/>let _7: std::option::Option&lt;usize&gt;;<br align="left"/>let mut _8: &amp;ReErased state::VaultState;<br align="left"/>let mut _9: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _10: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _11: ();<br align="left"/>let mut _12: isize;<br align="left"/>let _13: usize;<br align="left"/>let mut _14: u64;<br align="left"/>let _15: usize;<br align="left"/>let mut _16: usize;<br align="left"/>let mut _17: bool;<br align="left"/>let mut _18: u64;<br align="left"/>let _19: usize;<br align="left"/>let mut _20: usize;<br align="left"/>let mut _21: bool;<br align="left"/>let _22: usize;<br align="left"/>let mut _23: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, usize&gt;;<br align="left"/>let mut _24: std::result::Result&lt;usize, anchor_lang::error::Error&gt;;<br align="left"/>let mut _25: std::option::Option&lt;usize&gt;;<br align="left"/>let mut _26: &amp;ReErased mut std::slice::Iter&lt;ReErased, state::VaultAllocation&gt;;<br align="left"/>let mut _27: std::slice::Iter&lt;ReErased, state::VaultAllocation&gt;;<br align="left"/>let mut _28: &amp;ReErased [state::VaultAllocation];<br align="left"/>let mut _29: &amp;ReErased [state::VaultAllocation; 25_usize];<br align="left"/>let mut _30: Closure(DefId(0:501 ~ kamino_vault[b3c4]::state::{impl#1}::upsert_reserve_allocation::{closure#0}), [i16, Binder(extern &quot;RustCall&quot; fn((&amp;ReErased state::VaultAllocation,)) -&gt; bool, []), ()]);<br align="left"/>let mut _31: anchor_lang::error::Error;<br align="left"/>let mut _32: anchor_lang::error::AnchorError;<br align="left"/>let mut _33: std::string::String;<br align="left"/>let mut _34: &amp;ReErased KaminoVaultError;<br align="left"/>let _35: KaminoVaultError;<br align="left"/>let mut _36: u32;<br align="left"/>let mut _37: KaminoVaultError;<br align="left"/>let mut _38: std::string::String;<br align="left"/>let mut _39: &amp;ReErased KaminoVaultError;<br align="left"/>let _40: KaminoVaultError;<br align="left"/>let mut _41: std::option::Option&lt;anchor_lang::error::ErrorOrigin&gt;;<br align="left"/>let mut _42: anchor_lang::error::ErrorOrigin;<br align="left"/>let mut _43: anchor_lang::error::Source;<br align="left"/>let mut _44: std::option::Option&lt;anchor_lang::error::ComparedValues&gt;;<br align="left"/>let mut _45: isize;<br align="left"/>let _46: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _47: !;<br align="left"/>let mut _48: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _49: usize;<br align="left"/>let mut _50: state::VaultAllocation;<br align="left"/>let mut _51: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _52: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _53: u64;<br align="left"/>let mut _54: u64;<br align="left"/>let mut _55: u64;<br align="left"/>let mut _56: [u64; 127_usize];<br align="left"/>let mut _57: [u64; 128_usize];<br align="left"/>let _58: usize;<br align="left"/>let mut _59: usize;<br align="left"/>let mut _60: bool;<br align="left"/>let mut _61: ();<br align="left"/>let mut _62: &amp;ReErased KaminoVaultError;<br align="left"/>let mut _63: &amp;ReErased KaminoVaultError;<br align="left"/>let mut _64: isize;<br align="left"/>let mut _65: isize;<br align="left"/>let mut _66: isize;<br align="left"/>let mut _67: isize;<br align="left"/>let mut _68: isize;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug reserve =&gt; _2;<br align="left"/>debug ctoken_vault =&gt; _3;<br align="left"/>debug ctoken_vault_bump =&gt; _4;<br align="left"/>debug target_allocation_weight =&gt; _5;<br align="left"/>debug allocation_cap =&gt; _6;<br align="left"/>debug idx =&gt; _7;<br align="left"/>debug idx =&gt; _13;<br align="left"/>debug idx =&gt; _22;<br align="left"/>debug residual =&gt; _46;<br align="left"/>debug val =&gt; _49;<br align="left"/>>;
    bb0__0_500 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = &amp;(*_1)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>_10 = &amp;_2<br/>_9 = &amp;(*_10)<br/></td></tr><tr><td align="left">_7 = state::VaultState::get_reserve_idx_in_allocation(move _8, move _9)</td></tr></table>>];
    bb1__0_500 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_8)<br/>StorageDead(_10)<br/>StorageLive(_11)<br/>_12 = discriminant(_7)<br/></td></tr><tr><td align="left">switchInt(move _12)</td></tr></table>>];
    bb2__0_500 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageLive(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>_29 = &amp;((*_1).18: [state::VaultAllocation; 25])<br/>_28 = move _29 as &amp;[state::VaultAllocation] (PointerCoercion(Unsize))<br/>StorageDead(_29)<br/></td></tr><tr><td align="left">_27 = core::slice::&lt;impl [VaultAllocation]&gt;::iter(move _28)</td></tr></table>>];
    bb3__0_500 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb4__0_500 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_13)<br/>_13 = ((_7 as Some).0: usize)<br/>StorageLive(_14)<br/>_14 = _5<br/>StorageLive(_15)<br/>_15 = _13<br/>_16 = Len(((*_1).18: [state::VaultAllocation; 25]))<br/>_17 = Lt(_15, _16)<br/></td></tr><tr><td align="left">assert(move _17, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _16, _15)</td></tr></table>>];
    bb5__0_500 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">(((*_1).18: [state::VaultAllocation; 25])[_15].2: u64) = move _14<br/>StorageDead(_14)<br/>StorageDead(_15)<br/>StorageLive(_18)<br/>_18 = _6<br/>StorageLive(_19)<br/>_19 = _13<br/>_20 = Len(((*_1).18: [state::VaultAllocation; 25]))<br/>_21 = Lt(_19, _20)<br/></td></tr><tr><td align="left">assert(move _21, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _20, _19)</td></tr></table>>];
    bb6__0_500 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">(((*_1).18: [state::VaultAllocation; 25])[_19].3: u64) = move _18<br/>StorageDead(_18)<br/>StorageDead(_19)<br/>_11 = const ()<br/>StorageDead(_13)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_500 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_26 = &amp;mut _27<br/>StorageDead(_28)<br/>StorageLive(_30)<br/>_30 = {closure@programs\kvault\src\state.rs:251:31: 251:34}<br/></td></tr><tr><td align="left">_25 = &lt;std::slice::Iter&lt;'_, VaultAllocation&gt; as Iterator&gt;::position::&lt;{closure@programs\kvault\src\state.rs:251:31: 251:34}&gt;(move _26, move _30)</td></tr></table>>];
    bb8__0_500 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>StorageDead(_26)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>_63 = const _<br/>_34 = &amp;(*_63)<br/></td></tr><tr><td align="left">_33 = KaminoVaultError::name(move _34)</td></tr></table>>];
    bb9__0_500 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>_37 = KaminoVaultError::ReserveSpaceExhausted<br/></td></tr><tr><td align="left">_36 = &lt;KaminoVaultError as Into&lt;u32&gt;&gt;::into(move _37)</td></tr></table>>];
    bb10__0_500 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/>StorageLive(_38)<br/>StorageLive(_39)<br/>_62 = const _<br/>_39 = &amp;(*_62)<br/></td></tr><tr><td align="left">_38 = &lt;KaminoVaultError as ToString&gt;::to_string(move _39)</td></tr></table>>];
    bb11__0_500 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_39)<br/>StorageLive(_41)<br/>StorageLive(_42)<br/>StorageLive(_43)<br/>_43 = anchor_lang::error::Source { filename: const &quot;programs\\kvault\\src\\state.rs&quot;, line: const 255_u32 }<br/>_42 = anchor_lang::error::ErrorOrigin::Source(move _43)<br/>StorageDead(_43)<br/>_41 = Option::&lt;ErrorOrigin&gt;::Some(move _42)<br/>StorageDead(_42)<br/>StorageLive(_44)<br/>_44 = Option::&lt;ComparedValues&gt;::None<br/>_32 = anchor_lang::error::AnchorError { error_name: move _33, error_code_number: move _36, error_msg: move _38, error_origin: move _41, compared_values: move _44 }<br/>StorageDead(_44)<br/>StorageDead(_41)<br/>StorageDead(_38)<br/>StorageDead(_36)<br/>StorageDead(_33)<br/></td></tr><tr><td align="left">_31 = &lt;anchor_lang::error::Error as From&lt;anchor_lang::error::AnchorError&gt;&gt;::from(move _32)</td></tr></table>>];
    bb12__0_500 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_32)<br/></td></tr><tr><td align="left">_24 = Option::&lt;usize&gt;::ok_or::&lt;anchor_lang::error::Error&gt;(move _25, move _31)</td></tr></table>>];
    bb13__0_500 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/>StorageDead(_25)<br/></td></tr><tr><td align="left">_23 = &lt;std::result::Result&lt;usize, anchor_lang::error::Error&gt; as Try&gt;::branch(move _24)</td></tr></table>>];
    bb14__0_500 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/>_45 = discriminant(_23)<br/></td></tr><tr><td align="left">switchInt(move _45)</td></tr></table>>];
    bb15__0_500 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_49)<br/>_49 = ((_23 as Continue).0: usize)<br/>_22 = _49<br/>StorageDead(_49)<br/>_64 = discriminant(_23)<br/>StorageDead(_27)<br/>StorageDead(_23)<br/>StorageLive(_50)<br/>StorageLive(_51)<br/>_51 = _2<br/>StorageLive(_52)<br/>_52 = _3<br/>StorageLive(_53)<br/>_53 = _5<br/>StorageLive(_54)<br/>_54 = _6<br/>StorageLive(_55)<br/>_55 = _4<br/>StorageLive(_56)<br/>_56 = [const 0_u64; 127]<br/>StorageLive(_57)<br/>_57 = [const 0_u64; 128]<br/>_50 = VaultAllocation { reserve: move _51, ctoken_vault: move _52, target_allocation_weight: move _53, token_allocation_cap: move _54, ctoken_vault_bump: move _55, config_padding: move _56, ctoken_allocation: const 0_u64, last_invest_slot: const 0_u64, token_target_allocation_sf: const 0_u128, state_padding: move _57 }<br/>StorageDead(_57)<br/>StorageDead(_56)<br/>StorageDead(_55)<br/>StorageDead(_54)<br/>StorageDead(_53)<br/>StorageDead(_52)<br/>StorageDead(_51)<br/>StorageLive(_58)<br/>_58 = _22<br/>_59 = Len(((*_1).18: [state::VaultAllocation; 25]))<br/>_60 = Lt(_58, _59)<br/></td></tr><tr><td align="left">assert(move _60, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _59, _58)</td></tr></table>>];
    bb16__0_500 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageLive(_46)<br/>_46 = move ((_23 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_48)<br/>_48 = move _46<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _48)</td></tr></table>>];
    bb17__0_500 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_48)<br/>StorageDead(_46)<br/>_66 = discriminant(_23)<br/>StorageDead(_27)<br/>StorageDead(_23)<br/>StorageDead(_22)<br/>StorageDead(_11)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_500 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">((*_1).18: [state::VaultAllocation; 25])[_58] = move _50<br/>StorageDead(_50)<br/>StorageDead(_58)<br/>_11 = const ()<br/>StorageDead(_22)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb19__0_500 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageLive(_61)<br/>_61 = ()<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Ok(move _61)<br/>StorageDead(_61)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_500 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left">return</td></tr></table>>];
    bb21__0_500 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">21 (cleanup)</td></tr><tr><td align="left">drop(_33)</td></tr></table>>];
    bb22__0_500 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">22 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb23__0_500 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">23 (cleanup)</td></tr><tr><td align="left" balign="left">_68 = discriminant(_23)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_500 -> bb1__0_500 [label="return"];
    bb1__0_500 -> bb2__0_500 [label="0"];
    bb1__0_500 -> bb4__0_500 [label="1"];
    bb1__0_500 -> bb3__0_500 [label="otherwise"];
    bb2__0_500 -> bb7__0_500 [label="return"];
    bb4__0_500 -> bb5__0_500 [label="success"];
    bb5__0_500 -> bb6__0_500 [label="success"];
    bb6__0_500 -> bb19__0_500 [label=""];
    bb7__0_500 -> bb8__0_500 [label="return"];
    bb8__0_500 -> bb9__0_500 [label="return"];
    bb9__0_500 -> bb10__0_500 [label="return"];
    bb9__0_500 -> bb21__0_500 [label="unwind"];
    bb10__0_500 -> bb11__0_500 [label="return"];
    bb10__0_500 -> bb21__0_500 [label="unwind"];
    bb11__0_500 -> bb12__0_500 [label="return"];
    bb11__0_500 -> bb22__0_500 [label="unwind"];
    bb12__0_500 -> bb13__0_500 [label="return"];
    bb12__0_500 -> bb22__0_500 [label="unwind"];
    bb13__0_500 -> bb14__0_500 [label="return"];
    bb13__0_500 -> bb22__0_500 [label="unwind"];
    bb14__0_500 -> bb15__0_500 [label="0"];
    bb14__0_500 -> bb16__0_500 [label="1"];
    bb14__0_500 -> bb3__0_500 [label="otherwise"];
    bb15__0_500 -> bb18__0_500 [label="success"];
    bb16__0_500 -> bb17__0_500 [label="return"];
    bb16__0_500 -> bb23__0_500 [label="unwind"];
    bb17__0_500 -> bb20__0_500 [label=""];
    bb18__0_500 -> bb19__0_500 [label=""];
    bb19__0_500 -> bb20__0_500 [label=""];
    bb21__0_500 -> bb22__0_500 [label="return"];
    bb23__0_500 -> bb22__0_500 [label=""];
}
