// MIR for `operations::vault_operations::common::<impl at programs\kvault\src\operations\vault_operations.rs:836:14: 836:19>::clone` before PreCodegen

fn operations::vault_operations::common::<impl at programs\kvault\src\operations\vault_operations.rs:836:14: 836:19>::clone(_1: &Holdings) -> Holdings {
    debug self => _1;
    let mut _0: operations::vault_operations::common::Holdings;
    let mut _2: u64;
    let mut _3: &u64;
    let _4: &u64;
    let mut _5: operations::vault_operations::common::Invested;
    let mut _6: &operations::vault_operations::common::Invested;
    let _7: &operations::vault_operations::common::Invested;
    let mut _8: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _9: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _10: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = &((*_1).0: u64);
        _3 = &(*_4);
        _2 = <u64 as Clone>::clone(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_3);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &((*_1).1: operations::vault_operations::common::Invested);
        _6 = &(*_7);
        _5 = <Invested as Clone>::clone(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &((*_1).2: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>);
        _9 = &(*_10);
        _8 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as Clone>::clone(move _9) -> [return: bb3, unwind: bb4];
    }

    bb3: {
        StorageDead(_9);
        _0 = Holdings { available: move _2, invested: move _5, total_sum: move _8 };
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_2);
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_4);
        return;
    }

    bb4 (cleanup): {
        drop(_5) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb5 (cleanup): {
        resume;
    }
}
