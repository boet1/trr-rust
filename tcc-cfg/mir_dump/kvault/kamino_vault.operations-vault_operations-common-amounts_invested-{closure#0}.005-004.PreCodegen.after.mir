// MIR for `amounts_invested::{closure#0}` after PreCodegen

fn amounts_invested::{closure#0}(_1: {closure@programs\kvault\src\operations\vault_operations.rs:652:26: 652:29}, _2: anchor_lang::error::Error) -> anchor_lang::error::Error {
    let mut _0: anchor_lang::error::Error;
    let mut _3: anchor_lang::error::AnchorError;
    let mut _4: std::string::String;
    let mut _5: &KaminoVaultError;
    let _6: KaminoVaultError;
    let mut _7: u32;
    let mut _8: KaminoVaultError;
    let mut _9: std::string::String;
    let mut _10: &KaminoVaultError;
    let _11: KaminoVaultError;
    let mut _12: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _13: anchor_lang::error::ErrorOrigin;
    let mut _14: anchor_lang::error::Source;
    let mut _15: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _16: &KaminoVaultError;
    let mut _17: &KaminoVaultError;

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _17 = const _;
        _5 = &(*_17);
        _4 = KaminoVaultError::name(move _5) -> [return: bb1, unwind: bb7];
    }

    bb1: {
        StorageDead(_5);
        StorageLive(_7);
        StorageLive(_8);
        _8 = KaminoVaultError::CouldNotDeserializeAccountAsReserve;
        _7 = <KaminoVaultError as Into<u32>>::into(move _8) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        StorageDead(_8);
        StorageLive(_9);
        StorageLive(_10);
        _16 = const _;
        _10 = &(*_16);
        _9 = <KaminoVaultError as ToString>::to_string(move _10) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        StorageDead(_10);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\operations\\vault_operations.rs", line: const 652_u32 };
        _13 = anchor_lang::error::ErrorOrigin::Source(move _14);
        StorageDead(_14);
        _12 = Option::<ErrorOrigin>::Some(move _13);
        StorageDead(_13);
        StorageLive(_15);
        _15 = Option::<ComparedValues>::None;
        _3 = anchor_lang::error::AnchorError { error_name: move _4, error_code_number: move _7, error_msg: move _9, error_origin: move _12, compared_values: move _15 };
        StorageDead(_15);
        StorageDead(_12);
        StorageDead(_9);
        StorageDead(_7);
        StorageDead(_4);
        _0 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _3) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        StorageDead(_3);
        drop(_2) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_4) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        drop(_2) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        resume;
    }
}
