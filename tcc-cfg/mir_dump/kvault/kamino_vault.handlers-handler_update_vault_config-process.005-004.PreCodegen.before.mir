// MIR for `handlers::handler_update_vault_config::process` before PreCodegen

fn handlers::handler_update_vault_config::process(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_update_vault_config::UpdateVaultConfig<'_>>, _2: handlers::handler_update_vault_config::VaultConfigField, _3: &[u8]) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug entry => _2;
    debug data => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let mut _4: utils::cpi_mem::CpiMemoryLender<'_>;
    let mut _5: std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _6: &handlers::handler_update_vault_config::UpdateVaultConfig<'_>;
    let mut _7: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _9: std::cell::RefMut<'_, state::VaultState>;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::VaultState>>;
    let mut _11: std::result::Result<std::cell::RefMut<'_, state::VaultState>, anchor_lang::error::Error>;
    let mut _12: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _13: isize;
    let mut _15: !;
    let mut _16: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _19: &state::VaultState;
    let _20: &state::VaultState;
    let mut _21: &std::cell::RefMut<'_, state::VaultState>;
    let _22: ();
    let _23: ();
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _25: std::result::Result<(), anchor_lang::error::Error>;
    let mut _26: &mut utils::cpi_mem::CpiMemoryLender<'_>;
    let mut _27: &mut utils::cpi_mem::CpiMemoryLender<'_>;
    let mut _28: std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _29: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _30: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _31: usize;
    let mut _32: usize;
    let mut _33: isize;
    let mut _35: !;
    let mut _36: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _39: std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _40: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _41: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _42: usize;
    let mut _43: {closure@programs\kvault\src\handlers\handler_update_vault_config.rs:67:14: 67:28};
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, operations::vault_operations::common::Holdings>;
    let mut _46: std::result::Result<operations::vault_operations::common::Holdings, anchor_lang::error::Error>;
    let mut _47: &state::VaultState;
    let _48: &state::VaultState;
    let mut _49: &std::cell::RefMut<'_, state::VaultState>;
    let mut _50: std::iter::Map<std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>, {closure@programs\kvault\src\handlers\handler_update_vault_config.rs:67:14: 67:28}>;
    let mut _51: u64;
    let mut _52: anchor_lang::prelude::Clock;
    let mut _53: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _54: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _55: isize;
    let mut _57: !;
    let mut _58: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _60: isize;
    let mut _62: !;
    let mut _63: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _65: ();
    let mut _66: &str;
    let _67: &str;
    let mut _68: &std::string::String;
    let _69: &std::string::String;
    let _70: std::string::String;
    let mut _72: std::fmt::Arguments<'_>;
    let mut _73: &[&str];
    let mut _74: &[&str; 1];
    let _75: &[&str; 1];
    let _76: [&str; 1];
    let mut _77: &[core::fmt::rt::Argument<'_>];
    let mut _78: &[core::fmt::rt::Argument<'_>; 1];
    let _79: &[core::fmt::rt::Argument<'_>; 1];
    let _80: [core::fmt::rt::Argument<'_>; 1];
    let mut _81: core::fmt::rt::Argument<'_>;
    let mut _82: &operations::vault_operations::common::Holdings;
    let _83: &operations::vault_operations::common::Holdings;
    let _84: ();
    let mut _85: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _86: std::result::Result<(), anchor_lang::error::Error>;
    let mut _87: &mut state::VaultState;
    let mut _88: &mut state::VaultState;
    let mut _89: &mut std::cell::RefMut<'_, state::VaultState>;
    let mut _90: &operations::vault_operations::common::Invested;
    let _91: &operations::vault_operations::common::Invested;
    let mut _92: u64;
    let mut _93: std::result::Result<u64, std::num::TryFromIntError>;
    let mut _94: i64;
    let mut _95: anchor_lang::prelude::Clock;
    let mut _96: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _97: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _98: isize;
    let mut _100: !;
    let mut _101: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _103: isize;
    let mut _105: !;
    let mut _106: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _108: ();
    let mut _109: &str;
    let _110: &str;
    let mut _111: &std::string::String;
    let _112: &std::string::String;
    let _113: std::string::String;
    let mut _115: std::fmt::Arguments<'_>;
    let mut _116: &[&str];
    let mut _117: &[&str; 1];
    let _118: &[&str; 1];
    let _119: [&str; 1];
    let mut _120: &[core::fmt::rt::Argument<'_>];
    let mut _121: &[core::fmt::rt::Argument<'_>; 1];
    let _122: &[core::fmt::rt::Argument<'_>; 1];
    let _123: [core::fmt::rt::Argument<'_>; 1];
    let mut _124: core::fmt::rt::Argument<'_>;
    let mut _125: &handlers::handler_update_vault_config::VaultConfigField;
    let _126: &handlers::handler_update_vault_config::VaultConfigField;
    let _127: ();
    let mut _128: isize;
    let mut _130: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _131: std::result::Result<u64, std::io::Error>;
    let mut _132: &[u8];
    let mut _133: isize;
    let mut _135: !;
    let mut _136: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _138: ();
    let mut _139: &str;
    let _140: &str;
    let mut _141: &std::string::String;
    let _142: &std::string::String;
    let _143: std::string::String;
    let mut _145: std::fmt::Arguments<'_>;
    let mut _146: &[&str];
    let mut _147: &[&str; 1];
    let _148: &[&str; 1];
    let _149: [&str; 1];
    let mut _150: &[core::fmt::rt::Argument<'_>];
    let mut _151: &[core::fmt::rt::Argument<'_>; 1];
    let _152: &[core::fmt::rt::Argument<'_>; 1];
    let _153: [core::fmt::rt::Argument<'_>; 1];
    let mut _154: core::fmt::rt::Argument<'_>;
    let mut _155: &u64;
    let _156: &u64;
    let _157: &state::VaultState;
    let mut _158: &std::cell::RefMut<'_, state::VaultState>;
    let _159: ();
    let mut _160: &str;
    let _161: &str;
    let mut _162: &std::string::String;
    let _163: &std::string::String;
    let _164: std::string::String;
    let mut _166: std::fmt::Arguments<'_>;
    let mut _167: &[&str];
    let mut _168: &[&str; 1];
    let _169: &[&str; 1];
    let _170: [&str; 1];
    let mut _171: &[core::fmt::rt::Argument<'_>];
    let mut _172: &[core::fmt::rt::Argument<'_>; 1];
    let _173: &[core::fmt::rt::Argument<'_>; 1];
    let _174: [core::fmt::rt::Argument<'_>; 1];
    let mut _175: core::fmt::rt::Argument<'_>;
    let mut _176: &u64;
    let _177: &u64;
    let _179: ();
    let mut _180: bool;
    let mut _181: u64;
    let mut _182: u64;
    let mut _183: !;
    let mut _184: anchor_lang::error::Error;
    let mut _185: KaminoVaultError;
    let mut _186: u64;
    let mut _187: &mut state::VaultState;
    let mut _188: &mut std::cell::RefMut<'_, state::VaultState>;
    let mut _190: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _191: std::result::Result<u64, std::io::Error>;
    let mut _192: &[u8];
    let mut _193: isize;
    let mut _195: !;
    let mut _196: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _198: ();
    let mut _199: bool;
    let mut _200: u64;
    let mut _201: !;
    let mut _202: anchor_lang::error::Error;
    let mut _203: anchor_lang::error::AnchorError;
    let mut _204: std::string::String;
    let mut _205: &KaminoVaultError;
    let _206: KaminoVaultError;
    let mut _207: u32;
    let mut _208: KaminoVaultError;
    let mut _209: std::string::String;
    let mut _210: &KaminoVaultError;
    let _211: KaminoVaultError;
    let mut _212: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _213: anchor_lang::error::ErrorOrigin;
    let mut _214: anchor_lang::error::Source;
    let mut _215: std::option::Option<anchor_lang::error::ComparedValues>;
    let _216: ();
    let mut _217: &str;
    let _218: &str;
    let mut _219: &std::string::String;
    let _220: &std::string::String;
    let _221: std::string::String;
    let mut _223: std::fmt::Arguments<'_>;
    let mut _224: &[&str];
    let mut _225: &[&str; 1];
    let _226: &[&str; 1];
    let _227: [&str; 1];
    let mut _228: &[core::fmt::rt::Argument<'_>];
    let mut _229: &[core::fmt::rt::Argument<'_>; 1];
    let _230: &[core::fmt::rt::Argument<'_>; 1];
    let _231: [core::fmt::rt::Argument<'_>; 1];
    let mut _232: core::fmt::rt::Argument<'_>;
    let mut _233: &u64;
    let _234: &u64;
    let _235: &state::VaultState;
    let mut _236: &std::cell::RefMut<'_, state::VaultState>;
    let _237: ();
    let mut _238: &str;
    let _239: &str;
    let mut _240: &std::string::String;
    let _241: &std::string::String;
    let _242: std::string::String;
    let mut _244: std::fmt::Arguments<'_>;
    let mut _245: &[&str];
    let mut _246: &[&str; 1];
    let _247: &[&str; 1];
    let _248: [&str; 1];
    let mut _249: &[core::fmt::rt::Argument<'_>];
    let mut _250: &[core::fmt::rt::Argument<'_>; 1];
    let _251: &[core::fmt::rt::Argument<'_>; 1];
    let _252: [core::fmt::rt::Argument<'_>; 1];
    let mut _253: core::fmt::rt::Argument<'_>;
    let mut _254: &u64;
    let _255: &u64;
    let mut _256: u64;
    let mut _257: &mut state::VaultState;
    let mut _258: &mut std::cell::RefMut<'_, state::VaultState>;
    let mut _260: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _261: std::result::Result<u64, std::io::Error>;
    let mut _262: &[u8];
    let mut _263: isize;
    let mut _265: !;
    let mut _266: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _268: ();
    let mut _269: &str;
    let _270: &str;
    let mut _271: &std::string::String;
    let _272: &std::string::String;
    let _273: std::string::String;
    let mut _275: std::fmt::Arguments<'_>;
    let mut _276: &[&str];
    let mut _277: &[&str; 1];
    let _278: &[&str; 1];
    let _279: [&str; 1];
    let mut _280: &[core::fmt::rt::Argument<'_>];
    let mut _281: &[core::fmt::rt::Argument<'_>; 1];
    let _282: &[core::fmt::rt::Argument<'_>; 1];
    let _283: [core::fmt::rt::Argument<'_>; 1];
    let mut _284: core::fmt::rt::Argument<'_>;
    let mut _285: &u64;
    let _286: &u64;
    let _287: &state::VaultState;
    let mut _288: &std::cell::RefMut<'_, state::VaultState>;
    let _289: ();
    let mut _290: &str;
    let _291: &str;
    let mut _292: &std::string::String;
    let _293: &std::string::String;
    let _294: std::string::String;
    let mut _296: std::fmt::Arguments<'_>;
    let mut _297: &[&str];
    let mut _298: &[&str; 1];
    let _299: &[&str; 1];
    let _300: [&str; 1];
    let mut _301: &[core::fmt::rt::Argument<'_>];
    let mut _302: &[core::fmt::rt::Argument<'_>; 1];
    let _303: &[core::fmt::rt::Argument<'_>; 1];
    let _304: [core::fmt::rt::Argument<'_>; 1];
    let mut _305: core::fmt::rt::Argument<'_>;
    let mut _306: &u64;
    let _307: &u64;
    let mut _308: u64;
    let mut _309: &mut state::VaultState;
    let mut _310: &mut std::cell::RefMut<'_, state::VaultState>;
    let mut _312: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _313: std::result::Result<u64, std::io::Error>;
    let mut _314: &[u8];
    let mut _315: isize;
    let mut _317: !;
    let mut _318: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _320: ();
    let mut _321: bool;
    let mut _322: u64;
    let mut _323: !;
    let mut _324: anchor_lang::error::Error;
    let mut _325: anchor_lang::error::AnchorError;
    let mut _326: std::string::String;
    let mut _327: &KaminoVaultError;
    let _328: KaminoVaultError;
    let mut _329: u32;
    let mut _330: KaminoVaultError;
    let mut _331: std::string::String;
    let mut _332: &KaminoVaultError;
    let _333: KaminoVaultError;
    let mut _334: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _335: anchor_lang::error::ErrorOrigin;
    let mut _336: anchor_lang::error::Source;
    let mut _337: std::option::Option<anchor_lang::error::ComparedValues>;
    let _338: ();
    let mut _339: &str;
    let _340: &str;
    let mut _341: &std::string::String;
    let _342: &std::string::String;
    let _343: std::string::String;
    let mut _345: std::fmt::Arguments<'_>;
    let mut _346: &[&str];
    let mut _347: &[&str; 1];
    let _348: &[&str; 1];
    let _349: [&str; 1];
    let mut _350: &[core::fmt::rt::Argument<'_>];
    let mut _351: &[core::fmt::rt::Argument<'_>; 1];
    let _352: &[core::fmt::rt::Argument<'_>; 1];
    let _353: [core::fmt::rt::Argument<'_>; 1];
    let mut _354: core::fmt::rt::Argument<'_>;
    let mut _355: &u64;
    let _356: &u64;
    let _357: &state::VaultState;
    let mut _358: &std::cell::RefMut<'_, state::VaultState>;
    let _359: ();
    let mut _360: &str;
    let _361: &str;
    let mut _362: &std::string::String;
    let _363: &std::string::String;
    let _364: std::string::String;
    let mut _366: std::fmt::Arguments<'_>;
    let mut _367: &[&str];
    let mut _368: &[&str; 1];
    let _369: &[&str; 1];
    let _370: [&str; 1];
    let mut _371: &[core::fmt::rt::Argument<'_>];
    let mut _372: &[core::fmt::rt::Argument<'_>; 1];
    let _373: &[core::fmt::rt::Argument<'_>; 1];
    let _374: [core::fmt::rt::Argument<'_>; 1];
    let mut _375: core::fmt::rt::Argument<'_>;
    let mut _376: &u64;
    let _377: &u64;
    let mut _378: u64;
    let mut _379: &mut state::VaultState;
    let mut _380: &mut std::cell::RefMut<'_, state::VaultState>;
    let mut _382: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _383: std::result::Result<u64, std::io::Error>;
    let mut _384: &[u8];
    let mut _385: isize;
    let mut _387: !;
    let mut _388: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _390: ();
    let mut _391: &str;
    let _392: &str;
    let mut _393: &std::string::String;
    let _394: &std::string::String;
    let _395: std::string::String;
    let mut _397: std::fmt::Arguments<'_>;
    let mut _398: &[&str];
    let mut _399: &[&str; 1];
    let _400: &[&str; 1];
    let _401: [&str; 1];
    let mut _402: &[core::fmt::rt::Argument<'_>];
    let mut _403: &[core::fmt::rt::Argument<'_>; 1];
    let _404: &[core::fmt::rt::Argument<'_>; 1];
    let _405: [core::fmt::rt::Argument<'_>; 1];
    let mut _406: core::fmt::rt::Argument<'_>;
    let mut _407: &u64;
    let _408: &u64;
    let _409: &state::VaultState;
    let mut _410: &std::cell::RefMut<'_, state::VaultState>;
    let _411: ();
    let mut _412: &str;
    let _413: &str;
    let mut _414: &std::string::String;
    let _415: &std::string::String;
    let _416: std::string::String;
    let mut _418: std::fmt::Arguments<'_>;
    let mut _419: &[&str];
    let mut _420: &[&str; 1];
    let _421: &[&str; 1];
    let _422: [&str; 1];
    let mut _423: &[core::fmt::rt::Argument<'_>];
    let mut _424: &[core::fmt::rt::Argument<'_>; 1];
    let _425: &[core::fmt::rt::Argument<'_>; 1];
    let _426: [core::fmt::rt::Argument<'_>; 1];
    let mut _427: core::fmt::rt::Argument<'_>;
    let mut _428: &u64;
    let _429: &u64;
    let mut _430: u64;
    let mut _431: &mut state::VaultState;
    let mut _432: &mut std::cell::RefMut<'_, state::VaultState>;
    let mut _434: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _435: std::result::Result<u64, std::io::Error>;
    let mut _436: &[u8];
    let mut _437: isize;
    let mut _439: !;
    let mut _440: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _442: ();
    let mut _443: &str;
    let _444: &str;
    let mut _445: &std::string::String;
    let _446: &std::string::String;
    let _447: std::string::String;
    let mut _449: std::fmt::Arguments<'_>;
    let mut _450: &[&str];
    let mut _451: &[&str; 1];
    let _452: &[&str; 1];
    let _453: [&str; 1];
    let mut _454: &[core::fmt::rt::Argument<'_>];
    let mut _455: &[core::fmt::rt::Argument<'_>; 1];
    let _456: &[core::fmt::rt::Argument<'_>; 1];
    let _457: [core::fmt::rt::Argument<'_>; 1];
    let mut _458: core::fmt::rt::Argument<'_>;
    let mut _459: &u64;
    let _460: &u64;
    let _461: &state::VaultState;
    let mut _462: &std::cell::RefMut<'_, state::VaultState>;
    let _463: ();
    let mut _464: &str;
    let _465: &str;
    let mut _466: &std::string::String;
    let _467: &std::string::String;
    let _468: std::string::String;
    let mut _470: std::fmt::Arguments<'_>;
    let mut _471: &[&str];
    let mut _472: &[&str; 1];
    let _473: &[&str; 1];
    let _474: [&str; 1];
    let mut _475: &[core::fmt::rt::Argument<'_>];
    let mut _476: &[core::fmt::rt::Argument<'_>; 1];
    let _477: &[core::fmt::rt::Argument<'_>; 1];
    let _478: [core::fmt::rt::Argument<'_>; 1];
    let mut _479: core::fmt::rt::Argument<'_>;
    let mut _480: &u64;
    let _481: &u64;
    let mut _482: u64;
    let mut _483: &mut state::VaultState;
    let mut _484: &mut std::cell::RefMut<'_, state::VaultState>;
    let mut _486: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _487: std::result::Result<u64, std::io::Error>;
    let mut _488: &[u8];
    let mut _489: isize;
    let mut _491: !;
    let mut _492: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _494: ();
    let mut _495: &str;
    let _496: &str;
    let mut _497: &std::string::String;
    let _498: &std::string::String;
    let _499: std::string::String;
    let mut _501: std::fmt::Arguments<'_>;
    let mut _502: &[&str];
    let mut _503: &[&str; 1];
    let _504: &[&str; 1];
    let _505: [&str; 1];
    let mut _506: &[core::fmt::rt::Argument<'_>];
    let mut _507: &[core::fmt::rt::Argument<'_>; 1];
    let _508: &[core::fmt::rt::Argument<'_>; 1];
    let _509: [core::fmt::rt::Argument<'_>; 1];
    let mut _510: core::fmt::rt::Argument<'_>;
    let mut _511: &u64;
    let _512: &u64;
    let _513: &state::VaultState;
    let mut _514: &std::cell::RefMut<'_, state::VaultState>;
    let _515: ();
    let mut _516: &str;
    let _517: &str;
    let mut _518: &std::string::String;
    let _519: &std::string::String;
    let _520: std::string::String;
    let mut _522: std::fmt::Arguments<'_>;
    let mut _523: &[&str];
    let mut _524: &[&str; 1];
    let _525: &[&str; 1];
    let _526: [&str; 1];
    let mut _527: &[core::fmt::rt::Argument<'_>];
    let mut _528: &[core::fmt::rt::Argument<'_>; 1];
    let _529: &[core::fmt::rt::Argument<'_>; 1];
    let _530: [core::fmt::rt::Argument<'_>; 1];
    let mut _531: core::fmt::rt::Argument<'_>;
    let mut _532: &u64;
    let _533: &u64;
    let mut _534: u64;
    let mut _535: &mut state::VaultState;
    let mut _536: &mut std::cell::RefMut<'_, state::VaultState>;
    let mut _538: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, anchor_lang::prelude::Pubkey>;
    let mut _539: std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error>;
    let mut _540: &[u8];
    let mut _541: isize;
    let mut _543: !;
    let mut _544: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _546: ();
    let mut _547: &str;
    let _548: &str;
    let mut _549: &std::string::String;
    let _550: &std::string::String;
    let _551: std::string::String;
    let mut _553: std::fmt::Arguments<'_>;
    let mut _554: &[&str];
    let mut _555: &[&str; 1];
    let _556: &[&str; 1];
    let _557: [&str; 1];
    let mut _558: &[core::fmt::rt::Argument<'_>];
    let mut _559: &[core::fmt::rt::Argument<'_>; 1];
    let _560: &[core::fmt::rt::Argument<'_>; 1];
    let _561: [core::fmt::rt::Argument<'_>; 1];
    let mut _562: core::fmt::rt::Argument<'_>;
    let mut _563: &anchor_lang::prelude::Pubkey;
    let _564: &anchor_lang::prelude::Pubkey;
    let _565: &state::VaultState;
    let mut _566: &std::cell::RefMut<'_, state::VaultState>;
    let _567: ();
    let mut _568: &str;
    let _569: &str;
    let mut _570: &std::string::String;
    let _571: &std::string::String;
    let _572: std::string::String;
    let mut _574: std::fmt::Arguments<'_>;
    let mut _575: &[&str];
    let mut _576: &[&str; 1];
    let _577: &[&str; 1];
    let _578: [&str; 1];
    let mut _579: &[core::fmt::rt::Argument<'_>];
    let mut _580: &[core::fmt::rt::Argument<'_>; 1];
    let _581: &[core::fmt::rt::Argument<'_>; 1];
    let _582: [core::fmt::rt::Argument<'_>; 1];
    let mut _583: core::fmt::rt::Argument<'_>;
    let mut _584: &anchor_lang::prelude::Pubkey;
    let _585: &anchor_lang::prelude::Pubkey;
    let mut _586: anchor_lang::prelude::Pubkey;
    let mut _587: &mut state::VaultState;
    let mut _588: &mut std::cell::RefMut<'_, state::VaultState>;
    let mut _590: &[u8];
    let mut _591: anchor_lang::prelude::Pubkey;
    let mut _592: &state::VaultState;
    let mut _593: &std::cell::RefMut<'_, state::VaultState>;
    let _594: ();
    let mut _595: &str;
    let _596: &str;
    let mut _597: &std::string::String;
    let _598: &std::string::String;
    let _599: std::string::String;
    let mut _601: std::fmt::Arguments<'_>;
    let mut _602: &[&str];
    let mut _603: &[&str; 1];
    let _604: &[&str; 1];
    let _605: [&str; 1];
    let mut _606: &[core::fmt::rt::Argument<'_>];
    let mut _607: &[core::fmt::rt::Argument<'_>; 1];
    let _608: &[core::fmt::rt::Argument<'_>; 1];
    let _609: [core::fmt::rt::Argument<'_>; 1];
    let mut _610: core::fmt::rt::Argument<'_>;
    let mut _611: &std::string::String;
    let _612: &std::string::String;
    let _613: std::string::String;
    let mut _614: &[u8];
    let mut _615: &[u8; 40];
    let _616: &[u8; 40];
    let _617: &state::VaultState;
    let mut _618: &std::cell::RefMut<'_, state::VaultState>;
    let mut _619: anchor_lang::prelude::Pubkey;
    let mut _620: &state::VaultState;
    let mut _621: &std::cell::RefMut<'_, state::VaultState>;
    let _622: ();
    let mut _623: &str;
    let _624: &str;
    let mut _625: &std::string::String;
    let _626: &std::string::String;
    let _627: std::string::String;
    let mut _629: std::fmt::Arguments<'_>;
    let mut _630: &[&str];
    let mut _631: &[&str; 1];
    let _632: &[&str; 1];
    let _633: [&str; 1];
    let mut _634: &[core::fmt::rt::Argument<'_>];
    let mut _635: &[core::fmt::rt::Argument<'_>; 1];
    let _636: &[core::fmt::rt::Argument<'_>; 1];
    let _637: [core::fmt::rt::Argument<'_>; 1];
    let mut _638: core::fmt::rt::Argument<'_>;
    let mut _639: &std::string::String;
    let _640: &std::string::String;
    let mut _642: &[u8];
    let mut _643: [u8; 40];
    let mut _644: &mut state::VaultState;
    let mut _645: &mut std::cell::RefMut<'_, state::VaultState>;
    let mut _647: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, anchor_lang::prelude::Pubkey>;
    let mut _648: std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error>;
    let mut _649: &[u8];
    let mut _650: isize;
    let mut _652: !;
    let mut _653: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _655: ();
    let mut _656: &str;
    let _657: &str;
    let mut _658: &std::string::String;
    let _659: &std::string::String;
    let _660: std::string::String;
    let mut _662: std::fmt::Arguments<'_>;
    let mut _663: &[&str];
    let mut _664: &[&str; 1];
    let _665: &[&str; 1];
    let _666: [&str; 1];
    let mut _667: &[core::fmt::rt::Argument<'_>];
    let mut _668: &[core::fmt::rt::Argument<'_>; 1];
    let _669: &[core::fmt::rt::Argument<'_>; 1];
    let _670: [core::fmt::rt::Argument<'_>; 1];
    let mut _671: core::fmt::rt::Argument<'_>;
    let mut _672: &anchor_lang::prelude::Pubkey;
    let _673: &anchor_lang::prelude::Pubkey;
    let _674: &state::VaultState;
    let mut _675: &std::cell::RefMut<'_, state::VaultState>;
    let _676: ();
    let mut _677: &str;
    let _678: &str;
    let mut _679: &std::string::String;
    let _680: &std::string::String;
    let _681: std::string::String;
    let mut _683: std::fmt::Arguments<'_>;
    let mut _684: &[&str];
    let mut _685: &[&str; 1];
    let _686: &[&str; 1];
    let _687: [&str; 1];
    let mut _688: &[core::fmt::rt::Argument<'_>];
    let mut _689: &[core::fmt::rt::Argument<'_>; 1];
    let _690: &[core::fmt::rt::Argument<'_>; 1];
    let _691: [core::fmt::rt::Argument<'_>; 1];
    let mut _692: core::fmt::rt::Argument<'_>;
    let mut _693: &anchor_lang::prelude::Pubkey;
    let _694: &anchor_lang::prelude::Pubkey;
    let mut _695: anchor_lang::prelude::Pubkey;
    let mut _696: &mut state::VaultState;
    let mut _697: &mut std::cell::RefMut<'_, state::VaultState>;
    let mut _699: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, anchor_lang::prelude::Pubkey>;
    let mut _700: std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error>;
    let mut _701: &[u8];
    let mut _702: isize;
    let mut _704: !;
    let mut _705: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _707: ();
    let mut _708: &str;
    let _709: &str;
    let mut _710: &std::string::String;
    let _711: &std::string::String;
    let _712: std::string::String;
    let mut _714: std::fmt::Arguments<'_>;
    let mut _715: &[&str];
    let mut _716: &[&str; 1];
    let _717: &[&str; 1];
    let _718: [&str; 1];
    let mut _719: &[core::fmt::rt::Argument<'_>];
    let mut _720: &[core::fmt::rt::Argument<'_>; 1];
    let _721: &[core::fmt::rt::Argument<'_>; 1];
    let _722: [core::fmt::rt::Argument<'_>; 1];
    let mut _723: core::fmt::rt::Argument<'_>;
    let mut _724: &anchor_lang::prelude::Pubkey;
    let _725: &anchor_lang::prelude::Pubkey;
    let _726: &state::VaultState;
    let mut _727: &std::cell::RefMut<'_, state::VaultState>;
    let _728: ();
    let mut _729: &str;
    let _730: &str;
    let mut _731: &std::string::String;
    let _732: &std::string::String;
    let _733: std::string::String;
    let mut _735: std::fmt::Arguments<'_>;
    let mut _736: &[&str];
    let mut _737: &[&str; 1];
    let _738: &[&str; 1];
    let _739: [&str; 1];
    let mut _740: &[core::fmt::rt::Argument<'_>];
    let mut _741: &[core::fmt::rt::Argument<'_>; 1];
    let _742: &[core::fmt::rt::Argument<'_>; 1];
    let _743: [core::fmt::rt::Argument<'_>; 1];
    let mut _744: core::fmt::rt::Argument<'_>;
    let mut _745: &anchor_lang::prelude::Pubkey;
    let _746: &anchor_lang::prelude::Pubkey;
    let mut _747: anchor_lang::prelude::Pubkey;
    let mut _748: &mut state::VaultState;
    let mut _749: &mut std::cell::RefMut<'_, state::VaultState>;
    let mut _751: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, anchor_lang::prelude::Pubkey>;
    let mut _752: std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error>;
    let mut _753: &[u8];
    let mut _754: isize;
    let mut _756: !;
    let mut _757: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _759: ();
    let mut _760: &str;
    let _761: &str;
    let mut _762: &std::string::String;
    let _763: &std::string::String;
    let _764: std::string::String;
    let mut _766: std::fmt::Arguments<'_>;
    let mut _767: &[&str];
    let mut _768: &[&str; 1];
    let _769: &[&str; 1];
    let _770: [&str; 1];
    let mut _771: &[core::fmt::rt::Argument<'_>];
    let mut _772: &[core::fmt::rt::Argument<'_>; 1];
    let _773: &[core::fmt::rt::Argument<'_>; 1];
    let _774: [core::fmt::rt::Argument<'_>; 1];
    let mut _775: core::fmt::rt::Argument<'_>;
    let mut _776: &anchor_lang::prelude::Pubkey;
    let _777: &anchor_lang::prelude::Pubkey;
    let _778: &state::VaultState;
    let mut _779: &std::cell::RefMut<'_, state::VaultState>;
    let _780: ();
    let mut _781: &str;
    let _782: &str;
    let mut _783: &std::string::String;
    let _784: &std::string::String;
    let _785: std::string::String;
    let mut _787: std::fmt::Arguments<'_>;
    let mut _788: &[&str];
    let mut _789: &[&str; 1];
    let _790: &[&str; 1];
    let _791: [&str; 1];
    let mut _792: &[core::fmt::rt::Argument<'_>];
    let mut _793: &[core::fmt::rt::Argument<'_>; 1];
    let _794: &[core::fmt::rt::Argument<'_>; 1];
    let _795: [core::fmt::rt::Argument<'_>; 1];
    let mut _796: core::fmt::rt::Argument<'_>;
    let mut _797: &anchor_lang::prelude::Pubkey;
    let _798: &anchor_lang::prelude::Pubkey;
    let mut _799: anchor_lang::prelude::Pubkey;
    let mut _800: &mut state::VaultState;
    let mut _801: &mut std::cell::RefMut<'_, state::VaultState>;
    let mut _803: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _804: std::result::Result<u64, std::io::Error>;
    let mut _805: &[u8];
    let mut _806: isize;
    let mut _808: !;
    let mut _809: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _811: ();
    let mut _812: &str;
    let _813: &str;
    let mut _814: &std::string::String;
    let _815: &std::string::String;
    let _816: std::string::String;
    let mut _818: std::fmt::Arguments<'_>;
    let mut _819: &[&str];
    let mut _820: &[&str; 1];
    let _821: &[&str; 1];
    let _822: [&str; 1];
    let mut _823: &[core::fmt::rt::Argument<'_>];
    let mut _824: &[core::fmt::rt::Argument<'_>; 1];
    let _825: &[core::fmt::rt::Argument<'_>; 1];
    let _826: [core::fmt::rt::Argument<'_>; 1];
    let mut _827: core::fmt::rt::Argument<'_>;
    let mut _828: &u64;
    let _829: &u64;
    let _830: &state::VaultState;
    let mut _831: &std::cell::RefMut<'_, state::VaultState>;
    let _832: ();
    let mut _833: &str;
    let _834: &str;
    let mut _835: &std::string::String;
    let _836: &std::string::String;
    let _837: std::string::String;
    let mut _839: std::fmt::Arguments<'_>;
    let mut _840: &[&str];
    let mut _841: &[&str; 1];
    let _842: &[&str; 1];
    let _843: [&str; 1];
    let mut _844: &[core::fmt::rt::Argument<'_>];
    let mut _845: &[core::fmt::rt::Argument<'_>; 1];
    let _846: &[core::fmt::rt::Argument<'_>; 1];
    let _847: [core::fmt::rt::Argument<'_>; 1];
    let mut _848: core::fmt::rt::Argument<'_>;
    let mut _849: &u64;
    let _850: &u64;
    let mut _851: u64;
    let mut _852: &mut state::VaultState;
    let mut _853: &mut std::cell::RefMut<'_, state::VaultState>;
    let mut _855: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _856: std::result::Result<u64, std::io::Error>;
    let mut _857: &[u8];
    let mut _858: isize;
    let mut _860: !;
    let mut _861: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _863: ();
    let mut _864: &str;
    let _865: &str;
    let mut _866: &std::string::String;
    let _867: &std::string::String;
    let _868: std::string::String;
    let mut _870: std::fmt::Arguments<'_>;
    let mut _871: &[&str];
    let mut _872: &[&str; 1];
    let _873: &[&str; 1];
    let _874: [&str; 1];
    let mut _875: &[core::fmt::rt::Argument<'_>];
    let mut _876: &[core::fmt::rt::Argument<'_>; 1];
    let _877: &[core::fmt::rt::Argument<'_>; 1];
    let _878: [core::fmt::rt::Argument<'_>; 1];
    let mut _879: core::fmt::rt::Argument<'_>;
    let mut _880: &u64;
    let _881: &u64;
    let _882: &state::VaultState;
    let mut _883: &std::cell::RefMut<'_, state::VaultState>;
    let _884: ();
    let mut _885: &str;
    let _886: &str;
    let mut _887: &std::string::String;
    let _888: &std::string::String;
    let _889: std::string::String;
    let mut _891: std::fmt::Arguments<'_>;
    let mut _892: &[&str];
    let mut _893: &[&str; 1];
    let _894: &[&str; 1];
    let _895: [&str; 1];
    let mut _896: &[core::fmt::rt::Argument<'_>];
    let mut _897: &[core::fmt::rt::Argument<'_>; 1];
    let _898: &[core::fmt::rt::Argument<'_>; 1];
    let _899: [core::fmt::rt::Argument<'_>; 1];
    let mut _900: core::fmt::rt::Argument<'_>;
    let mut _901: &u64;
    let _902: &u64;
    let mut _903: u64;
    let mut _904: &mut state::VaultState;
    let mut _905: &mut std::cell::RefMut<'_, state::VaultState>;
    let mut _906: ();
    let mut _941: &mut handlers::handler_update_vault_config::UpdateVaultConfig<'_>;
    let mut _942: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _943: &mut handlers::handler_update_vault_config::UpdateVaultConfig<'_>;
    let mut _944: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _945: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _946: bool;
    let mut _947: bool;
    let mut _948: bool;
    let mut _949: bool;
    let mut _950: isize;
    let mut _951: isize;
    let mut _952: isize;
    let mut _953: isize;
    let mut _954: isize;
    let mut _955: isize;
    let mut _956: isize;
    let mut _957: isize;
    let mut _958: isize;
    let mut _959: isize;
    let mut _960: isize;
    let mut _961: isize;
    let mut _962: isize;
    let mut _963: isize;
    let mut _964: isize;
    let mut _965: isize;
    let mut _966: isize;
    let mut _967: isize;
    let mut _968: isize;
    let mut _969: isize;
    let mut _970: isize;
    let mut _971: isize;
    let mut _972: isize;
    let mut _973: isize;
    let mut _974: isize;
    let mut _975: isize;
    let mut _976: isize;
    let mut _977: isize;
    let mut _978: isize;
    let mut _979: isize;
    let mut _980: isize;
    let mut _981: isize;
    let mut _982: isize;
    let mut _983: isize;
    let mut _984: isize;
    let mut _985: isize;
    let mut _986: isize;
    let mut _987: isize;
    let mut _988: isize;
    let mut _989: isize;
    let mut _990: isize;
    let mut _991: isize;
    let mut _992: isize;
    let mut _993: isize;
    let mut _994: isize;
    let mut _995: isize;
    let mut _996: isize;
    let mut _997: isize;
    let mut _998: isize;
    let mut _999: isize;
    let mut _1000: isize;
    let mut _1001: isize;
    let mut _1002: isize;
    let mut _1003: isize;
    let mut _1004: isize;
    let mut _1005: isize;
    let mut _1006: isize;
    let mut _1007: isize;
    let mut _1008: isize;
    let mut _1009: isize;
    let mut _1010: isize;
    let mut _1011: isize;
    let mut _1012: isize;
    let mut _1013: isize;
    let mut _1014: isize;
    let mut _1015: isize;
    let mut _1016: isize;
    let mut _1017: isize;
    let mut _1018: isize;
    let mut _1019: isize;
    let mut _1020: isize;
    let mut _1021: isize;
    let mut _1022: isize;
    let mut _1023: isize;
    let mut _1024: isize;
    let mut _1025: isize;
    let mut _1026: isize;
    let mut _1027: isize;
    let mut _1028: isize;
    let mut _1029: isize;
    let mut _1030: isize;
    let mut _1031: isize;
    let mut _1032: isize;
    let mut _1033: isize;
    let mut _1034: isize;
    let mut _1035: isize;
    let mut _1036: isize;
    let mut _1037: isize;
    let mut _1038: isize;
    let mut _1039: isize;
    let mut _1040: isize;
    let mut _1041: isize;
    let mut _1042: isize;
    let mut _1043: isize;
    let mut _1044: isize;
    let mut _1045: isize;
    scope 1 {
        debug cpi_mem => _4;
        let _8: &mut std::cell::RefMut<'_, state::VaultState>;
        let _14: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _17: std::cell::RefMut<'_, state::VaultState>;
        scope 2 {
            debug vault => _8;
            let _18: usize;
            scope 7 {
                debug reserves_count => _18;
                let _34: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _37: ();
                let _38: std::iter::Map<std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>, {closure@programs\kvault\src\handlers\handler_update_vault_config.rs:67:14: 67:28}>;
                scope 8 {
                    debug residual => _34;
                    scope 9 {
                    }
                }
                scope 10 {
                    debug val => _37;
                    scope 11 {
                    }
                }
                scope 12 {
                    debug reserves_iter => _38;
                    let _44: operations::vault_operations::common::Holdings;
                    let _56: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                    let _59: anchor_lang::prelude::Clock;
                    let _61: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _64: operations::vault_operations::common::Holdings;
                    scope 13 {
                        debug holdings => _44;
                        let _71: std::string::String;
                        let _99: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                        let _102: anchor_lang::prelude::Clock;
                        let _104: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _107: ();
                        let _114: std::string::String;
                        let _129: u64;
                        let _134: std::result::Result<std::convert::Infallible, std::io::Error>;
                        let _137: u64;
                        let _189: u64;
                        let _194: std::result::Result<std::convert::Infallible, std::io::Error>;
                        let _197: u64;
                        let _259: u64;
                        let _264: std::result::Result<std::convert::Infallible, std::io::Error>;
                        let _267: u64;
                        let _311: u64;
                        let _316: std::result::Result<std::convert::Infallible, std::io::Error>;
                        let _319: u64;
                        let _381: u64;
                        let _386: std::result::Result<std::convert::Infallible, std::io::Error>;
                        let _389: u64;
                        let _433: u64;
                        let _438: std::result::Result<std::convert::Infallible, std::io::Error>;
                        let _441: u64;
                        let _485: u64;
                        let _490: std::result::Result<std::convert::Infallible, std::io::Error>;
                        let _493: u64;
                        let _537: anchor_lang::prelude::Pubkey;
                        let _542: std::result::Result<std::convert::Infallible, std::io::Error>;
                        let _545: anchor_lang::prelude::Pubkey;
                        let _589: std::string::String;
                        let _646: anchor_lang::prelude::Pubkey;
                        let _651: std::result::Result<std::convert::Infallible, std::io::Error>;
                        let _654: anchor_lang::prelude::Pubkey;
                        let _698: anchor_lang::prelude::Pubkey;
                        let _703: std::result::Result<std::convert::Infallible, std::io::Error>;
                        let _706: anchor_lang::prelude::Pubkey;
                        let _750: anchor_lang::prelude::Pubkey;
                        let _755: std::result::Result<std::convert::Infallible, std::io::Error>;
                        let _758: anchor_lang::prelude::Pubkey;
                        let _802: u64;
                        let _807: std::result::Result<std::convert::Infallible, std::io::Error>;
                        let _810: u64;
                        let _854: u64;
                        let _859: std::result::Result<std::convert::Infallible, std::io::Error>;
                        let _862: u64;
                        let mut _939: &[&str; 1];
                        let mut _940: &[&str; 1];
                        scope 22 {
                            debug res => _71;
                        }
                        scope 23 {
                            debug residual => _99;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _102;
                            scope 26 {
                            }
                        }
                        scope 27 {
                            debug residual => _104;
                            scope 28 {
                            }
                        }
                        scope 29 {
                            debug val => _107;
                            scope 30 {
                            }
                        }
                        scope 31 {
                            debug res => _114;
                        }
                        scope 32 {
                            debug performance_fee_bps => _129;
                            let _144: std::string::String;
                            let _165: std::string::String;
                            let _178: u64;
                            let mut _937: &[&str; 1];
                            let mut _938: &[&str; 1];
                            scope 37 {
                                debug res => _144;
                            }
                            scope 38 {
                                debug res => _165;
                            }
                            scope 39 {
                                debug full_bps_u64 => _178;
                            }
                        }
                        scope 33 {
                            debug residual => _134;
                            scope 34 {
                            }
                        }
                        scope 35 {
                            debug val => _137;
                            scope 36 {
                            }
                        }
                        scope 40 {
                            debug management_fee_bps => _189;
                            let _222: std::string::String;
                            let _243: std::string::String;
                            let mut _933: &KaminoVaultError;
                            let mut _934: &KaminoVaultError;
                            let mut _935: &[&str; 1];
                            let mut _936: &[&str; 1];
                            scope 45 {
                                debug res => _222;
                            }
                            scope 46 {
                                debug res => _243;
                            }
                        }
                        scope 41 {
                            debug residual => _194;
                            scope 42 {
                            }
                        }
                        scope 43 {
                            debug val => _197;
                            scope 44 {
                            }
                        }
                        scope 47 {
                            debug min_deposit_amount => _259;
                            let _274: std::string::String;
                            let _295: std::string::String;
                            let mut _931: &[&str; 1];
                            let mut _932: &[&str; 1];
                            scope 52 {
                                debug res => _274;
                            }
                            scope 53 {
                                debug res => _295;
                            }
                        }
                        scope 48 {
                            debug residual => _264;
                            scope 49 {
                            }
                        }
                        scope 50 {
                            debug val => _267;
                            scope 51 {
                            }
                        }
                        scope 54 {
                            debug min_withdraw_amount => _311;
                            let _344: std::string::String;
                            let _365: std::string::String;
                            let mut _927: &[&str; 1];
                            let mut _928: &[&str; 1];
                            let mut _929: &KaminoVaultError;
                            let mut _930: &KaminoVaultError;
                            scope 59 {
                                debug res => _344;
                            }
                            scope 60 {
                                debug res => _365;
                            }
                        }
                        scope 55 {
                            debug residual => _316;
                            scope 56 {
                            }
                        }
                        scope 57 {
                            debug val => _319;
                            scope 58 {
                            }
                        }
                        scope 61 {
                            debug min_invest_amount => _381;
                            let _396: std::string::String;
                            let _417: std::string::String;
                            let mut _925: &[&str; 1];
                            let mut _926: &[&str; 1];
                            scope 66 {
                                debug res => _396;
                            }
                            scope 67 {
                                debug res => _417;
                            }
                        }
                        scope 62 {
                            debug residual => _386;
                            scope 63 {
                            }
                        }
                        scope 64 {
                            debug val => _389;
                            scope 65 {
                            }
                        }
                        scope 68 {
                            debug min_invest_delay_slots => _433;
                            let _448: std::string::String;
                            let _469: std::string::String;
                            let mut _923: &[&str; 1];
                            let mut _924: &[&str; 1];
                            scope 73 {
                                debug res => _448;
                            }
                            scope 74 {
                                debug res => _469;
                            }
                        }
                        scope 69 {
                            debug residual => _438;
                            scope 70 {
                            }
                        }
                        scope 71 {
                            debug val => _441;
                            scope 72 {
                            }
                        }
                        scope 75 {
                            debug crank_fund_fee_per_reserve => _485;
                            let _500: std::string::String;
                            let _521: std::string::String;
                            let mut _921: &[&str; 1];
                            let mut _922: &[&str; 1];
                            scope 80 {
                                debug res => _500;
                            }
                            scope 81 {
                                debug res => _521;
                            }
                        }
                        scope 76 {
                            debug residual => _490;
                            scope 77 {
                            }
                        }
                        scope 78 {
                            debug val => _493;
                            scope 79 {
                            }
                        }
                        scope 82 {
                            debug pubkey => _537;
                            let _552: std::string::String;
                            let _573: std::string::String;
                            let mut _919: &[&str; 1];
                            let mut _920: &[&str; 1];
                            scope 87 {
                                debug res => _552;
                            }
                            scope 88 {
                                debug res => _573;
                            }
                        }
                        scope 83 {
                            debug residual => _542;
                            scope 84 {
                            }
                        }
                        scope 85 {
                            debug val => _545;
                            scope 86 {
                            }
                        }
                        scope 89 {
                            debug str_name => _589;
                            let _600: std::string::String;
                            let _628: std::string::String;
                            let _641: [u8; 40];
                            let mut _917: &[&str; 1];
                            let mut _918: &[&str; 1];
                            scope 90 {
                                debug res => _600;
                            }
                            scope 91 {
                                debug res => _628;
                            }
                            scope 92 {
                                debug name => _641;
                            }
                        }
                        scope 93 {
                            debug pubkey => _646;
                            let _661: std::string::String;
                            let _682: std::string::String;
                            let mut _915: &[&str; 1];
                            let mut _916: &[&str; 1];
                            scope 98 {
                                debug res => _661;
                            }
                            scope 99 {
                                debug res => _682;
                            }
                        }
                        scope 94 {
                            debug residual => _651;
                            scope 95 {
                            }
                        }
                        scope 96 {
                            debug val => _654;
                            scope 97 {
                            }
                        }
                        scope 100 {
                            debug pubkey => _698;
                            let _713: std::string::String;
                            let _734: std::string::String;
                            let mut _913: &[&str; 1];
                            let mut _914: &[&str; 1];
                            scope 105 {
                                debug res => _713;
                            }
                            scope 106 {
                                debug res => _734;
                            }
                        }
                        scope 101 {
                            debug residual => _703;
                            scope 102 {
                            }
                        }
                        scope 103 {
                            debug val => _706;
                            scope 104 {
                            }
                        }
                        scope 107 {
                            debug pubkey => _750;
                            let _765: std::string::String;
                            let _786: std::string::String;
                            let mut _911: &[&str; 1];
                            let mut _912: &[&str; 1];
                            scope 112 {
                                debug res => _765;
                            }
                            scope 113 {
                                debug res => _786;
                            }
                        }
                        scope 108 {
                            debug residual => _755;
                            scope 109 {
                            }
                        }
                        scope 110 {
                            debug val => _758;
                            scope 111 {
                            }
                        }
                        scope 114 {
                            debug unallocated_weight => _802;
                            let _817: std::string::String;
                            let _838: std::string::String;
                            let mut _909: &[&str; 1];
                            let mut _910: &[&str; 1];
                            scope 119 {
                                debug res => _817;
                            }
                            scope 120 {
                                debug res => _838;
                            }
                        }
                        scope 115 {
                            debug residual => _807;
                            scope 116 {
                            }
                        }
                        scope 117 {
                            debug val => _810;
                            scope 118 {
                            }
                        }
                        scope 121 {
                            debug unallocated_tokens_cap => _854;
                            let _869: std::string::String;
                            let _890: std::string::String;
                            let mut _907: &[&str; 1];
                            let mut _908: &[&str; 1];
                            scope 126 {
                                debug res => _869;
                            }
                            scope 127 {
                                debug res => _890;
                            }
                        }
                        scope 122 {
                            debug residual => _859;
                            scope 123 {
                            }
                        }
                        scope 124 {
                            debug val => _862;
                            scope 125 {
                            }
                        }
                    }
                    scope 14 {
                        debug residual => _56;
                        scope 15 {
                        }
                    }
                    scope 16 {
                        debug val => _59;
                        scope 17 {
                        }
                    }
                    scope 18 {
                        debug residual => _61;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _64;
                        scope 21 {
                        }
                    }
                }
            }
        }
        scope 3 {
            debug residual => _14;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _17;
            scope 6 {
            }
        }
    }

    bb0: {
        _949 = const false;
        _948 = const false;
        _947 = const false;
        _946 = const false;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _941 = deref_copy (_1.1: &mut handlers::handler_update_vault_config::UpdateVaultConfig<'_>);
        _6 = &(*_941);
        _5 = <handlers::handler_update_vault_config::UpdateVaultConfig<'_> as anchor_lang::ToAccountInfos<'_>>::to_account_infos(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        StorageLive(_7);
        _942 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _7 = &(*_942);
        _4 = cpi_mem::CpiMemoryLender::<'_>::build_cpi_memory_lender(move _5, move _7) -> [return: bb2, unwind: bb409];
    }

    bb2: {
        StorageDead(_7);
        StorageDead(_5);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _943 = deref_copy (_1.1: &mut handlers::handler_update_vault_config::UpdateVaultConfig<'_>);
        _12 = &((*_943).1: anchor_lang::prelude::AccountLoader<'_, state::VaultState>);
        _11 = anchor_lang::prelude::AccountLoader::<'_, state::VaultState>::load_mut(move _12) -> [return: bb3, unwind: bb408];
    }

    bb3: {
        StorageDead(_12);
        _10 = <std::result::Result<RefMut<'_, state::VaultState>, anchor_lang::error::Error> as Try>::branch(move _11) -> [return: bb4, unwind: bb408];
    }

    bb4: {
        StorageDead(_11);
        _13 = discriminant(_10);
        switchInt(move _13) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_17);
        _17 = move ((_10 as Continue).0: std::cell::RefMut<'_, state::VaultState>);
        _9 = move _17;
        StorageDead(_17);
        _8 = &mut _9;
        _950 = discriminant(_10);
        StorageDead(_10);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &(*_8);
        _20 = <RefMut<'_, state::VaultState> as Deref>::deref(move _21) -> [return: bb9, unwind: bb407];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_14);
        _14 = move ((_10 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_16);
        _16 = move _14;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _16) -> [return: bb8, unwind: bb428];
    }

    bb8: {
        StorageDead(_16);
        StorageDead(_14);
        _1024 = discriminant(_10);
        StorageDead(_10);
        goto -> bb368;
    }

    bb9: {
        _19 = &(*_20);
        StorageDead(_21);
        _18 = state::VaultState::get_reserves_count(move _19) -> [return: bb10, unwind: bb407];
    }

    bb10: {
        StorageDead(_19);
        StorageDead(_20);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &mut _4;
        _26 = &mut (*_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _944 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _30 = &(*_944);
        _29 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _30) -> [return: bb11, unwind: bb407];
    }

    bb11: {
        StorageDead(_30);
        StorageLive(_31);
        _31 = _18;
        _28 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::take(move _29, move _31) -> [return: bb12, unwind: bb407];
    }

    bb12: {
        StorageDead(_31);
        StorageDead(_29);
        StorageLive(_32);
        _32 = _18;
        _25 = cpi_refresh_reserves::<'_, '_, std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>(move _26, move _28, move _32) -> [return: bb13, unwind: bb407];
    }

    bb13: {
        StorageDead(_32);
        StorageDead(_28);
        StorageDead(_26);
        _24 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _25) -> [return: bb14, unwind: bb407];
    }

    bb14: {
        StorageDead(_25);
        _33 = discriminant(_24);
        switchInt(move _33) -> [0: bb15, 1: bb16, otherwise: bb6];
    }

    bb15: {
        StorageLive(_37);
        _37 = ((_24 as Continue).0: ());
        _23 = _37;
        StorageDead(_37);
        _952 = discriminant(_24);
        StorageDead(_27);
        StorageDead(_24);
        StorageDead(_23);
        _22 = const ();
        StorageDead(_22);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _945 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _41 = &(*_945);
        _40 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _41) -> [return: bb18, unwind: bb407];
    }

    bb16: {
        StorageLive(_34);
        _34 = move ((_24 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_36);
        _36 = move _34;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _36) -> [return: bb17, unwind: bb427];
    }

    bb17: {
        StorageDead(_36);
        StorageDead(_34);
        _1022 = discriminant(_24);
        StorageDead(_27);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb367;
    }

    bb18: {
        StorageDead(_41);
        StorageLive(_42);
        _42 = _18;
        _39 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::take(move _40, move _42) -> [return: bb19, unwind: bb407];
    }

    bb19: {
        StorageDead(_42);
        StorageDead(_40);
        StorageLive(_43);
        _43 = {closure@programs\kvault\src\handlers\handler_update_vault_config.rs:67:14: 67:28};
        _38 = <std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>> as Iterator>::map::<kamino_lending::utils::FatAccountLoader<'_, kamino_lending::Reserve>, {closure@programs\kvault\src\handlers\handler_update_vault_config.rs:67:14: 67:28}>(move _39, move _43) -> [return: bb20, unwind: bb407];
    }

    bb20: {
        StorageDead(_43);
        StorageDead(_39);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = &(*_8);
        _48 = <RefMut<'_, state::VaultState> as Deref>::deref(move _49) -> [return: bb21, unwind: bb407];
    }

    bb21: {
        _47 = &(*_48);
        StorageDead(_49);
        StorageLive(_50);
        _50 = move _38;
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb22, unwind: bb407];
    }

    bb22: {
        _53 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _54) -> [return: bb23, unwind: bb407];
    }

    bb23: {
        _948 = const true;
        _949 = const true;
        StorageDead(_54);
        _55 = discriminant(_53);
        switchInt(move _55) -> [0: bb24, 1: bb25, otherwise: bb6];
    }

    bb24: {
        StorageLive(_59);
        _59 = move ((_53 as Continue).0: anchor_lang::prelude::Clock);
        _52 = move _59;
        StorageDead(_59);
        _51 = (_52.0: u64);
        _46 = holdings::<'_, kamino_lending::utils::FatAccountLoader<'_, kamino_lending::Reserve>, Map<std::iter::Take<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>, {closure@programs\kvault\src\handlers\handler_update_vault_config.rs:67:14: 67:28}>>(move _47, move _50, move _51) -> [return: bb27, unwind: bb426];
    }

    bb25: {
        StorageLive(_56);
        _56 = move ((_53 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_58);
        _58 = move _56;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _58) -> [return: bb26, unwind: bb426];
    }

    bb26: {
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_47);
        StorageDead(_46);
        goto -> bb365;
    }

    bb27: {
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_47);
        _45 = <std::result::Result<Holdings, anchor_lang::error::Error> as Try>::branch(move _46) -> [return: bb28, unwind: bb426];
    }

    bb28: {
        StorageDead(_46);
        _60 = discriminant(_45);
        switchInt(move _60) -> [0: bb29, 1: bb30, otherwise: bb6];
    }

    bb29: {
        StorageLive(_64);
        _64 = move ((_45 as Continue).0: operations::vault_operations::common::Holdings);
        _44 = move _64;
        StorageDead(_64);
        _954 = discriminant(_45);
        _956 = discriminant(_53);
        _948 = const false;
        _949 = const false;
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_48);
        StorageDead(_45);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _940 = const _;
        _75 = &(*_940);
        _74 = &(*_75);
        _73 = move _74 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_74);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _83 = &_44;
        _82 = &(*_83);
        _81 = core::fmt::rt::Argument::<'_>::new_debug::<Holdings>(move _82) -> [return: bb32, unwind: bb406];
    }

    bb30: {
        StorageLive(_61);
        _61 = move ((_45 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_63);
        _63 = move _61;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _63) -> [return: bb31, unwind: bb425];
    }

    bb31: {
        StorageDead(_63);
        StorageDead(_61);
        _1018 = discriminant(_45);
        goto -> bb365;
    }

    bb32: {
        StorageDead(_82);
        _80 = [move _81];
        StorageDead(_81);
        _79 = &_80;
        _78 = &(*_79);
        _77 = move _78 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_78);
        _72 = Arguments::<'_>::new_v1(move _73, move _77) -> [return: bb33, unwind: bb406];
    }

    bb33: {
        StorageDead(_77);
        StorageDead(_73);
        _71 = format(move _72) -> [return: bb34, unwind: bb406];
    }

    bb34: {
        StorageDead(_72);
        StorageDead(_83);
        StorageDead(_80);
        StorageDead(_79);
        StorageDead(_75);
        _70 = move _71;
        StorageDead(_71);
        _69 = &_70;
        _68 = &(*_69);
        _67 = <String as Deref>::deref(move _68) -> [return: bb35, unwind: bb405];
    }

    bb35: {
        _66 = &(*_67);
        StorageDead(_68);
        _65 = solana_program::log::sol_log(move _66) -> [return: bb36, unwind: bb405];
    }

    bb36: {
        StorageDead(_66);
        drop(_70) -> [return: bb37, unwind: bb406];
    }

    bb37: {
        StorageDead(_70);
        StorageDead(_69);
        StorageDead(_67);
        StorageDead(_65);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = &mut (*_8);
        _88 = <RefMut<'_, state::VaultState> as DerefMut>::deref_mut(move _89) -> [return: bb38, unwind: bb406];
    }

    bb38: {
        _87 = &mut (*_88);
        StorageDead(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = &(_44.1: operations::vault_operations::common::Invested);
        _90 = &(*_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb39, unwind: bb406];
    }

    bb39: {
        _96 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _97) -> [return: bb40, unwind: bb406];
    }

    bb40: {
        _946 = const true;
        _947 = const true;
        StorageDead(_97);
        _98 = discriminant(_96);
        switchInt(move _98) -> [0: bb41, 1: bb42, otherwise: bb6];
    }

    bb41: {
        StorageLive(_102);
        _102 = move ((_96 as Continue).0: anchor_lang::prelude::Clock);
        _95 = move _102;
        StorageDead(_102);
        _94 = (_95.4: i64);
        _93 = <i64 as TryInto<u64>>::try_into(move _94) -> [return: bb44, unwind: bb424];
    }

    bb42: {
        StorageLive(_99);
        _99 = move ((_96 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_101);
        _101 = move _99;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _101) -> [return: bb43, unwind: bb424];
    }

    bb43: {
        StorageDead(_101);
        StorageDead(_99);
        StorageDead(_94);
        StorageDead(_93);
        StorageDead(_92);
        StorageDead(_90);
        StorageDead(_87);
        StorageDead(_86);
        goto -> bb363;
    }

    bb44: {
        StorageDead(_94);
        _92 = std::result::Result::<u64, TryFromIntError>::unwrap(move _93) -> [return: bb45, unwind: bb424];
    }

    bb45: {
        StorageDead(_93);
        _86 = charge_fees(move _87, move _90, move _92) -> [return: bb46, unwind: bb424];
    }

    bb46: {
        StorageDead(_92);
        StorageDead(_90);
        StorageDead(_87);
        _85 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _86) -> [return: bb47, unwind: bb424];
    }

    bb47: {
        StorageDead(_86);
        _103 = discriminant(_85);
        switchInt(move _103) -> [0: bb48, 1: bb49, otherwise: bb6];
    }

    bb48: {
        StorageLive(_107);
        _107 = ((_85 as Continue).0: ());
        _84 = _107;
        StorageDead(_107);
        _958 = discriminant(_85);
        _960 = discriminant(_96);
        _946 = const false;
        _947 = const false;
        StorageDead(_96);
        StorageDead(_95);
        StorageDead(_91);
        StorageDead(_88);
        StorageDead(_85);
        StorageDead(_84);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        _939 = const _;
        _118 = &(*_939);
        _117 = &(*_118);
        _116 = move _117 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_117);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        _126 = &_2;
        _125 = &(*_126);
        _124 = core::fmt::rt::Argument::<'_>::new_debug::<handlers::handler_update_vault_config::VaultConfigField>(move _125) -> [return: bb51, unwind: bb406];
    }

    bb49: {
        StorageLive(_104);
        _104 = move ((_85 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_106);
        _106 = move _104;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _106) -> [return: bb50, unwind: bb423];
    }

    bb50: {
        StorageDead(_106);
        StorageDead(_104);
        _1014 = discriminant(_85);
        goto -> bb363;
    }

    bb51: {
        StorageDead(_125);
        _123 = [move _124];
        StorageDead(_124);
        _122 = &_123;
        _121 = &(*_122);
        _120 = move _121 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_121);
        _115 = Arguments::<'_>::new_v1(move _116, move _120) -> [return: bb52, unwind: bb406];
    }

    bb52: {
        StorageDead(_120);
        StorageDead(_116);
        _114 = format(move _115) -> [return: bb53, unwind: bb406];
    }

    bb53: {
        StorageDead(_115);
        StorageDead(_126);
        StorageDead(_123);
        StorageDead(_122);
        StorageDead(_118);
        _113 = move _114;
        StorageDead(_114);
        _112 = &_113;
        _111 = &(*_112);
        _110 = <String as Deref>::deref(move _111) -> [return: bb54, unwind: bb404];
    }

    bb54: {
        _109 = &(*_110);
        StorageDead(_111);
        _108 = solana_program::log::sol_log(move _109) -> [return: bb55, unwind: bb404];
    }

    bb55: {
        StorageDead(_109);
        drop(_113) -> [return: bb56, unwind: bb406];
    }

    bb56: {
        StorageDead(_113);
        StorageDead(_112);
        StorageDead(_110);
        StorageDead(_108);
        StorageLive(_127);
        _128 = discriminant(_2);
        switchInt(move _128) -> [0: bb58, 1: bb82, 2: bb108, 3: bb128, 4: bb154, 5: bb174, 6: bb194, 7: bb214, 8: bb234, 9: bb256, 10: bb276, 11: bb296, 12: bb316, 13: bb57, otherwise: bb6];
    }

    bb57: {
        StorageLive(_854);
        StorageLive(_855);
        StorageLive(_856);
        StorageLive(_857);
        _857 = &(*_3);
        _856 = <u64 as BorshDeserialize>::try_from_slice(move _857) -> [return: bb336, unwind: bb406];
    }

    bb58: {
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        _132 = &(*_3);
        _131 = <u64 as BorshDeserialize>::try_from_slice(move _132) -> [return: bb59, unwind: bb406];
    }

    bb59: {
        StorageDead(_132);
        _130 = <std::result::Result<u64, std::io::Error> as Try>::branch(move _131) -> [return: bb60, unwind: bb406];
    }

    bb60: {
        StorageDead(_131);
        _133 = discriminant(_130);
        switchInt(move _133) -> [0: bb61, 1: bb62, otherwise: bb6];
    }

    bb61: {
        StorageLive(_137);
        _137 = ((_130 as Continue).0: u64);
        _129 = _137;
        StorageDead(_137);
        _962 = discriminant(_130);
        StorageDead(_130);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        _938 = const _;
        _148 = &(*_938);
        _147 = &(*_148);
        _146 = move _147 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_147);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        _158 = &(*_8);
        _157 = <RefMut<'_, state::VaultState> as Deref>::deref(move _158) -> [return: bb64, unwind: bb406];
    }

    bb62: {
        StorageLive(_134);
        _134 = move ((_130 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_136);
        _136 = move _134;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _136) -> [return: bb63, unwind: bb422];
    }

    bb63: {
        StorageDead(_136);
        StorageDead(_134);
        _1012 = discriminant(_130);
        StorageDead(_130);
        goto -> bb361;
    }

    bb64: {
        StorageDead(_158);
        _156 = &((*_157).13: u64);
        _155 = &(*_156);
        _154 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _155) -> [return: bb65, unwind: bb406];
    }

    bb65: {
        StorageDead(_155);
        _153 = [move _154];
        StorageDead(_154);
        _152 = &_153;
        _151 = &(*_152);
        _150 = move _151 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_151);
        _145 = Arguments::<'_>::new_v1(move _146, move _150) -> [return: bb66, unwind: bb406];
    }

    bb66: {
        StorageDead(_150);
        StorageDead(_146);
        _144 = format(move _145) -> [return: bb67, unwind: bb406];
    }

    bb67: {
        StorageDead(_145);
        StorageDead(_157);
        StorageDead(_156);
        StorageDead(_153);
        StorageDead(_152);
        StorageDead(_148);
        _143 = move _144;
        StorageDead(_144);
        _142 = &_143;
        _141 = &(*_142);
        _140 = <String as Deref>::deref(move _141) -> [return: bb68, unwind: bb403];
    }

    bb68: {
        _139 = &(*_140);
        StorageDead(_141);
        _138 = solana_program::log::sol_log(move _139) -> [return: bb69, unwind: bb403];
    }

    bb69: {
        StorageDead(_139);
        drop(_143) -> [return: bb70, unwind: bb406];
    }

    bb70: {
        StorageDead(_143);
        StorageDead(_142);
        StorageDead(_140);
        StorageDead(_138);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        _937 = const _;
        _169 = &(*_937);
        _168 = &(*_169);
        _167 = move _168 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_168);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        _177 = &_129;
        _176 = &(*_177);
        _175 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _176) -> [return: bb71, unwind: bb406];
    }

    bb71: {
        StorageDead(_176);
        _174 = [move _175];
        StorageDead(_175);
        _173 = &_174;
        _172 = &(*_173);
        _171 = move _172 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_172);
        _166 = Arguments::<'_>::new_v1(move _167, move _171) -> [return: bb72, unwind: bb406];
    }

    bb72: {
        StorageDead(_171);
        StorageDead(_167);
        _165 = format(move _166) -> [return: bb73, unwind: bb406];
    }

    bb73: {
        StorageDead(_166);
        StorageDead(_177);
        StorageDead(_174);
        StorageDead(_173);
        StorageDead(_169);
        _164 = move _165;
        StorageDead(_165);
        _163 = &_164;
        _162 = &(*_163);
        _161 = <String as Deref>::deref(move _162) -> [return: bb74, unwind: bb402];
    }

    bb74: {
        _160 = &(*_161);
        StorageDead(_162);
        _159 = solana_program::log::sol_log(move _160) -> [return: bb75, unwind: bb402];
    }

    bb75: {
        StorageDead(_160);
        drop(_164) -> [return: bb76, unwind: bb406];
    }

    bb76: {
        StorageDead(_164);
        StorageDead(_163);
        StorageDead(_161);
        StorageDead(_159);
        StorageLive(_178);
        _178 = <u16 as Into<u64>>::into(const _) -> [return: bb77, unwind: bb406];
    }

    bb77: {
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        _181 = _129;
        StorageLive(_182);
        _182 = _178;
        _180 = Gt(move _181, move _182);
        switchInt(move _180) -> [0: bb80, otherwise: bb78];
    }

    bb78: {
        StorageDead(_182);
        StorageDead(_181);
        StorageLive(_184);
        StorageLive(_185);
        _185 = KaminoVaultError::BPSValueTooBig;
        _184 = <KaminoVaultError as Into<anchor_lang::error::Error>>::into(move _185) -> [return: bb79, unwind: bb406];
    }

    bb79: {
        StorageDead(_185);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _184);
        StorageDead(_184);
        StorageDead(_180);
        StorageDead(_179);
        StorageDead(_178);
        goto -> bb361;
    }

    bb80: {
        StorageDead(_182);
        StorageDead(_181);
        _179 = const ();
        StorageDead(_180);
        StorageDead(_179);
        StorageLive(_186);
        _186 = _129;
        StorageLive(_187);
        StorageLive(_188);
        _188 = &mut (*_8);
        _187 = <RefMut<'_, state::VaultState> as DerefMut>::deref_mut(move _188) -> [return: bb81, unwind: bb406];
    }

    bb81: {
        StorageDead(_188);
        ((*_187).13: u64) = move _186;
        StorageDead(_186);
        StorageDead(_187);
        _127 = const ();
        StorageDead(_178);
        StorageDead(_129);
        goto -> bb355;
    }

    bb82: {
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        _192 = &(*_3);
        _191 = <u64 as BorshDeserialize>::try_from_slice(move _192) -> [return: bb83, unwind: bb406];
    }

    bb83: {
        StorageDead(_192);
        _190 = <std::result::Result<u64, std::io::Error> as Try>::branch(move _191) -> [return: bb84, unwind: bb406];
    }

    bb84: {
        StorageDead(_191);
        _193 = discriminant(_190);
        switchInt(move _193) -> [0: bb85, 1: bb86, otherwise: bb6];
    }

    bb85: {
        StorageLive(_197);
        _197 = ((_190 as Continue).0: u64);
        _189 = _197;
        StorageDead(_197);
        _964 = discriminant(_190);
        StorageDead(_190);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        _200 = _189;
        _199 = Gt(move _200, const _);
        switchInt(move _199) -> [0: bb93, otherwise: bb88];
    }

    bb86: {
        StorageLive(_194);
        _194 = move ((_190 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_196);
        _196 = move _194;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _196) -> [return: bb87, unwind: bb421];
    }

    bb87: {
        StorageDead(_196);
        StorageDead(_194);
        _1010 = discriminant(_190);
        StorageDead(_190);
        goto -> bb360;
    }

    bb88: {
        StorageDead(_200);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        _934 = const _;
        _205 = &(*_934);
        _204 = KaminoVaultError::name(move _205) -> [return: bb89, unwind: bb406];
    }

    bb89: {
        StorageDead(_205);
        StorageLive(_207);
        StorageLive(_208);
        _208 = KaminoVaultError::ManagementFeeGreaterThanMaxAllowed;
        _207 = <KaminoVaultError as Into<u32>>::into(move _208) -> [return: bb90, unwind: bb401];
    }

    bb90: {
        StorageDead(_208);
        StorageLive(_209);
        StorageLive(_210);
        _933 = const _;
        _210 = &(*_933);
        _209 = <KaminoVaultError as ToString>::to_string(move _210) -> [return: bb91, unwind: bb401];
    }

    bb91: {
        StorageDead(_210);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        _214 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\handlers\\handler_update_vault_config.rs", line: const 94_u32 };
        _213 = anchor_lang::error::ErrorOrigin::Source(move _214);
        StorageDead(_214);
        _212 = Option::<ErrorOrigin>::Some(move _213);
        StorageDead(_213);
        StorageLive(_215);
        _215 = Option::<ComparedValues>::None;
        _203 = anchor_lang::error::AnchorError { error_name: move _204, error_code_number: move _207, error_msg: move _209, error_origin: move _212, compared_values: move _215 };
        StorageDead(_215);
        StorageDead(_212);
        StorageDead(_209);
        StorageDead(_207);
        StorageDead(_204);
        _202 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _203) -> [return: bb92, unwind: bb406];
    }

    bb92: {
        StorageDead(_203);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _202);
        StorageDead(_202);
        StorageDead(_199);
        StorageDead(_198);
        goto -> bb360;
    }

    bb93: {
        StorageDead(_200);
        _198 = const ();
        StorageDead(_199);
        StorageDead(_198);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        _936 = const _;
        _226 = &(*_936);
        _225 = &(*_226);
        _224 = move _225 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_225);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        _236 = &(*_8);
        _235 = <RefMut<'_, state::VaultState> as Deref>::deref(move _236) -> [return: bb94, unwind: bb406];
    }

    bb94: {
        StorageDead(_236);
        _234 = &((*_235).14: u64);
        _233 = &(*_234);
        _232 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _233) -> [return: bb95, unwind: bb406];
    }

    bb95: {
        StorageDead(_233);
        _231 = [move _232];
        StorageDead(_232);
        _230 = &_231;
        _229 = &(*_230);
        _228 = move _229 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_229);
        _223 = Arguments::<'_>::new_v1(move _224, move _228) -> [return: bb96, unwind: bb406];
    }

    bb96: {
        StorageDead(_228);
        StorageDead(_224);
        _222 = format(move _223) -> [return: bb97, unwind: bb406];
    }

    bb97: {
        StorageDead(_223);
        StorageDead(_235);
        StorageDead(_234);
        StorageDead(_231);
        StorageDead(_230);
        StorageDead(_226);
        _221 = move _222;
        StorageDead(_222);
        _220 = &_221;
        _219 = &(*_220);
        _218 = <String as Deref>::deref(move _219) -> [return: bb98, unwind: bb400];
    }

    bb98: {
        _217 = &(*_218);
        StorageDead(_219);
        _216 = solana_program::log::sol_log(move _217) -> [return: bb99, unwind: bb400];
    }

    bb99: {
        StorageDead(_217);
        drop(_221) -> [return: bb100, unwind: bb406];
    }

    bb100: {
        StorageDead(_221);
        StorageDead(_220);
        StorageDead(_218);
        StorageDead(_216);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        _935 = const _;
        _247 = &(*_935);
        _246 = &(*_247);
        _245 = move _246 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_246);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        _255 = &_189;
        _254 = &(*_255);
        _253 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _254) -> [return: bb101, unwind: bb406];
    }

    bb101: {
        StorageDead(_254);
        _252 = [move _253];
        StorageDead(_253);
        _251 = &_252;
        _250 = &(*_251);
        _249 = move _250 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_250);
        _244 = Arguments::<'_>::new_v1(move _245, move _249) -> [return: bb102, unwind: bb406];
    }

    bb102: {
        StorageDead(_249);
        StorageDead(_245);
        _243 = format(move _244) -> [return: bb103, unwind: bb406];
    }

    bb103: {
        StorageDead(_244);
        StorageDead(_255);
        StorageDead(_252);
        StorageDead(_251);
        StorageDead(_247);
        _242 = move _243;
        StorageDead(_243);
        _241 = &_242;
        _240 = &(*_241);
        _239 = <String as Deref>::deref(move _240) -> [return: bb104, unwind: bb399];
    }

    bb104: {
        _238 = &(*_239);
        StorageDead(_240);
        _237 = solana_program::log::sol_log(move _238) -> [return: bb105, unwind: bb399];
    }

    bb105: {
        StorageDead(_238);
        drop(_242) -> [return: bb106, unwind: bb406];
    }

    bb106: {
        StorageDead(_242);
        StorageDead(_241);
        StorageDead(_239);
        StorageDead(_237);
        StorageLive(_256);
        _256 = _189;
        StorageLive(_257);
        StorageLive(_258);
        _258 = &mut (*_8);
        _257 = <RefMut<'_, state::VaultState> as DerefMut>::deref_mut(move _258) -> [return: bb107, unwind: bb406];
    }

    bb107: {
        StorageDead(_258);
        ((*_257).14: u64) = move _256;
        StorageDead(_256);
        StorageDead(_257);
        _127 = const ();
        StorageDead(_189);
        goto -> bb355;
    }

    bb108: {
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        _262 = &(*_3);
        _261 = <u64 as BorshDeserialize>::try_from_slice(move _262) -> [return: bb109, unwind: bb406];
    }

    bb109: {
        StorageDead(_262);
        _260 = <std::result::Result<u64, std::io::Error> as Try>::branch(move _261) -> [return: bb110, unwind: bb406];
    }

    bb110: {
        StorageDead(_261);
        _263 = discriminant(_260);
        switchInt(move _263) -> [0: bb111, 1: bb112, otherwise: bb6];
    }

    bb111: {
        StorageLive(_267);
        _267 = ((_260 as Continue).0: u64);
        _259 = _267;
        StorageDead(_267);
        _966 = discriminant(_260);
        StorageDead(_260);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        _932 = const _;
        _278 = &(*_932);
        _277 = &(*_278);
        _276 = move _277 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_277);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        _288 = &(*_8);
        _287 = <RefMut<'_, state::VaultState> as Deref>::deref(move _288) -> [return: bb114, unwind: bb406];
    }

    bb112: {
        StorageLive(_264);
        _264 = move ((_260 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_266);
        _266 = move _264;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _266) -> [return: bb113, unwind: bb420];
    }

    bb113: {
        StorageDead(_266);
        StorageDead(_264);
        _1008 = discriminant(_260);
        StorageDead(_260);
        StorageDead(_259);
        goto -> bb362;
    }

    bb114: {
        StorageDead(_288);
        _286 = &((*_287).20: u64);
        _285 = &(*_286);
        _284 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _285) -> [return: bb115, unwind: bb406];
    }

    bb115: {
        StorageDead(_285);
        _283 = [move _284];
        StorageDead(_284);
        _282 = &_283;
        _281 = &(*_282);
        _280 = move _281 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_281);
        _275 = Arguments::<'_>::new_v1(move _276, move _280) -> [return: bb116, unwind: bb406];
    }

    bb116: {
        StorageDead(_280);
        StorageDead(_276);
        _274 = format(move _275) -> [return: bb117, unwind: bb406];
    }

    bb117: {
        StorageDead(_275);
        StorageDead(_287);
        StorageDead(_286);
        StorageDead(_283);
        StorageDead(_282);
        StorageDead(_278);
        _273 = move _274;
        StorageDead(_274);
        _272 = &_273;
        _271 = &(*_272);
        _270 = <String as Deref>::deref(move _271) -> [return: bb118, unwind: bb398];
    }

    bb118: {
        _269 = &(*_270);
        StorageDead(_271);
        _268 = solana_program::log::sol_log(move _269) -> [return: bb119, unwind: bb398];
    }

    bb119: {
        StorageDead(_269);
        drop(_273) -> [return: bb120, unwind: bb406];
    }

    bb120: {
        StorageDead(_273);
        StorageDead(_272);
        StorageDead(_270);
        StorageDead(_268);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        _931 = const _;
        _299 = &(*_931);
        _298 = &(*_299);
        _297 = move _298 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_298);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        _307 = &_259;
        _306 = &(*_307);
        _305 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _306) -> [return: bb121, unwind: bb406];
    }

    bb121: {
        StorageDead(_306);
        _304 = [move _305];
        StorageDead(_305);
        _303 = &_304;
        _302 = &(*_303);
        _301 = move _302 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_302);
        _296 = Arguments::<'_>::new_v1(move _297, move _301) -> [return: bb122, unwind: bb406];
    }

    bb122: {
        StorageDead(_301);
        StorageDead(_297);
        _295 = format(move _296) -> [return: bb123, unwind: bb406];
    }

    bb123: {
        StorageDead(_296);
        StorageDead(_307);
        StorageDead(_304);
        StorageDead(_303);
        StorageDead(_299);
        _294 = move _295;
        StorageDead(_295);
        _293 = &_294;
        _292 = &(*_293);
        _291 = <String as Deref>::deref(move _292) -> [return: bb124, unwind: bb397];
    }

    bb124: {
        _290 = &(*_291);
        StorageDead(_292);
        _289 = solana_program::log::sol_log(move _290) -> [return: bb125, unwind: bb397];
    }

    bb125: {
        StorageDead(_290);
        drop(_294) -> [return: bb126, unwind: bb406];
    }

    bb126: {
        StorageDead(_294);
        StorageDead(_293);
        StorageDead(_291);
        StorageDead(_289);
        StorageLive(_308);
        _308 = _259;
        StorageLive(_309);
        StorageLive(_310);
        _310 = &mut (*_8);
        _309 = <RefMut<'_, state::VaultState> as DerefMut>::deref_mut(move _310) -> [return: bb127, unwind: bb406];
    }

    bb127: {
        StorageDead(_310);
        ((*_309).20: u64) = move _308;
        StorageDead(_308);
        StorageDead(_309);
        _127 = const ();
        StorageDead(_259);
        goto -> bb355;
    }

    bb128: {
        StorageLive(_311);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        _314 = &(*_3);
        _313 = <u64 as BorshDeserialize>::try_from_slice(move _314) -> [return: bb129, unwind: bb406];
    }

    bb129: {
        StorageDead(_314);
        _312 = <std::result::Result<u64, std::io::Error> as Try>::branch(move _313) -> [return: bb130, unwind: bb406];
    }

    bb130: {
        StorageDead(_313);
        _315 = discriminant(_312);
        switchInt(move _315) -> [0: bb131, 1: bb132, otherwise: bb6];
    }

    bb131: {
        StorageLive(_319);
        _319 = ((_312 as Continue).0: u64);
        _311 = _319;
        StorageDead(_319);
        _968 = discriminant(_312);
        StorageDead(_312);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        _322 = _311;
        _321 = Le(move _322, const _);
        switchInt(move _321) -> [0: bb135, otherwise: bb134];
    }

    bb132: {
        StorageLive(_316);
        _316 = move ((_312 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_318);
        _318 = move _316;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _318) -> [return: bb133, unwind: bb419];
    }

    bb133: {
        StorageDead(_318);
        StorageDead(_316);
        _1006 = discriminant(_312);
        StorageDead(_312);
        goto -> bb359;
    }

    bb134: {
        StorageDead(_322);
        _320 = const ();
        StorageDead(_321);
        StorageDead(_320);
        StorageLive(_338);
        StorageLive(_339);
        StorageLive(_340);
        StorageLive(_341);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        _928 = const _;
        _348 = &(*_928);
        _347 = &(*_348);
        _346 = move _347 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_347);
        StorageLive(_350);
        StorageLive(_351);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        StorageLive(_355);
        StorageLive(_356);
        StorageLive(_357);
        StorageLive(_358);
        _358 = &(*_8);
        _357 = <RefMut<'_, state::VaultState> as Deref>::deref(move _358) -> [return: bb140, unwind: bb406];
    }

    bb135: {
        StorageDead(_322);
        StorageLive(_324);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        _930 = const _;
        _327 = &(*_930);
        _326 = KaminoVaultError::name(move _327) -> [return: bb136, unwind: bb406];
    }

    bb136: {
        StorageDead(_327);
        StorageLive(_329);
        StorageLive(_330);
        _330 = KaminoVaultError::MinWithdrawAmountTooBig;
        _329 = <KaminoVaultError as Into<u32>>::into(move _330) -> [return: bb137, unwind: bb396];
    }

    bb137: {
        StorageDead(_330);
        StorageLive(_331);
        StorageLive(_332);
        _929 = const _;
        _332 = &(*_929);
        _331 = <KaminoVaultError as ToString>::to_string(move _332) -> [return: bb138, unwind: bb396];
    }

    bb138: {
        StorageDead(_332);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        _336 = anchor_lang::error::Source { filename: const "programs\\kvault\\src\\handlers\\handler_update_vault_config.rs", line: const 109_u32 };
        _335 = anchor_lang::error::ErrorOrigin::Source(move _336);
        StorageDead(_336);
        _334 = Option::<ErrorOrigin>::Some(move _335);
        StorageDead(_335);
        StorageLive(_337);
        _337 = Option::<ComparedValues>::None;
        _325 = anchor_lang::error::AnchorError { error_name: move _326, error_code_number: move _329, error_msg: move _331, error_origin: move _334, compared_values: move _337 };
        StorageDead(_337);
        StorageDead(_334);
        StorageDead(_331);
        StorageDead(_329);
        StorageDead(_326);
        _324 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _325) -> [return: bb139, unwind: bb406];
    }

    bb139: {
        StorageDead(_325);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _324);
        StorageDead(_324);
        StorageDead(_321);
        StorageDead(_320);
        goto -> bb359;
    }

    bb140: {
        StorageDead(_358);
        _356 = &((*_357).21: u64);
        _355 = &(*_356);
        _354 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _355) -> [return: bb141, unwind: bb406];
    }

    bb141: {
        StorageDead(_355);
        _353 = [move _354];
        StorageDead(_354);
        _352 = &_353;
        _351 = &(*_352);
        _350 = move _351 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_351);
        _345 = Arguments::<'_>::new_v1(move _346, move _350) -> [return: bb142, unwind: bb406];
    }

    bb142: {
        StorageDead(_350);
        StorageDead(_346);
        _344 = format(move _345) -> [return: bb143, unwind: bb406];
    }

    bb143: {
        StorageDead(_345);
        StorageDead(_357);
        StorageDead(_356);
        StorageDead(_353);
        StorageDead(_352);
        StorageDead(_348);
        _343 = move _344;
        StorageDead(_344);
        _342 = &_343;
        _341 = &(*_342);
        _340 = <String as Deref>::deref(move _341) -> [return: bb144, unwind: bb395];
    }

    bb144: {
        _339 = &(*_340);
        StorageDead(_341);
        _338 = solana_program::log::sol_log(move _339) -> [return: bb145, unwind: bb395];
    }

    bb145: {
        StorageDead(_339);
        drop(_343) -> [return: bb146, unwind: bb406];
    }

    bb146: {
        StorageDead(_343);
        StorageDead(_342);
        StorageDead(_340);
        StorageDead(_338);
        StorageLive(_359);
        StorageLive(_360);
        StorageLive(_361);
        StorageLive(_362);
        StorageLive(_363);
        StorageLive(_364);
        StorageLive(_365);
        StorageLive(_366);
        StorageLive(_367);
        StorageLive(_368);
        StorageLive(_369);
        _927 = const _;
        _369 = &(*_927);
        _368 = &(*_369);
        _367 = move _368 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_368);
        StorageLive(_371);
        StorageLive(_372);
        StorageLive(_373);
        StorageLive(_374);
        StorageLive(_375);
        StorageLive(_376);
        StorageLive(_377);
        _377 = &_311;
        _376 = &(*_377);
        _375 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _376) -> [return: bb147, unwind: bb406];
    }

    bb147: {
        StorageDead(_376);
        _374 = [move _375];
        StorageDead(_375);
        _373 = &_374;
        _372 = &(*_373);
        _371 = move _372 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_372);
        _366 = Arguments::<'_>::new_v1(move _367, move _371) -> [return: bb148, unwind: bb406];
    }

    bb148: {
        StorageDead(_371);
        StorageDead(_367);
        _365 = format(move _366) -> [return: bb149, unwind: bb406];
    }

    bb149: {
        StorageDead(_366);
        StorageDead(_377);
        StorageDead(_374);
        StorageDead(_373);
        StorageDead(_369);
        _364 = move _365;
        StorageDead(_365);
        _363 = &_364;
        _362 = &(*_363);
        _361 = <String as Deref>::deref(move _362) -> [return: bb150, unwind: bb394];
    }

    bb150: {
        _360 = &(*_361);
        StorageDead(_362);
        _359 = solana_program::log::sol_log(move _360) -> [return: bb151, unwind: bb394];
    }

    bb151: {
        StorageDead(_360);
        drop(_364) -> [return: bb152, unwind: bb406];
    }

    bb152: {
        StorageDead(_364);
        StorageDead(_363);
        StorageDead(_361);
        StorageDead(_359);
        StorageLive(_378);
        _378 = _311;
        StorageLive(_379);
        StorageLive(_380);
        _380 = &mut (*_8);
        _379 = <RefMut<'_, state::VaultState> as DerefMut>::deref_mut(move _380) -> [return: bb153, unwind: bb406];
    }

    bb153: {
        StorageDead(_380);
        ((*_379).21: u64) = move _378;
        StorageDead(_378);
        StorageDead(_379);
        _127 = const ();
        StorageDead(_311);
        goto -> bb355;
    }

    bb154: {
        StorageLive(_381);
        StorageLive(_382);
        StorageLive(_383);
        StorageLive(_384);
        _384 = &(*_3);
        _383 = <u64 as BorshDeserialize>::try_from_slice(move _384) -> [return: bb155, unwind: bb406];
    }

    bb155: {
        StorageDead(_384);
        _382 = <std::result::Result<u64, std::io::Error> as Try>::branch(move _383) -> [return: bb156, unwind: bb406];
    }

    bb156: {
        StorageDead(_383);
        _385 = discriminant(_382);
        switchInt(move _385) -> [0: bb157, 1: bb158, otherwise: bb6];
    }

    bb157: {
        StorageLive(_389);
        _389 = ((_382 as Continue).0: u64);
        _381 = _389;
        StorageDead(_389);
        _970 = discriminant(_382);
        StorageDead(_382);
        StorageLive(_390);
        StorageLive(_391);
        StorageLive(_392);
        StorageLive(_393);
        StorageLive(_394);
        StorageLive(_395);
        StorageLive(_396);
        StorageLive(_397);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        _926 = const _;
        _400 = &(*_926);
        _399 = &(*_400);
        _398 = move _399 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_399);
        StorageLive(_402);
        StorageLive(_403);
        StorageLive(_404);
        StorageLive(_405);
        StorageLive(_406);
        StorageLive(_407);
        StorageLive(_408);
        StorageLive(_409);
        StorageLive(_410);
        _410 = &(*_8);
        _409 = <RefMut<'_, state::VaultState> as Deref>::deref(move _410) -> [return: bb160, unwind: bb406];
    }

    bb158: {
        StorageLive(_386);
        _386 = move ((_382 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_388);
        _388 = move _386;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _388) -> [return: bb159, unwind: bb418];
    }

    bb159: {
        StorageDead(_388);
        StorageDead(_386);
        _1004 = discriminant(_382);
        StorageDead(_382);
        StorageDead(_381);
        goto -> bb362;
    }

    bb160: {
        StorageDead(_410);
        _408 = &((*_409).22: u64);
        _407 = &(*_408);
        _406 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _407) -> [return: bb161, unwind: bb406];
    }

    bb161: {
        StorageDead(_407);
        _405 = [move _406];
        StorageDead(_406);
        _404 = &_405;
        _403 = &(*_404);
        _402 = move _403 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_403);
        _397 = Arguments::<'_>::new_v1(move _398, move _402) -> [return: bb162, unwind: bb406];
    }

    bb162: {
        StorageDead(_402);
        StorageDead(_398);
        _396 = format(move _397) -> [return: bb163, unwind: bb406];
    }

    bb163: {
        StorageDead(_397);
        StorageDead(_409);
        StorageDead(_408);
        StorageDead(_405);
        StorageDead(_404);
        StorageDead(_400);
        _395 = move _396;
        StorageDead(_396);
        _394 = &_395;
        _393 = &(*_394);
        _392 = <String as Deref>::deref(move _393) -> [return: bb164, unwind: bb393];
    }

    bb164: {
        _391 = &(*_392);
        StorageDead(_393);
        _390 = solana_program::log::sol_log(move _391) -> [return: bb165, unwind: bb393];
    }

    bb165: {
        StorageDead(_391);
        drop(_395) -> [return: bb166, unwind: bb406];
    }

    bb166: {
        StorageDead(_395);
        StorageDead(_394);
        StorageDead(_392);
        StorageDead(_390);
        StorageLive(_411);
        StorageLive(_412);
        StorageLive(_413);
        StorageLive(_414);
        StorageLive(_415);
        StorageLive(_416);
        StorageLive(_417);
        StorageLive(_418);
        StorageLive(_419);
        StorageLive(_420);
        StorageLive(_421);
        _925 = const _;
        _421 = &(*_925);
        _420 = &(*_421);
        _419 = move _420 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_420);
        StorageLive(_423);
        StorageLive(_424);
        StorageLive(_425);
        StorageLive(_426);
        StorageLive(_427);
        StorageLive(_428);
        StorageLive(_429);
        _429 = &_381;
        _428 = &(*_429);
        _427 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _428) -> [return: bb167, unwind: bb406];
    }

    bb167: {
        StorageDead(_428);
        _426 = [move _427];
        StorageDead(_427);
        _425 = &_426;
        _424 = &(*_425);
        _423 = move _424 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_424);
        _418 = Arguments::<'_>::new_v1(move _419, move _423) -> [return: bb168, unwind: bb406];
    }

    bb168: {
        StorageDead(_423);
        StorageDead(_419);
        _417 = format(move _418) -> [return: bb169, unwind: bb406];
    }

    bb169: {
        StorageDead(_418);
        StorageDead(_429);
        StorageDead(_426);
        StorageDead(_425);
        StorageDead(_421);
        _416 = move _417;
        StorageDead(_417);
        _415 = &_416;
        _414 = &(*_415);
        _413 = <String as Deref>::deref(move _414) -> [return: bb170, unwind: bb392];
    }

    bb170: {
        _412 = &(*_413);
        StorageDead(_414);
        _411 = solana_program::log::sol_log(move _412) -> [return: bb171, unwind: bb392];
    }

    bb171: {
        StorageDead(_412);
        drop(_416) -> [return: bb172, unwind: bb406];
    }

    bb172: {
        StorageDead(_416);
        StorageDead(_415);
        StorageDead(_413);
        StorageDead(_411);
        StorageLive(_430);
        _430 = _381;
        StorageLive(_431);
        StorageLive(_432);
        _432 = &mut (*_8);
        _431 = <RefMut<'_, state::VaultState> as DerefMut>::deref_mut(move _432) -> [return: bb173, unwind: bb406];
    }

    bb173: {
        StorageDead(_432);
        ((*_431).22: u64) = move _430;
        StorageDead(_430);
        StorageDead(_431);
        _127 = const ();
        StorageDead(_381);
        goto -> bb355;
    }

    bb174: {
        StorageLive(_433);
        StorageLive(_434);
        StorageLive(_435);
        StorageLive(_436);
        _436 = &(*_3);
        _435 = <u64 as BorshDeserialize>::try_from_slice(move _436) -> [return: bb175, unwind: bb406];
    }

    bb175: {
        StorageDead(_436);
        _434 = <std::result::Result<u64, std::io::Error> as Try>::branch(move _435) -> [return: bb176, unwind: bb406];
    }

    bb176: {
        StorageDead(_435);
        _437 = discriminant(_434);
        switchInt(move _437) -> [0: bb177, 1: bb178, otherwise: bb6];
    }

    bb177: {
        StorageLive(_441);
        _441 = ((_434 as Continue).0: u64);
        _433 = _441;
        StorageDead(_441);
        _972 = discriminant(_434);
        StorageDead(_434);
        StorageLive(_442);
        StorageLive(_443);
        StorageLive(_444);
        StorageLive(_445);
        StorageLive(_446);
        StorageLive(_447);
        StorageLive(_448);
        StorageLive(_449);
        StorageLive(_450);
        StorageLive(_451);
        StorageLive(_452);
        _924 = const _;
        _452 = &(*_924);
        _451 = &(*_452);
        _450 = move _451 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_451);
        StorageLive(_454);
        StorageLive(_455);
        StorageLive(_456);
        StorageLive(_457);
        StorageLive(_458);
        StorageLive(_459);
        StorageLive(_460);
        StorageLive(_461);
        StorageLive(_462);
        _462 = &(*_8);
        _461 = <RefMut<'_, state::VaultState> as Deref>::deref(move _462) -> [return: bb180, unwind: bb406];
    }

    bb178: {
        StorageLive(_438);
        _438 = move ((_434 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_440);
        _440 = move _438;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _440) -> [return: bb179, unwind: bb417];
    }

    bb179: {
        StorageDead(_440);
        StorageDead(_438);
        _1002 = discriminant(_434);
        StorageDead(_434);
        StorageDead(_433);
        goto -> bb362;
    }

    bb180: {
        StorageDead(_462);
        _460 = &((*_461).23: u64);
        _459 = &(*_460);
        _458 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _459) -> [return: bb181, unwind: bb406];
    }

    bb181: {
        StorageDead(_459);
        _457 = [move _458];
        StorageDead(_458);
        _456 = &_457;
        _455 = &(*_456);
        _454 = move _455 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_455);
        _449 = Arguments::<'_>::new_v1(move _450, move _454) -> [return: bb182, unwind: bb406];
    }

    bb182: {
        StorageDead(_454);
        StorageDead(_450);
        _448 = format(move _449) -> [return: bb183, unwind: bb406];
    }

    bb183: {
        StorageDead(_449);
        StorageDead(_461);
        StorageDead(_460);
        StorageDead(_457);
        StorageDead(_456);
        StorageDead(_452);
        _447 = move _448;
        StorageDead(_448);
        _446 = &_447;
        _445 = &(*_446);
        _444 = <String as Deref>::deref(move _445) -> [return: bb184, unwind: bb391];
    }

    bb184: {
        _443 = &(*_444);
        StorageDead(_445);
        _442 = solana_program::log::sol_log(move _443) -> [return: bb185, unwind: bb391];
    }

    bb185: {
        StorageDead(_443);
        drop(_447) -> [return: bb186, unwind: bb406];
    }

    bb186: {
        StorageDead(_447);
        StorageDead(_446);
        StorageDead(_444);
        StorageDead(_442);
        StorageLive(_463);
        StorageLive(_464);
        StorageLive(_465);
        StorageLive(_466);
        StorageLive(_467);
        StorageLive(_468);
        StorageLive(_469);
        StorageLive(_470);
        StorageLive(_471);
        StorageLive(_472);
        StorageLive(_473);
        _923 = const _;
        _473 = &(*_923);
        _472 = &(*_473);
        _471 = move _472 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_472);
        StorageLive(_475);
        StorageLive(_476);
        StorageLive(_477);
        StorageLive(_478);
        StorageLive(_479);
        StorageLive(_480);
        StorageLive(_481);
        _481 = &_433;
        _480 = &(*_481);
        _479 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _480) -> [return: bb187, unwind: bb406];
    }

    bb187: {
        StorageDead(_480);
        _478 = [move _479];
        StorageDead(_479);
        _477 = &_478;
        _476 = &(*_477);
        _475 = move _476 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_476);
        _470 = Arguments::<'_>::new_v1(move _471, move _475) -> [return: bb188, unwind: bb406];
    }

    bb188: {
        StorageDead(_475);
        StorageDead(_471);
        _469 = format(move _470) -> [return: bb189, unwind: bb406];
    }

    bb189: {
        StorageDead(_470);
        StorageDead(_481);
        StorageDead(_478);
        StorageDead(_477);
        StorageDead(_473);
        _468 = move _469;
        StorageDead(_469);
        _467 = &_468;
        _466 = &(*_467);
        _465 = <String as Deref>::deref(move _466) -> [return: bb190, unwind: bb390];
    }

    bb190: {
        _464 = &(*_465);
        StorageDead(_466);
        _463 = solana_program::log::sol_log(move _464) -> [return: bb191, unwind: bb390];
    }

    bb191: {
        StorageDead(_464);
        drop(_468) -> [return: bb192, unwind: bb406];
    }

    bb192: {
        StorageDead(_468);
        StorageDead(_467);
        StorageDead(_465);
        StorageDead(_463);
        StorageLive(_482);
        _482 = _433;
        StorageLive(_483);
        StorageLive(_484);
        _484 = &mut (*_8);
        _483 = <RefMut<'_, state::VaultState> as DerefMut>::deref_mut(move _484) -> [return: bb193, unwind: bb406];
    }

    bb193: {
        StorageDead(_484);
        ((*_483).23: u64) = move _482;
        StorageDead(_482);
        StorageDead(_483);
        _127 = const ();
        StorageDead(_433);
        goto -> bb355;
    }

    bb194: {
        StorageLive(_485);
        StorageLive(_486);
        StorageLive(_487);
        StorageLive(_488);
        _488 = &(*_3);
        _487 = <u64 as BorshDeserialize>::try_from_slice(move _488) -> [return: bb195, unwind: bb406];
    }

    bb195: {
        StorageDead(_488);
        _486 = <std::result::Result<u64, std::io::Error> as Try>::branch(move _487) -> [return: bb196, unwind: bb406];
    }

    bb196: {
        StorageDead(_487);
        _489 = discriminant(_486);
        switchInt(move _489) -> [0: bb197, 1: bb198, otherwise: bb6];
    }

    bb197: {
        StorageLive(_493);
        _493 = ((_486 as Continue).0: u64);
        _485 = _493;
        StorageDead(_493);
        _974 = discriminant(_486);
        StorageDead(_486);
        StorageLive(_494);
        StorageLive(_495);
        StorageLive(_496);
        StorageLive(_497);
        StorageLive(_498);
        StorageLive(_499);
        StorageLive(_500);
        StorageLive(_501);
        StorageLive(_502);
        StorageLive(_503);
        StorageLive(_504);
        _922 = const _;
        _504 = &(*_922);
        _503 = &(*_504);
        _502 = move _503 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_503);
        StorageLive(_506);
        StorageLive(_507);
        StorageLive(_508);
        StorageLive(_509);
        StorageLive(_510);
        StorageLive(_511);
        StorageLive(_512);
        StorageLive(_513);
        StorageLive(_514);
        _514 = &(*_8);
        _513 = <RefMut<'_, state::VaultState> as Deref>::deref(move _514) -> [return: bb200, unwind: bb406];
    }

    bb198: {
        StorageLive(_490);
        _490 = move ((_486 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_492);
        _492 = move _490;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _492) -> [return: bb199, unwind: bb416];
    }

    bb199: {
        StorageDead(_492);
        StorageDead(_490);
        _1000 = discriminant(_486);
        StorageDead(_486);
        StorageDead(_485);
        goto -> bb362;
    }

    bb200: {
        StorageDead(_514);
        _512 = &((*_513).24: u64);
        _511 = &(*_512);
        _510 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _511) -> [return: bb201, unwind: bb406];
    }

    bb201: {
        StorageDead(_511);
        _509 = [move _510];
        StorageDead(_510);
        _508 = &_509;
        _507 = &(*_508);
        _506 = move _507 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_507);
        _501 = Arguments::<'_>::new_v1(move _502, move _506) -> [return: bb202, unwind: bb406];
    }

    bb202: {
        StorageDead(_506);
        StorageDead(_502);
        _500 = format(move _501) -> [return: bb203, unwind: bb406];
    }

    bb203: {
        StorageDead(_501);
        StorageDead(_513);
        StorageDead(_512);
        StorageDead(_509);
        StorageDead(_508);
        StorageDead(_504);
        _499 = move _500;
        StorageDead(_500);
        _498 = &_499;
        _497 = &(*_498);
        _496 = <String as Deref>::deref(move _497) -> [return: bb204, unwind: bb389];
    }

    bb204: {
        _495 = &(*_496);
        StorageDead(_497);
        _494 = solana_program::log::sol_log(move _495) -> [return: bb205, unwind: bb389];
    }

    bb205: {
        StorageDead(_495);
        drop(_499) -> [return: bb206, unwind: bb406];
    }

    bb206: {
        StorageDead(_499);
        StorageDead(_498);
        StorageDead(_496);
        StorageDead(_494);
        StorageLive(_515);
        StorageLive(_516);
        StorageLive(_517);
        StorageLive(_518);
        StorageLive(_519);
        StorageLive(_520);
        StorageLive(_521);
        StorageLive(_522);
        StorageLive(_523);
        StorageLive(_524);
        StorageLive(_525);
        _921 = const _;
        _525 = &(*_921);
        _524 = &(*_525);
        _523 = move _524 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_524);
        StorageLive(_527);
        StorageLive(_528);
        StorageLive(_529);
        StorageLive(_530);
        StorageLive(_531);
        StorageLive(_532);
        StorageLive(_533);
        _533 = &_485;
        _532 = &(*_533);
        _531 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _532) -> [return: bb207, unwind: bb406];
    }

    bb207: {
        StorageDead(_532);
        _530 = [move _531];
        StorageDead(_531);
        _529 = &_530;
        _528 = &(*_529);
        _527 = move _528 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_528);
        _522 = Arguments::<'_>::new_v1(move _523, move _527) -> [return: bb208, unwind: bb406];
    }

    bb208: {
        StorageDead(_527);
        StorageDead(_523);
        _521 = format(move _522) -> [return: bb209, unwind: bb406];
    }

    bb209: {
        StorageDead(_522);
        StorageDead(_533);
        StorageDead(_530);
        StorageDead(_529);
        StorageDead(_525);
        _520 = move _521;
        StorageDead(_521);
        _519 = &_520;
        _518 = &(*_519);
        _517 = <String as Deref>::deref(move _518) -> [return: bb210, unwind: bb388];
    }

    bb210: {
        _516 = &(*_517);
        StorageDead(_518);
        _515 = solana_program::log::sol_log(move _516) -> [return: bb211, unwind: bb388];
    }

    bb211: {
        StorageDead(_516);
        drop(_520) -> [return: bb212, unwind: bb406];
    }

    bb212: {
        StorageDead(_520);
        StorageDead(_519);
        StorageDead(_517);
        StorageDead(_515);
        StorageLive(_534);
        _534 = _485;
        StorageLive(_535);
        StorageLive(_536);
        _536 = &mut (*_8);
        _535 = <RefMut<'_, state::VaultState> as DerefMut>::deref_mut(move _536) -> [return: bb213, unwind: bb406];
    }

    bb213: {
        StorageDead(_536);
        ((*_535).24: u64) = move _534;
        StorageDead(_534);
        StorageDead(_535);
        _127 = const ();
        StorageDead(_485);
        goto -> bb355;
    }

    bb214: {
        StorageLive(_537);
        StorageLive(_538);
        StorageLive(_539);
        StorageLive(_540);
        _540 = &(*_3);
        _539 = <anchor_lang::prelude::Pubkey as BorshDeserialize>::try_from_slice(move _540) -> [return: bb215, unwind: bb406];
    }

    bb215: {
        StorageDead(_540);
        _538 = <std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error> as Try>::branch(move _539) -> [return: bb216, unwind: bb406];
    }

    bb216: {
        StorageDead(_539);
        _541 = discriminant(_538);
        switchInt(move _541) -> [0: bb217, 1: bb218, otherwise: bb6];
    }

    bb217: {
        StorageLive(_545);
        _545 = ((_538 as Continue).0: anchor_lang::prelude::Pubkey);
        _537 = _545;
        StorageDead(_545);
        _976 = discriminant(_538);
        StorageDead(_538);
        StorageLive(_546);
        StorageLive(_547);
        StorageLive(_548);
        StorageLive(_549);
        StorageLive(_550);
        StorageLive(_551);
        StorageLive(_552);
        StorageLive(_553);
        StorageLive(_554);
        StorageLive(_555);
        StorageLive(_556);
        _920 = const _;
        _556 = &(*_920);
        _555 = &(*_556);
        _554 = move _555 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_555);
        StorageLive(_558);
        StorageLive(_559);
        StorageLive(_560);
        StorageLive(_561);
        StorageLive(_562);
        StorageLive(_563);
        StorageLive(_564);
        StorageLive(_565);
        StorageLive(_566);
        _566 = &(*_8);
        _565 = <RefMut<'_, state::VaultState> as Deref>::deref(move _566) -> [return: bb220, unwind: bb406];
    }

    bb218: {
        StorageLive(_542);
        _542 = move ((_538 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_544);
        _544 = move _542;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _544) -> [return: bb219, unwind: bb415];
    }

    bb219: {
        StorageDead(_544);
        StorageDead(_542);
        _998 = discriminant(_538);
        StorageDead(_538);
        StorageDead(_537);
        goto -> bb362;
    }

    bb220: {
        StorageDead(_566);
        _564 = &((*_565).25: anchor_lang::prelude::Pubkey);
        _563 = &(*_564);
        _562 = core::fmt::rt::Argument::<'_>::new_debug::<anchor_lang::prelude::Pubkey>(move _563) -> [return: bb221, unwind: bb406];
    }

    bb221: {
        StorageDead(_563);
        _561 = [move _562];
        StorageDead(_562);
        _560 = &_561;
        _559 = &(*_560);
        _558 = move _559 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_559);
        _553 = Arguments::<'_>::new_v1(move _554, move _558) -> [return: bb222, unwind: bb406];
    }

    bb222: {
        StorageDead(_558);
        StorageDead(_554);
        _552 = format(move _553) -> [return: bb223, unwind: bb406];
    }

    bb223: {
        StorageDead(_553);
        StorageDead(_565);
        StorageDead(_564);
        StorageDead(_561);
        StorageDead(_560);
        StorageDead(_556);
        _551 = move _552;
        StorageDead(_552);
        _550 = &_551;
        _549 = &(*_550);
        _548 = <String as Deref>::deref(move _549) -> [return: bb224, unwind: bb387];
    }

    bb224: {
        _547 = &(*_548);
        StorageDead(_549);
        _546 = solana_program::log::sol_log(move _547) -> [return: bb225, unwind: bb387];
    }

    bb225: {
        StorageDead(_547);
        drop(_551) -> [return: bb226, unwind: bb406];
    }

    bb226: {
        StorageDead(_551);
        StorageDead(_550);
        StorageDead(_548);
        StorageDead(_546);
        StorageLive(_567);
        StorageLive(_568);
        StorageLive(_569);
        StorageLive(_570);
        StorageLive(_571);
        StorageLive(_572);
        StorageLive(_573);
        StorageLive(_574);
        StorageLive(_575);
        StorageLive(_576);
        StorageLive(_577);
        _919 = const _;
        _577 = &(*_919);
        _576 = &(*_577);
        _575 = move _576 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_576);
        StorageLive(_579);
        StorageLive(_580);
        StorageLive(_581);
        StorageLive(_582);
        StorageLive(_583);
        StorageLive(_584);
        StorageLive(_585);
        _585 = &_537;
        _584 = &(*_585);
        _583 = core::fmt::rt::Argument::<'_>::new_debug::<anchor_lang::prelude::Pubkey>(move _584) -> [return: bb227, unwind: bb406];
    }

    bb227: {
        StorageDead(_584);
        _582 = [move _583];
        StorageDead(_583);
        _581 = &_582;
        _580 = &(*_581);
        _579 = move _580 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_580);
        _574 = Arguments::<'_>::new_v1(move _575, move _579) -> [return: bb228, unwind: bb406];
    }

    bb228: {
        StorageDead(_579);
        StorageDead(_575);
        _573 = format(move _574) -> [return: bb229, unwind: bb406];
    }

    bb229: {
        StorageDead(_574);
        StorageDead(_585);
        StorageDead(_582);
        StorageDead(_581);
        StorageDead(_577);
        _572 = move _573;
        StorageDead(_573);
        _571 = &_572;
        _570 = &(*_571);
        _569 = <String as Deref>::deref(move _570) -> [return: bb230, unwind: bb386];
    }

    bb230: {
        _568 = &(*_569);
        StorageDead(_570);
        _567 = solana_program::log::sol_log(move _568) -> [return: bb231, unwind: bb386];
    }

    bb231: {
        StorageDead(_568);
        drop(_572) -> [return: bb232, unwind: bb406];
    }

    bb232: {
        StorageDead(_572);
        StorageDead(_571);
        StorageDead(_569);
        StorageDead(_567);
        StorageLive(_586);
        _586 = _537;
        StorageLive(_587);
        StorageLive(_588);
        _588 = &mut (*_8);
        _587 = <RefMut<'_, state::VaultState> as DerefMut>::deref_mut(move _588) -> [return: bb233, unwind: bb406];
    }

    bb233: {
        StorageDead(_588);
        ((*_587).25: anchor_lang::prelude::Pubkey) = move _586;
        StorageDead(_586);
        StorageDead(_587);
        _127 = const ();
        StorageDead(_537);
        goto -> bb355;
    }

    bb234: {
        StorageLive(_589);
        StorageLive(_590);
        _590 = &(*_3);
        StorageLive(_591);
        StorageLive(_592);
        StorageLive(_593);
        _593 = &(*_8);
        _592 = <RefMut<'_, state::VaultState> as Deref>::deref(move _593) -> [return: bb235, unwind: bb406];
    }

    bb235: {
        StorageDead(_593);
        _591 = ((*_592).3: anchor_lang::prelude::Pubkey);
        _589 = encoded_name_to_label(move _590, move _591) -> [return: bb236, unwind: bb406];
    }

    bb236: {
        StorageDead(_591);
        StorageDead(_590);
        StorageDead(_592);
        StorageLive(_594);
        StorageLive(_595);
        StorageLive(_596);
        StorageLive(_597);
        StorageLive(_598);
        StorageLive(_599);
        StorageLive(_600);
        StorageLive(_601);
        StorageLive(_602);
        StorageLive(_603);
        StorageLive(_604);
        _918 = const _;
        _604 = &(*_918);
        _603 = &(*_604);
        _602 = move _603 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_603);
        StorageLive(_606);
        StorageLive(_607);
        StorageLive(_608);
        StorageLive(_609);
        StorageLive(_610);
        StorageLive(_611);
        StorageLive(_612);
        StorageLive(_613);
        StorageLive(_614);
        StorageLive(_615);
        StorageLive(_616);
        StorageLive(_617);
        StorageLive(_618);
        _618 = &(*_8);
        _617 = <RefMut<'_, state::VaultState> as Deref>::deref(move _618) -> [return: bb237, unwind: bb385];
    }

    bb237: {
        StorageDead(_618);
        _616 = &((*_617).29: [u8; 40]);
        _615 = &(*_616);
        _614 = move _615 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_615);
        StorageLive(_619);
        StorageLive(_620);
        StorageLive(_621);
        _621 = &(*_8);
        _620 = <RefMut<'_, state::VaultState> as Deref>::deref(move _621) -> [return: bb238, unwind: bb385];
    }

    bb238: {
        StorageDead(_621);
        _619 = ((*_620).3: anchor_lang::prelude::Pubkey);
        _613 = encoded_name_to_label(move _614, move _619) -> [return: bb239, unwind: bb385];
    }

    bb239: {
        StorageDead(_619);
        StorageDead(_614);
        _612 = &_613;
        _611 = &(*_612);
        _610 = core::fmt::rt::Argument::<'_>::new_debug::<String>(move _611) -> [return: bb240, unwind: bb384];
    }

    bb240: {
        StorageDead(_611);
        _609 = [move _610];
        StorageDead(_610);
        _608 = &_609;
        _607 = &(*_608);
        _606 = move _607 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_607);
        _601 = Arguments::<'_>::new_v1(move _602, move _606) -> [return: bb241, unwind: bb384];
    }

    bb241: {
        StorageDead(_606);
        StorageDead(_602);
        _600 = format(move _601) -> [return: bb242, unwind: bb384];
    }

    bb242: {
        StorageDead(_601);
        drop(_613) -> [return: bb243, unwind: bb383];
    }

    bb243: {
        StorageDead(_620);
        StorageDead(_617);
        StorageDead(_616);
        StorageDead(_613);
        StorageDead(_612);
        StorageDead(_609);
        StorageDead(_608);
        StorageDead(_604);
        _599 = move _600;
        StorageDead(_600);
        _598 = &_599;
        _597 = &(*_598);
        _596 = <String as Deref>::deref(move _597) -> [return: bb244, unwind: bb382];
    }

    bb244: {
        _595 = &(*_596);
        StorageDead(_597);
        _594 = solana_program::log::sol_log(move _595) -> [return: bb245, unwind: bb382];
    }

    bb245: {
        StorageDead(_595);
        drop(_599) -> [return: bb246, unwind: bb385];
    }

    bb246: {
        StorageDead(_599);
        StorageDead(_598);
        StorageDead(_596);
        StorageDead(_594);
        StorageLive(_622);
        StorageLive(_623);
        StorageLive(_624);
        StorageLive(_625);
        StorageLive(_626);
        StorageLive(_627);
        StorageLive(_628);
        StorageLive(_629);
        StorageLive(_630);
        StorageLive(_631);
        StorageLive(_632);
        _917 = const _;
        _632 = &(*_917);
        _631 = &(*_632);
        _630 = move _631 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_631);
        StorageLive(_634);
        StorageLive(_635);
        StorageLive(_636);
        StorageLive(_637);
        StorageLive(_638);
        StorageLive(_639);
        StorageLive(_640);
        _640 = &_589;
        _639 = &(*_640);
        _638 = core::fmt::rt::Argument::<'_>::new_debug::<String>(move _639) -> [return: bb247, unwind: bb385];
    }

    bb247: {
        StorageDead(_639);
        _637 = [move _638];
        StorageDead(_638);
        _636 = &_637;
        _635 = &(*_636);
        _634 = move _635 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_635);
        _629 = Arguments::<'_>::new_v1(move _630, move _634) -> [return: bb248, unwind: bb385];
    }

    bb248: {
        StorageDead(_634);
        StorageDead(_630);
        _628 = format(move _629) -> [return: bb249, unwind: bb385];
    }

    bb249: {
        StorageDead(_629);
        StorageDead(_640);
        StorageDead(_637);
        StorageDead(_636);
        StorageDead(_632);
        _627 = move _628;
        StorageDead(_628);
        _626 = &_627;
        _625 = &(*_626);
        _624 = <String as Deref>::deref(move _625) -> [return: bb250, unwind: bb381];
    }

    bb250: {
        _623 = &(*_624);
        StorageDead(_625);
        _622 = solana_program::log::sol_log(move _623) -> [return: bb251, unwind: bb381];
    }

    bb251: {
        StorageDead(_623);
        drop(_627) -> [return: bb252, unwind: bb385];
    }

    bb252: {
        StorageDead(_627);
        StorageDead(_626);
        StorageDead(_624);
        StorageDead(_622);
        StorageLive(_641);
        StorageLive(_642);
        _642 = &(*_3);
        _641 = slice_to_array_padded(move _642) -> [return: bb253, unwind: bb385];
    }

    bb253: {
        StorageDead(_642);
        StorageLive(_643);
        _643 = _641;
        StorageLive(_644);
        StorageLive(_645);
        _645 = &mut (*_8);
        _644 = <RefMut<'_, state::VaultState> as DerefMut>::deref_mut(move _645) -> [return: bb254, unwind: bb385];
    }

    bb254: {
        StorageDead(_645);
        ((*_644).29: [u8; 40]) = move _643;
        StorageDead(_643);
        StorageDead(_644);
        _127 = const ();
        StorageDead(_641);
        drop(_589) -> [return: bb255, unwind: bb406];
    }

    bb255: {
        StorageDead(_589);
        goto -> bb355;
    }

    bb256: {
        StorageLive(_646);
        StorageLive(_647);
        StorageLive(_648);
        StorageLive(_649);
        _649 = &(*_3);
        _648 = <anchor_lang::prelude::Pubkey as BorshDeserialize>::try_from_slice(move _649) -> [return: bb257, unwind: bb406];
    }

    bb257: {
        StorageDead(_649);
        _647 = <std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error> as Try>::branch(move _648) -> [return: bb258, unwind: bb406];
    }

    bb258: {
        StorageDead(_648);
        _650 = discriminant(_647);
        switchInt(move _650) -> [0: bb259, 1: bb260, otherwise: bb6];
    }

    bb259: {
        StorageLive(_654);
        _654 = ((_647 as Continue).0: anchor_lang::prelude::Pubkey);
        _646 = _654;
        StorageDead(_654);
        _978 = discriminant(_647);
        StorageDead(_647);
        StorageLive(_655);
        StorageLive(_656);
        StorageLive(_657);
        StorageLive(_658);
        StorageLive(_659);
        StorageLive(_660);
        StorageLive(_661);
        StorageLive(_662);
        StorageLive(_663);
        StorageLive(_664);
        StorageLive(_665);
        _916 = const _;
        _665 = &(*_916);
        _664 = &(*_665);
        _663 = move _664 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_664);
        StorageLive(_667);
        StorageLive(_668);
        StorageLive(_669);
        StorageLive(_670);
        StorageLive(_671);
        StorageLive(_672);
        StorageLive(_673);
        StorageLive(_674);
        StorageLive(_675);
        _675 = &(*_8);
        _674 = <RefMut<'_, state::VaultState> as Deref>::deref(move _675) -> [return: bb262, unwind: bb406];
    }

    bb260: {
        StorageLive(_651);
        _651 = move ((_647 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_653);
        _653 = move _651;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _653) -> [return: bb261, unwind: bb414];
    }

    bb261: {
        StorageDead(_653);
        StorageDead(_651);
        _996 = discriminant(_647);
        StorageDead(_647);
        StorageDead(_646);
        goto -> bb362;
    }

    bb262: {
        StorageDead(_675);
        _673 = &((*_674).30: anchor_lang::prelude::Pubkey);
        _672 = &(*_673);
        _671 = core::fmt::rt::Argument::<'_>::new_debug::<anchor_lang::prelude::Pubkey>(move _672) -> [return: bb263, unwind: bb406];
    }

    bb263: {
        StorageDead(_672);
        _670 = [move _671];
        StorageDead(_671);
        _669 = &_670;
        _668 = &(*_669);
        _667 = move _668 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_668);
        _662 = Arguments::<'_>::new_v1(move _663, move _667) -> [return: bb264, unwind: bb406];
    }

    bb264: {
        StorageDead(_667);
        StorageDead(_663);
        _661 = format(move _662) -> [return: bb265, unwind: bb406];
    }

    bb265: {
        StorageDead(_662);
        StorageDead(_674);
        StorageDead(_673);
        StorageDead(_670);
        StorageDead(_669);
        StorageDead(_665);
        _660 = move _661;
        StorageDead(_661);
        _659 = &_660;
        _658 = &(*_659);
        _657 = <String as Deref>::deref(move _658) -> [return: bb266, unwind: bb380];
    }

    bb266: {
        _656 = &(*_657);
        StorageDead(_658);
        _655 = solana_program::log::sol_log(move _656) -> [return: bb267, unwind: bb380];
    }

    bb267: {
        StorageDead(_656);
        drop(_660) -> [return: bb268, unwind: bb406];
    }

    bb268: {
        StorageDead(_660);
        StorageDead(_659);
        StorageDead(_657);
        StorageDead(_655);
        StorageLive(_676);
        StorageLive(_677);
        StorageLive(_678);
        StorageLive(_679);
        StorageLive(_680);
        StorageLive(_681);
        StorageLive(_682);
        StorageLive(_683);
        StorageLive(_684);
        StorageLive(_685);
        StorageLive(_686);
        _915 = const _;
        _686 = &(*_915);
        _685 = &(*_686);
        _684 = move _685 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_685);
        StorageLive(_688);
        StorageLive(_689);
        StorageLive(_690);
        StorageLive(_691);
        StorageLive(_692);
        StorageLive(_693);
        StorageLive(_694);
        _694 = &_646;
        _693 = &(*_694);
        _692 = core::fmt::rt::Argument::<'_>::new_debug::<anchor_lang::prelude::Pubkey>(move _693) -> [return: bb269, unwind: bb406];
    }

    bb269: {
        StorageDead(_693);
        _691 = [move _692];
        StorageDead(_692);
        _690 = &_691;
        _689 = &(*_690);
        _688 = move _689 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_689);
        _683 = Arguments::<'_>::new_v1(move _684, move _688) -> [return: bb270, unwind: bb406];
    }

    bb270: {
        StorageDead(_688);
        StorageDead(_684);
        _682 = format(move _683) -> [return: bb271, unwind: bb406];
    }

    bb271: {
        StorageDead(_683);
        StorageDead(_694);
        StorageDead(_691);
        StorageDead(_690);
        StorageDead(_686);
        _681 = move _682;
        StorageDead(_682);
        _680 = &_681;
        _679 = &(*_680);
        _678 = <String as Deref>::deref(move _679) -> [return: bb272, unwind: bb379];
    }

    bb272: {
        _677 = &(*_678);
        StorageDead(_679);
        _676 = solana_program::log::sol_log(move _677) -> [return: bb273, unwind: bb379];
    }

    bb273: {
        StorageDead(_677);
        drop(_681) -> [return: bb274, unwind: bb406];
    }

    bb274: {
        StorageDead(_681);
        StorageDead(_680);
        StorageDead(_678);
        StorageDead(_676);
        StorageLive(_695);
        _695 = _646;
        StorageLive(_696);
        StorageLive(_697);
        _697 = &mut (*_8);
        _696 = <RefMut<'_, state::VaultState> as DerefMut>::deref_mut(move _697) -> [return: bb275, unwind: bb406];
    }

    bb275: {
        StorageDead(_697);
        ((*_696).30: anchor_lang::prelude::Pubkey) = move _695;
        StorageDead(_695);
        StorageDead(_696);
        _127 = const ();
        StorageDead(_646);
        goto -> bb355;
    }

    bb276: {
        StorageLive(_698);
        StorageLive(_699);
        StorageLive(_700);
        StorageLive(_701);
        _701 = &(*_3);
        _700 = <anchor_lang::prelude::Pubkey as BorshDeserialize>::try_from_slice(move _701) -> [return: bb277, unwind: bb406];
    }

    bb277: {
        StorageDead(_701);
        _699 = <std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error> as Try>::branch(move _700) -> [return: bb278, unwind: bb406];
    }

    bb278: {
        StorageDead(_700);
        _702 = discriminant(_699);
        switchInt(move _702) -> [0: bb279, 1: bb280, otherwise: bb6];
    }

    bb279: {
        StorageLive(_706);
        _706 = ((_699 as Continue).0: anchor_lang::prelude::Pubkey);
        _698 = _706;
        StorageDead(_706);
        _980 = discriminant(_699);
        StorageDead(_699);
        StorageLive(_707);
        StorageLive(_708);
        StorageLive(_709);
        StorageLive(_710);
        StorageLive(_711);
        StorageLive(_712);
        StorageLive(_713);
        StorageLive(_714);
        StorageLive(_715);
        StorageLive(_716);
        StorageLive(_717);
        _914 = const _;
        _717 = &(*_914);
        _716 = &(*_717);
        _715 = move _716 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_716);
        StorageLive(_719);
        StorageLive(_720);
        StorageLive(_721);
        StorageLive(_722);
        StorageLive(_723);
        StorageLive(_724);
        StorageLive(_725);
        StorageLive(_726);
        StorageLive(_727);
        _727 = &(*_8);
        _726 = <RefMut<'_, state::VaultState> as Deref>::deref(move _727) -> [return: bb282, unwind: bb406];
    }

    bb280: {
        StorageLive(_703);
        _703 = move ((_699 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_705);
        _705 = move _703;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _705) -> [return: bb281, unwind: bb413];
    }

    bb281: {
        StorageDead(_705);
        StorageDead(_703);
        _994 = discriminant(_699);
        StorageDead(_699);
        StorageDead(_698);
        goto -> bb362;
    }

    bb282: {
        StorageDead(_727);
        _725 = &((*_726).31: anchor_lang::prelude::Pubkey);
        _724 = &(*_725);
        _723 = core::fmt::rt::Argument::<'_>::new_debug::<anchor_lang::prelude::Pubkey>(move _724) -> [return: bb283, unwind: bb406];
    }

    bb283: {
        StorageDead(_724);
        _722 = [move _723];
        StorageDead(_723);
        _721 = &_722;
        _720 = &(*_721);
        _719 = move _720 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_720);
        _714 = Arguments::<'_>::new_v1(move _715, move _719) -> [return: bb284, unwind: bb406];
    }

    bb284: {
        StorageDead(_719);
        StorageDead(_715);
        _713 = format(move _714) -> [return: bb285, unwind: bb406];
    }

    bb285: {
        StorageDead(_714);
        StorageDead(_726);
        StorageDead(_725);
        StorageDead(_722);
        StorageDead(_721);
        StorageDead(_717);
        _712 = move _713;
        StorageDead(_713);
        _711 = &_712;
        _710 = &(*_711);
        _709 = <String as Deref>::deref(move _710) -> [return: bb286, unwind: bb378];
    }

    bb286: {
        _708 = &(*_709);
        StorageDead(_710);
        _707 = solana_program::log::sol_log(move _708) -> [return: bb287, unwind: bb378];
    }

    bb287: {
        StorageDead(_708);
        drop(_712) -> [return: bb288, unwind: bb406];
    }

    bb288: {
        StorageDead(_712);
        StorageDead(_711);
        StorageDead(_709);
        StorageDead(_707);
        StorageLive(_728);
        StorageLive(_729);
        StorageLive(_730);
        StorageLive(_731);
        StorageLive(_732);
        StorageLive(_733);
        StorageLive(_734);
        StorageLive(_735);
        StorageLive(_736);
        StorageLive(_737);
        StorageLive(_738);
        _913 = const _;
        _738 = &(*_913);
        _737 = &(*_738);
        _736 = move _737 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_737);
        StorageLive(_740);
        StorageLive(_741);
        StorageLive(_742);
        StorageLive(_743);
        StorageLive(_744);
        StorageLive(_745);
        StorageLive(_746);
        _746 = &_698;
        _745 = &(*_746);
        _744 = core::fmt::rt::Argument::<'_>::new_debug::<anchor_lang::prelude::Pubkey>(move _745) -> [return: bb289, unwind: bb406];
    }

    bb289: {
        StorageDead(_745);
        _743 = [move _744];
        StorageDead(_744);
        _742 = &_743;
        _741 = &(*_742);
        _740 = move _741 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_741);
        _735 = Arguments::<'_>::new_v1(move _736, move _740) -> [return: bb290, unwind: bb406];
    }

    bb290: {
        StorageDead(_740);
        StorageDead(_736);
        _734 = format(move _735) -> [return: bb291, unwind: bb406];
    }

    bb291: {
        StorageDead(_735);
        StorageDead(_746);
        StorageDead(_743);
        StorageDead(_742);
        StorageDead(_738);
        _733 = move _734;
        StorageDead(_734);
        _732 = &_733;
        _731 = &(*_732);
        _730 = <String as Deref>::deref(move _731) -> [return: bb292, unwind: bb377];
    }

    bb292: {
        _729 = &(*_730);
        StorageDead(_731);
        _728 = solana_program::log::sol_log(move _729) -> [return: bb293, unwind: bb377];
    }

    bb293: {
        StorageDead(_729);
        drop(_733) -> [return: bb294, unwind: bb406];
    }

    bb294: {
        StorageDead(_733);
        StorageDead(_732);
        StorageDead(_730);
        StorageDead(_728);
        StorageLive(_747);
        _747 = _698;
        StorageLive(_748);
        StorageLive(_749);
        _749 = &mut (*_8);
        _748 = <RefMut<'_, state::VaultState> as DerefMut>::deref_mut(move _749) -> [return: bb295, unwind: bb406];
    }

    bb295: {
        StorageDead(_749);
        ((*_748).31: anchor_lang::prelude::Pubkey) = move _747;
        StorageDead(_747);
        StorageDead(_748);
        _127 = const ();
        StorageDead(_698);
        goto -> bb355;
    }

    bb296: {
        StorageLive(_750);
        StorageLive(_751);
        StorageLive(_752);
        StorageLive(_753);
        _753 = &(*_3);
        _752 = <anchor_lang::prelude::Pubkey as BorshDeserialize>::try_from_slice(move _753) -> [return: bb297, unwind: bb406];
    }

    bb297: {
        StorageDead(_753);
        _751 = <std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error> as Try>::branch(move _752) -> [return: bb298, unwind: bb406];
    }

    bb298: {
        StorageDead(_752);
        _754 = discriminant(_751);
        switchInt(move _754) -> [0: bb299, 1: bb300, otherwise: bb6];
    }

    bb299: {
        StorageLive(_758);
        _758 = ((_751 as Continue).0: anchor_lang::prelude::Pubkey);
        _750 = _758;
        StorageDead(_758);
        _982 = discriminant(_751);
        StorageDead(_751);
        StorageLive(_759);
        StorageLive(_760);
        StorageLive(_761);
        StorageLive(_762);
        StorageLive(_763);
        StorageLive(_764);
        StorageLive(_765);
        StorageLive(_766);
        StorageLive(_767);
        StorageLive(_768);
        StorageLive(_769);
        _912 = const _;
        _769 = &(*_912);
        _768 = &(*_769);
        _767 = move _768 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_768);
        StorageLive(_771);
        StorageLive(_772);
        StorageLive(_773);
        StorageLive(_774);
        StorageLive(_775);
        StorageLive(_776);
        StorageLive(_777);
        StorageLive(_778);
        StorageLive(_779);
        _779 = &(*_8);
        _778 = <RefMut<'_, state::VaultState> as Deref>::deref(move _779) -> [return: bb302, unwind: bb406];
    }

    bb300: {
        StorageLive(_755);
        _755 = move ((_751 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_757);
        _757 = move _755;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _757) -> [return: bb301, unwind: bb412];
    }

    bb301: {
        StorageDead(_757);
        StorageDead(_755);
        _992 = discriminant(_751);
        StorageDead(_751);
        StorageDead(_750);
        goto -> bb362;
    }

    bb302: {
        StorageDead(_779);
        _777 = &((*_778).34: anchor_lang::prelude::Pubkey);
        _776 = &(*_777);
        _775 = core::fmt::rt::Argument::<'_>::new_debug::<anchor_lang::prelude::Pubkey>(move _776) -> [return: bb303, unwind: bb406];
    }

    bb303: {
        StorageDead(_776);
        _774 = [move _775];
        StorageDead(_775);
        _773 = &_774;
        _772 = &(*_773);
        _771 = move _772 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_772);
        _766 = Arguments::<'_>::new_v1(move _767, move _771) -> [return: bb304, unwind: bb406];
    }

    bb304: {
        StorageDead(_771);
        StorageDead(_767);
        _765 = format(move _766) -> [return: bb305, unwind: bb406];
    }

    bb305: {
        StorageDead(_766);
        StorageDead(_778);
        StorageDead(_777);
        StorageDead(_774);
        StorageDead(_773);
        StorageDead(_769);
        _764 = move _765;
        StorageDead(_765);
        _763 = &_764;
        _762 = &(*_763);
        _761 = <String as Deref>::deref(move _762) -> [return: bb306, unwind: bb376];
    }

    bb306: {
        _760 = &(*_761);
        StorageDead(_762);
        _759 = solana_program::log::sol_log(move _760) -> [return: bb307, unwind: bb376];
    }

    bb307: {
        StorageDead(_760);
        drop(_764) -> [return: bb308, unwind: bb406];
    }

    bb308: {
        StorageDead(_764);
        StorageDead(_763);
        StorageDead(_761);
        StorageDead(_759);
        StorageLive(_780);
        StorageLive(_781);
        StorageLive(_782);
        StorageLive(_783);
        StorageLive(_784);
        StorageLive(_785);
        StorageLive(_786);
        StorageLive(_787);
        StorageLive(_788);
        StorageLive(_789);
        StorageLive(_790);
        _911 = const _;
        _790 = &(*_911);
        _789 = &(*_790);
        _788 = move _789 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_789);
        StorageLive(_792);
        StorageLive(_793);
        StorageLive(_794);
        StorageLive(_795);
        StorageLive(_796);
        StorageLive(_797);
        StorageLive(_798);
        _798 = &_750;
        _797 = &(*_798);
        _796 = core::fmt::rt::Argument::<'_>::new_debug::<anchor_lang::prelude::Pubkey>(move _797) -> [return: bb309, unwind: bb406];
    }

    bb309: {
        StorageDead(_797);
        _795 = [move _796];
        StorageDead(_796);
        _794 = &_795;
        _793 = &(*_794);
        _792 = move _793 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_793);
        _787 = Arguments::<'_>::new_v1(move _788, move _792) -> [return: bb310, unwind: bb406];
    }

    bb310: {
        StorageDead(_792);
        StorageDead(_788);
        _786 = format(move _787) -> [return: bb311, unwind: bb406];
    }

    bb311: {
        StorageDead(_787);
        StorageDead(_798);
        StorageDead(_795);
        StorageDead(_794);
        StorageDead(_790);
        _785 = move _786;
        StorageDead(_786);
        _784 = &_785;
        _783 = &(*_784);
        _782 = <String as Deref>::deref(move _783) -> [return: bb312, unwind: bb375];
    }

    bb312: {
        _781 = &(*_782);
        StorageDead(_783);
        _780 = solana_program::log::sol_log(move _781) -> [return: bb313, unwind: bb375];
    }

    bb313: {
        StorageDead(_781);
        drop(_785) -> [return: bb314, unwind: bb406];
    }

    bb314: {
        StorageDead(_785);
        StorageDead(_784);
        StorageDead(_782);
        StorageDead(_780);
        StorageLive(_799);
        _799 = _750;
        StorageLive(_800);
        StorageLive(_801);
        _801 = &mut (*_8);
        _800 = <RefMut<'_, state::VaultState> as DerefMut>::deref_mut(move _801) -> [return: bb315, unwind: bb406];
    }

    bb315: {
        StorageDead(_801);
        ((*_800).34: anchor_lang::prelude::Pubkey) = move _799;
        StorageDead(_799);
        StorageDead(_800);
        _127 = const ();
        StorageDead(_750);
        goto -> bb355;
    }

    bb316: {
        StorageLive(_802);
        StorageLive(_803);
        StorageLive(_804);
        StorageLive(_805);
        _805 = &(*_3);
        _804 = <u64 as BorshDeserialize>::try_from_slice(move _805) -> [return: bb317, unwind: bb406];
    }

    bb317: {
        StorageDead(_805);
        _803 = <std::result::Result<u64, std::io::Error> as Try>::branch(move _804) -> [return: bb318, unwind: bb406];
    }

    bb318: {
        StorageDead(_804);
        _806 = discriminant(_803);
        switchInt(move _806) -> [0: bb319, 1: bb320, otherwise: bb6];
    }

    bb319: {
        StorageLive(_810);
        _810 = ((_803 as Continue).0: u64);
        _802 = _810;
        StorageDead(_810);
        _984 = discriminant(_803);
        StorageDead(_803);
        StorageLive(_811);
        StorageLive(_812);
        StorageLive(_813);
        StorageLive(_814);
        StorageLive(_815);
        StorageLive(_816);
        StorageLive(_817);
        StorageLive(_818);
        StorageLive(_819);
        StorageLive(_820);
        StorageLive(_821);
        _910 = const _;
        _821 = &(*_910);
        _820 = &(*_821);
        _819 = move _820 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_820);
        StorageLive(_823);
        StorageLive(_824);
        StorageLive(_825);
        StorageLive(_826);
        StorageLive(_827);
        StorageLive(_828);
        StorageLive(_829);
        StorageLive(_830);
        StorageLive(_831);
        _831 = &(*_8);
        _830 = <RefMut<'_, state::VaultState> as Deref>::deref(move _831) -> [return: bb322, unwind: bb406];
    }

    bb320: {
        StorageLive(_807);
        _807 = move ((_803 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_809);
        _809 = move _807;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _809) -> [return: bb321, unwind: bb411];
    }

    bb321: {
        StorageDead(_809);
        StorageDead(_807);
        _990 = discriminant(_803);
        StorageDead(_803);
        StorageDead(_802);
        goto -> bb362;
    }

    bb322: {
        StorageDead(_831);
        _829 = &((*_830).12: u64);
        _828 = &(*_829);
        _827 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _828) -> [return: bb323, unwind: bb406];
    }

    bb323: {
        StorageDead(_828);
        _826 = [move _827];
        StorageDead(_827);
        _825 = &_826;
        _824 = &(*_825);
        _823 = move _824 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_824);
        _818 = Arguments::<'_>::new_v1(move _819, move _823) -> [return: bb324, unwind: bb406];
    }

    bb324: {
        StorageDead(_823);
        StorageDead(_819);
        _817 = format(move _818) -> [return: bb325, unwind: bb406];
    }

    bb325: {
        StorageDead(_818);
        StorageDead(_830);
        StorageDead(_829);
        StorageDead(_826);
        StorageDead(_825);
        StorageDead(_821);
        _816 = move _817;
        StorageDead(_817);
        _815 = &_816;
        _814 = &(*_815);
        _813 = <String as Deref>::deref(move _814) -> [return: bb326, unwind: bb374];
    }

    bb326: {
        _812 = &(*_813);
        StorageDead(_814);
        _811 = solana_program::log::sol_log(move _812) -> [return: bb327, unwind: bb374];
    }

    bb327: {
        StorageDead(_812);
        drop(_816) -> [return: bb328, unwind: bb406];
    }

    bb328: {
        StorageDead(_816);
        StorageDead(_815);
        StorageDead(_813);
        StorageDead(_811);
        StorageLive(_832);
        StorageLive(_833);
        StorageLive(_834);
        StorageLive(_835);
        StorageLive(_836);
        StorageLive(_837);
        StorageLive(_838);
        StorageLive(_839);
        StorageLive(_840);
        StorageLive(_841);
        StorageLive(_842);
        _909 = const _;
        _842 = &(*_909);
        _841 = &(*_842);
        _840 = move _841 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_841);
        StorageLive(_844);
        StorageLive(_845);
        StorageLive(_846);
        StorageLive(_847);
        StorageLive(_848);
        StorageLive(_849);
        StorageLive(_850);
        _850 = &_802;
        _849 = &(*_850);
        _848 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _849) -> [return: bb329, unwind: bb406];
    }

    bb329: {
        StorageDead(_849);
        _847 = [move _848];
        StorageDead(_848);
        _846 = &_847;
        _845 = &(*_846);
        _844 = move _845 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_845);
        _839 = Arguments::<'_>::new_v1(move _840, move _844) -> [return: bb330, unwind: bb406];
    }

    bb330: {
        StorageDead(_844);
        StorageDead(_840);
        _838 = format(move _839) -> [return: bb331, unwind: bb406];
    }

    bb331: {
        StorageDead(_839);
        StorageDead(_850);
        StorageDead(_847);
        StorageDead(_846);
        StorageDead(_842);
        _837 = move _838;
        StorageDead(_838);
        _836 = &_837;
        _835 = &(*_836);
        _834 = <String as Deref>::deref(move _835) -> [return: bb332, unwind: bb373];
    }

    bb332: {
        _833 = &(*_834);
        StorageDead(_835);
        _832 = solana_program::log::sol_log(move _833) -> [return: bb333, unwind: bb373];
    }

    bb333: {
        StorageDead(_833);
        drop(_837) -> [return: bb334, unwind: bb406];
    }

    bb334: {
        StorageDead(_837);
        StorageDead(_836);
        StorageDead(_834);
        StorageDead(_832);
        StorageLive(_851);
        _851 = _802;
        StorageLive(_852);
        StorageLive(_853);
        _853 = &mut (*_8);
        _852 = <RefMut<'_, state::VaultState> as DerefMut>::deref_mut(move _853) -> [return: bb335, unwind: bb406];
    }

    bb335: {
        StorageDead(_853);
        ((*_852).12: u64) = move _851;
        StorageDead(_851);
        StorageDead(_852);
        _127 = const ();
        StorageDead(_802);
        goto -> bb355;
    }

    bb336: {
        StorageDead(_857);
        _855 = <std::result::Result<u64, std::io::Error> as Try>::branch(move _856) -> [return: bb337, unwind: bb406];
    }

    bb337: {
        StorageDead(_856);
        _858 = discriminant(_855);
        switchInt(move _858) -> [0: bb338, 1: bb339, otherwise: bb6];
    }

    bb338: {
        StorageLive(_862);
        _862 = ((_855 as Continue).0: u64);
        _854 = _862;
        StorageDead(_862);
        _986 = discriminant(_855);
        StorageDead(_855);
        StorageLive(_863);
        StorageLive(_864);
        StorageLive(_865);
        StorageLive(_866);
        StorageLive(_867);
        StorageLive(_868);
        StorageLive(_869);
        StorageLive(_870);
        StorageLive(_871);
        StorageLive(_872);
        StorageLive(_873);
        _908 = const _;
        _873 = &(*_908);
        _872 = &(*_873);
        _871 = move _872 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_872);
        StorageLive(_875);
        StorageLive(_876);
        StorageLive(_877);
        StorageLive(_878);
        StorageLive(_879);
        StorageLive(_880);
        StorageLive(_881);
        StorageLive(_882);
        StorageLive(_883);
        _883 = &(*_8);
        _882 = <RefMut<'_, state::VaultState> as Deref>::deref(move _883) -> [return: bb341, unwind: bb406];
    }

    bb339: {
        StorageLive(_859);
        _859 = move ((_855 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_861);
        _861 = move _859;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _861) -> [return: bb340, unwind: bb410];
    }

    bb340: {
        StorageDead(_861);
        StorageDead(_859);
        _988 = discriminant(_855);
        StorageDead(_855);
        StorageDead(_854);
        goto -> bb362;
    }

    bb341: {
        StorageDead(_883);
        _881 = &((*_882).33: u64);
        _880 = &(*_881);
        _879 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _880) -> [return: bb342, unwind: bb406];
    }

    bb342: {
        StorageDead(_880);
        _878 = [move _879];
        StorageDead(_879);
        _877 = &_878;
        _876 = &(*_877);
        _875 = move _876 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_876);
        _870 = Arguments::<'_>::new_v1(move _871, move _875) -> [return: bb343, unwind: bb406];
    }

    bb343: {
        StorageDead(_875);
        StorageDead(_871);
        _869 = format(move _870) -> [return: bb344, unwind: bb406];
    }

    bb344: {
        StorageDead(_870);
        StorageDead(_882);
        StorageDead(_881);
        StorageDead(_878);
        StorageDead(_877);
        StorageDead(_873);
        _868 = move _869;
        StorageDead(_869);
        _867 = &_868;
        _866 = &(*_867);
        _865 = <String as Deref>::deref(move _866) -> [return: bb345, unwind: bb372];
    }

    bb345: {
        _864 = &(*_865);
        StorageDead(_866);
        _863 = solana_program::log::sol_log(move _864) -> [return: bb346, unwind: bb372];
    }

    bb346: {
        StorageDead(_864);
        drop(_868) -> [return: bb347, unwind: bb406];
    }

    bb347: {
        StorageDead(_868);
        StorageDead(_867);
        StorageDead(_865);
        StorageDead(_863);
        StorageLive(_884);
        StorageLive(_885);
        StorageLive(_886);
        StorageLive(_887);
        StorageLive(_888);
        StorageLive(_889);
        StorageLive(_890);
        StorageLive(_891);
        StorageLive(_892);
        StorageLive(_893);
        StorageLive(_894);
        _907 = const _;
        _894 = &(*_907);
        _893 = &(*_894);
        _892 = move _893 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_893);
        StorageLive(_896);
        StorageLive(_897);
        StorageLive(_898);
        StorageLive(_899);
        StorageLive(_900);
        StorageLive(_901);
        StorageLive(_902);
        _902 = &_854;
        _901 = &(*_902);
        _900 = core::fmt::rt::Argument::<'_>::new_debug::<u64>(move _901) -> [return: bb348, unwind: bb406];
    }

    bb348: {
        StorageDead(_901);
        _899 = [move _900];
        StorageDead(_900);
        _898 = &_899;
        _897 = &(*_898);
        _896 = move _897 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_897);
        _891 = Arguments::<'_>::new_v1(move _892, move _896) -> [return: bb349, unwind: bb406];
    }

    bb349: {
        StorageDead(_896);
        StorageDead(_892);
        _890 = format(move _891) -> [return: bb350, unwind: bb406];
    }

    bb350: {
        StorageDead(_891);
        StorageDead(_902);
        StorageDead(_899);
        StorageDead(_898);
        StorageDead(_894);
        _889 = move _890;
        StorageDead(_890);
        _888 = &_889;
        _887 = &(*_888);
        _886 = <String as Deref>::deref(move _887) -> [return: bb351, unwind: bb371];
    }

    bb351: {
        _885 = &(*_886);
        StorageDead(_887);
        _884 = solana_program::log::sol_log(move _885) -> [return: bb352, unwind: bb371];
    }

    bb352: {
        StorageDead(_885);
        drop(_889) -> [return: bb353, unwind: bb406];
    }

    bb353: {
        StorageDead(_889);
        StorageDead(_888);
        StorageDead(_886);
        StorageDead(_884);
        StorageLive(_903);
        _903 = _854;
        StorageLive(_904);
        StorageLive(_905);
        _905 = &mut (*_8);
        _904 = <RefMut<'_, state::VaultState> as DerefMut>::deref_mut(move _905) -> [return: bb354, unwind: bb406];
    }

    bb354: {
        StorageDead(_905);
        ((*_904).33: u64) = move _903;
        StorageDead(_903);
        StorageDead(_904);
        _127 = const ();
        StorageDead(_854);
        goto -> bb355;
    }

    bb355: {
        StorageDead(_127);
        StorageLive(_906);
        _906 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _906);
        StorageDead(_906);
        drop(_44) -> [return: bb356, unwind: bb407];
    }

    bb356: {
        StorageDead(_44);
        StorageDead(_38);
        StorageDead(_18);
        drop(_9) -> [return: bb357, unwind: bb408];
    }

    bb357: {
        StorageDead(_9);
        StorageDead(_8);
        drop(_4) -> [return: bb358, unwind: bb409];
    }

    bb358: {
        StorageDead(_4);
        goto -> bb370;
    }

    bb359: {
        StorageDead(_311);
        goto -> bb362;
    }

    bb360: {
        StorageDead(_189);
        goto -> bb362;
    }

    bb361: {
        StorageDead(_129);
        goto -> bb362;
    }

    bb362: {
        StorageDead(_127);
        goto -> bb364;
    }

    bb363: {
        _1016 = discriminant(_96);
        _946 = const false;
        _947 = const false;
        StorageDead(_96);
        StorageDead(_95);
        StorageDead(_91);
        StorageDead(_88);
        StorageDead(_85);
        StorageDead(_84);
        goto -> bb364;
    }

    bb364: {
        drop(_44) -> [return: bb366, unwind: bb407];
    }

    bb365: {
        _1020 = discriminant(_53);
        _948 = const false;
        _949 = const false;
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_48);
        StorageDead(_45);
        goto -> bb366;
    }

    bb366: {
        StorageDead(_44);
        StorageDead(_38);
        goto -> bb367;
    }

    bb367: {
        StorageDead(_18);
        drop(_9) -> [return: bb368, unwind: bb408];
    }

    bb368: {
        StorageDead(_9);
        StorageDead(_8);
        drop(_4) -> [return: bb369, unwind: bb409];
    }

    bb369: {
        StorageDead(_4);
        goto -> bb370;
    }

    bb370: {
        return;
    }

    bb371 (cleanup): {
        drop(_889) -> [return: bb406, unwind terminate(cleanup)];
    }

    bb372 (cleanup): {
        drop(_868) -> [return: bb406, unwind terminate(cleanup)];
    }

    bb373 (cleanup): {
        drop(_837) -> [return: bb406, unwind terminate(cleanup)];
    }

    bb374 (cleanup): {
        drop(_816) -> [return: bb406, unwind terminate(cleanup)];
    }

    bb375 (cleanup): {
        drop(_785) -> [return: bb406, unwind terminate(cleanup)];
    }

    bb376 (cleanup): {
        drop(_764) -> [return: bb406, unwind terminate(cleanup)];
    }

    bb377 (cleanup): {
        drop(_733) -> [return: bb406, unwind terminate(cleanup)];
    }

    bb378 (cleanup): {
        drop(_712) -> [return: bb406, unwind terminate(cleanup)];
    }

    bb379 (cleanup): {
        drop(_681) -> [return: bb406, unwind terminate(cleanup)];
    }

    bb380 (cleanup): {
        drop(_660) -> [return: bb406, unwind terminate(cleanup)];
    }

    bb381 (cleanup): {
        drop(_627) -> [return: bb385, unwind terminate(cleanup)];
    }

    bb382 (cleanup): {
        drop(_599) -> [return: bb385, unwind terminate(cleanup)];
    }

    bb383 (cleanup): {
        drop(_600) -> [return: bb385, unwind terminate(cleanup)];
    }

    bb384 (cleanup): {
        drop(_613) -> [return: bb385, unwind terminate(cleanup)];
    }

    bb385 (cleanup): {
        drop(_589) -> [return: bb406, unwind terminate(cleanup)];
    }

    bb386 (cleanup): {
        drop(_572) -> [return: bb406, unwind terminate(cleanup)];
    }

    bb387 (cleanup): {
        drop(_551) -> [return: bb406, unwind terminate(cleanup)];
    }

    bb388 (cleanup): {
        drop(_520) -> [return: bb406, unwind terminate(cleanup)];
    }

    bb389 (cleanup): {
        drop(_499) -> [return: bb406, unwind terminate(cleanup)];
    }

    bb390 (cleanup): {
        drop(_468) -> [return: bb406, unwind terminate(cleanup)];
    }

    bb391 (cleanup): {
        drop(_447) -> [return: bb406, unwind terminate(cleanup)];
    }

    bb392 (cleanup): {
        drop(_416) -> [return: bb406, unwind terminate(cleanup)];
    }

    bb393 (cleanup): {
        drop(_395) -> [return: bb406, unwind terminate(cleanup)];
    }

    bb394 (cleanup): {
        drop(_364) -> [return: bb406, unwind terminate(cleanup)];
    }

    bb395 (cleanup): {
        drop(_343) -> [return: bb406, unwind terminate(cleanup)];
    }

    bb396 (cleanup): {
        drop(_326) -> [return: bb406, unwind terminate(cleanup)];
    }

    bb397 (cleanup): {
        drop(_294) -> [return: bb406, unwind terminate(cleanup)];
    }

    bb398 (cleanup): {
        drop(_273) -> [return: bb406, unwind terminate(cleanup)];
    }

    bb399 (cleanup): {
        drop(_242) -> [return: bb406, unwind terminate(cleanup)];
    }

    bb400 (cleanup): {
        drop(_221) -> [return: bb406, unwind terminate(cleanup)];
    }

    bb401 (cleanup): {
        drop(_204) -> [return: bb406, unwind terminate(cleanup)];
    }

    bb402 (cleanup): {
        drop(_164) -> [return: bb406, unwind terminate(cleanup)];
    }

    bb403 (cleanup): {
        drop(_143) -> [return: bb406, unwind terminate(cleanup)];
    }

    bb404 (cleanup): {
        drop(_113) -> [return: bb406, unwind terminate(cleanup)];
    }

    bb405 (cleanup): {
        drop(_70) -> [return: bb406, unwind terminate(cleanup)];
    }

    bb406 (cleanup): {
        drop(_44) -> [return: bb407, unwind terminate(cleanup)];
    }

    bb407 (cleanup): {
        drop(_9) -> [return: bb408, unwind terminate(cleanup)];
    }

    bb408 (cleanup): {
        drop(_4) -> [return: bb409, unwind terminate(cleanup)];
    }

    bb409 (cleanup): {
        resume;
    }

    bb410 (cleanup): {
        _1026 = discriminant(_855);
        goto -> bb406;
    }

    bb411 (cleanup): {
        _1027 = discriminant(_803);
        goto -> bb406;
    }

    bb412 (cleanup): {
        _1028 = discriminant(_751);
        goto -> bb406;
    }

    bb413 (cleanup): {
        _1029 = discriminant(_699);
        goto -> bb406;
    }

    bb414 (cleanup): {
        _1030 = discriminant(_647);
        goto -> bb406;
    }

    bb415 (cleanup): {
        _1031 = discriminant(_538);
        goto -> bb406;
    }

    bb416 (cleanup): {
        _1032 = discriminant(_486);
        goto -> bb406;
    }

    bb417 (cleanup): {
        _1033 = discriminant(_434);
        goto -> bb406;
    }

    bb418 (cleanup): {
        _1034 = discriminant(_382);
        goto -> bb406;
    }

    bb419 (cleanup): {
        _1035 = discriminant(_312);
        goto -> bb406;
    }

    bb420 (cleanup): {
        _1036 = discriminant(_260);
        goto -> bb406;
    }

    bb421 (cleanup): {
        _1037 = discriminant(_190);
        goto -> bb406;
    }

    bb422 (cleanup): {
        _1038 = discriminant(_130);
        goto -> bb406;
    }

    bb423 (cleanup): {
        _1039 = discriminant(_85);
        goto -> bb424;
    }

    bb424 (cleanup): {
        _1040 = discriminant(_96);
        goto -> bb406;
    }

    bb425 (cleanup): {
        _1042 = discriminant(_45);
        goto -> bb426;
    }

    bb426 (cleanup): {
        _1043 = discriminant(_53);
        goto -> bb407;
    }

    bb427 (cleanup): {
        _1044 = discriminant(_24);
        goto -> bb407;
    }

    bb428 (cleanup): {
        _1045 = discriminant(_10);
        goto -> bb408;
    }
}
