// MIR for `handlers::handler_update_admin::process` before PreCodegen

fn handlers::handler_update_admin::process(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_update_admin::UpdateAdmin<'_>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: &mut std::cell::RefMut<'_, state::VaultState>;
    let mut _3: std::cell::RefMut<'_, state::VaultState>;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::VaultState>>;
    let mut _5: std::result::Result<std::cell::RefMut<'_, state::VaultState>, anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::AccountLoader<'_, state::VaultState>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _11: std::cell::RefMut<'_, state::VaultState>;
    let _12: ();
    let mut _13: &str;
    let _14: &str;
    let mut _15: &std::string::String;
    let _16: &std::string::String;
    let _17: std::string::String;
    let mut _19: std::fmt::Arguments<'_>;
    let mut _20: &[&str];
    let mut _21: &[&str; 2];
    let _22: &[&str; 2];
    let _23: [&str; 2];
    let mut _24: &[core::fmt::rt::Argument<'_>];
    let mut _25: &[core::fmt::rt::Argument<'_>; 2];
    let _26: &[core::fmt::rt::Argument<'_>; 2];
    let _27: [core::fmt::rt::Argument<'_>; 2];
    let mut _28: core::fmt::rt::Argument<'_>;
    let mut _29: &anchor_lang::prelude::Pubkey;
    let _30: &anchor_lang::prelude::Pubkey;
    let _31: &state::VaultState;
    let mut _32: &std::cell::RefMut<'_, state::VaultState>;
    let mut _33: core::fmt::rt::Argument<'_>;
    let mut _34: &anchor_lang::prelude::Pubkey;
    let _35: &anchor_lang::prelude::Pubkey;
    let _36: &state::VaultState;
    let mut _37: &std::cell::RefMut<'_, state::VaultState>;
    let mut _38: anchor_lang::prelude::Pubkey;
    let mut _39: &state::VaultState;
    let mut _40: &std::cell::RefMut<'_, state::VaultState>;
    let mut _41: &mut state::VaultState;
    let mut _42: &mut std::cell::RefMut<'_, state::VaultState>;
    let mut _43: ();
    let mut _45: &mut handlers::handler_update_admin::UpdateAdmin<'_>;
    let mut _46: isize;
    let mut _47: isize;
    let mut _48: isize;
    let mut _49: isize;
    let mut _50: isize;
    scope 1 {
        debug vault => _2;
        let _18: std::string::String;
        let mut _44: &[&str; 2];
        scope 6 {
            debug res => _18;
        }
    }
    scope 2 {
        debug residual => _8;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _11;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _45 = deref_copy (_1.1: &mut handlers::handler_update_admin::UpdateAdmin<'_>);
        _6 = &((*_45).1: anchor_lang::prelude::AccountLoader<'_, state::VaultState>);
        _5 = anchor_lang::prelude::AccountLoader::<'_, state::VaultState>::load_mut(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<RefMut<'_, state::VaultState>, anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb22];
    }

    bb2: {
        StorageDead(_5);
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = move ((_4 as Continue).0: std::cell::RefMut<'_, state::VaultState>);
        _3 = move _11;
        StorageDead(_11);
        _2 = &mut _3;
        _46 = discriminant(_4);
        StorageDead(_4);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _44 = const _;
        _22 = &(*_44);
        _21 = &(*_22);
        _20 = move _21 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_21);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = &(*_2);
        _31 = <RefMut<'_, state::VaultState> as Deref>::deref(move _32) -> [return: bb7, unwind: bb21];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_10);
        _10 = move _8;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _10) -> [return: bb6, unwind: bb23];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        _48 = discriminant(_4);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb19;
    }

    bb7: {
        StorageDead(_32);
        _30 = &((*_31).0: anchor_lang::prelude::Pubkey);
        _29 = &(*_30);
        _28 = core::fmt::rt::Argument::<'_>::new_display::<anchor_lang::prelude::Pubkey>(move _29) -> [return: bb8, unwind: bb21];
    }

    bb8: {
        StorageDead(_29);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &(*_2);
        _36 = <RefMut<'_, state::VaultState> as Deref>::deref(move _37) -> [return: bb9, unwind: bb21];
    }

    bb9: {
        StorageDead(_37);
        _35 = &((*_36).25: anchor_lang::prelude::Pubkey);
        _34 = &(*_35);
        _33 = core::fmt::rt::Argument::<'_>::new_display::<anchor_lang::prelude::Pubkey>(move _34) -> [return: bb10, unwind: bb21];
    }

    bb10: {
        StorageDead(_34);
        _27 = [move _28, move _33];
        StorageDead(_33);
        StorageDead(_28);
        _26 = &_27;
        _25 = &(*_26);
        _24 = move _25 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_25);
        _19 = Arguments::<'_>::new_v1(move _20, move _24) -> [return: bb11, unwind: bb21];
    }

    bb11: {
        StorageDead(_24);
        StorageDead(_20);
        _18 = format(move _19) -> [return: bb12, unwind: bb21];
    }

    bb12: {
        StorageDead(_19);
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_22);
        _17 = move _18;
        StorageDead(_18);
        _16 = &_17;
        _15 = &(*_16);
        _14 = <String as Deref>::deref(move _15) -> [return: bb13, unwind: bb20];
    }

    bb13: {
        _13 = &(*_14);
        StorageDead(_15);
        _12 = solana_program::log::sol_log(move _13) -> [return: bb14, unwind: bb20];
    }

    bb14: {
        StorageDead(_13);
        drop(_17) -> [return: bb15, unwind: bb21];
    }

    bb15: {
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_12);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &(*_2);
        _39 = <RefMut<'_, state::VaultState> as Deref>::deref(move _40) -> [return: bb16, unwind: bb21];
    }

    bb16: {
        StorageDead(_40);
        _38 = ((*_39).25: anchor_lang::prelude::Pubkey);
        StorageLive(_41);
        StorageLive(_42);
        _42 = &mut (*_2);
        _41 = <RefMut<'_, state::VaultState> as DerefMut>::deref_mut(move _42) -> [return: bb17, unwind: bb21];
    }

    bb17: {
        StorageDead(_42);
        ((*_41).0: anchor_lang::prelude::Pubkey) = move _38;
        StorageDead(_38);
        StorageDead(_41);
        StorageDead(_39);
        StorageLive(_43);
        _43 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _43);
        StorageDead(_43);
        drop(_3) -> [return: bb18, unwind: bb22];
    }

    bb18: {
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb19;
    }

    bb19: {
        return;
    }

    bb20 (cleanup): {
        drop(_17) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_3) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        resume;
    }

    bb23 (cleanup): {
        _50 = discriminant(_4);
        goto -> bb22;
    }
}
